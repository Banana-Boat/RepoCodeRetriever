{"index": 341, "repo": "phoenix-core-5.1.3", "des": "Parse node corresponding to FloorFunction.", "code": "Class FloorParseNode {\n\tExpression create(List<Expression> children, StatementContext context); // Entry point for parser to instantiate compiled representation of built-in function\n\tboolean evalToNullIfParamIsNull(StatementContext context, int index); // When rounding off decimals, user need not specify the scale.\n\tstatic Expression getFloorExpression(List<Expression> children);\n}"}
{"index": 18140, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Defines the context needed to call the TypeSafeActivator", "code": "Interface ActivationContext {\n\tMetadata getMetadata(); // Access the mapping metadata\n\tSessionFactoryServiceRegistry getServiceRegistry(); // Access the ServiceRegistry specific to the SessionFactory being built.\n\tSessionFactoryImplementor getSessionFactory(); // Access the SessionFactory being built to trigger this BV activation\n\tjava.util.Set<ValidationMode> getValidationModes(); // Access the requested validation mode(s).\n}"}
{"index": 13379, "repo": "shiro-core-2.0.0-alpha-2", "des": "A simple implementation of the MutablePrincipalCollection interface that tracks principals internally by storing them in a LinkedHashMap.", "code": "public class SimplePrincipalCollection extends Object implements MutablePrincipalCollection {\n\tvoid add(Object principal, String realmName); // Adds the given principal to this collection.\n\tvoid addAll(Collection principals, String realmName); // Adds all of the principals in the given collection to this collection.\n\tvoid addAll(PrincipalCollection principals); // Adds all of the principals from the given principal collection to this collection.\n\tList asList(); // Returns a single Subject's principals retrieved from all configured Realms as a List, or an empty List if there are not any principals.\n\tSet asSet(); // Returns a single Subject's principals retrieved from all configured Realms as a Set, or an empty Set if there are not any principals.\n\t<T> Collection<T> byType(Class<T> type); // Returns all principals assignable from the specified type, or an empty Collection if no principals of that type are contained.\n\tvoid clear(); // Removes all Principals in this collection.\n\tboolean equals(Object o);\n\tCollection fromRealm(String realmName); // Returns a single Subject's principals retrieved from the specified Realm only as a Collection, or an empty Collection if there are not any principals from that realm.\n\tObject getPrimaryPrincipal(); // Returns the first available principal from any of the Realm principals, or null if there are no principals yet.\n\tprotected Collection getPrincipalsLazy(String realmName);\n\tSet<String> getRealmNames(); // Returns the realm names that this collection has principals for.\n\tboolean isEmpty(); // Returns true if this collection is empty, false otherwise.\n\tIterator iterator();\n\t<T> T oneByType(Class<T> type); // Returns the first discovered principal assignable from the specified type, or null if there are none of the specified type.\n}"}
{"index": 2049, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ScalarArithmeticColumn.", "code": "Class DoubleScalarSubtractLongColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 16176, "repo": "spring-data-cassandra-4.1.2", "des": "Aggregator of multiple violations for convenience when verifying id interfaces.", "code": "public class IdInterfaceExceptions extends MappingException {\n\tvoid add(IdInterfaceException e);\n\tint getCount(); // Returns the number of exceptions aggregated in this exception.\n\tCollection<MappingException> getExceptions(); // Returns a list of the IdInterfaceExceptions aggregated within.\n\tString getIdInterfaceName();\n\tString getMessage();\n\tCollection<String> getMessages(); // Returns a list of the IdInterfaceException messages aggregated within.\n}"}
{"index": 12031, "repo": "jena-core-4.9.0", "des": "Graph operation for wrapping a base graph and leaving it unchanged while recording all the attempted updates for later access.", "code": "public class Delta extends CompositionBase implements Graph {\n\tvoid close(); // Close this graph.\n\tGraph getAdditions(); // Answer the graph of all triples added.\n\tCapabilities getCapabilities(); // Answer the capabilities of this graph; the default is an AllCapabilities object (the same one each time, not that it matters - Capabilities should be immutable).\n\tGraph getDeletions(); // Answer the graph of all triples removed.\n\tint graphBaseSize();\n\tvoid performAdd(Triple t); // Add the triple to the graph, ie add it to the additions, remove it from the removals.\n\tvoid performDelete(Triple t); // Remove the triple, ie, remove it from the adds, add it to the removals.\n}"}
{"index": 3751, "repo": "kafka-streams-3.5.0", "des": "A key-value store that stores multiple record versions per key, and supports timestamp-based retrieval operations to return the latest record (per key) as of a specified timestamp.", "code": "Interface VersionedKeyValueStore<K,V> {\n\tVersionedRecord<V> delete(K key, long timestamp); // Delete the value associated with this key from the store, at the specified timestamp (if there is such a value), and return the deleted value.\n\tVersionedRecord<V> get(K key); // Get the current (i.e., latest by timestamp) record associated with this key.\n\tVersionedRecord<V> get(K key, long asOfTimestamp); // Get the record associated with this key as of the specified timestamp (i.e., the existing record with the largest timestamp not exceeding the provided timestamp bound).\n\tlong put(K key, V value, long timestamp); // Add a new record version associated with the specified key and timestamp.\n}"}
{"index": 13022, "repo": "spring-aop-6.0.11", "des": "Simple Pointcut that looks for a specific annotation being present on a class or method.", "code": "public class AnnotationMatchingPointcut extends Object implements Pointcut {\n\tboolean equals(Object other);\n\tstatic AnnotationMatchingPointcut forClassAnnotation(Class<? extends Annotation> annotationType); // Factory method for an AnnotationMatchingPointcut that matches for the specified annotation at the class level.\n\tstatic AnnotationMatchingPointcut forMethodAnnotation(Class<? extends Annotation> annotationType); // Factory method for an AnnotationMatchingPointcut that matches for the specified annotation at the method level.\n\tClassFilter getClassFilter(); // Return the ClassFilter for this pointcut.\n\tMethodMatcher getMethodMatcher(); // Return the MethodMatcher for this pointcut.\n}"}
{"index": 1634, "repo": "pdfbox-3.0.0-beta1", "des": "This class with handle some simple XML operations.", "code": "Class XMLUtil {\n\tstatic String getNodeValue(Element node); // This will get the text value of an element.\n\tstatic Document parse(InputStream is); // This will parse an XML stream and create a DOM document.\n\tstatic Document parse(InputStream is, boolean nsAware); // This will parse an XML stream and create a DOM document.\n}"}
{"index": 14367, "repo": "wicket-core-10.0.0-M1", "des": "Default implementation of a page manager.", "code": "public class PageManager extends Object implements IPageManager {\n\tvoid clear(); // Clear all pages.\n\tprotected IPageContext createPageContext(); // Factory method for an IPageContext, returns a DefaultPageContext by default.\n\tvoid destroy(); // Destroy when application is destroyed.\n\tvoid detach(); // Detach at end of request.\n\tvoid end(); // End the request.\n\tIManageablePage getPage(int pageId); // Get a page\n\tIPageStore getPageStore(); // Get the storage of pages, optional.\n\tvoid removePage(IManageablePage page); // Remove a page\n\tboolean supportsVersioning(); // Is versioning of pages supported, see IPageStore.supportsVersioning().\n\tvoid touchPage(IManageablePage page); // Add a page.\n\tvoid untouchPage(IManageablePage page); // Marks page as non-changed.\n}"}
{"index": 18151, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.", "code": "Interface CharacterStream {\n\tjava.io.Reader asReader(); // Provides access to the underlying data as a Reader.\n\tjava.lang.String asString(); // Provides access to the underlying data as a String.\n\tlong getLength(); // Retrieve the number of characters.\n\tvoid release(); // Release any underlying resources.\n}"}
{"index": 2645, "repo": "mahout-core-14.1", "des": "Open hash map from char keys to long values.", "code": "Class OpenCharLongHashMap {\n\tlong adjustOrPutValue(char key, long newValue, long incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(char key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(long value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(CharProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(CharLongProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tlong get(char key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(char key);\n\tprotected int indexOfKey(char key);\n\tprotected int indexOfValue(long value);\n\tIterator<OpenCharLongHashMap.MapElement> iterator();\n\tvoid keys(CharArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(CharLongProcedure condition, CharArrayList keyList, LongArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(char key, long value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(char key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(LongArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 11079, "repo": "spring-shell-core-3.1.2", "des": "Interface for string input spec builder.", "code": "public interface StringInputSpec extends BaseInputSpec<StringInputSpec> {\n\tComponentFlow.Builder and(); // Build and return parent builder.\n\tStringInputSpec defaultValue(String defaultValue); // Sets a default value.\n\tStringInputSpec maskCharacter(Character maskCharacter); // Sets a mask character.\n\tStringInputSpec name(String name); // Sets a name.\n\tStringInputSpec next(Function<StringInput.StringInputContext,String> next); // Define a function which may return id of a next component to go.\n\tStringInputSpec postHandler(Consumer<StringInput.StringInputContext> handler); // Adds a post-run context handler.\n\tStringInputSpec preHandler(Consumer<StringInput.StringInputContext> handler); // Adds a pre-run context handler.\n\tStringInputSpec renderer(Function<StringInput.StringInputContext,List<org.jline.utils.AttributedString>> renderer); // Sets a renderer function.\n\tStringInputSpec resultMode(ResultMode resultMode); // Sets a result mode.\n\tStringInputSpec resultValue(String resultValue); // Sets a result value.\n\tStringInputSpec storeResult(boolean store); // Automatically stores result from a StringInput.StringInputContext into ComponentContext with key given to builder.\n\tStringInputSpec template(String location); // Sets a default renderer template location.\n}"}
{"index": 15470, "repo": "spring-batch-core-5.0.2", "des": "Enumeration representing the status of an execution.", "code": "public enum BatchStatus extends Enum<BatchStatus> {\n\tboolean isGreaterThan(BatchStatus other);\n\tboolean isLessThan(BatchStatus other);\n\tboolean isLessThanOrEqualTo(BatchStatus other);\n\tboolean isRunning(); // Convenience method to decide if a status indicates that work is in progress.\n\tboolean isUnsuccessful(); // Convenience method to decide if a status indicates execution was unsuccessful.\n\tstatic BatchStatus match(String value); // Find a BatchStatus that matches the beginning of the given value.\n\tstatic BatchStatus max(BatchStatus status1, BatchStatus status2); // Convenience method to return the higher value status of the statuses passed to the method.\n\tBatchStatus upgradeTo(BatchStatus other); // Method used to move status values through their logical progression, and override less severe failures with more severe ones.\n\tstatic BatchStatus valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic BatchStatus[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 6517, "repo": "exoplayer-core-2.9.6", "des": "Stores HTTP request properties (aka HTTP headers) and provides methods to modify the headers in a thread safe way to avoid the potential of creating snapshots of an inconsistent or unintended state.", "code": "Class HttpDataSource.RequestProperties {\n\tvoid clear(); // Clears all request properties.\n\tvoid clearAndSet(java.util.Map<java.lang.String,java.lang.String> properties); // Removes all properties previously existing and sets the keys and values of the map.\n\tjava.util.Map<java.lang.String,java.lang.String> getSnapshot(); // Gets a snapshot of the request properties.\n\tvoid remove(java.lang.String name); // Removes a request property by name.\n\tvoid set(java.util.Map<java.lang.String,java.lang.String> properties); // Sets the keys and values contained in the map.\n\tvoid set(java.lang.String name, java.lang.String value); // Sets the specified property value for the specified name.\n}"}
{"index": 7856, "repo": "cassandra-all-4.1.2", "des": "Unfiltered is the common class for the main constituent of an unfiltered partition.", "code": "Interface Unfiltered {\n\tClusteringPrefix<?> clustering();\n\tvoid digest(Digest digest); // Digest the atom using the provided Digest.\n\tboolean hasInvalidDeletions(); // Do a quick validation of the deletions of the unfiltered (if any)\n\tboolean isEmpty();\n\tdefault boolean isRangeTombstoneMarker();\n\tdefault boolean isRow();\n\tUnfiltered.Kind kind(); // The kind of the atom: either row or range tombstone marker.\n\tjava.lang.String toString(TableMetadata metadata);\n\tjava.lang.String toString(TableMetadata metadata, boolean fullDetails);\n\tjava.lang.String toString(TableMetadata metadata, boolean includeClusterKeys, boolean fullDetails);\n\tvoid validateData(TableMetadata metadata); // Validate the data of this atom.\n}"}
{"index": 8878, "repo": "hbase-server-3.0.0-alpha-4", "des": "A compaction policy determines how to select files for compaction, how to compact them, and how to generate the compacted files.", "code": "Class CompactionPolicy {\n\tCompactionConfiguration getConf(); // Returns The current compaction configuration settings.\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf); // Inform the policy that some configuration has been change, so cached value should be updated it any.\n\tabstract boolean shouldPerformMajorCompaction(Collection<HStoreFile> filesToCompact);\n\tabstract boolean throttleCompaction(long compactionSize);\n}"}
{"index": 14834, "repo": "spring-data-commons-3.1.2", "des": "Interface containing the configurable options for the Spring Data repository subsystem.", "code": "public interface RepositoryConfigurationSource {\n\tString generateBeanName(BeanDefinition beanDefinition); // Returns a name for the beanDefinition.\n\tOptional<String> getAttribute(String name); // Returns the value for the String attribute with the given name.\n\t<T> Optional<T> getAttribute(String name, Class<T> type); // Returns the value for the attribute with the given name and type.\n\tStreamable<String> getBasePackages(); // Returns the base packages the repository interfaces shall be found under.\n\tBootstrapMode getBootstrapMode(); // Defines the repository BootstrapMode to be used.\n\tStreamable<BeanDefinition> getCandidates(ResourceLoader loader); // Returns the source BeanDefinitions of the repository interfaces to create repository instances for.\n\tStreamable<TypeFilter> getExcludeFilters(); // Return the TypeFilters to define which types to exclude when scanning for repositories or repository implementations.\n\tOptional<String> getNamedQueryLocation();\n\tOptional<Object> getQueryLookupStrategyKey(); // Returns the QueryLookupStrategy.Key to define how query methods shall be resolved.\n\tOptional<String> getRepositoryBaseClassName(); // Returns the name of the repository base class to be used or Optional.empty() if the store specific defaults shall be applied.\n\tOptional<String> getRepositoryFactoryBeanClassName(); // Returns the name of the repository factory bean class or Optional.empty() if not defined in the source.\n\tOptional<String> getRepositoryImplementationPostfix(); // Returns the configured postfix to be used for looking up custom implementation classes.\n\tdefault <T> T getRequiredAttribute(String name, Class<T> type); // Returns the attribute value for the attribute of the given name.\n\tString getResourceDescription(); // Returns a human readable description of the repository configuration source for error reporting purposes.\n\tObject getSource(); // Returns the actual source object that the configuration originated from.\n\tImplementationDetectionConfiguration toImplementationDetectionConfiguration(MetadataReaderFactory factory); // Returns the ImplementationDetectionConfiguration to be used to scan for custom implementations of the repository instances to be created from this RepositoryConfigurationSource.\n\tboolean usesExplicitFilters(); // Returns whether the configuration uses explicit filtering to scan for repository types.\n}"}
{"index": 15224, "repo": "spring-boot-3.1.1", "des": "Settings that can be applied when creating a ClientHttpRequestFactory.", "code": "public record ClientHttpRequestFactorySettings(Duration connectTimeout, Duration readTimeout, Boolean bufferRequestBody, SslBundle sslBundle) extends Record {\n\tBoolean bufferRequestBody(); // Returns the value of the bufferRequestBody record component.\n\tDuration connectTimeout(); // Returns the value of the connectTimeout record component.\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tDuration readTimeout(); // Returns the value of the readTimeout record component.\n\tSslBundle sslBundle(); // Returns the value of the sslBundle record component.\n\tClientHttpRequestFactorySettings withBufferRequestBody(Boolean bufferRequestBody); // Return a new ClientHttpRequestFactorySettings instance with an updated buffer request body setting.\n\tClientHttpRequestFactorySettings withConnectTimeout(Duration connectTimeout); // Return a new ClientHttpRequestFactorySettings instance with an updated connect timeout setting .\n\tClientHttpRequestFactorySettings withReadTimeout(Duration readTimeout); // Return a new ClientHttpRequestFactorySettings instance with an updated read timeout setting.\n\tClientHttpRequestFactorySettings withSslBundle(SslBundle sslBundle); // Return a new ClientHttpRequestFactorySettings instance with an updated SSL bundle setting.\n}"}
{"index": 5623, "repo": "org.apache.karaf.main-2.4.4", "des": "This class represents a native code specification.", "code": "Interface NativeCodeSpecification {\n\tNativeCodeDescription[] getPossibleSuppliers(); // Returns the list of possible suppliers to this native code specification.\n\tboolean isOptional(); // Returns whether or not this native code specification is optional.\n}"}
{"index": 10355, "repo": "spring-core-6.0.11", "des": "Callback optionally used to filter fields to be operated on by a field callback.", "code": "@FunctionalInterface public static interface ReflectionUtils.FieldFilter {\n\tdefault ReflectionUtils.FieldFilter and(ReflectionUtils.FieldFilter next); // Create a composite filter based on this filter and the provided filter.\n\tboolean matches(Field field); // Determine whether the given field matches.\n}"}
{"index": 16397, "repo": "spring-integration-http-6.1.2", "des": "An HttpMessageConverter implementation that delegates to an instance of AllEncompassingFormHttpMessageConverter while adding the capability to read multipart/form-data content in an HTTP request.", "code": "public class MultipartAwareFormHttpMessageConverter extends Object implements org.springframework.http.converter.HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>> {\n\tboolean canRead(Class<?> clazz, org.springframework.http.MediaType mediaType);\n\tboolean canWrite(Class<?> clazz, org.springframework.http.MediaType mediaType);\n\tList<org.springframework.http.MediaType> getSupportedMediaTypes();\n\torg.springframework.util.MultiValueMap<String,?> read(Class<? extends org.springframework.util.MultiValueMap<String,?>> clazz, org.springframework.http.HttpInputMessage inputMessage);\n\tvoid setCharset(Charset charset); // Set the character set used for writing form data.\n\tvoid setMultipartFileReader(MultipartFileReader<?> multipartFileReader); // Specify the MultipartFileReader to use when reading MultipartFile content.\n\tvoid write(org.springframework.util.MultiValueMap<String,?> map, org.springframework.http.MediaType contentType, org.springframework.http.HttpOutputMessage outputMessage);\n}"}
{"index": 17491, "repo": "plc4j-api-0.10.0", "des": "Information about connection capabilities.", "code": "public interface PlcConnectionMetadata {\n\tboolean canBrowse(); // Indicates that the connection supports browsing.\n\tboolean canRead(); // Indicates that the connection supports reading.\n\tboolean canSubscribe(); // Indicates that the connection supports subscription.\n\tboolean canWrite(); // Indicates that the connection supports writing.\n}"}
{"index": 17825, "repo": "spring-web-6.0.11", "des": "Prepare the body of a multipart request, resulting in a MultiValueMap<String, HttpEntity>.", "code": "public final class MultipartBodyBuilder extends Object {\n\t<T, P extends Publisher<T>>MultipartBodyBuilder.PartBuilder asyncPart(String name, P publisher, Class<T> elementClass); // Add a part from Publisher content.\n\t<T, P extends Publisher<T>>MultipartBodyBuilder.PartBuilder asyncPart(String name, P publisher, org.springframework.core.ParameterizedTypeReference<T> typeReference); // Variant of asyncPart(String, Publisher, Class) with a ParameterizedTypeReference for the element type information.\n\torg.springframework.util.MultiValueMap<String,HttpEntity<?>> build(); // Return a MultiValueMap with the configured parts.\n\tMultipartBodyBuilder.PartBuilder part(String name, Object part); // Add a part where the Object may be: String -- form field Resource -- file part Object -- content to be encoded (e.g.\n\tMultipartBodyBuilder.PartBuilder part(String name, Object part, MediaType contentType); // Variant of part(String, Object) that also accepts a MediaType.\n}"}
{"index": 1089, "repo": "ignite-core-2.15.0", "des": "Update counter implementation for MVCC mode.", "code": "Class PartitionUpdateCounterMvccImpl {\n\tPartitionUpdateCounter copy();\n\tprotected PartitionUpdateCounterTrackingImpl createInstance();\n\tlong reserve(long delta); // Increment HWM by delta.\n\tlong reserved(); // Returns HWM.\n}"}
{"index": 1721, "repo": "samza-api-1.8.0", "des": "TaskCoordinators are provided to the process methods of StreamTask implementations to allow the user code to request actions from the Samza framework, including committing the current checkpoints to configured org.", "code": "Interface TaskCoordinator {\n\tvoid commit(TaskCoordinator.RequestScope scope); // Requests that Samza should write out a checkpoint, from which a task can restart after failure.\n\tvoid shutdown(TaskCoordinator.RequestScope scope); // Requests that the container should be shut down.\n}"}
{"index": 7378, "repo": "mahout-math-0.13.0", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface IntComparator {\n\tint compare(int o1, int o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 13185, "repo": "spring-test-6.0.11", "des": "Defines modes which determine how the context cache is cleared when @DirtiesContext is used in a test whose context is configured as part of a hierarchy via @ContextHierarchy.", "code": "public static enum DirtiesContext.HierarchyMode extends Enum<DirtiesContext.HierarchyMode> {\n\tstatic DirtiesContext.HierarchyMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic DirtiesContext.HierarchyMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 15023, "repo": "spring-vault-core-3.0.4", "des": "SecretId type encapsulating how the secretId is actually obtained.", "code": "public static interface AppRoleAuthenticationOptions.SecretId {\n\tstatic AppRoleAuthenticationOptions.SecretId absent(); // Create a AppRoleAuthenticationOptions.SecretId that represents an absent secretId.\n\tstatic AppRoleAuthenticationOptions.SecretId provided(String secretId); // Create a AppRoleAuthenticationOptions.SecretId that encapsulates a static secretId.\n\tstatic AppRoleAuthenticationOptions.SecretId pull(VaultToken initialToken); // Create a AppRoleAuthenticationOptions.SecretId that obtains its value using pull-mode, specifying a initial token.\n\tstatic AppRoleAuthenticationOptions.SecretId wrapped(VaultToken initialToken); // Create a AppRoleAuthenticationOptions.SecretId object that obtains its value from unwrapping a response using the initial token from a Cubbyhole.\n}"}
{"index": 14140, "repo": "wicket-core-10.0.0-M1", "des": "A border component has associated markup which is drawn and determines placement of markup and/or components nested within the border component.", "code": "public abstract class Border extends WebMarkupContainer implements IComponentResolver, IQueueRegion {\n\tBorder add(Component... children); // This is for all components which have been added to the markup like this:\n\tprotected void addDequeuedComponent(Component component, ComponentTag tag); // Adds a dequeued component to this container.\n\tBorder addOrReplace(Component... children); // Replaces a child component of this container with another or just adds it in case no child with the same id existed yet.\n\tBorder addToBorder(Component... children); // Adds children components to the Border itself\n\tprotected DequeueTagAction canDequeueTag(ComponentTag tag); // Checks if this container can dequeue a child represented by the specified tag.\n\tComponent findComponentToDequeue(ComponentTag tag); // Queries this container to find a child that can be dequeued that matches the specified tag.\n\tfinal Border.BorderBodyContainer getBodyContainer(); // Returns the border body container.\n\tIMarkupFragment getMarkup(Component child); // Search for the child markup in the file associated with the Border.\n\tIMarkupFragment getRegionMarkup(); // Returns the markup inside <wicket:border> tag.\n\tprotected IMarkupSourcingStrategy newMarkupSourcingStrategy(); // If Component.getMarkupSourcingStrategy() returns null, this method will be called.\n\tprotected void onConfigure(); // Called on all components before any component is rendered.\n\tBorder queue(Component... components); // Queues one or more components to be dequeued later.\n\tBorder queueToBorder(Component... children); // Queues children components to the Border itself\n\tBorder remove(String id); // Removes the given component\n\tBorder remove(Component component); // Removes a component from the children identified by the component.getId()\n\tBorder removeAll(); // Removes all children from this container.\n\tBorder removeFromBorder(Component child); // Removes child from the Border itself\n\tBorder replace(Component replacement); // Replaces a child component of this container with another\n\tBorder replaceInBorder(Component component); // Replaces component in the Border itself\n\tComponent resolve(MarkupContainer container, MarkupStream markupStream, ComponentTag tag); // Try to resolve a component.\n}"}
{"index": 17868, "repo": "spring-web-6.0.11", "des": "Event raised when a request is handled within an ApplicationContext.", "code": "public class RequestHandledEvent extends org.springframework.context.ApplicationEvent {\n\tString getDescription(); // Return a full description of this event, involving all available context data.\n\tThrowable getFailureCause(); // Return the cause of failure, if any.\n\tlong getProcessingTimeMillis(); // Return the processing time of the request in milliseconds.\n\tString getSessionId(); // Return the id of the HTTP session, if any.\n\tString getShortDescription(); // Return a short description of this event, only involving the most important context data.\n\tString getUserName(); // Return the name of the user that was associated with the request (usually the UserPrincipal).\n\tboolean wasFailure(); // Return whether the request failed.\n}"}
{"index": 10014, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Enums for submitted applications fields.", "code": "Enum ApplicationsReport.SubmittedField {\n\tprotected String getName();\n\tstatic ApplicationsReport.SubmittedField valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ApplicationsReport.SubmittedField[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11466, "repo": "spring-restdocs-core-3.0.0", "des": "Abstract TemplatedSnippet subclass that provides a base for snippets that document parameters from a request sent to a RESTful resource.", "code": "public abstract class AbstractParametersSnippet extends TemplatedSnippet {\n\tprotected Map<String,Object> createModel(Operation operation); // Create the model that should be used during template rendering to document the given operation.\n\tprotected Map<String,Object> createModelForDescriptor(ParameterDescriptor descriptor); // Returns a model for the given descriptor.\n\tprotected abstract Set<String> extractActualParameters(Operation operation); // Extracts the names of the parameters that were present in the given operation.\n\tprotected final Map<String,ParameterDescriptor> getParameterDescriptors(); // Returns a Map of ParameterDescriptors that will be used to generate the documentation key by their ParameterDescriptor.getName().\n\tprotected final boolean isIgnoreUndocumentedParameters(); // Returns whether to ignore undocumented parameters.\n\tprotected abstract void verificationFailed(Set<String> undocumentedParameters, Set<String> missingParameters); // Called when the documented parameters do not match the actual parameters.\n}"}
{"index": 14131, "repo": "wicket-core-10.0.0-M1", "des": "AttributeModifier that appends the given value, rather than replace it.", "code": "public class AttributeAppender extends AttributeModifier {\n\tString getSeparator(); // Gets the separator used by attribute appenders and prependers.\n\tprotected Serializable newValue(String currentValue, String appendValue); // Gets the value that should replace the current attribute value.\n\tAttributeAppender setSeparator(String separator); // Sets the separator used by attribute appenders and prependers.\n}"}
{"index": 17229, "repo": "spring-xml-4.0.5", "des": "Convenient utility methods for loading of Schema objects, performing standard handling of input streams.", "code": "public abstract class SchemaLoaderUtils extends Object {\n\tstatic String getSystemId(org.springframework.core.io.Resource resource); // Retrieves the URL from the given resource as System ID.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource[] resources, String schemaLanguage); // Load schema from the given resource.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource resource, String schemaLanguage); // Load schema from the given resource.\n}"}
{"index": 13420, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required to establish a connection to a Kafka service.", "code": "public interface KafkaConnectionDetails extends ConnectionDetails {\n\tdefault List<String> getAdminBootstrapNodes(); // Returns the list of bootstrap nodes used for the admin.\n\tList<String> getBootstrapServers(); // Returns the list of bootstrap nodes.\n\tdefault List<String> getConsumerBootstrapServers(); // Returns the list of bootstrap nodes used for consumers.\n\tdefault List<String> getProducerBootstrapServers(); // Returns the list of bootstrap nodes used for producers.\n\tdefault List<String> getStreamsBootstrapServers(); // Returns the list of bootstrap nodes used for Kafka Streams.\n}"}
{"index": 7656, "repo": "cassandra-all-4.1.2", "des": "Serializer for handling FWD_FRM message parameters.", "code": "Class InetAddressAndPort.FwdFrmSerializer {\n\tInetAddressAndPort deserialize(DataInputPlus in, int version); // Deserialize into the specified DataInputStream instance.\n\tInetAddressAndPort pre40DeserializeWithLength(DataInputPlus in, int version, int length);\n\tvoid serialize(InetAddressAndPort endpoint, DataOutputPlus out, int version); // Serialize the specified type into the specified DataOutputStream instance.\n\tlong serializedSize(InetAddressAndPort from, int version); // Calculate serialized size of object without actually serializing.\n}"}
{"index": 16947, "repo": "spring-integration-ip-6.1.2", "des": "Tcp outbound channel adapter using a TcpConnection to send data - if the connection factory is a server factory, the TcpListener owns the connections.", "code": "public class TcpSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler implements TcpSender, org.springframework.integration.support.management.ManageableLifecycle, ClientModeCapable {\n\tvoid addNewConnection(TcpConnection connection); // When we are using sockets owned by a TcpListener, this method is called each time a new connection is made.\n\tprotected TcpConnection doWrite(org.springframework.messaging.Message<?> message); // Method that actually does the write.\n\tprotected ConnectionFactory getClientConnectionFactory();\n\tString getComponentType();\n\tprotected Map<String,TcpConnection> getConnections();\n\tlong getRetryInterval();\n\tprotected ConnectionFactory getServerConnectionFactory();\n\tvoid handleMessageInternal(org.springframework.messaging.Message<?> message); // Writes the message payload to the underlying socket, using the specified message format.\n\tboolean isClientMode();\n\tboolean isClientModeConnected();\n\tboolean isRunning();\n\tprotected TcpConnection obtainConnection(org.springframework.messaging.Message<?> message);\n\tprotected void onInit();\n\tvoid removeDeadConnection(TcpConnection connection); // When we are using sockets owned by a TcpListener, this method is called each time a connection is closed.\n\tvoid retryConnection(); // Immediately attempt to establish the connection.\n\tvoid setClientMode(boolean isClientMode);\n\tvoid setConnectionFactory(AbstractConnectionFactory connectionFactory); // Sets the client or server connection factory; for this (an outbound adapter), if the factory is a server connection factory, the sockets are owned by a receiving channel adapter and this adapter is used to send replies.\n\tvoid setRetryInterval(long retryInterval);\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 13945, "repo": "spring-webflux-6.0.11", "des": "Assist with creating and configuring a static resources handler.", "code": "public class ResourceHandlerRegistration extends Object {\n\tResourceHandlerRegistration addResourceLocations(String... resourceLocations); // Add one or more resource locations from which to serve static content.\n\tprotected String[] getPathPatterns(); // Returns the URL path patterns for the resource handler.\n\tprotected ResourceWebHandler getRequestHandler(); // Returns a ResourceWebHandler instance.\n\tResourceChainRegistration resourceChain(boolean cacheResources); // Configure a chain of resource resolvers and transformers to use.\n\tResourceChainRegistration resourceChain(boolean cacheResources, org.springframework.cache.Cache cache); // Configure a chain of resource resolvers and transformers to use.\n\tResourceHandlerRegistration setCacheControl(org.springframework.http.CacheControl cacheControl); // Specify the CacheControl which should be used by the resource handler.\n\tvoid setMediaTypes(Map<String,org.springframework.http.MediaType> mediaTypes); // Add mappings between file extensions extracted from the filename of static Resources and the media types to use for the response.\n\tResourceHandlerRegistration setOptimizeLocations(boolean optimizeLocations); // Set whether to optimize the specified locations through an existence check on startup, filtering non-existing directories upfront so that they do not have to be checked on every resource access.\n\tResourceHandlerRegistration setUseLastModified(boolean useLastModified); // Set whether the Resource.lastModified() information should be used to drive HTTP responses.\n}"}
{"index": 13785, "repo": "spring-webmvc-6.0.11", "des": "Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring MVC including setting cache headers optimized for efficient loading in a web browser.", "code": "public class ResourceHandlerRegistry extends Object {\n\tResourceHandlerRegistration addResourceHandler(String... pathPatterns); // Add a resource handler to serve static resources.\n\tprotected AbstractHandlerMapping getHandlerMapping(); // Return a handler mapping with the mapped resource handlers; or null in case of no registrations.\n\tboolean hasMappingForPattern(String pathPattern); // Whether a resource handler has already been registered for the given path pattern.\n\tResourceHandlerRegistry setOrder(int order); // Specify the order to use for resource handling relative to other HandlerMappings configured in the Spring MVC application context.\n}"}
{"index": 4510, "repo": "beam-sdks-java-core-2.49.0", "des": "Concrete implementations of this class allow creation of schema service objects that vend a Schema for a specific type.", "code": "Interface SchemaProvider {\n\t<T> @Nullable SerializableFunction<Row,T> fromRowFunction(TypeDescriptor<T> typeDescriptor); // Given a type, returns a function that converts from a Row object to that type.\n\t<T> @Nullable Schema schemaFor(TypeDescriptor<T> typeDescriptor); // Lookup a schema for the given type.\n\t<T> @Nullable SerializableFunction<T,Row> toRowFunction(TypeDescriptor<T> typeDescriptor); // Given a type, return a function that converts that type to a Row object If no schema exists, returns null.\n}"}
{"index": 1928, "repo": "hadoop-hdfs-3.3.6", "des": "Manage name-to-serial-number maps for various string tables.", "code": "Enum SerialNumberManager {\n\tint getSerialNumber(String u);\n\tString getString(int id);\n\tString getString(int id, SerialNumberManager.StringTable stringTable);\n\tstatic SerialNumberManager.StringTable getStringTable();\n\tstatic SerialNumberManager.StringTable newStringTable(int size, int bits);\n\tstatic SerialNumberManager valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SerialNumberManager[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3996, "repo": "zookeeper-3.8.2", "des": "This class implements the TxnLog interface.", "code": "Class FileTxnLog {\n\tboolean append(TxnHeader hdr, Record txn); // append an entry to the transaction log\n\tboolean append(TxnHeader hdr, Record txn, TxnDigest digest); // Append a request to the transaction log with a digset\n\tvoid close(); // close all the open file handles\n\tvoid commit(); // commit the logs.\n\tlong getCurrentLogSize(); // Return the current on-disk size of log size.\n\tlong getDbId(); // the dbid of this transaction database\n\tlong getLastLoggedZxid(); // get the last zxid that was logged in the transaction logs\n\tstatic File[] getLogFiles(File[] logDirList, long snapshotZxid); // Find the log file that starts at, or just before, the snapshot.\n\tlong getTotalLogSize(); // Gets the total size of all log files\n\tlong getTxnLogSyncElapsedTime();\n\tboolean isForceSync(); // the forceSync value.\n\tprotected Checksum makeChecksumAlgorithm(); // creates a checksum algorithm to be used\n\tTxnLog.TxnIterator read(long zxid); // start reading all the transactions from the given zxid\n\tTxnLog.TxnIterator read(long zxid, boolean fastForward); // start reading all the transactions from the given zxid.\n\tvoid rollLog(); // rollover the current log file to a new one.\n\tstatic void setPreallocSize(long size); // method to allow setting preallocate size of log file to pad the file.\n\tvoid setServerStats(ServerStats serverStats); // Setter for ServerStats to monitor fsync threshold exceed\n\tvoid setTotalLogSize(long size); // Sets the total size of all log files\n\tstatic void setTxnLogSizeLimit(long size); // Set log size limit\n\tboolean truncate(long zxid); // truncate the current transaction logs\n}"}
{"index": 7507, "repo": "cassandra-all-4.1.2", "des": "QueryPager that takes care of fetching the pages for aggregation queries.", "code": "Class AggregationQueryPager {\n\tReadExecutionController executionController(); // Starts a new read operation.\n\tPartitionIterator fetchPage(int pageSize, ConsistencyLevel consistency, ClientState clientState, long queryStartNanoTime); // Fetches the next page.\n\tPartitionIterator fetchPageInternal(int pageSize, ReadExecutionController executionController); // Fetches the next page internally (in other, this does a local query).\n\tboolean isExhausted(); // Whether or not this pager is exhausted, i.e.\n\tint maxRemaining(); // The maximum number of cells/CQL3 row that we may still have to return.\n\tPagingState state(); // Get the current state of the pager.\n\tQueryPager withUpdatedLimit(DataLimits newLimits); // Creates a new QueryPager that use the new limits.\n}"}
{"index": 10248, "repo": "spring-core-6.0.11", "des": "Default implementation of the ResourceLoader interface.", "code": "public class DefaultResourceLoader extends Object implements ResourceLoader {\n\tvoid addProtocolResolver(ProtocolResolver resolver); // Register the given resolver with this resource loader, allowing for additional protocols to be handled.\n\tvoid clearResourceCaches(); // Clear all resource caches in this resource loader.\n\tClassLoader getClassLoader(); // Return the ClassLoader to load class path resources with.\n\tCollection<ProtocolResolver> getProtocolResolvers(); // Return the collection of currently registered protocol resolvers, allowing for introspection as well as modification.\n\tResource getResource(String location); // Return a Resource handle for the specified resource location.\n\tprotected Resource getResourceByPath(String path); // Return a Resource handle for the resource at the given path.\n\t<T> Map<Resource,T> getResourceCache(Class<T> valueType); // Obtain a cache for the given value type, keyed by Resource.\n\tvoid setClassLoader(ClassLoader classLoader); // Specify the ClassLoader to load class path resources with, or null for using the thread context class loader at the time of actual resource access.\n}"}
{"index": 1498, "repo": "pdfbox-3.0.0-beta1", "des": "A check box toggles between two states, on and off.", "code": "Class PDCheckBox {\n\tvoid check(); // Checks the check box.\n\tString getOnValue(); // Get the value which sets the check box to the On state.\n\tboolean isChecked(); // This will tell if this radio button is currently checked or not.\n\tvoid unCheck(); // Unchecks the check box.\n}"}
{"index": 10582, "repo": "groovy-all-4.0.13", "des": "An event used to propagate metaclass updates", "code": "public class MetaClassRegistryChangeEvent extends EventObject {\n\tClass getClassToUpdate(); // Get the class that is updated.\n\tObject getInstance(); // Returns the instance this event is for.\n\tMetaClass getNewMetaClass(); // Get the new MetaClass\n\tMetaClass getOldMetaClass(); // Get the old MetaClass\n\tMetaClassRegistry getRegistry(); // Get the MetaClassRegistry that originates this change\n\tboolean isPerInstanceMetaClassChange(); // Determines if this event is for a change for a single instance or all instances of the Class.\n}"}
{"index": 7998, "repo": "commons-jcs3-core-3.1", "des": "Configuration for the RemoteHttpCacheServer.", "code": "Class RemoteHttpCacheServerAttributes {\n\tboolean isAllowClusterGet(); // Should gets from non-cluster clients be allowed to get from other remote auxiliaries.\n\tboolean isLocalClusterConsistency(); // Should cluster updates be propagated to the locals\n\tvoid setAllowClusterGet(boolean r); // Should we try to get from other cluster servers if we don't find the items locally.\n\tvoid setLocalClusterConsistency(boolean r); // Should cluster updates be propagated to the locals\n}"}
{"index": 18233, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "ManagedBean implementation for cases where we have been handed an actual instance to use.", "code": "Class ProvidedInstanceManagedBeanImpl<T> {\n\tjava.lang.Class<T> getBeanClass(); // The bean Java type\n\tT getBeanInstance(); // The bean reference\n}"}
{"index": 17662, "repo": "spring-web-6.0.11", "des": "Common base class for ServerHttpRequest implementations.", "code": "public abstract class AbstractServerHttpRequest extends Object implements ServerHttpRequest {\n\torg.springframework.util.MultiValueMap<String,HttpCookie> getCookies(); // Return a read-only map of cookies sent by the client.\n\tHttpHeaders getHeaders(); // Return the headers of this message.\n\tString getId(); // Return an id that represents the underlying connection, if available, or the request for the purpose of correlating log messages.\n\tHttpMethod getMethod(); // Return the HTTP method of the request.\n\tabstract <T> T getNativeRequest(); // Return the underlying server response.\n\tRequestPath getPath(); // Returns a structured representation of the full request path up to but not including the query.\n\torg.springframework.util.MultiValueMap<String,String> getQueryParams(); // Return a read-only map with parsed and decoded query parameter values.\n\tSslInfo getSslInfo(); // Return the SSL session information if the request has been transmitted over a secure protocol including SSL certificates, if available.\n\tURI getURI(); // Return the URI of the request (including a query string if any, but only if it is well-formed for a URI representation).\n\tprotected abstract org.springframework.util.MultiValueMap<String,HttpCookie> initCookies(); // Obtain the cookies from the underlying \"native\" request and adapt those to an HttpCookie map.\n\tprotected String initId(); // Obtain the request id to use, or null in which case the Object identity of this request instance is used.\n\tprotected String initLogPrefix(); // Subclasses can override this to provide the prefix to use for log messages.\n\tprotected org.springframework.util.MultiValueMap<String,String> initQueryParams(); // A method for parsing of the query into name-value pairs.\n\tprotected abstract SslInfo initSslInfo(); // Obtain SSL session information from the underlying \"native\" request.\n}"}
{"index": 8605, "repo": "avro-1.11.2", "des": "An abstract Encoder for Avro's binary encoding.", "code": "Class BinaryEncoder {\n\tabstract int bytesBuffered(); // Returns the number of bytes currently buffered by this encoder.\n\tvoid setItemCount(long itemCount); // Call this method before writing a batch of items in an array or a map.\n\tvoid startItem(); // Start a new item of an array or map.\n\tvoid writeArrayEnd(); // Call this method to finish writing an array.\n\tvoid writeArrayStart(); // Call this method to start writing an array.\n\tvoid writeBytes(byte[] bytes, int start, int len); // Write a byte string.\n\tvoid writeBytes(ByteBuffer bytes); // Write a byte string.\n\tvoid writeEnum(int e); // Writes an enumeration.\n\tvoid writeIndex(int unionIndex); // Call this method to write the tag of a union.\n\tvoid writeMapEnd(); // Call this method to terminate the inner-most, currently-opened map.\n\tvoid writeMapStart(); // Call this to start a new map.\n\tvoid writeNull(); // \"Writes\" a null value.\n\tvoid writeString(String string); // Write a Unicode character string.\n\tvoid writeString(Utf8 utf8); // Write a Unicode character string.\n\tprotected abstract void writeZero(); // Write a zero byte to the underlying output.\n}"}
{"index": 2747, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "Convert Map/Reduce output and write it to an HBase table.", "code": "Class TableOutputFormat<KEY> {\n\tvoid checkOutputSpecs(org.apache.hadoop.mapreduce.JobContext context); // Checks if the output table exists and is enabled.\n\torg.apache.hadoop.conf.Configuration getConf();\n\torg.apache.hadoop.mapreduce.OutputCommitter getOutputCommitter(org.apache.hadoop.mapreduce.TaskAttemptContext context); // Returns the output committer.\n\torg.apache.hadoop.mapreduce.RecordWriter<KEY,Mutation> getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext context); // Creates a new record writer.\n\tvoid setConf(org.apache.hadoop.conf.Configuration otherConf);\n}"}
{"index": 344, "repo": "phoenix-core-5.1.3", "des": "Central place where we keep track of all the global client phoenix metrics.", "code": "Enum GlobalClientMetrics {\n\tvoid decrement();\n\tGlobalMetric getMetric();\n\tstatic Collection<GlobalMetric> getMetrics();\n\tMetricType getMetricType();\n\tvoid increment();\n\tstatic boolean isMetricsEnabled();\n\tvoid update(long value);\n\tstatic GlobalClientMetrics valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic GlobalClientMetrics[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14324, "repo": "wicket-core-10.0.0-M1", "des": "Model that makes working with detachable models a breeze.", "code": "public abstract class LoadableDetachableModel<T> extends Object implements IModel<T> {\n\tvoid detach(); // Detaches model after use.\n\tfinal T getObject(); // Gets the model object.\n\tfinal boolean isAttached(); // Gets the attached status of this model instance\n\tprotected abstract T load(); // Loads and returns the (temporary) model object.\n\tstatic <T> LoadableDetachableModel<T> of(org.danekja.java.util.function.serializable.SerializableSupplier<T> getter); // Create a LoadableDetachableModel for the given supplier.\n\tprotected void onAttach(); // Attaches to the current request.\n\tprotected void onDetach(); // Detaches from the current request.\n\tvoid setObject(T object); // Manually loads the model with the specified object.\n}"}
{"index": 15846, "repo": "camel-api-4.0.0-RC1", "des": "The last error that happened during changing the route lifecycle, i.e.", "code": "public interface RouteError {\n\tThrowable getException(); // Gets the error.\n\tRouteError.Phase getPhase(); // Gets the phase associated with the error.\n\tboolean isUnhealthy(); // Whether the route is regarded as unhealthy.\n}"}
{"index": 4266, "repo": "beam-sdks-java-core-2.49.0", "des": "A Coder that has no component Coders or other configuration.", "code": "Class AtomicCoder<T> {\n\tboolean equals(@Nullable java.lang.Object other); // .\n\tjava.util.List<? extends Coder<?>> getCoderArguments(); // If this is a Coder for a parameterized type, returns the list of Coders being used for each of the parameters in the same order they appear within the parameterized type's type signature.\n\tjava.util.List<? extends Coder<?>> getComponents(); // Returns the list of Coders that are components of this Coder.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 16202, "repo": "spring-data-cassandra-4.1.2", "des": "Utility class to prepare a SimpleStatement and bind values associated with the statement to a BoundStatement.", "code": "public static class ReactiveCassandraTemplate.PreparedStatementHandler extends Object implements ReactiveCassandraTemplate.ReactivePreparedStatementHandler {\n\tcom.datastax.oss.driver.api.core.cql.BoundStatement bindValues(com.datastax.oss.driver.api.core.cql.PreparedStatement ps); // Bind parameter values on the given PreparedStatement.\n\treactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.PreparedStatement> createPreparedStatement(ReactiveSession session); // Create a statement in this session.\n\tString getCql(); // Return the CQL string for this object, i.e. typically the CQL used for creating statements.\n}"}
{"index": 6039, "repo": "jackson-databind-2.15.2", "des": "Simple helper class used to keep track of collection of Jackson Annotations associated with annotatable things (methods, constructors, classes).", "code": "Class AnnotationMap {\n\tprotected boolean _add(Annotation ann);\n\tboolean add(Annotation ann); // Method called to add specified annotation in the Map.\n\tboolean addIfNotPresent(Annotation ann); // Method called to add specified annotation in the Map, but only if it didn't yet exist.\n\tIterable<Annotation> annotations();\n\t<A extends Annotation>A get(Class<A> cls); // Main access method used to find value for given annotation.\n\tboolean has(Class<?> cls);\n\tboolean hasOneOf(Class<? extends Annotation>[] annoClasses); // Helper method that can be used for a \"bulk\" check to see if at least one of given annotation types is included within this map.\n\tstatic AnnotationMap merge(AnnotationMap primary, AnnotationMap secondary);\n\tstatic AnnotationMap of(Class<?> type, Annotation value);\n\tint size(); // Returns number of annotation entries in this collection.\n}"}
{"index": 4294, "repo": "beam-sdks-java-core-2.49.0", "des": "Indicates the reason that Coder inference failed.", "code": "Enum CannotProvideCoderException.ReasonCode {\n\tstatic CannotProvideCoderException.ReasonCode valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic CannotProvideCoderException.ReasonCode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2901, "repo": "amqp-client-5.18.0", "des": "Ready-to-use instances and builder for SocketChannelConfigurator.", "code": "Class SocketChannelConfigurators {\n\tstatic SocketChannelConfigurators.Builder builder(); // Builder to configure and creates a SocketChannelConfigurator instance.\n\tstatic SocketChannelConfigurator defaultConfigurator(); // The default SocketChannelConfigurator that disables Nagle's algorithm.\n\tstatic SocketChannelConfigurator disableNagleAlgorithm(); // SocketChannelConfigurator that disables Nagle's algorithm.\n}"}
{"index": 10939, "repo": "spring-data-redis-3.1.2", "des": "ZINTERSTORE/ZUNIONSTORE command parameters.", "code": "public static class ReactiveZSetCommands.ZAggregateStoreCommand extends ReactiveRedisConnection.KeyCommand {\n\tReactiveZSetCommands.ZAggregateStoreCommand aggregateUsing(Aggregate aggregateFunction); // Applies a specific Aggregate function.\n\tReactiveZSetCommands.ZAggregateStoreCommand applyWeights(List<Double> weights); // Applies the List of weights.\n\tReactiveZSetCommands.ZAggregateStoreCommand applyWeights(Weights weights); // Applies the Weights.\n\tOptional<Aggregate> getAggregateFunction();\n\tList<ByteBuffer> getSourceKeys();\n\tList<Double> getWeights();\n\tstatic ReactiveZSetCommands.ZAggregateStoreCommand sets(List<ByteBuffer> keys); // Creates a new ReactiveZSetCommands.ZAggregateStoreCommand given a List of keys.\n\tReactiveZSetCommands.ZAggregateStoreCommand storeAs(ByteBuffer key); // Applies the key at which the result is stored.\n}"}
{"index": 6350, "repo": "curator-framework-5.5.0", "des": "Utility class to handle ZNode names when using CreateBuilderMain.", "code": "Class ProtectedUtils {\n\tstatic Optional<String> extractProtectedId(String znodeName); // Extracts protectedId in case the provided name is protected\n\tstatic String getProtectedPrefix(String protectedId); // Provides a prefix to be prepended to a ZNode name when protected.\n\tstatic boolean isProtectedZNode(String znodeName); // Utility method to determine if a given ZNode name starts with Curator's generated protected prefix.\n\tstatic String normalize(String znodeName); // Utility method to remove Curator's generated protected prefix if present\n\tstatic String normalizePath(String path); // Utility method to provide a path removing Curator's generated protected prefix if present in the ZNode name\n\tstatic String toProtectedZNode(String znodeName, String protectedId); // Converts a given ZNode name to protected format\n\tstatic String toProtectedZNodePath(String path, String protectedId); // Converts a given path to protected format\n}"}
{"index": 6107, "repo": "jackson-databind-2.15.2", "des": "New Datatype-specific configuration options related to handling of Enum types.", "code": "Enum EnumFeature {\n\tboolean enabledByDefault();\n\tboolean enabledIn(int flags);\n\tint featureIndex(); // Internal index used for efficient storage and index; no user serviceable contents inside!\n\tint getMask();\n\tstatic EnumFeature valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic EnumFeature[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16639, "repo": "spring-beans-6.0.11", "des": "BeanPostProcessor implementation that invokes annotated init and destroy methods.", "code": "public class InitDestroyAnnotationBeanPostProcessor extends Object implements DestructionAwareBeanPostProcessor, MergedBeanDefinitionPostProcessor, BeanRegistrationAotProcessor, org.springframework.core.PriorityOrdered, Serializable {\n\tvoid addDestroyAnnotationType(Class<? extends Annotation> destroyAnnotationType); // Add a destroy annotation to check for, indicating destruction methods to call when the context is shutting down.\n\tvoid addInitAnnotationType(Class<? extends Annotation> initAnnotationType); // Add an init annotation to check for, indicating initialization methods to call after configuration of a bean.\n\tint getOrder();\n\tObject postProcessAfterInitialization(Object bean, String beanName); // Apply this BeanPostProcessor to the given new bean instance after any bean initialization callbacks (like InitializingBean's afterPropertiesSet or a custom init-method).\n\tvoid postProcessBeforeDestruction(Object bean, String beanName); // Apply this BeanPostProcessor to the given bean instance before its destruction, e.g.\n\tObject postProcessBeforeInitialization(Object bean, String beanName); // Apply this BeanPostProcessor to the given new bean instance before any bean initialization callbacks (like InitializingBean's afterPropertiesSet or a custom init-method).\n\tvoid postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition, Class<?> beanClass, String beanName); // Post-process the given merged bean definition for the specified bean.\n\tBeanRegistrationAotContribution processAheadOfTime(RegisteredBean registeredBean); // Process the given RegisteredBean instance ahead-of-time and return a contribution or null.\n\tboolean requiresDestruction(Object bean); // Determine whether the given bean instance requires destruction by this post-processor.\n\tvoid setDestroyAnnotationType(Class<? extends Annotation> destroyAnnotationType); // Specify the destroy annotation to check for, indicating destruction methods to call when the context is shutting down.\n\tvoid setInitAnnotationType(Class<? extends Annotation> initAnnotationType); // Specify the init annotation to check for, indicating initialization methods to call after configuration of a bean.\n\tvoid setOrder(int order);\n}"}
{"index": 12144, "repo": "jena-core-4.9.0", "des": "A MapFilterIterator takes a MapFilter and an [Extended]Iterator and returns a new ExtendedIterator which delivers the sequence of all non-null elements MapFilter(X) for X from the base iterator.", "code": "public class MapFilterIterator<T,X> extends NiceIterator<X> implements ExtendedIterator<X> {\n\tvoid close(); // default close: don't need to do anything.\n\tvoid forEachRemaining(Consumer<? super X> action);\n\tboolean hasNext(); // Are there any more acceptable objects.\n\tX next(); // The next acceptable object in the iterator.\n\tvoid remove(); // remove's the member from the underlying Iterator; hasNext() may not be called between calls to next() and remove().\n}"}
{"index": 147, "repo": "commons-collections4-4.4", "des": "A Comparator which imposes a specific order on a specific set of Objects.", "code": "Class FixedOrderComparator<T> {\n\tboolean add(T obj); // Adds an item, which compares as after all items known to the Comparator.\n\tboolean addAsEqual(T existingObj, T newObj); // Adds a new item, which compares as equal to the given existing item.\n\tprotected void checkLocked(); // Checks to see whether the comparator is now locked against further changes.\n\tint compare(T obj1, T obj2); // Compares two objects according to the order of this Comparator.\n\tboolean equals(Object object); // Returns true iff that Object is is a Comparator whose ordering is known to be equivalent to mine.\n\tFixedOrderComparator.UnknownObjectBehavior getUnknownObjectBehavior(); // Gets the behavior for comparing unknown objects.\n\tboolean isLocked(); // Returns true if modifications cannot be made to the FixedOrderComparator.\n\tvoid setUnknownObjectBehavior(FixedOrderComparator.UnknownObjectBehavior unknownObjectBehavior); // Sets the behavior for comparing unknown objects.\n}"}
{"index": 2588, "repo": "exoplayer-r2.3.1", "des": "Generates track ids for initializing TsPayloadReaders' TrackOutputs.", "code": "Class TsPayloadReader.TrackIdGenerator {\n\tvoid generateNewId(); // Generates a new set of track and track format ids.\n\tjava.lang.String getFormatId(); // Returns the last generated format id, with the format \"programNumber/trackId\".\n\tint getTrackId(); // Returns the last generated track id.\n}"}
{"index": 15610, "repo": "spring-security-core-6.1.2", "des": "Allows management of groups of authorities and their members.", "code": "public interface GroupManager {\n\tvoid addGroupAuthority(String groupName, GrantedAuthority authority); // Assigns a new authority to a group.\n\tvoid addUserToGroup(String username, String group); // Makes a user a member of a particular group.\n\tvoid createGroup(String groupName, List<GrantedAuthority> authorities); // Creates a new group with the specified list of authorities.\n\tvoid deleteGroup(String groupName); // Removes a group, including all members and authorities.\n\tList<String> findAllGroups(); // Returns the names of all groups that this group manager controls.\n\tList<GrantedAuthority> findGroupAuthorities(String groupName); // Obtains the list of authorities which are assigned to a group.\n\tList<String> findUsersInGroup(String groupName); // Locates the users who are members of a group\n\tvoid removeGroupAuthority(String groupName, GrantedAuthority authority); // Deletes an authority from those assigned to a group\n\tvoid removeUserFromGroup(String username, String groupName); // Deletes a user's membership of a group.\n\tvoid renameGroup(String oldName, String newName); // Changes the name of a group without altering the assigned authorities or members.\n}"}
{"index": 15693, "repo": "pulsar-common-3.0.0", "des": "ServiceURI represents service uri within pulsar cluster.", "code": "public class ServiceURI extends Object {\n\tstatic ServiceURI create(String uriStr); // Create a service uri instance from a uri string.\n\tstatic ServiceURI create(URI uri); // Create a service uri instance from a URI instance.\n\tString[] getServiceHosts();\n\tString[] getServiceInfos();\n\tString getServiceScheme();\n\tString selectOne(); // Create a new URI from the service URI which only specifies one of the hosts.\n}"}
{"index": 16695, "repo": "spring-beans-6.0.11", "des": "Extension of MethodOverride that represents an arbitrary override of a method by the IoC container.", "code": "public class ReplaceOverride extends MethodOverride {\n\tvoid addTypeIdentifier(String identifier); // Add a fragment of a class string, like \"Exception\" or \"java.lang.Exc\", to identify a parameter type.\n\tboolean equals(Object other);\n\tString getMethodReplacerBeanName(); // Return the name of the bean implementing MethodReplacer.\n\tboolean matches(Method method); // Subclasses must override this to indicate whether they match the given method.\n}"}
{"index": 5, "repo": "spring-cloud-aws-jdbc-2.2.6.RELEASE", "des": "FactoryBean implementation that creates a datasource backed by an Amazon Relational Database service instance.", "code": "Class AmazonRdsDataSourceFactoryBean {\n\tprotected DataSource createDataSourceInstance(String identifier); // Creates a data source based in the instance name.\n\tprotected DataSource createInstance();\n\tprotected void destroyInstance(DataSource instance);\n\tprotected com.amazonaws.services.rds.model.DBInstance getDbInstance(String identifier); // Retrieves the DBInstance information.\n\tprotected String getDbInstanceIdentifier();\n\tClass<DataSource> getObjectType();\n\tvoid setDatabaseName(String databaseName); // Configures an own database name to be used if the default database (that is configured in the meta-data) should not be used.\n\tvoid setDataSourceFactory(DataSourceFactory dataSourceFactory); // Allows to configure a different DataSourceFactory in order to use a different DataSource implementation.\n\tvoid setResourceIdResolver(org.springframework.cloud.aws.core.env.ResourceIdResolver resourceIdResolver); // Configures an optional ResourceIdResolver used to resolve a logical name to a physical one.\n\tvoid setUsername(String username); // Allows to set a different user then the master user name in order to connect to the database.\n}"}
{"index": 18694, "repo": "opencms-gwt-15.0", "des": "Provides methods for nested drop targets.", "code": "Interface I_CmsNestedDropTarget {\n\tjava.util.List<I_CmsDropTarget> getDnDChildren(); // Returns the list of child drop targets.\n\tboolean hasDnDChildren(); // Checks whether this drop target has any children.\n}"}
{"index": 9955, "repo": "iceberg-api-1.3.0", "des": "This interface is intended as an extension for FileIO implementations to provide additional prefix based operations that may be useful in performing supporting operations.", "code": "Interface SupportsPrefixOperations {\n\tvoid deletePrefix(java.lang.String prefix); // Delete all files under a prefix.\n\tjava.lang.Iterable<FileInfo> listPrefix(java.lang.String prefix); // Return an iterable of all files under a prefix.\n}"}
{"index": 14452, "repo": "wicket-core-10.0.0-M1", "des": "A container of HTML markup and components.", "code": "public class WebMarkupContainer extends MarkupContainer {\n\tfinal WebApplication getWebApplication(); // A convenience method to return the WebApplication.\n\tfinal WebPage getWebPage(); // A convenience method to return the WebPage.\n\tfinal org.apache.wicket.request.http.WebRequest getWebRequest(); // A convenience method to return the current WebRequest.\n\tfinal org.apache.wicket.request.http.WebResponse getWebResponse(); // A convenience method to return the current WebResponse.\n\tfinal WebSession getWebSession(); // A convenience method to return the WebSession.\n}"}
{"index": 18217, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "This object contains factory methods for each Java content interface and Java element interface generated in the org.hibernate.boot.jaxb.cfg.spi package.", "code": "Class ObjectFactory {\n\tJaxbCfgCollectionCacheType createJaxbCfgCollectionCacheType(); // Create an instance of JaxbCfgCollectionCacheType\n\tJaxbCfgConfigPropertyType createJaxbCfgConfigPropertyType(); // Create an instance of JaxbCfgConfigPropertyType\n\tJaxbCfgEntityCacheType createJaxbCfgEntityCacheType(); // Create an instance of JaxbCfgEntityCacheType\n\tJaxbCfgEventListenerGroupType createJaxbCfgEventListenerGroupType(); // Create an instance of JaxbCfgEventListenerGroupType\n\tJaxbCfgEventListenerType createJaxbCfgEventListenerType(); // Create an instance of JaxbCfgEventListenerType\n\tJaxbCfgHibernateConfiguration createJaxbCfgHibernateConfiguration(); // Create an instance of JaxbCfgHibernateConfiguration\n\tJaxbCfgHibernateConfiguration.JaxbCfgSecurity createJaxbCfgHibernateConfigurationJaxbCfgSecurity(); // Create an instance of JaxbCfgHibernateConfiguration.JaxbCfgSecurity\n\tJaxbCfgHibernateConfiguration.JaxbCfgSecurity.JaxbCfgGrant createJaxbCfgHibernateConfigurationJaxbCfgSecurityJaxbCfgGrant(); // Create an instance of JaxbCfgHibernateConfiguration.JaxbCfgSecurity.JaxbCfgGrant\n\tJaxbCfgHibernateConfiguration.JaxbCfgSessionFactory createJaxbCfgHibernateConfigurationJaxbCfgSessionFactory(); // Create an instance of JaxbCfgHibernateConfiguration.JaxbCfgSessionFactory\n\tJaxbCfgMappingReferenceType createJaxbCfgMappingReferenceType(); // Create an instance of JaxbCfgMappingReferenceType\n}"}
{"index": 1504, "repo": "pdfbox-3.0.0-beta1", "des": "A combo box consisting of a drop-down list.", "code": "Class PDComboBox {\n\tboolean isEdit(); // Determines if Edit is set.\n\tvoid setEdit(boolean edit); // Set the Edit bit.\n}"}
{"index": 5031, "repo": "commons-collections-3.2.2", "des": "A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.", "code": "Class NodeCachingLinkedList {\n\tprotected void addNodeToCache(AbstractLinkedList.Node node); // Adds a node to the cache, if the cache isn't full.\n\tprotected AbstractLinkedList.Node createNode(Object value); // Creates a new node, either by reusing one from the cache or creating a new one.\n\tprotected int getMaximumCacheSize(); // Gets the maximum size of the cache.\n\tprotected AbstractLinkedList.Node getNodeFromCache(); // Gets a node from the cache.\n\tprotected boolean isCacheFull(); // Checks whether the cache is full.\n\tprotected void removeAllNodes(); // Removes all the nodes from the list, storing as many as required in the cache for reuse.\n\tprotected void removeNode(AbstractLinkedList.Node node); // Removes the node from the list, storing it in the cache for reuse if the cache is not yet full.\n\tprotected void setMaximumCacheSize(int maximumCacheSize); // Sets the maximum size of the cache.\n\tprotected void shrinkCacheToMaximumSize(); // Reduce the size of the cache to the maximum, if necessary.\n}"}
{"index": 4064, "repo": "zookeeper-3.8.2", "des": "This class is a base class for the configurations of both client and server.", "code": "Class ZKConfig {\n\tvoid addConfiguration(File configFile); // Add a configuration resource.\n\tvoid addConfiguration(String configPath); // Add a configuration resource.\n\tboolean getBoolean(String key); // Returns true if and only if the property named by the argument exists and is equal to the string \"true\".\n\tboolean getBoolean(String key, boolean defaultValue); // Get the value of the key property as a boolean.\n\tint getInt(String key, int defaultValue); // Get the value of the key property as an int.\n\tString getJaasConfKey(); // Return the value of \"java.security.auth.login.config\" system property\n\tString getProperty(String key); // Get the property value\n\tString getProperty(String key, String defaultValue); // Get the property value, if it is null return default value\n\tprotected void handleBackwardCompatibility(); // Now onwards client code will use properties from this class but older clients still be setting properties through system properties.\n\tvoid setProperty(String key, String value); // Maps the specified key to the specified value.\n}"}
{"index": 5350, "repo": "druid-processing-26.0.0", "des": "Abstract superclass for null-aware numeric aggregators.", "code": "Class NullableNumericAggregatorFactory<T extends BaseNullableColumnValueSelector> {\n\tAggregator factorize(ColumnSelectorFactory columnSelectorFactory);\n\tprotected abstract Aggregator factorize(ColumnSelectorFactory columnSelectorFactory, T selector); // Creates an Aggregator to aggregate values from several rows, by using the provided selector.\n\tBufferAggregator factorizeBuffered(ColumnSelectorFactory columnSelectorFactory);\n\tprotected abstract BufferAggregator factorizeBuffered(ColumnSelectorFactory columnSelectorFactory, T selector); // Creates an BufferAggregator to aggregate values from several rows into a ByteBuffer.\n\tVectorAggregator factorizeVector(VectorColumnSelectorFactory columnSelectorFactory); // Create a VectorAggregator based on the provided column selector factory.\n\tprotected VectorAggregator factorizeVector(VectorColumnSelectorFactory columnSelectorFactory, VectorValueSelector selector); // Creates a VectorAggregator to aggregate values from several rows into a ByteBuffer.\n\tint getMaxIntermediateSizeWithNulls(); // Returns the maximum size that this aggregator will require in bytes for intermediate storage of results.\n\tColumnType getResultType(); // Get the ColumnType for the final form of this aggregator, i.e.\n\tAggregateCombiner makeNullableAggregateCombiner(); // Creates an AggregateCombiner which supports nullability.\n\tprotected abstract T selector(ColumnSelectorFactory columnSelectorFactory); // Creates a ColumnValueSelector for the aggregated column.\n\tprotected VectorValueSelector vectorSelector(VectorColumnSelectorFactory columnSelectorFactory); // Creates a VectorValueSelector for the aggregated column.\n}"}
{"index": 13216, "repo": "spring-test-6.0.11", "des": "The main class to import in order to access all available MockMvcBuilders.", "code": "public final class MockMvcBuilders extends Object {\n\tstatic StandaloneMockMvcBuilder standaloneSetup(Object... controllers); // Build a MockMvc instance by registering one or more @Controller instances and configuring Spring MVC infrastructure programmatically.\n\tstatic DefaultMockMvcBuilder webAppContextSetup(org.springframework.web.context.WebApplicationContext context); // Build a MockMvc instance using the given, fully initialized (i.e., refreshed) WebApplicationContext.\n}"}
{"index": 17160, "repo": "spring-integration-core-6.1.2", "des": "An AOP advice to perform hooks before and/or after a receive() contract is called.", "code": "@FunctionalInterface public interface ReceiveMessageAdvice extends org.aopalliance.intercept.MethodInterceptor {\n\torg.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, Object source); // Subclasses can take actions based on the result of the Joinpoint.proceed(); e.g.\n\tdefault boolean beforeReceive(Object source); // Subclasses can decide whether to Joinpoint.proceed() or not.\n\tdefault Object invoke(org.aopalliance.intercept.MethodInvocation invocation);\n}"}
{"index": 1289, "repo": "ignite-core-2.15.0", "des": "Arguments for task VisorComputeCancelSessionsTask.", "code": "Class VisorComputeCancelSessionsTaskArg {\n\tSet<IgniteUuid> getSessionIds();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 11142, "repo": "tribuo-core-4.3.1", "des": "An evaluator which aggregates predictions and produces Evaluations covering all the Predictions it has seen or created.", "code": "public final class OnlineEvaluator<T extends Output<T>,E extends Evaluation<T>> extends Object {\n\tE evaluate(); // Creates an Evaluation containing all the current predictions.\n\tvoid observe(List<Prediction<T>> newPredictions); // Records all the supplied predictions.\n\tvoid observe(Prediction<T> newPrediction); // Records the supplied prediction.\n\tList<Prediction<T>> predictAndObserve(Iterable<Example<T>> examples); // Feeds the examples to the model, records the predictions and returns them.\n\tPrediction<T> predictAndObserve(Example<T> example); // Feeds the example to the model, records the prediction and returns it.\n}"}
{"index": 17639, "repo": "spring-ldap-core-3.1.0", "des": "A proxy for ContextSource to make sure that the returned DirContext objects are aware of the surrounding transactions.", "code": "public class TransactionAwareContextSourceProxy extends DelegatingBaseLdapPathContextSourceSupport implements ContextSource {\n\tDirContext getContext(String principal, String credentials); // Gets a DirContext instance authenticated using the supplied principal and credentials.\n\tDirContext getReadOnlyContext(); // Gets a read-only DirContext.\n\tDirContext getReadWriteContext(); // Gets a read-write DirContext instance.\n\tContextSource getTarget(); // Get the target ContextSource.\n}"}
{"index": 16912, "repo": "spring-integration-ip-6.1.2", "des": "Base class for deserializers that cannot determine the buffer size needed.", "code": "public abstract class AbstractPooledBufferByteArraySerializer extends AbstractByteArraySerializer {\n\tprotected byte[] copyToSizedArray(byte[] buffer, int size); // Copy size bytes to a new buffer exactly size bytes long.\n\tfinal byte[] deserialize(InputStream inputStream);\n\tprotected abstract byte[] doDeserialize(InputStream inputStream, byte[] buffer);\n\tvoid setPoolSize(int size); // Set the pool size for deserialization buffers.\n\tvoid setPoolWaitTimeout(long poolWaitTimeout); // Set the pool wait timeout if a pool is configured, default unlimited.\n}"}
{"index": 15072, "repo": "spring-vault-core-3.0.4", "des": "Interface that specifies a basic set of Vault operations executed on a reactive infrastructure, implemented by ReactiveVaultTemplate.", "code": "public interface ReactiveVaultOperations {\n\tMono<Void> delete(String path); // Delete a path.\n\t<V, T extends org.reactivestreams.Publisher<V>>T doWithSession(Function<WebClient,? extends T> sessionCallback); // Executes a Vault RestOperationsCallback.\n\t<V, T extends org.reactivestreams.Publisher<V>>T doWithVault(Function<WebClient,? extends T> clientCallback); // Executes a Vault RestOperationsCallback.\n\tFlux<String> list(String path); // Enumerate keys from a Vault path.\n\tMono<VaultResponse> read(String path); // Read from a Vault path.\n\t<T> Mono<VaultResponseSupport<T>> read(String path, Class<T> responseType); // Read from a Vault path.\n\tdefault Mono<VaultResponse> write(String path); // Write to a Vault path.\n\tMono<VaultResponse> write(String path, Object body); // Write to a Vault path.\n}"}
{"index": 8202, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of WebServiceConnection that is based on the Servlet API.", "code": "Class HttpServletConnection {\n\tvoid addResponseHeader(String name, String value); // Adds a response header with the given name and value.\n\tvoid endpointNotFound(); // Called when an endpoint is not found.\n\tString getErrorMessage(); // Returns the error message.\n\tjavax.servlet.http.HttpServletRequest getHttpServletRequest(); // Returns the HttpServletRequest for this connection.\n\tjavax.servlet.http.HttpServletResponse getHttpServletResponse(); // Returns the HttpServletResponse for this connection.\n\tIterator<String> getRequestHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getRequestHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected InputStream getRequestInputStream(); // Returns the input stream to read the response from.\n\tprotected OutputStream getResponseOutputStream(); // Returns the output stream to write the request to.\n\tURI getUri(); // Returns the URI for this connection.\n\tboolean hasError(); // Indicates whether this connection has an error.\n\tboolean hasFault(); // Indicates whether this connection received a fault.\n\tvoid onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n\tvoid setFaultCode(QName faultCode); // Sets a specific fault code.\n}"}
{"index": 7780, "repo": "cassandra-all-4.1.2", "des": "A proof-of-concept sharded memtable implementation.", "code": "Class ShardedSkipListMemtable {\n\tprotected Memtable.Factory factory();\n\tstatic org.apache.cassandra.db.memtable.ShardedSkipListMemtable.Factory factory(java.util.Map<java.lang.String,java.lang.String> optionsCopy);\n\tMemtable.FlushablePartitionSet<AtomicBTreePartition> getFlushSet(PartitionPosition from, PartitionPosition to); // Get the collection of data between the given partition boundaries in a form suitable for flushing.\n\tlong getLiveDataSize(); // Technically we should scatter gather on all the core threads because the size in following calls are not using volatile variables, but for metrics purpose this should be good enough.\n\tint getMinLocalDeletionTime(); // Minimum local deletion time in the memtable\n\tlong getMinTimestamp(); // Returns the minTS if one available, otherwise NO_MIN_TIMESTAMP.\n\tboolean isClean(); // True if the memtable contains no data\n\tlong operationCount(); // Number of \"operations\" (in the sense defined in PartitionUpdate.operationCount()) the memtable has executed.\n\tlong partitionCount(); // Number of partitions stored in the memtable\n\tShardedSkipListMemtable.MemtableUnfilteredPartitionIterator partitionIterator(ColumnFilter columnFilter, DataRange dataRange, SSTableReadsListener readsListener); // Returns a partition iterator for the given data range.\n\tlong put(PartitionUpdate update, UpdateTransaction indexer, OpOrder.Group opGroup); // Should only be called by ColumnFamilyStore.apply via Keyspace.apply, which supplies the appropriate OpOrdering.\n\tUnfilteredRowIterator rowIterator(DecoratedKey key);\n\tUnfilteredRowIterator rowIterator(DecoratedKey key, Slices slices, ColumnFilter selectedColumns, boolean reversed, SSTableReadsListener listener); // Returns a row iterator for the given partition, applying the specified row and column filters.\n}"}
{"index": 2534, "repo": "exoplayer-r2.3.1", "des": "Performs ExoMediaDrm key and provisioning requests.", "code": "Interface MediaDrmCallback {\n\tbyte[] executeKeyRequest(java.util.UUID uuid, ExoMediaDrm.KeyRequest request); // Executes a key request.\n\tbyte[] executeProvisionRequest(java.util.UUID uuid, ExoMediaDrm.ProvisionRequest request); // Executes a provisioning request.\n}"}
{"index": 8586, "repo": "commons-io-2.13.0", "des": "A BufferedReader that throws UncheckedIOException instead of IOException.", "code": "Class UncheckedBufferedReader {\n\tstatic UncheckedBufferedReader.Builder builder(); // Constructs a new UncheckedBufferedReader.Builder.\n\tvoid close(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid mark(int readAheadLimit); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tint read(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tint read(char[] cbuf); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tint read(char[] cbuf, int off, int len); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tint read(CharBuffer target); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tString readLine(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tboolean ready(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid reset(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tlong skip(long n); // Calls this method's super and rethrow IOException as UncheckedIOException.\n}"}
{"index": 17129, "repo": "spring-integration-core-6.1.2", "des": "An IntegrationComponentSpec for MessagingGatewaySupports.", "code": "public abstract class MessagingGatewaySpec<S extends MessagingGatewaySpec<S,G>,G extends MessagingGatewaySupport> extends IntegrationComponentSpec<S,G> {\n\tS autoStartup(boolean autoStartup); // An auto-startup flag.\n\tS errorChannel(String errorChannelName); // An error channel name to use.\n\tS errorChannel(org.springframework.messaging.MessageChannel errorChannel); // An error channel to use.\n\tS errorOnTimeout(boolean errorOnTimeout); // If errorOnTimeout is true, construct an instance that will send an ErrorMessage with a MessageTimeoutException payload to the error channel if a reply is expected but none is received.\n\tS id(String id); // Configure the component identifier.\n\tS phase(int phase); // A lifecycle phase to use.\n\tS replyChannel(String replyChannelName); // A reply channel name to use.\n\tS replyChannel(org.springframework.messaging.MessageChannel replyChannel); // A reply channel to use.\n\tS replyMapper(OutboundMessageMapper<?> replyMapper); // An OutboundMessageMapper to use.\n\tS replyTimeout(long replyTimeout); // A reply timeout to use.\n\tS requestChannel(String requestChannelName); // A request channel name to use.\n\tS requestChannel(org.springframework.messaging.MessageChannel requestChannel); // A request channel to use.\n\tS requestMapper(InboundMessageMapper<?> requestMapper); // An InboundMessageMapper to use.\n\tS requestTimeout(long requestTimeout); // A request timeout to use.\n\tS shouldTrack(boolean shouldTrack); // Whether component should be tracked or not by message history.\n}"}
{"index": 3944, "repo": "hudi-client-0.6.0", "des": "Implementation of Graphite reporter, which connects to the Graphite server, and send metrics to that server.", "code": "Class MetricsGraphiteReporter {\n\tCloseable getReporter();\n\tvoid report(); // Deterministically push out metrics.\n\tvoid start(); // Push out metrics at scheduled intervals.\n\tvoid stop(); // Stop this reporter.\n}"}
{"index": 12169, "repo": "jena-core-4.9.0", "des": "Represents an interface to query namespace information.", "code": "public interface NamespaceContext {\n\tboolean declarePrefix(String prefix, String uri); // Declare a Namespace prefix.\n\tEnumeration getAllPrefixes(); // Return an enumeration of all prefixes whose declarations are active in the current context.\n\tString getDeclaredPrefixAt(int index); // Returns the prefix at the specified index in the current context.\n\tint getDeclaredPrefixCount(); // Return a count of locally declared prefixes, including the default prefix if bound.\n\tString getPrefix(String uri); // Look up a namespace URI and get one of the mapped prefix.\n\tString getURI(String prefix); // Look up a prefix and get the currently-mapped Namespace URI.\n\tvoid popContext(); // Revert to the previous Namespace context.\n\tvoid pushContext(); // Start a new Namespace context.\n\tvoid reset(); // Reset this Namespace support object for reuse.\n}"}
{"index": 14470, "repo": "spring-security-web-6.1.2", "des": "Base class containing the logic used by strategies which handle redirection to a URL and are passed an Authentication object as part of the contract.", "code": "public abstract class AbstractAuthenticationTargetUrlRequestHandler extends Object {\n\tprotected String determineTargetUrl(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Builds the target URL according to the logic defined in the main class Javadoc.\n\tprotected String determineTargetUrl(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authentication); // Builds the target URL according to the logic defined in the main class Javadoc\n\tprotected final String getDefaultTargetUrl(); // Supplies the default target Url that will be used if no saved request is found or the alwaysUseDefaultTargetUrl property is set to true.\n\tprotected RedirectStrategy getRedirectStrategy();\n\tprotected String getTargetUrlParameter();\n\tprotected void handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authentication); // Invokes the configured RedirectStrategy with the URL returned by the determineTargetUrl method.\n\tprotected boolean isAlwaysUseDefaultTargetUrl();\n\tvoid setAlwaysUseDefaultTargetUrl(boolean alwaysUseDefaultTargetUrl); // If true, will always redirect to the value of defaultTargetUrl (defaults to false).\n\tvoid setDefaultTargetUrl(String defaultTargetUrl); // Supplies the default target Url that will be used if no saved request is found in the session, or the alwaysUseDefaultTargetUrl property is set to true.\n\tvoid setRedirectStrategy(RedirectStrategy redirectStrategy); // Allows overriding of the behaviour when redirecting to a target URL.\n\tvoid setTargetUrlParameter(String targetUrlParameter); // If this property is set, the current request will be checked for this a parameter with this name and the value used as the target URL if present.\n\tvoid setUseReferer(boolean useReferer); // If set to true the Referer header will be used (if available).\n}"}
{"index": 5827, "repo": "hbase-hadoop2-compat-2.5.5-hadoop3", "des": "JMX caches the beans that have been exported; even after the values are removed from hadoop's metrics system the keys and old values will still remain.", "code": "Class JmxCacheBuster {\n\tstatic void clearJmxCache(); // For JMX to forget about all previously exported metrics.\n\tstatic void restart(); // Restarts the stopped service.\n\tstatic void stop(); // Stops the clearing of JMX metrics and restarting the Hadoop metrics system.\n}"}
{"index": 9548, "repo": "commons-math3-3.6.1", "des": "Calculates the Cholesky decomposition of a matrix.", "code": "Class CholeskyDecomposition {\n\tdouble getDeterminant(); // Return the determinant of the matrix\n\tRealMatrix getL(); // Returns the matrix L of the decomposition.\n\tRealMatrix getLT(); // Returns the transpose of the matrix L of the decomposition.\n\tDecompositionSolver getSolver();\n}"}
{"index": 11283, "repo": "spring-context-6.0.11", "des": "Convenience methods for looking up BindingResults in a model Map.", "code": "public abstract class BindingResultUtils extends Object {\n\tstatic BindingResult getBindingResult(Map<?,?> model, String name); // Find the BindingResult for the given name in the given model.\n\tstatic BindingResult getRequiredBindingResult(Map<?,?> model, String name); // Find a required BindingResult for the given name in the given model.\n}"}
{"index": 11130, "repo": "tribuo-core-4.3.1", "des": "Used by a given EvaluationMetric to determine whether it should compute its value for a specific Output value or whether it should average them.", "code": "public class MetricTarget<T extends Output<T>> extends Object {\n\tboolean equals(Object o);\n\tOptional<EvaluationMetric.Average> getAverageTarget(); // Returns the average this metric computes, or Optional.empty() if it targets an output.\n\tOptional<T> getOutputTarget(); // Returns the Output this metric targets, or Optional.empty() if it's an average.\n\tstatic <U extends Output<U>>MetricTarget<U> macroAverageTarget(); // Get the singleton MetricTarget which contains the EvaluationMetric.Average.MACRO.\n\tstatic <U extends Output<U>>MetricTarget<U> microAverageTarget(); // Get the singleton MetricTarget which contains the EvaluationMetric.Average.MICRO.\n}"}
{"index": 12714, "repo": "spring-data-mongodb-4.1.2", "des": "Interface to obtain a Data Encryption Key that is valid in a given context.", "code": "@FunctionalInterface public interface EncryptionKeyResolver {\n\tstatic EncryptionKeyResolver annotated(EncryptionKeyResolver fallback); // Obtain an EncryptionKeyResolver that evaluates ExplicitEncrypted.keyAltName() and only calls the fallback resolver if no Key Alternate Name is present.\n\tEncryptionKey getKey(EncryptionContext encryptionContext); // Get the Data Encryption Key.\n}"}
{"index": 842, "repo": "ignite-core-2.15.0", "des": "Simple injector which wraps ComputeJobContext resource object.", "code": "Class GridResourceJobContextInjector {\n\tT getResource(); // Gets resource.\n\tvoid inject(org.apache.ignite.internal.processors.resource.GridResourceField field, Object target, Class<?> depCls, GridDeployment dep); // Injects resource into field.\n\tvoid inject(org.apache.ignite.internal.processors.resource.GridResourceMethod mtd, Object target, Class<?> depCls, GridDeployment dep); // Injects resource with a setter method.\n\tvoid undeploy(GridDeployment dep); // Gracefully cleans all resources associated with deployment.\n}"}
{"index": 15008, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An OAuth2AuthenticationContext that holds an OidcUserInfoAuthenticationToken and additional information and is used when mapping claims to an instance of OidcUserInfo.", "code": "public final class OidcUserInfoAuthenticationContext extends Object implements OAuth2AuthenticationContext {\n\t<V> V get(Object key); // Returns the value of the attribute associated to the key.\n\torg.springframework.security.oauth2.core.OAuth2AccessToken getAccessToken(); // Returns the OAuth 2.0 Access Token.\n\tOAuth2Authorization getAuthorization(); // Returns the authorization.\n\tboolean hasKey(Object key); // Returns true if an attribute associated to the key exists, false otherwise.\n\tstatic OidcUserInfoAuthenticationContext.Builder with(OidcUserInfoAuthenticationToken authentication); // Constructs a new OidcUserInfoAuthenticationContext.Builder with the provided OidcUserInfoAuthenticationToken.\n}"}
{"index": 3718, "repo": "kafka-streams-3.5.0", "des": "A key-value store that only supports read operations.", "code": "Interface ReadOnlyKeyValueStore<K,V> {\n\tKeyValueIterator<K,V> all(); // Return an iterator over all keys in this store.\n\tlong approximateNumEntries(); // Return an approximate count of key-value mappings in this store.\n\tV get(K key); // Get the value corresponding to this key.\n\tdefault <PS extends org.apache.kafka.common.serialization.Serializer<P>,P>KeyValueIterator<K,V> prefixScan(P prefix, PS prefixKeySerializer); // Return an iterator over all keys with the specified prefix.\n\tKeyValueIterator<K,V> range(K from, K to); // Get an iterator over a given range of keys.\n\tdefault KeyValueIterator<K,V> reverseAll(); // Return a reverse iterator over all keys in this store.\n\tdefault KeyValueIterator<K,V> reverseRange(K from, K to); // Get a reverse iterator over a given range of keys.\n}"}
{"index": 7253, "repo": "calcite-core-1.34.0", "des": "Strategy interface to check for allowed operand types of an operator call.", "code": "Interface SqlOperandTypeChecker {\n\tdefault SqlOperandTypeChecker and(SqlOperandTypeChecker checker); // Composes this with another checker using AND.\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks the types of all operands to an operator call.\n\tString getAllowedSignatures(SqlOperator op, String opName); // Returns a string describing the allowed formal signatures of a call, e.g.\n\tdefault SqlOperandTypeChecker.Consistency getConsistency(); // Returns the strategy for making the arguments have consistency types.\n\tSqlOperandCountRange getOperandCountRange(); // Returns the range of operand counts allowed in a call.\n\tdefault boolean isFixedParameters(); // Returns whether the list of parameters is fixed-length.\n\tdefault boolean isOptional(int i); // Returns whether the ith operand is optional.\n\tdefault SqlOperandTypeChecker or(SqlOperandTypeChecker checker); // Composes this with another checker using OR.\n\tdefault @Nullable SqlOperandTypeInference typeInference(); // Converts this type checker to a type inference; returns null if not possible.\n\tdefault CompositeOperandTypeChecker withGenerator(BiFunction<SqlOperator,String,String> signatureGenerator); // Returns a copy of this checker with the given signature generator.\n}"}
{"index": 11486, "repo": "spring-restdocs-core-3.0.0", "des": "Describes an operation performed on a RESTful service.", "code": "public interface Operation {\n\tMap<String,Object> getAttributes(); // Returns a Map of attributes associated with the operation.\n\tString getName(); // Returns the name of the operation.\n\tOperationRequest getRequest(); // Returns the request that was sent.\n\tOperationResponse getResponse(); // Returns the response that was received.\n}"}
{"index": 9777, "repo": "commons-math3-3.6.1", "des": "Formats a Fraction number in proper format.", "code": "Class ProperFractionFormat {\n\tStringBuffer format(Fraction fraction, StringBuffer toAppendTo, FieldPosition pos); // Formats a Fraction object to produce a string.\n\tNumberFormat getWholeFormat(); // Access the whole format.\n\tFraction parse(String source, ParsePosition pos); // Parses a string to produce a Fraction object.\n\tvoid setWholeFormat(NumberFormat format); // Modify the whole format.\n}"}
{"index": 12111, "repo": "jena-core-4.9.0", "des": "Tests the single argument to make sure it is a literal.", "code": "public class IsLiteral extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 12710, "repo": "spring-data-mongodb-4.1.2", "des": "A specialized MongoValueConverter for encryptiong and decrypting properties.", "code": "public interface EncryptingConverter<S,T> extends MongoValueConverter<S,T> {\n\tEncryptionContext buildEncryptionContext(MongoConversionContext context); // Obtain the EncryptionContext for a given value conversion context.\n\tS decrypt(Object encryptedValue, EncryptionContext context); // Decrypt the given encrypted source value within the given context.\n\tT encrypt(Object value, EncryptionContext context); // Encrypt the given raw source value within the given context.\n\tdefault S read(Object value, MongoConversionContext context);\n\tdefault T write(Object value, MongoConversionContext context);\n}"}
{"index": 9448, "repo": "hadoop-yarn-api-3.3.6", "des": "The response from the SharedCacheManager to the client that indicates whether a requested resource exists in the cache.", "code": "Class UseSharedCacheResourceResponse {\n\tabstract String getPath(); // Get the Path corresponding to the requested resource in the shared cache.\n\tabstract void setPath(String p); // Set the Path corresponding to a resource in the shared cache.\n}"}
{"index": 16371, "repo": "spring-data-jpa-3.1.2", "des": "Value object to hold metadata about repository methods.", "code": "public class Meta extends Object {\n\tString getComment();\n\tboolean hasValues();\n\tvoid setComment(String comment); // Add a comment to the query that is propagated to the profile log.\n\tIterable<Map.Entry<String,Object>> values(); // Get Iterable of set meta values.\n}"}
{"index": 2711, "repo": "mahout-core-14.1", "des": "Decorates a vector with a floating point weight and an index.", "code": "Class WeightedVector {\n\tWeightedVector clone(); // Return a copy of the recipient\n\tint getIndex();\n\tdouble getWeight();\n\tVector like(); // Return an empty vector of the same underlying class as the receiver\n\tstatic WeightedVector project(Vector v, Vector projection);\n\tstatic WeightedVector project(Vector v, Vector projection, int index);\n\tvoid setIndex(int index);\n\tvoid setWeight(double newWeight);\n}"}
{"index": 17379, "repo": "groovy-4.0.13", "des": "A base class for data structures that can collect messages and errors during processing.", "code": "public abstract class ProcessingUnit extends Object {\n\tvoid completePhase(); // Marks the current phase complete and processes any errors.\n\tvoid configure(CompilerConfiguration configuration); // Reconfigures the ProcessingUnit.\n\tGroovyClassLoader getClassLoader(); // Returns the class loader in use by this ProcessingUnit.\n\tCompilerConfiguration getConfiguration(); // Gets the CompilerConfiguration for this ProcessingUnit.\n\tErrorCollector getErrorCollector(); // Errors found during the compilation should be reported through the ErrorCollector.\n\tint getPhase(); // Returns the current phase.\n\tString getPhaseDescription(); // Returns the description for the current phase.\n\tvoid gotoPhase(int phase); // Wraps up any pending operations for the current phase and switches to the given phase.\n\tboolean isPhaseComplete();\n\tvoid nextPhase(); // A synonym for gotoPhase(getPhase() + 1).\n\tvoid setClassLoader(GroovyClassLoader loader); // Sets the class loader for use by this ProcessingUnit.\n\tfinal void setConfiguration(CompilerConfiguration configuration); // Sets the CompilerConfiguration for this ProcessingUnit.\n}"}
{"index": 14970, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An Authentication implementation used for OAuth 2.0 Client Authentication.", "code": "@Transient public class OAuth2ClientAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters.\n\torg.springframework.security.oauth2.core.ClientAuthenticationMethod getClientAuthenticationMethod(); // Returns the authentication method used by the client.\n\tObject getCredentials();\n\tObject getPrincipal();\n\tRegisteredClient getRegisteredClient(); // Returns the authenticated registered client, or null if not authenticated.\n}"}
{"index": 1056, "repo": "ignite-core-2.15.0", "des": "Default implementation of IndexingSpi which does not index cache.", "code": "Class NoopIndexingSpi {\n\tIterator<javax.cache.Cache.Entry<?,?>> query(@Nullable String cacheName, Collection<Object> params, @Nullable IndexingQueryFilter filters); // Executes query.\n\tvoid remove(@Nullable String cacheName, Object key); // Removes index entry by key.\n\tNoopIndexingSpi setName(String name); // Sets SPI name.\n\tvoid spiStart(@Nullable String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n\tvoid store(@Nullable String cacheName, Object key, Object val, long expirationTime); // Updates index.\n}"}
{"index": 15447, "repo": "pulsar-client-api-3.0.0", "des": "When subscribing to topics using a regular expression, one can specify to only pick a certain type of topics.", "code": "@Public @Stable public enum RegexSubscriptionMode extends Enum<RegexSubscriptionMode> {\n\tstatic RegexSubscriptionMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic RegexSubscriptionMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 16717, "repo": "spring-beans-6.0.11", "des": "Status returned from YamlProcessor.DocumentMatcher.matches(java.util.Properties).", "code": "public static enum YamlProcessor.MatchStatus extends Enum<YamlProcessor.MatchStatus> {\n\tstatic YamlProcessor.MatchStatus getMostSpecific(YamlProcessor.MatchStatus a, YamlProcessor.MatchStatus b); // Compare two YamlProcessor.MatchStatus items, returning the most specific status.\n\tstatic YamlProcessor.MatchStatus valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic YamlProcessor.MatchStatus[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7318, "repo": "calcite-core-1.34.0", "des": "Extends SqlValidator to allow discovery of useful data such as fully qualified names of SQL objects, alternative valid SQL objects that can be used in the SQL statement (dubbed as hints).", "code": "Interface SqlValidatorWithHints {\n\tList<SqlMoniker> lookupHints(SqlNode topNode, SqlParserPos pos); // Looks up completion hints for a syntactically correct SQL statement that has been parsed into an expression tree.\n\t@Nullable SqlMoniker lookupQualifiedName(SqlNode topNode, SqlParserPos pos); // Looks up the fully qualified name for a SqlIdentifier at a given Parser Position in a parsed expression tree Note: call this only after SqlValidator.validate(org.apache.calcite.sql.SqlNode) has been called.\n}"}
{"index": 14929, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A context that holds information of the Authorization Server runtime environment.", "code": "public interface AuthorizationServerContext {\n\tAuthorizationServerSettings getAuthorizationServerSettings(); // Returns the AuthorizationServerSettings.\n\tString getIssuer(); // Returns the URL of the Authorization Server's issuer identifier.\n}"}
{"index": 18811, "repo": "lucene-core-9.7.0", "des": "A CompositeReader which reads multiple indexes, appending their content.", "code": "Class MultiReader {\n\tprotected void doClose(); // Implements close.\n\tIndexReader.CacheHelper getReaderCacheHelper(); // Optional method: Return a IndexReader.CacheHelper that can be used to cache based on the content of this reader.\n}"}
{"index": 13940, "repo": "spring-webflux-6.0.11", "des": "Resolver for method arguments annotated with @RequestParam from URI query string parameters.", "code": "public class RequestParamMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter, org.springframework.web.server.ServerWebExchange exchange); // Invoked when a named value is required, but AbstractNamedValueArgumentResolver.resolveName(String, MethodParameter, ServerWebExchange) returned null and there is no default value.\n\tprotected Object resolveNamedValue(String name, org.springframework.core.MethodParameter parameter, org.springframework.web.server.ServerWebExchange exchange); // Actually resolve the value synchronously.\n\tboolean supportsParameter(org.springframework.core.MethodParameter param); // Whether this resolver supports the given method parameter.\n}"}
{"index": 9668, "repo": "commons-math3-3.6.1", "des": "ISAAC: a fast cryptographic pseudo-random number generator ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit random numbers.", "code": "Class ISAACRandom {\n\tprotected int next(int bits); // Generate next pseudorandom number.\n\tvoid setSeed(int seed); // Sets the seed of the underlying random number generator using an int seed.\n\tvoid setSeed(int[] seed); // Sets the seed of the underlying random number generator using an int array seed.\n\tvoid setSeed(long seed); // Sets the seed of the underlying random number generator using a long seed.\n}"}
{"index": 8614, "repo": "avro-1.11.2", "des": "Random access to files written with DataFileWriter.", "code": "Class DataFileReader<D> {\n\tprotected void blockFinished();\n\tstatic <D> FileReader<D> openReader(File file, DatumReader<D> reader); // Open a reader for a file.\n\tstatic <D> FileReader<D> openReader(SeekableInput in, DatumReader<D> reader); // Open a reader for a file.\n\tstatic <D> DataFileReader<D> openReader(SeekableInput in, DatumReader<D> reader, DataFileStream.Header header, boolean sync); // Construct a reader for a file at the current position of the input, without reading the header.\n\tboolean pastSync(long position); // Return true if past the next synchronization point after a position.\n\tlong previousSync(); // Return the last synchronization point before our current position.\n\tvoid seek(long position); // Move to a specific, known synchronization point, one returned from DataFileWriter.sync() while writing.\n\tvoid sync(long position); // Move to the next synchronization point after a position.\n\tlong tell(); // Return the current position in the input.\n}"}
{"index": 1968, "repo": "nifi-framework-api-1.22.0", "des": "A holder object to provide atomic access to policies for a given resource and users by identity.", "code": "Interface UsersAndAccessPolicies {\n\tAccessPolicy getAccessPolicy(String resourceIdentifier, RequestAction action); // Retrieves the set of access policies for a given resource and action.\n\tSet<Group> getGroups(String userIdentity); // Retrieves the groups for a given user identity.\n\tUser getUser(String identity); // Retrieves a user by an identity string.\n}"}
{"index": 12812, "repo": "spring-data-mongodb-4.1.2", "des": "A MongoWriter is responsible for converting an object of type T to the native MongoDB representation Document.", "code": "public interface MongoWriter<T> extends EntityWriter<T,org.bson.conversions.Bson> {\n\tdefault Object convertToMongoType(Object obj); // Converts the given object into one Mongo will be able to store natively.\n\tdefault Object convertToMongoType(Object obj, MongoPersistentEntity<?> entity);\n\tObject convertToMongoType(Object obj, TypeInformation<?> typeInformation); // Converts the given object into one Mongo will be able to store natively but retains the type information in case the given TypeInformation differs from the given object type.\n\tcom.mongodb.DBRef toDBRef(Object object, MongoPersistentProperty referingProperty); // Creates a DBRef to refer to the given object.\n\tdefault DocumentPointer<?> toDocumentPointer(Object source, MongoPersistentProperty referringProperty); // Creates a the DocumentPointer representing the link to another entity.\n}"}
{"index": 14905, "repo": "spring-data-keyvalue-3.1.2", "des": "FactoryBean to create KeyValueRepository.", "code": "public class KeyValueRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID> {\n\tvoid afterPropertiesSet();\n\tprotected final RepositoryFactorySupport createRepositoryFactory();\n\tprotected KeyValueRepositoryFactory createRepositoryFactory(KeyValueOperations operations, Class<? extends AbstractQueryCreator<?,?>> queryCreator, Class<? extends RepositoryQuery> repositoryQueryType); // Create the repository factory to be used to create repositories.\n\tvoid setKeyValueOperations(KeyValueOperations operations); // Configures the KeyValueOperations to be used for the repositories.\n\tvoid setMappingContext(MappingContext<?,?> mappingContext);\n\tvoid setQueryCreator(Class<? extends AbstractQueryCreator<?,?>> queryCreator); // Configures the QueryCreatorType to be used.\n\tvoid setQueryType(Class<? extends RepositoryQuery> repositoryQueryType); // Configures the RepositoryQuery type to be created.\n}"}
{"index": 10013, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Enums for installed applications fields.", "code": "Enum ApplicationsReport.InstalledField {\n\tprotected String getName();\n\tstatic ApplicationsReport.InstalledField valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ApplicationsReport.InstalledField[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9145, "repo": "hbase-server-3.0.0-alpha-4", "des": "A SpaceQuotaSnapshotNotifier which uses the hbase:quota table.", "code": "Class TableSpaceQuotaSnapshotNotifier {\n\tvoid initialize(Connection conn); // Initializes the notifier.\n\tvoid transitionTable(TableName tableName, SpaceQuotaSnapshot snapshot); // Informs the cluster of the current state of a space quota for a table.\n}"}
{"index": 7587, "repo": "cassandra-all-4.1.2", "des": "Represents a data storage quantity used for Cassandra configuration.", "code": "Class DataStorageSpec.IntKibibytesBound {\n\tint toBytes(); // Returns the amount of data storage in bytes as an int\n\tlong toBytesInLong();\n\tint toKibibytes(); // Returns the amount of data storage in kibibytes as an int\n}"}
{"index": 17561, "repo": "spring-security-oauth2-resource-server-6.1.2", "des": "An ReactiveAuthenticationManager implementation for opaque Bearer Tokens, using an OAuth 2.0 Introspection Endpoint to check the token's validity and reveal its attributes.", "code": "public class OpaqueTokenReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager {\n\treactor.core.publisher.Mono<org.springframework.security.core.Authentication> authenticate(org.springframework.security.core.Authentication authentication); // Introspect and validate the opaque Bearer Token and then delegates Authentication instantiation to ReactiveOpaqueTokenAuthenticationConverter.\n\tvoid setAuthenticationConverter(ReactiveOpaqueTokenAuthenticationConverter authenticationConverter); // Provide with a custom bean to turn successful introspection result into an Authentication instance of your choice.\n}"}
{"index": 2449, "repo": "calcite-linq4j-1.34.0", "des": "Utilities for converting between Expression, Type and Class.", "code": "Class Types {\n\tstatic boolean allAssignable(boolean varArgs, Class[] parameterTypes, Class[] argumentTypes);\n\tstatic Type box(Type type);\n\tstatic Expression castIfNecessary(Type returnType, Expression expression); // Wraps an expression in a cast if it is not already of the desired type, or cannot be implicitly converted to it.\n\tstatic void discard(Object o);\n\tstatic PseudoField field(Field field);\n\tstatic @Nullable Type getComponentType(Type type); // Returns the component type of an array.\n\tstatic @Nullable Type getElementType(Type type); // Returns the element type of a Collection, Iterable (including Queryable and Enumerable), Iterator, Enumerator, or an array.\n\tstatic boolean isArray(Type type);\n\tstatic boolean isAssignableFrom(Type type0, Type type);\n\tstatic Constructor lookupConstructor(Type type, Class... argumentTypes); // Finds a constructor of a given class that accepts a given set of arguments.\n\tstatic Field lookupField(Type type, String name);\n\tstatic Method lookupMethod(Class clazz, String methodName, Class... argumentTypes); // Finds a method of a given name that accepts a given set of arguments.\n\tstatic boolean needTypeCast(Type fromType, Type toType); // When trying to cast/convert a Type to another Type, it is necessary to pre-check whether the cast operation is needed.\n\tstatic Field nthField(int ordinal, Class clazz);\n\tstatic PseudoField nthField(int ordinal, Type clazz);\n\tstatic Type of(Type type, Type... typeArguments); // Creates a type with generic parameters.\n\tstatic Type stripGenerics(Type type);\n\tstatic Class toClass(Type type);\n\tstatic Class[] toClassArray(Iterable<? extends Expression> arguments);\n\tstatic Type unbox(Type type);\n}"}
{"index": 16043, "repo": "wicket-request-10.0.0-M1", "des": "A hint where the parameter is read/parsed from.", "code": "public static enum INamedParameters.Type extends Enum<INamedParameters.Type> {\n\tstatic INamedParameters.Type valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic INamedParameters.Type[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 442, "repo": "phoenix-core-5.1.3", "des": "The main entry point is in GroupedAggregateRegionObserver.", "code": "Class SpillableGroupByCache {\n\tAggregator[] cache(ImmutableBytesPtr cacheKey); // Extract an element from the Cache If element is not present in in-memory cache / or in spill files cache implements an implicit put() of a new key/value tuple and loads it into the cache\n\tvoid close(); // Closes cache and releases spill resources\n\torg.apache.hadoop.hbase.regionserver.RegionScanner getScanner(org.apache.hadoop.hbase.regionserver.RegionScanner s);\n\tlong size(); // Size function returns the current number of cached elements\n}"}
{"index": 1737, "repo": "kafka-clients-3.5.0", "des": "Request context interface that provides data from request header as well as connection and authentication information to plugins.", "code": "Interface AuthorizableRequestContext {\n\tInetAddress clientAddress(); // Returns client IP address from which request was sent.\n\tString clientId(); // Returns the client id from the request header.\n\tint correlationId(); // Returns the correlation id from the request header.\n\tString listenerName(); // Returns name of listener on which request was received.\n\tKafkaPrincipal principal(); // Returns authenticated principal for the connection on which request was received.\n\tint requestType(); // 16-bit API key of the request from the request header.\n\tint requestVersion(); // Returns the request version from the request header.\n\tSecurityProtocol securityProtocol(); // Returns the security protocol for the listener on which request was received.\n}"}
{"index": 3803, "repo": "hbase-client-3.0.0-alpha-4", "des": "This contains a visibility expression which can be associated with a cell.", "code": "Class CellVisibility {\n\tString getExpression(); // Returns The visibility expression\n\tstatic String quote(byte[] auth); // Helps in quoting authentication Strings.\n\tstatic String quote(String auth); // Helps in quoting authentication Strings.\n}"}
{"index": 2015, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template Decimal64ColumnArithmeticDecimal64Scalar.", "code": "Class Decimal64ColAddDecimal64Scalar {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean shouldConvertDecimal64ToDecimal(); // By default vector expressions do not handle decimal64 types and should be converted into Decimal types if its output cannot handle Decimal64.\n\tString vectorExpressionParameters();\n}"}
{"index": 1933, "repo": "hadoop-hdfs-3.3.6", "des": "WebImageViewer loads a fsimage and exposes read-only WebHDFS API for its namespace.", "code": "Class WebImageViewer {\n\tvoid close();\n\tint getPort(); // Get the listening port.\n\tvoid initServer(String fsimage); // Start WebImageViewer.\n\tvoid start(String fsimage); // Start WebImageViewer and wait until the thread is interrupted.\n}"}
{"index": 18702, "repo": "poi-5.2.3", "des": "This class is used to simplify error handling logic within operator and function implementations.", "code": "Class EvaluationException {\n\tErrorEval getErrorEval();\n\tstatic EvaluationException invalidRef(); // #REF! - Illegal or deleted cell reference\n\tstatic EvaluationException invalidValue(); // #VALUE! - Wrong type of operand\n\tstatic EvaluationException numberError(); // #NUM! - Value range overflow\n}"}
{"index": 15443, "repo": "pulsar-client-api-3.0.0", "des": "Base type of exception thrown by Pulsar client.", "code": "@Public @Stable public class PulsarClientException extends IOException {\n\tCollection<Throwable> getPreviousExceptions(); // Get the collection of previous exceptions which have caused retries for this operation.\n\tstatic Collection<Throwable> getPreviousExceptions(Throwable t);\n\tlong getSequenceId();\n\tstatic boolean isRetriableError(Throwable t);\n\tstatic void setPreviousExceptions(Throwable t, Collection<Throwable> previous);\n\tvoid setPreviousExceptions(Collection<Throwable> previous); // Add a list of previous exception which occurred for the same operation and have been retried.\n\tvoid setSequenceId(long sequenceId);\n\tstatic PulsarClientException unwrap(Throwable t);\n\tstatic Throwable wrap(Throwable t, String msg);\n}"}
{"index": 5171, "repo": "druid-processing-26.0.0", "des": "This interface represents a complex column and can be implemented by druid extension writer of a custom column with arbitrary serialization instead of a custom column that serializes rows of objects serialized using GenericIndexed class which is default implementation of \"writeToXXX\" methods in ComplexColumnSerializer.", "code": "Interface ComplexColumn {\n\tvoid close(); // Close and release any resources associated with this column.\n\tClass<?> getClazz();\n\tint getLength();\n\tObject getRowValue(int rowNum); // Return rows in the column.\n\tString getTypeName();\n\tdefault ColumnValueSelector<?> makeColumnValueSelector(ReadableOffset offset); // Optionally overridden when complex column serialization is not based on default serialization based on GenericIndexed in ComplexColumnSerializer.\n\tdefault VectorObjectSelector makeVectorObjectSelector(ReadableVectorOffset offset);\n}"}
{"index": 12443, "repo": "drill-common-1.21.1", "des": "A CheckedFuture is a ListenableFuture that includes versions of the get methods that can throw a checked exception.", "code": "public interface CheckedFuture<V,X extends Exception> extends org.apache.drill.shaded.guava.com.google.common.util.concurrent.ListenableFuture<V> {\n\tV checkedGet(); // Exception checking version of Future.get() that will translate InterruptedException, CancellationException and ExecutionException into application-specific exceptions.\n\tV checkedGet(long timeout, TimeUnit unit); // Exception checking version of Future.get(long, TimeUnit) that will translate InterruptedException, CancellationException and ExecutionException into application-specific exceptions.\n}"}
{"index": 14866, "repo": "spring-data-commons-3.1.2", "des": "Extension of TargetClassAware to be able to ignore the getter on JSON rendering.", "code": "public interface TargetAware extends TargetClassAware, RawTargetAccess {\n\tClass<?> getDecoratedClass(); // Re-declaration of Spring Framework 4.3's DecoratingProxy.getDecoratedClass() so that we can exclude it from Jackson serialization.\n\tObject getTarget(); // Returns the proxy target.\n\tClass<?> getTargetClass(); // Returns the type of the proxy target.\n}"}
{"index": 12639, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $arrayElementAt.", "code": "public static class ArrayOperators.ArrayElemAt extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tstatic ArrayOperators.ArrayElemAt arrayOf(String fieldReference); // Creates new ArrayOperators.ArrayElemAt.\n\tstatic ArrayOperators.ArrayElemAt arrayOf(Collection<?> values); // Creates new ArrayOperators.ArrayElemAt.\n\tstatic ArrayOperators.ArrayElemAt arrayOf(AggregationExpression expression); // Creates new ArrayOperators.ArrayElemAt.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tArrayOperators.ArrayElemAt elementAt(int index); // Use the element with given index number.\n\tArrayOperators.ArrayElemAt elementAt(String arrayFieldReference); // Use the element at the index number traken from the given field.\n\tArrayOperators.ArrayElemAt elementAt(AggregationExpression expression); // Use the element at the index number evaluated from the given AggregationExpression.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 1046, "repo": "ignite-core-2.15.0", "des": "Request to get MVCC snapshot for a query.", "code": "Class MvccQuerySnapshotRequest {\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tlong futureId();\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean processedFromNioThread();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean waitForCoordinatorInit();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 4977, "repo": "commons-collections-3.2.2", "des": "Decorates a set of other sets to provide a single unified view.", "code": "Class CompositeSet {\n\tvoid addComposited(Collection c); // Add a Set to this composite\n\tvoid addComposited(Collection[] comps); // Add an array of sets to this composite\n\tvoid addComposited(Collection c, Collection d); // Add two sets to this composite\n\tboolean equals(Object obj);\n\tboolean remove(Object obj); // If a CollectionMutator is defined for this CompositeSet then this method will be called anyway.\n\tvoid setMutator(CompositeCollection.CollectionMutator mutator); // This can receive either a CompositeCollection.CollectionMutator or a CompositeSet.SetMutator.\n}"}
{"index": 16399, "repo": "spring-integration-ftp-6.1.2", "des": "Base class for FTP SessionFactory implementations.", "code": "public abstract class AbstractFtpSessionFactory<T extends org.apache.commons.net.ftp.FTPClient> extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.commons.net.ftp.FTPFile> {\n\tprotected abstract T createClientInstance();\n\tFtpSession getSession();\n\tprotected void postProcessClientAfterConnect(T t); // Will handle additional initialization after client.connect() method was invoked, but before any action on the client has been taken.\n\tprotected void postProcessClientBeforeConnect(T client); // Will handle additional initialization before client.connect() method was invoked.\n\tvoid setBufferSize(int bufferSize);\n\tvoid setClientMode(int clientMode); // ACTIVE_LOCAL_DATA_CONNECTION_MODE = 0 A constant indicating the FTP session is expecting all transfers to occur between the client (local) and server and that the server should connect to the client's data port to initiate a data transfer.\n\tvoid setConfig(org.apache.commons.net.ftp.FTPClientConfig config);\n\tvoid setConnectTimeout(int connectTimeout); // Set the connect timeout for the socket.\n\tvoid setControlEncoding(String controlEncoding);\n\tvoid setDataTimeout(int dataTimeout); // Set the (socket option) timeout on the data connection.\n\tvoid setDefaultTimeout(int defaultTimeout); // Set the (socket option) timeout on the command socket.\n\tvoid setFileType(int fileType); // File types defined by FTP constants: FTP.ASCII_FILE_TYPE FTP.EBCDIC_FILE_TYPE FTP.BINARY_FILE_TYPE (DEFAULT) FTP.LOCAL_FILE_TYPE .\n\tvoid setHost(String host);\n\tvoid setPassword(String pass);\n\tvoid setPort(int port);\n\tvoid setUsername(String user);\n}"}
{"index": 12369, "repo": "spring-integration-mqtt-6.1.2", "des": "A utility abstraction over MQTT client which can be used in any MQTT-related component without need to handle generic client callbacks, reconnects etc.", "code": "public interface ClientManager<T,C> extends org.springframework.context.SmartLifecycle, MqttComponent<C> {\n\tvoid addCallback(ClientManager.ConnectCallback connectCallback); // Register a callback for the connectComplete event from the client.\n\tT getClient(); // Return the managed client.\n\tboolean isManualAcks(); // If manual acknowledge has to be used; false by default.\n\tboolean removeCallback(ClientManager.ConnectCallback connectCallback); // Remove the callback from registration.\n}"}
{"index": 13800, "repo": "spring-webmvc-6.0.11", "des": "An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.", "code": "public class ScriptTemplateView extends AbstractUrlBasedView {\n\tprotected ScriptTemplateConfig autodetectViewConfig();\n\tboolean checkResource(Locale locale); // Check whether the underlying resource that the configured URL points to actually exists.\n\tprotected ScriptEngine createEngineFromName(String engineName);\n\tprotected ScriptEngine getEngine();\n\tprotected org.springframework.core.io.Resource getResource(String location);\n\tprotected String getTemplate(String path);\n\tprotected void initApplicationContext(org.springframework.context.ApplicationContext context);\n\tprotected void loadScripts(ScriptEngine engine);\n\tprotected void prepareResponse(HttpServletRequest request, HttpServletResponse response); // Prepare the given response for rendering.\n\tprotected void renderMergedOutputModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Subclasses must implement this method to actually render the view.\n\tvoid setCharset(Charset charset); // See ScriptTemplateConfigurer.setCharset(Charset) documentation.\n\tvoid setEngine(ScriptEngine engine); // See ScriptTemplateConfigurer.setEngine(ScriptEngine) documentation.\n\tvoid setEngineName(String engineName); // See ScriptTemplateConfigurer.setEngineName(String) documentation.\n\tvoid setEngineSupplier(Supplier<ScriptEngine> engineSupplier); // See ScriptTemplateConfigurer.setEngineSupplier(Supplier) documentation.\n\tvoid setRenderFunction(String functionName); // See ScriptTemplateConfigurer.setRenderFunction(String) documentation.\n\tvoid setRenderObject(String renderObject); // See ScriptTemplateConfigurer.setRenderObject(String) documentation.\n\tvoid setResourceLoaderPath(String resourceLoaderPath); // See ScriptTemplateConfigurer.setResourceLoaderPath(String) documentation.\n\tvoid setScripts(String... scripts); // See ScriptTemplateConfigurer.setScripts(String...) documentation.\n\tvoid setSharedEngine(Boolean sharedEngine); // See ScriptTemplateConfigurer.setSharedEngine(Boolean) documentation.\n}"}
{"index": 10794, "repo": "spring-boot-actuator-3.1.1", "des": "A Base for EndpointsSupplier implementations that discover @Endpoint beans and @EndpointExtension beans in an application context.", "code": "public abstract class EndpointDiscoverer<E extends ExposableEndpoint<O>,O extends Operation> extends Object implements EndpointsSupplier<E> {\n\tprotected abstract E createEndpoint(Object endpointBean, EndpointId id, boolean enabledByDefault, Collection<O> operations); // Factory method called to create the endpoint.\n\tprotected abstract O createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker); // Factory method to create an endpoint operation.\n\tprotected abstract EndpointDiscoverer.OperationKey createOperationKey(O operation); // Create an EndpointDiscoverer.OperationKey for the given operation.\n\tfinal Collection<E> getEndpoints(); // Return the provided endpoints.\n\tprotected Class<? extends E> getEndpointType();\n\tprotected boolean isEndpointTypeExposed(Class<?> beanType); // Determine if an endpoint bean should be exposed.\n\tprotected boolean isExtensionTypeExposed(Class<?> extensionBeanType); // Determine if an extension bean should be exposed.\n}"}
{"index": 10561, "repo": "groovy-all-4.0.13", "des": "This class is important to the performance of the parser.", "code": "public class LazyValueMap extends AbstractMap<String,Object> implements ValueMap<String,Object> {\n\tfinal void add(MapItemValue miv); // Adds a new MapItemValue to the mapping.\n\tfinal void chopMap(); // Chop this map.\n\tSet<Map.Entry<String,Object>> entrySet();\n\tfinal Object get(Object key); // Gets the item by key from the mapping.\n\tboolean hydrated(); // Has the map been hydrated.\n\tMap.Entry<String,Value>[] items(); // Give me the items in the map without hydrating the map.\n\tint len(); // Return size w/o hydrating the map.\n\tValue put(String key, Object value);\n\tint size();\n\tCollection<Object> values();\n}"}
{"index": 4103, "repo": "camel-core-3.0.0-RC1", "des": "The Flatpack data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).", "code": "Class FlatpackDataFormat {\n\tBoolean getAllowShortLines();\n\tString getDefinition();\n\tString getDelimiter();\n\tBoolean getFixed();\n\tBoolean getIgnoreExtraColumns();\n\tBoolean getIgnoreFirstRecord();\n\tString getParserFactoryRef();\n\tString getTextQualifier();\n\tvoid setAllowShortLines(Boolean allowShortLines); // Allows for lines to be shorter than expected and ignores the extra characters\n\tvoid setDefinition(String definition); // The flatpack pzmap configuration file.\n\tvoid setDelimiter(String delimiter); // The delimiter char (could be ; , or similar)\n\tvoid setFixed(Boolean fixed); // Delimited or fixed.\n\tvoid setIgnoreExtraColumns(Boolean ignoreExtraColumns); // Allows for lines to be longer than expected and ignores the extra characters.\n\tvoid setIgnoreFirstRecord(Boolean ignoreFirstRecord); // Whether the first line is ignored for delimited files (for the column headers).\n\tvoid setParserFactoryRef(String parserFactoryRef); // References to a custom parser factory to lookup in the registry\n\tvoid setTextQualifier(String textQualifier); // If the text is qualified with a character.\n}"}
{"index": 16668, "repo": "spring-beans-6.0.11", "des": "PagedListHolder is a simple state holder for handling lists of objects, separating them into pages.", "code": "public class PagedListHolder<E> extends Object implements Serializable {\n\tprotected SortDefinition copySortDefinition(SortDefinition sort); // Create a deep copy of the given sort definition, for use as state holder to compare a modified sort definition against.\n\tprotected void doSort(List<E> source, SortDefinition sort); // Actually perform sorting of the given source list, according to the given sort definition.\n\tint getFirstElementOnPage(); // Return the element index of the first element on the current page.\n\tint getFirstLinkedPage(); // Return the first page to which create a link around the current page.\n\tint getLastElementOnPage(); // Return the element index of the last element on the current page.\n\tint getLastLinkedPage(); // Return the last page to which create a link around the current page.\n\tint getMaxLinkedPages(); // Return the maximum number of page links to a few pages around the current one.\n\tint getNrOfElements(); // Return the total number of elements in the source list.\n\tint getPage(); // Return the current page number.\n\tint getPageCount(); // Return the number of pages for the current source list.\n\tList<E> getPageList(); // Return a sub-list representing the current page.\n\tint getPageSize(); // Return the current page size.\n\tDate getRefreshDate(); // Return the last time the list has been fetched from the source provider.\n\tSortDefinition getSort(); // Return the sort definition for this holder.\n\tList<E> getSource(); // Return the source list for this holder.\n\tboolean isFirstPage(); // Return if the current page is the first one.\n\tboolean isLastPage(); // Return if the current page is the last one.\n\tvoid nextPage(); // Switch to next page.\n\tvoid previousPage(); // Switch to previous page.\n\tvoid resort(); // Resort the list if necessary, i.e.\n\tvoid setMaxLinkedPages(int maxLinkedPages); // Set the maximum number of page links to a few pages around the current one.\n\tvoid setPage(int page); // Set the current page number.\n\tvoid setPageSize(int pageSize); // Set the current page size.\n\tvoid setSort(SortDefinition sort); // Set the sort definition for this holder.\n\tvoid setSource(List<E> source); // Set the source list for this holder.\n}"}
{"index": 17982, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for MessageContext instances.", "code": "public abstract class AbstractMessageContext extends Object implements MessageContext {\n\tboolean containsProperty(String name); // Check if this message context contains a property with the given name.\n\tObject getProperty(String name); // Gets the value of a specific property from the MessageContext.\n\tString[] getPropertyNames(); // Return the names of all properties in this MessageContext.\n\tvoid removeProperty(String name); // Removes a property from the MessageContext.\n\tvoid setProperty(String name, Object value); // Sets the name and value of a property associated with the MessageContext.\n}"}
{"index": 11500, "repo": "spring-restdocs-core-3.0.0", "des": "A representation of a Cookie received in a request.", "code": "public final class RequestCookie extends Object {\n\tString getName(); // Returns the name of the cookie.\n\tString getValue(); // Returns the value of the cookie.\n}"}
{"index": 16491, "repo": "spring-batch-infrastructure-5.0.2", "des": "The LdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.", "code": "public class LdifReader extends AbstractItemCountingItemStreamItemReader<org.springframework.ldap.core.LdapAttributes> implements ResourceAwareItemReaderItemStream<org.springframework.ldap.core.LdapAttributes>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void doClose(); // Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doOpen(); // Open resources necessary to start reading input.\n\tprotected org.springframework.ldap.core.LdapAttributes doRead(); // Read next item from input.\n\tvoid setRecordsToSkip(int recordsToSkip); // Public setter for the number of lines to skip at the start of a file.\n\tvoid setResource(org.springframework.core.io.Resource resource); // Establishes the resource that will be used as the input for the LdifReader.\n\tvoid setSkippedRecordsCallback(RecordCallbackHandler skippedRecordsCallback); // RecordCallbackHandler implementations can be used to take action on skipped records.\n\tvoid setStrict(boolean strict); // In strict mode the reader will throw an exception on AbstractItemCountingItemStreamItemReader.open(org.springframework.batch.item.ExecutionContext) if the input resource does not exist.\n}"}
{"index": 10347, "repo": "spring-core-6.0.11", "des": "PropertyResolver implementation that resolves property values against an underlying set of PropertySources.", "code": "public class PropertySourcesPropertyResolver extends AbstractPropertyResolver {\n\tboolean containsProperty(String key); // Return whether the given property key is available for resolution, i.e.\n\tString getProperty(String key); // Return the property value associated with the given key, or null if the key cannot be resolved.\n\t<T> T getProperty(String key, Class<T> targetValueType); // Return the property value associated with the given key, or null if the key cannot be resolved.\n\tprotected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders);\n\tprotected String getPropertyAsRawString(String key); // Retrieve the specified property as a raw String, i.e.\n\tprotected void logKeyFound(String key, PropertySource<?> propertySource, Object value); // Log the given key as found in the given PropertySource, resulting in the given value.\n}"}
{"index": 17022, "repo": "spring-integration-core-6.1.2", "des": "Base class for Message-splitting handlers.", "code": "public abstract class AbstractMessageSplitter extends AbstractReplyProducingMessageHandler implements DiscardingMessageHandler {\n\tprotected void addHeaders(org.springframework.messaging.Message<?> message, Map<String,Object> headers); // Allows subclasses to add extra headers to the output messages.\n\tprotected void doInit();\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\torg.springframework.messaging.MessageChannel getDiscardChannel(); // Return the discard channel.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tprotected final Object handleRequestMessage(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to handle the request Message.\n\tprotected int obtainSizeIfPossible(Iterable<?> iterable); // Obtain a size of the provided Iterable.\n\tprotected int obtainSizeIfPossible(Iterator<?> iterator); // Obtain a size of the provided Iterator.\n\tprotected void produceOutput(Object result, org.springframework.messaging.Message<?> requestMessage);\n\tvoid setApplySequence(boolean applySequence); // Set the applySequence flag to the specified value.\n\tvoid setDiscardChannel(org.springframework.messaging.MessageChannel discardChannel); // Specify a channel where rejected Messages should be sent.\n\tvoid setDiscardChannelName(String discardChannelName); // Specify a channel bean name (resolved to MessageChannel lazily) where rejected Messages should be sent.\n\tprotected boolean shouldCopyRequestHeaders(); // Subclasses may override this.\n\tprotected abstract Object splitMessage(org.springframework.messaging.Message<?> message); // Subclasses must override this method to split the received Message.\n\tprotected boolean willAddHeaders(org.springframework.messaging.Message<?> message); // Return true if the subclass needs to add headers in the resulting splits.\n}"}
{"index": 16053, "repo": "wicket-request-10.0.0-M1", "des": "Encodes page parameters into Url path fragments instead of the query string like the default PageParametersEncoder.", "code": "public class UrlPathPageParametersEncoder extends Object implements IPageParametersEncoder {\n\tPageParameters decodePageParameters(Url url); // Decodes the given URL to PageParameters.\n\tUrl encodePageParameters(PageParameters params); // Encode the given PageParameters instance into URL.\n}"}
{"index": 17310, "repo": "groovy-4.0.13", "des": "Represents a standard for loop in Groovy", "code": "public class ForStatement extends Statement implements LoopingStatement {\n\tExpression getCollectionExpression();\n\tStatement getLoopBlock(); // Gets the loop block.\n\tParameter getVariable();\n\tVariableScope getVariableScope();\n\tClassNode getVariableType();\n\tvoid setCollectionExpression(Expression collectionExpression);\n\tvoid setLoopBlock(Statement loopBlock); // Sets the loop block.\n\tvoid setVariableScope(VariableScope variableScope);\n\tvoid visit(GroovyCodeVisitor visitor);\n}"}
{"index": 7523, "repo": "cassandra-all-4.1.2", "des": "SSTableReaders are open()ed by Keyspace.", "code": "Class BigTableReader {\n\tprotected RowIndexEntry getPosition(PartitionPosition key, SSTableReader.Operator op, boolean updateCacheAndStats, boolean permitMatchPastLast, SSTableReadsListener listener);\n\tISSTableScanner getScanner(); // Direct I/O SSTableScanner over the full sstable.\n\tISSTableScanner getScanner(java.util.Collection<Range<Token>> ranges); // Direct I/O SSTableScanner over a defined collection of ranges of tokens.\n\tISSTableScanner getScanner(java.util.Iterator<AbstractBounds<PartitionPosition>> boundsIterator); // Direct I/O SSTableScanner over an iterator of bounds.\n\tISSTableScanner partitionIterator(ColumnFilter columns, DataRange dataRange, SSTableReadsListener listener); // Returns a partition iterator for the given data range.\n\tUnfilteredRowIterator rowIterator(DecoratedKey key, Slices slices, ColumnFilter selectedColumns, boolean reversed, SSTableReadsListener listener); // Returns a row iterator for the given partition, applying the specified row and column filters.\n\tUnfilteredRowIterator rowIterator(FileDataInput file, DecoratedKey key, RowIndexEntry indexEntry, Slices slices, ColumnFilter selectedColumns, boolean reversed);\n\tUnfilteredRowIterator simpleIterator(FileDataInput dfile, DecoratedKey key, RowIndexEntry position, boolean tombstoneOnly);\n}"}
{"index": 16910, "repo": "spring-integration-ip-6.1.2", "des": "An IntegrationComponentSpec for AbstractConnectionFactorys.", "code": "public abstract class AbstractConnectionFactorySpec<S extends AbstractConnectionFactorySpec<S,C>,C extends AbstractConnectionFactory> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,C> {\n\tS deserializer(org.springframework.core.serializer.Deserializer<?> deserializer);\n\tS id(String id);\n\tS interceptorFactoryChain(TcpConnectionInterceptorFactoryChain interceptorFactoryChain);\n\tS leaveOpen(boolean leaveOpen);\n\tS lookupHost(boolean lookupHost);\n\tS mapper(TcpMessageMapper mapper);\n\tS nioHarvestInterval(int nioHarvestInterval);\n\tS readDelay(long readDelay);\n\tS serializer(org.springframework.core.serializer.Serializer<?> serializer);\n\tS singleUseConnections(boolean single); // This connection factory uses a new connection for each operation.\n\tS socketSupport(TcpSocketSupport tcpSocketSupport);\n\tS soKeepAlive(boolean soKeepAlive);\n\tS soLinger(int soLinger);\n\tS soReceiveBufferSize(int soReceiveBufferSize);\n\tS soSendBufferSize(int soSendBufferSize);\n\tS soTcpNoDelay(boolean soTcpNoDelay);\n\tS soTimeout(int soTimeout);\n\tS soTrafficClass(int soTrafficClass);\n\tS taskExecutor(Executor taskExecutor);\n\tS tcpSocketSupport(TcpSocketSupport tcpSocketSupport); // Deprecated. in favor of socketSupport(TcpSocketSupport).\n}"}
{"index": 17506, "repo": "pulsar-broker-3.0.0", "des": "This is a sticky-key consumer selector based user provided range.", "code": "public class HashRangeExclusiveStickyKeyConsumerSelector extends Object implements StickyKeyConsumerSelector {\n\tCompletableFuture<Void> addConsumer(Consumer consumer); // Add a new consumer.\n\tMap<Consumer,List<org.apache.pulsar.client.api.Range>> getConsumerKeyHashRanges(); // Get key hash ranges handled by each consumer.\n\tvoid removeConsumer(Consumer consumer); // Remove the consumer.\n\tConsumer select(int hash); // Select a consumer by hash.\n}"}
{"index": 6184, "repo": "jackson-databind-2.15.2", "des": "Interface that defines API for filter objects use (as configured using JsonFilter) for filtering bean properties to serialize.", "code": "Interface PropertyFilter {\n\tvoid depositSchemaProperty(PropertyWriter writer, JsonObjectFormatVisitor objectVisitor, SerializerProvider provider); // Method called by BeanSerializer to let the filter determine whether, and in what form the given property exist within the parent, or root, schema.\n\tvoid serializeAsElement(Object elementValue, JsonGenerator gen, SerializerProvider prov, PropertyWriter writer); // Method called by container to let the filter decide what to do with given element value: the usual choices are to either filter out (i.e.\n\tvoid serializeAsField(Object pojo, JsonGenerator gen, SerializerProvider prov, PropertyWriter writer); // Method called by BeanSerializer to let the filter decide what to do with given bean property value: the usual choices are to either filter out (i.e.\n}"}
{"index": 10275, "repo": "spring-core-6.0.11", "des": "Central interface used for code generation.", "code": "public interface GenerationContext {\n\tGeneratedClasses getGeneratedClasses(); // Get the GeneratedClasses used by the context.\n\tGeneratedFiles getGeneratedFiles(); // Get the GeneratedFiles used by the context.\n\tRuntimeHints getRuntimeHints(); // Get the RuntimeHints used by the context.\n\tGenerationContext withName(String name); // Create a new GenerationContext instance using the specified name to qualify generated assets for a dedicated round of code generation.\n}"}
{"index": 11934, "repo": "maven-core-4.0.0-alpha-7", "des": "The result of a project dependency resolution.", "code": "public interface DependencyResolutionResult {\n\tList<Exception> getCollectionErrors(); // Gets the errors that occurred while building the dependency graph.\n\tList<org.eclipse.aether.graph.Dependency> getDependencies(); // Gets the transitive dependencies of the project that were not excluded by DependencyResolutionRequest.getResolutionFilter().\n\torg.eclipse.aether.graph.DependencyNode getDependencyGraph(); // Gets the dependency graph of the project.\n\tList<Exception> getResolutionErrors(org.eclipse.aether.graph.Dependency dependency); // Gets the errors that occurred while resolving the specified dependency.\n\tList<org.eclipse.aether.graph.Dependency> getResolvedDependencies(); // Gets the dependencies that were successfully resolved.\n\tList<org.eclipse.aether.graph.Dependency> getUnresolvedDependencies(); // Gets the dependencies that could not be resolved.\n}"}
{"index": 14924, "repo": "spring-security-test-6.1.2", "des": "The TestSecurityContextHolder is very similar to SecurityContextHolder, but is necessary for testing.", "code": "public final class TestSecurityContextHolder extends Object {\n\tstatic void clearContext(); // Clears the SecurityContext from TestSecurityContextHolder and SecurityContextHolder.\n\tstatic org.springframework.security.core.context.SecurityContext getContext(); // Gets the SecurityContext from TestSecurityContextHolder.\n\tstatic void setAuthentication(org.springframework.security.core.Authentication authentication); // Creates a new SecurityContext with the given Authentication.\n\tstatic void setContext(org.springframework.security.core.context.SecurityContext context); // Sets the SecurityContext on TestSecurityContextHolder and SecurityContextHolder.\n}"}
{"index": 14167, "repo": "wicket-core-10.0.0-M1", "des": "This is one of Wicket's default string resource loaders.", "code": "public class ComponentStringResourceLoader extends Object implements IStringResourceLoader {\n\tprotected IPropertiesFactory getPropertiesFactory(); // Get the properties file factory which loads the properties based on locale and style from *.properties and *.xml files\n\tprotected String getResourcePath(Component component); // get path for resource lookup\n\tprotected boolean isStopResourceSearch(Class<?> clazz); // Check the supplied class to see if it is one that we shouldn't bother further searches up the class hierarchy for properties.\n\tprotected boolean isStopResourceSearch(Component component); // Check the supplied component to see if it is one that we shouldn't bother further searches up the component hierarchy for properties.\n\tString loadStringResource(Class<?> clazz, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component class, resource key, locale and style.\n\tString loadStringResource(Component component, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component, resource key, locale and style.\n\tprotected IResourceNameIterator newResourceNameIterator(String path, Locale locale, String style, String variation);\n}"}
{"index": 547, "repo": "ignite-core-2.15.0", "des": "Configuration defining various aspects of cache keys without explicit usage of annotations on user classes.", "code": "Class CacheKeyConfiguration {\n\tboolean equals(Object o);\n\tString getAffinityKeyFieldName(); // Gets affinity key field name.\n\tString getTypeName(); // Sets type name for which affinity field name is being defined.\n\tCacheKeyConfiguration setAffinityKeyFieldName(String affKeyFieldName); // Sets affinity key field name.\n\tCacheKeyConfiguration setTypeName(String typeName);\n}"}
{"index": 8989, "repo": "hbase-server-3.0.0-alpha-4", "des": "Util class to calculate memory size for memstore(on heap, off heap), block cache(L1, L2) of RS.", "code": "Class MemorySizeUtil {\n\tstatic void checkForClusterFreeHeapMemoryLimit(org.apache.hadoop.conf.Configuration conf); // Checks whether we have enough heap memory left out after portion for Memstore and Block cache.\n\tstatic float getBlockCacheHeapPercent(org.apache.hadoop.conf.Configuration conf); // Retrieve configured size for on heap block cache as percentage of total heap.\n\tstatic long getBucketCacheSize(org.apache.hadoop.conf.Configuration conf);\n\tstatic float getGlobalMemStoreHeapLowerMark(org.apache.hadoop.conf.Configuration conf, boolean honorOldConfig); // Retrieve configured size for global memstore lower water mark as fraction of global memstore size.\n\tstatic float getGlobalMemStoreHeapPercent(org.apache.hadoop.conf.Configuration c, boolean logInvalid); // Retrieve global memstore configured size as percentage of total heap.\n\tstatic Pair<Long,MemoryType> getGlobalMemStoreSize(org.apache.hadoop.conf.Configuration conf); // Returns Pair of global memstore size and memory type(ie.\n\tstatic long getOnHeapCacheSize(org.apache.hadoop.conf.Configuration conf);\n\tstatic long getOnheapGlobalMemStoreSize(org.apache.hadoop.conf.Configuration conf); // Returns the onheap global memstore limit based on the config 'hbase.regionserver.global.memstore.size'.\n\tstatic MemoryUsage safeGetHeapMemoryUsage(); // Return JVM memory statistics while properly handling runtime exceptions from the JVM.\n}"}
{"index": 15229, "repo": "spring-boot-3.1.1", "des": "Configuration data that has been loaded from a ConfigDataResource and may ultimately contribute property sources to Spring's Environment.", "code": "public final class ConfigData extends Object {\n\tConfigData.Options getOptions(org.springframework.core.env.PropertySource<?> propertySource); // Return the config data options that apply to the given source.\n\tList<org.springframework.core.env.PropertySource<?>> getPropertySources(); // Return the configuration data property sources in ascending priority order.\n}"}
{"index": 5071, "repo": "commons-collections-3.2.2", "des": "Transformer implementation that returns the result of calling String.", "code": "Class StringValueTransformer {\n\tstatic Transformer getInstance(); // Factory returning the singleton instance.\n\tObject transform(Object input); // Transforms the input to result by calling String.valueOf.\n}"}
{"index": 193, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns false if the input is null.", "code": "Class NullIsFalsePredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning the result of the decorated predicate once a null check is performed.\n\tPredicate<? super T>[] getPredicates(); // Gets the predicate being decorated.\n\tstatic <T> Predicate<T> nullIsFalsePredicate(Predicate<? super T> predicate); // Factory to create the null false predicate.\n}"}
{"index": 4597, "repo": "commons-vfs2-2.9.0", "des": "An enumerated type to deal with the various cache strategies.", "code": "Enum CacheStrategy {\n\tString getName(); // Returns the name of the scope.\n\tstatic CacheStrategy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CacheStrategy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17888, "repo": "spring-web-6.0.11", "des": "Subclass of ErrorResponseException that accepts a \"reason\", and by default maps that to the \"detail\" of the ProblemDetail.", "code": "public class ResponseStatusException extends ErrorResponseException {\n\tHttpHeaders getHeaders(); // Return headers to add to the error response, e.g.\n\tString getMessage();\n\tString getReason(); // The reason explaining the exception (potentially null or empty).\n\tHttpHeaders getResponseHeaders(); // Deprecated. as of 6.0 in favor of getHeaders()\n}"}
{"index": 4075, "repo": "camel-core-3.0.0-RC1", "des": "The Base64 data format is used for base64 encoding and decoding.", "code": "Class Base64DataFormat {\n\tInteger getLineLength();\n\tString getLineSeparator();\n\tBoolean getUrlSafe();\n\tvoid setLineLength(Integer lineLength); // To specific a maximum line length for the encoded data.\n\tvoid setLineSeparator(String lineSeparator); // The line separators to use.\n\tvoid setUrlSafe(Boolean urlSafe); // Instead of emitting '+' and '/' we emit '-' and '_' respectively.\n}"}
{"index": 17913, "repo": "spring-web-6.0.11", "des": "FactoryBean that retrieves a specific ServletContext init parameter (that is, a \"context-param\" defined in web.xml).", "code": "public class ServletContextParameterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<String>, ServletContextAware {\n\tString getObject();\n\tClass<String> getObjectType();\n\tboolean isSingleton();\n\tvoid setInitParamName(String initParamName); // Set the name of the ServletContext init parameter to expose.\n\tvoid setServletContext(ServletContext servletContext); // Set the ServletContext that this object runs in.\n}"}
{"index": 7683, "repo": "cassandra-all-4.1.2", "des": "Interface for providing signals back and requesting information from the owner, i.", "code": "Interface Memtable.Owner {\n\tMemtable getCurrentMemtable(); // Get the current memtable for this owner.\n\tjava.lang.Iterable<Memtable> getIndexMemtables(); // Collect the index memtables flushed together with this.\n\tShardBoundaries localRangeSplits(int shardCount); // Construct a list of boundaries that split the locally-owned ranges into the given number of shards, splitting the owned space evenly.\n\tFuture<CommitLogPosition> signalFlushRequired(Memtable memtable, ColumnFamilyStore.FlushReason reason); // Signal to the owner that a flush is required (e.g.\n}"}
{"index": 17957, "repo": "spring-web-6.0.11", "des": "Holder for a Callable, a timeout value, and a task executor.", "code": "public class WebAsyncTask<V> extends Object implements org.springframework.beans.factory.BeanFactoryAware {\n\tCallable<?> getCallable(); // Return the Callable to use for concurrent handling (never null).\n\torg.springframework.core.task.AsyncTaskExecutor getExecutor(); // Return the AsyncTaskExecutor to use for concurrent handling, or null if none specified.\n\tLong getTimeout(); // Return the timeout value in milliseconds, or null if no timeout is set.\n\tvoid onCompletion(Runnable callback); // Register code to invoke when the async request completes.\n\tvoid onError(Callable<V> callback); // Register code to invoke for an error during async request processing.\n\tvoid onTimeout(Callable<V> callback); // Register code to invoke when the async request times out.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // A BeanFactory to use for resolving an executor name.\n}"}
{"index": 13487, "repo": "spring-messaging-6.0.11", "des": "Abstract base class to resolve method arguments from a named value, e.g.", "code": "public abstract class AbstractNamedValueMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\tprotected abstract AbstractNamedValueMethodArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueMethodArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected abstract void handleMissingValue(String name, org.springframework.core.MethodParameter parameter, Message<?> message); // Invoked when a value is required, but resolveArgumentInternal(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>, java.lang.String) returned null and there is no default value.\n\tprotected void handleResolvedValue(Object arg, String name, org.springframework.core.MethodParameter parameter, Message<?> message); // Invoked after a value is resolved.\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message); // Resolves a method parameter into an argument value from a given message.\n\tprotected abstract Object resolveArgumentInternal(org.springframework.core.MethodParameter parameter, Message<?> message, String name); // Resolves the given parameter type and value name into an argument value.\n}"}
{"index": 12651, "repo": "spring-data-mongodb-4.1.2", "des": "A MongoExpression using the ParameterBindingDocumentCodec for parsing a raw (json) expression.", "code": "public class BindableMongoExpression extends Object implements MongoExpression {\n\tBindableMongoExpression bind(Object... args); // Provide the arguments to bind to the placeholders via their index.\n\torg.bson.Document toDocument(); // Obtain the native Document representation.\n\tBindableMongoExpression withCodecRegistry(org.bson.codecs.configuration.CodecRegistry codecRegistry); // Provide the CodecRegistry used to convert expressions.\n}"}
{"index": 11470, "repo": "spring-restdocs-core-3.0.0", "des": "A description of a cookie found in a request or response.", "code": "public class CookieDescriptor extends IgnorableDescriptor<CookieDescriptor> {\n\tfinal String getName(); // Returns the name for the cookie.\n\tfinal boolean isOptional(); // Returns true if the described cookie is optional, otherwise false.\n\tfinal CookieDescriptor optional(); // Marks the cookie as optional.\n}"}
{"index": 1441, "repo": "pdfbox-3.0.0-beta1", "des": "This represents an Icon fit dictionary for an FDF field.", "code": "Class FDFIconFit {\n\tCOSDictionary getCOSObject(); // Convert this standard java object to a COS object.\n\tPDRange getFractionalSpaceToAllocate(); // This is guaranteed to never return null. To quote the PDF Spec \"An array of two numbers between 0.0 and 1.0 indicating the fraction of leftover space to allocate at the left and bottom of the icon.\n\tString getScaleOption(); // This will get the scale option.\n\tString getScaleType(); // This will get the scale type.\n\tvoid setFractionalSpaceToAllocate(PDRange space); // This will set frational space to allocate.\n\tvoid setScaleOption(String option); // This will set the scale option for the icon.\n\tvoid setScaleToFitAnnotation(boolean value); // This will tell the icon to scale.\n\tvoid setScaleType(String scale); // This will set the scale type.\n\tboolean shouldScaleToFitAnnotation(); // This will tell if the icon should scale to fit the annotation bounds.\n}"}
{"index": 11084, "repo": "spring-shell-core-3.1.2", "des": "Service which helps to do various things with styles.", "code": "public class ThemeResolver extends Object {\n\torg.jline.utils.AttributedString evaluateExpression(String expression); // Evaluate expression.\n\tString resolveFigureTag(String tag); // Resolve figure from a tag with activated theme.\n\torg.jline.utils.AttributedStyle resolveStyle(String spec); // Resolve AttributedStyle from a spec.\n\tString resolveStyleTag(String tag); // Resolve style from a tag with activated theme.\n}"}
{"index": 710, "repo": "ignite-core-2.15.0", "des": "Grid cache reentrant lock ('Ex' stands for external).", "code": "Interface GridCacheLockEx {\n\tGridCacheInternalKey key(); // Get current reentrant lock latch key.\n\tvoid onNodeRemoved(UUID nodeId); // Callback to notify semaphore on topology changes.\n\tvoid onReconnected(UUID nodeId); // Callback to notify local reentrant lock instance on node reconnected.\n\tvoid onStop(); // Callback to notify local reentrant lock instance on node stop.\n\tvoid onUpdate(GridCacheLockState state); // Callback to notify reentrant lock on changes.\n}"}
{"index": 14133, "repo": "wicket-core-10.0.0-M1", "des": "The AutoLinkResolver is responsible to handle automatic link resolution.", "code": "public final class AutoLinkResolver extends Object implements IComponentResolver {\n\tfinal void addTagReferenceResolver(String tagName, String attributeName, AutoLinkResolver.IAutolinkResolverDelegate resolver); // Register (add or replace) a new resolver with the tagName and attributeName.\n\tfinal AutoLinkResolver.IAutolinkResolverDelegate getAutolinkResolverDelegate(String tagName); // Get the resolver registered for 'tagName'\n\tfinal Component resolve(MarkupContainer container, MarkupStream markupStream, ComponentTag tag); // Try to resolve a component.\n}"}
{"index": 9458, "repo": "curator-recipes-5.5.0", "des": "Default TreeCache selector - returns true for all methods.", "code": "Class DefaultTreeCacheSelector {\n\tboolean acceptChild(String fullPath); // Return true if this node should be returned from the cache\n\tboolean traverseChildren(String fullPath); // Return true if children of this path should be cached.\n}"}
{"index": 11828, "repo": "spring-kafka-3.0.9", "des": "Sequence the starting of container groups when all containers in the previous group are idle.", "code": "public class ContainerGroupSequencer extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<ListenerContainerIdleEvent>, org.springframework.context.SmartLifecycle {\n\tint getPhase();\n\tvoid initialize();\n\tboolean isAutoStartup();\n\tboolean isRunning();\n\tvoid onApplicationEvent(ListenerContainerIdleEvent event);\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setAutoStartup(boolean autoStartup); // Set to false to not automatically start.\n\tvoid setPhase(int phase); // Set the SmartLifecycle.getPhase().\n\tvoid setStopLastGroupWhenIdle(boolean stopLastGroupWhenIdle); // Set to true to stop the containers in the final group when they go idle.\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 14981, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A context that holds information (to be) associated to an OAuth 2.0 Token and is used by an OAuth2TokenGenerator and OAuth2TokenCustomizer.", "code": "public interface OAuth2TokenContext extends Context {\n\tdefault OAuth2Authorization getAuthorization(); // Returns the authorization.\n\tdefault <T extends org.springframework.security.core.Authentication>T getAuthorizationGrant(); // Returns the Authentication representing the authorization grant.\n\tdefault org.springframework.security.oauth2.core.AuthorizationGrantType getAuthorizationGrantType(); // Returns the authorization grant type.\n\tdefault AuthorizationServerContext getAuthorizationServerContext(); // Returns the authorization server context.\n\tdefault Set<String> getAuthorizedScopes(); // Returns the authorized scope(s).\n\tdefault <T extends org.springframework.security.core.Authentication>T getPrincipal(); // Returns the Authentication representing the Principal resource owner (or client).\n\tdefault RegisteredClient getRegisteredClient(); // Returns the registered client.\n\tdefault OAuth2TokenType getTokenType(); // Returns the token type.\n}"}
{"index": 17054, "repo": "spring-integration-core-6.1.2", "des": "This Endpoint serves as a barrier for messages that should not be processed yet.", "code": "public class CorrelatingMessageBarrier extends AbstractMessageHandler implements MessageSource<Object> {\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\torg.springframework.messaging.Message<Object> receive(); // Retrieve the next available message from this source.\n\tvoid setCorrelationStrategy(CorrelationStrategy correlationStrategy); // Set the CorrelationStrategy to be used to determine the correlation key for incoming messages.\n\tvoid setReleaseStrategy(ReleaseStrategy releaseStrategy); // Set the ReleaseStrategy that should be used when deciding if a group in this barrier may be released.\n}"}
{"index": 13712, "repo": "spring-webmvc-6.0.11", "des": "Convenience subclass of AbstractTemplateViewResolver that supports GroovyMarkupView (i.e.", "code": "public class GroovyMarkupViewResolver extends AbstractTemplateViewResolver {\n\tprotected Object getCacheKey(String viewName, Locale locale); // This resolver supports i18n, so cache keys should contain the locale.\n\tprotected AbstractUrlBasedView instantiateView(); // Instantiate the specified view class.\n\tprotected Class<?> requiredViewClass(); // Return the required type of view for this resolver.\n}"}
{"index": 14539, "repo": "spring-security-web-6.1.2", "des": "This AbstractPreAuthenticatedProcessingFilter implementation is based on the J2EE container-based authentication mechanism.", "code": "public class J2eePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter {\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest httpRequest); // For J2EE container-based authentication there is no generic way to retrieve the credentials, as such this method returns a fixed dummy value.\n\tprotected Object getPreAuthenticatedPrincipal(jakarta.servlet.http.HttpServletRequest httpRequest); // Return the J2EE user name.\n}"}
{"index": 14787, "repo": "spring-data-commons-3.1.2", "des": "Helper class to find a PreferredConstructor.", "code": "public interface PreferredConstructorDiscoverer {\n\tstatic <T, P extends PersistentProperty<P>>PreferredConstructor<T,P> discover(Class<T> type); // Discovers the PreferredConstructor for the given type.\n\tstatic <T, P extends PersistentProperty<P>>PreferredConstructor<T,P> discover(PersistentEntity<T,P> entity); // Discovers the PreferredConstructorDiscoverer for the given PersistentEntity.\n}"}
{"index": 1673, "repo": "samza-api-1.8.0", "des": "Table descriptor for store backed tables.", "code": "Class LocalTableDescriptor<K,V,D extends LocalTableDescriptor<K,V,D>> {\n\tprotected void addStoreConfig(java.lang.String key, java.lang.String value, java.util.Map<java.lang.String,java.lang.String> tableConfig); // Helper method to add a store level config item to table configuration\n\tKVSerde<K,V> getSerde(); // Get the serde assigned to this TableDescriptor\n\tjava.util.List<java.lang.String> getSideInputs(); // Get side input stream names\n\tjava.util.Map<java.lang.String,java.lang.String> toConfig(Config jobConfig); // Generate configuration for this table descriptor, the generated configuration should be the complete configuration for this table that can be directly included in the job configuration.\n\tprotected void validate(); // Validate that this table descriptor is constructed properly; this method is used internally.\n\tD withChangelogEnabled(); // Enable changelog for this table, by default changelog is disabled.\n\tD withChangelogReplicationFactor(int replicationFactor); // The property defines the number of replicas to use for the change log stream.\n\tD withChangelogStream(java.lang.String changelogStream); // Samza stores are local to a container.\n\tD withSideInputs(java.util.List<java.lang.String> sideInputs); // Add side inputs to the table.\n\tD withSideInputsProcessor(SideInputsProcessor sideInputsProcessor); // Provide the SideInputsProcessor for this table.\n}"}
{"index": 11991, "repo": "jena-core-4.9.0", "des": "This base class provides convenience functions for the three \"usual\" graph makers and a place to hold the reification style for the graphs it constructs.", "code": "public abstract class BaseGraphMaker extends Object implements GraphMaker {\n\tGraph createGraph(); // Make a fresh anonymous graph.\n\tGraph createGraph(String name); // A non-strict create.\n\tGraph getGraph(); // Answer the default graph for this maker.\n\tGraph openGraph(); // Answer the default graph of this GraphMaker, if it has one.\n\tGraph openGraph(String name); // A non-strict open.\n}"}
{"index": 3595, "repo": "hive-serde-4.0.0-alpha-2", "des": "A JavaBooleanObjectInspector inspects a Java Boolean Object.", "code": "Class JavaBooleanObjectInspector {\n\tObject create(boolean value); // Create an object with the value.\n\tboolean get(Object o); // Get the boolean data.\n\tObject getPrimitiveWritableObject(Object o); // Return the data in an instance of primitive writable Object.\n\tObject set(Object o, boolean value); // Set the object with the value.\n}"}
{"index": 10449, "repo": "groovy-all-4.0.13", "des": "All templates compiled through MarkupTemplateEngine extend this abstract class, which provides a number of utility methods to generate markup.", "code": "public abstract class BaseTemplate extends Object implements Writable {\n\tBaseTemplate comment(Object cs); // Renders the supplied object using its Object.toString() method inside a comment markup block (<!-- ...\n\tClosure contents(Closure cl); // Wraps a closure so that it can be used as a prototype for inclusion in layouts.\n\tObject fragment(Map model, String templateText); // Renders an embedded template as a fragment.\n\tMap getModel();\n\tWriter getOut(); // Convenience method to return the current writer instance.\n\tvoid includeEscaped(String templatePath); // Includes contents of another file, not as a template but as escaped text.\n\tvoid includeGroovy(String templatePath); // Includes another template inside this template.\n\tvoid includeUnescaped(String templatePath); // Includes contents of another file, not as a template but as unescaped text.\n\tObject layout(Map model, String templateName); // Imports a template and renders it using the specified model, allowing fine-grained composition of templates and layouting.\n\tObject layout(Map model, String templateName, boolean inheritModel); // Imports a template and renders it using the specified model, allowing fine-grained composition of templates and layouting.\n\tObject methodMissing(String tagName, Object args); // This is the main method responsible for writing a tag and its attributes.\n\tvoid newLine(); // Adds a new line to the output.\n\tBaseTemplate pi(Map<?,?> attrs); // Renders processing instructions.\n\tabstract Object run();\n\tString stringOf(Closure cl);\n\tObject tryEscape(Object contents); // Escapes the string representation of the supplied object if it derives from CharSequence, otherwise returns the object itself.\n\tWriter writeTo(Writer out); // Main method used to render a template.\n\tBaseTemplate xmlDeclaration(); // Renders an XML declaration header.\n\tBaseTemplate yield(Object obj); // Renders the object provided as parameter using its Object.toString() method, The contents is rendered after being escaped for XML, enforcing valid XML output.\n\tBaseTemplate yieldUnescaped(Object obj); // Renders the object provided as parameter using its Object.toString() method, The contents is rendered as is, unescaped.\n}"}
{"index": 17105, "repo": "spring-integration-core-6.1.2", "des": "MessageHandler implementation that simply logs the Message or its payload depending on the value of the 'shouldLogFullMessage' or SpEL 'logExpression' property.", "code": "public class LoggingHandler extends AbstractMessageHandler {\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tLoggingHandler.Level getLevel();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setLevel(LoggingHandler.Level level); // Set the logging LoggingHandler.Level to change the behavior at runtime.\n\tvoid setLogExpression(org.springframework.expression.Expression expression); // Set an Expression to evaluate a log entry at runtime against the request Message.\n\tvoid setLogExpressionString(String expressionString); // Set a SpEL expression string to use.\n\tvoid setLoggerName(String loggerName);\n\tvoid setShouldLogFullMessage(boolean shouldLogFullMessage); // Specify whether to log the full Message.\n}"}
{"index": 14008, "repo": "spring-retry-2.0.2", "des": "Implementation of BackOffPolicy that pauses for a fixed period of time before continuing.", "code": "public class FixedBackOffPolicy extends StatelessBackOffPolicy implements SleepingBackOffPolicy<FixedBackOffPolicy> {\n\tvoid backOffPeriodSupplier(Supplier<Long> backOffPeriodSupplier); // Set a supplier for the back off period in milliseconds.\n\tprotected void doBackOff(); // Pause for the setBackOffPeriod(long).\n\tlong getBackOffPeriod(); // The backoff period in milliseconds.\n\tvoid setBackOffPeriod(long backOffPeriod); // Set the back off period in milliseconds.\n\tvoid setSleeper(Sleeper sleeper); // Public setter for the Sleeper strategy.\n\tFixedBackOffPolicy withSleeper(Sleeper sleeper); // Clone the policy and return a new policy which uses the passed sleeper.\n}"}
{"index": 5546, "repo": "org.apache.karaf.main-2.4.4", "des": "Used to chain the BundleFile objects returned from BundleFileWrapperFactoryHook.", "code": "Class BundleFileWrapperChain {\n\tvoid close(); // Closes the BundleFile.\n\tboolean containsDir(String dir); // Determines if any BundleEntries exist in the given directory path.\n\tFile getBaseFile(); // Returns the base file for this BundleFile\n\tBundleEntry getEntry(String path); // Locates a file name in this bundle and returns a BundleEntry object\n\tEnumeration<String> getEntryPaths(String path); // Allows to access the entries of the bundle.\n\tFile getFile(String path, boolean nativeCode); // Returns a File for the bundle entry specified by the path.\n\tBundleFileWrapperChain getNext(); // The next WrapperBundleFile in the chain.\n\tURL getResourceURL(String path, BaseData hostData, int index); // Returns a URL to access the contents of the entry specified by the path\n\tBundleFile getWrapped(); // The BundleFile that is wrapped\n\tvoid open(); // Opens the BundleFiles.\n}"}
{"index": 18273, "repo": "tomcat-api-10.1", "des": "This interface provides access to a file or form item that was received within a multipart/form-data POST request.", "code": "Interface FileItemStream {\n\tString getContentType(); // Returns the content type passed by the browser or null if not defined.\n\tString getFieldName(); // Returns the name of the field in the multipart form corresponding to this file item.\n\tString getName(); // Returns the original file name in the client's file system, as provided by the browser (or other client software).\n\tboolean isFormField(); // Determines whether or not a FileItem instance represents a simple form field.\n\tInputStream openStream(); // Creates an InputStream, which allows to read the items contents.\n}"}
{"index": 11420, "repo": "spring-context-6.0.11", "des": "MessageSource implementation that accesses resource bundles using specified basenames.", "code": "public class ResourceBundleMessageSource extends AbstractResourceBasedMessageSource implements org.springframework.beans.factory.BeanClassLoaderAware {\n\tprotected ResourceBundle doGetBundle(String basename, Locale locale); // Obtain the resource bundle for the given basename and Locale.\n\tprotected ClassLoader getBundleClassLoader(); // Return the ClassLoader to load resource bundles with.\n\tprotected MessageFormat getMessageFormat(ResourceBundle bundle, String code, Locale locale); // Return a MessageFormat for the given bundle and code, fetching already generated MessageFormats from the cache.\n\tprotected ResourceBundle getResourceBundle(String basename, Locale locale); // Return a ResourceBundle for the given basename and Locale, fetching already generated ResourceBundle from the cache.\n\tprotected String getStringOrNull(ResourceBundle bundle, String key); // Efficiently retrieve the String value for the specified key, or return null if not found.\n\tprotected ResourceBundle loadBundle(InputStream inputStream); // Load a property-based resource bundle from the given input stream, picking up the default properties encoding on JDK 9+.\n\tprotected ResourceBundle loadBundle(Reader reader); // Load a property-based resource bundle from the given reader.\n\tprotected MessageFormat resolveCode(String code, Locale locale); // Resolves the given message code as key in the registered resource bundles, using a cached MessageFormat instance per message code.\n\tprotected String resolveCodeWithoutArguments(String code, Locale locale); // Resolves the given message code as key in the registered resource bundles, returning the value found in the bundle as-is (without MessageFormat parsing).\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setBundleClassLoader(ClassLoader classLoader); // Set the ClassLoader to load resource bundles with.\n}"}
{"index": 5735, "repo": "freemarker-2.3.32", "des": "Represents the plain text output format (MIME type \"text/plain\", name \"plainText\").", "code": "Class PlainTextOutputFormat {\n\tjava.lang.String getMimeType(); // Returns the MIME type of the output format.\n\tjava.lang.String getName(); // The short name used to refer to this format (like in the #ftl header).\n\tboolean isOutputFormatMixingAllowed(); // Tells if this output format allows inserting TemplateMarkupOutputModel-s of another output formats into it.\n}"}
{"index": 4886, "repo": "hadoop-common-3.3.4", "des": "The server-side secret manager for each token type.", "code": "Class SecretManager<T extends TokenIdentifier> {\n\tvoid checkAvailableForRead(); // No-op if the secret manager is available for reading tokens, throw a StandbyException otherwise.\n\tabstract T createIdentifier(); // Create an empty token identifier.\n\tstatic byte[] createPassword(byte[] identifier, SecretKey key); // Compute HMAC of the identifier using the secret key and return the output as password\n\tprotected abstract byte[] createPassword(T identifier); // Create the password for the given identifier.\n\tprotected static SecretKey createSecretKey(byte[] key); // Convert the byte[] to a secret key\n\tprotected SecretKey generateSecret(); // Generate a new random secret key.\n\tbyte[] retriableRetrievePassword(T identifier); // The same functionality with retrievePassword(T), except that this method can throw a RetriableException or a StandbyException to indicate that client can retry/failover the same operation because of temporary issue on the server side.\n\tabstract byte[] retrievePassword(T identifier); // Retrieve the password for the given token identifier.\n}"}
{"index": 9889, "repo": "iceberg-api-1.3.0", "des": "This class acts as a helper for handling the closure of multiple resource.", "code": "Class CloseableGroup {\n\tvoid addCloseable(java.lang.AutoCloseable autoCloseable); // Register an autocloseables to be managed by this class.\n\tvoid addCloseable(java.io.Closeable closeable); // Register a closeable to be managed by this class.\n\tvoid close(); // Close all the registered resources.\n\tvoid setSuppressCloseFailure(boolean shouldSuppress); // Whether to suppress failure when any of the closeable this class tracks throws exception during closing.\n}"}
{"index": 18743, "repo": "guava-32.1.1-jre", "des": "Escaper instances suitable for strings to be included in XML attribute values and elements' text contents.", "code": "Class XmlEscapers {\n\tstatic Escaper xmlAttributeEscaper(); // Returns an Escaper instance that escapes special characters in a string so it can safely be included in XML document as an attribute value.\n\tstatic Escaper xmlContentEscaper(); // Returns an Escaper instance that escapes special characters in a string so it can safely be included in an XML document as element content.\n}"}
{"index": 8282, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents the Fault element in the body of a SOAP message.", "code": "Interface SoapFault {\n\tSoapFaultDetail addFaultDetail(); // Creates an optional SoapFaultDetail object and assigns it to this fault.\n\tString getFaultActorOrRole(); // Returns the fault actor or role.\n\tQName getFaultCode(); // Returns the fault code.\n\tSoapFaultDetail getFaultDetail(); // Returns the optional detail element for this SoapFault.\n\tString getFaultStringOrReason(); // Returns the fault string or reason.\n\tvoid setFaultActorOrRole(String faultActor); // Sets the fault actor.\n}"}
{"index": 7096, "repo": "calcite-core-1.34.0", "des": "Relational expression that computes a repeat union (recursive union in SQL terminology).", "code": "Class RepeatUnion {\n\tprotected RelDataType deriveRowType();\n\tdouble estimateRowCount(RelMetadataQuery mq); // Returns an estimate of the number of rows this relational expression will return.\n\tRelWriter explainTerms(RelWriter pw); // Describes the inputs and attributes of this relational expression.\n\tRelNode getIterativeRel();\n\tRelNode getSeedRel();\n\t@Nullable RelOptTable getTransientTable();\n}"}
{"index": 2652, "repo": "mahout-core-14.1", "des": "Open hash map from double keys to long values.", "code": "Class OpenDoubleLongHashMap {\n\tlong adjustOrPutValue(double key, long newValue, long incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(double key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(long value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(DoubleProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(DoubleLongProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tlong get(double key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(double key);\n\tprotected int indexOfKey(double key);\n\tprotected int indexOfValue(long value);\n\tIterator<OpenDoubleLongHashMap.MapElement> iterator();\n\tvoid keys(DoubleArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(DoubleLongProcedure condition, DoubleArrayList keyList, LongArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(double key, long value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(double key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(LongArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 13355, "repo": "shiro-core-2.0.0-alpha-2", "des": "A Native session manager is one that manages sessions natively - that is, it is directly responsible for the creation, persistence and removal of Session instances and their lifecycles.", "code": "public interface NativeSessionManager extends SessionManager {\n\tvoid checkValid(SessionKey key); // Returns quietly if the associated session is valid (it exists and is not stopped or expired) or throws an InvalidSessionException indicating that the session id is invalid.\n\tObject getAttribute(SessionKey sessionKey, Object attributeKey); // Returns the object bound to the associated session identified by the specified attribute key.\n\tCollection<Object> getAttributeKeys(SessionKey sessionKey); // Returns all attribute keys maintained by the target session or an empty collection if there are no attributes.\n\tString getHost(SessionKey key); // Returns the host name or IP string of the host where the session was started, if known.\n\tDate getLastAccessTime(SessionKey key); // Returns the time the associated Session last interacted with the system.\n\tDate getStartTimestamp(SessionKey key); // Returns the time the associated Session started (was created).\n\tlong getTimeout(SessionKey key); // Returns the time in milliseconds that the associated session may remain idle before expiring.\n\tboolean isValid(SessionKey key); // Returns true if the associated session is valid (it exists and is not stopped nor expired), false otherwise.\n\tObject removeAttribute(SessionKey sessionKey, Object attributeKey); // Removes (unbinds) the object bound to associated Session under the given attributeKey.\n\tvoid setAttribute(SessionKey sessionKey, Object attributeKey, Object value); // Binds the specified value to the associated session uniquely identified by the attributeKey.\n\tvoid setTimeout(SessionKey key, long maxIdleTimeInMillis); // Sets the time in milliseconds that the associated session may remain idle before expiring.\n\tvoid stop(SessionKey key); // Explicitly stops the associated session, thereby releasing all of its resources.\n\tvoid touch(SessionKey key); // Updates the last accessed time of the session identified by sessionId.\n}"}
{"index": 14060, "repo": "spring-context-support-6.0.11", "des": "A Spring FactoryBean for creating a Quartz JobDetail instance, supporting bean-style usage for JobDetail configuration.", "code": "public class JobDetailFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobDetail>, org.springframework.beans.factory.BeanNameAware, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tJobDataMap getJobDataMap(); // Return the job's JobDataMap.\n\tJobDetail getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setApplicationContextJobDataKey(String applicationContextJobDataKey); // Set the key of an ApplicationContext reference to expose in the JobDataMap, for example \"applicationContext\".\n\tvoid setBeanName(String beanName);\n\tvoid setDescription(String description); // Set a textual description for this job.\n\tvoid setDurability(boolean durability); // Specify the job's durability, i.e.\n\tvoid setGroup(String group); // Specify the job's group.\n\tvoid setJobClass(Class<? extends Job> jobClass); // Specify the job's implementation class.\n\tvoid setJobDataAsMap(Map<String,?> jobDataAsMap); // Register objects in the JobDataMap via a given Map.\n\tvoid setJobDataMap(JobDataMap jobDataMap); // Set the job's JobDataMap.\n\tvoid setName(String name); // Specify the job's name.\n\tvoid setRequestsRecovery(boolean requestsRecovery); // Set the recovery flag for this job, i.e.\n}"}
{"index": 12448, "repo": "drill-common-1.21.1", "des": "An implementation of map that supports constant time look-up by a generic key or an ordinal.", "code": "public class MapWithOrdinal<K,V> extends Object implements Map<K,V> {\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tSet<Map.Entry<K,V>> entrySet();\n\tV get(Object key);\n\tV getByOrdinal(int id); // Returns the value corresponding to the given ordinal\n\tint getOrdinal(K key); // Returns the ordinal corresponding to the given key.\n\tboolean isEmpty();\n\tSet<K> keySet();\n\tV put(K key, V value); // Inserts the tuple (key, value) into the map extending the semantics of Map.put(K, V) with automatic ordinal assignment.\n\tvoid putAll(Map<? extends K,? extends V> m);\n\tV remove(Object key); // Removes the element corresponding to the key if exists extending the semantics of Map.remove(java.lang.Object) with ordinal re-cycling.\n\tint size();\n\tCollection<V> values();\n}"}
{"index": 2226, "repo": "hive-exec-4.0.0-alpha-2", "des": "Contains factory methods to read or write ORC files.", "code": "Class OrcFile {\n\tstatic Reader createReader(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path); // Create an ORC file reader.\n\tstatic Reader createReader(org.apache.hadoop.fs.Path path, OrcFile.ReaderOptions options);\n\tstatic Writer createWriter(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path, org.apache.hadoop.conf.Configuration conf, ObjectInspector inspector, long stripeSize, CompressionKind compress, int bufferSize, int rowIndexStride); // Create an ORC file writer.\n\tstatic Writer createWriter(org.apache.hadoop.fs.Path path, OrcFile.WriterOptions opts); // Create an ORC file writer.\n\tstatic OrcFile.ReaderOptions readerOptions(org.apache.hadoop.conf.Configuration conf);\n\tstatic OrcFile.WriterOptions writerOptions(org.apache.hadoop.conf.Configuration conf); // Create a set of writer options based on a configuration.\n\tstatic OrcFile.WriterOptions writerOptions(Properties tableProperties, org.apache.hadoop.conf.Configuration conf); // Create a set of write options based on a set of table properties and configuration.\n}"}
{"index": 14525, "repo": "spring-security-web-6.1.2", "des": "Delegates Filter requests to a list of Spring-managed filter beans.", "code": "public class FilterChainProxy extends org.springframework.web.filter.GenericFilterBean {\n\tvoid afterPropertiesSet();\n\tvoid doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain chain);\n\tList<SecurityFilterChain> getFilterChains();\n\tList<jakarta.servlet.Filter> getFilters(String url); // Convenience method, mainly for testing.\n\tvoid setFilterChainDecorator(FilterChainProxy.FilterChainDecorator filterChainDecorator); // Used to decorate the original FilterChain for each request\n\tvoid setFilterChainValidator(FilterChainProxy.FilterChainValidator filterChainValidator); // Used (internally) to specify a validation strategy for the filters in each configured chain.\n\tvoid setFirewall(HttpFirewall firewall); // Sets the \"firewall\" implementation which will be used to validate and wrap (or potentially reject) the incoming requests.\n\tvoid setRequestRejectedHandler(RequestRejectedHandler requestRejectedHandler); // Sets the RequestRejectedHandler to be used for requests rejected by the firewall.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 9128, "repo": "hbase-server-3.0.0-alpha-4", "des": "A remote procedure which is used to send split WAL request to region server.", "code": "Class SplitWALRemoteProcedure {\n\tprotected boolean abort(MasterProcedureEnv env);\n\tprotected void complete(MasterProcedureEnv env, Throwable error);\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tString getProcName();\n\tServerName getServerName(); // Returns Name of this server instance.\n\tServerProcedureInterface.ServerOperationType getServerOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tString getWAL();\n\tboolean hasMetaTableRegion(); // Returns True if this server has an hbase:meta table region.\n\tOptional<RemoteProcedureDispatcher.RemoteOperation> remoteCallBuild(MasterProcedureEnv env, ServerName serverName);\n\tprotected void rollback(MasterProcedureEnv env);\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tprotected void toStringClassDetails(StringBuilder builder);\n}"}
{"index": 8873, "repo": "hbase-server-3.0.0-alpha-4", "des": "CombinedBlockCache is an abstraction layer that combines FirstLevelBlockCache and BucketCache.", "code": "Class CombinedBlockCache {\n\tvoid cacheBlock(BlockCacheKey cacheKey, Cacheable buf); // Add block to cache (defaults to not in-memory).\n\tvoid cacheBlock(BlockCacheKey cacheKey, Cacheable buf, boolean inMemory); // Add block to cache.\n\tvoid cacheBlock(BlockCacheKey cacheKey, Cacheable buf, boolean inMemory, boolean waitWhenCache); // Add block to cache.\n\tboolean evictBlock(BlockCacheKey cacheKey); // Evict block from cache.\n\tint evictBlocksByHfileName(String hfileName); // Evicts all blocks for the given HFile.\n\tCacheable getBlock(BlockCacheKey cacheKey, boolean caching, boolean repeat, boolean updateCacheMetrics); // Fetch block from cache.\n\tCacheable getBlock(BlockCacheKey cacheKey, boolean caching, boolean repeat, boolean updateCacheMetrics, BlockType blockType); // Fetch block from cache.\n\tBlockCache[] getBlockCaches(); // Returns The list of sub blockcaches that make up this one; returns null if no sub caches.\n\tlong getBlockCount(); // Returns the number of blocks currently cached in the block cache.\n\tlong getCurrentDataSize(); // Returns the occupied size of data blocks, in bytes.\n\tlong getCurrentSize(); // Returns the occupied size of the block cache, in bytes.\n\tlong getDataBlockCount(); // Returns the number of data blocks currently cached in the block cache.\n\tFirstLevelBlockCache getFirstLevelCache();\n\tlong getFreeSize(); // Returns the free size of the block cache, in bytes.\n\tlong getMaxSize(); // Returns the Max size of the block cache, in bytes.\n\tint getRpcRefCount(BlockCacheKey cacheKey);\n\tBlockCache getSecondLevelCache();\n\tCacheStats getStats(); // Get the statistics for this block cache.\n\tlong heapSize();\n\tIterator<CachedBlock> iterator(); // Returns Iterator over the blocks in the cache.\n\tvoid setMaxSize(long size); // Sets the max heap size that can be used by the BlockCache.\n\tvoid shutdown(); // Shutdown the cache.\n\tlong size(); // Returns the total size of the block cache, in bytes.\n}"}
{"index": 5348, "repo": "druid-processing-26.0.0", "des": "Error response transform strategy that does nothing and simply return the same Exception back without any change.", "code": "Class NoErrorResponseTransformStrategy {\n\tboolean equals(Object o);\n\tFunction<String,String> getErrorMessageTransformFunction(); // Return a function for checking and transforming the error message if needed.\n\tException transformIfNeeded(SanitizableException exception); // For a given SanitizableException apply the transformation strategy and return the sanitized Exception if the transformation stategy was applied.\n}"}
{"index": 18757, "repo": "solr-core-9.3.0", "des": "Simple Iterator of document Ids which may include score information.", "code": "Interface DocIterator {\n\tint nextDoc(); // Returns the next document id if hasNext()==true This method is equivalent to next(), but avoids the creation of an Integer Object.\n\tfloat score(); // Returns the score for the document just returned by nextDoc()\n}"}
{"index": 17761, "repo": "spring-web-6.0.11", "des": "ClientHttpRequestFactory implementation that uses Apache HttpComponents HttpClient to create requests.", "code": "public class HttpComponentsClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean {\n\tprotected org.apache.hc.core5.http.protocol.HttpContext createHttpContext(HttpMethod httpMethod, URI uri); // Template methods that creates a HttpContext for the given HTTP method and URI.\n\tprotected org.apache.hc.core5.http.ClassicHttpRequest createHttpUriRequest(HttpMethod httpMethod, URI uri); // Create a Commons HttpMethodBase object for the given HTTP method and URI specification.\n\tClientHttpRequest createRequest(URI uri, HttpMethod httpMethod); // Create a new ClientHttpRequest for the specified URI and HTTP method.\n\tprotected RequestConfig createRequestConfig(Object client); // Create a default RequestConfig to use with the given client.\n\tvoid destroy(); // Shutdown hook that closes the underlying ClientConnectionManager's connection pool, if any.\n\tHttpClient getHttpClient(); // Return the HttpClient used for synchronous execution.\n\tprotected RequestConfig mergeRequestConfig(RequestConfig clientConfig); // Merge the given HttpClient-level RequestConfig with the factory-level configuration, if necessary.\n\tprotected void postProcessHttpRequest(org.apache.hc.core5.http.ClassicHttpRequest request); // Template method that allows for manipulating the ClassicHttpRequest before it is returned as part of a HttpComponentsClientHttpRequest.\n\tvoid setBufferRequestBody(boolean bufferRequestBody); // Indicates whether this request factory should buffer the request body internally.\n\tvoid setConnectionRequestTimeout(int connectionRequestTimeout); // Set the timeout in milliseconds used when requesting a connection from the connection manager using the underlying RequestConfig.\n\tvoid setConnectTimeout(int connectTimeout); // Set the connection timeout for the underlying RequestConfig.\n\tvoid setHttpClient(HttpClient httpClient); // Set the HttpClient used for synchronous execution.\n\tvoid setHttpContextFactory(BiFunction<HttpMethod,URI,org.apache.hc.core5.http.protocol.HttpContext> httpContextFactory); // Configure a factory to pre-create the HttpContext for each request.\n\tvoid setReadTimeout(int timeout); // Deprecated, for removal: This API element is subject to removal in a future version. as of 6.0, in favor of SocketConfig.Builder.setSoTimeout(Timeout), see above.\n}"}
{"index": 6084, "repo": "jackson-databind-2.15.2", "des": "Intermediate base class for serializers used for serializing types that contain element(s) of other types, such as arrays, Collections (Lists, Sets etc) and Maps and iterable things (Iterators).", "code": "Class ContainerSerializer<T> {\n\tprotected abstract ContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts); // Method that needs to be implemented to allow construction of a new serializer object with given TypeSerializer, used when addition type information is to be embedded.\n\tabstract JsonSerializer<?> getContentSerializer(); // Accessor for serializer used for serializing contents (List and array elements, Map values etc) of the container for which this serializer is used, if it is known statically.\n\tabstract JavaType getContentType(); // Accessor for finding declared (static) element type for type this serializer is used for.\n\tabstract boolean hasSingleElement(T value); // Method called to determine if the given value (of type handled by this serializer) contains exactly one element.\n\tContainerSerializer<?> withValueTypeSerializer(TypeSerializer vts); // Factory(-like) method that can be used to construct a new container serializer that uses specified TypeSerializer for decorating contained values with additional type information.\n}"}
{"index": 8404, "repo": "hadoop-aws-3.3.6", "des": "Tracks directory markers which have been reported in object listings.", "code": "Class DirMarkerTracker {\n\tList<DirMarkerTracker.Marker> fileFound(org.apache.hadoop.fs.Path path, String key, S3ALocatedFileStatus source); // A file has been found.\n\torg.apache.hadoop.fs.Path getBasePath(); // Get the base path of the tracker.\n\tint getFilesFound();\n\torg.apache.hadoop.fs.Path getLastDirChecked();\n\tMap<org.apache.hadoop.fs.Path,DirMarkerTracker.Marker> getLeafMarkers(); // Get the map of leaf markers.\n\tint getMarkersFound();\n\tint getObjectsFound(); // How many objects were found.\n\tint getScanCount();\n\tMap<org.apache.hadoop.fs.Path,DirMarkerTracker.Marker> getSurplusMarkers(); // Get the map of surplus markers.\n\tList<DirMarkerTracker.Marker> markerFound(org.apache.hadoop.fs.Path path, String key, S3ALocatedFileStatus source); // A marker has been found; this may or may not be a leaf.\n\tList<org.apache.hadoop.fs.Path> removeAllowedMarkers(DirectoryPolicy policy); // Scan the surplus marker list and remove from it all where the directory policy says \"keep\".\n}"}
{"index": 6561, "repo": "exoplayer-core-2.9.6", "des": "The projection mesh used with 360/VR videos.", "code": "Class Projection {\n\tstatic Projection createEquirectangular(float radius, int latitudes, int longitudes, float verticalFovDegrees, float horizontalFovDegrees, int stereoMode); // Generates an equirectangular projection.\n\tstatic Projection createEquirectangular(int stereoMode); // Generates a complete sphere equirectangular projection.\n}"}
{"index": 16893, "repo": "spring-security-oauth2-core-6.1.2", "des": "A builder for OAuth2AuthorizationRequest.", "code": "public static final class OAuth2AuthorizationRequest.Builder extends Object {\n\tOAuth2AuthorizationRequest.Builder additionalParameters(Consumer<Map<String,Object>> additionalParametersConsumer); // A Consumer to be provided access to the additional parameter(s) allowing the ability to add, replace, or remove.\n\tOAuth2AuthorizationRequest.Builder additionalParameters(Map<String,Object> additionalParameters); // Sets the additional parameter(s) used in the request.\n\tOAuth2AuthorizationRequest.Builder attributes(Consumer<Map<String,Object>> attributesConsumer); // A Consumer to be provided access to the attribute(s) allowing the ability to add, replace, or remove.\n\tOAuth2AuthorizationRequest.Builder attributes(Map<String,Object> attributes); // Sets the attributes associated to the request.\n\tOAuth2AuthorizationRequest.Builder authorizationRequestUri(String authorizationRequestUri); // Sets the URI string representation of the OAuth 2.0 Authorization Request.\n\tOAuth2AuthorizationRequest.Builder authorizationRequestUri(Function<org.springframework.web.util.UriBuilder,URI> authorizationRequestUriFunction); // A Function to be provided a UriBuilder representation of the OAuth 2.0 Authorization Request allowing for further customizations.\n\tOAuth2AuthorizationRequest.Builder authorizationUri(String authorizationUri); // Sets the uri for the authorization endpoint.\n\tOAuth2AuthorizationRequest build(); // Builds a new OAuth2AuthorizationRequest.\n\tOAuth2AuthorizationRequest.Builder clientId(String clientId); // Sets the client identifier.\n\tOAuth2AuthorizationRequest.Builder parameters(Consumer<Map<String,Object>> parametersConsumer); // A Consumer to be provided access to all the parameters allowing the ability to add, replace, or remove.\n\tOAuth2AuthorizationRequest.Builder redirectUri(String redirectUri); // Sets the uri for the redirection endpoint.\n\tOAuth2AuthorizationRequest.Builder scope(String... scope); // Sets the scope(s).\n\tOAuth2AuthorizationRequest.Builder scopes(Set<String> scopes); // Sets the scope(s).\n\tOAuth2AuthorizationRequest.Builder state(String state); // Sets the state.\n}"}
{"index": 986, "repo": "ignite-core-2.15.0", "des": "JDBC SQL query parameters metadata result.", "code": "Class JdbcMetaParamsResult {\n\tList<JdbcParameterMeta> meta();\n\tvoid readBinary(BinaryReaderExImpl reader, JdbcProtocolContext protoCtx); // Reads fields from provided reader.\n\tvoid writeBinary(BinaryWriterExImpl writer, JdbcProtocolContext protoCtx); // Writes fields to provided writer.\n}"}
{"index": 6838, "repo": "calcite-core-1.34.0", "des": "Implementation of Collect in enumerable calling convention.", "code": "Class EnumerableCollect {\n\tEnumerableCollect copy(RelTraitSet traitSet, RelNode newInput);\n\tstatic Collect create(RelNode input, RelDataType rowType); // Creates an EnumerableCollect.\n\tEnumerableRel.Result implement(EnumerableRelImplementor implementor, EnumerableRel.Prefer pref); // Creates a plan for this expression according to a calling convention.\n}"}
{"index": 13217, "repo": "spring-test-6.0.11", "des": "Contract for customizing a ConfigurableMockMvcBuilder in some specific way, e.g.", "code": "public interface MockMvcConfigurer {\n\tdefault void afterConfigurerAdded(ConfigurableMockMvcBuilder<?> builder); // Invoked immediately when this MockMvcConfigurer is added via ConfigurableMockMvcBuilder.apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer).\n\tdefault RequestPostProcessor beforeMockMvcCreated(ConfigurableMockMvcBuilder<?> builder, org.springframework.web.context.WebApplicationContext context); // Invoked when the MockMvc instance is about to be created with the MockMvc builder and the Spring WebApplicationContext that will be passed to the DispatcherServlet.\n}"}
{"index": 16632, "repo": "spring-beans-6.0.11", "des": "Simple ProblemReporter implementation that exhibits fail-fast behavior when errors are encountered.", "code": "public class FailFastProblemReporter extends Object implements ProblemReporter {\n\tvoid error(Problem problem); // Throws a BeanDefinitionParsingException detailing the error that has occurred.\n\tvoid fatal(Problem problem); // Throws a BeanDefinitionParsingException detailing the error that has occurred.\n\tvoid setLogger(org.apache.commons.logging.Log logger); // Set the logger that is to be used to report warnings.\n\tvoid warning(Problem problem); // Writes the supplied Problem to the Log at WARN level.\n}"}
{"index": 4420, "repo": "beam-sdks-java-core-2.49.0", "des": "For internal use only; no backwards-compatibility guarantees.", "code": "Class Materializations {\n\tstatic <V> Materialization<Materializations.IterableView<V>> iterable(); // For internal use only; no backwards-compatibility guarantees.\n\tstatic <K,V> Materialization<Materializations.MultimapView<K,V>> multimap(); // For internal use only; no backwards-compatibility guarantees.\n}"}
{"index": 12579, "repo": "spring-jdbc-6.0.11", "des": "Exception thrown when we're not ignoring SQLWarnings.", "code": "public class SQLWarningException extends org.springframework.dao.UncategorizedDataAccessException {\n\tSQLWarning getSQLWarning(); // Return the underlying SQLWarning.\n\tSQLWarning SQLWarning(); // Deprecated. as of 5.3.29, in favor of getSQLWarning()\n}"}
{"index": 13264, "repo": "spring-test-6.0.11", "des": "Base class for events published by the EventPublishingTestExecutionListener.", "code": "public abstract class TestContextEvent extends org.springframework.context.ApplicationEvent {\n\tfinal TestContext getSource(); // Get the TestContext associated with this event.\n\tfinal TestContext getTestContext(); // Alias for getSource().\n}"}
{"index": 11275, "repo": "spring-context-6.0.11", "des": "Advisor that activates asynchronous method execution through the Async annotation.", "code": "public class AsyncAnnotationAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware {\n\tprotected org.aopalliance.aop.Advice buildAdvice(Supplier<Executor> executor, Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler> exceptionHandler);\n\tprotected org.springframework.aop.Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes); // Calculate a pointcut for the given async annotation types, if any.\n\torg.aopalliance.aop.Advice getAdvice();\n\torg.springframework.aop.Pointcut getPointcut();\n\tvoid setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType); // Set the 'async' annotation type.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // Set the BeanFactory to be used when looking up executors by qualifier.\n}"}
{"index": 13152, "repo": "spring-test-6.0.11", "des": "Base class for RequestExpectationManager implementations responsible for storing expectations and actual requests, and checking for unsatisfied expectations at the end.", "code": "public abstract class AbstractRequestExpectationManager extends Object implements RequestExpectationManager {\n\tprotected void afterExpectationsDeclared(); // Invoked at the time of the first actual request, which effectively means the expectations declaration phase is over.\n\tprotected AssertionError createUnexpectedRequestError(org.springframework.http.client.ClientHttpRequest request); // Return an AssertionError that a subclass can raise for an unexpected request.\n\tResponseActions expectRequest(ExpectedCount count, RequestMatcher matcher); // Set up a new request expectation.\n\tprotected List<RequestExpectation> getExpectations(); // Return a read-only list of the expectations.\n\tprotected String getRequestDetails(); // Return details of executed requests.\n\tprotected List<org.springframework.http.client.ClientHttpRequest> getRequests(); // Return a read-only list of requests executed so far.\n\tprotected RequestExpectation matchRequest(org.springframework.http.client.ClientHttpRequest request); // As of 5.0.3 subclasses should implement this method instead of #validateRequestInternal(ClientHttpRequest) in order to match the request to an expectation, leaving the call to create the response as a separate step (to be invoked by this class).\n\tvoid reset(); // Reset the internal state removing all expectations and recorded requests.\n\torg.springframework.http.client.ClientHttpResponse validateRequest(org.springframework.http.client.ClientHttpRequest request); // Validate the given actual request against the declared expectations.\n\tvoid verify(); // Verify that all expectations have been met.\n\tvoid verify(Duration timeout); // Variant of RequestExpectationManager.verify() that waits for up to the specified time for all expectations to be fulfilled.\n}"}
{"index": 4139, "repo": "camel-core-3.0.0-RC1", "des": "Extract a sample of the messages passing through a route.", "code": "Class SamplingDefinition {\n\tprotected String description();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tLong getMessageFrequency();\n\tLong getSamplePeriod();\n\tString getShortName();\n\tTimeUnit getUnits();\n\tSamplingDefinition sampleMessageFrequency(long messageFrequency); // Sets the sample message count which only a single Exchange will pass through after this many received.\n\tSamplingDefinition samplePeriod(long samplePeriod); // Sets the sample period during which only a single Exchange will pass through.\n\tvoid setMessageFrequency(Long messageFrequency); // Sets the sample message count which only a single Exchange will pass through after this many received.\n\tvoid setSamplePeriod(Long samplePeriod); // Sets the sample period during which only a single Exchange will pass through.\n\tvoid setUnits(String units); // Sets the time units for the sample period, defaulting to seconds.\n\tvoid setUnits(TimeUnit units); // Sets the time units for the sample period, defaulting to seconds.\n\tSamplingDefinition timeUnits(TimeUnit units); // Sets the time units for the sample period, defaulting to seconds.\n}"}
{"index": 15935, "repo": "spring-rabbit-3.0.6", "des": "Listeners implementing this interface can participate in publisher confirms received from multiple channels, by invoking addListener on each channel.", "code": "public static interface PublisherCallbackChannel.Listener {\n\tString getUUID(); // Returns the UUID used to identify this Listener for returns.\n\tvoid handleConfirm(PendingConfirm pendingConfirm, boolean ack); // Invoked by the channel when a confirm is received.\n\tvoid handleReturn(com.rabbitmq.client.Return returned); // Handle a returned message.\n\tboolean isConfirmListener();\n\tboolean isReturnListener();\n\tvoid revoke(com.rabbitmq.client.Channel channel); // When called, this listener should remove all references to the channel - it will no longer be invoked by the channel.\n}"}
{"index": 7835, "repo": "cassandra-all-4.1.2", "des": "Defines the interface for a prefix tree, an ordered tree data structure.", "code": "Interface Trie<K,V> {\n\tjava.util.SortedMap<K,V> prefixMap(K prefix); // Returns a view of this Trie of all elements that are prefixed by the given key.\n\tjava.util.Map.Entry<K,V> select(K key); // Returns the Map.Entry whose key is closest in a bitwise XOR metric to the given key.\n\tjava.util.Map.Entry<K,V> select(K key, Cursor<? super K,? super V> cursor); // Iterates through the Trie, starting with the entry whose bitwise value is closest in an XOR metric to the given key.\n\tK selectKey(K key); // Returns the key that is closest in a bitwise XOR metric to the provided key.\n\tV selectValue(K key); // Returns the value whose key is closest in a bitwise XOR metric to the provided key.\n\tjava.util.Map.Entry<K,V> traverse(Cursor<? super K,? super V> cursor); // Traverses the Trie in lexicographical order.\n}"}
{"index": 1288, "repo": "ignite-core-2.15.0", "des": "Data transfer object for cache store configuration properties.", "code": "Class VisorCacheStoreConfiguration {\n\tint getBatchSize();\n\tlong getFlushFrequency();\n\tint getFlushSize();\n\tint getFlushThreadCount();\n\t@Nullable String getStore();\n\tString getStoreFactory();\n\tboolean getWriteBehindCoalescing();\n\tboolean isEnabled();\n\tboolean isJdbcStore();\n\tboolean isReadThrough();\n\tboolean isStoreKeepBinary();\n\tboolean isWriteBehindEnabled();\n\tboolean isWriteThrough();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 16905, "repo": "spring-security-oauth2-core-6.1.2", "des": "A GrantedAuthority that may be associated to an OidcUser.", "code": "public class OidcUserAuthority extends OAuth2UserAuthority {\n\tboolean equals(Object obj);\n\tOidcIdToken getIdToken(); // Returns the ID Token containing claims about the user.\n\tOidcUserInfo getUserInfo(); // Returns the UserInfo containing claims about the user, may be null.\n}"}
{"index": 17414, "repo": "groovy-4.0.13", "des": "This class codes around a silly limitation of StringWriter which doesn't allow a StringBuffer to be passed in as a constructor for some bizarre reason.", "code": "public class StringBufferWriter extends Writer {\n\tvoid close(); // Closing a StringWriter has no effect.\n\tvoid flush(); // Flush the stream.\n\tvoid write(char[] text, int offset, int length); // Write a portion of an array of characters.\n\tvoid write(int c); // Write a single character.\n\tvoid write(String text); // Write a string.\n\tvoid write(String text, int offset, int length); // Write a portion of a string.\n}"}
{"index": 3931, "repo": "hudi-client-0.6.0", "des": "Takes a bunch of keys and returns ones that are present in the file group.", "code": "Class HoodieKeyLookupHandle<T extends HoodieRecordPayload> {\n\tvoid addKey(String recordKey); // Adds the key for look up.\n\tList<String> checkCandidatesAgainstFile(org.apache.hadoop.conf.Configuration configuration, List<String> candidateRecordKeys, org.apache.hadoop.fs.Path filePath); // Given a list of row keys and one file, return only row keys existing in that file.\n\tHoodieKeyLookupHandle.KeyLookupResult getLookupResult(); // Of all the keys, that were added, return a list of keys that were actually found in the file group.\n}"}
{"index": 5067, "repo": "commons-collections-3.2.2", "des": "A Map implementation that holds a single item and is fixed size.", "code": "Class SingletonMap {\n\tvoid clear(); // Unsupported operation.\n\tObject clone(); // Clones the map without cloning the key or value.\n\tboolean containsKey(Object key); // Checks whether the map contains the specified key.\n\tboolean containsValue(Object value); // Checks whether the map contains the specified value.\n\tSet entrySet(); // Gets the entrySet view of the map.\n\tboolean equals(Object obj); // Compares this map with another.\n\tObject firstKey(); // Gets the first (and only) key in the map.\n\tObject get(Object key); // Gets the value mapped to the key specified.\n\tObject getKey(); // Gets the key.\n\tObject getValue(); // Gets the value.\n\tboolean isEmpty(); // Checks whether the map is currently empty, which it never is.\n\tprotected boolean isEqualKey(Object key); // Compares the specified key to the stored key.\n\tprotected boolean isEqualValue(Object value); // Compares the specified value to the stored value.\n\tboolean isFull(); // Is the map currently full, always true.\n\tSet keySet(); // Gets the unmodifiable keySet view of the map.\n\tObject lastKey(); // Gets the last (and only) key in the map.\n\tMapIterator mapIterator(); // Gets an iterator over the map.\n\tint maxSize(); // Gets the maximum size of the map, always 1.\n\tObject nextKey(Object key); // Gets the next key after the key specified, always null.\n\tOrderedMapIterator orderedMapIterator(); // Obtains an OrderedMapIterator over the map.\n\tObject previousKey(Object key); // Gets the previous key before the key specified, always null.\n\tObject put(Object key, Object value); // Puts a key-value mapping into this map where the key must match the existing key.\n\tvoid putAll(Map map); // Puts the values from the specified map into this map.\n\tObject remove(Object key); // Unsupported operation.\n\tObject setValue(Object value); // Sets the value.\n\tint size(); // Gets the size of the map, always 1.\n\tCollection values(); // Gets the unmodifiable values view of the map.\n}"}
{"index": 1068, "repo": "ignite-core-2.15.0", "des": "Implementation of PageLockTrackerMXBean.", "code": "Class PageLockTrackerMXBeanImpl {\n\tString dumpLocks(); // Take page locks dump.\n\tString dumpLocksToFile(); // Take page locks dump and save to file.\n\tString dumpLocksToFile(String path); // Take page locks dump and save to file for specific path.\n\tvoid dumpLocksToLog(); // Take page locks dump and print it to console.\n}"}
{"index": 18337, "repo": "opencms-core-15.0", "des": "Bean for special diagnostic information retrievable via JMX.", "code": "Class CmsDiagnosticsMXBean {\n\tjava.lang.String listActiveRequests(); // Contains a textual representation of the current requests running in the OpenCmsServlet.\n\tstatic void register(); // Registers an MBean of this class.\n}"}
{"index": 6922, "repo": "calcite-core-1.34.0", "des": "Table-modification operator implemented in JDBC convention.", "code": "Class JdbcRules.JdbcTableModify {\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tSqlImplementor.Result implement(JdbcImplementor implementor);\n}"}
{"index": 9225, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Handler class to handle the blkio controller.", "code": "Class CGroupsBlkioResourceHandlerImpl {\n\tList<PrivilegedOperation> bootstrap(org.apache.hadoop.conf.Configuration configuration); // Bootstrap resource susbsystem.\n\tList<PrivilegedOperation> postComplete(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Perform any tasks necessary after container completion.\n\tList<PrivilegedOperation> preStart(Container container); // Prepare a resource environment for container launch\n\tList<PrivilegedOperation> reacquireContainer(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Require state for container that was already launched\n\tList<PrivilegedOperation> teardown(); // Teardown environment for resource subsystem if requested.\n\tList<PrivilegedOperation> updateContainer(Container container); // Update state for container that was already launched\n}"}
{"index": 12942, "repo": "slf4j-api-2.0.7", "des": "Implementations of this interface are used to manufacture Marker instances.", "code": "public interface IMarkerFactory {\n\tboolean detachMarker(String name); // Detach an existing marker.\n\tboolean exists(String name); // Checks if the marker with the name already exists.\n\tMarker getDetachedMarker(String name); // Create a marker which is detached (even at birth) from this IMarkerFactory.\n\tMarker getMarker(String name); // Manufacture a Marker instance by name.\n}"}
{"index": 18132, "repo": "jena-querybuilder-4.9.0", "des": "An QuadHolder that manages AbstractQueryBuilder data.", "code": "public class QBQuadHolder extends Object implements QuadHolder {\n\tExtendedIterator<Quad> getQuads(); // Get an extended iterator over the quads this holder holds.\n\tQuadHolder setValues(Map<Var,Node> values); // Apply values to the variables in the quads held by this holder.\n}"}
{"index": 16955, "repo": "spring-orm-6.0.11", "des": "Enumeration for common database platforms.", "code": "public enum Database extends Enum<Database> {\n\tstatic Database valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Database[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7115, "repo": "calcite-core-1.34.0", "des": "Context required to simplify a row-expression.", "code": "Class RexSimplify {\n\tRexNode removeNullabilityCast(RexNode e); // Removes any casts that change nullability but not type.\n\tRexNode simplify(RexNode e); // Simplifies a boolean expression.\n\t@Nullable RexNode simplifyFilterPredicates(Iterable<? extends RexNode> predicates); // Combines predicates AND, optimizes, and returns null if the result is always false.\n\tRexNode simplifyPreservingType(RexNode e); // Simplifies a boolean expression, always preserving its type and its nullability.\n\tRexNode simplifyPreservingType(RexNode e, RexUnknownAs unknownAs, boolean matchNullability);\n\tRexNode simplifyUnknownAs(RexNode e, RexUnknownAs unknownAs); // As simplify(RexNode), but specifying how UNKNOWN values are to be treated.\n\tRexNode simplifyUnknownAsFalse(RexNode e); // As simplify(RexNode), but for a boolean expression for which a result of UNKNOWN will be treated as FALSE.\n\tRexSimplify withParanoid(boolean paranoid); // Returns a RexSimplify the same as this but which verifies that the expression before and after simplification are equivalent.\n\tRexSimplify withPredicates(RelOptPredicateList predicates); // Returns a RexSimplify the same as this but with a specified predicates value.\n}"}
{"index": 12612, "repo": "spring-data-mongodb-4.1.2", "des": "Base class for reactive RepositoryQuery implementations for MongoDB.", "code": "public abstract class AbstractReactiveMongoQuery extends Object implements RepositoryQuery {\n\tprotected reactor.core.publisher.Mono<Query> createCountQuery(ConvertingParameterAccessor accessor); // Creates a Query instance using the given ConvertingParameterAccessor.\n\tprotected abstract reactor.core.publisher.Mono<Query> createQuery(ConvertingParameterAccessor accessor); // Creates a Query instance using the given ParameterAccessor\n\tprotected reactor.core.publisher.Mono<UpdateDefinition> createUpdate(MongoParameterAccessor accessor); // Retrieves the update from the given accessor or creates one via by parsing the annotated statement extracted from Update.\n\tprotected org.reactivestreams.Publisher<Object> doExecute(ReactiveMongoQueryMethod method, ResultProcessor processor, ConvertingParameterAccessor accessor, Class<?> typeToRead); // Execute the RepositoryQuery of the given method with the parameters provided by the accessor\n\torg.reactivestreams.Publisher<Object> execute(Object[] parameters);\n\tprotected reactor.core.publisher.Mono<org.bson.codecs.configuration.CodecRegistry> getCodecRegistry();\n\tprotected reactor.core.publisher.Mono<ParameterBindingDocumentCodec> getParameterBindingCodec(); // Obtain the ParameterBindingDocumentCodec used for parsing JSON expressions.\n\tMongoQueryMethod getQueryMethod();\n\tprotected reactor.core.publisher.Mono<SpELExpressionEvaluator> getSpelEvaluatorFor(ExpressionDependencies dependencies, MongoParameterAccessor accessor); // Obtain a publisher emitting the SpELExpressionEvaluator suitable to evaluate expressions backed by the given dependencies.\n\tprotected abstract boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected abstract boolean isDeleteQuery(); // Return weather the query should delete matching documents.\n\tprotected abstract boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected abstract boolean isLimiting(); // Return whether the query has an explicit limit set.\n\tprotected reactor.core.publisher.Mono<List<AggregationOperation>> parseAggregationPipeline(String[] pipeline, MongoParameterAccessor accessor); // Parse the given aggregation pipeline stages applying values to placeholders to compute the actual list of operations.\n}"}
{"index": 14296, "repo": "wicket-core-10.0.0-M1", "des": "This class hold the information one request of a session has.", "code": "public static class IRequestLogger.SessionData extends Object implements org.apache.wicket.util.io.IClusterable, Comparable<IRequestLogger.SessionData> {\n\tvoid addTimeTaken(long time); // Adds time to the total server time.\n\tint compareTo(IRequestLogger.SessionData sd);\n\tDate getLastActive();\n\tlong getNumberOfRequests();\n\tString getSessionId();\n\tObject getSessionInfo();\n\tlong getSessionSize();\n\tDate getStartDate();\n\tlong getTotalTimeTaken();\n\tvoid setSessionInfo(Object sessionInfo); // Sets additional session info (e.g.\n\tvoid setSessionSize(long size); // Sets the recorded session size.\n}"}
{"index": 1071, "repo": "ignite-core-2.15.0", "des": "Container for different memory page-related metrics.", "code": "Interface PageMetrics {\n\tLongAdderMetric indexPages(); // Number of index pages loaded into memory.\n\tvoid reset(); // Resets all metric counters.\n\tLongAdderMetric totalPages(); // Total number of allocated pages.\n}"}
{"index": 13369, "repo": "shiro-core-2.0.0-alpha-2", "des": "Data Access Object design pattern specification to enable Session access to an EIS (Enterprise Information System).", "code": "public interface SessionDAO {\n\tSerializable create(Session session); // Inserts a new Session record into the underling EIS (e.g.\n\tvoid delete(Session session); // Deletes the associated EIS record of the specified session.\n\tCollection<Session> getActiveSessions(); // Returns all sessions in the EIS that are considered active, meaning all sessions that haven't been stopped/expired.\n\tSession readSession(Serializable sessionId); // Retrieves the session from the EIS uniquely identified by the specified sessionId.\n\tvoid update(Session session); // Updates (persists) data from a previously created Session instance in the EIS identified by {@link Session#getId() session.getId()}.\n}"}
{"index": 5966, "repo": "commons-lang3-3.12.0", "des": "A functional interface like BiPredicate that declares a Throwable.", "code": "Interface FailableBiPredicate<T,U,E extends Throwable> {\n\tdefault FailableBiPredicate<T,U,E> and(FailableBiPredicate<? super T,? super U,E> other); // Returns a composed FailableBiPredicate like BiPredicate.and(BiPredicate).\n\tstatic <T,U,E extends Throwable>FailableBiPredicate<T,U,E> falsePredicate(); // Returns The FALSE singleton.\n\tdefault FailableBiPredicate<T,U,E> negate(); // Returns a predicate that negates this predicate.\n\tdefault FailableBiPredicate<T,U,E> or(FailableBiPredicate<? super T,? super U,E> other); // Returns a composed FailableBiPredicate like BiPredicate.and(BiPredicate).\n\tboolean test(T object1, U object2); // Tests the predicate.\n\tstatic <T,U,E extends Throwable>FailableBiPredicate<T,U,E> truePredicate(); // Returns The FALSE TRUE.\n}"}
{"index": 9026, "repo": "hbase-server-3.0.0-alpha-4", "des": "This is the only implementation of ObserverContext, which serves as the interface for third-party Coprocessor developers.", "code": "Class ObserverContextImpl<E extends CoprocessorEnvironment> {\n\tvoid bypass(); // Call to indicate that the current coprocessor's return value (or parameter -- depends on the call-type) should be used in place of the value that would be obtained via normal processing; i.e.\n\tOptional<User> getCaller(); // Returns the active user for the coprocessor call.\n\tE getEnvironment();\n\tboolean isBypassable();\n\tvoid prepare(E env);\n\tboolean shouldBypass();\n}"}
{"index": 52, "repo": "connect-api-3.5.0", "des": "Single message transformation for Kafka Connect record types.", "code": "Interface Transformation<R extends ConnectRecord<R>> {\n\tR apply(R record); // Apply transformation to the record and return another record object (which may be record itself) or null, corresponding to a map or filter operation respectively.\n\tvoid close(); // Signal that this transformation instance will no longer will be used.\n\torg.apache.kafka.common.config.ConfigDef config(); // Configuration specification for this transformation.\n}"}
{"index": 6791, "repo": "calcite-core-1.34.0", "des": "Implementation of Window in bindable convention.", "code": "Class Bindables.BindableWindow {\n\torg.apache.calcite.linq4j.Enumerable<Object[]> bind(DataContext dataContext); // Executes this statement and returns an enumerable which will yield rows.\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tClass<Object[]> getElementType(); // Gets the type of the element(s) that are returned in this collection.\n\tNode implement(InterpretableRel.InterpreterImplementor implementor); // Creates an interpreter node to implement this relational expression.\n}"}
{"index": 11123, "repo": "tribuo-core-4.3.1", "des": "A data source which wraps up a list of Examples along with their DataSourceProvenance and an OutputFactory.", "code": "public class ListDataSource<T extends Output<T>> extends Object implements DataSource<T> {\n\tOutputFactory<T> getOutputFactory(); // Returns the OutputFactory associated with this Output subclass.\n\tDataSourceProvenance getProvenance();\n\tIterator<Example<T>> iterator();\n\tint size(); // Number of examples.\n}"}
{"index": 18118, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the Wsdl11Definition based on WSDL4J.", "code": "public class Wsdl4jDefinition extends Object implements Wsdl11Definition {\n\tjavax.wsdl.Definition getDefinition(); // Returns the WSDL4J Definition.\n\tSource getSource(); // Returns the Source of the definition.\n\tvoid setDefinition(javax.wsdl.Definition definition); // Set the WSDL4J Definition.\n}"}
{"index": 12125, "repo": "jena-core-4.9.0", "des": "Bind the second arg to the length of the first arg treated as a list.", "code": "public class ListLength extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 18632, "repo": "opencms-gwt-15.0", "des": "Sitemap context menu add entry to navigation.", "code": "Class CmsAddToNavMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 13044, "repo": "spring-aop-6.0.11", "des": "AspectInstanceFactory implementation backed by a Spring BeanFactory.", "code": "public class BeanFactoryAspectInstanceFactory extends Object implements MetadataAwareAspectInstanceFactory, Serializable {\n\tClassLoader getAspectClassLoader(); // Expose the aspect class loader that this factory uses.\n\tObject getAspectCreationMutex(); // Get the best possible creation mutex for this factory.\n\tObject getAspectInstance(); // Create an instance of this factory's aspect.\n\tAspectMetadata getAspectMetadata(); // Get the AspectJ AspectMetadata for this factory's aspect.\n\tint getOrder(); // Determine the order for this factory's target aspect, either an instance-specific order expressed through implementing the Ordered interface (only checked for singleton beans), or an order expressed through the Order annotation at the class level.\n}"}
{"index": 18813, "repo": "lucene-core-9.7.0", "des": "Reads points from disk in a fixed-with format, previously written with OfflinePointWriter.", "code": "Class OfflinePointReader {\n\tvoid close();\n\tboolean next(); // Returns false once iteration is done, else true.\n\tPointValue pointValue(); // Sets the packed value in the provided ByteRef\n}"}
{"index": 5541, "repo": "org.apache.karaf.main-2.4.4", "des": "BundleDeltas represent the changes related to an individual bundle between two states.", "code": "Interface BundleDelta {\n\tint compareTo(BundleDelta obj); // Answers an integer indicating the relative positions of the receiver and the argument in the natural order of elements of the receiver's class.\n\tBundleDescription getBundle(); // Returns the BundleDescription that this bundle delta is for.\n\tint getType(); // Returns the type of change which occured.\n}"}
{"index": 7815, "repo": "cassandra-all-4.1.2", "des": "Encapsulates a volatile reference to an immutable TableMetadata instance.", "code": "Class TableMetadataRef {\n\tstatic TableMetadataRef forOfflineTools(TableMetadata metadata); // Create a new ref to the passed TableMetadata for use by offline tools only.\n\tTableMetadata get();\n\tTableMetadata getLocal(); // Returns node-local table metadata\n\tvoid setLocalOverrides(TableMetadata metadata);\n}"}
{"index": 1521, "repo": "pdfbox-3.0.0-beta1", "des": "The mode to use when merging AcroForm between documents: JOIN_FORM_FIELDS_MODE fields with the same fully qualified name will be merged into one with the widget annotations of the merged fields becoming part of the same field.", "code": "Enum PDFMergerUtility.AcroFormMergeMode {\n\tstatic PDFMergerUtility.AcroFormMergeMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PDFMergerUtility.AcroFormMergeMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3050, "repo": "tink-1.10.0", "des": "Represents a Derivation key which is based on a PRF.", "code": "Class PrfBasedKeyDerivationKey {\n\tstatic PrfBasedKeyDerivationKey create(PrfBasedKeyDerivationParameters parameters, PrfKey prfKey, Integer idRequirement);\n\tboolean equalsKey(Key other); // Returns true if the key is guaranteed to be equal to other.\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tPrfBasedKeyDerivationParameters getParameters(); // Returns a Parameters object containing all the information about the key which is not randomly chosen.\n\tPrfKey getPrfKey();\n}"}
{"index": 9972, "repo": "commons-text-1.10.0", "des": "This class gathers all the commands needed to transform one objects sequence into another objects sequence.", "code": "Class EditScript<T> {\n\tvoid append(DeleteCommand<T> command); // Appends a delete command to the script.\n\tvoid append(InsertCommand<T> command); // Appends an insert command to the script.\n\tvoid append(KeepCommand<T> command); // Appends a keep command to the script.\n\tint getLCSLength(); // Gets the length of the Longest Common Subsequence (LCS).\n\tint getModifications(); // Gets the number of effective modifications.\n\tvoid visit(CommandVisitor<T> visitor); // Visits the script.\n}"}
{"index": 8204, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the WebServiceConnection interface that uses a HttpURLConnection.", "code": "Class HttpUrlConnection {\n\tvoid addRequestHeader(String name, String value); // Adds a request header with the given name and value.\n\tHttpURLConnection getConnection();\n\tprotected InputStream getRawResponseInputStream(); // Returns the raw, possibly compressed input stream to read the response from.\n\tprotected OutputStream getRequestOutputStream(); // Returns the output stream to write the request to.\n\tprotected int getResponseCode(); // Returns the HTTP status code of the response.\n\tprotected long getResponseContentLength(); // Returns the length of the response.\n\tIterator<String> getResponseHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getResponseHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected String getResponseMessage(); // Returns the HTTP status message of the response.\n\tURI getUri(); // Returns the URI for this connection.\n\tvoid onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n}"}
{"index": 5506, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "Implementations of this interface supports MailboxListener.", "code": "Interface MailboxListenerSupport {\n\tvoid addGlobalListener(MailboxListener listener, MailboxSession session); // Add a MailboxListener which get fired for ever MailboxPath\n\tvoid addListener(MailboxPath mailboxPath, MailboxListener listener, MailboxSession session); // Implementations of Mailbox may interpret the fact that someone is listening and do some caching and even postpone persistence until everyone has removed itself.\n\tvoid removeGlobalListener(MailboxListener listner, MailboxSession session); // Remove the MailboxListener\n\tvoid removeListener(MailboxPath mailboxPath, MailboxListener listner, MailboxSession session); // Remove the MailboxListener\n}"}
{"index": 16556, "repo": "spring-batch-infrastructure-5.0.2", "des": "Factory for transaction aware objects (like lists, sets, maps).", "code": "public class TransactionAwareProxyFactory<T> extends Object {\n\tprotected final T begin(T target); // Make a copy of the target that can be used inside a transaction to isolate changes from the original.\n\tprotected void commit(T copy, T target); // Take the working copy state and commit it back to the original target.\n\tstatic <T> List<T> createAppendOnlyTransactionalList();\n\tstatic <K, V> ConcurrentMap<K,V> createAppendOnlyTransactionalMap();\n\tstatic <T> Set<T> createAppendOnlyTransactionalSet();\n\tstatic <T> List<T> createTransactionalList();\n\tstatic <T> List<T> createTransactionalList(List<T> list);\n\tstatic <K, V> Map<K,V> createTransactionalMap();\n\tstatic <K, V> Map<K,V> createTransactionalMap(Map<K,V> map);\n\tstatic <T> Set<T> createTransactionalSet();\n\tstatic <T> Set<T> createTransactionalSet(Set<T> set);\n}"}
{"index": 15776, "repo": "camel-api-4.0.0-RC1", "des": "An interface to represent an object which can make use of injected HeaderFilterStrategy.", "code": "public interface HeaderFilterStrategyAware {\n\tHeaderFilterStrategy getHeaderFilterStrategy(); // Gets the header filter strategy used\n\tvoid setHeaderFilterStrategy(HeaderFilterStrategy strategy); // Sets the header filter strategy to use\n}"}
{"index": 239, "repo": "commons-collections4-4.4", "des": "Decorates another Bag to synchronize its behaviour for a multi-threaded environment.", "code": "Class SynchronizedBag<E> {\n\tboolean add(E object, int count); // Adds nCopies copies of the specified object to the Bag.\n\tboolean equals(Object object);\n\tprotected Bag<E> getBag(); // Gets the bag being decorated.\n\tint getCount(Object object); // Returns the number of occurrences (cardinality) of the given object currently in the bag.\n\tboolean remove(Object object, int count); // Removes nCopies copies of the specified object from the Bag.\n\tstatic <E> SynchronizedBag<E> synchronizedBag(Bag<E> bag); // Factory method to create a synchronized bag.\n\tSet<E> uniqueSet(); // Returns a Set of unique elements in the Bag.\n}"}
{"index": 5980, "repo": "commons-lang3-3.12.0", "des": "A functional interface like IntUnaryOperator that declares a Throwable.", "code": "Interface FailableIntUnaryOperator<E extends Throwable> {\n\tdefault FailableIntUnaryOperator<E> andThen(FailableIntUnaryOperator<E> after); // Returns a composed FailableDoubleUnaryOperator like IntUnaryOperator.andThen(IntUnaryOperator).\n\tint applyAsInt(int operand); // Applies this operator to the given operand.\n\tdefault FailableIntUnaryOperator<E> compose(FailableIntUnaryOperator<E> before); // Returns a composed FailableIntUnaryOperator like IntUnaryOperator.compose(IntUnaryOperator).\n\tstatic <E extends Throwable>FailableIntUnaryOperator<E> identity(); // Returns a unary operator that always returns its input argument.\n\tstatic <E extends Throwable>FailableIntUnaryOperator<E> nop(); // Returns The NOP singleton.\n}"}
{"index": 15638, "repo": "spring-security-core-6.1.2", "des": "An AuthorizationManager which can determine if an Authentication may invoke the MethodInvocation by evaluating if the Authentication contains a specified authority from the Spring Security's Secured annotation.", "code": "public final class SecuredAuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation mi); // Determine if an Authentication has access to a method by evaluating the Secured annotation that MethodInvocation specifies.\n\tvoid setAuthoritiesAuthorizationManager(AuthorizationManager<Collection<String>> authoritiesAuthorizationManager); // Sets an AuthorizationManager that accepts a collection of authority strings.\n}"}
{"index": 14528, "repo": "spring-security-web-6.1.2", "des": "Holds objects associated with a HTTP filter.", "code": "public class FilterInvocation extends Object {\n\tjakarta.servlet.FilterChain getChain();\n\tString getFullRequestUrl(); // Indicates the URL that the user agent used for this request.\n\tjakarta.servlet.http.HttpServletRequest getHttpRequest();\n\tjakarta.servlet.http.HttpServletResponse getHttpResponse();\n\tjakarta.servlet.http.HttpServletRequest getRequest();\n\tString getRequestUrl(); // Obtains the web application-specific fragment of the URL.\n\tjakarta.servlet.http.HttpServletResponse getResponse();\n}"}
{"index": 3851, "repo": "hbase-client-3.0.0-alpha-4", "des": "A filter that will only return the key component of each KV (the value will be rewritten as empty).", "code": "Class KeyOnlyFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tFilter.ReturnCode filterCell(Cell ignored); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRowKey(Cell cell); // Filters a row based on the row key.\n\tstatic KeyOnlyFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of KeyOnlyFilter\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n\tCell transformCell(Cell cell); // By default no transformation takes place Give the filter a chance to transform the passed KeyValue.\n}"}
{"index": 47, "repo": "connect-api-3.5.0", "des": "A structured record containing a set of named fields with values, each field using an independent Schema.", "code": "Class Struct {\n\tboolean equals(Object o);\n\tObject get(Field field); // Get the value of a field, returning the default value if no value has been set yet and a default value is specified in the field's schema.\n\tObject get(String fieldName); // Get the value of a field, returning the default value if no value has been set yet and a default value is specified in the field's schema.\n\t<T> List<T> getArray(String fieldName); // Equivalent to calling get(String) and casting the result to a List.\n\tBoolean getBoolean(String fieldName); // Equivalent to calling get(String) and casting the result to a Boolean.\n\tbyte[] getBytes(String fieldName); // Equivalent to calling get(String) and casting the result to a byte[].\n\tFloat getFloat32(String fieldName); // Equivalent to calling get(String) and casting the result to a Float.\n\tDouble getFloat64(String fieldName); // Equivalent to calling get(String) and casting the result to a Double.\n\tShort getInt16(String fieldName); // Equivalent to calling get(String) and casting the result to a Short.\n\tInteger getInt32(String fieldName); // Equivalent to calling get(String) and casting the result to an Integer.\n\tLong getInt64(String fieldName); // Equivalent to calling get(String) and casting the result to a Long.\n\tByte getInt8(String fieldName); // Equivalent to calling get(String) and casting the result to a Byte.\n\t<K,V> Map<K,V> getMap(String fieldName); // Equivalent to calling get(String) and casting the result to a Map.\n\tString getString(String fieldName); // Equivalent to calling get(String) and casting the result to a String.\n\tStruct getStruct(String fieldName); // Equivalent to calling get(String) and casting the result to a Struct.\n\tObject getWithoutDefault(String fieldName); // Get the underlying raw value for the field without accounting for default values.\n\tStruct put(Field field, Object value); // Set the value of a field.\n\tStruct put(String fieldName, Object value); // Set the value of a field.\n\tSchema schema(); // Get the schema for this Struct.\n\tvoid validate(); // Validates that this struct has filled in all the necessary data with valid values.\n}"}
{"index": 8784, "repo": "graal-sdk-1.0.0-rc7", "des": "An auto-closable that holds a Java CharSequence[] array as a null-terminated array of null-terminated C char[]s.", "code": "Class CTypeConversion.CCharPointerPointerHolder {\n\tvoid close(); // Discards the C pointers.\n\tCCharPointerPointer get(); // Returns the C pointer to pointers of null-terminated C char[] arrays.\n}"}
{"index": 10466, "repo": "groovy-all-4.0.13", "des": "Helper class to return either a SourceUnit or ClassNode.", "code": "public static class ClassNodeResolver.LookupResult extends Object {\n\tClassNode getClassNode(); // returns the ClassNode\n\tSourceUnit getSourceUnit(); // returns the SourceUnit\n\tboolean isClassNode(); // returns true if a ClassNode is stored\n\tboolean isSourceUnit(); // returns true if a SourceUnit is stored\n}"}
{"index": 15886, "repo": "camel-api-4.0.0-RC1", "des": "Creates ExecutorService and ScheduledExecutorService objects that work with a thread pool for a given ThreadPoolProfile and ThreadFactory.", "code": "public interface ThreadPoolFactory {\n\tExecutorService newCachedThreadPool(ThreadFactory threadFactory); // Creates a new cached thread pool\n\tScheduledExecutorService newScheduledThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory); // Create a scheduled thread pool using the given thread pool profile\n\tExecutorService newThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory); // Create a thread pool using the given thread pool profile\n}"}
{"index": 3042, "repo": "tink-1.10.0", "des": "Implements a Key for legacy types where no actual parser is present.", "code": "Class LegacyProtoKey {\n\tboolean equalsKey(Key key); // Returns true if we are sure that the other key is the same.\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tParameters getParameters(); // Returns a LegacyParametersNotForCreation object.\n\tProtoKeySerialization getSerialization(SecretKeyAccess access); // Returns the protokeyserialization with which this object was created.\n}"}
{"index": 8733, "repo": "hadoop-yarn-common-3.3.6", "des": "Download a single URL to the local disk.", "code": "Class FSDownload {\n\torg.apache.hadoop.fs.Path call();\n\tstatic org.apache.hadoop.thirdparty.com.google.common.cache.CacheLoader<org.apache.hadoop.fs.Path,Future<org.apache.hadoop.fs.FileStatus>> createStatusCacheLoader(org.apache.hadoop.conf.Configuration conf); // Creates the cache loader for the status loading cache.\n\tstatic boolean isPublic(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path current, org.apache.hadoop.fs.FileStatus sStat, org.apache.hadoop.thirdparty.com.google.common.cache.LoadingCache<org.apache.hadoop.fs.Path,Future<org.apache.hadoop.fs.FileStatus>> statCache); // Returns a boolean to denote whether a cache file is visible to all (public) or not\n}"}
{"index": 16162, "repo": "spring-data-cassandra-4.1.2", "des": "RowMapper implementation that converts a row into a new instance of the specified mapped target class.", "code": "public class DataClassRowMapper<T> extends BeanPropertyRowMapper<T> {\n\tprotected T constructMappedInstance(com.datastax.oss.driver.api.core.cql.Row row, TypeConverter tc); // Construct an instance of the mapped class for the current row.\n\tprotected void initialize(Class<T> mappedClass); // Initialize the mapping meta-data for the given class.\n\tstatic <T> DataClassRowMapper<T> newInstance(Class<T> mappedClass); // Static factory method to create a new DataClassRowMapper.\n\tstatic <T> DataClassRowMapper<T> newInstance(Class<T> mappedClass, ConversionService conversionService); // Static factory method to create a new DataClassRowMapper.\n}"}
{"index": 13438, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Strategies for configuring and validating Redis.", "code": "public static enum RedisSessionProperties.ConfigureAction extends Enum<RedisSessionProperties.ConfigureAction> {\n\tstatic RedisSessionProperties.ConfigureAction valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic RedisSessionProperties.ConfigureAction[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 790, "repo": "ignite-core-2.15.0", "des": "This class provides implementation for job sibling.", "code": "Class GridJobSiblingImpl {\n\tvoid cancel(); // Sends a request to cancel this sibling.\n\tIgniteUuid getJobId(); // Gets ID of this grid job sibling.\n\tboolean isJobDone();\n\tObject jobTopic();\n\tUUID nodeId();\n\tvoid nodeId(UUID nodeId);\n\tvoid onJobDone();\n\tvoid readExternal(ObjectInput in);\n\tObject taskTopic();\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 18549, "repo": "hibernate-core-5.6.15.Final", "des": "Additional contract describing the source of an identifier mapping whose nature is EntityIdentifierNature.NON_AGGREGATED_COMPOSITE.", "code": "Interface IdentifierSourceNonAggregatedComposite {\n\tjava.util.List<SingularAttributeSource> getAttributeSourcesMakingUpIdentifier(); // Obtain the source descriptor for the identifier attribute.\n\tEmbeddableSource getIdClassSource(); // Retrieve the source information for the IdClass definition\n}"}
{"index": 9443, "repo": "hadoop-yarn-api-3.3.6", "des": "UpdateContainerError is used by the Scheduler to notify the ApplicationMaster of an UpdateContainerRequest it cannot satisfy due to an error in the request.", "code": "Class UpdateContainerError {\n\tboolean equals(Object obj);\n\tabstract int getCurrentContainerVersion(); // Get current container version.\n\tabstract String getReason(); // Get reason why the update request was not satisfiable.\n\tabstract UpdateContainerRequest getUpdateContainerRequest(); // Get the UpdateContainerRequest that was not satisfiable.\n\tstatic UpdateContainerError newInstance(String reason, UpdateContainerRequest updateContainerRequest);\n\tabstract void setCurrentContainerVersion(int currentVersion); // Set current container version.\n\tabstract void setReason(String reason); // Set reason why the update request was not satisfiable.\n\tabstract void setUpdateContainerRequest(UpdateContainerRequest updateContainerRequest); // Set the UpdateContainerRequest that was not satisfiable.\n}"}
{"index": 17341, "repo": "groovy-4.0.13", "des": "A wrapper for List which automatically grows the list when either ListWithDefault.get(int) or ListWithDefault.getAt(int) is called with an index greater than or equal to size().", "code": "public final class ListWithDefault<T> extends Object implements List<T> {\n\tvoid add(int i, T t);\n\tboolean add(T t);\n\tboolean addAll(int i, Collection<? extends T> ts);\n\tboolean addAll(Collection<? extends T> ts);\n\tvoid clear();\n\tboolean contains(Object o);\n\tboolean containsAll(Collection<?> objects);\n\tboolean equals(Object obj);\n\tT get(int index); // Returns the element at the given index but grows the list if needed.\n\tT getAt(int index); // Overwrites subscript operator handling by redirecting to get(int).\n\tList<T> getDelegate();\n\tClosure getInitClosure();\n\tint indexOf(Object o);\n\tboolean isEmpty();\n\tboolean isLazyDefaultValues();\n\tIterator<T> iterator();\n\tint lastIndexOf(Object o);\n\tListIterator<T> listIterator();\n\tListIterator<T> listIterator(int i);\n\tstatic <T> ListWithDefault<T> newInstance(List<T> items, boolean lazyDefaultValues, Closure initClosure);\n\tT remove(int i);\n\tboolean remove(Object o);\n\tboolean removeAll(Collection<?> objects);\n\tboolean retainAll(Collection<?> objects);\n\tT set(int i, T t);\n\tint size();\n\tListWithDefault<T> subList(int fromIndex, int toIndex); // Returns a view of a portion of this list.\n\tObject[] toArray();\n\t<U> U[] toArray(U[] ts);\n}"}
{"index": 2518, "repo": "exoplayer-r2.3.1", "des": "Stores HTTP request properties (aka HTTP headers) and provides methods to modify the headers in a thread safe way to avoid the potential of creating snapshots of an inconsistent or unintended state.", "code": "Class HttpDataSource.RequestProperties {\n\tvoid clear(); // Clears all request properties.\n\tvoid clearAndSet(java.util.Map<java.lang.String,java.lang.String> properties); // Removes all properties previously existing and sets the keys and values of the map.\n\tjava.util.Map<java.lang.String,java.lang.String> getSnapshot(); // Gets a snapshot of the request properties.\n\tvoid remove(java.lang.String name); // Removes a request property by name.\n\tvoid set(java.util.Map<java.lang.String,java.lang.String> properties); // Sets the keys and values contained in the map.\n\tvoid set(java.lang.String name, java.lang.String value); // Sets the specified property value for the specified name.\n}"}
{"index": 4054, "repo": "zookeeper-3.8.2", "des": "Handles the special case of removing watches which has registered for a client path.", "code": "Class WatchDeregistration {\n\tString getClientPath(); // Returns client path which has specified for unregistering its watcher\n\tMap<Watcher.Event.EventType,Set<Watcher>> unregister(int rc); // Unregistering watcher that was added on path.\n}"}
{"index": 18398, "repo": "opencms-core-15.0", "des": "Category information for a specific resource.", "code": "Class CmsResourceCategoryInfo {\n\tjava.util.List<CmsCategoryTreeEntry> getCategoryTree(); // Returns the category tree.\n\tjava.util.List<java.lang.String> getCurrentCategories(); // Returns the current resource categories.\n\tCmsListInfoBean getResourceInfo(); // Returns the resource info bean.\n\tCmsUUID getStructureId(); // Returns the resource structure id.\n}"}
{"index": 18539, "repo": "hibernate-core-5.6.15.Final", "des": "Aggregates the alias/suffix information in relation to an EntityReference todo : add a contract (interface) that can be shared by entity and collection alias info objects as lhs/rhs of a join ?", "code": "Interface EntityReferenceAliases {\n\tEntityAliases getColumnAliases(); // Obtain the column aliases for the select fragment columns associated with the described entity reference.\n\tjava.lang.String getTableAlias(); // Obtain the table alias used for referencing the table of the EntityReference.\n}"}
{"index": 14753, "repo": "spring-data-commons-3.1.2", "des": "Strategy interface providing predicates to resolve a method called on a composite to its implementation method.", "code": "@FunctionalInterface public interface MethodLookup {\n\tdefault MethodLookup and(MethodLookup other); // Returns a composed MethodLookup that represents a concatenation of this predicate and another.\n\tList<MethodLookup.MethodPredicate> getLookups(); // Return an ordered List of MethodLookup.MethodPredicate.\n}"}
{"index": 7613, "repo": "cassandra-all-4.1.2", "des": "Encryption and decryption functions specific to the commit log.", "code": "Class EncryptionUtils {\n\tstatic java.nio.ByteBuffer compress(java.nio.ByteBuffer inputBuffer, java.nio.ByteBuffer outputBuffer, boolean allowBufferResize, ICompressor compressor); // Compress the raw data, as well as manage sizing of the outputBuffer; if the buffer is not big enough, deallocate current, and allocate a large enough buffer.\n\tstatic java.nio.ByteBuffer decrypt(FileDataInput fileDataInput, java.nio.ByteBuffer outputBuffer, boolean allowBufferResize, javax.crypto.Cipher cipher);\n\tstatic java.nio.ByteBuffer decrypt(java.nio.channels.ReadableByteChannel channel, java.nio.ByteBuffer outputBuffer, boolean allowBufferResize, javax.crypto.Cipher cipher); // Decrypt the input data, as well as manage sizing of the outputBuffer; if the buffer is not big enough, deallocate current, and allocate a large enough buffer.\n\tstatic java.nio.ByteBuffer encrypt(java.nio.ByteBuffer inputBuffer, java.nio.ByteBuffer outputBuffer, boolean allowBufferResize, javax.crypto.Cipher cipher);\n\tstatic java.nio.ByteBuffer encryptAndWrite(java.nio.ByteBuffer inputBuffer, java.nio.channels.WritableByteChannel channel, boolean allowBufferResize, javax.crypto.Cipher cipher); // Encrypt the input data, and writes out to the same input buffer; if the buffer is not big enough, deallocate current, and allocate a large enough buffer.\n\tstatic int uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, ICompressor compressor);\n\tstatic java.nio.ByteBuffer uncompress(java.nio.ByteBuffer inputBuffer, java.nio.ByteBuffer outputBuffer, boolean allowBufferResize, ICompressor compressor); // Uncompress the input data, as well as manage sizing of the outputBuffer; if the buffer is not big enough, deallocate current, and allocate a large enough buffer.\n}"}
{"index": 8009, "repo": "commons-jcs3-core-3.1", "des": "This service creates a listener that can create lateral caches and add them to the no wait list.", "code": "Class UDPDiscoveryService {\n\tboolean addDiscoveryListener(IDiscoveryListener listener); // Adds a listener.\n\tprotected void addOrUpdateService(DiscoveredService discoveredService); // Add a service to the list.\n\tvoid addParticipatingCacheName(String cacheName); // Adds a region to the list that is participating in discovery.\n\tprotected void cleanup(); // This goes through the list of services and removes those that we haven't heard from in longer than the max idle time.\n\tprotected ArrayList<String> getCacheNames(); // Get all the cache names we have facades for.\n\tSet<IDiscoveryListener> getCopyOfDiscoveryListeners();\n\tSet<DiscoveredService> getDiscoveredServices();\n\tIElementSerializer getSerializer(); // Return the serializer implementation\n\tUDPDiscoveryAttributes getUdpDiscoveryAttributes();\n\tvoid initiateBroadcast(); // Initial request that the other caches let it know their addresses.\n\tvoid removeDiscoveredService(DiscoveredService service); // Removes the discovered service from the list and calls the discovery listener.\n\tboolean removeDiscoveryListener(IDiscoveryListener listener); // Removes a listener.\n\tprotected void serviceRequestBroadcast(); // Send a passive broadcast in response to a request broadcast.\n\tvoid setScheduledExecutorService(ScheduledExecutorService scheduledExecutor); // Inject an instance of a central ScheduledExecutorService\n\tvoid setUdpDiscoveryAttributes(UDPDiscoveryAttributes attr);\n\tvoid shutdown(); // Shuts down the receiver.\n\tprotected void shutdownBroadcast(); // Issues a remove broadcast to the others.\n\tvoid startup(); // Start necessary receiver thread\n}"}
{"index": 16938, "repo": "spring-integration-ip-6.1.2", "des": "A client connection factory that creates TcpNioConnections.", "code": "public class TcpNioClientConnectionFactory extends AbstractClientConnectionFactory implements org.springframework.scheduling.SchedulingAwareRunnable {\n\tprotected TcpConnectionSupport buildNewConnection();\n\tprotected void checkActive();\n\tprotected Map<SocketChannel,TcpNioConnection> getConnections();\n\tprotected BlockingQueue<SocketChannel> getNewChannels();\n\tboolean isLongLived();\n\tprotected boolean isUsingDirectBuffers();\n\tvoid run();\n\tvoid setTcpNioConnectionSupport(TcpNioConnectionSupport tcpNioSupport);\n\tvoid setUsingDirectBuffers(boolean usingDirectBuffers); // When set to true, connections created by this factory attempt to use direct buffers where possible.\n\tvoid start();\n\tvoid stop(); // Stops the server.\n}"}
{"index": 3387, "repo": "hadoop-azure-3.3.6", "des": "An event listener to the ResponseReceived event from Azure Storage that will update metrics appropriately when it gets that event.", "code": "Class ResponseReceivedMetricUpdater {\n\tvoid eventOccurred(com.microsoft.azure.storage.ResponseReceivedEvent eventArg); // Handle the response-received event from Azure SDK.\n\tstatic void hook(com.microsoft.azure.storage.OperationContext operationContext, AzureFileSystemInstrumentation instrumentation, BandwidthGaugeUpdater blockUploadGaugeUpdater); // Hooks a new listener to the given operationContext that will update the metrics for the WASB file system appropriately in response to ResponseReceived events.\n}"}
{"index": 8785, "repo": "graal-sdk-1.0.0-rc7", "des": "An execution engine for Graal guest languages that allows to inspect the the installed guest languages, instruments and their available options.", "code": "Class Engine {\n\tvoid close(); // Closes this engine and frees up allocated native resources.\n\tvoid close(boolean cancelIfExecuting); // Closes this engine and frees up allocated native resources.\n\tstatic Engine create(); // Creates a new engine instance with default configuration.\n\tstatic Path findHome(); // Finds the GraalVM home folder.\n\tString getImplementationName(); // Gets a human-readable name of the polyglot implementation (for example, \"Default Truffle Engine\" or \"Graal Truffle Engine\").\n\tMap<String,Instrument> getInstruments(); // Gets all installed instruments of this engine.\n\tMap<String,Language> getLanguages(); // Gets a map of all installed languages with the language id as key and the language object as value.\n\tOptionDescriptors getOptions(); // Returns all options available for the engine.\n\tString getVersion(); // Gets the version string of the engine in an unspecified format.\n\tstatic Engine.Builder newBuilder(); // Creates a new context builder that allows to configure an engine instance.\n}"}
{"index": 2431, "repo": "spring-session-1.3.5.RELEASE", "des": "Provides a way to identify a user in an agnostic way.", "code": "Interface Session {\n\t<T> T getAttribute(java.lang.String attributeName); // Gets the Object associated with the specified name or null if no Object is associated to that name.\n\tjava.util.Set<java.lang.String> getAttributeNames(); // Gets the attribute names that have a value associated with it.\n\tjava.lang.String getId(); // Gets a unique string that identifies the Session.\n\tvoid removeAttribute(java.lang.String attributeName); // Removes the attribute with the provided attribute name.\n\tvoid setAttribute(java.lang.String attributeName, java.lang.Object attributeValue); // Sets the attribute value for the provided attribute name.\n}"}
{"index": 4924, "repo": "hadoop-common-3.3.4", "des": "Supporting Utility classes used by TFile, and shared by users of TFile.", "code": "Class Utils {\n\tstatic <T> int lowerBound(List<? extends Comparable<? super T>> list, T key); // Lower bound binary search.\n\tstatic <T> int lowerBound(List<? extends T> list, T key, Comparator<? super T> cmp); // Lower bound binary search.\n\tstatic String readString(DataInput in); // Read a String as a VInt n, followed by n Bytes in Text format.\n\tstatic int readVInt(DataInput in); // Decoding the variable-length integer.\n\tstatic long readVLong(DataInput in); // Decoding the variable-length integer.\n\tstatic <T> int upperBound(List<? extends Comparable<? super T>> list, T key); // Upper bound binary search.\n\tstatic <T> int upperBound(List<? extends T> list, T key, Comparator<? super T> cmp); // Upper bound binary search.\n\tstatic void writeString(DataOutput out, String s); // Write a String as a VInt n, followed by n Bytes as in Text format.\n\tstatic void writeVInt(DataOutput out, int n); // Encoding an integer into a variable-length encoding format.\n\tstatic void writeVLong(DataOutput out, long n); // Encoding a Long integer into a variable-length encoding format.\n}"}
{"index": 3462, "repo": "mahout-mr-0.13.0", "des": "Methods for calculating basic stats (mean, variance, stdDev, etc.", "code": "Class BasicStats {\n\tstatic double stdDev(org.apache.hadoop.fs.Path input, org.apache.hadoop.fs.Path output, org.apache.hadoop.conf.Configuration baseConf); // Calculate the standard deviation\n\tstatic double stdDevForGivenMean(org.apache.hadoop.fs.Path input, org.apache.hadoop.fs.Path output, double mean, org.apache.hadoop.conf.Configuration baseConf); // Calculate the standard deviation given a predefined mean\n\tstatic double variance(org.apache.hadoop.fs.Path input, org.apache.hadoop.fs.Path output, org.apache.hadoop.conf.Configuration baseConf); // Calculate the variance of values stored as\n\tstatic double varianceForGivenMean(org.apache.hadoop.fs.Path input, org.apache.hadoop.fs.Path output, double mean, org.apache.hadoop.conf.Configuration baseConf); // Calculate the variance by a predefined mean of values stored as\n}"}
{"index": 7198, "repo": "calcite-core-1.34.0", "des": "A SqlDynamicParam represents a dynamic parameter marker in an SQL statement.", "code": "Class SqlDynamicParam {\n\t<R> R accept(SqlVisitor<R> visitor); // Accepts a generic visitor.\n\tSqlNode clone(SqlParserPos pos); // Clones a SqlNode with a different position.\n\tboolean equalsDeep(@Nullable SqlNode node, Litmus litmus); // Returns whether this node is structurally equivalent to another node.\n\tint getIndex();\n\tSqlKind getKind(); // Returns the type of node this is, or SqlKind.OTHER if it's nothing special.\n\tSqlMonotonicity getMonotonicity(@Nullable SqlValidatorScope scope); // Returns whether expression is always ascending, descending or constant.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n\tvoid validate(SqlValidator validator, SqlValidatorScope scope); // Validates this node.\n}"}
{"index": 11357, "repo": "spring-context-6.0.11", "des": "Task implementation defining a Runnable to be executed at a given millisecond interval which may be treated as fixed-rate or fixed-delay depending on context.", "code": "public class IntervalTask extends Task {\n\tlong getInitialDelay(); // Deprecated. as of 6.0, in favor of getInitialDelayDuration()\n\tDuration getInitialDelayDuration(); // Return the initial delay before first execution of the task.\n\tlong getInterval(); // Deprecated. as of 6.0, in favor of getIntervalDuration()\n\tDuration getIntervalDuration(); // Return how often the task should be executed.\n}"}
{"index": 7769, "repo": "cassandra-all-4.1.2", "des": "Schema update handler is responsible for maintaining the shared schema and synchronizing it with other nodes in the cluster, which means pushing and pulling changes, as well as tracking the current version in the cluster.", "code": "Interface SchemaUpdateHandler {\n\tSchemaTransformation.SchemaTransformationResult apply(SchemaTransformation transformation, boolean local); // Applies schema transformation in the underlying storage and synchronizes with other nodes.\n\tAwaitable clear(); // Marks the local schema to be cleared and refreshed.\n\tvoid reset(boolean local); // Resets the schema either by reloading data from the local storage or from the other nodes.\n\tvoid start(); // Starts actively synchronizing schema with the rest of the cluster.\n\tboolean waitUntilReady(java.time.Duration timeout); // Waits until the schema update handler is ready and returns the result.\n}"}
{"index": 18031, "repo": "spring-ws-core-4.0.5", "des": "Implementation of WebServiceConnection that is based on Apache HttpClient.", "code": "public class HttpComponentsConnection extends AbstractHttpSenderConnection {\n\tvoid addRequestHeader(String name, String value); // Adds a request header with the given name and value.\n\torg.apache.http.client.methods.HttpPost getHttpPost();\n\torg.apache.http.HttpResponse getHttpResponse();\n\tprotected InputStream getRawResponseInputStream(); // Returns the raw, possibly compressed input stream to read the response from.\n\tprotected OutputStream getRequestOutputStream(); // Returns the output stream to write the request to.\n\tprotected int getResponseCode(); // Returns the HTTP status code of the response.\n\tprotected long getResponseContentLength(); // Returns the length of the response.\n\tIterator<String> getResponseHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getResponseHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected String getResponseMessage(); // Returns the HTTP status message of the response.\n\tURI getUri(); // Returns the URI for this connection.\n\tvoid onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n\tprotected void onSendBeforeWrite(WebServiceMessage message); // Called before the given message has been written to the TransportOutputStream.\n}"}
{"index": 16409, "repo": "spring-batch-infrastructure-5.0.2", "des": "Superclass for delegating classes which dynamically call a custom method of injected object.", "code": "public abstract class AbstractMethodInvokingDelegator<T> extends Object implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected Object[] getArguments(); // Return arguments.\n\tprotected T invokeDelegateMethod(); // Invoker the target method with arguments set by setArguments(Object[]).\n\tprotected T invokeDelegateMethodWithArgument(Object object); // Invokes the target method with given argument.\n\tprotected T invokeDelegateMethodWithArguments(Object[] args); // Invokes the target method with given arguments.\n\tvoid setArguments(Object[] arguments);\n\tvoid setTargetMethod(String targetMethod);\n\tvoid setTargetObject(Object targetObject);\n}"}
{"index": 1018, "repo": "ignite-core-2.15.0", "des": "Memory provider implementation based on memory mapped file.", "code": "Class MappedFileMemoryProvider {\n\tvoid initialize(long[] sizes);\n\tDirectMemoryRegion nextRegion(); // Attempts to allocate next memory region.\n\tvoid shutdown(boolean deallocate); // Shuts down the provider.\n}"}
{"index": 6668, "repo": "artemis-odb-2.3.0", "des": "Entity system processed at a certain interval, without iteration implementation.", "code": "Class IntervalSystem {\n\tprotected boolean checkProcessing(); // Does the system desire processing.\n\tprotected float getIntervalDelta(); // Gets the actual delta since this system was last processed.\n\tprotected float getTimeDelta();\n}"}
{"index": 14307, "repo": "wicket-core-10.0.0-M1", "des": "static resource which does not change for the lifetime of the application and should be considered a candidate for long-term caching.", "code": "public interface IStaticCacheableResource extends IResource {\n\tSerializable getCacheKey(); // get unique caching key for the resource stream produced by getResourceStream()\n\torg.apache.wicket.util.resource.IResourceStream getResourceStream(); // get static resource stream which will be unique to the related caching key getCacheKey()\n\tboolean isCachingEnabled(); // controls whether caching of the resource is enabled or disabled\n}"}
{"index": 18403, "repo": "opencms-core-15.0", "des": "This class represents the result of a \"return link\" lookup, which is what happens if the user clicks the \"go to last page\" button in the sitemap editor.", "code": "Class CmsReturnLinkInfo {\n\tjava.lang.String getLink(); // Returns the return link.\n\tCmsReturnLinkInfo.Status getStatus(); // Returns the link lookup status.\n}"}
{"index": 13577, "repo": "spring-messaging-6.0.11", "des": "Registration class for configuring a SimpleBrokerMessageHandler.", "code": "public class SimpleBrokerRegistration extends AbstractBrokerRegistration {\n\tprotected SimpleBrokerMessageHandler getMessageHandler(SubscribableChannel brokerChannel);\n\tSimpleBrokerRegistration setHeartbeatValue(long[] heartbeat); // Configure the value for the heartbeat settings.\n\tvoid setSelectorHeaderName(String selectorHeaderName); // Configure the name of a header that a subscription message can have for the purpose of filtering messages matched to the subscription.\n\tSimpleBrokerRegistration setTaskScheduler(org.springframework.scheduling.TaskScheduler taskScheduler); // Configure the TaskScheduler to use for providing heartbeat support.\n}"}
{"index": 12368, "repo": "spring-integration-mqtt-6.1.2", "des": "Abstract class for MQTT Message-Driven Channel Adapters.", "code": "@ManagedResource @IntegrationManagedResource public abstract class AbstractMqttMessageDrivenChannelAdapter<T,C> extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, ClientManager.ConnectCallback {\n\tvoid addTopic(String... topic); // Add a topic (or topics) to the subscribed list (qos=1).\n\tvoid addTopic(String topic, int qos); // Add a topic to the subscribed list.\n\tvoid addTopics(String[] topic, int[] qos); // Add topics to the subscribed list.\n\tvoid destroy();\n\tprotected org.springframework.context.ApplicationEventPublisher getApplicationEventPublisher();\n\tprotected String getClientId();\n\tprotected ClientManager<T,C> getClientManager();\n\tprotected long getCompletionTimeout();\n\tString getComponentType();\n\tprotected MqttMessageConverter getConverter();\n\tprotected long getDisconnectCompletionTimeout();\n\tint[] getQos();\n\tString[] getTopic();\n\tprotected String getUrl();\n\tprotected boolean isManualAcks();\n\tprotected void onInit();\n\tvoid removeTopic(String... topic); // Remove a topic (or topics) from the subscribed list.\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n\tvoid setCompletionTimeout(long completionTimeout); // Set the completion timeout for operations.\n\tvoid setConverter(MqttMessageConverter converter);\n\tvoid setDisconnectCompletionTimeout(long completionTimeout); // Set the completion timeout when disconnecting.\n\tvoid setManualAcks(boolean manualAcks); // Set the acknowledgment mode to manual.\n\tvoid setQos(int... qos); // Set the QoS for each topic; a single value will apply to all topics otherwise the correct number of qos values must be provided.\n}"}
{"index": 6501, "repo": "exoplayer-core-2.9.6", "des": "Thrown when a non-recoverable playback failure occurs.", "code": "Class ExoPlaybackException {\n\tstatic ExoPlaybackException createForRenderer(java.lang.Exception cause, int rendererIndex); // Creates an instance of type TYPE_RENDERER.\n\tstatic ExoPlaybackException createForSource(java.io.IOException cause); // Creates an instance of type TYPE_SOURCE.\n\tjava.lang.Exception getRendererException(); // Retrieves the underlying error when type is TYPE_RENDERER.\n\tjava.io.IOException getSourceException(); // Retrieves the underlying error when type is TYPE_SOURCE.\n\tjava.lang.RuntimeException getUnexpectedException(); // Retrieves the underlying error when type is TYPE_UNEXPECTED.\n}"}
{"index": 6497, "repo": "exoplayer-core-2.9.6", "des": "Generates a SurfaceTexture using EGL/GLES functions.", "code": "Class EGLSurfaceTexture {\n\tandroid.graphics.SurfaceTexture getSurfaceTexture(); // Returns the wrapped SurfaceTexture.\n\tvoid init(int secureMode); // Initializes required EGL parameters and creates the SurfaceTexture.\n\tvoid onFrameAvailable(android.graphics.SurfaceTexture surfaceTexture);\n\tvoid release(); // Releases all allocated resources.\n\tvoid run();\n}"}
{"index": 8825, "repo": "hbase-server-3.0.0-alpha-4", "des": "Abstract implementation for SpaceViolationPolicyEnforcement.", "code": "Class AbstractViolationPolicyEnforcement {\n\tboolean areCompactionsDisabled(); // Returns whether or not compactions on this table should be disabled for this policy.\n\tSpaceQuotaSnapshot getQuotaSnapshot(); // Returns the SpaceQuotaSnapshot this was initialized with.\n\tRegionServerServices getRegionServerServices();\n\tTableName getTableName();\n\tvoid initialize(RegionServerServices rss, TableName tableName, SpaceQuotaSnapshot snapshot); // Initializes this policy instance.\n\tvoid setQuotaSnapshot(SpaceQuotaSnapshot snapshot);\n\tvoid setRegionServerServices(RegionServerServices rss);\n\tvoid setTableName(TableName tableName);\n}"}
{"index": 10566, "repo": "groovy-all-4.0.13", "des": "This is an AST Node that provides some sort of looping mechanism.", "code": "public interface LoopingStatement {\n\tStatement getLoopBlock(); // Gets the loop block.\n\tvoid setLoopBlock(Statement loopBlock); // Sets the loop block.\n}"}
{"index": 7643, "repo": "cassandra-all-4.1.2", "des": "Primary Cassandra authorization interface.", "code": "Interface IAuthorizer {\n\tjava.util.Set<Permission> authorize(AuthenticatedUser user, IResource resource); // Returns a set of permissions of a user on a resource.\n\tjava.util.Set<Permission> grant(AuthenticatedUser performer, java.util.Set<Permission> permissions, IResource resource, RoleResource grantee); // Grants a set of permissions on a resource to a role.\n\tjava.util.Set<PermissionDetails> list(AuthenticatedUser performer, java.util.Set<Permission> permissions, IResource resource, RoleResource grantee); // Returns a list of permissions on a resource granted to a role.\n\tjava.util.Set<? extends IResource> protectedResources(); // Set of resources that should be made inaccessible to users and only accessible internally.\n\tdefault boolean requireAuthorization(); // Whether or not the authorizer will attempt authorization.\n\tjava.util.Set<Permission> revoke(AuthenticatedUser performer, java.util.Set<Permission> permissions, IResource resource, RoleResource revokee); // Revokes a set of permissions on a resource from a user.\n\tvoid revokeAllFrom(RoleResource revokee); // Called before deleting a role with DROP ROLE statement (or the alias provided for compatibility, DROP USER) so that a new role with the same name wouldn't inherit permissions of the deleted one in the future.\n\tvoid revokeAllOn(IResource droppedResource); // This method is called after a resource is removed (i.e.\n\tvoid setup(); // Setup is called once upon system startup to initialize the IAuthorizer.\n\tvoid validateConfiguration(); // Validates configuration of IAuthorizer implementation (if configurable).\n}"}
{"index": 12108, "repo": "jena-core-4.9.0", "des": "Tests the single argument to make sure it is blank node.", "code": "public class IsBNode extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 15972, "repo": "wicket-util-10.0.0-M1", "des": "Holds a \"delta\" difference between to revisions of a text.", "code": "public abstract class Delta extends ToString {\n\tabstract void accept(RevisionVisitor visitor); // Accepts a visitor.\n\tabstract void applyTo(List<Object> target); // Applies this delta as a patch to the given text.\n\tChunk getOriginal(); // Accessor method to return the chunk representing the original sequence of items\n\tChunk getRevised(); // Accessor method to return the chunk representing the updated sequence of items.\n\tprotected void init(Chunk orig, Chunk rev); // Initializes the delta with the given chunks from the original and revised texts.\n\tstatic Delta newDelta(Chunk orig, Chunk rev); // Returns a Delta that corresponds to the given chunks in the original and revised text respectively.\n\tfinal void patch(List<Object> target); // Applies this delta as a patch to the given text.\n\tString toRCSString(String EOL); // Converts this delta into its RCS style string representation.\n\tabstract void toRCSString(StringBuilder s, String EOL); // Converts this delta into its RCS style string representation.\n\tvoid toString(StringBuilder s); // Converts this delta into its Unix diff style string representation.\n\tabstract void verify(List<Object> target); // Verifies that this delta can be used to patch the given text.\n}"}
{"index": 12798, "repo": "spring-data-mongodb-4.1.2", "des": "Mongo-specific ParameterAccessor exposing a maximum distance parameter.", "code": "public interface MongoParameterAccessor extends ParameterAccessor {\n\tCollation getCollation(); // Returns the Collation to be used for the query.\n\tRange<Distance> getDistanceRange(); // Returns a Distance to be applied to Mongo geo queries.\n\tTextCriteria getFullText(); // Returns the TextCriteria to be used for full text query.\n\tPoint getGeoNearLocation(); // Returns the Point to use for a geo-near query.\n\tUpdateDefinition getUpdate(); // Returns the Update to be used for an update execution.\n\tObject[] getValues(); // Returns the raw parameter values of the underlying query method.\n}"}
{"index": 1941, "repo": "lucene-analyzers-kuromoji-8.11.2", "des": "Utility class for english translations of morphological data, used only for debugging.", "code": "Class ToStringUtil {\n\tstatic String getInflectedFormTranslation(String s); // Get the english form of inflected form\n\tstatic String getInflectionTypeTranslation(String s); // Get the english form of inflection type\n\tstatic String getPOSTranslation(String s); // Get the english form of a POS tag\n\tstatic void getRomanization(Appendable builder, CharSequence s); // Romanize katakana with modified hepburn\n\tstatic String getRomanization(String s); // Romanize katakana with modified hepburn\n}"}
{"index": 14511, "repo": "spring-security-web-6.1.2", "des": "A CSRF token that is used to protect against CSRF attacks.", "code": "public final class DefaultCsrfToken extends Object implements CsrfToken {\n\tboolean equals(Object obj);\n\tString getHeaderName(); // Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getParameterName(); // Gets the HTTP parameter name that should contain the token.\n\tString getToken(); // Gets the token value.\n}"}
{"index": 5319, "repo": "druid-processing-26.0.0", "des": "JSON parser class that uses the JsonPath library to access fields via path expressions.", "code": "Class JSONPathParser {\n\tList<String> getFieldNames(); // Returns the fieldNames that we expect to see in parsed Maps, if known, or null otherwise.\n\tMap<String,Object> parseToMap(String input); // Parse a String into a Map.\n\tvoid setFieldNames(Iterable<String> fieldNames); // Set the fieldNames that you expect to see in parsed Maps.\n}"}
{"index": 17207, "repo": "spring-integration-amqp-6.1.2", "des": "The AbstractSubscribableAmqpChannel implementation for one-to-one subscription over AMQP queue.", "code": "public class PointToPointSubscribableAmqpChannel extends AbstractAmqpChannel {\n\tprotected org.springframework.integration.dispatcher.AbstractDispatcher createDispatcher();\n\tvoid destroy();\n\tprotected void doDeclares();\n\tint getPhase();\n\tprotected String getRoutingKey(); // Subclasses may override this method to return a routing key.\n\tboolean isAutoStartup();\n\tboolean isRunning();\n\tprotected String obtainQueueName(String channelName);\n\tvoid onInit();\n\tvoid setMaxSubscribers(int maxSubscribers); // Specify the maximum number of subscribers supported by the channel's dispatcher (if it is an AbstractDispatcher).\n\tvoid setQueueName(String queueName); // Provide a Queue name to be used.\n\tvoid start();\n\tvoid stop();\n\tvoid stop(Runnable callback);\n\tboolean subscribe(org.springframework.messaging.MessageHandler handler);\n\tboolean unsubscribe(org.springframework.messaging.MessageHandler handler);\n}"}
{"index": 546, "repo": "ignite-core-2.15.0", "des": "Provides possibility to integrate cache transactions with JTA.", "code": "Class CacheJtaManagerAdapter {\n\tabstract void checkJta(); // Checks if cache is working in JTA transaction and enlist cache as XAResource if necessary.\n\tabstract void registerCache(CacheConfiguration<?,?> cfg);\n\tabstract @Nullable Object tmLookup(); // Gets transaction manager finder.\n}"}
{"index": 15929, "repo": "spring-rabbit-3.0.6", "des": "A MessageListener adapter that invokes a configurable HandlerAdapter.", "code": "public class MessagingMessageListenerAdapter extends AbstractAdaptableMessageListener {\n\tprotected void asyncFailure(org.springframework.amqp.core.Message request, com.rabbitmq.client.Channel channel, Throwable t, Object source);\n\tprotected org.springframework.amqp.core.Message buildMessage(com.rabbitmq.client.Channel channel, Object result, Type genericType); // Build a Rabbit message to be sent as response based on the given result object.\n\tprotected HandlerAdapter getHandlerAdapter();\n\tprotected final org.springframework.amqp.support.converter.MessagingMessageConverter getMessagingMessageConverter();\n\tprotected void invokeHandlerAndProcessResult(org.springframework.amqp.core.Message amqpMessage, com.rabbitmq.client.Channel channel, org.springframework.messaging.Message<?> message);\n\tboolean isAsyncReplies();\n\tvoid onMessage(org.springframework.amqp.core.Message amqpMessage, com.rabbitmq.client.Channel channel); // Callback for processing a received Rabbit message.\n\tvoid setHandlerAdapter(HandlerAdapter handlerAdapter); // Set the HandlerAdapter to use to invoke the method processing an incoming Message.\n\tvoid setHeaderMapper(org.springframework.amqp.support.AmqpHeaderMapper headerMapper); // Set the AmqpHeaderMapper implementation to use to map the standard AMQP headers.\n\tvoid setMessageConverter(org.springframework.amqp.support.converter.MessageConverter messageConverter); // Set the converter that will convert incoming Rabbit messages to listener method arguments, and objects returned from listener methods back to Rabbit messages.\n\tprotected org.springframework.messaging.Message<?> toMessagingMessage(org.springframework.amqp.core.Message amqpMessage);\n}"}
{"index": 15358, "repo": "spring-boot-3.1.1", "des": "Available session tracking modes (mirrors SessionTrackingMode.", "code": "public static enum Session.SessionTrackingMode extends Enum<Session.SessionTrackingMode> {\n\tstatic Session.SessionTrackingMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Session.SessionTrackingMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 678, "repo": "ignite-core-2.15.0", "des": "Eviction policy based on First In First Out (FIFO) algorithm and supports batch eviction.", "code": "Class FifoEvictionPolicy<K,V> {\n\tint getCurrentSize();\n\tObject getMBean();\n\tCollection<EvictableEntry<K,V>> queue(); // Gets read-only view on internal FIFO queue in proper order.\n\tprotected boolean removeMeta(Object meta);\n\tFifoEvictionPolicy<K,V> setBatchSize(int batchSize); // Sets batch size.\n\tFifoEvictionPolicy<K,V> setMaxMemorySize(long maxMemSize); // Sets maximum allowed cache size in bytes.\n\tFifoEvictionPolicy<K,V> setMaxSize(int max); // Sets maximum allowed size of cache before entry will start getting evicted.\n\tprotected int shrink0(); // Tries to remove one item from queue.\n\tprotected boolean touch(EvictableEntry<K,V> entry);\n}"}
{"index": 5119, "repo": "druid-processing-26.0.0", "des": "Base class for family of ApplyFunction which aggregate a scalar or array value given one or more array input Expr arguments and an array or scalar \"accumulator\" argument with an initial value.", "code": "Class ApplyFunction.BaseFoldFunction {\n\tExpressionType getOutputType(Expr.InputBindingInspector inspector, org.apache.druid.math.expr.LambdaExpr expr, List<Expr> args); // Compute the output type of this function for a given lambda and the argument expressions which will be applied as its inputs.\n\tboolean hasArrayOutput(org.apache.druid.math.expr.LambdaExpr lambdaExpr); // Returns true if apply function produces an array output.\n}"}
{"index": 5421, "repo": "druid-processing-26.0.0", "des": "In Druid, ingested data are primarily partitioned based on time range (@link GranularitySpec#getSegmentGranularity), and then secondly partitioned based on the given PartitionsSpec.", "code": "Enum SecondaryPartitionType {\n\tstatic SecondaryPartitionType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SecondaryPartitionType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5013, "repo": "commons-collections-3.2.2", "des": "Adapter to make an Iterator instance appear to be an Enumeration instance.", "code": "Class IteratorEnumeration {\n\tIterator getIterator(); // Returns the underlying iterator.\n\tboolean hasMoreElements(); // Returns true if the underlying iterator has more elements.\n\tObject nextElement(); // Returns the next element from the underlying iterator.\n\tvoid setIterator(Iterator iterator); // Sets the underlying iterator.\n}"}
{"index": 4409, "repo": "beam-sdks-java-core-2.49.0", "des": "A service interface for defining one-time initialization of the JVM during pipeline execution.", "code": "Interface JvmInitializer {\n\tdefault void beforeProcessing(PipelineOptions options); // Implement beforeProcessing to run some custom initialization after basic services such as logging, but before data processing begins.\n\tdefault void onStartup(); // Implement onStartup to run some custom initialization immediately after the JVM is launched for pipeline execution.\n}"}
{"index": 18138, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "The base class for identifier generators that use a UUID algorithm.", "code": "Class AbstractUUIDGenerator {\n\tprotected short getCount(); // Unique in a millisecond for this JVM instance (unless there are > Short.MAX_VALUE instances created in a millisecond)\n\tprotected short getHiTime(); // Unique down to millisecond\n\tprotected int getIP(); // Unique in a local network\n\tprotected int getJVM(); // Unique across JVMs on this machine (unless they load this class in the same quarter second - very unlikely)\n\tprotected int getLoTime();\n}"}
{"index": 11705, "repo": "spring-data-neo4j-7.1.2", "des": "Base class for reactive SDN configuration using JavaConfig.", "code": "@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractReactiveNeo4jConfig extends Object {\n\tNeo4jBookmarkManager bookmarkManager();\n\torg.neo4j.cypherdsl.core.renderer.Configuration cypherDslConfiguration();\n\tabstract org.neo4j.driver.Driver driver(); // The driver to be used for interacting with Neo4j.\n\tprotected final Set<Class<?>> getInitialEntitySet(); // Scans the mapping base package for classes annotated with Node.\n\tprotected Collection<String> getMappingBasePackages(); // Returns the base packages to scan for Neo4j mapped entities at startup.\n\tReactiveNeo4jClient neo4jClient(org.neo4j.driver.Driver driver, ReactiveDatabaseSelectionProvider databaseSelectionProvider); // The driver used here should be the driver resulting from driver(), which is the default.\n\tNeo4jConversions neo4jConversions();\n\tNeo4jMappingContext neo4jMappingContext(Neo4jConversions neo4JConversions); // Creates a Neo4jMappingContext equipped with entity classes scanned from the mapping base package.\n\tReactiveNeo4jTemplate neo4jTemplate(ReactiveNeo4jClient neo4jClient, Neo4jMappingContext mappingContext);\n\tprotected ReactiveDatabaseSelectionProvider reactiveDatabaseSelectionProvider(); // Configures the database name provider.\n\tReactiveTransactionManager reactiveTransactionManager(org.neo4j.driver.Driver driver, ReactiveDatabaseSelectionProvider databaseSelectionProvider); // Provides a PlatformTransactionManager for Neo4j based on the driver resulting from driver().\n\tprotected final Set<Class<?>> scanForEntities(String basePackage); // Deprecated. since 6.0.2 Use Neo4jEntityScanner instead.\n}"}
{"index": 3921, "repo": "hudi-client-0.6.0", "des": "Hoodie Index implementation backed by HBase.", "code": "Class HBaseIndex<T extends HoodieRecordPayload> {\n\tboolean canIndexLogFiles(); // Mapping is available in HBase already.\n\tvoid close(); // Ensure that any resources used for indexing are released here.\n\tHBaseIndexQPSResourceAllocator createQPSResourceAllocator(HoodieWriteConfig config);\n\torg.apache.spark.api.java.JavaPairRDD<HoodieKey,Option<Pair<String,String>>> fetchRecordLocation(org.apache.spark.api.java.JavaRDD<HoodieKey> hoodieKeys, org.apache.spark.api.java.JavaSparkContext jsc, HoodieTable<T> hoodieTable); // Checks if the given [Keys] exists in the hoodie table and returns [Key, Option[partitionPath, fileID]] If the optional is empty, then the key is not found.\n\tscala.Tuple2<Long,Integer> getHBasePutAccessParallelism(org.apache.spark.api.java.JavaRDD<WriteStatus> writeStatusRDD);\n\tboolean isGlobal(); // Only looks up by recordKey.\n\tboolean isImplicitWithStorage(); // Index needs to be explicitly updated after storage write.\n\tboolean rollbackCommit(String instantTime); // Rollback the efffects of the commit made at instantTime.\n\tvoid setHbaseConnection(org.apache.hadoop.hbase.client.Connection hbaseConnection);\n\torg.apache.spark.api.java.JavaRDD<HoodieRecord<T>> tagLocation(org.apache.spark.api.java.JavaRDD<HoodieRecord<T>> recordRDD, org.apache.spark.api.java.JavaSparkContext jsc, HoodieTable<T> hoodieTable); // Looks up the index and tags each incoming record with a location of a file that contains the row (if it is actually present).\n\torg.apache.spark.api.java.JavaRDD<WriteStatus> updateLocation(org.apache.spark.api.java.JavaRDD<WriteStatus> writeStatusRDD, org.apache.spark.api.java.JavaSparkContext jsc, HoodieTable<T> hoodieTable); // Extracts the location of written records, and updates the index.\n}"}
{"index": 7258, "repo": "calcite-core-1.34.0", "des": "SqlOverlapsOperator represents the SQL:1999 standard OVERLAPS function.", "code": "Class SqlOverlapsOperator {\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks that the operand values in a SqlCall to this operator are valid.\n\tString getAllowedSignatures(String opName); // Returns a string describing the expected operand types of a call, e.g.\n\tSqlOperandCountRange getOperandCountRange(); // Returns a constraint on the number of operands expected by this operator.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n}"}
{"index": 5299, "repo": "druid-processing-26.0.0", "des": "This class is meant to represent a simple wrapper around an immutable bitmap class.", "code": "Interface ImmutableBitmap {\n\tdefault org.roaringbitmap.BatchIterator batchIterator();\n\tboolean get(int value); // Returns true if the bit at position value is set\n\tImmutableBitmap intersection(ImmutableBitmap otherBitmap); // Compute the bitwise-and of this bitmap with another bitmap.\n\tboolean isEmpty();\n\torg.roaringbitmap.IntIterator iterator();\n\tdefault org.roaringbitmap.PeekableIntIterator peekableIterator();\n\tint size();\n\tbyte[] toBytes();\n}"}
{"index": 16728, "repo": "spring-jms-6.0.11", "des": "ConnectionFactory implementation that delegates all calls to a given target ConnectionFactory, adapting specific create(Queue/Topic)Connection calls to the target ConnectionFactory if necessary (e.g.", "code": "public class DelegatingConnectionFactory extends Object implements SmartConnectionFactory, QueueConnectionFactory, TopicConnectionFactory, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tConnection createConnection();\n\tConnection createConnection(String username, String password);\n\tJMSContext createContext();\n\tJMSContext createContext(int sessionMode);\n\tJMSContext createContext(String userName, String password);\n\tJMSContext createContext(String userName, String password, int sessionMode);\n\tQueueConnection createQueueConnection();\n\tQueueConnection createQueueConnection(String username, String password);\n\tTopicConnection createTopicConnection();\n\tTopicConnection createTopicConnection(String username, String password);\n\tConnectionFactory getTargetConnectionFactory(); // Return the target ConnectionFactory that this ConnectionFactory delegates to.\n\tvoid setShouldStopConnections(boolean shouldStopConnections); // Indicate whether Connections obtained from the target factory are supposed to be stopped before closed (\"true\") or simply closed (\"false\").\n\tvoid setTargetConnectionFactory(ConnectionFactory targetConnectionFactory); // Set the target ConnectionFactory that this ConnectionFactory should delegate to.\n\tboolean shouldStop(Connection con); // Should we stop the Connection, obtained from this ConnectionFactory?\n}"}
{"index": 1183, "repo": "ignite-core-2.15.0", "des": "The result of execution snapshot partitions verify task which besides calculating partition hashes of IdleVerifyResultV2 also contains the snapshot metadata distribution across the cluster.", "code": "Class SnapshotPartitionsVerifyTaskResult {\n\tMap<ClusterNode,Exception> exceptions();\n\tIdleVerifyResultV2 idleVerifyResult();\n\tMap<ClusterNode,List<SnapshotMetadata>> metas();\n\tvoid print(Consumer<String> printer); // Print formatted result to the given printer.\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 10980, "repo": "spring-data-redis-3.1.2", "des": "Redis specific implementation of KeyValueTemplate.", "code": "public class RedisKeyValueTemplate extends org.springframework.data.keyvalue.core.KeyValueTemplate {\n\tprotected void doPartialUpdate(PartialUpdate<?> update);\n\t<T> List<T> find(RedisCallback<?> callback, Class<T> type); // Retrieve entities by resolving their ids and converting them into required type.\n\tRedisConverter getConverter(); // Obtain the underlying redis specific EntityConverter.\n\tRedisMappingContext getMappingContext();\n\t<T> T insert(Object id, T objectToInsert);\n\t<T> T update(Object id, T objectToUpdate);\n\t<T> T update(T objectToUpdate);\n}"}
{"index": 15359, "repo": "spring-boot-3.1.1", "des": "Configuration for shutting down a WebServer.", "code": "public enum Shutdown extends Enum<Shutdown> {\n\tstatic Shutdown valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Shutdown[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14017, "repo": "spring-retry-2.0.2", "des": "Simplified facade to make it easier and simpler to build a StatefulRetryOperationsInterceptor or (stateless) RetryOperationsInterceptor by providing a fluent interface to defining the behavior on error.", "code": "public abstract class RetryInterceptorBuilder<T extends org.aopalliance.intercept.MethodInterceptor> extends Object {\n\tRetryInterceptorBuilder<T> backOffOptions(long initialInterval, double multiplier, long maxInterval); // Apply the backoff options.\n\tRetryInterceptorBuilder<T> backOffPolicy(BackOffPolicy policy); // Apply the back off policy.\n\tabstract T build();\n\tstatic RetryInterceptorBuilder.CircuitBreakerInterceptorBuilder circuitBreaker(); // Create a builder for a circuit breaker retry interceptor.\n\tRetryInterceptorBuilder<T> label(String label);\n\tRetryInterceptorBuilder<T> maxAttempts(int maxAttempts); // Apply the max attempts - a SimpleRetryPolicy will be used.\n\tRetryInterceptorBuilder<T> recoverer(MethodInvocationRecoverer<?> recoverer); // Apply a MethodInvocationRecoverer for the Retry interceptor.\n\tRetryInterceptorBuilder<T> retryOperations(RetryOperations retryOperations); // Apply the retry operations - once this is set, other properties can no longer be set; can't be set if other properties have been applied.\n\tRetryInterceptorBuilder<T> retryPolicy(RetryPolicy policy); // Apply the retry policy - cannot be used if a custom retry template has been provided, or the max attempts or back off options or policy have been applied.\n\tstatic RetryInterceptorBuilder.StatefulRetryInterceptorBuilder stateful(); // Create a builder for a stateful retry interceptor.\n\tstatic RetryInterceptorBuilder.StatelessRetryInterceptorBuilder stateless(); // Create a builder for a stateless retry interceptor.\n}"}
{"index": 12236, "repo": "jena-core-4.9.0", "des": "The interface through which a reasoner (inference engine) can be instantiated.", "code": "public interface ReasonerFactory {\n\tReasoner create(Resource configuration); // Constructor method that builds an instance of the associated Reasoner\n\tModel getCapabilities(); // Return a description of the capabilities of this reasoner encoded in RDF.\n\tString getURI(); // Return the URI labelling this type of reasoner\n}"}
{"index": 7437, "repo": "mahout-math-0.13.0", "des": "Open hash map from Object keys to short values.", "code": "Class OpenObjectShortHashMap<T> {\n\tshort adjustOrPutValue(T key, short newValue, short incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(T key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(short value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ObjectProcedure<T> procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ObjectShortProcedure<T> procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tshort get(T key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(T key);\n\tprotected int indexOfKey(T key);\n\tprotected int indexOfValue(short value);\n\tvoid keys(List<T> list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ObjectShortProcedure<T> condition, List<T> keyList, ShortArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(T key, short value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(T key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ShortArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 6850, "repo": "calcite-core-1.34.0", "des": "Implementation of Join in enumerable calling convention that allows conditions that are not just = (equals).", "code": "Class EnumerableNestedLoopJoin {\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tEnumerableNestedLoopJoin copy(RelTraitSet traitSet, RexNode condition, RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone); // Creates a copy of this join, overriding condition, system fields and inputs.\n\tstatic EnumerableNestedLoopJoin create(RelNode left, RelNode right, RexNode condition, Set<CorrelationId> variablesSet, JoinRelType joinType); // Creates an EnumerableNestedLoopJoin.\n\t@Nullable Pair<RelTraitSet,List<RelTraitSet>> deriveTraits(RelTraitSet childTraits, int childId); // Derive traitset from child node, returns a pair of traits after traits derivation.\n\tDeriveMode getDeriveMode(); // Returns mode of derivation.\n\tEnumerableRel.Result implement(EnumerableRelImplementor implementor, EnumerableRel.Prefer pref); // Creates a plan for this expression according to a calling convention.\n\t@Nullable Pair<RelTraitSet,List<RelTraitSet>> passThroughTraits(RelTraitSet required); // Pass required traitset from parent node to child nodes, returns a pair of traits after traits is passed down.\n}"}
{"index": 1946, "repo": "nifi-framework-api-1.22.0", "des": "Provides support for configuring AccessPolicies.", "code": "Interface ConfigurableAccessPolicyProvider {\n\tAccessPolicy addAccessPolicy(AccessPolicy accessPolicy); // Adds the given policy ensuring that multiple policies can not be added for the same resource and action.\n\tvoid checkInheritability(String proposedFingerprint); // When the fingerprints are not equal, this method will check if the proposed fingerprint is inheritable.\n\tAccessPolicy deleteAccessPolicy(AccessPolicy accessPolicy); // Deletes the given policy.\n\tvoid forciblyInheritFingerprint(String fingerprint); // Parses the fingerprint and determines whether or not the fingerprint can be inherited in the same manner as inheritFingerprint(String).\n\tString getFingerprint(); // Returns a fingerprint representing the authorizations managed by this authorizer.\n\tvoid inheritFingerprint(String fingerprint); // Parses the fingerprint and adds any policies to the current AccessPolicyProvider.\n\tdefault boolean isConfigurable(AccessPolicy accessPolicy); // Determines whether the specified access policy is configurable.\n\tAccessPolicy updateAccessPolicy(AccessPolicy accessPolicy); // The policy represented by the provided instance will be updated based on the provided instance.\n}"}
{"index": 7168, "repo": "calcite-core-1.34.0", "des": "Default implementation of SqlBasicVisitor.", "code": "Class SqlBasicVisitor.ArgHandlerImpl<R> {\n\tstatic <R> SqlBasicVisitor.ArgHandler<R> instance();\n\tR result(); // Returns the result of visiting all children of a call to an operator, then the call itself.\n\tR visitChild(SqlVisitor<R> visitor, SqlNode expr, int i, @Nullable SqlNode operand); // Visits a particular operand of a call, using a given visitor.\n}"}
{"index": 3949, "repo": "lucene-analyzers-icu-8.11.2", "des": "Default ICUTokenizerConfig that is generally applicable to many languages.", "code": "Class DefaultICUTokenizerConfig {\n\tboolean combineCJ(); // true if Han, Hiragana, and Katakana scripts should all be returned as Japanese\n\tcom.ibm.icu.text.RuleBasedBreakIterator getBreakIterator(int script); // Return a breakiterator capable of processing a given script.\n\tString getType(int script, int ruleStatus); // Return a token type value for a given script and BreakIterator rule status.\n}"}
{"index": 13010, "repo": "spring-aop-6.0.11", "des": "Base class for monitoring interceptors, such as performance monitors.", "code": "public abstract class AbstractMonitoringInterceptor extends AbstractTraceInterceptor {\n\tprotected String createInvocationTraceName(MethodInvocation invocation); // Create a String name for the given MethodInvocation that can be used for trace/logging purposes.\n\tprotected String getPrefix(); // Return the text that will get appended to the trace data.\n\tprotected String getSuffix(); // Return the text that will get prepended to the trace data.\n\tvoid setLogTargetClassInvocation(boolean logTargetClassInvocation); // Set whether to log the invocation on the target class, if applicable (i.e.\n\tvoid setPrefix(String prefix); // Set the text that will get appended to the trace data.\n\tvoid setSuffix(String suffix); // Set the text that will get prepended to the trace data.\n}"}
{"index": 6352, "repo": "curator-framework-5.5.0", "des": "Collection of all schemas for a Curator instance.", "code": "Class SchemaSet {\n\tstatic SchemaSet getDefaultSchemaSet(); // Return the default (empty) schema set\n\tstatic String getNamedPath(CuratorFramework client, String name); // Utility to return a ZNode path for the given name\n\tSchema getNamedSchema(String name); // Return the schema with the given key/name\n\tSchema getSchema(String path); // Find the first matching schema for the path and return it\n\tCollection<Schema> getSchemas(); // Return the schemas\n\tString toDocumentation(); // Build a user displayable documentation string for the schemas in this set\n}"}
{"index": 8973, "repo": "hbase-server-3.0.0-alpha-4", "des": "Leases There are several server classes in HBase that need to track external clients that occasionally send heartbeats.", "code": "Class LeaseManager {\n\tvoid addLease(org.apache.hadoop.hbase.regionserver.LeaseManager.Lease lease); // Inserts lease.\n\tvoid cancelLease(String leaseName); // Client explicitly cancels a lease.\n\tvoid close(); // Shut down this Leases instance.\n\tvoid closeAfterLeasesExpire(); // Shuts down this lease instance when all outstanding leases expire.\n\torg.apache.hadoop.hbase.regionserver.LeaseManager.Lease createLease(String leaseName, int leaseTimeoutPeriod, LeaseListener listener); // Create a lease and insert it to the map of leases.\n\tvoid renewLease(String leaseName); // Renew a lease\n\tvoid run();\n}"}
{"index": 3216, "repo": "hbase-common-3.0.0-alpha-4", "des": "ClassLoader used to load classes for Coprocessor instances.", "code": "Class CoprocessorClassLoader {\n\tstatic void clearCache();\n\tstatic Collection<? extends ClassLoader> getAllCached();\n\tstatic CoprocessorClassLoader getClassLoader(org.apache.hadoop.fs.Path path, ClassLoader parent, String pathPrefix, org.apache.hadoop.conf.Configuration conf); // Get a CoprocessorClassLoader for a coprocessor jar path from cache.\n\tstatic CoprocessorClassLoader getIfCached(org.apache.hadoop.fs.Path path);\n\tURL getResource(String name);\n\tprotected boolean isClassExempt(String name, String[] includedClassPrefixes); // Determines whether the given class should be exempt from being loaded by this ClassLoader.\n\tClass<?> loadClass(String name);\n\tClass<?> loadClass(String name, String[] includedClassPrefixes);\n\tprotected boolean loadResourceUsingParentFirst(String name); // Determines whether we should attempt to load the given resource using the parent first before attempting to load the resource using this ClassLoader.\n}"}
{"index": 11635, "repo": "spring-websocket-6.0.11", "des": "A WebSocketHandler that initializes and destroys a WebSocketHandler instance for each WebSocket connection and delegates all other methods to it.", "code": "public class PerConnectionWebSocketHandler extends Object implements WebSocketHandler, org.springframework.beans.factory.BeanFactoryAware {\n\tvoid afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus); // Invoked after the WebSocket connection has been closed by either side, or after a transport error has occurred.\n\tvoid afterConnectionEstablished(WebSocketSession session); // Invoked after WebSocket negotiation has succeeded and the WebSocket connection is opened and ready for use.\n\tvoid handleMessage(WebSocketSession session, WebSocketMessage<?> message); // Invoked when a new WebSocket message arrives.\n\tvoid handleTransportError(WebSocketSession session, Throwable exception); // Handle an error from the underlying WebSocket message transport.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tboolean supportsPartialMessages(); // Whether the WebSocketHandler handles partial messages.\n}"}
{"index": 10104, "repo": "spring-hateoas-2.1.2", "des": "SPI for media type implementations to create a specific AffordanceModel for a ConfiguredAffordance.", "code": "public interface AffordanceModelFactory {\n\tAffordanceModel getAffordanceModel(ConfiguredAffordance configured); // Return the AffordanceModel for the given ConfiguredAffordance.\n\tMediaType getMediaType(); // Declare the MediaType this factory supports.\n}"}
{"index": 8840, "repo": "hbase-server-3.0.0-alpha-4", "des": "A Base implementation for ReplicationEndpoints.", "code": "Class BaseReplicationEndpoint {\n\tboolean canReplicateToSameCluster(); // Whether or not, the replication endpoint can replicate to it's source cluster with the same UUID\n\tprotected WALEntryFilter getNamespaceTableCfWALEntryFilter(); // Returns a WALEntryFilter for checking replication per table and CF.\n\tprotected WALEntryFilter getScopeWALEntryFilter(); // Returns a WALEntryFilter for checking the scope.\n\tWALEntryFilter getWALEntryfilter(); // Returns a default set of filters\n\tvoid init(ReplicationEndpoint.Context context); // Initialize the replication endpoint with the given context.\n\tboolean isStarting(); // Returns Return true is this service is STARTING (but not yet RUNNING).\n\tvoid peerConfigUpdated(ReplicationPeerConfig rpc);\n}"}
{"index": 11238, "repo": "wicket-extensions-10.0.0-M1", "des": "Default implementation of IWizardModel, which models a semi-static wizard.", "code": "public class WizardModel extends AbstractWizardModel {\n\tvoid add(IWizardStep step); // Adds the next step to the wizard.\n\tvoid add(IWizardStep step, WizardModel.ICondition condition); // Adds an optional step to the model.\n\tprotected final boolean allStepsComplete(); // Returns true if all the steps in the wizard return true from IWizardStep.isComplete().\n\tprotected final IWizardStep findLastStep(); // Finds the last step in this model.\n\tprotected final IWizardStep findNextVisibleStep(); // Finds the next visible step based on the active step.\n\tfinal IWizardStep getActiveStep(); // Gets the current active step the wizard should display.\n\tList<WizardModel.ICondition> getConditions(); // Gets conditions.\n\tboolean isLastAvailable(); // Checks if the last button should be enabled.\n\tboolean isLastStep(IWizardStep step); // Gets whether the specified step is the last step in the wizard.\n\tboolean isNextAvailable(); // Checks if the next button should be enabled.\n\tboolean isPreviousAvailable(); // Checks if the previous button should be enabled.\n\tvoid last(); // Takes the model to the last step in the wizard.\n\tvoid next(); // Increments the model to the next step.\n\tvoid previous(); // Takes the model to the previous step.This method must only be called if IWizardModel.isPreviousAvailable() returns true.\n\tvoid reset(); // Resets the model, setting it to the first step.\n\tvoid setActiveStep(IWizardStep step); // Sets the active step.\n\tIterator<IWizardStep> stepIterator(); // Returns an iterator over all the steps in the model.\n}"}
{"index": 6853, "repo": "calcite-core-1.34.0", "des": "Subclass of RelImplementor for relational operators of EnumerableConvention calling convention.", "code": "Class EnumerableRelImplementor {\n\tvoid clearCorrelVariable(String name);\n\tSqlConformance getConformance(); // Returns the desired SQL conformance.\n\tRexToLixTranslator.InputGetter getCorrelVariableGetter(String name);\n\torg.apache.calcite.linq4j.tree.ClassDeclaration implementRoot(EnumerableRel rootRel, EnumerableRel.Prefer prefer);\n\tvoid registerCorrelVariable(String name, org.apache.calcite.linq4j.tree.ParameterExpression pe, org.apache.calcite.linq4j.tree.BlockBuilder corrBlock, PhysType physType);\n\tEnumerableRel.Result result(PhysType physType, org.apache.calcite.linq4j.tree.BlockStatement block);\n\t<T> org.apache.calcite.linq4j.tree.Expression stash(T input, Class<? super T> clazz); // Stashes a value for the executor.\n\tEnumerableRel.Result visitChild(EnumerableRel parent, int ordinal, EnumerableRel child, EnumerableRel.Prefer prefer);\n}"}
{"index": 12212, "repo": "jena-core-4.9.0", "des": "Methods for recording namespace prefix mappings and applying and unapplying them to URIs.", "code": "public interface PrefixMapping {\n\tPrefixMapping clearNsPrefixMap(); // Clear this prefix mapping of all mappings\n\tString expandPrefix(String prefixed); // Expand the uri using the prefix mappings if possible.\n\tMap<String,String> getNsPrefixMap(); // Return a copy of the internal mapping from names to URI strings.\n\tString getNsPrefixURI(String prefix); // Get the URI bound to a specific prefix, null if there isn't one.\n\tString getNsURIPrefix(String uri); // Answer the prefix for the given URI, or null if there isn't one.\n\tdefault boolean hasNoMappings(); // Return whether the prefix mapping has any defined prefixes.\n\tPrefixMapping lock(); // Lock the PrefixMapping so that changes can no longer be made to it.\n\tint numPrefixes(); // Return the number of defined prefixes.\n\tString qnameFor(String uri); // Answer a qname with the expansion of the given uri, or null if no such qname can be constructed using the mapping's prefixes.\n\tPrefixMapping removeNsPrefix(String prefix); // Remove any existing maplet with the given prefix name and answer this mapping.\n\tboolean samePrefixMappingAs(PrefixMapping other); // Answer true iff this prefix-mappings are equal, that is, map the same prefixes to the same URIs; same as this.getNsPrefixMap().equals( other.getNsPrefixMap() ) except that it may avoid unnecessary Map creations.\n\tPrefixMapping setNsPrefix(String prefix, String uri); // Specify the prefix name for a URI prefix string.\n\tPrefixMapping setNsPrefixes(Map<String,String> map); // Copies the prefix mapping from other into this.\n\tPrefixMapping setNsPrefixes(PrefixMapping other); // Copies the prefixes from other into this.\n\tString shortForm(String uri); // Compress the URI using the prefix mappings if possible.\n\tPrefixMapping withDefaultMappings(PrefixMapping map); // Update this PrefixMapping with the bindings in map, only adding those (p, u) pairs for which neither p nor u appears in this mapping.\n}"}
{"index": 718, "repo": "ignite-core-2.15.0", "des": "Message sent to check that transactions related to transaction were prepared on remote node.", "code": "Class GridCacheTxRecoveryRequest {\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tIgniteUuid futureId();\n\tIgniteLogger messageLogger(GridCacheSharedContext ctx);\n\tIgniteUuid miniId();\n\tboolean nearTxCheck();\n\tGridCacheVersion nearXidVersion();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean system();\n\tint transactions();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 15425, "repo": "pulsar-client-api-3.0.0", "des": "Standard hashing functions available when choosing the partition to use for a particular message.", "code": "@Public @Stable public enum HashingScheme extends Enum<HashingScheme> {\n\tstatic HashingScheme valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic HashingScheme[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14388, "repo": "wicket-core-10.0.0-M1", "des": "Component used to connect instances of Radio components into a group.", "code": "public class RadioGroup<T> extends FormComponent<T> {\n\tprotected T convertValue(String[] input); // Subclasses should overwrite this if the conversion is not done through the type field and the IConverter.\n\tprotected String getModelValue();\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n}"}
{"index": 15496, "repo": "spring-batch-core-5.0.2", "des": "A builder for transitions within a flow.", "code": "public static class FlowBuilder.TransitionBuilder<Q> extends Object {\n\tFlowBuilder<Q> end(); // Signal the successful end of the flow.\n\tFlowBuilder<Q> end(String status); // Signal the end of the flow with the status provided.\n\tFlowBuilder<Q> fail(); // Signal the end of the flow with an error condition.\n\tFlowBuilder<Q> stop(); // Signal the successful end of the flow.\n\tFlowBuilder<Q> stopAndRestart(Flow flow); // Stop the flow and provide a flow to start with if the flow is restarted.\n\tFlowBuilder<Q> stopAndRestart(JobExecutionDecider decider); // Stop the flow and provide a decider to start with if the flow is restarted.\n\tFlowBuilder<Q> stopAndRestart(Step restart); // Stop the flow and provide a step to start with if the flow is restarted.\n\tFlowBuilder<Q> to(Flow flow); // Specify the next state as a complete flow.\n\tFlowBuilder<Q> to(JobExecutionDecider decider); // Specify the next state as a decision.\n\tFlowBuilder<Q> to(Step step); // Specify the next step.\n}"}
{"index": 18404, "repo": "opencms-core-15.0", "des": "This class represents an alias which does not just map a fixed path to a fixed resource, but instead uses a regular expression substitution to determine the target path.", "code": "Class CmsRewriteAlias {\n\tCmsUUID getId(); // Gets the id of the alias.\n\tCmsAliasMode getMode(); // Gets the alias mode.\n\tjava.lang.String getPatternString(); // Gets the regular expression string.\n\tjava.lang.String getReplacementString(); // Gets the string used to replace the string matching the regex.\n\tjava.lang.String getSiteRoot(); // Gets the root of the site in which this alias is valid.\n}"}
{"index": 9456, "repo": "curator-recipes-5.5.0", "des": "An enumerated type that describes a change.", "code": "Enum CuratorCacheListener.Type {\n\tstatic CuratorCacheListener.Type valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CuratorCacheListener.Type[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9199, "repo": "fontbox-3.0.0-beta1", "des": "This class is based on code from Apache Batik a subproject of Apache XMLGraphics.", "code": "Class GlyfCompositeComp {\n\tshort getArgument1(); // Returns argument 1.\n\tshort getArgument2(); // Returns argument 2.\n\tint getFirstContour(); // Returns the index of the first contour.\n\tint getFirstIndex(); // Returns the first index.\n\tshort getFlags(); // Returns the flags of the glyph.\n\tint getGlyphIndex(); // Returns the index of the first contour.\n\tdouble getScale01(); // Returns the scale-01 value.\n\tdouble getScale10(); // Returns the scale-10 value.\n\tdouble getXScale(); // Returns the x-scaling value.\n\tint getXTranslate(); // Returns the x-translation value.\n\tdouble getYScale(); // Returns the y-scaling value.\n\tint getYTranslate(); // Returns the y-translation value.\n\tint scaleX(int x, int y); // Transforms an x-coordinate of a point for this component.\n\tint scaleY(int x, int y); // Transforms a y-coordinate of a point for this component.\n\tprotected void setFirstContour(int idx); // Sets the index for the first contour.\n\tprotected void setFirstIndex(int idx); // Sets the first index.\n}"}
{"index": 955, "repo": "ignite-core-2.15.0", "des": "Factory of IndexQueryCriterion for IndexQuery.", "code": "Class IndexQueryCriteriaBuilder {\n\tstatic IndexQueryCriterion between(String field, Object lower, Object upper); // Between.\n\tstatic IndexQueryCriterion eq(String field, Object val); // Equal To.\n\tstatic IndexQueryCriterion gt(String field, Object val); // Greater Then.\n\tstatic IndexQueryCriterion gte(String field, Object val); // Greater Then or Equal To.\n\tstatic IndexQueryCriterion in(String field, Collection<?> vals); // In.\n\tstatic IndexQueryCriterion lt(String field, Object val); // Less Then.\n\tstatic IndexQueryCriterion lte(String field, Object val); // Less Then or Equal To.\n}"}
{"index": 8769, "repo": "graal-sdk-1.0.0-rc7", "des": "A pointer to a pointer to a 8-bit C primitive value.", "code": "Interface CCharPointerPointer {\n\tCCharPointerPointer addressOf(int index); // Computes the address of the array element with the specified index, treating the pointer as an array of the C type.\n\tCCharPointerPointer addressOf(SignedWord index); // Computes the address of the array element with the specified index, treating the pointer as an array of the C type.\n\tCCharPointer read(); // Reads the value at the pointer address.\n\tCCharPointer read(int index); // Reads the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tCCharPointer read(SignedWord index); // Reads the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tvoid write(CCharPointer value); // Writes the value at the pointer address.\n\tvoid write(int index, CCharPointer value); // Writes the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tvoid write(SignedWord index, CCharPointer value); // Writes the value of the array element with the specified index, treating the pointer as an array of the C type.\n}"}
{"index": 8468, "repo": "commons-io-2.13.0", "des": "This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.", "code": "Class BOMInputStream {\n\tstatic BOMInputStream.Builder builder(); // Constructs a new BOMInputStream.Builder.\n\tByteOrderMark getBOM(); // Gets the BOM (Byte Order Mark).\n\tString getBOMCharsetName(); // Gets the BOM charset Name - ByteOrderMark.getCharsetName().\n\tboolean hasBOM(); // Tests whether the stream contains one of the specified BOMs.\n\tboolean hasBOM(ByteOrderMark bom); // Tests whether the stream contains the specified BOM.\n\tvoid mark(int readlimit); // Invokes the delegate's mark(int) method.\n\tint read(); // Invokes the delegate's read() method, detecting and optionally skipping BOM.\n\tint read(byte[] buf); // Invokes the delegate's read(byte[]) method, detecting and optionally skipping BOM.\n\tint read(byte[] buf, int off, int len); // Invokes the delegate's read(byte[], int, int) method, detecting and optionally skipping BOM.\n\tvoid reset(); // Invokes the delegate's reset() method.\n\tlong skip(long n); // Invokes the delegate's skip(long) method, detecting and optionally skipping BOM.\n}"}
{"index": 15121, "repo": "spring-data-elasticsearch-5.1.2", "des": "Value class to capture client independent information from a response to an index request.", "code": "public static record AbstractReactiveElasticsearchTemplate.IndexResponseMetaData(String id, String index, long seqNo, long primaryTerm, long version) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString id(); // Returns the value of the id record component.\n\tString index(); // Returns the value of the index record component.\n\tlong primaryTerm(); // Returns the value of the primaryTerm record component.\n\tlong seqNo(); // Returns the value of the seqNo record component.\n\tlong version(); // Returns the value of the version record component.\n}"}
{"index": 9400, "repo": "hadoop-yarn-api-3.3.6", "des": "ReservationListResponse captures the list of reservations that the user has queried.", "code": "Class ReservationListResponse {\n\tabstract List<ReservationAllocationState> getReservationAllocationState(); // Get the list of ReservationAllocationState, that corresponds to a reservation in the scheduler.\n\tstatic ReservationListResponse newInstance(List<ReservationAllocationState> reservationAllocationState);\n\tabstract void setReservationAllocationState(List<ReservationAllocationState> reservationAllocationState); // Set the list of ReservationAllocationState, that correspond to a reservation in the scheduler.\n}"}
{"index": 14183, "repo": "wicket-core-10.0.0-M1", "des": "To be used for the crossOrigin attribute", "code": "public enum CrossOrigin extends Enum<CrossOrigin> {\n\tString getRealName(); // Gets the real name for the cors option\n\tstatic CrossOrigin valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CrossOrigin[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3795, "repo": "hbase-client-3.0.0-alpha-4", "des": "A comparator which compares against a specified byte array, but only compares specific portion of the byte array.", "code": "Class BinaryComponentComparator {\n\tint compareTo(byte[] value);\n\tint compareTo(byte[] value, int offset, int length);\n\tboolean equals(Object other);\n\tstatic BinaryComponentComparator parseFrom(byte[] pbBytes); // Parse a serialized representation of BinaryComponentComparator\n\tbyte[] toByteArray(); // Returns The comparator serialized using pb\n}"}
{"index": 8014, "repo": "commons-compress-1.23.0", "des": "Implements the \"ar\" archive format as an input stream.", "code": "Class ArArchiveInputStream {\n\tvoid close();\n\tArArchiveEntry getNextArEntry(); // Returns the next AR entry in this stream.\n\tArchiveEntry getNextEntry(); // Returns the next Archive Entry in this Stream.\n\tstatic boolean matches(byte[] signature, int length);\n\tint read(byte[] b, int off, int len);\n}"}
{"index": 867, "repo": "ignite-core-2.15.0", "des": "Extension to standard Runnable interface.", "code": "Class GridWorker {\n\tvoid blockingSectionBegin(); // Protects the worker from timeout penalties if subsequent instructions in the calling thread does not update heartbeat timestamp timely, e.g. due to blocking operations, up to the nearest WorkProgressDispatcher.blockingSectionEnd() call.\n\tvoid blockingSectionEnd(); // Closes the protection section previously opened by WorkProgressDispatcher.blockingSectionBegin().\n\tprotected abstract void body(); // The implementation should provide the execution body for this runnable.\n\tvoid cancel(); // Cancels this runnable.\n\tprotected void cleanup(); // Optional method that will be called after runnable is finished.\n\tlong heartbeatTs(); // Last heatbeat timestamp.\n\tString igniteInstanceName(); // Gets name of the Ignite instance this runnable belongs to.\n\tboolean isCancelled(); // Tests whether or not this runnable is cancelled.\n\tboolean isDone(); // Tests whether or not this runnable is finished.\n\tvoid join(); // Joins this runnable.\n\tString name(); // Gets this runnable name.\n\tprotected void onCancel(boolean firstCancelRequest); // Callback on runner cancellation.\n\tprotected void onCancelledBeforeWorkerScheduled(); // Callback on special case, when task is cancelled before is has been scheduled.\n\tprotected void onIdle(); // Can be called from runner() thread to perform idleness handling.\n\tvoid run();\n\t@Nullable Thread runner();\n\tvoid updateHeartbeat(); // Notifying dispatcher that work is in progress and thread didn't freeze.\n}"}
{"index": 14561, "repo": "spring-security-web-6.1.2", "des": "This AuthenticationUserDetailsService implementation creates a UserDetails object based solely on the information contained in the given PreAuthenticatedAuthenticationToken.", "code": "public class PreAuthenticatedGrantedAuthoritiesUserDetailsService extends Object implements org.springframework.security.core.userdetails.AuthenticationUserDetailsService<PreAuthenticatedAuthenticationToken> {\n\tprotected org.springframework.security.core.userdetails.UserDetails createUserDetails(org.springframework.security.core.Authentication token, Collection<? extends org.springframework.security.core.GrantedAuthority> authorities); // Creates the final UserDetails object.\n\tfinal org.springframework.security.core.userdetails.UserDetails loadUserDetails(PreAuthenticatedAuthenticationToken token); // Get a UserDetails object based on the user name contained in the given token, and the GrantedAuthorities as returned by the GrantedAuthoritiesContainer implementation as returned by the token.getDetails() method.\n}"}
{"index": 18038, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the WebServiceConnection interface that uses Java's built-in HttpClient.", "code": "public class JdkHttpClientConnection extends AbstractHttpSenderConnection {\n\tvoid addRequestHeader(String name, String value); // Adds a request header with the given name and value.\n\tprotected InputStream getRawResponseInputStream(); // Returns the raw, possibly compressed input stream to read the response from.\n\tprotected OutputStream getRequestOutputStream(); // Returns the output stream to write the request to.\n\tprotected int getResponseCode(); // Returns the HTTP status code of the response.\n\tprotected long getResponseContentLength(); // Returns the length of the response.\n\tIterator<String> getResponseHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getResponseHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected String getResponseMessage(); // Returns the HTTP status message of the response.\n\tURI getUri(); // Returns the URI for this connection.\n\tprotected void onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n\tprotected void onSendBeforeWrite(WebServiceMessage message); // Called before the given message has been written to the TransportOutputStream.\n}"}
{"index": 12021, "repo": "jena-core-4.9.0", "des": "Implementation of a node representing a complement class description.", "code": "public class ComplementClassImpl extends OntClassImpl implements ComplementClass {\n\tvoid addOperand(Resource cls); // Add a class the operands of this boolean expression.\n\tvoid addOperands(Iterator<? extends Resource> classes); // Add all of the classes from the given iterator to the operands of this boolean expression.\n\tOntClass getOperand(); // Answer the class that the class described by this class description is a complement of.\n\tRDFList getOperands(); // Answer the list of operands for this Boolean class expression.\n\tboolean hasOperand(Resource cls); // Answer true if this Boolean class expression has the given class as an operand.\n\tExtendedIterator<? extends OntClass> listOperands(); // Answer an iterator over all of the classes that are the operands of this Boolean class expression.\n\tProperty operator(); // Answer the property that is used to construct this boolean expression, for example Profile.UNION_OF().\n\tvoid removeOperand(Resource res); // Remove the given resource from the operands of this class expression.\n\tvoid setOperand(Resource cls); // Set the class that the class represented by this class expression is a complement of.\n\tvoid setOperands(RDFList operands); // Assert that the operands for this boolean class expression are the classes in the given list.\n}"}
{"index": 6204, "repo": "jackson-databind-2.15.2", "des": "This concrete sub-class implements Collection or Map property that is indirectly by getting the property value and directly modifying it.", "code": "Class SetterlessProperty {\n\tvoid deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance); // Method called to deserialize appropriate value, given parser (and context), and set it using appropriate mechanism.\n\tObject deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance); // Alternative to SettableBeanProperty.deserializeAndSet(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object) that returns either return value of setter method called (if one is), or null to indicate that no return value is available.\n\tvoid fixAccess(DeserializationConfig config); // Method called to ensure that the mutator has proper access rights to be called, as per configuration.\n\t<A extends Annotation>A getAnnotation(Class<A> acls); // Method for finding annotation associated with this property; meaning annotation associated with one of entities used to access property.\n\tAnnotatedMember getMember(); // Method for accessing primary physical entity that represents the property; annotated field, method or constructor property.\n\tvoid set(Object instance, Object value); // Method called to assign given value to this property, on specified Object.\n\tObject setAndReturn(Object instance, Object value); // Method called to assign given value to this property, on specified Object, and return whatever delegating accessor returned (if anything)\n\tSettableBeanProperty withName(PropertyName newName); // Fluent factory method for constructing and returning a new instance with specified property name.\n\tSettableBeanProperty withNullProvider(NullValueProvider nva);\n\tSettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser); // Fluent factory method for constructing and returning a new instance with specified value deserializer.\n}"}
{"index": 6219, "repo": "jackson-databind-2.15.2", "des": "Base class for deserializers that handle types that are serialized as JSON scalars (non-structured, i.", "code": "Class StdScalarDeserializer<T> {\n\tT deserialize(JsonParser p, DeserializationContext ctxt, T intoValue); // Overridden to simply call deserialize() method that does not take value to update, since scalar values are usually non-mergeable.\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Base implementation that does not assume specific type inclusion mechanism.\n\tAccessPattern getEmptyAccessPattern(); // This method may be called in conjunction with calls to JsonDeserializer.getEmptyValue(DeserializationContext), to check whether it needs to be called just once (static values), or each time empty value is needed.\n\tAccessPattern getNullAccessPattern(); // This method may be called in conjunction with calls to JsonDeserializer.getNullValue(DeserializationContext), to check whether it needs to be called just once (static values), or each time empty value is needed.\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n\tBoolean supportsUpdate(DeserializationConfig config); // By default assumption is that scalar types cannot be updated: many are immutable values (such as primitives and wrappers)\n}"}
{"index": 2852, "repo": "amqp-client-5.18.0", "des": "Public API for abstract AMQP content header objects.", "code": "Interface ContentHeader {\n\tvoid appendPropertyDebugStringTo(StringBuilder buffer); // A debugging utility - enable properties to be appended to a string buffer for use as trace messages.\n\tint getClassId(); // Retrieve the class ID (see the spec for a list of allowable IDs).\n\tString getClassName(); // Retrieve the class name, eg \"basic\" (see the spec for a list of these).\n}"}
{"index": 18803, "repo": "lucene-core-9.7.0", "des": "A struct like class that represents a hierarchical relationship between IndexReader instances.", "code": "Class IndexReaderContext {\n\tabstract List<IndexReaderContext> children(); // Returns the context's children iff this context is a composite context otherwise null .\n\tObject id(); // Expert: Return an Object that uniquely identifies this context.\n\tabstract List<LeafReaderContext> leaves(); // Returns the context's leaves if this context is a top-level context.\n\tabstract IndexReader reader(); // Returns the IndexReader, this context represents.\n}"}
{"index": 16423, "repo": "spring-batch-infrastructure-5.0.2", "des": "Calls one of a collection of ItemProcessors, based on a router pattern implemented through the provided Classifier.", "code": "public class ClassifierCompositeItemProcessor<I,O> extends Object implements ItemProcessor<I,O> {\n\tO process(I item); // Delegates to injected ItemProcessor instances according to the classification by the Classifier.\n\tvoid setClassifier(org.springframework.classify.Classifier<? super I,ItemProcessor<?,? extends O>> classifier); // Establishes the classifier that will determine which ItemProcessor to use.\n}"}
{"index": 6305, "repo": "commons-codec-1.16.0", "des": "Similar to the Quoted-Printable content-transfer-encoding defined in RFC 1521 and designed to allow text containing mostly ASCII characters to be decipherable on an ASCII terminal without decoding.", "code": "Class QCodec {\n\tObject decode(Object obj); // Decodes a quoted-printable object into its original form.\n\tString decode(String str); // Decodes a quoted-printable string into its original form.\n\tprotected String decodeText(String text); // Applies an RFC 1522 compliant decoding scheme to the given string of text.\n\tprotected byte[] doDecoding(byte[] bytes); // Decodes an array of bytes using the defined encoding scheme.\n\tprotected byte[] doEncoding(byte[] bytes); // Encodes an array of bytes using the defined encoding scheme.\n\tObject encode(Object obj); // Encodes an object into its quoted-printable form using the default Charset.\n\tString encode(String sourceStr); // Encodes a string into its quoted-printable form using the default Charset.\n\tString encode(String sourceStr, Charset sourceCharset); // Encodes a string into its quoted-printable form using the specified Charset.\n\tString encode(String sourceStr, String sourceCharset); // Encodes a string into its quoted-printable form using the specified Charset.\n\tprotected String encodeText(String text, Charset charset); // Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.\n\tprotected String encodeText(String text, String charsetName); // Applies an RFC 1522 compliant encoding scheme to the given string of text with the given charset.\n\tCharset getCharset(); // Gets the default Charset name used for string decoding and encoding.\n\tString getDefaultCharset(); // Gets the default Charset name used for string decoding and encoding.\n\tprotected String getEncoding(); // Returns the codec name (referred to as encoding in the RFC 1522).\n\tboolean isEncodeBlanks(); // Tests if optional transformation of SPACE characters is to be used\n\tvoid setEncodeBlanks(boolean b); // Defines whether optional transformation of SPACE characters is to be used\n}"}
{"index": 6896, "repo": "calcite-core-1.34.0", "des": "An immutable map that may contain null values.", "code": "Class ImmutableNullableMap<K,V> {\n\tstatic <K,V> Map<K,V> copyOf(Map<? extends K,? extends V> map); // Returns an immutable map containing the given elements.\n\tstatic <K,V> Map<K,V> copyOf(SortedMap<? extends K,? extends V> map); // Returns an immutable navigable map containing the given entries.\n}"}
{"index": 4615, "repo": "commons-vfs2-2.9.0", "des": "Information about a file, that is used to select files during the traversal of a hierarchy.", "code": "Interface FileSelectInfo {\n\tFileObject getBaseFolder(); // Returns the base folder of the traversal.\n\tint getDepth(); // Returns the depth of the file relative to the base folder.\n\tFileObject getFile(); // Returns the file (or folder) to be considered.\n}"}
{"index": 10173, "repo": "spring-integration-smb-6.1.2", "des": "Data holder class for a SMB share configuration.", "code": "public class SmbConfig extends Object {\n\tString getDomain();\n\tString getHost();\n\tString getPassword();\n\tint getPort();\n\tString getShareAndDir();\n\tjcifs.DialectVersion getSmbMaxVersion(); // Gets the desired maximum SMB version value for what the Windows server will allow during protocol transport negotiation.\n\tjcifs.DialectVersion getSmbMinVersion(); // Gets the desired minimum SMB version value for what the Windows server will allow during protocol transport negotiation.\n\tfinal String getUrl();\n\tfinal String getUrl(boolean _includePassword);\n\tString getUsername();\n\tfinal void setDomain(String _domain);\n\tfinal void setHost(String _host);\n\tfinal void setPassword(String _password);\n\tfinal void setPort(int _port);\n\tfinal void setShareAndDir(String _shareAndDir);\n\tvoid setSmbMaxVersion(jcifs.DialectVersion _smbMaxVersion); // Sets the desired maximum SMB version value for what the Windows server will allow during protocol transport negotiation.\n\tvoid setSmbMinVersion(jcifs.DialectVersion _smbMinVersion); // Sets the desired minimum SMB version value for what the Windows server will allow during protocol transport negotiation.\n\tfinal void setUsername(String _username);\n\tfinal SmbConfig validate(); // Validates the object.\n}"}
{"index": 4068, "repo": "zookeeper-3.8.2", "des": "This API allows you to start a ZooKeeper server node from Java code The server will run inside the same process.", "code": "Interface ZooKeeperServerEmbedded {\n\tstatic ZooKeeperServerEmbedded.ZookKeeperServerEmbeddedBuilder builder();\n\tvoid close(); // Shutdown gracefully the server and wait for resources to be released.\n\tString getConnectionString(); // Get a connection string useful for the client.\n\tString getSecureConnectionString();\n\tvoid start(); // Start the server.\n\tvoid start(long startupTimeout); // Start the server\n}"}
{"index": 3320, "repo": "hbase-common-3.0.0-alpha-4", "des": "Enum specifying the client auth requirement of server-side TLS sockets created by this X509Util.", "code": "Enum X509Util.ClientAuth {\n\tstatic X509Util.ClientAuth fromPropertyValue(String prop); // Converts a property value to a ClientAuth enum.\n\torg.apache.hbase.thirdparty.io.netty.handler.ssl.ClientAuth toNettyClientAuth();\n\tstatic X509Util.ClientAuth valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic X509Util.ClientAuth[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 968, "repo": "ignite-core-2.15.0", "des": "The interface of IO Messaging Pool Extension.", "code": "Interface IoPool {\n\tExecutor executor(); // Gets the Executor for this Pool.\n\tbyte id(); // Gets the numeric identifier of the pool.\n}"}
{"index": 6573, "repo": "exoplayer-core-2.9.6", "des": "Reads section data packets and feeds the whole sections to a given SectionPayloadReader.", "code": "Class SectionReader {\n\tvoid consume(ParsableByteArray data, int flags); // Consumes the payload of a TS packet.\n\tvoid init(TimestampAdjuster timestampAdjuster, ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the payload reader.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 3099, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "ColumnVector contains the shared structure for the sub-types, including NULL information, and whether this vector repeats, i.", "code": "Class ColumnVector {\n\tabstract void copySelected(boolean selectedInUse, int[] sel, int size, ColumnVector outputColVector);\n\tint decRef();\n\tvoid ensureSize(int size, boolean preserveData); // Ensure the ColumnVector can hold at least size values.\n\tabstract void flatten(boolean selectedInUse, int[] sel, int size);\n\tprotected void flattenNoNulls(boolean selectedInUse, int[] sel, int size);\n\tprotected void flattenPush();\n\tprotected void flattenRepeatingNulls(boolean selectedInUse, int[] sel, int size);\n\tint getRef();\n\tvoid incRef();\n\tvoid init(); // Initialize the column vector.\n\tvoid reset(); // Resets the column to default state - fills the isNull array with false - sets noNulls to true - sets isRepeating to false\n\tabstract void setElement(int outputElementNum, int inputElementNum, ColumnVector inputColVector); // Set the element in this column vector from the given input vector.\n\tvoid setRepeating(boolean isRepeating); // Sets the isRepeating flag.\n\tvoid shallowCopyTo(ColumnVector otherCv); // Shallow copy of the contents of this vector to the other vector; replaces other vector's values.\n\tabstract void stringifyValue(StringBuilder buffer, int row); // Print the value for this column into the given string builder.\n\tvoid unFlatten(); // Restore the state of isRepeating and noNulls to what it was before flattening.\n}"}
{"index": 18106, "repo": "spring-ws-core-4.0.5", "des": "Convenient super class for application classes that need Web service access.", "code": "public abstract class WebServiceGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\tfinal String getDefaultUri(); // Returns the default URI used by the gateway.\n\tfinal DestinationProvider getDestinationProvider(); // Returns the destination provider used by the gateway.\n\tfinal ClientInterceptor[] getInterceptors(); // Returns the ClientInterceptors used by the template.\n\tfinal org.springframework.oxm.Marshaller getMarshaller(); // Returns the Marshaller used by the gateway.\n\tfinal WebServiceMessageFactory getMessageFactory(); // Returns the WebServiceMessageFactory used by the gateway.\n\tfinal WebServiceMessageSender[] getMessageSenders(); // Returns the WebServiceMessageSenders used by the gateway.\n\tfinal org.springframework.oxm.Unmarshaller getUnmarshaller(); // Returns the Unmarshaller used by the gateway.\n\tfinal WebServiceTemplate getWebServiceTemplate(); // Returns the WebServiceTemplate for the gateway.\n\tprotected void initGateway(); // Subclasses can override this for custom initialization behavior.\n\tfinal void setDefaultUri(String uri); // Sets the default URI used by the gateway.\n\tfinal void setDestinationProvider(DestinationProvider destinationProvider); // Set the destination provider URI used by the gateway.\n\tfinal void setInterceptors(ClientInterceptor[] interceptors); // Sets the ClientInterceptors used by the gateway.\n\tfinal void setMarshaller(org.springframework.oxm.Marshaller marshaller); // Sets the Marshaller used by the gateway.\n\tfinal void setMessageFactory(WebServiceMessageFactory messageFactory); // Set the WebServiceMessageFactory to be used by the gateway.\n\tfinal void setMessageSender(WebServiceMessageSender messageSender); // Sets a single WebServiceMessageSender to be used by the gateway.\n\tfinal void setMessageSenders(WebServiceMessageSender[] messageSenders); // Sets multiple WebServiceMessageSender to be used by the gateway.\n\tfinal void setUnmarshaller(org.springframework.oxm.Unmarshaller unmarshaller); // Sets the Unmarshaller used by the gateway.\n\tfinal void setWebServiceTemplate(WebServiceTemplate webServiceTemplate); // Sets the WebServiceTemplate to be used by the gateway.\n}"}
{"index": 10498, "repo": "groovy-all-4.0.13", "des": "This class defines all the encoding/decoding groovy methods which enhance the normal JDK classes when inside the Groovy environment.", "code": "public class EncodingGroovyMethods extends Object {\n\tstatic byte[] decodeBase64(String value); // Decode the String from Base64 into a byte array.\n\tstatic byte[] decodeBase64Url(String value); // Decodes a Base64 URL and Filename Safe encoded String into a byte array.\n\tstatic byte[] decodeHex(String value); // Decodes a hex string to a byte array.\n\tstatic String digest(byte[] self, String algorithm); // digest the byte array\n\tstatic String digest(CharSequence self, String algorithm); // digest the CharSequence instance\n\tstatic Writable encodeBase64(byte[] data); // Produce a Writable object which writes the Base64 encoding of the byte array.\n\tstatic Writable encodeBase64(byte[] data, boolean chunked); // Produce a Writable object which writes the Base64 encoding of the byte array.\n\tstatic Writable encodeBase64(Byte[] data); // Produce a Writable object which writes the Base64 encoding of the byte array.\n\tstatic Writable encodeBase64(Byte[] data, boolean chunked); // Produce a Writable object which writes the Base64 encoding of the byte array.\n\tstatic Writable encodeBase64Url(byte[] data); // Produce a Writable object which writes the Base64 URL and Filename Safe encoding of the byte array.\n\tstatic Writable encodeBase64Url(byte[] data, boolean pad); // Produce a Writable object which writes the Base64 URL and Filename Safe encoding of the byte array.\n\tstatic Writable encodeBase64Url(Byte[] data); // Produce a Writable object which writes the Base64 URL and Filename Safe encoding of the byte array.\n\tstatic Writable encodeBase64Url(Byte[] data, boolean pad); // Produce a Writable object which writes the Base64 URL and Filename Safe encoding of the byte array.\n\tstatic Writable encodeHex(byte[] data); // Produces a Writable that writes the hex encoding of the byte[].\n\tstatic Writable encodeHex(Byte[] data); // Produces a Writable that writes the hex encoding of the Byte[].\n\tstatic String md5(byte[] self); // Calculate md5 of the byte array\n\tstatic String md5(CharSequence self); // Calculate md5 of the CharSequence instance\n\tstatic String sha256(byte[] self); // Calculate SHA-256 of the byte array\n\tstatic String sha256(CharSequence self); // Calculate SHA-256 of the CharSequence instance\n}"}
{"index": 12268, "repo": "jena-core-4.9.0", "des": "A SimpleGraphFactory produces memory-based graphs and records them in a local map.", "code": "public class SimpleGraphMaker extends BaseGraphMaker {\n\tvoid close(); // Close this factory - we choose to do nothing.\n\tGraph create();\n\tGraph createGraph(String name, boolean strict); // Create a graph and record it with the given name in the local map.\n\tboolean hasGraph(String name); // Return true iff we have a graph with the given name\n\tExtendedIterator<String> listGraphs(); // Answer an [extended] iterator where each element is the name of a graph in the maker, and the complete sequence exhausts the set of names.\n\tGraph openGraph(); // Answer the default graph of this GraphMaker, if it has one.\n\tGraph openGraph(String name, boolean strict); // Open (aka find) a graph with the given name in the local map.\n\tvoid removeGraph(String name); // Remove the mapping from name to any graph from the local map.\n}"}
{"index": 18370, "repo": "opencms-core-15.0", "des": "Represents the login target information.", "code": "Class CmsLoginController.CmsLoginTargetInfo {\n\tjava.lang.String getPassword(); // Returns the password.\n\tjava.lang.String getTarget(); // Returns the target.\n\tjava.lang.String getUser(); // Returns the user.\n}"}
{"index": 8738, "repo": "hadoop-yarn-common-3.3.6", "des": "Values for the %18n dir attribute (case-insensitive).", "code": "Enum HamletSpec.Dir {\n\tstatic HamletSpec.Dir valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HamletSpec.Dir[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4777, "repo": "hadoop-common-3.3.4", "des": "An interface that must be implemented to allow pluggable DNS-name/IP-address to RackID resolvers.", "code": "Interface DNSToSwitchMapping {\n\tvoid reloadCachedMappings(); // Reload all of the cached mappings.\n\tvoid reloadCachedMappings(List<String> names); // Reload cached mappings on specific nodes.\n\tList<String> resolve(List<String> names); // Resolves a list of DNS-names/IP-addresses and returns back a list of switch information (network paths).\n}"}
{"index": 16167, "repo": "spring-data-cassandra-4.1.2", "des": "Object to configure a DROP KEYSPACE specification.", "code": "public class DropKeyspaceSpecification extends KeyspaceActionSpecification {\n\tstatic DropKeyspaceSpecification dropKeyspace(com.datastax.oss.driver.api.core.CqlIdentifier name); // Create a new DropKeyspaceSpecification for the given name.\n\tstatic DropKeyspaceSpecification dropKeyspace(String name); // Create a new DropKeyspaceSpecification for the given name.\n\tstatic DropKeyspaceSpecification dropKeyspace(KeyspaceIdentifier name); // Deprecated. since 3.0, use dropKeyspace(CqlIdentifier).\n\tboolean equals(Object o);\n\tboolean getIfExists();\n\tDropKeyspaceSpecification ifExists(); // Causes the inclusion of an IF EXISTS clause.\n\tDropKeyspaceSpecification ifExists(boolean ifExists); // Toggles the inclusion of an IF EXISTS clause.\n}"}
{"index": 2690, "repo": "mahout-core-14.1", "des": "Only for performance tuning of compute intensive linear algebraic computations.", "code": "Class PlusMult {\n\tdouble apply(double a, double b); // Returns the result of the function evaluation.\n\tdouble getMultiplicator();\n\tboolean isAssociative(); // f(x, f(y, z)) = x + c * (y + c * z) = x + c * y + c^2 * z f(f(x, y), z) = (x + c * y) + c * z = x + c * y + c * z true only for c = 0 or c = 1\n\tboolean isCommutative(); // x + y * c = y + x * c iff c = 1\n\tboolean isLikeLeftMult(); // 0 + y * c = y * c != 0\n\tboolean isLikeRightMult(); // x + 0 * c = x != 0\n\tboolean isLikeRightPlus(); // x + 0 * c = x\n\tstatic PlusMult minusMult(double constant); // a - b*constant.\n\tstatic PlusMult plusMult(double constant); // a + b*constant.\n\tvoid setMultiplicator(double multiplicator);\n}"}
{"index": 9366, "repo": "hadoop-yarn-api-3.3.6", "des": "LocalResourceType specifies the type of a resource localized by the NodeManager.", "code": "Enum LocalResourceType {\n\tstatic LocalResourceType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic LocalResourceType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17641, "repo": "spring-web-6.0.11", "des": "Abstract base for ClientHttpRequest that makes sure that headers and body are not written multiple times.", "code": "public abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest {\n\tprotected void assertNotExecuted(); // Assert that this request has not been executed yet.\n\tfinal ClientHttpResponse execute(); // Execute this request, resulting in a ClientHttpResponse that can be read.\n\tprotected abstract ClientHttpResponse executeInternal(HttpHeaders headers); // Abstract template method that writes the given headers and content to the HTTP request.\n\tfinal OutputStream getBody(); // Return the body of the message as an output stream.\n\tprotected abstract OutputStream getBodyInternal(HttpHeaders headers); // Abstract template method that returns the body.\n\tfinal HttpHeaders getHeaders(); // Return the headers of this message.\n}"}
{"index": 10317, "repo": "spring-core-6.0.11", "des": "The default implementation of the PropertySources interface.", "code": "public class MutablePropertySources extends Object implements PropertySources {\n\tvoid addAfter(String relativePropertySourceName, PropertySource<?> propertySource); // Add the given property source object with precedence immediately lower than the named relative property source.\n\tvoid addBefore(String relativePropertySourceName, PropertySource<?> propertySource); // Add the given property source object with precedence immediately higher than the named relative property source.\n\tvoid addFirst(PropertySource<?> propertySource); // Add the given property source object with the highest precedence.\n\tvoid addLast(PropertySource<?> propertySource); // Add the given property source object with the lowest precedence.\n\tprotected void assertLegalRelativeAddition(String relativePropertySourceName, PropertySource<?> propertySource); // Ensure that the given property source is not being added relative to itself.\n\tboolean contains(String name); // Return whether a property source with the given name is contained.\n\tPropertySource<?> get(String name); // Return the property source with the given name, null if not found.\n\tIterator<PropertySource<?>> iterator();\n\tint precedenceOf(PropertySource<?> propertySource); // Return the precedence of the given property source, -1 if not found.\n\tPropertySource<?> remove(String name); // Remove and return the property source with the given name, null if not found.\n\tprotected void removeIfPresent(PropertySource<?> propertySource); // Remove the given property source if it is present.\n\tvoid replace(String name, PropertySource<?> propertySource); // Replace the property source with the given name with the given property source object.\n\tint size(); // Return the number of PropertySource objects contained.\n\tSpliterator<PropertySource<?>> spliterator();\n\tStream<PropertySource<?>> stream(); // Return a sequential Stream containing the property sources.\n}"}
{"index": 993, "repo": "ignite-core-2.15.0", "des": "Description for type that could be stored into database by store.", "code": "Class JdbcType {\n\tString getCacheName(); // Gets associated cache name.\n\tString getDatabaseSchema(); // Gets database schema name.\n\tString getDatabaseTable(); // Gets table name in database.\n\tJdbcTypeField[] getKeyFields(); // Gets optional persistent key fields (needed only if CacheJdbcPojoStore is used).\n\tString getKeyType(); // Gets key type.\n\tJdbcTypeField[] getValueFields(); // Gets optional persistent value fields (needed only if CacheJdbcPojoStore is used).\n\tString getValueType(); // Gets value type.\n\tJdbcType setCacheName(String cacheName); // Sets associated cache name.\n\tJdbcType setDatabaseSchema(String dbSchema); // Sets database schema name.\n\tJdbcType setDatabaseTable(String dbTbl); // Table name in database.\n\tJdbcType setKeyFields(JdbcTypeField... keyFlds); // Sets optional persistent key fields (needed only if CacheJdbcPojoStore is used).\n\tJdbcType setKeyType(Class<?> cls); // Sets key type.\n\tJdbcType setKeyType(String keyType); // Sets key type.\n\tJdbcType setValueFields(JdbcTypeField... valFlds); // Sets optional persistent value fields (needed only if CacheJdbcPojoStore is used).\n\tJdbcType setValueType(Class<?> cls); // Sets value type.\n\tJdbcType setValueType(String valType); // Sets value type.\n}"}
{"index": 7668, "repo": "cassandra-all-4.1.2", "des": "Abstract class to create UnfilteredRowIterator that lazily initialize themselves.", "code": "Class LazilyInitializedUnfilteredRowIterator {\n\tvoid close();\n\tRegularAndStaticColumns columns(); // A subset of the columns for the (static and regular) rows returned by this iterator.\n\tprotected Unfiltered computeNext();\n\tboolean initialized();\n\tprotected abstract UnfilteredRowIterator initializeIterator();\n\tboolean isReverseOrder(); // Whether or not the rows returned by this iterator are in reversed clustering order.\n\tprotected void maybeInit();\n\tTableMetadata metadata(); // The metadata for the table this iterator on.\n\tDecoratedKey partitionKey(); // The partition key of the partition this in an iterator over.\n\tDeletionTime partitionLevelDeletion(); // The partition level deletion for the partition this iterate over.\n\tRow staticRow(); // The static part corresponding to this partition (this can be an empty row but cannot be null).\n\tEncodingStats stats(); // Return \"statistics\" about what is returned by this iterator.\n}"}
{"index": 9791, "repo": "commons-math3-3.6.1", "des": "This interface defines a visitor for the entries of a vector.", "code": "Interface RealVectorPreservingVisitor {\n\tdouble end(); // End visiting a vector.\n\tvoid start(int dimension, int start, int end); // Start visiting a vector.\n\tvoid visit(int index, double value); // Visit one entry of the vector.\n}"}
{"index": 13740, "repo": "spring-webmvc-6.0.11", "des": "Interface for web-based locale resolution strategies that allows for both locale resolution via the request and locale modification via request and response.", "code": "public interface LocaleResolver {\n\tLocale resolveLocale(HttpServletRequest request); // Resolve the current locale via the given request.\n\tvoid setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale); // Set the current locale to the given one.\n}"}
{"index": 15715, "repo": "camel-api-4.0.0-RC1", "des": "Breakpoint are used by the Debugger API.", "code": "public interface Breakpoint {\n\tvoid activate(); // Activates this breakpoint\n\tvoid afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken); // Callback invoked when the breakpoint was hit and the Exchange has been processed (after).\n\tvoid beforeProcess(Exchange exchange, Processor processor, NamedNode definition); // Callback invoked when the breakpoint was hit and the Exchange is about to be processed (before).\n\tBreakpoint.State getState(); // Gets the state of this break\n\tvoid onEvent(Exchange exchange, CamelEvent.ExchangeEvent event, NamedNode definition); // Callback invoked when the breakpoint was hit and any of the Exchange events occurred.\n\tvoid suspend(); // Suspend this breakpoint\n}"}
{"index": 17475, "repo": "spring-integration-xml-6.1.2", "des": "An implementation of Transformer that delegates to an OXM Unmarshaller.", "code": "public class UnmarshallingTransformer extends org.springframework.integration.transformer.AbstractPayloadTransformer<Object,Object> {\n\tString getComponentType();\n\tvoid setAlwaysUseSourceFactory(boolean alwaysUseSourceFactory); // If true always delegate to the SourceFactory.\n\tvoid setSourceFactory(SourceFactory sourceFactory); // Provide the SourceFactory to be used.\n\tObject transformPayload(Object payload);\n}"}
{"index": 10239, "repo": "spring-core-6.0.11", "des": "Contract to find delimiter(s) against one or more data buffers that can be passed one at a time to the DataBufferUtils.Matcher.match(DataBuffer) method.", "code": "public static interface DataBufferUtils.Matcher {\n\tbyte[] delimiter(); // Return the delimiter from the last invocation of match(DataBuffer).\n\tint match(DataBuffer dataBuffer); // Find the first matching delimiter and return the index of the last byte of the delimiter, or -1 if not found.\n\tvoid reset(); // Reset the state of this matcher.\n}"}
{"index": 18737, "repo": "guava-32.1.1-jre", "des": "Represents a class that can be loaded through ClassPath.ClassInfo.load().", "code": "Class ClassPath.ClassInfo {\n\tjava.lang.String getName(); // Returns the fully qualified name of the class.\n\tjava.lang.String getPackageName(); // Returns the package name of the class, without attempting to load the class.\n\tjava.lang.String getSimpleName(); // Returns the simple name of the underlying class as given in the source code.\n\tboolean isTopLevel(); // Returns true if the class name \"looks to be\" top level (not nested), that is, it includes no '$' in the name.\n\tjava.lang.Class<?> load(); // Loads (but doesn't link or initialize) the class.\n}"}
{"index": 648, "repo": "ignite-core-2.15.0", "des": "A pojo-object representing current cluster global state.", "code": "Class DiscoveryDataClusterState {\n\tboolean baselineChanged();\n\t@Nullable BaselineTopology baselineTopology();\n\tDiscoveryDataClusterState finish(boolean success); // Creates a non-transitional cluster state.\n\tboolean hasBaselineTopology();\n\tClusterState lastState();\n\tlong lastStateChangeTime();\n\tboolean localBaselineAutoAdjustment();\n\tvoid localBaselineAutoAdjustment(boolean adjusted); // Set local baseline autoadjustment flag.\n\t@Nullable BaselineTopology previousBaselineTopology();\n\tboolean previouslyActive();\n\tvoid setTransitionResult(UUID reqId, ClusterState state); // Discovery cluster state is changed asynchronously by discovery message, this methods changes local status for public API calls.\n\tClusterState state();\n\tboolean transition();\n\t@Nullable Exception transitionError();\n\tvoid transitionError(Exception ex);\n\tSet<UUID> transitionNodes();\n\tUUID transitionRequestId();\n\t@Nullable ClusterState transitionResult();\n\tAffinityTopologyVersion transitionTopologyVersion();\n}"}
{"index": 4241, "repo": "jackson-core-2.15.2", "des": "Interface that defines how Jackson package can interact with efficient pre-serialized or lazily-serialized and reused String representations.", "code": "Interface SerializableString {\n\tint appendQuoted(char[] buffer, int offset); // Method that will append quoted characters of this String into given buffer.\n\tint appendQuotedUTF8(byte[] buffer, int offset); // Method that will append quoted UTF-8 bytes of this String into given buffer, if there is enough room; if not, returns -1.\n\tint appendUnquoted(char[] buffer, int offset); // Method that will append unquoted characters of this String into given buffer.\n\tint appendUnquotedUTF8(byte[] buffer, int offset); // Method that will append unquoted ('raw') UTF-8 bytes of this String into given buffer.\n\tchar[] asQuotedChars(); // Returns JSON quoted form of the String, as character array.\n\tbyte[] asQuotedUTF8(); // Returns UTF-8 encoded version of JSON-quoted String.\n\tbyte[] asUnquotedUTF8(); // Returns UTF-8 encoded version of unquoted String.\n\tint charLength(); // Returns length of the (unquoted) String as characters.\n\tString getValue(); // Returns unquoted String that this object represents (and offers serialized forms for)\n\tint putQuotedUTF8(ByteBuffer buffer); // Method for appending JSON-escaped UTF-8 encoded String value into given ByteBuffer, if it fits.\n\tint putUnquotedUTF8(ByteBuffer buffer); // Method for appending unquoted ('raw') UTF-8 encoded String value into given ByteBuffer, if it fits.\n\tint writeQuotedUTF8(OutputStream out); // Method for writing JSON-escaped UTF-8 encoded String value using given OutputStream.\n\tint writeUnquotedUTF8(OutputStream out); // Method for writing unescaped UTF-8 encoded String value using given OutputStream.\n}"}
{"index": 2043, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnUnaryMinus.", "code": "Class DoubleColUnaryMinusChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 9158, "repo": "hbase-server-3.0.0-alpha-4", "des": "A dummy ReplicationEndpoint that replicates nothing.", "code": "Class VerifyWALEntriesReplicationEndpoint {\n\tboolean canReplicateToSameCluster(); // Whether or not, the replication endpoint can replicate to it's source cluster with the same UUID\n\tprotected void doStart();\n\tprotected void doStop();\n\tUUID getPeerUUID(); // Returns a UUID of the provided peer id.\n\tWALEntryFilter getWALEntryfilter(); // Returns a default set of filters\n\tboolean replicate(ReplicationEndpoint.ReplicateContext replicateContext); // Replicate the given set of entries (in the context) to the other cluster.\n\tvoid start(); // Initiates service startup and returns immediately.\n\tvoid stop(); // If the service is starting or running, this initiates service shutdown and returns immediately.\n}"}
{"index": 1961, "repo": "nifi-framework-api-1.22.0", "des": "Specifies which column to sort on when performing a Listing of FlowFiles via FlowFileQueue#listFlowFiles(String, SortColumn, SortDirection).", "code": "Enum SortColumn {\n\tint compare(FlowFileSummary o1, FlowFileSummary o2);\n\tstatic SortColumn valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SortColumn[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2077, "repo": "hive-exec-4.0.0-alpha-2", "des": "Construct a histogram using an algorithm described by Ben-Haim and Tom-Tov.", "code": "Class GenericUDAFHistogramNumeric.GenericUDAFHistogramNumericEvaluator {\n\tGenericUDAFEvaluator.AggregationBuffer getNewAggregationBuffer(); // Get a new aggregation object.\n\tObjectInspector init(GenericUDAFEvaluator.Mode m, ObjectInspector[] parameters); // Initialize the evaluator.\n\tvoid iterate(GenericUDAFEvaluator.AggregationBuffer agg, Object[] parameters); // Iterate through original data.\n\tvoid merge(GenericUDAFEvaluator.AggregationBuffer agg, Object partial); // Merge with partial aggregation result.\n\tvoid reset(GenericUDAFEvaluator.AggregationBuffer agg); // Reset the aggregation.\n\tObject terminate(GenericUDAFEvaluator.AggregationBuffer agg); // Get final aggregation result.\n\tObject terminatePartial(GenericUDAFEvaluator.AggregationBuffer agg); // Get partial aggregation result.\n}"}
{"index": 3860, "repo": "hbase-client-3.0.0-alpha-4", "des": "A binary comparator which lexicographically compares against the specified byte array using Bytes.", "code": "Class NullComparator {\n\tint compareTo(byte[] value);\n\tint compareTo(byte[] value, int offset, int length);\n\tint compareTo(ByteBuffer value, int offset, int length);\n\tboolean equals(Object obj);\n\tstatic NullComparator parseFrom(byte[] pbBytes); // Parse the serialized representation of NullComparator\n\tbyte[] toByteArray(); // Returns The comparator serialized using pb\n}"}
{"index": 6966, "repo": "calcite-core-1.34.0", "des": "Sub-class of Window not targeted at any particular engine or calling convention.", "code": "Class LogicalWindow {\n\tLogicalWindow copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tstatic RelNode create(RelOptCluster cluster, RelTraitSet traitSet, RelBuilder relBuilder, RelNode child, RexProgram program); // Creates a LogicalWindow by parsing a RexProgram.\n\tstatic LogicalWindow create(RelTraitSet traitSet, RelNode input, List<RexLiteral> constants, RelDataType rowType, List<Window.Group> groups); // Creates a LogicalWindow.\n\tRelNode withHints(List<RelHint> hintList); // Returns a new relational expression with the specified hints hintList.\n}"}
{"index": 2029, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticColumn.", "code": "Class DoubleColAddDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 16887, "repo": "spring-security-oauth2-core-6.1.2", "des": "A representation of an OAuth 2.0 Access Token Response.", "code": "public final class OAuth2AccessTokenResponse extends Object {\n\tOAuth2AccessToken getAccessToken(); // Returns the Access Token.\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters returned in the response.\n\tOAuth2RefreshToken getRefreshToken(); // Returns the Refresh Token.\n\tstatic OAuth2AccessTokenResponse.Builder withResponse(OAuth2AccessTokenResponse response); // Returns a new OAuth2AccessTokenResponse.Builder, initialized with the provided response.\n\tstatic OAuth2AccessTokenResponse.Builder withToken(String tokenValue); // Returns a new OAuth2AccessTokenResponse.Builder, initialized with the provided access token value.\n}"}
{"index": 13061, "repo": "spring-aop-6.0.11", "des": "Convenient implementation of the IntroductionInterceptor interface.", "code": "public class DelegatingIntroductionInterceptor extends IntroductionInfoSupport implements IntroductionInterceptor {\n\tprotected Object doProceed(MethodInvocation mi); // Proceed with the supplied MethodInterceptor.\n\tObject invoke(MethodInvocation mi); // Subclasses may need to override this if they want to perform custom behaviour in around advice.\n}"}
{"index": 4620, "repo": "commons-vfs2-2.9.0", "des": "What VFS expects from an FTP client to provide.", "code": "Interface FtpClient {\n\tboolean abort();\n\tOutputStream appendFileStream(String relPath);\n\tboolean completePendingCommand();\n\tboolean deleteFile(String relPath);\n\tvoid disconnect();\n\tdefault int getReplyCode();\n\tString getReplyString();\n\tboolean hasFeature(String feature); // Queries the server for a supported feature.\n\tboolean isConnected();\n\torg.apache.commons.net.ftp.FTPFile[] listFiles(String relPath);\n\tboolean makeDirectory(String relPath);\n\tdefault Instant mdtmInstant(String relPath); // Sends the MDTM command to get a file's date and time information after file transfer.\n\tboolean removeDirectory(String relPath);\n\tboolean rename(String oldName, String newName);\n\tInputStream retrieveFileStream(String relPath);\n\tdefault InputStream retrieveFileStream(String relPath, int bufferSize);\n\tInputStream retrieveFileStream(String relPath, long restartOffset);\n\tdefault void setBufferSize(int bufferSize);\n\tOutputStream storeFileStream(String relPath);\n}"}
{"index": 11374, "repo": "spring-context-6.0.11", "des": "Defines the contract for adding one or more ClassFileTransformers to a ClassLoader.", "code": "public interface LoadTimeWeaver {\n\tvoid addTransformer(ClassFileTransformer transformer); // Add a ClassFileTransformer to be applied by this LoadTimeWeaver.\n\tClassLoader getInstrumentableClassLoader(); // Return a ClassLoader that supports instrumentation through AspectJ-style load-time weaving based on user-defined ClassFileTransformers.\n\tClassLoader getThrowawayClassLoader(); // Return a throwaway ClassLoader, enabling classes to be loaded and inspected without affecting the parent ClassLoader.\n}"}
{"index": 16581, "repo": "spring-beans-6.0.11", "des": "Holder for a BeanDefinition with name and aliases.", "code": "public class BeanDefinitionHolder extends Object implements BeanMetadataElement {\n\tboolean equals(Object other);\n\tString[] getAliases(); // Return the alias names for the bean, as specified directly for the bean definition.\n\tBeanDefinition getBeanDefinition(); // Return the wrapped BeanDefinition.\n\tString getBeanName(); // Return the primary name of the bean, as specified for the bean definition.\n\tString getLongDescription(); // Return a long description for the bean, including name and aliases as well as a description of the contained BeanDefinition.\n\tString getShortDescription(); // Return a friendly, short description for the bean, stating name and aliases.\n\tObject getSource(); // Expose the bean definition's source object.\n\tboolean matchesName(String candidateName); // Determine whether the given candidate name matches the bean name or the aliases stored in this bean definition.\n}"}
{"index": 18444, "repo": "opencms-core-15.0", "des": "Set of workflow resources, and an optional workflow.", "code": "Class CmsWorkflowResources {\n\tint getLowerBoundForSize(); // Gets a number that can be used as a lower bound for the number of publish resources if the list is too big (bigger than the workflow manager's resource limit).\n\tCmsWorkflow getOverrideWorkflow(); // Gets the override workflow, or null.\n\tjava.lang.Integer getTooManyCount(); // Gets the approximate amount of resources if there are too many resources.\n\tjava.util.List<CmsResource> getWorkflowResources(); // Returns the workflowResources.\n\tboolean isTooMany(); // Returns true if there are too many resources.\n}"}
{"index": 12899, "repo": "spring-data-mongodb-4.1.2", "des": "Gateway to String aggregation operations.", "code": "public class StringOperators extends Object {\n\tstatic StringOperators.StringOperatorFactory valueOf(String fieldReference); // Take the array referenced by given fieldReference.\n\tstatic StringOperators.StringOperatorFactory valueOf(AggregationExpression fieldReference); // Take the array referenced by given fieldReference.\n}"}
{"index": 8602, "repo": "commons-io-2.13.0", "des": "Character stream that handles all the necessary work to figure out the charset encoding of the XML document written to the stream.", "code": "Class XmlStreamWriter {\n\tstatic XmlStreamWriter.Builder builder(); // Constructs a new XmlStreamWriter.Builder.\n\tvoid close(); // Closes the underlying writer.\n\tvoid flush(); // Flushes the underlying writer.\n\tString getDefaultEncoding(); // Returns the default encoding.\n\tString getEncoding(); // Returns the detected encoding.\n\tvoid write(char[] cbuf, int off, int len); // Writes the characters to the underlying writer, detecting encoding.\n}"}
{"index": 8295, "repo": "spring-ws-3.0.10.RELEASE", "des": "Contains various utility methods for handling SOAP messages.", "code": "Class SoapUtils {\n\tstatic String escapeAction(String soapAction); // Escapes the given SOAP action to be surrounded by quotes.\n\tstatic String extractActionFromContentType(String contentType); // Returns the value of the action parameter in the given SOAP 1.2 content type.\n\tstatic String setActionInContentType(String contentType, String action); // Replaces or adds the value of the action parameter in the given SOAP 1.2 content type.\n}"}
{"index": 3740, "repo": "kafka-streams-3.5.0", "des": "The TableJoined class represents optional parameters that can be passed to KTable#join(KTable,Function,.", "code": "Class TableJoined<K,KO> {\n\tstatic <K,KO> TableJoined<K,KO> as(String name); // Create an instance of TableJoined with base name for all components of the join, including internal topics created to complete the join.\n\tstatic <K,KO> TableJoined<K,KO> with(StreamPartitioner<K,Void> partitioner, StreamPartitioner<KO,Void> otherPartitioner); // Create an instance of TableJoined with partitioner and otherPartitioner StreamPartitioner instances.\n\tTableJoined<K,KO> withName(String name); // Set the base name used for all components of the join, including internal topics created to complete the join.\n\tTableJoined<K,KO> withOtherPartitioner(StreamPartitioner<KO,Void> otherPartitioner); // Set the custom other StreamPartitioner to be used as part of computing the join.\n\tTableJoined<K,KO> withPartitioner(StreamPartitioner<K,Void> partitioner); // Set the custom StreamPartitioner to be used as part of computing the join.\n}"}
{"index": 17368, "repo": "groovy-4.0.13", "des": "An interface to mark a node being able to handle metadata.", "code": "public interface NodeMetaDataHandler {\n\tdefault void copyNodeMetaData(NodeMetaDataHandler other); // Copies all node metadata from the other node to this one\n\tMap<?,?> getMetaDataMap();\n\tdefault Map<?,?> getNodeMetaData(); // Returns an unmodifiable view of the current node metadata.\n\tdefault <T> T getNodeMetaData(Object key); // Gets the node metadata.\n\tdefault <T> T getNodeMetaData(Object key, Function<?,? extends T> valFn); // Gets the node metadata.\n\tdefault Object putNodeMetaData(Object key, Object value); // Sets the node metadata but allows overwriting values.\n\tdefault void removeNodeMetaData(Object key); // Removes a node metadata entry.\n\tvoid setMetaDataMap(Map<?,?> metaDataMap);\n\tdefault void setNodeMetaData(Object key, Object value); // Sets the node metadata.\n}"}
{"index": 623, "repo": "ignite-core-2.15.0", "des": "This class defines a handler for asynchronous task execution.", "code": "Interface ComputeTaskFuture<R> {\n\tR get(); // Synchronously waits for completion of the computation and returns computation result.\n\tR get(long timeout, TimeUnit unit); // Synchronously waits for completion of the computation for up to the timeout specified and returns computation result.\n\tComputeTaskSession getTaskSession(); // Gets task session of execution grid task.\n}"}
{"index": 15036, "repo": "spring-vault-core-3.0.4", "des": "Value object representing cipher text with an optional VaultTransitContext.", "code": "public class Ciphertext extends Object {\n\tboolean equals(Object o);\n\tString getCiphertext();\n\tVaultTransitContext getContext();\n\tstatic Ciphertext of(String ciphertext); // Factory method to create Ciphertext from the given ciphertext.\n\tCiphertext with(VaultTransitContext context); // Create a new Ciphertext object from this ciphertext associated with the given VaultTransitContext.\n}"}
{"index": 5213, "repo": "druid-processing-26.0.0", "des": "Provides information about a dimension for a grouping query, like topN or groupBy.", "code": "Interface DimensionSpec {\n\tdefault boolean canVectorize(); // Does this DimensionSpec have working decorate(SingleValueDimensionVectorSelector) and decorate(MultiValueDimensionVectorSelector) methods?\n\tDimensionSelector decorate(DimensionSelector selector); // Decorate a DimensionSelector, allowing custom transformation of underlying behavior (e.g.\n\tdefault MultiValueDimensionVectorSelector decorate(MultiValueDimensionVectorSelector selector); // Vectorized analog of #decorate(DimensionSelector) for {@link MultiValueDimensionVectorSelector}, most likely produced with {@link org.apache.druid.segment.vector.VectorColumnSelectorFactory#makeMultiValueDimensionSelector(DimensionSpec)} Decoration allows a {@link DimensionSpec} to customize the behavior of the underlying selector, for example transforming or filtering values.\n\tdefault SingleValueDimensionVectorSelector decorate(SingleValueDimensionVectorSelector selector); // Vectorized analog of decorate(DimensionSelector) for SingleValueDimensionVectorSelector, most likely produced with VectorColumnSelectorFactory.makeSingleValueDimensionSelector(DimensionSpec) Decoration allows a DimensionSpec to customize the behavior of the underlying selector, for example transforming or filtering values.\n\tString getDimension();\n\tString getOutputName();\n\tColumnType getOutputType();\n\tboolean mustDecorate(); // Does this DimensionSpec require that decorate() be called to produce correct results?\n\tboolean preservesOrdering(); // If the decorate(org.apache.druid.segment.DimensionSelector) methods alter the underlying behavior of the dimension selector, does this alteration preserve the original ordering?\n\tDimensionSpec withDimension(String newDimension); // Returns a copy of this DimensionSpec with the underlying dimension (the value of getDimension()) replaced by \"newDimension\".\n}"}
{"index": 17895, "repo": "spring-web-6.0.11", "des": "Documented KeyValues for the HTTP server observations for Servlet-based web applications.", "code": "public enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\tstatic ServerHttpObservationDocumentation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ServerHttpObservationDocumentation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10693, "repo": "spring-tx-6.0.11", "des": "Abstract implementation of TransactionAttributeSource that caches attributes for methods and implements a fallback policy: 1.", "code": "public abstract class AbstractFallbackTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware {\n\tprotected boolean allowPublicMethodsOnly(); // Should only public methods be allowed to have transactional semantics?\n\tprotected TransactionAttribute computeTransactionAttribute(Method method, Class<?> targetClass); // Same signature as getTransactionAttribute(java.lang.reflect.Method, java.lang.Class<?>), but doesn't cache the result.\n\tprotected abstract TransactionAttribute findTransactionAttribute(Class<?> clazz); // Subclasses need to implement this to return the transaction attribute for the given class, if any.\n\tprotected abstract TransactionAttribute findTransactionAttribute(Method method); // Subclasses need to implement this to return the transaction attribute for the given method, if any.\n\tprotected Object getCacheKey(Method method, Class<?> targetClass); // Determine a cache key for the given method and target class.\n\tTransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass); // Determine the transaction attribute for this method invocation.\n\tvoid setEmbeddedValueResolver(org.springframework.util.StringValueResolver resolver);\n}"}
{"index": 1486, "repo": "pdfbox-3.0.0-beta1", "des": "This is the class that represents a rectangular or elliptical annotation introduced in PDF 1.", "code": "Class PDAnnotationSquareCircle {\n\tabstract void constructAppearances(); // Create the appearance entry for this annotation.\n\tPDBorderEffectDictionary getBorderEffect(); // This will retrieve the border effect dictionary, specifying effects to be applied used in drawing the line.\n\tPDColor getInteriorColor(); // This will retrieve the interior color of the drawn area color is in DeviceRGB color space.\n\tPDRectangle getRectDifference(); // This will get the rectangle difference rectangle.\n\tfloat[] getRectDifferences(); // This will get the differences between the annotations \"outer\" rectangle defined by /Rect and the border.\n\tvoid setBorderEffect(PDBorderEffectDictionary be); // This will set the border effect dictionary, specifying effects to be applied when drawing the line.\n\tvoid setInteriorColor(PDColor ic); // This will set interior color of the drawn area color is in DeviceRGB colorspace.\n\tvoid setRectDifference(PDRectangle rd); // This will set the rectangle difference rectangle.\n\tvoid setRectDifferences(float difference); // This will set the difference between the annotations \"outer\" rectangle defined by /Rect and the border.\n\tvoid setRectDifferences(float differenceLeft, float differenceTop, float differenceRight, float differenceBottom); // This will set the difference between the annotations \"outer\" rectangle defined by /Rect and the border.\n}"}
{"index": 1385, "repo": "nutch-2.4", "des": "A decorator to Metadata that adds spellchecking capabilities to property names.", "code": "Class SpellCheckedMetadata {\n\tvoid add(java.lang.String name, java.lang.String value); // Add a metadata name/value mapping.\n\tjava.lang.String get(java.lang.String name); // Get the value associated to a metadata name.\n\tstatic java.lang.String getNormalizedName(java.lang.String name); // Get the normalized name of metadata attribute name.\n\tjava.lang.String[] getValues(java.lang.String name); // Get the values associated to a metadata name.\n\tvoid remove(java.lang.String name); // Remove a metadata and all its associated values.\n\tvoid set(java.lang.String name, java.lang.String value); // Set metadata name/value.\n}"}
{"index": 7775, "repo": "cassandra-all-4.1.2", "des": "A Selector is used to convert the data returned by the storage engine into the data requested by the user.", "code": "Class Selector {\n\tabstract void addFetchedColumns(ColumnFilter.Builder builder); // Add to the provided builder the column (and potential subselections) to fetch for this selection.\n\tabstract void addInput(ProtocolVersion protocolVersion, Selector.InputRow input); // Add the current value from the specified ResultSetBuilder.\n\tabstract java.nio.ByteBuffer getOutput(ProtocolVersion protocolVersion); // Returns the selector output.\n\tabstract AbstractType<?> getType(); // Returns the Selector output type.\n\tboolean isTerminal(); // A selector is terminal if it doesn't require any input for it's output to be computed, i.e.\n\tSelector.Kind kind(); // Returns the Selector kind.\n\tabstract void reset(); // Reset the internal state of this Selector.\n\tprotected abstract void serialize(DataOutputPlus out, int version);\n\tprotected abstract int serializedSize(int version);\n\tprotected static int sizeOf(AbstractType<?> type);\n\tvoid validateForGroupBy(); // Checks that this selector is valid for GROUP BY clause.\n\tprotected static void writeType(DataOutputPlus out, AbstractType<?> type);\n}"}
{"index": 8773, "repo": "graal-sdk-1.0.0-rc7", "des": "A function pointer to an entry point method that can be, for example, handed out to C code so that C code can call back into Java code.", "code": "Class CEntryPointLiteral<T extends CFunctionPointer> {\n\tstatic <T extends CFunctionPointer>CEntryPointLiteral<T> create(Class<?> definingClass, String methodName, Class<?>... parameterTypes); // Creates a new function pointer to an entry point.\n\tT getFunctionPointer(); // Returns the function pointer to the entry point.\n}"}
{"index": 15950, "repo": "spring-rabbit-3.0.6", "des": "Central helper that manages resources per thread to be used by resource management code.", "code": "public final class SimpleResourceHolder extends Object {\n\tstatic void bind(Object key, Object value); // Bind the given resource for the given key to the current thread.\n\tstatic void clear(); // Clear resources for the current thread.\n\tstatic Object get(Object key); // Retrieve a resource for the given key that is bound to the current thread.\n\tstatic Map<Object,Object> getResources(); // Return all resources that are bound to the current thread.\n\tstatic boolean has(Object key); // Check if there is a resource for the given key bound to the current thread.\n\tstatic Object pop(Object key); // Unbind the current value and bind the head of the stack if present.\n\tstatic void push(Object key, Object value); // Set the value for this key and push any existing value onto a stack.\n\tstatic Object unbind(Object key); // Unbind a resource for the given key from the current thread.\n\tstatic Object unbindIfPossible(Object key); // Unbind a resource for the given key from the current thread.\n}"}
{"index": 2785, "repo": "tika-parsers-1.28.5", "des": "Specifies an data element hash stream object.", "code": "Class DataElementHash {\n\tprotected void deserializeItemsFromByteArray(byte[] byteArray, AtomicInteger currentIndex, int lengthOfItems); // Used to de-serialize the element.\n\tprotected int serializeItemsToByteList(List<Byte> byteList); // Used to convert the element into a byte List\n}"}
{"index": 9069, "repo": "hbase-server-3.0.0-alpha-4", "des": "A generic interface for the RegionSplitter code to use for all it's functionality.", "code": "Interface RegionSplitter.SplitAlgorithm {\n\tbyte[] firstRow(); // In HBase, the first row is represented by an empty byte array.\n\tbyte[] lastRow(); // In HBase, the last row is represented by an empty byte array.\n\tString rowToStr(byte[] row); // byte array representing a row in HBase\n\tString separator(); // Returns the separator character to use when storing / printing the row\n\tvoid setFirstRow(byte[] userInput); // Set the first row\n\tvoid setFirstRow(String userInput); // In HBase, the last row is represented by an empty byte array.\n\tvoid setLastRow(byte[] userInput); // Set the last row\n\tvoid setLastRow(String userInput); // In HBase, the last row is represented by an empty byte array.\n\tbyte[] split(byte[] start, byte[] end); // Split a pre-existing region into 2 regions.\n\tbyte[][] split(byte[] start, byte[] end, int numSplits, boolean inclusive); // Some MapReduce jobs may want to run multiple mappers per region, this is intended for such usecase.\n\tbyte[][] split(int numRegions); // Split an entire table.\n\tbyte[] strToRow(String input); // user or file input for row\n}"}
{"index": 16786, "repo": "spring-expression-6.0.11", "des": "Expression language AST node that represents a float literal.", "code": "public class FloatLiteral extends Literal {\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode for this node into the supplied visitor.\n\tTypedValue getLiteralValue();\n\tboolean isCompilable(); // Check whether a node can be compiled to bytecode.\n}"}
{"index": 17714, "repo": "spring-web-6.0.11", "des": "Default implementation of WebSessionManager delegating to a WebSessionIdResolver for session id resolution and to a WebSessionStore.", "code": "public class DefaultWebSessionManager extends Object implements WebSessionManager {\n\treactor.core.publisher.Mono<WebSession> getSession(ServerWebExchange exchange); // Return the WebSession for the given exchange.\n\tWebSessionIdResolver getSessionIdResolver(); // Return the configured WebSessionIdResolver.\n\tWebSessionStore getSessionStore(); // Return the configured WebSessionStore.\n\tvoid setSessionIdResolver(WebSessionIdResolver sessionIdResolver); // Configure the id resolution strategy.\n\tvoid setSessionStore(WebSessionStore sessionStore); // Configure the persistence strategy.\n}"}
{"index": 13660, "repo": "spring-webmvc-6.0.11", "des": "A convenient base class for ResponseBodyAdvice implementations that customize the response before JSON serialization with AbstractJackson2HttpMessageConverter's concrete subclasses.", "code": "public abstract class AbstractMappingJacksonResponseBodyAdvice extends Object implements ResponseBodyAdvice<Object> {\n\tfinal Object beforeBodyWrite(Object body, org.springframework.core.MethodParameter returnType, org.springframework.http.MediaType contentType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> converterType, org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response); // Invoked after an HttpMessageConverter is selected and just before its write method is invoked.\n\tprotected abstract void beforeBodyWriteInternal(org.springframework.http.converter.json.MappingJacksonValue bodyContainer, org.springframework.http.MediaType contentType, org.springframework.core.MethodParameter returnType, org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response); // Invoked only if the converter type is MappingJackson2HttpMessageConverter.\n\tprotected org.springframework.http.converter.json.MappingJacksonValue getOrCreateContainer(Object body); // Wrap the body in a MappingJacksonValue value container (for providing additional serialization instructions) or simply cast it if already wrapped.\n\tboolean supports(org.springframework.core.MethodParameter returnType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> converterType); // Whether this component supports the given controller method return type and the selected HttpMessageConverter type.\n}"}
{"index": 14386, "repo": "wicket-core-10.0.0-M1", "des": "Component representing a single radio choice in a org.apache.wicket.markup.html.form.RadioGroup.", "code": "public class Radio<T> extends LabeledWebMarkupContainer implements IGenericComponent<T,Radio<T>> {\n\tprotected RadioGroup<T> getGroup();\n\tprotected boolean getStatelessHint(); // Returns whether the component can be stateless.\n\tString getValue(); // Form submission value used for the Html value attribute of the input tag.\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tRadio<T> setLabel(IModel<String> labelModel); // The value will be made available to the validator property by means of ${label}.\n}"}
{"index": 10044, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Default implementation of ContainerMonitor which simple tracks number of total and completed containers.", "code": "Class DefaultContainerMonitor {\n\tint completedCount(); // Gets a count of completed containers.\n\tint failedCount(); // Gets a count of failed containers.\n\tint freeCount(); // Gets a count of free containers.\n\tvoid onContainer(List<Container> containers); // Called when we potentially have new information about a Containers.\n\tvoid onContainerStatus(List<ContainerStatus> containerStatuses); // Called when we potentially have new information about a ContainerStatuss.\n\tint runningCount(); // Gets a count of running containers.\n\tString toDebugString(); // Gets this class description as a debug string.\n}"}
{"index": 4596, "repo": "commons-vfs2-2.9.0", "des": "Filesytem to handle compressed files using the bzip2 method.", "code": "Class Bzip2FileSystem {\n\tprotected void addCapabilities(Collection<Capability> caps); // Returns the capabilities of this file system.\n\tprotected FileObject createFile(AbstractFileName name); // Creates a file object.\n}"}
{"index": 16133, "repo": "spring-data-cassandra-4.1.2", "des": "Cassandra-specific ParameterAccessor exposing a Cassandra types that are supported by the driver and parameter type.", "code": "public interface CassandraParameterAccessor extends ParameterAccessor {\n\tCassandraType findCassandraType(int index); // Returns the CassandraType for the declared method parameter.\n\tcom.datastax.oss.driver.api.core.type.DataType getDataType(int index); // Returns the Cassandra DataType for the declared parameter if the type is a simple type.\n\tClass<?> getParameterType(int index); // The actual parameter type (after unwrapping).\n\tQueryOptions getQueryOptions(); // Returns the QueryOptions associated with the associated Repository query method.\n\tObject[] getValues(); // Returns the raw parameter values of the underlying query method.\n}"}
{"index": 2602, "repo": "nifi-utils-1.22.0", "des": "Enumeration of standard Flow File Media Types.", "code": "Enum StandardFlowFileMediaType {\n\tString getMediaType(); // Get Media Type Definition with type and subtype components\n\tstatic StandardFlowFileMediaType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic StandardFlowFileMediaType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14432, "repo": "wicket-core-10.0.0-M1", "des": "An AttributeModifier specialized in managing the CSS style attribute", "code": "public abstract class StyleAttributeModifier extends AttributeAppender {\n\tprotected Serializable newValue(String currentValue, String appendValue); // Gets the value that should replace the current attribute value.\n\tprotected abstract Map<String,String> update(Map<String,String> oldStyles); // Callback to update the CSS class values for a tag.\n}"}
{"index": 10332, "repo": "spring-core-6.0.11", "des": "Interface to discover parameter names for methods and constructors.", "code": "public interface ParameterNameDiscoverer {\n\tString[] getParameterNames(Constructor<?> ctor); // Return parameter names for a constructor, or null if they cannot be determined.\n\tString[] getParameterNames(Method method); // Return parameter names for a method, or null if they cannot be determined.\n}"}
{"index": 17110, "repo": "spring-integration-core-6.1.2", "des": "Strategy interface for dispatching messages to handlers.", "code": "public interface MessageDispatcher {\n\tboolean addHandler(org.springframework.messaging.MessageHandler handler); // Add a message handler.\n\tboolean dispatch(org.springframework.messaging.Message<?> message); // Dispatch the message.\n\tint getHandlerCount(); // Return the current handler count.\n\tboolean removeHandler(org.springframework.messaging.MessageHandler handler); // Remove a message handler.\n}"}
{"index": 12047, "repo": "jena-core-4.9.0", "des": "Check that the two args are semantically equal.", "code": "public class Equal extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 9950, "repo": "iceberg-api-1.3.0", "des": "API for table changes that produce snapshots.", "code": "Interface SnapshotUpdate<ThisT> {\n\tThisT deleteWith(java.util.function.Consumer<java.lang.String> deleteFunc); // Set a callback to delete files instead of the table's default.\n\tThisT scanManifestsWith(java.util.concurrent.ExecutorService executorService); // Use a particular executor to scan manifests.\n\tThisT set(java.lang.String property, java.lang.String value); // Set a summary property in the snapshot produced by this update.\n\tThisT stageOnly(); // Called to stage a snapshot in table metadata, but not update the current snapshot id.\n\tdefault ThisT toBranch(java.lang.String branch); // Perform operations on a particular branch\n}"}
{"index": 12831, "repo": "spring-data-mongodb-4.1.2", "des": "Compose find execution by calling one of the terminating methods.", "code": "public static interface ReactiveFindOperation.TerminatingFind<T> {\n\treactor.core.publisher.Flux<T> all(); // Get all matching elements.\n\treactor.core.publisher.Mono<Long> count(); // Get the number of matching elements.\n\treactor.core.publisher.Mono<Boolean> exists(); // Check for the presence of matching elements.\n\treactor.core.publisher.Mono<T> first(); // Get the first or no result.\n\treactor.core.publisher.Mono<T> one(); // Get exactly zero or one result.\n\treactor.core.publisher.Mono<Window<T>> scroll(ScrollPosition scrollPosition); // Return a scroll of elements either starting or resuming at ScrollPosition.\n\treactor.core.publisher.Flux<T> tail(); // Get all matching elements using a tailable cursor.\n}"}
{"index": 18335, "repo": "opencms-core-15.0", "des": "Default action handler for group buttons.", "code": "Class CmsDefaultActionHandler {\n\tvoid onAdd(); // Triggered when the 'add' button is clicked.\n\tvoid onDelete(); // Triggered when the 'delete' button is clicked.\n\tvoid onDown(); // Triggered when the 'down' button is clicked.\n\tvoid onEdit(); // Triggered when the 'edit' button is clicked.\n\tvoid onUp(); // Triggered when the 'up' button is clicked.\n}"}
{"index": 15659, "repo": "spring-security-core-6.1.2", "des": "Provides a cache of UserDetails objects.", "code": "public interface UserCache {\n\tUserDetails getUserFromCache(String username); // Obtains a UserDetails from the cache.\n\tvoid putUserInCache(UserDetails user); // Places a UserDetails in the cache.\n\tvoid removeUserFromCache(String username); // Removes the specified user from the cache.\n}"}
{"index": 1110, "repo": "ignite-core-2.15.0", "des": "Wrapper around job created in native platform.", "code": "Class PlatformFullJob {\n\tvoid cancel(); // This method is called when system detects that completion of this job can no longer alter the overall outcome (for example, when parent task has already reduced the results).\n\t@Nullable Object execute0(PlatformContext ctx); // Internal job execution routine.\n\tvoid readExternal(ObjectInput in);\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 8904, "repo": "hbase-server-3.0.0-alpha-4", "des": "A RegionSplitRestriction implementation that groups rows by a prefix of the row-key with a delimiter.", "code": "Class DelimitedKeyPrefixRegionSplitRestriction {\n\tbyte[] getRestrictedSplitPoint(byte[] splitPoint); // Returns a restricted split point.\n\tvoid initialize(TableDescriptor tableDescriptor, org.apache.hadoop.conf.Configuration conf); // Initialize the RegionSplitRestriction instance\n}"}
{"index": 5821, "repo": "iceberg-core-1.3.0", "des": "The writer interface could accept records and provide the generated data files.", "code": "Interface TaskWriter<T> {\n\tvoid abort(); // Close the writer and delete the completed files if possible when aborting.\n\tWriteResult complete(); // Close the writer and get the completed data and delete files.\n\tdefault org.apache.iceberg.DataFile[] dataFiles(); // Close the writer and get the completed data files, it requires that the task writer would produce data files only.\n\tvoid write(T row); // Write the row into the data files.\n}"}
{"index": 9527, "repo": "commons-math3-3.6.1", "des": "Base class for all bracketing Secant-based methods for root-finding (approximating a zero of a univariate real function).", "code": "Class BaseSecantSolver {\n\tprotected double doSolve(); // Method for implementing actual optimization algorithms in derived classes.\n\tdouble solve(int maxEval, UnivariateFunction f, double min, double max, AllowedSolution allowedSolution); // Solve for a zero in the given interval.\n\tdouble solve(int maxEval, UnivariateFunction f, double min, double max, double startValue); // Solve for a zero in the given interval, start at startValue.\n\tdouble solve(int maxEval, UnivariateFunction f, double min, double max, double startValue, AllowedSolution allowedSolution); // Solve for a zero in the given interval, start at startValue.\n}"}
{"index": 11699, "repo": "spring-cloud-commons-3.1.7", "des": "The default implementation of LoadBalancerRetryPolicy.", "code": "public class RetryableExchangeFilterFunctionLoadBalancerRetryPolicy extends Object implements LoadBalancerRetryPolicy {\n\tboolean canRetryNextServiceInstance(LoadBalancerRetryContext context); // Return true to retry on the next service instance.\n\tboolean canRetryOnMethod(org.springframework.http.HttpMethod method); // Return true to retry on the provided HTTP method.\n\tboolean canRetrySameServiceInstance(LoadBalancerRetryContext context); // Return true to retry on the same service instance.\n\tboolean retryableStatusCode(int statusCode); // Return true to retry on the provided HTTP status code.\n}"}
{"index": 7720, "repo": "cassandra-all-4.1.2", "des": "This class serves as an entry-point to Cassandra's implementation of Paxos Consensus.", "code": "Class Paxos {\n\tstatic Ballot ballotForConsistency(long whenInMicros, ConsistencyLevel consistency); // Create a ballot uuid with the consistency level encoded in the timestamp.\n\tstatic RowIterator cas(DecoratedKey key, CASRequest request, ConsistencyLevel consistencyForConsensus, ConsistencyLevel consistencyForCommit, ClientState clientState); // Apply @param updates if and only if the current values in the row for @param key match the provided @param conditions.\n\tstatic RowIterator cas(DecoratedKey key, CASRequest request, ConsistencyLevel consistencyForConsensus, ConsistencyLevel consistencyForCommit, ClientState clientState, long proposeDeadline, long commitDeadline);\n\tstatic ConsistencyLevel consistency(Ballot ballot);\n\tstatic void evictHungRepairs();\n\tstatic Config.PaxosVariant getPaxosVariant();\n\tstatic boolean isInRangeAndShouldProcess(InetAddressAndPort from, DecoratedKey key, TableMetadata table, boolean includesRead);\n\tstatic boolean isLinearizable();\n\tstatic Ballot newBallot(Ballot minimumBallot, ConsistencyLevel consistency);\n\tstatic PartitionIterator read(SinglePartitionReadCommand.Group group, ConsistencyLevel consistencyForConsensus);\n\tstatic PartitionIterator read(SinglePartitionReadCommand.Group group, ConsistencyLevel consistencyForConsensus, long deadline);\n\tstatic void setPaxosVariant(Config.PaxosVariant paxosVariant);\n\tstatic boolean useV2();\n}"}
{"index": 787, "repo": "ignite-core-2.15.0", "des": "Wrapper class around the Process suited to run any Java class as separate java process.", "code": "Class GridJavaProcess {\n\tstatic GridJavaProcess exec(Class cls, String params, @Nullable IgniteLogger log, @Nullable IgniteInClosure<String> printC, @Nullable GridAbsClosure procKilledC); // Executes main() method of the given class in a separate system process.\n\tstatic GridJavaProcess exec(Class cls, String params, @Nullable IgniteLogger log, @Nullable IgniteInClosure<String> printC, @Nullable GridAbsClosure procKilledC, @Nullable Collection<String> jvmArgs, @Nullable String cp); // Executes main() method of the given class in a separate system process.\n\tstatic GridJavaProcess exec(String clsName, String params, @Nullable IgniteLogger log, @Nullable IgniteInClosure<String> printC, @Nullable GridAbsClosure procKilledC, @Nullable String javaHome, @Nullable Collection<String> jvmArgs, @Nullable String cp); // Executes main() method of the given class in a separate system process.\n\tint getPid(); // Returns pid of the java process.\n\tProcess getProcess(); // Exposes wrapped java Process.\n\tvoid kill(); // Kills the java process.\n\tvoid killProcess(); // Kills process using Process.destroy().\n\tstatic String resolveJavaBin(@Nullable String javaHome); // Resolves path to java binary (that can be executed using exec).\n\tvoid suspend(); // Suspends the process.\n}"}
{"index": 10654, "repo": "groovy-all-4.0.13", "des": "A template engine is a factory for creating a Template instance for a given text input.", "code": "public abstract class TemplateEngine extends Object {\n\tTemplate createTemplate(File file); // Creates a template from the File contents.\n\tTemplate createTemplate(File file, Charset cs); // Creates a template from the File contents using the given charset encoding.\n\tabstract Template createTemplate(Reader reader); // Creates a template by reading content from the Reader.\n\tTemplate createTemplate(String templateText); // Creates a template from the String contents.\n\tTemplate createTemplate(URL url); // Creates a template from the content found at the URL using the default encoding.\n\tTemplate createTemplate(URL url, Charset cs); // Creates a template from the content found at the URL using the given charset encoding.\n}"}
{"index": 10097, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "AnnotationBuilder for ResourceLocalizer.", "code": "Class YarnResourceLocalizerBuilder {\n\tvoid configuration(Configuration configuration);\n\tYarnResourceLocalizerConfigurer defaultLocalResourceType(LocalResourceType type);\n\tYarnResourceLocalizerConfigurer defaultLocalResourceVisibility(LocalResourceVisibility visibility);\n\tprotected ResourceLocalizer performBuild();\n\tvoid setCopyEntries(Collection<LocalResourcesFactoryBean.CopyEntry> copyEntries);\n\tvoid setHdfsEntries(Collection<LocalResourcesFactoryBean.TransferEntry> transferEntries);\n\tvoid setHdfsEntries(String id, Collection<LocalResourcesFactoryBean.TransferEntry> transferEntries);\n\tvoid setRawCopyEntries(Collection<LocalResourcesFactoryBean.RawCopyEntry> rawEntries);\n\tYarnResourceLocalizerConfigurer stagingDirectory(String stagingDirectory); // Specify a staging directory.\n\tLocalResourcesCopyConfigurer withCopy(); // Specify configuration options as properties with a DefaultLocalResourcesCopyConfigurer.\n\tLocalResourcesHdfsConfigurer withHdfs(); // Specify configuration options as properties with a DefaultLocalResourcesHdfsConfigurer.\n\tLocalResourcesHdfsConfigurer withHdfs(String id); // Specify configuration options as properties with a DefaultLocalResourcesHdfsConfigurer with an identifier.\n}"}
{"index": 1481, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a dictionary of actions that occur due to events.", "code": "Class PDAdditionalActions {\n\tCOSDictionary getCOSObject(); // Convert this standard java object to a COS object.\n\tPDAction getF(); // Get the F action.\n\tvoid setF(PDAction action); // Set the F action.\n}"}
{"index": 16107, "repo": "spring-data-cassandra-4.1.2", "des": "Base class for reactive RepositoryQuery implementations for Cassandra.", "code": "public abstract class AbstractReactiveCassandraQuery extends CassandraRepositoryQuerySupport {\n\tprotected abstract reactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.SimpleStatement> createQuery(CassandraParameterAccessor accessor); // Creates a string query using the given ParameterAccessor\n\tObject execute(Object[] parameters);\n\tReactiveCassandraQueryMethod getQueryMethod();\n\tprotected ReactiveCassandraOperations getReactiveCassandraOperations();\n\tprotected abstract boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected abstract boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected abstract boolean isLimiting(); // Return whether the query has an explicit limit set.\n\tprotected abstract boolean isModifyingQuery(); // Returns whether the query is a modifying query.\n}"}
{"index": 18239, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Used to specify the SchemaFilters to be used by create, drop, migrate and validate operations on the database schema.", "code": "Interface SchemaFilterProvider {\n\tSchemaFilter getCreateFilter(); // Get the filter to be applied to SchemaCreator processing\n\tSchemaFilter getDropFilter(); // Get the filter to be applied to SchemaDropper processing\n\tSchemaFilter getMigrateFilter(); // Get the filter to be applied to SchemaMigrator processing\n\tSchemaFilter getValidateFilter(); // Get the filter to be applied to SchemaValidator processing\n}"}
{"index": 11318, "repo": "spring-context-6.0.11", "des": "Factory that creates a JSR-310 DateTimeFormatter.", "code": "public class DateTimeFormatterFactory extends Object {\n\tDateTimeFormatter createDateTimeFormatter(); // Create a new DateTimeFormatter using this factory.\n\tDateTimeFormatter createDateTimeFormatter(DateTimeFormatter fallbackFormatter); // Create a new DateTimeFormatter using this factory.\n\tvoid setDateStyle(FormatStyle dateStyle); // Set the style to use for date types.\n\tvoid setDateTimeStyle(FormatStyle dateTimeStyle); // Set the style to use for date and time types.\n\tvoid setIso(DateTimeFormat.ISO iso); // Set the ISO format used to format date values.\n\tvoid setPattern(String pattern); // Set the pattern to use to format date values.\n\tvoid setStylePattern(String style); // Set the two characters to use to format date values, in Joda-Time style.\n\tvoid setTimeStyle(FormatStyle timeStyle); // Set the style to use for time types.\n\tvoid setTimeZone(TimeZone timeZone); // Set the TimeZone to normalize the date values into, if any.\n}"}
{"index": 12620, "repo": "spring-data-mongodb-4.1.2", "des": "The context for an AggregationOperation.", "code": "public interface AggregationOperationContext extends CodecRegistryProvider {\n\tdefault AggregationOperationContext continueOnMissingFieldReference(); // This toggle allows the context to use any given field name without checking for its existence.\n\tdefault org.bson.codecs.configuration.CodecRegistry getCodecRegistry(); // Get the underlying CodecRegistry used by the MongoDB Java driver.\n\tdefault Fields getFields(Class<?> type); // Returns the Fields exposed by the type.\n\tdefault org.bson.Document getMappedObject(org.bson.Document document); // Returns the mapped Document, potentially converting the source considering mapping metadata etc.\n\torg.bson.Document getMappedObject(org.bson.Document document, Class<?> type); // Returns the mapped Document, potentially converting the source considering mapping metadata for the given type.\n\tExposedFields.FieldReference getReference(String name); // Returns the ExposedFields.FieldReference for the field with the given name.\n\tExposedFields.FieldReference getReference(Field field); // Returns a ExposedFields.FieldReference for the given field.\n}"}
{"index": 14089, "repo": "wicket-core-10.0.0-M1", "des": "An abstract repeater view that provides paging functionality to its subclasses.", "code": "public abstract class AbstractPageableView<T> extends RefreshingView<T> implements IPageableItems {\n\tfinal long getCurrentPage();\n\tlong getFirstItemOffset();\n\tfinal long getItemCount(); // Get the item count.\n\tprotected Iterator<IModel<T>> getItemModels(); // This method retrieves the subset of models for items in the current page and allows RefreshingView to generate items.\n\tprotected abstract Iterator<IModel<T>> getItemModels(long offset, long size); // Returns an iterator over models for items in the current page\n\tlong getItemsPerPage(); // maximum number of visible items per page\n\tlong getPageCount(); // Gets the total number of pages this pageable object has.\n\tfinal long getRowCount(); // Get the row count.\n\tlong getViewSize();\n\tprotected abstract long internalGetItemCount();\n\tprotected void onBeforeRender(); // Called on all visible components before any component is rendered.\n\tprotected void onDetach(); // Called to allow a component to detach resources after use.\n\tfinal void setCurrentPage(long page); // Sets the a page that should be rendered (page number is zero-based)\n\tfinal void setItemsPerPage(long items); // Sets the maximum number of items to show per page.\n}"}
{"index": 7550, "repo": "cassandra-all-4.1.2", "des": "A clustering prefix is the unit of what a ClusteringComparator can compare.", "code": "Interface ClusteringPrefix<V> {\n\tValueAccessor<V> accessor();\n\tdefault java.nio.ByteBuffer bufferAt(int i);\n\tdefault int dataSize(); // The size of the data hold by this prefix.\n\tdefault void digest(Digest digest); // Adds the data of this clustering prefix to the provided Digest instance.\n\tstatic boolean equals(ClusteringPrefix<?> prefix, java.lang.Object o);\n\tstatic <V1,V2> boolean equals(ClusteringPrefix<V1> left, ClusteringPrefix<V2> right);\n\tV get(int i); // Retrieves the ith value of this prefix.\n\tjava.nio.ByteBuffer[] getBufferArray();\n\tV[] getRawValues(); // The values of this prefix as an array.\n\tstatic <V> int hashCode(ClusteringPrefix<V> prefix);\n\tdefault boolean isBottom();\n\tdefault boolean isEmpty();\n\tdefault boolean isTop();\n\tClusteringPrefix.Kind kind();\n\tClusteringPrefix<V> minimize(); // If the prefix contains byte buffers that can be minimized (see ByteBufferUtil.minimalBufferFor(ByteBuffer)), this will return a copy of the prefix with minimized values, otherwise it returns itself.\n\tdefault java.nio.ByteBuffer serializeAsPartitionKey();\n\tint size(); // The number of values in this prefix.\n\tdefault java.lang.String stringAt(int i, ClusteringComparator comparator);\n\tjava.lang.String toString(TableMetadata metadata); // Generates a proper string representation of the prefix.\n\tdefault void validate(int i, ClusteringComparator comparator);\n}"}
{"index": 1004, "repo": "ignite-core-2.15.0", "des": "Like a sharp checkpoint algorithm implemented in CheckpointManager this checkpoint ensures that all pages marked dirty under checkpointTimeoutLock() will be consistently saved to disk.", "code": "Class LightweightCheckpointManager {\n\tvoid addCheckpointListener(CheckpointListener lsnr, DataRegion dataRegion);\n\tboolean cancelOrWaitPartitionDestroy(int grpId, int partId);\n\tCheckpointTimeoutLock checkpointTimeoutLock();\n\tIgniteInternalFuture<Void> enableCheckpoints(boolean enable); // For test use only.\n\tvoid finalizeCheckpointOnRecovery(long ts, UUID id, WALPointer ptr, StripedExecutor exec);\n\t<R> CheckpointProgress forceCheckpoint(String reason, IgniteInClosure<? super IgniteInternalFuture<R>> lsnr); // Start the new checkpoint immediately.\n\tCheckpointer getCheckpointer();\n\tvoid init(); // Initialize the checkpoint and prepare it to work.\n\tvoid memoryRecoveryRecordPtr(WALPointer memoryRecoveryRecordPtr);\n\tvoid removeCheckpointListener(CheckpointListener lsnr);\n\tvoid schedulePartitionDestroy(@Nullable CacheGroupContext context, int groupId, int partId);\n\tvoid start(); // Checkpoint starts to do their work after this method.\n\tvoid stop(boolean cancel);\n\tvoid threadBuf(ThreadLocal<ByteBuffer> threadBuf); // Replace thread local with buffers.\n\tvoid unblockCheckpointLock(); // Checkpoint lock blocks when stop method is called.\n}"}
{"index": 18460, "repo": "opencms-core-15.0", "des": "Interface of the \"Did you mean ...?\" configuration for the JSP search form.", "code": "Interface I_CmsSearchConfigurationDidYouMean {\n\tboolean getCollate(); // Returns a flag, indicating if collation is turned on or off.\n\tint getCount(); // Returns the maximal number of suggestions.\n\tjava.lang.String getQueryParam(); // Returns the parameter name of the request parameter used to send the current query string for spellchecking.\n}"}
{"index": 12321, "repo": "jena-core-4.9.0", "des": "Builtin data type to represent XMLLiteral (i.e.", "code": "public class XMLLiteralType extends BaseDatatype implements RDFDatatype {\n\tboolean isValid(String lexicalForm); // Test whether the given string is a legal lexical form of this datatype.\n\tObject parse(String lexicalForm); // Parse a lexical form of this datatype to a value\n\tString unparse(Object value); // Convert a serialize a value of this datatype out to lexical form.\n}"}
{"index": 3385, "repo": "hadoop-azure-3.3.6", "des": "Class implementing WasbAuthorizerInterface using a remote service that implements the authorization operation.", "code": "Class RemoteWasbAuthorizerImpl {\n\tboolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner); // Authorizer API to authorize access in WASB.\n\tvoid init(org.apache.hadoop.conf.Configuration conf); // Initializer method\n\tvoid updateWasbRemoteCallHelper(WasbRemoteCallHelper helper);\n}"}
{"index": 9189, "repo": "fontbox-3.0.0-beta1", "des": "This class represents a single character metric.", "code": "Class CharMetric {\n\tvoid addLigature(Ligature ligature); // This will add an entry to the list of ligatures.\n\tBoundingBox getBoundingBox(); // Getter for property boundingBox.\n\tint getCharacterCode(); // Getter for property characterCode.\n\tList<Ligature> getLigatures(); // Getter for property ligatures.\n\tString getName(); // Getter for property name.\n\tfloat[] getVv(); // Getter for property vv.\n\tfloat[] getW(); // Getter for property w.\n\tfloat[] getW0(); // Getter for property w0.\n\tfloat getW0x(); // Getter for property w0x.\n\tfloat getW0y(); // Getter for property w0y.\n\tfloat[] getW1(); // Getter for property w1.\n\tfloat getW1x(); // Getter for property w1x.\n\tfloat getW1y(); // Getter for property w1y.\n\tfloat getWx(); // Getter for property wx.\n\tfloat getWy(); // Getter for property wy.\n\tvoid setBoundingBox(BoundingBox bBox); // Setter for property boundingBox.\n\tvoid setCharacterCode(int cCode); // Setter for property characterCode.\n\tvoid setName(String n); // Setter for property name.\n\tvoid setVv(float[] vvValue); // Setter for property vv.\n\tvoid setW(float[] wValue); // Setter for property w.\n\tvoid setW0(float[] w0Value); // Setter for property w0.\n\tvoid setW0x(float w0xValue); // Setter for property w0x.\n\tvoid setW0y(float w0yValue); // Setter for property w0y.\n\tvoid setW1(float[] w1Value); // Setter for property w1.\n\tvoid setW1x(float w1xValue); // Setter for property w1x.\n\tvoid setW1y(float w1yValue); // Setter for property w1y.\n\tvoid setWx(float wxValue); // Setter for property wx.\n\tvoid setWy(float wyValue); // Setter for property wy.\n}"}
{"index": 4688, "repo": "commons-geometry-core-1.0", "des": "Enum representing the result of a BSP tree node visit operation.", "code": "Enum BSPTreeVisitor.Result {\n\tstatic BSPTreeVisitor.Result valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic BSPTreeVisitor.Result[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5615, "repo": "org.apache.karaf.main-2.4.4", "des": "Provides methods to access the information contained in an individual Log Service log entry.", "code": "Interface LogEntry {\n\tBundle getBundle(); // Returns the bundle that created this LogEntry object.\n\tThrowable getException(); // Returns the exception object associated with this LogEntry object.\n\tint getLevel(); // Returns the severity level of this LogEntry object.\n\tString getMessage(); // Returns the human readable message associated with this LogEntry object.\n\tServiceReference getServiceReference(); // Returns the ServiceReference object for the service associated with this LogEntry object.\n\tlong getTime(); // Returns the value of currentTimeMillis() at the time this LogEntry object was created.\n}"}
{"index": 13161, "repo": "spring-test-6.0.11", "des": "AopTestUtils is a collection of AOP-related utility methods for use in unit and integration testing scenarios.", "code": "public abstract class AopTestUtils extends Object {\n\tstatic <T> T getTargetObject(Object candidate); // Get the target object of the supplied candidate object.\n\tstatic <T> T getUltimateTargetObject(Object candidate); // Get the ultimate target object of the supplied candidate object, unwrapping not only a top-level proxy but also any number of nested proxies.\n}"}
{"index": 4872, "repo": "hadoop-common-3.3.4", "des": "Options that can be used when reading from a FileSystem.", "code": "Enum ReadOption {\n\tstatic ReadOption valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ReadOption[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3451, "repo": "spring-metrics-0.5.1.RELEASE", "des": "This class is an implementation of the Greenwald-Khanna algorithm for computing epsilon-approximate quantiles of large data sets.", "code": "Class GKQuantiles {\n\tjava.lang.Double get(double q); // Estimates appropriate quantiles (i.e.\n\tjava.lang.Integer getCount();\n\tjava.util.Collection<java.lang.Double> monitored(); // Get all monitored quantiles\n\tvoid observe(double value); // Add a sample\n\tstatic GKQuantiles.Builder quantiles(double... quantiles);\n\tvoid setEpsilon(double epsilon);\n}"}
{"index": 7820, "repo": "cassandra-all-4.1.2", "des": "A terminal term, one that can be reduced to a byte buffer directly.", "code": "Class Term.Terminal {\n\tvoid addFunctionsTo(java.util.List<Function> functions);\n\tTerm.Terminal bind(QueryOptions options); // Bind the values in this term to the values contained in values.\n\tjava.nio.ByteBuffer bindAndGet(QueryOptions options); // A shorter for bind(values).get().\n\tvoid collectMarkerSpecification(VariableSpecifications boundNames); // Collects the column specification for the bind variables in this Term.\n\tboolean containsBindMarker(); // Whether or not that term contains at least one bind marker.\n\tabstract java.nio.ByteBuffer get(ProtocolVersion protocolVersion);\n\tboolean isTerminal(); // Whether that term is terminal (this is a shortcut for this instanceof Term.Terminal).\n}"}
{"index": 8906, "repo": "hbase-server-3.0.0-alpha-4", "des": "A RegionSplitPolicy that disables region splits.", "code": "Class DisabledRegionSplitPolicy {\n\tprotected boolean canSplit(); // Returns true if the specified region can be split.\n\tprotected boolean shouldSplit(); // Returns true if the specified region should be split.\n}"}
{"index": 634, "repo": "ignite-core-2.15.0", "des": "Inline index key implementation for inlining DateIndexKey values.", "code": "Class DateInlineIndexKeyType {\n\tint compare0(long pageAddr, int off, IndexKey key); // Compares inlined and given value.\n\tprotected DateIndexKey get0(long pageAddr, int off); // Restores value from inline.\n\tprotected int inlineSize0(DateIndexKey key); // Return inlined size for specified key.\n\tboolean isComparableTo(IndexKey key);\n\tprotected int put0(long pageAddr, int off, DateIndexKey key, int maxSize); // Puts given value into inline index tree.\n}"}
{"index": 5029, "repo": "commons-collections-3.2.2", "des": "Defines a map that holds a collection of values against each key.", "code": "Interface MultiMap {\n\tboolean containsValue(Object value); // Checks whether the map contains the value specified.\n\tObject get(Object key); // Gets the collection of values associated with the specified key.\n\tObject put(Object key, Object value); // Adds the value to the collection associated with the specified key.\n\tObject remove(Object key); // Removes all values associated with the specified key.\n\tObject remove(Object key, Object item); // Removes a specific value from map.\n\tint size(); // Gets the number of keys in this map.\n\tCollection values(); // Gets a collection containing all the values in the map.\n}"}
{"index": 4987, "repo": "commons-collections-3.2.2", "des": "Adapter to make Enumeration instances appear to be Iterator instances.", "code": "Class EnumerationIterator {\n\tEnumeration getEnumeration(); // Returns the underlying enumeration.\n\tboolean hasNext(); // Returns true if the underlying enumeration has more elements.\n\tObject next(); // Returns the next object from the enumeration.\n\tvoid remove(); // Removes the last retrieved element if a collection is attached.\n\tvoid setEnumeration(Enumeration enumeration); // Sets the underlying enumeration.\n}"}
{"index": 16608, "repo": "spring-beans-6.0.11", "des": "Default object instantiation strategy for use in BeanFactories.", "code": "public class CglibSubclassingInstantiationStrategy extends SimpleInstantiationStrategy {\n\tClass<?> getActualBeanClass(RootBeanDefinition bd, String beanName, BeanFactory owner); // Determine the actual class for the given bean definition, as instantiated at runtime.\n\tprotected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner); // Subclasses can override this method, which is implemented to throw UnsupportedOperationException, if they can instantiate an object with the Method Injection specified in the given RootBeanDefinition.\n\tprotected Object instantiateWithMethodInjection(RootBeanDefinition bd, String beanName, BeanFactory owner, Constructor<?> ctor, Object... args); // Subclasses can override this method, which is implemented to throw UnsupportedOperationException, if they can instantiate an object with the Method Injection specified in the given RootBeanDefinition.\n}"}
{"index": 13293, "repo": "spring-security-cas-6.1.2", "des": "Used by the ExceptionTranslationFilter to commence authentication via the JA-SIG Central Authentication Service (CAS).", "code": "public class CasAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tfinal void commence(jakarta.servlet.http.HttpServletRequest servletRequest, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException authenticationException);\n\tprotected String createRedirectUrl(String serviceUrl); // Constructs the Url for Redirection to the CAS server.\n\tprotected String createServiceUrl(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Constructs a new Service Url.\n\tprotected boolean getEncodeServiceUrlWithSessionId(); // Sets whether to encode the service url with the session id or not.\n\tfinal String getLoginUrl(); // The enterprise-wide CAS login URL.\n\tfinal ServiceProperties getServiceProperties();\n\tprotected void preCommence(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Template method for you to do your own pre-processing before the redirect occurs.\n\tfinal void setEncodeServiceUrlWithSessionId(boolean encodeServiceUrlWithSessionId); // Sets whether to encode the service url with the session id or not.\n\tfinal void setLoginUrl(String loginUrl);\n\tfinal void setServiceProperties(ServiceProperties serviceProperties);\n}"}
{"index": 7665, "repo": "cassandra-all-4.1.2", "des": "The KeyAnalyzer provides bit-level access to keys for the PatriciaTrie.", "code": "Interface KeyAnalyzer<K> {\n\tint bitIndex(K key, K otherKey); // Returns the index of the first bit that is different in the two keys.\n\tboolean isBitSet(K key, int bitIndex); // Returns true if a key's bit it set at the given index.\n\tboolean isPrefix(K key, K prefix); // Returns true if the second argument is a prefix of the first argument.\n\tint lengthInBits(K key); // Returns the key's length in bits.\n}"}
{"index": 6017, "repo": "commons-lang3-3.12.0", "des": "Helpers to process Strings using regular expressions.", "code": "Class RegExUtils {\n\tstatic String removeAll(String text, Pattern regex); // Removes each substring of the text String that matches the given regular expression pattern.\n\tstatic String removeAll(String text, String regex); // Removes each substring of the text String that matches the given regular expression.\n\tstatic String removeFirst(String text, Pattern regex); // Removes the first substring of the text string that matches the given regular expression pattern.\n\tstatic String removeFirst(String text, String regex); // Removes the first substring of the text string that matches the given regular expression.\n\tstatic String removePattern(String text, String regex); // Removes each substring of the source String that matches the given regular expression using the DOTALL option.\n\tstatic String replaceAll(String text, Pattern regex, String replacement); // Replaces each substring of the text String that matches the given regular expression pattern with the given replacement.\n\tstatic String replaceAll(String text, String regex, String replacement); // Replaces each substring of the text String that matches the given regular expression with the given replacement.\n\tstatic String replaceFirst(String text, Pattern regex, String replacement); // Replaces the first substring of the text string that matches the given regular expression pattern with the given replacement.\n\tstatic String replaceFirst(String text, String regex, String replacement); // Replaces the first substring of the text string that matches the given regular expression with the given replacement.\n\tstatic String replacePattern(String text, String regex, String replacement); // Replaces each substring of the source String that matches the given regular expression with the given replacement using the Pattern.DOTALL option.\n}"}
{"index": 15965, "repo": "wicket-util-10.0.0-M1", "des": "Holds an change-delta between to revisions of a text.", "code": "public class ChangeDelta extends Delta {\n\tvoid accept(RevisionVisitor visitor); // Accepts a visitor.\n\tvoid applyTo(List<Object> target); // Applies this delta as a patch to the given text.\n\tvoid toRCSString(StringBuilder s, String EOL); // Converts this delta into its RCS style string representation.\n\tvoid toString(StringBuilder s); // Converts this delta into its Unix diff style string representation.\n\tvoid verify(List<Object> target); // Verifies that this delta can be used to patch the given text.\n}"}
{"index": 8600, "repo": "commons-io-2.13.0", "des": "Character stream that handles all the necessary Voodoo to figure out the charset encoding of the XML document within the stream.", "code": "Class XmlStreamReader {\n\tstatic XmlStreamReader.Builder builder(); // Constructs a new XmlStreamReader.Builder.\n\tvoid close(); // Closes the XmlStreamReader stream.\n\tString getDefaultEncoding(); // Gets the default encoding to use if none is set in HTTP content-type, XML prolog and the rules based on content-type are not adequate.\n\tString getEncoding(); // Gets the charset encoding of the XmlStreamReader.\n\tint read(char[] buf, int offset, int len); // Reads the underlying reader's read(char[], int, int) method.\n}"}
{"index": 215, "repo": "commons-collections4-4.4", "des": "Decorates another Set to validate that all additions match a specified predicate.", "code": "Class PredicatedSet<E> {\n\tprotected Set<E> decorated(); // Gets the set being decorated.\n\tboolean equals(Object object);\n\tstatic <E> PredicatedSet<E> predicatedSet(Set<E> set, Predicate<? super E> predicate); // Factory method to create a predicated (validating) set.\n}"}
{"index": 2404, "repo": "commons-geometry-euclidean-1.0", "des": "This class represents vectors and points in one-dimensional Euclidean space.", "code": "Class Vector1D {\n\tVector1D add(double factor, Vector1D v);\n\tVector1D add(Vector1D v);\n\tdouble angle(Vector1D v);\n\tVector1D.Unit directionTo(Vector1D v); // Return the unit vector representing the direction of displacement from this vector to the given vector.\n\tdouble distance(Vector1D v);\n\tdouble distanceSq(Vector1D v);\n\tdouble dot(Vector1D v);\n\tboolean eq(Vector1D vec, Precision.DoubleEquivalence precision); // Return true if the current instance and given vector are considered equal as evaluated by the given precision context.\n\tboolean equals(Object other); // Test for the equality of two vectors.\n\tint getDimension();\n\tdouble getX(); // Returns the abscissa (coordinate value) of the instance.\n\tVector1D getZero();\n\tboolean isFinite();\n\tboolean isInfinite();\n\tboolean isNaN();\n\tVector1D lerp(Vector1D p, double t); // Get a vector constructed by linearly interpolating between this vector and the given vector.\n\tVector1D multiply(double a);\n\tVector1D negate();\n\tdouble norm();\n\tVector1D.Unit normalize();\n\tVector1D.Unit normalizeOrNull();\n\tdouble normSq();\n\tstatic Vector1D of(double x); // Returns a vector with the given coordinate value.\n\tstatic Vector1D parse(String str); // Parses the given string and returns a new vector instance.\n\tVector1D subtract(double factor, Vector1D v);\n\tVector1D subtract(Vector1D v);\n\tVector1D transform(UnaryOperator<Vector1D> fn); // Convenience method to apply a function to this vector.\n\tVector1D vectorTo(Vector1D v); // Return the vector representing the displacement from this vector to the given vector.\n\tVector1D withNorm(double magnitude);\n}"}
{"index": 9673, "repo": "commons-math3-3.6.1", "des": "This class implements the standard Jacobi (diagonal) preconditioner.", "code": "Class JacobiPreconditioner {\n\tstatic JacobiPreconditioner create(RealLinearOperator a); // Creates a new instance of this class.\n\tint getColumnDimension(); // Returns the dimension of the domain of this operator.\n\tint getRowDimension(); // Returns the dimension of the codomain of this operator.\n\tRealVector operate(RealVector x); // Returns the result of multiplying this by the vector x.\n\tRealLinearOperator sqrt(); // Returns the square root of this diagonal operator.\n}"}
{"index": 13909, "repo": "spring-webflux-6.0.11", "des": "A simple ResourceResolver that tries to find a resource under the given locations matching to the request path.", "code": "public class PathResourceResolver extends AbstractResourceResolver {\n\tprotected boolean checkResource(org.springframework.core.io.Resource resource, org.springframework.core.io.Resource location); // Perform additional checks on a resolved resource beyond checking whether the resource exists and is readable.\n\torg.springframework.core.io.Resource[] getAllowedLocations();\n\tprotected reactor.core.publisher.Mono<org.springframework.core.io.Resource> getResource(String resourcePath, org.springframework.core.io.Resource location); // Find the resource under the given location.\n\tprotected reactor.core.publisher.Mono<org.springframework.core.io.Resource> resolveResourceInternal(org.springframework.web.server.ServerWebExchange exchange, String requestPath, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n\tprotected reactor.core.publisher.Mono<String> resolveUrlPathInternal(String path, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n\tvoid setAllowedLocations(org.springframework.core.io.Resource... locations); // By default, when a Resource is found, the path of the resolved resource is compared to ensure it's under the input location where it was found.\n}"}
{"index": 9575, "repo": "commons-math3-3.6.1", "des": "Default implementation of the RealMatrixChangingVisitor interface.", "code": "Class DefaultRealMatrixChangingVisitor {\n\tdouble end(); // End visiting a matrix.\n\tvoid start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn); // Start visiting a matrix.\n\tdouble visit(int row, int column, double value); // Visit one matrix entry.\n}"}
{"index": 16823, "repo": "spring-expression-6.0.11", "des": "Expression language AST node that represents a string literal.", "code": "public class StringLiteral extends Literal {\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode for this node into the supplied visitor.\n\tTypedValue getLiteralValue();\n\tboolean isCompilable(); // Check whether a node can be compiled to bytecode.\n}"}
{"index": 9288, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "ResourcePlugin is an interface for node manager to easier support discovery/manage/isolation for new resource types.", "code": "Interface ResourcePlugin {\n\tvoid cleanup(); // Do cleanup of the plugin, this will be invoked when NodeManager stops\n\tResourceHandler createResourceHandler(Context nmContext, CGroupsHandler cGroupsHandler, PrivilegedOperationExecutor privilegedOperationExecutor); // Plugin needs to return ResourceHandler when any special isolation required for the resource type.\n\tDockerCommandPlugin getDockerCommandPluginInstance(); // Plugin need to get DockerCommandPlugin.\n\tNMResourceInfo getNMResourceInfo(); // Get resource information from this plugin.\n\tNodeResourceUpdaterPlugin getNodeResourceHandlerInstance(); // Plugin needs to return NodeResourceUpdaterPlugin when any discovery mechanism required for the resource type.\n\tvoid initialize(Context context); // Initialize the plugin, this will be invoked during NM startup.\n}"}
{"index": 426, "repo": "phoenix-core-5.1.3", "des": "Class to access a value stored in the row key.", "code": "Class RowKeyColumnExpression {\n\t<T> T accept(ExpressionVisitor<T> visitor); // Means of traversing expression tree through visitor.\n\tboolean equals(Object obj);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tString getName();\n\tint getPosition();\n\tvoid readFields(DataInput input);\n\tboolean requiresFinalEvaluation(); // Since we may never have encountered a key value column of interest, but the expression may evaluate to true just based on the row key columns, we need to do a final evaluation.\n\tvoid setOffset(int offset); // Used to set an offset to be skipped from the start of a the row key.\n\tvoid write(DataOutput output);\n}"}
{"index": 18700, "repo": "poi-5.2.3", "des": "Represents a description of a conditional formatting rule", "code": "Interface ConditionalFormattingRule {\n\tBorderFormatting createBorderFormatting(); // Create a new border formatting structure if it does not exist, otherwise just return existing object.\n\tFontFormatting createFontFormatting(); // Create a new font formatting structure if it does not exist, otherwise just return existing object.\n\tPatternFormatting createPatternFormatting(); // Create a new pattern formatting structure if it does not exist, otherwise just return existing object.\n\tBorderFormatting getBorderFormatting();\n\tColorScaleFormatting getColorScaleFormatting();\n\tbyte getComparisonOperation(); // The comparison function used when the type of conditional formatting is set to ConditionType.CELL_VALUE_IS\n\tConditionFilterType getConditionFilterType(); // This is null if\n\tConditionType getConditionType(); // Type of conditional formatting rule.\n\tDataBarFormatting getDataBarFormatting();\n\tConditionFilterData getFilterConfiguration(); // This is null if\n\tFontFormatting getFontFormatting();\n\tString getFormula1(); // The formula used to evaluate the first operand for the conditional formatting rule.\n\tString getFormula2(); // The formula used to evaluate the second operand of the comparison when comparison type is ConditionType.CELL_VALUE_IS and operator is either ComparisonOperator.BETWEEN or ComparisonOperator.NOT_BETWEEN\n\tIconMultiStateFormatting getMultiStateFormatting();\n\tExcelNumberFormat getNumberFormat();\n\tPatternFormatting getPatternFormatting();\n\tint getPriority(); // The priority of the rule, if defined, otherwise 0.\n\tboolean getStopIfTrue(); // Always true for HSSF rules, optional flag for XSSF rules.\n\tString getText(); // XSSF rules store textual condition values as an attribute and also as a formula that needs shifting.\n}"}
{"index": 1420, "repo": "pdfbox-3.0.0-beta1", "des": "An instance of this class compresses the contents of a given PDDocument.", "code": "Class COSWriterCompressionPool {\n\tboolean contains(COSBase object); // Returns true, if the given COSBase is a registered object of this compression pool.\n\tList<COSWriterObjectStream> createObjectStreams(); // Creates COSWriterObjectStreams for all currently registered objects of this pool, that have been marked as fit for being compressed in this manner.\n\tlong getHighestXRefObjectNumber(); // Returns the highest object number, that is registered in this compression pool.\n\tCOSObjectKey getKey(COSBase object); // Returns the COSObjectKey, that is registered for the given COSBase in this compression pool.\n\tCOSBase getObject(COSObjectKey key); // Returns the COSBase, that is registered for the given COSObjectKey in this compression pool.\n\tList<COSObjectKey> getObjectStreamObjects(); // Returns all COSBases that can be appended to an object stream.\n\tList<COSObjectKey> getTopLevelObjects(); // Returns all COSBases, that must be added to the document's top level container.\n}"}
{"index": 357, "repo": "phoenix-core-5.1.3", "des": "An MR job to populate the index table from the data table.", "code": "Class IndexTool {\n\tstatic void checkIfFeatureApplicable(Long startTime, Long endTime, Long lastVerifyTime, PTable pDataTable, boolean isLocalIndexBuild);\n\tstatic void createIndexToolTables(Connection connection);\n\tIndexTool.IndexDisableLoggingType getDisableLoggingType();\n\tLong getEndTime();\n\torg.apache.hadoop.mapreduce.Job getJob();\n\tLong getLastVerifyTime();\n\tIndexScrutinyTool.SourceTable getSourceTable();\n\tLong getStartTime();\n\tstatic boolean isValidIndexTable(Connection connection, String masterTable, String indexTable, String tenantId); // Checks for the validity of the index table passed to the job.\n\tboolean isValidLastVerifyTime(Long lastVerifyTime);\n\tstatic void main(String[] args);\n\torg.apache.phoenix.thirdparty.org.apache.commons.cli.CommandLine parseOptions(String[] args); // Parses the commandline arguments, throws IllegalStateException if mandatory arguments are missing.\n\tint populateIndexToolAttributes(org.apache.phoenix.thirdparty.org.apache.commons.cli.CommandLine cmdLine);\n\tstatic Map.Entry<Integer,org.apache.hadoop.mapreduce.Job> run(org.apache.hadoop.conf.Configuration conf, String schemaName, String dataTable, String indexTable, boolean useSnapshot, String tenantId, boolean disableBefore, boolean shouldDeleteBeforeRebuild, boolean runForeground);\n\tint run(String[] args);\n\tint validateLastVerifyTime();\n}"}
{"index": 2888, "repo": "amqp-client-5.18.0", "des": "Description of a single JSON-RPC procedure.", "code": "Class ProcedureDescription {\n\tint arity(); // Retrieves the parameter count for this procedure\n\tString getHelp();\n\tString getJavaReturnType();\n\tString getName();\n\tParameterDescription[] getParams();\n\tString getReturn(); // Getter for return type\n\tClass<?> getReturnType();\n\tString getSummary();\n\tMethod internal_getMethod(); // Private API - used to get the reflected method object, for servers\n\tParameterDescription[] internal_getParams(); // Gets an array of parameter descriptions for all this procedure's parameters\n\tboolean isIdempotent();\n\tvoid setHelp(String help);\n\tvoid setIdempotent(boolean idempotent);\n\tvoid setJavaReturnType(String javaReturnType);\n\tvoid setName(String name);\n\tvoid setReturn(String value); // Private API - used via reflection during parsing/loading\n\tvoid setSummary(String summary);\n}"}
{"index": 5457, "repo": "druid-processing-26.0.0", "des": "Reads fields written by StringFieldWriter or StringArrayFieldWriter.", "code": "Class StringFieldReader {\n\tboolean isComparable(); // Whether this field is comparable.\n\tboolean isNull(org.apache.datasketches.memory.Memory memory, long position); // Whether the provided memory position points to a null value.\n\tColumnValueSelector<?> makeColumnValueSelector(org.apache.datasketches.memory.Memory memory, ReadableFieldPointer fieldPointer); // Create a ColumnValueSelector backed by some memory and a moveable pointer.\n\tDimensionSelector makeDimensionSelector(org.apache.datasketches.memory.Memory memory, ReadableFieldPointer fieldPointer, ExtractionFn extractionFn); // Create a DimensionSelector backed by some memory and a moveable pointer.\n}"}
{"index": 5132, "repo": "druid-processing-26.0.0", "des": "BitmapResultFactory is an abstraction that allows to record something along with preFilter bitmap construction, and emit this information as dimension(s) of query metrics.", "code": "Interface BitmapResultFactory<T> {\n\tT complement(T bitmapResult, int numRows); // Delegates to BitmapFactory.complement(ImmutableBitmap, int) on the wrapped bitmap, and returns a bitmap result wrapping the resulting complement ImmutableBitmap.\n\tT intersection(Iterable<T> bitmapResults); // Delegates to BitmapFactory.intersection(Iterable) on the wrapped bitmaps, and returns a bitmap result wrapping the resulting intersection ImmutableBitmap.\n\tboolean isEmpty(T bitmapResult); // Checks that the wrapped bitmap is empty, see ImmutableBitmap.isEmpty().\n\tImmutableBitmap toImmutableBitmap(T bitmapResult); // Unwraps bitmapResult back to ImmutableBitmap.\n\tT union(Iterable<T> bitmapResults); // Delegates to BitmapFactory.union(Iterable) on the wrapped bitmaps, and returns a bitmap result wrapping the resulting union ImmutableBitmap.\n\tT unionDimensionValueBitmaps(Iterable<ImmutableBitmap> dimensionValueBitmaps); // Equivalent of intersection(Iterables.transform(dimensionValueBitmaps, factory::wrapDimensionValue)), but doesn't create a lot of bitmap result objects.\n\tT wrapAllFalse(ImmutableBitmap allFalseBitmap); // Wraps a bitmap which is a result of BitmapFactory.makeEmptyImmutableBitmap() call.\n\tT wrapAllTrue(ImmutableBitmap allTrueBitmap); // Wraps a bitmap which is a result of BitmapFactory.complement(ImmutableBitmap, int) called with BitmapFactory.makeEmptyImmutableBitmap() as argument.\n\tT wrapDimensionValue(ImmutableBitmap bitmap); // Wraps a bitmap which designates rows in a segment with some specific dimension value.\n}"}
{"index": 6986, "repo": "calcite-core-1.34.0", "des": "A SqlDialect implementation for the Microsoft SQL Server database.", "code": "Class MssqlSqlDialect {\n\t@Nullable SqlNode emulateNullDirection(SqlNode node, boolean nullsFirst, boolean desc); // Returns the SqlNode for emulating the null direction for the given field or null if no emulation needs to be done.\n\tboolean supportsCharSet(); // Returns whether the dialect supports character set names as part of a data type, for instance VARCHAR(30) CHARACTER SET `ISO-8859-1`.\n\tboolean supportsGroupByWithCube(); // Returns whether this dialect supports \"WITH CUBE\" in \"GROUP BY\" clause.\n\tboolean supportsGroupByWithRollup(); // Returns whether this dialect supports \"WITH ROLLUP\" in the \"GROUP BY\" clause.\n\tvoid unparseCall(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec);\n\tvoid unparseDateTimeLiteral(SqlWriter writer, SqlAbstractDateTimeLiteral literal, int leftPrec, int rightPrec);\n\tvoid unparseOffsetFetch(SqlWriter writer, @Nullable SqlNode offset, @Nullable SqlNode fetch); // Converts an offset and fetch into SQL.\n\tvoid unparseSqlDatetimeArithmetic(SqlWriter writer, SqlCall call, SqlKind sqlKind, int leftPrec, int rightPrec);\n\tvoid unparseSqlIntervalLiteral(SqlWriter writer, SqlIntervalLiteral literal, int leftPrec, int rightPrec); // Converts an interval literal to a SQL string.\n\tvoid unparseSqlIntervalQualifier(SqlWriter writer, SqlIntervalQualifier qualifier, RelDataTypeSystem typeSystem); // Converts an interval qualifier to a SQL string.\n\tvoid unparseTopN(SqlWriter writer, @Nullable SqlNode offset, @Nullable SqlNode fetch); // Converts a fetch into a \"SELECT TOP(fetch)\".\n}"}
{"index": 13286, "repo": "spring-test-6.0.11", "des": "Chained API for applying assertions to a response.", "code": "public static interface WebTestClient.ResponseSpec {\n\tWebTestClient.ResponseSpec expectAll(WebTestClient.ResponseSpec.ResponseSpecConsumer... consumers); // Apply multiple assertions to a response with the given consumers, with the guarantee that all assertions will be applied even if one or more assertions fails with an exception.\n\tWebTestClient.BodyContentSpec expectBody(); // Consume and decode the response body to byte[] and then apply assertions on the raw content (e.g.\n\t<B> WebTestClient.BodySpec<B,?> expectBody(Class<B> bodyType); // Consume and decode the response body to a single object of type <B> and then apply assertions.\n\t<B> WebTestClient.BodySpec<B,?> expectBody(org.springframework.core.ParameterizedTypeReference<B> bodyType); // Alternative to expectBody(Class) that accepts information about a target type with generics.\n\t<E> WebTestClient.ListBodySpec<E> expectBodyList(Class<E> elementType); // Consume and decode the response body to List<E> and then apply List-specific assertions.\n\t<E> WebTestClient.ListBodySpec<E> expectBodyList(org.springframework.core.ParameterizedTypeReference<E> elementType); // Alternative to expectBodyList(Class) that accepts information about a target type with generics.\n\tCookieAssertions expectCookie(); // Assertions on the cookies of the response.\n\tHeaderAssertions expectHeader(); // Assertions on the headers of the response.\n\tStatusAssertions expectStatus(); // Assertions on the response status.\n\t<T> FluxExchangeResult<T> returnResult(Class<T> elementClass); // Exit the chained flow in order to consume the response body externally, e.g.\n\t<T> FluxExchangeResult<T> returnResult(org.springframework.core.ParameterizedTypeReference<T> elementTypeRef); // Alternative to returnResult(Class) that accepts information about a target type with generics.\n}"}
{"index": 1925, "repo": "hadoop-hdfs-3.3.6", "des": "Contains the output streams for the data and checksum of a replica.", "code": "Class ReplicaOutputStreams {\n\tvoid close();\n\tvoid closeDataStream();\n\tvoid dropCacheBehindWrites(String identifier, long offset, long len, int flags);\n\tvoid flushChecksumOut(); // Flush the checksum stream if it supports it.\n\tvoid flushDataOut(); // Flush the data stream if it supports it.\n\torg.apache.hadoop.util.DataChecksum getChecksum();\n\tOutputStream getChecksumOut();\n\tOutputStream getDataOut();\n\tFileDescriptor getOutFd();\n\tboolean isTransientStorage();\n\tvoid syncChecksumOut(); // Sync the checksum stream if it supports it.\n\tvoid syncDataOut(); // Sync the data stream if it supports it.\n\tvoid syncFileRangeIfPossible(long offset, long nbytes, int flags);\n\tvoid writeDataToDisk(byte[] b, int off, int len);\n}"}
{"index": 6648, "repo": "artemis-odb-2.3.0", "des": "Tracks all component types in a single world.", "code": "Class ComponentTypeFactory {\n\tint getIndexFor(Class<? extends Component> c); // Get the index of the component type of given component class.\n\tComponentType getTypeFor(Class<? extends Component> c); // Gets the component type for the given component class.\n\tComponentType getTypeFor(int index); // Gets component type by index.\n\tvoid register(ComponentTypeFactory.ComponentTypeListener listener);\n}"}
{"index": 2737, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "This is used to partition the output keys into groups of keys.", "code": "Class HRegionPartitioner<KEY,VALUE> {\n\torg.apache.hadoop.conf.Configuration getConf(); // Returns the current configuration.\n\tint getPartition(ImmutableBytesWritable key, VALUE value, int numPartitions); // Gets the partition number for a given key (hence record) given the total number of partitions i.e.\n\tvoid setConf(org.apache.hadoop.conf.Configuration configuration); // Sets the configuration.\n}"}
{"index": 12415, "repo": "spring-data-couchbase-5.1.2", "des": "QueryIndexResolver finds those IndexDefinitions to be created for a given class.", "code": "public interface QueryIndexResolver {\n\tstatic QueryIndexResolver create(MappingContext<? extends CouchbasePersistentEntity<?>,CouchbasePersistentProperty> mappingContext, CouchbaseOperations operations); // Creates a new QueryIndexResolver given CouchbaseMappingContext.\n\tdefault Iterable<? extends IndexDefinition> resolveIndexFor(Class<?> entityType); // Find and create IndexDefinitions for properties of given TypeInformation.\n\tIterable<? extends IndexDefinition> resolveIndexFor(TypeInformation<?> typeInformation); // Find and create IndexDefinitions for properties of given TypeInformation.\n}"}
{"index": 10064, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Default implementation of a GridProjectionFactoryLocator.", "code": "Class GridProjectionFactoryRegistry {\n\tvoid addGridProjectionFactory(GridProjectionFactory factory);\n\tGridProjectionFactory getGridProjectionFactory(String projectionType); // Locates a GridProjectionFactory.\n\tSet<String> getRegisteredProjectionTypes(); // Gets a registered projection types known to this locator.\n}"}
{"index": 2959, "repo": "tink-1.10.0", "des": "A KeysetWriter that can write to some source cleartext or encrypted keysets in proto binary wire format.", "code": "Class BinaryKeysetWriter {\n\tstatic KeysetWriter withOutputStream(OutputStream stream); // Static method to create a BinaryKeysetWriter that writes to an OutputStream.\n\tvoid write(EncryptedKeyset keyset); // Tries to write an EncryptedKeyset to some storage system.\n\tvoid write(Keyset keyset); // Tries to write a Keyset to some storage system.\n}"}
{"index": 10801, "repo": "spring-boot-actuator-3.1.1", "des": "Builder for creating immutable Health instances.", "code": "public static class Health.Builder extends Object {\n\tHealth build(); // Create a new Health instance with the previously specified code and details.\n\tHealth.Builder down(); // Set status to Status.DOWN.\n\tHealth.Builder down(Throwable ex); // Set status to Status.DOWN and add details for given Throwable.\n\tHealth.Builder outOfService(); // Set status to Status.OUT_OF_SERVICE.\n\tHealth.Builder status(String statusCode); // Set status to given statusCode.\n\tHealth.Builder status(Status status); // Set status to given Status instance.\n\tHealth.Builder unknown(); // Set status to Status.UNKNOWN status.\n\tHealth.Builder up(); // Set status to Status.UP status.\n\tHealth.Builder withDetail(String key, Object value); // Record detail using given key and value.\n\tHealth.Builder withDetails(Map<String,?> details); // Record details from the given details map.\n\tHealth.Builder withException(Throwable ex); // Record detail for given Exception.\n}"}
{"index": 8392, "repo": "hadoop-aws-3.3.6", "des": "Change tracking for input streams: the version ID or etag of the object is tracked and compared on open/re-open.", "code": "Class ChangeTracker {\n\tString getRevisionId();\n\tChangeDetectionPolicy.Source getSource();\n\tlong getVersionMismatches();\n\tboolean maybeApplyConstraint(com.amazonaws.services.s3.model.CopyObjectRequest request); // Apply any revision control set by the policy if it is to be enforced on the server.\n\tboolean maybeApplyConstraint(com.amazonaws.services.s3.model.GetObjectMetadataRequest request);\n\tboolean maybeApplyConstraint(com.amazonaws.services.s3.model.GetObjectRequest request); // Apply any revision control set by the policy if it is to be enforced on the server.\n\tvoid processException(com.amazonaws.SdkBaseException e, String operation); // Process an exception generated against the change policy.\n\tvoid processMetadata(com.amazonaws.services.s3.model.ObjectMetadata metadata, String operation); // Process metadata response from server for validation against the change policy.\n\tvoid processResponse(com.amazonaws.services.s3.transfer.model.CopyResult copyResult); // Process the response from the server for validation against the change policy.\n\tvoid processResponse(com.amazonaws.services.s3.model.S3Object object, String operation, long pos); // Process the response from the server for validation against the change policy.\n}"}
{"index": 6703, "repo": "lucene-analyzers-common-8.11.2", "des": "This tree structure stores the hyphenation patterns in an efficient way for fast lookup.", "code": "Class HyphenationTree {\n\tvoid addClass(String chargroup); // Add a character class to the tree.\n\tvoid addException(String word, ArrayList<Object> hyphenatedword); // Add an exception to the tree.\n\tvoid addPattern(String pattern, String ivalue); // Add a pattern to the tree.\n\tString findPattern(String pat);\n\tprotected byte[] getValues(int k);\n\tprotected int hstrcmp(char[] s, int si, char[] t, int ti); // String compare, returns 0 if equal or t is a substring of s\n\tHyphenation hyphenate(char[] w, int offset, int len, int remainCharCount, int pushCharCount); // Hyphenate word and return an array of hyphenation points.\n\tHyphenation hyphenate(String word, int remainCharCount, int pushCharCount); // Hyphenate word and return a Hyphenation object.\n\tvoid loadPatterns(InputSource source); // Read hyphenation patterns from an XML file.\n\tprotected int packValues(String values); // Packs the values by storing them in 4 bits, two values into a byte Values range is from 0 to 9.\n\tvoid printStats(PrintStream out);\n\tprotected void searchPatterns(char[] word, int index, byte[] il); // Search for all possible partial matches of word starting at index an update interletter values.\n\tprotected String unpackValues(int k);\n}"}
{"index": 18361, "repo": "opencms-core-15.0", "des": "A simple class used to start and stop JLAN.", "code": "Class CmsJlanThreadManager {\n\tvoid start(); // Starts the JLAN server in a new thread.\n\tvoid stop(); // Tries to stop the JLAN server and return after it is stopped, but will also return if the thread hasn't stopped after MAX_SHUTDOWN_WAIT_MILLIS.\n}"}
{"index": 8523, "repo": "commons-io-2.13.0", "des": "Builds a new FileWriterWithEncoding instance.", "code": "Class FileWriterWithEncoding.Builder {\n\tFileWriterWithEncoding get(); // Constructs a new instance.\n\tFileWriterWithEncoding.Builder setAppend(boolean append); // Sets whether or not to append.\n\tFileWriterWithEncoding.Builder setCharsetEncoder(CharsetEncoder charsetEncoder); // Sets charsetEncoder to use for encoding.\n}"}
{"index": 583, "repo": "ignite-core-2.15.0", "des": "This enum defines order of writing pages to disk storage during checkpoint.", "code": "Enum CheckpointWriteOrder {\n\tstatic @Nullable CheckpointWriteOrder fromOrdinal(int ord); // Efficiently gets enumerated value from its ordinal.\n\tstatic CheckpointWriteOrder valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CheckpointWriteOrder[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4990, "repo": "commons-collections-3.2.2", "des": "Factory implementation that always throws an exception.", "code": "Class ExceptionFactory {\n\tObject create(); // Always throws an exception.\n\tstatic Factory getInstance(); // Factory returning the singleton instance.\n}"}
{"index": 8428, "repo": "hadoop-aws-3.3.6", "des": "Interfaces for audit services to implement.", "code": "Interface OperationAuditor {\n\tdefault boolean checkAccess(org.apache.hadoop.fs.Path path, S3AFileStatus status, org.apache.hadoop.fs.permission.FsAction mode); // Check for permission to access a path.\n\tString getAuditorId(); // Get the Auditor ID.\n\tAuditSpanS3A getUnbondedSpan(); // Get the unbonded span to use after deactivating an active span.\n\tvoid init(OperationAuditorOptions options); // Initialize.\n\tdefault void noteSpanReferenceLost(long threadId); // Span reference lost from GC operations.\n}"}
{"index": 9201, "repo": "fontbox-3.0.0-beta1", "des": "This class is based on code from Apache Batik a subproject of Apache XMLGraphics.", "code": "Class GlyfSimpleDescript {\n\tint getEndPtOfContours(int i); // Returns the index of the ending point of the given contour.\n\tbyte getFlags(int i); // Returns the flags of the given point.\n\tint getPointCount(); // Returns the number of points.\n\tshort getXCoordinate(int i); // Returns the x coordinate of the given point.\n\tshort getYCoordinate(int i); // Returns the y coordinate of the given point.\n\tboolean isComposite(); // Returns whether this point is a composite or not.\n}"}
{"index": 18463, "repo": "opencms-core-15.0", "des": "The interface a Geo filter configuration must implement.", "code": "Interface I_CmsSearchConfigurationGeoFilter {\n\tjava.lang.String getCoordinates(); // Returns the coordinates.\n\tjava.lang.String getCoordinatesParam(); // Returns the name of the coordinates parameter.\n\tjava.lang.String getFieldName(); // Returns the Solr field name storing the coordinates.\n\tjava.lang.String getRadius(); // Returns the radius.\n\tjava.lang.String getRadiusParam(); // Returns the name of the radius parameter.\n\tjava.lang.String getUnits(); // Returns the units the search radius uses, either kilometers (km) or miles (mi).\n\tjava.lang.String getUnitsParam(); // Returns the name of the units parameter.\n\tdefault boolean hasGeoFilter(); // Returns whether this Geo filter configuration has a valid Geo filter set.\n}"}
{"index": 8290, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents an abstraction for SOAP messages, providing access to a SOAP Envelope.", "code": "Interface SoapMessage {\n\tDocument getDocument(); // Returns this message as a Document.\n\tSoapEnvelope getEnvelope(); // Returns the SoapEnvelope associated with this SoapMessage.\n\tString getSoapAction(); // Get the SOAP Action for this message, or null if not present.\n\tSoapBody getSoapBody(); // Returns the SoapBody associated with this SoapMessage.\n\tSoapHeader getSoapHeader(); // Returns the SoapHeader associated with this SoapMessage.\n\tSoapVersion getVersion(); // Returns the SOAP version of this message.\n\tvoid setDocument(Document document); // Sets the contents of the message to the given Document.\n\tvoid setSoapAction(String soapAction); // Sets the SOAP Action for this message.\n}"}
{"index": 4071, "repo": "camel-core-3.0.0-RC1", "des": "Toolbox class to create commonly used Aggregation Strategies in a fluent manner.", "code": "Class AggregationStrategies {\n\tstatic org.apache.camel.AggregationStrategy bean(Class<?> type); // Creates a AggregationStrategyBeanAdapter for using a POJO as the aggregation strategy.\n\tstatic org.apache.camel.AggregationStrategy bean(Class<?> type, String methodName); // Creates a AggregationStrategyBeanAdapter for using a POJO as the aggregation strategy.\n\tstatic org.apache.camel.AggregationStrategy bean(Object bean); // Creates a AggregationStrategyBeanAdapter for using a POJO as the aggregation strategy.\n\tstatic org.apache.camel.AggregationStrategy bean(Object bean, String methodName); // Creates a AggregationStrategyBeanAdapter for using a POJO as the aggregation strategy.\n\tstatic org.apache.camel.AggregationStrategy beanAllowNull(Class<?> type, String methodName); // Creates a AggregationStrategyBeanAdapter for using a POJO as the aggregation strategy.\n\tstatic org.apache.camel.AggregationStrategy beanAllowNull(Object bean, String methodName); // Creates a AggregationStrategyBeanAdapter for using a POJO as the aggregation strategy.\n\tstatic FlexibleAggregationStrategy<Object> flexible(); // Creates a FlexibleAggregationStrategy with no particular type, i.e.\n\tstatic <T> FlexibleAggregationStrategy<T> flexible(Class<T> type); // Creates a FlexibleAggregationStrategy pivoting around a particular type, e.g.\n\tstatic org.apache.camel.AggregationStrategy groupedBody(); // Creates a GroupedBodyAggregationStrategy aggregation strategy.\n\tstatic org.apache.camel.AggregationStrategy groupedExchange(); // Creates a GroupedExchangeAggregationStrategy aggregation strategy.\n\tstatic org.apache.camel.processor.aggregate.StringAggregationStrategy string(); // Creates a StringAggregationStrategy.\n\tstatic org.apache.camel.processor.aggregate.StringAggregationStrategy string(String delimiter); // Creates a StringAggregationStrategy with delimiter.\n\tstatic org.apache.camel.AggregationStrategy useLatest(); // Use the latest incoming exchange.\n\tstatic org.apache.camel.AggregationStrategy useOriginal(); // Use the original exchange.\n\tstatic org.apache.camel.AggregationStrategy useOriginal(boolean propagateException); // Use the original exchange.\n}"}
{"index": 5542, "repo": "org.apache.karaf.main-2.4.4", "des": "A BundleEntry represents one entry of a BundleFile.", "code": "Class BundleEntry {\n\tbyte[] getBytes(); // Used for class loading.\n\tabstract URL getFileURL(); // Get a URL to the content of the bundle entry that uses the file: protocol.\n\tabstract InputStream getInputStream(); // Return an InputStream for the entry.\n\tabstract URL getLocalURL(); // Get a URL to the bundle entry that uses a common protocol (i.e.\n\tabstract String getName(); // Return the name of the entry.\n\tabstract long getSize(); // Return the size of the entry (uncompressed).\n\tabstract long getTime(); // Get the modification time for this BundleEntry.\n}"}
{"index": 10751, "repo": "spring-tx-6.0.11", "des": "The phase in which a transactional event listener applies.", "code": "public enum TransactionPhase extends Enum<TransactionPhase> {\n\tstatic TransactionPhase valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic TransactionPhase[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7129, "repo": "calcite-core-1.34.0", "des": "A data structure that manages rule matches for RuleDriver.", "code": "Class RuleQueue {\n\tabstract void addMatch(org.apache.calcite.plan.volcano.VolcanoRuleMatch match); // Add a RuleMatch into the queue.\n\tabstract boolean clear(); // clear this rule queue.\n\tprotected boolean skipMatch(org.apache.calcite.plan.volcano.VolcanoRuleMatch match); // Returns whether to skip a match.\n}"}
{"index": 1336, "repo": "nutch-2.4", "des": "A collection of methods for extracting content from DOM trees.", "code": "Class DOMContentUtils {\n\tjava.net.URL getBase(org.w3c.dom.Node node); // If Node contains a BASE tag then it's HREF is returned.\n\tvoid getOutlinks(java.net.URL base, java.util.ArrayList<Outlink> outlinks, org.w3c.dom.Node node); // This method finds all anchors below the supplied DOM node, and creates appropriate Outlink records for each (relative to the supplied base URL), and adds them to the outlinks ArrayList.\n\tvoid getText(java.lang.StringBuilder sb, org.w3c.dom.Node node); // This is a convinience method, equivalent to getText(StringBuilder, Node, boolean) which passes false as third argument\n\tboolean getText(java.lang.StringBuilder sb, org.w3c.dom.Node node, boolean abortOnNestedAnchors); // This method takes a StringBuilder and a DOM Node, and will append all the content text found beneath the DOM node to the StringBuilder.\n\tboolean getTitle(java.lang.StringBuilder sb, org.w3c.dom.Node node); // This method takes a StringBuilder and a DOM Node, and will append the content text found beneath the first title node to the StringBuilder.\n\tvoid setConf(Configuration conf);\n}"}
{"index": 5529, "repo": "org.apache.karaf.main-2.4.4", "des": "A bundle's authority to perform specific privileged administrative operations on or to get sensitive information about a bundle.", "code": "Class AdminPermission {\n\tboolean equals(Object obj); // Determines the equality of two AdminPermission objects.\n\tString getActions(); // Returns the canonical string representation of the AdminPermission actions.\n\tboolean implies(Permission p); // Determines if the specified permission is implied by this object.\n\tPermissionCollection newPermissionCollection(); // Returns a new PermissionCollection object suitable for storing AdminPermissions.\n}"}
{"index": 12034, "repo": "jena-core-4.9.0", "des": "DisjointUnion - a version of Union that assumes the graphs are disjoint, and hence that find need not do duplicate-removal.", "code": "public class DisjointUnion extends Dyadic {\n\tboolean graphBaseContains(Triple t);\n\tvoid performAdd(Triple t); // Add a triple to the triple store.\n\tvoid performDelete(Triple t); // Remove a triple from the triple store.\n}"}
{"index": 6186, "repo": "jackson-databind-2.15.2", "des": "Simple value class used for containing names of properties as defined by annotations (and possibly other configuration sources).", "code": "Class PropertyName {\n\tstatic PropertyName construct(String simpleName);\n\tstatic PropertyName construct(String simpleName, String ns);\n\tboolean equals(Object o);\n\tString getNamespace();\n\tString getSimpleName();\n\tboolean hasNamespace();\n\tboolean hasSimpleName();\n\tboolean hasSimpleName(String str);\n\tPropertyName internSimpleName();\n\tboolean isEmpty(); // Method that is basically equivalent of:\n\tprotected Object readResolve();\n\tSerializableString simpleAsEncoded(MapperConfig<?> config); // Accessor that may be used to get lazily-constructed efficient representation of the simple name.\n\tPropertyName withNamespace(String ns); // Fluent factory method for constructing an instance with different namespace.\n\tPropertyName withSimpleName(String simpleName); // Fluent factory method for constructing an instance with different simple name.\n}"}
{"index": 1117, "repo": "ignite-core-2.15.0", "des": "Handler to print raw pages data into file for further diagnostic.", "code": "Class PrintRawToFileHandler {\n\tvoid finish(); // Method which called after all iteration would be finished.\n\tprotected byte[] getBytes(IgniteBiTuple<WALPointer,WALRecord> record);\n\tprotected byte[] getHeader();\n\tvoid handle(IgniteBiTuple<WALPointer,WALRecord> record); // Handling one more record during iteration over WAL.\n}"}
{"index": 6547, "repo": "exoplayer-core-2.9.6", "des": "Parses a continuous MPEG Audio byte stream and extracts individual frames.", "code": "Class MpegAudioReader {\n\tvoid consume(ParsableByteArray data); // Consumes (possibly partial) data from the current packet.\n\tvoid createTracks(ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the reader by providing outputs and ids for the tracks.\n\tvoid packetFinished(); // Called when a packet ends.\n\tvoid packetStarted(long pesTimeUs, int flags); // Called when a packet starts.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 3774, "repo": "commons-pool2-2.11.1", "des": "Create a new object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.", "code": "Class ProxiedObjectPool<T> {\n\tvoid addObject(); // Creates an object using the factory or other implementation dependent mechanism, passivate it, and then place it in the idle object pool.\n\tT borrowObject(); // Borrows an instance from this pool.\n\tvoid clear(); // Clears any objects sitting idle in the pool, releasing any associated resources (optional operation).\n\tvoid close(); // Closes this pool, and free any resources associated with it.\n\tint getNumActive(); // Gets the number of instances currently borrowed from this pool.\n\tint getNumIdle(); // Gets the number of instances currently idle in this pool.\n\tvoid invalidateObject(T proxy); // Invalidates an object from the pool.\n\tvoid returnObject(T proxy); // Returns an instance to the pool.\n}"}
{"index": 5452, "repo": "druid-processing-26.0.0", "des": "Base type for a MultiValueDimensionVectorSelector for a dictionary encoded ColumnType.", "code": "Class StringDictionaryEncodedColumn.StringMultiValueDimensionVectorSelector {\n\tint getCurrentVectorSize(); // Returns the current vector size for this cursor.\n\tint getMaxVectorSize(); // Returns the maximum vector size for this cursor.\n\tIndexedInts[] getRowVector(); // Get the current vector.\n\tIdLookup idLookup(); // Returns IdLookup if available for this DimensionSelector, or null.\n\tboolean nameLookupPossibleInAdvance(); // Returns true if it is possible to DimensionDictionarySelector.lookupName(int) by ids from 0 to DimensionDictionarySelector.getValueCardinality() before the rows with those ids are returned.\n\tboolean supportsLookupNameUtf8(); // Returns whether this selector supports DimensionDictionarySelector.lookupNameUtf8(int).\n}"}
{"index": 8307, "repo": "spring-ws-3.0.10.RELEASE", "des": "Convenient base class for objects that use a Transformer.", "code": "Class TransformerObjectSupport {\n\tprotected Transformer createTransformer(); // Creates a new Transformer.\n\tprotected TransformerFactory getTransformerFactory(); // Returns the TransformerFactory.\n\tprotected TransformerFactory newTransformerFactory(Class<? extends TransformerFactory> transformerFactoryClass); // Instantiate a new TransformerFactory.\n\tvoid setTransformerFactoryClass(Class<? extends TransformerFactory> transformerFactoryClass); // Specify the TransformerFactory class to use.\n\tprotected void transform(Source source, Result result); // Transforms the given Source to the given Result.\n}"}
{"index": 12929, "repo": "spring-data-mongodb-4.1.2", "des": "Load strategy to be used Unwrapped.onEmpty().", "code": "public static enum Unwrapped.OnEmpty extends Enum<Unwrapped.OnEmpty> {\n\tstatic Unwrapped.OnEmpty valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Unwrapped.OnEmpty[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 9471, "repo": "curator-recipes-5.5.0", "des": "A re-entrant mutex that works across JVMs.", "code": "Class InterProcessMutex {\n\tvoid acquire(); // Acquire the mutex - blocking until it's available.\n\tboolean acquire(long time, TimeUnit unit); // Acquire the mutex - blocks until it's available or the given time expires.\n\tprotected byte[] getLockNodeBytes();\n\tprotected String getLockPath();\n\tCollection<String> getParticipantNodes(); // Return a sorted list of all current nodes participating in the lock\n\tboolean isAcquiredInThisProcess(); // Returns true if the mutex is acquired by a thread in this JVM\n\tboolean isOwnedByCurrentThread(); // Returns true if the mutex is acquired by the calling thread\n\tvoid makeRevocable(RevocationListener<InterProcessMutex> listener); // Make the lock revocable.\n\tvoid makeRevocable(RevocationListener<InterProcessMutex> listener, Executor executor); // Make the lock revocable.\n\tvoid release(); // Perform one release of the mutex if the calling thread is the same thread that acquired it.\n}"}
{"index": 8919, "repo": "hbase-server-3.0.0-alpha-4", "des": "Abstraction that allows different modules in RegionServer to update/get the favored nodes information for regions.", "code": "Interface FavoredNodesForRegion {\n\tInetSocketAddress[] getFavoredNodesForRegion(String encodedRegionName); // Get the favored nodes mapping for this region.\n\tvoid updateRegionFavoredNodesMapping(String encodedRegionName, List<org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.ServerName> favoredNodes); // Used to update the favored nodes mapping when required.\n}"}
{"index": 13579, "repo": "spring-messaging-6.0.11", "des": "Holds the shared logger named \"org.springframework.web.SimpLogging\" to use for STOMP over WebSocket messaging when logging for \"org.springframework.messaging.simp\" is off but logging for \"org.springframework.web\" is on.", "code": "public abstract class SimpLogging extends Object {\n\tstatic org.apache.commons.logging.Log forLog(org.apache.commons.logging.Log primaryLogger); // Wrap the given primary logger with a composite logger that delegates to either the primary or to the shared fallback logger \"org.springframework.web.HttpLogging\", if the primary is not enabled.\n\tstatic org.apache.commons.logging.Log forLogName(Class<?> primaryLoggerClass); // Create a primary logger for the given class and wrap it with a composite that delegates to it or to the fallback logger named \"org.springframework.web.SimpLogging\", if the primary is not enabled.\n}"}
{"index": 10894, "repo": "spring-data-redis-3.1.2", "des": "RedisSerializer that can read and write JSON using Jackson's and Jackson Databind ObjectMapper.", "code": "public class Jackson2JsonRedisSerializer<T> extends Object implements RedisSerializer<T> {\n\tT deserialize(byte[] bytes); // Deserialize an object from the given binary data.\n\tprotected com.fasterxml.jackson.databind.JavaType getJavaType(Class<?> clazz); // Returns the Jackson JavaType for the specific class.\n\tbyte[] serialize(Object t); // Serialize the given object to binary data.\n\tvoid setObjectMapper(com.fasterxml.jackson.databind.ObjectMapper mapper); // Deprecated, for removal: This API element is subject to removal in a future version. since 3.0, use constructor creation to configure the object mapper.\n}"}
{"index": 3872, "repo": "hbase-client-3.0.0-alpha-4", "des": "This comparator is for use with CompareFilter implementations, such as RowFilter, QualifierFilter, and ValueFilter, for filtering based on the value of a given column.", "code": "Class RegexStringComparator {\n\tint compareTo(byte[] value, int offset, int length);\n\tstatic RegexStringComparator parseFrom(byte[] pbBytes); // Parse a serialized representation of RegexStringComparator\n\tvoid setCharset(Charset charset); // Specifies the Charset to use to convert the row key to a String.\n\tbyte[] toByteArray(); // Returns The comparator serialized using pb\n}"}
{"index": 11036, "repo": "spring-shell-core-3.1.2", "des": "Default implementation of a CommandContext.", "code": "public static class CommandContext.DefaultCommandContext extends Object implements CommandContext {\n\tCommandRegistration getCommandRegistration(); // Gets a command registration.\n\t<T> T getOptionValue(String name); // Gets an mapped option value.\n\tCommandParser.CommandParserResults getParserResults(); // Gets a command option parser results.\n\tString[] getRawArgs(); // Gets a raw args passed into a currently executing command.\n\torg.jline.terminal.Terminal getTerminal(); // Gets a terminal.\n\tboolean hasMappedOption(String name); // Gets if option has been mapped.\n}"}
{"index": 9305, "repo": "hadoop-yarn-api-3.3.6", "des": "ApplicationAttemptReport is a report of an application attempt.", "code": "Class ApplicationAttemptReport {\n\tabstract ContainerId getAMContainerId(); // Get the ContainerId of AMContainer for this attempt\n\tabstract ApplicationAttemptId getApplicationAttemptId(); // Get the ApplicationAttemptId of this attempt of the application\n\tabstract String getDiagnostics(); // Get the diagnositic information of the application attempt in case of errors.\n\tabstract long getFinishTime(); // Get the finish time of the application.\n\tabstract String getHost(); // Get the host on which this attempt of ApplicationMaster is running.\n\tabstract String getOriginalTrackingUrl(); // Get the original tracking url for the application attempt.\n\tabstract int getRpcPort(); // Get the RPC port of this attempt ApplicationMaster.\n\tabstract long getStartTime();\n\tabstract String getTrackingUrl(); // Get the tracking url for the application attempt.\n\tabstract YarnApplicationAttemptState getYarnApplicationAttemptState(); // Get the YarnApplicationAttemptState of the application attempt.\n\tstatic ApplicationAttemptReport newInstance(ApplicationAttemptId applicationAttemptId, String host, int rpcPort, String url, String oUrl, String diagnostics, YarnApplicationAttemptState state, ContainerId amContainerId);\n\tstatic ApplicationAttemptReport newInstance(ApplicationAttemptId applicationAttemptId, String host, int rpcPort, String url, String oUrl, String diagnostics, YarnApplicationAttemptState state, ContainerId amContainerId, long startTime, long finishTime);\n\tabstract void setAMContainerId(ContainerId amContainerId);\n\tabstract void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId);\n\tabstract void setDiagnostics(String diagnostics);\n\tabstract void setFinishTime(long finishTime);\n\tabstract void setHost(String host);\n\tabstract void setOriginalTrackingUrl(String oUrl);\n\tabstract void setRpcPort(int rpcPort);\n\tabstract void setStartTime(long startTime);\n\tabstract void setTrackingUrl(String url);\n\tabstract void setYarnApplicationAttemptState(YarnApplicationAttemptState yarnApplicationAttemptState);\n}"}
{"index": 9558, "repo": "commons-math3-3.6.1", "des": "Base class for formatters of composite objects (complex numbers, vectors .", "code": "Class CompositeFormat {\n\tstatic StringBuffer formatDouble(double value, NumberFormat format, StringBuffer toAppendTo, FieldPosition pos); // Formats a double value to produce a string.\n\tstatic NumberFormat getDefaultNumberFormat(); // Create a default number format.\n\tstatic NumberFormat getDefaultNumberFormat(Locale locale); // Create a default number format.\n\tstatic void parseAndIgnoreWhitespace(String source, ParsePosition pos); // Parses source until a non-whitespace character is found.\n\tstatic boolean parseFixedstring(String source, String expected, ParsePosition pos); // Parse source for an expected fixed string.\n\tstatic char parseNextCharacter(String source, ParsePosition pos); // Parses source until a non-whitespace character is found.\n\tstatic Number parseNumber(String source, NumberFormat format, ParsePosition pos); // Parses source for a number.\n}"}
{"index": 10250, "repo": "spring-core-6.0.11", "des": "Converts objects to String form, generally for debugging purposes, using Spring's toString styling conventions.", "code": "public class DefaultValueStyler extends Object implements ValueStyler {\n\tString style(Object value); // Style the given value, returning a String representation.\n\tprotected String styleArray(Object[] array); // Generate a styled version of the supplied array.\n\tprotected String styleClass(Class<?> clazz); // Generate a styled version of the supplied Class.\n\tprotected String styleCollection(Collection<?> collection); // Generate a styled version of the supplied Collection.\n\tprotected <K, V> String styleMap(Map<K,V> map); // Generate a styled version of the supplied Map.\n\tprotected String styleMapEntry(Map.Entry<?,?> entry); // Generate a styled version of the supplied Map.Entry.\n\tprotected String styleMethod(Method method); // Generate a styled version of the supplied Method.\n\tprotected String styleNull(); // Generate a styled version of null.\n\tprotected String styleObject(Object obj); // Generate a styled version of the supplied Object.\n\tprotected String styleString(String str); // Generate a styled version of the supplied String.\n}"}
{"index": 659, "repo": "ignite-core-2.15.0", "des": "Public interface of distributed property usage.", "code": "Interface DistributedProperty<T extends Serializable> {\n\tvoid addListener(DistributePropertyListener<? super T> listener);\n\tT get();\n\tString getName();\n\tT getOrDefault(T dfltVal);\n\tboolean propagate(T newVal); // Change value across whole cluster.\n\tGridFutureAdapter<?> propagateAsync(T newVal); // Change value across whole cluster.\n\tGridFutureAdapter<?> propagateAsync(T expectedVal, T newVal); // Change value across whole cluster.\n}"}
{"index": 12226, "repo": "jena-core-4.9.0", "des": "A rule preprocessor that scans all supplied data looking for instances of container membership properties and adds those to the deductions set.", "code": "public class RDFSCMPPreprocessHook extends Object implements RulePreprocessHook {\n\tboolean needsRerun(FBRuleInfGraph infGraph, Triple t); // Validate a triple add to see if it should reinvoke the hook.\n\tvoid run(FBRuleInfGraph infGraph, Finder dataFind, Graph inserts); // Invoke the preprocessing hook.\n}"}
{"index": 17470, "repo": "spring-security-config-6.1.2", "des": "Allows configuring a UserDetailsService within a AuthenticationManagerBuilder.", "code": "public class UserDetailsServiceConfigurer<B extends ProviderManagerBuilder<B>,C extends UserDetailsServiceConfigurer<B,C,U>,U extends org.springframework.security.core.userdetails.UserDetailsService> extends AbstractDaoAuthenticationConfigurer<B,C,U> {\n\tvoid configure(B builder); // Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tprotected void initUserDetailsService(); // Allows subclasses to initialize the UserDetailsService.\n}"}
{"index": 6315, "repo": "mina-core-3.0.0-M2", "des": "Utility class for smart dumping ByteBuffer.", "code": "Class ByteBufferDumper {\n\tstatic String dump(ByteBuffer buffer); // Dumps the given buffer.\n\tstatic String dump(ByteBuffer buffer, int nbBytes, boolean toAscii); // Dump the content of the given ByteBuffer, up to a number of bytes.\n\tstatic ByteBuffer fromHexString(String hex);\n\tstatic String toHex(ByteBuffer buffer); // Dump a byte buffer remaining bytes as a hex-decimal string.\n}"}
{"index": 7456, "repo": "mahout-math-0.13.0", "des": "Quick and dirty implementation of some Matrix methods over packed upper triangular matrix.", "code": "Class UpperTriangular {\n\tMatrix assignColumn(int column, Vector other); // Assign the other vector values to the column of the receiver\n\tMatrix assignNonZeroElementsInRow(int row, double[] other);\n\tMatrix assignRow(int row, Vector other); // Assign the other vector values to the row of the receiver\n\tdouble[] getData();\n\tMatrixFlavor getFlavor(); // Get matrix structural flavor (operations performance hints).\n\tint[] getNumNondefaultElements(); // Return the number of values in the recipient\n\tdouble getQuick(int row, int column); // Return the value at the given indexes, without checking bounds\n\tMatrix like(); // Return an empty matrix of the same underlying class as the receiver\n\tMatrix like(int rows, int columns); // Returns an empty matrix of the same underlying class as the receiver and of the specified size.\n\tvoid setQuick(int row, int column, double value); // Set the value at the given index, without checking bounds\n\tMatrix viewPart(int[] offset, int[] size); // Return a view into part of a matrix.\n}"}
{"index": 18312, "repo": "commons-configuration2-2.9.0", "des": "A file-based reloading strategy that uses Commons VFS to determine when a file was changed.", "code": "Class VFSFileHandlerReloadingDetector {\n\tprotected org.apache.commons.vfs2.FileObject getFileObject(); // Gets the file that is monitored by this strategy.\n\tprotected long getLastModificationDate(); // Gets the date of the last modification of the monitored file.\n\tprotected String resolveFileURI(); // Resolves the URI of the monitored file.\n}"}
{"index": 12691, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $dateToParts. NOTE: Requires MongoDB 3.6 or later.", "code": "public static class DateOperators.DateToParts extends DateOperators.TimezonedDateAggregationExpression {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tstatic DateOperators.DateToParts datePartsOf(String fieldReference); // Creates new DateOperators.DateToParts.\n\tstatic DateOperators.DateToParts datePartsOf(AggregationExpression expression); // Creates new DateOperators.DateToParts.\n\tstatic DateOperators.DateToParts dateToParts(Object value); // Creates new DateOperators.DateToParts.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tDateOperators.DateToParts iso8601(); // Use ISO week date fields in the resulting document.\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n\tDateOperators.DateToParts withTimezone(DateOperators.Timezone timezone); // Optionally set the DateOperators.Timezone to use.\n}"}
{"index": 10416, "repo": "spring-core-6.0.11", "des": "JBoss VFS based Resource implementation.", "code": "public class VfsResource extends AbstractResource {\n\tlong contentLength(); // This method reads the entire InputStream to determine the content length.\n\tResource createRelative(String relativePath); // This implementation throws a FileNotFoundException, assuming that relative resources cannot be created for this resource.\n\tboolean equals(Object obj); // This implementation compares description strings.\n\tboolean exists(); // This implementation checks whether a File can be opened, falling back to whether an InputStream can be opened.\n\tString getDescription(); // Return a description for this resource, to be used for error output when working with the resource.\n\tFile getFile(); // This implementation throws a FileNotFoundException, assuming that the resource cannot be resolved to an absolute file path.\n\tString getFilename(); // This implementation always returns null, assuming that this resource type does not have a filename.\n\tInputStream getInputStream(); // Return an InputStream for the content of an underlying resource.\n\tURI getURI(); // This implementation builds a URI based on the URL returned by AbstractResource.getURL().\n\tURL getURL(); // This implementation throws a FileNotFoundException, assuming that the resource cannot be resolved to a URL.\n\tboolean isReadable(); // This implementation always returns true for a resource that exists (revised as of 5.1).\n\tlong lastModified(); // This implementation checks the timestamp of the underlying File, if available.\n}"}
{"index": 11364, "repo": "spring-context-6.0.11", "des": "FactoryBean that looks up a JNDI object.", "code": "public class JndiObjectFactoryBean extends JndiObjectLocator implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware {\n\tvoid afterPropertiesSet(); // Look up the JNDI object and store it.\n\tprotected Class<?> createCompositeInterface(Class<?>[] interfaces); // Create a composite interface Class for the given interfaces, implementing the given interfaces in one single Class.\n\tObject getObject(); // Return the singleton JNDI object.\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tprotected Object lookupWithFallback(); // Lookup variant that returns the specified \"defaultObject\" (if any) in case of lookup failure.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setCache(boolean cache); // Set whether to cache the JNDI object once it has been located.\n\tvoid setDefaultObject(Object defaultObject); // Specify a default object to fall back to if the JNDI lookup fails.\n\tvoid setExposeAccessContext(boolean exposeAccessContext); // Set whether to expose the JNDI environment context for all access to the target object, i.e.\n\tvoid setLookupOnStartup(boolean lookupOnStartup); // Set whether to look up the JNDI object on startup.\n\tvoid setProxyInterface(Class<?> proxyInterface); // Specify the proxy interface to use for the JNDI object.\n\tvoid setProxyInterfaces(Class<?>... proxyInterfaces); // Specify multiple proxy interfaces to use for the JNDI object.\n}"}
{"index": 14033, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "Custom JavaExec task for running a Spring Boot application.", "code": "@DisableCachingByDefault(because=\"Application should always run\") public abstract class BootRun extends JavaExec {\n\tvoid exec();\n\tabstract Property<Boolean> getOptimizedLaunch(); // Returns the property for whether the JVM's launch should be optimized.\n\tvoid sourceResources(SourceSet sourceSet); // Adds the source directories of the given sourceSet's resources to the start of the classpath in place of the output's resources directory.\n}"}
{"index": 11394, "repo": "spring-context-6.0.11", "des": "Helper class that allows for accessing a Spring MessageSource as a ResourceBundle.", "code": "public class MessageSourceResourceBundle extends ResourceBundle {\n\tboolean containsKey(String key); // This implementation checks whether the target MessageSource can resolve a message for the given key, translating NoSuchMessageException accordingly.\n\tEnumeration<String> getKeys(); // This implementation throws UnsupportedOperationException, as a MessageSource does not allow for enumerating the defined message codes.\n\tLocale getLocale(); // This implementation exposes the specified Locale for introspection through the standard ResourceBundle.getLocale() method.\n\tprotected Object handleGetObject(String key); // This implementation resolves the code in the MessageSource.\n}"}
{"index": 9873, "repo": "commons-math3-3.6.1", "des": "Formats a 3D vector in components list format \"{x; y; z}\".", "code": "Class Vector3DFormat {\n\tStringBuffer format(Vector<Euclidean3D> vector, StringBuffer toAppendTo, FieldPosition pos); // Formats a Vector3D object to produce a string.\n\tstatic Vector3DFormat getInstance(); // Returns the default 3D vector format for the current locale.\n\tstatic Vector3DFormat getInstance(Locale locale); // Returns the default 3D vector format for the given locale.\n\tVector3D parse(String source); // Parses a string to produce a Vector3D object.\n\tVector3D parse(String source, ParsePosition pos); // Parses a string to produce a Vector3D object.\n}"}
{"index": 13696, "repo": "spring-webmvc-6.0.11", "des": "RequestToViewNameTranslator that simply transforms the URI of the incoming request into a view name.", "code": "public class DefaultRequestToViewNameTranslator extends Object implements RequestToViewNameTranslator {\n\tString getViewName(HttpServletRequest request); // Translates the request URI of the incoming HttpServletRequest into the view name based on the configured parameters.\n\tvoid setPrefix(String prefix); // Set the prefix to prepend to generated view names.\n\tvoid setSeparator(String separator); // Set the value that will replace '/' as the separator in the view name.\n\tvoid setStripExtension(boolean stripExtension); // Set whether file extensions should be stripped from the URI when generating the view name.\n\tvoid setStripLeadingSlash(boolean stripLeadingSlash); // Set whether leading slashes should be stripped from the URI when generating the view name.\n\tvoid setStripTrailingSlash(boolean stripTrailingSlash); // Set whether trailing slashes should be stripped from the URI when generating the view name.\n\tvoid setSuffix(String suffix); // Set the suffix to append to generated view names.\n\tprotected String transformPath(String lookupPath); // Transform the request URI (in the context of the webapp) stripping slashes and extensions, and replacing the separator as required.\n}"}
{"index": 10790, "repo": "spring-boot-actuator-3.1.1", "des": "Default ReactiveHealthContributorRegistry implementation.", "code": "public class DefaultReactiveHealthContributorRegistry extends Object implements ReactiveHealthContributorRegistry {\n\tReactiveHealthContributor getContributor(String name); // Return the contributor with the given name.\n\tIterator<NamedContributor<ReactiveHealthContributor>> iterator();\n\tvoid registerContributor(String name, ReactiveHealthContributor contributor); // Register a contributor with the given name.\n\tReactiveHealthContributor unregisterContributor(String name); // Unregister a previously registered contributor.\n}"}
{"index": 15748, "repo": "camel-api-4.0.0-RC1", "des": "An interface to represent an object which wishes to support listening for consumer events using the ConsumerListener.", "code": "public interface ConsumerListenerAware<T extends ConsumerListener<?,?>> {\n\tT getConsumerListener(); // Gets the ConsumerListener instance\n\tvoid setConsumerListener(T consumerListener); // Injects the ConsumerListener instance into the object\n}"}
{"index": 7469, "repo": "nifi-client-dto-1.22.0", "des": "Banners that should appear on the top and bottom of this NiFi.", "code": "Class BannerDTO {\n\tString getFooterText(); // The banner footer text.\n\tString getHeaderText(); // The banner header text.\n\tvoid setFooterText(String footerText);\n\tvoid setHeaderText(String headerText);\n}"}
{"index": 3475, "repo": "mahout-mr-0.13.0", "des": "Classifies the vectors into different clusters found by the clustering algorithm.", "code": "Class ClusterClassificationDriver {\n\tstatic void main(String[] args);\n\tstatic void run(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.Path input, org.apache.hadoop.fs.Path clusteringOutputPath, org.apache.hadoop.fs.Path output, double clusterClassificationThreshold, boolean emitMostLikely, boolean runSequential);\n\tstatic void run(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.Path input, org.apache.hadoop.fs.Path clusteringOutputPath, org.apache.hadoop.fs.Path output, Double clusterClassificationThreshold, boolean emitMostLikely, boolean runSequential); // Uses ClusterClassifier to classify input vectors into their respective clusters.\n\tint run(String[] args); // CLI to run Cluster Classification Driver.\n}"}
{"index": 4105, "repo": "camel-core-3.0.0-RC1", "des": "Act as a message source as input to a route.", "code": "Class FromDefinition {\n\tprotected void clear();\n\torg.apache.camel.Endpoint getEndpoint(); // Gets tne endpoint if an Endpoint instance was set.\n\tEndpointConsumerBuilder getEndpointConsumerBuilder();\n\tString getEndpointUri(); // Gets the uri of the endpoint used by this definition.\n\tString getLabel();\n\tString getShortName();\n\tString getUri();\n\tvoid setEndpoint(org.apache.camel.Endpoint endpoint);\n\tvoid setEndpointConsumerBuilder(EndpointConsumerBuilder endpointConsumerBuilder);\n\tvoid setUri(String uri); // Sets the URI of the endpoint to use\n}"}
{"index": 13476, "repo": "spring-boot-devtools-3.1.1", "des": "The client side component of a socket tunnel.", "code": "public class TunnelClient extends Object implements org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid addListener(TunnelClientListener listener);\n\tvoid afterSingletonsInstantiated();\n\tprotected final TunnelClient.ServerThread getServerThread();\n\tvoid removeListener(TunnelClientListener listener);\n\tint start(); // Start the client and accept incoming connections.\n\tvoid stop(); // Stop the client, disconnecting any servers.\n}"}
{"index": 3852, "repo": "hbase-client-3.0.0-alpha-4", "des": "A long comparator which numerical compares against the specified byte array.", "code": "Class LongComparator {\n\tint compareTo(byte[] value, int offset, int length);\n\tint compareTo(ByteBuffer value, int offset, int length);\n\tstatic LongComparator parseFrom(byte[] pbBytes); // Parses a serialized representation of LongComparator\n\tbyte[] toByteArray(); // Returns The comparator serialized using pb\n}"}
{"index": 4130, "repo": "camel-core-3.0.0-RC1", "des": "Removes a named property from the message exchange.", "code": "Class RemovePropertyDefinition {\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getPropertyName();\n\tString getShortName();\n\tvoid setPropertyName(String propertyName); // Name of property to remove\n}"}
{"index": 16847, "repo": "spring-amqp-3.0.6", "des": "A composite MessageConverter that delegates to an actual MessageConverter based on the contentType header.", "code": "public class ContentTypeDelegatingMessageConverter extends Object implements MessageConverter {\n\tvoid addDelegate(String contentType, MessageConverter messageConverter); // Add a delegate converter for the content type.\n\tObject fromMessage(Message message); // Convert from a Message to a Java object.\n\tprotected MessageConverter getConverterForContentType(String contentType);\n\tMap<String,MessageConverter> getDelegates();\n\tMessageConverter removeDelegate(String contentType); // Remove the delegate for the content type.\n\tvoid setDelegates(Map<String,MessageConverter> delegatesByContentType);\n\tMessage toMessage(Object object, MessageProperties messageProperties); // Convert a Java object to a Message.\n}"}
{"index": 5811, "repo": "iceberg-core-1.3.0", "des": "A writer capable of writing data and position deletes that may belong to different specs and partitions.", "code": "Interface PositionDeltaWriter<T> {\n\tdefault void delete(java.lang.CharSequence path, long pos, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Deletes a position in the provided spec/partition.\n\tvoid delete(java.lang.CharSequence path, long pos, T row, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Deletes a position in the provided spec/partition and records the deleted row in the delete file.\n\tvoid insert(T row, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Inserts a row to the provided spec/partition.\n\tWriteResult result(); // Returns a result that contains information about written DataFiles or DeleteFiles.\n\tdefault void update(T row, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Inserts a new version of an existing row to the provided spec/partition.\n}"}
{"index": 12895, "repo": "spring-data-mongodb-4.1.2", "des": "Class that exposes the SpringData MongoDB specific information like the current Version or driver information.", "code": "public class SpringDataMongoDB extends Object {\n\tstatic com.mongodb.MongoDriverInformation driverInformation(); // Obtain the SpringData MongoDB specific driver information.\n\tstatic Version version(); // Fetches the \"Implementation-Version\" manifest attribute from the jar file.\n}"}
{"index": 1651, "repo": "samza-api-1.8.0", "des": "Provides a way for applications to register some logic to be executed at a future time.", "code": "Interface CallbackScheduler {\n\t<K> void deleteCallback(K key); // Delete the scheduled callback for the key.\n\t<K> void scheduleCallback(K key, long timestamp, ScheduledCallback<K> callback); // Schedule the callback for the provided key to be invoked at epoch-time timestamp.\n}"}
{"index": 15890, "repo": "camel-api-4.0.0-RC1", "des": "Registry to cache transformers in memory.", "code": "public interface TransformerRegistry<K> extends Map<K,Transformer>, StaticService {\n\tvoid cleanUp(); // Cleanup the cache (purging stale entries)\n\tint dynamicSize(); // Number of transformers in the dynamic registry\n\tint getMaximumCacheSize(); // Maximum number of entries to store in the dynamic registry\n\tboolean isDynamic(String scheme); // Whether the given transformer is stored in the dynamic cache\n\tboolean isDynamic(DataType from, DataType to); // Whether the given Transformer is stored in the dynamic cache\n\tboolean isStatic(String scheme); // Whether the given transformer is stored in the static cache\n\tboolean isStatic(DataType from, DataType to); // Whether the given transformer is stored in the static cache\n\tvoid purge(); // Purges the cache (removes transformers from the dynamic cache)\n\tTransformer resolveTransformer(K key); // Lookup a Transformer in the registry which supports the transformation for the data types represented by the key.\n\tint staticSize(); // Number of transformers in the static registry.\n}"}
{"index": 5343, "repo": "druid-processing-26.0.0", "des": "Describes the basic shape for any 'nested data' (StructuredData) ComplexColumn implementation along with basic facilities for caching any columns created and methods for retrieving selectors for nested field columns.", "code": "Class NestedDataComplexColumn {\n\tClass<?> getClazz();\n\tabstract ColumnHolder getColumnHolder(List<NestedPathPart> path); // Get a ColumnHolder for a nested field column to retrieve metadata, the column itself, or indexes.\n\tabstract ColumnIndexSupplier getColumnIndexSupplier(List<NestedPathPart> path); // Make a ColumnIndexSupplier for a nested field column\n\tabstract Set<ColumnType> getColumnTypes(List<NestedPathPart> path); // Get all ColumnType for the nested field column\n\tabstract List<List<NestedPathPart>> getNestedFields(); // Get list of fields represented as a sequence of NestedPathPart\n\tString getTypeName();\n\tabstract boolean isNumeric(List<NestedPathPart> path); // Shortcut to check if a nested field column is TypeSignature.isNumeric(), useful when broadly choosing the type of vector selector to be used when dealing with the path\n\tabstract ColumnValueSelector<?> makeColumnValueSelector(List<NestedPathPart> path, ReadableOffset readableOffset); // Make a ColumnValueSelector for a nested field column\n\tabstract DimensionSelector makeDimensionSelector(List<NestedPathPart> path, ReadableOffset readableOffset, ExtractionFn fn); // Make a DimensionSelector for a nested field column\n\tabstract SingleValueDimensionVectorSelector makeSingleValueDimensionVectorSelector(List<NestedPathPart> path, ReadableVectorOffset readableOffset); // Make a SingleValueDimensionVectorSelector for a nested field column\n\tabstract VectorObjectSelector makeVectorObjectSelector(List<NestedPathPart> path, ReadableVectorOffset readableOffset); // Make a VectorObjectSelector for a nested field column\n\tabstract VectorValueSelector makeVectorValueSelector(List<NestedPathPart> path, ReadableVectorOffset readableOffset); // Make a VectorValueSelector for a nested field column\n}"}
{"index": 4614, "repo": "commons-vfs2-2.9.0", "des": "FileOperationProvider is responsible for dealing with FileOperation's.", "code": "Interface FileOperationProvider {\n\tvoid collectOperations(Collection<Class<? extends FileOperation>> operationsList, FileObject file); // Gather available operations for the specified FileObject and put them into specified operationsList.\n\tFileOperation getOperation(FileObject file, Class<? extends FileOperation> operationClass); // Get implementation for a given FileObject and FileOperation interface.\n}"}
{"index": 17243, "repo": "spring-xml-4.0.5", "des": "Represents an abstraction for a collection of XSD schemas.", "code": "public interface XsdSchemaCollection {\n\tXmlValidator createValidator(); // Creates a XmlValidator based on the schemas contained in this collection.\n\tXsdSchema[] getXsdSchemas(); // Returns all schemas contained in this collection.\n}"}
{"index": 10352, "repo": "spring-core-6.0.11", "des": "Describes the semantics of a reactive type including boolean checks for ReactiveTypeDescriptor.isMultiValue(), ReactiveTypeDescriptor.isNoValue(), and ReactiveTypeDescriptor.supportsEmpty().", "code": "public final class ReactiveTypeDescriptor extends Object {\n\tboolean equals(Object other);\n\tObject getEmptyValue(); // Return an empty-value instance for the underlying reactive or async type.\n\tClass<?> getReactiveType(); // Return the reactive type for this descriptor.\n\tboolean isDeferred(); // Whether the underlying operation is deferred and needs to be started explicitly, e.g.\n\tboolean isMultiValue(); // Return true if the reactive type can produce more than 1 value can be produced and is therefore a good fit to adapt to Flux.\n\tboolean isNoValue(); // Return true if the reactive type does not produce any values and only provides completion and error signals.\n\tstatic ReactiveTypeDescriptor multiValue(Class<?> type, Supplier<?> emptySupplier); // Descriptor for a reactive type that can produce 0..N values.\n\tstatic ReactiveTypeDescriptor nonDeferredAsyncValue(Class<?> type, Supplier<?> emptySupplier); // The same as singleOptionalValue(Class, Supplier) but for a non-deferred, async type such as CompletableFuture.\n\tstatic ReactiveTypeDescriptor noValue(Class<?> type, Supplier<?> emptySupplier); // Descriptor for a reactive type that does not produce any values.\n\tstatic ReactiveTypeDescriptor singleOptionalValue(Class<?> type, Supplier<?> emptySupplier); // Descriptor for a reactive type that can produce 0..1 values.\n\tstatic ReactiveTypeDescriptor singleRequiredValue(Class<?> type); // Descriptor for a reactive type that must produce 1 value to complete.\n\tboolean supportsEmpty(); // Return true if the reactive type can complete with no values.\n}"}
{"index": 18305, "repo": "commons-configuration2-2.9.0", "des": "An event class for reporting updates on a configuration object.", "code": "Class ConfigurationEvent {\n\tString getPropertyName(); // Gets the name of the affected property.\n\tObject getPropertyValue(); // Gets the value of the affected property if available.\n\tboolean isBeforeUpdate(); // Returns a flag if this event was generated before or after an update.\n}"}
{"index": 8266, "repo": "spring-ws-3.0.10.RELEASE", "des": "Simple callback handler that validates passwords agains a in-memory Properties object.", "code": "Class SimplePasswordValidationCallbackHandler {\n\tvoid afterPropertiesSet();\n\tprotected void handleInternal(Callback callback); // Template method that should be implemented by subclasses.\n\tvoid setUsers(Properties users); // Sets the users to validate against.\n\tvoid setUsersMap(Map<String,String> users);\n}"}
{"index": 9682, "repo": "commons-math3-3.6.1", "des": "Implements the Laguerre's Method for root finding of real coefficient polynomials.", "code": "Class LaguerreSolver {\n\tdouble doSolve(); // Method for implementing actual optimization algorithms in derived classes.\n\tdouble laguerre(double lo, double hi, double fLo, double fHi); // Deprecated. This method should not be part of the public API: It will be made private in version 4.0.\n\tComplex[] solveAllComplex(double[] coefficients, double initial); // Find all complex roots for the polynomial with the given coefficients, starting from the given initial value.\n\tComplex[] solveAllComplex(double[] coefficients, double initial, int maxEval); // Find all complex roots for the polynomial with the given coefficients, starting from the given initial value.\n\tComplex solveComplex(double[] coefficients, double initial); // Find a complex root for the polynomial with the given coefficients, starting from the given initial value.\n\tComplex solveComplex(double[] coefficients, double initial, int maxEval); // Find a complex root for the polynomial with the given coefficients, starting from the given initial value.\n}"}
{"index": 3163, "repo": "commons-jexl3-3.3", "des": "Interface used for regular method invocation.", "code": "Interface JexlMethod {\n\tClass<?> getReturnType(); // returns the return type of the method invoked.\n\tObject invoke(Object obj, Object... params); // Invocation method, called when the method invocation should be performed and a value returned.\n\tboolean isCacheable(); // Specifies if this JexlMethod is cacheable and able to be reused for this class of object it was returned for.\n\tboolean tryFailed(Object rval); // Checks whether a tryInvoke return value indicates a failure or not.\n\tObject tryInvoke(String name, Object obj, Object... params); // Attempts to reuse this JexlMethod, checking that it is compatible with the actual set of arguments.\n}"}
{"index": 4499, "repo": "beam-sdks-java-core-2.49.0", "des": "Jackson serializer for converting Rows to JSON.", "code": "Class RowJson.RowJsonSerializer {\n\tstatic RowJson.RowJsonSerializer forSchema(Schema schema); // Creates a serializer for a Row Schema.\n\tvoid serialize(Row value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider);\n\tRowJson.RowJsonSerializer withDropNullsOnWrite(java.lang.Boolean dropNullsOnWrite); // Serializer drops nulls on write if set to true instead of writing fieldName: null.\n}"}
{"index": 10634, "repo": "groovy-all-4.0.13", "des": "Represents a sequence of zero or more objects of a given type.", "code": "public class Sequence extends ArrayList implements GroovyObject {\n\tvoid add(int index, Object element);\n\tboolean add(Object element);\n\tboolean addAll(int index, Collection c);\n\tboolean addAll(Collection c);\n\tprotected void checkCollectionType(Collection c); // Checks that each member of the given collection are of the correct type\n\tprotected void checkType(Object object); // Checks that the given object instance is of the correct type otherwise a runtime exception is thrown\n\tvoid clear();\n\tboolean equals(Sequence that);\n\tboolean equals(Object that);\n\tMetaClass getMetaClass(); // Returns the metaclass for a given class.\n\tObject getProperty(String property); // Retrieves a property value.\n\tObject invokeMethod(String name, Object args); // Invokes the given method.\n\tint minimumSize();\n\tObject remove(int index);\n\tprotected void removeRange(int fromIndex, int toIndex);\n\tObject set(int index, Object element);\n\tvoid set(Collection collection); // Sets the contents of this sequence to that of the given collection.\n\tvoid setMetaClass(MetaClass metaClass); // Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setProperty(String property, Object newValue); // Sets the given property to the new value.\n\tClass type();\n}"}
{"index": 4955, "repo": "commons-collections-3.2.2", "des": "Defines a collection that counts the number of times an object appears in the collection.", "code": "Interface Bag {\n\tboolean add(Object object); // (Violation) Adds one copy the specified object to the Bag.\n\tboolean add(Object object, int nCopies); // Adds nCopies copies of the specified object to the Bag.\n\tboolean containsAll(Collection coll); // (Violation) Returns true if the bag contains all elements in the given collection, respecting cardinality.\n\tint getCount(Object object); // Returns the number of occurrences (cardinality) of the given object currently in the bag.\n\tIterator iterator(); // Returns an Iterator over the entire set of members, including copies due to cardinality.\n\tboolean remove(Object object); // (Violation) Removes all occurrences of the given object from the bag.\n\tboolean remove(Object object, int nCopies); // Removes nCopies copies of the specified object from the Bag.\n\tboolean removeAll(Collection coll); // (Violation) Remove all elements represented in the given collection, respecting cardinality.\n\tboolean retainAll(Collection coll); // (Violation) Remove any members of the bag that are not in the given collection, respecting cardinality.\n\tint size(); // Returns the total number of items in the bag across all types.\n\tSet uniqueSet(); // Returns a Set of unique elements in the Bag.\n}"}
{"index": 12589, "repo": "spring-jdbc-6.0.11", "des": "Exception thrown when we can't classify an SQLException into one of our generic data access exceptions.", "code": "public class UncategorizedSQLException extends org.springframework.dao.UncategorizedDataAccessException {\n\tString getSql(); // Return the SQL that led to the problem (if known).\n\tSQLException getSQLException(); // Return the underlying SQLException.\n}"}
{"index": 10717, "repo": "spring-tx-6.0.11", "des": "Simple TransactionAttributeSource implementation that allows attributes to be stored per method in a Map.", "code": "public class MethodMapTransactionAttributeSource extends Object implements TransactionAttributeSource, org.springframework.context.EmbeddedValueResolverAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean {\n\tvoid addTransactionalMethod(Class<?> clazz, String mappedName, TransactionAttribute attr); // Add an attribute for a transactional method.\n\tvoid addTransactionalMethod(Method method, TransactionAttribute attr); // Add an attribute for a transactional method.\n\tvoid addTransactionalMethod(String name, TransactionAttribute attr); // Add an attribute for a transactional method.\n\tvoid afterPropertiesSet(); // Eagerly initializes the specified \"methodMap\", if any.\n\tboolean equals(Object other);\n\tTransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass); // Return the transaction attribute for the given method, or null if the method is non-transactional.\n\tprotected void initMethodMap(Map<String,TransactionAttribute> methodMap); // Initialize the specified \"methodMap\", if any.\n\tprotected boolean isMatch(String methodName, String mappedName); // Return if the given method name matches the mapped name.\n\tvoid setBeanClassLoader(ClassLoader beanClassLoader);\n\tvoid setEmbeddedValueResolver(org.springframework.util.StringValueResolver resolver);\n\tvoid setMethodMap(Map<String,TransactionAttribute> methodMap); // Set a name/attribute map, consisting of \"FQCN.method\" method names (e.g.\n}"}
{"index": 6801, "repo": "calcite-core-1.34.0", "des": "Exception which contains information about the textual context of the causing exception.", "code": "Class CalciteContextException {\n\tint getEndPosColumn(); // Returns the 1-based ending column number, or 0 for missing position information.\n\tint getEndPosLine(); // Returns the 1-based ending line number, or 0 for missing position information.\n\t@Nullable String getMessage();\n\t@Nullable String getOriginalStatement(); // Returns the input string that is associated with the context.\n\tint getPosColumn(); // Returns the 1-based column number, or 0 for missing position information.\n\tint getPosLine(); // Returns the 1-based line number, or 0 for missing position information.\n\tvoid setOriginalStatement(@Nullable String originalStatement); // Sets the input string to associate with the current context.\n\tvoid setPosition(int posLine, int posColumn); // Sets a textual position at which this exception was detected.\n\tvoid setPosition(int posLine, int posColumn, int endPosLine, int endPosColumn); // Sets a textual range at which this exception was detected.\n}"}
{"index": 1125, "repo": "ignite-core-2.15.0", "des": "Query metrics aggregated by query type and its textual representation.", "code": "Interface QueryDetailMetrics {\n\tdouble averageTime(); // Gets average execution time of query.\n\tString cache();\n\tint completions(); // Gets number of completed execution of query.\n\tint executions(); // Gets total number execution of query.\n\tint failures(); // Gets number of times a query execution failed.\n\tlong lastStartTime(); // Gets latest query start time.\n\tlong maximumTime(); // Gets maximum execution time of query.\n\tlong minimumTime(); // Gets minimum execution time of query.\n\tString query();\n\tString queryType();\n\tlong totalTime(); // Gets total time of all query executions.\n}"}
{"index": 10334, "repo": "spring-core-6.0.11", "des": "Resource implementation for Path handles, performing all operations and transformations via the Path API.", "code": "public class PathResource extends AbstractResource implements WritableResource {\n\tlong contentLength(); // This implementation returns the underlying file's length.\n\tResource createRelative(String relativePath); // This implementation creates a PathResource, applying the given path relative to the path of the underlying file of this resource descriptor.\n\tboolean equals(Object obj); // This implementation compares the underlying Path references.\n\tboolean exists(); // This implementation returns whether the underlying file exists.\n\tbyte[] getContentAsByteArray(); // Return the contents of this resource as a byte array.\n\tString getContentAsString(Charset charset); // Returns the contents of this resource as a string, using the specified charset.\n\tString getDescription(); // Return a description for this resource, to be used for error output when working with the resource.\n\tFile getFile(); // This implementation returns the underlying File reference.\n\tString getFilename(); // This implementation returns the name of the file.\n\tInputStream getInputStream(); // This implementation opens an InputStream for the underlying file.\n\tOutputStream getOutputStream(); // This implementation opens an OutputStream for the underlying file.\n\tfinal String getPath(); // Return the file path for this resource.\n\tURI getURI(); // This implementation returns a URI for the underlying file.\n\tURL getURL(); // This implementation returns a URL for the underlying file.\n\tboolean isFile(); // This implementation always indicates a file.\n\tboolean isReadable(); // This implementation checks whether the underlying file is marked as readable (and corresponds to an actual file with content, not to a directory).\n\tboolean isWritable(); // This implementation checks whether the underlying file is marked as writable (and corresponds to an actual file with content, not to a directory).\n\tlong lastModified(); // This implementation returns the underlying file's timestamp.\n\tReadableByteChannel readableChannel(); // This implementation opens a ReadableByteChannel for the underlying file.\n\tWritableByteChannel writableChannel(); // This implementation opens a WritableByteChannel for the underlying file.\n}"}
{"index": 4165, "repo": "camel-core-3.0.0-RC1", "des": "Triggers a route when an expression evaluates to true.", "code": "Class WhenDefinition {\n\tprotected String description();\n\tProcessorDefinition<?> endParent(); // Strategy to allow ProcessorDefinitions to have special logic when using end() in the DSL to return back to the intended parent.\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getShortName();\n\tvoid setExpression(ExpressionDefinition expression); // Expression used as the predicate to evaluate whether this when should trigger and route the message or not.\n}"}
{"index": 13528, "repo": "spring-messaging-6.0.11", "des": "A MessageChannel that maintains a list ChannelInterceptors and allows interception of message sending.", "code": "public interface InterceptableChannel {\n\tvoid addInterceptor(int index, ChannelInterceptor interceptor); // Add a channel interceptor at the specified index.\n\tvoid addInterceptor(ChannelInterceptor interceptor); // Add a channel interceptor to the end of the list.\n\tList<ChannelInterceptor> getInterceptors(); // Return the list of configured interceptors.\n\tChannelInterceptor removeInterceptor(int index); // Remove the interceptor at the given index.\n\tboolean removeInterceptor(ChannelInterceptor interceptor); // Remove the given interceptor.\n\tvoid setInterceptors(List<ChannelInterceptor> interceptors); // Set the list of channel interceptors clearing any existing interceptors.\n}"}
{"index": 15587, "repo": "spring-security-core-6.1.2", "des": "An Observation.Context used during authentications", "code": "public class AuthenticationObservationContext extends io.micrometer.observation.Observation.Context {\n\tClass<?> getAuthenticationManagerClass(); // Get the AuthenticationManager class that processed the authentication\n\tAuthentication getAuthenticationRequest(); // Get the Authentication request that was observed\n\tAuthentication getAuthenticationResult(); // Get the Authentication result that was observed\n\tvoid setAuthenticationManagerClass(Class<?> authenticationManagerClass); // Set the AuthenticationManager class that processed the authentication\n\tvoid setAuthenticationRequest(Authentication authenticationRequest); // Set the Authentication request that was observed\n\tvoid setAuthenticationResult(Authentication authenticationResult); // Set the Authentication result that was observed\n}"}
{"index": 9920, "repo": "iceberg-api-1.3.0", "des": "An interface for locking, used to ensure commit isolation.", "code": "Interface LockManager {\n\tboolean acquire(java.lang.String entityId, java.lang.String ownerId); // Try to acquire a lock\n\tvoid initialize(java.util.Map<java.lang.String,java.lang.String> properties); // Initialize lock manager from catalog properties.\n\tboolean release(java.lang.String entityId, java.lang.String ownerId); // Release a lock\n}"}
{"index": 11575, "repo": "spring-security-oauth2-client-6.1.2", "des": "Implementations of this interface are capable of resolving an OAuth2AuthorizationRequest from the provided HttpServletRequest.", "code": "public interface OAuth2AuthorizationRequestResolver {\n\torg.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest resolve(jakarta.servlet.http.HttpServletRequest request); // Returns the OAuth2AuthorizationRequest resolved from the provided HttpServletRequest or null if not available.\n\torg.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest resolve(jakarta.servlet.http.HttpServletRequest request, String clientRegistrationId); // Returns the OAuth2AuthorizationRequest resolved from the provided HttpServletRequest or null if not available.\n}"}
{"index": 11358, "repo": "spring-context-6.0.11", "des": "LoadTimeWeaver implementation for JBoss's instrumentable ClassLoader.", "code": "public class JBossLoadTimeWeaver extends Object implements LoadTimeWeaver {\n\tvoid addTransformer(ClassFileTransformer transformer); // Add a ClassFileTransformer to be applied by this LoadTimeWeaver.\n\tClassLoader getInstrumentableClassLoader(); // Return a ClassLoader that supports instrumentation through AspectJ-style load-time weaving based on user-defined ClassFileTransformers.\n\tClassLoader getThrowawayClassLoader(); // Return a throwaway ClassLoader, enabling classes to be loaded and inspected without affecting the parent ClassLoader.\n}"}
{"index": 4031, "repo": "zookeeper-3.8.2", "des": "This class implements a connection manager for leader election using TCP.", "code": "Class QuorumCnxManager {\n\tvoid addToRecvQueue(QuorumCnxManager.Message msg); // Inserts an element in the recvQueue.\n\tvoid connectAll(); // Try to establish a connection with each server if one doesn't exist.\n\tboolean connectedToPeer(long peerSid);\n\tlong getConnectionThreadCount(); // Return number of connection processing threads.\n\tlong getThreadCount(); // Return number of worker threads\n\tvoid halt(); // Flag that it is time to wrap up all activities and interrupt the listener.\n\tvoid initiateConnection(MultipleAddresses electionAddr, Long sid); // First we create the socket, perform SSL handshake and authentication if needed.\n\tboolean initiateConnectionAsync(MultipleAddresses electionAddr, Long sid); // Server will initiate the connection request to its peer server asynchronously via separate connection thread.\n\tboolean isReconfigEnabled();\n\tQuorumCnxManager.Message pollRecvQueue(long timeout, TimeUnit unit); // Retrieves and removes a message at the head of this queue, waiting up to the specified wait time if necessary for an element to become available.\n\tvoid receiveConnection(Socket sock); // If this server receives a connection request, then it gives up on the new connection if it wins.\n\tvoid receiveConnectionAsync(Socket sock); // Server receives a connection request and handles it asynchronously via separate thread.\n\tvoid softHalt(); // A soft halt simply finishes workers.\n\tvoid testInitiateConnection(long sid); // Invokes initiateConnection for testing purposes\n\tvoid toSend(Long sid, ByteBuffer b); // Processes invoke this message to queue a message to send.\n}"}
{"index": 9045, "repo": "hbase-server-3.0.0-alpha-4", "des": "A reference to the top or bottom half of a store file where 'bottom' is the first half of the file containing the keys that sort lowest and 'top' is the second half of the file with keys that sort greater than those of the bottom half.", "code": "Class Reference {\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.FSProtos.Reference convert();\n\tstatic Reference convert(org.apache.hadoop.hbase.shaded.protobuf.generated.FSProtos.Reference r);\n\tstatic Reference createBottomReference(byte[] splitRow); // Returns A Reference that points at the bottom half of a an hfile\n\tstatic Reference createTopReference(byte[] splitRow); // Returns A Reference that points at top half of a an hfile\n\tboolean equals(Object o);\n\torg.apache.hadoop.hbase.io.Reference.Range getFileRegion();\n\tbyte[] getSplitKey();\n\tstatic boolean isTopFileRegion(org.apache.hadoop.hbase.io.Reference.Range r);\n\tstatic Reference read(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path p); // Read a Reference from FileSystem.\n\torg.apache.hadoop.fs.Path write(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path p);\n}"}
{"index": 9433, "repo": "hadoop-yarn-api-3.3.6", "des": "A class that holds a list of put errors.", "code": "Class TimelinePutResponse {\n\tvoid addError(TimelinePutResponse.TimelinePutError error); // Add a single TimelinePutResponse.TimelinePutError instance into the existing list\n\tvoid addErrors(List<TimelinePutResponse.TimelinePutError> errors); // Add a list of TimelinePutResponse.TimelinePutError instances into the existing list\n\tList<TimelinePutResponse.TimelinePutError> getErrors(); // Get a list of TimelinePutResponse.TimelinePutError instances\n\tvoid setErrors(List<TimelinePutResponse.TimelinePutError> errors); // Set the list to the given list of TimelinePutResponse.TimelinePutError instances\n}"}
{"index": 12306, "repo": "jena-core-4.9.0", "des": "A triple store is a collection of triples that supports access to triples matching a triple pattern.", "code": "public interface TripleStore {\n\tvoid add(Triple triple); // Add a triple to the map.\n\tvoid clear(); // Remove all triples from the map.\n\tboolean contains(Triple tripleMatch); // Answer true if the graph contains any triple matching t.\n\tint countTriples(); // Return the number of triples in the map.\n\tExtendedIterator<Triple> find(Triple tripleMatch); // Returns an ExtendedIterator of all triples in the graph matching the given triple match.\n\tboolean isEmpty(); // Return true if the map is empty.\n\tvoid remove(Triple triple); // Remove a triple from the map.\n\tStream<Triple> stream(); // Returns a Stream of all triples in the graph.\n\tStream<Triple> stream(Triple tripleMatch); // Returns a Stream of Triples matching the given pattern.\n}"}
{"index": 15850, "repo": "camel-api-4.0.0-RC1", "des": "SPI for loading RoutesBuilder from a Resource.", "code": "public interface RoutesBuilderLoader extends StaticService, CamelContextAware {\n\tString getSupportedExtension(); // The supported file extension.\n\tRoutesBuilder loadRoutesBuilder(Resource resource); // Loads RoutesBuilder from Resource.\n\tdefault void preParseRoute(Resource resource); // Pre-parses the RoutesBuilder from Resource.\n}"}
{"index": 6476, "repo": "exoplayer-core-2.9.6", "des": "The default audio processor chain, which applies a (possibly empty) chain of user-defined audio processors followed by SilenceSkippingAudioProcessor and SonicAudioProcessor.", "code": "Class DefaultAudioSink.DefaultAudioProcessorChain {\n\tPlaybackParameters applyPlaybackParameters(PlaybackParameters playbackParameters); // Configures audio processors to apply the specified playback parameters immediately, returning the new parameters, which may differ from those passed in.\n\tAudioProcessor[] getAudioProcessors(); // Returns the fixed chain of audio processors that will process audio.\n\tlong getMediaDuration(long playoutDuration); // Scales the specified playout duration to take into account speedup due to audio processing, returning an input media duration, in arbitrary units.\n\tlong getSkippedOutputFrameCount(); // Returns the number of output audio frames skipped since the audio processors were last flushed.\n}"}
{"index": 16682, "repo": "spring-beans-6.0.11", "des": "Encapsulates methods for registering JavaBeans PropertyEditors.", "code": "public interface PropertyEditorRegistry {\n\tPropertyEditor findCustomEditor(Class<?> requiredType, String propertyPath); // Find a custom property editor for the given type and property.\n\tvoid registerCustomEditor(Class<?> requiredType, PropertyEditor propertyEditor); // Register the given custom property editor for all properties of the given type.\n\tvoid registerCustomEditor(Class<?> requiredType, String propertyPath, PropertyEditor propertyEditor); // Register the given custom property editor for the given type and property, or for all properties of the given type.\n}"}
{"index": 14, "repo": "spring-cloud-aws-jdbc-2.2.6.RELEASE", "des": "RetryPolicy implementation that checks for database error which are retryable.", "code": "Class SqlRetryPolicy {\n\tboolean canRetry(org.springframework.retry.RetryContext context); // Returns if this method is retryable based on the RetryContext.\n\tvoid close(org.springframework.retry.RetryContext context);\n\torg.springframework.retry.RetryContext open(org.springframework.retry.RetryContext parent);\n\tvoid registerThrowable(org.springframework.retry.RetryContext context, Throwable throwable);\n\tvoid setMaxNumberOfRetries(int maxNumberOfRetries); // Configures the maximum number of retries.\n}"}
{"index": 13805, "repo": "spring-webmvc-6.0.11", "des": "Defines a builder that adds headers to the response.", "code": "public static interface ServerResponse.HeadersBuilder<B extends ServerResponse.HeadersBuilder<B>> {\n\tB allow(Set<org.springframework.http.HttpMethod> allowedMethods); // Set the set of allowed HTTP methods, as specified by the Allow header.\n\tB allow(org.springframework.http.HttpMethod... allowedMethods); // Set the set of allowed HTTP methods, as specified by the Allow header.\n\tServerResponse build(); // Build the response entity with no body.\n\tServerResponse build(BiFunction<HttpServletRequest,HttpServletResponse,ModelAndView> writeFunction); // Build the response entity with a custom write function.\n\tB cacheControl(org.springframework.http.CacheControl cacheControl); // Set the caching directives for the resource, as specified by the HTTP 1.1 Cache-Control header.\n\tB cookie(Cookie cookie); // Add the given cookie to the response.\n\tB cookies(Consumer<org.springframework.util.MultiValueMap<String,Cookie>> cookiesConsumer); // Manipulate this response's cookies with the given consumer.\n\tB eTag(String eTag); // Set the entity tag of the body, as specified by the ETag header.\n\tB header(String headerName, String... headerValues); // Add the given header value(s) under the given name.\n\tB headers(Consumer<org.springframework.http.HttpHeaders> headersConsumer); // Manipulate this response's headers with the given consumer.\n\tB lastModified(Instant lastModified); // Set the time the resource was last changed, as specified by the Last-Modified header.\n\tB lastModified(ZonedDateTime lastModified); // Set the time the resource was last changed, as specified by the Last-Modified header.\n\tB location(URI location); // Set the location of a resource, as specified by the Location header.\n\tB varyBy(String... requestHeaders); // Configure one or more request header names (e.g.\n}"}
{"index": 16576, "repo": "spring-beans-6.0.11", "des": "Resolver used to support the autowiring of methods.", "code": "public final class AutowiredMethodArgumentsResolver extends Object {\n\tstatic AutowiredMethodArgumentsResolver forMethod(String methodName, Class<?>... parameterTypes); // Create a new AutowiredMethodArgumentsResolver for the specified method where injection is optional.\n\tstatic AutowiredMethodArgumentsResolver forRequiredMethod(String methodName, Class<?>... parameterTypes); // Create a new AutowiredMethodArgumentsResolver for the specified method where injection is required.\n\tprotected final void registerDependentBeans(ConfigurableBeanFactory beanFactory, String beanName, Set<String> autowiredBeanNames);\n\tAutowiredArguments resolve(RegisteredBean registeredBean); // Resolve the method arguments for the specified registered bean.\n\tvoid resolve(RegisteredBean registeredBean, org.springframework.util.function.ThrowingConsumer<AutowiredArguments> action); // Resolve the method arguments for the specified registered bean and provide it to the given action.\n\tvoid resolveAndInvoke(RegisteredBean registeredBean, Object instance); // Resolve the method arguments for the specified registered bean and invoke the method using reflection.\n\tAutowiredMethodArgumentsResolver withShortcut(String... beanNames); // Return a new AutowiredMethodArgumentsResolver instance that uses direct bean name injection shortcuts for specific parameters.\n}"}
{"index": 8079, "repo": "commons-compress-1.23.0", "des": "Utility class to manage the various options available for pack200.", "code": "Class PackingOptions {\n\tvoid addClassAttributeAction(String attributeName, String action);\n\tvoid addCodeAttributeAction(String attributeName, String action);\n\tvoid addFieldAttributeAction(String attributeName, String action);\n\tvoid addMethodAttributeAction(String attributeName, String action);\n\tvoid addPassFile(String passFileName); // Tell the compressor to pass the file with the given name, or if the name is a directory name all files under that directory will be passed.\n\tString getDeflateHint();\n\tint getEffort();\n\tString getLogFile();\n\tString getModificationTime();\n\tlong getSegmentLimit();\n\tString getUnknownAttributeAction();\n\torg.objectweb.asm.Attribute[] getUnknownAttributePrototypes();\n\tString getUnknownClassAttributeAction(String type);\n\tString getUnknownCodeAttributeAction(String type);\n\tString getUnknownFieldAttributeAction(String type);\n\tString getUnknownMethodAttributeAction(String type);\n\tboolean isGzip();\n\tboolean isKeepDeflateHint();\n\tboolean isKeepFileOrder();\n\tboolean isPassFile(String passFileName);\n\tboolean isStripDebug();\n\tboolean isVerbose();\n\tvoid removePassFile(String passFileName);\n\tvoid setDeflateHint(String deflateHint);\n\tvoid setEffort(int effort); // Sets the compression effort level (0-9, equivalent to -E command line option)\n\tvoid setGzip(boolean gzip);\n\tvoid setKeepFileOrder(boolean keepFileOrder);\n\tvoid setLogFile(String logFile);\n\tvoid setModificationTime(String modificationTime);\n\tvoid setQuiet(boolean quiet);\n\tvoid setSegmentLimit(long segmentLimit); // Sets the segment limit (equivalent to -S command line option)\n\tvoid setStripDebug(boolean stripDebug); // Sets strip debug attributes.\n\tvoid setUnknownAttributeAction(String unknownAttributeAction); // Sets the compressor behavior when an unknown attribute is encountered.\n\tvoid setVerbose(boolean verbose);\n}"}
{"index": 6391, "repo": "spring-data-solr-4.3.15", "des": "The QueryParser takes a spring-data-solr Query and returns a SolrQuery.", "code": "Interface QueryParser {\n\torg.apache.solr.client.solrj.SolrQuery constructSolrQuery(SolrDataQuery query, Class<?> domainType); // Convert given Query into a SolrQuery executable via SolrClient\n\tString getQueryString(SolrDataQuery query, Class<?> domainType); // Get the queryString to use withSolrQuery.setParam(CommonParams.Q, \"queryString\"}\n\tvoid registerConverter(Converter<?,?> converter); // Register an additional converter for transforming object values to solr readable format\n}"}
{"index": 12462, "repo": "spring-boot-test-3.1.1", "des": "Provides access to System.out and System.err output that has been captured by the OutputCaptureExtension or OutputCaptureRule.", "code": "public interface CapturedOutput extends CharSequence {\n\tdefault char charAt(int index);\n\tString getAll(); // Return all content (both System.out and System.err) in the order that it was captured.\n\tString getErr(); // Return System.err content in the order that it was captured.\n\tString getOut(); // Return System.out content in the order that it was captured.\n\tdefault int length();\n\tdefault CharSequence subSequence(int start, int end);\n}"}
{"index": 5466, "repo": "druid-processing-26.0.0", "des": "TimeAndDimsIterator (in conjunction with TimeAndDimsPointer) is an Iterator-like abstraction, designed for allocation-free transformation, merging, combining and iteration over a stream of data points.", "code": "Interface TimeAndDimsIterator {\n\tvoid close(); // Closes any resources, associated with this iterator.\n\tTimeAndDimsPointer getPointer(); // Returns a pointer to the current data point.\n\tboolean moveToNext(); // Moves iterator to the next data point.\n}"}
{"index": 11659, "repo": "spring-websocket-6.0.11", "des": "Exposes information, typically to Transport and session implementations, about a request to connect to a SockJS server endpoint over a given transport.", "code": "public interface TransportRequest {\n\tvoid addTimeoutTask(Runnable runnable); // Register a timeout cleanup task to invoke if the SockJS session is not fully established within the calculated retransmission timeout period.\n\torg.springframework.http.HttpHeaders getHandshakeHeaders(); // Return the headers to send with the connect request.\n\torg.springframework.http.HttpHeaders getHttpRequestHeaders(); // Return the headers to add to all other HTTP requests besides the handshake request such as XHR receive and send requests.\n\tSockJsMessageCodec getMessageCodec(); // Return the message codec to use for encoding SockJS messages.\n\tSockJsUrlInfo getSockJsUrlInfo(); // Return information about the SockJS URL including server and session ID.\n\tURI getTransportUrl(); // Return the transport URL for the given transport.\n\tPrincipal getUser(); // Return the user associated with the request, if any.\n}"}
{"index": 11660, "repo": "spring-websocket-6.0.11", "des": "An XHR transport based on Undertow's UndertowClient.", "code": "public class UndertowXhrTransport extends AbstractXhrTransport {\n\tprotected void connectInternal(TransportRequest request, WebSocketHandler handler, URI receiveUrl, org.springframework.http.HttpHeaders handshakeHeaders, XhrClientSockJsSession session, CompletableFuture<WebSocketSession> connectFuture);\n\tprotected org.springframework.http.ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, org.springframework.http.HttpHeaders headers);\n\tprotected org.springframework.http.ResponseEntity<String> executeRequest(URI url, io.undertow.util.HttpString method, org.springframework.http.HttpHeaders headers, String body);\n\tprotected org.springframework.http.ResponseEntity<String> executeSendRequestInternal(URI url, org.springframework.http.HttpHeaders headers, TextMessage message);\n\tio.undertow.client.UndertowClient getHttpClient(); // Return Undertow's native HTTP client.\n\torg.xnio.XnioWorker getWorker(); // Return the XnioWorker backing the I/O operations for Undertow's HTTP client.\n}"}
{"index": 16503, "repo": "spring-batch-infrastructure-5.0.2", "des": "Reads items from multiple resources sequentially - resource list is given by MultiResourceItemReader.setResources(Resource[]), the actual reading is delegated to MultiResourceItemReader.setDelegate(ResourceAwareItemReaderItemStream).", "code": "public class MultiResourceItemReader<T> extends AbstractItemStreamItemReader<T> {\n\tvoid close(); // Close the setDelegate(ResourceAwareItemReaderItemStream) reader and reset instance variable values.\n\tvoid open(ExecutionContext executionContext); // Figure out which resource to start with in case of restart, open the delegate and restore delegate's position in the resource.\n\tT read(); // Reads the next item, jumping to next resource if necessary.\n\tvoid setComparator(Comparator<org.springframework.core.io.Resource> comparator);\n\tvoid setDelegate(ResourceAwareItemReaderItemStream<? extends T> delegate);\n\tvoid setResources(org.springframework.core.io.Resource[] resources);\n\tvoid setSaveState(boolean saveState); // Set the boolean indicating whether or not state should be saved in the provided ExecutionContext during the ItemStream call to update.\n\tvoid setStrict(boolean strict); // In strict mode the reader will throw an exception on open(org.springframework.batch.item.ExecutionContext) if there are no resources to read.\n\tvoid update(ExecutionContext executionContext); // Store the current resource index and position in the resource.\n}"}
{"index": 6596, "repo": "exoplayer-core-2.9.6", "des": "A sink for audio buffers handled by the audio processor.", "code": "Interface TeeAudioProcessor.AudioBufferSink {\n\tvoid flush(int sampleRateHz, int channelCount, int encoding); // Called when the audio processor is flushed with a format of subsequent input.\n\tvoid handleBuffer(java.nio.ByteBuffer buffer); // Called when data is written to the audio processor.\n}"}
{"index": 7055, "repo": "calcite-core-1.34.0", "des": "Context from which a relational expression can initialize itself, reading from a serialized form of the relational expression.", "code": "Interface RelInput {\n\t@Nullable Object get(String tag);\n\tList<AggregateCall> getAggregateCalls(String tag);\n\tImmutableBitSet getBitSet(String tag);\n\t@Nullable List<ImmutableBitSet> getBitSetList(String tag);\n\tboolean getBoolean(String tag, boolean default_);\n\tRelOptCluster getCluster();\n\tRelCollation getCollation();\n\tRelDistribution getDistribution();\n\t<E extends Enum<E>>E getEnum(String tag, Class<E> enumClass); // Returns an enum value.\n\t@Nullable RexNode getExpression(String tag); // Returns an expression.\n\t@Nullable List<RexNode> getExpressionList(String tag);\n\tfloat getFloat(String tag); // Returns a float value.\n\tRelNode getInput(); // Returns the input relational expression.\n\tList<RelNode> getInputs();\n\t@Nullable List<Integer> getIntegerList(String tag);\n\t@Nullable List<List<Integer>> getIntegerListList(String tag);\n\tRelDataType getRowType(String tag);\n\tRelDataType getRowType(String expressionsTag, String fieldsTag);\n\t@Nullable String getString(String tag); // Returns a string value.\n\t@Nullable List<String> getStringList(String tag);\n\tRelOptTable getTable(String table);\n\tRelTraitSet getTraitSet();\n\tcom.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<RexLiteral>> getTuples(String tag);\n}"}
{"index": 10125, "repo": "spring-hateoas-2.1.2", "des": "Configuration option how to render single links of a given LinkRelation.", "code": "public static enum HalConfiguration.RenderSingleLinks extends Enum<HalConfiguration.RenderSingleLinks> {\n\tstatic HalConfiguration.RenderSingleLinks valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic HalConfiguration.RenderSingleLinks[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 6702, "repo": "lucene-analyzers-common-8.11.2", "des": "Factory for HyphenationCompoundWordTokenFilter.", "code": "Class HyphenationCompoundWordTokenFilterFactory {\n\tTokenFilter create(TokenStream input); // Transform the specified input TokenStream\n\tvoid inform(ResourceLoader loader); // Initializes this component with the provided ResourceLoader (used for loading classes, files, etc).\n}"}
{"index": 17774, "repo": "spring-web-6.0.11", "des": "Represents an HTTP (byte) range for use with the HTTP \"Range\" header.", "code": "public abstract class HttpRange extends Object {\n\tstatic HttpRange createByteRange(long firstBytePos); // Create an HttpRange from the given position to the end.\n\tstatic HttpRange createByteRange(long firstBytePos, long lastBytePos); // Create a HttpRange from the given fist to last position.\n\tstatic HttpRange createSuffixRange(long suffixLength); // Create an HttpRange that ranges over the last given number of bytes.\n\tabstract long getRangeEnd(long length); // Return the end of the range (inclusive) given the total length of a representation.\n\tabstract long getRangeStart(long length); // Return the start of the range given the total length of a representation.\n\tstatic List<HttpRange> parseRanges(String ranges); // Parse the given, comma-separated string into a list of HttpRange objects.\n\torg.springframework.core.io.support.ResourceRegion toResourceRegion(org.springframework.core.io.Resource resource); // Turn a Resource into a ResourceRegion using the range information contained in the current HttpRange.\n\tstatic List<org.springframework.core.io.support.ResourceRegion> toResourceRegions(List<HttpRange> ranges, org.springframework.core.io.Resource resource); // Convert each HttpRange into a ResourceRegion, selecting the appropriate segment of the given Resource using HTTP Range information.\n\tstatic String toString(Collection<HttpRange> ranges); // Return a string representation of the given list of HttpRange objects.\n}"}
{"index": 6044, "repo": "jackson-databind-2.15.2", "des": "Base class for serializers that will output contents as JSON arrays; typically serializers used for Collection and array types.", "code": "Class AsArraySerializerBase<T> {\n\tprotected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider);\n\tprotected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, JavaType type, SerializerProvider provider);\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tJsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property); // This method is needed to resolve contextual annotations like per-property overrides, as well as do recursive call to createContextual of content serializer, if known statically.\n\tJsonSerializer<?> getContentSerializer(); // Accessor for serializer used for serializing contents (List and array elements, Map values etc) of the container for which this serializer is used, if it is known statically.\n\tJavaType getContentType(); // Accessor for finding declared (static) element type for type this serializer is used for.\n\tvoid serialize(T value, JsonGenerator gen, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tprotected abstract void serializeContents(T value, JsonGenerator gen, SerializerProvider provider);\n\tvoid serializeWithType(T value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer); // Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.\n\tabstract AsArraySerializerBase<T> withResolved(BeanProperty property, TypeSerializer vts, JsonSerializer<?> elementSerializer, Boolean unwrapSingle);\n}"}
{"index": 7534, "repo": "cassandra-all-4.1.2", "des": "LoginModule which authenticates a user towards the Cassandra database using the internal authentication mechanism.", "code": "Class CassandraLoginModule {\n\tboolean abort(); // This method is called if the LoginContext's overall authentication failed.\n\tboolean commit(); // This method is called if the LoginContext's overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded).\n\tvoid initialize(javax.security.auth.Subject subject, javax.security.auth.callback.CallbackHandler callbackHandler, java.util.Map<java.lang.String,?> sharedState, java.util.Map<java.lang.String,?> options); // Initialize this LoginModule.\n\tboolean login(); // Authenticate the user, obtaining credentials from the CallbackHandler supplied in initialize.\n\tboolean logout(); // Logout the user.\n}"}
{"index": 17610, "repo": "spring-ldap-core-3.1.0", "des": "The specifications for the LdapClient.listBindings(java.lang.String) request.", "code": "public static interface LdapClient.ListBindingsSpec {\n\t<T> List<T> toList(ContextMapper<T> mapper); // Return the entry's children as a list of mapped results\n\t<T> List<T> toList(NameClassPairMapper<T> mapper); // Return the entry's children as a list of mapped results\n\t<T> Stream<T> toStream(ContextMapper<T> mapper); // Return the entry's children as a stream of mapped results.\n\t<T> Stream<T> toStream(NameClassPairMapper<T> mapper); // Return the entry's children as a stream of mapped results.\n}"}
{"index": 3328, "repo": "spring-social-core-1.1.6.RELEASE", "des": "A data transfer object that allows the internal state of a Connection to be persisted and transferred between layers of an application.", "code": "Class ConnectionData {\n\tjava.lang.String getAccessToken(); // The access token required to make authorized API calls.\n\tjava.lang.String getDisplayName(); // A display name for the connection.\n\tjava.lang.Long getExpireTime(); // The time the connection expires.\n\tjava.lang.String getImageUrl(); // An image visualizing the connection.\n\tjava.lang.String getProfileUrl(); // A link to the provider's user profile page.\n\tjava.lang.String getProviderId(); // The id of the provider the connection is associated with.\n\tjava.lang.String getProviderUserId(); // The id of the provider user this connection is connected to.\n\tjava.lang.String getRefreshToken(); // A token use to renew this connection.\n\tjava.lang.String getSecret(); // The secret token needed to make authorized API calls.\n}"}
{"index": 12178, "repo": "jena-core-4.9.0", "des": "\"variable\" nodes; these are outside the RDF2003 specification, but are used internally for \"placeholder\" nodes where blank nodes would be wrong, most specifically in Query.", "code": "public class Node_Variable extends Node_Fluid {\n\tboolean equals(Object other); // Nodes only equal other Nodes that have equal labels.\n\tString getName(); // get a variable nodes name, otherwise die horribly\n\tboolean isVariable(); // Answer true iff this node is a variable node - subclasses override\n\tstatic Object variable(String name);\n\tObject visitWith(NodeVisitor v); // Visit a Node and dispatch on it to the appropriate method from the NodeVisitor v.\n}"}
{"index": 13097, "repo": "spring-aop-6.0.11", "des": "Implementation of AspectInstanceFactory that creates a new instance of the specified aspect class for every SimpleAspectInstanceFactory.getAspectInstance() call.", "code": "public class SimpleAspectInstanceFactory extends Object implements AspectInstanceFactory {\n\tfinal Class<?> getAspectClass(); // Return the specified aspect class (never null).\n\tClassLoader getAspectClassLoader(); // Expose the aspect class loader that this factory uses.\n\tfinal Object getAspectInstance(); // Create an instance of this factory's aspect.\n\tint getOrder(); // Determine the order for this factory's aspect instance, either an instance-specific order expressed through implementing the Ordered interface, or a fallback order.\n\tprotected int getOrderForAspectClass(Class<?> aspectClass); // Determine a fallback order for the case that the aspect instance does not express an instance-specific order through implementing the Ordered interface.\n}"}
{"index": 11201, "repo": "wicket-extensions-10.0.0-M1", "des": "A form with filter-related special functionality for its form components.", "code": "public class FilterForm<T> extends org.apache.wicket.markup.html.form.Form<T> {\n\tfinal void enableFocusTracking(org.apache.wicket.markup.html.form.FormComponent<?> fc); // Adds behavior to the form component to allow this form to keep track of the component's focus which will be restored after a form submit.\n\tprotected String generateHiddenInputMarkup(); // Generates the Markup for the hidden input.\n\tfinal String getFocusTrackerFieldCssId();\n\tfinal String getFocusTrackingHandler(org.apache.wicket.Component component); // Returns the javascript focus handler necessary to notify the form of focus tracking changes on the component Useful when components want to participate in focus tracking but want to add the handler their own way.\n\tfinal IFilterStateLocator<T> getStateLocator();\n\tvoid onComponentTagBody(org.apache.wicket.markup.MarkupStream markupStream, org.apache.wicket.markup.ComponentTag openTag);\n\tvoid renderHead(org.apache.wicket.markup.head.IHeaderResponse response);\n}"}
{"index": 10583, "repo": "groovy-all-4.0.13", "des": "A registry of MetaClass instances which caches introspection and reflection information and allows methods to be dynamically added to existing classes at runtime", "code": "public class MetaClassRegistryImpl extends Object implements MetaClassRegistry {\n\tvoid addMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener); // Adds a listener for constant metaclasses.\n\tvoid addNonRemovableMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener); // Adds a listener for constant metaclasses.\n\tprotected void fireConstantMetaClassUpdate(Object obj, Class c, MetaClass oldMC, MetaClass newMc); // Causes the execution of all registered listeners.\n\tstatic MetaClassRegistry getInstance(int includeExtension); // Singleton of MetaClassRegistry.\n\tFastArray getInstanceMethods();\n\tfinal MetaClass getMetaClass(Class theClass); // The main function of the registry If a metaclass exists then return it otherwise create one, put it in the registry and return it\n\tMetaClass getMetaClass(Object obj);\n\tMetaClassRegistry.MetaClassCreationHandle getMetaClassCreationHandler(); // Gets a handle internally used to create MetaClass implementations WARNING: experimental code, likely to change soon\n\tMetaClassRegistryChangeEventListener[] getMetaClassRegistryChangeEventListeners(); // Gets an array of all registered ConstantMetaClassListener instances.\n\tExtensionModuleRegistry getModuleRegistry();\n\tFastArray getStaticMethods();\n\tIterator iterator(); // Returns an iterator to iterate over all constant metaclasses.\n\tvoid registerExtensionModuleFromProperties(Properties properties, ClassLoader classLoader, Map<CachedClass,List<MetaMethod>> map);\n\tvoid removeMetaClass(Class theClass); // Removes a cached MetaClass from the registry\n\tvoid removeMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener); // Removes a constant metaclass listener.\n\tvoid setMetaClass(Class theClass, MetaClass theMetaClass); // Adds a metaclass to the registry for the given class\n\tvoid setMetaClass(Object obj, MetaClass theMetaClass);\n\tvoid setMetaClassCreationHandle(MetaClassRegistry.MetaClassCreationHandle handle); // Sets a handle internally used to create MetaClass implementations.\n\tboolean useAccessible();\n}"}
{"index": 11913, "repo": "maven-core-4.0.0-alpha-7", "des": "A request to configure a bean from some configuration in the POM or similar.", "code": "public interface BeanConfigurationRequest {\n\tObject getBean(); // Gets the bean to configure.\n\tClassLoader getClassLoader(); // Gets the class loader from which to load any types referenced by the configuration.\n\tObject getConfiguration(); // Gets the configuration to unmarshal into the bean.\n\tString getConfigurationElement(); // Returns configuration element name or null.\n\tBeanConfigurationPathTranslator getPathTranslator(); // Gets the optional path translator for configuration values unmarshalled to files.\n\tBeanConfigurationValuePreprocessor getValuePreprocessor(); // Gets the optional preprocessor for configuration values.\n\tBeanConfigurationRequest setBean(Object bean); // Sets the bean to configure.\n\tBeanConfigurationRequest setClassLoader(ClassLoader classLoader); // Sets the class loader from which to load any types referenced by the configuration.\n\tBeanConfigurationRequest setConfiguration(Object configuration); // Sets the configuration to unmarshal into the bean.\n\tBeanConfigurationRequest setConfiguration(Object configuration, String element); // Sets the configuration to unmarshal into the bean.\n\tBeanConfigurationRequest setPathTranslator(BeanConfigurationPathTranslator pathTranslator); // Sets the optional path translator for configuration values unmarshalled to files.\n\tBeanConfigurationRequest setValuePreprocessor(BeanConfigurationValuePreprocessor valuePreprocessor); // Sets the optional preprocessor for configuration values.\n}"}
{"index": 3867, "repo": "hbase-client-3.0.0-alpha-4", "des": "This filter is used to filter based on the column qualifier.", "code": "Class QualifierFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tstatic QualifierFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of QualifierFilter\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 15042, "repo": "spring-vault-core-3.0.4", "des": "Utility to parse a Go format duration into Duration.", "code": "public class DurationParser extends Object {\n\tstatic String formatDuration(Duration duration); // Format a Duration into the Go format representation.\n\tstatic Duration parseDuration(String duration); // Parse a Go format duration into a Duration object.\n}"}
{"index": 8810, "repo": "graal-sdk-1.0.0-rc7", "des": "Description of contiguous section of text within a Source of program code.", "code": "Class SourceSection {\n\tboolean equals(Object obj);\n\tCharSequence getCharacters(); // Returns the source code fragment described by this section.\n\tint getCharEndIndex(); // Returns the index of the text position immediately following the last character in the section.\n\tint getCharIndex(); // Returns the 0-based index of the first character in this section.\n\tint getCharLength(); // Returns the length of this section in characters.\n\tint getEndColumn(); // Returns the 1-based column number of the last character in this section (inclusive).\n\tint getEndLine(); // Returns 1-based line number of the last character in this section (inclusive).\n\tSource getSource(); // Representation of the source program that contains this section.\n\tint getStartColumn(); // Returns the 1-based column number of the first character in this section (inclusive).\n\tint getStartLine(); // Returns 1-based line number of the first character in this section (inclusive).\n\tboolean isAvailable(); // Returns whether this is a special instance that signifies that source information is available.\n}"}
{"index": 16853, "repo": "spring-amqp-3.0.6", "des": "A post processor that uses a GZIPInputStream to decompress the message body.", "code": "public class GUnzipPostProcessor extends AbstractDecompressingPostProcessor {\n\tprotected InputStream getDecompressorStream(InputStream zipped); // Get the stream.\n\tprotected String getEncoding(); // Get the encoding.\n}"}
{"index": 15983, "repo": "wicket-util-10.0.0-M1", "des": "Keeps track of files awaiting deletion, and deletes them when an associated marker object is reclaimed by the garbage collector.", "code": "public interface IFileCleaner {\n\tvoid destroy(); // Call this method to stop the cleaner and to free all allocated resources by it\n\tvoid track(File file, Object marker); // Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected.\n\tvoid track(File file, Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy); // Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected.\n}"}
{"index": 7543, "repo": "cassandra-all-4.1.2", "des": "RandomFileReader component that reads data from a file into a provided buffer and may have requirements over the size and alignment of reads.", "code": "Interface ChunkReader {\n\tint chunkSize(); // Buffer size required for this rebufferer.\n\tBufferType preferredBufferType(); // Specifies type of buffer the caller should attempt to give.\n\tvoid readChunk(long position, java.nio.ByteBuffer buffer); // Read the chunk at the given position, attempting to fill the capacity of the given buffer.\n}"}
{"index": 17041, "repo": "spring-integration-core-6.1.2", "des": "A simple MessageHandler implementation that passes the request Message directly to the output channel without modifying it.", "code": "public class BridgeHandler extends AbstractReplyProducingMessageHandler {\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tprotected Object handleRequestMessage(org.springframework.messaging.Message<?> requestMessage); // Subclasses must implement this method to handle the request Message.\n\tprotected boolean shouldCopyRequestHeaders(); // Subclasses may override this.\n}"}
{"index": 5361, "repo": "druid-processing-26.0.0", "des": "Base type for vectorized version of on heap 'last' aggregator for primitive numeric column selectors.", "code": "Class NumericLastVectorAggregator {\n\tvoid aggregate(ByteBuffer buf, int numRows, int[] positions, int[] rows, int positionOffset); // Aggregate a list of rows (\"rows\") into a list of aggregation slots (\"positions\").\n\tvoid aggregate(ByteBuffer buf, int position, int startRow, int endRow); // Aggregate a range of rows into a single aggregation slot.\n\tvoid close(); // Release any resources used by the aggregator.\n\tvoid init(ByteBuffer buf, int position); // Same as BufferAggregator.init(java.nio.ByteBuffer, int).\n}"}
{"index": 1761, "repo": "kafka-clients-3.5.0", "des": "A cooperative version of the AbstractStickyAssignor.", "code": "Class CooperativeStickyAssignor {\n\tMap<String,List<TopicPartition>> assignPartitions(Map<String,List<PartitionInfo>> partitionsPerTopic, Map<String,ConsumerPartitionAssignor.Subscription> subscriptions);\n\tString name(); // Unique name for this assignor (e.g.\n\tvoid onAssignment(ConsumerPartitionAssignor.Assignment assignment, ConsumerGroupMetadata metadata); // Callback which is invoked when a group member receives its assignment from the leader.\n\tByteBuffer subscriptionUserData(Set<String> topics); // Return serialized data that will be included in the ConsumerPartitionAssignor.Subscription sent to the leader and can be leveraged in ConsumerPartitionAssignor.assign(Cluster, GroupSubscription) ((e.g.\n\tList<ConsumerPartitionAssignor.RebalanceProtocol> supportedProtocols(); // Indicate which rebalance protocol this assignor works with; By default it should always work with ConsumerPartitionAssignor.RebalanceProtocol.EAGER.\n}"}
{"index": 5269, "repo": "druid-processing-26.0.0", "des": "Indexed specialized for storing int arrays, which must be sorted and unique, using 'front coding'.", "code": "Class FrontCodedIntArrayIndexed {\n\tint[] get(int index); // Get the value at specified position\n\tint indexOf(int[] value); // Returns the index of \"value\" in this Indexed object, or a negative number if the value is not present.\n\tvoid inspectRuntimeShape(RuntimeShapeInspector inspector); // Implementations of this method should call inspector.visit() with all fields of this class, which meet two conditions: 1.\n\tboolean isSorted(); // Indicates if this value set is sorted, the implication being that the contract of Indexed.indexOf(T) is strenthened to return a negative number equal to (-(insertion point) - 1) when the value is not present in the set.\n\tIterator<int[]> iterator();\n\tstatic com.google.common.base.Supplier<FrontCodedIntArrayIndexed> read(ByteBuffer buffer, ByteOrder ordering);\n\tint size(); // Number of elements in the value set\n}"}
{"index": 10107, "repo": "spring-hateoas-2.1.2", "des": "LinkRelationProvider that evaluates the Relation annotation on entity types.", "code": "public class AnnotationLinkRelationProvider extends Object implements LinkRelationProvider, Ordered {\n\tLinkRelation getCollectionResourceRelFor(Class<?> type); // Returns the relation type to be used to point to a collection resource of the given type.\n\tLinkRelation getItemResourceRelFor(Class<?> type); // Returns the relation type to be used to point to an item resource of the given type.\n\tint getOrder();\n\tboolean supports(LinkRelationProvider.LookupContext context); // Callback method to manually select LinkRelationProvider implementations based on a given LinkRelationProvider.LookupContext.\n}"}
{"index": 11592, "repo": "spring-security-oauth2-client-6.1.2", "des": "An OAuth2TokenValidator responsible for validating the claims in an ID Token.", "code": "public final class OidcIdTokenValidator extends Object implements org.springframework.security.oauth2.core.OAuth2TokenValidator<org.springframework.security.oauth2.jwt.Jwt> {\n\tvoid setClock(Clock clock); // Sets the Clock used in Instant.now(Clock) when validating the exp and iat claims.\n\tvoid setClockSkew(Duration clockSkew); // Sets the maximum acceptable clock skew.\n\torg.springframework.security.oauth2.core.OAuth2TokenValidatorResult validate(org.springframework.security.oauth2.jwt.Jwt idToken);\n}"}
{"index": 6422, "repo": "exoplayer-core-2.9.6", "des": "A wrapping DataSink that encrypts the data being consumed.", "code": "Class AesCipherDataSink {\n\tvoid close(); // Closes the sink.\n\tvoid open(DataSpec dataSpec); // Opens the sink to consume the specified data.\n\tvoid write(byte[] data, int offset, int length); // Consumes the provided data.\n}"}
{"index": 10661, "repo": "groovy-all-4.0.13", "des": "A type checking extension that will take care of handling errors which are specific to traits.", "code": "public class TraitTypeCheckingExtension extends AbstractTypeCheckingExtension {\n\tList<MethodNode> handleMissingMethod(ClassNode receiver, String name, ArgumentListExpression argumentList, ClassNode[] argumentTypes, MethodCall call); // This method is called by the type checker when a method call cannot be resolved.\n\tvoid setup(); // Subclasses should implement this method whenever they need to perform special checks before the type checker starts working.\n}"}
{"index": 9112, "repo": "hbase-server-3.0.0-alpha-4", "des": "Implementation of a file cleaner that checks if a hfile is still used by snapshots of HBase tables.", "code": "Class SnapshotHFileCleaner {\n\tIterable<org.apache.hadoop.fs.FileStatus> getDeletableFiles(Iterable<org.apache.hadoop.fs.FileStatus> files); // Determines which of the given files are safe to delete\n\tSnapshotFileCache getFileCacheForTesting(); // Exposed for Testing!\n\tvoid init(Map<String,Object> params); // this method is used to pass some instance into subclass\n\tprotected boolean isFileDeletable(org.apache.hadoop.fs.FileStatus fStat); // Should the master delete the file or keep it?\n\tboolean isStopped();\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n\tvoid stop(String why);\n}"}
{"index": 16866, "repo": "spring-amqp-3.0.6", "des": "Convert a Message from the messaging abstraction to and from a Message using an underlying MessageConverter for the payload and a AmqpHeaderMapper to map the AMQP headers to and from standard message headers.", "code": "public class MessagingMessageConverter extends Object implements MessageConverter, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected Object extractPayload(Message message); // Extract the payload of the specified Message.\n\tObject fromMessage(Message message); // Convert from a Message to a Java object.\n\tAmqpHeaderMapper getHeaderMapper();\n\tvoid setHeaderMapper(AmqpHeaderMapper headerMapper); // Set the AmqpHeaderMapper to use to map AMQP headers to and from standard message headers.\n\tvoid setPayloadConverter(MessageConverter payloadConverter); // Set the MessageConverter to use to convert the payload.\n\tMessage toMessage(Object object, MessageProperties messageProperties); // Convert a Java object to a Message.\n}"}
{"index": 12190, "repo": "jena-core-4.9.0", "des": "Implementation of the object property abstraction", "code": "public class ObjectPropertyImpl extends OntPropertyImpl implements ObjectProperty {\n\tOntProperty getInverse(); // Answer the property that is the inverse of this property, ensuring that it presents the object property facet.\n\tOntProperty getInverseOf(); // Answer a property that is an inverse of this property, ensuring that it presents the ObjectProperty facet.\n\tExtendedIterator<? extends OntProperty> listInverseOf(); // Answer an iterator over all of the properties that are declared to be inverse properties of this property, ensuring that each presents the objectProperty facet.\n}"}
{"index": 10287, "repo": "spring-core-6.0.11", "des": "A common delegate for detecting Kotlin's presence and for identifying Kotlin types.", "code": "public abstract class KotlinDetector extends Object {\n\tstatic boolean isKotlinPresent(); // Determine whether Kotlin is present in general.\n\tstatic boolean isKotlinReflectPresent(); // Determine whether Kotlin reflection is present.\n\tstatic boolean isKotlinType(Class<?> clazz); // Determine whether the given Class is a Kotlin type (with Kotlin metadata present on it).\n\tstatic boolean isSuspendingFunction(Method method); // Return true if the method is a suspending function.\n}"}
{"index": 5912, "repo": "hadoop-yarn-server-common-3.3.6", "des": "The protocol between a NodeManager's SharedCacheUploadService and the SharedCacheManager.", "code": "Interface SCMUploaderProtocol {\n\tSCMUploaderCanUploadResponse canUpload(SCMUploaderCanUploadRequest request); // The method used by the NodeManager's SharedCacheUploadService to request whether a resource can be uploaded.\n\tSCMUploaderNotifyResponse notify(SCMUploaderNotifyRequest request); // The method used by the NodeManager's SharedCacheUploadService to notify the shared cache manager of a newly cached resource.\n}"}
{"index": 13988, "repo": "spring-webflux-6.0.11", "des": "Contract for specifying request headers and body leading up to the exchange.", "code": "public static interface WebClient.RequestBodySpec extends WebClient.RequestHeadersSpec<WebClient.RequestBodySpec> {\n\tWebClient.RequestHeadersSpec<?> body(Object producer, Class<?> elementClass); // Variant of body(Publisher, Class) that allows using any producer that can be resolved to Publisher via ReactiveAdapterRegistry.\n\tWebClient.RequestHeadersSpec<?> body(Object producer, org.springframework.core.ParameterizedTypeReference<?> elementTypeRef); // Variant of body(Publisher, ParameterizedTypeReference) that allows using any producer that can be resolved to Publisher via ReactiveAdapterRegistry.\n\tWebClient.RequestHeadersSpec<?> body(BodyInserter<?,? super org.springframework.http.client.reactive.ClientHttpRequest> inserter); // Set the body of the request using the given body inserter.\n\t<T, P extends Publisher<T>>WebClient.RequestHeadersSpec<?> body(P publisher, Class<T> elementClass); // Shortcut for body(BodyInserter) with a Publisher inserter.\n\t<T, P extends Publisher<T>>WebClient.RequestHeadersSpec<?> body(P publisher, org.springframework.core.ParameterizedTypeReference<T> elementTypeRef); // Variant of body(Publisher, Class) that allows providing element type information with generics.\n\tWebClient.RequestHeadersSpec<?> bodyValue(Object body); // Shortcut for body(BodyInserter) with a value inserter.\n\tWebClient.RequestBodySpec contentLength(long contentLength); // Set the length of the body in bytes, as specified by the Content-Length header.\n\tWebClient.RequestBodySpec contentType(org.springframework.http.MediaType contentType); // Set the media type of the body, as specified by the Content-Type header.\n\tWebClient.RequestHeadersSpec<?> syncBody(Object body); // Deprecated. as of Spring Framework 5.2 in favor of bodyValue(Object)\n}"}
{"index": 6558, "repo": "exoplayer-core-2.9.6", "des": "An action to download or remove downloaded progressive streams.", "code": "Class ProgressiveDownloadAction {\n\tstatic ProgressiveDownloadAction createDownloadAction(android.net.Uri uri, byte[] data, java.lang.String customCacheKey); // Creates a progressive stream download action.\n\tProgressiveDownloader createDownloader(DownloaderConstructorHelper constructorHelper); // Creates a Downloader with the given parameters.\n\tstatic ProgressiveDownloadAction createRemoveAction(android.net.Uri uri, byte[] data, java.lang.String customCacheKey); // Creates a progressive stream remove action.\n\tboolean equals(java.lang.Object o);\n\tboolean isSameMedia(DownloadAction other); // Returns whether this is an action for the same media as the other.\n\tprotected void writeToStream(java.io.DataOutputStream output); // Serializes itself into the output.\n}"}
{"index": 6228, "repo": "jackson-databind-2.15.2", "des": "We also want to directly support deserialization of TokenBuffer.", "code": "Class TokenBufferDeserializer {\n\tTokenBuffer deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n}"}
{"index": 10960, "repo": "spring-data-redis-3.1.2", "des": "Configuration interface suitable for Redis Sentinel environments.", "code": "public static interface RedisConfiguration.SentinelConfiguration extends RedisConfiguration.WithDatabaseIndex, RedisConfiguration.WithPassword {\n\tdefault RedisPassword getDataNodePassword(); // Get the RedisPassword used when authenticating with a Redis Server.\n\tdefault String getDataNodeUsername(); // Get the username used when authenticating with a Redis Server.\n\tNamedNode getMaster(); // Get the Sentinel master node.\n\tRedisPassword getSentinelPassword(); // Returns the RedisPassword to use when connecting to a Redis Sentinel.\n\tSet<RedisNode> getSentinels(); // Returns an Collections.unmodifiableSet(Set) of Sentinels.\n\tString getSentinelUsername(); // Get the username to use when connecting.\n\tdefault void setMaster(String name); // Set the name of the master node.\n\tvoid setMaster(NamedNode master); // Set the master node.\n\tdefault void setSentinelPassword(char[] password); // Create and set a RedisPassword to be used when authenticating with Redis Sentinel from the given Character sequence.\n\tdefault void setSentinelPassword(String password); // Create and set a RedisPassword to be used when authenticating with Redis Sentinel from the given String.\n\tvoid setSentinelPassword(RedisPassword password); // Set a RedisPassword to be used when authenticating with Redis Sentinel.\n\tvoid setSentinelUsername(String sentinelUsername); // Create and set a username with the given String.\n}"}
{"index": 5584, "repo": "org.apache.karaf.main-2.4.4", "des": "A BundleFile that uses a directory as its base file.", "code": "Class DirBundleFile {\n\tvoid close(); // Closes the BundleFile.\n\tboolean containsDir(String dir); // Determines if any BundleEntries exist in the given directory path.\n\tBundleEntry getEntry(String path); // Locates a file name in this bundle and returns a BundleEntry object\n\tEnumeration<String> getEntryPaths(String path); // Allows to access the entries of the bundle.\n\tEnumeration<String> getEntryPaths(String path, boolean recurse);\n\tFile getFile(String path, boolean nativeCode); // Returns a File for the bundle entry specified by the path.\n\tvoid open(); // Opens the BundleFiles.\n}"}
{"index": 3396, "repo": "hadoop-azure-3.3.6", "des": "Interface to implement authorization support in WASB.", "code": "Interface WasbAuthorizerInterface {\n\tboolean authorize(String wasbAbolutePath, String accessType, String owner); // Authorizer API to authorize access in WASB.\n\tvoid init(org.apache.hadoop.conf.Configuration conf); // Initializer method\n}"}
{"index": 18103, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the MessageIdStrategy interface that uses a UUID to generate a Message Id.", "code": "public class UuidMessageIdStrategy extends Object implements MessageIdStrategy {\n\tboolean isDuplicate(URI messageId); // Returns false.\n\tURI newMessageId(SoapMessage message); // Returns a new WS-Addressing MessageID for the given SoapMessage.\n}"}
{"index": 13792, "repo": "spring-webmvc-6.0.11", "des": "A controller method return value type for asynchronous request processing where one or more objects are written to the response.", "code": "public class ResponseBodyEmitter extends Object {\n\tvoid complete(); // Complete request processing by performing a dispatch into the servlet container, where Spring MVC is invoked once more, and completes the request processing lifecycle.\n\tvoid completeWithError(Throwable ex); // Complete request processing with an error.\n\tprotected void extendResponse(org.springframework.http.server.ServerHttpResponse outputMessage); // Invoked after the response is updated with the status code and headers, if the ResponseBodyEmitter is wrapped in a ResponseEntity, but before the response is committed, i.e.\n\tLong getTimeout(); // Return the configured timeout value, if any.\n\tvoid onCompletion(Runnable callback); // Register code to invoke when the async request completes.\n\tvoid onError(Consumer<Throwable> callback); // Register code to invoke for an error during async request processing.\n\tvoid onTimeout(Runnable callback); // Register code to invoke when the async request times out.\n\tvoid send(Object object); // Write the given object to the response.\n\tvoid send(Object object, org.springframework.http.MediaType mediaType); // Overloaded variant of send(Object) that also accepts a MediaType hint for how to serialize the given Object.\n}"}
{"index": 12412, "repo": "spring-data-couchbase-5.1.2", "des": "Common settings for Couchbase key - prefix - suffix - delimiter", "code": "public class KeySettings extends Object {\n\tstatic KeySettings build();\n\tString delimiter(); // Get delimiter\n\tKeySettings delimiter(String delimiter); // Set delimiter\n\tString prefix(); // Get common prefix\n\tKeySettings prefix(String prefix); // Set common prefix\n\tString suffix(); // Get common suffix\n\tKeySettings suffix(String suffix); // Set common suffix\n}"}
{"index": 17338, "repo": "groovy-4.0.13", "des": "Compilation unit to only generate stubs.", "code": "public class JavaStubCompilationUnit extends CompilationUnit {\n\tSourceUnit addSource(File file); // Adds a source file to the unit.\n\tSourceUnit addSource(URL url); // Adds a source file to the unit.\n\tvoid compile(); // Synonym for compile(Phases.ALL).\n\tvoid configure(CompilerConfiguration config); // Configures its debugging mode and classloader classpath from a given compiler configuration.\n\tint getStubCount();\n}"}
{"index": 5355, "repo": "druid-processing-26.0.0", "des": "PartitionChunk corresponding to NumberedOverwriteShardSpec.", "code": "Class NumberedOverwritingPartitionChunk<T> {\n\tboolean abuts(PartitionChunk<T> other); // Determines if this PartitionChunk abuts another PartitionChunk.\n\tint compareTo(PartitionChunk<T> o);\n\tboolean equals(Object o);\n\tint getChunkNumber(); // Returns the partition chunk number of this PartitionChunk.\n\tT getObject(); // Returns the payload, generally an object that can be used to perform some action against the shard.\n\tboolean isEnd(); // Returns true if this chunk is the end of the partition.\n\tboolean isStart(); // Returns true if this chunk is the beginning of the partition.\n}"}
{"index": 18778, "repo": "lucene-core-9.7.0", "des": "An object whose RAM usage can be computed.", "code": "Interface Accountable {\n\tdefault Collection<Accountable> getChildResources(); // Returns nested resources of this class.\n\tlong ramBytesUsed(); // Return the memory usage of this object in bytes.\n}"}
{"index": 5349, "repo": "druid-processing-26.0.0", "des": "The logical \"not\" operator for the \"having\" clause.", "code": "Class NotHavingSpec {\n\tboolean equals(Object o);\n\tboolean eval(ResultRow row); // Evaluates if a given row satisfies the having spec.\n\tbyte[] getCacheKey(); // Get a byte array used as a cache key.\n\tHavingSpec getHavingSpec();\n\tvoid setQuery(GroupByQuery query); // Informs this HavingSpec that rows passed to \"eval\" will originate from a particular groupBy query.\n}"}
{"index": 16356, "repo": "spring-data-jpa-3.1.2", "des": "EntityGraph configuration for JPA 2.1 EntityGraphs.", "code": "public class JpaEntityGraph extends Object {\n\tList<String> getAttributePaths(); // Returns the attribute node names to be used for this JpaEntityGraph.\n\tString getName(); // Returns the name of the EntityGraph configuration to use.\n\tEntityGraph.EntityGraphType getType(); // Returns the EntityGraph.EntityGraphType of the EntityGraph to use.\n\tboolean isAdHocEntityGraph(); // Return true if this JpaEntityGraph needs to be generated on-the-fly.\n}"}
{"index": 13247, "repo": "spring-test-6.0.11", "des": "Strategy interface for loading an ApplicationContext for an integration test managed by the Spring TestContext Framework.", "code": "public interface SmartContextLoader extends ContextLoader {\n\tdefault org.springframework.context.ApplicationContext loadContext(String... locations); // SmartContextLoader does not support deprecated ContextLoader methods.\n\torg.springframework.context.ApplicationContext loadContext(MergedContextConfiguration mergedConfig); // Load a new ApplicationContext based on the supplied MergedContextConfiguration, configure the context, and return the context in a fully refreshed state.\n\tvoid processContextConfiguration(ContextConfigurationAttributes configAttributes); // Process the ContextConfigurationAttributes for a given test class.\n\tdefault String[] processLocations(Class<?> clazz, String... locations); // SmartContextLoader does not support deprecated ContextLoader methods.\n}"}
{"index": 2437, "repo": "calcite-linq4j-1.34.0", "des": "Enumerator over the cartesian product of enumerators.", "code": "Class CartesianProductEnumerator<T,E> {\n\tvoid close(); // Closes this enumerable and releases resources.\n\tboolean moveNext(); // Advances the enumerator to the next element of the collection.\n\tvoid reset(); // Sets the enumerator to its initial position, which is before the first element in the collection.\n}"}
{"index": 10004, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "The base class for Container monitoring implementations.", "code": "Class AbstractMonitor {\n\tvoid addContainerMonitorStateListener(ContainerMonitorListener listener); // Adds the container monitor state listener.\n\tprotected void notifyState(ContainerMonitorListener.ContainerMonitorState state); // Notify new ContainerMonitorListener.ContainerMonitorState for registered listeners.\n}"}
{"index": 13899, "repo": "spring-webflux-6.0.11", "des": "View that writes model attribute(s) with an HttpMessageWriter.", "code": "public class HttpMessageWriterView extends Object implements View {\n\torg.springframework.http.codec.HttpMessageWriter<?> getMessageWriter(); // Return the configured message writer.\n\tfinal Set<String> getModelKeys(); // Return the configured model keys.\n\tList<org.springframework.http.MediaType> getSupportedMediaTypes(); // Return the list of media types this View supports, or an empty list.\n\treactor.core.publisher.Mono<Void> render(Map<String,?> model, org.springframework.http.MediaType contentType, org.springframework.web.server.ServerWebExchange exchange); // Render the view based on the given HandlerResult.\n\tvoid setModelKeys(Set<String> modelKeys); // Set the attributes in the model that should be rendered by this view.\n}"}
{"index": 7931, "repo": "commons-jcs3-core-3.1", "des": "ICacheAccessManagement defines the methods for cache management, cleanup and shutdown.", "code": "Interface ICacheAccessManagement {\n\tvoid clear(); // Removes all of the elements from a region.\n\tvoid dispose(); // Dispose this region.\n\tint freeMemoryElements(int numberToFree); // This instructs the memory cache to remove the numberToFree according to its eviction policy.\n\tICompositeCacheAttributes getCacheAttributes(); // Gets the ICompositeCacheAttributes of the cache region\n\tIElementAttributes getDefaultElementAttributes(); // GetElementAttributes will return an attribute object describing the current attributes associated with the object name.\n\tICacheStats getStatistics(); // This returns the ICacheStats object with information on this region and its auxiliaries.\n\tString getStats();\n\tvoid setCacheAttributes(ICompositeCacheAttributes cattr); // Sets the ICompositeCacheAttributes of the cache region\n\tvoid setDefaultElementAttributes(IElementAttributes attr); // This method is does not reset the attributes for items already in the cache.\n}"}
{"index": 15483, "repo": "spring-batch-core-5.0.2", "des": "Default implementation of the ItemListenerSupport class that writes all exceptions via commons logging.", "code": "public class DefaultItemFailureHandler extends ItemListenerSupport<Object,Object> {\n\tvoid onReadError(Exception ex); // Called if an error occurs while trying to read.\n\tvoid onWriteError(Exception ex, Chunk<? extends Object> item); // Called if an error occurs while trying to write.\n}"}
{"index": 18133, "repo": "jena-querybuilder-4.9.0", "des": "An QuadHolder that contains Quads from a collection or iterator..", "code": "public class QuadCollectionHolder extends Object implements QuadHolder {\n\tExtendedIterator<Quad> getQuads(); // Get an extended iterator over the quads this holder holds.\n\tQuadHolder setValues(Map<Var,Node> values); // This implementation does nothing.\n}"}
{"index": 11697, "repo": "spring-cloud-commons-3.1.7", "des": "A health indicator interface specific to a reactive discovery client implementation.", "code": "public interface ReactiveDiscoveryHealthIndicator {\n\tString getName(); // Provide the name of health indicator.\n\treactor.core.publisher.Mono<org.springframework.boot.actuate.health.Health> health(); // Provide the indicator of health.\n}"}
{"index": 4311, "repo": "beam-sdks-java-core-2.49.0", "des": "A builder class to construct a composed CombineFnBase.", "code": "Class CombineFns.ComposeCombineFnBuilder {\n\t<DataT,InputT,OutputT>CombineFns.ComposedCombineFn<DataT> with(SimpleFunction<DataT,InputT> extractInputFn, Coder combineInputCoder, Combine.CombineFn<InputT,?,OutputT> combineFn, TupleTag<OutputT> outputTag); // Like #with(SimpleFunction, CombineFn, TupleTag) but with an explicit input coder.\n\t<DataT,InputT,OutputT>CombineFns.ComposedCombineFnWithContext<DataT> with(SimpleFunction<DataT,InputT> extractInputFn, Coder combineInputCoder, CombineWithContext.CombineFnWithContext<InputT,?,OutputT> combineFnWithContext, TupleTag<OutputT> outputTag); // Like #with(SimpleFunction, CombineFnWithContext, TupleTag) but with input coder.\n\t<DataT,InputT,OutputT>CombineFns.ComposedCombineFn<DataT> with(SimpleFunction<DataT,InputT> extractInputFn, Combine.CombineFn<InputT,?,OutputT> combineFn, TupleTag<OutputT> outputTag); // Returns a CombineFns.ComposedCombineFn that can take additional GlobalCombineFns and apply them as a single combine function.\n\t<DataT,InputT,OutputT>CombineFns.ComposedCombineFnWithContext<DataT> with(SimpleFunction<DataT,InputT> extractInputFn, CombineWithContext.CombineFnWithContext<InputT,?,OutputT> combineFnWithContext, TupleTag<OutputT> outputTag); // Returns a CombineFns.ComposedCombineFnWithContext that can take additional GlobalCombineFns and apply them as a single combine function.\n}"}
{"index": 16634, "repo": "spring-beans-6.0.11", "des": "GenericBeanDefinition is a one-stop shop for declarative bean definition purposes.", "code": "public class GenericBeanDefinition extends AbstractBeanDefinition {\n\tAbstractBeanDefinition cloneBeanDefinition(); // Clone this bean definition.\n\tboolean equals(Object other);\n\tString getParentName(); // Return the name of the parent definition of this bean definition, if any.\n\tvoid setParentName(String parentName); // Set the name of the parent definition of this bean definition, if any.\n}"}
{"index": 10403, "repo": "spring-core-6.0.11", "des": "Helper class for resolving placeholders in texts.", "code": "public abstract class SystemPropertyUtils extends Object {\n\tstatic String resolvePlaceholders(String text); // Resolve ${...} placeholders in the given text, replacing them with corresponding system property values.\n\tstatic String resolvePlaceholders(String text, boolean ignoreUnresolvablePlaceholders); // Resolve ${...} placeholders in the given text, replacing them with corresponding system property values.\n}"}
{"index": 17397, "repo": "groovy-4.0.13", "des": "Handles generation of code for the @Sealed annotation.", "code": "public class SealedASTTransformation extends AbstractASTTransformation {\n\tstatic boolean sealedNative(AnnotatedNode node); // Reports true if native sealed class information should be written into the bytecode.\n\tstatic boolean sealedSkipAnnotation(AnnotatedNode node); // Reports true if the Sealed annotation should not be included in the bytecode for a sealed or emulated-sealed class.\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 12924, "repo": "spring-data-mongodb-4.1.2", "des": "JsonSchemaObject implementation of type : 'string' schema elements. Provides programmatic access to schema specifics like minLength, maxLength, pattern,... via a fluent API producing immutable schema objects.", "code": "public static class TypedJsonSchemaObject.StringJsonSchemaObject extends TypedJsonSchemaObject {\n\tTypedJsonSchemaObject.StringJsonSchemaObject allOf(Collection<JsonSchemaObject> allOf); // The field value must match all specified schemas.\n\tTypedJsonSchemaObject.StringJsonSchemaObject anyOf(Collection<JsonSchemaObject> anyOf); // The field value must match at least one of the specified schemas.\n\tTypedJsonSchemaObject.StringJsonSchemaObject description(String description); // Set the description.\n\tTypedJsonSchemaObject.StringJsonSchemaObject generatedDescription(); // Auto generate the description if not explicitly set.\n\tprotected String generateDescription(); // Customization hook for creating description out of defined values. Called by TypedJsonSchemaObject.toDocument() when no explicit TypedJsonSchemaObject.description(java.lang.String) is set.\n\tTypedJsonSchemaObject.StringJsonSchemaObject length(Range<Integer> range); // Define the valid length range (minLength and maxLength) for a valid field.\n\tTypedJsonSchemaObject.StringJsonSchemaObject matching(String pattern); // Define the regex pattern to validate field values against.\n\tTypedJsonSchemaObject.StringJsonSchemaObject maxLength(int length); // Define the valid length range (maxLength) for a valid field.\n\tTypedJsonSchemaObject.StringJsonSchemaObject minLength(int length); // Define the valid length range (minLength) for a valid field.\n\tTypedJsonSchemaObject.StringJsonSchemaObject notMatch(JsonSchemaObject notMatch); // The field value must not match the specified schemas.\n\tTypedJsonSchemaObject.StringJsonSchemaObject oneOf(Collection<JsonSchemaObject> oneOf); // The field value must match exactly one of the specified schemas.\n\tTypedJsonSchemaObject.StringJsonSchemaObject possibleValues(Collection<? extends Object> possibleValues); // enumerates all possible values of the field.\n\torg.bson.Document toDocument(); // Create the JSON schema complying Document representation.\n}"}
{"index": 18487, "repo": "gremlin-core-3.6.4", "des": "Features defined such that they support immutability but allow all other possibilities.", "code": "Class EmptyGraph.EmptyGraphFeatures {\n\tGraph.Features.EdgeFeatures edge(); // Gets the features related to \"edge\" operation.\n\tGraph.Features.GraphFeatures graph(); // Gets the features related to \"graph\" operation.\n\tGraph.Features.VertexFeatures vertex(); // Gets the features related to \"vertex\" operation.\n}"}
{"index": 11128, "repo": "tribuo-core-4.3.1", "des": "Hashes Strings using the supplied MessageDigest type.", "code": "public final class MessageDigestHasher extends Hasher {\n\tstatic MessageDigestHasher deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tboolean equals(Object o);\n\tstatic Supplier<MessageDigest> getDigestSupplier(String hashType); // Creates a supplier for the specified hash type.\n\tcom.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance getProvenance();\n\tString hash(String input); // Hashes the supplied input using the hashing function.\n\tvoid postConfig(); // Used by the OLCUT configuration system, and should not be called by external code.\n\torg.tribuo.protos.core.HasherProto serialize(); // Serializes this object to a protobuf.\n\tvoid setSalt(String salt); // The salt is transient, it must be set **to the same value as it was trained with** after the Model is deserialized.\n}"}
{"index": 16109, "repo": "spring-data-cassandra-4.1.2", "des": "Abstract SessionFactory implementation that routes AbstractRoutingSessionFactory.getSession() calls to one of various target factories based on a lookup key.", "code": "public abstract class AbstractRoutingSessionFactory extends Object implements SessionFactory, InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected abstract Object determineCurrentLookupKey(); // Determine the current lookup key.\n\tprotected SessionFactory determineTargetSessionFactory(); // Retrieve the current target SessionFactory.\n\tcom.datastax.oss.driver.api.core.CqlSession getSession(); // Attempts to establish a CqlSession with the connection infrastructure that this SessionFactory object represents.\n\tprotected Object resolveSpecifiedLookupKey(Object lookupKey); // Resolve the given lookup key object, as specified in the setTargetSessionFactories(Map) map, into the actual lookup key to be used for matching with the current lookup key.\n\tprotected SessionFactory resolveSpecifiedSessionFactory(Object sessionFactory); // Resolve the specified sessionFactory object into a SessionFactory instance.\n\tvoid setDefaultTargetSessionFactory(Object defaultTargetSessionFactory); // Specify the default target SessionFactory, if any.\n\tvoid setLenientFallback(boolean lenientFallback); // Specify whether to apply a lenient fallback to the default SessionFactory if no specific SessionFactory could be found for the current lookup key.\n\tvoid setSessionFactoryLookup(SessionFactoryLookup sessionFactoryLookup); // Set the SessionFactoryLookup implementation to use for resolving session factory name Strings in the setTargetSessionFactories(Map) map.\n\tvoid setTargetSessionFactories(Map<Object,Object> targetSessionFactories); // Specify the map of target session factories, with the lookup key as key.\n}"}
{"index": 1999, "repo": "hive-exec-4.0.0-alpha-2", "des": "CombineHiveInputSplit encapsulates an InputSplit with its corresponding inputFormatClassName.", "code": "Class CombineHiveInputFormat.CombineHiveInputSplit {\n\torg.apache.hadoop.mapred.lib.CombineFileSplit getInputSplitShim();\n\torg.apache.hadoop.mapred.JobConf getJob();\n\tlong getLength();\n\tlong getLength(int i); // Returns the length of the ith Path.\n\tlong[] getLengths(); // Returns an array containing the lengths of the files in the split.\n\tString[] getLocations(); // Returns all the Paths where this input-split resides.\n\tint getNumPaths(); // Returns the number of Paths in the split.\n\tlong getOffset(int i); // Returns the start offset of the ith Path.\n\torg.apache.hadoop.fs.Path getPath(int i); // Returns the ith Path.\n\torg.apache.hadoop.fs.Path[] getPaths(); // Returns all the Paths in the split.\n\tlong[] getStartOffsets(); // Returns an array containing the startoffsets of the files in the split.\n\tString inputFormatClassName(); // Returns the inputFormat class name for the i-th chunk.\n\tvoid readFields(DataInput in); // Writable interface.\n\tvoid setInputFormatClassName(String inputFormatClassName);\n\tvoid write(DataOutput out); // Writable interface.\n}"}
{"index": 17584, "repo": "spring-ldap-core-3.1.0", "des": "Constructs a conditional LDAP filter based on the attribute specified in the previous builder step.", "code": "public interface ConditionCriteria {\n\tContainerCriteria gte(String value); // Appends an GreaterThanOrEqualsFilter.\n\tContainerCriteria is(String value); // Appends an EqualsFilter.\n\tContainerCriteria isPresent(); // Appends a PresentFilter.\n\tContainerCriteria like(String value); // Appends a LikeFilter.\n\tContainerCriteria lte(String value); // Appends a LessThanOrEqualsFilter.\n\tConditionCriteria not(); // Negates the currently constructed operation.\n\tContainerCriteria whitespaceWildcardsLike(String value); // Appends a WhitespaceWildcardsFilter.\n}"}
{"index": 282, "repo": "hadoop-yarn-client-3.3.6", "des": "NMClientAsync handles communication with all the NodeManagers and provides asynchronous updates on getting responses from them.", "code": "Class NMClientAsync {\n\tabstract void commitLastReInitializationAsync(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Commit last reInitialization of the specified container.\n\tstatic NMClientAsync createNMClientAsync(NMClientAsync.AbstractCallbackHandler callbackHandler);\n\tNMClientAsync.CallbackHandler getCallbackHandler();\n\tNMClient getClient();\n\tabstract void getContainerStatusAsync(org.apache.hadoop.yarn.api.records.ContainerId containerId, org.apache.hadoop.yarn.api.records.NodeId nodeId);\n\tabstract void reInitializeContainerAsync(org.apache.hadoop.yarn.api.records.ContainerId containerId, org.apache.hadoop.yarn.api.records.ContainerLaunchContext containerLaunchContex, boolean autoCommit); // Re-Initialize the Container.\n\tabstract void restartContainerAsync(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Restart the specified container.\n\tabstract void rollbackLastReInitializationAsync(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Rollback last reInitialization of the specified container.\n\tvoid setCallbackHandler(NMClientAsync.CallbackHandler callbackHandler);\n\tvoid setClient(NMClient client);\n\tabstract void startContainerAsync(org.apache.hadoop.yarn.api.records.Container container, org.apache.hadoop.yarn.api.records.ContainerLaunchContext containerLaunchContext);\n\tabstract void stopContainerAsync(org.apache.hadoop.yarn.api.records.ContainerId containerId, org.apache.hadoop.yarn.api.records.NodeId nodeId);\n\tabstract void updateContainerResourceAsync(org.apache.hadoop.yarn.api.records.Container container); // Update the resources of a container.\n}"}
{"index": 7075, "repo": "calcite-core-1.34.0", "des": "A RelOptQuery represents a set of relational expressions which derive from the same select statement.", "code": "Class RelOptQuery {\n\t@Nullable RelNode lookupCorrel(String name); // Returns the relational expression which populates a correlating variable.\n\tvoid mapCorrel(String name, RelNode rel); // Maps a correlating variable to a RelNode.\n}"}
{"index": 7541, "repo": "cassandra-all-4.1.2", "des": "A cell is our atomic unit for a single value of a single column.", "code": "Class Cell<V> {\n\tabstract ValueAccessor<V> accessor();\n\tjava.nio.ByteBuffer buffer();\n\tabstract Cell<?> clone(ByteBufferCloner cloner);\n\tCell<?> clone(Cloner cloner);\n\tabstract boolean isCounterCell(); // Whether the cell is a counter cell or not.\n\tabstract boolean isExpiring(); // Whether the cell is an expiring one or not.\n\tabstract boolean isLive(int nowInSec); // Whether the cell is live or not given the current time.\n\tabstract boolean isTombstone(); // Whether the cell is a tombstone or not.\n\tabstract int localDeletionTime(); // The cell local deletion time.\n\tabstract Cell<?> markCounterLocalToBeCleared();\n\tabstract CellPath path(); // For cells belonging to complex types (non-frozen collection and UDT), the path to the cell.\n\tabstract Cell<?> purge(DeletionPurger purger, int nowInSec);\n\tabstract Cell<?> purgeDataOlderThan(long timestamp);\n\tabstract long timestamp(); // The cell timestamp.\n\tabstract int ttl(); // The cell ttl.\n\tabstract V value();\n\tint valueSize();\n\tabstract Cell<?> withSkippedValue(); // Used to apply the same optimization as in Cell.Serializer.deserialize(org.apache.cassandra.io.util.DataInputPlus, org.apache.cassandra.db.LivenessInfo, org.apache.cassandra.schema.ColumnMetadata, org.apache.cassandra.db.SerializationHeader, org.apache.cassandra.db.rows.DeserializationHelper, org.apache.cassandra.db.marshal.ValueAccessor<V>) when the column is not queried but eventhough it's used for digest calculation.\n\tabstract Cell<?> withUpdatedColumn(ColumnMetadata newColumn);\n\tabstract Cell<?> withUpdatedTimestampAndLocalDeletionTime(long newTimestamp, int newLocalDeletionTime);\n\tabstract Cell<?> withUpdatedValue(java.nio.ByteBuffer newValue);\n}"}
{"index": 14189, "repo": "wicket-core-10.0.0-M1", "des": "An enum representing the only possible values for the sandbox directive", "code": "public enum CSPDirectiveSandboxValue extends Enum<CSPDirectiveSandboxValue> implements CSPRenderable {\n\tString getValue();\n\tString render(ContentSecurityPolicySettings settings, RequestCycle cycle); // Renders the value that should be put in the CSP header.\n\tstatic CSPDirectiveSandboxValue valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CSPDirectiveSandboxValue[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18116, "repo": "spring-ws-core-4.0.5", "des": "An WsConfigurer implementation that delegates to other WsConfigurer instances.", "code": "public class WsConfigurerComposite extends Object implements WsConfigurer {\n\tvoid addArgumentResolvers(List<MethodArgumentResolver> argumentResolvers); // Add resolvers to support custom endpoint method argument types.\n\tvoid addInterceptors(List<EndpointInterceptor> interceptors); // Add EndpointInterceptors for pre- and post-processing of endpoint method invocations.\n\tvoid addReturnValueHandlers(List<MethodReturnValueHandler> returnValueHandlers); // Add handlers to support custom controller method return value types.\n\tvoid addWsConfigurers(List<WsConfigurer> configurers);\n}"}
{"index": 8166, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents an attachment to a MimeMessage.", "code": "Interface Attachment {\n\tString getContentId(); // Returns the content identifier of the attachment.\n\tString getContentType(); // Returns the content type of the attachment.\n\tDataHandler getDataHandler(); // Returns the data handler of the attachment.\n\tInputStream getInputStream(); // Return an InputStream to read the contents of the attachment from.\n\tlong getSize(); // Returns the size of the attachment in bytes.\n}"}
{"index": 5386, "repo": "druid-processing-26.0.0", "des": "A Processor is a bit of logic that processes a single RowsAndColumns object to produce a new RowsAndColumns object.", "code": "Interface Processor {\n\tRowsAndColumns process(RowsAndColumns incomingPartition); // Applies the logic of the processor to a RowsAndColumns object\n\tboolean validateEquivalent(Processor otherProcessor); // Validates the equivalence of the Processors.\n}"}
{"index": 3746, "repo": "kafka-streams-3.5.0", "des": "Retrieves embedded metadata timestamps from Kafka messages.", "code": "Class UsePartitionTimeOnInvalidTimestamp {\n\tlong extract(org.apache.kafka.clients.consumer.ConsumerRecord<Object,Object> record, long partitionTime); // Extracts the embedded metadata timestamp from the given ConsumerRecord.\n\tlong onInvalidTimestamp(org.apache.kafka.clients.consumer.ConsumerRecord<Object,Object> record, long recordTimestamp, long partitionTime); // Returns the current stream-time as new timestamp for the record.\n}"}
{"index": 4556, "repo": "beam-sdks-java-core-2.49.0", "des": "A Source that reads an unbounded amount of input and, because of that, supports some additional operations such as checkpointing, watermarks, and record ids.", "code": "Class UnboundedSource<OutputT,CheckpointMarkT extends UnboundedSource.CheckpointMark> {\n\tabstract UnboundedSource.UnboundedReader<OutputT> createReader(PipelineOptions options, CheckpointMarkT checkpointMark); // Create a new UnboundedSource.UnboundedReader to read from this source, resuming from the given checkpoint if present.\n\tabstract Coder<CheckpointMarkT> getCheckpointMarkCoder(); // Returns a Coder for encoding and decoding the checkpoints for this source.\n\tboolean requiresDeduping(); // Returns whether this source requires explicit deduping.\n\tabstract java.util.List<? extends UnboundedSource<OutputT,CheckpointMarkT>> split(int desiredNumSplits, PipelineOptions options); // Returns a list of UnboundedSource objects representing the instances of this source that should be used when executing the workflow.\n}"}
{"index": 2490, "repo": "exoplayer-r2.3.1", "des": "A component from which streams of data can be read.", "code": "Interface DataSource {\n\tvoid close(); // Closes the source.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to length bytes of data and stores them into buffer, starting at index offset.\n}"}
{"index": 138, "repo": "commons-collections4-4.4", "des": "Closure implementation that always throws an exception.", "code": "Class ExceptionClosure<E> {\n\tstatic <E> Closure<E> exceptionClosure(); // Factory returning the singleton instance.\n\tvoid execute(E input); // Always throw an exception.\n}"}
{"index": 8530, "repo": "commons-io-2.13.0", "des": "Represents a function that accepts four arguments and produces a result.", "code": "Interface IOQuadFunction<T,U,V,W,R> {\n\tdefault <X> IOQuadFunction<T,U,V,W,X> andThen(IOFunction<? super R,? extends X> after); // Creates a composed function that first applies this function to its input, and then applies the after function to the result.\n\tR apply(T t, U u, V v, W w); // Applies this function to the given arguments.\n}"}
{"index": 17629, "repo": "spring-ldap-core-3.1.0", "des": "DirContextProcessor implementation for managing the paged results control.", "code": "public class PagedResultsDirContextProcessor extends AbstractFallbackRequestAndResponseControlDirContextProcessor {\n\tControl createRequestControl(); // Create an instance of the appropriate RequestControl.\n\tPagedResultsCookie getCookie(); // Get the cookie.\n\tint getPageSize(); // Get the page size.\n\tint getResultSize(); // Get the total estimated number of entries that matches the issued search.\n\tprotected void handleResponse(Object control);\n\tboolean hasMore(); // Check whether there are more results to retrieved.\n}"}
{"index": 14719, "repo": "spring-data-commons-3.1.2", "des": "Value object capturing dependencies to a method or property/field that is referenced from a SpEL expression.", "code": "public class ExpressionDependencies extends Object implements Streamable<ExpressionDependencies.ExpressionDependency> {\n\tstatic ExpressionDependencies discover(Expression expression); // Discover all expression dependencies that are referenced in the expression root.\n\tstatic ExpressionDependencies discover(SpelNode root, boolean topLevelOnly); // Discover all expression dependencies that are referenced in the expression root.\n\tboolean equals(Object o);\n\tIterator<ExpressionDependencies.ExpressionDependency> iterator();\n\tstatic ExpressionDependencies merged(Iterable<ExpressionDependencies> dependencies); // Return an ExpressionDependencies object representing the merged collection of dependencies withing the given ExpressionDependencies collection.\n\tExpressionDependencies mergeWith(ExpressionDependencies other); // Create new ExpressionDependencies that contains all dependencies from this object and other.\n\tstatic ExpressionDependencies none(); // Return an empty ExpressionDependencies object.\n\tstatic ExpressionDependencies of(Collection<ExpressionDependencies.ExpressionDependency> dependencies); // Return an ExpressionDependencies object representing the given Collection of dependencies.\n}"}
{"index": 4769, "repo": "hadoop-common-3.3.4", "des": "This program is the CLI utility for the CredentialProvider facilities in Hadoop.", "code": "Class CredentialShell {\n\tString getCommandUsage(); // Return usage string for the command including any summary of subcommands.\n\tCredentialShell.PasswordReader getPasswordReader();\n\tprotected int init(String[] args); // Parse the command line arguments and initialize the data.\n\tstatic void main(String[] args); // Main program.\n\tprotected char[] promptForCredential();\n\tvoid setPasswordReader(CredentialShell.PasswordReader reader);\n}"}
{"index": 17704, "repo": "spring-web-6.0.11", "des": "The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.", "code": "public class DefaultCorsProcessor extends Object implements CorsProcessor {\n\tprotected List<String> checkHeaders(CorsConfiguration config, List<String> requestHeaders); // Check the headers and determine the headers for the response of a pre-flight request.\n\tprotected List<HttpMethod> checkMethods(CorsConfiguration config, HttpMethod requestMethod); // Check the HTTP method and determine the methods for the response of a pre-flight request.\n\tprotected String checkOrigin(CorsConfiguration config, String requestOrigin); // Check the origin and determine the origin for the response.\n\tprotected boolean handleInternal(ServerHttpRequest request, ServerHttpResponse response, CorsConfiguration config, boolean preFlightRequest); // Handle the given request.\n\tboolean processRequest(CorsConfiguration config, HttpServletRequest request, HttpServletResponse response); // Process a request given a CorsConfiguration.\n\tprotected void rejectRequest(ServerHttpResponse response); // Invoked when one of the CORS checks failed.\n}"}
{"index": 9913, "repo": "iceberg-api-1.3.0", "des": "Pluggable module for reading, writing, and deleting files.", "code": "Interface FileIO {\n\tdefault void close(); // Close File IO to release underlying resources.\n\tdefault void deleteFile(InputFile file); // Convenience method to delete an InputFile.\n\tdefault void deleteFile(OutputFile file); // Convenience method to delete an OutputFile.\n\tvoid deleteFile(java.lang.String path); // Delete the file at the given path.\n\tdefault void initialize(java.util.Map<java.lang.String,java.lang.String> properties); // Initialize File IO from catalog properties.\n\tInputFile newInputFile(java.lang.String path); // Get a InputFile instance to read bytes from the file at the given path.\n\tdefault InputFile newInputFile(java.lang.String path, long length); // Get a InputFile instance to read bytes from the file at the given path, with a known file length.\n\tOutputFile newOutputFile(java.lang.String path); // Get a OutputFile instance to write bytes to the file at the given path.\n\tdefault java.util.Map<java.lang.String,java.lang.String> properties(); // Returns the property map used to configure this FileIO\n}"}
{"index": 1188, "repo": "ignite-core-2.15.0", "des": "Interface for sorted and segmented Ignite indexes.", "code": "Interface SortedSegmentedIndex {\n\tlong count(int segment); // Counts index rows in specified tree segment.\n\tlong count(int segment, IndexQueryContext qryCtx); // Counts index rows in specified tree segment with cache filter.\n\tGridCursor<IndexRow> find(@Nullable IndexRow lower, @Nullable IndexRow upper, boolean lowerIncl, boolean upperIncl, IndexQueryContext qryCtx); // Finds index rows by specified range in all tree segments with cache filtering.\n\tGridCursor<IndexRow> find(@Nullable IndexRow lower, @Nullable IndexRow upper, boolean lowerIncl, boolean upperIncl, int segment, IndexQueryContext qryCtx); // Finds index rows by specified range in specifed tree segment with cache filtering.\n\tGridCursor<IndexRow> findFirst(int segment, IndexQueryContext qryCtx); // Finds first index row for specified tree segment and cache filter.\n\tGridCursor<IndexRow> findFirstOrLast(IndexQueryContext qryCtx, boolean first); // Takes only one first or last index record.\n\tGridCursor<IndexRow> findLast(int segment, IndexQueryContext qryCtx); // Finds last index row for specified tree segment and cache filter.\n\tint segmentsCount(); // Returns amount of index tree segments.\n\tlong totalCount(); // Counts index rows for all segments.\n}"}
{"index": 14963, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Base implementation of an Authentication representing an OAuth 2.0 Authorization Grant.", "code": "public class OAuth2AuthorizationGrantAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters.\n\tObject getCredentials();\n\torg.springframework.security.oauth2.core.AuthorizationGrantType getGrantType(); // Returns the authorization grant type.\n\tObject getPrincipal();\n}"}
{"index": 9423, "repo": "hadoop-yarn-api-3.3.6", "des": "The response sent by the NodeManager to the ApplicationMaster when asked to stop allocated containers.", "code": "Class StopContainersResponse {\n\tabstract Map<ContainerId,SerializedException> getFailedRequests(); // Get the containerId-to-exception map in which the exception indicates error from per container for failed requests\n\tabstract List<ContainerId> getSuccessfullyStoppedContainers(); // Get the list of containerIds of successfully stopped containers.\n\tstatic StopContainersResponse newInstance(List<ContainerId> succeededRequests, Map<ContainerId,SerializedException> failedRequests);\n\tabstract void setFailedRequests(Map<ContainerId,SerializedException> failedRequests); // Set the containerId-to-exception map in which the exception indicates error from per container for failed requests\n\tabstract void setSuccessfullyStoppedContainers(List<ContainerId> succeededRequests); // Set the list of containerIds of successfully stopped containers.\n}"}
{"index": 1017, "repo": "ignite-core-2.15.0", "des": "Abstraction to decouple interaction between MaintenanceRegistry and components that may require maintenance.", "code": "Interface MaintenanceWorkflowCallback {\n\t@NotNull List<MaintenanceAction<?>> allActions(); // Supplies list of MaintenanceActions that user can call to fix maintenance situation for the component or get information about ongoing actions.\n\t@Nullable MaintenanceAction<?> automaticAction(); // Component can provide optional MaintenanceAction that will be executed automatically by MaintenanceRegistry when node enters maintenance mode.\n\tboolean shouldProceedWithMaintenance(); // Called by MaintenanceRegistry and enables it to check if maintenance is still needed for component that provided this callback.\n}"}
{"index": 16666, "repo": "spring-beans-6.0.11", "des": "A FactoryBean implementation that returns a value which is an ObjectFactory that in turn returns a bean sourced from a BeanFactory.", "code": "public class ObjectFactoryCreatingFactoryBean extends AbstractFactoryBean<ObjectFactory<Object>> {\n\tvoid afterPropertiesSet(); // Eagerly create the singleton instance, if necessary.\n\tprotected ObjectFactory<Object> createInstance(); // Template method that subclasses must override to construct the object returned by this factory.\n\tClass<?> getObjectType(); // This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tvoid setTargetBeanName(String targetBeanName); // Set the name of the target bean.\n}"}
{"index": 9711, "repo": "commons-math3-3.6.1", "des": "Defines the measurement model for the use with a KalmanFilter.", "code": "Interface MeasurementModel {\n\tRealMatrix getMeasurementMatrix(); // Returns the measurement matrix.\n\tRealMatrix getMeasurementNoise(); // Returns the measurement noise matrix.\n}"}
{"index": 14631, "repo": "spring-cloud-stream-4.0.0", "des": "Represents a binding between an input or output and an adapter endpoint that connects via a Binder.", "code": "public interface Binding<T> extends org.springframework.integration.core.Pausable {\n\tdefault String getBindingName(); // Returns the name of the target for this binding (i.e., channel name).\n\tdefault Map<String,Object> getExtendedInfo();\n\tdefault String getName(); // Returns the name of the destination for this binding.\n\tdefault boolean isInput(); // Returns boolean flag representing this binding's type.\n\tdefault boolean isPaused(); // Will always return false unless overriden.\n\tdefault boolean isRunning();\n\tdefault void pause(); // Pauses the target component represented by this instance if and only if the component implements Pausable interface NOTE: At the time the instance is created the component is already started and active.\n\tdefault void resume(); // Resumes the target component represented by this instance if and only if the component implements Pausable interface NOTE: At the time the instance is created the component is already started and active.\n\tdefault void start(); // Starts the target component represented by this instance.\n\tdefault void stop(); // Stops the target component represented by this instance.\n\tvoid unbind(); // Unbinds the target component represented by this instance and stops any active components.\n}"}
{"index": 2867, "repo": "amqp-client-5.18.0", "des": "Represents an AMQP wire-protocol frame, with frame type, channel number, and payload bytes.", "code": "Class Frame {\n\tstatic long arraySize(List<?> values); // Computes the AMQP 0-9-1 wire-protocol length of an encoded field-array of type List\n\tstatic long arraySize(Object[] values); // Computes the AMQP wire-protocol length of an encoded field-array of type Object[]\n\tstatic Frame fromBodyFragment(int channelNumber, byte[] body, int offset, int length);\n\tDataInputStream getInputStream(); // Public API - retrieves a new DataInputStream streaming over the payload\n\tDataOutputStream getOutputStream(); // Public API - retrieves a fresh DataOutputStream streaming into the accumulator\n\tbyte[] getPayload(); // Public API - retrieves the frame payload\n\tstatic void protocolVersionMismatch(DataInputStream is); // Private API - A protocol version mismatch is detected by checking the three next bytes if a frame type of (int)'A' is read from an input stream.\n\tstatic Frame readFrom(DataInputStream is, int maxPayloadSize); // Protected API - Factory method to instantiate a Frame by reading an AMQP-wire-protocol frame from the given input stream.\n\tint size();\n\tstatic long tableSize(Map<String,Object> table); // Computes the AMQP wire-protocol length of protocol-encoded table entries.\n\tvoid writeTo(DataOutputStream os); // Public API - writes this Frame to the given DataOutputStream\n}"}
{"index": 11350, "repo": "spring-context-6.0.11", "des": "ScriptFactory implementation for a Groovy script.", "code": "public class GroovyScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware {\n\tprotected groovy.lang.GroovyClassLoader buildGroovyClassLoader(ClassLoader classLoader); // Build a GroovyClassLoader for the given ClassLoader.\n\tprotected Object executeScript(ScriptSource scriptSource, Class<?> scriptClass); // Instantiate the given Groovy script class and run it if necessary.\n\tgroovy.lang.GroovyClassLoader getGroovyClassLoader(); // Return the GroovyClassLoader used by this script factory.\n\tObject getScriptedObject(ScriptSource scriptSource, Class<?>... actualInterfaces); // Loads and parses the Groovy script via the GroovyClassLoader.\n\tClass<?> getScriptedObjectType(ScriptSource scriptSource); // Determine the type of the scripted Java object.\n\tClass<?>[] getScriptInterfaces(); // Groovy scripts determine their interfaces themselves, hence we don't need to explicitly expose interfaces here.\n\tString getScriptSourceLocator(); // Return a locator that points to the source of the script.\n\tboolean requiresConfigInterface(); // Groovy scripts do not need a config interface, since they expose their setters as public methods.\n\tboolean requiresScriptedObjectRefresh(ScriptSource scriptSource); // Determine whether a refresh is required (e.g.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}"}
{"index": 3779, "repo": "hbase-client-3.0.0-alpha-4", "des": "A utility class that encapsulates SASL logic for RPC client.", "code": "Class AbstractHBaseSaslRpcClient {\n\tvoid dispose(); // Release resources used by wrapped saslClient\n\tbyte[] evaluateChallenge(byte[] challenge);\n\tbyte[] getInitialResponse(); // Computes the initial response a client sends to a server to begin the SASL challenge/response handshake.\n\tboolean isComplete();\n}"}
{"index": 5325, "repo": "druid-processing-26.0.0", "des": "Implementation that uses local filesystem.", "code": "Class LocalFileStorageConnector {\n\tvoid deleteFile(String path); // Deletes the file present at the location basePath + path.\n\tvoid deleteFiles(Iterable<String> paths); // Deletes the files present at each basePath + path.\n\tvoid deleteRecursively(String dirName); // Deletes the files and sub dirs present at the basePath + dirName.\n\tFile getBasePath();\n\tIterator<String> listDir(String dirName); // Returns a lazy iterator containing all the files present in the path.\n\tboolean pathExists(String path); // Check if the path exists in the underlying storage layer.\n\tInputStream read(String path); // Reads the data present at the path in the underlying storage system.\n\tInputStream readRange(String path, long from, long size); // Reads the data present for a given range at the path in the underlying storage system.\n\tOutputStream write(String path); // Writes the file present with the materialized location as basePath + path.\n}"}
{"index": 187, "repo": "commons-collections4-4.4", "des": "Closure implementation that does nothing.", "code": "Class NOPClosure<E> {\n\tvoid execute(E input); // Do nothing.\n\tstatic <E> Closure<E> nopClosure(); // Factory returning the singleton instance.\n}"}
{"index": 8057, "repo": "commons-compress-1.23.0", "des": "Dialects of the framing format that FramedSnappyCompressorInputStream can deal with.", "code": "Enum FramedSnappyDialect {\n\tstatic FramedSnappyDialect valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FramedSnappyDialect[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1984, "repo": "hive-exec-4.0.0-alpha-2", "des": "BucketizedHiveRecordReader is a wrapper on a list of RecordReader.", "code": "Class BucketizedHiveRecordReader<K extends org.apache.hadoop.io.WritableComparable,V extends org.apache.hadoop.io.Writable> {\n\tK createKey();\n\tV createValue();\n\tvoid doClose(); // Close this InputSplit to future operations.\n\tboolean doNext(K key, V value);\n\tlong getPos();\n\tfloat getProgress();\n\tprotected boolean initNextRecordReader(); // Get the record reader for the next chunk in this BucketizedHiveRecordReader.\n}"}
{"index": 4640, "repo": "commons-vfs2-2.9.0", "des": "Inverts file inclusion of a delegate FileSelector, folder traversal is delegated.", "code": "Class InvertIncludeFileSelector {\n\tboolean includeFile(FileSelectInfo fileInfo); // Inverts the result of calling includeFile(FileSelectInfo) on the delegate.\n\tboolean traverseDescendents(FileSelectInfo fileInfo); // Calls traverseDescendents(FileSelectInfo) on the delegate.\n}"}
{"index": 6876, "repo": "calcite-core-1.34.0", "des": "A SqlDialect implementation for the Firebolt database.", "code": "Class FireboltSqlDialect {\n\t@Nullable SqlNode getCastSpec(RelDataType type); // Returns SqlNode for type in \"cast(column as type)\", which might be different between databases by type name, precision etc.\n\tprotected boolean identifierNeedsQuote(String val); // Returns whether to quote an identifier.\n\tboolean supportsAggregateFunction(SqlKind kind);\n\tboolean supportsAggregateFunctionFilter(); // Returns whether this dialect supports the use of FILTER clauses for aggregate functions.\n\tboolean supportsCharSet(); // Returns whether the dialect supports character set names as part of a data type, for instance VARCHAR(30) CHARACTER SET `ISO-8859-1`.\n\tboolean supportsFunction(SqlOperator operator, RelDataType type, List<RelDataType> paramTypes); // Returns whether this dialect supports a given function or operator.\n\tvoid unparseCall(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec);\n\tvoid unparseOffsetFetch(SqlWriter writer, @Nullable SqlNode offset, @Nullable SqlNode fetch); // Converts an offset and fetch into SQL.\n\tvoid unparseSqlIntervalLiteral(SqlWriter writer, SqlIntervalLiteral literal, int leftPrec, int rightPrec); // Firebolt interval syntax: sign INTERVAL int64 time_unit.\n\tvoid unparseSqlIntervalQualifier(SqlWriter writer, SqlIntervalQualifier qualifier, RelDataTypeSystem typeSystem); // Converts an interval qualifier to a SQL string.\n}"}
{"index": 9571, "repo": "commons-math3-3.6.1", "des": "Default implementation of the FieldMatrixPreservingVisitor interface.", "code": "Class DefaultFieldMatrixPreservingVisitor<T extends FieldElement<T>> {\n\tT end(); // End visiting a matrix.\n\tvoid start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn); // Start visiting a matrix.\n\tvoid visit(int row, int column, T value); // Visit one matrix entry.\n}"}
{"index": 17035, "repo": "spring-integration-core-6.1.2", "des": "Aggregator specific implementation of AbstractCorrelatingMessageHandler.", "code": "public class AggregatingMessageHandler extends AbstractCorrelatingMessageHandler {\n\tprotected void afterRelease(MessageGroup messageGroup, Collection<org.springframework.messaging.Message<?>> completedMessages); // Complete the group and remove all its messages.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tprotected boolean isExpireGroupsUponCompletion();\n\tvoid setExpireGroupsUponCompletion(boolean expireGroupsUponCompletion); // Will set the 'expireGroupsUponCompletion' flag.\n\tprotected boolean shouldSplitOutput(Iterable<?> reply); // Check an Iterable result for split possibility on the output production: the items of the collection have to be instances of Message or AbstractIntegrationMessageBuilder and AbstractCorrelatingMessageHandler.getOutputProcessor() has to be a SimpleMessageGroupProcessor.\n}"}
{"index": 10711, "repo": "spring-tx-6.0.11", "des": "Data access exception thrown when a result was not of the expected size, for example when expecting a single row but getting 0 or more than 1 rows.", "code": "public class IncorrectResultSizeDataAccessException extends DataRetrievalFailureException {\n\tint getActualSize(); // Return the actual result size (or -1 if unknown).\n\tint getExpectedSize(); // Return the expected result size.\n}"}
{"index": 1632, "repo": "pdfbox-3.0.0-beta1", "des": "Enum for the names of the 14 standard fonts.", "code": "Enum Standard14Fonts.FontName {\n\tString getName();\n\tstatic Standard14Fonts.FontName valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Standard14Fonts.FontName[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4800, "repo": "hadoop-common-3.3.4", "des": "Builder for FSDataOutputStream and its subclasses.", "code": "Class FSDataOutputStreamBuilder<S extends FSDataOutputStream,B extends FSDataOutputStreamBuilder<S,B>> {\n\tB append(); // Append to an existing file (optional operation).\n\tB blockSize(long blkSize); // Set block size.\n\tB bufferSize(int bufSize); // Set the size of the buffer to be used.\n\tabstract S build(); // Create the FSDataOutputStream to write on the file system.\n\tB checksumOpt(Options.ChecksumOpt chksumOpt); // Set checksum opt.\n\tB create(); // Create an FSDataOutputStream at the specified path.\n\tprotected long getBlockSize();\n\tprotected int getBufferSize();\n\tprotected Options.ChecksumOpt getChecksumOpt();\n\tprotected EnumSet<CreateFlag> getFlags();\n\tprotected FileSystem getFS();\n\tprotected FsPermission getPermission();\n\tprotected Progressable getProgress();\n\tprotected short getReplication();\n\tabstract B getThisBuilder(); // Return the concrete implementation of the builder instance.\n\tprotected boolean isRecursive(); // Return true to create the parent directories if they do not exist.\n\tB overwrite(boolean overwrite); // Set to true to overwrite the existing file.\n\tB permission(FsPermission perm); // Set permission for the file.\n\tB progress(Progressable prog); // Set the facility of reporting progress.\n\tB recursive(); // Create the parent directory if they do not exist.\n\tB replication(short replica); // Set replication factor.\n}"}
{"index": 4363, "repo": "beam-sdks-java-core-2.49.0", "des": "This interface defines a complete generic visitor for a parse tree produced by FieldSpecifierNotationParser.", "code": "Interface FieldSpecifierNotationVisitor<T> {\n\tT visitArrayQualifier(FieldSpecifierNotationParser.ArrayQualifierContext ctx); // Visit a parse tree produced by FieldSpecifierNotationParser.arrayQualifier().\n\tT visitArrayQualifierList(FieldSpecifierNotationParser.ArrayQualifierListContext ctx); // Visit a parse tree produced by the arrayQualifierList labeled alternative in FieldSpecifierNotationParser.qualifierList().\n\tT visitDotExpression(FieldSpecifierNotationParser.DotExpressionContext ctx); // Visit a parse tree produced by FieldSpecifierNotationParser.dotExpression().\n\tT visitFieldSpecifier(FieldSpecifierNotationParser.FieldSpecifierContext ctx); // Visit a parse tree produced by FieldSpecifierNotationParser.fieldSpecifier().\n\tT visitMapQualifier(FieldSpecifierNotationParser.MapQualifierContext ctx); // Visit a parse tree produced by FieldSpecifierNotationParser.mapQualifier().\n\tT visitMapQualifierList(FieldSpecifierNotationParser.MapQualifierListContext ctx); // Visit a parse tree produced by the mapQualifierList labeled alternative in FieldSpecifierNotationParser.qualifierList().\n\tT visitQualifiedComponent(FieldSpecifierNotationParser.QualifiedComponentContext ctx); // Visit a parse tree produced by FieldSpecifierNotationParser.qualifiedComponent().\n\tT visitQualifyComponent(FieldSpecifierNotationParser.QualifyComponentContext ctx); // Visit a parse tree produced by the qualifyComponent labeled alternative in FieldSpecifierNotationParser.dotExpressionComponent().\n\tT visitSimpleIdentifier(FieldSpecifierNotationParser.SimpleIdentifierContext ctx); // Visit a parse tree produced by the simpleIdentifier labeled alternative in FieldSpecifierNotationParser.dotExpressionComponent().\n\tT visitWildcard(FieldSpecifierNotationParser.WildcardContext ctx); // Visit a parse tree produced by the wildcard labeled alternative in FieldSpecifierNotationParser.dotExpressionComponent().\n}"}
{"index": 14250, "repo": "wicket-core-10.0.0-M1", "des": "A container that renders the content that was bucketed into a certain bucket by FilteringHeaderResponse.", "code": "public class HeaderResponseContainer extends WebMarkupContainer {\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tvoid onComponentTagBody(MarkupStream markupStream, ComponentTag openTag); // Handle the container's body.\n}"}
{"index": 10058, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Value object used to carry information about the status of a job or step execution.", "code": "Class ExitStatus {\n\tExitStatus addExitDescription(String description); // Add an exit description to an existing ExitStatus.\n\tExitStatus addExitDescription(Throwable throwable); // Extract the stack trace from the throwable provided and append it to the exist description.\n\tExitStatus and(ExitStatus status); // Create a new ExitStatus with a logical combination of the exit code, and a concatenation of the descriptions.\n\tint compareTo(ExitStatus status);\n\tboolean equals(Object obj); // Compare the fields one by one.\n\tString getExitCode(); // Getter for the exit code (defaults to blank).\n\tString getExitDescription(); // Getter for the exit description (defaults to blank)\n\tboolean isRunning(); // Check if this status represents a running process.\n\tExitStatus replaceExitCode(String code); // Add an exit code to an existing ExitStatus.\n}"}
{"index": 8086, "repo": "commons-compress-1.23.0", "des": "Provides information about a scatter compression run.", "code": "Class ScatterStatistics {\n\tlong getCompressionElapsed(); // The number of milliseconds elapsed in the parallel compression phase\n\tlong getMergingElapsed(); // The number of milliseconds elapsed in merging the results of the parallel compression, the IO phase\n}"}
{"index": 11007, "repo": "spring-data-redis-3.1.2", "des": "Builder to build a StreamMessageListenerContainer.StreamReadRequest.", "code": "public static class StreamMessageListenerContainer.StreamReadRequestBuilder<K> extends Object {\n\tStreamMessageListenerContainer.StreamReadRequest<K> build(); // Build a new instance of StreamMessageListenerContainer.StreamReadRequest.\n\tStreamMessageListenerContainer.StreamReadRequestBuilder<K> cancelOnError(Predicate<Throwable> cancelSubscriptionOnError); // Configure a cancellation Predicate to be notified on errors.\n\tStreamMessageListenerContainer.ConsumerStreamReadRequestBuilder<K> consumer(Consumer consumer); // Configure a Consumer to consume stream messages within a consumer group.\n\tStreamMessageListenerContainer.StreamReadRequestBuilder<K> errorHandler(ErrorHandler errorHandler); // Configure a ErrorHandler to be notified on errors.\n}"}
{"index": 4575, "repo": "beam-sdks-java-core-2.49.0", "des": "A WatermarkEstimator which is used for estimating output watermarks of a splittable DoFn.", "code": "Interface WatermarkEstimator<WatermarkEstimatorStateT> {\n\torg.joda.time.Instant currentWatermark(); // Return estimated output watermark.\n\tWatermarkEstimatorStateT getState(); // Get current state of the WatermarkEstimator instance, which can be used to recreate the WatermarkEstimator when processing the restriction.\n}"}
{"index": 15805, "repo": "camel-api-4.0.0-RC1", "des": "SPI for dumping model definitions into YAML representation.", "code": "public interface ModelToYAMLDumper {\n\tString dumpModelAsYaml(CamelContext context, NamedNode definition); // Dumps the definition as YAML\n\tString dumpModelAsYaml(CamelContext context, NamedNode definition, boolean resolvePlaceholders, boolean uriAsParameters); // Dumps the definition as YAML\n}"}
{"index": 1871, "repo": "hadoop-hdfs-3.3.6", "des": "DiskBalancerDataNode represents a DataNode that exists in the cluster.", "code": "Class DiskBalancerDataNode {\n\tvoid addVolume(DiskBalancerVolume volume); // Adds a volume to the DataNode.\n\tint compareTo(DiskBalancerDataNode that); // Compares this object with the specified object for order.\n\tvoid computeNodeDensity(); // Computes nodes data density.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this one.\n\tString getDataNodeIP(); // Returns the IP address of this Node.\n\tString getDataNodeName(); // Get DataNode DNS name.\n\tint getDataNodePort(); // Returns the Port of this DataNode.\n\tString getDataNodeUUID(); // Returns datanode ID.\n\tdouble getNodeDataDensity(); // Returns NodeDataDensity Metric.\n\tint getVolumeCount(); // Returns how many volumes are in the DataNode.\n\tMap<String,DiskBalancerVolumeSet> getVolumeSets(); // Returns the Volume sets on this node.\n\tboolean isBalancingNeeded(double threshold); // Computes if this node needs balancing at all.\n\tvoid setDataNodeIP(String ipaddress); // Sets the IP address of this Node.\n\tvoid setDataNodeName(String name); // Sets node's DNS name.\n\tvoid setDataNodePort(int port); // Sets the DataNode Port number.\n\tvoid setDataNodeUUID(String nodeID); // Sets Datanode UUID.\n}"}
{"index": 2172, "repo": "hive-exec-4.0.0-alpha-2", "des": "Context used by list bucketing pruner to get all partitions.", "code": "Class LBOpPartitionWalkerCtx {\n\tParseContext getParseContext(); // Return parse context.\n\tPrunedPartitionList getPartitions(); // Return partitions.\n\tvoid setPartitions(PrunedPartitionList partitions); // Set partitions.\n}"}
{"index": 13092, "repo": "spring-aop-6.0.11", "des": "Spring's implementation of the AOP Alliance MethodInvocation interface, implementing the extended ProxyMethodInvocation interface.", "code": "public class ReflectiveMethodInvocation extends Object implements ProxyMethodInvocation, Cloneable {\n\tfinal Object[] getArguments(); // Get the arguments as an array object.\n\tfinal Method getMethod(); // Return the method invoked on the proxied interface.\n\tfinal Object getProxy(); // Return the proxy that this method invocation was made through.\n\tfinal AccessibleObject getStaticPart(); // Return the static part of this joinpoint.\n\tfinal Object getThis(); // Return the object that holds the current joinpoint's static part.\n\tObject getUserAttribute(String key); // Return the value of the specified user attribute.\n\tMap<String,Object> getUserAttributes(); // Return user attributes associated with this invocation.\n\tMethodInvocation invocableClone(); // This implementation returns a shallow copy of this invocation object, including an independent copy of the original arguments array.\n\tMethodInvocation invocableClone(Object... arguments); // This implementation returns a shallow copy of this invocation object, using the given arguments array for the clone.\n\tprotected Object invokeJoinpoint(); // Invoke the joinpoint using reflection.\n\tObject proceed(); // Proceed to the next interceptor in the chain.\n\tvoid setArguments(Object... arguments); // Set the arguments to be used on subsequent invocations in the any advice in this chain.\n\tvoid setUserAttribute(String key, Object value); // Add the specified user attribute with the given value to this invocation.\n}"}
{"index": 14447, "repo": "wicket-core-10.0.0-M1", "des": "This class is the parameter to Component.error(Serializable) instead of the generated error string itself (when FormComponent.error(IValidationError) is called).", "code": "public class ValidationErrorFeedback extends Object implements org.apache.wicket.util.io.IClusterable {\n\tIValidationError getError(); // Gets error.\n\tSerializable getMessage(); // Gets message.\n}"}
{"index": 16819, "repo": "spring-expression-6.0.11", "des": "Standard implementation of OperatorOverloader.", "code": "public class StandardOperatorOverloader extends Object implements OperatorOverloader {\n\tObject operate(Operation operation, Object leftOperand, Object rightOperand); // Execute the specified operation on two operands, returning a result.\n\tboolean overridesOperation(Operation operation, Object leftOperand, Object rightOperand); // Return true if the operator overloader supports the specified operation between the two operands and so should be invoked to handle it.\n}"}
{"index": 10394, "repo": "spring-core-6.0.11", "des": "ParameterNameDiscoverer implementation which uses JDK 8's reflection facilities for introspecting parameter names (based on the \"-parameters\" compiler flag).", "code": "public class StandardReflectionParameterNameDiscoverer extends Object implements ParameterNameDiscoverer {\n\tString[] getParameterNames(Constructor<?> ctor); // Return parameter names for a constructor, or null if they cannot be determined.\n\tString[] getParameterNames(Method method); // Return parameter names for a method, or null if they cannot be determined.\n}"}
{"index": 13592, "repo": "spring-messaging-6.0.11", "des": "Represents a STOMP session with operations to send messages, create subscriptions and receive messages on those subscriptions.", "code": "public interface StompSession {\n\tStompSession.Receiptable acknowledge(String messageId, boolean consumed); // Send an acknowledgement whether a message was consumed or not resulting in an ACK or NACK frame respectively.\n\tStompSession.Receiptable acknowledge(StompHeaders headers, boolean consumed); // An overloaded version of acknowledge(String, boolean) with full StompHeaders instead of just a messageId.\n\tvoid disconnect(); // Disconnect the session by sending a DISCONNECT frame.\n\tvoid disconnect(StompHeaders headers); // Variant of disconnect() with headers.\n\tString getSessionId(); // Return the id for the session.\n\tboolean isConnected(); // Whether the session is connected.\n\tStompSession.Receiptable send(String destination, Object payload); // Send a message to the specified destination, converting the payload to a byte[] with the help of a MessageConverter.\n\tStompSession.Receiptable send(StompHeaders headers, Object payload); // An overloaded version of send(String, Object) with full StompHeaders instead of just a destination.\n\tvoid setAutoReceipt(boolean enabled); // When enabled, a receipt header is automatically added to future send and subscribe operations on this session, which causes the server to return a RECEIPT.\n\tStompSession.Subscription subscribe(String destination, StompFrameHandler handler); // Subscribe to the given destination by sending a SUBSCRIBE frame and handle received messages with the specified StompFrameHandler.\n\tStompSession.Subscription subscribe(StompHeaders headers, StompFrameHandler handler); // An overloaded version of subscribe(String, StompFrameHandler) with full StompHeaders instead of just a destination.\n}"}
{"index": 15620, "repo": "spring-security-core-6.1.2", "des": "Static utility methods for creating MethodInvocations usable within Spring Security.", "code": "public final class MethodInvocationUtils extends Object {\n\tstatic org.aopalliance.intercept.MethodInvocation create(Object object, String methodName, Object... args); // Generates a MethodInvocation for specified methodName on the passed object, using the args to locate the method.\n\tstatic org.aopalliance.intercept.MethodInvocation createFromClass(Class<?> clazz, String methodName); // Generates a MethodInvocation for the specified methodName on the passed class.\n\tstatic org.aopalliance.intercept.MethodInvocation createFromClass(Object targetObject, Class<?> clazz, String methodName, Class<?>[] classArgs, Object[] args); // Generates a MethodInvocation for specified methodName on the passed class, using the args to locate the method.\n}"}
{"index": 1409, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents a floating point number in a PDF document.", "code": "Class COSFloat {\n\tvoid accept(ICOSVisitor visitor); // Visitor pattern double dispatch method.\n\tboolean equals(Object o);\n\tfloat floatValue(); // The value of the float object that this one wraps.\n\tint intValue(); // This will get the integer value of this object.\n\tlong longValue(); // This will get the long value of this object.\n\tvoid writePDF(OutputStream output); // This will output this string as a PDF object.\n}"}
{"index": 5969, "repo": "commons-lang3-3.12.0", "des": "A functional interface like DoubleFunction that declares a Throwable.", "code": "Interface FailableDoubleFunction<R,E extends Throwable> {\n\tR apply(double input); // Applies this function.\n\tstatic <R,E extends Throwable>FailableDoubleFunction<R,E> nop(); // Returns The NOP singleton.\n}"}
{"index": 5078, "repo": "commons-collections-3.2.2", "des": "Decorates another Set to synchronize its behaviour for a multi-threaded environment.", "code": "Class SynchronizedSet {\n\tstatic Set decorate(Set set); // Factory method to create a synchronized set.\n\tprotected Set getSet(); // Gets the decorated set.\n}"}
{"index": 7593, "repo": "cassandra-all-4.1.2", "des": "A combination of a top-level (partition) tombstone and range tombstones describing the deletions within a partition.", "code": "Interface DeletionInfo {\n\tDeletionInfo clone(ByteBufferCloner cloner);\n\tvoid collectStats(EncodingStats.Collector collector);\n\tint dataSize();\n\tDeletionTime getPartitionDeletion();\n\tboolean hasRanges();\n\tboolean isLive(); // Returns whether this DeletionInfo is live, that is deletes no columns.\n\tlong maxTimestamp();\n\tboolean mayModify(DeletionInfo delInfo); // Whether this deletion info may modify the provided one if added to it.\n\tMutableDeletionInfo mutableCopy();\n\tint rangeCount();\n\tRangeTombstone rangeCovering(Clustering<?> name);\n\tjava.util.Iterator<RangeTombstone> rangeIterator(boolean reversed);\n\tjava.util.Iterator<RangeTombstone> rangeIterator(Slice slice, boolean reversed);\n}"}
{"index": 2849, "repo": "amqp-client-5.18.0", "des": "Manages a set of channels, indexed by channel number (1.", "code": "Class ChannelManager {\n\tChannelN createChannel(AMQConnection connection);\n\tChannelN createChannel(AMQConnection connection, int channelNumber);\n\tChannelN getChannel(int channelNumber); // Looks up a channel on this connection.\n\tint getChannelMax();\n\tExecutorService getShutdownExecutor();\n\tvoid handleSignal(ShutdownSignalException signal); // Handle shutdown.\n\tprotected ChannelN instantiateChannel(AMQConnection connection, int channelNumber, ConsumerWorkService workService);\n\tvoid releaseChannelNumber(ChannelN channel); // Remove the channel from the channel map and free the number for re-use.\n\tvoid setChannelShutdownTimeout(int channelShutdownTimeout); // Set the shutdown timeout for channels.\n\tvoid setShutdownExecutor(ExecutorService shutdownExecutor);\n}"}
{"index": 6453, "repo": "exoplayer-core-2.9.6", "des": "Utility methods for handling CEA-608/708 messages.", "code": "Class CeaUtil {\n\tstatic void consume(long presentationTimeUs, ParsableByteArray seiBuffer, TrackOutput[] outputs); // Consumes the unescaped content of an SEI NAL unit, writing the content of any CEA-608 messages as samples to all of the provided outputs.\n\tstatic void consumeCcData(long presentationTimeUs, ParsableByteArray ccDataBuffer, TrackOutput[] outputs); // Consumes caption data (cc_data), writing the content as samples to all of the provided outputs.\n}"}
{"index": 15823, "repo": "camel-api-4.0.0-RC1", "des": "Evaluates a binary predicate on the message exchange.", "code": "public interface Predicate {\n\tdefault void init(CamelContext context); // Initialize the predicate with the given camel context\n\tdefault void initPredicate(CamelContext context); // Initialize as a predicate with the given camel context\n\tboolean matches(Exchange exchange); // Evaluates the predicate on the message exchange and returns true if this exchange matches the predicate\n}"}
{"index": 17079, "repo": "spring-integration-core-6.1.2", "des": "A Transformer that adds statically configured header values to a Message.", "code": "public class HeaderEnricher extends IntegrationObjectSupport implements Transformer, IntegrationPattern {\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tvoid onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setDefaultOverwrite(boolean defaultOverwrite);\n\t<T> void setMessageProcessor(MessageProcessor<T> messageProcessor);\n\tvoid setShouldSkipNulls(boolean shouldSkipNulls); // Specify whether null values, such as might be returned from an expression evaluation, should be skipped.\n\torg.springframework.messaging.Message<?> transform(org.springframework.messaging.Message<?> message);\n}"}
{"index": 18761, "repo": "solr-core-9.3.0", "des": "Placement context makes it easier to pass around and access main placement-related components.", "code": "Interface PlacementContext {\n\tAttributeFetcher getAttributeFetcher(); // Factory used by the plugin to fetch additional attributes from the cluster nodes, such as count of cores, system properties etc..\n\tBalancePlanFactory getBalancePlanFactory(); // Factory used to create instances of BalancePlan to return computed decision.\n\tCluster getCluster(); // Initial state of the cluster.\n\tPlacementPlanFactory getPlacementPlanFactory(); // Factory used to create instances of PlacementPlan to return computed decision.\n}"}
{"index": 6583, "repo": "exoplayer-core-2.9.6", "des": "Decodes and renders audio using a SimpleDecoder.", "code": "Class SimpleDecoderAudioRenderer {\n\tprotected abstract SimpleDecoder<DecoderInputBuffer,? extends SimpleOutputBuffer,? extends AudioDecoderException> createDecoder(Format format, ExoMediaCrypto mediaCrypto); // Creates a decoder for the given format.\n\tMediaClock getMediaClock(); // If the renderer advances its own playback position then this method returns a corresponding MediaClock.\n\tprotected Format getOutputFormat(); // Returns the format of audio buffers output by the decoder.\n\tPlaybackParameters getPlaybackParameters(); // Returns the active playback parameters.\n\tlong getPositionUs(); // Returns the current media position in microseconds.\n\tvoid handleMessage(int messageType, java.lang.Object message); // Handles a message delivered to the target.\n\tboolean isEnded(); // Whether the renderer is ready for the ExoPlayer instance to transition to Player.STATE_ENDED.\n\tboolean isReady(); // Whether the renderer is able to immediately render media from the current position.\n\tprotected void onAudioSessionId(int audioSessionId); // Called when the audio session id becomes known.\n\tprotected void onAudioTrackPositionDiscontinuity();\n\tprotected void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs);\n\tprotected void onDisabled(); // Called when the renderer is disabled.\n\tprotected void onEnabled(boolean joining); // Called when the renderer is enabled.\n\tprotected void onPositionReset(long positionUs, boolean joining); // Called when the position is reset.\n\tprotected void onStarted(); // Called when the renderer is started.\n\tprotected void onStopped(); // Called when the renderer is stopped.\n\tvoid render(long positionUs, long elapsedRealtimeUs); // Incrementally renders the SampleStream.\n\tPlaybackParameters setPlaybackParameters(PlaybackParameters playbackParameters); // Attempts to set the playback parameters and returns the active playback parameters, which may differ from those passed in.\n\tint supportsFormat(Format format); // Returns the extent to which the Renderer supports a given format.\n\tprotected abstract int supportsFormatInternal(DrmSessionManager<ExoMediaCrypto> drmSessionManager, Format format); // Returns the RendererCapabilities.FORMAT_SUPPORT_MASK component of the return value for supportsFormat(Format).\n\tprotected boolean supportsOutput(int channelCount, int encoding); // Returns whether the sink supports the audio format.\n}"}
{"index": 8098, "repo": "commons-compress-1.23.0", "des": "Encapsulates a Deflater and crc calculator, handling multiple types of output streams.", "code": "Class StreamCompressor {\n\tvoid close();\n\tstatic StreamCompressor create(int compressionLevel, ScatterGatherBackingStore bs); // Create a stream compressor with the given compression level.\n\tstatic StreamCompressor create(ScatterGatherBackingStore bs); // Create a stream compressor with the default compression level.\n\tvoid deflate(InputStream source, int method); // Deflate the given source using the supplied compression method\n\tlong getBytesRead(); // Return the number of bytes read from the source stream\n\tlong getBytesWrittenForLastEntry(); // The number of bytes written to the output for the last entry\n\tlong getCrc32(); // The crc32 of the last deflated file\n\tlong getTotalBytesWritten(); // The total number of bytes written to the output for all files\n\tvoid writeCounted(byte[] data);\n\tvoid writeCounted(byte[] data, int offset, int length);\n\tprotected abstract void writeOut(byte[] data, int offset, int length);\n}"}
{"index": 9886, "repo": "iceberg-api-1.3.0", "des": "A metadata about a statistics or indices blob.", "code": "Interface BlobMetadata {\n\tjava.util.List<java.lang.Integer> fields(); // Ordered list of fields the blob was calculated from.\n\tjava.util.Map<java.lang.String,java.lang.String> properties(); // Additional properties of the blob, specific to the blob type.\n\tlong sourceSnapshotId(); // ID of the Iceberg table's snapshot the blob was computed from\n\tlong sourceSnapshotSequenceNumber(); // Sequence number of the Iceberg table's snapshot the blob was computed from\n\tjava.lang.String type(); // Type of the blob.\n}"}
{"index": 6697, "repo": "lucene-analyzers-common-8.11.2", "des": "Factory for DelimitedPayloadTokenFilter.", "code": "Class DelimitedPayloadTokenFilterFactory {\n\tDelimitedPayloadTokenFilter create(TokenStream input); // Transform the specified input TokenStream\n\tvoid inform(ResourceLoader loader); // Initializes this component with the provided ResourceLoader (used for loading classes, files, etc).\n}"}
{"index": 4611, "repo": "commons-vfs2-2.9.0", "des": "A FileSelector that selects based on file extensions.", "code": "Class FileExtensionSelector {\n\tboolean includeFile(FileSelectInfo fileInfo); // Determines if a file or folder should be selected.\n\tboolean traverseDescendents(FileSelectInfo fileInfo); // Determines whether a folder should be traversed.\n}"}
{"index": 11662, "repo": "spring-websocket-6.0.11", "des": "An abstract base class for configuring STOMP over WebSocket/SockJS endpoints.", "code": "public class WebMvcStompWebSocketEndpointRegistration extends Object implements StompWebSocketEndpointRegistration {\n\tStompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors); // Configure the HandshakeInterceptor's to use.\n\tprotected HandshakeInterceptor[] getInterceptors();\n\tfinal org.springframework.util.MultiValueMap<org.springframework.web.HttpRequestHandler,String> getMappings();\n\tStompWebSocketEndpointRegistration setAllowedOriginPatterns(String... allowedOriginPatterns); // Alternative to StompWebSocketEndpointRegistration.setAllowedOrigins(String...) that supports more flexible patterns for specifying the origins for which cross-origin requests are allowed from a browser.\n\tStompWebSocketEndpointRegistration setAllowedOrigins(String... allowedOrigins); // Set the origins for which cross-origin requests are allowed from a browser.\n\tStompWebSocketEndpointRegistration setHandshakeHandler(HandshakeHandler handshakeHandler); // Configure the HandshakeHandler to use.\n\tSockJsServiceRegistration withSockJS(); // Enable SockJS fallback options.\n}"}
{"index": 17024, "repo": "spring-integration-core-6.1.2", "des": "Base class for url-based outbound gateway parsers.", "code": "public abstract class AbstractOutboundGatewayParser extends AbstractConsumerEndpointParser {\n\tprotected abstract String getGatewayClassName(Element element);\n\tprotected String getInputChannelAttributeName();\n\tprotected org.springframework.beans.factory.support.BeanDefinitionBuilder parseHandler(Element element, org.springframework.beans.factory.xml.ParserContext parserContext); // Parse the MessageHandler.\n\tprotected String parseUrl(Element element, org.springframework.beans.factory.xml.ParserContext parserContext);\n\tprotected void postProcessGateway(org.springframework.beans.factory.support.BeanDefinitionBuilder builder, Element element, org.springframework.beans.factory.xml.ParserContext parserContext); // Subclasses may override this method for additional configuration.\n}"}
{"index": 12722, "repo": "spring-data-mongodb-4.1.2", "des": "Trigger findAndModify execution by calling one of the terminating methods.", "code": "public static interface ExecutableUpdateOperation.TerminatingFindAndModify<T> {\n\tdefault Optional<T> findAndModify(); // Find, modify and return the first matching document.\n\tT findAndModifyValue(); // Find, modify and return the first matching document.\n}"}
{"index": 6099, "repo": "jackson-databind-2.15.2", "des": "PolymorphicTypeValidator that will only allow polymorphic handling if the base type is NOT one of potential dangerous base types (see isUnsafeBaseType(com.", "code": "Class DefaultBaseTypeLimitingValidator {\n\tprotected boolean isSafeSubType(MapperConfig<?> config, JavaType baseType, JavaType subType); // Helper called to determine whether given actual subtype is considered safe to process: this will only be called if subtype was considered acceptable earlier.\n\tprotected boolean isUnsafeBaseType(MapperConfig<?> config, JavaType baseType); // Helper method called to determine if the given base type is known to be problematic regarding possible \"gadget types\".\n\tPolymorphicTypeValidator.Validity validateBaseType(MapperConfig<?> config, JavaType baseType); // Method called when a property with polymorphic value is encountered, and a TypeResolverBuilder is needed.\n\tPolymorphicTypeValidator.Validity validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName); // Method called after intended class name for subtype has been read (and in case of minimal class name, expanded to fully-qualified class name) but before attempt is made to look up actual Class or JavaType.\n\tPolymorphicTypeValidator.Validity validateSubType(MapperConfig<?> config, JavaType baseType, JavaType subType); // Method called after class name has been resolved to actual type, in cases where previous call to PolymorphicTypeValidator.validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.JavaType, java.lang.String) returned PolymorphicTypeValidator.Validity.INDETERMINATE.\n}"}
{"index": 10037, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Generic event representing that Container has been registered.", "code": "Class ContainerRegisterEvent {\n\tString getContainerId(); // Gets the container id.\n\tString getTrackUrl(); // Gets the track url.\n}"}
{"index": 5365, "repo": "druid-processing-26.0.0", "des": "The \"mutable\" version of a ReadableOffset.", "code": "Class Offset {\n\tOffset clone();\n\tabstract ReadableOffset getBaseReadableOffset(); // Returns the same offset (\"this\") or a readable \"view\" of this offset, which always returns the same value from ReadableOffset.getOffset(), as this offset.\n\tabstract void increment();\n\tabstract void reset(); // Resets the Offset to the position it was created or cloned with.\n\tabstract boolean withinBounds();\n}"}
{"index": 12672, "repo": "spring-data-mongodb-4.1.2", "des": "Interface for functional preparation of a MongoCollection.", "code": "public interface CollectionPreparer<T> {\n\tdefault CollectionPreparer<T> andThen(CollectionPreparer<T> after); // Returns a composed CollectionPreparer that first applies this preparer to the collection, and then applies the after preparer to the result.\n\tstatic <T> CollectionPreparer<T> identity(); // Returns a preparer that always returns its input collection.\n\tT prepare(T collection); // Prepare the collection.\n}"}
{"index": 8125, "repo": "spring-ws-3.0.10.RELEASE", "des": "Base class for WebApplicationInitializer implementations that register a MessageDispatcherServlet configured with annotated classes, e.", "code": "Class AbstractAnnotationConfigMessageDispatcherServletInitializer {\n\tprotected org.springframework.web.context.WebApplicationContext createRootApplicationContext();\n\tprotected org.springframework.web.context.WebApplicationContext createServletApplicationContext(); // Create a servlet application context to be provided to the MessageDispatcherServlet.\n\tprotected abstract Class<?>[] getRootConfigClasses(); // Specify @Configuration and/or @Component classes to be provided to the root application context.\n\tprotected abstract Class<?>[] getServletConfigClasses(); // Specify @Configuration and/or @Component classes to be provided to the dispatcher servlet application context.\n}"}
{"index": 7171, "repo": "calcite-core-1.34.0", "des": "Definition of the BIT_AND and BIT_OR aggregate functions, returning the bitwise AND/OR of all non-null input values, or null if none.", "code": "Class SqlBitOpAggFunction {\n\tOptionality getDistinctOptionality(); // Returns whether this aggregate function allows the DISTINCT keyword.\n\t<T> T unwrap(Class<T> clazz); // Finds an instance of an interface implemented by this object, or returns null if this object does not support that interface.\n}"}
{"index": 8408, "repo": "hadoop-aws-3.3.6", "des": "Translate from AWS SDK-wrapped exceptions into IOExceptions with as much information as possible.", "code": "Class ErrorTranslation {\n\tstatic boolean isObjectNotFound(com.amazonaws.AmazonServiceException e); // Does this exception indicate that a reference to an object returned a 404.\n\tstatic boolean isUnknownBucket(com.amazonaws.AmazonServiceException e); // Does this exception indicate that the AWS Bucket was unknown.\n}"}
{"index": 11396, "repo": "spring-context-6.0.11", "des": "Implementation of the MBeanInfoAssembler interface that reads the management interface information from source level metadata.", "code": "public class MetadataMBeanInfoAssembler extends AbstractReflectiveMBeanInfoAssembler implements AutodetectCapableMBeanInfoAssembler, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void checkManagedBean(Object managedBean); // Throws an IllegalArgumentException if it encounters a JDK dynamic proxy.\n\tprotected String getAttributeDescription(PropertyDescriptor propertyDescriptor, String beanKey); // Creates a description for the attribute corresponding to this property descriptor.\n\tprotected String getDescription(Object managedBean, String beanKey); // Reads managed resource description from the source level metadata.\n\tprotected ModelMBeanNotificationInfo[] getNotificationInfo(Object managedBean, String beanKey); // Reads the ManagedNotification metadata from the Class of the managed resource and generates and returns the corresponding ModelMBeanNotificationInfo metadata.\n\tprotected String getOperationDescription(Method method, String beanKey); // Retrieves the description for the supplied Method from the metadata.\n\tprotected MBeanParameterInfo[] getOperationParameters(Method method, String beanKey); // Reads MBeanParameterInfo from the ManagedOperationParameter attributes attached to a method.\n\tboolean includeBean(Class<?> beanClass, String beanName); // Used for autodetection of beans.\n\tprotected boolean includeOperation(Method method, String beanKey); // Votes on the inclusion of an operation.\n\tprotected boolean includeReadAttribute(Method method, String beanKey); // Vote on the inclusion of an attribute accessor.\n\tprotected boolean includeWriteAttribute(Method method, String beanKey); // Votes on the inclusion of an attribute mutator.\n\tprotected void populateAttributeDescriptor(Descriptor desc, Method getter, Method setter, String beanKey); // Adds descriptor fields from the ManagedAttribute attribute or the ManagedMetric attribute to the attribute descriptor.\n\tprotected void populateMBeanDescriptor(Descriptor desc, Object managedBean, String beanKey); // Adds descriptor fields from the ManagedResource attribute to the MBean descriptor.\n\tprotected void populateOperationDescriptor(Descriptor desc, Method method, String beanKey); // Adds descriptor fields from the ManagedAttribute attribute to the attribute descriptor.\n\tvoid setAttributeSource(JmxAttributeSource attributeSource); // Set the JmxAttributeSource implementation to use for reading the metadata from the bean class.\n}"}
{"index": 13418, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Interface that can be used by auto-configurations that need path details Jersey's application path that serves as the base URI for the application.", "code": "@FunctionalInterface public interface JerseyApplicationPath {\n\tString getPath(); // Returns the configured path of the application.\n\tdefault String getPrefix(); // Return a cleaned up version of the path that can be used as a prefix for URLs.\n\tdefault String getRelativePath(String path); // Return a form of the given path that's relative to the Jersey application path.\n\tdefault String getUrlMapping(); // Return a URL mapping pattern that can be used with a ServletRegistrationBean to map Jersey's servlet.\n}"}
{"index": 5730, "repo": "freemarker-2.3.32", "des": "A TemplateClassResolver that resolves only the classes whose name was specified in the constructor.", "code": "Class OptInTemplateClassResolver {\n\tjava.lang.Class resolve(java.lang.String className, Environment env, Template template); // Gets a Class based on the class name.\n\tprotected java.lang.String safeGetTemplateName(Template template); // Extract the template name from the template object which will be matched against the trusted template names and pattern.\n}"}
{"index": 374, "repo": "phoenix-core-5.1.3", "des": "Fully materialized comparable result iterator backed by the result iterator provided with comparator.", "code": "Class MaterializedComparableResultIterator {\n\tvoid close();\n\tint compareTo(MaterializedComparableResultIterator o);\n\tvoid explain(List<String> planSteps);\n\tvoid explain(List<String> planSteps, ExplainPlanAttributes.ExplainPlanAttributesBuilder explainPlanAttributesBuilder); // Generate ExplainPlan steps and add steps as list of Strings in planSteps argument as readable statement as well as add same generated steps in explainPlanAttributesBuilder so that we prepare ExplainPlan result as an attribute object useful to retrieve individual plan step attributes.\n\tTuple getCurrent();\n\tTuple next(); // Grab the next row's worth of values.\n\tTuple peek(); // Returns the next result without advancing the iterator\n}"}
{"index": 16296, "repo": "spring-r2dbc-6.0.11", "des": "Mutable extension to Bindings for Value and null bindings for a Statement using BindMarkers.", "code": "public class MutableBindings extends Bindings {\n\tBindMarker bind(Object value); // Bind a value and return the related BindMarker.\n\tMutableBindings bind(BindMarker marker, Object value); // Bind a value to BindMarker.\n\tBindMarker bindNull(Class<?> valueType); // Bind a NULL value and return the related BindMarker.\n\tMutableBindings bindNull(BindMarker marker, Class<?> valueType); // Bind a NULL value to BindMarker.\n\tBindMarker nextMarker(); // Obtain the next BindMarker.\n\tBindMarker nextMarker(String hint); // Obtain the next BindMarker with a name hint.\n}"}
{"index": 5219, "repo": "druid-processing-26.0.0", "des": "Helper class that fetches the directory and file names corresponding to file location.", "code": "Class DurableStorageUtils {\n\tstatic String getControllerDirectory(String controllerTaskId);\n\tstatic String getControllerTaskIdWithPrefixFromPath(String path); // Tries to parse out the controller taskID from the input path.\n\tstatic String getOutputsFileNameForPath(String controllerTaskId, int stageNumber, int workerNumber, String taskId, String path); // Fetches the file location where a particular worker writes the data corresponding to a particular stage and a custom path name\n\tstatic String getPartitionOutputsFileNameForPartition(String controllerTaskId, int stageNumber, int workerNumber, String taskId, int partitionNumber); // Fetches the file location where a particular worker writes the data corresponding to a particular stage and partition\n\tstatic String getSuccessFilePath(String controllerTaskId, int stageNumber, int workerNumber);\n\tstatic String getTaskIdOutputsFolderName(String controllerTaskId, int stageNumber, int workerNumber, String taskId); // Fetches the directory location where a particular worker will store the partition files corresponding to the stage number, and it's task id\n\tstatic String getWorkerOutputFolderName(String controllerTaskId, int stageNumber, int workerNumber); // Fetches the directory location where workers will store the partition files corresponding to the stage number\n}"}
{"index": 3248, "repo": "hbase-common-3.0.0-alpha-4", "des": "Allows multiple concurrent clients to lock on a numeric id with a minimal memory overhead.", "code": "Class IdLock {\n\tIdLock.Entry getLockEntry(long id); // Blocks until the lock corresponding to the given id is acquired.\n\tboolean isHeldByCurrentThread(long id); // Test whether the given id is already locked by the current thread.\n\tvoid releaseLockEntry(IdLock.Entry entry); // Must be called in a finally block to decrease the internal counter and remove the monitor object for the given id if the caller is the last client.\n\tIdLock.Entry tryLockEntry(long id, long time); // Blocks until the lock corresponding to the given id is acquired.\n\tvoid waitForWaiters(long id, int numWaiters);\n}"}
{"index": 5346, "repo": "druid-processing-26.0.0", "des": "Process the \"raw\" data to extract vectors of values with NestedPathFinder.", "code": "Class NestedFieldVirtualColumn.RawFieldVectorObjectSelector {\n\tint getCurrentVectorSize(); // Returns the current vector size for this cursor.\n\tint getMaxVectorSize(); // Returns the maximum vector size for this cursor.\n\tObject[] getObjectVector(); // Get the current vector.\n}"}
{"index": 853, "repo": "ignite-core-2.15.0", "des": "This is an utility class for 'splitting' locking of some int- or long-keyed resources.", "code": "Class GridStripedReadWriteLock {\n\tint concurrencyLevel(); // Gets concurrency level.\n\tReadWriteLock[] getAllLocks(); // Gets all locks.\n\tReadWriteLock getLock(int key); // Returns Lock object for the given key.\n\tReadWriteLock getLock(long key); // Returns Lock object for the given key.\n\tReadWriteLock getLock(@Nullable Object o); // Returns lock for object.\n}"}
{"index": 17733, "repo": "spring-web-6.0.11", "des": "A ContentNegotiationStrategy that returns a fixed content type.", "code": "public class FixedContentNegotiationStrategy extends Object implements ContentNegotiationStrategy {\n\tList<MediaType> getContentTypes(); // Return the configured list of media types.\n\tList<MediaType> resolveMediaTypes(NativeWebRequest request); // Resolve the given request to a list of media types.\n}"}
{"index": 16633, "repo": "spring-beans-6.0.11", "des": "FactoryBean which retrieves a static or non-static field value.", "code": "public class FieldRetrievingFactoryBean extends Object implements FactoryBean<Object>, BeanNameAware, BeanClassLoaderAware, InitializingBean {\n\tvoid afterPropertiesSet(); // Invoked by the containing BeanFactory after it has set all bean properties and satisfied BeanFactoryAware, ApplicationContextAware etc.\n\tObject getObject(); // Return an instance (possibly shared or independent) of the object managed by this factory.\n\tClass<?> getObjectType(); // Return the type of object that this FactoryBean creates, or null if not known in advance.\n\tClass<?> getTargetClass(); // Return the target class on which the field is defined.\n\tString getTargetField(); // Return the name of the field to be retrieved.\n\tObject getTargetObject(); // Return the target object on which the field is defined.\n\tboolean isSingleton(); // Is the object managed by this factory a singleton? That is, will FactoryBean.getObject() always return the same object (a reference that can be cached)?\n\tvoid setBeanClassLoader(ClassLoader classLoader); // Callback that supplies the bean class loader to a bean instance.\n\tvoid setBeanName(String beanName); // The bean name of this FieldRetrievingFactoryBean will be interpreted as \"staticField\" pattern, if neither \"targetClass\" nor \"targetObject\" nor \"targetField\" have been specified.\n\tvoid setStaticField(String staticField); // Set a fully qualified static field name to retrieve, e.g.\n\tvoid setTargetClass(Class<?> targetClass); // Set the target class on which the field is defined.\n\tvoid setTargetField(String targetField); // Set the name of the field to be retrieved.\n\tvoid setTargetObject(Object targetObject); // Set the target object on which the field is defined.\n}"}
{"index": 9581, "repo": "commons-math3-3.6.1", "des": "This class implements the 5(4) Dormand-Prince integrator for Ordinary Differential Equations.", "code": "Class DormandPrince54Integrator {\n\tprotected double estimateError(double[][] yDotK, double[] y0, double[] y1, double h); // Compute the error ratio.\n\tint getOrder(); // Get the order of the method.\n}"}
{"index": 3566, "repo": "hive-serde-4.0.0-alpha-2", "des": "AbstractEncodingAwareSerDe aware the encoding from table properties, transform data from specified charset to UTF-8 during serialize, and transform data from UTF-8 to specified charset during deserialize.", "code": "Class AbstractEncodingAwareSerDe {\n\tObject deserialize(org.apache.hadoop.io.Writable blob); // Deserialize an object out of a Writable blob.\n\tprotected abstract Object doDeserialize(org.apache.hadoop.io.Writable blob);\n\tprotected abstract org.apache.hadoop.io.Writable doSerialize(Object obj, ObjectInspector objInspector);\n\tvoid initialize(org.apache.hadoop.conf.Configuration configuration, Properties tableProperties, Properties partitionProperties); // Initialize the SerDe.\n\torg.apache.hadoop.io.Writable serialize(Object obj, ObjectInspector objInspector); // Serialize an object by navigating inside the Object with the ObjectInspector.\n\tprotected abstract org.apache.hadoop.io.Writable transformFromUTF8(org.apache.hadoop.io.Writable blob); // transform Writable data from UTF-8 to charset before serialize.\n\tprotected abstract org.apache.hadoop.io.Writable transformToUTF8(org.apache.hadoop.io.Writable blob); // transform Writable data from charset to UTF-8 before doDeserialize.\n}"}
{"index": 13726, "repo": "spring-webmvc-6.0.11", "des": "Simple extension of HttpServlet which treats its config parameters (init-param entries within the servlet tag in web.xml) as bean properties.", "code": "public abstract class HttpServletBean extends HttpServlet implements org.springframework.core.env.EnvironmentCapable, org.springframework.context.EnvironmentAware {\n\tprotected final void addRequiredProperty(String property); // Subclasses can invoke this method to specify that this property (which must match a JavaBean property they expose) is mandatory, and must be supplied as a config parameter.\n\tprotected org.springframework.core.env.ConfigurableEnvironment createEnvironment(); // Create and return a new StandardServletEnvironment.\n\torg.springframework.core.env.ConfigurableEnvironment getEnvironment(); // Return the Environment associated with this servlet.\n\tString getServletName(); // Overridden method that simply returns null when no ServletConfig set yet.\n\tfinal void init(); // Map config parameters onto bean properties of this servlet, and invoke subclass initialization.\n\tprotected void initBeanWrapper(org.springframework.beans.BeanWrapper bw); // Initialize the BeanWrapper for this HttpServletBean, possibly with custom editors.\n\tprotected void initServletBean(); // Subclasses may override this to perform custom initialization.\n\tvoid setEnvironment(org.springframework.core.env.Environment environment); // Set the Environment that this servlet runs in.\n}"}
{"index": 17431, "repo": "groovy-4.0.13", "des": "Initializes the variable scopes for an AST.", "code": "public class VariableScopeVisitor extends ClassCodeVisitorSupport {\n\tprotected SourceUnit getSourceUnit();\n\tvoid prepareVisit(ClassNode node); // Sets the current class node context.\n\tvoid visitBinaryExpression(BinaryExpression expression);\n\tvoid visitBlockStatement(BlockStatement statement);\n\tvoid visitCatchStatement(CatchStatement statement);\n\tvoid visitClass(ClassNode node); // Visit a ClassNode.\n\tvoid visitClosureExpression(ClosureExpression expression);\n\tvoid visitConstructorCallExpression(ConstructorCallExpression expression);\n\tprotected void visitConstructorOrMethod(MethodNode node, boolean isConstructor);\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n\tvoid visitField(FieldNode node); // Visit a FieldNode.\n\tvoid visitFieldExpression(FieldExpression expression);\n\tvoid visitForLoop(ForStatement statement);\n\tvoid visitIfElse(IfStatement statement);\n\tvoid visitMethodCallExpression(MethodCallExpression expression);\n\tvoid visitProperty(PropertyNode node); // Visit a PropertyNode.\n\tvoid visitPropertyExpression(PropertyExpression expression);\n\tvoid visitVariableExpression(VariableExpression expression);\n}"}
{"index": 11193, "repo": "wicket-extensions-10.0.0-M1", "des": "An IDataExporter that exports data to a CSV file.", "code": "public class CSVDataExporter extends AbstractDataExporter {\n\t<T> void exportData(org.apache.wicket.markup.repeater.data.IDataProvider<T> dataProvider, List<IExportableColumn<T,?>> columns, OutputStream outputStream); // Exports the data provided by the IDataProvider to the OutputStream.\n\tString getCharacterSet(); // Returns the character set encoding to be used when exporting data.\n\tString getContentType(); // Returns the content type of the exported data.\n\tprotected org.apache.wicket.IConverterLocator getConverterLocator(); // Get the locator of converters.\n\tchar getDelimiter(); // Returns the delimiter to be used for separating fields.\n\tchar getQuoteCharacter(); // Returns the character to be used for quoting fields.\n\tboolean isExportHeadersEnabled(); // Indicates if header exporting is enabled.\n\tprotected String quoteValue(String value); // Quotes a value for export to CSV.\n\tCSVDataExporter setCharacterSet(String characterSet); // Sets the character set encoding to be used when exporting data.\n\tCSVDataExporter setDelimiter(char delimiter); // Sets the delimiter to be used to separate fields.\n\tCSVDataExporter setExportHeadersEnabled(boolean exportHeadersEnabled); // Turns on or off export headers functionality.\n\tCSVDataExporter setQuoteCharacter(char quoteCharacter); // Sets the character to be used to quote fields.\n\tprotected <T> org.apache.wicket.model.IModel<T> wrapModel(org.apache.wicket.model.IModel<T> model); // Wrap the given model-\n}"}
{"index": 14382, "repo": "wicket-core-10.0.0-M1", "des": "Kind of like java.util.Properties but based on Wicket's ValueMap and thus benefiting from all its nice build-in type converters and without parent properties.", "code": "public final class Properties extends Object {\n\tfinal org.apache.wicket.util.value.ValueMap getAll(); // Get direct access to all values from the properties file.\n\tfinal String getString(String key); // Get the property value identified by its 'key'.\n}"}
{"index": 6523, "repo": "exoplayer-core-2.9.6", "des": "Configurable loader for native libraries.", "code": "Class LibraryLoader {\n\tboolean isAvailable(); // Returns whether the underlying libraries are available, loading them if necessary.\n\tvoid setLibraries(java.lang.String... libraries); // Overrides the names of the libraries to load.\n}"}
{"index": 16890, "repo": "spring-security-oauth2-core-6.1.2", "des": "An AuthenticatedPrincipal that represents the principal associated with an OAuth 2.0 token.", "code": "public interface OAuth2AuthenticatedPrincipal extends org.springframework.security.core.AuthenticatedPrincipal {\n\tdefault <A> A getAttribute(String name); // Get the OAuth 2.0 token attribute by name\n\tMap<String,Object> getAttributes(); // Get the OAuth 2.0 token attributes\n\tCollection<? extends org.springframework.security.core.GrantedAuthority> getAuthorities(); // Get the Collection of GrantedAuthoritys associated with this OAuth 2.0 token\n}"}
{"index": 14431, "repo": "wicket-core-10.0.0-M1", "des": "An IMarkupFilter that wraps the body of all <style> elements and <script> elements which are plain JavaScript in CDATA blocks.", "code": "public final class StyleAndScriptIdentifier extends AbstractMarkupFilter {\n\tprotected final MarkupElement onComponentTag(ComponentTag tag); // Invoked when a ComponentTag was found.\n\tvoid postProcess(Markup markup); // Called after all filters have been processed.\n}"}
{"index": 2000, "repo": "hive-exec-4.0.0-alpha-2", "des": "Holds result of a common key prefix of two operators.", "code": "Class CommonKeyPrefix {\n\tvoid add(ExprNodeDesc column, char order, char nullOrder);\n\tList<ExprNodeDesc> getMappedColumns();\n\tString getMappedNullOrder();\n\tString getMappedOrder();\n\tboolean isEmpty();\n\tstatic CommonKeyPrefix map(List<ExprNodeDesc> opKeys, String opOrder, String opNullOrder, List<ExprNodeDesc> parentKeys, Map<String,ExprNodeDesc> parentColExprMap, String parentOrder, String parentNullOrder); // General factory method to map two operator keys.\n\tstatic CommonKeyPrefix map(List<ExprNodeDesc> opKeys, String opOrder, String opNullOrder, List<ExprNodeDesc> parentKeys, String parentOrder, String parentNullOrder);\n\tstatic CommonKeyPrefix map(TopNKeyDesc topNKeyDesc, GroupByDesc groupByDesc); // Factory method to map a TopNKeyOperator's and a GroupByOperator's keys.\n\tstatic CommonKeyPrefix map(TopNKeyDesc topNKeyDesc, ReduceSinkDesc reduceSinkDesc); // Factory method to map a TopNKeyOperator's and a ReduceSinkOperator's keys.\n\tint size();\n}"}
{"index": 2860, "repo": "amqp-client-5.18.0", "des": "Scheduling-based implementation of CredentialsRefreshService.", "code": "Class DefaultCredentialsRefreshService {\n\tvoid close();\n\tstatic Function<Duration,Duration> fixedDelayBeforeExpirationRefreshDelayStrategy(Duration duration); // Delay before refresh is time before expiration - specified duration.\n\tstatic Function<Duration,Boolean> fixedTimeApproachingExpirationStrategy(Duration limitBeforeExpiration); // Advise to refresh credentials if TTL <= limit.\n\tboolean isApproachingExpiration(Duration timeBeforeExpiration); // Provide a hint about whether credentials should be renewed now or not before attempting to connect.\n\tstatic Function<Duration,Duration> ratioRefreshDelayStrategy(double ratio); // Delay before refresh is a ratio of the time before expiration.\n\tString register(CredentialsProvider credentialsProvider, Callable<Boolean> refreshAction); // Register a new entity that needs credentials renewal.\n\tvoid unregister(CredentialsProvider credentialsProvider, String registrationId); // Unregister the entity with the given registration ID.\n}"}
{"index": 8172, "repo": "spring-ws-3.0.10.RELEASE", "des": "Default implementation of the ClientInterceptor interface, for simplified implementation of pre-only/post-only interceptors.", "code": "Class ClientInterceptorAdapter {\n\tvoid afterCompletion(MessageContext messageContext, Exception ex); // Does nothing by default.\n\tboolean handleFault(MessageContext messageContext); // Processes the incoming response fault.\n\tboolean handleRequest(MessageContext messageContext); // Processes the outgoing request message.\n\tboolean handleResponse(MessageContext messageContext); // Processes the incoming response message.\n}"}
{"index": 826, "repo": "ignite-core-2.15.0", "des": "No-op implementation for GridCacheDrManager.", "code": "Class GridOsCacheDrManager {\n\tbyte dataCenterId();\n\tboolean enabled();\n\tvoid onDisconnected(IgniteFuture reconnectFut);\n\tvoid onExchange(AffinityTopologyVersion topVer, boolean left, boolean activate); // Process partitions exchange event.\n\tvoid onKernalStart();\n\tvoid onKernalStop(boolean cancel);\n\tvoid onReceiveCacheConflictResolved(boolean useNew, boolean useOld, boolean merge); // Callback for manual conflict resolution.\n\tvoid onReceiveCacheEntriesReceived(int entriesCnt); // Callback for received entries from receiver hub.\n\tvoid partitionEvicted(int part); // In case some partition is evicted, we remove entries of this partition from backup queue.\n\tvoid printMemoryStats(); // Prints memory statistics (sizes of internal data structures, etc.).\n\tboolean receiveEnabled();\n\tvoid replicate(KeyCacheObject key, @Nullable CacheObject val, long ttl, long expireTime, GridCacheVersion ver, GridDrType drType, AffinityTopologyVersion topVer); // Performs replication.\n\tvoid resetMetrics(); // Resets metrics for current cache.\n\tvoid start(GridCacheContext cctx); // Starts manager.\n\tvoid stop(boolean cancel, boolean destroy); // Stops manager.\n}"}
{"index": 1731, "repo": "kafka-clients-3.5.0", "des": "A filter which can match AclBinding objects.", "code": "Class AclBindingFilter {\n\tAccessControlEntryFilter entryFilter();\n\tboolean equals(Object o);\n\tString findIndefiniteField(); // Return a string describing an ANY or UNKNOWN field, or null if there is no such field.\n\tboolean isUnknown();\n\tboolean matches(AclBinding binding); // Return true if the resource filter matches the binding's resource and the entry filter matches binding's entry.\n\tboolean matchesAtMostOne(); // Return true if the resource and entry filters can only match one ACE.\n\tResourcePatternFilter patternFilter();\n}"}
{"index": 1885, "repo": "hadoop-hdfs-3.3.6", "des": "Loading snapshot related information from protobuf based FSImage.", "code": "Class FSImageFormatPBSnapshot.Loader {\n\tvoid loadINodeReferenceSection(InputStream in); // The sequence of the ref node in refList must be strictly the same with the sequence in fsimage\n\tvoid loadSnapshotDiffSection(InputStream in); // Load the snapshot diff section from fsimage.\n\tvoid loadSnapshotSection(InputStream in); // Load the snapshots section from fsimage.\n}"}
{"index": 3402, "repo": "nifi-api-1.22.0", "des": "Defines possible components for a given action.", "code": "Enum Component {\n\tstatic Component valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Component[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8312, "repo": "spring-ws-3.0.10.RELEASE", "des": "Callback interface invoked on each sort of Result.", "code": "Interface TraxUtils.ResultCallback {\n\tvoid domResult(Node node); // Perform an operation on the node contained in a DOMResult.\n\tvoid result(String systemId); // Perform an operation on the system identifier contained in any Result.\n\tvoid saxResult(ContentHandler contentHandler, LexicalHandler lexicalHandler); // Perform an operation on the ContentHandler and LexicalHandler contained in a SAXResult.\n\tvoid staxResult(XMLEventWriter eventWriter); // Perform an operation on the XMLEventWriter contained in a JAXP 1.4 StAXResult or Spring StaxResult.\n\tvoid staxResult(XMLStreamWriter streamWriter); // Perform an operation on the XMLStreamWriter contained in a JAXP 1.4 StAXResult or Spring StaxResult.\n\tvoid streamResult(OutputStream outputStream); // Perform an operation on the OutputStream contained in a StreamResult.\n\tvoid streamResult(Writer writer); // Perform an operation on the Writer contained in a StreamResult.\n}"}
{"index": 15031, "repo": "spring-vault-core-3.0.4", "des": "Azure MSI (Managed Service Identity) authentication using Azure as trusted third party.", "code": "public class AzureMsiAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\tstatic AuthenticationSteps createAuthenticationSteps(AzureMsiAuthenticationOptions options); // Creates a AuthenticationSteps for Azure authentication given AzureMsiAuthenticationOptions.\n\tprotected static AuthenticationSteps createAuthenticationSteps(AzureMsiAuthenticationOptions options, AzureVmEnvironment environment);\n\tAuthenticationSteps getAuthenticationSteps(); // Get the AuthenticationSteps describing an authentication flow.\n\tVaultToken login(); // Return a VaultToken.\n}"}
{"index": 646, "repo": "ignite-core-2.15.0", "des": "Processor which contained helper methods for different diagnostic cases.", "code": "Class DiagnosticProcessor {\n\tstatic File corruptedPagesFile(Path dirPath, FileIOFactory ioFactory, int grpId, long... pageIds); // Creation and filling of a file with pages that can be corrupted.\n\tvoid onFailure(FailureContext failureCtx); // Print diagnostic info about failure occurred on ignite instance.\n}"}
{"index": 7894, "repo": "commons-jcs3-core-3.1", "des": "This has common attributes used by all auxiliaries.", "code": "Class AbstractAuxiliaryCacheAttributes {\n\tAbstractAuxiliaryCacheAttributes clone(); // Clone object\n\tString getCacheName(); // Gets the cacheName attribute of the AuxiliaryCacheAttributes object\n\tString getEventQueuePoolName(); // Sets the pool name to use.\n\tICacheEventQueue.QueueType getEventQueueType();\n\tString getName(); // Gets the name attribute of the AuxiliaryCacheAttributes object\n\tvoid setCacheName(String name); // Sets the name of the cache, referenced by the appropriate manager.\n\tvoid setEventQueuePoolName(String s); // If you choose a POOLED event queue type, the value of EventQueuePoolName will be used.\n\tvoid setEventQueueType(ICacheEventQueue.QueueType queueType); // SINGLE is the default.\n\tvoid setName(String s); // This is the name of the auxiliary in configuration file.\n}"}
{"index": 6771, "repo": "calcite-core-1.34.0", "des": "Information about an aggregating scope that can only be determined after validation has occurred.", "code": "Class AggregatingSelectScope.Resolved {\n\tboolean isGroupingExpr(SqlNode operand); // Returns whether a given expression is equal to one of the grouping expressions.\n\tboolean isNullable(int i); // Returns whether a field should be nullable due to grouping sets.\n\tint lookupGroupingExpr(SqlNode operand);\n}"}
{"index": 3706, "repo": "kafka-streams-3.5.0", "des": "Encapsulates information about lag, at a store partition replica (active or standby).", "code": "Class LagInfo {\n\tlong currentOffsetPosition(); // Get the current maximum offset on the store partition's changelog topic, that has been successfully written into the store partition's state store.\n\tlong endOffsetPosition(); // Get the end offset position for this store partition's changelog topic on the Kafka brokers.\n\tboolean equals(Object obj);\n\tlong offsetLag(); // Get the measured lag between current and end offset positions, for this store partition replica\n}"}
{"index": 565, "repo": "ignite-core-2.15.0", "des": "Utility to read and write GridCacheVersion instances.", "code": "Class CacheVersionIO {\n\tstatic GridCacheVersion read(ByteBuffer buf, boolean allowNull); // Reads GridCacheVersion instance from the given buffer.\n\tstatic GridCacheVersion read(long pageAddr, boolean allowNull); // Reads GridCacheVersion instance from the given address.\n\tstatic int readSize(ByteBuffer buf, boolean allowNull); // Gets needed buffer size to read the whole version instance.\n\tstatic int readSize(long pageAddr, boolean allowNull); // Gets needed buffer size to read the whole version instance.\n\tstatic int size(GridCacheVersion ver, boolean allowNull);\n\tstatic void write(ByteBuffer buf, GridCacheVersion ver, boolean allowNull);\n\tstatic void write(long addr, GridCacheVersion ver, boolean allowNull);\n}"}
{"index": 984, "repo": "ignite-core-2.15.0", "des": "Facade over GridKernalContext to get information about database entities in terms of JDBC.", "code": "Class JdbcMetadataInfo {\n\tCollection<JdbcColumnMeta> getColumnsMeta(@Nullable ClientListenerProtocolVersion protoVer, String schemaNamePtrn, String tblNamePtrn, String colNamePtrn); // See DatabaseMetaData.getColumns(String, String, String, String) for details.\n\tSortedSet<JdbcIndexMeta> getIndexesMeta(String schemaNamePtrn, String tblNamePtrn); // See DatabaseMetaData.getIndexInfo(String, String, String, boolean, boolean) for details.\n\tCollection<JdbcPrimaryKeyMeta> getPrimaryKeys(String schemaNamePtrn, String tblNamePtrn); // See DatabaseMetaData.getPrimaryKeys(String, String, String) for details.\n\tSortedSet<String> getSchemasMeta(String schemaNamePtrn); // See DatabaseMetaData.getSchemas(String, String) for details.\n\tList<JdbcTableMeta> getTablesMeta(String schemaNamePtrn, String tblNamePtrn, String[] tblTypes); // See DatabaseMetaData.getTables(String, String, String, String[]) for details.\n}"}
{"index": 191, "repo": "commons-collections4-4.4", "des": "A Comparator that will compare nulls to be either lower or higher than other objects.", "code": "Class NullComparator<E> {\n\tint compare(E o1, E o2); // Perform a comparison between two objects.\n\tboolean equals(Object obj); // Determines whether the specified object represents a comparator that is equal to this comparator.\n}"}
{"index": 6803, "repo": "calcite-core-1.34.0", "des": "Holds state for the process of preparing a SQL statement.", "code": "Class CalcitePrepareImpl.CalcitePreparingStmt {\n\tprotected Prepare.PreparedResult createPreparedExplanation(@Nullable RelDataType resultType, RelDataType parameterRowType, @Nullable RelRoot root, SqlExplainFormat format, SqlExplainLevel detailLevel);\n\tprotected SqlValidator createSqlValidator(Prepare.CatalogReader catalogReader);\n\tprotected RelNode decorrelate(SqlToRelConverter sqlToRelConverter, SqlNode query, RelNode rootRel);\n\tRelRoot expandView(RelDataType rowType, String queryString, List<String> schemaPath, @Nullable List<String> viewPath); // Returns a relational expression that is to be substituted for an access to a SQL view.\n\tRelNode flattenTypes(RelNode rootRel, boolean restructure);\n\tprotected List<CalciteSchema.LatticeEntry> getLattices();\n\tprotected List<Prepare.Materialization> getMaterializations();\n\tprotected SqlToRelConverter getSqlToRelConverter(SqlValidator validator, Prepare.CatalogReader catalogReader, SqlToRelConverter.Config config); // Protected method to allow subclasses to override construction of SqlToRelConverter.\n\tprotected SqlValidator getSqlValidator();\n\tprotected Prepare.PreparedResult implement(RelRoot root); // Implements a physical query plan.\n\tprotected void init(Class runtimeContextClass);\n\tPrepare.PreparedResult prepareQueryable(org.apache.calcite.linq4j.Queryable queryable, RelDataType resultType);\n\tPrepare.PreparedResult prepareRel(RelNode rel);\n}"}
{"index": 16101, "repo": "spring-integration-sftp-6.1.2", "des": "Factory for creating SftpSession instances.", "code": "public class DefaultSftpSessionFactory extends Object implements org.springframework.integration.file.remote.session.SessionFactory<org.apache.sshd.sftp.client.SftpClient.DirEntry>, org.springframework.integration.file.remote.session.SharedSessionCapable {\n\tSftpSession getSession();\n\tfinal boolean isSharedSession();\n\tvoid resetSharedSession();\n\tvoid setAllowUnknownKeys(boolean allowUnknownKeys); // When no knownHosts has been provided, set to true to unconditionally allow connecting to an unknown host or when a host's key has changed (see knownHosts).\n\tvoid setHost(String host); // The url of the host you want to connect to.\n\tvoid setHostConfig(org.apache.sshd.client.config.hosts.HostConfigEntry hostConfig); // Provide a HostConfigEntry as an alternative for the user/host/port options.\n\tvoid setKnownHostsResource(org.springframework.core.io.Resource knownHosts); // Specifies a Resource that will be used for a host key repository.\n\tvoid setPassword(String password); // The password to authenticate against the remote host.\n\tvoid setPort(int port); // The port over which the SFTP connection shall be established.\n\tvoid setPrivateKey(org.springframework.core.io.Resource privateKey); // Allows you to set a Resource, which represents the location of the private key used for authenticating against the remote host.\n\tvoid setPrivateKeyPassphrase(String privateKeyPassphrase); // The password for the private key.\n\tvoid setSftpVersionSelector(org.apache.sshd.sftp.client.SftpVersionSelector sftpVersionSelector);\n\tvoid setTimeout(Integer timeout); // The timeout property is used as the socket timeout parameter, as well as the default connection timeout.\n\tvoid setUser(String user); // The remote user to use.\n\tvoid setUserInteraction(org.apache.sshd.client.auth.keyboard.UserInteraction userInteraction); // Provide a UserInteraction which exposes control over dealing with new keys or key changes.\n}"}
{"index": 11886, "repo": "spring-kafka-3.0.9", "des": "A producer factory listener that manages KafkaClientMetrics.", "code": "public class MicrometerProducerListener<K,V> extends Object implements ProducerFactory.Listener<K,V> {\n\tvoid producerAdded(String id, org.apache.kafka.clients.producer.Producer<K,V> producer); // A new producer was created.\n\tvoid producerRemoved(String id, org.apache.kafka.clients.producer.Producer<K,V> producer); // An existing producer was removed.\n}"}
{"index": 9192, "repo": "fontbox-3.0.0-beta1", "des": "This represents a single entry in the codespace range.", "code": "Class CodespaceRange {\n\tint getCodeLength(); // Returns the length of the codes of the codespace.\n\tboolean isFullMatch(byte[] code, int codeLen); // Returns true if the given number of code bytes match this codespace range.\n\tboolean matches(byte[] code); // Returns true if the given code bytes match this codespace range.\n}"}
{"index": 17592, "repo": "spring-ldap-core-3.1.0", "des": "Utility class that helps with reading all attribute values from Active Directory using Incremental Retrieval of Multi-valued Properties.", "code": "public class DefaultIncrementalAttributesMapper extends Object implements IncrementalAttributesMapper<DefaultIncrementalAttributesMapper> {\n\tfinal String[] getAttributesForLookup(); // Get properly formatted attributes for use in the next query.\n\tfinal Attributes getCollectedAttributes(); // Get all collected values for all managed attributes as an Attributes instance.\n\tfinal List<Object> getValues(String attributeName); // Get all of the collected values for the specified attribute.\n\tfinal boolean hasMore(); // Check whether another query iteration is required to get all values for all attributes.\n\tstatic Attributes lookupAttributes(LdapOperations ldapOperations, String dn, String attribute); // Lookup all values for the specified attribute, looping through the results incrementally if necessary.\n\tstatic Attributes lookupAttributes(LdapOperations ldapOperations, String dn, String[] attributes); // Lookup all values for the specified attributes, looping through the results incrementally if necessary.\n\tstatic Attributes lookupAttributes(LdapOperations ldapOperations, Name dn, String attribute); // Lookup all values for the specified attribute, looping through the results incrementally if necessary.\n\tstatic Attributes lookupAttributes(LdapOperations ldapOperations, Name dn, String[] attributes); // Lookup all values for the specified attributes, looping through the results incrementally if necessary.\n\tstatic List<Object> lookupAttributeValues(LdapOperations ldapOperations, String dn, String attribute); // Lookup all values for the specified attribute, looping through the results incrementally if necessary.\n\tstatic List<Object> lookupAttributeValues(LdapOperations ldapOperations, Name dn, String attribute); // Lookup all values for the specified attribute, looping through the results incrementally if necessary.\n\tfinal DefaultIncrementalAttributesMapper mapFromAttributes(Attributes attributes); // Goes through all of the attributes to record their values and figure out whether a new query iteration is needed to get more values.\n}"}
{"index": 14664, "repo": "spring-data-commons-3.1.2", "des": "ReflectionUtils.MethodCallback to find annotations of a given type.", "code": "public class AnnotationDetectionMethodCallback<A extends Annotation> extends Object implements ReflectionUtils.MethodCallback {\n\tvoid doWith(Method method);\n\tA getAnnotation();\n\tMethod getMethod();\n\tMethod getRequiredMethod(); // Returns the method with the configured annotation.\n\tboolean hasFoundAnnotation(); // Returns whether an annotation was found.\n\t<T> T invoke(Object target, Object... args); // Invokes the method using reflection.\n}"}
{"index": 6245, "repo": "jackson-databind-2.15.2", "des": "Placeholder used by virtual properties as placeholder for underlying AnnotatedMember.", "code": "Class VirtualAnnotatedMember {\n\tboolean equals(Object o);\n\tField getAnnotated(); // Method that can be used to find actual JDK element that this instance represents.\n\tint getAnnotationCount();\n\tClass<?> getDeclaringClass(); // Actual physical class in which this member was declared.\n\tMember getMember();\n\tint getModifiers();\n\tString getName();\n\tClass<?> getRawType(); // \"Raw\" type (type-erased class) of the annotated element; definition of what exactly this means depends on sub-class.\n\tJavaType getType(); // Full generic type of the annotated element; definition of what exactly this means depends on sub-class.\n\tObject getValue(Object pojo); // Optional method that can be used to access the value of this member on given object, if this is a supported operation for member type.\n\tvoid setValue(Object pojo, Object value); // Optional method that can be used to assign value of this member on given object, if this is a supported operation for member type.\n\tAnnotated withAnnotations(AnnotationMap fallback); // Fluent factory method that will construct a new instance that uses specified instance annotations instead of currently configured ones.\n}"}
{"index": 14071, "repo": "spring-context-support-6.0.11", "des": "Subclass of AdaptableJobFactory that also supports Spring-style dependency injection on bean properties.", "code": "public class SpringBeanJobFactory extends AdaptableJobFactory implements org.springframework.context.ApplicationContextAware, SchedulerContextAware {\n\tprotected Object createJobInstance(TriggerFiredBundle bundle); // Create the job instance, populating it with property values taken from the scheduler context, job data map and trigger data map.\n\tprotected boolean isEligibleForPropertyPopulation(Object jobObject); // Return whether the given job object is eligible for having its bean properties populated.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setIgnoredUnknownProperties(String... ignoredUnknownProperties); // Specify the unknown properties (not found in the bean) that should be ignored.\n\tvoid setSchedulerContext(SchedulerContext schedulerContext); // Set the SchedulerContext of the current Quartz Scheduler.\n}"}
{"index": 14155, "repo": "wicket-core-10.0.0-M1", "des": "Selects and deselects all Check components under the same CheckGroup as itself.", "code": "public class CheckGroupSelector extends AbstractCheckSelector {\n\tprotected CharSequence getFindCheckboxesFunction(); // Find all checkboxes in the containing form with the same input name as the CheckGroup .\n\tboolean isEnabled(); // Gets whether this component is enabled.\n\tprotected void onBeforeRender(); // Called on all visible components before any component is rendered.\n}"}
{"index": 15044, "repo": "spring-vault-core-3.0.4", "des": "GCP GCE (Google Compute Engine)-based login implementation using GCE's metadata service to create signed JSON Web Token.", "code": "public class GcpComputeAuthentication extends GcpJwtAuthenticationSupport implements ClientAuthentication, AuthenticationStepsFactory {\n\tstatic AuthenticationSteps createAuthenticationSteps(GcpComputeAuthenticationOptions options); // Creates a AuthenticationSteps for GCE authentication given GcpComputeAuthenticationOptions.\n\tAuthenticationSteps getAuthenticationSteps(); // Get the AuthenticationSteps describing an authentication flow.\n\tVaultToken login(); // Return a VaultToken.\n\tprotected String signJwt();\n}"}
{"index": 5018, "repo": "commons-collections-3.2.2", "des": "Converts an iterator into a list iterator by caching the returned entries.", "code": "Class ListIteratorWrapper {\n\tvoid add(Object obj); // Throws UnsupportedOperationException.\n\tboolean hasNext(); // Returns true if there are more elements in the iterator.\n\tboolean hasPrevious(); // Returns true if there are previous elements in the iterator.\n\tObject next(); // Returns the next element from the iterator.\n\tint nextIndex(); // Returns in the index of the next element.\n\tObject previous(); // Returns the the previous element.\n\tint previousIndex(); // Returns the index of the previous element.\n\tvoid remove(); // Throws UnsupportedOperationException.\n\tvoid reset(); // Resets this iterator back to the position at which the iterator was created.\n\tvoid set(Object obj); // Throws UnsupportedOperationException.\n}"}
{"index": 4199, "repo": "jackson-core-2.15.2", "des": "Abstract base class that defines interface for customizing character escaping aspects for String values, for formats that use escaping.", "code": "Class CharacterEscapes {\n\tabstract int[] getEscapeCodesForAscii(); // Method generators can call to get lookup table for determining escape handling for first 128 characters of Unicode (ASCII characters.\n\tabstract SerializableString getEscapeSequence(int ch); // Method generators can call to get lookup table for determining exact escape sequence to use for given character.\n\tstatic int[] standardAsciiEscapesForJSON(); // Helper method that can be used to get a copy of standard JSON escape definitions; this is useful when just wanting to slightly customize definitions.\n}"}
{"index": 9395, "repo": "hadoop-yarn-api-3.3.6", "des": "ReservationAllocationState represents the reservation that is made by a user.", "code": "Class ReservationAllocationState {\n\tabstract long getAcceptanceTime(); // Get the acceptance time of the reservation.\n\tabstract ReservationDefinition getReservationDefinition(); // Get the reservation definition used to make the reservation.\n\tabstract ReservationId getReservationId(); // Get the id of the reservation.\n\tabstract List<ResourceAllocationRequest> getResourceAllocationRequests(); // Get the Resource allocations of the reservation based on the current state of the plan.\n\tabstract String getUser(); // Get the user who made the reservation.\n\tstatic ReservationAllocationState newInstance(long acceptanceTime, String user, List<ResourceAllocationRequest> resourceAllocations, ReservationId reservationId, ReservationDefinition reservationDefinition);\n\tabstract void setAcceptanceTime(long acceptanceTime); // Set the time that the reservation was accepted.\n\tabstract void setReservationDefinition(ReservationDefinition reservationDefinition); // Set the definition of the reservation.\n\tabstract void setReservationId(ReservationId reservationId); // Set the id corresponding to the reservation.\n\tabstract void setResourceAllocationRequests(List<ResourceAllocationRequest> resourceAllocations); // Set the list of resource allocations made for the reservation.\n\tabstract void setUser(String user); // Set the user who made the reservation.\n}"}
{"index": 9208, "repo": "fontbox-3.0.0-beta1", "des": "A TrueType Collection, now more properly known as a \"Font Collection\" as it may contain either TrueType or OpenType fonts.", "code": "Class TrueTypeCollection {\n\tvoid close();\n\tTrueTypeFont getFontByName(String name); // Get a TT font from a collection.\n\tvoid processAllFonts(TrueTypeCollection.TrueTypeFontProcessor trueTypeFontProcessor); // Run the callback for each TT font in the collection.\n}"}
{"index": 16808, "repo": "spring-expression-6.0.11", "des": "Reflection-based MethodResolver used by default in StandardEvaluationContext unless explicit method resolvers have been specified.", "code": "public class ReflectiveMethodResolver extends Object implements MethodResolver {\n\tprotected Method[] getMethods(Class<?> type); // Return the set of methods for this type.\n\tprotected boolean isCandidateForInvocation(Method method, Class<?> targetClass); // Determine whether the given Method is a candidate for method resolution on an instance of the given target class.\n\tvoid registerMethodFilter(Class<?> type, MethodFilter filter); // Register a filter for methods on the given type.\n\tMethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<org.springframework.core.convert.TypeDescriptor> argumentTypes); // Locate a method on a type.\n}"}
{"index": 6314, "repo": "mina-core-3.0.0-M2", "des": "Represents the Key for an attribute-value of an IoSession.", "code": "Class AttributeKey<T> {\n\tstatic <T> AttributeKey<T> createKey(Class<T> attributeType, String attributeName); // Creates a new AttributeKey with the given parameters.\n\tboolean equals(Object obj);\n\tString getName(); // Returns the name of this key.\n\tClass<T> getType(); // Returns the type of this key.\n}"}
{"index": 6996, "repo": "calcite-core-1.34.0", "des": "Allows to build nested code blocks with tracking of current context.", "code": "Interface NestedBlockBuilder {\n\torg.apache.calcite.linq4j.tree.BlockBuilder currentBlock(); // Returns the current code block.\n\tvoid exitBlock(); // Leaves the current code block.\n\torg.apache.calcite.linq4j.tree.BlockBuilder nestBlock(); // Starts nested code block.\n\tvoid nestBlock(org.apache.calcite.linq4j.tree.BlockBuilder block); // Uses given block as the new code context.\n}"}
{"index": 11068, "repo": "spring-shell-core-3.1.2", "des": "Contains all the messages that can be produced during parsing.", "code": "public enum ParserMessage extends Enum<ParserMessage> {\n\tString formatMessage(int position, Object... inserts);\n\tint getCode();\n\tParserMessage.Type getType();\n\tstatic ParserMessage valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ParserMessage[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 8587, "repo": "commons-io-2.13.0", "des": "A BufferedReader that throws UncheckedIOException instead of IOException.", "code": "Class UncheckedFilterInputStream {\n\tint available(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tstatic UncheckedFilterInputStream.Builder builder(); // Constructs a new UncheckedFilterInputStream.Builder.\n\tvoid close(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tint read(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tint read(byte[] b); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tint read(byte[] b, int off, int len); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid reset(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tlong skip(long n); // Calls this method's super and rethrow IOException as UncheckedIOException.\n}"}
{"index": 15780, "repo": "camel-api-4.0.0-RC1", "des": "Represents an object which is aware of HTTP responses.", "code": "public interface HttpResponseAware {\n\tint getHttpResponseCode(); // The HTTP status code\n\tString getHttpResponseStatus(); // The HTTP status line\n\tvoid setHttpResponseCode(int code); // Sets the HTTP status code\n\tvoid setHttpResponseStatus(String status); // Sets the HTTP status line\n}"}
{"index": 698, "repo": "ignite-core-2.15.0", "des": "Synchronization aid to track \"busy\" state of a subsystem that owns it.", "code": "Class GridBusyLock {\n\tvoid block(); // Blocks current thread till all activities left \"busy\" state and prevents them from further entering to \"busy\" state.\n\tboolean blockedByCurrentThread(); // Checks if busy lock was blocked by current thread.\n\tboolean enterBusy(); // Enters \"busy\" state.\n\tvoid leaveBusy(); // Leaves \"busy\" state.\n\tvoid unblock(); // Makes possible for activities entering busy state again.\n}"}
{"index": 14043, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "Custom JavaExec task for ahead-of-time processing of a Spring Boot application's tests.", "code": "@CacheableTask public class ProcessTestAot extends AbstractAot {\n\tvoid exec();\n\tfinal FileCollection getClasspathRoots(); // Returns the classpath roots that should be scanned for test classes to process.\n\tvoid setClasspathRoots(FileCollection classpathRoots); // Sets the classpath roots that should be scanned for test classes to process.\n}"}
{"index": 15590, "repo": "spring-security-core-6.1.2", "des": "An AuthorizationManager that determines if the current user is authorized by evaluating if the Authentication contains any of the specified authorities.", "code": "public final class AuthoritiesAuthorizationManager extends Object implements AuthorizationManager<Collection<String>> {\n\tAuthorityAuthorizationDecision check(Supplier<Authentication> authentication, Collection<String> authorities); // Determines if the current user is authorized by evaluating if the Authentication contains any of specified authorities.\n\tvoid setRoleHierarchy(RoleHierarchy roleHierarchy); // Sets the RoleHierarchy to be used.\n}"}
{"index": 3658, "repo": "hive-serde-4.0.0-alpha-2", "des": "DefaultListObjectInspector works on list data that is stored as a Java List or Java Array object.", "code": "Class StandardListObjectInspector {\n\tObject create(int size); // Create a list with the given size.\n\tObjectInspector.Category getCategory(); // An ObjectInspector must inherit from one of the following interfaces if getCategory() returns: PRIMITIVE: PrimitiveObjectInspector LIST: ListObjectInspector MAP: MapObjectInspector STRUCT: StructObjectInspector.\n\tList<?> getList(Object data); // returns null for data = null.\n\tObject getListElement(Object data, int index); // returns null for null list, out-of-the-range index.\n\tObjectInspector getListElementObjectInspector();\n\tint getListLength(Object data); // returns -1 for data = null.\n\tString getTypeName(); // Returns the name of the data type that is inspected by this ObjectInspector.\n\tObject resize(Object list, int newSize); // Resize the list.\n\tObject set(Object list, int index, Object element); // Set the element at index.\n}"}
{"index": 9942, "repo": "iceberg-api-1.3.0", "des": "For a particular position delete file group, the number of position delete files which are newly created and the number of files which were formerly part of the table but have been rewritten.", "code": "Interface RewritePositionDeleteFiles.FileGroupRewriteResult {\n\tlong addedBytesCount(); // Returns the number of bytes of newly added position delete files in this group.\n\tint addedDeleteFilesCount(); // Returns the count of the added position delete files in this group.\n\tRewritePositionDeleteFiles.FileGroupInfo info(); // Description of this position delete file group.\n\tlong rewrittenBytesCount(); // Returns the number of bytes of rewritten position delete files in this group.\n\tint rewrittenDeleteFilesCount(); // Returns the count of the position delete files that been rewritten in this group.\n}"}
{"index": 6458, "repo": "exoplayer-core-2.9.6", "des": "MediaSource that wraps a source and clips its timeline based on specified start/end positions.", "code": "Class ClippingMediaSource {\n\tMediaPeriod createPeriod(MediaSource.MediaPeriodId id, Allocator allocator, long startPositionUs); // Returns a new MediaPeriod identified by periodId.\n\tprotected long getMediaTimeForChildMediaTime(java.lang.Void id, long mediaTimeMs); // Returns the media time in the composite source corresponding to the specified media time in a child source.\n\tjava.lang.Object getTag(); // Returns the tag set on the media source, or null if none was set.\n\tvoid maybeThrowSourceInfoRefreshError(); // Throws any pending error encountered while loading or refreshing source information.\n\tprotected void onChildSourceInfoRefreshed(java.lang.Void id, MediaSource mediaSource, Timeline timeline, java.lang.Object manifest); // Called when the source info of a child source has been refreshed.\n\tvoid prepareSourceInternal(TransferListener mediaTransferListener); // Starts source preparation.\n\tvoid releasePeriod(MediaPeriod mediaPeriod); // Releases the period.\n\tvoid releaseSourceInternal(); // Releases the source.\n}"}
{"index": 11774, "repo": "bedrock-core-7.0.2", "des": "A NotAvailable is a specialized Deferred that always throw an TemporarilyUnavailableException exception when calling NotAvailable.get().", "code": "public class NotAvailable<T> extends Object implements Deferred<T> {\n\tT get(); // Attempts to obtain the underlying object.\n\tClass<T> getDeferredClass(); // Obtains the Class of the Deferred reference.\n}"}
{"index": 17731, "repo": "spring-web-6.0.11", "des": "Represents an event triggered for a file upload.", "code": "public interface FilePartEvent extends PartEvent {\n\tstatic reactor.core.publisher.Flux<FilePartEvent> create(String partName, String filename, MediaType contentType, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> contents); // Creates a stream of FilePartEvent objects based on the given name, filename(), content-type, and contents.\n\tstatic reactor.core.publisher.Flux<FilePartEvent> create(String partName, String filename, MediaType contentType, reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> contents, Consumer<HttpHeaders> headersConsumer); // Creates a stream of FilePartEvent objects based on the given name, filename(), content-type, and contents.\n\tstatic reactor.core.publisher.Flux<FilePartEvent> create(String name, Path path); // Creates a stream of FilePartEvent objects based on the given name and file path.\n\tstatic reactor.core.publisher.Flux<FilePartEvent> create(String name, Path path, Consumer<HttpHeaders> headersConsumer); // Creates a stream of FilePartEvent objects based on the given name and file path.\n\tstatic reactor.core.publisher.Flux<FilePartEvent> create(String name, org.springframework.core.io.Resource resource); // Creates a stream of FilePartEvent objects based on the given name and resource.\n\tstatic reactor.core.publisher.Flux<FilePartEvent> create(String name, org.springframework.core.io.Resource resource, Consumer<HttpHeaders> headersConsumer); // Creates a stream of FilePartEvent objects based on the given name and resource.\n\tdefault String filename(); // Return the original filename in the client's filesystem.\n}"}
{"index": 9038, "repo": "hbase-server-3.0.0-alpha-4", "des": "A one way stream reader for reading protobuf based WAL file.", "code": "Class ProtobufWALStreamReader {\n\tprotected InputStream getCellCodecInputStream(org.apache.hadoop.fs.FSDataInputStream stream); // Get or create the input stream used by cell decoder.\n\tWAL.Entry next(WAL.Entry reuse); // Read the next entry in WAL, use the given WAL.Entry if not null to hold the data.\n\tprotected void skipTo(long position); // Skip to the given position.\n}"}
{"index": 12220, "repo": "jena-core-4.9.0", "des": "Bind the third arg to the ratio of the first two args.", "code": "public class Quotient extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 18083, "repo": "spring-ws-core-4.0.5", "des": "Exception resolver that allows for mapping exception class names to SOAP Faults.", "code": "public class SoapFaultMappingExceptionResolver extends AbstractSoapFaultDefinitionExceptionResolver {\n\tprotected int getDepth(String exceptionMapping, Exception ex); // Return the depth to the superclass matching.\n\tprotected SoapFaultDefinition getFaultDefinition(Object endpoint, Exception ex); // Template method that returns the SoapFaultDefinition for the given exception.\n\tvoid setExceptionMappings(Properties mappings); // Set the mappings between exception class names and SOAP Faults.\n}"}
{"index": 13584, "repo": "spring-messaging-6.0.11", "des": "MessageCondition that matches by the message type obtained via SimpMessageHeaderAccessor.getMessageType(Map).", "code": "public class SimpMessageTypeMessageCondition extends AbstractMessageCondition<SimpMessageTypeMessageCondition> {\n\tSimpMessageTypeMessageCondition combine(SimpMessageTypeMessageCondition other); // Define the rules for combining this condition with another.\n\tint compareTo(SimpMessageTypeMessageCondition other, Message<?> message); // Compare this condition to another in the context of a specific message.\n\tprotected Collection<?> getContent(); // Return the collection of objects the message condition is composed of (e.g.\n\tSimpMessageTypeMessageCondition getMatchingCondition(Message<?> message); // Check if this condition matches the given Message and returns a potentially new condition with content tailored to the current message.\n\tSimpMessageType getMessageType();\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n}"}
{"index": 12655, "repo": "spring-data-mongodb-4.1.2", "des": "Base class for bucket operations that support output expressions the aggregation framework.", "code": "public abstract class BucketOperationSupport<T extends BucketOperationSupport<T,B>,B extends BucketOperationSupport.OutputBuilder<B,T>> extends Object implements FieldsExposingAggregationOperation {\n\tabstract B andOutput(String fieldName); // Creates a new BucketOperationSupport given fieldName to add an output field to the resulting bucket documents.\n\tabstract B andOutput(AggregationExpression expression); // Creates a new BucketOperationSupport given an AggregationExpression to add an output field to the resulting bucket documents.\n\tprotected T andOutput(BucketOperationSupport.Output output);\n\tB andOutputCount(); // Creates a new BucketOperationSupport given to add a count field to the resulting bucket documents.\n\tabstract BucketOperationSupport.ExpressionBucketOperationBuilderSupport<B,T> andOutputExpression(String expression, Object... params); // Creates a new BucketOperationSupport.ExpressionBucketOperationBuilderSupport given a SpEL expression and optional params to add an output field to the resulting bucket documents.\n\tExposedFields getFields(); // Returns the fields exposed by the AggregationOperation.\n\tprotected abstract T newBucketOperation(BucketOperationSupport.Outputs outputs); // Implementation hook to create a new bucket operation.\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n}"}
{"index": 6447, "repo": "exoplayer-core-2.9.6", "des": "Utility class for efficiently tracking regions of data that are stored in a Cache for a given cache key.", "code": "Class CachedRegionTracker {\n\tint getRegionEndTimeMs(long byteOffset); // When provided with a byte offset, this method locates the cached region within which the offset falls, and returns the approximate end position in milliseconds of that region.\n\tvoid onSpanAdded(Cache cache, CacheSpan span); // Called when a CacheSpan is added to the cache.\n\tvoid onSpanRemoved(Cache cache, CacheSpan span); // Called when a CacheSpan is removed from the cache.\n\tvoid onSpanTouched(Cache cache, CacheSpan oldSpan, CacheSpan newSpan); // Called when an existing CacheSpan is accessed, causing it to be replaced.\n\tvoid release();\n}"}
{"index": 7730, "repo": "cassandra-all-4.1.2", "des": "Class for the names of the keyspace-prefixed elements (e.", "code": "Class QualifiedName {\n\tboolean equals(java.lang.Object o);\n\tjava.lang.String getKeyspace();\n\tjava.lang.String getName();\n\tboolean hasKeyspace(); // Checks if the keyspace is specified.\n\tvoid setKeyspace(java.lang.String ks, boolean keepCase); // Sets the keyspace.\n\tvoid setName(java.lang.String cf, boolean keepCase);\n\tjava.lang.String toCQLString(); // Returns a string representation of the qualified name that is safe to use directly in CQL queries.\n}"}
{"index": 3090, "repo": "tink-1.10.0", "des": "Helper functions used throughout Tink, for Tink internal use only.", "code": "Class Util {\n\tstatic Bytes checkedToBytesFromPrintableAscii(String s); // Converts a string s to a corresponding Bytes object.\n\tstatic Integer getAndroidApiLevel(); // Returns the current Android API level as integer or null if we do not run on Android.\n\tstatic boolean isAndroid(); // Best-effort checks that this is Android.\n\tstatic int randKeyId(); // Returns a positive random int which can be used as a key ID in a keyset.\n\tstatic Bytes toBytesFromPrintableAscii(String s); // Converts a string s to a corresponding Bytes object.\n}"}
{"index": 18726, "repo": "opennlp-tools-2.2.0", "des": "Parser for the Italian NER training files of the Evalita 2007 and 2009 NER shared tasks.", "code": "Class EvalitaNameSampleStream {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tNameSample read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 3506, "repo": "mahout-mr-0.13.0", "des": "Main class defining a Hidden Markov Model.", "code": "Class HmmModel {\n\tvoid assign(HmmModel model); // Assign the content of another HMM model to this one\n\tHmmModel clone(); // Get a copy of this model\n\tMatrix getEmissionMatrix(); // Getter function to get the output state probability matrix\n\tint getHiddenStateID(String name); // Lookup the ID for the given hidden state name\n\tString getHiddenStateName(int id); // Lookup the name for the given hidden state ID\n\tMap<String,Integer> getHiddenStateNames(); // Getter method for the hidden state Names map\n\tVector getInitialProbabilities(); // Getter function to return the vector of initial hidden state probabilities\n\tint getNrOfHiddenStates(); // Getter Method for the number of hidden states\n\tint getNrOfOutputStates(); // Getter Method for the number of output states\n\tint getOutputStateID(String name); // Lookup the ID for the given output state name\n\tString getOutputStateName(int id); // Lookup the name for the given output state id\n\tMap<String,Integer> getOutputStateNames(); // Getter method for the output state Names map\n\tMatrix getTransitionMatrix(); // Getter function to get the hidden state transition matrix\n\tvoid registerHiddenStateNames(Map<String,Integer> stateNames); // Register a map of hidden state Names/state IDs\n\tvoid registerHiddenStateNames(String[] stateNames); // Register an array of hidden state Names.\n\tvoid registerOutputStateNames(Map<String,Integer> stateNames); // Register a map of hidden state Names/state IDs\n\tvoid registerOutputStateNames(String[] stateNames); // Register an array of hidden state Names.\n}"}
{"index": 1149, "repo": "ignite-core-2.15.0", "des": "Visitor who create/rebuild indexes in parallel by partition for a given cache.", "code": "Class SchemaIndexCacheVisitorImpl {\n\tprotected void beforeExecute(); // This method is called before creating or rebuilding indexes.\n\tvoid visit(SchemaIndexCacheVisitorClosure clo); // Visit cache entries and pass them to closure.\n}"}
{"index": 17489, "repo": "spring-integration-redis-6.1.2", "des": "Implementation of MessageHandler which writes Message data into a Redis store identified by a key String.", "code": "public class RedisStoreWritingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler {\n\tString getComponentType();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message); // Will extract the payload from the Message and store it in the collection identified by the key (which may be determined by an expression).\n\tprotected void onInit();\n\tvoid setCollectionType(org.springframework.data.redis.support.collections.RedisCollectionFactoryBean.CollectionType collectionType); // Sets the collection type for this handler as per RedisCollectionFactoryBean.CollectionType.\n\tvoid setExtractPayloadElements(boolean extractPayloadElements); // Sets the flag signifying that if the payload is a \"multivalue\" (i.e., Collection or Map), it should be saved using addAll/putAll semantics.\n\tvoid setKey(String key); // Specifies the key for the Redis store.\n\tvoid setKeyExpression(org.springframework.expression.Expression keyExpression); // Specifies a SpEL Expression to be used to determine the key for the Redis store.\n\tvoid setKeyExpressionString(String keyExpression); // Specifies a SpEL Expression to be used to determine the key for the Redis store.\n\tvoid setMapKeyExpression(org.springframework.expression.Expression mapKeyExpression); // Sets the expression used as the key for Map and Properties entries.\n\tvoid setMapKeyExpressionString(String mapKeyExpression); // Sets the expression used as the key for Map and Properties entries.\n\tvoid setZsetIncrementExpression(org.springframework.expression.Expression zsetIncrementScoreExpression); // Set the expression used as the INCR flag for the ZADD command in case of ZSet collection.\n\tvoid setZsetIncrementExpressionString(String zsetIncrementScoreExpression); // Set the expression used as the INCR flag for the ZADD command in case of ZSet collection.\n}"}
{"index": 363, "repo": "phoenix-core-5.1.3", "des": "Class to access a column value stored in a KeyValue.", "code": "Class KeyValueColumnExpression {\n\t<T> T accept(ExpressionVisitor<T> visitor); // Means of traversing expression tree through visitor.\n\tboolean equals(Object obj);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tboolean evaluateUnsafe(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr);\n\tbyte[] getColumnFamily();\n\tbyte[] getColumnQualifier();\n\tvoid readFields(DataInput input);\n\tvoid write(DataOutput output);\n}"}
{"index": 6456, "repo": "exoplayer-core-2.9.6", "des": "A provider of Chunks for a ChunkSampleStream to load.", "code": "Interface ChunkSource {\n\tlong getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParameters); // Adjusts a seek position given the specified SeekParameters.\n\tvoid getNextChunk(long playbackPositionUs, long loadPositionUs, java.util.List<? extends MediaChunk> queue, ChunkHolder out); // Returns the next chunk to load.\n\tint getPreferredQueueSize(long playbackPositionUs, java.util.List<? extends MediaChunk> queue); // Evaluates whether MediaChunks should be removed from the back of the queue.\n\tvoid maybeThrowError(); // If the source is currently having difficulty providing chunks, then this method throws the underlying error.\n\tvoid onChunkLoadCompleted(Chunk chunk); // Called when the ChunkSampleStream has finished loading a chunk obtained from this source.\n\tboolean onChunkLoadError(Chunk chunk, boolean cancelable, java.lang.Exception e, long blacklistDurationMs); // Called when the ChunkSampleStream encounters an error loading a chunk obtained from this source.\n}"}
{"index": 7594, "repo": "cassandra-all-4.1.2", "des": "Information on deletion of a storage engine object.", "code": "Class DeletionTime {\n\tint compareTo(DeletionTime dt);\n\tint dataSize();\n\tboolean deletes(Cell<?> cell);\n\tboolean deletes(LivenessInfo info);\n\tboolean deletes(long timestamp);\n\tvoid digest(Digest digest);\n\tboolean equals(java.lang.Object o);\n\tboolean isLive(); // Returns whether this DeletionTime is live, that is deletes no columns.\n\tint localDeletionTime(); // The local server timestamp, in seconds since the unix epoch, at which this tombstone was created.\n\tlong markedForDeleteAt(); // A timestamp (typically in microseconds since the unix epoch, although this is not enforced) after which data should be considered deleted.\n\tboolean supersedes(DeletionTime dt);\n\tlong unsharedHeapSize();\n\tboolean validate(); // check if this deletion time is valid - localDeletionTime can never be negative\n}"}
{"index": 13346, "repo": "shiro-core-2.0.0-alpha-2", "des": "Helper class that simplifies JNDI operations.", "code": "public class JndiTemplate extends Object {\n\tvoid bind(String name, Object object); // Bind the given object to the current JNDI context, using the given name.\n\tprotected Context createInitialContext(); // Create a new JNDI initial context.\n\tObject execute(JndiCallback contextCallback); // Execute the given JNDI context callback implementation.\n\tProperties getEnvironment(); // Return the environment for the JNDI InitialContext, or null if none should be used.\n\tObject lookup(String name); // Look up the object with the given name in the current JNDI context.\n\tObject lookup(String name, Class requiredType); // Look up the object with the given name in the current JNDI context.\n\tvoid rebind(String name, Object object); // Rebind the given object to the current JNDI context, using the given name.\n\tvoid setEnvironment(Properties environment); // Set the environment for the JNDI InitialContext.\n\tvoid unbind(String name); // Remove the binding for the given name from the current JNDI context.\n}"}
{"index": 8866, "repo": "hbase-server-3.0.0-alpha-4", "des": "Check periodically to see if a system stop is requested.", "code": "Class CloseChecker {\n\tboolean isSizeLimit(Store store, long bytesWritten); // Check periodically to see if a system stop is requested every written bytes reach size limit.\n\tboolean isTimeLimit(Store store, long now); // Check periodically to see if a system stop is requested every time.\n}"}
{"index": 16232, "repo": "spring-data-cassandra-4.1.2", "des": "CassandraValueProvider to read property values from a UdtValue.", "code": "public class UdtValueProvider extends Object implements CassandraValueProvider {\n\t<T> T getPropertyValue(CassandraPersistentProperty property);\n\tObject getSource(); // Returns whether the underlying source.\n\tboolean hasProperty(CassandraPersistentProperty property); // Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n}"}
{"index": 10828, "repo": "spring-boot-actuator-3.1.1", "des": "Endpoint to expose Quartz Scheduler jobs and triggers.", "code": "@Endpoint(id=\"quartz\") public class QuartzEndpoint extends Object {\n\tQuartzEndpoint.QuartzJobDetailsDescriptor quartzJob(String groupName, String jobName, boolean showUnsanitized); // Return the details of the job identified with the given group name and job name.\n\tQuartzEndpoint.QuartzGroupsDescriptor quartzJobGroups(); // Return the available job names, identified by group name.\n\tQuartzEndpoint.QuartzJobGroupSummaryDescriptor quartzJobGroupSummary(String group); // Return a summary of the jobs group with the specified name or null if no such group exists.\n\tQuartzEndpoint.QuartzDescriptor quartzReport(); // Return the available job and trigger group names.\n\tQuartzEndpoint.QuartzGroupsDescriptor quartzTriggerGroups(); // Return the available trigger names, identified by group name.\n\tQuartzEndpoint.QuartzTriggerGroupSummaryDescriptor quartzTriggerGroupSummary(String group); // Return a summary of the triggers group with the specified name or null if no such group exists.\n}"}
{"index": 1099, "repo": "ignite-core-2.15.0", "des": "Represents asynchronous operation result.", "code": "Interface PlatformAsyncResult {\n\tIgniteFuture future(); // Async operation future.\n\tvoid write(BinaryRawWriterEx writer, Object result); // Async operation result writer method.\n}"}
{"index": 9136, "repo": "hbase-server-3.0.0-alpha-4", "des": "Distributed procedure member's Subprocedure.", "code": "Class Subprocedure {\n\tabstract void acquireBarrier(); // The implementation of this method should gather and hold required resources (locks, disk space, etc) to satisfy the Procedures barrier condition.\n\tVoid call(); // Execute the Subprocedure acquireBarrier() and insideBarrier() methods while keeping some state for other threads to access.\n\tvoid cancel(String msg, Throwable cause); // Method to cancel the Subprocedure by injecting an exception from and external source.\n\tabstract void cleanup(Exception e); // Users should override this method.\n\tString getMemberName();\n\tString getName();\n\tabstract byte[] insideBarrier(); // The implementation of this method should act with the assumption that the barrier condition has been satisfied.\n\tvoid receiveReachedGlobalBarrier(); // Callback for the member rpcs to call when the global barrier has been reached.\n\tvoid waitForLocallyCompleted(); // Waits until the entire procedure has globally completed, or has been aborted.\n}"}
{"index": 4315, "repo": "beam-sdks-java-core-2.49.0", "des": "A Source that reads from compressed files.", "code": "Class CompressedSource<T> {\n\tprotected FileBasedSource<T> createForSubrangeOfFile(MatchResult.Metadata metadata, long start, long end); // Creates a CompressedSource for a subrange of a file.\n\tprotected FileBasedSource.FileBasedReader<T> createSingleFileReader(PipelineOptions options); // Creates a FileBasedReader to read a single file.\n\tstatic <T> CompressedSource<T> from(FileBasedSource<T> sourceDelegate); // Creates a CompressedSource from an underlying FileBasedSource.\n\tCompressedSource.DecompressingChannelFactory getChannelFactory();\n\tCoder<T> getOutputCoder(); // Returns the delegate source's output coder.\n\tprotected boolean isSplittable(); // Determines whether a single file represented by this source is splittable.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tvoid validate(); // Validates that the delegate source is a valid source and that the channel factory is not null.\n\tCompressedSource<T> withCompression(Compression compression); // Like withDecompression(org.apache.beam.sdk.io.CompressedSource.DecompressingChannelFactory) but takes a canonical Compression.\n\tCompressedSource<T> withDecompression(CompressedSource.DecompressingChannelFactory channelFactory); // Return a CompressedSource that is like this one but will decompress its underlying file with the given CompressedSource.DecompressingChannelFactory.\n}"}
{"index": 11757, "repo": "bedrock-core-7.0.2", "des": "A DeferredMBeanProxy is a Deferred for a local proxy to an MBean.", "code": "public class DeferredMBeanProxy<T> extends Object implements Deferred<T> {\n\tT get(); // Attempts to obtain the underlying object.\n\tClass<T> getDeferredClass(); // Obtains the Class of the Deferred reference.\n}"}
{"index": 6634, "repo": "ignite-indexing-2.15.0", "des": "Local system view base class (which uses only local node data).", "code": "Class SqlAbstractLocalSystemView {\n\tprotected SqlSystemViewColumnCondition conditionForColumn(String colName, org.h2.result.SearchRow first, org.h2.result.SearchRow last); // Parse condition for column.\n\tprotected org.h2.result.Row createRow(org.h2.engine.Session ses, Object... data);\n\tprotected int getColumnIndex(String colName); // Gets column index by name.\n\tboolean isDistributed();\n\tprotected static @Nullable String nodeFilter(CacheConfiguration<?,?> ccfg); // Get node's filter string representation.\n\tprotected static @Nullable String toStringSafe(@Nullable Object obj); // Get string representation of an object properly catching all exceptions.\n\tprotected static UUID uuidFromValue(org.h2.value.Value val); // Converts value to UUID safe (suppressing exceptions).\n\tprotected static org.h2.value.Value valueTimestampFromMillis(long millis); // Converts millis to ValueTimestamp\n}"}
{"index": 12615, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $covarianceSamp.", "code": "public static class AccumulatorOperators.CovarianceSamp extends Object {\n\tAccumulatorOperators.CovarianceSamp and(String fieldReference); // Creates new AccumulatorOperators.CovarianceSamp with all previously added arguments appending the given one.\n\tAccumulatorOperators.CovarianceSamp and(AggregationExpression expression); // Creates new AccumulatorOperators.CovarianceSamp with all previously added arguments appending the given one.\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tstatic AccumulatorOperators.CovarianceSamp covarianceSampOf(String fieldReference); // Creates new AccumulatorOperators.CovarianceSamp.\n\tstatic AccumulatorOperators.CovarianceSamp covarianceSampOf(AggregationExpression expression); // Creates new AccumulatorOperators.CovarianceSamp.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 11191, "repo": "wicket-extensions-10.0.0-M1", "des": "A filtered property column that creates a textfield filter component.", "code": "public class ChoiceFilteredPropertyColumn<T,Y,S> extends FilteredPropertyColumn<T,S> {\n\tvoid detach();\n\tprotected boolean enableAutoSubmit(); // Returns true if the constructed choice filter should autosubmit the form when its value is changed.\n\tprotected org.apache.wicket.markup.html.form.IChoiceRenderer<Y> getChoiceRenderer(); // Returns choice renderer that will be used to create the choice filter\n\torg.apache.wicket.Component getFilter(String componentId, FilterForm<?> form); // Returns the component used by user to filter the column.\n\tprotected final org.apache.wicket.model.IModel<? extends List<? extends Y>> getFilterChoices();\n\tprotected org.apache.wicket.model.IModel<Y> getFilterModel(FilterForm<?> form); // Returns the model that will be passed on to the text filter.\n}"}
{"index": 10019, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Template implementation for AppmasterRmOperations wrapping communication using ApplicationMasterProtocol.", "code": "Class AppmasterRmTemplate {\n\tAllocateResponse allocate(AllocateRequest request); // Allocate container.\n\tFinishApplicationMasterResponse finish(FinishApplicationMasterRequest request); // Finish the application master.\n\tprotected InetSocketAddress getRpcAddress(Configuration config); // Gets the InetSocketAddress where this accessor should connect.\n\tRegisterApplicationMasterResponse registerApplicationMaster(String host, Integer rpcPort, String trackUrl); // Register application master.\n}"}
{"index": 581, "repo": "ignite-core-2.15.0", "des": "Checkpoint lock for outer usage which should be used to protect data during writing to memory.", "code": "Class CheckpointTimeoutLock {\n\tboolean checkpointLockIsHeldByThread();\n\tvoid checkpointReadLock(); // Gets the checkpoint read lock.\n\tlong checkpointReadLockTimeout(); // Timeout for checkpoint read lock acquisition.\n\tvoid checkpointReadLockTimeout(long val); // Sets timeout for checkpoint read lock acquisition.\n\tvoid checkpointReadUnlock(); // Releases the checkpoint read lock.\n\tvoid start(); // Prepare the lock to further usage.\n\tvoid stop(); // Forbid to take this lock.\n}"}
{"index": 8577, "repo": "commons-io-2.13.0", "des": "A reader decorator that tags potential exceptions so that the reader that caused the exception can easily be identified.", "code": "Class TaggedReader {\n\tprotected void handleIOException(IOException e); // Tags any IOExceptions thrown, wrapping and re-throwing.\n\tboolean isCauseOf(Throwable exception); // Tests if the given exception was caused by this reader.\n\tvoid throwIfCauseOf(Throwable throwable); // Re-throws the original exception thrown by this reader.\n}"}
{"index": 4258, "repo": "beam-sdks-java-core-2.49.0", "des": "A composite Trigger that fires once after at least one of its sub-triggers have fired.", "code": "Class AfterFirst {\n\tprotected Trigger.OnceTrigger getContinuationTrigger(java.util.List<Trigger> continuationTriggers); // Subclasses should override this to return the Trigger.getContinuationTrigger() of this Trigger.\n\torg.joda.time.Instant getWatermarkThatGuaranteesFiring(BoundedWindow window); // For internal use only; no backwards-compatibility guarantees.\n\tstatic AfterFirst of(java.util.List<Trigger> triggers); // Returns an AfterFirst Trigger with the given subtriggers.\n\tstatic AfterFirst of(Trigger.OnceTrigger... triggers); // Returns an AfterFirst Trigger with the given subtriggers.\n}"}
{"index": 17956, "repo": "spring-web-6.0.11", "des": "The central class for managing asynchronous request processing, mainly intended as an SPI and not typically used directly by application classes.", "code": "public final class WebAsyncManager extends Object {\n\tvoid clearConcurrentResult(); // Clear concurrentResult and concurrentResultContext.\n\tCallableProcessingInterceptor getCallableInterceptor(Object key); // Get the CallableProcessingInterceptor registered under the given key.\n\tObject getConcurrentResult(); // Provides access to the result from concurrent handling.\n\tObject[] getConcurrentResultContext(); // Provides access to additional processing context saved at the start of concurrent handling.\n\tDeferredResultProcessingInterceptor getDeferredResultInterceptor(Object key); // Get the DeferredResultProcessingInterceptor registered under the given key.\n\tboolean hasConcurrentResult(); // Whether a result value exists as a result of concurrent handling.\n\tboolean isConcurrentHandlingStarted(); // Whether the selected handler for the current request chose to handle the request asynchronously.\n\tvoid registerCallableInterceptor(Object key, CallableProcessingInterceptor interceptor); // Register a CallableProcessingInterceptor under the given key.\n\tvoid registerCallableInterceptors(CallableProcessingInterceptor... interceptors); // Register a CallableProcessingInterceptor without a key.\n\tvoid registerDeferredResultInterceptor(Object key, DeferredResultProcessingInterceptor interceptor); // Register a DeferredResultProcessingInterceptor under the given key.\n\tvoid registerDeferredResultInterceptors(DeferredResultProcessingInterceptor... interceptors); // Register one or more DeferredResultProcessingInterceptors without a specified key.\n\tvoid setAsyncWebRequest(AsyncWebRequest asyncWebRequest); // Configure the AsyncWebRequest to use.\n\tvoid setTaskExecutor(org.springframework.core.task.AsyncTaskExecutor taskExecutor); // Configure an AsyncTaskExecutor for use with concurrent processing via startCallableProcessing(Callable, Object...).\n\tvoid startCallableProcessing(Callable<?> callable, Object... processingContext); // Start concurrent request processing and execute the given task with an AsyncTaskExecutor.\n\tvoid startCallableProcessing(WebAsyncTask<?> webAsyncTask, Object... processingContext); // Use the given WebAsyncTask to configure the task executor as well as the timeout value of the AsyncWebRequest before delegating to startCallableProcessing(Callable, Object...).\n\tvoid startDeferredResultProcessing(DeferredResult<?> deferredResult, Object... processingContext); // Start concurrent request processing and initialize the given DeferredResult with a DeferredResult.DeferredResultHandler that saves the result and dispatches the request to resume processing of that result.\n}"}
{"index": 14570, "repo": "spring-security-web-6.1.2", "des": "Stores the SecurityContext on a ServletRequest.setAttribute(String, Object) so that it can be restored when different dispatch types occur.", "code": "public final class RequestAttributeSecurityContextRepository extends Object implements SecurityContextRepository {\n\tboolean containsContext(jakarta.servlet.http.HttpServletRequest request); // Allows the repository to be queried as to whether it contains a security context for the current request.\n\torg.springframework.security.core.context.SecurityContext loadContext(HttpRequestResponseHolder requestResponseHolder); // Obtains the security context for the supplied request.\n\torg.springframework.security.core.context.DeferredSecurityContext loadDeferredContext(jakarta.servlet.http.HttpServletRequest request); // Defers loading the SecurityContext using the HttpServletRequest until it is needed by the application.\n\tvoid saveContext(org.springframework.security.core.context.SecurityContext context, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Stores the security context on completion of a request.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 15309, "repo": "spring-boot-3.1.1", "des": "Represents a single callback that can be invoked in a lambda safe way.", "code": "public static final class LambdaSafe.Callback<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callback<C,A>> {\n\tvoid invoke(Consumer<C> invoker); // Invoke the callback instance where the callback method returns void.\n\t<R> LambdaSafe.InvocationResult<R> invokeAnd(Function<C,R> invoker); // Invoke the callback instance where the callback method returns a result.\n}"}
{"index": 39, "repo": "connect-api-3.5.0", "des": "SinkTask is a Task that takes records loaded from Kafka and sends them to another system.", "code": "Class SinkTask {\n\tvoid close(Collection<org.apache.kafka.common.TopicPartition> partitions); // The SinkTask uses this method to close writers for partitions that are no longer assigned to the SinkTask.\n\tvoid flush(Map<org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata> currentOffsets); // Flush all records that have been put(Collection) for the specified topic-partitions.\n\tvoid initialize(SinkTaskContext context); // Initialize the context of this task.\n\tvoid open(Collection<org.apache.kafka.common.TopicPartition> partitions); // The SinkTask uses this method to create writers for newly assigned partitions in case of partition rebalance.\n\tMap<org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata> preCommit(Map<org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata> currentOffsets); // Pre-commit hook invoked prior to an offset commit.\n\tabstract void put(Collection<SinkRecord> records); // Put the records in the sink.\n\tabstract void start(Map<String,String> props); // Start the Task.\n\tabstract void stop(); // Perform any cleanup to stop this task.\n}"}
{"index": 295, "repo": "phoenix-core-5.1.3", "des": "Base class for Aggregator implementations.", "code": "Class BaseAggregator {\n\t<T> T accept(ExpressionVisitor<T> visitor); // Means of traversing expression tree through visitor.\n\tint getSize(); // Get the size in bytes\n\tboolean isNullable();\n\tboolean trackSize(); // Determines whether or not we should track the heap size as this aggregator is executing on the server side.\n}"}
{"index": 9027, "repo": "hbase-server-3.0.0-alpha-4", "des": "Provides read-only access to the Regions presently online on the current RegionServer.", "code": "Interface OnlineRegions {\n\tRegion getRegion(String encodedRegionName); // Return Region instance.\n\tList<? extends Region> getRegions(); // Get all online regions in this RS.\n\tList<? extends Region> getRegions(TableName tableName); // Get all online regions of a table in this RS.\n}"}
{"index": 10869, "repo": "spring-data-redis-3.1.2", "des": "ClusterCommandExecutor takes care of running commands across the known cluster nodes.", "code": "public class ClusterCommandExecutor extends Object implements DisposableBean {\n\tvoid destroy();\n\t<S, T> ClusterCommandExecutor.MultiNodeResult<T> executeCommandAsyncOnNodes(ClusterCommandExecutor.ClusterCommandCallback<S,T> callback, Iterable<RedisClusterNode> nodes);\n\t<S, T> ClusterCommandExecutor.MultiNodeResult<T> executeCommandOnAllNodes(ClusterCommandExecutor.ClusterCommandCallback<S,T> cmd); // Run ClusterCommandExecutor.ClusterCommandCallback on all reachable master nodes.\n\t<T> ClusterCommandExecutor.NodeResult<T> executeCommandOnArbitraryNode(ClusterCommandExecutor.ClusterCommandCallback<?,T> cmd); // Run ClusterCommandExecutor.ClusterCommandCallback on a random node.\n\t<S, T> ClusterCommandExecutor.NodeResult<T> executeCommandOnSingleNode(ClusterCommandExecutor.ClusterCommandCallback<S,T> cmd, RedisClusterNode node); // Run ClusterCommandExecutor.ClusterCommandCallback on given RedisClusterNode.\n\t<S, T> ClusterCommandExecutor.MultiNodeResult<T> executeMultiKeyCommand(ClusterCommandExecutor.MultiKeyClusterCommandCallback<S,T> cmd, Iterable<byte[]> keys); // Run ClusterCommandExecutor.MultiKeyClusterCommandCallback with on a curated set of nodes serving one or more keys.\n\tvoid setMaxRedirects(int maxRedirects); // Set the maximum number of redirects to follow on MOVED or ASK.\n}"}
{"index": 8381, "repo": "hadoop-aws-3.3.6", "des": "Base class for implementing IOStatistics sources in the S3 module.", "code": "Class AbstractS3AStatisticsSource {\n\torg.apache.hadoop.fs.statistics.impl.IOStatisticsStore getIOStatistics();\n\tlong incCounter(String name); // Increment a named counter by 1.\n\tlong incCounter(String name, long value); // DefaultS3ClientFactoryDefaultS3ClientFactory Increment a named counter by 1.\n\tlong incGauge(String name);\n\tlong incGauge(String name, long v);\n\tLong lookupCounterValue(String name);\n\tLong lookupGaugeValue(String name);\n\tprotected void setIOStatistics(org.apache.hadoop.fs.statistics.impl.IOStatisticsStore statistics); // Setter.\n\torg.apache.hadoop.fs.statistics.DurationTracker trackDuration(String key, long count);\n}"}
{"index": 16288, "repo": "spring-r2dbc-6.0.11", "des": "Used to set up a database during initialization and clean up a database during destruction.", "code": "public class ConnectionFactoryInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet(); // Use the database populator to set up the database.\n\tvoid destroy(); // Use the database cleaner to clean up the database.\n\tvoid setConnectionFactory(ConnectionFactory connectionFactory); // The ConnectionFactory for the database to populate when this component is initialized and to clean up when this component is shut down.\n\tvoid setDatabaseCleaner(DatabasePopulator databaseCleaner); // Set the DatabasePopulator to execute during the bean destruction phase, cleaning up the database and leaving it in a known state for others.\n\tvoid setDatabasePopulator(DatabasePopulator databasePopulator); // Set the DatabasePopulator to execute during the bean initialization phase.\n\tvoid setEnabled(boolean enabled); // Flag to explicitly enable or disable the database populator and database cleaner.\n}"}
{"index": 8837, "repo": "hbase-server-3.0.0-alpha-4", "des": "In-memory Queue service provider for Balancer Rejection events.", "code": "Class BalancerRejectionQueueService {\n\tboolean clearNamedQueue(); // Cleans up queues maintained by services.\n\tvoid consumeEventFromDisruptor(NamedQueuePayload namedQueuePayload); // This implementation is generic for consuming records from LMAX disruptor and inserts records to EvictingQueue which is maintained by each ringbuffer provider.\n\tNamedQueuePayload.NamedQueueEvent getEvent(); // Retrieve event type for NamedQueueService implementation.\n\tNamedQueueGetResponse getNamedQueueRecords(NamedQueueGetRequest request); // Retrieve in memory queue records from ringbuffer\n\tvoid persistAll(Connection connection); // Add all in memory queue records to system table.\n}"}
{"index": 6253, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "An AmqpPollableMessageChannelSpec for a message-driven PointToPointSubscribableAmqpChannel.", "code": "Class AmqpMessageChannelSpec<S extends AmqpMessageChannelSpec<S>> {\n\tS acknowledgeMode(org.springframework.amqp.core.AcknowledgeMode acknowledgeMode);\n\tS advice(org.aopalliance.aop.Advice... advice);\n\tS autoStartup(boolean autoStartup);\n\tS concurrentConsumers(int concurrentConsumers);\n\tprotected org.springframework.integration.amqp.channel.AbstractAmqpChannel doGet();\n\tS errorHandler(org.springframework.util.ErrorHandler errorHandler);\n\tS exposeListenerChannel(boolean exposeListenerChannel);\n\tS maxSubscribers(int maxSubscribers);\n\tS phase(int phase);\n\tS prefetchCount(int prefetchCount);\n\tS receiveTimeout(long receiveTimeout);\n\tS recoveryInterval(long recoveryInterval);\n\tS shutdownTimeout(long shutdownTimeout);\n\tS taskExecutor(java.util.concurrent.Executor taskExecutor); // Configure an Executor used to invoke the message listener.\n\tS transactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute transactionAttribute); // Configure a TransactionAttribute to be used with the transactionManager(PlatformTransactionManager).\n\tS transactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Configure a PlatformTransactionManager; used to synchronize the rabbit transaction with some other transaction(s).\n\tS txSize(int txSize); // Configure the txSize.\n}"}
{"index": 2071, "repo": "hive-exec-4.0.0-alpha-2", "des": "GenericUDAFDateStatsEvaluator High/low value will be saved in stats DB as long value representing days since epoch.", "code": "Class GenericUDAFComputeStats.GenericUDAFDateStatsEvaluator {\n\tGenericUDAFEvaluator.AggregationBuffer getNewAggregationBuffer(); // Get a new aggregation object.\n\tprotected DateObjectInspector getValueObjectInspector();\n\tprotected DateObjectInspector getValueObjectInspector(PrimitiveTypeInfo typeInfo);\n\tvoid reset(GenericUDAFEvaluator.AggregationBuffer agg); // Reset the aggregation.\n}"}
{"index": 2181, "repo": "hive-exec-4.0.0-alpha-2", "des": "Covers utility functions that are used by LLAP code and depend on Hive constructs e.", "code": "Class LlapHiveUtils {\n\tstatic Object createFileIdUsingFS(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path, org.apache.hadoop.conf.Configuration daemonConf); // Determines the fileID for the given path using the FileSystem type provided while considering daemon configuration.\n\tstatic MapWork findMapWork(org.apache.hadoop.mapred.JobConf job); // Returns MapWork based what is serialized in the JobConf instance provided.\n\tstatic CacheTag getDbAndTableNameForMetrics(org.apache.hadoop.fs.Path path, boolean includeParts, PartitionDesc part);\n\tstatic int getSchemaHash(PartitionDesc part);\n\tstatic boolean isLlapMode(org.apache.hadoop.conf.Configuration conf);\n\tstatic PartitionDesc partitionDescForPath(org.apache.hadoop.fs.Path path, Map<org.apache.hadoop.fs.Path,PartitionDesc> partitionDescMap); // Takes a Path and looks up the PartitionDesc instance associated with it in a map of Path->PartitionDesc entries.\n\tstatic void throwIfCacheOnlyRead(boolean isCacheOnlyRead);\n}"}
{"index": 2351, "repo": "commons-geometry-euclidean-1.0", "des": "Class used to construct Bounds3D instances.", "code": "Class Bounds3D.Builder {\n\tBounds3D.Builder add(Bounds3D bounds); // Add the min and max points from the given bounds to this instance.\n\tBounds3D.Builder add(Vector3D pt); // Add a point to this instance.\n\tBounds3D.Builder addAll(Iterable<? extends Vector3D> pts); // Add a collection of points to this instance.\n\tBounds3D build(); // Create a new Bounds3D instance from the values in this builder.\n\tboolean hasBounds(); // Return true if this builder contains valid min and max coordinate values.\n}"}
{"index": 13853, "repo": "spring-webflux-6.0.11", "des": "Extension of BodyInserters.FormInserter that allows for adding asynchronous parts.", "code": "public static interface BodyInserters.MultipartInserter extends BodyInserters.FormInserter<Object> {\n\t<T, P extends Publisher<T>>BodyInserters.MultipartInserter withPublisher(String name, P publisher, Class<T> elementClass); // Add an asynchronous part with Publisher-based content.\n\t<T, P extends Publisher<T>>BodyInserters.MultipartInserter withPublisher(String name, P publisher, org.springframework.core.ParameterizedTypeReference<T> typeReference); // Variant of withPublisher(String, Publisher, Class) that accepts a ParameterizedTypeReference for the element type, which allows specifying generic type information.\n}"}
{"index": 4072, "repo": "camel-core-3.0.0-RC1", "des": "Any23 data format is used for parsing data to RDF.", "code": "Class Any23DataFormat {\n\tString getBaseURI();\n\tMap<String,String> getConfiguration();\n\tList<String> getExtractors();\n\tAny23Type getOutputFormat();\n\tvoid setBaseURI(String baseURI); // The URI to use as base for building RDF entities if only relative paths are provided.\n\tvoid setConfiguration(Map<String,String> configurations); // Configurations for Apache Any23 as key-value pairs in order to customize the extraction process.\n\tvoid setExtractors(List<String> extractors); // List of Any23 extractors to be used in the unmarshal operation.\n\tvoid setOutputFormat(Any23Type outputFormat); // What RDF syntax to unmarshal as, can be: NTRIPLES, TURTLE, NQUADS, RDFXML, JSONLD, RDFJSON, RDF4JMODEL.\n}"}
{"index": 13687, "repo": "spring-webmvc-6.0.11", "des": "A ResourceTransformer that checks a Cache to see if a previously transformed resource exists in the cache and returns it if found, and otherwise delegates to the resolver chain and saves the result in the cache.", "code": "public class CachingResourceTransformer extends Object implements ResourceTransformer {\n\torg.springframework.cache.Cache getCache(); // Return the configured Cache.\n\torg.springframework.core.io.Resource transform(HttpServletRequest request, org.springframework.core.io.Resource resource, ResourceTransformerChain transformerChain); // Transform the given resource.\n}"}
{"index": 9893, "repo": "iceberg-api-1.3.0", "des": "Generalized Counter interface for creating telemetry-related instances when counting events.", "code": "Interface Counter {\n\tvoid increment(); // Increment the counter by 1.\n\tdefault void increment(int amount); // Increment the counter by the provided amount.\n\tvoid increment(long amount); // Increment the counter by the provided amount.\n\tdefault boolean isNoop(); // Determines whether this counter is a NOOP counter.\n\tdefault MetricsContext.Unit unit(); // The unit of the counter.\n\tlong value(); // Reports the current count.\n}"}
{"index": 6678, "repo": "lucene-analyzers-common-8.11.2", "des": "Abstract parent class for analysis factories that accept a stopwords file as input.", "code": "Class AbstractWordsFileFilterFactory {\n\tprotected abstract CharArraySet createDefaultWords(); // Default word set implementation.\n\tString getFormat();\n\tString getWordFiles();\n\tCharArraySet getWords();\n\tvoid inform(ResourceLoader loader); // Initialize the set of stopwords provided via ResourceLoader, or using defaults.\n\tboolean isIgnoreCase();\n}"}
{"index": 4361, "repo": "beam-sdks-java-core-2.49.0", "des": "A coder for FailsafeValueInSingleWindow.", "code": "Class FailsafeValueInSingleWindow.Coder<T,ErrorT> {\n\tFailsafeValueInSingleWindow<T,ErrorT> decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tFailsafeValueInSingleWindow<T,ErrorT> decode(java.io.InputStream inStream, Coder.Context context); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(FailsafeValueInSingleWindow<T,ErrorT> windowedElem, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tvoid encode(FailsafeValueInSingleWindow<T,ErrorT> windowedElem, java.io.OutputStream outStream, Coder.Context context); // Encodes the given value of type T onto the given output stream in the given context.\n\tjava.util.List<? extends Coder<?>> getCoderArguments(); // If this is a Coder for a parameterized type, returns the list of Coders being used for each of the parameters in the same order they appear within the parameterized type's type signature.\n\tjava.util.List<? extends Coder<?>> getComponents(); // Returns the list of Coders that are components of this Coder.\n\tstatic <T,ErrorT> FailsafeValueInSingleWindow.Coder<T,ErrorT> of(Coder<T> valueCoder, Coder<ErrorT> failsafeValueCoder, Coder<? extends BoundedWindow> windowCoder);\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 17462, "repo": "spring-security-config-6.1.2", "des": "An AbstractHttpConfigurer for SAML 2.0 Metadata.", "code": "public class Saml2MetadataConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<Saml2LogoutConfigurer<H>,H> {\n\tH and(); // Return the SecurityBuilder when done using the SecurityConfigurer.\n\tvoid configure(H http); // Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tSaml2MetadataConfigurer<H> metadataResponseResolver(org.springframework.security.saml2.provider.service.metadata.Saml2MetadataResponseResolver metadataResponseResolver); // Use this Saml2MetadataResponseResolver to parse the request and respond with SAML 2.0 metadata.\n\tSaml2MetadataConfigurer<H> metadataUrl(String metadataUrl); // Use this endpoint to request relying party metadata.\n}"}
{"index": 4958, "repo": "commons-collections-3.2.2", "des": "Decorates another Buffer to make get() and remove() block when the Buffer is empty.", "code": "Class BlockingBuffer {\n\tboolean add(Object o);\n\tboolean addAll(Collection c);\n\tstatic Buffer decorate(Buffer buffer); // Factory method to create a blocking buffer.\n\tstatic Buffer decorate(Buffer buffer, long timeoutMillis); // Factory method to create a blocking buffer with a timeout value.\n\tObject get(); // Gets the next value from the buffer, waiting until an object is added if the buffer is empty.\n\tObject get(long timeout); // Gets the next value from the buffer, waiting until an object is added for up to the specified timeout value if the buffer is empty.\n\tObject remove(); // Removes the next value from the buffer, waiting until an object is added if the buffer is empty.\n\tObject remove(long timeout); // Removes the next value from the buffer, waiting until an object is added for up to the specified timeout value if the buffer is empty.\n}"}
{"index": 14633, "repo": "spring-cloud-stream-4.0.0", "des": "MessageChannelConfigurer that composes all the message channel configurers.", "code": "public class CompositeMessageChannelConfigurer extends Object implements MessageChannelAndSourceConfigurer {\n\tvoid configureInputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName); // Configure the given input message channel.\n\tvoid configureOutputChannel(org.springframework.messaging.MessageChannel messageChannel, String channelName); // Configure the given output message channel.\n\tvoid configurePolledMessageSource(PollableMessageSource binding, String name); // Configure the provided message source binding.\n}"}
{"index": 3041, "repo": "tink-1.10.0", "des": "This key manager generates new KmsEnvelopeAeadKey keys and produces new instances of KmsEnvelopeAead.", "code": "Class KmsEnvelopeAeadKeyManager {\n\tstatic KeyTemplate createKeyTemplate(String kekUri, KeyTemplate dekTemplate); // Returns a new KeyTemplate that can generate a KmsEnvelopeAeadKey whose key encrypting key (KEK) is pointing to kekUri and DEK template is dekTemplate.\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<KmsEnvelopeAeadKeyFormat,KmsEnvelopeAeadKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tKmsEnvelopeAeadKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(KmsEnvelopeAeadKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 491, "repo": "ignite-core-2.15.0", "des": "Reducer which always returns true from IgniteReducer.", "code": "Class AlwaysTrueReducer<T> {\n\tboolean collect(T e); // Collects given value.\n\tT reduce(); // Reduces collected values into one.\n}"}
{"index": 3721, "repo": "kafka-streams-3.5.0", "des": "A data class representing an incoming record for processing in a Processor or a record to forward to downstream processors via ProcessorContext.", "code": "Class Record<K,V> {\n\tboolean equals(Object o);\n\torg.apache.kafka.common.header.Headers headers(); // The headers of the record.\n\tK key(); // The key of the record.\n\tlong timestamp(); // The timestamp of the record.\n\tV value(); // The value of the record.\n\tRecord<K,V> withHeaders(org.apache.kafka.common.header.Headers headers); // A convenient way to produce a new record if you only need to change the headers.\n\t<NewK> Record<NewK,V> withKey(NewK key); // A convenient way to produce a new record if you only need to change the key.\n\tRecord<K,V> withTimestamp(long timestamp); // A convenient way to produce a new record if you only need to change the timestamp.\n\t<NewV> Record<K,NewV> withValue(NewV value); // A convenient way to produce a new record if you only need to change the value.\n}"}
{"index": 7059, "repo": "calcite-core-1.34.0", "des": "RelMdCollation supplies a default implementation of RelMetadataQuery.", "code": "Class RelMdDistribution {\n\tstatic RelDistribution calc(RelMetadataQuery mq, RelNode input, RexProgram program); // Helper method to determine a Calc's distribution.\n\tRelDistribution distribution(BiRel rel, RelMetadataQuery mq);\n\tRelDistribution distribution(Exchange exchange, RelMetadataQuery mq);\n\tRelDistribution distribution(Project project, RelMetadataQuery mq);\n\tRelDistribution distribution(RelNode rel, RelMetadataQuery mq); // Fallback method to deduce distribution for any relational expression not handled by a more specific method.\n\tRelDistribution distribution(SetOp rel, RelMetadataQuery mq);\n\tRelDistribution distribution(SingleRel rel, RelMetadataQuery mq);\n\tRelDistribution distribution(TableModify rel, RelMetadataQuery mq);\n\t@Nullable RelDistribution distribution(TableScan scan, RelMetadataQuery mq);\n\tRelDistribution distribution(Values values, RelMetadataQuery mq);\n\tstatic RelDistribution exchange(RelDistribution distribution); // Helper method to determine an Exchange's or SortExchange's distribution.\n\tstatic RelDistribution filter(RelMetadataQuery mq, RelNode input); // Helper method to determine a Filter's distribution.\n\tMetadataDef<BuiltInMetadata.Distribution> getDef();\n\tstatic RelDistribution limit(RelMetadataQuery mq, RelNode input); // Helper method to determine a limit's distribution.\n\tstatic RelDistribution project(RelMetadataQuery mq, RelNode input, List<? extends RexNode> projects); // Helper method to determine a Project's distribution.\n\tstatic RelDistribution snapshot(RelMetadataQuery mq, RelNode input); // Helper method to determine a Snapshot's distribution.\n\tstatic RelDistribution sort(RelMetadataQuery mq, RelNode input); // Helper method to determine a Sort's distribution.\n\tstatic @Nullable RelDistribution table(RelOptTable table); // Helper method to determine a TableScan's distribution.\n\tstatic RelDistribution values(RelDataType rowType, com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<RexLiteral>> tuples); // Helper method to determine a Values's distribution.\n}"}
{"index": 15422, "repo": "pulsar-client-api-3.0.0", "des": "An interface represents a message with schema.", "code": "@Public @Stable public interface GenericRecord extends GenericObject {\n\tObject getField(String fieldName); // Retrieve the value of the provided fieldName.\n\tdefault Object getField(Field field); // Retrieve the value of the provided field.\n\tList<Field> getFields(); // Returns the list of fields associated with the record.\n\tdefault Object getNativeObject(); // Return the internal native representation of the Record, like a AVRO GenericRecord.\n\tdefault SchemaType getSchemaType(); // Return the schema tyoe.\n\tbyte[] getSchemaVersion(); // Return schema version.\n}"}
{"index": 2987, "repo": "tink-1.10.0", "des": "Defines the KeyPair consisting of a private key and its corresponding public key.", "code": "Class Ed25519Sign.KeyPair {\n\tbyte[] getPrivateKey();\n\tbyte[] getPublicKey();\n\tstatic Ed25519Sign.KeyPair newKeyPair(); // Returns a new KeyPair.\n\tstatic Ed25519Sign.KeyPair newKeyPairFromSeed(byte[] secretSeed); // Returns a new KeyPair generated from a seed.\n}"}
{"index": 18346, "repo": "opencms-core-15.0", "des": "The entity HTML representation including validation data.", "code": "Class CmsEntityHtml {\n\tjava.lang.String getHtmlContent(); // Returns the HTML representation.\n\tCmsValidationResult getValidationResult(); // Returns the validation result.\n}"}
{"index": 14790, "repo": "spring-data-commons-3.1.2", "des": "NamedQueries implementation backed by a Properties instance.", "code": "public class PropertiesBasedNamedQueries extends Object implements NamedQueries {\n\tString getQuery(String queryName); // Returns the named query with the given name.\n\tboolean hasQuery(String queryName); // Returns whether the map contains a named query for the given name.\n}"}
{"index": 302, "repo": "phoenix-core-5.1.3", "des": "Class encapsulating the CEIL operation on a PDecimal.", "code": "Class CeilDecimalExpression {\n\tstatic Expression create(Expression expr); // Creates a CeilDecimalExpression with a default scale of 0 used for rounding.\n\tstatic Expression create(Expression expr, int scale); // Creates a CeilDecimalExpression with rounding scale given by @param scale.\n\tstatic Expression create(List<Expression> exprs);\n\tprotected KeyRange getInputRangeProducing(BigDecimal result); // Finds the Decimal KeyRange that will produce the given result when fed into this rounding expression.\n\tString getName();\n\tprotected RoundingMode getRoundingMode();\n}"}
{"index": 1324, "repo": "ignite-core-2.15.0", "des": "Dispatcher of workers' progress which allows us to understand if worker freezes.", "code": "Interface WorkProgressDispatcher {\n\tvoid blockingSectionBegin(); // Protects the worker from timeout penalties if subsequent instructions in the calling thread does not update heartbeat timestamp timely, e.g. due to blocking operations, up to the nearest blockingSectionEnd() call.\n\tvoid blockingSectionEnd(); // Closes the protection section previously opened by blockingSectionBegin().\n\tlong heartbeatTs(); // Last heatbeat timestamp.\n\tvoid updateHeartbeat(); // Notifying dispatcher that work is in progress and thread didn't freeze.\n}"}
{"index": 3939, "repo": "hudi-client-0.6.0", "des": "Lazy Iterable, that writes a stream of HoodieRecords sorted by the partitionPath, into new files.", "code": "Class LazyInsertIterable<T extends HoodieRecordPayload> {\n\tprotected List<WriteStatus> computeNext(); // Block computation to be overwritten by sub classes.\n\tprotected void end(); // Called once, after all elements are processed.\n\tprotected CopyOnWriteInsertHandler getInsertHandler();\n\tprotected void start(); // Called once, before any elements are processed.\n}"}
{"index": 6798, "repo": "calcite-core-1.34.0", "des": "Calc is an abstract base class for implementations of LogicalCalc.", "code": "Class Calc {\n\tRelNode accept(RexShuttle shuttle); // Accepts a visit from a shuttle.\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tboolean containsOver(); // Returns whether this Calc contains any windowed-aggregate functions.\n\tCalc copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tabstract Calc copy(RelTraitSet traitSet, RelNode child, RexProgram program); // Creates a copy of this Calc.\n\tdouble estimateRowCount(RelMetadataQuery mq); // Returns an estimate of the number of rows this relational expression will return.\n\tRelWriter explainTerms(RelWriter pw); // Describes the inputs and attributes of this relational expression.\n\tcom.google.common.collect.ImmutableList<RelHint> getHints(); // Returns the hints of this relational expressions as an immutable list.\n\tRexProgram getProgram();\n\tboolean isValid(Litmus litmus, @Nullable RelNode.Context context); // Returns whether this relational expression is valid.\n}"}
{"index": 2755, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "A table split corresponds to a key range [low, high).", "code": "Class TableSplit {\n\tint compareTo(TableSplit o);\n\tboolean equals(Object o);\n\tbyte[] getEndRow(); // Returns end row key\n\tlong getLength();\n\tString[] getLocations();\n\tString getRegionLocation(); // Returns the region's hostname\n\tbyte[] getStartRow(); // Returns starting row key\n\tTableName getTable(); // Returns table name\n\tbyte[] getTableName(); // Returns table name\n\tvoid readFields(DataInput in);\n\tvoid write(DataOutput out);\n}"}
{"index": 14352, "repo": "wicket-core-10.0.0-M1", "des": "A behavior that updates the hosting FormComponent's model via Ajax when value of the component is changed.", "code": "public abstract class OnChangeAjaxBehavior extends AjaxFormComponentUpdatingBehavior {\n\tstatic OnChangeAjaxBehavior onChange(org.danekja.java.util.function.serializable.SerializableConsumer<AjaxRequestTarget> onChange); // Creates an OnChangeAjaxBehavior based on lambda expressions\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes); // Gives a chance to the specializations to modify the attributes.\n}"}
{"index": 10955, "repo": "spring-data-redis-3.1.2", "des": "Builder for creating new RedisClusterNode.", "code": "public static class RedisClusterNode.RedisClusterNodeBuilder extends RedisNode.RedisNodeBuilder {\n\tRedisClusterNode build(); // Get the RedisNode.\n\tRedisClusterNode.RedisClusterNodeBuilder linkState(RedisClusterNode.LinkState linkState); // Set RedisClusterNode.LinkState.\n\tRedisClusterNode.RedisClusterNodeBuilder listeningAt(String host, int port); // Set host and port of server.\n\tRedisClusterNode.RedisClusterNodeBuilder promotedAs(RedisNode.NodeType nodeType); // Set server role.\n\tRedisClusterNode.RedisClusterNodeBuilder replicaOf(String masterId); // Set the id of the master node.\n\tRedisClusterNode.RedisClusterNodeBuilder serving(RedisClusterNode.SlotRange range); // Set RedisClusterNode.SlotRange.\n\tRedisClusterNode.RedisClusterNodeBuilder withFlags(Set<RedisClusterNode.Flag> flags); // Set flags for node.\n\tRedisClusterNode.RedisClusterNodeBuilder withId(String id); // Set id of server.\n\tRedisClusterNode.RedisClusterNodeBuilder withName(String name); // Define node name.\n}"}
{"index": 10193, "repo": "spring-core-6.0.11", "des": "Callback interface that can be used to filter specific annotation types.", "code": "@FunctionalInterface public interface AnnotationFilter {\n\tdefault boolean matches(Annotation annotation); // Test if the given annotation matches the filter.\n\tdefault boolean matches(Class<?> type); // Test if the given type matches the filter.\n\tboolean matches(String typeName); // Test if the given type name matches the filter.\n\tstatic AnnotationFilter packages(String... packages); // Create a new AnnotationFilter that matches annotations in the specified packages.\n}"}
{"index": 5431, "repo": "druid-processing-26.0.0", "des": "Settable implementation of DimensionSelector.", "code": "Class SettableDimensionValueSelector {\n\tClass classOfObject();\n\tObject getObject();\n\tIndexedInts getRow(); // Returns the indexed values at the current position in this DimensionSelector.\n\tint getValueCardinality(); // Value cardinality is the cardinality of the different occurring values.\n\tIdLookup idLookup(); // Returns IdLookup if available for this DimensionSelector, or null.\n\tString lookupName(int id); // Returns the value for a particular dictionary id as a Java String.\n\tValueMatcher makeValueMatcher(com.google.common.base.Predicate<String> predicate);\n\tValueMatcher makeValueMatcher(String value);\n\tboolean nameLookupPossibleInAdvance(); // Returns true if it is possible to DimensionDictionarySelector.lookupName(int) by ids from 0 to DimensionDictionarySelector.getValueCardinality() before the rows with those ids are returned.\n\tvoid setValueFrom(ColumnValueSelector<?> selector);\n}"}
{"index": 15804, "repo": "camel-api-4.0.0-RC1", "des": "SPI for dumping model definitions into XML representation.", "code": "public interface ModelToXMLDumper {\n\tString dumpModelAsXml(CamelContext context, NamedNode definition); // Dumps the definition as XML\n\tString dumpModelAsXml(CamelContext context, NamedNode definition, boolean resolvePlaceholders); // Dumps the definition as XML\n}"}
{"index": 16289, "repo": "spring-r2dbc-6.0.11", "des": "Helper class that provides static methods for obtaining R2DBC Connections from a ConnectionFactory.", "code": "public abstract class ConnectionFactoryUtils extends Object {\n\tstatic org.springframework.dao.DataAccessException convertR2dbcException(String task, String sql, R2dbcException ex); // Translate the given R2dbcException into a generic DataAccessException.\n\tstatic reactor.core.publisher.Mono<ConnectionFactory> currentConnectionFactory(ConnectionFactory connectionFactory); // Obtain the ConnectionFactory from the current TransactionSynchronizationManager.\n\tstatic reactor.core.publisher.Mono<Connection> doGetConnection(ConnectionFactory connectionFactory); // Actually obtain a R2DBC Connection from the given ConnectionFactory.\n\tstatic reactor.core.publisher.Mono<Void> doReleaseConnection(Connection connection, ConnectionFactory connectionFactory); // Actually close the given Connection, obtained from the given ConnectionFactory.\n\tstatic reactor.core.publisher.Mono<Connection> getConnection(ConnectionFactory connectionFactory); // Obtain a Connection from the given ConnectionFactory.\n\tstatic Connection getTargetConnection(Connection con); // Return the innermost target Connection of the given Connection.\n\tstatic reactor.core.publisher.Mono<Void> releaseConnection(Connection con, ConnectionFactory connectionFactory); // Close the given Connection, obtained from the given ConnectionFactory, if it is not managed externally (that is, not bound to the subscription).\n}"}
{"index": 15997, "repo": "wicket-util-10.0.0-M1", "des": "Base class for various MetaPattern based parsers.", "code": "public abstract class MetaPatternParser extends Object {\n\tprotected final boolean advance(MetaPattern pattern); // Advance parsing to the next element.\n\tfinal boolean atEnd(); // Whether the internal cursor has advanced to the end of the input.\n\tfinal Matcher matcher(); // Gets the matcher.\n\tboolean matches(); // Whether the matcher matches the pattern.\n\tvoid setPattern(MetaPattern pattern);\n}"}
{"index": 8552, "repo": "commons-io-2.13.0", "des": "A Proxy stream collection which acts as expected, that is it passes the method calls on to the proxied streams and doesn't change which methods are being called.", "code": "Class ProxyCollectionWriter {\n\tprotected void afterWrite(int n); // Invoked by the write methods after the proxied call has returned successfully.\n\tWriter append(char c); // Invokes the delegates' append(char) methods.\n\tWriter append(CharSequence csq); // Invokes the delegates' append(CharSequence) methods.\n\tWriter append(CharSequence csq, int start, int end); // Invokes the delegates' append(CharSequence, int, int) methods.\n\tprotected void beforeWrite(int n); // Invoked by the write methods before the call is proxied.\n\tvoid close(); // Invokes the delegate's close() method.\n\tvoid flush(); // Invokes the delegate's flush() method.\n\tprotected void handleIOException(IOException e); // Handle any IOExceptions thrown.\n\tvoid write(char[] cbuf); // Invokes the delegate's write(char[]) method.\n\tvoid write(char[] cbuf, int off, int len); // Invokes the delegate's write(char[], int, int) method.\n\tvoid write(int c); // Invokes the delegate's write(int) method.\n\tvoid write(String str); // Invokes the delegate's write(String) method.\n\tvoid write(String str, int off, int len); // Invokes the delegate's write(String) method.\n}"}
{"index": 10848, "repo": "spring-data-redis-3.1.2", "des": "Base implementation for RedisCollection.", "code": "public abstract class AbstractRedisCollection<E> extends AbstractCollection<E> implements RedisCollection<E> {\n\tboolean addAll(Collection<? extends E> c);\n\tprotected void checkResult(Object obj);\n\tboolean containsAll(Collection<?> c);\n\tboolean equals(Object o);\n\tBoolean expire(long timeout, TimeUnit unit); // Sets the key time-to-live/expiration.\n\tBoolean expireAt(Date date); // Sets the key time-to-live/expiration.\n\tLong getExpire(); // Returns the expiration of this key.\n\tString getKey(); // Returns the key associated with this entity.\n\tRedisOperations<String,E> getOperations(); // Returns the underlying Redis operations used by the backing implementation.\n\tBoolean persist(); // Removes the expiration (if any) of the key.\n\tboolean removeAll(Collection<?> c);\n\tvoid rename(String newKey); // Renames the key.\n}"}
{"index": 9420, "repo": "hadoop-yarn-api-3.3.6", "des": "The request which contains a list of StartContainerRequest sent by the ApplicationMaster to the NodeManager to start containers.", "code": "Class StartContainersRequest {\n\tabstract List<StartContainerRequest> getStartContainerRequests(); // Get a list of StartContainerRequest to start containers.\n\tstatic StartContainersRequest newInstance(List<StartContainerRequest> requests);\n\tabstract void setStartContainerRequests(List<StartContainerRequest> request); // Set a list of StartContainerRequest to start containers.\n}"}
{"index": 17690, "repo": "spring-web-6.0.11", "des": "HttpServletRequest wrapper that caches all content read from the input stream and reader, and allows this content to be retrieved via a byte array.", "code": "public class ContentCachingRequestWrapper extends HttpServletRequestWrapper {\n\tString getCharacterEncoding();\n\tbyte[] getContentAsByteArray(); // Return the cached request content as a byte array.\n\tServletInputStream getInputStream();\n\tString getParameter(String name);\n\tMap<String,String[]> getParameterMap();\n\tEnumeration<String> getParameterNames();\n\tString[] getParameterValues(String name);\n\tBufferedReader getReader();\n\tprotected void handleContentOverflow(int contentCacheLimit); // Template method for handling a content overflow: specifically, a request body being read that exceeds the specified content cache limit.\n}"}
{"index": 12963, "repo": "spring-integration-file-6.1.2", "des": "Enumeration of options supported by various commands.", "code": "public static enum AbstractRemoteFileOutboundGateway.Option extends Enum<AbstractRemoteFileOutboundGateway.Option> {\n\tString getOption();\n\tstatic AbstractRemoteFileOutboundGateway.Option toOption(String opt);\n\tstatic AbstractRemoteFileOutboundGateway.Option valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AbstractRemoteFileOutboundGateway.Option[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 4670, "repo": "commons-vfs2-2.9.0", "des": "A Consumer that throws FileSystemException.", "code": "Interface VfsConsumer<T> {\n\tvoid accept(T t); // Performs this operation on the given argument.\n\tdefault VfsConsumer<T> andThen(VfsConsumer<? super T> after); // Returns a composed Consumer that performs, in sequence, this operation followed by the after operation.\n}"}
{"index": 13585, "repo": "spring-messaging-6.0.11", "des": "An implementation of SimpMessageSendingOperations.", "code": "public class SimpMessagingTemplate extends AbstractMessageSendingTemplate<String> implements SimpMessageSendingOperations {\n\tvoid convertAndSendToUser(String user, String destination, Object payload); // Send a message to the given user.\n\tvoid convertAndSendToUser(String user, String destination, Object payload, Map<String,Object> headers); // Send a message to the given user.\n\tvoid convertAndSendToUser(String user, String destination, Object payload, Map<String,Object> headers, MessagePostProcessor postProcessor); // Send a message to the given user.\n\tvoid convertAndSendToUser(String user, String destination, Object payload, MessagePostProcessor postProcessor); // Send a message to the given user.\n\tprotected void doSend(String destination, Message<?> message);\n\tMessageHeaderInitializer getHeaderInitializer(); // Return the configured header initializer.\n\tMessageChannel getMessageChannel(); // Return the configured message channel.\n\tlong getSendTimeout(); // Return the configured send timeout (in milliseconds).\n\tString getUserDestinationPrefix(); // Return the configured user destination prefix.\n\tprotected Map<String,Object> processHeadersToSend(Map<String,Object> headers); // Creates a new map and puts the given headers under the key NATIVE_HEADERS NATIVE_HEADERS NATIVE_HEADERS.\n\tvoid send(Message<?> message); // If the headers of the given message already contain a SimpMessageHeaderAccessor#DESTINATION_HEADER then the message is sent without further changes.\n\tvoid setHeaderInitializer(MessageHeaderInitializer headerInitializer); // Configure a MessageHeaderInitializer to apply to the headers of all messages created through the SimpMessagingTemplate.\n\tvoid setSendTimeout(long sendTimeout); // Specify the timeout value to use for send operations (in milliseconds).\n\tvoid setUserDestinationPrefix(String prefix); // Configure the prefix to use for destinations targeting a specific user.\n}"}
{"index": 12367, "repo": "spring-integration-mqtt-6.1.2", "des": "Abstract class for MQTT client managers which can be a base for any common v3/v5 client manager implementation.", "code": "public abstract class AbstractMqttClientManager<T,C> extends Object implements ClientManager<T,C>, org.springframework.context.ApplicationEventPublisherAware {\n\tvoid addCallback(ClientManager.ConnectCallback connectCallback); // Register a callback for the connectComplete event from the client.\n\tprotected org.springframework.context.ApplicationEventPublisher getApplicationEventPublisher();\n\tString getBeanName(); // Return this component's bean name.\n\tprotected Set<ClientManager.ConnectCallback> getCallbacks();\n\tT getClient(); // Return the managed client.\n\tprotected String getClientId();\n\tprotected long getCompletionTimeout();\n\tprotected long getDisconnectCompletionTimeout();\n\tint getPhase(); // The phase of component auto-start in SmartLifecycle.\n\tprotected String getUrl();\n\tboolean isManualAcks(); // If manual acknowledge has to be used; false by default.\n\tboolean isRunning();\n\tboolean removeCallback(ClientManager.ConnectCallback connectCallback); // Remove the callback from registration.\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n\tvoid setBeanName(String name);\n\tprotected void setClient(T client);\n\tvoid setCompletionTimeout(long completionTimeout); // Set the completion timeout for operations.\n\tvoid setDisconnectCompletionTimeout(long completionTimeout); // Set the completion timeout when disconnecting.\n\tvoid setManualAcks(boolean manualAcks);\n\tvoid setPhase(int phase); // Set the phase of component autostart in SmartLifecycle.\n\tprotected void setUrl(String url);\n}"}
{"index": 18439, "repo": "opencms-core-15.0", "des": "DataSource wrapper for VFS resources, allows easy sending of VFS resources as email attachments.", "code": "Class CmsVfsDataSource {\n\tjava.lang.String getContentType();\n\tjava.io.InputStream getInputStream(); // Returns an input stream baded on the file contents.\n\tjava.lang.String getName(); // Returns the root path of the given resource.\n\tjava.io.OutputStream getOutputStream(); // Don't use this method, VFS resources can't be written using this datasource class.\n}"}
{"index": 8677, "repo": "avro-1.11.2", "des": "A SeekableInput backed with data in a byte array.", "code": "Class SeekableByteArrayInput {\n\tlong length(); // Return the length of the file.\n\tvoid seek(long p); // Set the position for the next read().\n\tlong tell(); // Return the position of the next read().\n}"}
{"index": 9372, "repo": "hadoop-yarn-api-3.3.6", "des": "NodeId is the unique identifier for a node.", "code": "Class NodeId {\n\tprotected abstract void build();\n\tint compareTo(NodeId other);\n\tboolean equals(Object obj);\n\tstatic NodeId fromString(String nodeIdStr);\n\tabstract String getHost(); // Get the hostname of the node.\n\tabstract int getPort(); // Get the port for communicating with the node.\n\tstatic NodeId newInstance(String host, int port);\n\tprotected abstract void setHost(String host);\n\tprotected abstract void setPort(int port);\n}"}
{"index": 1565, "repo": "pdfbox-3.0.0-beta1", "des": "A Pattern color space is either a Tiling pattern or a Shading pattern.", "code": "Class PDPattern {\n\tfloat[] getDefaultDecode(int bitsPerComponent); // Returns the default decode array for this color space.\n\tPDColor getInitialColor(); // Returns the initial color value for this color space.\n\tString getName(); // Returns the name of the color space.\n\tint getNumberOfComponents(); // Returns the number of components in this color space\n\tPDAbstractPattern getPattern(PDColor color); // Returns the pattern for the given color.\n\tPDColorSpace getUnderlyingColorSpace(); // Returns the underlying color space, if this is an uncolored tiling pattern, otherwise null.\n\tBufferedImage toRawImage(WritableRaster raster); // Returns the image in this colorspace or null.\n\tfloat[] toRGB(float[] value); // Returns the RGB equivalent of the given color value.\n\tBufferedImage toRGBImage(WritableRaster raster); // Returns the (A)RGB equivalent of the given raster.\n}"}
{"index": 7006, "repo": "calcite-core-1.34.0", "des": "A SqlDialect implementation for the Oracle database.", "code": "Class OracleSqlDialect {\n\tprotected boolean allowsAs();\n\t@Nullable SqlNode getCastSpec(RelDataType type); // Returns SqlNode for type in \"cast(column as type)\", which might be different between databases by type name, precision etc.\n\tList<String> getSingleRowTableName(); // Returns the name of the system table that has precisely one row.\n\tboolean supportsAliasedValues(); // Returns whether the dialect supports VALUES in a sub-query with and an \"AS t(column, ...)\" values to define column names.\n\tboolean supportsApproxCountDistinct(); // Returns whether this dialect supports APPROX_COUNT_DISTINCT functions.\n\tboolean supportsCharSet(); // Returns whether the dialect supports character set names as part of a data type, for instance VARCHAR(30) CHARACTER SET `ISO-8859-1`.\n\tboolean supportsDataType(RelDataType type); // Returns whether this dialect supports a given type.\n\tvoid unparseCall(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec);\n\tvoid unparseDateTimeLiteral(SqlWriter writer, SqlAbstractDateTimeLiteral literal, int leftPrec, int rightPrec);\n}"}
{"index": 8218, "repo": "spring-ws-3.0.10.RELEASE", "des": "Callback handler that uses Java Security KeyStores to handle cryptographic callbacks.", "code": "Class KeyStoreCallbackHandler {\n\tvoid afterPropertiesSet();\n\tprotected void handleDecrypt(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.DECRYPT usage.\n\tprotected void handleSecretKey(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.SECRET_KEY usage.\n\tprotected void loadDefaultKeyStore(); // Loads the key store indicated by system properties.\n\tvoid setKeyStore(KeyStore keyStore); // Sets the key store to use if a symmetric key name is embedded.\n\tvoid setPrivateKeyPassword(String privateKeyPassword); // Sets the password used to retrieve private keys from the keystore.\n\tvoid setSymmetricKeyPassword(String symmetricKeyPassword); // Sets the password used to retrieve keys from the symmetric keystore.\n}"}
{"index": 672, "repo": "ignite-core-2.15.0", "des": "Evictable cache entry passed into EvictionPolicy.", "code": "Interface EvictableEntry<K,V> {\n\t<T> T addMeta(T val); // Adds a new metadata.\n\tboolean evict(); // Evicts entry associated with given key from cache.\n\tboolean isCached(); // Checks whether entry is currently present in cache or not.\n\t<T> T meta(); // Gets metadata added by eviction policy.\n\t<T> T putMetaIfAbsent(T val); // Adds given metadata value only if it was absent.\n\t<T> T removeMeta(); // Removes metadata by name.\n\t<T> boolean removeMeta(T val); // Removes metadata only if its current value is equal to val passed in.\n\t<T> boolean replaceMeta(T curVal, T newVal); // Replaces given metadata with new newVal value only if its current value is equal to curVal.\n\tint size(); // Returns entry size in bytes.\n}"}
{"index": 15860, "repo": "camel-api-4.0.0-RC1", "des": "Used for components that can optimise the usage of org.apache.camel.processor.SendDynamicProcessor (toD) to reuse a static Endpoint and Producer that supports using headers to provide the dynamic parts.", "code": "public interface SendDynamicAware extends Service, CamelContextAware {\n\tProcessor createPostProcessor(Exchange exchange, SendDynamicAware.DynamicAwareEntry entry); // Creates an optional post Processor that will be executed afterwards when the message has been sent dynamic.\n\tProcessor createPreProcessor(Exchange exchange, SendDynamicAware.DynamicAwareEntry entry); // Creates the pre Processor that will prepare the Exchange with dynamic details from the given recipient.\n\tString getScheme(); // Gets the component name\n\tboolean isLenientProperties(); // Whether the endpoint is lenient or not.\n\tSendDynamicAware.DynamicAwareEntry prepare(Exchange exchange, String uri, String originalUri); // Prepares for using optimised dynamic to by parsing the uri and returning an entry of details that are used for creating the pre and post processors, and the static uri.\n\tdefault boolean resolveRawParameterValues(); // Whether to traverses the given parameters, and resolve any parameter values which uses the RAW token syntax: key=RAW(value).\n\tString resolveStaticUri(Exchange exchange, SendDynamicAware.DynamicAwareEntry entry); // Resolves the static part of the uri that are used for creating a single Endpoint and Producer that will be reused for processing the optimised toD.\n\tvoid setScheme(String scheme); // Sets the component name.\n}"}
{"index": 17941, "repo": "spring-web-6.0.11", "des": "Static WebApplicationContext implementation for testing.", "code": "public class StaticWebApplicationContext extends org.springframework.context.support.StaticApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource {\n\tprotected org.springframework.core.env.ConfigurableEnvironment createEnvironment(); // Create and return a new StandardServletEnvironment.\n\tString[] getConfigLocations(); // Return the config locations for this web application context, or null if none specified.\n\tString getNamespace(); // Return the namespace for this web application context, if any.\n\tprotected org.springframework.core.io.Resource getResourceByPath(String path); // This implementation supports file paths beneath the root of the ServletContext.\n\tprotected org.springframework.core.io.support.ResourcePatternResolver getResourcePatternResolver(); // This implementation supports pattern matching in unexpanded WARs too.\n\tServletConfig getServletConfig(); // Return the ServletConfig for this web application context, if any.\n\tServletContext getServletContext(); // Return the standard Servlet API ServletContext for this application.\n\torg.springframework.ui.context.Theme getTheme(String themeName); // Deprecated.\n\tprotected void initPropertySources();\n\tprotected void onRefresh(); // Initialize the theme capability.\n\tprotected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory); // Register request/session scopes, a ServletContextAwareProcessor, etc.\n\tvoid setConfigLocation(String configLocation); // The StaticWebApplicationContext class does not support this method.\n\tvoid setConfigLocations(String... configLocations); // The StaticWebApplicationContext class does not support this method.\n\tvoid setNamespace(String namespace); // Set the namespace for this web application context, to be used for building a default context config location.\n\tvoid setServletConfig(ServletConfig servletConfig); // Set the ServletConfig for this web application context.\n\tvoid setServletContext(ServletContext servletContext); // Set the ServletContext that this WebApplicationContext runs in.\n}"}
{"index": 1942, "repo": "nifi-framework-api-1.22.0", "des": "Provides access to AccessPolicies and the configured UserGroupProvider.", "code": "Interface AccessPolicyProvider {\n\tSet<AccessPolicy> getAccessPolicies(); // Retrieves all access policies.\n\tAccessPolicy getAccessPolicy(String identifier); // Retrieves the policy with the given identifier.\n\tAccessPolicy getAccessPolicy(String resourceIdentifier, RequestAction action); // Gets the access policies for the specified resource identifier and request action.\n\tUserGroupProvider getUserGroupProvider(); // Returns the UserGroupProvider for this managed Authorizer.\n\tvoid initialize(AccessPolicyProviderInitializationContext initializationContext); // Called immediately after instance creation for implementers to perform additional setup\n\tvoid onConfigured(AuthorizerConfigurationContext configurationContext); // Called to configure the Authorizer.\n\tvoid preDestruction(); // Called immediately before instance destruction for implementers to release resources.\n}"}
{"index": 12473, "repo": "spring-boot-test-3.1.1", "des": "Enumeration of how the main method of the @SpringBootConfiguration-annotated class is used when creating and running the SpringApplication under test.", "code": "public static enum SpringBootTest.UseMainMethod extends Enum<SpringBootTest.UseMainMethod> {\n\tstatic SpringBootTest.UseMainMethod valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SpringBootTest.UseMainMethod[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 18788, "repo": "lucene-core-9.7.0", "des": "IndexReaderContext for CompositeReader instance.", "code": "Class CompositeReaderContext {\n\tList<IndexReaderContext> children(); // Returns the context's children iff this context is a composite context otherwise null .\n\tList<LeafReaderContext> leaves(); // Returns the context's leaves if this context is a top-level context.\n\tCompositeReader reader(); // Returns the IndexReader, this context represents.\n}"}
{"index": 18221, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Contact to define if a plural attribute source is orderable or not.", "code": "Interface Orderable {\n\tjava.lang.String getOrder(); // The order by clause used during loading this plural attribute.\n\tboolean isOrdered(); // If the source of plural attribute is supposed to be applied the ORDER BY when loading.\n}"}
{"index": 15253, "repo": "spring-boot-3.1.1", "des": "A set of @Configuration classes that can be registered in ApplicationContext.", "code": "public abstract class Configurations extends Object {\n\tprotected final Set<Class<?>> getClasses();\n\tstatic Class<?>[] getClasses(Collection<Configurations> configurations); // Return the classes from all the specified configurations in the order that they would be registered.\n\tstatic Class<?>[] getClasses(Configurations... configurations); // Return the classes from all the specified configurations in the order that they would be registered.\n\tprotected abstract Configurations merge(Set<Class<?>> mergedClasses); // Merge configurations.\n\tprotected Configurations merge(Configurations other); // Merge configurations from another source of the same type.\n\tprotected Collection<Class<?>> sort(Collection<Class<?>> classes); // Sort configuration classes into the order that they should be applied.\n}"}
{"index": 8010, "repo": "commons-jcs3-core-3.1", "des": "Zombie adapter for the non local cache services.", "code": "Class ZombieCacheServiceNonLocal<K,V> {\n\tICacheElement<K,V> get(String cacheName, K key, long requesterId); // Does nothing.\n\tSet<K> getKeySet(String cacheName); // Does nothing.\n\tMap<K,ICacheElement<K,V>> getMatching(String cacheName, String pattern, long requesterId); // Does nothing.\n\tMap<K,ICacheElement<K,V>> getMultiple(String cacheName, Set<K> keys, long requesterId); // Gets multiple items from the cache based on the given set of keys.\n\tint getQueueSize(); // Gets the number of items on the queue.\n\tvoid propagateEvents(ICacheServiceNonLocal<K,V> service); // Walk the queue, calling the service for each queue operation.\n\tvoid remove(String cacheName, K key, long listenerId); // Adds a removeAll event to the queue if the maxSize is greater than 0;\n\tvoid removeAll(String cacheName, long listenerId); // Adds a removeAll event to the queue if the maxSize is greater than 0;\n\tvoid update(ICacheElement<K,V> item, long listenerId); // Adds an update event to the queue if the maxSize is greater than 0;\n}"}
{"index": 11583, "repo": "spring-security-oauth2-client-6.1.2", "des": "An AbstractAuthenticationToken for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.", "code": "public class OAuth2LoginAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\torg.springframework.security.oauth2.core.OAuth2AccessToken getAccessToken(); // Returns the access token.\n\torg.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationExchange getAuthorizationExchange(); // Returns the authorization exchange.\n\tClientRegistration getClientRegistration(); // Returns the client registration.\n\tObject getCredentials();\n\torg.springframework.security.oauth2.core.user.OAuth2User getPrincipal();\n\torg.springframework.security.oauth2.core.OAuth2RefreshToken getRefreshToken(); // Returns the refresh token.\n}"}
{"index": 6091, "repo": "jackson-databind-2.15.2", "des": "Alternative to DataFormatDetector that needs to be used when using data-binding.", "code": "Class DataFormatReaders {\n\tDataFormatReaders.Match findFormat(byte[] fullInputData); // Method to call to find format that given content (full document) has, as per configuration of this detector instance.\n\tDataFormatReaders.Match findFormat(byte[] fullInputData, int offset, int len); // Method to call to find format that given content (full document) has, as per configuration of this detector instance.\n\tDataFormatReaders.Match findFormat(InputStream in); // Method to call to find format that content (accessible via given InputStream) given has, as per configuration of this detector instance.\n\tDataFormatReaders with(DeserializationConfig config);\n\tDataFormatReaders with(ObjectReader[] readers);\n\tDataFormatReaders withMaxInputLookahead(int lookaheadBytes);\n\tDataFormatReaders withMinimalMatch(MatchStrength minMatch);\n\tDataFormatReaders withOptimalMatch(MatchStrength optMatch);\n\tDataFormatReaders withType(JavaType type);\n}"}
{"index": 4394, "repo": "beam-sdks-java-core-2.49.0", "des": "A ReadableState cell that combines multiple input values and outputs a single value of a different type.", "code": "Interface GroupingState<InputT,OutputT> {\n\tvoid add(InputT value); // Add a value to the buffer.\n\tReadableState<java.lang.Boolean> isEmpty(); // Returns a ReadableState whose ReadableState.read() method will return true if this state is empty at the point when that ReadableState.read() call returns.\n\tGroupingState<InputT,OutputT> readLater(); // Indicate that the value will be read later.\n}"}
{"index": 14380, "repo": "wicket-core-10.0.0-M1", "des": "Implements the default sorting algorithm for HeaderItems.", "code": "public class PriorityFirstComparator extends Object implements Comparator<ResourceAggregator.RecordedHeaderItem>, Serializable {\n\tint compare(ResourceAggregator.RecordedHeaderItem o1, ResourceAggregator.RecordedHeaderItem o2);\n\tprotected int compareWithinGroup(ResourceAggregator.RecordedHeaderItem item1, ResourceAggregator.RecordedHeaderItem item2); // Compares two header items that belong in the same group.\n\tprotected PriorityFirstComparator.HeaderItemType getItemType(ResourceAggregator.RecordedHeaderItem item); // Determines the type of the item: priority, page or component.\n\tprotected int inversedComponentOrder(ResourceAggregator.RecordedHeaderItem item1, ResourceAggregator.RecordedHeaderItem item2); // Compare two recorded PriorityHeaderItems, converting the child-first order into parent-first.\n}"}
{"index": 18231, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Describes access to a particular persistent property in terms of getting and setting values.", "code": "Interface PropertyAccess {\n\tGetter getGetter(); // Obtain the delegate for getting values for the described persistent property\n\tPropertyAccessStrategy getPropertyAccessStrategy(); // Access to the PropertyAccessStrategy that created this PropertyAccess\n\tSetter getSetter(); // Obtain the delegate for setting values for the described persistent property\n}"}
{"index": 3239, "repo": "hbase-common-3.0.0-alpha-4", "des": "These are values used with HBaseSemanticAttributes.", "code": "Enum HBaseSemanticAttributes.RpcSystem {\n\tstatic HBaseSemanticAttributes.RpcSystem valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HBaseSemanticAttributes.RpcSystem[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6285, "repo": "commons-codec-1.16.0", "des": "Abstract superclass for Base-N encoders and decoders.", "code": "Class BaseNCodec {\n\tprotected boolean containsAlphabetOrPad(byte[] arrayOctet); // Tests a given byte array to see if it contains any characters within the alphabet or PAD.\n\tbyte[] decode(byte[] pArray); // Decodes a byte[] containing characters in the Base-N alphabet.\n\tObject decode(Object obj); // Decodes an Object using the Base-N algorithm.\n\tbyte[] decode(String pArray); // Decodes a String containing characters in the Base-N alphabet.\n\tbyte[] encode(byte[] pArray); // Encodes a byte[] containing binary data, into a byte[] containing characters in the alphabet.\n\tbyte[] encode(byte[] pArray, int offset, int length); // Encodes a byte[] containing binary data, into a byte[] containing characters in the alphabet.\n\tObject encode(Object obj); // Encodes an Object using the Base-N algorithm.\n\tString encodeAsString(byte[] pArray); // Encodes a byte[] containing binary data, into a String containing characters in the appropriate alphabet.\n\tString encodeToString(byte[] pArray); // Encodes a byte[] containing binary data, into a String containing characters in the Base-N alphabet.\n\tprotected byte[] ensureBufferSize(int size, org.apache.commons.codec.binary.BaseNCodec.Context context); // Ensure that the buffer has room for size bytes\n\tstatic byte[] getChunkSeparator(); // Gets a copy of the chunk separator per RFC 2045 section 2.1.\n\tCodecPolicy getCodecPolicy(); // Returns the decoding behavior policy.\n\tprotected int getDefaultBufferSize(); // Get the default buffer size.\n\tlong getEncodedLength(byte[] pArray); // Calculates the amount of space needed to encode the supplied array.\n\tprotected abstract boolean isInAlphabet(byte value); // Returns whether or not the octet is in the current alphabet.\n\tboolean isInAlphabet(byte[] arrayOctet, boolean allowWSPad); // Tests a given byte array to see if it contains only valid characters within the alphabet.\n\tboolean isInAlphabet(String basen); // Tests a given String to see if it contains only valid characters within the alphabet.\n\tboolean isStrictDecoding(); // Returns true if decoding behavior is strict.\n}"}
{"index": 2633, "repo": "mahout-core-14.1", "des": "Open hash map from byte keys to byte values.", "code": "Class OpenByteByteHashMap {\n\tbyte adjustOrPutValue(byte key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(byte key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ByteProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ByteByteProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(byte key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(byte key);\n\tprotected int indexOfKey(byte key);\n\tprotected int indexOfValue(byte value);\n\tIterator<OpenByteByteHashMap.MapElement> iterator();\n\tvoid keys(ByteArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ByteByteProcedure condition, ByteArrayList keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(byte key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(byte key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 11338, "repo": "spring-context-6.0.11", "des": "Subclass of ModelMap that implements the Model interface.", "code": "public class ExtendedModelMap extends ModelMap implements Model {\n\tExtendedModelMap addAllAttributes(Collection<?> attributeValues); // Copy all attributes in the supplied Collection into this Map, using attribute name generation for each element.\n\tExtendedModelMap addAllAttributes(Map<String,?> attributes); // Copy all attributes in the supplied Map into this Map.\n\tExtendedModelMap addAttribute(Object attributeValue); // Add the supplied attribute to this Map using a generated name.\n\tExtendedModelMap addAttribute(String attributeName, Object attributeValue); // Add the supplied attribute under the supplied name.\n\tMap<String,Object> asMap(); // Return the current set of model attributes as a Map.\n\tExtendedModelMap mergeAttributes(Map<String,?> attributes); // Copy all attributes in the supplied Map into this Map, with existing objects of the same name taking precedence (i.e.\n}"}
{"index": 17995, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.", "code": "public abstract class AbstractValidatingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements ClientInterceptor, org.springframework.beans.factory.InitializingBean {\n\tvoid afterCompletion(MessageContext messageContext, Exception ex); // Does nothing by default.\n\tvoid afterPropertiesSet();\n\tString getSchemaLanguage();\n\torg.springframework.core.io.Resource[] getSchemas(); // Returns the schema resources to use for validation.\n\tprotected abstract Source getValidationRequestSource(WebServiceMessage request); // Abstract template method that returns the part of the request message that is to be validated.\n\tprotected abstract Source getValidationResponseSource(WebServiceMessage response); // Abstract template method that returns the part of the response message that is to be validated.\n\tboolean handleFault(MessageContext messageContext); // Does nothing by default.\n\tboolean handleRequest(MessageContext messageContext); // Validates the request message in the given message context.\n\tprotected boolean handleRequestValidationErrors(MessageContext messageContext, SAXParseException[] errors); // Template method that is called when the request message contains validation errors.\n\tboolean handleResponse(MessageContext messageContext); // Validates the response message in the given message context.\n\tprotected boolean handleResponseValidationErrors(MessageContext messageContext, SAXParseException[] errors); // Template method that is called when the response message contains validation errors.\n\tvoid setSchema(org.springframework.core.io.Resource schema); // Sets the schema resource to use for validation.\n\tvoid setSchemaLanguage(String schemaLanguage); // Sets the schema language.\n\tvoid setSchemas(org.springframework.core.io.Resource... schemas); // Sets the schema resources to use for validation.\n\tvoid setValidateRequest(boolean validateRequest); // Indicates whether the request should be validated against the schema.\n\tvoid setValidateResponse(boolean validateResponse); // Indicates whether the response should be validated against the schema.\n\tvoid setXsdSchema(org.springframework.xml.xsd.XsdSchema schema); // Sets the XsdSchema to use for validation.\n\tvoid setXsdSchemaCollection(org.springframework.xml.xsd.XsdSchemaCollection schemaCollection); // Sets the XsdSchemaCollection to use for validation.\n}"}
{"index": 15009, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A builder for OidcUserInfoAuthenticationContext.", "code": "public static final class OidcUserInfoAuthenticationContext.Builder extends OAuth2AuthenticationContext.AbstractBuilder<OidcUserInfoAuthenticationContext,OidcUserInfoAuthenticationContext.Builder> {\n\tOidcUserInfoAuthenticationContext.Builder accessToken(org.springframework.security.oauth2.core.OAuth2AccessToken accessToken); // Sets the OAuth 2.0 Access Token.\n\tOidcUserInfoAuthenticationContext.Builder authorization(OAuth2Authorization authorization); // Sets the authorization.\n\tOidcUserInfoAuthenticationContext build(); // Builds a new OidcUserInfoAuthenticationContext.\n}"}
{"index": 18641, "repo": "opencms-gwt-15.0", "des": "Bean containing the title and name of a category.", "code": "Class CmsCreateCategoryMenuEntry.CmsCategoryTitleAndName {\n\tjava.lang.String getName(); // Gets the name of the category.\n\tjava.lang.String getTitle(); // Gets the title of the category.\n}"}
{"index": 384, "repo": "phoenix-core-5.1.3", "des": "Implementation of the LENGTH(<string>) build-in function.", "code": "Class ModulusExpression {\n\t<T> T accept(ExpressionVisitor<T> visitor); // Means of traversing expression tree through visitor.\n\tArithmeticExpression clone(List<Expression> children);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tprotected String getOperatorString();\n}"}
{"index": 4869, "repo": "hadoop-common-3.3.4", "des": "Fencer method that uses PowerShell to remotely connect to a machine and kill the required process.", "code": "Class PowerShellFencer {\n\tvoid checkArgs(String argStr); // Verify that the given fencing method's arguments are valid.\n\tboolean tryFence(HAServiceTarget target, String argsStr); // Attempt to fence the target node.\n}"}
{"index": 10409, "repo": "spring-core-6.0.11", "des": "Utility class that builds pretty-printing toString() methods with pluggable styling conventions.", "code": "public class ToStringCreator extends Object {\n\tToStringCreator append(Object value); // Append the provided value.\n\tToStringCreator append(String fieldName, boolean value); // Append a boolean field value.\n\tToStringCreator append(String fieldName, byte value); // Append a byte field value.\n\tToStringCreator append(String fieldName, double value); // Append a double field value.\n\tToStringCreator append(String fieldName, float value); // Append a float field value.\n\tToStringCreator append(String fieldName, int value); // Append a integer field value.\n\tToStringCreator append(String fieldName, long value); // Append a long field value.\n\tToStringCreator append(String fieldName, short value); // Append a short field value.\n\tToStringCreator append(String fieldName, Object value); // Append a field value.\n}"}
{"index": 15873, "repo": "camel-api-4.0.0-RC1", "des": "Allows objects to be notified when CamelContext has almost done all work when starting.", "code": "public interface StartupListener {\n\tdefault void onCamelContextFullyStarted(CamelContext context, boolean alreadyStarted); // Callback invoked when the CamelContext has been fully started.\n\tvoid onCamelContextStarted(CamelContext context, boolean alreadyStarted); // Callback invoked when the CamelContext is about to be fully started (not started yet).\n\tdefault void onCamelContextStarting(CamelContext context, boolean alreadyStarted); // Callback invoked when the CamelContext is being started.\n}"}
{"index": 1931, "repo": "hadoop-hdfs-3.3.6", "des": "This is an interface used to retrieve statistic information related to snapshots.", "code": "Interface SnapshotStatsMXBean {\n\tSnapshotInfo.Bean[] getSnapshots(); // Return the list of snapshots\n\torg.apache.hadoop.hdfs.protocol.SnapshottableDirectoryStatus.Bean[] getSnapshottableDirectories(); // Return the list of snapshottable directories\n}"}
{"index": 599, "repo": "ignite-core-2.15.0", "des": "MXBean interface that provides access to ODBC\\JDBC\\Thin client connections.", "code": "Interface ClientProcessorMXBean {\n\tvoid dropAllConnections(); // Drop all active connections.\n\tboolean dropConnection(long id); // Drops client connection by id, if exists.\n\tList<String> getConnections(); // Returns list of active connections.\n\tvoid showFullStackOnClientSide(boolean show); // If sets to true shows full stack trace otherwise highlevel short error message.\n}"}
{"index": 1496, "repo": "pdfbox-3.0.0-beta1", "des": "A CalGray colour space is a special case of a single-component CIE-based colour space.", "code": "Class PDCalGray {\n\tfloat[] getDefaultDecode(int bitsPerComponent); // Returns the default decode array for this color space.\n\tfloat getGamma(); // This will get the gamma value.\n\tPDColor getInitialColor(); // Returns the initial color value for this color space.\n\tString getName(); // Returns the name of the color space.\n\tint getNumberOfComponents(); // Returns the number of components in this color space\n\tvoid setGamma(float value); // Set the gamma value.\n\tfloat[] toRGB(float[] value); // Returns the RGB equivalent of the given color value.\n}"}
{"index": 102, "repo": "commons-collections4-4.4", "des": "Closure that catches any checked exception and re-throws it as a FunctorException runtime exception.", "code": "Class CatchAndRethrowClosure<E> {\n\tvoid execute(E input); // Execute this closure on the specified input object.\n\tprotected abstract void executeAndThrow(E input); // Execute this closure on the specified input object.\n}"}
{"index": 5137, "repo": "druid-processing-26.0.0", "des": "Serializer that produces BlockLayoutColumnarFloatsSupplier.", "code": "Class BlockLayoutColumnarFloatsSerializer {\n\tvoid add(float value);\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid open();\n\tint size();\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 7591, "repo": "cassandra-all-4.1.2", "des": "Represents a decorated key, handy for certain operations where just working with strings gets slow.", "code": "Class DecoratedKey {\n\tstatic int compareTo(IPartitioner partitioner, java.nio.ByteBuffer key, PartitionPosition position);\n\tint compareTo(PartitionPosition pos);\n\tboolean equals(java.lang.Object obj);\n\tvoid filterHash(long[] dest); // Places the murmur3 hash of the key in the given long array of size at least two.\n\tabstract java.nio.ByteBuffer getKey();\n\tIPartitioner getPartitioner();\n\tToken getToken();\n\tboolean isMinimum();\n\tPartitionPosition.Kind kind();\n\tToken.KeyBound minValue();\n\tjava.lang.String toCQLString(TableMetadata metadata); // Returns a CQL representation of this key.\n}"}
{"index": 12508, "repo": "spring-jdbc-6.0.11", "des": "Used to set up a database during initialization and clean up a database during destruction.", "code": "public class DataSourceInitializer extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet(); // Use the database populator to set up the database.\n\tvoid destroy(); // Use the database cleaner to clean up the database.\n\tvoid setDatabaseCleaner(DatabasePopulator databaseCleaner); // Set the DatabasePopulator to execute during the bean destruction phase, cleaning up the database and leaving it in a known state for others.\n\tvoid setDatabasePopulator(DatabasePopulator databasePopulator); // Set the DatabasePopulator to execute during the bean initialization phase.\n\tvoid setDataSource(DataSource dataSource); // The DataSource for the database to populate when this component is initialized and to clean up when this component is shut down.\n\tvoid setEnabled(boolean enabled); // Flag to explicitly enable or disable the database populator and database cleaner.\n}"}
{"index": 15157, "repo": "spring-data-elasticsearch-5.1.2", "des": "Desscribes the point in time parameters for a query", "code": "public static record Query.PointInTime(String id, Duration keepAlive) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString id(); // Returns the value of the id record component.\n\tDuration keepAlive(); // Returns the value of the keepAlive record component.\n}"}
{"index": 1109, "repo": "ignite-core-2.15.0", "des": "Processor to unlock and optionally update the session.", "code": "Class PlatformDotNetSessionSetAndUnlockProcessor {\n\tVoid process(javax.cache.processor.MutableEntry<String,PlatformDotNetSessionData> entry, Object... args);\n\tvoid readBinary(BinaryReader reader); // Reads fields from provided reader.\n\tvoid writeBinary(BinaryWriter writer); // Writes fields to provided writer.\n}"}
{"index": 1283, "repo": "ignite-core-2.15.0", "des": "Multinode cache group encryption task result.", "code": "Class VisorCacheGroupEncryptionTaskResult<T> {\n\tMap<UUID,IgniteException> exceptions();\n\tprotected void readExternalData(byte ver, ObjectInput in); // Load object's specific data content.\n\tMap<UUID,T> results();\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 5265, "repo": "druid-processing-26.0.0", "des": "Outward-facing utility methods for FrameWriterFactory and FrameWriter users.", "code": "Class FrameWriters {\n\tstatic FrameWriterFactory makeFrameWriterFactory(FrameType frameType, MemoryAllocatorFactory allocatorFactory, RowSignature signature, List<KeyColumn> sortColumns); // Creates a FrameWriterFactory.\n\tstatic RowSignature sortableSignature(RowSignature signature, List<KeyColumn> keyColumns); // Returns a copy of \"signature\" with columns rearranged so the provided sortColumns appear as a prefix.\n}"}
{"index": 15611, "repo": "spring-security-core-6.1.2", "des": "Non-persistent implementation of UserDetailsManager which is backed by an in-memory map.", "code": "public class InMemoryUserDetailsManager extends Object implements UserDetailsManager, UserDetailsPasswordService {\n\tvoid changePassword(String oldPassword, String newPassword); // Modify the current user's password.\n\tvoid createUser(UserDetails user); // Create a new user with the supplied details.\n\tvoid deleteUser(String username); // Remove the user with the given login name from the system.\n\tUserDetails loadUserByUsername(String username); // Locates the user based on the username.\n\tvoid setAuthenticationManager(AuthenticationManager authenticationManager);\n\tvoid setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tUserDetails updatePassword(UserDetails user, String newPassword); // Modify the specified user's password.\n\tvoid updateUser(UserDetails user); // Update the specified user.\n\tboolean userExists(String username); // Check if a user with the supplied login name exists in the system.\n}"}
{"index": 2166, "repo": "hive-exec-4.0.0-alpha-2", "des": "A KeyValuesReader implementation that returns a sorted stream of key-values by doing a sorted merge of the key-value in LogicalInputs.", "code": "Class KeyValueInputMerger {\n\tvoid clean(); // Cleanup references\n\tObject getCurrentKey();\n\tObject getCurrentValue();\n\tboolean next();\n\tvoid setIOCxt(IOContext ioCxt); // Set the IOContext reference so that input path can be changed.\n}"}
{"index": 9462, "repo": "curator-recipes-5.5.0", "des": "A barrier as described in the ZK recipes.", "code": "Class DistributedBarrier {\n\tvoid removeBarrier(); // Utility to remove the barrier node\n\tvoid setBarrier(); // Utility to set the barrier node\n\tvoid waitOnBarrier(); // Blocks until the barrier node comes into existence\n\tboolean waitOnBarrier(long maxWait, TimeUnit unit); // Blocks until the barrier no longer exists or the timeout elapses\n}"}
{"index": 11614, "repo": "spring-websocket-6.0.11", "des": "A convenient base class for WebSocketHandler implementation with empty methods.", "code": "public abstract class AbstractWebSocketHandler extends Object implements WebSocketHandler {\n\tvoid afterConnectionClosed(WebSocketSession session, CloseStatus status); // Invoked after the WebSocket connection has been closed by either side, or after a transport error has occurred.\n\tvoid afterConnectionEstablished(WebSocketSession session); // Invoked after WebSocket negotiation has succeeded and the WebSocket connection is opened and ready for use.\n\tprotected void handleBinaryMessage(WebSocketSession session, BinaryMessage message);\n\tvoid handleMessage(WebSocketSession session, WebSocketMessage<?> message); // Invoked when a new WebSocket message arrives.\n\tprotected void handlePongMessage(WebSocketSession session, PongMessage message);\n\tprotected void handleTextMessage(WebSocketSession session, TextMessage message);\n\tvoid handleTransportError(WebSocketSession session, Throwable exception); // Handle an error from the underlying WebSocket message transport.\n\tboolean supportsPartialMessages(); // Whether the WebSocketHandler handles partial messages.\n}"}
{"index": 16825, "repo": "spring-expression-6.0.11", "des": "Configurable ParserContext implementation for template parsing.", "code": "public class TemplateParserContext extends Object implements ParserContext {\n\tfinal String getExpressionPrefix(); // For template expressions, returns the prefix that identifies the start of an expression block within a string.\n\tfinal String getExpressionSuffix(); // For template expressions, return the prefix that identifies the end of an expression block within a string.\n\tfinal boolean isTemplate(); // Whether the expression being parsed is a template.\n}"}
{"index": 10731, "repo": "spring-tx-6.0.11", "des": "Default implementation of the TransactionFactory strategy interface, simply wrapping a standard JTA TransactionManager.", "code": "public class SimpleTransactionFactory extends Object implements TransactionFactory {\n\tTransaction createTransaction(String name, int timeout); // Create an active Transaction object based on the given name and timeout.\n\tboolean supportsResourceAdapterManagedTransactions(); // Determine whether the underlying transaction manager supports XA transactions managed by a resource adapter (i.e.\n}"}
{"index": 5767, "repo": "freemarker-2.3.32", "des": "Used for implementing the \"truncate\" family of built-ins.", "code": "Class TruncateBuiltinAlgorithm {\n\tabstract TemplateScalarModel truncate(java.lang.String s, int maxLength, TemplateScalarModel terminator, java.lang.Integer terminatorLength, Environment env); // Corresponds to ?truncate(...) in templates.\n\tabstract TemplateScalarModel truncateC(java.lang.String s, int maxLength, TemplateScalarModel terminator, java.lang.Integer terminatorLength, Environment env); // Corresponds to ?truncate_c_m(...) in templates.\n\tabstract TemplateModel truncateCM(java.lang.String s, int maxLength, TemplateModel terminator, java.lang.Integer terminatorLength, Environment env); // Corresponds to ?truncate_c_m(...) in templates.\n\tabstract TemplateModel truncateM(java.lang.String s, int maxLength, TemplateModel terminator, java.lang.Integer terminatorLength, Environment env); // Corresponds to ?truncate_m(...) in templates.\n\tabstract TemplateScalarModel truncateW(java.lang.String s, int maxLength, TemplateScalarModel terminator, java.lang.Integer terminatorLength, Environment env); // Corresponds to ?truncate_w(...) in templates.\n\tabstract TemplateModel truncateWM(java.lang.String s, int maxLength, TemplateModel terminator, java.lang.Integer terminatorLength, Environment env); // Corresponds to ?truncate_w_m(...) in templates.\n}"}
{"index": 9612, "repo": "commons-math3-3.6.1", "des": "Implements the Fast Hadamard Transform (FHT).", "code": "Class FastHadamardTransformer {\n\tprotected double[] fht(double[] x); // The FHT (Fast Hadamard Transformation) which uses only subtraction and addition.\n\tprotected int[] fht(int[] x); // Returns the forward transform of the specified integer data set.\n\tdouble[] transform(double[] f, TransformType type); // Returns the (forward, inverse) transform of the specified real data set.\n\tint[] transform(int[] f); // Returns the forward transform of the specified integer data set.The integer transform cannot be inverted directly, due to a scaling factor which may lead to double results.\n\tdouble[] transform(UnivariateFunction f, double min, double max, int n, TransformType type); // Returns the (forward, inverse) transform of the specified real function, sampled on the specified interval.\n}"}
{"index": 16223, "repo": "spring-data-cassandra-4.1.2", "des": "Naming strategy that renders CamelCase name parts to snake_case.", "code": "public class SnakeCaseNamingStrategy extends Object implements NamingStrategy {\n\tString getColumnName(CassandraPersistentProperty property); // Uses PersistentProperty.getName() and separates camel case parts with '_'.\n\tString getTableName(CassandraPersistentEntity<?> entity); // Uses Class.getSimpleName() and separates camel case parts with '_'.\n\tString getUserDefinedTypeName(CassandraPersistentEntity<?> entity); // Uses Class.getSimpleName() and separates camel case parts with '_'.\n}"}
{"index": 11613, "repo": "spring-websocket-6.0.11", "des": "Abstract base class for WebSocketClient implementations.", "code": "public abstract class AbstractWebSocketClient extends Object implements WebSocketClient {\n\tprotected void assertUri(URI uri);\n\tprotected org.springframework.util.concurrent.ListenableFuture<WebSocketSession> doHandshakeInternal(WebSocketHandler webSocketHandler, org.springframework.http.HttpHeaders headers, URI uri, List<String> subProtocols, List<WebSocketExtension> extensions, Map<String,Object> attributes); // Deprecated. as of 6.0, in favor of executeInternal(WebSocketHandler, HttpHeaders, URI, List, List, Map)\n\tCompletableFuture<WebSocketSession> execute(WebSocketHandler webSocketHandler, String uriTemplate, Object... uriVars); // Execute a handshake request to the given url and handle the resulting WebSocket session with the given handler.\n\tfinal CompletableFuture<WebSocketSession> execute(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri); // Execute a handshake request to the given url and handle the resulting WebSocket session with the given handler.\n\tprotected abstract CompletableFuture<WebSocketSession> executeInternal(WebSocketHandler webSocketHandler, org.springframework.http.HttpHeaders headers, URI uri, List<String> subProtocols, List<WebSocketExtension> extensions, Map<String,Object> attributes); // Perform the actual handshake to establish a connection to the server.\n}"}
{"index": 16614, "repo": "spring-beans-6.0.11", "des": "Holder for a constructor argument value, with an optional type attribute indicating the target type of the actual constructor argument.", "code": "public static class ConstructorArgumentValues.ValueHolder extends Object implements BeanMetadataElement {\n\tConstructorArgumentValues.ValueHolder copy(); // Create a copy of this ValueHolder: that is, an independent ValueHolder instance with the same contents.\n\tObject getConvertedValue(); // Return the converted value of the constructor argument, after processed type conversion.\n\tString getName(); // Return the name of the constructor argument.\n\tObject getSource(); // Return the configuration source Object for this metadata element (may be null).\n\tString getType(); // Return the type of the constructor argument.\n\tObject getValue(); // Return the value for the constructor argument.\n\tboolean isConverted(); // Return whether this holder contains a converted value already (true), or whether the value still needs to be converted (false).\n\tvoid setConvertedValue(Object value); // Set the converted value of the constructor argument, after processed type conversion.\n\tvoid setName(String name); // Set the name of the constructor argument.\n\tvoid setSource(Object source); // Set the configuration source Object for this metadata element.\n\tvoid setType(String type); // Set the type of the constructor argument.\n\tvoid setValue(Object value); // Set the value for the constructor argument.\n}"}
{"index": 17213, "repo": "spring-integration-amqp-6.1.2", "des": "Spec for a SimpleMessageListenerContainer.", "code": "public class SimpleMessageListenerContainerSpec extends AbstractMessageListenerContainerSpec<SimpleMessageListenerContainerSpec,org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer> {\n\tSimpleMessageListenerContainerSpec batchSize(int batchSize); // The batch size to use.\n\tSimpleMessageListenerContainerSpec concurrentConsumers(int concurrentConsumers);\n\tSimpleMessageListenerContainerSpec consecutiveActiveTrigger(int consecutiveActiveTrigger);\n\tSimpleMessageListenerContainerSpec consecutiveIdleTrigger(int consecutiveIdleTrigger);\n\tSimpleMessageListenerContainerSpec consumerBatchEnabled(boolean enabled); // Set to true to enable batching of consumed messages.\n\tSimpleMessageListenerContainerSpec maxConcurrentConsumers(int maxConcurrentConsumers);\n\tSimpleMessageListenerContainerSpec receiveTimeout(long receiveTimeout);\n\tSimpleMessageListenerContainerSpec startConsumerMinInterval(long startConsumerMinInterval);\n\tSimpleMessageListenerContainerSpec stopConsumerMinInterval(long stopConsumerMinInterval);\n}"}
{"index": 2865, "repo": "amqp-client-5.18.0", "des": "Interface to an exception-handling object.", "code": "Interface ExceptionHandler {\n\tvoid handleBlockedListenerException(Connection connection, Throwable exception); // Perform any required exception processing for the situation when the driver thread for the connection has called a BlockedListener's method, and that method has thrown an exception.\n\tvoid handleChannelRecoveryException(Channel ch, Throwable exception); // Perform any required exception processing for the situation when the driver thread for the connection has an exception during channel recovery that it can't otherwise deal with.\n\tvoid handleConfirmListenerException(Channel channel, Throwable exception); // Perform any required exception processing for the situation when the driver thread for the connection has called a ConfirmListener's handleAck or handleNack method, and that method has thrown an exception.\n\tvoid handleConnectionRecoveryException(Connection conn, Throwable exception); // Perform any required exception processing for the situation when the driver thread for the connection has an exception during connection recovery that it can't otherwise deal with.\n\tvoid handleConsumerException(Channel channel, Throwable exception, Consumer consumer, String consumerTag, String methodName); // Perform any required exception processing for the situation when the driver thread for the connection has called a method on a Consumer, and that method has thrown an exception.\n\tvoid handleReturnListenerException(Channel channel, Throwable exception); // Perform any required exception processing for the situation when the driver thread for the connection has called a ReturnListener's handleReturn method, and that method has thrown an exception.\n\tvoid handleTopologyRecoveryException(Connection conn, Channel ch, TopologyRecoveryException exception); // Perform any required exception processing for the situation when the driver thread for the connection has an exception during topology (exchanges, queues, bindings, consumers) recovery that it can't otherwise deal with.\n\tvoid handleUnexpectedConnectionDriverException(Connection conn, Throwable exception); // Perform any required exception processing for the situation when the driver thread for the connection has an exception signalled to it that it can't otherwise deal with.\n}"}
{"index": 11576, "repo": "spring-security-oauth2-client-6.1.2", "des": "A representation of an OAuth 2.0 \"Authorized Client\".", "code": "public class OAuth2AuthorizedClient extends Object implements Serializable {\n\torg.springframework.security.oauth2.core.OAuth2AccessToken getAccessToken(); // Returns the access token credential granted.\n\tClientRegistration getClientRegistration(); // Returns the authorized client's registration.\n\tString getPrincipalName(); // Returns the End-User's Principal name.\n\torg.springframework.security.oauth2.core.OAuth2RefreshToken getRefreshToken(); // Returns the refresh token credential granted.\n}"}
{"index": 17821, "repo": "spring-web-6.0.11", "des": "ServletRequestBindingException subclass that indicates a missing parameter.", "code": "public class MissingServletRequestParameterException extends MissingRequestValueException {\n\tString getMessage();\n\tfinal String getParameterName(); // Return the name of the offending parameter.\n\tfinal String getParameterType(); // Return the expected type of the offending parameter.\n}"}
{"index": 7499, "repo": "cassandra-all-4.1.2", "des": "Sends a read request to the replicas needed to satisfy a given ConsistencyLevel.", "code": "Class AbstractReadExecutor {\n\tvoid awaitReadRepair();\n\tvoid awaitResponses();\n\tvoid awaitResponses(boolean logBlockingReadRepairAttempt); // Wait for the CL to be satisfied by responses\n\tvoid executeAsync(); // send the initial set of requests\n\tDecoratedKey getKey();\n\tstatic AbstractReadExecutor getReadExecutor(SinglePartitionReadCommand command, ConsistencyLevel consistencyLevel, long queryStartNanoTime);\n\tReadRepair<EndpointsForToken,ReplicaPlan.ForTokenRead> getReadRepair();\n\tPartitionIterator getResult();\n\tboolean hasLocalRead();\n\tprotected void makeDigestRequests(java.lang.Iterable<Replica> replicas);\n\tprotected void makeFullDataRequests(ReplicaCollection<?> replicas);\n\tprotected void makeTransientDataRequests(java.lang.Iterable<Replica> replicas);\n\tvoid maybeSendAdditionalDataRequests();\n\tabstract void maybeTryAdditionalReplicas(); // Perform additional requests if it looks like the original will time out.\n\tvoid setResult(PartitionIterator result);\n}"}
{"index": 18327, "repo": "opencms-core-15.0", "des": "ContextMenuOpenedOnTableFooterEvent is an event that is fired by the context menu when it's opened by clicking on table footer", "code": "Class CmsContextMenu.ContextMenuOpenedOnTableFooterEvent {\n\tCmsContextMenu getContextMenu(); // Returns the context menu.\n\tjava.lang.Object getPropertyId(); // Returns the property id.\n}"}
{"index": 17306, "repo": "groovy-4.0.13", "des": "A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.", "code": "public class ExtendedVerifier extends ClassCodeVisitorSupport {\n\tprotected SourceUnit getSourceUnit();\n\tprotected boolean isAnnotationCompatible(); // Deprecated.\n\tprotected void visitAnnotations(AnnotatedNode node, int target);\n\tvoid visitClass(ClassNode node); // Visit a ClassNode.\n\tvoid visitConstructor(ConstructorNode node); // Visit a ConstructorNode.\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n\tvoid visitField(FieldNode node); // Visit a FieldNode.\n\tvoid visitMethod(MethodNode node); // Visit a MethodNode.\n\tvoid visitProperty(PropertyNode node); // Visit a PropertyNode.\n}"}
{"index": 2337, "repo": "commons-geometry-euclidean-1.0", "des": "Abstract class for joining collections of line subsets into connected paths.", "code": "Class AbstractLinePathConnector {\n\tvoid add(Iterable<? extends LineConvexSubset> subsets); // Add a collection of line subsets to the connector, leaving them unconnected until a later call to connect(Iterable) or connectAll().\n\tvoid add(LineConvexSubset subset); // Add a line subset to the connector, leaving it unconnected until a later call to to connect(Iterable) or connectAll().\n\tvoid connect(Iterable<? extends LineConvexSubset> subsets); // Add a collection of line subsets to the connector and attempt to connect each new line subset with existing subsets.\n\tList<LinePath> connectAll(); // Connect all current line subsets into connected paths, returning the result as a list of line paths.\n\tList<LinePath> connectAll(Iterable<LineConvexSubset> subsets); // Add the given line subsets to this instance and connect all current subsets into connected paths.\n}"}
{"index": 16198, "repo": "spring-data-cassandra-4.1.2", "des": "Utility class to associate QueryOptions and WriteOptions with QueryBuilder Statements.", "code": "public abstract class QueryOptionsUtil extends Object {\n\tstatic <T extends com.datastax.oss.driver.api.core.cql.Statement<?>>T addQueryOptions(T statement, QueryOptions queryOptions); // Add common QueryOptions to all types of queries.\n\tstatic com.datastax.oss.driver.api.querybuilder.delete.Delete addWriteOptions(com.datastax.oss.driver.api.querybuilder.delete.Delete delete, WriteOptions writeOptions); // Add common WriteOptions options to Delete CQL statements.\n\tstatic com.datastax.oss.driver.api.querybuilder.insert.Insert addWriteOptions(com.datastax.oss.driver.api.querybuilder.insert.Insert insert, WriteOptions writeOptions); // Add common WriteOptions options to Insert CQL statements.\n\tstatic com.datastax.oss.driver.api.querybuilder.update.Update addWriteOptions(com.datastax.oss.driver.api.querybuilder.update.Update update, WriteOptions writeOptions); // Add common WriteOptions options to Update CQL statements.\n}"}
{"index": 3422, "repo": "nifi-api-1.22.0", "des": "Defines a task that is responsible for reporting status information to external destinations.", "code": "Interface ReportingTask {\n\tvoid initialize(ReportingInitializationContext config); // Provides the Reporting Task with access to objects that may be of use throughout the life of the service\n\tdefault boolean isStateful(ReportingContext context); // Indicates whether this reporting task, configured with the given ReportingContext, stores state.\n\tvoid onTrigger(ReportingContext context); // This method is called on a scheduled interval to allow the Reporting Task to perform its tasks.\n}"}
{"index": 5700, "repo": "freemarker-2.3.32", "des": "Adapts a non-List Java Collection to the corresponding TemplateModel interface(s), most importantly to TemplateCollectionModelEx.", "code": "Class DefaultNonListCollectionAdapter {\n\tstatic DefaultNonListCollectionAdapter adapt(java.util.Collection collection, ObjectWrapperWithAPISupport wrapper); // Factory method for creating new adapter instances.\n\tboolean contains(TemplateModel item);\n\tjava.lang.Object getAdaptedObject(java.lang.Class hint); // Retrieves the underlying object, or some other object semantically equivalent to its value narrowed by the class hint.\n\tTemplateModel getAPI(); // Returns the model that exposes the (Java) API of the value.\n\tjava.lang.Object getWrappedObject(); // Retrieves the original object wrapped by this model.\n\tboolean isEmpty(); // Returns if the collection contains any elements.\n\tTemplateModelIterator iterator(); // Retrieves a template model iterator that is used to iterate over the elements in this collection.\n\tint size(); // Returns the number items in this collection, or Integer.MAX_VALUE, if there are more than Integer.MAX_VALUE items.\n}"}
{"index": 13388, "repo": "shiro-core-2.0.0-alpha-2", "des": "A ThreadState instance manages any state that might need to be bound and/or restored during a thread's execution.", "code": "public interface ThreadState {\n\tvoid bind(); // Binds any state that should be made accessible during a thread's execution.\n\tvoid clear(); // Completely clears/removes the ThreadContext state.\n\tvoid restore(); // Restores a thread to its state before bind bind was invoked.\n}"}
{"index": 12189, "repo": "jena-core-4.9.0", "des": "Listener that funnels all the changes into add/removed(Object) x, ie, leaves discrimination to be done on the type of object added or removed.", "code": "public class ObjectListener extends Object implements ModelChangedListener {\n\tvoid added(Object x); // Override this to track all the objects added; each object will be a Statement, a Statement [], a List (Statement), an Iterator (Statement), or a Model.\n\tvoid addedStatement(Statement s); // Method to call when a single statement has been added to the attached model.\n\tvoid addedStatements(List<Statement> statements); // Method to call when a list of statements has been added to the attached model.\n\tvoid addedStatements(Model m); // Method to call when a model has been used to define the statements to be added to our attached model.\n\tvoid addedStatements(Statement[] statements); // Method to call when an array of statements has been added to the attached model.\n\tvoid addedStatements(StmtIterator statements); // Method to call when a statement iterator has supplied elements to be added to the attached model.\n\tvoid notifyEvent(Model m, Object event);\n\tvoid removed(Object x); // Override this to track all the objects removed; each object will be a Statement, a Statement [], a List (Statement), an Iterator (Statement), or a Model.\n\tvoid removedStatement(Statement s); // Method to call when a single statement has been removed from the attached model.\n\tvoid removedStatements(List<Statement> statements); // Method to call when a list of statements has been deleted from the attached model.\n\tvoid removedStatements(Model m); // Method to call when a model has been used to remove statements from our attached model.\n\tvoid removedStatements(Statement[] statements); // Method to call when an array of statements has been removed from the attached model.\n\tvoid removedStatements(StmtIterator statements); // Method to call when a statement iterator has been used to remove statements from the attached model.\n}"}
{"index": 8292, "repo": "spring-ws-3.0.10.RELEASE", "des": "Sub-interface of WebServiceMessageFactory which contains SOAP-specific properties and methods.", "code": "Interface SoapMessageFactory {\n\tSoapMessage createWebServiceMessage(); // Creates a new, empty SoapMessage.\n\tSoapMessage createWebServiceMessage(InputStream inputStream); // Reads a SoapMessage from the given input stream.\n\tvoid setSoapVersion(SoapVersion version); // Sets the SOAP Version used by this factory.\n}"}
{"index": 12546, "repo": "spring-jdbc-6.0.11", "des": "Extension of JdbcDaoSupport that exposes a NamedParameterJdbcTemplate as well.", "code": "public class NamedParameterJdbcDaoSupport extends JdbcDaoSupport {\n\tNamedParameterJdbcTemplate getNamedParameterJdbcTemplate(); // Return a NamedParameterJdbcTemplate wrapping the configured JdbcTemplate.\n\tprotected void initTemplateConfig(); // Create a NamedParameterJdbcTemplate based on the configured JdbcTemplate.\n}"}
{"index": 8487, "repo": "commons-io-2.13.0", "des": "Throws an IOException on all attempts to write to the stream.", "code": "Class ClosedOutputStream {\n\tvoid flush(); // Throws an IOException to indicate that the stream is closed.\n\tvoid write(int b); // Throws an IOException to indicate that the stream is closed.\n}"}
{"index": 15501, "repo": "spring-batch-core-5.0.2", "des": "Listener interface for the processing of an item.", "code": "public interface ItemProcessListener<T,S> extends StepListener {\n\tdefault void afterProcess(T item, S result); // Called after ItemProcessor.process(Object) returns.\n\tdefault void beforeProcess(T item); // Called before ItemProcessor.process(Object).\n\tdefault void onProcessError(T item, Exception e); // Called if an exception was thrown from ItemProcessor.process(Object).\n}"}
{"index": 14239, "repo": "wicket-core-10.0.0-M1", "des": "Panel (has it's own markup, defined between <wicket:panel> tags), that can act as a form component.", "code": "public abstract class FormComponentPanel<T> extends FormComponent<T> implements IQueueRegion {\n\tboolean checkRequired(); // Checks if the form component's 'required' requirement is met by first checking FormComponent.isRequired() to see if it has to check for requirement.\n\tvoid clearInput(); // Clears the user input.\n\tprotected IMarkupSourcingStrategy newMarkupSourcingStrategy(); // If Component.getMarkupSourcingStrategy() returns null, this method will be called.\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n}"}
{"index": 5731, "repo": "freemarker-2.3.32", "des": "Wraps a set of same-name overloaded methods behind TemplateMethodModel interface, like if it was a single method, chooses among them behind the scenes on call-time based on the argument values.", "code": "Class OverloadedMethodsModel {\n\tjava.lang.Object exec(java.util.List arguments); // Invokes the method, passing it the arguments from the list.\n\tTemplateModel get(int index); // Retrieves the i-th template model in this sequence.\n\tint size();\n}"}
{"index": 14770, "repo": "spring-data-commons-3.1.2", "des": "ParameterAccessor implementation using a Parameters instance to find special parameters.", "code": "public class ParametersParameterAccessor extends Object implements ParameterAccessor {\n\tClass<?> findDynamicProjection(); // Returns the dynamic projection type if available, null otherwise.\n\tObject getBindableValue(int index); // Returns the bindable value with the given index.\n\tPageable getPageable(); // Returns the Pageable of the parameters, if available.\n\tParameters<?,?> getParameters(); // Returns the Parameters instance backing the accessor.\n\tScrollPosition getScrollPosition(); // Returns the ScrollPosition of the parameters, if available.\n\tSort getSort(); // Returns the sort instance to be used for query creation.\n\tprotected <T> T getValue(int index); // Returns the value with the given index.\n\tprotected Object[] getValues(); // Returns the potentially unwrapped values.\n\tboolean hasBindableNullValue(); // Returns whether one of the bindable parameter values is null.\n\torg.springframework.data.repository.query.ParametersParameterAccessor.BindableParameterIterator iterator(); // Returns an iterator over all bindable parameters.\n}"}
{"index": 12400, "repo": "spring-data-couchbase-5.1.2", "des": "Terminating operations invoking the actual execution.", "code": "public static interface ExecutableFindByQueryOperation.TerminatingFindByQuery<T> extends OneAndAll<T> {\n\tList<T> all(); // Get all matching documents.\n\tlong count(); // Get the number of matching elements.\n\tboolean exists(); // Check for the presence of matching elements.\n\tdefault Optional<T> first(); // Get the first or no result.\n\tT firstValue(); // Get the first or no result.\n\tdefault Optional<T> one(); // Get exactly zero or one result.\n\tT oneValue(); // Get exactly zero or one result.\n\tStream<T> stream(); // Stream all matching elements.\n}"}
{"index": 4604, "repo": "commons-vfs2-2.9.0", "des": "A simple file replicator and temporary file store.", "code": "Class DefaultFileReplicator {\n\tprotected void addFile(Object file);\n\tFile allocateFile(String baseName); // Allocates a new temporary file.\n\tvoid close(); // Closes the replicator, deleting all temporary files.\n\tprotected File createAndAddFile(File parent, String basename);\n\tprotected File createFile(File parent, String name); // Create the temporary file.\n\tprotected String createFilename(String baseName); // Create the temporary file name.\n\tprotected void deleteFile(File file); // Physically deletes the file from the file system.\n\tprotected long getFilecount();\n\tvoid init(); // Initializes this component.\n\tprotected Object removeFile(); // Removes a file from the copies list.\n\tprotected void removeFile(Object file); // Removes a instance from the list of copies.\n\tFile replicateFile(FileObject srcFile, FileSelector selector); // Creates a local copy of the file, and all its descendants.\n}"}
{"index": 2994, "repo": "tink-1.10.0", "des": "Describes the parameters of an HkdfPrfKey.", "code": "Class HkdfPrfParameters {\n\tstatic HkdfPrfParameters.Builder builder();\n\tboolean equals(Object o);\n\tHkdfPrfParameters.HashType getHashType();\n\tint getKeySizeBytes();\n\tBytes getSalt(); // Gets the salt value, which defaults to null if not set, as per RFC 5869.\n\tboolean hasIdRequirement(); // Returns true if a key created with the parameters in this object has to have a certain ID when it is in a keyset.\n}"}
{"index": 14638, "repo": "spring-cloud-stream-4.0.0", "des": "Internal utilities for handling generics.", "code": "public final class GenericsUtils extends Object {\n\tstatic boolean checkCompatiblePollableBinder(Binder binderInstance, Class<?> bindingTargetType); // Return the generic type of PollableSource to determine if it is appropriate for the binder.\n\tstatic Class<?> getParameterType(Class<?> evaluatedClass, Class<?> interfaceClass, int position); // For a specific class that implements or extends a parameterized type, return the parameter of that interface at a given position.\n}"}
{"index": 10905, "repo": "spring-data-redis-3.1.2", "des": "Strategy interface to control pipelining flush behavior.", "code": "public static interface LettuceConnection.PipeliningFlushPolicy {\n\tstatic LettuceConnection.PipeliningFlushPolicy buffered(int bufferSize); // Return a policy to buffer commands and to flush once reaching the configured bufferSize.\n\tstatic LettuceConnection.PipeliningFlushPolicy flushEachCommand(); // Return a policy to flush after each command (default behavior).\n\tstatic LettuceConnection.PipeliningFlushPolicy flushOnClose(); // Return a policy to flush only if LettuceConnection.closePipeline() is called.\n\tLettuceConnection.PipeliningFlushState newPipeline();\n}"}
{"index": 11925, "repo": "maven-core-4.0.0-alpha-7", "des": "Handles deserialization of metadata from some kind of textual format like XML.", "code": "@Named @Singleton public class DefaultMetadataReader extends Object implements MetadataReader {\n\tMetadata read(File input, Map<String,?> options); // Reads the metadata from the specified file.\n\tMetadata read(InputStream input, Map<String,?> options); // Reads the metadata from the specified byte stream.\n\tMetadata read(Reader input, Map<String,?> options); // Reads the metadata from the specified character reader.\n}"}
{"index": 13128, "repo": "maven-settings-builder-4.0.0-alpha-7", "des": "Handles deserialization of settings from some kind of textual format like XML.", "code": "public interface SettingsReader {\n\tSettings read(File input, Map<String,?> options); // Reads the settings from the specified file.\n\tSettings read(InputStream input, Map<String,?> options); // Reads the settings from the specified byte stream.\n\tSettings read(Reader input, Map<String,?> options); // Reads the settings from the specified character reader.\n}"}
{"index": 12860, "repo": "spring-data-mongodb-4.1.2", "des": "Encapsulates the aggregation framework $replaceRoot-operation.", "code": "public class ReplaceRootOperation extends Object implements FieldsExposingAggregationOperation {\n\tstatic ReplaceRootOperation.ReplaceRootOperationBuilder builder(); // Creates a new ReplaceRootOperation.ReplaceRootDocumentOperationBuilder.\n\tExposedFields getFields(); // Returns the fields exposed by the AggregationOperation.\n\tString getOperator(); // Return the MongoDB operator that is used for this AggregationOperation.\n\tprotected ReplaceRootOperation.Replacement getReplacement(); // Obtain the ReplaceRootOperation.Replacement.\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n}"}
{"index": 6785, "repo": "calcite-core-1.34.0", "des": "Implementation of Project in bindable calling convention.", "code": "Class Bindables.BindableProject {\n\torg.apache.calcite.linq4j.Enumerable<Object[]> bind(DataContext dataContext); // Executes this statement and returns an enumerable which will yield rows.\n\tBindables.BindableProject copy(RelTraitSet traitSet, RelNode input, List<RexNode> projects, RelDataType rowType); // Copies a project.\n\tClass<Object[]> getElementType(); // Gets the type of the element(s) that are returned in this collection.\n\tNode implement(InterpretableRel.InterpreterImplementor implementor); // Creates an interpreter node to implement this relational expression.\n}"}
{"index": 5086, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that transforms the given object before invoking another Predicate.", "code": "Class TransformedPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning the result of the decorated predicate once the input has been transformed\n\tstatic Predicate getInstance(Transformer transformer, Predicate predicate); // Factory to create the predicate.\n\tPredicate[] getPredicates(); // Gets the predicate being decorated.\n\tTransformer getTransformer(); // Gets the transformer in use.\n}"}
{"index": 14099, "repo": "wicket-core-10.0.0-M1", "des": "Abstract class for links that are capable of submitting a form.", "code": "public abstract class AbstractSubmitLink extends AbstractLink implements IFormSubmittingComponent {\n\tboolean getDefaultFormProcessing(); // Returns whether form should be processed the default way.\n\tForm<?> getForm(); // Returns the form this component submits.\n\tString getInputName(); // Returns the name that is unique to this component, at least within the form.\n\tfinal AbstractSubmitLink setDefaultFormProcessing(boolean defaultFormProcessing); // Sets the defaultFormProcessing property.\n}"}
{"index": 6817, "repo": "calcite-core-1.34.0", "des": "A relational expression implements the interface Converter to indicate that it converts a physical attribute, or trait, of a relational expression from one value to another.", "code": "Interface Converter {\n\tRelNode getInput(); // Returns the sole input relational expression.\n\tRelTraitSet getInputTraits(); // Returns the trait of the input relational expression.\n\t@Nullable RelTraitDef getTraitDef(); // Returns the definition of trait which this converter works on.\n}"}
{"index": 8729, "repo": "hadoop-yarn-common-3.3.6", "des": "An implementation of RMFailoverProxyProvider which does nothing in the event of failover, and always returns the same proxy object.", "code": "Class DefaultNoHARMFailoverProxyProvider<T> {\n\tvoid close(); // Close the current proxy.\n\tClass<T> getInterface();\n\torg.apache.hadoop.io.retry.FailoverProxyProvider.ProxyInfo<T> getProxy();\n\tvoid init(org.apache.hadoop.conf.Configuration conf, RMProxy<T> proxy, Class<T> protocol); // Initialize internal data structures, invoked right after instantiation.\n\tvoid performFailover(T currentProxy); // PerformFailover does nothing in this class.\n}"}
{"index": 4716, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "Path based site URL factory implementation that handles requests for the \"mobile\" site.", "code": "Class MobileSitePathUrlFactory {\n\tjava.lang.String createSiteUrl(javax.servlet.http.HttpServletRequest request); // Create a fully-qualified URL that can be used to redirect the user to this site.\n\tboolean isRequestForSite(javax.servlet.http.HttpServletRequest request); // Did the request originate from this site? Used to determine what site the user is currently viewing.\n}"}
{"index": 8639, "repo": "avro-1.11.2", "des": "A set of messages forming an application protocol.", "code": "Class Protocol {\n\tProtocol.Message createMessage(Protocol.Message m, Schema request); // Create a one-way message using the name, doc, and props of m.\n\tProtocol.Message createMessage(Protocol.Message m, Schema request, Schema response, Schema errors); // Create a two-way message using the name, doc, and props of m.\n\t<T> Protocol.Message createMessage(String name, String doc, JsonProperties propMap, Schema request); // Create a one-way message.\n\t<T> Protocol.Message createMessage(String name, String doc, JsonProperties propMap, Schema request, Schema response, Schema errors); // Create a two-way message.\n\t<T> Protocol.Message createMessage(String name, String doc, Map<String,?> propMap, Schema request); // Create a one-way message.\n\t<T> Protocol.Message createMessage(String name, String doc, Map<String,?> propMap, Schema request, Schema response, Schema errors); // Create a two-way message.\n\tboolean equals(Object o);\n\tString getDoc(); // Doc string for this protocol.\n\tbyte[] getMD5(); // Return the MD5 hash of the text of this protocol.\n\tMap<String,Protocol.Message> getMessages(); // The messages of this protocol.\n\tString getName(); // The name of this protocol.\n\tString getNamespace(); // The namespace of this protocol.\n\tSchema getType(String name); // Returns the named type.\n\tCollection<Schema> getTypes(); // The types of this protocol.\n\tstatic void main(String[] args);\n\tstatic Protocol parse(File file); // Read a protocol from a Json file.\n\tstatic Protocol parse(InputStream stream); // Read a protocol from a Json stream.\n\tstatic Protocol parse(String string); // Read a protocol from a Json string.\n\tstatic Protocol parse(String string, String... more); // Read a protocol from one or more json strings\n\tvoid setTypes(Collection<Schema> newTypes); // Set the types of this protocol.\n\tString toString(boolean pretty); // Render this as JSON.\n}"}
{"index": 9779, "repo": "commons-math3-3.6.1", "des": "An interface that encapsulates abstractions of the P-square algorithm markers as is explained in the original works.", "code": "Interface PSquarePercentile.PSquareMarkers {\n\tObject clone(); // A clone function to clone the current instance.\n\tdouble estimate(int index); // An Estimate of the percentile value of a given Marker\n\tdouble getPercentileValue(); // Returns Percentile value computed thus far.\n\tdouble height(int markerIndex); // Returns the marker height (or percentile) of a given marker index.\n\tdouble processDataPoint(double inputDataPoint); // Process a data point by moving the marker heights based on estimator.\n}"}
{"index": 14414, "repo": "wicket-core-10.0.0-M1", "des": "Request target that responds by sending its resource stream.", "code": "public class ResourceStreamRequestHandler extends Object implements org.apache.wicket.request.IRequestHandler, org.apache.wicket.request.ILoggableRequestHandler {\n\tprotected void configure(ResourceStreamResource resource); // Configures the ResourceStreamResource used by this request handler\n\tvoid detach(org.apache.wicket.request.IRequestCycle requestCycle);\n\tboolean equals(Object obj);\n\tDuration getCacheDuration();\n\tfinal ContentDisposition getContentDisposition();\n\tfinal String getFileName();\n\tResourceStreamLogData getLogData();\n\tfinal org.apache.wicket.util.resource.IResourceStream getResourceStream(); // Gets the resource stream for the response.\n\tvoid respond(org.apache.wicket.request.IRequestCycle requestCycle); // Responds by sending the contents of the resource stream.\n\tResourceStreamRequestHandler setCacheDuration(Duration cacheDuration);\n\tfinal ResourceStreamRequestHandler setContentDisposition(ContentDisposition contentDisposition);\n\tfinal ResourceStreamRequestHandler setFileName(String fileName);\n}"}
{"index": 4039, "repo": "zookeeper-3.8.2", "des": "A ZooKeeperServer which comes into play when peer is partitioned from the majority.", "code": "Class ReadOnlyZooKeeperServer {\n\tvoid createSessionTracker();\n\tvoid dumpConf(PrintWriter pwriter);\n\tlong getServerId(); // Returns the id of the associated QuorumPeer, which will do for a unique id of this server.\n\tString getState();\n\tprotected void registerJMX();\n\tvoid registerJMX(ZooKeeperServerBean serverBean, LocalPeerBean localPeerBean);\n\tprotected void setLocalSessionFlag(Request si); // If the underlying Zookeeper server support local session, this method will set a isLocalSession to true if a request is associated with a local session.\n\tprotected void setState(ZooKeeperServer.State state); // Sets the state of ZooKeeper server.\n\tprotected void setupRequestProcessors();\n\tvoid shutdown();\n\tprotected void startSessionTracker();\n\tvoid startup();\n\tprotected void unregisterJMX();\n\tprotected void unregisterJMX(ZooKeeperServer zks);\n\tprotected void validateSession(ServerCnxn cnxn, long sessionId); // Validate if a particular session can be reestablished.\n}"}
{"index": 17663, "repo": "spring-web-6.0.11", "des": "An abstract base class adapting a WebArgumentResolver to the HandlerMethodArgumentResolver contract.", "code": "public abstract class AbstractWebArgumentResolverAdapter extends Object implements HandlerMethodArgumentResolver {\n\tprotected abstract NativeWebRequest getWebRequest(); // Required for access to NativeWebRequest in supportsParameter(org.springframework.core.MethodParameter).\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory); // Delegate to the WebArgumentResolver instance.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Actually resolve the value and check the resolved value is not WebArgumentResolver.UNRESOLVED absorbing _any_ exceptions.\n}"}
{"index": 13348, "repo": "shiro-core-2.0.0-alpha-2", "des": "Utility class providing static methods to make working with LDAP easier.", "code": "public final class LdapUtils extends Object {\n\tstatic void closeContext(LdapContext ctx); // Closes an LDAP context, logging any errors, but not throwing an exception if there is a failure.\n\tstatic void closeEnumeration(NamingEnumeration ne);\n\tstatic Collection<String> getAllAttributeValues(Attribute attr); // Helper method used to retrieve all attribute values from a particular context attribute.\n}"}
{"index": 1688, "repo": "samza-api-1.8.0", "des": "Allows scheduling ScheduledFunction callbacks to be invoked later.", "code": "Interface Scheduler<K> {\n\tvoid delete(K key); // Delete the scheduled callback for the provided key.\n\tvoid schedule(K key, long timestamp); // Schedule a callback for the key to be invoked at timestamp.\n}"}
{"index": 746, "repo": "ignite-core-2.15.0", "des": "Provides locked wrappers around given maps and collections.", "code": "Class GridCollections {\n\tstatic <E> Collection<E> lockedCollection(Collection<E> c); // Gets locked collection wrapping given set.\n\tstatic <K,V> Map<K,V> lockedMap(Map<K,V> m); // Gets locked map wrapping given map.\n\tstatic <E> Set<E> lockedSet(Set<E> s); // Gets locked set wrapping given set.\n}"}
{"index": 10458, "repo": "groovy-all-4.0.13", "des": "This class represents a sequence of BytecodeInstructions or ASTNodes.", "code": "public class BytecodeSequence extends Statement {\n\tBytecodeInstruction getBytecodeInstruction(); // Returns the singular BytecodeInstruction.\n\tList<?> getInstructions();\n\tvoid visit(GroovyCodeVisitor visitor); // Delegates to the visit method used for this class.\n}"}
{"index": 6833, "repo": "calcite-core-1.34.0", "des": "Implementation of Aggregate in enumerable calling convention.", "code": "Class EnumerableAggregate {\n\tEnumerableAggregate copy(RelTraitSet traitSet, RelNode input, ImmutableBitSet groupSet, @Nullable List<ImmutableBitSet> groupSets, List<AggregateCall> aggCalls); // Creates a copy of this aggregate.\n\tEnumerableRel.Result implement(EnumerableRelImplementor implementor, EnumerableRel.Prefer pref); // Creates a plan for this expression according to a calling convention.\n}"}
{"index": 7213, "repo": "calcite-core-1.34.0", "des": "Definition of the SQL IN operator, which tests for a value's membership in a sub-query or a list of values.", "code": "Class SqlInOperator {\n\tboolean argumentMustBeScalar(int ordinal); // Returns whether the ordinalth argument to this operator must be scalar (as opposed to a query).\n\tRelDataType deriveType(SqlValidator validator, SqlValidatorScope scope, SqlCall call); // Derives the type of a call to this operator.\n\tSqlOperator not(); // Returns the operator that is the logical inverse of this operator.\n\tboolean validRexOperands(int count, Litmus litmus); // Returns whether the given operands are valid.\n}"}
{"index": 7400, "repo": "mahout-math-0.13.0", "des": "Open hash map from char keys to int values.", "code": "Class OpenCharIntHashMap {\n\tint adjustOrPutValue(char key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(char key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(CharProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(CharIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(char key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(char key);\n\tprotected int indexOfKey(char key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenCharIntHashMap.MapElement> iterator();\n\tvoid keys(CharArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(CharIntProcedure condition, CharArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(char key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(char key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 11861, "repo": "spring-kafka-3.0.9", "des": "Bean post-processor that registers methods annotated with KafkaListener to be invoked by a Kafka message listener container created under the covers by a KafkaListenerContainerFactory according to the parameters of the annotation.", "code": "public class KafkaListenerAnnotationBeanPostProcessor<K,V> extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.Ordered, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterPropertiesSet();\n\tvoid afterSingletonsInstantiated();\n\tprotected void assertBeanFactory();\n\tKafkaListenerEndpointRegistrar getEndpointRegistrar(); // Return the KafkaListenerEndpointRegistrar.\n\torg.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory getMessageHandlerMethodFactory(); // Return the configured handler factory.\n\tint getOrder();\n\tprotected String noBeanFoundMessage(Object target, String listenerBeanName, String requestedBeanName, Class<?> expectedClass);\n\tObject postProcessAfterInitialization(Object bean, String beanName);\n\tObject postProcessBeforeInitialization(Object bean, String beanName);\n\tprotected void processKafkaListener(KafkaListener kafkaListener, Method method, Object bean, String beanName);\n\tprotected void processListener(MethodKafkaListenerEndpoint<?,?> endpoint, KafkaListener kafkaListener, Object bean, String beanName, String[] topics, TopicPartitionOffset[] tps);\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // Making a BeanFactory available is optional; if not set, KafkaListenerConfigurer beans won't get autodetected and an endpoint registry has to be explicitly configured.\n\tvoid setCharset(Charset charset); // Set a charset to use when converting byte[] to String in method arguments and other String/byte[] conversions.\n\tvoid setDefaultContainerFactoryBeanName(String containerFactoryBeanName); // Set the name of the KafkaListenerContainerFactory to use by default.\n\tvoid setEndpointRegistry(KafkaListenerEndpointRegistry endpointRegistry); // Set the KafkaListenerEndpointRegistry that will hold the created endpoint and manage the lifecycle of the related listener container.\n\tvoid setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory messageHandlerMethodFactory); // Set the MessageHandlerMethodFactory to use to configure the message listener responsible to serve an endpoint detected by this processor.\n}"}
{"index": 1870, "repo": "hadoop-hdfs-3.3.6", "des": "DiskBalancerCluster represents the nodes that we are working against.", "code": "Class DiskBalancerCluster {\n\tList<NodePlan> computePlan(double thresholdPercent); // Compute plan takes a node and constructs a planner that creates a plan that we would like to follow.\n\tvoid createSnapshot(String snapShotName); // Writes a snapshot of the cluster to the specified directory.\n\tSet<String> getExclusionList(); // Returns the current ExclusionList.\n\tSet<String> getInclusionList(); // Gets the Inclusion list.\n\tDiskBalancerDataNode getNodeByIPAddress(String ipAddresss); // Returns a node by IP Address.\n\tDiskBalancerDataNode getNodeByName(String hostName); // Returns a node by hostName.\n\tDiskBalancerDataNode getNodeByUUID(String uuid); // Returns a node by UUID.\n\tList<DiskBalancerDataNode> getNodes(); // Gets all DataNodes in the Cluster.\n\tList<DiskBalancerDataNode> getNodesToProcess(); // Returns the Nodes to Process which is the real list of nodes processed by diskBalancer.\n\tString getOutput(); // Returns th output path for this cluster.\n\tfloat getThreshold(); // Returns the threshold value.\n\tstatic DiskBalancerCluster parseJson(String json); // Parses a Json string and converts to DiskBalancerCluster.\n\tvoid readClusterInfo(); // readClusterInfo connects to the cluster and reads the node's data.\n\tvoid setExclusionList(Set<String> excludedNodes); // sets the list of nodes to exclude from process of diskBalancer.\n\tvoid setInclusionList(Set<String> includeNodes); // Sets the inclusionList.\n\tvoid setNodes(List<DiskBalancerDataNode> clusterNodes); // Sets the list of nodes of this cluster.\n\tvoid setNodesToProcess(List<DiskBalancerDataNode> dnNodesToProcess); // Sets the nodes to process.\n\tvoid setOutput(String output); // Sets the output path for this run.\n\tvoid setThreshold(float thresholdPercent); // Sets the threshold value.\n\tString toJson(); // returns a serialized json string.\n}"}
{"index": 17976, "repo": "spring-ws-core-4.0.5", "des": "Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.", "code": "public abstract class AbstractFaultCreatingValidatingInterceptor extends AbstractValidatingInterceptor {\n\tboolean getAddValidationErrorDetail(); // Returns whether a SOAP Fault detail element should be created when a validation error occurs.\n\tQName getDetailElementName(); // Returns the fault detail element name when validation errors occur on the request.\n\tString getFaultStringOrReason(); // Sets the SOAP faultstring or Reason used when validation errors occur on the request.\n\tLocale getFaultStringOrReasonLocale(); // Returns the SOAP fault reason locale used when validation errors occur on the request.\n\tprotected boolean handleRequestValidationErrors(MessageContext messageContext, SAXParseException[] errors); // Template method that is called when the request message contains validation errors.\n\tvoid setAddValidationErrorDetail(boolean addValidationErrorDetail); // Indicates whether a SOAP Fault detail element should be created when a validation error occurs.\n\tvoid setDetailElementName(QName detailElementName); // Sets the fault detail element name when validation errors occur on the request.\n\tvoid setFaultStringOrReason(String faultStringOrReason); // Sets the SOAP faultstring or Reason used when validation errors occur on the request.\n\tvoid setFaultStringOrReasonLocale(Locale faultStringOrReasonLocale); // Sets the SOAP fault reason locale used when validation errors occur on the request.\n}"}
{"index": 14402, "repo": "wicket-core-10.0.0-M1", "des": "Buffers storage of added pages until the end of the request, when they are delegated to the next store in the identical order they where added.", "code": "public class RequestPageStore extends DelegatingPageStore {\n\tvoid addPage(IPageContext context, IManageablePage page); // Stores the page-\n\tvoid detach(IPageContext context); // Detach from the current context.\n\tvoid end(IPageContext context); // End the current context.\n\tIManageablePage getPage(IPageContext context, int id); // Restores a page from storage.\n\tvoid removeAllPages(IPageContext context); // All pages should be removed from storage for the given context.\n\tvoid removePage(IPageContext context, IManageablePage page); // Removes a page from storage.\n\tvoid revertPage(IPageContext context, IManageablePage page); // Revert adding a page - optional operation.\n}"}
{"index": 15676, "repo": "pulsar-common-3.0.0", "des": "Util class for processing key/value schema info.", "code": "public final class KeyValueSchemaInfo extends Object {\n\tstatic KeyValueEncodingType decodeKeyValueEncodingType(SchemaInfo schemaInfo); // Decode the kv encoding type from the schema info.\n\tstatic KeyValue<SchemaInfo,SchemaInfo> decodeKeyValueSchemaInfo(SchemaInfo schemaInfo); // Decode the key/value schema info to get key schema info and value schema info.\n\tstatic <K, V> SchemaInfo encodeKeyValueSchemaInfo(String schemaName, Schema<K> keySchema, Schema<V> valueSchema, KeyValueEncodingType keyValueEncodingType); // Encode key & value into schema into a KeyValue schema.\n\tstatic SchemaInfo encodeKeyValueSchemaInfo(String schemaName, SchemaInfo keySchemaInfo, SchemaInfo valueSchemaInfo, KeyValueEncodingType keyValueEncodingType); // Encode key & value into schema into a KeyValue schema.\n\tstatic <K, V> SchemaInfo encodeKeyValueSchemaInfo(Schema<K> keySchema, Schema<V> valueSchema, KeyValueEncodingType keyValueEncodingType); // Encode key & value into schema into a KeyValue schema.\n}"}
{"index": 8427, "repo": "hadoop-aws-3.3.6", "des": "The information on a file needed to open it.", "code": "Class OpenFileSupport.OpenFileInformation {\n\tS3AReadOpContext applyOptions(S3AReadOpContext roc); // Propagate the options to the operation context being built up.\n\tOpenFileSupport.OpenFileInformation build(); // Build.\n\tint getBufferSize();\n\tChangeDetectionPolicy getChangePolicy();\n\tlong getFileLength(); // Get the file length.\n\tS3AInputPolicy getInputPolicy();\n\tlong getReadAheadRange();\n\tlong getSplitEnd();\n\tlong getSplitStart();\n\tString getSql();\n\tS3AFileStatus getStatus();\n\tboolean isS3Select();\n\tOpenFileSupport.OpenFileInformation withAsyncDrainThreshold(long value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withBufferSize(int value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withChangePolicy(ChangeDetectionPolicy value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withFileLength(long value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withInputPolicy(S3AInputPolicy value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withReadAheadRange(long value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withS3Select(boolean value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withSplitEnd(long value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withSplitStart(long value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withSql(String value); // Set builder value.\n\tOpenFileSupport.OpenFileInformation withStatus(S3AFileStatus value); // Set builder value.\n}"}
{"index": 13004, "repo": "spring-aop-6.0.11", "des": "Base class for TargetSource implementations that are based on a Spring BeanFactory, delegating to Spring-managed bean instances.", "code": "public abstract class AbstractBeanFactoryBasedTargetSource extends Object implements TargetSource, org.springframework.beans.factory.BeanFactoryAware, Serializable {\n\tprotected void copyFrom(AbstractBeanFactoryBasedTargetSource other); // Copy configuration from the other AbstractBeanFactoryBasedTargetSource object.\n\tboolean equals(Object other);\n\torg.springframework.beans.factory.BeanFactory getBeanFactory(); // Return the owning BeanFactory.\n\tString getTargetBeanName(); // Return the name of the target bean in the factory.\n\tClass<?> getTargetClass(); // Return the type of targets returned by this TargetSource.\n\tboolean isStatic(); // Will all calls to TargetSource.getTarget() return the same object?\n\tvoid releaseTarget(Object target); // Release the given target object obtained from the TargetSource.getTarget() method, if any.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // Set the owning BeanFactory.\n\tvoid setTargetBeanName(String targetBeanName); // Set the name of the target bean in the factory.\n\tvoid setTargetClass(Class<?> targetClass); // Specify the target class explicitly, to avoid any kind of access to the target bean (for example, to avoid initialization of a FactoryBean instance).\n}"}
{"index": 13160, "repo": "spring-test-6.0.11", "des": "Concrete implementation of AbstractGenericWebContextLoader that loads bean definitions from annotated classes.", "code": "public class AnnotationConfigWebContextLoader extends AbstractGenericWebContextLoader {\n\tprotected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass); // Detect the default configuration classes for the supplied test class.\n\tprotected String[] generateDefaultLocations(Class<?> clazz); // AnnotationConfigWebContextLoader should be used as a SmartContextLoader, not as a legacy ContextLoader.\n\tprotected String getResourceSuffix(); // AnnotationConfigWebContextLoader should be used as a SmartContextLoader, not as a legacy ContextLoader.\n\tprotected void loadBeanDefinitions(org.springframework.web.context.support.GenericWebApplicationContext context, WebMergedContextConfiguration webMergedConfig); // Register classes in the supplied context from the classes in the supplied WebMergedContextConfiguration.\n\tprotected String[] modifyLocations(Class<?> clazz, String... locations); // AnnotationConfigWebContextLoader should be used as a SmartContextLoader, not as a legacy ContextLoader.\n\tvoid processContextConfiguration(ContextConfigurationAttributes configAttributes); // Process annotated classes in the supplied ContextConfigurationAttributes.\n\tprotected void validateMergedContextConfiguration(WebMergedContextConfiguration webMergedConfig); // Ensure that the supplied WebMergedContextConfiguration does not contain locations.\n}"}
{"index": 4551, "repo": "beam-sdks-java-core-2.49.0", "des": "Triggers control when the elements for a specific key and window are output.", "code": "Class Trigger {\n\tboolean equals(@Nullable java.lang.Object obj);\n\tTrigger getContinuationTrigger(); // Return a trigger to use after a GroupByKey to preserve the intention of this trigger.\n\tprotected abstract Trigger getContinuationTrigger(java.util.List<Trigger> continuationTriggers); // Subclasses should override this to return the getContinuationTrigger() of this Trigger.\n\tabstract org.joda.time.Instant getWatermarkThatGuaranteesFiring(BoundedWindow window); // For internal use only; no backwards-compatibility guarantees.\n\tboolean isCompatible(Trigger other); // For internal use only; no backwards-compatibility guarantees.\n\tabstract boolean mayFinish(); // For internal use only; no backwards-compatibility guarantees.\n\tOrFinallyTrigger orFinally(Trigger.OnceTrigger until); // Specify an ending condition for this trigger.\n\tjava.util.List<Trigger> subTriggers();\n}"}
{"index": 1449, "repo": "pdfbox-3.0.0-beta1", "des": "f Fill path using non zero winding rule.", "code": "Class FillNonZeroRule {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> operands); // Process the operator.\n}"}
{"index": 4305, "repo": "beam-sdks-java-core-2.49.0", "des": "A CollectionCoder encodes Collections in the format of IterableLikeCoder.", "code": "Class CollectionCoder<T> {\n\tprotected java.util.Collection<T> decodeToIterable(java.util.List<T> decodedElements); // Builds an instance of IterableT, this coder's associated Iterable-like subtype, from a list of decoded elements.\n\tTypeDescriptor<java.util.Collection<T>> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tstatic <T> CollectionCoder<T> of(Coder<T> elemCoder);\n}"}
{"index": 17251, "repo": "groovy-4.0.13", "des": "Helping to create a few standard AST constructs", "code": "public class AstHelper extends Object {\n\tstatic ExpressionStatement createVariableAlias(String aliasName, ClassNode variableType, String variableName);\n\tstatic ExpressionStatement createVariableDefinition(String variableName, ClassNode variableType, Expression value);\n\tstatic ExpressionStatement createVariableDefinition(String variableName, ClassNode variableType, Expression value, boolean variableShouldBeFinal);\n\tstatic VariableExpression createVariableReference(Map<String,?> variableSpec);\n\tstatic Statement recurByThrowStatement(); // This statement will throw exception which will be caught and redirected to jump to surrounding while loop's start label Also works from within Closures but is a tiny bit slower\n\tstatic Statement recurStatement(); // This statement should make the code jump to surrounding while loop's start label Does not work from within Closures\n}"}
{"index": 12061, "repo": "jena-core-4.9.0", "des": "This interface collects together the operations on the InfGraph which are needed to support the forward rule engine.", "code": "public interface ForwardRuleInfGraphI extends InfGraph, SilentAddI {\n\tvoid addBRule(Rule brule); // Adds a new Backward rule as a rules of a forward rule process.\n\tvoid addDeduction(Triple t); // Add a new deduction to the deductions graph.\n\tvoid deleteBRule(Rule brule); // Deletes a new Backward rule as a rules of a forward rule process.\n\tExtendedIterator<Triple> findDataMatches(Node subject, Node predicate, Node object); // Search the combination of data and deductions graphs for the given triple pattern.\n\tGraph getCurrentDeductionsGraph(); // Return the Graph containing all the static deductions available so far.\n\tGraph getDeductionsGraph(); // Return the Graph containing all the static deductions available so far.\n\tvoid logDerivation(Triple t, Derivation derivation); // Logger a derivation record against the given triple.\n\tvoid setFunctorFiltering(boolean param); // Set to true to cause functor-valued literals to be dropped from rule output.\n\tboolean shouldLogDerivations(); // Return true if derivation logging is enabled.\n\tboolean shouldTrace(); // Return true if tracing should be acted on - i.e.\n}"}
{"index": 13062, "repo": "spring-aop-6.0.11", "des": "Convenient abstract superclass for dynamic method matchers, which do care about arguments at runtime.", "code": "public abstract class DynamicMethodMatcher extends Object implements MethodMatcher {\n\tfinal boolean isRuntime(); // Is this MethodMatcher dynamic, that is, must a final call be made on the MethodMatcher.matches(java.lang.reflect.Method, Class, Object[]) method at runtime even if the 2-arg matches method returns true?\n\tboolean matches(Method method, Class<?> targetClass); // Can override to add preconditions for dynamic matching.\n}"}
{"index": 12401, "repo": "spring-data-couchbase-5.1.2", "des": "Terminating operations invoking the actual get execution.", "code": "public static interface ExecutableFindFromReplicasByIdOperation.TerminatingFindFromReplicasById<T> extends AnyId<T> {\n\tT any(String id); // Finds one document based on the given ID.\n\tCollection<? extends T> any(Collection<String> ids); // Finds a list of documents based on the given IDs.\n}"}
{"index": 4444, "repo": "beam-sdks-java-core-2.49.0", "des": "A Trigger that executes according to its main trigger until its \"finally\" trigger fires.", "code": "Class OrFinallyTrigger {\n\tprotected Trigger getContinuationTrigger(java.util.List<Trigger> continuationTriggers); // Subclasses should override this to return the Trigger.getContinuationTrigger() of this Trigger.\n\tTrigger getMainTrigger(); // The main trigger, which will continue firing until the \"until\" trigger fires.\n\tTrigger.OnceTrigger getUntilTrigger(); // The trigger that signals termination of this trigger.\n\torg.joda.time.Instant getWatermarkThatGuaranteesFiring(BoundedWindow window); // For internal use only; no backwards-compatibility guarantees.\n\tboolean mayFinish(); // For internal use only; no backwards-compatibility guarantees.\n}"}
{"index": 16824, "repo": "spring-expression-6.0.11", "des": "An expression parser that understands templates.", "code": "public abstract class TemplateAwareExpressionParser extends Object implements ExpressionParser {\n\tprotected abstract Expression doParseExpression(String expressionString, ParserContext context); // Actually parse the expression string and return an Expression object.\n\tExpression parseExpression(String expressionString); // Parse the expression string and return an Expression object you can use for repeated evaluation.\n\tExpression parseExpression(String expressionString, ParserContext context); // Parse the expression string and return an Expression object you can use for repeated evaluation.\n}"}
{"index": 4506, "repo": "beam-sdks-java-core-2.49.0", "des": "SchemaCoder is used as the coder for types that have schemas registered.", "code": "Class SchemaCoder<T> {\n\tstatic <T> Coder<T> coderForFieldType(Schema.FieldType fieldType);\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tT decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(T value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tboolean equals(@Nullable java.lang.Object o);\n\tTypeDescriptor<T> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tSerializableFunction<Row,T> getFromRowFunction(); // Returns the toRow conversion function.\n\tSchema getSchema(); // Returns the schema associated with this type.\n\tSerializableFunction<T,Row> getToRowFunction(); // Returns the fromRow conversion function.\n\tstatic SchemaCoder<Row> of(Schema schema); // Returns a SchemaCoder for Row instances with the given schema.\n\tstatic <T> SchemaCoder<T> of(Schema schema, TypeDescriptor<T> typeDescriptor, SerializableFunction<T,Row> toRowFunction, SerializableFunction<Row,T> fromRowFunction); // Returns a SchemaCoder for the specified class.\n\tstatic void overrideEncodingPositions(java.util.UUID uuid, java.util.Map<java.lang.String,java.lang.Integer> encodingPositions); // Override encoding positions for the given schema.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 12570, "repo": "spring-jdbc-6.0.11", "des": "Interface that defines common functionality for objects that can offer parameter values for named SQL parameters, serving as argument for NamedParameterJdbcTemplate operations.", "code": "public interface SqlParameterSource {\n\tdefault String[] getParameterNames(); // Enumerate all available parameter names if possible.\n\tdefault int getSqlType(String paramName); // Determine the SQL type for the specified named parameter.\n\tdefault String getTypeName(String paramName); // Determine the type name for the specified named parameter.\n\tObject getValue(String paramName); // Return the parameter value for the requested named parameter.\n\tboolean hasValue(String paramName); // Determine whether there is a value for the specified named parameter.\n}"}
{"index": 11141, "repo": "tribuo-core-4.3.1", "des": "A MutableSequenceDataset is a SequenceDataset with a MutableFeatureMap which grows over time.", "code": "public class MutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T> {\n\tvoid add(SequenceExample<T> ex); // Adds a SequenceExample to this dataset.\n\tvoid addAll(Collection<SequenceExample<T>> collection); // Adds all the SequenceExamples in the supplied collection to this dataset.\n\tvoid clear(); // Clears all the examples out of this dataset, and flushes the FeatureMap, OutputInfo, and transform provenances.\n\tvoid densify(); // Iterates through the examples, converting implicit zeros into explicit zeros.\n\tstatic MutableSequenceDataset<?> deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tImmutableFeatureMap getFeatureIDMap(); // An immutable view on the feature map.\n\tMutableFeatureMap getFeatureMap(); // The feature map.\n\tImmutableOutputInfo<T> getOutputIDInfo(); // An immutable view on the output info in this dataset.\n\tOutputInfo<T> getOutputInfo(); // The output info in this dataset.\n\tSet<T> getOutputs(); // Gets the set of labels that occur in the examples in this dataset.\n\tDatasetProvenance getProvenance();\n\tboolean isDense(); // Is the dataset dense (i.e., do all features in the domain have a value in each example).\n\torg.tribuo.protos.core.SequenceDatasetProto serialize(); // Serializes this object to a protobuf.\n}"}
{"index": 18491, "repo": "gremlin-core-3.6.4", "des": "A result returned from a GremlinScriptChecker.parse(String) of a Gremlin string.", "code": "Class GremlinScriptChecker.Result {\n\tOptional<String> getRequestId(); // Gets the value of the request identifier supplied using the with() source step.\n\tOptional<Long> getTimeout(); // Gets the value of the timeouts that were set using the with() source step.\n}"}
{"index": 14010, "repo": "spring-retry-2.0.2", "des": "Empty method implementation of RetryListener with focus on the AOP reflective method invocations providing convenience retry listener type-safe (with a `MethodInvocationRetryCallback` callback parameter) specific methods.", "code": "public class MethodInvocationRetryListenerSupport extends Object implements RetryListener {\n\t<T, E extends Throwable>void close(RetryContext context, RetryCallback<T,E> callback, Throwable throwable); // Called after the final attempt (successful or not).\n\tprotected <T, E extends Throwable>void doClose(RetryContext context, MethodInvocationRetryCallback<T,E> callback, Throwable throwable); // Called after the final attempt (successful or not).\n\tprotected <T, E extends Throwable>void doOnError(RetryContext context, MethodInvocationRetryCallback<T,E> callback, Throwable throwable); // Called after every unsuccessful attempt at a retry.\n\tprotected <T, E extends Throwable>void doOnSuccess(RetryContext context, MethodInvocationRetryCallback<T,E> callback, T result); // Called after a successful attempt; allow the listener to throw a new exception to cause a retry (according to the retry policy), based on the result returned by the RetryCallback.doWithRetry(RetryContext)\n\tprotected <T, E extends Throwable>boolean doOpen(RetryContext context, MethodInvocationRetryCallback<T,E> callback); // Called before the first attempt in a retry.\n\t<T, E extends Throwable>void onError(RetryContext context, RetryCallback<T,E> callback, Throwable throwable); // Called after every unsuccessful attempt at a retry.\n\t<T, E extends Throwable>void onSuccess(RetryContext context, RetryCallback<T,E> callback, T result); // Called after a successful attempt; allow the listener to throw a new exception to cause a retry (according to the retry policy), based on the result returned by the RetryCallback.doWithRetry(RetryContext)\n\t<T, E extends Throwable>boolean open(RetryContext context, RetryCallback<T,E> callback); // Called before the first attempt in a retry.\n}"}
{"index": 6976, "repo": "calcite-core-1.34.0", "des": "Mapping suitable for mapping columns to a target.", "code": "Interface Mappings.TargetMapping {\n\tint getSourceCount();\n\tint getSourceOpt(int target); // Returns the source that a target maps to, or -1 if it is not mapped.\n\tint getTarget(int source); // Returns the target that a source maps to.\n\tint getTargetCount();\n\tint getTargetOpt(int source); // Returns the target that a source maps to, or -1 if it is not mapped.\n\tMapping inverse();\n\tvoid set(int source, int target);\n}"}
{"index": 5576, "repo": "org.apache.karaf.main-2.4.4", "des": "Update the Conditional Permission Table.", "code": "Interface ConditionalPermissionUpdate {\n\tboolean commit(); // Commit this update.\n\tList<ConditionalPermissionInfo> getConditionalPermissionInfos(); // This method returns the list of ConditionalPermissionInfos for this update.\n}"}
{"index": 6271, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "A MessageSourceSpec for a MailReceivingMessageSource.", "code": "Class MailInboundChannelAdapterSpec<S extends MailInboundChannelAdapterSpec<S,R>,R extends org.springframework.integration.mail.AbstractMailReceiver> {\n\tprotected void assertReceiver();\n\torg.springframework.integration.mail.MailReceivingMessageSource doGet();\n\tS embeddedPartsAsBytes(boolean embeddedPartsAsBytes); // When a header mapper is provided determine whether an embedded Part (e.g Message or Multipart content is rendered as a byte[] in the payload.\n\tjava.util.Collection<java.lang.Object> getComponentsToRegister();\n\tS headerMapper(org.springframework.integration.mapping.HeaderMapper<javax.mail.internet.MimeMessage> headerMapper); // Set the header mapper; if a header mapper is not provided, the message payload is a MimeMessage, when provided, the headers are mapped and the payload is the MimeMessage content.\n\tS javaMailAuthenticator(javax.mail.Authenticator javaMailAuthenticator); // The Java Mail Authenticator.\n\tS javaMailProperties(Consumer<PropertiesBuilder> configurer); // Configure the javaMailProperties by invoking a Consumer callback which is invoked with a PropertiesBuilder.\n\tS javaMailProperties(java.util.Properties javaMailProperties); // The Java Mail properties.\n\tS maxFetchSize(int maxFetchSize); // The maximum for fetch size.\n\tS selector(Function<javax.mail.internet.MimeMessage,java.lang.Boolean> selectorFunction); // Configure a Function to select messages.\n\tS selectorExpression(org.springframework.expression.Expression selectorExpression); // Configure a SpEL expression to select messages.\n\tS selectorExpression(java.lang.String selectorExpression); // Configure a SpEL expression to select messages.\n\tS session(javax.mail.Session session); // Provide the Java Mail Session to use.\n\tS shouldDeleteMessages(boolean shouldDeleteMessages); // A flag to specify if messages should be deleted after receive.\n\tS userFlag(java.lang.String userFlag); // Set the name of the flag to use to flag messages when the server does not support \\Recent but supports user flags; default .\n}"}
{"index": 15417, "repo": "pulsar-client-api-3.0.0", "des": "The compression type that can be specified on a Producer.", "code": "@Public @Stable public enum CompressionType extends Enum<CompressionType> {\n\tstatic CompressionType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic CompressionType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13166, "repo": "spring-test-6.0.11", "des": "Holder class to expose the application events published during the execution of a test in the form of a thread-bound ApplicationEvents object.", "code": "public abstract class ApplicationEventsHolder extends Object {\n\tstatic ApplicationEvents getApplicationEvents(); // Get the ApplicationEvents for the current thread.\n\tstatic ApplicationEvents getRequiredApplicationEvents(); // Get the ApplicationEvents for the current thread.\n}"}
{"index": 12677, "repo": "spring-data-mongodb-4.1.2", "des": "Gateway to convert aggregation operations.", "code": "public class ConvertOperators extends Object {\n\tstatic ConvertOperators.ConvertOperatorFactory valueOf(String fieldReference); // Take the field referenced by given fieldReference.\n\tstatic ConvertOperators.ConvertOperatorFactory valueOf(AggregationExpression expression); // Take the value resulting from the given AggregationExpression.\n}"}
{"index": 10555, "repo": "groovy-all-4.0.13", "des": "Class responsible for the actual String serialization of the possible values of a JSON structure.", "code": "public class JsonOutput extends Object {\n\tstatic String prettyPrint(String jsonPayload); // Pretty print a JSON payload.\n\tstatic String toJson(Closure closure);\n\tstatic String toJson(Expando expando);\n\tstatic String toJson(Boolean bool);\n\tstatic String toJson(Character c);\n\tstatic String toJson(Number n);\n\tstatic String toJson(Object object);\n\tstatic String toJson(String s);\n\tstatic String toJson(URL url);\n\tstatic String toJson(Calendar cal); // Format a calendar instance that is parseable from JavaScript, according to ISO-8601.\n\tstatic String toJson(Date date); // Format a date that is parseable from JavaScript, according to ISO-8601.\n\tstatic String toJson(Map m);\n\tstatic String toJson(UUID uuid);\n\tstatic JsonOutput.JsonUnescaped unescaped(CharSequence text); // Obtains JSON unescaped text for the given text\n}"}
{"index": 11025, "repo": "spring-shell-core-3.1.2", "des": "Base component for selectors which provide selectable lists.", "code": "public abstract class AbstractSelectorComponent<T,C extends AbstractSelectorComponent.SelectorComponentContext<T,I,C>,I extends Nameable & Matchable & Enableable & Selectable & Itemable<T>> extends AbstractComponent<C> {\n\tprotected void bindKeyMap(org.jline.keymap.KeyMap<String> keyMap); // Bind key map.\n\tFunction<T,String> getItemMapper(); // Gets an item mapper.\n\tprotected List<I> getItems(); // Gets items.\n\tprotected boolean read(org.jline.keymap.BindingReader bindingReader, org.jline.keymap.KeyMap<String> keyMap, C context); // Read input.\n\tprotected C runInternal(C context); // Run internal logic called from public run method.\n\tvoid setDefaultExpose(I defaultExpose); // Sets default expose item when component start.\n\tvoid setItemMapper(Function<T,String> itemMapper); // Sets an item mapper.\n\tvoid setMaxItems(int maxItems); // Set max items to show.\n}"}
{"index": 13501, "repo": "spring-messaging-6.0.11", "des": "No-op resolver for method arguments of type Continuation.", "code": "public class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message); // Resolves a method parameter into an argument value from a given message.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 1774, "repo": "kafka-clients-3.5.0", "des": "A scheme for calculating the bins where the width of each bin is one more than the previous bin, and therefore the bin widths are increasing at a linear rate.", "code": "Class Histogram.LinearBinScheme {\n\tint bins(); // Get the number of bins.\n\tdouble fromBin(int b); // Determine the value at the upper range of the specified bin.\n\tint toBin(double x); // Determine the 0-based bin number in which the supplied value should be placed.\n}"}
{"index": 10212, "repo": "spring-core-6.0.11", "des": "Abstract base class for PropertySource implementations backed by command line arguments.", "code": "public abstract class CommandLinePropertySource<T> extends EnumerablePropertySource<T> {\n\tprotected abstract boolean containsOption(String name); // Return whether the set of option arguments parsed from the command line contains an option with the given name.\n\tfinal boolean containsProperty(String name); // This implementation first checks to see if the name specified is the special \"non-option arguments\" property, and if so delegates to the abstract getNonOptionArgs() method checking to see whether it returns an empty collection.\n\tprotected abstract List<String> getNonOptionArgs(); // Return the collection of non-option arguments parsed from the command line.\n\tprotected abstract List<String> getOptionValues(String name); // Return the collection of values associated with the command line option having the given name.\n\tfinal String getProperty(String name); // This implementation first checks to see if the name specified is the special \"non-option arguments\" property, and if so delegates to the abstract getNonOptionArgs() method.\n\tvoid setNonOptionArgsPropertyName(String nonOptionArgsPropertyName); // Specify the name of the special \"non-option arguments\" property.\n}"}
{"index": 3990, "repo": "zookeeper-3.8.2", "des": "Abstraction that interprets the ephemeralOwner field of a ZNode.", "code": "Enum EphemeralType {\n\tstatic boolean extendedEphemeralTypesEnabled(); // Return true if extended ephemeral types are enabled\n\tstatic EphemeralType get(long ephemeralOwner); // Convert a ZNode ephemeral owner to an ephemeral type.\n\tlong getValue(long ephemeralOwner); // For types that support it, return the extended value from an extended ephemeral owner\n\tlong maxValue(); // For types that support it, the maximum extended value\n\tlong toEphemeralOwner(long value); // For types that support it, convert a value to an extended ephemeral owner\n\tstatic void validateServerId(long serverId); // Make sure the given server ID is compatible with the current extended ephemeral setting\n\tstatic void validateTTL(CreateMode mode, long ttl); // Utility to validate a create mode and a ttl\n\tstatic EphemeralType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic EphemeralType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10366, "repo": "spring-core-6.0.11", "des": "A collection of ResourcePatternHint describing whether resources should be made available at runtime using a matching algorithm based on include/exclude patterns.", "code": "public final class ResourcePatternHints extends Object {\n\tList<ResourcePatternHint> getExcludes(); // Return the exclude patterns to use to identify the resources to match.\n\tList<ResourcePatternHint> getIncludes(); // Return the include patterns to use to identify the resources to match.\n}"}
{"index": 8082, "repo": "commons-compress-1.23.0", "des": "A PopulationCodec is a Codec that is well suited to encoding data that shows statistical or repetitive patterns, containing for example a few numbers which are repeated a lot throughout the set, but not necessarily sequentially.", "code": "Class PopulationCodec {\n\tint decode(InputStream in); // Decode a sequence of bytes from the given input stream, returning the value as a long.\n\tint decode(InputStream in, long last); // Decode a sequence of bytes from the given input stream, returning the value as a long.\n\tint[] decodeInts(int n, InputStream in); // Decodes a sequence of n values from in.\n\tbyte[] encode(int value); // Encode a single value into a sequence of bytes.\n\tbyte[] encode(int[] favoured, int[] tokens, int[] unfavoured);\n\tbyte[] encode(int value, int last); // Encode a single value into a sequence of bytes.\n\tint[] getFavoured();\n\tCodec getFavouredCodec();\n\tCodec getTokenCodec();\n\tCodec getUnfavouredCodec();\n}"}
{"index": 10656, "repo": "groovy-all-4.0.13", "des": "A generic servlet for serving (mostly HTML) templates.", "code": "public class TemplateServlet extends AbstractHttpServlet {\n\tprotected Template getTemplate(File file); // Gets the template created by the underlying engine parsing the request.\n\tprotected Template getTemplate(URL url); // Gets the template created by the underlying engine parsing the request.\n\tvoid init(ServletConfig config); // Initializes the servlet from hints the container passes.\n\tprotected TemplateEngine initTemplateEngine(ServletConfig config); // Creates the template engine.\n\tvoid service(HttpServletRequest request, HttpServletResponse response); // Services the request with a response.\n}"}
{"index": 2286, "repo": "hive-exec-4.0.0-alpha-2", "des": "This class is for managing multiple tez sessions particularly when HiveServer2 is being used to submit queries.", "code": "Class TezSessionPoolManager {\n\tvoid closeAndReopenExpiredSession(org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolSession oldSession); // Closes a running (expired) pool session and reopens it.\n\tstatic void closeIfNotDefault(TezSessionState tezSessionState, boolean keepTmpDir);\n\tvoid closeNonDefaultSessions();\n\tprotected org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolSession createSession(String sessionId, HiveConf conf);\n\tvoid destroy(TezSessionState tezSessionState); // This is called only in extreme cases where even our retry of submit fails.\n\torg.apache.hadoop.hive.ql.exec.tez.SessionExpirationTracker getExpirationTracker();\n\tstatic TezSessionPoolManager getInstance(); // Note: this is not thread-safe.\n\tTezSessionState getSession(TezSessionState session, HiveConf conf, boolean doOpen, boolean llap);\n\tvoid initTriggers(HiveConf conf);\n\tvoid registerOpenSession(org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolSession session); // Called by TezSessionPoolSession when opened.\n\tTezSessionState reopen(TezSessionState sessionState); // Reopens the session that was found to not be running.\n\tvoid returnAfterUse(org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolSession session);\n\tvoid setupNonPool(HiveConf conf);\n\tvoid setupPool(HiveConf conf);\n\tvoid startPool(HiveConf conf, org.apache.hadoop.hive.metastore.api.WMFullResourcePlan resourcePlan);\n\tvoid stop();\n\tvoid unregisterOpenSession(org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolSession session); // Called by TezSessionPoolSession when closed.\n\tCollection<String> updateTriggers(org.apache.hadoop.hive.metastore.api.WMFullResourcePlan appliedRp);\n}"}
{"index": 17791, "repo": "spring-web-6.0.11", "des": "Decode from a bytes stream containing XML elements to a stream of Objects (POJOs).", "code": "public class Jaxb2XmlDecoder extends org.springframework.core.codec.AbstractDecoder<Object> {\n\tboolean canDecode(org.springframework.core.ResolvableType elementType, org.springframework.util.MimeType mimeType);\n\treactor.core.publisher.Flux<Object> decode(Publisher<org.springframework.core.io.buffer.DataBuffer> inputStream, org.springframework.core.ResolvableType elementType, org.springframework.util.MimeType mimeType, Map<String,Object> hints);\n\tObject decode(org.springframework.core.io.buffer.DataBuffer dataBuffer, org.springframework.core.ResolvableType targetType, org.springframework.util.MimeType mimeType, Map<String,Object> hints);\n\treactor.core.publisher.Mono<Object> decodeToMono(Publisher<org.springframework.core.io.buffer.DataBuffer> input, org.springframework.core.ResolvableType elementType, org.springframework.util.MimeType mimeType, Map<String,Object> hints);\n\tint getMaxInMemorySize(); // Return the configured byte count limit.\n\tFunction<Unmarshaller,Unmarshaller> getUnmarshallerProcessor(); // Return the configured processor for customizing Unmarshaller instances.\n\tvoid setMaxInMemorySize(int byteCount); // Set the max number of bytes that can be buffered by this decoder.\n\tvoid setUnmarshallerProcessor(Function<Unmarshaller,Unmarshaller> processor); // Configure a processor function to customize Unmarshaller instances.\n}"}
{"index": 9221, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Set of configuration properties that can be injected into the service components via envs, files and custom pluggable helper docker containers.", "code": "Class AuxServiceConfiguration {\n\tboolean equals(Object o);\n\tAuxServiceConfiguration files(List<AuxServiceFile> fileList); // Array of list of files that needs to be created and made available as volumes in the service component containers.\n\tList<AuxServiceFile> getFiles();\n\tMap<String,String> getProperties();\n\tString getProperty(String name);\n\tString getProperty(String name, String defaultValue);\n\tAuxServiceConfiguration properties(Map<String,String> props); // A blob of key-value pairs of common service properties.\n\tvoid setFiles(List<AuxServiceFile> files);\n\tvoid setProperties(Map<String,String> properties);\n\tvoid setProperty(String name, String value);\n}"}
{"index": 17899, "repo": "spring-web-6.0.11", "des": "Represents a reactive server-side HTTP request.", "code": "public interface ServerHttpRequest extends HttpRequest, ReactiveHttpInputMessage {\n\torg.springframework.util.MultiValueMap<String,HttpCookie> getCookies(); // Return a read-only map of cookies sent by the client.\n\tString getId(); // Return an id that represents the underlying connection, if available, or the request for the purpose of correlating log messages.\n\tdefault InetSocketAddress getLocalAddress(); // Return the local address the request was accepted on, if available.\n\tRequestPath getPath(); // Returns a structured representation of the full request path up to but not including the query.\n\torg.springframework.util.MultiValueMap<String,String> getQueryParams(); // Return a read-only map with parsed and decoded query parameter values.\n\tdefault InetSocketAddress getRemoteAddress(); // Return the remote address where this request is connected to, if available.\n\tdefault SslInfo getSslInfo(); // Return the SSL session information if the request has been transmitted over a secure protocol including SSL certificates, if available.\n\tdefault ServerHttpRequest.Builder mutate(); // Return a builder to mutate properties of this request by wrapping it with ServerHttpRequestDecorator and returning either mutated values or delegating back to this instance.\n}"}
{"index": 8208, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of XPathOperations that uses Jaxen.", "code": "Class JaxenXPathTemplate {\n\t<T> List<T> evaluate(String expression, Source context, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\tboolean evaluateAsBoolean(String expression, Source context); // Evaluates the given expression as a boolean.\n\tdouble evaluateAsDouble(String expression, Source context); // Evaluates the given expression as a double.\n\tNode evaluateAsNode(String expression, Source context); // Evaluates the given expression as a Node.\n\tList<Node> evaluateAsNodeList(String expression, Source context); // Evaluates the given expression as a list of Node objects.\n\t<T> T evaluateAsObject(String expression, Source context, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping a single Node result to a Java object via a NodeMapper.\n\tString evaluateAsString(String expression, Source context); // Evaluates the given expression as a String.\n}"}
{"index": 18050, "repo": "spring-ws-core-4.0.5", "des": "Strategy interface used to handle method return values.", "code": "public interface MethodReturnValueHandler {\n\tvoid handleReturnValue(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue); // Handles the given return value.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type is supported by this handler.\n}"}
{"index": 14116, "repo": "wicket-core-10.0.0-M1", "des": "An Ajax behavior that notifies when a new browser window/tab is opened with url to a page instance which is already opened in another window/tab in the same user session.", "code": "public class AjaxNewWindowNotifyingBehavior extends AbstractDefaultAjaxBehavior {\n\tString getWindowName(); // Returns the window's name.\n\tprotected String newWindowName(); // Create a name for a nameless window, default uses a random UUID.\n\tprotected void onNewWindow(AjaxRequestTarget target); // A callback method that is called when a new window/tab is opened for a page instance which is already opened in another window/tab.\n\tstatic AjaxNewWindowNotifyingBehavior onNewWindow(org.danekja.java.util.function.serializable.SerializableConsumer<AjaxRequestTarget> onNewWindow); // Creates an AjaxNewWindowNotifyingBehavior based on lambda expressions\n\tvoid renderHead(Component component, IHeaderResponse response); // Overridden to initiate a request once the page was rendered.\n\tprotected void respond(AjaxRequestTarget target);\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes); // Overridden to add the current window name to the request.\n}"}
{"index": 8461, "repo": "commons-io-2.13.0", "des": "Abstracts building a typed instance of T.", "code": "Class AbstractStreamBuilder<T,B extends AbstractStreamBuilder<T,B>> {\n\tprotected int getBufferSize(); // Gets the buffer size, defaults to IOUtils.DEFAULT_BUFFER_SIZE ().\n\tprotected int getBufferSizeDefault(); // Gets the buffer size default, defaults to IOUtils.DEFAULT_BUFFER_SIZE ().\n\tprotected CharSequence getCharSequence(); // Gets a CharSequence from the origin with a Charset.\n\tCharset getCharset(); // Gets the Charset, defaults to Charset.defaultCharset().\n\tprotected Charset getCharsetDefault(); // Gets the Charset default, defaults to Charset.defaultCharset().\n\tprotected InputStream getInputStream(); // Gets an input stream from the origin with open options.\n\tprotected OpenOption[] getOpenOptions();\n\tprotected OutputStream getOutputStream(); // Gets an OutputStream from the origin with open options.\n\tprotected Path getPath(); // Gets a Path from the origin.\n\tprotected Writer getWriter(); // Gets an writer from the origin with open options.\n\tB setBufferSize(int bufferSize); // Sets the buffer size.\n\tB setBufferSize(Integer bufferSize); // Sets the buffer size.\n\tprotected B setBufferSizeDefault(int bufferSizeDefault); // Sets the buffer size for subclasses to initialize.\n\tB setCharset(Charset charset); // Sets the Charset.\n\tB setCharset(String charset); // Sets the Charset.\n\tprotected B setCharsetDefault(Charset defaultCharset); // Sets the Charset default for subclasses to initialize.\n\tB setOpenOptions(OpenOption... openOptions); // Sets the OpenOption[].\n}"}
{"index": 16564, "repo": "spring-beans-6.0.11", "des": "Convenient base class for when there exists a one-to-one mapping between attribute names on the element that is to be parsed and the property names on the Class being configured.", "code": "public abstract class AbstractSimpleBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\tprotected void doParse(Element element, ParserContext parserContext, BeanDefinitionBuilder builder); // Parse the supplied Element and populate the supplied BeanDefinitionBuilder as required.\n\tprotected String extractPropertyName(String attributeName); // Extract a JavaBean property name from the supplied attribute name.\n\tprotected boolean isEligibleAttribute(String attributeName); // Determine whether the given attribute is eligible for being turned into a corresponding bean property value.\n\tprotected boolean isEligibleAttribute(Attr attribute, ParserContext parserContext); // Determine whether the given attribute is eligible for being turned into a corresponding bean property value.\n\tprotected void postProcess(BeanDefinitionBuilder beanDefinition, Element element); // Hook method that derived classes can implement to inspect/change a bean definition after parsing is complete.\n}"}
{"index": 10132, "repo": "spring-hateoas-2.1.2", "des": "Special ResponseEntity that exposes Link instances in the contained RepresentationModel as link headers instead of in the body.", "code": "public class HeaderLinksResponseEntity<T extends RepresentationModel<?>> extends ResponseEntity<T> {\n\tstatic <S extends RepresentationModel<?>>HeaderLinksResponseEntity<S> wrap(HttpEntity<S> entity); // Wraps the given HttpEntity into a HeaderLinksResponseEntity.\n\tstatic <S extends RepresentationModel<?>>HeaderLinksResponseEntity<S> wrap(S entity); // Wraps the given RepresentationModel into a HeaderLinksResponseEntity.\n}"}
{"index": 5417, "repo": "druid-processing-26.0.0", "des": "An interface representing a chunk of RowsAndColumns.", "code": "Interface RowsAndColumns {\n\t<T> T as(Class<T> clazz); // Asks the RowsAndColumns to return itself as a concrete implementation of a specific interface.\n\tstatic AppendableRowsAndColumns expectAppendable(RowsAndColumns input);\n\tColumn findColumn(String name); // Finds a column by name.\n\tCollection<String> getColumnNames(); // The set of column names available from the RowsAndColumns\n\tint numRows(); // The number of rows in the RowsAndColumns object\n}"}
{"index": 2185, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticScalar.", "code": "Class LongColAddLongScalarChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 12597, "repo": "spring-batch-integration-5.0.2", "des": "Convenient factory bean for a chunk handler that also converts an existing chunk-oriented step into a remote chunk manager.", "code": "public class RemoteChunkHandlerFactoryBean<T> extends Object implements org.springframework.beans.factory.FactoryBean<ChunkHandler<T>> {\n\tChunkHandler<T> getObject(); // Builds a ChunkHandler from the ChunkProcessor extracted from the step provided.\n\tClass<?> getObjectType(); // The type of object created by this factory.\n\tboolean isSingleton(); // Optimization for the bean factory (always returns true).\n\tvoid setChunkWriter(org.springframework.batch.item.ItemWriter<T> chunkWriter); // The item writer to be injected into the step.\n\tvoid setStep(TaskletStep step); // The local step that is to be converted to a remote chunk manager.\n\tvoid setStepContributionSource(StepContributionSource stepContributionSource); // A source of StepContribution instances coming back from remote workers.\n\tprotected void updateStepContribution(StepContribution contribution, StepContributionSource stepContributionSource); // Update a StepContribution with all the data from a StepContributionSource.\n}"}
{"index": 17280, "repo": "groovy-4.0.13", "des": "Represents a simple key-value cache, which is thread safe and backed by a Map instance", "code": "@ThreadSafe public class ConcurrentCommonCache<K,V> extends Object implements EvictableCache<K,V>, ValueConvertable<V,Object>, Serializable {\n\tvoid cleanUpNullReferences(); // Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tMap<K,V> clearAll(); // Clear the cache\n\tboolean containsKey(Object key); // Determines if the cache contains an entry for the specified key.\n\tboolean containsValue(Object value);\n\tObject convertValue(V value); // convert the original value to the target value\n\tSet<Map.Entry<K,V>> entrySet();\n\tV get(Object key); // Gets a value from the cache\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider); // Try to get the value from cache.\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider, boolean shouldCache);\n\tboolean isEmpty();\n\tSet<K> keys(); // Get all keys associated to cached values\n\tSet<K> keySet();\n\tV put(K key, V value); // Associates the specified value with the specified key in the cache.\n\tvoid putAll(Map<? extends K,? extends V> m);\n\tV remove(Object key); // Remove the cached value by the key\n\tint size(); // Get the size of the cache\n\tCollection<V> values(); // Get all cached values\n}"}
{"index": 17621, "repo": "spring-ldap-core-3.1.0", "des": "Utility methods for working with LDAP transactions.", "code": "public final class LdapTransactionUtils extends Object {\n\tstatic Name getArgumentAsName(Object arg); // Get the argument as a Name.\n\tstatic Name getFirstArgumentAsName(Object[] args); // Get the first parameter in the argument list as a Name.\n\tstatic boolean isSupportedWriteTransactionOperation(String methodName); // Check whether the supplied method is a method for which transactions is supported (and which should be recorded for possible rollback later).\n}"}
{"index": 3035, "repo": "tink-1.10.0", "des": "An object which collects all the operations which one can do on for a single key type, identified by a single KeyProto.", "code": "Class KeyTypeManager<KeyProtoT extends com.google.protobuf.MessageLite> {\n\tTinkFipsUtil.AlgorithmFipsCompatibility fipsStatus(); // Returns the FIPS compatibility of this KeyTypeManager.\n\tClass<?> firstSupportedPrimitiveClass(); // Returns the first class object of the first supported primitive, or Class<Void> if the key manager supports no primitive at all.\n\tClass<KeyProtoT> getKeyClass(); // Returns the class corresponding to the key protobuffer.\n\tabstract String getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\t<P> P getPrimitive(KeyProtoT key, Class<P> primitiveClass); // Creates the requested primitive.\n\tabstract int getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<?,KeyProtoT> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tabstract KeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tabstract KeyProtoT parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tSet<Class<?>> supportedPrimitives(); // Returns a set containing the supported primitives.\n\tabstract void validateKey(KeyProtoT keyProto); // Checks if the given keyProto is a valid key.\n}"}
{"index": 15351, "repo": "spring-boot-3.1.1", "des": "Simple interface that represents a fully configured RSocket server.", "code": "public interface RSocketServer {\n\tInetSocketAddress address(); // Return the address this server is listening on.\n\tvoid start(); // Starts the RSocket server.\n\tvoid stop(); // Stops the RSocket server.\n}"}
{"index": 8135, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for integrating with JAAS.", "code": "Class AbstractJaasValidationCallbackHandler {\n\tvoid afterPropertiesSet();\n\tString getLoginContextName(); // Returns the login context name.\n\tvoid setLoginContextName(String loginContextName); // Sets the login context name.\n}"}
{"index": 10584, "repo": "groovy-all-4.0.13", "des": "Represents a Method on a Java object a little like Method except without using reflection to invoke the method", "code": "public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n\tvoid checkParameters(Class[] arguments); // Checks that the given parameters are valid to call this method\n\tObject clone();\n\tObject doMethodInvoke(Object object, Object[] argumentArray); // Invokes the method this object represents.\n\tprotected static boolean equal(CachedClass[] a, Class[] b);\n\tprotected static boolean equal(CachedClass[] a, CachedClass[] b);\n\tabstract CachedClass getDeclaringClass(); // Gets the class where this method is declared\n\tString getDescriptor(); // Return a descriptor of this method based on the return type and parameters of this method.\n\tabstract int getModifiers(); // Returns the modifiers for this method\n\tString getMopName();\n\tabstract String getName(); // Returns the name of the method represented by this class\n\tabstract Class getReturnType(); // Access the return type for this method\n\tString getSignature(); // Returns the signature of this method\n\tabstract Object invoke(Object object, Object[] arguments); // Invoke this method\n\tboolean isAbstract(); // Returns whether this method is abstract.\n\tboolean isCacheable(); // Returns whether this object is cacheable\n\tboolean isDefault(); // Returns whether this method is interface-default.\n\tboolean isMethod(MetaMethod method); // Returns true if this metamethod represents the same method as the argument.\n\tfinal boolean isPrivate(); // Returns whether this method is private.\n\tfinal boolean isProtected(); // Returns whether this method is protected.\n\tfinal boolean isPublic(); // Returns whether this method is public.\n\tfinal boolean isSame(MetaMethod method);\n\tboolean isStatic(); // Returns whether this method is static.\n\tfinal RuntimeException processDoMethodInvokeException(Exception e, Object object, Object[] argumentArray); // This method is called when an exception occurs while invoking this method.\n}"}
{"index": 1691, "repo": "samza-api-1.8.0", "des": "A statistical snapshot of a collection of values.", "code": "Class Snapshot {\n\tdouble getAverage(); // Get the average of the values in the collection\n\tlong getMax(); // Get the maximum value in the collection\n\tlong getMin(); // Get the minimum value in the collection\n\tint getSize(); // Get the number of values in the collection\n\tdouble getSum(); // Get the sum of values in the collection\n\tjava.util.ArrayList<java.lang.Long> getValues(); // Return the entire list of values\n}"}
{"index": 1836, "repo": "nifi-web-api-0.5.0", "des": "Audits processor creation/removal and configuration changes.", "code": "Class ProcessorAuditor {\n\tProcessorNode createProcessorAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint); // Audits the creation of processors via createProcessor().\n\tprivate Map<String,String> extractConfiguredPropertyValues(ProcessorNode processor, ProcessorDTO processorDTO); // Extracts the values for the configured properties from the specified Processor.\n\tAction generateAuditRecord(ProcessorNode processor, Operation operation); // Generates an audit record for the creation of a processor.\n\tAction generateAuditRecord(ProcessorNode processor, Operation operation, ActionDetails actionDetails); // Generates an audit record for the creation of a processor.\n\tprivate PropertyDescriptor locatePropertyDescriptor(Set<PropertyDescriptor> propertyDescriptors, PropertyDescriptor specDescriptor); // Locates the actual property descriptor for the given spec property descriptor.\n\tvoid removeProcessorAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint, String groupId, String processorId, ProcessorDAO processorDAO); // Audits the removal of a processor via deleteProcessor().\n\tProcessorNode updateProcessorAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint, String groupId, ProcessorDTO processorDTO, ProcessorDAO processorDAO); // Audits the configuration of a single processor.\n}"}
{"index": 5992, "repo": "commons-lang3-3.12.0", "des": "A functional interface like ToDoubleFunction that declares a Throwable.", "code": "Interface FailableToDoubleFunction<T,E extends Throwable> {\n\tdouble applyAsDouble(T t); // Applies this function to the given arguments.\n\tstatic <T,E extends Throwable>FailableToDoubleFunction<T,E> nop(); // Returns The NOP singleton.\n}"}
{"index": 7831, "repo": "cassandra-all-4.1.2", "des": "ThreadLocal state for a tracing session.", "code": "Class TraceState {\n\tboolean acquireReference();\n\tvoid addProgressListener(ProgressListener listener); // Register progress listener to this publisher.\n\tint elapsed();\n\tvoid enableActivityNotification(java.lang.String tag); // Activate notification with provided tag name.\n\tprotected void notifyActivity();\n\tint releaseReference();\n\tvoid removeProgressListener(ProgressListener listener); // Remove progress listener from this publisher.\n\tvoid stop();\n\tvoid trace(java.lang.String message);\n\tvoid trace(java.lang.String format, java.lang.Object... args);\n\tvoid trace(java.lang.String format, java.lang.Object arg);\n\tvoid trace(java.lang.String format, java.lang.Object arg1, java.lang.Object arg2);\n\tprotected abstract void traceImpl(java.lang.String message);\n\tTraceState.Status waitActivity(long timeout);\n\tprotected void waitForPendingEvents();\n}"}
{"index": 10146, "repo": "spring-hateoas-2.1.2", "des": "SPI used to register internal media types through spring.factories.", "code": "public interface MediaTypeConfigurationProvider {\n\tClass<? extends HypermediaMappingInformation> getConfiguration(); // Returns the primary Spring configuration class to be bootstrapped for the given media type.\n\tboolean supportsAny(Collection<MediaType> mediaTypes); // Returns whether the provider supports any of the given MediaTypes.\n}"}
{"index": 1839, "repo": "nifi-web-api-0.5.0", "des": "Implements the NiFiWebConfigurationContext interface to support a context in both standalone and clustered environments.", "code": "Class StandardNiFiWebConfigurationContext {\n\tprivate void checkResponse(NodeResponse nodeResponse, String id); // Checks the specified response and drains the stream appropriately.\n\tComponentDetails getComponentDetails(NiFiWebRequestContext requestContext);\n\tControllerService getControllerService(String serviceIdentifier);\n\tString getCurrentUserDn();\n\tString getCurrentUserName();\n\tprivate Map<String,String> getHeaders(NiFiWebRequestContext config); // Gets the headers for the request to replicate to each node while clustered.\n\tvoid saveActions(NiFiWebRequestContext requestContext, Collection<ConfigurationAction> configurationActions);\n\tComponentDetails setAnnotationData(NiFiWebConfigurationRequestContext requestContext, String annotationData);\n\tvoid setAuditService(AuditService auditService);\n\tvoid setClusterManager(WebClusterManager clusterManager);\n\tvoid setControllerServiceLookup(ControllerServiceLookup controllerServiceLookup);\n\tvoid setProperties(NiFiProperties properties);\n\tvoid setReportingTaskProvider(ReportingTaskProvider reportingTaskProvider);\n\tvoid setServiceFacade(NiFiServiceFacade serviceFacade);\n}"}
{"index": 2818, "repo": "tika-parsers-1.28.5", "des": "This class is used to represent a PropertySet.", "code": "Class PropertySet {\n\tint doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the PropertySet from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of PropertySet into a byte List.\n}"}
{"index": 6393, "repo": "spring-data-solr-4.3.15", "des": "Operations interface for executing modification on a managed schema.", "code": "Interface SchemaOperations {\n\tvoid addField(SchemaDefinition.SchemaField field); // Add given SchemaDefinition.SchemaField.\n\tString getSchemaName(); // Get the current schema name.\n\tDouble getSchemaVersion(); // Get the current schema version.\n\tSchemaDefinition readSchema(); // Read back the SchemaDefinition from server.\n\tvoid removeField(String name); // Remove the field with given name.\n}"}
{"index": 11218, "repo": "wicket-extensions-10.0.0-M1", "des": "A component that wraps markup with an OrderByLink.", "code": "public class OrderByBorder<S> extends org.apache.wicket.markup.html.border.Border {\n\tprotected OrderByLink<S> newOrderByLink(String id, S property, ISortStateLocator<S> stateLocator); // create new sort order toggling link\n\tvoid onComponentTag(org.apache.wicket.markup.ComponentTag tag);\n\tprotected void onSortChanged(); // This method is a hook for subclasses to perform an action after sort has changed\n}"}
{"index": 83, "repo": "commons-collections4-4.4", "des": "Decorates another MultSet to provide additional behaviour.", "code": "Class AbstractMultiSetDecorator<E> {\n\tint add(E object, int count); // Adds a number of occurrences of the specified object to the MultiSet.\n\tprotected MultiSet<E> decorated(); // Gets the multiset being decorated.\n\tSet<MultiSet.Entry<E>> entrySet(); // Returns a Set of all entries contained in the MultiSet.\n\tboolean equals(Object object); // Compares this MultiSet to another object.\n\tint getCount(Object object); // Returns the number of occurrences of the given object currently in the MultiSet.\n\tint remove(Object object, int count); // Removes a number of occurrences of the specified object from the MultiSet.\n\tint setCount(E object, int count); // Sets the number of occurrences of the specified object in the MultiSet to the given count.\n\tSet<E> uniqueSet(); // Returns a Set of unique elements in the MultiSet.\n}"}
{"index": 7524, "repo": "cassandra-all-4.1.2", "des": "Bin log is a is quick and dirty binary log that is kind of a NIH version of binary logging with a traditional logging framework.", "code": "Class BinLog {\n\tstatic java.lang.Throwable cleanDirectory(File directory, java.lang.Throwable accumulate);\n\tvoid finalize(); // There is a race where we might not release a buffer, going to let finalization catch it since it shouldn't happen to a lot of buffers.\n\tBinLogOptions getBinLogOptions();\n\tvoid logRecord(BinLog.ReleaseableWriteMarshallable record);\n\tboolean offer(BinLog.ReleaseableWriteMarshallable record); // Offer a record to the log.\n\tvoid put(BinLog.ReleaseableWriteMarshallable record); // Put a record into the log.\n\tvoid run();\n\tvoid stop(); // Stop the consumer thread that writes log records.\n}"}
{"index": 11288, "repo": "spring-context-6.0.11", "des": "Strategy interface for parsing known caching annotation types.", "code": "public interface CacheAnnotationParser {\n\tdefault boolean isCandidateClass(Class<?> targetClass); // Determine whether the given class is a candidate for cache operations in the annotation format of this CacheAnnotationParser.\n\tCollection<CacheOperation> parseCacheAnnotations(Class<?> type); // Parse the cache definition for the given class, based on an annotation type understood by this parser.\n\tCollection<CacheOperation> parseCacheAnnotations(Method method); // Parse the cache definition for the given method, based on an annotation type understood by this parser.\n}"}
{"index": 15995, "repo": "wicket-util-10.0.0-M1", "des": "A converter that takes a mask into account.", "code": "public class MaskConverter<C> extends Object implements IConverter<C> {\n\tC convertToObject(String value, Locale locale); // Converts a string to an object using MaskFormatter.stringToValue(String).\n\tString convertToString(C value, Locale locale); // Converts the value to a string using MaskFormatter.valueToString(Object).\n}"}
{"index": 7522, "repo": "cassandra-all-4.1.2", "des": "A BATCH statement parsed from a CQL query.", "code": "Class BatchStatement {\n\tvoid authorize(ClientState state); // Perform any access verification necessary for the statement.\n\tResultMessage execute(QueryState queryState, BatchQueryOptions options, long queryStartNanoTime);\n\tResultMessage execute(QueryState queryState, QueryOptions options, long queryStartNanoTime); // Execute the statement and return the resulting result or null if there is no result.\n\tResultMessage executeLocally(QueryState queryState, QueryOptions options); // Variant of execute used for internal query against the system tables, and thus only query the local node.\n\tAuditLogContext getAuditLogContext(); // Provides the context needed for audit logging statements.\n\tjava.util.List<ColumnSpecification> getBindVariables(); // Returns all bind variables for the statement\n\tjava.lang.Iterable<Function> getFunctions(); // Return an Iterable over all of the functions (both native and user-defined) used by any component of the statement\n\tjava.util.List<? extends IMutation> getMutations(ClientState state, BatchQueryOptions options, boolean local, long batchTimestamp, int nowInSeconds, long queryStartNanoTime);\n\tshort[] getPartitionKeyBindVariableIndexes(); // Returns an array with the same length as the number of partition key columns for the table corresponding to table.\n\tjava.util.List<ModificationStatement> getStatements();\n\tboolean hasConditions(); // Whether or not this CQL Statement has LWT conditions\n\tvoid validate();\n\tvoid validate(ClientState state); // Perform additional validation required by the statment.\n}"}
{"index": 2503, "repo": "exoplayer-r2.3.1", "des": "Initialization data for one or more DRM schemes.", "code": "Class DrmInitData {\n\tint compare(DrmInitData.SchemeData first, DrmInitData.SchemeData second);\n\tint describeContents();\n\tboolean equals(java.lang.Object obj);\n\tDrmInitData.SchemeData get(int index); // Retrieves the DrmInitData.SchemeData at a given index.\n\tDrmInitData.SchemeData get(java.util.UUID uuid); // Retrieves data for a given DRM scheme, specified by its UUID.\n\tvoid writeToParcel(android.os.Parcel dest, int flags);\n}"}
{"index": 1140, "repo": "ignite-core-2.15.0", "des": "Represent a reason by that a WAL history was bounded.", "code": "Enum ReservationReason {\n\tstatic ReservationReason valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ReservationReason[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3725, "repo": "kafka-streams-3.5.0", "des": "A store supplier that can be used to create one or more SessionStore<Byte, byte[]> instances.", "code": "Interface SessionBytesStoreSupplier {\n\tlong retentionPeriod(); // The time period for which the SessionStore will retain historic data.\n\tlong segmentIntervalMs(); // The size of a segment, in milliseconds.\n}"}
{"index": 16919, "repo": "spring-integration-ip-6.1.2", "des": "Message Mapper for converting to and from UDP DatagramPackets.", "code": "public class DatagramPacketMessageMapper extends Object implements org.springframework.integration.mapping.InboundMessageMapper<DatagramPacket>, org.springframework.integration.mapping.OutboundMessageMapper<DatagramPacket>, org.springframework.beans.factory.BeanFactoryAware {\n\tDatagramPacket fromMessage(org.springframework.messaging.Message<?> message); // Raw byte[] from message, possibly with a length field up front.\n\tprotected org.springframework.integration.support.MessageBuilderFactory getMessageBuilderFactory();\n\tvoid setAckAddress(String ackAddress);\n\tvoid setAcknowledge(boolean acknowledge);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setCharset(String charset);\n\tvoid setLengthCheck(boolean lengthCheck);\n\tvoid setLookupHost(boolean lookupHost); // If true, DNS reverse lookup is done on the remote ip address.\n\torg.springframework.messaging.Message<byte[]> toMessage(DatagramPacket object);\n\torg.springframework.messaging.Message<byte[]> toMessage(DatagramPacket packet, Map<String,Object> headers);\n}"}
{"index": 3919, "repo": "hudi-client-0.6.0", "des": "Cleaner is responsible for garbage collecting older files in a given partition path.", "code": "Class CleanPlanner<T extends HoodieRecordPayload<T>> {\n\tList<CleanFileInfo> getDeletePaths(String partitionPath); // Returns files to be cleaned for the given partitionPath based on cleaning policy.\n\tOption<HoodieInstant> getEarliestCommitToRetain(); // Returns earliest commit to retain based on cleaning policy.\n\tList<String> getPartitionPathsToClean(Option<HoodieInstant> newInstantToRetain); // Returns list of partitions where clean operations needs to be performed.\n\tStream<String> getSavepointedDataFiles(String savepointTime); // Get the list of data file names savepointed.\n}"}
{"index": 148, "repo": "commons-collections4-4.4", "des": "Decorates another List to fix the size preventing add/remove.", "code": "Class FixedSizeList<E> {\n\tboolean add(E object);\n\tvoid add(int index, E object);\n\tboolean addAll(Collection<? extends E> coll);\n\tboolean addAll(int index, Collection<? extends E> coll);\n\tvoid clear();\n\tstatic <E> FixedSizeList<E> fixedSizeList(List<E> list); // Factory method to create a fixed size list.\n\tE get(int index);\n\tint indexOf(Object object);\n\tboolean isFull(); // Returns true if this collection is full and no new elements can be added.\n\tIterator<E> iterator();\n\tint lastIndexOf(Object object);\n\tListIterator<E> listIterator();\n\tListIterator<E> listIterator(int index);\n\tint maxSize(); // Gets the maximum size of the collection (the bound).\n\tE remove(int index);\n\tboolean remove(Object object);\n\tboolean removeAll(Collection<?> coll);\n\tboolean removeIf(Predicate<? super E> filter);\n\tboolean retainAll(Collection<?> coll);\n\tE set(int index, E object);\n\tList<E> subList(int fromIndex, int toIndex);\n}"}
{"index": 18172, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Specialized DomainDataCachingConfig describing the requested caching config for a particular entity hierarchy's state data", "code": "Interface EntityDataCachingConfig {\n\tjava.util.Set<NavigableRole> getCachedTypes(); // The list of specific subclasses of the root that are actually written to cache.\n\tjava.util.function.Supplier<java.util.Comparator> getVersionComparatorAccess(); // Access to the comparator to be used with the entity's version.\n\tboolean isVersioned(); // Mainly here to allow optimization of not having to know the actual comparator instance to use here yet.\n}"}
{"index": 16515, "repo": "spring-batch-infrastructure-5.0.2", "des": "Line-tokenizer using a regular expression to filter out data (by using matching and non-matching groups).", "code": "public class RegexLineTokenizer extends AbstractLineTokenizer {\n\tprotected List<String> doTokenize(String line);\n\tvoid setPattern(Pattern pattern); // Sets the regex pattern to use.\n\tvoid setRegex(String regex); // Sets the regular expression to use.\n}"}
{"index": 11150, "repo": "tribuo-core-4.3.1", "des": "This class creates a pruned dataset which only contains the selected features.", "code": "public final class SelectedFeatureDataset<T extends Output<T>> extends ImmutableDataset<T> {\n\tstatic SelectedFeatureDataset<?> deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tSelectedFeatureSet getFeatureSet(); // The feature set.\n\tint getK(); // The number of features to use.\n\tint getNumExamplesRemoved(); // The number of examples removed due to a lack of features.\n\tDatasetProvenance getProvenance();\n\tSet<String> getSelectedFeatures(); // The subset of the selected feature set.\n\torg.tribuo.protos.core.DatasetProto serialize(); // Serializes this object to a protobuf.\n}"}
{"index": 6054, "repo": "jackson-databind-2.15.2", "des": "VirtualBeanPropertyWriter implementation used for JsonAppend, to serialize properties backed-by dynamically assignable attribute values.", "code": "Class AttributePropertyWriter {\n\tstatic AttributePropertyWriter construct(String attrName, BeanPropertyDefinition propDef, Annotations contextAnnotations, JavaType declaredType);\n\tprotected Object value(Object bean, JsonGenerator jgen, SerializerProvider prov); // Method called to figure out the value to serialize.\n\tVirtualBeanPropertyWriter withConfig(MapperConfig<?> config, AnnotatedClass declaringClass, BeanPropertyDefinition propDef, JavaType type); // Since this method should typically not be called on this sub-type, default implementation simply throws an IllegalStateException.\n}"}
{"index": 15222, "repo": "spring-boot-3.1.1", "des": "Provide build-related information such as group and artifact.", "code": "@ImportRuntimeHints(org.springframework.boot.info.BuildProperties.BuildPropertiesRuntimeHints.class) public class BuildProperties extends InfoProperties {\n\tString getArtifact(); // Return the artifactId of the project or null.\n\tString getGroup(); // Return the groupId of the project or null.\n\tString getName(); // Return the name of the project or null.\n\tInstant getTime(); // Return the timestamp of the build or null.\n\tString getVersion(); // Return the version of the project or null.\n}"}
{"index": 18225, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Describes an input value binding for any IN/INOUT parameters.", "code": "Interface ParameterBind<T> {\n\tTemporalType getExplicitTemporalType(); // If <T> represents a DATE/TIME type value, JPA usually allows specifying the particular parts of the DATE/TIME value to be bound.\n\tT getValue(); // Retrieves the bound value.\n}"}
{"index": 13976, "repo": "spring-webflux-6.0.11", "des": "Spring WebSocketSession adapter for Tomcat's Session.", "code": "public class TomcatWebSocketSession extends StandardWebSocketSession {\n\tprotected boolean canSuspendReceiving(); // Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\tprotected void resumeReceiving(); // Resume receiving new message(s) after demand is generated by the downstream Subscriber.\n\tprotected void suspendReceiving(); // Suspend receiving until received message(s) are processed and more demand is generated by the downstream Subscriber.\n}"}
{"index": 3317, "repo": "hbase-common-3.0.0-alpha-4", "des": "This class finds the Version information for HBase.", "code": "Class VersionInfo {\n\tstatic int compareVersion(String v1, String v2);\n\tstatic String getDate(); // The date that hbase was compiled.\n\tstatic int getMajorVersion(String version);\n\tstatic String getRevision(); // Get the subversion revision number for the root directory\n\tstatic String getSrcChecksum(); // Get the checksum of the source files from which Hadoop was compiled.\n\tstatic String getUrl(); // Get the subversion URL for the root hbase directory.\n\tstatic String getUser(); // The user that compiled hbase.\n\tstatic String getVersion(); // Get the hbase version.\n\tstatic void logVersion();\n\tstatic void main(String[] args);\n\tstatic void writeTo(PrintStream out);\n\tstatic void writeTo(PrintWriter out);\n}"}
{"index": 6070, "repo": "jackson-databind-2.15.2", "des": "Helper class used to introspect features of POJO value classes used with Jackson.", "code": "Class ClassIntrospector {\n\tabstract ClassIntrospector copy(); // Method that may be needed when `copy()`ing `ObjectMapper` instances.\n\tabstract BeanDescription forClassAnnotations(MapperConfig<?> cfg, JavaType type, ClassIntrospector.MixInResolver r); // Factory method that constructs an introspector that only has information regarding annotations class itself (or its supertypes) has, but nothing on methods or constructors.\n\tabstract BeanDescription forCreation(DeserializationConfig cfg, JavaType type, ClassIntrospector.MixInResolver r); // Factory method that constructs an introspector that has information necessary for creating instances of given class (\"creator\"), as well as class annotations, but no information on member methods\n\tabstract BeanDescription forDeserialization(DeserializationConfig cfg, JavaType type, ClassIntrospector.MixInResolver r); // Factory method that constructs an introspector that has all information needed for deserialization purposes.\n\tabstract BeanDescription forDeserializationWithBuilder(DeserializationConfig cfg, JavaType builderType, ClassIntrospector.MixInResolver r, BeanDescription valueTypeDesc); // Factory method that constructs an introspector that has all information needed for constructing deserializers that use intermediate Builder objects.\n\tabstract BeanDescription forDirectClassAnnotations(MapperConfig<?> cfg, JavaType type, ClassIntrospector.MixInResolver r); // Factory method that constructs an introspector that only has information regarding annotations class itself has (but NOT including its supertypes), but nothing on methods or constructors.\n\tabstract BeanDescription forSerialization(SerializationConfig cfg, JavaType type, ClassIntrospector.MixInResolver r); // Factory method that constructs an introspector that has all information needed for serialization purposes.\n}"}
{"index": 18245, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Contact to define if the source of plural attribute is sortable or not.", "code": "Interface Sortable {\n\tjava.lang.String getComparatorName(); // The comparator class name which will be used to sort the attribute.\n\tboolean isSorted(); // If the source of plural attribute is supposed to be sorted.\n}"}
{"index": 10976, "repo": "spring-data-redis-3.1.2", "des": "HyperLogLog specific commands supported by Redis.", "code": "public interface RedisHyperLogLogCommands {\n\tLong pfAdd(byte[] key, byte[]... values); // Adds given values to the HyperLogLog stored at given key.\n\tLong pfCount(byte[]... keys); // Return the approximated cardinality of the structures observed by the HyperLogLog at key(s).\n\tvoid pfMerge(byte[] destinationKey, byte[]... sourceKeys); // Merge N different HyperLogLogs at sourceKeys into a single destinationKey.\n}"}
{"index": 9688, "repo": "commons-math3-3.6.1", "des": "The data necessary to define a non-linear least squares problem.", "code": "Interface LeastSquaresProblem {\n\tLeastSquaresProblem.Evaluation evaluate(RealVector point); // Evaluate the model at the specified point.\n\tint getObservationSize(); // Get the number of observations (rows in the Jacobian) in this problem.\n\tint getParameterSize(); // Get the number of parameters (columns in the Jacobian) in this problem.\n\tRealVector getStart(); // Gets the initial guess.\n}"}
{"index": 15654, "repo": "spring-security-core-6.1.2", "des": "An AuthenticationProvider implementation for the TestingAuthenticationToken.", "code": "public class TestingAuthenticationProvider extends Object implements AuthenticationProvider {\n\tAuthentication authenticate(Authentication authentication); // Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .\n\tboolean supports(Class<?> authentication); // Returns true if this AuthenticationProvider supports the indicated Authentication object.\n}"}
{"index": 9042, "repo": "hbase-server-3.0.0-alpha-4", "des": "A common interface for computing and storing space quota observance/violation for entities.", "code": "Interface QuotaSnapshotStore<T> {\n\tIterable<Map.Entry<RegionInfo,Long>> filterBySubject(T subject); // Filters the provided regions, returning those which match the given subject.\n\tSpaceQuotaSnapshot getCurrentState(T subject); // Returns the current SpaceQuotaSnapshot for the given subject.\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.SpaceQuota getSpaceQuota(T subject); // Fetch the Quota for the given subject.\n\tSpaceQuotaSnapshot getTargetState(T subject, org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.SpaceQuota spaceQuota); // Computes the target SpaceQuotaSnapshot for the given subject and spaceQuota.\n\tvoid setCurrentState(T subject, SpaceQuotaSnapshot state); // Persists the current SpaceQuotaSnapshot for the subject.\n\tvoid setRegionUsage(Map<RegionInfo,Long> regionUsage); // Updates this with the latest snapshot of filesystem use by region.\n}"}
{"index": 9969, "repo": "commons-text-1.10.0", "des": "Enum containing standard double format types with methods to produce configured formatter instances.", "code": "Enum DoubleFormat {\n\tDoubleFormat.Builder builder(); // Creates a DoubleFormat.Builder for building formatter functions for this format type.\n\tstatic DoubleFormat valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DoubleFormat[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14207, "repo": "wicket-core-10.0.0-M1", "des": "A link that streams a file to the client.", "code": "public class DownloadLink extends Link<File> {\n\tvoid detachModels(); // Detaches all models\n\tvoid onClick(); // Called when a link is clicked.\n\tDownloadLink setCacheDuration(Duration duration); // Sets the duration for which the file resource should be cached by the client.\n\tDownloadLink setContentDisposition(ContentDisposition contentDisposition); // Sets the content disposition of the request.\n\tfinal DownloadLink setDeleteAfterDownload(boolean deleteAfter); // USE THIS METHOD WITH CAUTION! If true, the file will be deleted! The recommended way to use this setting, is to set this DownloadLink object's model with a LoadableDetachableModel instance and the resulting file being generated in a temporary folder.\n}"}
{"index": 6965, "repo": "calcite-core-1.34.0", "des": "Sub-class of Values not targeted at any particular engine or calling convention.", "code": "Class LogicalValues {\n\tRelNode accept(RelShuttle shuttle); // Accepts a visit from a shuttle.\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tstatic LogicalValues create(RelOptCluster cluster, RelDataType rowType, com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<RexLiteral>> tuples); // Creates a LogicalValues.\n\tstatic LogicalValues createEmpty(RelOptCluster cluster, RelDataType rowType); // Creates a LogicalValues that outputs no rows of a given row type.\n\tstatic LogicalValues createOneRow(RelOptCluster cluster); // Creates a LogicalValues that outputs one row and one column.\n\tRelNode withHints(List<RelHint> hintList); // Returns a new relational expression with the specified hints hintList.\n}"}
{"index": 1256, "repo": "ignite-core-2.15.0", "des": "List of transaction locks for particular key.", "code": "Class TxLockList {\n\tvoid add(TxLock txLock);\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tboolean isEmpty();\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tList<TxLock> txLocks();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 3362, "repo": "hadoop-azure-3.3.6", "des": "The AbfsRestOperation for Rest AbfsClient.", "code": "Class AbfsRestOperation {\n\tvoid execute(TracingContext tracingContext); // Execute a AbfsRestOperation.\n\tList<AbfsHttpHeader> getRequestHeaders();\n\tAbfsHttpOperation getResult();\n\tURL getUrl();\n\tvoid hardSetResult(int httpStatus);\n\tboolean hasResult(); // Checks if there is non-null HTTP response.\n\tboolean isARetriedRequest();\n\tvoid signRequest(AbfsHttpOperation httpOperation, int bytesToSign); // Sign an operation.\n}"}
{"index": 3510, "repo": "mahout-mr-0.13.0", "des": "An Ordered List of Integers which can be used in a Hadoop Map/Reduce Job.", "code": "Class IntegerTuple {\n\tboolean add(Integer entry); // add an entry to the end of the list\n\tint compareTo(IntegerTuple otherTuple);\n\tboolean equals(Object obj);\n\tList<Integer> getEntries(); // Fetch the list of entries from the tuple\n\tInteger integerAt(int index); // Fetches the string at the given location\n\tint length(); // Returns the length of the tuple\n\tvoid readFields(DataInput in);\n\tInteger replaceAt(int index, Integer newInteger); // Replaces the string at the given index with the given newString\n\tvoid write(DataOutput out);\n}"}
{"index": 3167, "repo": "commons-jexl3-3.3", "des": "Interface for getting values that appear to be properties.", "code": "Interface JexlPropertyGet {\n\tObject invoke(Object obj); // Method used to get the property value of an object.\n\tboolean isCacheable(); // Specifies if this JexlPropertyGet is cacheable and able to be reused for this class of object it was returned for.\n\tboolean tryFailed(Object rval); // Checks whether a tryInvoke failed or not.\n\tObject tryInvoke(Object obj, Object key); // Attempts to reuse this JexlPropertyGet, checking that it is compatible with the actual set of arguments.\n}"}
{"index": 7027, "repo": "calcite-core-1.34.0", "des": "Function object for RAND and RAND_INTEGER, with and without seed.", "code": "Class RandomFunction {\n\tdouble rand(); // Implements the RAND() SQL function.\n\tint randInteger(int bound); // Implements the RAND_INTEGER(bound) SQL function.\n\tint randIntegerSeed(int seed, int bound); // Implements the RAND_INTEGER(seed, bound) SQL function.\n\tdouble randSeed(int seed); // Implements the RAND(seed) SQL function.\n}"}
{"index": 10174, "repo": "spring-integration-smb-6.1.2", "des": "An AbstractFileInfo implementation for SMB protocol.", "code": "public class SmbFileInfo extends org.springframework.integration.file.remote.AbstractFileInfo<jcifs.smb.SmbFile> {\n\tjcifs.smb.SmbFile getFileInfo();\n\tString getFilename();\n\tlong getModified();\n\tString getPermissions(); // An Access Control Entry (ACE) is an element in a security descriptor such as those associated with files and directories.\n\tlong getSize();\n\tboolean isDirectory();\n\tboolean isLink(); // Symbolic links are currently not supported in the JCIFS v2.x.x dependent library, so this method will always return false.\n}"}
{"index": 1957, "repo": "nifi-framework-api-1.22.0", "des": "Represents a strategy that how to poll the queue.", "code": "Enum PollStrategy {\n\tstatic PollStrategy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PollStrategy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5306, "repo": "druid-processing-26.0.0", "des": "A triple of a list of InputRows, a Map of raw values, and a ParseException.", "code": "Class InputRowListPlusRawValues {\n\tList<InputRow> getInputRows();\n\tParseException getParseException();\n\tMap<String,Object> getRawValues(); // This method is left here only for test cases\n\tList<Map<String,Object>> getRawValuesList();\n\tstatic InputRowListPlusRawValues of(InputRow inputRow, Map<String,Object> rawColumns);\n\tstatic InputRowListPlusRawValues of(List<InputRow> inputRows, Map<String,Object> rawColumns);\n\tstatic InputRowListPlusRawValues of(Map<String,Object> rawColumns, ParseException parseException);\n\tstatic InputRowListPlusRawValues ofList(List<Map<String,Object>> rawColumnsList, List<InputRow> inputRows); // Create an instance of InputRowListPlusRawValues Make sure the size of given rawColumnsList and inputRows are the same if both of them are not null\n\tstatic InputRowListPlusRawValues ofList(List<Map<String,Object>> rawColumnsList, List<InputRow> inputRows, ParseException parseException); // Create an instance of InputRowListPlusRawValues Make sure the size of given rawColumnsList and inputRows are the same if both of them are not null\n\tstatic InputRowListPlusRawValues ofList(List<Map<String,Object>> rawColumnsList, ParseException parseException);\n}"}
{"index": 16979, "repo": "spring-orm-6.0.11", "des": "Interface that defines an abstraction for finding and managing JPA PersistenceUnitInfos.", "code": "public interface PersistenceUnitManager {\n\tPersistenceUnitInfo obtainDefaultPersistenceUnitInfo(); // Obtain the default PersistenceUnitInfo from this manager.\n\tPersistenceUnitInfo obtainPersistenceUnitInfo(String persistenceUnitName); // Obtain the specified PersistenceUnitInfo from this manager.\n}"}
{"index": 3025, "repo": "tink-1.10.0", "des": "A KeyManager \"understands\" keys of a specific key type: it can generate keys of the supported type and create primitives for supported keys.", "code": "Interface KeyManager<P> {\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tP getPrimitive(com.google.protobuf.ByteString serializedKey); // Constructs an instance of P for the key given in serializedKey, which must be a serialized key protocol buffer handled by this manager.\n\tClass<P> getPrimitiveClass(); // Returns the primitive class object of the P.\n\tKeyData newKeyData(com.google.protobuf.ByteString serializedKeyFormat); // Generates a new KeyData according to specification in serializedKeyFormat.\n}"}
{"index": 2122, "repo": "hive-exec-4.0.0-alpha-2", "des": "GenericUDFSentences: splits a natural language chunk of text into sentences and words.", "code": "Class GenericUDFSentences {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 7989, "repo": "commons-jcs3-core-3.1", "des": "An instance of RemoteCacheManager corresponds to one remote connection of a specific host and port.", "code": "Class RemoteCacheManager {\n\t<K,V> void addRemoteCacheListener(IRemoteCacheAttributes cattr, IRemoteCacheListener<K,V> listener); // Adds the remote cache listener to the underlying cache-watch service.\n\tboolean canFixCaches(); // Returns true if the connection to the remote host can be successfully re-established.\n\tvoid fixCaches(); // Fixes up all the caches managed by this cache manager.\n\t<K,V> RemoteCacheNoWait<K,V> getCache(IRemoteCacheAttributes cattr); // Gets a RemoteCacheNoWait from the RemoteCacheManager.\n\tprotected void lookupRemoteService(); // Lookup remote service from registry\n\tprotected <K,V> RemoteCacheNoWait<K,V> newRemoteCacheNoWait(IRemoteCacheAttributes cattr); // Create new RemoteCacheNoWait instance\n\tvoid release(); // Shutdown all.\n\tvoid removeRemoteCacheListener(IRemoteCacheAttributes cattr); // Removes a listener.\n}"}
{"index": 16187, "repo": "spring-data-cassandra-4.1.2", "des": "Factory to wrap a ReactiveSession with ObservableReactiveSession.", "code": "public final class ObservableReactiveSessionFactory extends Object {\n\tstatic ReactiveSession wrap(ReactiveSession session, io.micrometer.observation.ObservationRegistry observationRegistry); // Wrap the CqlSession with a CqlSessionObservationInterceptor.\n\tstatic ReactiveSession wrap(ReactiveSession session, String remoteServiceName, io.micrometer.observation.ObservationRegistry observationRegistry); // Wrap the CqlSession with a CqlSessionObservationInterceptor.\n}"}
{"index": 13000, "repo": "spring-aop-6.0.11", "des": "Base class for BeanPostProcessor implementations that apply a Spring AOP Advisor to specific beans.", "code": "public abstract class AbstractAdvisingBeanPostProcessor extends ProxyProcessorSupport implements org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor {\n\tprotected void customizeProxyFactory(ProxyFactory proxyFactory); // Subclasses may choose to implement this: for example, to change the interfaces exposed.\n\tClass<?> determineBeanType(Class<?> beanClass, String beanName);\n\tprotected boolean isEligible(Class<?> targetClass); // Check whether the given class is eligible for advising with this post-processor's Advisor.\n\tprotected boolean isEligible(Object bean, String beanName); // Check whether the given bean is eligible for advising with this post-processor's Advisor.\n\tObject postProcessAfterInitialization(Object bean, String beanName);\n\tprotected ProxyFactory prepareProxyFactory(Object bean, String beanName); // Prepare a ProxyFactory for the given bean.\n\tvoid setBeforeExistingAdvisors(boolean beforeExistingAdvisors); // Set whether this post-processor's advisor is supposed to apply before existing advisors when encountering a pre-advised object.\n}"}
{"index": 13960, "repo": "spring-webflux-6.0.11", "des": "An AbstractUrlBasedView subclass designed to run any template library based on a JSR-223 script engine.", "code": "public class ScriptTemplateView extends AbstractUrlBasedView {\n\tprotected ScriptTemplateConfig autodetectViewConfig();\n\tboolean checkResourceExists(Locale locale); // Check whether the resource for the configured URL actually exists.\n\tprotected ScriptEngine createEngineFromName(String engineName);\n\tprotected ScriptEngine getEngine();\n\tprotected org.springframework.core.io.Resource getResource(String location);\n\tprotected String getTemplate(String path);\n\tprotected void loadScripts(ScriptEngine engine);\n\tprotected reactor.core.publisher.Mono<Void> renderInternal(Map<String,Object> model, org.springframework.http.MediaType contentType, org.springframework.web.server.ServerWebExchange exchange); // Subclasses must implement this method to actually render the view.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext context);\n\tvoid setEngine(ScriptEngine engine); // See ScriptTemplateConfigurer.setEngine(ScriptEngine) documentation.\n\tvoid setEngineName(String engineName); // See ScriptTemplateConfigurer.setEngineName(String) documentation.\n\tvoid setEngineSupplier(Supplier<ScriptEngine> engineSupplier); // See ScriptTemplateConfigurer.setEngineSupplier(Supplier) documentation.\n\tvoid setRenderFunction(String functionName); // See ScriptTemplateConfigurer.setRenderFunction(String) documentation.\n\tvoid setRenderObject(String renderObject); // See ScriptTemplateConfigurer.setRenderObject(String) documentation.\n\tvoid setResourceLoaderPath(String resourceLoaderPath); // See ScriptTemplateConfigurer.setResourceLoaderPath(String) documentation.\n\tvoid setScripts(String... scripts); // See ScriptTemplateConfigurer.setScripts(String...) documentation.\n\tvoid setSharedEngine(Boolean sharedEngine); // See ScriptTemplateConfigurer.setSharedEngine(Boolean) documentation.\n}"}
{"index": 18363, "repo": "opencms-core-15.0", "des": "Class representing a JSON document for a CMS resource.", "code": "Class CmsJsonDocumentResource {\n\tjava.lang.Object getJson(); // Returns the JSON document.\n\tprotected void insertJsonResource(); // If the request parameter \"wrapper\" is set, inserts information about this resource into the JSON document.\n\tprotected void insertJsonResourceAttributes(); // Inserts the resource attributes into this JSON document.\n\tprotected void insertJsonResourceFile(); // Inserts file type information into this JSON document.\n\tprotected void insertJsonResourceParams(); // Inserts information about the effective request parameters into this JSON document.\n\tprotected void insertJsonResourcePathAndLink(); // Inserts path and link information about this resource into this JSON document.\n\tprotected void insertJsonResourceProperties(); // Inserts the properties of this resource into the JSON document.\n}"}
{"index": 4424, "repo": "beam-sdks-java-core-2.49.0", "des": "Metrics are keyed by the step name they are associated with and the name of the metric.", "code": "Class MetricKey {\n\tstatic MetricKey create(@Nullable java.lang.String stepName, MetricName metricName);\n\tabstract MetricName metricName(); // The name of the metric.\n\tabstract @Nullable java.lang.String stepName(); // The step name that is associated with this metric or Null if none is associated.\n}"}
{"index": 4605, "repo": "commons-vfs2-2.9.0", "des": "Default options usable for all file systems.", "code": "Class DefaultFileSystemConfigBuilder {\n\tprotected Class<? extends FileSystem> getConfigClass(); // Gets the target of this configuration.\n\tstatic DefaultFileSystemConfigBuilder getInstance(); // Gets the singleton builder.\n\tUserAuthenticator getUserAuthenticator(FileSystemOptions opts);\n\tvoid setUserAuthenticator(FileSystemOptions opts, UserAuthenticator userAuthenticator); // Sets the user authenticator to get authentication informations.\n}"}
{"index": 14756, "repo": "spring-data-commons-3.1.2", "des": "Abstraction of a map of NamedQueries that can be looked up by their names.", "code": "public interface NamedQueries {\n\tString getQuery(String queryName); // Returns the named query with the given name.\n\tboolean hasQuery(String queryName); // Returns whether the map contains a named query for the given name.\n}"}
{"index": 7205, "repo": "calcite-core-1.34.0", "des": "A SqlFunction is a type of operator which has conventional function-call syntax.", "code": "Class SqlFunction {\n\tRelDataType deriveType(SqlValidator validator, SqlValidatorScope scope, SqlCall call); // Derives the type of a call to this operator.\n\tSqlFunctionCategory getFunctionType(); // Return function category.\n\tSqlIdentifier getNameAsId(); // Returns the fully-qualified name of this operator.\n\t@Nullable SqlIdentifier getSqlIdentifier(); // Returns the fully-qualified name of function, or null for a built-in function.\n\tSqlSyntax getSyntax(); // Returns the syntactic type of this operator, never null.\n\tboolean isQuantifierAllowed(); // Returns whether this function allows a DISTINCT or ALL quantifier.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n\tvoid validateCall(SqlCall call, SqlValidator validator, SqlValidatorScope scope, SqlValidatorScope operandScope); // Validates a call to this operator.\n\tprotected void validateQuantifier(SqlValidator validator, SqlCall call); // Throws a validation error if a DISTINCT or ALL quantifier is present but not allowed.\n}"}
{"index": 8062, "repo": "commons-compress-1.23.0", "des": "Implements an input stream that can read entries from jar files.", "code": "Class JarArchiveInputStream {\n\tArchiveEntry getNextEntry(); // Returns the next Archive Entry in this Stream.\n\tJarArchiveEntry getNextJarEntry();\n\tstatic boolean matches(byte[] signature, int length); // Checks if the signature matches what is expected for a jar file (in this case it is the same as for a ZIP file).\n}"}
{"index": 592, "repo": "ignite-core-2.15.0", "des": "Handler for ContinuousQuery listeners and JCache cache entry listeners.", "code": "Class ClientCacheEntryListenerHandler<K,V> {\n\tvoid acceptNotification(ByteBuffer payload, Exception err); // Accept notification.\n\torg.apache.ignite.internal.client.thin.ClientChannel clientChannel(); // Client channel.\n\tvoid close();\n\tvoid onChannelClosed(Exception reason); // Handles connection loss.\n\tvoid startListen(javax.cache.event.CacheEntryUpdatedListener<K,V> locLsnr, ClientDisconnectListener disconnectLsnr, javax.cache.configuration.Factory<? extends javax.cache.event.CacheEntryEventFilter<? super K,? super V>> rmtFilterFactory, int pageSize, long timeInterval, boolean includeExpired); // Send request to the server and start\n}"}
{"index": 6941, "repo": "calcite-core-1.34.0", "des": "The information necessary to convert a column to SQL.", "code": "Class Lattice.SqlWriter {\n\tLattice.SqlWriter with(StringBuilder buf); // Re-binds this writer to a different StringBuilder.\n\tLattice.SqlWriter write(RexNode e); // Writes an expression.\n}"}
{"index": 16969, "repo": "spring-orm-6.0.11", "des": "SPI interface that allows to plug in vendor-specific behavior into Spring's EntityManagerFactory creators.", "code": "public interface JpaVendorAdapter {\n\tdefault Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface(); // Return the vendor-specific EntityManagerFactory interface that the EntityManagerFactory proxy is supposed to implement.\n\tdefault Class<? extends EntityManager> getEntityManagerInterface(); // Return the vendor-specific EntityManager interface that this provider's EntityManagers will implement.\n\tdefault JpaDialect getJpaDialect(); // Return the vendor-specific JpaDialect implementation for this provider, or null if there is none.\n\tdefault Map<String,?> getJpaPropertyMap(); // Return a Map of vendor-specific JPA properties, typically based on settings in this JpaVendorAdapter instance.\n\tdefault Map<String,?> getJpaPropertyMap(PersistenceUnitInfo pui); // Return a Map of vendor-specific JPA properties for the given persistence unit, typically based on settings in this JpaVendorAdapter instance.\n\tPersistenceProvider getPersistenceProvider(); // Return the vendor-specific persistence provider.\n\tdefault String getPersistenceProviderRootPackage(); // Return the name of the persistence provider's root package (e.g.\n\tdefault void postProcessEntityManager(EntityManager em); // Optional callback for post-processing the native EntityManager before active use.\n\tdefault void postProcessEntityManagerFactory(EntityManagerFactory emf); // Optional callback for post-processing the native EntityManagerFactory before active use.\n}"}
{"index": 8331, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the Wsdl11Definition based on WSDL4J.", "code": "Class Wsdl4jDefinition {\n\tjavax.wsdl.Definition getDefinition(); // Returns the WSDL4J Definition.\n\tSource getSource(); // Returns the Source of the definition.\n\tvoid setDefinition(javax.wsdl.Definition definition); // Set the WSDL4J Definition.\n}"}
{"index": 5993, "repo": "commons-lang3-3.12.0", "des": "A functional interface like ToIntBiFunction that declares a Throwable.", "code": "Interface FailableToIntBiFunction<T,U,E extends Throwable> {\n\tint applyAsInt(T t, U u); // Applies this function to the given arguments.\n\tstatic <T,U,E extends Throwable>FailableToIntBiFunction<T,U,E> nop(); // Returns The NOP singleton.\n}"}
{"index": 443, "repo": "phoenix-core-5.1.3", "des": "This class abstracts a SpillFile It is a accessible on a per page basis For every SpillFile object a single spill file is always created.", "code": "Class SpillFile {\n\tvoid close();\n\tstatic SpillFile createSpillFile(File spillFilesDir); // Create a new SpillFile using the Java TempFile creation function.\n\tRandomAccessFile getPage(int index); // Random access to a page of the current spill file\n}"}
{"index": 4163, "repo": "camel-core-3.0.0-RC1", "des": "Represents a Validator which declaratively validates message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.", "code": "Class ValidatorDefinition {\n\tString getType();\n\tvoid setType(Class<?> clazz); // Set the data type using Java class.\n\tvoid setType(String type); // Set the data type name.\n}"}
{"index": 16269, "repo": "spring-data-jdbc-3.1.2", "des": "RelationalConverter that uses a MappingContext to apply basic conversion of relational values to property values.", "code": "public class BasicJdbcConverter extends BasicRelationalConverter implements JdbcConverter, ApplicationContextAware {\n\tClass<?> getColumnType(RelationalPersistentProperty property); // The type to be used to store this property in the database.\n\tSQLType getTargetSqlType(RelationalPersistentProperty property); // The SQL type constant used when using this property as a parameter for a SQL statement.\n\t<T> T mapRow(PersistentPropertyPathExtension path, ResultSet resultSet, Identifier identifier, Object key); // Read the current row from ResultSet to an entity.\n\t<T> T mapRow(RelationalPersistentEntity<T> entity, ResultSet resultSet, Object key); // Read the current row from ResultSet to an entity.\n\tObject readValue(Object value, TypeInformation<?> type);\n\tvoid setApplicationContext(ApplicationContext applicationContext);\n\tJdbcValue writeJdbcValue(Object value, Class<?> columnType, SQLType sqlType); // Convert a property value into a JdbcValue that contains the converted value and information how to bind it to JDBC parameters.\n\tObject writeValue(Object value, TypeInformation<?> type);\n}"}
{"index": 4208, "repo": "jackson-core-2.15.2", "des": "Handler class that can be used to decorate input sources.", "code": "Class InputDecorator {\n\tabstract InputStream decorate(IOContext ctxt, byte[] src, int offset, int length); // Method called by JsonFactory instance when creating parser on given \"raw\" byte source.\n\tDataInput decorate(IOContext ctxt, DataInput input); // Method called by JsonFactory instance when creating parser given an DataInput, when this decorator has been registered.\n\tabstract InputStream decorate(IOContext ctxt, InputStream in); // Method called by JsonFactory instance when creating parser given an InputStream, when this decorator has been registered.\n\tabstract Reader decorate(IOContext ctxt, Reader r); // Method called by JsonFactory instance when creating parser given an Reader, when this decorator has been registered.\n}"}
{"index": 9525, "repo": "commons-math3-3.6.1", "des": "Base class for implementing optimizers for multivariate functions.", "code": "Class BaseMultivariateOptimizer<PAIR> {\n\tdouble[] getLowerBound();\n\tdouble[] getStartPoint(); // Gets the initial guess.\n\tdouble[] getUpperBound();\n\tPAIR optimize(OptimizationData... optData); // Stores data and performs the optimization.\n\tprotected void parseOptimizationData(OptimizationData... optData); // Scans the list of (required and optional) optimization data that characterize the problem.\n}"}
{"index": 16526, "repo": "spring-batch-infrastructure-5.0.2", "des": "ItemReader which produces Resource instances from an array.", "code": "public class ResourcesItemReader extends AbstractItemStreamItemReader<org.springframework.core.io.Resource> {\n\tvoid open(ExecutionContext executionContext); // No-op.\n\torg.springframework.core.io.Resource read(); // Increments a counter and returns the next Resource instance from the input, or null if none remain.\n\tvoid setResources(org.springframework.core.io.Resource[] resources); // The resources to serve up as items.\n\tvoid update(ExecutionContext executionContext); // Return empty ExecutionContext.\n}"}
{"index": 16206, "repo": "spring-data-cassandra-4.1.2", "des": "String-based AbstractReactiveCassandraQuery implementation.", "code": "public class ReactiveStringBasedCassandraQuery extends AbstractReactiveCassandraQuery {\n\treactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.SimpleStatement> createQuery(CassandraParameterAccessor parameterAccessor); // Creates a string query using the given ParameterAccessor\n\tprotected org.springframework.data.cassandra.repository.query.StringBasedQuery getStringBasedQuery();\n\tprotected boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected boolean isLimiting(); // Return whether the query has an explicit limit set.\n\tprotected boolean isModifyingQuery(); // Returns whether the query is a modifying query.\n}"}
{"index": 4164, "repo": "camel-core-3.0.0-RC1", "des": "Weighted load balancer The weighted load balancing policy allows you to specify a processing load distribution ratio for each server with respect to others.", "code": "Class WeightedLoadBalancerDefinition {\n\tString getDistributionRatio();\n\tString getDistributionRatioDelimiter();\n\tBoolean getRoundRobin();\n\tvoid setDistributionRatio(String distributionRatio); // The distribution ratio is a delimited String consisting on integer weights separated by delimiters for example \"2,3,5\".\n\tvoid setDistributionRatioDelimiter(String distributionRatioDelimiter); // Delimiter used to specify the distribution ratio.\n\tvoid setRoundRobin(Boolean roundRobin); // To enable round robin mode.\n}"}
{"index": 4369, "repo": "beam-sdks-java-core-2.49.0", "des": "Abstract writer that writes a bundle to a FileBasedSink.", "code": "Class FileBasedSink.Writer<DestinationT,OutputT> {\n\tvoid cleanup();\n\tvoid close(); // Closes the channel and returns the bundle result.\n\tprotected void finishWrite(); // Called after all calls to writeHeader(), write(OutputT) and writeFooter().\n\tDestinationT getDestination(); // Return the user destination object for this writer.\n\tResourceId getOutputFile();\n\tFileBasedSink.WriteOperation<DestinationT,OutputT> getWriteOperation(); // Return the WriteOperation that this Writer belongs to.\n\tvoid open(java.lang.String uId); // Opens a uniquely named temporary file and initializes the writer using prepareWrite(java.nio.channels.WritableByteChannel).\n\tprotected abstract void prepareWrite(java.nio.channels.WritableByteChannel channel); // Called with the channel that a subclass will write its header, footer, and values to.\n\tabstract void write(OutputT value); // Called for each value in the bundle.\n\tprotected void writeFooter(); // Writes footer at the end of output files.\n\tprotected void writeHeader(); // Writes header at the beginning of output files.\n}"}
{"index": 11949, "repo": "maven-core-4.0.0-alpha-7", "des": "Describes the result of a plugin version resolution request.", "code": "public interface PluginVersionResult {\n\torg.eclipse.aether.repository.ArtifactRepository getRepository(); // The repository from which the plugin version was resolved.\n\tString getVersion(); // The resolved plugin version.\n}"}
{"index": 5952, "repo": "commons-lang3-3.12.0", "des": "A runtime exception that provides an easy and safe way to add contextual information.", "code": "Class ContextedRuntimeException {\n\tContextedRuntimeException addContextValue(String label, Object value); // Adds information helpful to a developer in diagnosing and correcting the problem.\n\tList<Pair<String,Object>> getContextEntries(); // Retrieves the full list of label-value pairs defined in the contextual data.\n\tSet<String> getContextLabels(); // Retrieves the full set of labels defined in the contextual data.\n\tList<Object> getContextValues(String label); // Retrieves all the contextual data values associated with the label.\n\tObject getFirstContextValue(String label); // Retrieves the first available contextual data value associated with the label.\n\tString getFormattedExceptionMessage(String baseMessage); // Gets the contextualized error message based on a base message.\n\tString getMessage(); // Provides the message explaining the exception, including the contextual data.\n\tString getRawMessage(); // Provides the message explaining the exception without the contextual data.\n\tContextedRuntimeException setContextValue(String label, Object value); // Sets information helpful to a developer in diagnosing and correcting the problem.\n}"}
{"index": 918, "repo": "ignite-core-2.15.0", "des": "Convenient reducer subclass that allows for thrown grid exception.", "code": "Class IgniteReducer3X<E1,E2,E3,R> {\n\tR apply(); // Closure body.\n\tabstract R applyx(); // Reducer body that can throw IgniteCheckedException.\n}"}
{"index": 1076, "repo": "ignite-core-2.15.0", "des": "Information structure with partitions state.", "code": "Class PartitionAllocationMap {\n\tboolean containsKey(GroupPartitionId key);\n\tstatic @NotNull GroupPartitionId createCachePartId(@NotNull FullPageId fullId); // Extracts partition information from full page ID\n\tSet<Map.Entry<GroupPartitionId,PagesAllocationRange>> entrySet();\n\tGroupPartitionId firstKey();\n\tboolean forceSkipIndexPartition(int grpId); // Forces the index partition for the given group ID to be skipped in collected map.\n\t@Nullable PagesAllocationRange get(FullPageId fullPageId);\n\t@Nullable PagesAllocationRange get(GroupPartitionId key); // Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.\n\tboolean isEmpty();\n\tSet<GroupPartitionId> keySet();\n\t@Nullable GroupPartitionId nextKey(@NotNull GroupPartitionId key); // Returns next (higher) key for provided cache and partition or null\n\tvoid prepareForSnapshot(); // Prepare map for snapshot.\n\tPagesAllocationRange put(GroupPartitionId key, PagesAllocationRange val);\n\tint size();\n\tIterable<PagesAllocationRange> values();\n}"}
{"index": 12062, "repo": "jena-core-4.9.0", "des": "The processing engine for forward production rules.", "code": "public class FRuleEngine extends Object implements FRuleEngineI {\n\tvoid add(Triple t); // Add one triple to the data graph, run any rules triggered by the new data item, recursively adding any generated triples.\n\tvoid addSet(BFRuleContext context); // Add a set of new triple to the data graph, run any rules triggered by the new data item, recursively adding any generated triples.\n\tvoid compile(List<Rule> rules, boolean ignoreBrules); // Compile a list of rules into the internal rule store representation.\n\tboolean delete(Triple t); // Remove one triple to the data graph.\n\tvoid fastInit(Finder inserts); // Process all available data.\n\tlong getNRulesFired(); // Return the number of rules fired since this rule engine instance was created and initialized\n\tObject getRuleStore(); // Access the precomputed internal rule form.\n\tvoid init(boolean ignoreBrules, Finder inserts); // Process all available data.\n\tstatic boolean match(Node pattern, Node node, BindingStack env); // Test if a pattern Node matches a Triple Node in the given binding environment.\n\tstatic boolean match(TriplePattern pattern, Triple triple, BindingStack env); // Test if a TriplePattern matches a Triple in the given binding environment.\n\tstatic int scoreNodeBoundness(Node n, BindingEnvironment env); // Score a Node in terms of groundedness - heuristic.\n\tvoid setDerivationLogging(boolean recordDerivations); // Set to true to enable derivation caching\n\tvoid setRuleStore(Object ruleStore); // Set the internal rule from a precomputed state.\n\tboolean shouldTrace(); // Return true if the internal engine state means that tracing is worthwhile.\n}"}
{"index": 11555, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an AuthorizationRequestRepository that stores OAuth2AuthorizationRequest in the HttpSession.", "code": "public final class HttpSessionOAuth2AuthorizationRequestRepository extends Object implements AuthorizationRequestRepository<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> {\n\torg.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest loadAuthorizationRequest(jakarta.servlet.http.HttpServletRequest request); // Returns the OAuth2AuthorizationRequest associated to the provided HttpServletRequest or null if not available.\n\torg.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest removeAuthorizationRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Removes and returns the OAuth2AuthorizationRequest associated to the provided HttpServletRequest and HttpServletResponse or if not available returns null.\n\tvoid saveAuthorizationRequest(org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest authorizationRequest, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Persists the OAuth2AuthorizationRequest associating it to the provided HttpServletRequest and/or HttpServletResponse.\n}"}
{"index": 11550, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an OAuth2UserService that supports standard OAuth 2.0 Provider's.", "code": "public class DefaultOAuth2UserService extends Object implements OAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User> {\n\torg.springframework.security.oauth2.core.user.OAuth2User loadUser(OAuth2UserRequest userRequest); // Returns an OAuth2User after obtaining the user attributes of the End-User from the UserInfo Endpoint.\n\tfinal void setRequestEntityConverter(org.springframework.core.convert.converter.Converter<OAuth2UserRequest,org.springframework.http.RequestEntity<?>> requestEntityConverter); // Sets the Converter used for converting the OAuth2UserRequest to a RequestEntity representation of the UserInfo Request.\n\tfinal void setRestOperations(org.springframework.web.client.RestOperations restOperations); // Sets the RestOperations used when requesting the UserInfo resource.\n}"}
{"index": 12712, "repo": "spring-data-mongodb-4.1.2", "des": "Context to encapsulate encryption for a specific MongoPersistentProperty.", "code": "public interface EncryptionContext {\n\tObject convertToMongoType(Object value); // Shortcut for converting a given value into its store representation using the root ValueConversionContext.\n\tEvaluationContext getEvaluationContext(Object source);\n\tMongoPersistentProperty getProperty(); // Returns the MongoPersistentProperty to be handled.\n\tObject lookupValue(String path); // Lookup the value for a given path within the current context.\n\tdefault <T> T read(Object value); // Reads the value as an instance of the property type.\n\tdefault <T> T read(Object value, Class<T> target); // Reads the value as an instance of type.\n\t<T> T read(Object value, TypeInformation<T> target); // Reads the value as an instance of type.\n\tdefault <T> T write(Object value); // Write the value as an instance of the property type.\n\tdefault <T> T write(Object value, Class<T> target); // Write the value as an instance of type.\n\t<T> T write(Object value, TypeInformation<T> target); // Write the value as an instance of given type.\n}"}
{"index": 16163, "repo": "spring-data-cassandra-4.1.2", "des": "Default implementation of a ReactiveSession.", "code": "public class DefaultBridgedReactiveSession extends Object implements ReactiveSession {\n\tvoid close(); // Initiates a shutdown of this session instance and blocks until that shutdown completes.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement); // Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query); // Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query, Object... values); // Executes the provided query using the provided values.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query, Map<String,Object> values); // Executes the provided query using the provided named values.\n\tcom.datastax.oss.driver.api.core.context.DriverContext getContext(); // Returns a context that provides access to all the policies used by this driver instance.\n\tOptional<com.datastax.oss.driver.api.core.CqlIdentifier> getKeyspace(); // The keyspace that this session is currently connected to, or Optional.empty() if this session is not connected to any keyspace.\n\tcom.datastax.oss.driver.api.core.metadata.Metadata getMetadata(); // Returns a snapshot of the Cassandra cluster's topology and schema metadata.\n\tboolean isClosed(); // Whether this Session instance has been closed.\n\treactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.PreparedStatement> prepare(com.datastax.oss.driver.api.core.cql.SimpleStatement statement); // Prepares the provided query.\n\treactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.PreparedStatement> prepare(String query); // Prepares the provided query string.\n}"}
{"index": 15543, "repo": "spring-batch-core-5.0.2", "des": "An ExceptionHandler that is aware of the retry context so that it can distinguish between a fatal exception and one that can be retried.", "code": "public class SimpleRetryExceptionHandler extends org.springframework.retry.listener.RetryListenerSupport implements ExceptionHandler {\n\t<T, E extends Throwable>void close(org.springframework.retry.RetryContext context, org.springframework.retry.RetryCallback<T,E> callback, Throwable throwable); // If retry is exhausted set up some state in the context that can be used to signal that the exception should be handled.\n\tvoid handleException(RepeatContext context, Throwable throwable); // Check if the exception is going to be retried, and veto the handling if it is.\n}"}
{"index": 17312, "repo": "groovy-4.0.13", "des": "This class represents an error that is thrown when a bug is recognized inside the runtime.", "code": "public class GroovyBugError extends AssertionError {\n\tString getBugText(); // Returns the bug text to describe this error\n\tThrowable getCause();\n\tString getMessage(); // Returns the detail message string of this error.\n\tvoid setBugText(String msg); // Sets the bug text to describe this error\n}"}
{"index": 5970, "repo": "commons-lang3-3.12.0", "des": "A functional interface like DoublePredicate that declares a Throwable.", "code": "Interface FailableDoublePredicate<E extends Throwable> {\n\tdefault FailableDoublePredicate<E> and(FailableDoublePredicate<E> other); // Returns a composed FailableDoublePredicate like DoublePredicate.and(DoublePredicate).\n\tstatic <E extends Throwable>FailableDoublePredicate<E> falsePredicate(); // Returns The FALSE singleton.\n\tdefault FailableDoublePredicate<E> negate(); // Returns a predicate that negates this predicate.\n\tdefault FailableDoublePredicate<E> or(FailableDoublePredicate<E> other); // Returns a composed FailableDoublePredicate like DoublePredicate.and(DoublePredicate).\n\tboolean test(double value); // Tests the predicate.\n\tstatic <E extends Throwable>FailableDoublePredicate<E> truePredicate(); // Returns The FALSE TRUE.\n}"}
{"index": 18678, "repo": "opencms-gwt-15.0", "des": "The sitemap button holding all related methods.", "code": "Class CmsToolbarSitemapButton {\n\tvoid onToolbarActivate(); // Method executed when the button is activated.\n\tvoid onToolbarDeactivate(); // Method executed when the button is deactivated.\n}"}
{"index": 7701, "repo": "cassandra-all-4.1.2", "des": "A rate limiter implementation that allows callers to reserve permits that may only be available in the future, delegating to them decisions about how to schedule/delay work and whether or not to block execution to do so.", "code": "Class NonBlockingRateLimiter {\n\tlong getIntervalNanos();\n\tint getRate();\n\tlong getStartedNanos();\n\tlong reserveAndGetDelay(java.util.concurrent.TimeUnit delayUnit); // Reserves a single permit slot on the timeline which may not yet be available.\n\tvoid setRate(int permitsPerSecond);\n\tvoid setRate(int permitsPerSecond, com.google.common.base.Ticker ticker);\n\tboolean tryReserve(); // Reserves a single permit slot on the timeline, but only if one is available.\n}"}
{"index": 18748, "repo": "lucene-suggest-9.7.0", "des": "Wrapped Terms used by SuggestField and ContextSuggestField to access corresponding suggester and their attributes.", "code": "Class CompletionTerms {\n\tlong getMaxWeight(); // Returns the maximum weight of all entries in the weighted FST\n\tlong getMinWeight(); // Returns the minimum weight of all entries in the weighted FST\n\tbyte getType(); // Returns the type of FST, either SuggestField.TYPE or ContextSuggestField.TYPE\n\tNRTSuggester suggester(); // Returns a NRTSuggester for the field or null if no FST was indexed for this field\n}"}
{"index": 15270, "repo": "spring-boot-3.1.1", "des": "A DeferredLogFactory implementation that manages a collection DeferredLog instances.", "code": "public class DeferredLogs extends Object implements DeferredLogFactory {\n\torg.apache.commons.logging.Log getLog(Class<?> destination); // Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(Supplier<org.apache.commons.logging.Log> destination); // Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(org.apache.commons.logging.Log destination); // Create a new DeferredLog for the given destination.\n\tvoid switchOverAll(); // Switch over all deferred logs to their supplied destination.\n}"}
{"index": 10815, "repo": "spring-boot-actuator-3.1.1", "des": "Describes the parameters of an operation on a JMX endpoint.", "code": "public interface JmxOperationParameter {\n\tString getDescription(); // Return the description of the parameter or null if none is available.\n\tString getName(); // Return the name of the operation parameter.\n\tClass<?> getType(); // Return the type of the operation parameter.\n}"}
{"index": 945, "repo": "ignite-core-2.15.0", "des": "This interface defines JMX view on Ignition.", "code": "Interface IgnitionMXBean {\n\tString getState(); // Gets state of default grid instance.\n\tString getState(String name); // Gets state for a given grid instance.\n\tvoid restart(boolean cancel); // Restart JVM.\n\tboolean stop(boolean cancel); // Stops default grid instance.\n\tboolean stop(String name, boolean cancel); // Stops named Ignite instance.\n\tvoid stopAll(boolean cancel); // Stops all started grids.\n}"}
{"index": 13700, "repo": "spring-webmvc-6.0.11", "des": "Entity-specific subtype of ServerResponse that exposes entity data.", "code": "public interface EntityResponse<T> extends ServerResponse {\n\tT entity(); // Return the entity that makes up this response.\n\tstatic <T> EntityResponse.Builder<T> fromObject(T t); // Create a builder with the given object.\n\tstatic <T> EntityResponse.Builder<T> fromObject(T t, org.springframework.core.ParameterizedTypeReference<T> entityType); // Create a builder with the given object and type reference.\n}"}
{"index": 9678, "repo": "commons-math3-3.6.1", "des": "Strategies to use for replacing an empty cluster.", "code": "Enum KMeansPlusPlusClusterer.EmptyClusterStrategy {\n\tstatic KMeansPlusPlusClusterer.EmptyClusterStrategy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic KMeansPlusPlusClusterer.EmptyClusterStrategy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5399, "repo": "druid-processing-26.0.0", "des": "ReferenceCountingCloseableObject implements something like automatic reference count-based resource management, backed by a Phaser.", "code": "Class ReferenceCountingCloseableObject<BaseObject extends Closeable> {\n\tvoid close();\n\tvoid decrement(); // Decrement the reference count by one.\n\tCloseable decrementOnceCloseable(); // Returns a Closeable which action is to call decrement() only once.\n\tint getNumReferences();\n\tboolean increment(); // Increment the reference count by one.\n\tOptional<Closeable> incrementReferenceAndDecrementOnceCloseable(); // Returns an Optional of a Closeable from decrementOnceCloseable(), if it is able to successfully increment(), else nothing indicating that the reference could not be acquired.\n\tboolean isClosed();\n}"}
{"index": 9677, "repo": "commons-math3-3.6.1", "des": "Strategies to use for replacing an empty cluster.", "code": "Enum KMeansPlusPlusClusterer.EmptyClusterStrategy {\n\tstatic KMeansPlusPlusClusterer.EmptyClusterStrategy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic KMeansPlusPlusClusterer.EmptyClusterStrategy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6293, "repo": "commons-codec-1.16.0", "des": "Encodes a string into a Cologne Phonetic value.", "code": "Class ColognePhonetic {\n\tString colognePhonetic(String text);\n\tObject encode(Object object); // Encodes an \"Object\" and returns the encoded content as an Object.\n\tString encode(String text); // Encodes a String and returns a String.\n\tboolean isEncodeEqual(String text1, String text2); // Compares the first encoded string to the second encoded string.\n}"}
{"index": 9590, "repo": "commons-math3-3.6.1", "des": "This class implements the common part of all embedded Runge-Kutta integrators for Ordinary Differential Equations.", "code": "Class EmbeddedRungeKuttaFieldIntegrator<T extends RealFieldElement<T>> {\n\tprotected abstract org.apache.commons.math3.ode.nonstiff.RungeKuttaFieldStepInterpolator<T> createInterpolator(boolean forward, T[][] yDotK, FieldODEStateAndDerivative<T> globalPreviousState, FieldODEStateAndDerivative<T> globalCurrentState, FieldEquationsMapper<T> mapper); // Create an interpolator.\n\tprotected abstract T estimateError(T[][] yDotK, T[] y0, T[] y1, T h); // Compute the error ratio.\n\tprotected T fraction(double p, double q); // Create a fraction.\n\tprotected T fraction(int p, int q); // Create a fraction.\n\tT getMaxGrowth(); // Get the maximal growth factor for stepsize control.\n\tT getMinReduction(); // Get the minimal reduction factor for stepsize control.\n\tabstract int getOrder(); // Get the order of the method.\n\tT getSafety(); // Get the safety factor for stepsize control.\n\tFieldODEStateAndDerivative<T> integrate(FieldExpandableODE<T> equations, FieldODEState<T> initialState, T finalTime); // Integrate the differential equations up to the given time.\n\tvoid setMaxGrowth(T maxGrowth); // Set the maximal growth factor for stepsize control.\n\tvoid setMinReduction(T minReduction); // Set the minimal reduction factor for stepsize control.\n\tvoid setSafety(T safety); // Set the safety factor for stepsize control.\n}"}
{"index": 7011, "repo": "calcite-core-1.34.0", "des": "Represents a mapping which reorders elements in an array.", "code": "Class Permutation {\n\tvoid clear(); // Removes all elements in the mapping.\n\tObject clone();\n\tboolean equals(@Nullable Object obj);\n\tMappingType getMappingType(); // Returns the mapping type.\n\tint getSource(int target); // Returns the position which maps to target.\n\tint getSourceCount(); // Returns the number of sources.\n\tint getSourceOpt(int target); // Returns the source that a target maps to, or -1 if it is not mapped.\n\tint getTarget(int source); // Returns the position that source is mapped to.\n\tint getTargetCount(); // Returns the number of targets.\n\tint getTargetOpt(int source); // Returns the target that a source maps to, or -1 if it is not mapped.\n\tvoid identity(); // Initializes this permutation to the identity permutation.\n\tvoid insertSource(int x); // Inserts into the sources.\n\tvoid insertTarget(int x); // Inserts into the targets.\n\tPermutation inverse(); // Returns the inverse permutation.\n\tboolean isIdentity(); // Returns whether this is the identity permutation.\n\tIterator<IntPair> iterator(); // Returns an iterator over the elements in this mapping.\n\tPermutation product(Permutation permutation); // Returns the product of this Permutation with a given Permutation.\n\tvoid set(int source, int target); // Maps source position to target position.\n\tvoid set(int source, int target, boolean allowResize); // Maps source position to target position, automatically resizing if source or target is out of bounds.\n\tvoid setAll(Mapping mapping);\n\tint size(); // Returns the number of elements in this permutation.\n}"}
{"index": 2463, "repo": "exoplayer-r2.3.1", "des": "Represents the set of audio formats that a device is capable of playing.", "code": "Class AudioCapabilities {\n\tboolean equals(java.lang.Object other);\n\tstatic AudioCapabilities getCapabilities(android.content.Context context); // Returns the current audio capabilities for the device.\n\tint getMaxChannelCount(); // Returns the maximum number of channels the device can play at the same time.\n\tboolean supportsEncoding(int encoding); // Returns whether this device supports playback of the specified audio encoding.\n}"}
{"index": 67, "repo": "spring-yarn-boot-2.5.0.RELEASE", "des": "Generic Spring Boot client application used to submit Spring Yarn Boot based apps into Yarn.", "code": "Class YarnSubmitApplication {\n\tYarnSubmitApplication applicationName(String applicationName); // Sets the application name used for submit.\n\tprotected YarnSubmitApplication getThis(); // Gets the instance of this defined by a sub-class.\n\tApplicationId run(); // Run a SpringApplication build by a SpringApplicationBuilder using an empty args.\n\tApplicationId run(String... args); // Run a SpringApplication build by a SpringApplicationBuilder using an empty args.\n}"}
{"index": 1889, "repo": "hadoop-hdfs-3.3.6", "des": "This holds volume reference count as AutoClosable resource.", "code": "Interface FsVolumeReference {\n\tvoid close(); // Decrease the reference count of the volume.\n\tFsVolumeSpi getVolume(); // Returns the underlying volume object.\n}"}
{"index": 18418, "repo": "opencms-core-15.0", "des": "Sitemap action used to generate the sitemap editor.", "code": "Class CmsSitemapActionElement {\n\tjava.lang.String export(); // Returns the serialized data for the core provider wrapped in a script tag.\n\tjava.lang.String exportAll(); // Returns the serialized data for the core provider.\n\tCmsSitemapData getSitemapData(); // Returns the needed server data for client-side usage.\n\tjava.lang.String getTitle(); // Returns the editor title.\n}"}
{"index": 18317, "repo": "opencms-core-15.0", "des": "Stores information about the container page which was last edited, so we can jump back to it later.", "code": "Class CmsADESessionCache.LastPageBean {\n\tCmsUUID getDetailId(); // Returns the detailId.\n\tCmsUUID getPageId(); // Returns the pageId.\n\tjava.lang.String getSiteRoot(); // Returns the siteRoot.\n}"}
{"index": 700, "repo": "ignite-core-2.15.0", "des": "Re-sizable array implementation of the byte list (eliminating auto-boxing of primitive byte type).", "code": "Class GridByteArrayList {\n\tvoid add(byte b); // Appends byte element to the list.\n\tvoid add(byte[] bytes, int off, int len);\n\tvoid add(ByteBuffer buf, int len); // Adds data from byte buffer into array.\n\tvoid add(int i); // Appends integer to the next 4 bytes of list.\n\tvoid add(long l); // Appends long to the next 8 bytes of list.\n\tvoid add(short i); // Appends short to the next 2 bytes of the list.\n\tvoid allocate(int cnt); // Pre-allocates internal array for specified byte number only if it currently is smaller than desired number.\n\tbyte[] array(); // Gets copy of internal array.\n\tint capacity(); // Gets initial capacity of the list.\n\tshort directType(); // Gets message type.\n\tbyte[] entireArray(); // Returns internal array if it represents the whole length, otherwise returns the result of array().\n\tbyte fieldsCount(); // Gets fields count.\n\tbyte get(int i); // Gets the element (byte) at the specified position in the list.\n\tint getInt(int i); // Gets 4 bytes from byte list as an integer.\n\tInputStream inputStream();\n\tbyte[] internalArray(); // Returns the underlying array.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tOutputStream outputStream();\n\tvoid readAll(InputStream in); // Reads all data from input stream until the end into this byte list.\n\tvoid readExternal(ObjectInput in);\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tvoid reset(); // Resets byte array to empty.\n\tvoid set(int pos, byte b); // Sets a byte at specified position.\n\tvoid set(int pos, int i); // Sets integer at specified position.\n\tvoid set(int pos, long l); // Sets long at specified position.\n\tvoid set(int pos, short i); // Sets short at specified position.\n\tint size(); // Gets number of bytes in the list.\n\tvoid writeExternal(ObjectOutput out);\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 5876, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol buffer based implementation of GetSubClusterInfoResponse.", "code": "Class GetSubClusterInfoResponsePBImpl {\n\tboolean equals(Object other);\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.GetSubClusterInfoResponseProto getProto();\n\tSubClusterInfo getSubClusterInfo(); // Get the SubClusterInfo encapsulating the information about the sub-cluster.\n\tvoid setSubClusterInfo(SubClusterInfo subClusterInfo); // Set the SubClusterInfo encapsulating the information about the sub-cluster.\n}"}
{"index": 16705, "repo": "spring-beans-6.0.11", "des": "Simple implementation of the BeanDefinitionRegistry interface.", "code": "public class SimpleBeanDefinitionRegistry extends org.springframework.core.SimpleAliasRegistry implements BeanDefinitionRegistry {\n\tboolean containsBeanDefinition(String beanName); // Check if this registry contains a bean definition with the given name.\n\tBeanDefinition getBeanDefinition(String beanName); // Return the BeanDefinition for the given bean name.\n\tint getBeanDefinitionCount(); // Return the number of beans defined in the registry.\n\tString[] getBeanDefinitionNames(); // Return the names of all beans defined in this registry.\n\tboolean isBeanNameInUse(String beanName); // Determine whether the given bean name is already in use within this registry, i.e.\n\tvoid registerBeanDefinition(String beanName, BeanDefinition beanDefinition); // Register a new bean definition with this registry.\n\tvoid removeBeanDefinition(String beanName); // Remove the BeanDefinition for the given name.\n}"}
{"index": 5559, "repo": "org.apache.karaf.main-2.4.4", "des": "A wire connecting a BundleCapability to a BundleRequirement.", "code": "Interface BundleWire {\n\tBundleCapability getCapability(); // Returns the BundleCapability for this wire.\n\tBundleRevision getProvider(); // Returns the resource providing the capability.\n\tBundleWiring getProviderWiring(); // Returns the bundle wiring providing the capability.\n\tBundleRequirement getRequirement(); // Return the BundleRequirement for this wire.\n\tBundleRevision getRequirer(); // Returns the resource who requires the capability.\n\tBundleWiring getRequirerWiring(); // Returns the bundle wiring who requires the capability.\n}"}
{"index": 12337, "repo": "jena-core-4.9.0", "des": "This interface represents an XML Schema.", "code": "public interface XSModel {\n\tXSObjectList getAnnotations(); // [annotations]: a set of annotations if it exists, otherwise an empty XSObjectList.\n\tXSAttributeDeclaration getAttributeDeclaration(String name, String namespace); // Convenience method.\n\tXSAttributeGroupDefinition getAttributeGroup(String name, String namespace); // Convenience method.\n\tXSNamedMap getComponents(short objectType); // Returns a list of top-level components, i.e.\n\tXSNamedMap getComponentsByNamespace(short objectType, String namespace); // Convenience method.\n\tXSElementDeclaration getElementDeclaration(String name, String namespace); // Convenience method.\n\tXSIDCDefinition getIDCDefinition(String name, String namespace); // Convenience method.\n\tXSModelGroupDefinition getModelGroupDefinition(String name, String namespace); // Convenience method.\n\tXSNamespaceItemList getNamespaceItems(); // A set of namespace schema information information items (of type XSNamespaceItem), one for each namespace name which appears as the target namespace of any schema component in the schema used for that assessment, and one for absent if any schema component in the schema had no target namespace.\n\tStringList getNamespaces(); // Convenience method.\n\tXSNotationDeclaration getNotationDeclaration(String name, String namespace); // Convenience method.\n\tXSObjectList getSubstitutionGroup(XSElementDeclaration head); // Convenience method.\n\tXSTypeDefinition getTypeDefinition(String name, String namespace); // Convenience method.\n}"}
{"index": 12092, "repo": "jena-core-4.9.0", "des": "Implementation of the hasValue restriction abstraction.", "code": "public class HasValueRestrictionImpl extends RestrictionImpl implements HasValueRestriction {\n\tRDFNode getHasValue(); // Answer the RDF value that all values of the restricted property must be equal to.\n\tboolean hasValue(RDFNode value); // Answer true if this property restriction has the given RDF value as the value which all values of the restricted property must equal.\n\tvoid removeHasValue(RDFNode value); // Remove the statement that this restriction requires the restricted property to have the given value.\n\tvoid setHasValue(RDFNode value); // Assert that this restriction restricts the property to have the given value.\n}"}
{"index": 4188, "repo": "commons-geometry-spherical-1.0", "des": "This class represents a point on the 2-sphere.", "code": "Class Point2S {\n\tPoint2S antipodal(); // Get the point exactly opposite this point on the sphere.\n\tdouble distance(Point2S point);\n\tstatic double distance(Point2S p1, Point2S p2); // Compute the distance (angular separation) between two points.\n\tboolean eq(Point2S point, Precision.DoubleEquivalence precision); // Return true if this point should be considered equivalent to the argument using the given precision context.\n\tboolean equals(Object other); // Test for the equality of two points.\n\tstatic Point2S from(Vector3D vector); // Build a point from its underlying 3D vector.\n\tdouble getAzimuth(); // Get the azimuth angle in the x-y plane in the range [0, 2pi).\n\tint getDimension();\n\tdouble getPolar(); // Get the polar angle in the range [0, pi).\n\tVector3D.Unit getVector(); // Get the corresponding normalized vector in 3D Euclidean space.\n\tboolean isFinite();\n\tboolean isInfinite();\n\tboolean isNaN();\n\tstatic Point2S of(double azimuth, double polar); // Build a vector from its spherical coordinates.\n\tstatic Point2S parse(String str); // Parses the given string and returns a new point instance.\n\tPoint2S slerp(Point2S other, double t); // Spherically interpolate a point along the shortest arc between this point and the given point.\n}"}
{"index": 9746, "repo": "commons-math3-3.6.1", "des": "Implements one-way ANOVA (analysis of variance) statistics.", "code": "Class OneWayAnova {\n\tdouble anovaFValue(Collection<double[]> categoryData); // Computes the ANOVA F-value for a collection of double[] arrays.\n\tdouble anovaPValue(Collection<double[]> categoryData); // Computes the ANOVA P-value for a collection of double[] arrays.\n\tdouble anovaPValue(Collection<SummaryStatistics> categoryData, boolean allowOneElementData); // Computes the ANOVA P-value for a collection of SummaryStatistics.\n\tboolean anovaTest(Collection<double[]> categoryData, double alpha); // Performs an ANOVA test, evaluating the null hypothesis that there is no difference among the means of the data categories.\n}"}
{"index": 16915, "repo": "spring-integration-ip-6.1.2", "des": "Reads data in an InputStream to a byte[]; data must be terminated by \\r\\n (not included in resulting byte[]).", "code": "public class ByteArrayCrLfSerializer extends AbstractPooledBufferByteArraySerializer {\n\tbyte[] doDeserialize(InputStream inputStream, byte[] buffer); // Reads the data in the inputStream to a byte[].\n\tint fillToCrLf(InputStream inputStream, byte[] buffer);\n\tvoid serialize(byte[] bytes, OutputStream outputStream); // Writes the byte[] to the stream and appends \\r\\n.\n}"}
{"index": 3093, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "An allocator provided externally to storage classes to allocate MemoryBuffer-s.", "code": "Interface Allocator {\n\tvoid allocateMultiple(MemoryBuffer[] dest, int size, Allocator.BufferObjectFactory factory); // Allocates multiple buffers of a given size.\n\tvoid deallocate(MemoryBuffer buffer); // Deallocates a memory buffer.\n\tint getMaxAllocation(); // Maximum allocation size supported by this allocator.\n\tboolean isDirectAlloc(); // Whether the allocator uses direct buffers.\n}"}
{"index": 1973, "repo": "hive-exec-4.0.0-alpha-2", "des": "Current syntax for creating full acid transactional tables is any one of following 3 ways: create table T (a int, b int) stored as orc tblproperties('transactional'='true').", "code": "Class AcidUtils.AcidOperationalProperties {\n\tstatic AcidUtils.AcidOperationalProperties getDefault(); // Returns an acidOperationalProperties object that represents default ACID behavior for tables that do no explicitly specify/override the default behavior.\n\tstatic AcidUtils.AcidOperationalProperties getInsertOnly(); // Returns an acidOperationalProperties object for tables that uses ACID framework but only supports INSERT operation and does not require ORC or bucketing\n\tboolean isFetchBucketId();\n\tboolean isFetchDeletedRows();\n\tboolean isHashBasedMerge();\n\tboolean isInsertOnly();\n\tboolean isSplitUpdate();\n\tstatic AcidUtils.AcidOperationalProperties parseInt(int properties); // Returns an acidOperationalProperties object that is represented by an encoded 32-bit integer.\n\tstatic AcidUtils.AcidOperationalProperties parseString(String propertiesStr); // Returns an acidOperationalProperties object that is represented by an encoded string.\n\tAcidUtils.AcidOperationalProperties setFetchDeletedRows(boolean fetchDeletedRows);\n\tAcidUtils.AcidOperationalProperties setHashBasedMerge(boolean isHashBasedMerge); // Sets the hash-based merge property for ACID operations that combines delta files using GRACE hash join based approach, when turned on.\n\tAcidUtils.AcidOperationalProperties setInsertOnly(boolean isInsertOnly);\n\tAcidUtils.AcidOperationalProperties setInsertOnlyFetchBucketId(boolean fetchBucketId);\n\tAcidUtils.AcidOperationalProperties setSplitUpdate(boolean isSplitUpdate); // Sets the split update property for ACID operations based on the boolean argument.\n\tint toInt();\n}"}
{"index": 13967, "repo": "spring-webflux-6.0.11", "des": "Resolves method arguments annotated with an @SessionAttribute.", "code": "public class SessionAttributeMethodArgumentResolver extends AbstractNamedValueArgumentResolver {\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter); // Invoked when a named value is required, but AbstractNamedValueArgumentResolver.resolveName(String, MethodParameter, ServerWebExchange) returned null and there is no default value.\n\tprotected reactor.core.publisher.Mono<Object> resolveName(String name, org.springframework.core.MethodParameter parameter, org.springframework.web.server.ServerWebExchange exchange); // Resolve the given parameter type and value name into an argument value.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether this resolver supports the given method parameter.\n}"}
{"index": 177, "repo": "commons-collections4-4.4", "des": "Decorates a Map to obtain Set behaviour.", "code": "Class MapBackedSet<E,V> {\n\tboolean add(E obj);\n\tboolean addAll(Collection<? extends E> coll);\n\tvoid clear();\n\tboolean contains(Object obj);\n\tboolean containsAll(Collection<?> coll);\n\tboolean equals(Object obj);\n\tboolean isEmpty();\n\tIterator<E> iterator();\n\tstatic <E,V> MapBackedSet<E,V> mapBackedSet(Map<E,? super V> map); // Factory method to create a set from a map.\n\tstatic <E,V> MapBackedSet<E,V> mapBackedSet(Map<E,? super V> map, V dummyValue); // Factory method to create a set from a map.\n\tboolean remove(Object obj);\n\tboolean removeAll(Collection<?> coll);\n\tboolean removeIf(Predicate<? super E> filter);\n\tboolean retainAll(Collection<?> coll);\n\tint size();\n\tObject[] toArray();\n\t<T> T[] toArray(T[] array);\n}"}
{"index": 6216, "repo": "jackson-databind-2.15.2", "des": "Serializer implementation where given Java type is first converted to an intermediate \"delegate type\" (using a configured Converter, and then this delegate value is serialized by Jackson.", "code": "Class StdDelegatingSerializer {\n\tprotected JsonSerializer<Object> _findSerializer(Object value, SerializerProvider serializers); // Helper method used for locating serializer to use in dynamic use case, where actual type value gets converted to is not specified beyond basic Object, and where serializer needs to be located dynamically based on actual value type.\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tprotected Object convertValue(Object value); // Method called to convert from source Java value into delegate value (which will be serialized using standard Jackson serializer for delegate type)\n\tJsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property); // Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property.\n\tprotected Converter<Object,?> getConverter();\n\tJsonSerializer<?> getDelegatee(); // Accessor that can be used to determine if this serializer uses another serializer for actual serialization, by delegating calls.\n\tboolean isEmpty(SerializerProvider prov, Object value); // Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values).\n\tvoid resolve(SerializerProvider provider); // Method called after SerializerProvider has registered the serializer, but before it has returned it to the caller.\n\tvoid serialize(Object value, JsonGenerator gen, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer); // Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.\n\tprotected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer); // Method used for creating resolved contextual instances.\n}"}
{"index": 7057, "repo": "calcite-core-1.34.0", "des": "Callback for a relational expression to dump itself as JSON.", "code": "Class RelJsonWriter {\n\tString asString(); // Returns a JSON string describing the relational expressions that were just explained.\n\tRelWriter done(RelNode node); // Writes the completed explanation.\n\tprotected void explain_(RelNode rel, List<Pair<String,Object>> values);\n\tvoid explain(RelNode rel, List<Pair<String,Object>> valueList); // Prints an explanation of a node, with a list of (term, value) pairs.\n\tSqlExplainLevel getDetailLevel(); // Returns detail level at which plan should be generated.\n\tRelWriter item(String term, @Nullable Object value); // Adds an attribute to the explanation of the current node.\n\tboolean nest(); // Returns whether the writer prefers nested values.\n}"}
{"index": 15575, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "des": "Properties for the management server (e.g.", "code": "@ConfigurationProperties(prefix=\"management.server\", ignoreUnknownFields=true) public class ManagementServerProperties extends Object {\n\tInetAddress getAddress();\n\tString getBasePath();\n\tInteger getPort(); // Returns the management port or null if the server port should be used.\n\torg.springframework.boot.web.server.Ssl getSsl();\n\tvoid setAddress(InetAddress address);\n\tvoid setBasePath(String basePath);\n\tvoid setPort(Integer port); // Sets the port of the management server, use null if the server port should be used.\n\tvoid setSsl(org.springframework.boot.web.server.Ssl ssl);\n}"}
{"index": 3153, "repo": "solr-dataimporthandler-8.11.2", "des": "A streaming xpath parser which uses StAX for XML parsing.", "code": "Class XPathRecordReader {\n\tXPathRecordReader addField(String name, String xpath, boolean multiValued); // A wrapper around addField0 to create a series of Nodes based on the supplied Xpath and a given fieldName.\n\tXPathRecordReader addField(String name, String xpath, boolean multiValued, int flags); // A wrapper around addField0 to create a series of Nodes based on the supplied Xpath and a given fieldName.\n\tList<Map<String,Object>> getAllRecords(Reader r); // Uses streamRecords to parse the XML source but with a handler that collects all the emitted records into a single List which is returned upon completion.\n\tvoid streamRecords(Reader r, XPathRecordReader.Handler handler); // Creates an XML stream reader on top of whatever reader has been configured.\n}"}
{"index": 2968, "repo": "tink-1.10.0", "des": "An interface representing a computation of the Streaming MAC.", "code": "Interface ChunkedMacComputation {\n\tbyte[] computeMac(); // Computes a tag for the provided data.\n\tvoid update(ByteBuffer data); // Processes the next chunk of input, represented by ByteBuffer data.\n}"}
{"index": 5774, "repo": "freemarker-2.3.32", "des": "Represents the XML output format (MIME type \"application/xml\", name \"XML\").", "code": "Class XMLOutputFormat {\n\tjava.lang.String escapePlainText(java.lang.String plainTextContent); // Should give the same result as MarkupOutputFormat.fromPlainTextByEscaping(String) and then MarkupOutputFormat.getMarkupString(TemplateMarkupOutputModel), but the implementation may use a more efficient solution.\n\tjava.lang.String getMimeType(); // Returns the MIME type of the output format.\n\tjava.lang.String getName(); // The short name used to refer to this format (like in the #ftl header).\n\tboolean isLegacyBuiltInBypassed(java.lang.String builtInName); // Tells if a string built-in that can't handle a TemplateMarkupOutputModel left hand operand can bypass this object as is.\n\tprotected TemplateXMLOutputModel newTemplateMarkupOutputModel(java.lang.String plainTextContent, java.lang.String markupContent); // Creates a new CommonTemplateMarkupOutputModel that's bound to this OutputFormat instance.\n\tvoid output(java.lang.String textToEsc, java.io.Writer out); // Equivalent to calling MarkupOutputFormat.fromPlainTextByEscaping(String) and then MarkupOutputFormat.output(TemplateMarkupOutputModel, Writer), but the implementation may use a more efficient solution.\n}"}
{"index": 18314, "repo": "opencms-core-15.0", "des": "Parses the HTTP Accept-Language header as per section 14.4 of RFC 2068 (HTTP 1.1 header field definitions) and creates a sorted list of Locales from it.", "code": "Class CmsAcceptLanguageHeaderParser {\n\tstatic java.lang.String createLanguageHeader(); // Creates a value string for the HTTP Accept-Language header based on the default localed.\n\tjava.util.List<java.util.Locale> getAcceptedLocales(); // Returns the sorted list of accepted Locales.\n}"}
{"index": 5215, "repo": "druid-processing-26.0.0", "des": "Reads values written by DoubleFieldWriter.", "code": "Class DoubleFieldReader {\n\tboolean isComparable(); // Whether this field is comparable.\n\tboolean isNull(org.apache.datasketches.memory.Memory memory, long position); // Whether the provided memory position points to a null value.\n\tColumnValueSelector<?> makeColumnValueSelector(org.apache.datasketches.memory.Memory memory, ReadableFieldPointer fieldPointer); // Create a ColumnValueSelector backed by some memory and a moveable pointer.\n\tDimensionSelector makeDimensionSelector(org.apache.datasketches.memory.Memory memory, ReadableFieldPointer fieldPointer, ExtractionFn extractionFn); // Create a DimensionSelector backed by some memory and a moveable pointer.\n}"}
{"index": 18220, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Extension to Manageable for things that are optionally Manageable depending on some internal state.", "code": "Interface OptionallyManageable {\n\tdefault java.lang.Object getManagementBean(); // The management bean (MBean) for this service.\n\tjava.util.List<Manageable> getRealManageables(); // Any wrapped services that are Manageable.\n}"}
{"index": 573, "repo": "ignite-core-2.15.0", "des": "Checkpointer object is used for notification on checkpoint begin, predicate is scheduledCp.", "code": "Class Checkpointer {\n\tprotected void body(); // The implementation should provide the execution body for this runnable.\n\tvoid cancel(); // Cancels this runnable.\n\tboolean cancelOrWaitPartitionDestroy(int grpId, int partId);\n\tCheckpointProgress currentProgress();\n\tvoid finalizeCheckpointOnRecovery(long cpTs, UUID cpId, WALPointer walPtr, StripedExecutor exec);\n\tCheckpointProgress scheduleCheckpoint(long delayFromNow, String reason);\n\t<R> CheckpointProgress scheduleCheckpoint(long delayFromNow, String reason, IgniteInClosure<? super IgniteInternalFuture<R>> lsnr); // Change the information for a scheduled checkpoint if it was scheduled further than delayFromNow, or do nothing otherwise.\n\tvoid schedulePartitionDestroy(@Nullable CacheGroupContext grpCtx, int grpId, int partId);\n\tvoid shutdownCheckpointer(boolean cancel);\n\tvoid shutdownNow(); // Stopping all checkpoint activity immediately even if the current checkpoint is in progress.\n\tvoid skipCheckpointOnNodeStop(boolean skip); // Skip checkpoint on node stop.\n\tvoid start(); // Restart worker in IgniteThread.\n\tIgniteInternalFuture wakeupForSnapshotCreation(SnapshotOperation snapshotOperation);\n}"}
{"index": 11944, "repo": "maven-core-4.0.0-alpha-7", "des": "Assists in resolving the dependencies of a plugin.", "code": "public interface PluginDependenciesResolver {\n\torg.eclipse.aether.artifact.Artifact resolve(Plugin plugin, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Resolves the main artifact of the specified plugin.\n\torg.eclipse.aether.graph.DependencyNode resolve(Plugin plugin, org.eclipse.aether.artifact.Artifact pluginArtifact, org.eclipse.aether.graph.DependencyFilter dependencyFilter, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Resolves the runtime dependencies of the specified plugin.\n}"}
{"index": 16358, "repo": "spring-data-jpa-3.1.2", "des": "Base class for JpaEntityInformation implementations to share common method implementations.", "code": "public abstract class JpaEntityInformationSupport<T,ID> extends AbstractEntityInformation<T,ID> implements JpaEntityInformation<T,ID> {\n\tstatic <T> JpaEntityInformation<T,?> getEntityInformation(Class<T> domainClass, jakarta.persistence.EntityManager em); // Creates a JpaEntityInformation for the given domain class and EntityManager.\n\tString getEntityName(); // Returns the name of the entity.\n}"}
{"index": 11691, "repo": "spring-cloud-commons-3.1.7", "des": "Stores the data for a load-balanced call that is being retried.", "code": "public class LoadBalancerRetryContext extends Object {\n\tprotected org.springframework.web.reactive.function.client.ClientResponse getClientResponse(); // Returns the ClientResponse returned for load-balanced request.\n\tprotected org.springframework.web.reactive.function.client.ClientRequest getRequest(); // Returns the ClientRequest that is being load-balanced.\n\tprotected org.springframework.http.HttpMethod getRequestMethod(); // Returns the HttpMethod of the ClientRequest that is being load-balanced.\n\tprotected Integer getResponseStatusCode(); // Returns the status code from the ClientResponse returned for load-balanced request.\n\tprotected Integer getRetriesNextServiceInstance(); // Returns the number of times a load-balanced request should be retried on the next ServiceInstance.\n\tprotected Integer getRetriesSameServiceInstance(); // Returns the number of times a load-balanced request should be retried on the same ServiceInstance.\n\tprotected void incrementRetriesNextServiceInstance(); // Increments the counter for the retries executed against the same ServiceInstance.\n\tprotected void incrementRetriesSameServiceInstance(); // Increments the counter for the retries executed against the same ServiceInstance.\n\tprotected void resetRetriesSameServiceInstance(); // Resets the counter for the retries executed against the same ServiceInstance.\n\tprotected void setClientResponse(org.springframework.web.reactive.function.client.ClientResponse clientResponse); // Sets the ClientResponse returned for load-balanced request.\n}"}
{"index": 5734, "repo": "freemarker-2.3.32", "des": "Matches the whole template source name (also known as template source path) with the given glob.", "code": "Class PathGlobMatcher {\n\tPathGlobMatcher caseInsensitive(boolean caseInsensitive); // Fluid API variation of setCaseInsensitive(boolean)\n\tboolean isCaseInsensitive();\n\tboolean matches(java.lang.String sourceName, java.lang.Object templateSource);\n\tvoid setCaseInsensitive(boolean caseInsensitive); // Sets if the matching will be case insensitive (UNICODE compliant); default is false.\n}"}
{"index": 18574, "repo": "hibernate-core-5.6.15.Final", "des": "Describes a relationship annotated with MapsId", "code": "Interface MapsIdSource {\n\tSingularAttributeSourceToOne getAssociationAttributeSource(); // The attribute source information\n\tjava.lang.String getMappedIdAttributeName(); // Obtain the MapsId.value() naming the attribute within the EmbeddedId mapped by this relationship.\n}"}
{"index": 13016, "repo": "spring-aop-6.0.11", "des": "Base MethodInterceptor implementation for tracing.", "code": "public abstract class AbstractTraceInterceptor extends Object implements MethodInterceptor, Serializable {\n\tprotected Class<?> getClassForLogging(Object target); // Determine the class to use for logging purposes.\n\tprotected org.apache.commons.logging.Log getLoggerForInvocation(MethodInvocation invocation); // Return the appropriate Log instance to use for the given MethodInvocation.\n\tObject invoke(MethodInvocation invocation); // Determines whether logging is enabled for the particular MethodInvocation.\n\tprotected abstract Object invokeUnderTrace(MethodInvocation invocation, org.apache.commons.logging.Log logger); // Subclasses must override this method to perform any tracing around the supplied MethodInvocation.\n\tprotected boolean isInterceptorEnabled(MethodInvocation invocation, org.apache.commons.logging.Log logger); // Determine whether the interceptor should kick in, that is, whether the invokeUnderTrace method should be called.\n\tprotected boolean isLogEnabled(org.apache.commons.logging.Log logger); // Determine whether the given Log instance is enabled.\n\tvoid setHideProxyClassNames(boolean hideProxyClassNames); // Set to \"true\" to have dynamic loggers hide proxy class names wherever possible.\n\tvoid setLogExceptionStackTrace(boolean logExceptionStackTrace); // Set whether to pass an exception to the logger, suggesting inclusion of its stack trace into the log.\n\tvoid setLoggerName(String loggerName); // Set the name of the logger to use.\n\tvoid setUseDynamicLogger(boolean useDynamicLogger); // Set whether to use a dynamic logger or a static logger.\n\tprotected void writeToLog(org.apache.commons.logging.Log logger, String message); // Write the supplied trace message to the supplied Log instance.\n\tprotected void writeToLog(org.apache.commons.logging.Log logger, String message, Throwable ex); // Write the supplied trace message and Throwable to the supplied Log instance.\n}"}
{"index": 9184, "repo": "fontbox-3.0.0-beta1", "des": "This is an implementation of a bounding box.", "code": "Class BoundingBox {\n\tboolean contains(float x, float y); // Checks if a point is inside this rectangle.\n\tfloat getHeight(); // This will get the height of this rectangle as calculated by upperRightY - lowerLeftY.\n\tfloat getLowerLeftX(); // Getter for property lowerLeftX.\n\tfloat getLowerLeftY(); // Getter for property lowerLeftY.\n\tfloat getUpperRightX(); // Getter for property upperRightX.\n\tfloat getUpperRightY(); // Getter for property upperRightY.\n\tfloat getWidth(); // This will get the width of this rectangle as calculated by upperRightX - lowerLeftX.\n\tvoid setLowerLeftX(float lowerLeftXValue); // Setter for property lowerLeftX.\n\tvoid setLowerLeftY(float lowerLeftYValue); // Setter for property lowerLeftY.\n\tvoid setUpperRightX(float upperRightXValue); // Setter for property upperRightX.\n\tvoid setUpperRightY(float upperRightYValue); // Setter for property upperRightY.\n}"}
{"index": 17717, "repo": "spring-web-6.0.11", "des": "Proxy for a standard Servlet Filter, delegating to a Spring-managed bean that implements the Filter interface.", "code": "public class DelegatingFilterProxy extends GenericFilterBean {\n\tvoid destroy(); // Subclasses may override this to perform custom filter shutdown.\n\tprotected void destroyDelegate(Filter delegate); // Destroy the Filter delegate.\n\tvoid doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain);\n\tprotected WebApplicationContext findWebApplicationContext(); // Return the WebApplicationContext passed in at construction time, if available.\n\tString getContextAttribute(); // Return the name of the ServletContext attribute which should be used to retrieve the WebApplicationContext from which to load the delegate Filter bean.\n\tprotected String getTargetBeanName(); // Return the name of the target bean in the Spring application context.\n\tprotected Filter initDelegate(WebApplicationContext wac); // Initialize the Filter delegate, defined as bean the given Spring application context.\n\tprotected void initFilterBean(); // Subclasses may override this to perform custom initialization.\n\tprotected void invokeDelegate(Filter delegate, ServletRequest request, ServletResponse response, FilterChain filterChain); // Actually invoke the delegate Filter with the given request and response.\n\tprotected boolean isTargetFilterLifecycle(); // Return whether to invoke the Filter.init and Filter.destroy lifecycle methods on the target bean.\n\tvoid setContextAttribute(String contextAttribute); // Set the name of the ServletContext attribute which should be used to retrieve the WebApplicationContext from which to load the delegate Filter bean.\n\tvoid setTargetBeanName(String targetBeanName); // Set the name of the target bean in the Spring application context.\n\tvoid setTargetFilterLifecycle(boolean targetFilterLifecycle); // Set whether to invoke the Filter.init and Filter.destroy lifecycle methods on the target bean.\n}"}
{"index": 6344, "repo": "curator-framework-5.5.0", "des": "A super set of all the various Zookeeper events/background methods.", "code": "Interface CuratorEvent {\n\tList<org.apache.zookeeper.data.ACL> getACLList();\n\tList<String> getChildren();\n\tObject getContext();\n\tbyte[] getData();\n\tString getName();\n\tList<CuratorTransactionResult> getOpResults();\n\tString getPath();\n\tint getResultCode();\n\torg.apache.zookeeper.data.Stat getStat();\n\tCuratorEventType getType(); // check here first - this value determines the type of event and which methods will have valid values\n\torg.apache.zookeeper.WatchedEvent getWatchedEvent(); // If getType() returns CuratorEventType.WATCHED this will return the WatchedEvent\n}"}
{"index": 13436, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required to establish a connection to a Redis service.", "code": "public interface RedisConnectionDetails extends ConnectionDetails {\n\tdefault RedisConnectionDetails.Cluster getCluster(); // Redis cluster configuration.\n\tdefault String getPassword(); // Login password of the redis server.\n\tdefault RedisConnectionDetails.Sentinel getSentinel(); // Redis sentinel configuration.\n\tdefault RedisConnectionDetails.Standalone getStandalone(); // Redis standalone configuration.\n\tdefault String getUsername(); // Login username of the redis server.\n}"}
{"index": 1417, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents a stream object in a PDF document.", "code": "Class COSStream {\n\tvoid accept(ICOSVisitor visitor); // visitor pattern double dispatch method.\n\tvoid close(); // Called by PDFBox when the PDDocument is closed, this closes the stream and removes the data.\n\tCOSInputStream createInputStream(); // Returns a new InputStream which reads the decoded stream data.\n\tCOSInputStream createInputStream(DecodeOptions options);\n\tOutputStream createOutputStream(); // Returns a new OutputStream for writing stream data, using the current filters.\n\tOutputStream createOutputStream(COSBase filters); // Returns a new OutputStream for writing stream data, using and the given filters.\n\tInputStream createRawInputStream(); // Returns a new InputStream which reads the encoded PDF stream data.\n\tOutputStream createRawOutputStream(); // Returns a new OutputStream for writing encoded PDF data.\n\torg.apache.pdfbox.io.RandomAccessRead createView(); // Returns a new RandomAccessRead which reads the decoded stream data.\n\tCOSBase getFilters(); // This will return the filters to apply to the byte stream.\n\tlong getLength(); // Returns the length of the encoded stream.\n\tboolean hasData(); // Indicates whether the stream contains any data or not.\n\tString toTextString(); // Returns the contents of the stream as a PDF \"text string\".\n}"}
{"index": 12399, "repo": "spring-data-couchbase-5.1.2", "des": "Terminating operations invoking the actual execution.", "code": "public static interface ExecutableFindByIdOperation.TerminatingFindById<T> extends OneAndAllId<T> {\n\tCollection<? extends T> all(Collection<String> ids); // Finds a list of documents based on the given IDs.\n\tT one(String id); // Finds one document based on the given ID.\n}"}
{"index": 10542, "repo": "groovy-all-4.0.13", "des": "Represents a list of Integer objects starting at and potentially including a specified from value up (or down) to and potentially including a given to value.", "code": "public class IntRange extends AbstractList<Integer> implements Range<Integer>, Serializable {\n\t<T extends Number & Comparable>NumberRange by(T stepSize); // Creates a new NumberRange with the same from and to as this IntRange but with a step size of stepSize.\n\tboolean contains(Object value);\n\tboolean containsAll(Collection other);\n\tboolean containsWithinBounds(Object o); // Indicates whether an object is greater than or equal to the from value for the range and less than or equal to the to value.\n\tboolean equals(IntRange that); // Compares an IntRange to another IntRange.\n\tboolean equals(Object that); // Determines if this object is equal to another object.\n\tInteger get(int index);\n\tInteger getFrom(); // The lower value in the range.\n\tint getFromInt(); // Gets the 'from' value as a primitive integer.\n\tBoolean getInclusive(); // Returns the same as getInclusiveRight, kept here for backwards compatibility.\n\tBoolean getInclusiveLeft(); // Returns the inclusiveLeft flag.\n\tBoolean getInclusiveRight(); // Returns the inclusiveRight flag.\n\tInteger getTo(); // The upper value in the range.\n\tint getToInt(); // Gets the 'to' value as a primitive integer.\n\tString inspect();\n\tboolean isReverse(); // Indicates whether this is a reverse range which iterates backwards starting from the to value and ending on the from value\n\tIterator<Integer> iterator();\n\tint size();\n\tList<Integer> step(int step); // Forms a list by stepping through the range by the indicated interval.\n\tvoid step(int step, Closure closure); // Steps through the range, calling a closure for each item.\n\tList<Integer> subList(int fromIndex, int toIndex);\n\tRangeInfo subListBorders(int size); // A method for determining from and to information when using this IntRange to index an aggregate object of the specified size.\n}"}
{"index": 4972, "repo": "commons-collections-3.2.2", "des": "Provides convenient static utility methods for Comparator objects.", "code": "Class ComparatorUtils {\n\tstatic Comparator booleanComparator(boolean trueFirst); // Gets a Comparator that can sort Boolean objects.\n\tstatic Comparator chainedComparator(Collection comparators); // Gets a comparator that compares using a collection of Comparators, applied in (default iterator) sequence until one returns not equal or the collection is exhausted.\n\tstatic Comparator chainedComparator(Comparator[] comparators); // Gets a comparator that compares using an array of Comparators, applied in sequence until one returns not equal or the array is exhausted.\n\tstatic Comparator chainedComparator(Comparator comparator1, Comparator comparator2); // Gets a comparator that compares using two Comparators.\n\tstatic Object max(Object o1, Object o2, Comparator comparator); // Returns the larger of the given objects according to the given comparator, returning the second object if the comparator returns equal.\n\tstatic Object min(Object o1, Object o2, Comparator comparator); // Returns the smaller of the given objects according to the given comparator, returning the second object if the comparator returns equal.\n\tstatic Comparator naturalComparator(); // Gets a comparator that uses the natural order of the objects.\n\tstatic Comparator nullHighComparator(Comparator comparator); // Gets a Comparator that controls the comparison of null values.\n\tstatic Comparator nullLowComparator(Comparator comparator); // Gets a Comparator that controls the comparison of null values.\n\tstatic Comparator reversedComparator(Comparator comparator); // Gets a comparator that reverses the order of the given comparator.\n\tstatic Comparator transformedComparator(Comparator comparator, Transformer transformer); // Gets a Comparator that passes transformed objects to the given comparator.\n}"}
{"index": 2693, "repo": "mahout-core-14.1", "des": "Implements vector that only stores non-zero doubles.", "code": "Class RandomAccessSparseVector {\n\tVector assign(Vector other); // Assign the other vector values to the receiver\n\tRandomAccessSparseVector clone(); // Return a copy of the recipient\n\tdouble getIteratorAdvanceCost(); // Gets an estimate of the cost (in number of operations) it takes to advance an iterator through the nonzero elements of this vector.\n\tdouble getLookupCost(); // Gets an estimate of the cost (in number of operations) it takes to lookup a random element in this vector.\n\tint getNumNondefaultElements(); // Return the number of values in the recipient which are not the default value.\n\tint getNumNonZeroElements(); // Return the number of non zero elements in the vector.\n\tdouble getQuick(int index); // Return the value at the given index, without checking bounds\n\tvoid incrementQuick(int index, double increment); // Increment the value at the given index by the given value.\n\tboolean isAddConstantTime(); // This is \"sort of\" constant, but really it might resize the array.\n\tboolean isDense(); // true if this implementation should be considered dense -- that it explicitly represents every value\n\tboolean isSequentialAccess(); // true if this implementation should be considered to be iterable in index order in an efficient way.\n\tIterator<Vector.Element> iterateNonZero(); // NOTE: this implementation reuses the Vector.Element instance for each call of next().\n\tIterator<Vector.Element> iterator(); // Iterates over all elements\n\tRandomAccessSparseVector like(); // Return an empty vector of the same underlying class as the receiver\n\tVector like(int cardinality); // Return a new empty vector of the same underlying class as the receiver with given cardinality\n\tprotected Matrix matrixLike(int rows, int columns); // Subclasses must override to return an appropriately sparse or dense result\n\tvoid mergeUpdates(OrderedIntDoubleMapping updates); // Merge a set of (index, value) pairs into the vector.\n\tvoid setQuick(int index, double value); // Set the value at the given index, without checking bounds\n}"}
{"index": 5175, "repo": "druid-processing-26.0.0", "des": "A channel factory which provides ordered composed channels.", "code": "Class ComposingOutputChannelFactory {\n\tOutputChannel openChannel(int partitionNumber); // Create a channel pair tagged with a particular partition number.\n\tOutputChannel openNilChannel(int partitionNumber); // Create a non-writable, always-empty channel pair tagged with a particular partition number.\n\tPartitionedOutputChannel openPartitionedChannel(String name, boolean deleteAfterRead); // Create a channel pair tagged with a particular name and a flag to delete the channel data after its read.\n}"}
{"index": 123, "repo": "commons-collections4-4.4", "des": "An extended ListIterator that allows concurrent changes to the underlying list.", "code": "Class CursorableLinkedList.Cursor<E> {\n\tvoid add(E obj); // Adds an object to the list.\n\tprotected void checkModCount(); // Override superclass modCount check, and replace it with our valid flag.\n\tvoid close(); // Mark this cursor as no longer being needed.\n\tint nextIndex(); // Gets the index of the next element to be returned.\n\tprotected void nodeChanged(AbstractLinkedList.Node<E> node); // Handle event from the list when a node has changed.\n\tprotected void nodeInserted(AbstractLinkedList.Node<E> node); // Handle event from the list when a node has been added.\n\tprotected void nodeRemoved(AbstractLinkedList.Node<E> node); // Handle event from the list when a node has been removed.\n\tvoid remove(); // Removes the item last returned by this iterator.\n}"}
{"index": 18612, "repo": "hibernate-core-5.6.15.Final", "des": "Describes the registration of a named strategy implementation.", "code": "Interface StrategyRegistration<T> {\n\tjava.lang.Iterable<java.lang.String> getSelectorNames(); // Any registered names for this strategy registration.\n\tjava.lang.Class<? extends T> getStrategyImplementation(); // The strategy implementation class.\n\tjava.lang.Class<T> getStrategyRole(); // The strategy role.\n}"}
{"index": 9634, "repo": "commons-math3-3.6.1", "des": "Univariate functions differentiator using finite differences.", "code": "Class FiniteDifferencesDifferentiator {\n\tUnivariateDifferentiableFunction differentiate(UnivariateFunction function); // Create an implementation of a differential from a regular function.\n\tUnivariateDifferentiableMatrixFunction differentiate(UnivariateMatrixFunction function); // Create an implementation of a differential from a regular matrix function.\n\tUnivariateDifferentiableVectorFunction differentiate(UnivariateVectorFunction function); // Create an implementation of a differential from a regular vector function.\n\tint getNbPoints(); // Get the number of points to use.\n\tdouble getStepSize(); // Get the step size.\n}"}
{"index": 7857, "repo": "cassandra-all-4.1.2", "des": "Helper class to deserialize Unfiltered object from disk efficiently.", "code": "Class UnfilteredDeserializer {\n\tvoid clearState(); // Clears any state in this deserializer.\n\tint compareNextTo(ClusteringBound<?> bound); // Compare the provided bound to the next atom to read on disk.\n\tstatic UnfilteredDeserializer create(TableMetadata metadata, DataInputPlus in, SerializationHeader header, DeserializationHelper helper);\n\tboolean hasNext(); // Whether or not there is more atom to read.\n\tboolean nextIsRow(); // Returns whether the next atom is a row or not.\n\tUnfiltered readNext(); // Returns the next atom.\n\tvoid skipNext(); // Skips the next atom.\n}"}
{"index": 7934, "repo": "commons-jcs3-core-3.1", "des": "Used to receive a cache event notification.", "code": "Interface ICacheListener<K,V> {\n\tlong getListenerId(); // Gets the listenerId attribute of the ICacheListener object\n\tvoid handleDispose(String cacheName); // Notifies the subscribers for freeing up the named cache.\n\tvoid handlePut(ICacheElement<K,V> item); // Notifies the subscribers for a cache entry update.\n\tvoid handleRemove(String cacheName, K key); // Notifies the subscribers for a cache entry removal.\n\tvoid handleRemoveAll(String cacheName); // Notifies the subscribers for a cache remove-all.\n\tvoid setListenerId(long id); // sets unique identifier of listener home\n}"}
{"index": 1888, "repo": "hadoop-hdfs-3.3.6", "des": "Filter for block file names stored on the file system volumes.", "code": "Enum FsVolumeImpl.BlockDirFilter {\n\tboolean accept(File dir, String name);\n\tstatic FsVolumeImpl.BlockDirFilter valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FsVolumeImpl.BlockDirFilter[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10242, "repo": "spring-core-6.0.11", "des": "A specialization of GenericConversionService configured by default with converters appropriate for most environments.", "code": "public class DefaultConversionService extends GenericConversionService {\n\tstatic void addCollectionConverters(ConverterRegistry converterRegistry); // Add common collection converters.\n\tstatic void addDefaultConverters(ConverterRegistry converterRegistry); // Add converters appropriate for most environments.\n\tstatic ConversionService getSharedInstance(); // Return a shared default ConversionService instance, lazily building it once needed.\n}"}
{"index": 11864, "repo": "spring-kafka-3.0.9", "des": "Spring for Apache Kafka Observation for listeners.", "code": "public enum KafkaListenerObservation extends Enum<KafkaListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\tstatic KafkaListenerObservation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic KafkaListenerObservation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10492, "repo": "groovy-all-4.0.13", "des": "Intended mode to use when generating constructors to emulate default parameter values when using the TupleConstructor annotation.", "code": "public enum DefaultsMode extends Enum<DefaultsMode> {\n\tstatic DefaultsMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DefaultsMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3811, "repo": "hbase-client-3.0.0-alpha-4", "des": "Simple filter that returns first N columns on row only.", "code": "Class ColumnCountGetFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tboolean filterAllRemaining(); // Filters that never filter all remaining can inherit this implementation that never stops the filter early.\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRowKey(Cell cell); // Filters a row based on the row key.\n\tint getLimit();\n\tstatic ColumnCountGetFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of ColumnCountGetFilter\n\tvoid reset(); // Filters that are purely stateless and do nothing in their reset() methods can inherit this null/empty implementation.\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 2736, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "Extract grouping columns from input record.", "code": "Class GroupingTableMapper {\n\tprotected ImmutableBytesWritable createGroupKey(byte[][] vals); // Create a key by concatenating multiple column values.\n\tprotected byte[][] extractKeyValues(Result r); // Extract columns values from the current record.\n\torg.apache.hadoop.conf.Configuration getConf(); // Returns the current configuration.\n\tstatic void initJob(String table, Scan scan, String groupColumns, Class<? extends TableMapper> mapper, org.apache.hadoop.mapreduce.Job job); // Use this before submitting a TableMap job.\n\tvoid map(ImmutableBytesWritable key, Result value, org.apache.hadoop.mapreduce.Mapper.Context context); // Extract the grouping columns from value to construct a new key.\n\tvoid setConf(org.apache.hadoop.conf.Configuration configuration); // Sets the configuration.\n}"}
{"index": 13900, "repo": "spring-webflux-6.0.11", "des": "Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.", "code": "public class InvocableHandlerMethod extends org.springframework.web.method.HandlerMethod {\n\torg.springframework.core.ParameterNameDiscoverer getParameterNameDiscoverer(); // Return the configured parameter name discoverer.\n\tList<HandlerMethodArgumentResolver> getResolvers(); // Return the configured argument resolvers.\n\treactor.core.publisher.Mono<HandlerResult> invoke(org.springframework.web.server.ServerWebExchange exchange, BindingContext bindingContext, Object... providedArgs); // Invoke the method for the given exchange.\n\tvoid setArgumentResolvers(List<? extends HandlerMethodArgumentResolver> resolvers); // Configure the argument resolvers to use for resolving method argument values against a ServerWebExchange.\n\tvoid setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer nameDiscoverer); // Set the ParameterNameDiscoverer for resolving parameter names when needed (e.g.\n\tvoid setReactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry registry); // Configure a reactive adapter registry.\n}"}
{"index": 14203, "repo": "wicket-core-10.0.0-M1", "des": "Default IPageLockManager that holds a map of locks in the current session.", "code": "public class DefaultPageLockManager extends Object implements IPageLockManager {\n\tDuration getTimeout(int pageId);\n\tvoid lockPage(int pageId); // Acquire a lock to a page\n\tvoid unlockAllPages(); // Unlocks all pages locked by this thread\n\tvoid unlockPage(int pageId); // Unlocks a single page locked by the current thread.\n}"}
{"index": 7012, "repo": "calcite-core-1.34.0", "des": "Physical node in a planner that is capable of doing physical trait propagation and derivation.", "code": "Interface PhysicalNode {\n\tdefault List<RelNode> derive(List<List<RelTraitSet>> inputTraits); // Given a list of child traitsets, inputTraits.size() == getInput().size(), returns node list after traits derivation.\n\tdefault @Nullable RelNode derive(RelTraitSet childTraits, int childId); // Derive traitset from child node, returns new node after traits derivation.\n\tdefault @Nullable Pair<RelTraitSet,List<RelTraitSet>> deriveTraits(RelTraitSet childTraits, int childId); // Derive traitset from child node, returns a pair of traits after traits derivation.\n\tdefault DeriveMode getDeriveMode(); // Returns mode of derivation.\n\tdefault @Nullable RelNode passThrough(RelTraitSet required); // Pass required traitset from parent node to child nodes, returns new node after traits is passed down.\n\tdefault @Nullable Pair<RelTraitSet,List<RelTraitSet>> passThroughTraits(RelTraitSet required); // Pass required traitset from parent node to child nodes, returns a pair of traits after traits is passed down.\n}"}
{"index": 18318, "repo": "opencms-core-15.0", "des": "This class is used for filtering aliases in database operations.", "code": "Class CmsAliasFilter {\n\tjava.lang.String getPath(); // Gets the alias path to filter.\n\tjava.lang.String getSiteRoot(); // Gets the site root to filter.\n\tCmsUUID getStructureId(); // Gets the structure id to filter.\n\tboolean isNullFilter(); // Checks whether this filter is trivial, i.e.\n}"}
{"index": 11645, "repo": "spring-websocket-6.0.11", "des": "Provides transport handling code with access to the SockJsService configuration options they need to have access to.", "code": "public interface SockJsServiceConfig {\n\tlong getHeartbeatTime(); // The amount of time in milliseconds when the server has not sent any messages and after which the server should send a heartbeat frame to the client in order to keep the connection from breaking.\n\tint getHttpMessageCacheSize(); // The number of server-to-client messages that a session can cache while waiting for the next HTTP polling request from the client.\n\tSockJsMessageCodec getMessageCodec(); // The codec to use for encoding and decoding SockJS messages.\n\tint getStreamBytesLimit(); // Streaming transports save responses on the client side and don't free memory used by delivered messages.\n\torg.springframework.scheduling.TaskScheduler getTaskScheduler(); // A scheduler instance to use for scheduling heart-beat messages.\n}"}
{"index": 14780, "repo": "spring-data-commons-3.1.2", "des": "Factory to create PersistentPropertyAccessor for a given PersistentEntity and bean instance.", "code": "public interface PersistentPropertyAccessorFactory {\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean); // Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\tboolean isSupported(PersistentEntity<?,?> entity); // Returns whether given PersistentEntity is supported by this PersistentPropertyAccessorFactory.\n}"}
{"index": 7734, "repo": "cassandra-all-4.1.2", "des": "This class generates a BigIntegerToken using MD5 hash.", "code": "Class RandomPartitioner {\n\tDecoratedKey decorateKey(java.nio.ByteBuffer key); // Transform key to object representation of the on-disk format.\n\tjava.util.Map<Token,java.lang.Float> describeOwnership(java.util.List<Token> sortedTokens); // Calculate the deltas between tokens in the ring in order to compare relative sizes.\n\tToken getMaximumToken(); // The biggest token for this partitioner, unlike getMinimumToken, this token is actually used and users wanting to include all tokens need to do getMaximumToken().maxKeyBound() Not implemented for the ordered partitioners\n\tint getMaxTokenSize();\n\tRandomPartitioner.BigIntegerToken getMinimumToken();\n\tRandomPartitioner.BigIntegerToken getRandomToken();\n\tRandomPartitioner.BigIntegerToken getRandomToken(java.util.Random random);\n\tRandomPartitioner.BigIntegerToken getToken(java.nio.ByteBuffer key);\n\tToken.TokenFactory getTokenFactory();\n\tAbstractType<?> getTokenValidator();\n\tToken midpoint(Token ltoken, Token rtoken); // Calculate a Token representing the approximate \"middle\" of the given range.\n\tAbstractType<?> partitionOrdering(); // Abstract type that orders the same way as DecoratedKeys provided by this partitioner.\n\tboolean preservesOrder();\n\tToken split(Token ltoken, Token rtoken, double ratioToLeft); // Calculate a Token which take approximate 0 <= ratioToLeft <= 1 ownership of the given range.\n\tjava.util.Optional<Splitter> splitter();\n}"}
{"index": 4413, "repo": "beam-sdks-java-core-2.49.0", "des": "A Coder which is able to take any existing coder and wrap it such that it is only invoked in the outer context.", "code": "Class LengthPrefixCoder<T> {\n\tboolean consistentWithEquals(); // LengthPrefixCoder is consistent with equals if the nested Coder is.\n\tT decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(T value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tjava.util.List<? extends Coder<?>> getCoderArguments(); // If this is a Coder for a parameterized type, returns the list of Coders being used for each of the parameters in the same order they appear within the parameterized type's type signature.\n\tprotected long getEncodedElementByteSize(T value); // Overridden to short-circuit the default StructuredCoder behavior of encoding and counting the bytes.\n\tCoder<T> getValueCoder(); // Gets the value coder that will be prefixed by the length.\n\tboolean isRegisterByteSizeObserverCheap(T value); // LengthPrefixCoder is cheap if valueCoder is cheap.\n\tstatic <T> LengthPrefixCoder<T> of(Coder<T> valueCoder);\n\tvoid verifyDeterministic(); // LengthPrefixCoder is deterministic if the nested Coder is.\n}"}
{"index": 4175, "repo": "commons-geometry-spherical-1.0", "des": "Class representing an angular interval of size greater than zero to 2pi.", "code": "Class AngularInterval {\n\tRegionLocation classify(Point1S pt);\n\tstatic AngularInterval.Convex full(); // Return an instance representing the full space.\n\tdouble getBoundarySize();\n\tPoint1S getCentroid();\n\tdouble getMax(); // Get the maximum azimuth angle for the interval, or 2pi if the interval represents the full space.\n\tCutAngle getMaxBoundary(); // Get the maximum point for the interval.\n\tPoint1S getMidPoint(); // Get the midpoint of the interval or null if the interval represents the full space.\n\tdouble getMin(); // Get the minimum azimuth angle for the interval, or 0 if the interval is full.\n\tCutAngle getMinBoundary(); // Get the minimum boundary for the interval, or null if the interval represents the full space.\n\tdouble getSize();\n\tboolean isEmpty();\n\tboolean isFull();\n\tstatic AngularInterval of(CutAngle a, CutAngle b); // Return an instance representing the angular interval between the given oriented points.\n\tstatic AngularInterval of(double min, double max, Precision.DoubleEquivalence precision); // Return an instance representing the angular interval between the given min and max azimuth values.\n\tstatic AngularInterval of(Point1S min, Point1S max, Precision.DoubleEquivalence precision); // Return an instance representing the angular interval between the given min and max azimuth points.\n\tPoint1S project(Point1S pt);\n\tSplit<RegionBSPTree1S> split(Hyperplane<Point1S> splitter);\n\tList<AngularInterval.Convex> toConvex(); // Return a list of convex intervals comprising this region.\n\tRegionBSPTree1S toTree(); // Return a RegionBSPTree1S instance representing the same region as this instance.\n\tAngularInterval transform(Transform<Point1S> transform); // Return a new instance transformed by the argument.\n\tboolean wrapsZero(); // Return true if the interval wraps around the zero/2pi point.\n}"}
{"index": 2492, "repo": "exoplayer-r2.3.1", "des": "A helper class for periodically updating a TextView with debug information obtained from a SimpleExoPlayer.", "code": "Class DebugTextViewHelper {\n\tvoid onLoadingChanged(boolean isLoading); // Called when the player starts or stops loading the source.\n\tvoid onPlayerError(ExoPlaybackException error); // Called when an error occurs.\n\tvoid onPlayerStateChanged(boolean playWhenReady, int playbackState); // Called when the value returned from either ExoPlayer.getPlayWhenReady() or ExoPlayer.getPlaybackState() changes.\n\tvoid onPositionDiscontinuity(); // Called when a position discontinuity occurs without a change to the timeline.\n\tvoid onTimelineChanged(Timeline timeline, java.lang.Object manifest); // Called when the timeline and/or manifest has been refreshed.\n\tvoid onTracksChanged(TrackGroupArray tracks, TrackSelectionArray selections); // Called when the available or selected tracks change.\n\tvoid run();\n\tvoid start(); // Starts periodic updates of the TextView.\n\tvoid stop(); // Stops periodic updates of the TextView.\n}"}
{"index": 12576, "repo": "spring-jdbc-6.0.11", "des": "DataFieldMaxValueIncrementer that increments the maximum value of a given SQL Server table with the equivalent of an auto-increment column.", "code": "public class SqlServerMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer {\n\tprotected String getIdentityStatement(); // Statement to use to obtain the current identity value.\n\tprotected String getIncrementStatement(); // Statement to use to increment the \"sequence\" value.\n}"}
{"index": 11849, "repo": "spring-kafka-3.0.9", "des": "A BatchMessageListener adapter that implements filter logic via a RecordFilterStrategy.", "code": "public class FilteringBatchMessageListenerAdapter<K,V> extends AbstractFilteringMessageListener<K,V,BatchMessageListener<K,V>> implements BatchAcknowledgingConsumerAwareMessageListener<K,V> {\n\tvoid onMessage(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> data); // Invoked with data from kafka.\n\tvoid onMessage(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> data, org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Invoked with data from kafka and provides access to the Consumer.\n\tvoid onMessage(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> data, Acknowledgment acknowledgment); // Invoked with data from kafka.\n\tvoid onMessage(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> records, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Invoked with data from kafka and provides access to the Consumer.\n}"}
{"index": 10824, "repo": "spring-boot-actuator-3.1.1", "des": "A ParameterMappingException is thrown when a failure occurs during operation parameter mapping.", "code": "public final class ParameterMappingException extends InvalidEndpointRequestException {\n\tOperationParameter getParameter(); // Return the parameter being mapped.\n\tObject getValue(); // Return the value being mapped.\n}"}
{"index": 4002, "repo": "zookeeper-3.8.2", "des": "Codes which represent the various KeeperException types.", "code": "Enum KeeperException.Code {\n\tstatic KeeperException.Code get(int code); // Get the Code value for a particular integer error code\n\tint intValue(); // Get the int value for a particular Code.\n\tstatic KeeperException.Code valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic KeeperException.Code[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16747, "repo": "spring-jms-6.0.11", "des": "Strategy interface that specifies a converter between Java objects and JMS messages.", "code": "public interface MessageConverter {\n\tObject fromMessage(Message message); // Convert from a JMS Message to a Java object.\n\tMessage toMessage(Object object, Session session); // Convert a Java object to a JMS Message using the supplied session to create the message object.\n}"}
{"index": 13018, "repo": "spring-aop-6.0.11", "des": "Base interface holding AOP advice (action to take at a joinpoint) and a filter determining the applicability of the advice (such as a pointcut).", "code": "public interface Advisor {\n\tAdvice getAdvice(); // Return the advice part of this aspect.\n\tdefault boolean isPerInstance(); // Return whether this advice is associated with a particular instance (for example, creating a mixin) or shared with all instances of the advised class obtained from the same Spring bean factory.\n}"}
{"index": 17721, "repo": "spring-web-6.0.11", "des": "HttpMessageWriter that wraps and delegates to an Encoder.", "code": "public class EncoderHttpMessageWriter<T> extends Object implements HttpMessageWriter<T> {\n\tboolean canWrite(org.springframework.core.ResolvableType elementType, MediaType mediaType); // Whether the given object type is supported by this writer.\n\torg.springframework.core.codec.Encoder<T> getEncoder(); // Return the Encoder of this writer.\n\tList<MediaType> getWritableMediaTypes(); // Return the list of media types supported by this Writer.\n\tList<MediaType> getWritableMediaTypes(org.springframework.core.ResolvableType elementType); // Return the list of media types supported by this Writer for the given type of element.\n\tprotected Map<String,Object> getWriteHints(org.springframework.core.ResolvableType streamType, org.springframework.core.ResolvableType elementType, MediaType mediaType, ServerHttpRequest request, ServerHttpResponse response); // Get additional hints for encoding for example based on the server request or annotations from controller method parameters.\n\treactor.core.publisher.Mono<Void> write(Publisher<? extends T> inputStream, org.springframework.core.ResolvableType actualType, org.springframework.core.ResolvableType elementType, MediaType mediaType, ServerHttpRequest request, ServerHttpResponse response, Map<String,Object> hints); // Server-side only alternative to HttpMessageWriter.write(Publisher, ResolvableType, MediaType, ReactiveHttpOutputMessage, Map) with additional context available.\n\treactor.core.publisher.Mono<Void> write(Publisher<? extends T> inputStream, org.springframework.core.ResolvableType elementType, MediaType mediaType, ReactiveHttpOutputMessage message, Map<String,Object> hints); // Write a given stream of object to the output message.\n}"}
{"index": 3612, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableByteObjectInspector inspects a ByteWritable Object.", "code": "Class LazyByteObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tbyte get(Object o); // Get the byte data.\n\tObject getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n}"}
{"index": 6072, "repo": "jackson-databind-2.15.2", "des": "TypeIdResolver implementation that converts between fully-qualified Java class names and (JSON) Strings.", "code": "Class ClassNameIdResolver {\n\tprotected String _idFrom(Object value, Class<?> cls, TypeFactory typeFactory);\n\tprotected JavaType _typeFromId(String id, DatabindContext ctxt);\n\tstatic ClassNameIdResolver construct(JavaType baseType, MapperConfig<?> config, PolymorphicTypeValidator ptv);\n\tString getDescForKnownTypeIds(); // Helper method used to get a simple description of all known type ids, for use in error messages.\n\tJsonTypeInfo.Id getMechanism(); // Accessor for mechanism that this resolver uses for determining type id from type.\n\tString idFromValue(Object value); // Method called to serialize type of the type of given value as a String to include in serialized JSON content.\n\tString idFromValueAndType(Object value, Class<?> type); // Alternative method used for determining type from combination of value and type, using suggested type (that serializer provides) and possibly value of that type.\n\tvoid registerSubtype(Class<?> type, String name);\n\tJavaType typeFromId(DatabindContext context, String id); // Method called to resolve type from given type identifier.\n}"}
{"index": 204, "repo": "commons-collections4-4.4", "des": "Implementation of a PATRICIA Trie (Practical Algorithm to Retrieve Information Coded in Alphanumeric).", "code": "Class PatriciaTrie<E> {\n\tvoid clear();\n\tComparator<? super K> comparator();\n\tboolean containsKey(Object k);\n\tSet<Map.Entry<K,V>> entrySet();\n\tK firstKey(); // Gets the first key currently in this map.\n\tV get(Object k);\n\tSortedMap<K,V> headMap(K toKey);\n\tSet<K> keySet();\n\tK lastKey(); // Gets the last key currently in this map.\n\tOrderedMapIterator<K,V> mapIterator(); // Obtains a MapIterator over the map.\n\tK nextKey(K key); // Gets the next key after the one specified.\n\tSortedMap<K,V> prefixMap(K key); // Returns a view of this Trie of all elements that are prefixed by the given key.\n\tK previousKey(K key); // Gets the previous key before the one specified.\n\tV put(K key, V value); // Note that the return type is Object, rather than V as in the Map interface.\n\tV remove(Object k);\n\tMap.Entry<K,V> select(K key); // Returns the Map.Entry whose key is closest in a bitwise XOR metric to the given key.\n\tK selectKey(K key); // Returns the key that is closest in a bitwise XOR metric to the provided key.\n\tV selectValue(K key); // Returns the value whose key is closest in a bitwise XOR metric to the provided key.\n\tint size();\n\tSortedMap<K,V> subMap(K fromKey, K toKey);\n\tSortedMap<K,V> tailMap(K fromKey);\n\tCollection<V> values();\n}"}
{"index": 15893, "repo": "camel-api-4.0.0-RC1", "des": "What to do if attempting to add a duplicate type converter", "code": "public enum TypeConverterExists extends Enum<TypeConverterExists> {\n\tstatic TypeConverterExists valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic TypeConverterExists[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 1451, "repo": "pdfbox-3.0.0-beta1", "des": "A font mapping from a PDF font to a FontBox font.", "code": "Class FontMapping<T extends org.apache.fontbox.FontBoxFont> {\n\tT getFont(); // Returns the mapped, FontBox font.\n\tboolean isFallback(); // Returns true if the mapped font is a fallback, i.e.\n}"}
{"index": 2124, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generic UDF for tuple array sort by desired field[s] with [ordering(ASC or DESC)] SORT_ARRAY_BY(array(obj1, obj2, obj3.", "code": "Class GenericUDFSortArrayByField {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 17766, "repo": "spring-web-6.0.11", "des": "Abstract base for exceptions related to media types.", "code": "public abstract class HttpMediaTypeException extends ServletException implements ErrorResponse {\n\tProblemDetail getBody(); // Return the body for the response, formatted as an RFC 7807 ProblemDetail whose status should match the response status.\n\tObject[] getDetailMessageArguments(); // Return arguments to use along with a message code to resolve the problem \"detail\" for this exception through a MessageSource.\n\tString getDetailMessageCode(); // Return a code to use to resolve the problem \"detail\" for this exception through a MessageSource.\n\tList<MediaType> getSupportedMediaTypes(); // Return the list of supported media types.\n}"}
{"index": 8562, "repo": "commons-io-2.13.0", "des": "Builds a new ReadAheadInputStream instance.", "code": "Class ReadAheadInputStream.Builder {\n\tReadAheadInputStream get(); // Constructs a new instance.\n\tReadAheadInputStream.Builder setExecutorService(ExecutorService executorService); // Sets the executor service for the read-ahead thread.\n}"}
{"index": 7945, "repo": "commons-jcs3-core-3.1", "des": "Provides thread safe access to the underlying random access file.", "code": "Class IndexedDisk {\n\tvoid close(); // Closes the raf.\n\tprotected String getFilePath(); // This is used for debugging.\n\tprotected boolean isEmpty(); // Tests if the length is 0.\n\tprotected long length(); // Returns the raf length.\n\tprotected void move(IndexedDiskElementDescriptor ded, long newPosition); // Moves the data stored from one position to another.\n\tprotected <T> T readObject(IndexedDiskElementDescriptor ded); // This reads an object from the given starting position on the file.\n\tprotected void reset(); // Sets the raf to empty.\n\tprotected void truncate(long length); // Truncates the file to a given length.\n\tprotected boolean write(IndexedDiskElementDescriptor ded, byte[] data); // Writes the given byte array to the Disk at the specified position.\n\tprotected <T> void writeObject(T obj, long pos); // Serializes the object and write it out to the given position.\n}"}
{"index": 1134, "repo": "ignite-core-2.15.0", "des": "File I/O implementation based on FileChannel.", "code": "Class RandomAccessFileIO {\n\tvoid clear(); // Truncates current file to zero length and resets current file position to zero.\n\tvoid close(); // Closes current file.\n\tvoid force(); // Forces any updates of this file to be written to the storage device that contains it.\n\tvoid force(boolean withMetadata); // Forces any updates of this file to be written to the storage device that contains it.\n\tint getFileSystemBlockSize();\n\tlong getSparseSize();\n\tMappedByteBuffer map(int sizeBytes); // Allocates memory mapped buffer for this file with given size.\n\tlong position(); // Returns current file position.\n\tvoid position(long newPosition); // Sets new current file position.\n\tint punchHole(long position, int len);\n\tint read(byte[] buf, int off, int len); // Reads a up to length bytes from this file into the buffer.\n\tint read(ByteBuffer destBuf); // Reads a sequence of bytes from this file into the destinationBuffer.\n\tint read(ByteBuffer destBuf, long position); // Reads a sequence of bytes from this file into the destinationBuffer starting from specified file position.\n\tlong size(); // Returns current file size in bytes.\n\tlong transferFrom(ReadableByteChannel src, long position, long count);\n\tlong transferTo(long position, long count, WritableByteChannel target); // This method will transfers the content of file to the specified channel.\n\tint write(byte[] buf, int off, int len); // Writes length bytes from the buffer starting at offset off to this file.\n\tint write(ByteBuffer srcBuf); // Writes a sequence of bytes to this file from the sourceBuffer.\n\tint write(ByteBuffer srcBuf, long position); // Writes a sequence of bytes to this file from the sourceBuffer starting from specified file position\n}"}
{"index": 14552, "repo": "spring-security-web-6.1.2", "des": "Base class for response wrappers which encapsulate the logic for handling an event when the HttpServletResponse is committed.", "code": "public abstract class OnCommittedResponseWrapper extends jakarta.servlet.http.HttpServletResponseWrapper {\n\tvoid addHeader(String name, String value);\n\tprotected void disableOnResponseCommitted(); // Invoke this method to disable invoking onResponseCommitted() when the HttpServletResponse is committed.\n\tvoid flushBuffer(); // Makes sure onResponseCommitted() is invoked before calling the superclass flushBuffer()\n\tjakarta.servlet.ServletOutputStream getOutputStream(); // Makes sure onResponseCommitted() is invoked before calling the calling getOutputStream().close() or getOutputStream().flush()\n\tPrintWriter getWriter(); // Makes sure onResponseCommitted() is invoked before calling the getWriter().close() or getWriter().flush()\n\tprotected boolean isDisableOnResponseCommitted(); // Returns true if onResponseCommitted() will be invoked when the response is committed, else false.\n\tprotected abstract void onResponseCommitted(); // Implement the logic for handling the HttpServletResponse being committed\n\tfinal void sendError(int sc); // Makes sure onResponseCommitted() is invoked before calling the superclass sendError()\n\tfinal void sendError(int sc, String msg); // Makes sure onResponseCommitted() is invoked before calling the superclass sendError()\n\tfinal void sendRedirect(String location); // Makes sure onResponseCommitted() is invoked before calling the superclass sendRedirect()\n\tvoid setContentLength(int len);\n\tvoid setContentLengthLong(long len);\n}"}
{"index": 16971, "repo": "spring-orm-6.0.11", "des": "Spring's base implementation of the JPA PersistenceUnitInfo interface, used to bootstrap an EntityManagerFactory in a container.", "code": "public class MutablePersistenceUnitInfo extends Object implements SmartPersistenceUnitInfo {\n\tvoid addJarFileUrl(URL jarFileUrl);\n\tvoid addManagedClassName(String managedClassName); // Add a managed class name to the persistence provider's metadata.\n\tvoid addManagedPackage(String packageName); // Add a managed package to the persistence provider's metadata.\n\tvoid addMappingFileName(String mappingFileName);\n\tvoid addProperty(String name, String value);\n\tvoid addTransformer(ClassTransformer classTransformer); // This implementation throws an UnsupportedOperationException.\n\tboolean excludeUnlistedClasses();\n\tClassLoader getClassLoader(); // This implementation returns the default ClassLoader.\n\tList<URL> getJarFileUrls();\n\tDataSource getJtaDataSource();\n\tList<String> getManagedClassNames();\n\tList<String> getManagedPackages(); // Return a list of managed Java packages, to be introspected by the persistence provider.\n\tList<String> getMappingFileNames();\n\tClassLoader getNewTempClassLoader(); // This implementation throws an UnsupportedOperationException.\n\tDataSource getNonJtaDataSource();\n\tString getPersistenceProviderClassName();\n\tString getPersistenceProviderPackageName();\n\tString getPersistenceUnitName();\n\tURL getPersistenceUnitRootUrl();\n\tString getPersistenceXMLSchemaVersion();\n\tProperties getProperties();\n\tSharedCacheMode getSharedCacheMode();\n\tPersistenceUnitTransactionType getTransactionType();\n\tValidationMode getValidationMode();\n\tvoid setExcludeUnlistedClasses(boolean excludeUnlistedClasses);\n\tvoid setJtaDataSource(DataSource jtaDataSource);\n\tvoid setNonJtaDataSource(DataSource nonJtaDataSource);\n\tvoid setPersistenceProviderClassName(String persistenceProviderClassName);\n\tvoid setPersistenceProviderPackageName(String persistenceProviderPackageName); // Set the persistence provider's own package name, for exclusion from class transformation.\n\tvoid setPersistenceUnitName(String persistenceUnitName);\n\tvoid setPersistenceUnitRootUrl(URL persistenceUnitRootUrl);\n\tvoid setPersistenceXMLSchemaVersion(String persistenceXMLSchemaVersion);\n\tvoid setProperties(Properties properties);\n\tvoid setSharedCacheMode(SharedCacheMode sharedCacheMode);\n\tvoid setTransactionType(PersistenceUnitTransactionType transactionType);\n\tvoid setValidationMode(ValidationMode validationMode);\n}"}
{"index": 6256, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "The Spring Integration File components Factory.", "code": "Class Files {\n\tstatic FileInboundChannelAdapterSpec inboundAdapter(java.io.File directory);\n\tstatic FileInboundChannelAdapterSpec inboundAdapter(java.io.File directory, java.util.Comparator<java.io.File> receptionOrderComparator);\n\tstatic FileWritingMessageHandlerSpec outboundAdapter(org.springframework.expression.Expression directoryExpression);\n\tstatic FileWritingMessageHandlerSpec outboundAdapter(java.io.File destinationDirectory);\n\tstatic <P> FileWritingMessageHandlerSpec outboundAdapter(Function<org.springframework.messaging.Message<P>,?> directoryFunction);\n\tstatic FileWritingMessageHandlerSpec outboundAdapter(java.lang.String directoryExpression);\n\tstatic FileWritingMessageHandlerSpec outboundGateway(org.springframework.expression.Expression directoryExpression);\n\tstatic FileWritingMessageHandlerSpec outboundGateway(java.io.File destinationDirectory);\n\tstatic <P> FileWritingMessageHandlerSpec outboundGateway(Function<org.springframework.messaging.Message<P>,?> directoryFunction);\n\tstatic FileWritingMessageHandlerSpec outboundGateway(java.lang.String directoryExpression);\n\tstatic FileSplitterSpec splitter(); // The FileSplitterSpec builder factory method with default arguments.\n\tstatic FileSplitterSpec splitter(boolean iterator); // The FileSplitterSpec builder factory method with iterator flag specified.\n\tstatic FileSplitterSpec splitter(boolean iterator, boolean markers); // The FileSplitterSpec builder factory method with iterator and markers flags specified.\n\tstatic TailAdapterSpec tailAdapter(java.io.File file);\n}"}
{"index": 3501, "repo": "mahout-mr-0.13.0", "des": "Picks relevant items to be those with the strongest preference, and includes the other users' preferences in full.", "code": "Class GenericRelevantItemsDataSplitter {\n\tFastIDSet getRelevantItemsIDs(long userID, int at, double relevanceThreshold, DataModel dataModel); // During testing, relevant items are removed from a particular users' preferences, and a model is build using this user's other preferences and all other users.\n\tvoid processOtherUser(long userID, FastIDSet relevantItemIDs, FastByIDMap<PreferenceArray> trainingUsers, long otherUserID, DataModel dataModel); // Adds a single user and all their preferences to the training model.\n}"}
{"index": 1399, "repo": "pdfbox-3.0.0-beta1", "des": "W Set the clipping path using non zero winding rule.", "code": "Class ClipNonZeroRule {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> operands); // Process the operator.\n}"}
{"index": 7578, "repo": "cassandra-all-4.1.2", "des": "A Builder for a CQLSSTableWriter object.", "code": "Class CQLSSTableWriter.Builder {\n\tCQLSSTableWriter build();\n\tCQLSSTableWriter.Builder forTable(java.lang.String schema); // The schema (CREATE TABLE statement) for the table for which sstable are to be created.\n\tCQLSSTableWriter.Builder inDirectory(File directory); // The directory where to write the sstables (mandatory option).\n\tCQLSSTableWriter.Builder inDirectory(java.lang.String directory); // The directory where to write the sstables.\n\tCQLSSTableWriter.Builder sorted(); // Creates a CQLSSTableWriter that expects sorted inputs.\n\tCQLSSTableWriter.Builder using(java.lang.String modificationStatement); // The INSERT, UPDATE, or DELETE statement defining the order of the values to add for a given CQL row.\n\tCQLSSTableWriter.Builder withBufferSizeInMiB(int size); // The size of the buffer to use.\n\tCQLSSTableWriter.Builder withPartitioner(IPartitioner partitioner); // The partitioner to use.\n\tCQLSSTableWriter.Builder withType(java.lang.String typeDefinition);\n}"}
{"index": 315, "repo": "phoenix-core-5.1.3", "des": "Implementation for <,<=,>,>=,=,!= comparison expressions.", "code": "Class ComparisonExpression {\n\t<T> T accept(ExpressionVisitor<T> visitor); // Means of traversing expression tree through visitor.\n\tComparisonExpression clone(List<Expression> children);\n\tstatic Expression create(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp op, List<Expression> children, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr, boolean rowKeyOrderOptimizable);\n\tboolean equals(Object obj);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getFilterOp();\n\tvoid readFields(DataInput input);\n\tstatic String toString(org.apache.hadoop.hbase.filter.CompareFilter.CompareOp op, List<Expression> children);\n\tvoid write(DataOutput output);\n}"}
{"index": 9496, "repo": "commons-math3-3.6.1", "des": "Abstract base class for implementations of MultipleLinearRegression.", "code": "Class AbstractMultipleLinearRegression {\n\tprotected abstract RealVector calculateBeta(); // Calculates the beta of multiple linear regression in matrix notation.\n\tprotected abstract RealMatrix calculateBetaVariance(); // Calculates the beta variance of multiple linear regression in matrix notation.\n\tprotected double calculateErrorVariance(); // Calculates the variance of the error term.\n\tprotected RealVector calculateResiduals(); // Calculates the residuals of multiple linear regression in matrix notation.\n\tprotected double calculateYVariance(); // Calculates the variance of the y values.\n\tdouble estimateErrorVariance(); // Estimates the variance of the error.\n\tdouble estimateRegressandVariance(); // Returns the variance of the regressand, ie Var(y).\n\tdouble[] estimateRegressionParameters(); // Estimates the regression parameters b.\n\tdouble[] estimateRegressionParametersStandardErrors(); // Returns the standard errors of the regression parameters.\n\tdouble[][] estimateRegressionParametersVariance(); // Estimates the variance of the regression parameters, ie Var(b).\n\tdouble estimateRegressionStandardError(); // Estimates the standard error of the regression.\n\tdouble[] estimateResiduals(); // Estimates the residuals, ie u = y - X*b.\n\tprotected RealMatrix getX();\n\tprotected RealVector getY();\n\tboolean isNoIntercept();\n\tvoid newSampleData(double[] data, int nobs, int nvars); // Loads model x and y sample data from a flat input array, overriding any previous sample.\n\tprotected void newXSampleData(double[][] x); // Loads new x sample data, overriding any previous data.\n\tprotected void newYSampleData(double[] y); // Loads new y sample data, overriding any previous data.\n\tvoid setNoIntercept(boolean noIntercept);\n\tprotected void validateCovarianceData(double[][] x, double[][] covariance); // Validates that the x data and covariance matrix have the same number of rows and that the covariance matrix is square.\n\tprotected void validateSampleData(double[][] x, double[] y); // Validates sample data.\n}"}
{"index": 9122, "repo": "hbase-server-3.0.0-alpha-4", "des": "An interface which abstract away the action taken to enable or disable a space quota violation policy across the HBase cluster.", "code": "Interface SpaceQuotaSnapshotNotifier {\n\tvoid initialize(Connection conn); // Initializes the notifier.\n\tvoid transitionTable(TableName tableName, SpaceQuotaSnapshot snapshot); // Informs the cluster of the current state of a space quota for a table.\n}"}
{"index": 9414, "repo": "hadoop-yarn-api-3.3.6", "des": "The response to admin from the SharedCacheManager when is asked to run the cleaner service.", "code": "Class RunSharedCacheCleanerTaskResponse {\n\tabstract boolean getAccepted(); // Get whether or not the shared cache manager has accepted the request.\n\tabstract void setAccepted(boolean b); // Set whether or not the shared cache manager has accepted the request Shared cache manager will reject the request if there is an ongoing task\n}"}
{"index": 8492, "repo": "commons-io-2.13.0", "des": "Proxy writer that prevents the underlying writer from being closed.", "code": "Class CloseShieldWriter {\n\tvoid close(); // Replaces the underlying writer with a ClosedWriter sentinel.\n\tstatic CloseShieldWriter wrap(Writer writer); // Creates a proxy that shields the given writer from being closed.\n}"}
{"index": 11297, "repo": "spring-context-6.0.11", "des": "Simple Cache implementation based on the core JDK java.util.concurrent package.", "code": "public class ConcurrentMapCache extends AbstractValueAdaptingCache {\n\tvoid clear(); // Clear the cache through removing all mappings.\n\tvoid evict(Object key); // Evict the mapping for this key from this cache if it is present.\n\tboolean evictIfPresent(Object key); // Evict the mapping for this key from this cache if it is present, expecting the key to be immediately invisible for subsequent lookups.\n\tprotected Object fromStoreValue(Object storeValue); // Convert the given value from the internal store to a user value returned from the get method (adapting null).\n\t<T> T get(Object key, Callable<T> valueLoader); // Return the value to which this cache maps the specified key, obtaining that value from valueLoader if necessary.\n\tfinal String getName(); // Return the cache name.\n\tfinal ConcurrentMap<Object,Object> getNativeCache(); // Return the underlying native cache provider.\n\tboolean invalidate(); // Invalidate the cache through removing all mappings, expecting all entries to be immediately invisible for subsequent lookups.\n\tfinal boolean isStoreByValue(); // Return whether this cache stores a copy of each entry (true) or a reference (false, default).\n\tprotected Object lookup(Object key); // Perform an actual lookup in the underlying store.\n\tvoid put(Object key, Object value); // Associate the specified value with the specified key in this cache.\n\tCache.ValueWrapper putIfAbsent(Object key, Object value); // Atomically associate the specified value with the specified key in this cache if it is not set already.\n\tprotected Object toStoreValue(Object userValue); // Convert the given user value, as passed into the put method, to a value in the internal store (adapting null).\n}"}
{"index": 1103, "repo": "ignite-core-2.15.0", "des": "Factory for @PlatformCachePluginConfigurationClosure with a unique id.", "code": "Interface PlatformCachePluginConfigurationClosureFactory {\n\tPlatformCachePluginConfigurationClosure create(); // Creates configuration closure instance.\n\tint id(); // Gets the factory id.\n}"}
{"index": 11422, "repo": "spring-context-6.0.11", "des": "ScriptSource implementation based on Spring's Resource abstraction.", "code": "public class ResourceScriptSource extends Object implements ScriptSource {\n\tfinal org.springframework.core.io.Resource getResource(); // Return the Resource to load the script from.\n\tString getScriptAsString(); // Retrieve the current script source text as String.\n\tboolean isModified(); // Indicate whether the underlying script data has been modified since the last time ScriptSource.getScriptAsString() was called.\n\tprotected long retrieveLastModifiedTime(); // Retrieve the current last-modified timestamp of the underlying resource.\n\tvoid setEncoding(String encoding); // Set the encoding used for reading the script resource.\n\tString suggestedClassName(); // Determine a class name for the underlying script.\n}"}
{"index": 1250, "repo": "ignite-core-2.15.0", "des": "Class represents a handler for the set of files considered to be transferred from the remote node.", "code": "Interface TransmissionHandler {\n\tConsumer<ByteBuffer> chunkHandler(UUID nodeId, TransmissionMeta initMeta); // Chunk handler represents by itself the way of input data stream processing.\n\tConsumer<File> fileHandler(UUID nodeId, TransmissionMeta initMeta); // File handler represents by itself the way of input data stream processing.\n\tString filePath(UUID nodeId, TransmissionMeta fileMeta); // Absolute path of a file to receive remote transmission data into.\n\tvoid onEnd(UUID rmtNodeId); // The end of the handled transmission.\n\tvoid onException(UUID nodeId, Throwable err); // The TransmissionCancelledException will be received by exception handler if the local transmission ends by the user interruption request.\n}"}
{"index": 17452, "repo": "spring-security-config-6.1.2", "des": "Adds support for J2EE pre authentication.", "code": "public final class JeeConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<JeeConfigurer<H>,H> {\n\tJeeConfigurer<H> authenticatedUserDetailsService(org.springframework.security.core.userdetails.AuthenticationUserDetailsService<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken> authenticatedUserDetailsService); // Specifies the AuthenticationUserDetailsService that is used with the PreAuthenticatedAuthenticationProvider.\n\tvoid configure(H http); // Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid init(H http); // Populates a PreAuthenticatedAuthenticationProvider into HttpSecurity.authenticationProvider(org.springframework.security.authentication.AuthenticationProvider) and a Http403ForbiddenEntryPoint into HttpSecurityBuilder.setSharedObject(Class, Object)\n\tJeeConfigurer<H> j2eePreAuthenticatedProcessingFilter(org.springframework.security.web.authentication.preauth.j2ee.J2eePreAuthenticatedProcessingFilter j2eePreAuthenticatedProcessingFilter); // Allows specifying the J2eePreAuthenticatedProcessingFilter to use.\n\tJeeConfigurer<H> mappableAuthorities(String... mappableRoles); // Specifies roles to use map from the HttpServletRequest to the UserDetails.\n\tJeeConfigurer<H> mappableAuthorities(Set<String> mappableRoles); // Specifies roles to use map from the HttpServletRequest to the UserDetails.\n\tJeeConfigurer<H> mappableRoles(String... mappableRoles); // Specifies roles to use map from the HttpServletRequest to the UserDetails and automatically prefixes it with \"ROLE_\".\n}"}
{"index": 2670, "repo": "mahout-core-14.1", "des": "Open hash map from long keys to double values.", "code": "Class OpenLongDoubleHashMap {\n\tdouble adjustOrPutValue(long key, double newValue, double incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(long key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(double value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(LongProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(LongDoubleProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tdouble get(long key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(long key);\n\tprotected int indexOfKey(long key);\n\tprotected int indexOfValue(double value);\n\tIterator<OpenLongDoubleHashMap.MapElement> iterator();\n\tvoid keys(LongArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(LongDoubleProcedure condition, LongArrayList keyList, DoubleArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(long key, double value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(long key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(DoubleArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 9916, "repo": "iceberg-api-1.3.0", "des": "API for configuring an incremental scan.", "code": "Interface IncrementalScan<ThisT,T extends ScanTask,G extends ScanTaskGroup<T>> {\n\tThisT fromSnapshotExclusive(long fromSnapshotId); // Instructs this scan to look for changes starting from a particular snapshot (exclusive).\n\tThisT fromSnapshotInclusive(long fromSnapshotId); // Instructs this scan to look for changes starting from a particular snapshot (inclusive).\n\tThisT toSnapshot(long toSnapshotId); // Instructs this scan to look for changes up to a particular snapshot (inclusive).\n}"}
{"index": 712, "repo": "ignite-core-2.15.0", "des": "Provides callback for marking object as removed.", "code": "Interface GridCacheRemovable {\n\tvoid needCheckNotRemoved();\n\tboolean onRemoved(); // Set status of data structure as removed.\n\tvoid restart(IgniteInternalCache cache); // Would return this object work to normal.\n\tvoid suspend(); // Would suspend calls for this object.\n}"}
{"index": 4214, "repo": "jackson-core-2.15.2", "des": "Enumeration that defines all on/off features that can only be changed for JsonFactory.", "code": "Enum JsonFactory.Feature {\n\tstatic int collectDefaults(); // Method that calculates bit set (flags) of all features that are enabled by default.\n\tboolean enabledByDefault(); // Accessor for checking whether this feature is enabled by default.\n\tboolean enabledIn(int flags); // Convenience method for checking whether feature is enabled in given bitmask.\n\tint getMask(); // Returns bit mask for this feature instance; must be a single bit, that is of form 1 << N.\n\tstatic JsonFactory.Feature valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic JsonFactory.Feature[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17424, "repo": "groovy-4.0.13", "des": "This class contains helper methods for converting and comparing types.", "code": "public class TypeHelper extends Object {\n\tprotected static boolean argumentClassIsParameterClass(Class<?> argumentClass, Class<?> parameterClass); // Realizes an unsharp equal for the class.\n\tprotected static Class<?> getWrapperClass(Class<?> c); // Get wrapper class for a given class.\n\tprotected static boolean isBigDecCategory(Class<?> x);\n\tprotected static boolean isDoubleCategory(Class<?> x);\n\tprotected static boolean isIntCategory(Class<?> x);\n\tprotected static boolean isLongCategory(Class<?> x);\n\tprotected static MethodType replaceWithMoreSpecificType(Object[] args, MethodType callSiteType); // Replaces the types in the callSiteType parameter if more specific types given through the arguments.\n}"}
{"index": 14635, "repo": "spring-cloud-stream-4.0.0", "des": "A Bindable that stores the dynamic destination names and handles their unbinding.", "code": "public final class DynamicDestinationsBindable extends Object implements Bindable {\n\tvoid addOutputBinding(String name, Binding<?> binding);\n\tSet<String> getOutputs(); // Enumerates all the output binding names.\n\tvoid unbindOutputs(BindingService adapter); // Unbinds all the outputs associated with this instance.\n}"}
{"index": 7195, "repo": "calcite-core-1.34.0", "des": "DESCRIPTOR appears as an argument in a function.", "code": "Class SqlDescriptorOperator {\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks that the operand values in a SqlCall to this operator are valid.\n\tRelDataType deriveType(SqlValidator validator, SqlValidatorScope scope, SqlCall call); // Derives the type of a call to this operator.\n\tSqlOperandCountRange getOperandCountRange(); // Returns a constraint on the number of operands expected by this operator.\n\tSqlSyntax getSyntax(); // Returns the syntactic type of this operator, never null.\n}"}
{"index": 16563, "repo": "spring-beans-6.0.11", "des": "Abstract base class for FactoryBeans operating on the JDK 1.6 ServiceLoader facility.", "code": "public abstract class AbstractServiceLoaderBasedFactoryBean extends AbstractFactoryBean<Object> implements BeanClassLoaderAware {\n\tprotected Object createInstance(); // Delegates to getObjectToExpose(java.util.ServiceLoader).\n\tprotected abstract Object getObjectToExpose(ServiceLoader<?> serviceLoader); // Determine the actual object to expose for the given ServiceLoader.\n\tClass<?> getServiceType(); // Return the desired service type.\n\tvoid setBeanClassLoader(ClassLoader beanClassLoader); // Callback that supplies the bean class loader to a bean instance.\n\tvoid setServiceType(Class<?> serviceType); // Specify the desired service type (typically the service's public API).\n}"}
{"index": 15605, "repo": "spring-security-core-6.1.2", "des": "Creates a LoginContext using the Configuration provided to it.", "code": "public class DefaultJaasAuthenticationProvider extends AbstractJaasAuthenticationProvider {\n\tvoid afterPropertiesSet(); // Validates the required properties are set.\n\tprotected LoginContext createLoginContext(CallbackHandler handler); // Creates a LoginContext using the Configuration that was specified in setConfiguration(Configuration).\n\tprotected Configuration getConfiguration();\n\tvoid setConfiguration(Configuration configuration); // Sets the Configuration to use for Authentication.\n}"}
{"index": 12979, "repo": "spring-integration-file-6.1.2", "des": "MessageSource that creates messages from a file system directory.", "code": "public class FileReadingMessageSource extends org.springframework.integration.endpoint.AbstractMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle {\n\tprotected org.springframework.integration.support.AbstractIntegrationMessageBuilder<File> doReceive();\n\tString getComponentType();\n\tDirectoryScanner getScanner(); // The scanner property accessor to allow to modify its options (filter, locker etc.) at runtime using the FileReadingMessageSource bean.\n\tboolean isRunning();\n\tboolean isUseWatchService();\n\tvoid onFailure(org.springframework.messaging.Message<File> failedMessage); // Adds the failed message back to the 'toBeReceived' queue if there is room.\n\tprotected void onInit();\n\tvoid setAutoCreateDirectory(boolean autoCreateDirectory); // Specify whether to create the source directory automatically if it does not yet exist upon initialization.\n\tvoid setDirectory(File directory); // Specify the input directory.\n\tvoid setFilter(FileListFilter<File> filter); // Set a FileListFilter.\n\tvoid setLocker(FileLocker locker); // Set a FileLocker to be used to guard files against duplicate processing.\n\tvoid setScanEachPoll(boolean scanEachPoll); // Set this flag if you want to make sure the internal queue is refreshed with the latest content of the input directory on each poll.\n\tvoid setScanner(DirectoryScanner scanner); // Optionally specify a custom scanner, for example the FileReadingMessageSource.WatchServiceDirectoryScanner.\n\tvoid setUseWatchService(boolean useWatchService); // Switch this FileReadingMessageSource to use its internal FileReadingMessageSource.WatchServiceDirectoryScanner.\n\tvoid setWatchDirPredicate(Predicate<Path> watchDirPredicate); // Set a Predicate to check a directory in the Files.walkFileTree(Path, Set, int, FileVisitor) call if it is eligible for WatchService.\n\tvoid setWatchEvents(FileReadingMessageSource.WatchEventType... watchEvents); // The WatchService event types.\n\tvoid setWatchMaxDepth(int watchMaxDepth); // Set a max depth for the Files.walkFileTree(Path, Set, int, FileVisitor) API when useWatchService is enabled.\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 14713, "repo": "spring-data-commons-3.1.2", "des": "Predefined property matchers to create a ExampleMatcher.GenericPropertyMatcher.", "code": "public static class ExampleMatcher.GenericPropertyMatchers extends Object {\n\tstatic ExampleMatcher.GenericPropertyMatcher caseSensitive(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string case-sensitive.\n\tstatic ExampleMatcher.GenericPropertyMatcher contains(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string using ExampleMatcher.StringMatcher.CONTAINING.\n\tstatic ExampleMatcher.GenericPropertyMatcher endsWith(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string using ExampleMatcher.StringMatcher.ENDING.\n\tstatic ExampleMatcher.GenericPropertyMatcher exact(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string using ExampleMatcher.StringMatcher.EXACT.\n\tstatic ExampleMatcher.GenericPropertyMatcher ignoreCase(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string case insensitive.\n\tstatic ExampleMatcher.GenericPropertyMatcher regex(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string using ExampleMatcher.StringMatcher.REGEX.\n\tstatic ExampleMatcher.GenericPropertyMatcher startsWith(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string using ExampleMatcher.StringMatcher.STARTING.\n\tstatic ExampleMatcher.GenericPropertyMatcher storeDefaultMatching(); // Creates a ExampleMatcher.GenericPropertyMatcher that matches string using ExampleMatcher.StringMatcher.DEFAULT.\n}"}
{"index": 11895, "repo": "spring-kafka-3.0.9", "des": "A MessageConverter implementation that uses a Spring Data ProjectionFactory to bind incoming messages to projection interfaces.", "code": "public class ProjectingMessageConverter extends MessagingMessageConverter {\n\tprotected Object convertPayload(org.springframework.messaging.Message<?> message); // Subclasses can convert the payload; by default, it's sent unchanged to Kafka.\n\tprotected Object extractAndConvertValue(org.apache.kafka.clients.consumer.ConsumerRecord<?,?> record, Type type); // Subclasses can convert the value; by default, it's returned as provided by Kafka unless there is a SmartMessageConverter that can convert it.\n}"}
{"index": 6246, "repo": "jackson-databind-2.15.2", "des": "BeanPropertyWriter implementation used with JsonAppend to add \"virtual\" properties in addition to regular ones.", "code": "Class VirtualBeanPropertyWriter {\n\tprotected static Object _suppressableValue(JsonInclude.Value inclusion);\n\tprotected static boolean _suppressNulls(JsonInclude.Value inclusion);\n\tboolean isVirtual(); // Accessor for checking whether there is an actual physical property behind this property abstraction or not.\n\tvoid serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov); // Alternative to BeanPropertyWriter.serializeAsField(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) that is used when a POJO is serialized as JSON Array; the difference is that no field names are written.\n\tvoid serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov); // Method called to access property that this bean stands for, from within given bean, and to serialize it as a JSON Object field using appropriate serializer.\n\tprotected abstract Object value(Object bean, JsonGenerator gen, SerializerProvider prov); // Method called to figure out the value to serialize.\n\tabstract VirtualBeanPropertyWriter withConfig(MapperConfig<?> config, AnnotatedClass declaringClass, BeanPropertyDefinition propDef, JavaType type); // Contextualization method called on a newly constructed virtual bean property.\n}"}
{"index": 4720, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "Static helper for accessing request-scoped SitePreference values.", "code": "Class SitePreferenceUtils {\n\tstatic SitePreference getCurrentSitePreference(javax.servlet.http.HttpServletRequest request); // Get the current site preference for the user that originated this web request.\n\tstatic SitePreference getCurrentSitePreference(org.springframework.web.context.request.RequestAttributes attributes); // Get the current site preference for the user from the request attributes map.\n}"}
{"index": 9846, "repo": "commons-math3-3.6.1", "des": "Returns the sum of the natural logs for this collection of values.", "code": "Class SumOfLogs {\n\tvoid clear(); // Clears the internal state of the Statistic\n\tSumOfLogs copy(); // Returns a copy of the statistic with the same internal state.\n\tstatic void copy(SumOfLogs source, SumOfLogs dest); // Copies source to dest.\n\tdouble evaluate(double[] values, int begin, int length); // Returns the sum of the natural logs of the entries in the specified portion of the input array, or Double.NaN if the designated subarray is empty.\n\tlong getN(); // Returns the number of values that have been added.\n\tdouble getResult(); // Returns the current value of the Statistic.\n\tvoid increment(double d); // Updates the internal state of the statistic to reflect the addition of the new value.\n}"}
{"index": 12550, "repo": "spring-jdbc-6.0.11", "des": "Postgres-specific implementation for the CallMetaDataProvider interface.", "code": "public class PostgresCallMetaDataProvider extends GenericCallMetaDataProvider {\n\tboolean byPassReturnParameter(String parameterName); // Should we bypass the return parameter with the specified name.\n\tSqlParameter createDefaultOutParameter(String parameterName, CallParameterMetaData meta); // Create a default out parameter based on the provided meta-data.\n\tint getRefCursorSqlType(); // Get the Types type for columns that return ResultSets as ref cursors if this feature is supported.\n\tboolean isRefCursorSupported(); // Does this database support returning ResultSets as ref cursors to be retrieved with CallableStatement.getObject(int) for the specified column.\n\tboolean isReturnResultSetSupported(); // Does this database support returning ResultSets that should be retrieved with the JDBC call: Statement.getResultSet()?\n\tString metaDataSchemaNameToUse(String schemaName); // Provide any modification of the schema name passed in to match the meta-data currently used.\n}"}
{"index": 2265, "repo": "hive-exec-4.0.0-alpha-2", "des": "A RolloverStrategy that does not rename files and uses file names that are based on a millisecond timestamp.", "code": "Class SlidingFilenameRolloverStrategy {\n\tvoid clearCurrentFileName();\n\tstatic SlidingFilenameRolloverStrategy createStrategy(org.apache.logging.log4j.core.config.Configuration config);\n\tString getCurrentFileName(org.apache.logging.log4j.core.appender.rolling.RollingFileManager rollingFileManager); // Get the new log file name.\n\torg.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager manager); // Do rollover with no renaming.\n}"}
{"index": 2536, "repo": "exoplayer-r2.3.1", "des": "A factory for MetadataDecoder instances.", "code": "Interface MetadataDecoderFactory {\n\tMetadataDecoder createDecoder(Format format); // Creates a MetadataDecoder for the given Format.\n\tboolean supportsFormat(Format format); // Returns whether the factory is able to instantiate a MetadataDecoder for the given Format.\n}"}
{"index": 6637, "repo": "ignite-indexing-2.15.0", "des": "Update plan - where to take data to update cache from and how to construct new keys and values, if needed.", "code": "Class UpdatePlan {\n\tGridCacheContext cacheContext();\n\tboolean canSelectBeLazy();\n\tList<List<List<?>>> createRows(List<Object[]> argss); // Extract rows from plan without performing any query.\n\tList<List<?>> createRows(Object[] args); // Extract rows from plan without performing any query.\n\t@Nullable DmlDistributedPlanInfo distributedPlan();\n\tstatic EnlistOperation enlistOperation(UpdateMode updMode);\n\tboolean fastResult();\n\tIgniteBiTuple getFastRow(Object[] args);\n\tboolean hasRows();\n\tboolean isLocalSubquery();\n\tUpdateSourceIterator<?> iteratorForTransaction(ConnectionManager connMgr, QueryCursor<List<?>> cur); // Create iterator for transaction.\n\tUpdateMode mode();\n\tUpdateResult processFast(Object[] args); // Process fast DML operation if possible.\n\tIgniteBiTuple<?,?> processRow(List<?> row); // Convert a row into key-value pair.\n\tObject processRowForTx(List<?> row);\n\tT3<Object,Object,Object> processRowForUpdate(List<?> row); // Convert a row into value.\n\tint rowCount();\n\tString selectQuery();\n}"}
{"index": 18208, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Represents the result of the first step of the process of building MetadataSources reference into a Metadata reference.", "code": "Interface ManagedResources {\n\tjava.util.Collection<java.lang.String> getAnnotatedClassNames(); // Informational access to any entity and component classes in the user domain model known by name.\n\tjava.util.Collection<java.lang.Class> getAnnotatedClassReferences(); // Informational access to any entity and component classes in the user domain model known by Class reference .\n\tjava.util.Collection<java.lang.String> getAnnotatedPackageNames(); // Informational access to any known annotated package names (packages with a package-info.class file that Hibernate has been told about).\n\tjava.util.Collection<AttributeConverterInfo> getAttributeConverterDefinitions(); // Informational access to the AttributeConverter definitions known about.\n\tjava.util.Collection<Binding> getXmlMappingBindings(); // Informational access to binding for all known XML mapping files.\n}"}
{"index": 12138, "repo": "jena-core-4.9.0", "des": "The LSInputList interface provides the abstraction of an ordered collection of LSInputs, without defining or constraining how this collection is implemented.", "code": "public interface LSInputList extends List {\n\tint getLength(); // The number of LSInputs in the list.\n\tLSInput item(int index); // Returns the indexth item in the collection or null if index is greater than or equal to the number of objects in the list.\n}"}
{"index": 14516, "repo": "spring-security-web-6.1.2", "des": "The default ServerRedirectStrategy to use.", "code": "public class DefaultServerRedirectStrategy extends Object implements ServerRedirectStrategy {\n\treactor.core.publisher.Mono<Void> sendRedirect(org.springframework.web.server.ServerWebExchange exchange, URI location); // Performs a redirect based upon the provided ServerWebExchange and URI\n\tvoid setContextRelative(boolean contextRelative); // Sets if the location is relative to the context.\n\tvoid setHttpStatus(org.springframework.http.HttpStatus httpStatus); // The HttpStatus to use for the redirect.\n}"}
{"index": 12825, "repo": "spring-data-mongodb-4.1.2", "des": "MongoDB-specific QuerydslPredicateExecutor that allows execution Predicates in various forms.", "code": "public class QuerydslMongoPredicateExecutor<T> extends Object implements QuerydslPredicateExecutor<T> {\n\tlong count(com.querydsl.core.types.Predicate predicate);\n\tboolean exists(com.querydsl.core.types.Predicate predicate);\n\tIterable<T> findAll(com.querydsl.core.types.OrderSpecifier<?>... orders);\n\tList<T> findAll(com.querydsl.core.types.Predicate predicate);\n\tList<T> findAll(com.querydsl.core.types.Predicate predicate, com.querydsl.core.types.OrderSpecifier<?>... orders);\n\tPage<T> findAll(com.querydsl.core.types.Predicate predicate, Pageable pageable);\n\tList<T> findAll(com.querydsl.core.types.Predicate predicate, Sort sort);\n\t<S extends T, R>R findBy(com.querydsl.core.types.Predicate predicate, Function<FluentQuery.FetchableFluentQuery<S>,R> queryFunction);\n\tOptional<T> findOne(com.querydsl.core.types.Predicate predicate);\n\tprotected org.springframework.data.mongodb.repository.support.SpringDataMongodbSerializer mongodbSerializer();\n\tprotected static <E> com.querydsl.core.types.dsl.PathBuilder<E> pathBuilderFor(com.querydsl.core.types.EntityPath<E> path);\n\tprotected com.querydsl.core.types.OrderSpecifier<?> toOrder(Sort.Order order); // Transforms a plain Sort.Order into a Querydsl specific OrderSpecifier.\n\tprotected List<com.querydsl.core.types.OrderSpecifier<?>> toOrderSpecifiers(Sort sort); // Converts the given Sort to OrderSpecifier.\n\tprotected EntityInformation<T,?> typeInformation();\n}"}
{"index": 18107, "repo": "spring-ws-core-4.0.5", "des": "Represents a protocol-agnostic XML message.", "code": "public interface WebServiceMessage {\n\tResult getPayloadResult(); // Returns the contents of the message as a Result.\n\tSource getPayloadSource(); // Returns the contents of the message as a Source.\n\tvoid writeTo(OutputStream outputStream); // Writes the entire message to the given output stream.\n}"}
{"index": 16650, "repo": "spring-beans-6.0.11", "des": "Tag collection class used to hold managed Map values, which may include runtime bean references (to be resolved into bean objects).", "code": "public class ManagedMap<K,V> extends LinkedHashMap<K,V> implements Mergeable, BeanMetadataElement {\n\tString getKeyTypeName(); // Return the default key type name (class name) to be used for this map.\n\tObject getSource(); // Return the configuration source Object for this metadata element (may be null).\n\tString getValueTypeName(); // Return the default value type name (class name) to be used for this map.\n\tboolean isMergeEnabled(); // Is merging enabled for this particular instance?\n\tObject merge(Object parent); // Merge the current value set with that of the supplied object.\n\tstatic <K, V> ManagedMap<K,V> ofEntries(Map.Entry<? extends K,? extends V>... entries); // Return a new instance containing keys and values extracted from the given entries.\n\tvoid setKeyTypeName(String keyTypeName); // Set the default key type name (class name) to be used for this map.\n\tvoid setMergeEnabled(boolean mergeEnabled); // Set whether merging should be enabled for this collection, in case of a 'parent' collection value being present.\n\tvoid setSource(Object source); // Set the configuration source Object for this metadata element.\n\tvoid setValueTypeName(String valueTypeName); // Set the default value type name (class name) to be used for this map.\n}"}
{"index": 9508, "repo": "commons-math3-3.6.1", "des": "Enumerate for actions to be performed when an event occurs during ODE integration.", "code": "Enum Action {\n\tstatic Action valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Action[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12512, "repo": "spring-jdbc-6.0.11", "des": "Default implementation of the LobHandler interface.", "code": "public class DefaultLobHandler extends AbstractLobHandler {\n\tInputStream getBlobAsBinaryStream(ResultSet rs, int columnIndex); // Retrieve the given column as binary stream from the given ResultSet.\n\tbyte[] getBlobAsBytes(ResultSet rs, int columnIndex); // Retrieve the given column as bytes from the given ResultSet.\n\tInputStream getClobAsAsciiStream(ResultSet rs, int columnIndex); // Retrieve the given column as ASCII stream from the given ResultSet.\n\tReader getClobAsCharacterStream(ResultSet rs, int columnIndex); // Retrieve the given column as character stream from the given ResultSet.\n\tString getClobAsString(ResultSet rs, int columnIndex); // Retrieve the given column as String from the given ResultSet.\n\tLobCreator getLobCreator(); // Create a new LobCreator instance, i.e.\n\tvoid setCreateTemporaryLob(boolean createTemporaryLob); // Specify whether to copy a byte array / String into a temporary JDBC Blob / Clob object created through the JDBC 4.0 createBlob / createClob methods.\n\tvoid setStreamAsLob(boolean streamAsLob); // Specify whether to submit a binary stream / character stream to the JDBC driver as explicit LOB content, using the JDBC 4.0 setBlob / setClob method with a stream argument.\n\tvoid setWrapAsLob(boolean wrapAsLob); // Specify whether to submit a byte array / String to the JDBC driver wrapped in a JDBC Blob / Clob object, using the JDBC setBlob / setClob method with a Blob / Clob argument.\n}"}
{"index": 7602, "repo": "cassandra-all-4.1.2", "des": "Enables storing and retrieving DiagnosticEvents.", "code": "Interface DiagnosticEventStore<T extends java.lang.Comparable<T>> {\n\tT getLastEventId(); // Returns the greatest event ID that can be used to fetch events via scan(Comparable, int).\n\tvoid load(); // Initializes the store.\n\tjava.util.NavigableMap<T,DiagnosticEvent> scan(T key, int limit); // Returns a view on all events with a key greater than the provided value (inclusive) up to the specified number of results.\n\tvoid store(DiagnosticEvent event); // Stores provided event and returns the new associated store key for it.\n}"}
{"index": 15204, "repo": "spring-boot-3.1.1", "des": "Event published once the application context has been refreshed but before any application and command line runners have been called.", "code": "public class ApplicationStartedEvent extends SpringApplicationEvent {\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext(); // Return the application context.\n\tDuration getTimeTaken(); // Return the time taken to start the application, or null if unknown.\n}"}
{"index": 686, "repo": "ignite-core-2.15.0", "des": "Iterator over the elements of given iterators.", "code": "Class FlatIterator<T> {\n\tboolean hasNextX(); // This method is the same as Iterator.hasNext(), but allows for failure with exception.\n\tT nextX(); // This method is the same as Iterator.next(), but allows for failure with exception.\n\tvoid removeX(); // This method is the same as Iterator.remove(), but allows for failure with exception.\n}"}
{"index": 2433, "repo": "spring-session-1.3.5.RELEASE", "des": "A repository interface for managing Session instances.", "code": "Interface SessionRepository<S extends Session> {\n\tS createSession(); // Creates a new Session that is capable of being persisted by this SessionRepository.\n\tvoid delete(java.lang.String id); // Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\tS getSession(java.lang.String id); // Gets the Session by the Session.getId() or null if no Session is found.\n\tvoid save(S session); // Ensures the Session created by createSession() is saved.\n}"}
{"index": 12991, "repo": "spring-integration-file-6.1.2", "des": "Implementation of AbstractRegexPatternMatchingFileListFilter for java.io.File instances.", "code": "public class RegexPatternFileListFilter extends AbstractRegexPatternFileListFilter<File> {\n\tprotected String getFilename(File file); // Subclasses must implement this method to extract the file's name.\n\tprotected boolean isDirectory(File file); // Subclasses must implement this method to indicate whether the file is a directory or not.\n}"}
{"index": 8541, "repo": "commons-io-2.13.0", "des": "Compare the names of two files for order (see File.", "code": "Class NameFileComparator {\n\tint compare(File file1, File file2); // Compares the names of two files with the specified case sensitivity.\n\tFile[] sort(File... files); // Sorts an array of files.\n\tList<File> sort(List<File> files); // Sorts a List of files.\n}"}
{"index": 16499, "repo": "spring-batch-infrastructure-5.0.2", "des": "Restartable ItemReader that reads documents from MongoDB via a paging technique.", "code": "public class MongoItemReader<T> extends AbstractPaginatedDataItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Checks mandatory properties\n\tprotected Iterator<T> doPageRead(); // Method this ItemStreamReader delegates to for the actual work of reading a page.\n\tvoid setCollection(String collection);\n\tvoid setFields(String fields); // JSON defining the fields to be returned from the matching documents by MongoDB.\n\tvoid setHint(String hint); // JSON String telling MongoDB what index to use.\n\tvoid setParameterValues(List<Object> parameterValues); // List of values to be substituted in for each of the parameters in the query.\n\tvoid setQuery(String queryString); // A JSON formatted MongoDB query.\n\tvoid setQuery(org.springframework.data.mongodb.core.query.Query query); // A Mongo Query to be used.\n\tvoid setSort(Map<String,org.springframework.data.domain.Sort.Direction> sorts); // Map of property names/Sort.Direction values to sort the input by.\n\tvoid setTargetType(Class<? extends T> type); // The type of object to be returned for each AbstractItemCountingItemStreamItemReader.read() call.\n\tvoid setTemplate(org.springframework.data.mongodb.core.MongoOperations template); // Used to perform operations against the MongoDB instance.\n}"}
{"index": 5874, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol buffer based implementation of GetSubClusterInfoRequest.", "code": "Class GetSubClusterInfoRequestPBImpl {\n\tboolean equals(Object other);\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.GetSubClusterInfoRequestProto getProto();\n\tSubClusterId getSubClusterId(); // Get the SubClusterId representing the unique identifier of the subcluster.\n\tvoid setSubClusterId(SubClusterId subClusterId); // Set the SubClusterId representing the unique identifier of the subcluster.\n}"}
{"index": 8534, "repo": "commons-io-2.13.0", "des": "Compare the last modified date/time of two files for order (see FileUtils.", "code": "Class LastModifiedFileComparator {\n\tint compare(File file1, File file2); // Compares the last modified date/time of two files.\n\tFile[] sort(File... files); // Sorts an array of files.\n\tList<File> sort(List<File> files); // Sorts a List of files.\n}"}
{"index": 17473, "repo": "spring-security-config-6.1.2", "des": "Adds X509 based pre authentication to an application.", "code": "public final class X509Configurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<X509Configurer<H>,H> {\n\tX509Configurer<H> authenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,org.springframework.security.web.authentication.preauth.PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails> authenticationDetailsSource); // Specifies the AuthenticationDetailsSource\n\tX509Configurer<H> authenticationUserDetailsService(org.springframework.security.core.userdetails.AuthenticationUserDetailsService<org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationToken> authenticationUserDetailsService); // Specifies the AuthenticationUserDetailsService to use.\n\tvoid configure(H http); // Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid init(H http); // Initialize the SecurityBuilder.\n\tX509Configurer<H> subjectPrincipalRegex(String subjectPrincipalRegex); // Specifies the regex to extract the principal from the certificate.\n\tX509Configurer<H> userDetailsService(org.springframework.security.core.userdetails.UserDetailsService userDetailsService); // Shortcut for invoking authenticationUserDetailsService(AuthenticationUserDetailsService) with a UserDetailsByNameServiceWrapper.\n\tX509Configurer<H> x509AuthenticationFilter(org.springframework.security.web.authentication.preauth.x509.X509AuthenticationFilter x509AuthenticationFilter); // Allows specifying the entire X509AuthenticationFilter.\n\tX509Configurer<H> x509PrincipalExtractor(org.springframework.security.web.authentication.preauth.x509.X509PrincipalExtractor x509PrincipalExtractor); // Specifies the X509PrincipalExtractor\n}"}
{"index": 2930, "repo": "tink-1.10.0", "des": "This key manager generates new AesCtrHmacStreamingKey keys and produces new instances of AesCtrHmacStreaming.", "code": "Class AesCtrHmacStreamingKeyManager {\n\tstatic KeyTemplate aes128CtrHmacSha2561MBTemplate();\n\tstatic KeyTemplate aes128CtrHmacSha2564KBTemplate();\n\tstatic KeyTemplate aes256CtrHmacSha2561MBTemplate();\n\tstatic KeyTemplate aes256CtrHmacSha2564KBTemplate();\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<AesCtrHmacStreamingKeyFormat,AesCtrHmacStreamingKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tAesCtrHmacStreamingKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(AesCtrHmacStreamingKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 18006, "repo": "spring-ws-core-4.0.5", "des": "Default implementation of the BindingsProvider and ServicesProvider interfaces.", "code": "public class DefaultConcretePartProvider extends Object implements BindingsProvider, ServicesProvider {\n\tvoid addBindings(javax.wsdl.Definition definition); // Creates a Binding for each PortType in the definition, and calls populateBinding(Definition,javax.wsdl.Binding) with it.\n\tvoid addServices(javax.wsdl.Definition definition); // Creates a single Service if not present, and calls populateService(Definition, Service) with it.\n\tString getBindingSuffix(); // Returns the suffix to append to the port type name to obtain the binding name.\n\tString getServiceName(); // Returns the service name.\n\tprotected void populateBinding(javax.wsdl.Definition definition, javax.wsdl.Binding binding); // Called after the Binding has been created, but before any sub-elements are added.\n\tprotected void populateBindingFault(javax.wsdl.Definition definition, javax.wsdl.BindingFault bindingFault, javax.wsdl.Fault fault); // Called after the BindingFault has been created.\n\tprotected void populateBindingInput(javax.wsdl.Definition definition, javax.wsdl.BindingInput bindingInput, javax.wsdl.Input input); // Called after the BindingInput has been created.\n\tprotected void populateBindingOperation(javax.wsdl.Definition definition, javax.wsdl.BindingOperation bindingOperation); // Called after the BindingOperation has been created, but before any sub-elements are added.\n\tprotected void populateBindingOutput(javax.wsdl.Definition definition, javax.wsdl.BindingOutput bindingOutput, javax.wsdl.Output output); // Called after the BindingOutput has been created.\n\tprotected void populatePort(javax.wsdl.Definition definition, javax.wsdl.Port port); // Called after the Port has been created, but before any sub-elements are added.\n\tprotected void populateService(javax.wsdl.Definition definition, javax.wsdl.Service service); // Called after the Service has been created, but before any sub-elements are added.\n\tvoid setBindingSuffix(String bindingSuffix); // Sets the suffix to append to the port type name to obtain the binding name.\n\tvoid setServiceName(String serviceName); // Sets the service name.\n}"}
{"index": 9009, "repo": "hbase-server-3.0.0-alpha-4", "des": "The procedure will only update the table descriptor without reopening all the regions.", "code": "Class ModifyTableDescriptorProcedure {\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected StateMachineProcedure.Flow executeFromState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyTableDescriptorState state);\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyTableDescriptorState getInitialState();\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyTableDescriptorState getState(int stateId);\n\tprotected int getStateId(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyTableDescriptorState state);\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tprotected boolean holdLock(MasterProcedureEnv env);\n\tprotected boolean isRollbackSupported(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyTableDescriptorState state);\n\tprotected abstract Optional<TableDescriptor> modify(MasterProcedureEnv env, TableDescriptor current); // Sub class should implement this method to modify the table descriptor, such as storing the rs group information.\n\tprotected void rollbackState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyTableDescriptorState state);\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n}"}
{"index": 11200, "repo": "wicket-extensions-10.0.0-M1", "des": "A toolbar that provides links to download the data represented by all IExportableColumns in the table exported to formats supported by the IDataExporters configured.", "code": "public class ExportToolbar extends AbstractToolbar {\n\tExportToolbar addDataExporter(IDataExporter exporter); // Adds a IDataExporter to the list of data exporters to be used in this toolbar.\n\tprotected void calculateVisibility(); // This toolbar is only visible if there are rows in the data set and if there are exportable columns in the data table and if there are data exporters added to the toolbar.\n\tprotected org.apache.wicket.Component createExportLink(String componentId, IDataExporter dataExporter); // Creates a new link to the exported data for the provided IDataExporter.\n\tprotected Duration getCacheDuration(); // How long should the export be cached.\n\torg.apache.wicket.model.IModel<String> getFileNameModel(); // Returns the model of the file name used for the exported data.\n\torg.apache.wicket.model.IModel<String> getMessageModel(); // Returns the model of the export message displayed in the toolbar.\n\tprotected void onConfigure();\n\tprotected void onDetach();\n\tprotected void onInitialize();\n\tExportToolbar setFileNameModel(org.apache.wicket.model.IModel<String> fileNameModel); // Sets the model of the file name used for the exported data.\n\tExportToolbar setMessageModel(org.apache.wicket.model.IModel<String> messageModel); // Sets the models of the export message displayed in the toolbar.\n}"}
{"index": 3316, "repo": "hbase-common-3.0.0-alpha-4", "des": "Bridges User invocations to underlying calls to UserGroupInformation for secure Hadoop 0.", "code": "Class User.SecureHadoopUser {\n\tstatic User createUserForTesting(org.apache.hadoop.conf.Configuration conf, String name, String[] groups); // Create a user for testing.\n\tString[] getGroupNames(); // Returns the list of groups of which this user is a member.\n\tString getShortName(); // Returns the shortened version of the user name -- the portion that maps to an operating system user name.\n\tstatic boolean isSecurityEnabled(); // Returns the result of UserGroupInformation.isSecurityEnabled().\n\tstatic void login(org.apache.hadoop.conf.Configuration conf, String fileConfKey, String principalConfKey, String localhost); // Obtain credentials for the current process using the configured Kerberos keytab file and principal.\n\tstatic void login(String keytabLocation, String principalName); // Login through configured keytab and pricipal.\n\t<T> T runAs(PrivilegedAction<T> action); // Executes the given action within the context of this user.\n\t<T> T runAs(PrivilegedExceptionAction<T> action); // Executes the given action within the context of this user.\n}"}
{"index": 8481, "repo": "commons-io-2.13.0", "des": "Charsets required of every implementation of the Java platform.", "code": "Class Charsets {\n\tstatic SortedMap<String,Charset> requiredCharsets(); // Constructs a sorted map from canonical charset names to charset objects required of every implementation of the Java platform.\n\tstatic Charset toCharset(Charset charset); // Returns the given Charset or the default Charset if the given Charset is null.\n\tstatic Charset toCharset(Charset charset, Charset defaultCharset); // Returns the given charset if non-null, otherwise return defaultCharset.\n\tstatic Charset toCharset(String charsetName); // Returns a Charset for the named charset.\n\tstatic Charset toCharset(String charsetName, Charset defaultCharset); // Returns a Charset for the named charset.\n}"}
{"index": 3712, "repo": "kafka-streams-3.5.0", "des": "Interface that specifies how an exception when attempting to produce a result to Kafka should be handled.", "code": "Interface ProductionExceptionHandler {\n\tProductionExceptionHandler.ProductionExceptionHandlerResponse handle(org.apache.kafka.clients.producer.ProducerRecord<byte[],byte[]> record, Exception exception); // Inspect a record that we attempted to produce, and the exception that resulted from attempting to produce it and determine whether or not to continue processing.\n\tdefault ProductionExceptionHandler.ProductionExceptionHandlerResponse handleSerializationException(org.apache.kafka.clients.producer.ProducerRecord record, Exception exception); // Handles serialization exception and determine if the process should continue.\n}"}
{"index": 1912, "repo": "hadoop-hdfs-3.3.6", "des": "MetricsLoggerTask can be used as utility to dump metrics to log.", "code": "Class MetricsLoggerTask {\n\tstatic void makeMetricsLoggerAsync(org.apache.commons.logging.Log metricsLog); // Make the metrics logger async and add all pre-existing appenders to the async appender.\n\tvoid run(); // Write metrics to the metrics appender when invoked.\n}"}
{"index": 2256, "repo": "hive-exec-4.0.0-alpha-2", "des": "Statements executed to handle replication have some additional information relevant to the replication subsystem - this class captures those bits of information.", "code": "Class ReplicationSpec {\n\tboolean allowEventReplacementInto(Map<String,String> params); // Determines if a current replication event (based on event id) is allowed to replicate-replace-into a given metastore object (based on state_id stored in their parameters)\n\tboolean allowReplacement(String currReplState, String replacementReplState);\n\tboolean allowReplacementInto(Map<String,String> params); // Determines if a current replication object (current state of dump) is allowed to replicate-replace-into a given metastore object (based on state_id stored in their parameters)\n\tstatic void copyLastReplId(Map<String,String> srcParameter, Map<String,String> destParameter);\n\tString get(ReplicationSpec.KEY key);\n\tString getCurrentReplicationState();\n\tstatic String getLastReplicatedStateFromParameters(Map<String,String> m);\n\tString getReplicationState();\n\tReplicationSpec.Type getReplSpecType();\n\tReplicationSpec.SCOPE getScope();\n\tstatic String getTargetLastReplicatedStateFromParameters(Map<String,String> m);\n\tString getValidTxnList();\n\tString getValidWriteIdList();\n\tstatic boolean isApplicable(ASTNode node); // Tests if an ASTNode is a Replication Specification\n\tboolean isForceOverwrite();\n\tboolean isInReplicationScope();\n\tboolean isMetadataOnly();\n\tboolean isMetadataOnlyForExternalTables();\n\tboolean isNoop();\n\tboolean isRepl();\n\tboolean isReplace();\n\tboolean isTransactionalTableDump();\n\tboolean needDupCopyCheck();\n\tvoid setCurrentReplicationState(String currStateId);\n\tvoid setForceOverwrite(boolean forceOverwrite);\n\tvoid setInReplicationScope(boolean inReplicationScope);\n\tvoid setIsMetadataOnly(boolean isMetadataOnly);\n\tvoid setIsReplace(boolean isReplace);\n\tvoid setMetadataOnlyForExternalTables(boolean metadataOnlyForExternalTables);\n\tvoid setNeedDupCopyCheck(boolean isFirstIncPending);\n\tvoid setNoop(boolean isNoop);\n\tvoid setRepl(boolean repl);\n\tvoid setReplSpecType(ReplicationSpec.Type specType);\n\tvoid setValidTxnList(String validTxnList);\n\tvoid setValidWriteIdList(String validWriteIdList);\n}"}
{"index": 4559, "repo": "beam-sdks-java-core-2.49.0", "des": "An immutable tuple of value, timestamp, window, and pane.", "code": "Class ValueInSingleWindow<T> {\n\tprotected abstract T getNullableValue(); // Workaround for autovalue code generation, which does not allow type variables to be instantiated with nullable actual parameters.\n\tabstract PaneInfo getPane(); // Returns the pane of this ValueInSingleWindow in its window.\n\tabstract org.joda.time.Instant getTimestamp(); // Returns the timestamp of this ValueInSingleWindow.\n\tT getValue(); // Returns the value of this ValueInSingleWindow.\n\tabstract BoundedWindow getWindow(); // Returns the window of this ValueInSingleWindow.\n\tstatic <T> ValueInSingleWindow<T> of(T value, org.joda.time.Instant timestamp, BoundedWindow window, PaneInfo paneInfo);\n}"}
{"index": 9753, "repo": "commons-math3-3.6.1", "des": "Interface to compute by finite difference Jacobian matrix for some parameter when computing partial derivatives equations.", "code": "Interface ParameterizedODE {\n\tdouble getParameter(String name); // Get parameter value from its name.\n\tvoid setParameter(String name, double value); // Set the value for a given parameter.\n}"}
{"index": 2395, "repo": "commons-geometry-euclidean-1.0", "des": "Interface representing a generic rotation in 3-dimensional Euclidean space.", "code": "Interface Rotation3D {\n\tVector3D apply(Vector3D vec); // Apply this rotation to the given argument.\n\tdouble getAngle(); // Get the angle of rotation in radians.\n\tVector3D getAxis(); // Get the axis of rotation as a normalized Vector3D.\n\tRotation3D inverse(); // Get the inverse rotation.\n}"}
{"index": 13490, "repo": "spring-messaging-6.0.11", "des": "Abstract base class for implementations of SubscriptionRegistry that looks up information in messages but delegates to abstract methods for the actual storage and retrieval.", "code": "public abstract class AbstractSubscriptionRegistry extends Object implements SubscriptionRegistry {\n\tprotected abstract void addSubscriptionInternal(String sessionId, String subscriptionId, String destination, Message<?> message);\n\tfinal org.springframework.util.MultiValueMap<String,String> findSubscriptions(Message<?> message); // Find all subscriptions that should receive the given message.\n\tprotected abstract org.springframework.util.MultiValueMap<String,String> findSubscriptionsInternal(String destination, Message<?> message);\n\tfinal void registerSubscription(Message<?> message); // Register a subscription represented by the given message.\n\tprotected abstract void removeSubscriptionInternal(String sessionId, String subscriptionId, Message<?> message);\n\tfinal void unregisterSubscription(Message<?> message); // Unregister a subscription.\n}"}
{"index": 704, "repo": "ignite-core-2.15.0", "des": "Replication manager class which processes all replication events.", "code": "Interface GridCacheDrManager {\n\tbyte dataCenterId();\n\tboolean enabled();\n\tvoid onExchange(AffinityTopologyVersion topVer, boolean left, boolean activate); // Process partitions exchange event.\n\tvoid onReceiveCacheConflictResolved(boolean useNew, boolean useOld, boolean merge); // Callback for manual conflict resolution.\n\tvoid onReceiveCacheEntriesReceived(int entriesCnt); // Callback for received entries from receiver hub.\n\tvoid partitionEvicted(int part); // In case some partition is evicted, we remove entries of this partition from backup queue.\n\tboolean receiveEnabled();\n\tvoid replicate(KeyCacheObject key, @Nullable CacheObject val, long ttl, long expireTime, GridCacheVersion ver, GridDrType drType, AffinityTopologyVersion topVer); // Performs replication.\n\tvoid resetMetrics(); // Resets metrics for current cache.\n}"}
{"index": 8215, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of WebServiceConnection that is used for client-side JMS access.", "code": "Class JmsSenderConnection {\n\tvoid addRequestHeader(String name, String value); // Adds a request header with the given name and value.\n\tString getErrorMessage(); // Returns the error message.\n\tjavax.jms.Message getRequestMessage(); // Returns the request message for this connection.\n\tprotected OutputStream getRequestOutputStream(); // Returns the output stream to write the request to.\n\tIterator<String> getResponseHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getResponseHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected InputStream getResponseInputStream(); // Returns the input stream to read the response from.\n\tjavax.jms.Message getResponseMessage(); // Returns the response message, if any, for this connection.\n\tURI getUri(); // Returns the URI for this connection.\n\tboolean hasError(); // Indicates whether this connection has an error.\n\tprotected boolean hasResponse(); // Indicates whether this connection has a response.\n\tprotected void onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n\tprotected void onReceiveBeforeRead(); // Called before a message has been read from the TransportInputStream.\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n}"}
{"index": 3284, "repo": "hbase-common-3.0.0-alpha-4", "des": "An DataType that encodes variable-length values encoded using Bytes.", "code": "Class RawBytesTerminated {\n\tbyte[] decode(PositionedByteRange src, int length); // Read a byte[] from the buffer src.\n\tint encode(PositionedByteRange dst, byte[] val, int voff, int vlen); // Write val into dst, respecting offset and length.\n}"}
{"index": 9171, "repo": "hbase-server-3.0.0-alpha-4", "des": "A one way WAL reader, without reset and seek support.", "code": "Interface WALStreamReader {\n\tvoid close(); // Override to remove the 'throws IOException' as we are just a reader.\n\tlong getPosition(); // Get the current reading position.\n\tdefault WAL.Entry next(); // Read the next entry in WAL.\n\tWAL.Entry next(WAL.Entry reuse); // Read the next entry in WAL, use the given WAL.Entry if not null to hold the data.\n}"}
{"index": 991, "repo": "ignite-core-2.15.0", "des": "Contains cache partitions distributions with corresponding set of cache ids.", "code": "Class JdbcThinPartitionAwarenessMappingGroup {\n\tSet<Integer> cacheIds();\n\tboolean merge(int cacheId, Map<UUID,Set<Integer>> partitionsMappings); // Tries to merge given partitions mappings and corresponding cache id with already existing mappings.\n\tvoid readBinary(BinaryReaderExImpl reader, JdbcProtocolContext protoCtx); // Reads fields from provided reader.\n\tstatic JdbcThinPartitionAwarenessMappingGroup readGroup(BinaryReaderExImpl reader, JdbcProtocolContext binCtx); // Reads JdbcThinPartitionAwarenessMappingGroup from provided reader.\n\tUUID[] revertMappings(int partsCnt); // Reverts partitions mappings from the form 'node id -> set of partition ids' to the form 'partition id -> node id'.\n\tvoid writeBinary(BinaryWriterExImpl writer, JdbcProtocolContext protoCtx); // Writes fields to provided writer.\n}"}
{"index": 14213, "repo": "wicket-core-10.0.0-M1", "des": "Represents additional error attributes present in a ServletRequest when the servlet container is handling an error or a forward to an error page mapped by error-page element in web.xml.", "code": "public class ErrorAttributes extends Object {\n\tThrowable getException(); // Gets exception.\n\tClass<? extends Throwable> getExceptionType(); // Gets exceptionType.\n\tString getMessage(); // Gets message.\n\tString getRequestUri(); // Gets requestUri.\n\tString getServletName(); // Gets servletName.\n\tInteger getStatusCode(); // Gets statusCode.\n\tstatic ErrorAttributes of(jakarta.servlet.http.HttpServletRequest request, String filterPrefix); // Factory for creating instances of this class.\n}"}
{"index": 2678, "repo": "mahout-core-14.1", "des": "Open hash map from Object keys to float values.", "code": "Class OpenObjectFloatHashMap<T> {\n\tfloat adjustOrPutValue(T key, float newValue, float incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(T key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(float value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ObjectProcedure<T> procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ObjectFloatProcedure<T> procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tfloat get(T key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(T key);\n\tprotected int indexOfKey(T key);\n\tprotected int indexOfValue(float value);\n\tvoid keys(List<T> list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ObjectFloatProcedure<T> condition, List<T> keyList, FloatArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(T key, float value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(T key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(FloatArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 11589, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an AuthenticationProvider for OAuth 2.0 Login, which leverages the OAuth 2.0 Authorization Code Grant Flow.", "code": "public class OidcAuthorizationCodeReactiveAuthenticationManager extends Object implements org.springframework.security.authentication.ReactiveAuthenticationManager {\n\treactor.core.publisher.Mono<org.springframework.security.core.Authentication> authenticate(org.springframework.security.core.Authentication authentication);\n\tfinal void setAuthoritiesMapper(org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper authoritiesMapper); // Sets the GrantedAuthoritiesMapper used for mapping OAuth2AuthenticatedPrincipal.getAuthorities() to a new set of authorities which will be associated to the OAuth2LoginAuthenticationToken.\n\tfinal void setJwtDecoderFactory(org.springframework.security.oauth2.jwt.ReactiveJwtDecoderFactory<ClientRegistration> jwtDecoderFactory); // Sets the ReactiveJwtDecoderFactory used for OidcIdToken signature verification.\n}"}
{"index": 11187, "repo": "wicket-extensions-10.0.0-M1", "des": "Utility class for working with bread crumb model listeners.", "code": "public final class BreadCrumbModelListenerSupport extends Object implements org.apache.wicket.util.io.IClusterable {\n\tfinal void addListener(IBreadCrumbModelListener listener); // Adds a bread crumb model listener.\n\tfinal void fireBreadCrumbActivated(IBreadCrumbParticipant previousParticipant, IBreadCrumbParticipant breadCrumbParticipant); // Notifies all listeners that a bread crumb was activated.\n\tfinal void fireBreadCrumbAdded(IBreadCrumbParticipant breadCrumbParticipant); // Notifies all listeners that a new bread crumb was added.\n\tfinal void fireBreadCrumbRemoved(IBreadCrumbParticipant breadCrumbParticipant); // Notifies all listeners that a bread crumb was removed.\n\tfinal void removeListener(IBreadCrumbModelListener listener); // Removes a bread crumb model listener.\n}"}
{"index": 3561, "repo": "mahout-mr-0.13.0", "des": "This class implements a \"Manhattan distance\" metric by summing the absolute values of the difference between each coordinate, optionally with weights.", "code": "Class WeightedManhattanDistanceMeasure {\n\tdouble distance(double centroidLengthSquare, Vector centroid, Vector v); // Optimized version of distance metric for sparse vectors.\n\tdouble distance(Vector p1, Vector p2); // Returns the distance metric applied to the arguments\n}"}
{"index": 7442, "repo": "mahout-math-0.13.0", "des": "Open hash map from short keys to int values.", "code": "Class OpenShortIntHashMap {\n\tint adjustOrPutValue(short key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(short key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ShortProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ShortIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(short key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(short key);\n\tprotected int indexOfKey(short key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenShortIntHashMap.MapElement> iterator();\n\tvoid keys(ShortArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ShortIntProcedure condition, ShortArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(short key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(short key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 9498, "repo": "commons-math3-3.6.1", "des": "Base class for implementing optimization problems.", "code": "Class AbstractOptimizationProblem<PAIR> {\n\tConvergenceChecker<PAIR> getConvergenceChecker(); // Gets the convergence checker.\n\tIncrementor getEvaluationCounter(); // Get a independent Incrementor that counts up to the maximum number of evaluations and then throws an exception.\n\tIncrementor getIterationCounter(); // Get a independent Incrementor that counts up to the maximum number of iterations and then throws an exception.\n}"}
{"index": 965, "repo": "ignite-core-2.15.0", "des": "Inline index key implementation for inlining Integer values.", "code": "Class IntegerInlineIndexKeyType {\n\tint compare0(long pageAddr, int off, IndexKey key); // Compares inlined and given value.\n\tprotected IntegerIndexKey get0(long pageAddr, int off); // Restores value from inline.\n\tprotected int put0(long pageAddr, int off, IntegerIndexKey key, int maxSize); // Puts given value into inline index tree.\n}"}
{"index": 3226, "repo": "hbase-common-3.0.0-alpha-4", "des": "Encryptors apply a cipher to an OutputStream to produce ciphertext.", "code": "Interface Encryptor {\n\tOutputStream createEncryptionStream(OutputStream out); // Create a stream for encryption\n\tint getBlockSize(); // Get the cipher's internal block size\n\tbyte[] getIv(); // Get the initialization vector\n\tint getIvLength(); // Get the expected length for the initialization vector\n\tvoid reset(); // Reset state, reinitialize with the key and iv\n\tvoid setIv(byte[] iv); // Set the initialization vector\n\tvoid setKey(Key key); // Set the secret key\n}"}
{"index": 4334, "repo": "beam-sdks-java-core-2.49.0", "des": "A trigger that is equivalent to Repeatedly.", "code": "Class DefaultTrigger {\n\tprotected Trigger getContinuationTrigger(java.util.List<Trigger> continuationTriggers); // Subclasses should override this to return the Trigger.getContinuationTrigger() of this Trigger.\n\torg.joda.time.Instant getWatermarkThatGuaranteesFiring(BoundedWindow window); // For internal use only; no backwards-compatibility guarantees.\n\tboolean isCompatible(Trigger other); // For internal use only; no backwards-compatibility guarantees.\n\tboolean mayFinish(); // For internal use only; no backwards-compatibility guarantees.\n\tstatic DefaultTrigger of(); // Returns the default trigger.\n}"}
{"index": 16058, "repo": "shiro-web-2.0.0-alpha-2", "des": "A Servlet Filter that enables AOP-style \"around\" advice for a ServletRequest via preHandle, postHandle, and afterCompletion hooks.", "code": "public abstract class AdviceFilter extends OncePerRequestFilter {\n\tvoid afterCompletion(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, Exception exception); // Called in all cases in a finally block even if preHandle returns false or if an exception is thrown during filter chain processing.\n\tprotected void cleanup(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, Exception existing); // Executes cleanup logic in the finally code block in the doFilterInternal implementation.\n\tvoid doFilterInternal(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain); // Actually implements the chain execution logic, utilizing pre, post, and after advice hooks.\n\tprotected void executeChain(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain); // Actually executes the specified filter chain by calling chain.doFilter(request,response);.\n\tprotected void postHandle(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response); // Allows 'post' advice logic to be called, but only if no exception occurs during filter chain execution.\n\tprotected boolean preHandle(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response); // Returns true if the filter chain should be allowed to continue, false otherwise.\n}"}
{"index": 864, "repo": "ignite-core-2.15.0", "des": "Convenience class representing mutable tuple of four values.", "code": "Class GridTuple4<V1,V2,V3,V4> {\n\tObject clone();\n\tboolean equals(Object o);\n\tV1 get1(); // Gets first value.\n\tV2 get2(); // Gets second value.\n\tV3 get3(); // Gets third value.\n\tV4 get4(); // Gets forth value.\n\tIterator<Object> iterator();\n\tvoid readExternal(ObjectInput in);\n\tvoid set(V1 val1, V2 val2, V3 val3, V4 val4); // Sets all values.\n\tvoid set1(V1 val1); // Sets first value.\n\tvoid set2(V2 val2); // Sets second value.\n\tvoid set3(V3 val3); // Sets third value.\n\tvoid set4(V4 val4); // Sets fourth value.\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 11918, "repo": "maven-core-4.0.0-alpha-7", "des": "Presents a view of the Dependency Graph that is suited for concurrent building.", "code": "public class ConcurrencyDependencyGraph extends Object {\n\tList<MavenProject> getActiveDependencies(MavenProject p); // For the given MavenProject p return p's uncompleted dependencies.\n\tprotected List<MavenProject> getDependencies(MavenProject p); // For the given MavenProject p, return all of p's dependencies.\n\tprotected Set<MavenProject> getFinishedProjects();\n\tint getNumberOfBuilds();\n\tprotected ProjectBuildList getProjectBuilds();\n\tList<MavenProject> getRootSchedulableBuilds(); // Gets all the builds that have no reactor-dependencies\n\tSet<MavenProject> getUnfinishedProjects();\n\tList<MavenProject> markAsFinished(MavenProject mavenProject); // Marks the provided project as finished.\n}"}
{"index": 18580, "repo": "hibernate-core-5.6.15.Final", "des": "This object contains factory methods for each Java content interface and Java element interface generated in the org.hibernate.boot.jaxb.cfg.spi package.", "code": "Class ObjectFactory {\n\tJaxbCfgCollectionCacheType createJaxbCfgCollectionCacheType(); // Create an instance of JaxbCfgCollectionCacheType\n\tJaxbCfgConfigPropertyType createJaxbCfgConfigPropertyType(); // Create an instance of JaxbCfgConfigPropertyType\n\tJaxbCfgEntityCacheType createJaxbCfgEntityCacheType(); // Create an instance of JaxbCfgEntityCacheType\n\tJaxbCfgEventListenerGroupType createJaxbCfgEventListenerGroupType(); // Create an instance of JaxbCfgEventListenerGroupType\n\tJaxbCfgEventListenerType createJaxbCfgEventListenerType(); // Create an instance of JaxbCfgEventListenerType\n\tJaxbCfgHibernateConfiguration createJaxbCfgHibernateConfiguration(); // Create an instance of JaxbCfgHibernateConfiguration\n\tJaxbCfgHibernateConfiguration.JaxbCfgSecurity createJaxbCfgHibernateConfigurationJaxbCfgSecurity(); // Create an instance of JaxbCfgHibernateConfiguration.JaxbCfgSecurity\n\tJaxbCfgHibernateConfiguration.JaxbCfgSecurity.JaxbCfgGrant createJaxbCfgHibernateConfigurationJaxbCfgSecurityJaxbCfgGrant(); // Create an instance of JaxbCfgHibernateConfiguration.JaxbCfgSecurity.JaxbCfgGrant\n\tJaxbCfgHibernateConfiguration.JaxbCfgSessionFactory createJaxbCfgHibernateConfigurationJaxbCfgSessionFactory(); // Create an instance of JaxbCfgHibernateConfiguration.JaxbCfgSessionFactory\n\tJaxbCfgMappingReferenceType createJaxbCfgMappingReferenceType(); // Create an instance of JaxbCfgMappingReferenceType\n}"}
{"index": 11900, "repo": "spring-kafka-3.0.9", "des": "Provide the component instances that will be used with RetryTopicConfigurationSupport.", "code": "public class RetryTopicComponentFactory extends Object {\n\tprotected Clock createInternalRetryTopicClock(); // Create a Clock instance that will be used for all time-related operations in the retry topic processes.\n\tDeadLetterPublishingRecovererFactory deadLetterPublishingRecovererFactory(DestinationTopicResolver destinationTopicResolver); // Create the DeadLetterPublishingRecovererFactory that will be used to create the DeadLetterPublishingRecoverer to forward the records to a given DestinationTopic.\n\tDestinationTopicProcessor destinationTopicProcessor(DestinationTopicResolver destinationTopicResolver); // Create the DestinationTopicProcessor that will be used to process the DestinationTopic instances and store them in the provided DestinationTopicResolver.\n\tDestinationTopicResolver destinationTopicResolver(); // Create the instance of DestinationTopicResolver that will be used to store the DestinationTopic instance and resolve which a given record should be forwarded to.\n\tClock internalRetryTopicClock(); // Return the Clock instance that will be used for all time-related operations in the retry topic processes.\n\tKafkaBackOffManagerFactory kafkaBackOffManagerFactory(ListenerContainerRegistry registry, org.springframework.context.ApplicationContext applicationContext); // Create the KafkaBackOffManagerFactory that will be used to create the KafkaConsumerBackoffManager instance used to back off the partitions.\n\tListenerContainerFactoryConfigurer listenerContainerFactoryConfigurer(KafkaConsumerBackoffManager kafkaConsumerBackoffManager, DeadLetterPublishingRecovererFactory deadLetterPublishingRecovererFactory, Clock clock); // Create a ListenerContainerFactoryConfigurer that will be used to configure the KafkaListenerContainerFactory resolved by the ListenerContainerFactoryResolver.\n\tListenerContainerFactoryResolver listenerContainerFactoryResolver(org.springframework.beans.factory.BeanFactory beanFactory); // Create the ListenerContainerFactoryResolver that will be used to resolve the appropriate KafkaListenerContainerFactory for a given topic.\n\tRetryTopicConfigurer retryTopicConfigurer(DestinationTopicProcessor destinationTopicProcessor, ListenerContainerFactoryConfigurer listenerContainerFactoryConfigurer, ListenerContainerFactoryResolver factoryResolver, RetryTopicNamesProviderFactory retryTopicNamesProviderFactory); // Create the RetryTopicConfigurer that will serve as an entry point for configuring non-blocking topic-based delayed retries for a given KafkaListenerEndpoint, by processing the appropriate RetryTopicConfiguration.\n\tRetryTopicNamesProviderFactory retryTopicNamesProviderFactory(); // Create the RetryTopicNamesProviderFactory instance that will be used to provide the property names for the retry topics' KafkaListenerEndpoint.\n}"}
{"index": 9880, "repo": "commons-math3-3.6.1", "des": "Class implementing Emo Welzl algorithm to find the smallest enclosing ball in linear time.", "code": "Class WelzlEncloser<S extends Space,P extends Point<S>> {\n\tEnclosingBall<S,P> enclose(Iterable<P> points); // Find a ball enclosing a list of points.\n\tP selectFarthest(Iterable<P> points, EnclosingBall<S,P> ball); // Select the point farthest to the current ball.\n}"}
{"index": 2275, "repo": "hive-exec-4.0.0-alpha-2", "des": "this class is responsible for giving various paths to be used during export along with root export directory creation.", "code": "Class TableExport.Paths {\n\torg.apache.hadoop.fs.Path dataExportRootDir(); // Access to the dataExportRootDir should only be done via this method since the creation of the directory is delayed until we figure out if we want to write something or not.\n\torg.apache.hadoop.fs.Path metadataExportRootDir(); // Access to the metadataExportRootDir should only be done via this method since the creation of the directory is delayed until we figure out if we want to write something or not.\n}"}
{"index": 9698, "repo": "commons-math3-3.6.1", "des": "Implements the Local Regression Algorithm (also Loess, Lowess) for interpolation of real univariate functions.", "code": "Class LoessInterpolator {\n\tPolynomialSplineFunction interpolate(double[] xval, double[] yval); // Compute an interpolating function by performing a loess fit on the data at the original abscissae and then building a cubic spline with a SplineInterpolator on the resulting fit.\n\tdouble[] smooth(double[] xval, double[] yval); // Compute a loess fit on the data at the original abscissae.\n\tdouble[] smooth(double[] xval, double[] yval, double[] weights); // Compute a weighted loess fit on the data at the original abscissae.\n}"}
{"index": 3533, "repo": "mahout-mr-0.13.0", "des": "Contains list of all internal paths used in top down clustering.", "code": "Class PathDirectory {\n\tstatic org.apache.hadoop.fs.Path getBottomLevelClusterPath(org.apache.hadoop.fs.Path output, String clusterId); // Each cluster produced by top level clustering is processed in output/\"bottomLevelCluster\"/clusterId.\n\tstatic org.apache.hadoop.fs.Path getClusterOutputClusteredPoints(org.apache.hadoop.fs.Path output); // The top level clustered points before post processing is generated here.\n\tstatic org.apache.hadoop.fs.Path getClusterPathForClusterId(org.apache.hadoop.fs.Path clusterPostProcessorOutput, String clusterId); // Each clusters path name is its clusterId.\n\tstatic org.apache.hadoop.fs.Path getClusterPostProcessorOutputDirectory(org.apache.hadoop.fs.Path outputPathProvidedByUser); // The output of top level clusters is post processed and kept in this path.\n\tstatic org.apache.hadoop.fs.Path getTopLevelClusterPath(org.apache.hadoop.fs.Path output); // All output of top level clustering is stored in output directory/topLevelCluster.\n}"}
{"index": 9857, "repo": "commons-math3-3.6.1", "des": "Implementation of the triangular real distribution.", "code": "Class TriangularDistribution {\n\tdouble cumulativeProbability(double x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble density(double x); // Returns the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tdouble getMode(); // Returns the mode c of this distribution.\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tprotected double getSolverAbsoluteAccuracy(); // Returns the solver absolute accuracy for inverse cumulative computation.\n\tdouble getSupportLowerBound(); // Access the lower bound of the support.\n\tdouble getSupportUpperBound(); // Access the upper bound of the support.\n\tdouble inverseCumulativeProbability(double p); // Computes the quantile function of this distribution.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tboolean isSupportLowerBoundInclusive(); // Whether or not the lower bound of support is in the domain of the density function.\n\tboolean isSupportUpperBoundInclusive(); // Whether or not the upper bound of support is in the domain of the density function.\n}"}
{"index": 12102, "repo": "jena-core-4.9.0", "des": "Provider: an implementation of a factory for IRIs.", "code": "public interface IRIProvider {\n\tvoid check(String iriStr); // Create an IRI, throw IRIException if the string does not conform to the grammar or violates additional rules of the provider.\n\tIRIx create(String iri); // Create an IRI, throw IRIException if the string does not conform to the grammar.\n\tboolean isStrictMode(String scheme);\n\tvoid strictMode(String scheme, boolean runStrict); // Run in strict mode - the exact definition of \"strict\" depends on the provider.\n}"}
{"index": 15854, "repo": "camel-api-4.0.0-RC1", "des": "Source for parameters used when creating routes from route templates.", "code": "public interface RouteTemplateParameterSource {\n\tMap<String,Object> parameters(String routeId); // The parameters for the given route\n\tSet<String> routeIds(); // Gets the route id's as a set.\n}"}
{"index": 10336, "repo": "spring-core-6.0.11", "des": "Extension of DataBuffer that allows for buffers that share a memory pool.", "code": "public interface PooledDataBuffer extends TouchableDataBuffer {\n\tboolean isAllocated(); // Return true if this buffer is allocated; false if it has been deallocated.\n\tboolean release(); // Decrease the reference count for this buffer by one, and deallocate it once the count reaches zero.\n\tPooledDataBuffer retain(); // Increase the reference count for this buffer by one.\n\tPooledDataBuffer touch(Object hint); // Associate the given hint with the data buffer for debugging purposes.\n}"}
{"index": 15013, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A representation of a client registration with an OAuth 2.0 Authorization Server.", "code": "public class RegisteredClient extends Object implements Serializable {\n\tboolean equals(Object obj);\n\tstatic RegisteredClient.Builder from(RegisteredClient registeredClient); // Returns a new RegisteredClient.Builder, initialized with the values from the provided RegisteredClient.\n\tSet<org.springframework.security.oauth2.core.AuthorizationGrantType> getAuthorizationGrantTypes(); // Returns the authorization grant type(s) that the client may use.\n\tSet<org.springframework.security.oauth2.core.ClientAuthenticationMethod> getClientAuthenticationMethods(); // Returns the authentication method(s) that the client may use.\n\tString getClientId(); // Returns the client identifier.\n\tInstant getClientIdIssuedAt(); // Returns the time at which the client identifier was issued.\n\tString getClientName(); // Returns the client name.\n\tString getClientSecret(); // Returns the client secret or null if not available.\n\tInstant getClientSecretExpiresAt(); // Returns the time at which the client secret expires or null if it does not expire.\n\tClientSettings getClientSettings(); // Returns the client configuration settings.\n\tString getId(); // Returns the identifier for the registration.\n\tSet<String> getPostLogoutRedirectUris(); // Returns the post logout redirect URI(s) that the client may use for logout.\n\tSet<String> getRedirectUris(); // Returns the redirect URI(s) that the client may use in redirect-based flows.\n\tSet<String> getScopes(); // Returns the scope(s) that the client may use.\n\tTokenSettings getTokenSettings(); // Returns the token configuration settings.\n\tstatic RegisteredClient.Builder withId(String id); // Returns a new RegisteredClient.Builder, initialized with the provided registration identifier.\n}"}
{"index": 5748, "repo": "freemarker-2.3.32", "des": "A TemplateLoader that uses a Map with String-s as its source of templates.", "code": "Class StringTemplateLoader {\n\tvoid closeTemplateSource(java.lang.Object templateSource); // Closes the template source, releasing any resources held that are only required for reading the template and/or its metadata.\n\tjava.lang.Object findTemplateSource(java.lang.String name); // Finds the template in the backing storage and returns an object that identifies the storage location where the template can be loaded from.\n\tlong getLastModified(java.lang.Object templateSource); // Returns the time of last modification of the specified template source.\n\tjava.io.Reader getReader(java.lang.Object templateSource, java.lang.String encoding); // Returns the character stream of a template represented by the specified template source.\n\tvoid putTemplate(java.lang.String name, java.lang.String templateContent); // Puts a template into the loader.\n\tvoid putTemplate(java.lang.String name, java.lang.String templateContent, long lastModified); // Puts a template into the loader.\n\tboolean removeTemplate(java.lang.String name); // Removes the template with the specified name if it was added earlier.\n}"}
{"index": 125, "repo": "commons-collections4-4.4", "des": "Decorates another Map returning a default value if the map does not contain the requested key.", "code": "Class DefaultedMap<K,V> {\n\tstatic <K,V> DefaultedMap<K,V> defaultedMap(Map<K,V> map, Factory<? extends V> factory); // Factory method to create a defaulting map.\n\tstatic <K,V> Map<K,V> defaultedMap(Map<K,V> map, Transformer<? super K,? extends V> transformer); // Factory method to create a defaulting map.\n\tstatic <K,V> DefaultedMap<K,V> defaultedMap(Map<K,V> map, V defaultValue); // Factory method to create a defaulting map.\n\tV get(Object key);\n}"}
{"index": 17372, "repo": "groovy-4.0.13", "des": "Default impl that returns parentName and childName accordingly.", "code": "public static class ObjectGraphBuilder.DefaultRelationNameResolver extends Object implements ObjectGraphBuilder.RelationNameResolver {\n\tString resolveChildRelationName(String parentName, Object parent, String childName, Object child); // Handles the common English regular plurals with the following rules.\n\tString resolveParentRelationName(String parentName, Object parent, String childName, Object child); // Follow the most conventional pattern, returns the parentName unchanged.\n}"}
{"index": 6311, "repo": "mina-core-3.0.0-M2", "des": "A convenient IoFilter implementation to be sub-classed for easier IoFilter implementation.", "code": "Class AbstractIoFilter {\n\tvoid messageReceived(IoSession session, Object message, ReadFilterChainController controller); // Invoked when a message is received.\n\tvoid messageSent(IoSession session, Object message); // Invoked when a high level message was written to the low level O/S buffer.\n\tvoid messageWriting(IoSession session, WriteRequest message, WriteFilterChainController controller); // Invoked when a message is under writing.\n\tvoid sessionClosed(IoSession session); // Invoked when a connection is closed.\n\tvoid sessionIdle(IoSession session, IdleStatus status); // Invoked with the related IdleStatus when a connection becomes idle.\n\tvoid sessionOpened(IoSession session); // Invoked when a connection has been opened.\n}"}
{"index": 10601, "repo": "groovy-all-4.0.13", "des": "Represents an immutable list of Numbers from a value to a value with a particular step size.", "code": "public class NumberRange extends AbstractList<Comparable> implements Range<Comparable>, Serializable {\n\t<T extends Number & Comparable>NumberRange by(T stepSize); // For a NumberRange with step size 1, creates a new NumberRange with the same from and to as this NumberRange but with a step size of stepSize.\n\tboolean contains(Object value); // iterates over all values and returns true if one value matches.\n\tboolean containsWithinBounds(Object value); // Checks whether a value is between the from and to values of a Range\n\tboolean equals(Object that); // An object is deemed equal to this NumberRange if it represents a List of items and those items equal the list of discrete items represented by this NumberRange.\n\tboolean fastEquals(NumberRange that); // Compares a NumberRange to another NumberRange using only a strict comparison of the NumberRange properties.\n\tComparable get(int index);\n\tComparable getFrom(); // The lower value in the range.\n\tComparable getStepSize();\n\tComparable getTo(); // The upper value in the range.\n\tString inspect();\n\tboolean isReverse(); // Indicates whether this is a reverse range which iterates backwards starting from the to value and ending on the from value\n\tIterator<Comparable> iterator();\n\tint size();\n\tList<Comparable> step(int numSteps); // Forms a list by stepping through the range by the indicated interval.\n\tvoid step(int numSteps, Closure closure); // Steps through the range, calling a closure for each item.\n\tList<Comparable> subList(int fromIndex, int toIndex);\n\tRangeInfo subListBorders(int size); // A method for determining from and to information when using this IntRange to index an aggregate object of the specified size.\n}"}
{"index": 18182, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "CollectionAliases which handles the logic of selecting user provided aliases (via return-property), before using the default aliases.", "code": "Class GeneratedCollectionAliases {\n\tjava.lang.String getSuffix(); // Returns the suffix used to unique the column aliases for this particular alias set.\n\tjava.lang.String[] getSuffixedElementAliases(); // Returns the suffixed result-set column-aliases for the columns making up the collection's elements.\n\tjava.lang.String getSuffixedIdentifierAlias(); // Returns the suffixed result-set column-aliases for the column defining the collection's identifier (if any).\n\tjava.lang.String[] getSuffixedIndexAliases(); // Returns the suffixed result-set column-aliases for the columns making up the collection's index (map or list).\n\tjava.lang.String[] getSuffixedKeyAliases(); // Returns the suffixed result-set column-aliases for columns making up the key for this collection (i.e., its FK to its owner).\n}"}
{"index": 2462, "repo": "exoplayer-r2.3.1", "des": "A helper class for performing atomic operations on a file by creating a backup file until a write has successfully completed.", "code": "Class AtomicFile {\n\tvoid delete(); // Delete the atomic file.\n\tvoid endWrite(java.io.OutputStream str); // Call when you have successfully finished writing to the stream returned by startWrite().\n\tjava.io.InputStream openRead(); // Open the atomic file for reading.\n\tjava.io.OutputStream startWrite(); // Start a new write operation on the file.\n}"}
{"index": 13014, "repo": "spring-aop-6.0.11", "des": "Abstract base regular expression pointcut bean.", "code": "public abstract class AbstractRegexpMethodPointcut extends StaticMethodMatcherPointcut implements Serializable {\n\tboolean equals(Object other);\n\tString[] getExcludedPatterns(); // Returns the regular expressions for exclusion matching.\n\tString[] getPatterns(); // Return the regular expressions for method matching.\n\tprotected abstract void initExcludedPatternRepresentation(String[] patterns); // Subclasses must implement this to initialize regexp pointcuts.\n\tprotected abstract void initPatternRepresentation(String[] patterns); // Subclasses must implement this to initialize regexp pointcuts.\n\tboolean matches(Method method, Class<?> targetClass); // Try to match the regular expression against the fully qualified name of the target class as well as against the method's declaring class, plus the name of the method.\n\tprotected abstract boolean matches(String pattern, int patternIndex); // Does the pattern at the given index match the given String?\n\tprotected abstract boolean matchesExclusion(String pattern, int patternIndex); // Does the exclusion pattern at the given index match the given String?\n\tprotected boolean matchesPattern(String signatureString); // Match the specified candidate against the configured patterns.\n\tvoid setExcludedPattern(String excludedPattern); // Convenience method when we have only a single exclusion pattern.\n\tvoid setExcludedPatterns(String... excludedPatterns); // Set the regular expressions defining methods to match for exclusion.\n\tvoid setPattern(String pattern); // Convenience method when we have only a single pattern.\n\tvoid setPatterns(String... patterns); // Set the regular expressions defining methods to match.\n}"}
{"index": 13424, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Configuration properties to configure SpringLiquibase.", "code": "@ConfigurationProperties(prefix=\"spring.liquibase\", ignoreUnknownFields=false) public class LiquibaseProperties extends Object {\n\tString getChangeLog();\n\tString getContexts();\n\tString getDatabaseChangeLogLockTable();\n\tString getDatabaseChangeLogTable();\n\tString getDefaultSchema();\n\tString getDriverClassName();\n\tString getLabelFilter();\n\tString getLabels(); // Deprecated, for removal: This API element is subject to removal in a future version.\n\tString getLiquibaseSchema();\n\tString getLiquibaseTablespace();\n\tMap<String,String> getParameters();\n\tString getPassword();\n\tFile getRollbackFile();\n\tString getTag();\n\tString getUrl();\n\tString getUser();\n\tboolean isClearChecksums();\n\tboolean isDropFirst();\n\tboolean isEnabled();\n\tboolean isTestRollbackOnUpdate();\n\tvoid setChangeLog(String changeLog);\n\tvoid setClearChecksums(boolean clearChecksums);\n\tvoid setContexts(String contexts);\n\tvoid setDatabaseChangeLogLockTable(String databaseChangeLogLockTable);\n\tvoid setDatabaseChangeLogTable(String databaseChangeLogTable);\n\tvoid setDefaultSchema(String defaultSchema);\n\tvoid setDriverClassName(String driverClassName);\n\tvoid setDropFirst(boolean dropFirst);\n\tvoid setEnabled(boolean enabled);\n\tvoid setLabelFilter(String labelFilter);\n\tvoid setLabels(String labels); // Deprecated, for removal: This API element is subject to removal in a future version.\n\tvoid setLiquibaseSchema(String liquibaseSchema);\n\tvoid setLiquibaseTablespace(String liquibaseTablespace);\n\tvoid setParameters(Map<String,String> parameters);\n\tvoid setPassword(String password);\n\tvoid setRollbackFile(File rollbackFile);\n\tvoid setTag(String tag);\n\tvoid setTestRollbackOnUpdate(boolean testRollbackOnUpdate);\n\tvoid setUrl(String url);\n\tvoid setUser(String user);\n}"}
{"index": 11037, "repo": "spring-shell-core-3.1.2", "des": "Interface to evaluate a result from a command with an arguments.", "code": "public interface CommandExecution {\n\tObject evaluate(String[] args); // Evaluate a command with a given arguments.\n\tstatic CommandExecution of(List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> resolvers); // Gets an instance of a default CommandExecution.\n\tstatic CommandExecution of(List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> resolvers, jakarta.validation.Validator validator, org.jline.terminal.Terminal terminal, org.springframework.core.convert.ConversionService conversionService); // Gets an instance of a default CommandExecution.\n\tstatic CommandExecution of(List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> resolvers, jakarta.validation.Validator validator, org.jline.terminal.Terminal terminal, org.springframework.core.convert.ConversionService conversionService, CommandCatalog commandCatalog); // Gets an instance of a default CommandExecution.\n}"}
{"index": 10639, "repo": "groovy-all-4.0.13", "des": "Originally was grails.utils.GrailsUtils, removed some grails specific stuff.", "code": "public class StackTraceUtils extends Object {\n\tstatic void addClassTest(Closure test); // Adds a groovy.lang.Closure to test whether the stack trace element should be added or not.\n\tstatic Throwable deepSanitize(Throwable t); // Sanitize the exception and ALL nested causes\n\tstatic Throwable extractRootCause(Throwable t); // Extracts the root cause of the exception, no matter how nested it is\n\tstatic boolean isApplicationClass(String className);\n\tstatic void printSanitizedStackTrace(Throwable t);\n\tstatic void printSanitizedStackTrace(Throwable t, PrintWriter p);\n\tstatic Throwable sanitize(Throwable t); // Remove all apparently groovy-internal trace entries from the exception instance\n\tstatic Throwable sanitizeRootCause(Throwable t); // Get the root cause of an exception and sanitize it for display to the user\n}"}
{"index": 5781, "repo": "hive-service-4.0.0-alpha-2", "des": "Methods that don't need to be executed under a doAs context are here.", "code": "Interface HiveSessionBase {\n\tlong getCreationTime();\n\tList<String> getForwardedAddresses();\n\tHiveConf getHiveConf();\n\tString getIpAddress();\n\tlong getLastAccessTime();\n\tint getOpenOperationCount();\n\tFile getOperationLogSessionDir(); // Get the session dir, which is the parent dir of operation logs\n\tString getPassword();\n\tTProtocolVersion getProtocolVersion();\n\tSessionHandle getSessionHandle();\n\tSessionManager getSessionManager(); // Get the session manager for the session\n\tSessionState getSessionState();\n\tString getUserName();\n\tboolean isOperationLogEnabled(); // Check whether operation logging is enabled and session dir is created successfully\n\tvoid setForwardedAddresses(List<String> forwardedAddresses);\n\tvoid setIpAddress(String ipAddress);\n\tvoid setOperationLogSessionDir(File operationLogRootDir); // Set the session dir, which is the parent dir of operation logs\n\tvoid setOperationManager(OperationManager operationManager); // Set operation manager for the session\n\tvoid setSessionManager(SessionManager sessionManager); // Set the session manager for the session\n\tvoid setUserName(String userName);\n}"}
{"index": 13526, "repo": "spring-messaging-6.0.11", "des": "Generic strategy interface for mapping MessageHeaders to and from other types of objects.", "code": "public interface HeaderMapper<T> {\n\tvoid fromHeaders(MessageHeaders headers, T target); // Map from the given MessageHeaders to the specified target message.\n\tMessageHeaders toHeaders(T source); // Map from the given target message to abstracted MessageHeaders.\n}"}
{"index": 9250, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Potential states that the docker status can return.", "code": "Enum DockerCommandExecutor.DockerContainerStatus {\n\tString getName();\n\tstatic DockerCommandExecutor.DockerContainerStatus valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DockerCommandExecutor.DockerContainerStatus[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18532, "repo": "hibernate-core-5.6.15.Final", "des": "Configuration for a specific type of data to be stored in the region", "code": "Interface DomainDataCachingConfig {\n\tAccessType getAccessType(); // The requested AccessType\n\tNavigableRole getNavigableRole(); // The NavigableRole of the thing to be cached\n\tboolean isMutable(); // Is the data marked as being mutable?\n\tboolean isVersioned(); // Is the data to be cached considered versioned?\n}"}
{"index": 16278, "repo": "spring-r2dbc-6.0.11", "des": "Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.create() calls to one of various target factories based on a lookup key.", "code": "public abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\treactor.core.publisher.Mono<Connection> create();\n\tprotected abstract reactor.core.publisher.Mono<Object> determineCurrentLookupKey(); // Determine the current lookup key.\n\tprotected reactor.core.publisher.Mono<ConnectionFactory> determineTargetConnectionFactory(); // Retrieve the current target ConnectionFactory.\n\tConnectionFactoryMetadata getMetadata();\n\tprotected ConnectionFactory resolveSpecifiedConnectionFactory(Object connectionFactory); // Resolve the specified connection factory object into a ConnectionFactory instance.\n\tprotected Object resolveSpecifiedLookupKey(Object lookupKey); // Resolve the given lookup key object, as specified in the targetConnectionFactories map, into the actual lookup key to be used for matching with the current lookup key.\n\tvoid setConnectionFactoryLookup(ConnectionFactoryLookup connectionFactoryLookup); // Set the ConnectionFactoryLookup implementation to use for resolving connection factory name Strings in the targetConnectionFactories map.\n\tvoid setDefaultTargetConnectionFactory(Object defaultTargetConnectionFactory); // Specify the default target ConnectionFactory, if any.\n\tvoid setLenientFallback(boolean lenientFallback); // Specify whether to apply a lenient fallback to the default ConnectionFactory if no specific ConnectionFactory could be found for the current lookup key.\n\tvoid setTargetConnectionFactories(Map<?,?> targetConnectionFactories); // Specify the map of target ConnectionFactories, with the lookup key as key.\n}"}
{"index": 11665, "repo": "spring-websocket-6.0.11", "des": "WebSocket connection manager that connects to the server via WebSocketClient and handles the session with a WebSocketHandler.", "code": "public class WebSocketConnectionManager extends ConnectionManagerSupport {\n\tprotected void closeConnection(); // Subclasses implement this to close the connection.\n\tprotected WebSocketHandler decorateWebSocketHandler(WebSocketHandler handler); // Decorate the WebSocketHandler provided to the class constructor.\n\torg.springframework.http.HttpHeaders getHeaders(); // Return the default headers for the WebSocket handshake request.\n\tString getOrigin(); // Return the configured origin.\n\tList<String> getSubProtocols(); // Return the configured sub-protocols to use.\n\tboolean isConnected(); // Whether the connection is open/true or closed/false.\n\tprotected void openConnection(); // Subclasses implement this to actually establish the connection.\n\tvoid setHeaders(org.springframework.http.HttpHeaders headers); // Provide default headers to add to the WebSocket handshake request.\n\tvoid setOrigin(String origin); // Set the origin to use.\n\tvoid setSubProtocols(List<String> protocols); // Set the sub-protocols to use.\n\tvoid startInternal();\n\tvoid stopInternal();\n}"}
{"index": 10952, "repo": "spring-data-redis-3.1.2", "des": "Configuration class used for setting up RedisConnection via RedisConnectionFactory using connecting to Redis Cluster.", "code": "public class RedisClusterConfiguration extends Object implements RedisConfiguration, RedisConfiguration.ClusterConfiguration {\n\tvoid addClusterNode(RedisNode node); // Add a cluster node to configuration.\n\tRedisClusterConfiguration clusterNode(String host, Integer port);\n\tRedisClusterConfiguration clusterNode(RedisNode node);\n\tboolean equals(Object o);\n\tSet<RedisNode> getClusterNodes(); // Returns an Collections.unmodifiableSet(Set) of cluster nodes.\n\tInteger getMaxRedirects();\n\tRedisPassword getPassword(); // Get the RedisPassword to use when connecting.\n\tString getUsername(); // Get the username to use when connecting.\n\tvoid setClusterNodes(Iterable<RedisNode> nodes); // Set cluster nodes to connect to.\n\tvoid setMaxRedirects(int maxRedirects);\n\tvoid setPassword(RedisPassword password); // Create and set a RedisPassword for given String.\n\tvoid setUsername(String username); // Create and set a username with the given String.\n}"}
{"index": 6492, "repo": "exoplayer-core-2.9.6", "des": "Manages multiple stream download and remove requests.", "code": "Class DownloadManager {\n\tvoid addListener(DownloadManager.Listener listener); // Adds a DownloadManager.Listener.\n\tDownloadManager.TaskState[] getAllTaskStates(); // Returns the states of all current tasks.\n\tint getDownloadCount(); // Returns the number of download tasks.\n\tint getTaskCount(); // Returns the number of tasks.\n\tDownloadManager.TaskState getTaskState(int taskId); // Returns the state of a task, or null if no such task exists\n\tint handleAction(byte[] actionData); // Deserializes an action from actionData, and calls handleAction(DownloadAction).\n\tint handleAction(DownloadAction action); // Handles the given action.\n\tboolean isIdle(); // Returns whether there are no active tasks.\n\tboolean isInitialized(); // Returns whether the manager has completed initialization.\n\tvoid release(); // Stops all of the tasks and releases resources.\n\tvoid removeListener(DownloadManager.Listener listener); // Removes a DownloadManager.Listener.\n\tvoid startDownloads(); // Starts the download tasks.\n\tvoid stopDownloads(); // Stops all of the download tasks.\n}"}
{"index": 2262, "repo": "hive-exec-4.0.0-alpha-2", "des": "Utilities related to serialization and deserialization.", "code": "Class SerializationUtilities {\n\tstatic void addKryoTypeHook(Class<?> clazz, SerializationUtilities.Hook hook); // Must be called before any serialization takes place (e.g.\n\tstatic com.esotericsoftware.kryo.Kryo borrowKryo(); // By default, kryo pool uses ConcurrentLinkedQueue which is unbounded.\n\tstatic com.esotericsoftware.kryo.Kryo borrowKryo(org.apache.hadoop.conf.Configuration configuration);\n\tstatic BaseWork cloneBaseWork(BaseWork plan); // Clones using the powers of XML.\n\tstatic List<Operator<?>> cloneOperatorTree(List<Operator<?>> roots); // Clones using the powers of XML.\n\tstatic MapredWork clonePlan(MapredWork plan); // Clones using the powers of XML.\n\tstatic com.esotericsoftware.kryo.Kryo createNewKryo();\n\tstatic ExprNodeGenericFuncDesc deserializeExpression(String s);\n\tstatic <T extends Serializable>T deserializeObject(String s, Class<T> clazz);\n\tstatic <T> T deserializeObjectWithTypeInformation(byte[] bytes, boolean isPartFilter); // Deserializes expression from Kryo.\n\tstatic <T> T deserializePlan(InputStream in, Class<T> planClass); // Deserializes the plan.\n\tstatic <T> T deserializePlan(com.esotericsoftware.kryo.Kryo kryo, InputStream in, Class<T> planClass);\n\tstatic void releaseKryo(com.esotericsoftware.kryo.Kryo kryo); // Release kryo instance back to the pool.\n\tstatic String serializeExpression(ExprNodeGenericFuncDesc expr);\n\tstatic String serializeObject(Serializable expr);\n\tstatic byte[] serializeObjectToKryo(Serializable object);\n\tstatic byte[] serializeObjectWithTypeInformation(Serializable object); // Serializes any object via Kryo.\n\tstatic void serializePlan(com.esotericsoftware.kryo.Kryo kryo, Object plan, OutputStream out);\n\tstatic void serializePlan(Object plan, OutputStream out); // Serializes the plan.\n\tstatic void setGlobalHook(SerializationUtilities.Hook hook); // Must be called before any serialization takes place (e.g.\n}"}
{"index": 1516, "repo": "pdfbox-3.0.0-beta1", "des": "This represents an embedded file in a file specification.", "code": "Class PDEmbeddedFile {\n\tString getCheckSum(); // Get the check sum of the embedded file.\n\tCalendar getCreationDate(); // Get the creation date of the embedded file.\n\tString getMacCreator(); // Get the mac Creator.\n\tString getMacResFork(); // Get the mac ResFork.\n\tString getMacSubtype(); // Get the mac subtype.\n\tCalendar getModDate(); // Get the mod date of the embedded file.\n\tint getSize(); // Get the size of the embedded file.\n\tString getSubtype(); // Get the subtype(mimetype) for the embedded file.\n\tvoid setCheckSum(String checksum); // Set the check sum.\n\tvoid setCreationDate(Calendar creation); // Set the creation date.\n\tvoid setMacCreator(String macCreator); // Set the mac Creator.\n\tvoid setMacResFork(String macResFork); // Set the mac ResFork.\n\tvoid setMacSubtype(String macSubtype); // Set the mac subtype.\n\tvoid setModDate(Calendar mod); // Set the mod date.\n\tvoid setSize(int size); // Set the size of the embedded file.\n\tvoid setSubtype(String mimeType); // Set the subtype for this embedded file.\n}"}
{"index": 11044, "repo": "spring-shell-core-3.1.2", "des": "Interface parsing arguments for a CommandRegistration.", "code": "public interface CommandParser {\n\tstatic CommandParser of(org.springframework.core.convert.ConversionService conversionService, Map<String,CommandRegistration> registrations, ParserConfig config); // Gets an instance of a default command parser.\n\tCommandParser.CommandParserResults parse(String[] args); // Parse options with a given arguments.\n}"}
{"index": 11472, "repo": "spring-restdocs-core-3.0.0", "des": "A PayloadSubsectionExtractor that extracts the subsection of the JSON payload identified by a field path.", "code": "public class FieldPathPayloadSubsectionExtractor extends Object implements PayloadSubsectionExtractor<FieldPathPayloadSubsectionExtractor> {\n\tbyte[] extractSubsection(byte[] payload, MediaType contentType); // Extracts a subsection of the given payload that has the given contentType.\n\tbyte[] extractSubsection(byte[] payload, MediaType contentType, List<FieldDescriptor> descriptors); // Extracts a subsection of the given payload that has the given contentType and that is described by the given descriptors.\n\tprotected String getFieldPath(); // Returns the path of the field that will be extracted.\n\tString getSubsectionId(); // Returns an identifier for the subsection that this extractor will extract.\n\tFieldPathPayloadSubsectionExtractor withSubsectionId(String subsectionId); // Returns an extractor with the given subsectionId.\n}"}
{"index": 5149, "repo": "druid-processing-26.0.0", "des": "Handles caching-related tasks for a particular query type.", "code": "Interface CacheStrategy<T,CacheType,QueryType extends Query<T>> {\n\tbyte[] computeCacheKey(QueryType query); // Computes the per-segment cache key for the given query.\n\tbyte[] computeResultLevelCacheKey(QueryType query); // Computes the result-level cache key for the given query.\n\tstatic void fetchAggregatorsFromCache(List<AggregatorFactory> aggregators, Iterator<Object> resultIter, boolean isResultLevelCache, CacheStrategy.AddToResultFunction addToResultFunction); // Helper function used by TopN, GroupBy, Timeseries queries in pullFromCache(boolean).\n\tcom.fasterxml.jackson.core.type.TypeReference<CacheType> getCacheObjectClazz(); // Returns the class type of what is used in the cache\n\tboolean isCacheable(QueryType query, boolean willMergeRunners); // Returns whether the given query is cacheable or not.\n\tcom.google.common.base.Function<T,CacheType> prepareForCache(boolean isResultLevelCache); // Returns a function that converts from the QueryType's result type to something cacheable.\n\tdefault com.google.common.base.Function<T,CacheType> prepareForSegmentLevelCache();\n\tcom.google.common.base.Function<CacheType,T> pullFromCache(boolean isResultLevelCache); // A function that does the inverse of the operation that the function prepareForCache returns\n\tdefault com.google.common.base.Function<CacheType,T> pullFromSegmentLevelCache();\n}"}
{"index": 3817, "repo": "hbase-client-3.0.0-alpha-4", "des": "Currently, there are only two compact types: NORMAL means do store files compaction; MOB means do mob files compaction.", "code": "Enum CompactType {\n\tstatic CompactType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CompactType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13407, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required to establish a connection to a Couchbase service.", "code": "public interface CouchbaseConnectionDetails extends ConnectionDetails {\n\tString getConnectionString(); // Connection string used to locate the Couchbase cluster.\n\tString getPassword(); // Cluster password.\n\tString getUsername(); // Cluster username.\n}"}
{"index": 6667, "repo": "artemis-odb-2.3.0", "des": "Process a subset of entities every x ticks.", "code": "Class IntervalIteratingSystem {\n\tprotected abstract void process(int entityId); // Process a entity this system is interested in.\n\tprotected void processSystem(); // Process the system.\n}"}
{"index": 4122, "repo": "camel-core-3.0.0-RC1", "des": "Allows an element to have an optional ID specified.", "code": "Class OptionalIdentifiedDefinition<T extends OptionalIdentifiedDefinition<T>> {\n\tT description(String text); // Sets the description of this node\n\tT description(String id, String text, String lang); // Sets the description of this node\n\tBoolean getCustomId();\n\tDescriptionDefinition getDescription();\n\tString getDescriptionText(); // Returns the description text or null if there is no description text associated with this node\n\tString getId();\n\torg.apache.camel.NamedNode getParent();\n\tboolean hasCustomIdAssigned(); // Returns whether a custom id has been assigned\n\tT id(String id); // Sets the id of this node\n\tString idOrCreate(org.apache.camel.spi.NodeIdFactory factory); // Gets the node id, creating one if not already set.\n\tvoid setCustomId(Boolean customId); // Whether the node id was explicit set, or was auto generated by Camel.\n\tvoid setDescription(DescriptionDefinition description); // Sets the description of this node\n\tvoid setId(String value); // Sets the id of this node\n}"}
{"index": 5490, "repo": "druid-processing-26.0.0", "des": "Common interface for vectorized column selectors, matchers, etc, where callers are given the ability to inspect current and maximum vector sizes.", "code": "Interface VectorSizeInspector {\n\tint getCurrentVectorSize(); // Returns the current vector size for this cursor.\n\tint getMaxVectorSize(); // Returns the maximum vector size for this cursor.\n}"}
{"index": 6948, "repo": "calcite-core-1.34.0", "des": "A relational expression which computes project expressions and also filters.", "code": "Class LogicalCalc {\n\tRelNode accept(RelShuttle shuttle); // Accepts a visit from a shuttle.\n\tvoid collectVariablesUsed(Set<CorrelationId> variableSet); // Collects variables known to be used by this expression or its descendants.\n\tLogicalCalc copy(RelTraitSet traitSet, RelNode child, RexProgram program); // Creates a copy of this Calc.\n\tstatic LogicalCalc create(RelNode input, RexProgram program);\n\tRelNode withHints(List<RelHint> hintList); // Returns a new relational expression with the specified hints hintList.\n}"}
{"index": 17808, "repo": "spring-web-6.0.11", "des": "A simple holder for the POJO to serialize via MappingJackson2HttpMessageConverter along with further serialization instructions to be passed in to the converter.", "code": "public class MappingJacksonValue extends Object {\n\tFilterProvider getFilters(); // Return the Jackson filter provider to use.\n\tClass<?> getSerializationView(); // Return the serialization view to use.\n\tObject getValue(); // Return the POJO that needs to be serialized.\n\tvoid setFilters(FilterProvider filters); // Set the Jackson filter provider to serialize the POJO with.\n\tvoid setSerializationView(Class<?> serializationView); // Set the serialization view to serialize the POJO with.\n\tvoid setValue(Object value); // Modify the POJO to serialize.\n}"}
{"index": 10527, "repo": "groovy-all-4.0.13", "des": "Specific script engine able to reload modified scripts as well as dealing properly with dependent scripts.", "code": "public class GroovyScriptEngine extends Object implements ResourceConnector {\n\tScript createScript(String scriptName, Binding binding); // Creates a Script with a given scriptName and binding.\n\tCompilerConfiguration getConfig();\n\tprotected long getCurrentTime();\n\tGroovyClassLoader getGroovyClassLoader(); // Returns the GroovyClassLoader associated with this script engine instance.\n\tClassLoader getParentClassLoader(); // Get the ClassLoader that will serve as the parent ClassLoader of the GroovyClassLoader in which scripts will be executed.\n\tURLConnection getResourceConnection(String resourceName); // Get a resource connection as a URLConnection to retrieve a script from the ResourceConnector.\n\tprotected boolean isSourceNewer(groovy.util.GroovyScriptEngine.ScriptCacheEntry entry);\n\tClass loadScriptByName(String scriptName); // Get the class of the scriptName in question, so that you can instantiate Groovy objects with caching and reloading.\n\tstatic void main(String[] urls); // Simple testing harness for the GSE.\n\tObject run(String scriptName, Binding binding); // Run a script identified by name with a given binding.\n\tString run(String scriptName, String argument); // Run a script identified by name with a single argument.\n\tvoid setConfig(CompilerConfiguration config); // sets a compiler configuration\n}"}
{"index": 7673, "repo": "cassandra-all-4.1.2", "des": "Stores the information relating to the liveness of the primary key columns of a row.", "code": "Class LivenessInfo {\n\tstatic LivenessInfo create(long timestamp, int nowInSec);\n\tstatic LivenessInfo create(long timestamp, int ttl, int nowInSec);\n\tint dataSize(); // The size of the (useful) data this liveness information contains.\n\tvoid digest(Digest digest); // Adds this liveness information to the provided digest.\n\tboolean equals(java.lang.Object other);\n\tstatic LivenessInfo expiring(long timestamp, int ttl, int nowInSec);\n\tboolean isEmpty(); // Whether this liveness info is empty (has no timestamp).\n\tprotected boolean isExpired();\n\tboolean isExpiring(); // Whether the info has a ttl.\n\tboolean isLive(int nowInSec); // Whether that info is still live.\n\tint localExpirationTime(); // The expiration time (in seconds) if the info is expiring (NO_EXPIRATION_TIME otherwise).\n\tboolean supersedes(LivenessInfo other); // Whether this liveness information supersedes another one (that is whether is has a greater timestamp than the other or not).\n\tlong timestamp(); // The timestamp for this liveness info.\n\tint ttl(); // The ttl (if any) on the row primary key columns or NO_TTL if it is not expiring.\n\tlong unsharedHeapSize();\n\tvoid validate(); // Validate the data contained by this liveness information.\n\tstatic LivenessInfo withExpirationTime(long timestamp, int ttl, int localExpirationTime);\n\tLivenessInfo withUpdatedTimestamp(long newTimestamp); // Returns a copy of this liveness info updated with the provided timestamp.\n\tLivenessInfo withUpdatedTimestampAndLocalDeletionTime(long newTimestamp, int newLocalDeletionTime);\n}"}
{"index": 9970, "repo": "commons-text-1.10.0", "des": "Abstract base class for all commands used to transform an objects sequence into another one.", "code": "Class EditCommand<T> {\n\tabstract void accept(CommandVisitor<T> visitor); // Accepts a visitor.\n\tprotected T getObject(); // Gets the object associated with this command.\n}"}
{"index": 3857, "repo": "hbase-client-3.0.0-alpha-4", "des": "Filter to support scan multiple row key ranges.", "code": "Class MultiRowRangeFilter {\n\tboolean equals(Object obj);\n\tboolean filterAllRemaining(); // Filters that never filter all remaining can inherit this implementation that never stops the filter early.\n\tFilter.ReturnCode filterCell(Cell ignored); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRowKey(Cell firstRowCell); // Filters a row based on the row key.\n\tCell getNextCellHint(Cell currentKV); // Filters that are not sure which key must be next seeked to, can inherit this implementation that, by default, returns a null Cell.\n\tList<MultiRowRangeFilter.RowRange> getRowRanges();\n\tstatic MultiRowRangeFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of MultiRowRangeFilter\n\tstatic List<MultiRowRangeFilter.RowRange> sortAndMerge(List<MultiRowRangeFilter.RowRange> ranges); // sort the ranges and if the ranges with overlap, then merge them.\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 6065, "repo": "jackson-databind-2.15.2", "des": "Helper class that contains functionality needed by both serialization and deserialization side.", "code": "Class BeanUtil {\n\tstatic String checkUnsupportedType(JavaType type); // Helper method called by BeanDeserializerFactory and BeanSerializerFactory to check if given unrecognized type (to be (de)serialized as general POJO) is one of \"well-known\" types for which there would be a datatype module; and if so, return appropriate failure message to give to caller.\n\tstatic Object getDefaultValue(JavaType type); // Accessor used to find out \"default value\" to use for comparing values to serialize, to determine whether to exclude value from serialization with inclusion type of JsonInclude.Include.NON_DEFAULT.\n\tprotected static boolean isCglibGetCallbacks(AnnotatedMethod am); // This method was added to address the need to weed out CGLib-injected \"getCallbacks\" method.\n\tprotected static boolean isGroovyMetaClassGetter(AnnotatedMethod am); // Another helper method to deal with Groovy's problematic metadata accessors\n\tstatic boolean isJava8TimeClass(Class<?> rawType);\n\tstatic boolean isJodaTimeClass(Class<?> rawType);\n\tprotected static String legacyManglePropertyName(String basename, int offset); // Method called to figure out name of the property, given corresponding suggested name based on a method or field name.\n\tstatic String stdManglePropertyName(String basename, int offset); // Note: public only since 2.11\n}"}
{"index": 3356, "repo": "hadoop-azure-3.3.6", "des": "Throttles Azure Blob File System read and write operations to achieve maximum throughput by minimizing errors.", "code": "Class AbfsClientThrottlingIntercept {\n\tvoid sendingRequest(AbfsRestOperationType operationType, AbfsCounters abfsCounters); // Called before the request is sent.\n\tvoid updateMetrics(AbfsRestOperationType operationType, AbfsHttpOperation abfsHttpOperation); // Updates the metrics for successful and failed read and write operations.\n}"}
{"index": 9453, "repo": "curator-recipes-5.5.0", "des": "Utility - a queue consumer that provides behavior similar to a BlockingQueue.", "code": "Class BlockingQueueConsumer<T> {\n\tvoid consumeMessage(T message); // Process a message from the queue\n\tint drainTo(Collection<? super T> c); // Removes all available elements from this queue and adds them to the given collection.\n\tList<T> getItems(); // Return any currently queued items without removing them from the queue\n\tint size(); // Returns the number of currently queue items\n\tvoid stateChanged(org.apache.curator.framework.CuratorFramework client, org.apache.curator.framework.state.ConnectionState newState);\n\tT take(); // Take the next item from the queue, blocking until there is an item available\n\tT take(int time, TimeUnit unit); // Take the next item from the queue, waiting up to the specified time for an available item.\n}"}
{"index": 18791, "repo": "lucene-core-9.7.0", "des": "Abstract API that produces terms, doc, freq, prox, offset and payloads postings.", "code": "Class FieldsProducer {\n\tabstract void checkIntegrity(); // Checks consistency of this reader.\n\tabstract void close();\n\tFieldsProducer getMergeInstance(); // Returns an instance optimized for merging.\n}"}
{"index": 3166, "repo": "commons-jexl3-3.3", "des": "A base for permission delegation allowing functional refinement.", "code": "Class JexlPermissions.Delegate {\n\tboolean allow(Class<?> clazz); // Checks whether a class allows JEXL introspection.\n\tboolean allow(Constructor<?> ctor); // Checks whether a constructor allows JEXL introspection.\n\tboolean allow(Field field); // Checks whether a field explicitly disallows JEXL introspection.\n\tboolean allow(Method method); // Checks whether a method allows JEXL introspection.\n\tboolean allow(Package pack); // Checks whether a package allows JEXL introspection.\n\tJexlPermissions compose(String... src); // Compose these permissions with a new set.\n}"}
{"index": 6180, "repo": "jackson-databind-2.15.2", "des": "A builder that creates PrivateMaxEntriesMap instances.", "code": "Class PrivateMaxEntriesMap.Builder<K,V> {\n\tPrivateMaxEntriesMap<K,V> build(); // Creates a new PrivateMaxEntriesMap instance.\n\tPrivateMaxEntriesMap.Builder<K,V> concurrencyLevel(int concurrencyLevel); // Specifies the estimated number of concurrently updating threads.\n\tPrivateMaxEntriesMap.Builder<K,V> initialCapacity(int initialCapacity); // Specifies the initial capacity of the hash table (default 16).\n\tPrivateMaxEntriesMap.Builder<K,V> maximumCapacity(long capacity); // Specifies the maximum capacity to coerce the map to and may exceed it temporarily.\n}"}
{"index": 8301, "repo": "spring-ws-3.0.10.RELEASE", "des": "Callback handler that validates a plain text or digest password using an Spring Security UserDetailsService.", "code": "Class SpringSecurityPasswordValidationCallbackHandler {\n\tvoid afterPropertiesSet();\n\tprotected void handleCleanup(CleanupCallback callback); // Invoked when a CleanupCallback is passed to AbstractCallbackHandler.handle(Callback[]).\n\tprotected void handleUsernameToken(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.USERNAME_TOKEN usage.\n\tprotected void handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback); // Invoked when a UsernameTokenPrincipalCallback is passed to AbstractCallbackHandler.handle(Callback[]).\n\tvoid setUserCache(org.springframework.security.core.userdetails.UserCache userCache); // Sets the users cache.\n\tvoid setUserDetailsService(org.springframework.security.core.userdetails.UserDetailsService userDetailsService); // Sets the Spring Security user details service.\n}"}
{"index": 2091, "repo": "hive-exec-4.0.0-alpha-2", "des": "UDF to determine the current authorizer (class name of the authorizer) This is intended for internal usage only.", "code": "Class GenericUDFCurrentAuthorizer {\n\tvoid copyToNewInstance(Object newInstance); // Some information may be set during initialize() which needs to be saved when the UDF is copied.\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 10114, "repo": "spring-hateoas-2.1.2", "des": "LinkRelationProvider inspecting ExposesResourceFor annotations on controller classes.", "code": "public class ControllerLinkRelationProvider extends Object implements LinkRelationProvider {\n\tLinkRelation getCollectionResourceRelFor(Class<?> resource); // Returns the relation type to be used to point to a collection resource of the given type.\n\tLinkRelation getItemResourceRelFor(Class<?> resource); // Returns the relation type to be used to point to an item resource of the given type.\n\tboolean supports(LinkRelationProvider.LookupContext context); // Callback method to manually select LinkRelationProvider implementations based on a given LinkRelationProvider.LookupContext.\n}"}
{"index": 1029, "repo": "ignite-core-2.15.0", "des": "Provides a custom format for communication messages.", "code": "Interface MessageFormatter {\n\tMessageReader reader(UUID rmtNodeId, MessageFactory msgFactory); // Creates new message reader instance.\n\tMessageWriter writer(UUID rmtNodeId); // Creates new message writer instance.\n}"}
{"index": 5947, "repo": "commons-lang3-3.12.0", "des": "Provides access to the available methods.", "code": "Class ComparableUtils.ComparableCheckBuilder<A extends Comparable<A>> {\n\tboolean between(A b, A c); // Checks if [b <= a <= c] or [b >= a >= c] where the a is object passed to ComparableUtils.is(A).\n\tboolean betweenExclusive(A b, A c); // Checks if (b < a < c) or (b > a > c) where the a is object passed to ComparableUtils.is(A).\n\tboolean equalTo(A b); // Checks if the object passed to ComparableUtils.is(A) is equal to b\n\tboolean greaterThan(A b); // Checks if the object passed to ComparableUtils.is(A) is greater than b\n\tboolean greaterThanOrEqualTo(A b); // Checks if the object passed to ComparableUtils.is(A) is greater than or equal to b\n\tboolean lessThan(A b); // Checks if the object passed to ComparableUtils.is(A) is less than b\n\tboolean lessThanOrEqualTo(A b); // Checks if the object passed to ComparableUtils.is(A) is less than or equal to b\n}"}
{"index": 15168, "repo": "spring-data-elasticsearch-5.1.2", "des": "class defining the settings for an index.", "code": "public class Settings extends DefaultStringObjectMap<Settings> {\n\tSettings flatten(); // flattens the nested structure (JSON fields index/foo/bar/: value) into a flat structure (index.foo.bar: value)\n\tObject get(Object key);\n\tvoid merge(Settings other); // Merges some other settings onto this one.\n\tstatic Settings parse(String json); // Creates a Settings object from the given JSON String\n}"}
{"index": 6466, "repo": "exoplayer-core-2.9.6", "des": "A DataSource for reading from a content URI.", "code": "Class ContentDataSource {\n\tvoid close(); // Closes the source.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to readLength bytes of data and stores them into buffer, starting at index offset.\n}"}
{"index": 9087, "repo": "hbase-server-3.0.0-alpha-4", "des": "Interface of all necessary to carry out a RPC method invocation on the server.", "code": "Interface RpcCall {\n\tvoid cleanup(); // Do the necessary cleanup after the call if needed.\n\tCellScanner getCellScanner(); // Returns The CellScanner that can carry input and result payload.\n\tlong getDeadline(); // Return the deadline of this call.\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.RequestHeader getHeader(); // Returns The request header of this call.\n\torg.apache.hbase.thirdparty.com.google.protobuf.Descriptors.MethodDescriptor getMethod(); // Returns The service method.\n\torg.apache.hbase.thirdparty.com.google.protobuf.Message getParam(); // Returns The call parameter message.\n\tint getPriority(); // Returns The Priority of this call.\n\tlong getReceiveTime(); // Returns The timestamp when the call is constructed.\n\tint getRemotePort(); // Returns Port of remote address in this call\n\torg.apache.hbase.thirdparty.com.google.protobuf.BlockingService getService(); // Returns The service of this call.\n\tlong getSize(); // Used to calculate the request call queue size.\n\tlong getStartTime(); // Returns The time when the call starts to be executed.\n\tint getTimeout(); // Returns The timeout of this call.\n\tvoid sendResponseIfReady(); // Send the response of this RPC call.\n\tvoid setResponse(org.apache.hbase.thirdparty.com.google.protobuf.Message param, CellScanner cells, Throwable errorThrowable, String error); // Set the response resulting from this RPC call.\n\tvoid setStartTime(long startTime); // Set the time when the call starts to be executed.\n\tString toShortString(); // Returns A short string format of this call without possibly lengthy params\n}"}
{"index": 2173, "repo": "hive-exec-4.0.0-alpha-2", "des": "Limit operator implementation Limits the number of rows to be passed on.", "code": "Class LimitOperator {\n\tstatic boolean checkLimitReached(org.apache.hadoop.mapred.JobConf jobConf);\n\tstatic boolean checkLimitReachedForVertex(org.apache.hadoop.mapred.JobConf jobConf, String vertexName);\n\tvoid closeOp(boolean abort); // Operator specific close routine.\n\tAtomicInteger getCurrentCount();\n\tstatic String getLimitReachedKey(org.apache.hadoop.conf.Configuration conf);\n\tString getName();\n\tstatic String getOperatorName();\n\tOperatorType getType(); // Return the type of the specific operator among the types in OperatorType.\n\tprotected void initializeOp(org.apache.hadoop.conf.Configuration hconf); // Operator specific initialization.\n\tprotected void onLimitReached();\n\tvoid process(Object row, int tag); // Process the row.\n}"}
{"index": 15475, "repo": "spring-batch-core-5.0.2", "des": "A convenient factory for creating a set of ApplicationContextFactory components from a set of resources.", "code": "public class ClasspathXmlApplicationContextsFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ApplicationContextFactory[]>, org.springframework.context.ApplicationContextAware {\n\tApplicationContextFactory[] getObject(); // Create an ApplicationContextFactory from each resource provided in setResources(Resource[]).\n\tClass<?> getObjectType(); // The type of object returned by this factory as an array of ApplicationContextFactory.\n\tboolean isSingleton(); // Optimization hint for bean factory.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext); // An application context that can be used as a parent context for all the factories.\n\tvoid setBeanFactoryPostProcessorClasses(Class<? extends org.springframework.beans.factory.config.BeanFactoryPostProcessor>[] beanFactoryPostProcessorClasses); // Determines which bean factory post processors (such as property placeholders) should be copied from the parent context.\n\tvoid setBeanPostProcessorExcludeClasses(Class<?>[] beanPostProcessorExcludeClasses); // Determines, by exclusion, which bean post processors should be copied from the parent context.\n\tvoid setCopyConfiguration(boolean copyConfiguration); // Flag to indicate that configuration, such as bean post processors and custom editors, should be copied from the parent context.\n\tvoid setResources(org.springframework.core.io.Resource[] resources); // A set of resources to load by using a GenericApplicationContextFactory.\n}"}
{"index": 17, "repo": "connect-api-3.5.0", "des": "Provides the current status for a connector or a task, along with an identifier for its Connect worker.", "code": "Class AbstractState {\n\tboolean equals(Object o);\n\tString state(); // Provides the current state of the connector or task.\n\tString traceMessage(); // The error message associated with the connector or task.\n\tString workerId(); // The identifier of the worker associated with the connector or the task.\n}"}
{"index": 9284, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Handler interface for resource subsystems' isolation and enforcement.", "code": "Interface ResourceHandler {\n\tList<PrivilegedOperation> bootstrap(org.apache.hadoop.conf.Configuration configuration); // Bootstrap resource susbsystem.\n\tList<PrivilegedOperation> postComplete(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Perform any tasks necessary after container completion.\n\tList<PrivilegedOperation> preStart(Container container); // Prepare a resource environment for container launch\n\tList<PrivilegedOperation> reacquireContainer(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Require state for container that was already launched\n\tList<PrivilegedOperation> teardown(); // Teardown environment for resource subsystem if requested.\n\tList<PrivilegedOperation> updateContainer(Container container); // Update state for container that was already launched\n}"}
{"index": 8745, "repo": "hadoop-yarn-common-3.3.6", "des": "This class contains several utility function which could be used in different log tools.", "code": "Class LogToolUtils {\n\tstatic PrintStream createPrintStream(String localDir, String nodeId, String containerId); // Create the container log file under given (local directory/nodeId) and return the PrintStream object.\n\tstatic com.sun.jersey.api.client.ClientResponse getResponseFromNMWebService(org.apache.hadoop.conf.Configuration conf, com.sun.jersey.api.client.Client webServiceClient, ContainerLogsRequest request, String logFile); // Redirect the ContainerLogsRequest to the NodeManager's NMWebServices.\n\tstatic void outputContainerLog(String containerId, String nodeId, String fileName, long fileLength, long outputSize, String lastModifiedTime, InputStream fis, OutputStream os, byte[] buf, ContainerLogAggregationType logType); // Output container log.\n\tstatic void outputContainerLogThroughZeroCopy(String containerId, String nodeId, String fileName, long fileLength, long outputSize, String lastModifiedTime, FileInputStream fis, OutputStream os, ContainerLogAggregationType logType);\n}"}
{"index": 328, "repo": "phoenix-core-5.1.3", "des": "Server side Aggregator which will aggregate data and find distinct values with number of occurrences for each.", "code": "Class DistinctValueWithCountServerAggregator {\n\tvoid aggregate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Incrementally aggregate the value with the current row\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tint getSize(); // Get the size in bytes\n\tboolean isNullable();\n\tvoid reset(); // Resets the state of a expression back to its initial state and enables the expession to be evaluated incrementally (which occurs during filter evaluation where we see one key value at a time; it's possible to evaluate immediately rather than wait until all key values have been seen).\n\tboolean trackSize(); // Determines whether or not we should track the heap size as this aggregator is executing on the server side.\n}"}
{"index": 5842, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Classes implementing this interface are used in the LogServlet for providing various application related information.", "code": "Interface AppInfoProvider {\n\torg.apache.hadoop.yarn.server.webapp.BasicAppInfo getApp(javax.servlet.http.HttpServletRequest req, String appId, String clusterId); // Returns BasicAppInfo object that wraps the collected information about the application.\n\tString getNodeHttpAddress(javax.servlet.http.HttpServletRequest req, String appId, String appAttemptId, String containerId, String clusterId); // Returns the node HTTP address.\n}"}
{"index": 9283, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Defines the contract to be implemented by the request intercepter classes, that can be used to intercept and inspect messages sent from the application master to the resource manager.", "code": "Interface RequestInterceptor {\n\tAMRMProxyApplicationContext getApplicationContext(); // Returns the context.\n\tRequestInterceptor getNextInterceptor(); // Returns the next intercepter in the chain.\n\tvoid init(AMRMProxyApplicationContext ctx); // This method is called for initializing the intercepter.\n\tvoid recover(Map<String,byte[]> recoveredDataMap); // Recover intercepter state when NM recovery is enabled.\n\tvoid setNextInterceptor(RequestInterceptor nextInterceptor); // Sets the next intercepter in the pipeline.\n\tvoid shutdown(); // This method is called to release the resources held by the intercepter.\n}"}
{"index": 15233, "repo": "spring-boot-3.1.1", "des": "Strategy class that can be used to load ConfigData for a given ConfigDataResource.", "code": "public interface ConfigDataLoader<R extends ConfigDataResource> {\n\tdefault boolean isLoadable(ConfigDataLoaderContext context, R resource); // Returns if the specified resource can be loaded by this instance.\n\tConfigData load(ConfigDataLoaderContext context, R resource); // Load ConfigData for the given resource.\n}"}
{"index": 4573, "repo": "beam-sdks-java-core-2.49.0", "des": "The result of a single invocation of a Watch.", "code": "Class Watch.Growth.PollResult<OutputT> {\n\tstatic <OutputT> Watch.Growth.PollResult<OutputT> complete(org.joda.time.Instant timestamp, java.util.List<OutputT> outputs); // Like complete(List), but assigns the same timestamp to all new outputs.\n\tstatic <OutputT> Watch.Growth.PollResult<OutputT> complete(java.util.List<TimestampedValue<OutputT>> outputs); // Constructs a Watch.Growth.PollResult with the given outputs and declares that there will be no new outputs for the current input.\n\tboolean equals(@Nullable java.lang.Object o);\n\tstatic <OutputT> Watch.Growth.PollResult<OutputT> incomplete(org.joda.time.Instant timestamp, java.util.List<OutputT> outputs); // Like incomplete(List), but assigns the same timestamp to all new outputs.\n\tstatic <OutputT> Watch.Growth.PollResult<OutputT> incomplete(java.util.List<TimestampedValue<OutputT>> outputs); // Constructs a Watch.Growth.PollResult with the given outputs and declares that new outputs might appear for the current input.\n\tWatch.Growth.PollResult<OutputT> withOutputs(java.util.List<TimestampedValue<OutputT>> outputs); // Returns a new Watch.Growth.PollResult like this one with the provided outputs.\n\tWatch.Growth.PollResult<OutputT> withWatermark(org.joda.time.Instant watermark); // Returns a new Watch.Growth.PollResult like this one with the provided watermark.\n}"}
{"index": 15006, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A HttpMessageConverter for an OpenID Provider Configuration Response.", "code": "public class OidcProviderConfigurationHttpMessageConverter extends org.springframework.http.converter.AbstractHttpMessageConverter<OidcProviderConfiguration> {\n\tprotected OidcProviderConfiguration readInternal(Class<? extends OidcProviderConfiguration> clazz, org.springframework.http.HttpInputMessage inputMessage);\n\tfinal void setProviderConfigurationConverter(org.springframework.core.convert.converter.Converter<Map<String,Object>,OidcProviderConfiguration> providerConfigurationConverter); // Sets the Converter used for converting the OpenID Provider Configuration parameters to an OidcProviderConfiguration.\n\tfinal void setProviderConfigurationParametersConverter(org.springframework.core.convert.converter.Converter<OidcProviderConfiguration,Map<String,Object>> providerConfigurationParametersConverter); // Sets the Converter used for converting the OidcProviderConfiguration to a Map representation of the OpenID Provider Configuration.\n\tprotected boolean supports(Class<?> clazz);\n\tprotected void writeInternal(OidcProviderConfiguration providerConfiguration, org.springframework.http.HttpOutputMessage outputMessage);\n}"}
{"index": 13901, "repo": "spring-webflux-6.0.11", "des": "Spring WebSocketSession implementation that adapts to a Jetty WebSocket Session.", "code": "public class JettyWebSocketSession extends AbstractListenerWebSocketSession<org.eclipse.jetty.websocket.api.Session> {\n\tprotected boolean canSuspendReceiving(); // Whether the underlying WebSocket API has flow control and can suspend and resume the receiving of messages.\n\treactor.core.publisher.Mono<Void> close(CloseStatus status); // Close the WebSocket session with the given status.\n\tboolean isOpen(); // Whether the underlying connection is open.\n\tprotected void resumeReceiving(); // Resume receiving new message(s) after demand is generated by the downstream Subscriber.\n\tprotected boolean sendMessage(WebSocketMessage message); // Send the given WebSocket message.\n\tprotected void suspendReceiving(); // Suspend receiving until received message(s) are processed and more demand is generated by the downstream Subscriber.\n}"}
{"index": 9143, "repo": "hbase-server-3.0.0-alpha-4", "des": "Simple implementation of TableIntegrityErrorHandler.", "code": "Class TableIntegrityErrorHandlerImpl {\n\tHbckTableInfo getTableInfo();\n\tvoid handleDegenerateRegion(HbckRegionInfo hi); // Callback for handling a region that has the same start and end key.\n\tvoid handleDuplicateStartKeys(HbckRegionInfo hi1, HbckRegionInfo hi2); // Callback for handling two regions that have the same start key.\n\tvoid handleHoleInRegionChain(byte[] holeStart, byte[] holeEnd); // Callback for handling a region hole between two keys.\n\tvoid handleOverlapGroup(Collection<HbckRegionInfo> overlap); // Callback for handling an group of regions that overlap.\n\tvoid handleOverlapInRegionChain(HbckRegionInfo hi1, HbckRegionInfo hi2); // Callback for handling two reigons that overlap in some arbitrary way.\n\tvoid handleRegionEndKeyNotEmpty(byte[] curEndKey); // Callback for handling case where a Table has a last region that does not have an empty end key.\n\tvoid handleRegionStartKeyNotEmpty(HbckRegionInfo hi); // Callback for handling case where a Table has a first region that does not have an empty start key.\n\tvoid setTableInfo(HbckTableInfo ti2); // Set the TableInfo used by all HRegionInfos fabricated by other callbacks\n}"}
{"index": 13514, "repo": "spring-messaging-6.0.11", "des": "A SubscribableChannel that sends messages to each of its subscribers.", "code": "public class ExecutorSubscribableChannel extends AbstractSubscribableChannel {\n\tvoid addInterceptor(int index, ChannelInterceptor interceptor); // Add a channel interceptor at the specified index.\n\tvoid addInterceptor(ChannelInterceptor interceptor); // Add a channel interceptor to the end of the list.\n\tExecutor getExecutor();\n\tboolean sendInternal(Message<?> message, long timeout);\n\tvoid setInterceptors(List<ChannelInterceptor> interceptors); // Set the list of channel interceptors clearing any existing interceptors.\n}"}
{"index": 17829, "repo": "spring-web-6.0.11", "des": "HttpMessageReader for reading \"multipart/form-data\" requests into a MultiValueMap<String, Part>.", "code": "public class MultipartHttpMessageReader extends LoggingCodecSupport implements HttpMessageReader<org.springframework.util.MultiValueMap<String,Part>> {\n\tboolean canRead(org.springframework.core.ResolvableType elementType, MediaType mediaType); // Whether the given object type is supported by this reader.\n\tHttpMessageReader<Part> getPartReader(); // Return the configured parts reader.\n\tList<MediaType> getReadableMediaTypes(); // Return the list of media types supported by this reader.\n\treactor.core.publisher.Flux<org.springframework.util.MultiValueMap<String,Part>> read(org.springframework.core.ResolvableType elementType, ReactiveHttpInputMessage message, Map<String,Object> hints); // Read from the input message and decode to a stream of objects.\n\treactor.core.publisher.Mono<org.springframework.util.MultiValueMap<String,Part>> readMono(org.springframework.core.ResolvableType elementType, ReactiveHttpInputMessage inputMessage, Map<String,Object> hints); // Read from the input message and decode to a single object.\n}"}
{"index": 9956, "repo": "iceberg-api-1.3.0", "des": "Generalized Timer interface for creating telemetry related instances for measuring duration of operations.", "code": "Interface Timer {\n\tlong count(); // The number of times time(Duration) was called.\n\tdefault boolean isNoop(); // Determines whether this timer is a NOOP timer.\n\tvoid record(long amount, java.util.concurrent.TimeUnit unit); // Records a custom amount in the given time unit.\n\tTimer.Timed start(); // Starts the timer and returns a Timer.Timed instance.\n\tdefault void time(java.time.Duration duration); // The duration to record\n\tvoid time(java.lang.Runnable runnable); // Executes and measures the given Runnable instance.\n\t<T> T time(java.util.function.Supplier<T> supplier); // Gets the result from the given Supplier and measures its execution time.\n\t<T> T timeCallable(java.util.concurrent.Callable<T> callable); // Executes and measures the given Callable and returns its result.\n\tjava.time.Duration totalDuration(); // The total duration that was recorded.\n\tdefault java.util.concurrent.TimeUnit unit(); // The TimeUnit of the timer.\n}"}
{"index": 9626, "repo": "commons-math3-3.6.1", "des": "Container for time, main and secondary state vectors.", "code": "Class FieldODEState<T extends RealFieldElement<T>> {\n\tprotected T[][] copy(Field<T> field, T[][] original); // Copy a two-dimensions array.\n\tint getNumberOfSecondaryStates(); // Get the number of secondary states.\n\tT[] getSecondaryState(int index); // Get secondary state at time.\n\tint getSecondaryStateDimension(int index); // Get secondary state dimension.\n\tT[] getState(); // Get main state at time.\n\tint getStateDimension(); // Get main state dimension.\n\tT getTime(); // Get time.\n}"}
{"index": 482, "repo": "ignite-core-2.15.0", "des": "Basic class for SystemViewExporterSpi implementations.", "code": "Class AbstractSystemViewExporterSpi {\n\tvoid setExportFilter(Predicate<SystemView<?>> filter); // Sets export filter.\n\tvoid setSystemViewRegistry(ReadOnlySystemViewRegistry mlreg); // Sets system view registry that SPI should export.\n\tvoid spiStart(@Nullable String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 636, "repo": "ignite-core-2.15.0", "des": "A dialect compatible with the IBM DB2 database.", "code": "Class DB2Dialect {\n\tboolean hasMerge();\n\tString loadCacheSelectRangeQuery(String fullTblName, Collection<String> keyCols); // Construct query to get ranges bounds.\n\tString mergeQuery(String fullTblName, Collection<String> keyCols, Collection<String> uniqCols); // Construct merge query.\n}"}
{"index": 18575, "repo": "hibernate-core-5.6.15.Final", "des": "Describes the context in which the process of building Metadata out of MetadataSources occurs.", "code": "Interface MetadataBuildingContext {\n\tBootstrapContext getBootstrapContext();\n\tMetadataBuildingOptions getBuildingOptions(); // Access to the options specified by the MetadataBuilder\n\tClassLoaderAccess getClassLoaderAccess(); // Deprecated. Use BootstrapContext.getClassLoaderAccess()} instead.\n\tMappingDefaults getMappingDefaults(); // Access to mapping defaults in effect for this context\n\tInFlightMetadataCollector getMetadataCollector(); // Access to the collector of metadata as we build it.\n\tObjectNameNormalizer getObjectNameNormalizer(); // Not sure how I feel about this exposed here\n}"}
{"index": 14652, "repo": "spring-data-commons-3.1.2", "des": "Base class for query creators that create criteria based queries from a PartTree.", "code": "public abstract class AbstractQueryCreator<T,S> extends Object {\n\tprotected abstract S and(Part part, S base, Iterator<Object> iterator); // Creates a new criteria object from the given part and and-concatenates it to the given base criteria.\n\tprotected abstract T complete(S criteria, Sort sort); // Actually creates the query object applying the given criteria object and Sort definition.\n\tprotected abstract S create(Part part, Iterator<Object> iterator); // Creates a new atomic instance of the criteria object.\n\tT createQuery(); // Creates the actual query object.\n\tT createQuery(Sort dynamicSort); // Creates the actual query object applying the given Sort parameter.\n\tprotected abstract S or(S base, S criteria); // Or-concatenates the given base criteria to the given new criteria.\n}"}
{"index": 8213, "repo": "spring-ws-3.0.10.RELEASE", "des": "WebServiceMessageSender implementation that uses JMS Messages.", "code": "Class JmsMessageSender {\n\tWebServiceConnection createConnection(URI uri); // Create a new WebServiceConnection to the specified URI.\n\tvoid setPostProcessor(org.springframework.jms.core.MessagePostProcessor postProcessor); // Sets the optional MessagePostProcessor to further modify outgoing messages after the XML contents has been set.\n\tvoid setReceiveTimeout(long receiveTimeout); // Set the timeout to use for receive calls.\n\tvoid setTextMessageEncoding(String textMessageEncoding); // Sets the encoding used to read from TextMessage messages.\n\tboolean supports(URI uri); // Does this WebServiceMessageSender support the supplied URI?\n}"}
{"index": 6243, "repo": "jackson-databind-2.15.2", "des": "Specialized JsonSerializer to output UUIDs.", "code": "Class UUIDSerializer {\n\tprotected boolean _writeAsBinary(JsonGenerator g);\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tJsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property); // Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property.\n\tboolean isEmpty(SerializerProvider prov, UUID value); // Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values).\n\tvoid serialize(UUID value, JsonGenerator gen, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n}"}
{"index": 2345, "repo": "commons-geometry-euclidean-1.0", "des": "Defines different types of rotation axis sequences.", "code": "Enum AxisSequenceType {\n\tstatic AxisSequenceType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AxisSequenceType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 15889, "repo": "camel-api-4.0.0-RC1", "des": "Transformer performs message transformation according to the declared data type.", "code": "public abstract class Transformer extends ServiceSupport implements CamelContextAware {\n\tprotected void doStart(); // Implementations override this method to support customized start/stop.\n\tprotected void doStop(); // Implementations override this method to support customized start/stop.\n\tCamelContext getCamelContext(); // Get the CamelContext\n\tDataType getFrom(); // Get 'from' data type.\n\tString getModel(); // Get a data model which is supported by this transformer.\n\tDataType getTo(); // Get 'to' data type.\n\tvoid setCamelContext(CamelContext context); // Injects the CamelContext\n\tTransformer setFrom(String from); // Set 'from' data type.\n\tTransformer setModel(String model); // Set data model.\n\tTransformer setTo(String to); // Set 'to' data type.\n\tabstract void transform(Message message, DataType from, DataType to); // Perform data transformation with specified from/to type.\n}"}
{"index": 9657, "repo": "commons-math3-3.6.1", "des": "Parametric function where the input array contains the parameters of the harmonic oscillator function, ordered as follows: Amplitude Angular frequency Phase .", "code": "Class HarmonicOscillator.Parametric {\n\tdouble[] gradient(double x, double... param); // Computes the value of the gradient at x.\n\tdouble value(double x, double... param); // Computes the value of the harmonic oscillator at x.\n}"}
{"index": 409, "repo": "phoenix-core-5.1.3", "des": "Interface to encapsulate both the client-side name together with the server-side name for a named object.", "code": "Interface PName {\n\tbyte[] getBytes(); // Get the server-side name as referenced in HBase-related APIs such as Scan, Filter, etc.\n\tImmutableBytesPtr getBytesPtr();\n\tint getEstimatedSize();\n\tString getString(); // Get the client-side, normalized name as referenced in a SQL statement.\n}"}
{"index": 17057, "repo": "spring-integration-core-6.1.2", "des": "Default implementation of LeaderEventPublisher.", "code": "public class DefaultLeaderEventPublisher extends Object implements LeaderEventPublisher, org.springframework.context.ApplicationEventPublisherAware {\n\tvoid publishOnFailedToAcquire(Object source, Context context, String role); // Publish a failure to acquire event.\n\tvoid publishOnGranted(Object source, Context context, String role); // Publish a granted event.\n\tvoid publishOnRevoked(Object source, Context context, String role); // Publish a revoked event.\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n}"}
{"index": 281, "repo": "hadoop-yarn-client-3.3.6", "des": "This class provides Application History client implementation which uses ATS v2 as backend.", "code": "Class AHSv2ClientImpl {\n\torg.apache.hadoop.yarn.api.records.ApplicationAttemptReport getApplicationAttemptReport(org.apache.hadoop.yarn.api.records.ApplicationAttemptId applicationAttemptId); // Get a report of the given ApplicationAttempt.\n\tList<org.apache.hadoop.yarn.api.records.ApplicationAttemptReport> getApplicationAttempts(org.apache.hadoop.yarn.api.records.ApplicationId applicationId); // Get a report of all (ApplicationAttempts) of Application in the cluster.\n\torg.apache.hadoop.yarn.api.records.ApplicationReport getApplicationReport(org.apache.hadoop.yarn.api.records.ApplicationId appId); // Get a report of the given Application.\n\tList<org.apache.hadoop.yarn.api.records.ApplicationReport> getApplications(); // Get a report (ApplicationReport) of all Applications in the cluster.\n\torg.apache.hadoop.yarn.api.records.ContainerReport getContainerReport(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Get a report of the given Container.\n\tList<org.apache.hadoop.yarn.api.records.ContainerReport> getContainers(org.apache.hadoop.yarn.api.records.ApplicationAttemptId applicationAttemptId); // Get a report of all (Containers) of ApplicationAttempt in the cluster.\n\tvoid serviceInit(org.apache.hadoop.conf.Configuration conf);\n\tvoid serviceStart();\n\tvoid serviceStop();\n\tprotected void setReaderClient(org.apache.hadoop.yarn.client.api.TimelineReaderClient readerClient);\n}"}
{"index": 10862, "repo": "spring-data-redis-3.1.2", "des": "Value object representing a path within a Bucket.", "code": "public static class Bucket.BucketPropertyPath extends Object {\n\tstatic Bucket.BucketPropertyPath from(Bucket bucket); // Creates a top-level Bucket.BucketPropertyPath given Bucket.\n\tstatic Bucket.BucketPropertyPath from(Bucket bucket, String prefix); // Creates a Bucket.BucketPropertyPath given Bucket and prefix.\n\tbyte[] get(String key); // Retrieve a value at key considering top-level/nesting.\n\tBucket getBucket();\n\tString getPrefix();\n\tvoid put(String key, byte[] value); // Write a value at key considering top-level/nesting.\n}"}
{"index": 17430, "repo": "groovy-4.0.13", "des": "Records declared and referenced variables for a given scope.", "code": "public class VariableScope extends Object {\n\tVariableScope copy();\n\tClassNode getClassScope(); // Non-null iff this scope corresponds to a class; as opposed to a method, \"if\" statement, block statement, etc.\n\tVariable getDeclaredVariable(String name);\n\tMap<String,Variable> getDeclaredVariables(); // Gets a map containing the variables declared in this scope.\n\tIterator<Variable> getDeclaredVariablesIterator(); // Gets an iterator for the declared class variables.\n\tVariableScope getParent();\n\tVariable getReferencedClassVariable(String name);\n\tMap<String,Variable> getReferencedClassVariables(); // Gets a map containing the class variables referenced by this scope.\n\tIterator<Variable> getReferencedClassVariablesIterator(); // Gets an iterator for the referenced class variables.\n\tVariable getReferencedLocalVariable(String name);\n\tint getReferencedLocalVariablesCount();\n\tIterator<Variable> getReferencedLocalVariablesIterator(); // Gets an iterator for the referenced local variables.\n\tboolean isClassScope(); // Returns true iff this scope corresponds to a class; as opposed to a method, \"if\" statement, block statement, etc.\n\tboolean isInStaticContext();\n\tboolean isReferencedClassVariable(String name);\n\tboolean isReferencedLocalVariable(String name);\n\tboolean isRoot();\n\tvoid putDeclaredVariable(Variable var);\n\tvoid putReferencedClassVariable(Variable var);\n\tvoid putReferencedLocalVariable(Variable var);\n\tObject removeReferencedClassVariable(String name);\n\tvoid setClassScope(ClassNode classScope);\n\tvoid setInStaticContext(boolean inStaticContext);\n}"}
{"index": 6294, "repo": "commons-codec-1.16.0", "des": "GNU libc crypt(3) compatible hash method.", "code": "Class Crypt {\n\tstatic String crypt(byte[] keyBytes); // Encrypts a password in a crypt(3) compatible way.\n\tstatic String crypt(byte[] keyBytes, String salt); // Encrypts a password in a crypt(3) compatible way.\n\tstatic String crypt(String key); // Calculates the digest using the strongest crypt(3) algorithm.\n\tstatic String crypt(String key, String salt); // Encrypts a password in a crypt(3) compatible way.\n}"}
{"index": 17047, "repo": "spring-integration-core-6.1.2", "des": "Transformer that accepts a Message whose payload is a UUID and retrieves the Message associated with that id from a MessageStore if available.", "code": "public class ClaimCheckOutTransformer extends AbstractTransformer implements IntegrationPattern {\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to provide the transformation logic.\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tvoid setRemoveMessage(boolean removeMessage);\n}"}
{"index": 2996, "repo": "tink-1.10.0", "des": "This key manager generates new HmacPrfKey keys and produces new instances of PrfHmacJce.", "code": "Class HmacPrfKeyManager {\n\tTinkFipsUtil.AlgorithmFipsCompatibility fipsStatus(); // Returns the FIPS compatibility of this KeyTypeManager.\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tstatic KeyTemplate hmacSha256Template(); // Returns a KeyTemplate that generates new instances of HMAC keys with the following parameters: Key size: 32 bytes Hash function: SHA256 Prefix type: KeyTemplate.OutputPrefixType#RAW\n\tstatic KeyTemplate hmacSha512Template(); // Returns a KeyTemplate that generates new instances of HMAC keys with the following parameters: Key size: 64 bytes Hash function: SHA512 Prefix type: KeyTemplate.OutputPrefixType#RAW\n\tKeyTypeManager.KeyFactory<HmacPrfKeyFormat,HmacPrfKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tHmacPrfKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(HmacPrfKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 17188, "repo": "spring-integration-core-6.1.2", "des": "Standard implementation of IntegrationFlowContext.", "code": "public final class StandardIntegrationFlowContext extends Object implements IntegrationFlowContext, org.springframework.beans.factory.BeanFactoryAware {\n\tIntegrationFlowContext.IntegrationFlowRegistration getRegistrationById(String flowId); // Obtain an IntegrationFlowContext.IntegrationFlowRegistration for the IntegrationFlow associated with the provided flowId.\n\tMap<String,IntegrationFlowContext.IntegrationFlowRegistration> getRegistry(); // Provide the state of the mapping of integration flow names to their IntegrationFlowContext.IntegrationFlowRegistration instances.\n\tboolean isUseIdAsPrefix(String flowId); // Return true to prefix flow bean names with the flow id and a period.\n\tMessagingTemplate messagingTemplateFor(String flowId); // Obtain a MessagingTemplate with its default destination set to the input channel of the IntegrationFlow for provided flowId.\n\tStandardIntegrationFlowContext.StandardIntegrationFlowRegistrationBuilder registration(IntegrationFlow integrationFlow); // Associate provided IntegrationFlow with an StandardIntegrationFlowContext.StandardIntegrationFlowRegistrationBuilder for additional options and farther registration in the application context.\n\tvoid remove(String flowId); // Destroy an IntegrationFlow bean (as well as all its dependant beans) for provided flowId and clean up all the local cache for it.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}"}
{"index": 13750, "repo": "spring-webmvc-6.0.11", "des": "The <nestedPath> tag supports and assists with nested beans or bean properties in the model.", "code": "public class NestedPathTag extends TagSupport implements TryCatchFinally {\n\tvoid doCatch(Throwable throwable);\n\tint doEndTag(); // Reset any previous nestedPath value.\n\tvoid doFinally();\n\tint doStartTag();\n\tString getPath(); // Return the path that this tag applies to.\n\tvoid setPath(String path); // Set the path that this tag should apply.\n}"}
{"index": 4825, "repo": "hadoop-common-3.3.4", "des": "Kerberos diagnostics This operation expands some of the diagnostic output of the security code, but not all.", "code": "Class KDiag {\n\tvoid close();\n\tvoid dumpTokens(UserGroupInformation ugi); // Dump all tokens of a UGI.\n\tstatic int exec(Configuration conf, String... argv); // Inner entry point, with no logging or system exits.\n\tboolean execute(); // Execute diagnostics.\n\tprotected boolean isSimpleAuthentication(Configuration conf); // Is the authentication method of this configuration \"simple\"?\n\tstatic void main(String[] argv); // Main entry point.\n\tprotected void printDefaultRealm(); // Get the default realm.\n\tint run(String[] argv); // Execute the command with the given arguments.\n\tprotected void validateKeyLength(); // Fail fast on a JVM without JCE installed.\n\tprotected void validateShortName(); // Verify whether auth_to_local rules transform a principal name\n}"}
{"index": 15829, "repo": "camel-api-4.0.0-RC1", "des": "SPI to plugin different reactive engines in the Camel routing engine.", "code": "public interface ReactiveExecutor {\n\tboolean executeFromQueue(); // Executes the next task (if supported by the reactive executor implementation)\n\tboolean isStatisticsEnabled(); // Whether statistics is enabled\n\tvoid schedule(Runnable runnable); // Schedules the task to be run (fairly)\n\tvoid scheduleMain(Runnable runnable); // Schedules the task to be prioritized and run asap\n\tvoid scheduleQueue(Runnable runnable); // Schedules the task to be run later from the queue (current thread) This is used for routing Exchange using transactions.\n\tvoid scheduleSync(Runnable runnable); // Schedules the task to run synchronously (current thread)\n\tvoid setStatisticsEnabled(boolean statisticsEnabled); // To enable statistics\n}"}
{"index": 566, "repo": "ignite-core-2.15.0", "des": "Mode indicating how Ignite should wait for write replies from other nodes.", "code": "Enum CacheWriteSynchronizationMode {\n\tstatic @Nullable CacheWriteSynchronizationMode fromOrdinal(int ord); // Efficiently gets enumerated value from its ordinal.\n\tstatic CacheWriteSynchronizationMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CacheWriteSynchronizationMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13781, "repo": "spring-webmvc-6.0.11", "des": "Receives notifications from the logical structure of request predicates.", "code": "public static interface RequestPredicates.Visitor {\n\tvoid and(); // Receive \"middle\" notification of a logical AND predicate.\n\tvoid endAnd(); // Receive last notification of a logical AND predicate.\n\tvoid endNegate(); // Receive last notification of a negated predicate.\n\tvoid endOr(); // Receive last notification of a logical OR predicate.\n\tvoid header(String name, String value); // Receive notification of an HTTP header predicate.\n\tvoid method(Set<org.springframework.http.HttpMethod> methods); // Receive notification of an HTTP method predicate.\n\tvoid or(); // Receive \"middle\" notification of a logical OR predicate.\n\tvoid param(String name, String value); // Receive notification of a parameter predicate.\n\tvoid path(String pattern); // Receive notification of a path predicate.\n\tvoid pathExtension(String extension); // Receive notification of a path extension predicate.\n\tvoid startAnd(); // Receive first notification of a logical AND predicate.\n\tvoid startNegate(); // Receive first notification of a negated predicate.\n\tvoid startOr(); // Receive first notification of a logical OR predicate.\n\tvoid unknown(RequestPredicate predicate); // Receive first notification of an unknown predicate.\n}"}
{"index": 13848, "repo": "spring-webflux-6.0.11", "des": "Context to assist with binding request data onto Objects and provide access to a shared Model with controller-specific attributes.", "code": "public class BindingContext extends Object {\n\torg.springframework.web.bind.support.WebExchangeDataBinder createDataBinder(org.springframework.web.server.ServerWebExchange exchange, Object target, String name); // Create a WebExchangeDataBinder to apply data binding and validation with on the target, command object.\n\torg.springframework.web.bind.support.WebExchangeDataBinder createDataBinder(org.springframework.web.server.ServerWebExchange exchange, String name); // Create a WebExchangeDataBinder without a target object for type conversion of request values to simple types.\n\torg.springframework.ui.Model getModel(); // Return the default model.\n\tprotected org.springframework.web.bind.support.WebExchangeDataBinder initDataBinder(org.springframework.web.bind.support.WebExchangeDataBinder binder, org.springframework.web.server.ServerWebExchange exchange); // Initialize the data binder instance for the given exchange.\n}"}
{"index": 4714, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "A lightweight AbstractDeviceDelegatingViewResolver for adjusting a view based on the combination of resolved Device and specified SitePreference.", "code": "Class LiteDeviceDelegatingViewResolver {\n\tprotected java.lang.String getDeviceViewNameInternal(java.lang.String viewName); // Subclasses must implement this method, adjusting the device view name based on device resolution used within the subclass.\n\tprotected java.lang.String getMobilePrefix(); // Return the prefix that gets prepended to view names for mobile devices\n\tprotected java.lang.String getMobileSuffix(); // Return the suffix that gets appended to view names for mobile devices\n\tprotected java.lang.String getNormalPrefix(); // Return the prefix that gets prepended to view names for normal devices\n\tprotected java.lang.String getNormalSuffix(); // Return the suffix that gets appended to view names for normal devices\n\tprotected java.lang.String getTabletPrefix(); // Return the prefix that gets prepended to view names for tablet devices\n\tprotected java.lang.String getTabletSuffix(); // Return the suffix that gets appended to view names for tablet devices\n\tvoid setMobilePrefix(java.lang.String mobilePrefix); // Set the prefix that gets prepended to view names for mobile devices.\n\tvoid setMobileSuffix(java.lang.String mobileSuffix); // Set the suffix that gets appended to view names for mobile devices\n\tvoid setNormalPrefix(java.lang.String normalPrefix); // Set the prefix that gets prepended to view names for normal devices.\n\tvoid setNormalSuffix(java.lang.String normalSuffix); // Set the suffix that gets appended to view names for normal devices.\n\tvoid setTabletPrefix(java.lang.String tabletPrefix); // Set the prefix that gets prepended to view names for tablet devices.\n\tvoid setTabletSuffix(java.lang.String tabletSuffix); // Set the suffix that gets appended to view names for tablet devices\n}"}
{"index": 15434, "repo": "pulsar-client-api-3.0.0", "des": "Default routing mode for messages to partition.", "code": "@Public @Stable public enum MessageRoutingMode extends Enum<MessageRoutingMode> {\n\tstatic MessageRoutingMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic MessageRoutingMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7001, "repo": "calcite-core-1.34.0", "des": "Describes when a function/operator will return null.", "code": "Enum NullPolicy {\n\tstatic NullPolicy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic NullPolicy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10772, "repo": "spring-boot-actuator-3.1.1", "des": "Base HealthIndicator implementations that encapsulates creation of Health instance and error handling.", "code": "public abstract class AbstractHealthIndicator extends Object implements HealthIndicator {\n\tprotected abstract void doHealthCheck(Health.Builder builder); // Actual health check logic.\n\tfinal Health health(); // Return an indication of health.\n}"}
{"index": 1558, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a destination to a page at a x location and the height is magnified to just fit on the screen.", "code": "Class PDPageFitHeightDestination {\n\tboolean fitBoundingBox(); // A flag indicating if this page destination should just fit bounding box of the PDF.\n\tint getLeft(); // Get the left x coordinate.\n\tvoid setFitBoundingBox(boolean fitBoundingBox); // Set if this page destination should just fit the bounding box.\n\tvoid setLeft(int x); // Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used.\n}"}
{"index": 17686, "repo": "spring-web-6.0.11", "des": "Simple request logging filter that writes the request URI (and optionally the query string) to the Commons Log.", "code": "public class CommonsRequestLoggingFilter extends AbstractRequestLoggingFilter {\n\tprotected void afterRequest(HttpServletRequest request, String message); // Writes a log message after the request is processed.\n\tprotected void beforeRequest(HttpServletRequest request, String message); // Writes a log message before the request is processed.\n\tprotected boolean shouldLog(HttpServletRequest request); // Determine whether to call the AbstractRequestLoggingFilter.beforeRequest(jakarta.servlet.http.HttpServletRequest, java.lang.String)/AbstractRequestLoggingFilter.afterRequest(jakarta.servlet.http.HttpServletRequest, java.lang.String) methods for the current request, i.e.\n}"}
{"index": 5902, "repo": "hadoop-yarn-server-common-3.3.6", "des": "An implementation of the FederationAMRMProxyPolicy that simply rejects all requests.", "code": "Class RejectAMRMProxyPolicy {\n\tvoid reinitialize(FederationPolicyInitializationContext policyContext); // This method is invoked to initialize of update the configuration of policies.\n\tMap<SubClusterId,List<org.apache.hadoop.yarn.api.records.ResourceRequest>> splitResourceRequests(List<org.apache.hadoop.yarn.api.records.ResourceRequest> resourceRequests, Set<SubClusterId> timedOutSubClusters); // Splits the ResourceRequests from the client across one or more sub-clusters based on the policy semantics (e.g., broadcast, load-based).\n}"}
{"index": 12528, "repo": "spring-jdbc-6.0.11", "des": "An adapter for a target DataSource, applying the current Spring transaction's isolation level (and potentially specified user credentials) to every getConnection call.", "code": "public class IsolationLevelDataSourceAdapter extends UserCredentialsDataSourceAdapter {\n\tprotected Connection doGetConnection(String username, String password); // Applies the current isolation level value and read-only flag to the returned Connection.\n\tprotected Integer getCurrentIsolationLevel(); // Determine the current isolation level: either the transaction's isolation level or a statically defined isolation level.\n\tprotected Boolean getCurrentReadOnlyFlag(); // Determine the current read-only flag: by default, the transaction's read-only hint.\n\tprotected Integer getIsolationLevel(); // Return the statically specified isolation level, or null if none.\n\tvoid setIsolationLevel(int isolationLevel); // Specify the default isolation level to use for Connection retrieval, according to the JDBC Connection constants (equivalent to the corresponding Spring TransactionDefinition constants).\n\tfinal void setIsolationLevelName(String constantName); // Set the default isolation level by the name of the corresponding constant in TransactionDefinition, e.g.\n}"}
{"index": 14488, "repo": "spring-security-web-6.1.2", "des": "Represents the directive values expected by the ClearSiteDataServerHttpHeadersWriter", "code": "public static enum ClearSiteDataServerHttpHeadersWriter.Directive extends Enum<ClearSiteDataServerHttpHeadersWriter.Directive> {\n\tString getHeaderValue();\n\tstatic ClearSiteDataServerHttpHeadersWriter.Directive valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ClearSiteDataServerHttpHeadersWriter.Directive[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 16876, "repo": "spring-security-oauth2-core-6.1.2", "des": "Base class for OAuth 2.0 Token implementations.", "code": "public abstract class AbstractOAuth2Token extends Object implements OAuth2Token, Serializable {\n\tboolean equals(Object obj);\n\tInstant getExpiresAt(); // Returns the expiration time on or after which the token MUST NOT be accepted.\n\tInstant getIssuedAt(); // Returns the time at which the token was issued.\n\tString getTokenValue(); // Returns the token value.\n}"}
{"index": 8797, "repo": "graal-sdk-1.0.0-rc7", "des": "Represents the option key for an option specification.", "code": "Class OptionKey<T> {\n\tT getDefaultValue(); // Returns the default value for this option.\n\tOptionType<T> getType(); // Returns the option type of this key.\n\tT getValue(OptionValues values); // Returns the value of this key given the values.\n\tboolean hasBeenSet(OptionValues values); // Returns true if a value for this key has been set for the given option values or false if no value has been set.\n}"}
{"index": 5009, "repo": "commons-collections-3.2.2", "des": "Factory implementation that creates a new object instance by reflection.", "code": "Class InstantiateFactory {\n\tObject create(); // Creates an object using the stored constructor.\n\tstatic Factory getInstance(Class classToInstantiate, Class[] paramTypes, Object[] args); // Factory method that performs validation.\n}"}
{"index": 5368, "repo": "druid-processing-26.0.0", "des": "Provides a sequence on top of Operators.", "code": "Class OperatorSequence {\n\t<OutType> OutType accumulate(OutType initValue, Accumulator<OutType,RowsAndColumns> accumulator); // Accumulate this sequence using the given accumulator.\n\t<OutType> Yielder<OutType> toYielder(OutType initValue, YieldingAccumulator<OutType,RowsAndColumns> accumulator); // Return a Yielder for accumulated sequence.\n}"}
{"index": 15919, "repo": "spring-rabbit-3.0.6", "des": "Delegates to an InvocableHandlerMethod based on the message payload type.", "code": "public class DelegatingInvocableHandler extends Object {\n\tprotected org.springframework.messaging.handler.invocation.InvocableHandlerMethod findHandlerForPayload(Class<? extends Object> payloadClass);\n\tObject getBean();\n\tprotected org.springframework.messaging.handler.invocation.InvocableHandlerMethod getHandlerForPayload(Class<? extends Object> payloadClass);\n\tInvocationResult getInvocationResultFor(Object result, Object inboundPayload);\n\tMethod getMethodFor(Object payload); // Return the method that will be invoked for this payload.\n\tString getMethodNameFor(Object payload); // Return a string representation of the method that will be invoked for this payload.\n\tboolean hasDefaultHandler();\n\tInvocationResult invoke(org.springframework.messaging.Message<?> message, Object... providedArgs); // Invoke the method with the given message.\n\tboolean isAsyncReplies(); // Return true if any handler method has an async reply type.\n\tprotected boolean matchHandlerMethod(Class<? extends Object> payloadClass, org.springframework.messaging.handler.invocation.InvocableHandlerMethod handler);\n}"}
{"index": 15298, "repo": "spring-boot-3.1.1", "des": "Thin wrapper to adapt Jackson 2 ObjectMapper to JsonParser.", "code": "public class JacksonJsonParser extends AbstractJsonParser {\n\tList<Object> parseList(String json); // Parse the specified JSON string into a List.\n\tMap<String,Object> parseMap(String json); // Parse the specified JSON string into a Map.\n}"}
{"index": 817, "repo": "ignite-core-2.15.0", "des": "Future that represents already completed result.", "code": "Class GridNioFinishedFuture<R> {\n\tIgniteInClosure<IgniteException> ackClosure();\n\tboolean messageThread();\n\tvoid messageThread(boolean msgThread); // Sets flag indicating that message send future was created in thread that was processing a message.\n\tvoid onAckReceived(); // The method will be called when ack received.\n\tboolean skipRecovery();\n}"}
{"index": 8232, "repo": "spring-ws-3.0.10.RELEASE", "des": "Strategy interface that encapsulates the creation and validation of WS-Addressing MessageIDs.", "code": "Interface MessageIdStrategy {\n\tboolean isDuplicate(URI messageId); // Indicates whether the given MessageID value is a duplicate or not\n\tURI newMessageId(SoapMessage message); // Returns a new WS-Addressing MessageID for the given SoapMessage.\n}"}
{"index": 13638, "repo": "slf4j-ext-2.0.7", "des": "A very basic TimeInstrument which can be started and stopped once and only once.", "code": "public class StopWatch extends Object implements TimeInstrument {\n\tfinal long elapsedTime(); // Time elapsed between start and stop, in nanoseconds.\n\tString getName(); // All time instruments are named entities.\n\torg.slf4j.profiler.TimeInstrumentStatus getStatus();\n\tvoid log(); // If the time instrument has an associated logger, then log information about this time instrument.\n\tvoid print(); // Print information about this time instrument on the console.\n\tvoid start(String name); // Start this time instrument.\n\tTimeInstrument stop(); // Stop this time instrument.\n\tStopWatch stop(long stopTime);\n}"}
{"index": 18300, "repo": "tomcat-servletapi-10.1", "des": "Represents a taglib descriptor definitions in the deployment descriptor.", "code": "Interface TaglibDescriptor {\n\tjava.lang.String getTaglibLocation(); // Obtain the location of the tag library.\n\tjava.lang.String getTaglibURI(); // Obtain the URI for the tag library.\n}"}
{"index": 7610, "repo": "cassandra-all-4.1.2", "des": "A snitch that assumes an EC2 region is a DC and an EC2 availability_zone is a rack.", "code": "Class Ec2Snitch {\n\tjava.lang.String getDatacenter(InetAddressAndPort endpoint); // Return the data center for which an endpoint resides in\n\tjava.lang.String getRack(InetAddressAndPort endpoint); // Return the rack for which an endpoint resides in\n\tboolean validate(java.util.Set<java.lang.String> datacenters, java.util.Set<java.lang.String> racks); // Determine if the datacenter or rack values in the current node's snitch conflict with those passed in parameters.\n}"}
{"index": 18021, "repo": "spring-ws-core-4.0.5", "des": "Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.", "code": "public class EndpointInterceptorAdapter extends Object implements EndpointInterceptor {\n\tvoid afterCompletion(MessageContext messageContext, Object endpoint, Exception ex); // Does nothing by default.\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Returns true.\n\tboolean handleRequest(MessageContext messageContext, Object endpoint); // Returns true.\n\tboolean handleResponse(MessageContext messageContext, Object endpoint); // Returns true.\n\tboolean understands(Element header); // Returns false.\n}"}
{"index": 13533, "repo": "spring-messaging-6.0.11", "des": "Implementation of MessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.", "code": "public class MarshallingMessageConverter extends AbstractMessageConverter {\n\tprotected boolean canConvertFrom(Message<?> message, Class<?> targetClass);\n\tprotected boolean canConvertTo(Object payload, MessageHeaders headers);\n\tprotected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint); // Convert the message payload from serialized form to an Object.\n\tprotected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint); // Convert the payload object to serialized form.\n\torg.springframework.oxm.Marshaller getMarshaller(); // Return the configured Marshaller.\n\torg.springframework.oxm.Unmarshaller getUnmarshaller(); // Return the configured unmarshaller.\n\tvoid setMarshaller(org.springframework.oxm.Marshaller marshaller); // Set the Marshaller to be used by this message converter.\n\tvoid setUnmarshaller(org.springframework.oxm.Unmarshaller unmarshaller); // Set the Unmarshaller to be used by this message converter.\n\tprotected boolean supports(Class<?> clazz); // Whether the given class is supported by this converter.\n}"}
{"index": 16959, "repo": "spring-orm-6.0.11", "des": "Base class for any class that needs to access a JPA EntityManagerFactory, usually in order to obtain a JPA EntityManager.", "code": "public abstract class EntityManagerFactoryAccessor extends Object implements org.springframework.beans.factory.BeanFactoryAware {\n\tprotected EntityManager createEntityManager(); // Obtain a new EntityManager from this accessor's EntityManagerFactory.\n\tEntityManagerFactory getEntityManagerFactory(); // Return the JPA EntityManagerFactory that should be used to create EntityManagers.\n\tMap<String,Object> getJpaPropertyMap(); // Allow Map access to the JPA properties to be passed to the persistence provider, with the option to add or override specific entries.\n\tString getPersistenceUnitName(); // Return the name of the persistence unit to access the EntityManagerFactory for, if any.\n\tprotected EntityManager getTransactionalEntityManager(); // Obtain the transactional EntityManager for this accessor's EntityManagerFactory, if any.\n\tprotected final EntityManagerFactory obtainEntityManagerFactory(); // Obtain the EntityManagerFactory for actual use.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // Retrieves an EntityManagerFactory by persistence unit name, if none set explicitly.\n\tvoid setEntityManagerFactory(EntityManagerFactory emf); // Set the JPA EntityManagerFactory that should be used to create EntityManagers.\n\tvoid setJpaProperties(Properties jpaProperties); // Specify JPA properties, to be passed into EntityManagerFactory.createEntityManager(Map) (if any).\n\tvoid setJpaPropertyMap(Map<String,Object> jpaProperties); // Specify JPA properties as a Map, to be passed into EntityManagerFactory.createEntityManager(Map) (if any).\n\tvoid setPersistenceUnitName(String persistenceUnitName); // Set the name of the persistence unit to access the EntityManagerFactory for.\n}"}
{"index": 8124, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for WS-Addressing Action-mapped EndpointMapping implementations that map to MethodEndpoints.", "code": "Class AbstractActionMethodEndpointMapping {\n\tprotected abstract URI getActionForMethod(Method method); // Returns the action value for the specified method.\n\tprotected Class<?> getEndpointClass(Object endpoint); // Return the class or interface to use for method reflection.\n\tprotected void registerMethods(Object endpoint); // Helper method that registers the methods of the given bean.\n}"}
{"index": 15957, "repo": "wicket-util-10.0.0-M1", "des": "Base implementation of an IResourceStreamWriter so that you only have to override the IResourceStreamWriter.write(java.io.OutputStream).", "code": "public abstract class AbstractResourceStreamWriter extends Object implements IResourceStreamWriter {\n\tvoid close(); // Closes the resource.\n\tString getContentType(); // Gets the mime type of this resource\n\tfinal InputStream getInputStream(); // this method should not be used as it is not required for resource writers\n\tLocale getLocale();\n\tString getStyle();\n\tString getVariation();\n\tInstant lastModifiedTime(); // Just returns now.\n\tBytes length(); // Default implementation to returns null, i.e.\n\tvoid setLocale(Locale locale); // This method shouldn't be used from the outside.\n\tvoid setStyle(String style); // This method shouldn't be used from the outside.\n\tvoid setVariation(String variation); // This method shouldn't be used from the outside.\n}"}
{"index": 18441, "repo": "opencms-core-15.0", "des": "A bean class containing both a path and a UUID which should be stored in an XML file value.", "code": "Class CmsVfsFileValueBean {\n\tCmsUUID getId(); // Gets the UUID of this bean.\n\tjava.lang.String getPath(); // Gets the path of this bean.\n}"}
{"index": 3787, "repo": "hbase-client-3.0.0-alpha-4", "des": "The asynchronous version of RegionLocator.", "code": "Interface AsyncTableRegionLocator {\n\tvoid clearRegionLocationCache(); // Clear all the entries in the region location cache.\n\tCompletableFuture<List<HRegionLocation>> getAllRegionLocations(); // Retrieves all of the regions associated with this table.\n\tdefault CompletableFuture<List<byte[]>> getEndKeys(); // Gets the ending row key for every region in the currently open table.\n\tTableName getName(); // Gets the fully qualified table name instance of the table whose region we want to locate.\n\tdefault CompletableFuture<HRegionLocation> getRegionLocation(byte[] row); // Finds the region on which the given row is being served.\n\tdefault CompletableFuture<HRegionLocation> getRegionLocation(byte[] row, boolean reload); // Finds the region on which the given row is being served.\n\tdefault CompletableFuture<HRegionLocation> getRegionLocation(byte[] row, int replicaId); // Finds the region with the given replicaId on which the given row is being served.\n\tCompletableFuture<HRegionLocation> getRegionLocation(byte[] row, int replicaId, boolean reload); // Finds the region with the given replicaId on which the given row is being served.\n\tdefault CompletableFuture<List<HRegionLocation>> getRegionLocations(byte[] row); // Find all the replicas for the region on which the given row is being served.\n\tCompletableFuture<List<HRegionLocation>> getRegionLocations(byte[] row, boolean reload); // Find all the replicas for the region on which the given row is being served.\n\tdefault CompletableFuture<List<Pair<byte[],byte[]>>> getStartEndKeys(); // Gets the starting and ending row keys for every region in the currently open table.\n\tdefault CompletableFuture<List<byte[]>> getStartKeys(); // Gets the starting row key for every region in the currently open table.\n}"}
{"index": 2826, "repo": "tika-parsers-1.28.5", "des": "Specifies the storage index revision mappings (with revision and revision mapping extended GUIDs, and revision mapping serial number).", "code": "Class StorageIndexRevisionMapping {\n\tprotected void deserializeItemsFromByteArray(byte[] byteArray, AtomicInteger currentIndex, int lengthOfItems); // Used to de-serialize the items\n\tprotected int serializeItemsToByteList(List<Byte> byteList); // Used to convert the element into a byte List.\n}"}
{"index": 3364, "repo": "hadoop-azure-3.3.6", "des": "An interface for Abfs Throttling Interface.", "code": "Interface AbfsThrottlingIntercept {\n\tvoid sendingRequest(AbfsRestOperationType operationType, AbfsCounters abfsCounters); // Called before the request is sent.\n\tvoid updateMetrics(AbfsRestOperationType operationType, AbfsHttpOperation abfsHttpOperation); // Updates the metrics for successful and failed read and write operations.\n}"}
{"index": 4776, "repo": "hadoop-common-3.3.4", "des": "DNSDomainNameResolver wraps up the default DNS service for forward/reverse DNS lookup.", "code": "Class DNSDomainNameResolver {\n\tInetAddress[] getAllByDomainName(String domainName); // Takes one domain name and returns its IP addresses based on the actual service discovery methods.\n\tString[] getAllResolvedHostnameByDomainName(String domainName, boolean useFQDN); // This function combines getAllByDomainName and getHostnameByIP, for a single domain name, it will first do a forward lookup to get all of IP addresses, then for each IP address, it will do a reverse lookup to get the fqdn.\n\tString getHostnameByIP(InetAddress address); // Reverse lookup an IP address and get the fully qualified domain name(fqdn).\n}"}
{"index": 5531, "repo": "org.apache.karaf.main-2.4.4", "des": "An authorization engine is used to grant authorization to SignedContent.", "code": "Class AuthorizationEngine {\n\tvoid authorize(SignedContent content, Object context); // Authorizes a SignedContent object.\n\tprotected abstract AuthorizationEvent doAuthorize(SignedContent content, Object context); // Authorizes a SignedContent object.\n\tabstract int getStatus(); // Return the current status of the Authorization system.\n}"}
{"index": 12931, "repo": "spring-data-mongodb-4.1.2", "des": "A subclass of QueryMapper that retains type information on the mongo types.", "code": "public class UpdateMapper extends QueryMapper {\n\tprotected QueryMapper.Field createPropertyField(MongoPersistentEntity<?> entity, String key, MappingContext<? extends MongoPersistentEntity<?>,MongoPersistentProperty> mappingContext);\n\tprotected Object delegateConvertToMongoType(Object source, MongoPersistentEntity<?> entity); // Converts the given source object to a mongo type retaining the original type information of the source type on the mongo type.\n\torg.bson.Document getMappedObject(org.bson.conversions.Bson query, MongoPersistentEntity<?> entity); // Replaces the property keys used in the given Document with the appropriate keys by using the PersistentEntity metadata.\n\tprotected Map.Entry<String,Object> getMappedObjectForField(QueryMapper.Field field, Object rawValue); // Extracts the mapped object value for given field out of rawValue taking nested QueryMapper.Keywords into account\n\tprotected boolean isAssociationConversionNecessary(QueryMapper.Field documentField, Object value); // Returns whether the given QueryMapper.Field represents an association reference that together with the given value requires conversion to a DBRef object.\n\tstatic boolean isUpdateObject(org.bson.Document updateObj); // Returns true if the given Document is an update object that uses update operators.\n}"}
{"index": 12389, "repo": "spring-data-couchbase-5.1.2", "des": "A property accessor for document properties.", "code": "public class CouchbaseDocumentPropertyAccessor extends MapAccessor {\n\tboolean canRead(EvaluationContext context, Object target, String name); // It can always read from those properties.\n\tClass<?>[] getSpecificTargetClasses(); // Returns the target classes of the properties.\n\tTypedValue read(EvaluationContext context, Object target, String name); // Read the value from the property.\n}"}
{"index": 11965, "repo": "jena-core-4.9.0", "des": "A string literal property value from an RDF/XML file.", "code": "public interface ALiteral extends ANode {\n\tString getDatatypeURI(); // The datatype URI of a typed literal, or null for an untyped literal.\n\tString getLang(); // The value of xml:lang for this literal, often the empty string.\n\tboolean isWellFormedXML(); // True if this literal was formed from a rdf:parseType=\"Literal\" construction.\n}"}
{"index": 18812, "repo": "lucene-core-9.7.0", "des": "This DocIdSet encodes the negation of another DocIdSet.", "code": "Class NotDocIdSet {\n\tBits bits(); // Optionally provides a Bits interface for random access to matching documents.\n\tDocIdSetIterator iterator(); // Provides a DocIdSetIterator to access the set.\n\tlong ramBytesUsed(); // Return the memory usage of this object in bytes.\n}"}
{"index": 8907, "repo": "hbase-server-3.0.0-alpha-4", "des": "The procedure for disabling a replication peer.", "code": "Class DisablePeerProcedure {\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tPeerProcedureInterface.PeerOperationType getPeerOperationType();\n\tprotected void postPeerModification(MasterProcedureEnv env); // Called before we finish the procedure.\n\tprotected void prePeerModification(MasterProcedureEnv env); // Called before we start the actual processing.\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tprotected void updatePeerStorage(MasterProcedureEnv env);\n}"}
{"index": 13047, "repo": "spring-aop-6.0.11", "des": "Auto proxy creator that identifies beans to proxy via a list of names.", "code": "public class BeanNameAutoProxyCreator extends AbstractAutoProxyCreator {\n\tprotected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource); // Identify as a bean to proxy if the bean name matches one of the names in the configured list of supported names.\n\tprotected TargetSource getCustomTargetSource(Class<?> beanClass, String beanName); // Delegate to AbstractAutoProxyCreator.getCustomTargetSource(Class, String) if the bean name matches one of the names in the configured list of supported names, returning null otherwise.\n\tprotected boolean isMatch(String beanName, String mappedName); // Determine if the given bean name matches the mapped name.\n\tvoid setBeanNames(String... beanNames); // Set the names of the beans that should automatically get wrapped with proxies.\n}"}
{"index": 6323, "repo": "mina-core-3.0.0-M2", "des": "An session idle detector using an index in place of polling every session every seconds.", "code": "Class IndexedIdleChecker {\n\tvoid destroy(); // Stop the idle checker.\n\tint processIdleSession(long timeMs); // Find idle session, to be called for each select() call.\n\tvoid sessionRead(AbstractIoSession session, long timeInMs); // Inform the IdleCheker a session have a read event\n\tvoid sessionWritten(AbstractIoSession session, long timeInMs); // Inform the IdleCheker a session have a write event\n\tvoid start(); // Start the idle checker inner threads\n}"}
{"index": 15904, "repo": "spring-rabbit-3.0.6", "des": "Subinterface of Channel to be implemented by Channel proxies.", "code": "public interface ChannelProxy extends com.rabbitmq.client.Channel, org.springframework.aop.RawTargetAccess {\n\tcom.rabbitmq.client.Channel getTargetChannel(); // Return the target Channel of this proxy.\n\tdefault boolean isConfirmSelected(); // Return true if confirms are selected on this channel.\n\tdefault boolean isPublisherConfirms(); // Return true if publisher confirms are enabled.\n\tboolean isTransactional(); // Return whether this channel has transactions enabled txSelect().\n}"}
{"index": 15258, "repo": "spring-boot-3.1.1", "des": "Convenience class for building a DataSource.", "code": "public final class DataSourceBuilder<T extends DataSource> extends Object {\n\tT build(); // Return a newly built DataSource instance.\n\tstatic DataSourceBuilder<?> create(); // Create a new DataSourceBuilder instance.\n\tstatic DataSourceBuilder<?> create(ClassLoader classLoader); // Create a new DataSourceBuilder instance.\n\tstatic DataSourceBuilder<?> derivedFrom(DataSource dataSource); // Create a new DataSourceBuilder instance derived from the specified data source.\n\tDataSourceBuilder<T> driverClassName(String driverClassName); // Set the driver class name that should be used when building the datasource.\n\tstatic Class<? extends DataSource> findType(ClassLoader classLoader); // Find the DataSource type preferred for the given classloader.\n\tDataSourceBuilder<T> password(String password); // Set the password that should be used when building the datasource.\n\t<D extends DataSource>DataSourceBuilder<D> type(Class<D> type); // Set the DataSource type that should be built.\n\tDataSourceBuilder<T> url(String url); // Set the URL that should be used when building the datasource.\n\tDataSourceBuilder<T> username(String username); // Set the username that should be used when building the datasource.\n}"}
{"index": 578, "repo": "ignite-core-2.15.0", "des": "Data class representing the state of running/scheduled checkpoint.", "code": "Class CheckpointProgressImpl {\n\tvoid clearCounters(); // Clear cp progress counters.\n\tint currentCheckpointPagesCount();\n\tvoid currentCheckpointPagesCount(int num); // Sets current checkpoint pages num to store.\n\tAtomicInteger evictedPagesCounter();\n\tvoid fail(Throwable error); // Mark this checkpoint execution as failed.\n\tGridFutureAdapter futureFor(CheckpointState state);\n\tPartitionDestroyQueue getDestroyQueue();\n\tboolean greaterOrEqualTo(CheckpointState expectedState);\n\tvoid initCounters(int pagesSize); // Initialize all counters before checkpoint.\n\tboolean inProgress();\n\tlong nextCpNanos();\n\tvoid nextCpNanos(long nextCpNanos);\n\tboolean nextSnapshot();\n\tvoid nextSnapshot(boolean nextSnapshot);\n\tvoid onStateChanged(CheckpointState state, Runnable clo); // Invokes a callback closure then a checkpoint reaches specific state.\n\tString reason();\n\tvoid reason(String reason);\n\tSnapshotOperation snapshotOperation();\n\tvoid snapshotOperation(SnapshotOperation snapshotOperation);\n\tAtomicInteger syncedPagesCounter();\n\tvoid transitTo(@NotNull CheckpointState newState); // Changing checkpoint state if order of state is correct.\n\tvoid updateEvictedPages(int delta); // Update evicted pages in checkpoint;\n\tvoid updateSyncedPages(int deltha); // Update synced pages in checkpoint;\n\tvoid updateWrittenPages(int deltha); // Update written pages in checkpoint;\n\tAtomicInteger writtenPagesCounter();\n}"}
{"index": 1278, "repo": "ignite-core-2.15.0", "des": "Simple data class for storing (hostname, address) pairs.", "code": "Class VisorBaselineNode.ResolvedAddresses {\n\tString address();\n\tString hostname();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 15819, "repo": "camel-api-4.0.0-RC1", "des": "Strategy that allows Consumers to influence the PollingConsumer.", "code": "public interface PollingConsumerPollingStrategy {\n\tvoid afterPoll(); // Callback invoked after the poll.\n\tlong beforePoll(long timeout); // Callback invoked before the poll.\n\tvoid onInit(); // Callback invoked when the consumer is initialized such as when the PollingConsumer starts.\n}"}
{"index": 12890, "repo": "spring-data-mongodb-4.1.2", "des": "Repository base implementation for Mongo.", "code": "public class SimpleMongoRepository<T,ID> extends Object implements MongoRepository<T,ID> {\n\tlong count();\n\t<S extends T>long count(Example<S> example);\n\tvoid delete(T entity);\n\tvoid deleteAll();\n\tvoid deleteAll(Iterable<? extends T> entities);\n\tvoid deleteAllById(Iterable<? extends ID> ids);\n\tvoid deleteById(ID id);\n\t<S extends T>boolean exists(Example<S> example);\n\tboolean existsById(ID id);\n\tList<T> findAll();\n\t<S extends T>List<S> findAll(Example<S> example); // Returns all entities matching the given Example.\n\t<S extends T>Page<S> findAll(Example<S> example, Pageable pageable);\n\t<S extends T>List<S> findAll(Example<S> example, Sort sort); // Returns all entities matching the given Example applying the given Sort.\n\tPage<T> findAll(Pageable pageable);\n\tList<T> findAll(Sort sort);\n\tList<T> findAllById(Iterable<ID> ids);\n\t<S extends T, R>R findBy(Example<S> example, Function<FluentQuery.FetchableFluentQuery<S>,R> queryFunction);\n\tOptional<T> findById(ID id);\n\t<S extends T>Optional<S> findOne(Example<S> example);\n\t<S extends T>List<S> insert(Iterable<S> entities); // Inserts the given entities.\n\t<S extends T>S insert(S entity); // Inserts the given entity.\n\t<S extends T>S save(S entity);\n\t<S extends T>List<S> saveAll(Iterable<S> entities);\n}"}
{"index": 8426, "repo": "hadoop-aws-3.3.6", "des": "Helper class for openFile() logic, especially processing file status args and length/etag/versionID.", "code": "Class OpenFileSupport {\n\tS3AReadOpContext applyDefaultOptions(S3AReadOpContext roc); // Propagate the default options to the operation context being built up.\n\tChangeDetectionPolicy getChangePolicy();\n\tlong getDefaultAsyncDrainThreshold();\n\tint getDefaultBufferSize();\n\tlong getDefaultReadAhead();\n\tOpenFileSupport.OpenFileInformation openSimpleFile(int bufferSize); // Open a simple file, using all the default options.\n\tOpenFileSupport.OpenFileInformation prepareToOpenFile(org.apache.hadoop.fs.Path path, org.apache.hadoop.fs.impl.OpenFileParameters parameters, long blockSize); // Prepare to open a file from the openFile parameters.\n}"}
{"index": 15535, "repo": "spring-batch-core-5.0.2", "des": "This incrementer increments a \"run.id\" parameter of type Long from the given job parameters.", "code": "public class RunIdIncrementer extends Object implements JobParametersIncrementer {\n\tJobParameters getNext(JobParameters parameters); // Increment the run.id parameter (starting with 1).\n\tvoid setKey(String key); // The name of the run id in the job parameters.\n}"}
{"index": 17074, "repo": "spring-integration-core-6.1.2", "des": "Factory bean for creating a Message Filter.", "code": "public class FilterFactoryBean extends AbstractStandardMessageHandlerFactoryBean {\n\tprotected boolean canBeUsedDirect(AbstractMessageProducingHandler handler); // MessageFilter is an ARPMH.\n\tprotected void checkForIllegalTarget(Object targetObject, String targetMethodName);\n\tprotected org.springframework.messaging.MessageHandler createExpressionEvaluatingHandler(org.springframework.expression.Expression expression);\n\tprotected MessageFilter createFilter(MessageSelector selector);\n\tprotected org.springframework.messaging.MessageHandler createMethodInvokingHandler(Object targetObject, String targetMethodName); // Subclasses must implement this method to create the MessageHandler.\n\tprotected Class<? extends org.springframework.messaging.MessageHandler> getPreCreationHandlerType(); // Subclasses can override this to return a more specific type before handler creation.\n\tprotected void postProcessFilter(MessageFilter filter);\n\tprotected void postProcessReplyProducer(AbstractMessageProducingHandler handler);\n\tvoid setDiscardChannel(org.springframework.messaging.MessageChannel discardChannel);\n\tvoid setDiscardWithinAdvice(boolean discardWithinAdvice);\n\tvoid setThrowExceptionOnRejection(Boolean throwExceptionOnRejection);\n}"}
{"index": 14285, "repo": "wicket-core-10.0.0-M1", "des": "Interface for objects that are capable of getting and creating page instance.", "code": "public interface IPageSource {\n\tIRequestablePage getPageInstance(int pageId); // Returns existing page instance if the page exists.\n\tIRequestablePage newPageInstance(Class<? extends IRequestablePage> pageClass, org.apache.wicket.request.mapper.parameter.PageParameters pageParameters); // Creates new page instance of page with given class.\n}"}
{"index": 1813, "repo": "kafka-clients-3.5.0", "des": "The interface for wrapping a serializer and deserializer for the given data type.", "code": "Interface Serde<T> {\n\tdefault void close(); // Close this serde class, which will close the underlying serializer and deserializer.\n\tdefault void configure(Map<String,?> configs, boolean isKey); // Configure this class, which will configure the underlying serializer and deserializer.\n\tDeserializer<T> deserializer();\n\tSerializer<T> serializer();\n}"}
{"index": 8775, "repo": "graal-sdk-1.0.0-rc7", "des": "Describes the thread state transition performed when the C function is invoked.", "code": "Enum CFunction.Transition {\n\tstatic CFunction.Transition valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CFunction.Transition[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17176, "repo": "spring-integration-core-6.1.2", "des": "The MessageGroupFactory implementation to produce SimpleMessageGroup instances.", "code": "public class SimpleMessageGroupFactory extends Object implements MessageGroupFactory {\n\tMessageGroup create(Object groupId); // Create a MessageGroup instance based on the provided groupId.\n\tMessageGroup create(Collection<? extends org.springframework.messaging.Message<?>> messages, Object groupId); // Create a MessageGroup instance based on the provided groupId and with the messages for the group.\n\tMessageGroup create(Collection<? extends org.springframework.messaging.Message<?>> messages, Object groupId, long timestamp, boolean complete); // Create a MessageGroup instance based on the provided groupId and with the messages for the group.\n\tMessageGroup create(MessageGroupStore messageGroupStore, Object groupId); // Create a MessageGroup instance based on the provided groupId.\n\tMessageGroup create(MessageGroupStore messageGroupStore, Object groupId, long timestamp, boolean complete); // Create a MessageGroup instance based on the provided groupId.\n}"}
{"index": 1291, "repo": "ignite-core-2.15.0", "des": "Arguments of task for cancel CONTINUOUS query.", "code": "Class VisorContinuousQueryCancelTaskArg {\n\tUUID getNodeId();\n\tUUID getRoutineId();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 17264, "repo": "groovy-4.0.13", "des": "Utility class to guess the encoding of a given text file.", "code": "public class CharsetToolkit extends Object {\n\tstatic Charset[] getAvailableCharsets(); // Retrieves all the available Charsets on the platform, among which the default charset.\n\tCharset getCharset();\n\tCharset getDefaultCharset(); // Retrieves the default Charset\n\tstatic Charset getDefaultSystemCharset(); // Retrieve the default charset of the system.\n\tboolean getEnforce8Bit(); // Gets the enforce8Bit flag, in case we do not want to ever get a US-ASCII encoding.\n\tBufferedReader getReader(); // Gets a BufferedReader (indeed a LineNumberReader) from the File specified in the constructor of CharsetToolkit using the charset discovered or the default charset if an 8-bit Charset is encountered.\n\tboolean hasUTF16BEBom(); // Has a Byte Order Marker for UTF-16 Big Endian (utf-16 and ucs-2).\n\tboolean hasUTF16LEBom(); // Has a Byte Order Marker for UTF-16 Low Endian (ucs-2le, ucs-4le, and ucs-16le).\n\tboolean hasUTF8Bom(); // Has a Byte Order Marker for UTF-8 (Used by Microsoft's Notepad and other editors).\n\tvoid setDefaultCharset(Charset defaultCharset); // Defines the default Charset used in case the buffer represents an 8-bit Charset.\n\tvoid setEnforce8Bit(boolean enforce); // If US-ASCII is recognized, enforce to return the default encoding, rather than US-ASCII.\n}"}
{"index": 4486, "repo": "beam-sdks-java-core-2.49.0", "des": "PTransforms for converting between explicit and implicit form of various Beam values.", "code": "Class Reify {\n\tstatic <K,V> PTransform<PCollection<KV<K,TimestampedValue<V>>>,PCollection<KV<K,V>>> extractTimestampsFromValues(); // Extracts the timestamps from each value in a KV.\n\tstatic <T> PTransform<PCollection<T>,PCollection<TimestampedValue<T>>> timestamps(); // Create a PTransform that will output all inputs wrapped in a TimestampedValue.\n\tstatic <K,V> PTransform<PCollection<KV<K,V>>,PCollection<KV<K,TimestampedValue<V>>>> timestampsInValue(); // Create a PTransform that will output all input KVs with the timestamp inside the value.\n\tstatic <K,V> PTransform<PCollection<K>,PCollection<KV<K,V>>> viewAsValues(PCollectionView<V> view, Coder<V> coder); // Pairs each element in a collection with the value of a side input associated with the element's window.\n\tstatic <K,V> PTransform<PBegin,PCollection<V>> viewInGlobalWindow(PCollectionView<V> view, Coder<V> coder); // Returns a PCollection consisting of a single element, containing the value of the given view in the global window.\n\tstatic <T> PTransform<PCollection<T>,PCollection<ValueInSingleWindow<T>>> windows(); // Create a PTransform that will reify information from the processing context into instances of ValueInSingleWindow.\n\tstatic <K,V> PTransform<PCollection<KV<K,V>>,PCollection<KV<K,ValueInSingleWindow<V>>>> windowsInValue(); // Create a PTransform that will output all input KVs with the window pane info inside the value.\n}"}
{"index": 18297, "repo": "tomcat-servletapi-10.1", "des": "This is the event class for notifications of changes to the attributes of the servlet request in an application.", "code": "Class ServletRequestAttributeEvent {\n\tjava.lang.String getName(); // Return the name of the attribute that changed on the ServletRequest.\n\tjava.lang.Object getValue(); // Returns the value of the attribute that has been added, removed or replaced.\n}"}
{"index": 13107, "repo": "spring-aop-6.0.11", "des": "A TargetSource is used to obtain the current \"target\" of an AOP invocation, which will be invoked via reflection if no around advice chooses to end the interceptor chain itself.", "code": "public interface TargetSource extends TargetClassAware {\n\tObject getTarget(); // Return a target instance.\n\tClass<?> getTargetClass(); // Return the type of targets returned by this TargetSource.\n\tboolean isStatic(); // Will all calls to getTarget() return the same object?\n\tvoid releaseTarget(Object target); // Release the given target object obtained from the getTarget() method, if any.\n}"}
{"index": 14385, "repo": "wicket-core-10.0.0-M1", "des": "resource caching strategy that adds a version string to the query parameters of the resource (this is similar to how wicket 1.4 does it when enabling timestamps on resources).", "code": "public class QueryStringWithVersionResourceCachingStrategy extends Object implements IResourceCachingStrategy {\n\tvoid clearCache(); // Clears any stateful information\n\tvoid decorateResponse(AbstractResource.ResourceResponse response, IStaticCacheableResource resource); // decorate resource response\n\tvoid decorateUrl(ResourceUrl url, IStaticCacheableResource resource); // add caching related information to filename + parameters\n\tfinal String getVersionParameter();\n\tvoid undecorateUrl(ResourceUrl url); // Removes caching related information from filename + parameters.\n}"}
{"index": 8371, "repo": "hive-common-4.0.0-alpha-2", "des": "Utilities for Timestamps and the relevant conversions.", "code": "Class TimestampUtils {\n\tstatic Timestamp decimalToTimestamp(HiveDecimal dec); // Take a HiveDecimal and return the timestamp representation where the fraction part is the nanoseconds and integer part is the number of seconds.\n\tstatic Timestamp decimalToTimestamp(HiveDecimalV1 dec);\n\tstatic Timestamp decimalToTimestamp(HiveDecimalWritable decWritable, HiveDecimalWritable scratchDecWritable1, HiveDecimalWritable scratchDecWritable2); // Take a HiveDecimalWritable and return the timestamp representation where the fraction part is the nanoseconds and integer part is the number of seconds.\n\tstatic Timestamp doubleToTimestamp(double f);\n\tstatic double getDouble(Timestamp ts); // Convert the timestamp to a double measured in seconds.\n\tstatic long millisToSeconds(long millis); // Rounds the number of milliseconds relative to the epoch down to the nearest whole number of seconds.\n\tstatic Timestamp stringToTimestamp(String text); // Convert (parse) a String into a Timestamp.\n}"}
{"index": 3292, "repo": "hbase-common-3.0.0-alpha-4", "des": "Maintain an reference count integer inside to track life cycle of ByteBuff, if the reference count become 0, it'll call ByteBuffAllocator.", "code": "Class RefCnt {\n\tstatic RefCnt create(); // Create an RefCnt with an initial reference count = 1.\n\tstatic RefCnt create(ByteBuffAllocator.Recycler recycler);\n\tprotected void deallocate();\n\tByteBuffAllocator.Recycler getRecycler();\n\tboolean hasRecycler(); // Returns true if this refCnt has a recycler.\n\tboolean release();\n\tboolean release(int decrement);\n\torg.apache.hbase.thirdparty.io.netty.util.ReferenceCounted retain();\n\torg.apache.hbase.thirdparty.io.netty.util.ReferenceCounted retain(int increment);\n\tRefCnt touch();\n\torg.apache.hbase.thirdparty.io.netty.util.ReferenceCounted touch(Object hint);\n}"}
{"index": 12453, "repo": "drill-common-1.21.1", "des": "Encapsulates version information and provides ordering", "code": "public final class Version extends Object implements Comparable<Version> {\n\tint compareTo(Version o);\n\tboolean equals(Object obj);\n\tint getBuildNumber(); // Get the build number\n\tint getMajorVersion(); // Get the major version\n\tint getMinorVersion(); // Get the minor version\n\tint getPatchVersion(); // Get the patch version\n\tString getQualifier(); // Get the version qualifier\n\tString getVersion(); // Get the version string\n}"}
{"index": 16035, "repo": "spring-cloud-context-3.1.7", "des": "A simple cache implementation backed by a concurrent map.", "code": "public class StandardScopeCache extends Object implements ScopeCache {\n\tCollection<Object> clear(); // Clears the cache and returns all objects in an unmodifiable collection.\n\tObject get(String name); // Gets the named object from the cache.\n\tObject put(String name, Object value); // Put a value in the cache if the key is not already used.\n\tObject remove(String name); // Removes the object with this name from the cache.\n}"}
{"index": 2934, "repo": "tink-1.10.0", "des": "This key manager generates new AesCtrKey keys and produces new instances of AesCtrJceCipher.", "code": "Class AesCtrKeyManager {\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<AesCtrKeyFormat,AesCtrKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tAesCtrKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(AesCtrKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 2885, "repo": "amqp-client-5.18.0", "des": "Helper to create OAuth2ClientCredentialsGrantCredentialsProvider instances.", "code": "Class OAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder {\n\tOAuth2ClientCredentialsGrantCredentialsProvider build(); // Create the OAuth2ClientCredentialsGrantCredentialsProvider instance.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder clientId(String clientId); // Set the OAuth 2 client ID\n\tOAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder clientSecret(String clientSecret); // Set the secret (password) to use to get a token.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder connectionConfigurator(Consumer<HttpURLConnection> connectionConfigurator); // A hook to configure the HttpURLConnection before the request is sent.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder grantType(String grantType); // Set the grant type to use when requesting the token.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder parameter(String name, String value); // Extra parameters to pass in the request.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.TlsConfiguration tls(); // Get access to the TLS configuration to get the token on HTTPS.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder tokenEndpointUri(String tokenEndpointUri); // Set the URI to request to get the token.\n}"}
{"index": 16914, "repo": "spring-integration-ip-6.1.2", "des": "Base class for TCP Connection Support implementations.", "code": "public abstract class AbstractTcpConnectionSupport extends Object {\n\tint getPushbackBufferSize();\n\tboolean isPushbackCapable();\n\tvoid setPushbackBufferSize(int pushbackBufferSize); // The size of the push back buffer; defaults to 1.\n\tvoid setPushbackCapable(boolean pushbackCapable); // Set to true to cause wrapping of the connection's input stream in a PushbackInputStream, enabling deserializers to \"unread\" data.\n}"}
{"index": 13580, "repo": "spring-messaging-6.0.11", "des": "A base class for working with message headers in simple messaging protocols that support basic messaging patterns.", "code": "public class SimpMessageHeaderAccessor extends NativeMessageHeaderAccessor {\n\tstatic SimpMessageHeaderAccessor create(); // Create an instance with SimpMessageType MESSAGE.\n\tstatic SimpMessageHeaderAccessor create(SimpMessageType messageType); // Create an instance with the given SimpMessageType.\n\tprotected MessageHeaderAccessor createAccessor(Message<?> message); // Build a 'nested' accessor for the given message.\n\tString getDestination();\n\tstatic String getDestination(Map<String,Object> headers);\n\tString getDetailedLogMessage(Object payload); // Return a more detailed message for logging purposes.\n\tstatic long[] getHeartbeat(Map<String,Object> headers);\n\tSimpMessageType getMessageType();\n\tstatic SimpMessageType getMessageType(Map<String,Object> headers);\n\tMap<String,Object> getSessionAttributes(); // Return the attributes associated with the current session.\n\tstatic Map<String,Object> getSessionAttributes(Map<String,Object> headers);\n\tString getSessionId(); // Return the id of the current session.\n\tstatic String getSessionId(Map<String,Object> headers);\n\tString getShortLogMessage(Object payload); // Return a concise message for logging purposes.\n\tString getSubscriptionId();\n\tstatic String getSubscriptionId(Map<String,Object> headers);\n\tPrincipal getUser(); // Return the user associated with the current session.\n\tstatic Principal getUser(Map<String,Object> headers);\n\tvoid setDestination(String destination);\n\tvoid setMessageTypeIfNotSet(SimpMessageType messageType);\n\tvoid setSessionAttributes(Map<String,Object> attributes); // A static alternative for access to the session attributes header.\n\tvoid setSessionId(String sessionId);\n\tvoid setSubscriptionId(String subscriptionId);\n\tvoid setUser(Principal principal);\n\tvoid setUserChangeCallback(Consumer<Principal> callback); // Provide a callback to be invoked if and when setUser(Principal) is called.\n\tstatic SimpMessageHeaderAccessor wrap(Message<?> message); // Create an instance from the payload and headers of the given Message.\n}"}
{"index": 14419, "repo": "wicket-core-10.0.0-M1", "des": "A store that serializes all pages before delegating and vice versa.", "code": "public class SerializingPageStore extends DelegatingPageStore {\n\tvoid addPage(IPageContext context, IManageablePage page); // Stores the page-\n\tboolean canBeAsynchronous(IPageContext context); // Supports asynchronous add if the delegate supports it.\n\tIManageablePage getPage(IPageContext context, int id); // Restores a page from storage.\n\tboolean supportsVersioning(); // Versioning is supported, since pages are always serialized.\n}"}
{"index": 6225, "repo": "jackson-databind-2.15.2", "des": "Helper object used for handling registration on resolving of super-types to sub-types.", "code": "Class SubtypeResolver {\n\tCollection<NamedType> collectAndResolveSubtypesByClass(MapperConfig<?> config, AnnotatedClass baseType); // Method for finding out all reachable subtypes for given type, such that access is by type, typically needed for serialization (converting from type to type name).\n\tCollection<NamedType> collectAndResolveSubtypesByClass(MapperConfig<?> config, AnnotatedMember property, JavaType baseType); // Method for finding out all reachable subtypes for a property specified by given element (method or field), such that access is by type, typically needed for serialization (converting from type to type name).\n\tCollection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config, AnnotatedClass baseType); // Method for finding out all reachable subtypes for given type, such that access is by type id, typically needed for deserialization (converting from type id to type).\n\tCollection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config, AnnotatedMember property, JavaType baseType); // Method for finding out all reachable subtypes for a property specified by given element (method or field), such that access is by type id, typically needed for deserialization (converting from type id to type).\n\tSubtypeResolver copy(); // Method called by ObjectMapper.copy() to make sure that SubtypeResolver instances used by two independent mappers can not cause thread-safety issues: if resolver is immutable, it may return this, but if not, it should create a copy with same configuration and return that instead.\n\tabstract void registerSubtypes(Class<?>... classes);\n\tabstract void registerSubtypes(Collection<Class<?>> subtypes);\n\tabstract void registerSubtypes(NamedType... types); // Method for registering specified subtypes (possibly including type names); for type entries without name, non-qualified class name as used as name (unless overridden by annotation).\n}"}
{"index": 7238, "repo": "calcite-core-1.34.0", "des": "Definition of the MAP constructor, MAP [<key>, <value>, .", "code": "Class SqlMapValueConstructor {\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks that the operand values in a SqlCall to this operator are valid.\n\tRelDataType inferReturnType(SqlOperatorBinding opBinding); // Infers the return type of an invocation of this operator; only called after the number and types of operands have already been validated.\n}"}
{"index": 6319, "repo": "mina-core-3.0.0-M2", "des": "A IoHandler event to be submitted to an IoHandlerExecutor.", "code": "Interface Event {\n\tIoSession getSession(); // The session of this event.\n\tvoid visit(EventVisitor visitor); // Call the visitor method for this kind of event.\n}"}
{"index": 3504, "repo": "mahout-mr-0.13.0", "des": "Class containing implementations of the three major HMM algorithms: forward, backward and Viterbi.", "code": "Class HmmAlgorithms {\n\tstatic Matrix backwardAlgorithm(HmmModel model, int[] observations, boolean scaled); // External function to compute a matrix of beta factors\n\tstatic Matrix forwardAlgorithm(HmmModel model, int[] observations, boolean scaled); // External function to compute a matrix of alpha factors\n\tstatic int[] viterbiAlgorithm(HmmModel model, int[] observations, boolean scaled); // Viterbi algorithm to compute the most likely hidden sequence for a given model and observed sequence\n}"}
{"index": 6429, "repo": "exoplayer-core-2.9.6", "des": "Receives broadcast events indicating changes to the device's audio capabilities, notifying a AudioCapabilitiesReceiver.", "code": "Class AudioCapabilitiesReceiver {\n\tAudioCapabilities register(); // Registers the receiver, meaning it will notify the listener when audio capability changes occur.\n\tvoid unregister(); // Unregisters the receiver, meaning it will no longer notify the listener when audio capability changes occur.\n}"}
{"index": 11261, "repo": "spring-context-6.0.11", "des": "Implementation of the CacheOperationSource interface for working with caching metadata in annotation format.", "code": "public class AnnotationCacheOperationSource extends AbstractFallbackCacheOperationSource implements Serializable {\n\tprotected boolean allowPublicMethodsOnly(); // By default, only public methods can be made cacheable.\n\tprotected Collection<CacheOperation> determineCacheOperations(AnnotationCacheOperationSource.CacheOperationProvider provider); // Determine the cache operation(s) for the given AnnotationCacheOperationSource.CacheOperationProvider.\n\tboolean equals(Object other);\n\tprotected Collection<CacheOperation> findCacheOperations(Class<?> clazz); // Subclasses need to implement this to return the caching attribute for the given class, if any.\n\tprotected Collection<CacheOperation> findCacheOperations(Method method); // Subclasses need to implement this to return the caching attribute for the given method, if any.\n\tboolean isCandidateClass(Class<?> targetClass); // Determine whether the given class is a candidate for cache operations in the metadata format of this CacheOperationSource.\n}"}
{"index": 789, "repo": "ignite-core-2.15.0", "des": "Class provides implementation for job result.", "code": "Class GridJobResultImpl {\n\tvoid clearData(); // Clears stored job data.\n\tObject getData(); // Gets data returned by remote job if it didn't fail.\n\tIgniteException getException(); // Gets exception produced by execution of remote job, or null if remote execution finished normally and did not produce any exceptions.\n\tComputeJob getJob(); // Gets local instance of remote job returned by ComputeTask.map(List, Object) method.\n\tComputeJobContext getJobContext(); // Gets job context.\n\tClusterNode getNode(); // Gets node this job executed on.\n\tGridJobSiblingImpl getSibling();\n\tboolean hasResponse();\n\tboolean isCancelled(); // Gets job cancellation status.\n\tboolean isOccupied();\n\tvoid onResponse(@Nullable Object data, @Nullable IgniteException ex, @Nullable Map<Object,Object> jobAttrs, boolean isCancelled);\n\tvoid resetResponse();\n\tvoid setNode(ClusterNode node);\n\tvoid setOccupied(boolean isOccupied);\n}"}
{"index": 1401, "repo": "pdfbox-3.0.0-beta1", "des": "b Close, fill and stroke the path with non-zero winding rule.", "code": "Class CloseFillNonZeroAndStrokePath {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> operands); // Process the operator.\n}"}
{"index": 5846, "repo": "hadoop-yarn-server-common-3.3.6", "des": "The protocol between an TimelineCollectorManager and a NodeManager to report a new application collector get launched.", "code": "Interface CollectorNodemanagerProtocol {\n\tGetTimelineCollectorContextResponse getTimelineCollectorContext(GetTimelineCollectorContextRequest request); // The collector needs to get the context information including user, flow and flow run ID to associate with every incoming put-entity requests.\n\tReportNewCollectorInfoResponse reportNewCollectorInfo(ReportNewCollectorInfoRequest request); // The TimelineCollectorManager provides a list of mapping between application and collector's address in ReportNewCollectorInfoRequest to a NodeManager to register collector's info, include: applicationId and REST URI to access collector.\n}"}
{"index": 4775, "repo": "hadoop-common-3.3.4", "des": "Authenticator wrapper that enhances an Authenticator with Delegation Token support.", "code": "Class DelegationTokenAuthenticator {\n\tvoid authenticate(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token);\n\tvoid cancelDelegationToken(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token, Token<AbstractDelegationTokenIdentifier> dToken); // Cancels a delegation token from the server end-point.\n\tvoid cancelDelegationToken(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token, Token<AbstractDelegationTokenIdentifier> dToken, String doAsUser); // Cancels a delegation token from the server end-point.\n\tToken<AbstractDelegationTokenIdentifier> getDelegationToken(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token, String renewer); // Requests a delegation token using the configured Authenticator for authentication.\n\tToken<AbstractDelegationTokenIdentifier> getDelegationToken(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token, String renewer, String doAsUser); // Requests a delegation token using the configured Authenticator for authentication.\n\tlong renewDelegationToken(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token, Token<AbstractDelegationTokenIdentifier> dToken); // Renews a delegation token from the server end-point using the configured Authenticator for authentication.\n\tlong renewDelegationToken(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token, Token<AbstractDelegationTokenIdentifier> dToken, String doAsUser); // Renews a delegation token from the server end-point using the configured Authenticator for authentication.\n\tvoid setConnectionConfigurator(org.apache.hadoop.security.authentication.client.ConnectionConfigurator configurator);\n}"}
{"index": 389, "repo": "phoenix-core-5.1.3", "des": "Node representing a not equal expression (!=,<>) in SQL.", "code": "Class NotEqualParseNode {\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getFilterOp(); // Return the comparison operator associated with the given comparison expression node\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getInvertFilterOp(); // Return the inverted operator for the CompareOp\n}"}
{"index": 1854, "repo": "hadoop-hdfs-3.3.6", "des": "This class implements the logic to track decommissioning and entering maintenance nodes, ensure all their blocks are adequately replicated before they are moved to the decommissioned or maintenance state.", "code": "Class DatanodeAdminBackoffMonitor {\n\tint getBlocksPerLock();\n\tint getNumNodesChecked();\n\tint getPendingRepLimit();\n\tint getTrackedNodeCount();\n\tprotected void processConf(); // Abstract method which must be implemented by the sub-classes to process set various instance variables from the Configuration passed at object creation time.\n\tvoid run();\n\tvoid setBlocksPerLock(int blocksPerLock);\n\tvoid setPendingRepLimit(int pendingRepLimit);\n\tvoid stopTrackingNode(org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor dn); // Queue a node to be removed from tracking.\n}"}
{"index": 4894, "repo": "hadoop-common-3.3.4", "des": "Write key/value pairs to a sequence-format file.", "code": "Class SequenceFile.Writer {\n\tvoid append(Object key, Object val); // Append a key/value pair.\n\tvoid append(Writable key, Writable val); // Append a key/value pair.\n\tstatic SequenceFile.Writer.Option appendIfExists(boolean value);\n\tvoid appendRaw(byte[] keyData, int keyOffset, int keyLength, SequenceFile.ValueBytes val);\n\tstatic SequenceFile.Writer.Option blockSize(long value);\n\tstatic SequenceFile.Writer.Option bufferSize(int value);\n\tvoid close(); // Close the file.\n\tstatic SequenceFile.Writer.Option compression(SequenceFile.CompressionType value);\n\tstatic SequenceFile.Writer.Option compression(SequenceFile.CompressionType value, CompressionCodec codec);\n\tstatic SequenceFile.Writer.Option file(Path value);\n\tvoid flush();\n\tCompressionCodec getCompressionCodec(); // Returns the compression codec of data in this file.\n\tClass getKeyClass(); // Returns the class of keys in this file.\n\tlong getLength(); // Returns the current length of the output file.\n\tClass getValueClass(); // Returns the class of values in this file.\n\tboolean hasCapability(String capability); // Query the stream for a specific capability.\n\tvoid hflush(); // Flush out the data in client's user buffer.\n\tvoid hsync(); // Similar to posix fsync, flush out the data in client's user buffer all the way to the disk device (but the disk may have it in its cache).\n\tstatic SequenceFile.Writer.Option keyClass(Class<?> value);\n\tstatic SequenceFile.Writer.Option metadata(SequenceFile.Metadata value);\n\tstatic SequenceFile.Writer.Option progressable(Progressable value);\n\tstatic SequenceFile.Writer.Option replication(short value);\n\tstatic SequenceFile.Writer.Option stream(FSDataOutputStream value);\n\tvoid sync(); // create a sync point\n\tstatic SequenceFile.Writer.Option syncInterval(int value);\n\tstatic SequenceFile.Writer.Option valueClass(Class<?> value);\n}"}
{"index": 17097, "repo": "spring-integration-core-6.1.2", "des": "An implementation of the ResourceHolder which holds an instance of the current Message and the synchronization resource.", "code": "public class IntegrationResourceHolder extends Object implements org.springframework.transaction.support.ResourceHolder {\n\tvoid addAttribute(String key, Object value); // Add attribute to this ResourceHolder instance.\n\tMap<String,Object> getAttributes(); // Will return an immutable Map of current attributes.\n\torg.springframework.messaging.Message<?> getMessage();\n\tboolean isVoid();\n\tvoid reset();\n\tvoid setMessage(org.springframework.messaging.Message<?> message);\n\tvoid unbound();\n}"}
{"index": 5331, "repo": "druid-processing-26.0.0", "des": "Wraps a BaseLongColumnValueSelector and writes individual values into rframe rows.", "code": "Class LongFieldWriter {\n\tvoid close(); // Releases resources held by this writer.\n\tstatic long detransform(long bits); // Reverse the transform(long) function.\n\tstatic long transform(long n); // Transforms a long into a form where it can be compared as unsigned bytes without decoding.\n\tlong writeTo(org.apache.datasketches.memory.WritableMemory memory, long position, long maxSize); // Writes the current selection at the given memory position.\n}"}
{"index": 11373, "repo": "spring-context-6.0.11", "des": "Strategy interface for processing Lifecycle beans within the ApplicationContext.", "code": "public interface LifecycleProcessor extends Lifecycle {\n\tvoid onClose(); // Notification of context close phase, e.g.\n\tvoid onRefresh(); // Notification of context refresh, e.g.\n}"}
{"index": 3469, "repo": "mahout-mr-0.13.0", "des": "A Recommender which caches the results from another Recommender in memory.", "code": "Class CachingRecommender {\n\tvoid clear(); // Clears all cached recommendations.\n\tvoid clear(long userID); // Clears cached recommendations for the given user.\n\tfloat estimatePreference(long userID, long itemID);\n\tDataModel getDataModel();\n\tList<RecommendedItem> recommend(long userID, int howMany);\n\tList<RecommendedItem> recommend(long userID, int howMany, boolean includeKnownItems);\n\tList<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer);\n\tList<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems);\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n\tvoid removePreference(long userID, long itemID);\n\tvoid setCurrentlyIncludeKnownItems(boolean currentlyIncludeKnownItems);\n\tvoid setPreference(long userID, long itemID, float value);\n}"}
{"index": 11683, "repo": "spring-cloud-commons-3.1.7", "des": "Base class for factories which produce circuit breakers.", "code": "public abstract class AbstractCircuitBreakerFactory<CONF,CONFB extends ConfigBuilder<CONF>> extends Object {\n\tprotected abstract CONFB configBuilder(String id); // Creates a configuration builder for the given id.\n\tvoid configure(Consumer<CONFB> consumer, String... ids); // Adds configurations for circuit breakers.\n\tabstract void configureDefault(Function<String,CONF> defaultConfiguration); // Sets the default configuration for circuit breakers.\n\tprotected ConcurrentHashMap<String,CONF> getConfigurations(); // Gets the configurations for the circuit breakers.\n}"}
{"index": 5327, "repo": "druid-processing-26.0.0", "des": "Unsafe for concurrent use from multiple threads.", "code": "Class LongColumnSerializer {\n\tstatic LongColumnSerializer create(String columnName, SegmentWriteOutMedium segmentWriteOutMedium, String filenameBase, CompressionStrategy compression, CompressionFactory.LongEncodingStrategy encoding);\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid open();\n\tvoid serialize(ColumnValueSelector<?> selector);\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 10066, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Convenient base class for object which needs spring task scheduler, task executor and life cycle handling.", "code": "Class LifecycleObjectSupport {\n\tvoid afterPropertiesSet();\n\tprotected void doStart(); // Subclasses may implement this method with the start behavior.\n\tprotected void doStop(); // Subclasses may implement this method with the stop behavior.\n\tprotected BeanFactory getBeanFactory(); // Gets the BeanFactory for this instance.\n\tint getPhase();\n\tprotected TaskExecutor getTaskExecutor(); // Gets the defined TaskExecutor.\n\tprotected TaskScheduler getTaskScheduler(); // Gets the defined TaskScheduler.\n\tYarnEventPublisher getYarnEventPublisher(); // Gets the yarn event publisher.\n\tboolean isAutoStartup();\n\tboolean isRunning();\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setAutoStartup(boolean autoStartup); // Sets the auto startup.\n\tvoid setBeanFactory(BeanFactory beanFactory);\n\tvoid setPhase(int phase); // Sets the phase.\n\tvoid setTaskExecutor(TaskExecutor taskExecutor); // Sets the used TaskExecutor.\n\tvoid setTaskScheduler(TaskScheduler taskScheduler); // Sets the used TaskScheduler.\n\tvoid setYarnEventPublisher(YarnEventPublisher yarnEventPublisher); // Sets the yarn event publisher.\n\tvoid start();\n\tvoid stop();\n\tvoid stop(Runnable callback);\n}"}
{"index": 16011, "repo": "wicket-util-10.0.0-M1", "des": "An output stream which triggers an event when a specified number of bytes of data have been written to it.", "code": "public abstract class ThresholdingOutputStream extends OutputStream {\n\tprotected void checkThreshold(int count); // Checks to see if writing the specified number of bytes would cause the configured threshold to be exceeded.\n\tvoid close(); // Closes this output stream and releases any system resources associated with this stream.\n\tvoid flush(); // Flushes this output stream and forces any buffered output bytes to be written out.\n\tlong getByteCount(); // Returns the number of bytes that have been written to this output stream.\n\tprotected abstract OutputStream getStream(); // Returns the underlying output stream, to which the corresponding OutputStream methods in this class will ultimately delegate.\n\tint getThreshold(); // Returns the threshold, in bytes, at which an event will be triggered.\n\tboolean isThresholdExceeded(); // Determines whether or not the configured threshold has been exceeded for this output stream.\n\tprotected abstract void thresholdReached(); // Indicates that the configured threshold has been reached, and that a subclass should take whatever action necessary on this event.\n\tvoid write(byte[] b); // Writes b.length bytes from the specified byte array to this output stream.\n\tvoid write(byte[] b, int off, int len); // Writes len bytes from the specified byte array starting at offset off to this output stream.\n\tvoid write(int b); // Writes the specified byte to this output stream.\n}"}
{"index": 2070, "repo": "hive-exec-4.0.0-alpha-2", "des": "GenericUDAFBloomFilterEvaluator - Evaluator class for BloomFilter.", "code": "Class GenericUDAFBloomFilter.GenericUDAFBloomFilterEvaluator {\n\tint estimate(); // Although similar to AbstractAggregationBuffer::estimate(), it differs from it in 2 aspects 1) This avoids creation of AggregationBuffer which may result in large memory allocation 2) This is used only while compiling query as oppose to AbstractAggregationBuffer version which may be used in both runtime as well as compile time.\n\tlong getExpectedEntries();\n\tString getExprString(); // Optional information to add to expression string.\n\tfloat getFactor();\n\tlong getMinEntries();\n\tGenericUDAFEvaluator.AggregationBuffer getNewAggregationBuffer(); // Get a new aggregation object.\n\tOperator<?> getSourceOperator();\n\tboolean hasHintEntries();\n\tObjectInspector init(GenericUDAFEvaluator.Mode m, ObjectInspector[] parameters); // Initialize the evaluator.\n\tvoid iterate(GenericUDAFEvaluator.AggregationBuffer agg, Object[] parameters); // Iterate through original data.\n\tvoid merge(GenericUDAFEvaluator.AggregationBuffer agg, Object partial); // Merge with partial aggregation result.\n\tvoid reset(GenericUDAFEvaluator.AggregationBuffer agg); // Reset the aggregation.\n\tvoid setFactor(float factor);\n\tvoid setHintEntries(long hintEntries);\n\tvoid setMaxEntries(long maxEntries);\n\tvoid setMinEntries(long minEntries);\n\tvoid setSourceOperator(SelectOperator sourceOperator);\n\tObject terminate(GenericUDAFEvaluator.AggregationBuffer agg); // Get final aggregation result.\n\tObject terminatePartial(GenericUDAFEvaluator.AggregationBuffer agg); // Get partial aggregation result.\n}"}
{"index": 11523, "repo": "spring-cloud-task-core-3.0.3", "des": "Default implementation of the TaskConfigurer interface.", "code": "public class DefaultTaskConfigurer extends Object implements TaskConfigurer {\n\tDataSource getTaskDataSource(); // Retrieves the DataSource that will be used for task operations.\n\tTaskExplorer getTaskExplorer(); // Create a TaskExplorer for the task.\n\tTaskRepository getTaskRepository(); // Create a TaskRepository for the Task.\n\torg.springframework.transaction.PlatformTransactionManager getTransactionManager(); // Create a PlatformTransactionManager for use with the TaskRepository.\n}"}
{"index": 8540, "repo": "commons-io-2.13.0", "des": "Builds a new MessageDigestCalculatingInputStream instance.", "code": "Class MessageDigestCalculatingInputStream.Builder {\n\tMessageDigestCalculatingInputStream get(); // Constructs a new instance.\n\tvoid setMessageDigest(MessageDigest messageDigest); // Sets the message digest.\n\tvoid setMessageDigest(String algorithm); // Sets the name of the name of the message digest algorithm.\n}"}
{"index": 1238, "repo": "ignite-core-2.15.0", "des": "Inline index key implementation for inlining TimeIndexKey values.", "code": "Class TimeInlineIndexKeyType {\n\tint compare0(long pageAddr, int off, IndexKey key); // Compares inlined and given value.\n\tprotected TimeIndexKey get0(long pageAddr, int off); // Restores value from inline.\n\tprotected int inlineSize0(TimeIndexKey key); // Return inlined size for specified key.\n\tprotected int put0(long pageAddr, int off, TimeIndexKey key, int maxSize); // Puts given value into inline index tree.\n}"}
{"index": 4447, "repo": "beam-sdks-java-core-2.49.0", "des": "Enumerates the possibilities for the timing of this pane firing related to the input and output watermarks for its computation.", "code": "Enum PaneInfo.Timing {\n\tstatic PaneInfo.Timing valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic PaneInfo.Timing[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10678, "repo": "groovy-all-4.0.13", "des": "This class provides helper methods to determine the type from a widening operation for example for a plus operation.", "code": "public class WideningCategories extends Object {\n\tstatic boolean implementsInterfaceOrSubclassOf(ClassNode source, ClassNode targetType); // Determines if the source class implements an interface or subclasses the target type.\n\tstatic boolean isBigDecCategory(ClassNode type); // It is of a BigDecimal category, if the provided type is a BigInteger category or a BigDecimal.\n\tstatic boolean isBigIntCategory(ClassNode type); // It is of a BigInteger category, if the provided type is a long category or a BigInteger.\n\tstatic boolean isDouble(ClassNode type); // Used to check if a type is a double or Double.\n\tstatic boolean isDoubleCategory(ClassNode type); // It is of a double category, if the provided type is a BigDecimal, a float, double.\n\tstatic boolean isFloat(ClassNode type); // Used to check if a type is a float or Float.\n\tstatic boolean isFloatingCategory(ClassNode type); // It is of a floating category, if the provided type is a float, double.\n\tstatic boolean isInt(ClassNode type); // Used to check if a type is an int or Integer.\n\tstatic boolean isIntCategory(ClassNode type); // It is of an int category, if the provided type is a byte, char, short, int.\n\tstatic boolean isLongCategory(ClassNode type); // It is of a long category, if the provided type is a long, its wrapper or if it is a long category.\n\tstatic boolean isNumberCategory(ClassNode type);\n\tstatic ClassNode lowestUpperBound(List<ClassNode> nodes); // Given a list of class nodes, returns the first common supertype.\n\tstatic ClassNode lowestUpperBound(ClassNode a, ClassNode b); // Given two class nodes, returns the first common supertype, or the class itself if there are equal.\n}"}
{"index": 18713, "repo": "opennlp-tools-2.2.0", "des": "An abstract, basic implementation of a model reader.", "code": "Class AbstractModelReader {\n\tabstract void checkModelType(); // Checks the model type via the the underlying DataReader.\n\tabstract AbstractModel constructModel(); // Constructs a model.\n\tAbstractModel getModel();\n\tdouble readDouble(); // Implement as needed for the format the model is stored in.\n\tint readInt(); // Implement as needed for the format the model is stored in.\n\tString readUTF(); // Implement as needed for the format the model is stored in.\n}"}
{"index": 17365, "repo": "groovy-4.0.13", "des": "A MetaMethod implementation where the underlying method is really a static helper method on some class but it appears to be an instance method on a class.", "code": "public class NewInstanceMetaMethod extends NewMetaMethod {\n\tint getModifiers(); // Returns the modifiers for this method\n\tObject invoke(Object object, Object[] arguments); // Invoke this method\n\tboolean isStatic(); // Returns whether this method is static.\n}"}
{"index": 16480, "repo": "spring-batch-infrastructure-5.0.2", "des": "ItemWriter that is using a JPA EntityManagerFactory to merge any Entities that aren't part of the persistence context.", "code": "public class JpaItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Check mandatory properties - there must be an entityManagerFactory.\n\tprotected void doWrite(jakarta.persistence.EntityManager entityManager, Chunk<? extends T> items); // Do perform the actual write operation.\n\tvoid setEntityManagerFactory(jakarta.persistence.EntityManagerFactory entityManagerFactory); // Set the EntityManager to be used internally.\n\tvoid setUsePersist(boolean usePersist); // Set whether the EntityManager should perform a persist instead of a merge.\n\tvoid write(Chunk<? extends T> items); // Merge all provided items that aren't already in the persistence context and then flush the entity manager.\n}"}
{"index": 5822, "repo": "iceberg-core-1.3.0", "des": "Visitor class that accumulates the set of changes needed to evolve an existing schema into the union of the existing and a new schema.", "code": "Class UnionByNameVisitor {\n\tjava.lang.Boolean field(org.apache.iceberg.types.Types.NestedField field, java.lang.Integer partnerId, java.lang.Boolean isFieldMissing);\n\tjava.lang.Boolean list(org.apache.iceberg.types.Types.ListType list, java.lang.Integer partnerId, java.lang.Boolean isElementMissing);\n\tjava.lang.Boolean map(org.apache.iceberg.types.Types.MapType map, java.lang.Integer partnerId, java.lang.Boolean isKeyMissing, java.lang.Boolean isValueMissing);\n\tjava.lang.Boolean primitive(org.apache.iceberg.types.Type.PrimitiveType primitive, java.lang.Integer partnerId);\n\tjava.lang.Boolean struct(org.apache.iceberg.types.Types.StructType struct, java.lang.Integer partnerId, java.util.List<java.lang.Boolean> missingPositions);\n\tstatic void visit(org.apache.iceberg.UpdateSchema api, org.apache.iceberg.Schema existingSchema, org.apache.iceberg.Schema newSchema); // Adds changes needed to produce a union of two schemas to an UpdateSchema operation.\n\tstatic void visit(org.apache.iceberg.UpdateSchema api, org.apache.iceberg.Schema existingSchema, org.apache.iceberg.Schema newSchema, boolean caseSensitive); // Adds changes needed to produce a union of two schemas to an UpdateSchema operation.\n}"}
{"index": 7952, "repo": "commons-jcs3-core-3.1", "des": "It's not entirely clear that this interface is needed.", "code": "Interface IRemoteHttpCacheClient<K,V> {\n\tvoid initialize(RemoteHttpCacheAttributes attributes); // The provides an extension point.\n\tboolean isAlive(); // Make and alive request.\n}"}
{"index": 8555, "repo": "commons-io-2.13.0", "des": "A Proxy stream which acts as expected, that is it passes the method calls on to the proxied stream and doesn't change which methods are being called.", "code": "Class ProxyReader {\n\tprotected void afterRead(int n); // Invoked by the read methods after the proxied call has returned successfully.\n\tprotected void beforeRead(int n); // Invoked by the read methods before the call is proxied.\n\tvoid close(); // Invokes the delegate's close() method.\n\tprotected void handleIOException(IOException e); // Handle any IOExceptions thrown.\n\tvoid mark(int idx); // Invokes the delegate's mark(int) method.\n\tboolean markSupported(); // Invokes the delegate's markSupported() method.\n\tint read(); // Invokes the delegate's read() method.\n\tint read(char[] chr); // Invokes the delegate's read(char[]) method.\n\tint read(char[] chr, int st, int len); // Invokes the delegate's read(char[], int, int) method.\n\tint read(CharBuffer target); // Invokes the delegate's read(CharBuffer) method.\n\tboolean ready(); // Invokes the delegate's ready() method.\n\tvoid reset(); // Invokes the delegate's reset() method.\n\tlong skip(long ln); // Invokes the delegate's skip(long) method.\n}"}
{"index": 13780, "repo": "spring-webmvc-6.0.11", "des": "Represents a function that evaluates on a given ServerRequest.", "code": "@FunctionalInterface public interface RequestPredicate {\n\tdefault void accept(RequestPredicates.Visitor visitor); // Accept the given visitor.\n\tdefault RequestPredicate and(RequestPredicate other); // Return a composed request predicate that tests against both this predicate AND the other predicate.\n\tdefault RequestPredicate negate(); // Return a predicate that represents the logical negation of this predicate.\n\tdefault Optional<ServerRequest> nest(ServerRequest request); // Transform the given request into a request used for a nested route.\n\tdefault RequestPredicate or(RequestPredicate other); // Return a composed request predicate that tests against both this predicate OR the other predicate.\n\tboolean test(ServerRequest request); // Evaluate this predicate on the given request.\n}"}
{"index": 3103, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "Java linked list iterator interface is convoluted, and moreover concurrent modifications of the same list by multiple iterators are impossible.", "code": "Class DiskRangeList {\n\tboolean equals(Object other);\n\tlong getTotalLength();\n\tboolean hasContiguousNext();\n\tDiskRangeList insertAfter(DiskRangeList other); // Inserts an element after current in the list.\n\tDiskRangeList insertPartAfter(DiskRangeList other); // Inserts an intersecting range after current in the list and adjusts offset accordingly.\n\tDiskRangeList insertPartBefore(DiskRangeList other); // Inserts an intersecting range before current in the list and adjusts offset accordingly.\n\tint listSize();\n\tDiskRangeList[] listToArray();\n\tvoid removeAfter(); // Removes an element after current from the list.\n\tvoid removeSelf(); // Removes the current element from the list.\n\tDiskRangeList replaceSelfWith(DiskRangeList other); // Replaces this element with another in the list; returns the new element.\n\tvoid setEnd(long newEnd);\n\tDiskRangeList split(long cOffset); // Splits current element in the list, using DiskRange::slice.\n\tstatic String stringifyDiskRanges(DiskRangeList range);\n}"}
{"index": 12575, "repo": "spring-jdbc-6.0.11", "des": "SQL Server specific implementation for the CallMetaDataProvider interface.", "code": "public class SqlServerCallMetaDataProvider extends GenericCallMetaDataProvider {\n\tboolean byPassReturnParameter(String parameterName); // Should we bypass the return parameter with the specified name.\n\tString parameterNameToUse(String parameterName); // Provide any modification of the column name passed in to match the meta-data currently used.\n}"}
{"index": 16230, "repo": "spring-data-cassandra-4.1.2", "des": "NamingStrategy that applies a transformation Function after invoking a delegate NamingStrategy.", "code": "public class TransformingNamingStrategy extends Object implements NamingStrategy {\n\tString getColumnName(CassandraPersistentProperty property); // Create a column name from the given property.\n\tString getTableName(CassandraPersistentEntity<?> entity); // Create a table name from the given CassandraPersistentEntity.\n\tString getUserDefinedTypeName(CassandraPersistentEntity<?> entity); // Create a user-defined type name from the given CassandraPersistentEntity.\n}"}
{"index": 18613, "repo": "hibernate-core-5.6.15.Final", "des": "Contract describing source of \"table specification\" information.", "code": "Interface TableSpecificationSource {\n\tjava.lang.String getComment();\n\tjava.lang.String getExplicitCatalogName(); // Obtain the supplied catalog name\n\tjava.lang.String getExplicitSchemaName(); // Obtain the supplied schema name\n}"}
{"index": 18241, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Information about the first-level (session) cache for a particular session instance", "code": "Interface SessionStatistics {\n\tint getCollectionCount(); // Get the number of collection instances associated with the session\n\tjava.util.Set getCollectionKeys(); // Get the set of all CollectionKeys\n\tint getEntityCount(); // Get the number of entity instances associated with the session\n\tjava.util.Set getEntityKeys(); // Get the set of all EntityKeys\n}"}
{"index": 5271, "repo": "druid-processing-26.0.0", "des": "Scaffolding for a 2 argument Function which accepts one array and one scalar input and adds the scalar input to the array in some way.", "code": "Class Function.ArrayAddElementFunction {\n\tExpressionType getOutputType(Expr.InputBindingInspector inspector, List<Expr> args); // Compute the output type of this function for a given set of argument expression inputs.\n\tboolean hasArrayOutput(); // Returns true if function produces an array.\n}"}
{"index": 10984, "repo": "spring-data-redis-3.1.2", "des": "Configuration class used for setting up RedisConnection via RedisConnectionFactory using connecting to Redis Sentinel(s).", "code": "public class RedisSentinelConfiguration extends Object implements RedisConfiguration, RedisConfiguration.SentinelConfiguration {\n\tvoid addSentinel(RedisNode sentinel); // Add sentinel.\n\tboolean equals(Object o);\n\tint getDatabase(); // Get the database index to use.\n\tNamedNode getMaster(); // Get the Sentinel master node.\n\tRedisPassword getPassword(); // Get the RedisPassword to use when connecting.\n\tRedisPassword getSentinelPassword(); // Returns the RedisPassword to use when connecting to a Redis Sentinel.\n\tSet<RedisNode> getSentinels(); // Returns an Collections.unmodifiableSet(Set) of Sentinels.\n\tString getSentinelUsername(); // Get the username to use when connecting.\n\tString getUsername(); // Get the username to use when connecting.\n\tRedisSentinelConfiguration master(String master);\n\tRedisSentinelConfiguration master(NamedNode master);\n\tRedisSentinelConfiguration sentinel(String host, Integer port);\n\tRedisSentinelConfiguration sentinel(RedisNode sentinel);\n\tvoid setDatabase(int index); // Set the database index to use.\n\tvoid setMaster(NamedNode master); // Set the master node.\n\tvoid setPassword(RedisPassword password); // Create and set a RedisPassword for given String.\n\tvoid setSentinelPassword(RedisPassword sentinelPassword); // Set a RedisPassword to be used when authenticating with Redis Sentinel.\n\tvoid setSentinels(Iterable<RedisNode> sentinels); // Set Sentinels to connect to.\n\tvoid setSentinelUsername(String sentinelUsername); // Create and set a username with the given String.\n\tvoid setUsername(String username); // Create and set a username with the given String.\n}"}
{"index": 14661, "repo": "spring-data-commons-3.1.2", "des": "Default implementation for AuditingConfiguration.", "code": "public class AnnotationAuditingConfiguration extends Object implements AuditingConfiguration {\n\tString getAuditorAwareRef(); // Returns the bean name of the AuditorAware instance to be used..\n\tString getDateTimeProviderRef(); // Returns the bean name of the DateTimeProvider to be used.\n\tboolean isModifyOnCreate(); // Returns whether the entity shall be marked as modified on creation.\n\tboolean isSetDates(); // Returns whether the creation and modification dates shall be set.\n}"}
{"index": 3742, "repo": "kafka-streams-3.5.0", "des": "The fixed-size time-based window specifications used for aggregations.", "code": "Class TimeWindows {\n\tTimeWindows advanceBy(Duration advance); // Return a window definition with the original size, but advance (\"hop\") the window by the given interval, which specifies by how much a window moves forward relative to the previous one.\n\tboolean equals(Object o);\n\tlong gracePeriodMs(); // Return the window grace period (the time to admit out-of-order events after the end of the window.) Delay is defined as (stream_time - record_timestamp).\n\tstatic TimeWindows ofSizeAndGrace(Duration size, Duration afterWindowEnd); // Return a window definition with the given window size, and with the advance interval being equal to the window size.\n\tstatic TimeWindows ofSizeWithNoGrace(Duration size); // Return a window definition with the given window size, and with the advance interval being equal to the window size.\n\tlong size(); // Return the size of the specified windows in milliseconds.\n\tMap<Long,org.apache.kafka.streams.kstream.internals.TimeWindow> windowsFor(long timestamp); // Create all windows that contain the provided timestamp, indexed by non-negative window start timestamps.\n}"}
{"index": 5231, "repo": "druid-processing-26.0.0", "des": "The type system used to process Druid expressions.", "code": "Class ExpressionType {\n\tstatic ExpressionType asArrayType(ExpressionType elementType); // Convert a primitive ExpressionType into an array of that type.\n\tstatic ExpressionType elementType(ExpressionType type); // If an ExpressionType is an array, return BaseTypeSignature.getElementType(), otherwise the type is returned unchanged.\n\tstatic ExpressionType fromColumnType(TypeSignature<ValueType> valueType); // The expression system does not distinguish between ValueType.FLOAT and ValueType.DOUBLE, so this method will convert ValueType.FLOAT to DOUBLE.\n\tstatic ExpressionType fromColumnTypeStrict(TypeSignature<ValueType> valueType); // The expression system does not distinguish between ValueType.FLOAT and ValueType.DOUBLE, so, this method will convert ValueType.FLOAT to DOUBLE.\n\tstatic ExpressionType fromString(String typeName);\n\tstatic ColumnType toColumnType(ExpressionType exprType); // Convert ExpressionType to the corresponding ColumnType\n}"}
{"index": 9156, "repo": "hbase-server-3.0.0-alpha-4", "des": "This BlockCompressedSizePredicator implementation doesn't actually performs any predicate and simply returns true on shouldFinishBlock.", "code": "Class UncompressedBlockSizePredicator {\n\tboolean shouldFinishBlock(int uncompressed); // Dummy implementation that always returns true.\n\tvoid updateLatestBlockSizes(HFileContext context, int uncompressed, int compressed); // Empty implementation.\n}"}
{"index": 8243, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the EndpointMapping interface that uses the PayloadRoot annotation to map methods to request payload root elements.", "code": "Class PayloadRootAnnotationMethodEndpointMapping {\n\tprotected QName getLookupKeyForMessage(MessageContext messageContext); // Returns the endpoint keys for the given message context.\n\tprotected List<QName> getLookupKeysForMethod(Method method); // Returns the endpoint keys for the given method.\n\tstatic void setTransformerFactory(TransformerFactory transformerFactory); // Override the default TransformerFactory.\n}"}
{"index": 1952, "repo": "nifi-framework-api-1.22.0", "des": "Identity provider that is able to authentication a user with username/password credentials.", "code": "Interface LoginIdentityProvider {\n\tAuthenticationResponse authenticate(LoginCredentials credentials); // Authenticates the specified login credentials.\n\tvoid initialize(LoginIdentityProviderInitializationContext initializationContext); // Called immediately after instance creation for implementers to perform additional setup\n\tvoid onConfigured(LoginIdentityProviderConfigurationContext configurationContext); // Called to configure the AuthorityProvider.\n\tvoid preDestruction(); // Called immediately before instance destruction for implementers to release resources.\n}"}
{"index": 7797, "repo": "cassandra-all-4.1.2", "des": "Listener for receiving notifications associated with reading SSTables.", "code": "Interface SSTableReadsListener {\n\tdefault void onScanningStarted(SSTableReader sstable); // Handles notification that the specified SSTable is being scanned during a partition range query.\n\tdefault void onSSTableSelected(SSTableReader sstable, RowIndexEntry<?> indexEntry, SSTableReadsListener.SelectionReason reason); // Handles notification that the specified SSTable has been selected during a single partition query.\n\tdefault void onSSTableSkipped(SSTableReader sstable, SSTableReadsListener.SkippingReason reason); // Handles notification that the specified SSTable has been skipped during a single partition query.\n}"}
{"index": 7297, "repo": "calcite-core-1.34.0", "des": "A SQL literal representing a TIMESTAMP value, for example TIMESTAMP '1969-07-21 03:15 GMT'.", "code": "Class SqlTimestampLiteral {\n\tSqlTimestampLiteral clone(SqlParserPos pos); // Clones a SqlNode with a different position.\n\tString toFormattedString(); // Returns e.g.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n}"}
{"index": 18189, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Context for determining the implicit name for a collection table.", "code": "Interface ImplicitCollectionTableNameSource {\n\tAttributePath getOwningAttributePath(); // Access to the name of the attribute, from the owning side, that defines the association.\n\tEntityNaming getOwningEntityNaming(); // Access to entity naming information for the owning side.\n\tIdentifier getOwningPhysicalTableName(); // Access to the physical name of the owning entity's table.\n}"}
{"index": 11942, "repo": "maven-core-4.0.0-alpha-7", "des": "Signals a failure to parse the metadata due to invalid syntax (e.g.", "code": "public class MetadataParseException extends IOException {\n\tint getColumnNumber(); // Gets the one-based index of the column containing the error.\n\tint getLineNumber(); // Gets the one-based index of the line containing the error.\n}"}
{"index": 17582, "repo": "spring-ldap-core-3.1.0", "des": "Responsible for executing a single recorded operation as well as committing or rolling it back, depending on the transaction outcome.", "code": "public interface CompensatingTransactionOperationExecutor {\n\tvoid commit(); // Commit the operation.\n\tvoid performOperation(); // Perform the operation.\n\tvoid rollback(); // Rollback the operation, restoring state of the target as it was before the operation was performed using the information supplied on creation of this instance.\n}"}
{"index": 14288, "repo": "wicket-core-10.0.0-M1", "des": "A store that can provide information about stored pages.", "code": "public interface IPersistentPageStore extends IPageStore {\n\tList<IPersistedPage> getPersistedPages(String sessionIdentifier); // Get information about all persisted pages with the given session identifier.\n\tString getSessionIdentifier(IPageContext context); // Get the session identifier for pages stored for the given context.\n\tSet<String> getSessionIdentifiers(); // Get the identifiers for all stored sessions.\n\torg.apache.wicket.util.lang.Bytes getTotalSize(); // Get total size of all pages stored in all contexts.\n}"}
{"index": 3464, "repo": "mahout-mr-0.13.0", "des": "Like GenericUserPreferenceArray but stores, conceptually, BooleanPreference objects which have no associated preference value.", "code": "Class BooleanUserPreferenceArray {\n\tBooleanUserPreferenceArray clone();\n\tboolean equals(Object other);\n\tPreference get(int i);\n\tlong[] getIDs();\n\tlong getItemID(int i);\n\tlong getUserID(int i);\n\tfloat getValue(int i);\n\tboolean hasPrefWithItemID(long itemID);\n\tboolean hasPrefWithUserID(long userID);\n\tIterator<Preference> iterator();\n\tint length();\n\tvoid set(int i, Preference pref); // Sets preference at i from information in the given Preference\n\tvoid setItemID(int i, long itemID); // Sets item ID for preference at i.\n\tvoid setUserID(int i, long userID); // Sets user ID for preference at i.\n\tvoid setValue(int i, float value); // Sets preference value for preference at i.\n\tvoid sortByItem(); // Sorts underlying array by item ID, ascending.\n\tvoid sortByUser(); // Sorts underlying array by user ID, ascending.\n\tvoid sortByValue(); // Sorts underlying array by preference value, ascending.\n\tvoid sortByValueReversed(); // Sorts underlying array by preference value, descending.\n}"}
{"index": 946, "repo": "ignite-core-2.15.0", "des": "Management bean that provides access to Ignition.", "code": "Class IgnitionMXBeanAdapter {\n\tString getState(); // Gets state of default grid instance.\n\tString getState(String name); // Gets state for a given grid instance.\n\tvoid restart(boolean cancel); // Restart JVM.\n\tboolean stop(boolean cancel); // Stops default grid instance.\n\tboolean stop(String name, boolean cancel); // Stops named Ignite instance.\n\tvoid stopAll(boolean cancel); // Stops all started grids.\n}"}
{"index": 813, "repo": "ignite-core-2.15.0", "des": "Filter that transforms byte buffers to user-defined objects and vice-versa with specified GridNioParser.", "code": "Class GridNioCodecFilter {\n\tvoid onExceptionCaught(GridNioSession ses, IgniteCheckedException ex); // Invoked when exception is caught in filter processing.\n\tvoid onMessageReceived(GridNioSession ses, Object msg); // Invoked when a new messages received.\n\tGridNioFuture<Boolean> onSessionClose(GridNioSession ses); // Invoked when a session close request is performed on session.\n\tvoid onSessionClosed(GridNioSession ses); // Invoked after session get closed.\n\tvoid onSessionIdleTimeout(GridNioSession ses); // Called when session is idle for longer time that is allowed by NIO server.\n\tvoid onSessionOpened(GridNioSession ses); // Invoked when a new session was created.\n\tGridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg, boolean fut, IgniteInClosure<IgniteException> ackC); // Invoked when a write request is performed on a session.\n\tvoid onSessionWriteTimeout(GridNioSession ses); // Called when session has not empty write buffer that has not been fully flushed during max timeout allowed by NIO server.\n}"}
{"index": 13423, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required for Liquibase to establish a connection to an SQL service using JDBC.", "code": "public interface LiquibaseConnectionDetails extends ConnectionDetails {\n\tdefault String getDriverClassName(); // The name of the JDBC driver class.\n\tString getJdbcUrl(); // JDBC URL for the database or null if no Liquibase-specific configuration is required.\n\tString getPassword(); // Password for the database or null if no Liquibase-specific configuration is required.\n\tString getUsername(); // Username for the database or null if no Liquibase-specific configuration is required.\n}"}
{"index": 10236, "repo": "spring-core-6.0.11", "des": "Simple pass-through decoder for DataBuffers.", "code": "public class DataBufferDecoder extends AbstractDataBufferDecoder<DataBuffer> {\n\tboolean canDecode(ResolvableType elementType, MimeType mimeType); // Whether the decoder supports the given target element type and the MIME type of the source stream.\n\treactor.core.publisher.Flux<DataBuffer> decode(Publisher<DataBuffer> input, ResolvableType elementType, MimeType mimeType, Map<String,Object> hints); // Decode a DataBuffer input stream into a Flux of T.\n\tDataBuffer decode(DataBuffer buffer, ResolvableType elementType, MimeType mimeType, Map<String,Object> hints); // Decode a data buffer to an Object of type T.\n}"}
{"index": 10003, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Base implementation for LocalResourcesSelector supporting simple use cases where user needs to localise properties, zip and jar files.", "code": "Class AbstractLocalResourcesSelector {\n\tvoid addPattern(String pattern); // Adds a pattern to be returned selected.\n\tvoid addPatterns(List<String> patterns); // Adds a patterns to be returned as selected.\n\tvoid addPatterns(String... patterns); // Adds a patterns to be returned as selected.\n\tList<String> getPatterns(); // Gets the patterns.\n\tString[] getPropertiesNames(); // Gets the properties fiels base names.\n\tString[] getPropertiesSuffixes(); // Gets the properties files suffixes.\n\tString getZipArchivePattern(); // Gets the current zip archive pattern.\n\tprotected boolean isZipArchive(String name); // Matching if argument is determined to be a zip archive.\n\tList<LocalResourcesSelector.Entry> select(String dir); // Select a List of LocalResourcesSelector.Entrys.\n\tprotected List<LocalResourcesSelector.Entry> selectInternal(String dir); // Select internal.\n\tvoid setPropertiesNames(List<String> propertiesNames); // Sets the properties names.\n\tvoid setPropertiesNames(String... propertiesNames); // Sets the properties names.\n\tvoid setPropertiesSuffixes(List<String> propertiesSuffixes); // Sets the properties suffixes.\n\tvoid setPropertiesSuffixes(String... propertiesSuffixes); // Sets the properties suffixes.\n\tvoid setZipArchivePattern(String zipArchivePattern); // Sets the zip archive pattern.\n}"}
{"index": 7267, "repo": "calcite-core-1.34.0", "des": "Contains the context necessary for a SqlRexConvertlet to convert a SqlNode expression into a RexNode.", "code": "Interface SqlRexContext {\n\tRexNode convertExpression(SqlNode expr); // Converts an expression from SqlNode to RexNode format.\n\tRexNode convertLiteral(SqlLiteral literal); // Converts a literal.\n\tint getGroupCount(); // If the operator call occurs in an aggregate query, returns the number of columns in the GROUP BY clause.\n\tInitializerExpressionFactory getInitializerExpressionFactory(); // Returns the factory which supplies default values for INSERT, UPDATE, and NEW.\n\tRexBuilder getRexBuilder(); // Returns the RexBuilder to use to create RexNode objects.\n\tRexRangeRef getSubQueryExpr(SqlCall call); // Returns the expression used to access a given IN or EXISTS sub-query.\n\tRelDataTypeFactory getTypeFactory(); // Returns the type factory.\n\tSqlValidator getValidator(); // Returns the validator.\n}"}
{"index": 9220, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "This secret manager instance is used by the AMRMProxyService to generate and manage tokens.", "code": "Class AMRMProxyTokenSecretManager {\n\tvoid activateNextMasterKey();\n\tvoid applicationMasterFinished(org.apache.hadoop.yarn.api.records.ApplicationAttemptId appAttemptId);\n\torg.apache.hadoop.security.token.Token<org.apache.hadoop.yarn.security.AMRMTokenIdentifier> createAndGetAMRMToken(org.apache.hadoop.yarn.api.records.ApplicationAttemptId appAttemptId);\n\torg.apache.hadoop.yarn.security.AMRMTokenIdentifier createIdentifier(); // Creates an empty TokenId to be used for de-serializing an AMRMTokenIdentifier by the RPC layer.\n\torg.apache.hadoop.yarn.server.security.MasterKeyData createNewMasterKey();\n\tprotected byte[] createPassword(org.apache.hadoop.yarn.security.AMRMTokenIdentifier identifier);\n\torg.apache.hadoop.yarn.server.security.MasterKeyData getCurrentMasterKeyData();\n\torg.apache.hadoop.yarn.server.security.MasterKeyData getMasterKey();\n\torg.apache.hadoop.yarn.server.security.MasterKeyData getNextMasterKeyData();\n\tvoid init(org.apache.hadoop.conf.Configuration conf);\n\tvoid recover(NMStateStoreService.RecoveredAMRMProxyState state); // Recover secretManager from state store.\n\tbyte[] retrievePassword(org.apache.hadoop.yarn.security.AMRMTokenIdentifier identifier); // Retrieve the password for the given AMRMTokenIdentifier.\n\tvoid rollMasterKey();\n\tvoid setNMStateStoreService(NMStateStoreService nmStateStoreService);\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 18386, "repo": "opencms-core-15.0", "des": "Represents a row in an attribute comparison table.", "code": "Class CmsPropertyCompareBean {\n\tjava.lang.String getProperty(); // Gets the attribute name.\n\tjava.lang.String getV1(); // Gets the value for the first version.\n\tjava.lang.String getV2(); // Gets the value for the second version.\n}"}
{"index": 15916, "repo": "spring-rabbit-3.0.6", "des": "Utility methods for listener containers.", "code": "public final class ContainerUtils extends Object {\n\tstatic boolean isRejectManual(Throwable ex); // Return true for AmqpRejectAndDontRequeueException.isRejectManual().\n\tstatic boolean shouldRequeue(boolean defaultRequeueRejected, Throwable throwable, org.apache.commons.logging.Log logger); // Determine whether a message should be requeued; returns true if the throwable is a MessageRejectedWhileStoppingException or defaultRequeueRejected is true and there is not an AmqpRejectAndDontRequeueException in the cause chain or if there is an ImmediateRequeueAmqpException in the cause chain.\n}"}
{"index": 2505, "repo": "exoplayer-r2.3.1", "des": "Extracts individual samples from an elementary media stream, preserving original order.", "code": "Interface ElementaryStreamReader {\n\tvoid consume(ParsableByteArray data); // Consumes (possibly partial) data from the current packet.\n\tvoid createTracks(ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the reader by providing outputs and ids for the tracks.\n\tvoid packetFinished(); // Called when a packet ends.\n\tvoid packetStarted(long pesTimeUs, boolean dataAlignmentIndicator); // Called when a packet starts.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 16347, "repo": "spring-session-core-3.1.1", "des": "A RememberMeServices implementation that uses Spring Session backed HttpSession to provide remember-me service capabilities.", "code": "public class SpringSessionRememberMeServices extends Object implements org.springframework.security.web.authentication.RememberMeServices, org.springframework.security.web.authentication.logout.LogoutHandler {\n\tfinal org.springframework.security.core.Authentication autoLogin(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\tfinal void loginFail(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\tfinal void loginSuccess(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication successfulAuthentication);\n\tvoid logout(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authentication);\n\tprotected boolean rememberMeRequested(jakarta.servlet.http.HttpServletRequest request, String parameter); // Allows customization of whether a remember-me login has been requested.\n\tvoid setAlwaysRemember(boolean alwaysRemember);\n\tvoid setRememberMeParameterName(String rememberMeParameterName); // Set the name of the parameter which should be checked for to see if a remember-me has been requested during a login request.\n\tvoid setValiditySeconds(int validitySeconds);\n}"}
{"index": 2325, "repo": "hive-exec-4.0.0-alpha-2", "des": "This class is encapsulates one or more VectorizedRowBatch of a PTF group.", "code": "Class VectorPTFGroupBatches {\n\tvoid bufferGroupBatch(VectorizedRowBatch batch, boolean isLastGroupBatch); // Buffers a batch at the end of bufferedBatches, and if it's full, spills a block of batches to the disk.\n\tvoid cleanupPartition(); // This should be called, when all of the batches were processed for a group (all of the evaluators have been evaluated for this group).\n\tvoid evaluateStreamingGroupBatch(VectorizedRowBatch batch, boolean isLastGroupBatch);\n\tvoid fillGroupResultsAndForward(VectorPTFOperator vecPTFOperator, Object[] partitionKey);\n\tvoid finishPartition();\n\tObject[] getAt(int i); // Finds and element by a partition-level row index.\n\torg.apache.hadoop.hive.ql.exec.vector.ptf.VectorPTFGroupBatches.RowPositionInBatch getPosition(int i);\n\tObject getValue(int row, int col); // Returns the value at row/col.\n\tObject getValueAndEvaluateInputExpression(VectorPTFEvaluatorBase evaluator, int row, int col);\n\tvoid init(VectorPTFEvaluatorBase[] evaluators, int[] outputProjectionColumnMap, int[] bufferedColumnMap, TypeInfo[] bufferedTypeInfos, int[] orderColumnMap, int[] keyWithoutOrderColumnMap, VectorizedRowBatch overflowBatch);\n\tvoid jumpToLastBlock();\n\tvoid resetEvaluators();\n\tObject runEvaluatorOnRange(VectorPTFEvaluatorBase evaluator, Range range);\n\tObject runEvaluatorOnRange(VectorPTFEvaluatorBase evaluator, Range range, boolean resetAfterCalculation);\n\tint size(); // Overrides PTFPartition.size(), this is supposed to return the amount of records in the partition.\n}"}
{"index": 12000, "repo": "jena-core-4.9.0", "des": "Encapsulates a class description formed from a boolean combination of other class descriptions (ie union, intersection or complement).", "code": "public interface BooleanClassDescription extends OntClass {\n\tvoid addOperand(Resource cls); // Add a class the operands of this boolean expression.\n\tvoid addOperands(Iterator<? extends Resource> classes); // Add all of the classes from the given iterator to the operands of this boolean expression.\n\tRDFList getOperands(); // Answer the list of operands for this Boolean class expression.\n\tboolean hasOperand(Resource cls); // Answer true if this Boolean class expression has the given class as an operand.\n\tExtendedIterator<? extends OntClass> listOperands(); // Answer an iterator over all of the classes that are the operands of this Boolean class expression.\n\tProperty operator(); // Answer the property that is used to construct this boolean expression, for example Profile.UNION_OF().\n\tvoid removeOperand(Resource res); // Remove the given resource from the operands of this class expression.\n\tvoid setOperands(RDFList operands); // Assert that the operands for this boolean class expression are the classes in the given list.\n}"}
{"index": 7696, "repo": "cassandra-all-4.1.2", "des": "Interface for building mutations geared towards human.", "code": "Interface Mutation.SimpleBuilder {\n\tMutation build(); // Build the mutation represented by this builder.\n\tMutation.SimpleBuilder timestamp(long timestamp); // Sets the timestamp to use for the following additions to this builder or any derived (update or row) builder.\n\tMutation.SimpleBuilder ttl(int ttl); // Sets the ttl to use for the following additions to this builder or any derived (update or row) builder.\n\tPartitionUpdate.SimpleBuilder update(java.lang.String tableName); // Adds an update for table identified by the provided name and return a builder for that partition.\n\tPartitionUpdate.SimpleBuilder update(TableMetadata metadata); // Adds an update for table identified by the provided metadata and return a builder for that partition.\n}"}
{"index": 2429, "repo": "spring-session-1.3.5.RELEASE", "des": "A SessionRepository that is implemented using Spring Data's RedisOperations.", "code": "Class RedisOperationsSessionRepository {\n\tvoid cleanupExpiredSessions();\n\torg.springframework.session.data.redis.RedisOperationsSessionRepository.RedisSession createSession(); // Creates a new Session that is capable of being persisted by this SessionRepository.\n\tvoid delete(java.lang.String sessionId); // Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\tjava.util.Map<java.lang.String,org.springframework.session.data.redis.RedisOperationsSessionRepository.RedisSession> findByIndexNameAndIndexValue(java.lang.String indexName, java.lang.String indexValue); // Find a Map of the session id to the Session of all sessions that contain the session attribute with the name FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME and the value of the specified principal name.\n\torg.springframework.session.data.redis.RedisOperationsSessionRepository.RedisSession getSession(java.lang.String id); // Gets the Session by the Session.getId() or null if no Session is found.\n\tjava.lang.String getSessionCreatedChannelPrefix(); // Gets the prefix for the channel that SessionCreatedEvent are published to.\n\tvoid handleCreated(java.util.Map<java.lang.Object,java.lang.Object> loaded, java.lang.String channel);\n\tvoid onMessage(org.springframework.data.redis.connection.Message message, byte[] pattern);\n\tvoid save(org.springframework.session.data.redis.RedisOperationsSessionRepository.RedisSession session); // Ensures the Session created by SessionRepository.createSession() is saved.\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher); // Sets the ApplicationEventPublisher that is used to publish SessionDestroyedEvent.\n\tvoid setDefaultMaxInactiveInterval(int defaultMaxInactiveInterval); // Sets the maximum inactive interval in seconds between requests before newly created sessions will be invalidated.\n\tvoid setDefaultSerializer(org.springframework.data.redis.serializer.RedisSerializer<java.lang.Object> defaultSerializer); // Sets the default redis serializer.\n\tvoid setRedisFlushMode(RedisFlushMode redisFlushMode); // Sets the redis flush mode.\n\tvoid setRedisKeyNamespace(java.lang.String namespace);\n}"}
{"index": 1619, "repo": "pdfbox-3.0.0-beta1", "des": "SC: Sets the colour to use for stroking stroking operations.", "code": "Class SetStrokingColor {\n\tprotected PDColor getColor(); // Returns the stroking color.\n\tprotected PDColorSpace getColorSpace(); // Returns the stroking color space.\n\tString getName(); // Returns the name of this operator, e.g.\n\tprotected void setColor(PDColor color); // Sets the stroking color.\n}"}
{"index": 2006, "repo": "hive-exec-4.0.0-alpha-2", "des": "ConvertJoinMapJoin is an optimization that replaces a common join (aka shuffle join) with a map join (aka broadcast or fragment replicate join when possible.", "code": "Class ConvertJoinMapJoin {\n\tlong computeOnlineDataSize(Statistics statistics);\n\tlong computeOnlineDataSizeFast(Statistics statistics);\n\tlong computeOnlineDataSizeFastCompositeKeyed(Statistics statistics);\n\tlong computeOnlineDataSizeFastLongKeyed(Statistics statistics);\n\tlong computeOnlineDataSizeGeneric(Statistics statistics, long overHeadPerRow, long overHeadPerSlot);\n\tlong computeOnlineDataSizeOptimized(Statistics statistics);\n\tMapJoinOperator convertJoinMapJoin(JoinOperator joinOp, OptimizeTezProcContext context, ConvertJoinMapJoin.MapJoinConversion mapJoinConversion, boolean removeReduceSink);\n\tConvertJoinMapJoin.MapJoinConversion getMapJoinConversion(JoinOperator joinOp, OptimizeTezProcContext context, int buckets, boolean skipJoinTypeChecks, long maxSize, boolean checkMapJoinThresholds); // Obtain big table position for join.\n\tMemoryMonitorInfo getMemoryMonitorInfo(HiveConf conf, LlapClusterStateForCompile llapInfo);\n\tObject process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx, Object... nodeOutputs); // Generic process for all ops that don't have specific implementations.\n}"}
{"index": 15490, "repo": "spring-batch-core-5.0.2", "des": "This class can be used to automatically promote items from the Step ExecutionContext to the Job ExecutionContext at the end of a step.", "code": "public class ExecutionContextPromotionListener extends Object implements StepExecutionListener, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tExitStatus afterStep(StepExecution stepExecution); // Give a listener a chance to modify the exit status from a step.\n\tvoid setKeys(String[] keys);\n\tvoid setStatuses(String[] statuses);\n\tvoid setStrict(boolean strict); // If set to TRUE, the listener will throw an exception if any 'key' is not found in the Step ExecutionContext.\n}"}
{"index": 10899, "repo": "spring-data-redis-3.1.2", "des": "Builder for SSL-related JedisClientConfiguration.", "code": "public static interface JedisClientConfiguration.JedisSslClientConfigurationBuilder {\n\tJedisClientConfiguration.JedisClientConfigurationBuilder and(); // Return to JedisClientConfiguration.JedisClientConfigurationBuilder.\n\tJedisClientConfiguration build(); // Build the JedisClientConfiguration with the configuration applied from this builder.\n\tJedisClientConfiguration.JedisSslClientConfigurationBuilder hostnameVerifier(HostnameVerifier hostnameVerifier);\n\tJedisClientConfiguration.JedisSslClientConfigurationBuilder sslParameters(SSLParameters sslParameters);\n\tJedisClientConfiguration.JedisSslClientConfigurationBuilder sslSocketFactory(SSLSocketFactory sslSocketFactory);\n}"}
{"index": 3694, "repo": "kafka-streams-3.5.0", "des": "Retrieves embedded metadata timestamps from Kafka messages.", "code": "Class FailOnInvalidTimestamp {\n\tlong extract(org.apache.kafka.clients.consumer.ConsumerRecord<Object,Object> record, long partitionTime); // Extracts the embedded metadata timestamp from the given ConsumerRecord.\n\tlong onInvalidTimestamp(org.apache.kafka.clients.consumer.ConsumerRecord<Object,Object> record, long recordTimestamp, long partitionTime); // Raises an exception on every call.\n}"}
{"index": 16923, "repo": "spring-integration-ip-6.1.2", "des": "Default implementation of TcpSocketSupport; makes no changes to sockets.", "code": "public class DefaultTcpSocketSupport extends Object implements TcpSocketSupport {\n\tvoid postProcessServerSocket(ServerSocket serverSocket); // No-Op.\n\tvoid postProcessSocket(Socket socket); // Enables host verification for SSL, if so configured.\n}"}
{"index": 15171, "repo": "spring-data-elasticsearch-5.1.2", "des": "Enum to represent the relation that Elasticsearch returns for the totalHits value", "code": "public enum TotalHitsRelation extends Enum<TotalHitsRelation> {\n\tstatic TotalHitsRelation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic TotalHitsRelation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7396, "repo": "mahout-math-0.13.0", "des": "Open hash map from char keys to byte values.", "code": "Class OpenCharByteHashMap {\n\tbyte adjustOrPutValue(char key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(char key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(CharProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(CharByteProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(char key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(char key);\n\tprotected int indexOfKey(char key);\n\tprotected int indexOfValue(byte value);\n\tIterator<OpenCharByteHashMap.MapElement> iterator();\n\tvoid keys(CharArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(CharByteProcedure condition, CharArrayList keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(char key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(char key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 12958, "repo": "spring-integration-file-6.1.2", "des": "Factors out the common logic between the FTP and SFTP adapters.", "code": "public abstract class AbstractInboundFileSynchronizingMessageSource<F> extends org.springframework.integration.endpoint.AbstractFetchLimitingMessageSource<File> implements org.springframework.integration.support.management.ManageableLifecycle {\n\tfinal org.springframework.integration.support.AbstractIntegrationMessageBuilder<File> doReceive(int maxFetchSize); // Polls from the file source.\n\tAbstractInboundFileSynchronizer<F> getSynchronizer(); // Return the underlying synchronizer.\n\tboolean isRunning();\n\tprotected void onInit();\n\tvoid setAutoCreateLocalDirectory(boolean autoCreateLocalDirectory);\n\tvoid setLocalDirectory(File localDirectory);\n\tvoid setLocalFilter(FileListFilter<File> localFileListFilter); // A FileListFilter used to determine which files will generate messages after they have been synchronized.\n\tvoid setScanner(DirectoryScanner scanner); // Switch the local FileReadingMessageSource to use a custom DirectoryScanner.\n\tvoid setUseWatchService(boolean useWatchService); // Switch the local FileReadingMessageSource to use its internal FileReadingMessageSource.WatchServiceDirectoryScanner.\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 12170, "repo": "jena-core-4.9.0", "des": "The interface for being notified about namespace use in an RDF/XML document.", "code": "public interface NamespaceHandler {\n\tvoid endPrefixMapping(String prefix); // A namespace prefix is going out of scope.\n\tvoid startPrefixMapping(String prefix, String uri); // A namespace prefix is being defined..\n}"}
{"index": 14799, "repo": "spring-data-commons-3.1.2", "des": "No-op PropertyValueConverter implementation.", "code": "public static enum PropertyValueConverter.ObjectToObjectPropertyValueConverter extends Enum<PropertyValueConverter.ObjectToObjectPropertyValueConverter> implements PropertyValueConverter {\n\tObject read(Object value, ValueConversionContext context); // Convert the given store specific value into it's domain value representation.\n\tstatic PropertyValueConverter.ObjectToObjectPropertyValueConverter valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic PropertyValueConverter.ObjectToObjectPropertyValueConverter[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n\tObject write(Object value, ValueConversionContext context); // Convert the given domain-specific value into it's native store representation.\n}"}
{"index": 13742, "repo": "spring-webmvc-6.0.11", "des": "Spring MVC View that renders JSON content by serializing the model for the current request using Jackson 2's ObjectMapper.", "code": "public class MappingJackson2JsonView extends AbstractJackson2View {\n\tprotected Object filterModel(Map<String,Object> model); // Filter out undesired attributes from the given model.\n\tfinal Set<String> getModelKeys(); // Return the attributes in the model that should be rendered by this view.\n\tvoid setExtractValueFromSingleKeyModel(boolean extractValueFromSingleKeyModel); // Set whether to serialize models containing a single attribute as a map or whether to extract the single value from the model and serialize it directly.\n\tvoid setJsonPrefix(String jsonPrefix); // Specify a custom prefix to use for this view's JSON output.\n\tvoid setModelKey(String modelKey); // Set the attribute in the model that should be rendered by this view.\n\tvoid setModelKeys(Set<String> modelKeys); // Set the attributes in the model that should be rendered by this view.\n\tvoid setPrefixJson(boolean prefixJson); // Indicates whether the JSON output by this view should be prefixed with \")]}', \".\n\tprotected void writePrefix(JsonGenerator generator, Object object); // Write a prefix before the main content.\n}"}
{"index": 9822, "repo": "commons-math3-3.6.1", "des": "A callback object that can be provided to a linear optimizer to keep track of the best solution found.", "code": "Class SolutionCallback {\n\tPointValuePair getSolution(); // Retrieve the best solution found so far.\n\tboolean isSolutionOptimal(); // Returns if the found solution is optimal.\n}"}
{"index": 4429, "repo": "beam-sdks-java-core-2.49.0", "des": "Describes whether the result was an exception.", "code": "Enum MoreFutures.ExceptionOrResult.IsException {\n\tstatic MoreFutures.ExceptionOrResult.IsException valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic MoreFutures.ExceptionOrResult.IsException[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16015, "repo": "wicket-util-10.0.0-M1", "des": "Utility class that contains visitor/traversal related code", "code": "public class Visits extends Object {\n\tstatic <S, R> R visit(Iterable<? super S> container, IVisitor<S,R> visitor); // Visits container and its children pre-order (parent first).\n\tstatic <S, R> R visit(Iterable<? super S> container, IVisitor<S,R> visitor, IVisitFilter filter); // Visits container and its children pre-order (parent first).\n\tstatic <S, R> R visitChildren(Iterable<? super S> container, IVisitor<S,R> visitor); // Visits children of the specified Iterable pre-order (parent first).\n\tstatic <S, R> R visitChildren(Iterable<? super S> container, IVisitor<S,R> visitor, IVisitFilter filter); // Visits children of the specified Iterable pre-order (parent first).\n\tstatic <S, R> R visitPostOrder(Object root, IVisitor<S,R> visitor, IVisitFilter filter); // Visits the specified object and any of its children using a post-order (child first) traversal.\n\tstatic <S, R> R visitPostOrder(S root, IVisitor<S,R> visitor); // Visits the specified object and any of its children using a post-order (child first) traversal.\n}"}
{"index": 10421, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "Inspired by OpenZipkin Brave's BaggageField.", "code": "public interface BaggageInScope extends Closeable {\n\tvoid close();\n\tString get();\n\tString get(TraceContext traceContext); // Retrieves baggage from the given TraceContext.\n\tBaggageInScope makeCurrent(); // Sets the current baggage in scope.\n\tString name();\n\tBaggageInScope set(String value); // Sets the baggage value.\n\tBaggageInScope set(TraceContext traceContext, String value); // Sets the baggage value for the given TraceContext.\n}"}
{"index": 15332, "repo": "spring-boot-3.1.1", "des": "Interface that uniquely represents the origin of an item.", "code": "public interface Origin {\n\tstatic Origin from(Object source); // Find the Origin that an object originated from.\n\tdefault Origin getParent(); // Return the parent origin for this instance if there is one.\n\tstatic List<Origin> parentsFrom(Object source); // Find the parents of the Origin that an object originated from.\n}"}
{"index": 13131, "repo": "pulsar-client-original-3.0.0", "des": "Auto detect schema, returns only GenericRecord instances.", "code": "public class AutoConsumeSchema extends Object implements Schema<GenericRecord> {\n\tprotected GenericRecord adapt(Object value, byte[] schemaVersion);\n\tSchema<?> atSchemaVersion(byte[] schemaVersion);\n\tSchema<GenericRecord> clone();\n\tvoid configureSchemaInfo(String topicName, String componentName, SchemaInfo schemaInfo);\n\tGenericRecord decode(byte[] bytes, byte[] schemaVersion);\n\tGenericRecord decode(ByteBuffer buffer, byte[] schemaVersion);\n\tbyte[] encode(GenericRecord message);\n\tvoid fetchSchemaIfNeeded(SchemaVersion schemaVersion); // It may happen that the schema is not loaded but we need it, for instance in order to call getSchemaInfo() We cannot call this method in getSchemaInfo, because getSchemaInfo is called in many places and we will introduce lots of deadlocks.\n\tSchema<?> getInternalSchema();\n\tSchema<?> getInternalSchema(byte[] schemaVersion);\n\tOptional<Object> getNativeSchema();\n\tstatic Schema<?> getSchema(SchemaInfo schemaInfo);\n\tSchemaInfo getSchemaInfo();\n\tSchemaInfo getSchemaInfo(byte[] schemaVersion);\n\tboolean requireFetchingSchemaInfo();\n\tvoid setSchema(Schema<?> schema);\n\tvoid setSchema(SchemaVersion schemaVersion, Schema<?> schema);\n\tvoid setSchemaInfoProvider(SchemaInfoProvider schemaInfoProvider);\n\tboolean supportSchemaVersioning();\n\tSchema<?> unwrapInternalSchema(byte[] schemaVersion); // Get a specific schema version, fetching from the Registry if it is not loaded yet.\n\tvoid validate(byte[] message);\n\tvoid validate(byte[] message, byte[] schemaVersion);\n\tstatic GenericRecord wrapPrimitiveObject(Object value, SchemaType type, byte[] schemaVersion);\n}"}
{"index": 2771, "repo": "tika-parsers-1.28.5", "des": "Represents intel file states during decompression.", "code": "Enum ChmCommons.IntelState {\n\tstatic ChmCommons.IntelState valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ChmCommons.IntelState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1308, "repo": "ignite-core-2.15.0", "des": "Contains utility methods for Visor tasks and jobs.", "code": "Class VisorTaskUtils {\n\tstatic @Nullable String compactClass(Class cls); // Compact class names.\n\tstatic @Nullable String compactClass(@Nullable Object obj); // Compact class names.\n\tstatic @Nullable List<String> compactClasses(Class<?>[] clss); // Compact classes names.\n\tstatic @Nullable String compactIterable(Iterable col); // Joins iterable collection elements to string.\n\tstatic Integer evictionPolicyMaxSize(@Nullable javax.cache.configuration.Factory plc); // Extract max size from eviction policy if available.\n\tstatic boolean isRestartingCache(IgniteEx ignite, String cacheName); // Check whether cache restarting in progress.\n\tstatic long log(@Nullable IgniteLogger log, String msg, Class<?> clazz, long start); // Log message.\n\tstatic void logFinish(@Nullable IgniteLogger log, Class<?> clazz, long start); // Log finished.\n\tstatic void logMapped(@Nullable IgniteLogger log, Class<?> clazz, Collection<ClusterNode> nodes); // Log task mapped.\n\tstatic void logStart(@Nullable IgniteLogger log, Class<?> clazz, long start); // Log start.\n}"}
{"index": 12990, "repo": "spring-integration-file-6.1.2", "des": "The DefaultDirectoryScanner extension which walks through the directory tree using Files.walk(Path, int, FileVisitOption...).", "code": "public class RecursiveDirectoryScanner extends DefaultDirectoryScanner {\n\tList<File> listFiles(File directory); // Scans the directory according to the strategy particular to this implementation and returns the selected files as a File array.\n\tvoid setFileVisitOptions(FileVisitOption... fileVisitOptions); // The options to configure the traversal.\n\tvoid setMaxDepth(int maxDepth); // The maximum number of directory levels to visit.\n}"}
{"index": 16619, "repo": "spring-beans-6.0.11", "des": "Property editor for Maps, converting any source Map to a given target Map type.", "code": "public class CustomMapEditor extends PropertyEditorSupport {\n\tprotected boolean alwaysCreateNewMap(); // Return whether to always create a new Map, even if the type of the passed-in Map already matches.\n\tprotected Object convertKey(Object key); // Hook to convert each encountered Map key.\n\tprotected Object convertValue(Object value); // Hook to convert each encountered Map value.\n\tprotected Map<Object,Object> createMap(Class<? extends Map> mapType, int initialCapacity); // Create a Map of the given type, with the given initial capacity (if supported by the Map type).\n\tString getAsText(); // This implementation returns null to indicate that there is no appropriate text representation.\n\tvoid setAsText(String text); // Convert the given text value to a Map with a single element.\n\tvoid setValue(Object value); // Convert the given value to a Map of the target type.\n}"}
{"index": 3515, "repo": "mahout-mr-0.13.0", "des": "Implements the Laplacian or bi-exponential prior.", "code": "Class L1 {\n\tdouble age(double oldValue, double generations, double learningRate); // Applies the regularization to a coefficient.\n\tdouble logP(double betaIJ); // Returns the log of the probability of a particular coefficient value according to the prior.\n\tvoid readFields(DataInput dataInput);\n\tvoid write(DataOutput out);\n}"}
{"index": 10739, "repo": "spring-tx-6.0.11", "des": "Operator class that simplifies programmatic transaction demarcation and transaction exception handling.", "code": "public interface TransactionalOperator {\n\tstatic TransactionalOperator create(ReactiveTransactionManager transactionManager); // Create a new TransactionalOperator using ReactiveTransactionManager, using a default transaction.\n\tstatic TransactionalOperator create(ReactiveTransactionManager transactionManager, TransactionDefinition transactionDefinition); // Create a new TransactionalOperator using ReactiveTransactionManager and TransactionDefinition.\n\t<T> reactor.core.publisher.Flux<T> execute(TransactionCallback<T> action); // Execute the action specified by the given callback object within a transaction.\n\tdefault <T> reactor.core.publisher.Flux<T> transactional(reactor.core.publisher.Flux<T> flux); // Wrap the functional sequence specified by the given Flux within a transaction.\n\tdefault <T> reactor.core.publisher.Mono<T> transactional(reactor.core.publisher.Mono<T> mono); // Wrap the functional sequence specified by the given Mono within a transaction.\n}"}
{"index": 15790, "repo": "camel-api-4.0.0-RC1", "des": "Base class that provides optional integration with core Camel capabilities.", "code": "public class JsseParameters extends Object implements CamelContextAware {\n\tCamelContext getCamelContext(); // Get the CamelContext\n\tprotected String parsePropertyValue(String value); // Parses the value using the Camel Property Placeholder capabilities if a context is provided.\n\tprotected List<String> parsePropertyValues(List<String> values); // Parses the values using the Camel Property Placeholder capabilities if a context is provided.\n\tprotected InputStream resolveResource(String resource); // Attempts to load a resource using a number of different approaches.\n\tvoid setCamelContext(CamelContext context); // Sets the optional CamelContext used for integration with core capabilities such as Camel Property Placeholders and ClassResolver.\n}"}
{"index": 13568, "repo": "spring-messaging-6.0.11", "des": "Container for RSocket request values extracted from an @RSocketExchange-annotated method and argument values passed to it.", "code": "public final class RSocketRequestValues extends Object {\n\tstatic RSocketRequestValues.Builder builder(String route);\n\tMap<Object,org.springframework.util.MimeType> getMetadata(); // Return the metadata entries for RSocketRequester.MetadataSpec.metadata(Object, MimeType).\n\tPublisher<?> getPayload(); // Return the request payload as a Publisher.\n\torg.springframework.core.ParameterizedTypeReference<?> getPayloadElementType(); // Return the element type for a Publisher payload.\n\tObject getPayloadValue(); // Return the request payload as a value to be serialized, if set.\n\tString getRoute(); // Return the route value for route.\n\tObject[] getRouteVariables(); // Return the route variables for route.\n}"}
{"index": 18137, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Represents an operation we are about to perform against the database.", "code": "Class AbstractPreDatabaseOperationEvent {\n\tjava.lang.Object getEntity(); // Retrieves the entity involved in the database operation.\n\tjava.lang.String getEntityName(); // Deprecated. Support for JACC will be removed in 6.0\n\tjava.io.Serializable getId(); // The id to be used in the database operation.\n\tjava.io.Serializable getIdentifier(); // Deprecated. Support for JACC will be removed in 6.0\n\tEntityPersister getPersister(); // The persister for the entity.\n\tEventSource getSource(); // Deprecated. Use AbstractEvent.getSession() instead\n}"}
{"index": 15324, "repo": "spring-boot-3.1.1", "des": "Spring MVC View using the Mustache template engine.", "code": "public class MustacheView extends org.springframework.web.servlet.view.AbstractTemplateView {\n\tboolean checkResource(Locale locale);\n\tprotected void renderMergedTemplateModel(Map<String,Object> model, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\tvoid setCharset(String charset); // Set the charset used for reading Mustache template files.\n\tvoid setCompiler(com.samskivert.mustache.Mustache.Compiler compiler); // Set the Mustache compiler to be used by this view.\n}"}
{"index": 1144, "repo": "ignite-core-2.15.0", "des": "Keep information about all running queries.", "code": "Class RunningQueryManager {\n\tvoid cancelLocalQuery(long qryId); // Cancel query.\n\tvoid cancelQuery(long queryId, @Nullable UUID nodeId, boolean async); // Cancel query running on remote or local Node.\n\tCollection<GridRunningQueryInfo> longRunningQueries(long duration); // Return long running user queries.\n\tvoid onDisconnected(); // Client disconnected callback.\n\tMap<QueryHistoryKey,QueryHistory> queryHistoryMetrics(); // Gets query history statistics.\n\tlong register(String qry, GridCacheQueryType qryType, String schemaName, boolean loc, @Nullable GridQueryCancel cancel, String qryInitiatorId, boolean enforceJoinOrder, boolean lazy, boolean distributedJoins); // Registers running query and returns an id associated with the query.\n\tvoid registerQueryFinishedListener(Consumer<GridQueryFinishedInfo> lsnr);\n\tvoid registerQueryStartedListener(Consumer<GridQueryStartedInfo> lsnr);\n\tvoid resetQueryHistoryMetrics(); // Reset query history.\n\t@Nullable GridRunningQueryInfo runningQueryInfo(long qryId); // Gets info about running query by their id.\n\tList<GridRunningQueryInfo> runningSqlQueries(); // Return SQL queries which executing right now.\n\tvoid start(GridSpinBusyLock busyLock);\n\tvoid stop(); // Cancel all executing queries and deregistering all of them.\n\tvoid trackRequestId(long reqId);\n\tvoid unregister(long qryId, @Nullable Throwable failReason); // Unregister running query.\n\tboolean unregisterQueryFinishedListener(Object lsnr);\n\tboolean unregisterQueryStartedListener(Object lsnr);\n}"}
{"index": 5984, "repo": "commons-lang3-3.12.0", "des": "A functional interface like LongToDoubleFunction that declares a Throwable.", "code": "Interface FailableLongToDoubleFunction<E extends Throwable> {\n\tdouble applyAsDouble(long value); // Applies this function to the given argument.\n\tstatic <E extends Throwable>FailableLongToDoubleFunction<E> nop(); // Returns The NOP singleton.\n}"}
{"index": 15932, "repo": "spring-rabbit-3.0.6", "des": "Instances of this object track pending publisher confirms.", "code": "public class PendingConfirm extends Object {\n\tvoid countDown(); // Count down the returned message latch; call after the listener has been called.\n\tString getCause();\n\tCorrelationData getCorrelationData(); // The correlation data supplied by the client when sending the message corresponding to this confirmation.\n\tlong getTimestamp();\n\tboolean isReturned(); // True if a returned message has been received.\n\tvoid setCause(String cause); // When the confirmation is nacked, set the cause when available.\n\tvoid setReturned(boolean isReturned); // Indicate that a returned message has been received.\n\tboolean waitForReturnIfNeeded(); // Return true if a return has been passed to the listener or if no return has been received.\n}"}
{"index": 16785, "repo": "spring-expression-6.0.11", "des": "Common utility functions that may be used by any Expression Language provider.", "code": "public abstract class ExpressionUtils extends Object {\n\tstatic <T> T convertTypedValue(EvaluationContext context, TypedValue typedValue, Class<T> targetType); // Determines if there is a type converter available in the specified context and attempts to use it to convert the supplied value to the specified type.\n\tstatic boolean toBoolean(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to a boolean using the supplied type converter.\n\tstatic byte toByte(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to a byte using the supplied type converter.\n\tstatic char toChar(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to a char using the supplied type converter.\n\tstatic double toDouble(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to a double using the supplied type converter.\n\tstatic float toFloat(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to a float using the supplied type converter.\n\tstatic int toInt(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to an int using the supplied type converter.\n\tstatic long toLong(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to a long using the supplied type converter.\n\tstatic short toShort(TypeConverter typeConverter, TypedValue typedValue); // Attempt to convert a typed value to a short using the supplied type converter.\n}"}
{"index": 7320, "repo": "calcite-core-1.34.0", "des": "Base class for a table-valued function that computes windows.", "code": "Class SqlWindowTableFunction {\n\tboolean argumentMustBeScalar(int ordinal); // Returns whether the ordinalth argument to this operator must be scalar (as opposed to a query).\n\t@Nullable SqlOperandMetadata getOperandTypeChecker();\n\tSqlReturnTypeInference getRowTypeInference(); // Returns the record type of the table yielded by this function when applied to given arguments.\n}"}
{"index": 11788, "repo": "bedrock-core-7.0.2", "des": "A enum for representing three-state logic values.", "code": "public enum Trilean extends Enum<Trilean> {\n\tTrilean and(Trilean other); // Performs a conjunction operation between this Trilean and another Trilean.\n\tTrilean negate(); // Negates a Trilean.\n\tstatic Trilean of(boolean value); // Obtains a Trilean representation of a Boolean.\n\tTrilean or(Trilean other); // Performs a disjunction operation between this Trilean and another Trilean.\n\tstatic Trilean valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Trilean[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8483, "repo": "commons-io-2.13.0", "des": "Implements a buffered input stream, which is internally based on a CircularByteBuffer.", "code": "Class CircularBufferInputStream {\n\tvoid close();\n\tprotected void fillBuffer(); // Fills the buffer with the contents of the input stream.\n\tprotected boolean haveBytes(int count); // Fills the buffer from the input stream until the given number of bytes have been added to the buffer.\n\tint read();\n\tint read(byte[] targetBuffer, int offset, int length);\n}"}
{"index": 12250, "repo": "jena-core-4.9.0", "des": "RETE implementation of the forward rule inference graph.", "code": "public class RETERuleInfGraph extends BasicForwardRuleInfGraph {\n\tvoid performAdd(Triple t); // Add one triple to the data graph, run any rules triggered by the new data item, recursively adding any generated triples.\n\tvoid performDelete(Triple t); // Removes the triple t (if possible) from the set belonging to this graph.\n}"}
{"index": 6875, "repo": "calcite-core-1.34.0", "des": "Planner rule that pushes filters above and within a join node into the join node and/or its children nodes.", "code": "Class FilterJoinRule<C extends FilterJoinRule.Config> {\n\tprotected List<RexNode> inferJoinEqualConditions(List<RexNode> rexNodes, Join join); // Infers more equal conditions for the join condition.\n\tprotected void perform(RelOptRuleCall call, @Nullable Filter filter, Join join);\n\tprotected void validateJoinFilters(List<RexNode> aboveFilters, List<RexNode> joinFilters, Join join, JoinRelType joinType); // Validates that target execution framework can satisfy join filters.\n}"}
{"index": 2982, "repo": "tink-1.10.0", "des": "This implementation is based on the ed25519/ref10 implementation in NaCl.", "code": "Class Ed25519 {\n\tstatic byte[] getHashedScalar(byte[] privateKey);\n\tstatic void init(); // Initializes Ed25519 if not yet initialized.\n\tstatic byte[] scalarMultWithBaseToBytes(byte[] a); // Computes a*B where a = a[0]+256*a[1]+...+256^31 a[31] and B is the Ed25519 base point (x,4/5) with x positive.\n\tstatic byte[] sign(byte[] message, byte[] publicKey, byte[] hashedPrivateKey); // Returns the EdDSA signature for the message based on the hashedPrivateKey.\n\tstatic boolean verify(byte[] message, byte[] signature, byte[] publicKey); // Returns true if the EdDSA signature with message, can be verified with publicKey.\n}"}
{"index": 14991, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Configurer for the OAuth 2.0 Token Revocation Endpoint.", "code": "public final class OAuth2TokenRevocationEndpointConfigurer extends Object {\n\tOAuth2TokenRevocationEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider); // Adds an AuthenticationProvider used for authenticating a type of OAuth2TokenRevocationAuthenticationToken.\n\tOAuth2TokenRevocationEndpointConfigurer authenticationProviders(Consumer<List<org.springframework.security.authentication.AuthenticationProvider>> authenticationProvidersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationProvider's allowing the ability to add, remove, or customize a specific AuthenticationProvider.\n\tOAuth2TokenRevocationEndpointConfigurer errorResponseHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler errorResponseHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tprotected final org.springframework.security.config.annotation.ObjectPostProcessor<Object> getObjectPostProcessor();\n\tprotected final <T> T postProcess(T object);\n\tOAuth2TokenRevocationEndpointConfigurer revocationRequestConverter(org.springframework.security.web.authentication.AuthenticationConverter revocationRequestConverter); // Adds an AuthenticationConverter used when attempting to extract a Revoke Token Request from HttpServletRequest to an instance of OAuth2TokenRevocationAuthenticationToken used for authenticating the request.\n\tOAuth2TokenRevocationEndpointConfigurer revocationRequestConverters(Consumer<List<org.springframework.security.web.authentication.AuthenticationConverter>> revocationRequestConvertersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationConverter's allowing the ability to add, remove, or customize a specific AuthenticationConverter.\n\tOAuth2TokenRevocationEndpointConfigurer revocationResponseHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler revocationResponseHandler); // Sets the AuthenticationSuccessHandler used for handling an OAuth2TokenRevocationAuthenticationToken.\n}"}
{"index": 17332, "repo": "groovy-4.0.13", "des": "Implementers of this interface can be registered in the ProxyMetaClass for notifications about method calls for objects managed by the ProxyMetaClass.", "code": "public interface Interceptor {\n\tObject afterInvoke(Object object, String methodName, Object[] arguments, Object result); // This code is executed after the method is optionally called.\n\tObject beforeInvoke(Object object, String methodName, Object[] arguments); // This code is executed before the method is optionally called.\n\tboolean doInvoke();\n}"}
{"index": 9859, "repo": "commons-math3-3.6.1", "des": "Perform Uniform Crossover [UX] on the specified chromosomes.", "code": "Class UniformCrossover<T> {\n\tChromosomePair crossover(Chromosome first, Chromosome second); // Perform a crossover operation on the given chromosomes.\n\tdouble getRatio(); // Returns the mixing ratio used by this CrossoverPolicy.\n}"}
{"index": 4084, "repo": "camel-core-3.0.0-RC1", "des": "The Claim Check EIP allows you to replace message content with a claim check (a unique key), which can be used to retrieve the message content at a later time.", "code": "Class ClaimCheckDefinition {\n\tClaimCheckDefinition aggregationStrategy(org.apache.camel.AggregationStrategy aggregationStrategy); // To use a custom AggregationStrategy instead of the default implementation.\n\tClaimCheckDefinition aggregationStrategy(Supplier<org.apache.camel.AggregationStrategy> aggregationStrategy); // To use a custom AggregationStrategy instead of the default implementation.\n\tClaimCheckDefinition aggregationStrategyMethodName(String aggregationStrategyMethodName); // This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.\n\tClaimCheckDefinition aggregationStrategyRef(String aggregationStrategyRef); // To use a custom AggregationStrategy instead of the default implementation.\n\tClaimCheckDefinition filter(String filter); // Specified a filter to control what data gets merging data back from the claim check repository.\n\torg.apache.camel.AggregationStrategy getAggregationStrategy();\n\tString getAggregationStrategyMethodName();\n\tString getAggregationStrategyRef();\n\tString getFilter();\n\tString getKey();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tClaimCheckOperation getOperation();\n\tString getShortName();\n\tClaimCheckDefinition key(String key); // To use a specific key for claim check id (for dynamic keys use simple language syntax as the key).\n\tClaimCheckDefinition operation(ClaimCheckOperation operation); // The claim check operation to use.\n\tvoid setAggregationStrategy(org.apache.camel.AggregationStrategy aggregationStrategy);\n\tvoid setAggregationStrategyMethodName(String aggregationStrategyMethodName);\n\tvoid setAggregationStrategyRef(String aggregationStrategyRef);\n\tvoid setFilter(String filter);\n\tvoid setKey(String key);\n\tvoid setOperation(ClaimCheckOperation operation);\n}"}
{"index": 18714, "repo": "opennlp-tools-2.2.0", "des": "Parser for Floresta Sita(c)tica Arvores Deitadas corpus, output to for the Portuguese NER training.", "code": "Class ADNameSampleStream {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tNameSample read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 9274, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "ResourceHandler implementation for allocating NUMA Resources to each container.", "code": "Class NumaResourceHandlerImpl {\n\tList<PrivilegedOperation> bootstrap(org.apache.hadoop.conf.Configuration configuration); // Bootstrap resource susbsystem.\n\tList<PrivilegedOperation> postComplete(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Perform any tasks necessary after container completion.\n\tList<PrivilegedOperation> preStart(Container container); // Prepare a resource environment for container launch\n\tList<PrivilegedOperation> reacquireContainer(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Require state for container that was already launched\n\tList<PrivilegedOperation> teardown(); // Teardown environment for resource subsystem if requested.\n\tList<PrivilegedOperation> updateContainer(Container container); // Update state for container that was already launched\n}"}
{"index": 16171, "repo": "spring-data-cassandra-4.1.2", "des": "Mapping information for an individual entity class.", "code": "public class EntityMapping extends Object {\n\tboolean equals(Object obj);\n\tString getEntityClassName();\n\tString getForceQuote(); // Deprecated. since 3.0.\n\tMap<String,PropertyMapping> getPropertyMappings();\n\tString getTableName();\n\tvoid setEntityClassName(String entityClassName);\n\tvoid setForceQuote(String forceQuote); // Deprecated.\n\tvoid setPropertyMappings(Map<String,PropertyMapping> propertyMappings);\n\tvoid setTableName(String tableName);\n}"}
{"index": 18393, "repo": "opencms-core-15.0", "des": "Parameters used by the quick launch provider.", "code": "Class CmsQuickLaunchParams {\n\tjava.lang.String getContext(); // Returns the context.\n\tCmsUUID getDetailId(); // Returns the detailId.\n\tCmsUUID getPageId(); // Returns the pageId.\n\tjava.lang.String getPath(); // Gets the path.\n\tjava.lang.String getReturnCode(); // Returns the returnCode.\n\tCmsUUID getSessionPageId(); // Gets the id of the last edited container page.\n\tboolean isPageContext(); // Returns true if the quick launcher is called from the page editor.\n\tboolean isSitemapContext(); // Returns true if the quick launcher is called from the sitemap editor.\n}"}
{"index": 8893, "repo": "hbase-server-3.0.0-alpha-4", "des": "Implementations of this interface will keep and return to clients implementations of classes providing API to execute coordinated operations.", "code": "Interface CoordinatedStateManager {\n\tSplitLogManagerCoordination getSplitLogManagerCoordination(); // Method to retrieve coordination for split log manager\n\tSplitLogWorkerCoordination getSplitLogWorkerCoordination(); // Method to retrieve coordination for split log worker\n}"}
{"index": 18779, "repo": "lucene-core-9.7.0", "des": "This class encapsulates the outer components of a token stream.", "code": "Class Analyzer.TokenStreamComponents {\n\tConsumer<Reader> getSource(); // Returns the component's source\n\tTokenStream getTokenStream(); // Returns the sink TokenStream\n}"}
{"index": 1066, "repo": "ignite-core-2.15.0", "des": "Utility class for page ID parts manipulation.", "code": "Class PageIdUtils {\n\tstatic long changePartitionId(long pageId, int partId);\n\tstatic long changeType(long pageId, byte type); // Change page type.\n\tstatic long effectivePageId(long link);\n\tstatic byte flag(long pageId);\n\tstatic boolean isEffectivePageId(long pageId);\n\tstatic int itemId(long link); // Index of the item inside of data page.\n\tstatic long link(long pageId, int itemId); // Constructs a page link by the given page ID and 8-byte words within the page.\n\tstatic long maskPartitionId(long pageId); // Masks partition ID from full page ID.\n\tstatic long pageId(int partId, byte flag, int pageIdx);\n\tstatic long pageId(long link); // Extracts a page ID from the given page link.\n\tstatic int pageIndex(long pageId); // Extracts a page index from the given page ID.\n\tstatic int partId(long pageId);\n\tstatic long rotatePageId(long pageId);\n\tstatic long rotationId(long pageId); // Returns the Rotation ID of a page identified by the given ID.\n\tstatic int tag(long link); // Tag of pageId\n\tstatic String toDetailString(long pageId);\n}"}
{"index": 15007, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A ClaimAccessor for the \"claims\" that can be returned in the OpenID Provider Configuration Response.", "code": "public interface OidcProviderMetadataClaimAccessor extends OAuth2AuthorizationServerMetadataClaimAccessor {\n\tdefault URL getEndSessionEndpoint(); // Returns the URL of the OpenID Connect 1.0 End Session Endpoint (end_session_endpoint).\n\tdefault List<String> getIdTokenSigningAlgorithms(); // Returns the JWS signing algorithms supported for the ID Token to encode the claims in a Jwt (id_token_signing_alg_values_supported).\n\tdefault List<String> getSubjectTypes(); // Returns the Subject Identifier types supported (subject_types_supported).\n\tdefault URL getUserInfoEndpoint(); // Returns the URL of the OpenID Connect 1.0 UserInfo Endpoint (userinfo_endpoint).\n}"}
{"index": 7811, "repo": "cassandra-all-4.1.2", "des": "State Transition: +------------------+-----> FAILED | ABORTED <---------------+ | | ^ | | | | initiator | INITIALIZED --> PREPARING --> STREAMING ------------> WAIT_COMPLETE ----> COMPLETED | | | ^ ^ | | | follower | | | | +-------------------------)-----------------+ | | | | | | if preview | | | +----------------------------------------+ | | nothing to request or to transfer | +-----------------------------------------------------------------------------+ nothing to request or to transfer .", "code": "Enum StreamSession.State {\n\tboolean isFinalState();\n\tstatic StreamSession.State valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic StreamSession.State[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8033, "repo": "commons-compress-1.23.0", "des": "Utility code for the BZip2 compression format.", "code": "Class BZip2Utils {\n\tstatic String getCompressedFilename(String fileName); // Maps the given file name to the name that the file should have after compression with bzip2.\n\tstatic String getUncompressedFilename(String fileName); // Maps the given name of a bzip2-compressed file to the name that the file should have after uncompression.\n\tstatic boolean isCompressedFilename(String fileName); // Detects common bzip2 suffixes in the given file name.\n}"}
{"index": 1335, "repo": "nutch-2.4", "des": "Storage class for DomainSuffix objects Note: this class is singleton.", "code": "Class DomainSuffixes {\n\tDomainSuffix get(java.lang.String extension); // Return the DomainSuffix object for the extension, if extension is a top level domain returned object will be an instance of TopLevelDomain\n\tstatic DomainSuffixes getInstance(); // Singleton instance, lazy instantination\n\tboolean isDomainSuffix(java.lang.String extension); // return whether the extension is a registered domain entry\n}"}
{"index": 5941, "repo": "commons-lang3-3.12.0", "des": "An implementation of the ThreadFactory interface that provides some configuration options for the threads it creates.", "code": "Class BasicThreadFactory {\n\tBoolean getDaemonFlag(); // Returns the daemon flag.\n\tString getNamingPattern(); // Returns the naming pattern for naming newly created threads.\n\tInteger getPriority(); // Returns the priority of the threads created by this factory.\n\tlong getThreadCount(); // Returns the number of threads this factory has already created.\n\tThread.UncaughtExceptionHandler getUncaughtExceptionHandler(); // Returns the UncaughtExceptionHandler for the threads created by this factory.\n\tThreadFactory getWrappedFactory(); // Returns the wrapped ThreadFactory.\n\tThread newThread(Runnable runnable); // Creates a new thread.\n}"}
{"index": 8108, "repo": "commons-compress-1.23.0", "des": "An extra field that stores UNIX UID/GID data (owner & group ownership) for a given ZIP entry.", "code": "Class X7875_NewUnix {\n\tObject clone();\n\tboolean equals(Object o);\n\tbyte[] getCentralDirectoryData(); // The actual data to put into central directory data - without Header-ID or length specifier.\n\tZipShort getCentralDirectoryLength(); // Length of the extra field in the central directory data - without Header-ID or length specifier.\n\tlong getGID(); // Gets the GID as a long.\n\tZipShort getHeaderId(); // The Header-ID.\n\tbyte[] getLocalFileDataData(); // The actual data to put into local file data - without Header-ID or length specifier.\n\tZipShort getLocalFileDataLength(); // Length of the extra field in the local file data - without Header-ID or length specifier.\n\tlong getUID(); // Gets the UID as a long.\n\tvoid parseFromCentralDirectoryData(byte[] buffer, int offset, int length); // Doesn't do anything since this class doesn't store anything inside the central directory.\n\tvoid parseFromLocalFileData(byte[] data, int offset, int length); // Populate data from this array as if it was in local file data.\n\tvoid setGID(long l); // Sets the GID.\n\tvoid setUID(long l); // Sets the UID.\n}"}
{"index": 13178, "repo": "spring-test-6.0.11", "des": "Default implementation of the ContextCache API.", "code": "public class DefaultContextCache extends Object implements ContextCache {\n\tvoid clear(); // Clear all contexts from the cache, clearing context hierarchy information as well.\n\tvoid clearStatistics(); // Clear hit count and miss count statistics for the cache (i.e., reset counters to zero).\n\tboolean contains(MergedContextConfiguration key); // Determine whether there is a cached context for the given key.\n\torg.springframework.context.ApplicationContext get(MergedContextConfiguration key); // Obtain a cached ApplicationContext for the given key.\n\tint getHitCount(); // Get the overall hit count for this cache.\n\tint getMaxSize(); // Get the maximum size of this cache.\n\tint getMissCount(); // Get the overall miss count for this cache.\n\tint getParentContextCount(); // Determine the number of parent contexts currently tracked within the cache.\n\tvoid logStatistics(); // Log the statistics for this ContextCache at DEBUG level using the \"org.springframework.test.context.cache\" logging category.\n\tvoid put(MergedContextConfiguration key, org.springframework.context.ApplicationContext context); // Explicitly add an ApplicationContext instance to the cache under the given key, potentially honoring a custom eviction policy.\n\tvoid remove(MergedContextConfiguration key, DirtiesContext.HierarchyMode hierarchyMode); // Remove the context with the given key from the cache and explicitly close it if it is an instance of ConfigurableApplicationContext.\n\tvoid reset(); // Reset all state maintained by this cache including statistics.\n\tint size(); // Determine the number of contexts currently stored in the cache.\n}"}
{"index": 14791, "repo": "spring-data-commons-3.1.2", "des": "Value object to abstract the concept of a property backed by a Field and / or a PropertyDescriptor.", "code": "public class Property extends Object {\n\tboolean equals(Object obj);\n\tOptional<Field> getField(); // Returns the field of the property if available and if its first (only) parameter matches the type of the property.\n\tOptional<Method> getGetter(); // Returns the getter of the property if available and if it matches the type of the property.\n\tString getName(); // Returns the name of the property.\n\tOptional<Method> getSetter(); // Returns the setter of the property if available and if its first (only) parameter matches the type of the property.\n\tClass<?> getType(); // Returns the type of the property.\n\tOptional<Method> getWither(); // Returns the wither of the property if available and if its first (only) parameter matches the type of the property.\n\tboolean hasAccessor(); // Returns whether the property exposes a getter or a setter.\n\tboolean isFieldBacked(); // Returns whether the property is backed by a field.\n\tstatic Property of(TypeInformation<?> type, PropertyDescriptor descriptor); // Creates a new Property for the given PropertyDescriptor.\n\tstatic Property of(TypeInformation<?> type, Field field); // Creates a new Property backed by the given field.\n\tstatic Property of(TypeInformation<?> type, Field field, PropertyDescriptor descriptor); // Creates a new Property backed by the given Field and PropertyDescriptor.\n\tstatic boolean supportsStandalone(PropertyDescriptor descriptor); // Returns whether the given PropertyDescriptor is supported in for standalone creation of a Property instance.\n}"}
{"index": 15888, "repo": "camel-api-4.0.0-RC1", "des": "Represents a map of values which timeout after a period of inactivity.", "code": "public interface TimeoutMap<K,V> extends Service {\n\tvoid addListener(TimeoutMap.Listener<K,V> listener); // Assign the (singular) TimeoutMap.Listener\n\tV get(K key); // Looks up the value in the map by the given key.\n\tV put(K key, V value, long timeoutMillis); // Adds the key value pair into the map such that some time after the given timeout the entry will be evicted\n\tV putIfAbsent(K key, V value, long timeoutMillis); // Adds the key value pair into the map if the specified key is not already associated with a value such that some time after the given timeout the entry will be evicted.\n\tV remove(K key); // Removes the object with the given key\n\tint size(); // Returns the size of the map\n}"}
{"index": 10732, "repo": "spring-tx-6.0.11", "des": "Interface to be implemented by transaction objects that are able to return an internal rollback-only marker, typically from another transaction that has participated and marked it as rollback-only.", "code": "public interface SmartTransactionObject extends Flushable {\n\tvoid flush(); // Flush the underlying sessions to the datastore, if applicable: for example, all affected Hibernate/JPA sessions.\n\tboolean isRollbackOnly(); // Return whether the transaction is internally marked as rollback-only.\n}"}
{"index": 5387, "repo": "druid-processing-26.0.0", "des": "Fetches data from top-level procfs files for metrics.", "code": "Class ProcFsReader {\n\tUUID getBootId(); // Reads the boot ID from the boot_id path, which is just a UUID.\n\tlong getProcessorCount(); // Reads the cpuinfo path (example in src/test/resources/cpuinfo) and counts the number of processors.\n}"}
{"index": 9154, "repo": "hbase-server-3.0.0-alpha-4", "des": "Utility methods for obtaining authentication tokens.", "code": "Class TokenUtil {\n\tstatic void addTokenForJob(Connection conn, org.apache.hadoop.mapred.JobConf job, User user); // Checks for an authentication token for the given user, obtaining a new token if necessary, and adds it to the credentials for the given map reduce job.\n\tstatic void addTokenForJob(Connection conn, User user, org.apache.hadoop.mapreduce.Job job); // Checks for an authentication token for the given user, obtaining a new token if necessary, and adds it to the credentials for the given map reduce job.\n\tstatic boolean addTokenIfMissing(Connection conn, User user); // Checks if an authentication tokens exists for the connected cluster, obtaining one if needed and adding it to the user's credentials.\n\tstatic void obtainAndCacheToken(Connection conn, User user); // See ClientTokenUtil.obtainAndCacheToken(Connection, User).\n\tstatic void obtainTokenForJob(Connection conn, org.apache.hadoop.mapred.JobConf job, User user); // Obtain an authentication token on behalf of the given user and add it to the credentials for the given map reduce job.\n\tstatic void obtainTokenForJob(Connection conn, User user, org.apache.hadoop.mapreduce.Job job); // Obtain an authentication token on behalf of the given user and add it to the credentials for the given map reduce job.\n}"}
{"index": 11593, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an ReactiveOAuth2UserService that supports OpenID Connect 1.0 Provider's.", "code": "public class OidcReactiveOAuth2UserService extends Object implements ReactiveOAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser> {\n\tstatic Map<String,org.springframework.core.convert.converter.Converter<Object,?>> createDefaultClaimTypeConverters(); // Returns the default Converter's used for type conversion of claim values for an OidcUserInfo.\n\treactor.core.publisher.Mono<org.springframework.security.oauth2.core.oidc.user.OidcUser> loadUser(OidcUserRequest userRequest); // Returns an OAuth2User after obtaining the user attributes of the End-User from the UserInfo Endpoint.\n\tfinal void setClaimTypeConverterFactory(Function<ClientRegistration,org.springframework.core.convert.converter.Converter<Map<String,Object>,Map<String,Object>>> claimTypeConverterFactory); // Sets the factory that provides a Converter used for type conversion of claim values for an OidcUserInfo.\n\tvoid setOauth2UserService(ReactiveOAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User> oauth2UserService);\n}"}
{"index": 16926, "repo": "spring-integration-ip-6.1.2", "des": "Utility methods and constants for IP adapter parsers.", "code": "public abstract class IpAdapterParserUtils extends Object {\n\tstatic void addConstructorValueIfAttributeDefined(org.springframework.beans.factory.support.BeanDefinitionBuilder builder, Element element, String attributeName); // Adds a constructor-arg to the provided bean definition builder with the value of the attribute whose name is provided if that attribute is defined in the given element.\n\tstatic void addDestinationConfigToConstructor(Element element, org.springframework.beans.factory.support.BeanDefinitionBuilder builder, org.springframework.beans.factory.xml.ParserContext parserContext); // Adds destination configuration to constructor.\n}"}
{"index": 200, "repo": "commons-collections4-4.4", "des": "Defines a map that maintains order and allows both forward and backward iteration through that order.", "code": "Interface OrderedMap<K,V> {\n\tK firstKey(); // Gets the first key currently in this map.\n\tK lastKey(); // Gets the last key currently in this map.\n\tOrderedMapIterator<K,V> mapIterator(); // Obtains an OrderedMapIterator over the map.\n\tK nextKey(K key); // Gets the next key after the one specified.\n\tK previousKey(K key); // Gets the previous key before the one specified.\n}"}
{"index": 2108, "repo": "hive-exec-4.0.0-alpha-2", "des": "GenericUDF Class for SQL construct \"nullif(a,b)\".", "code": "Class GenericUDFNullif {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 16624, "repo": "spring-beans-6.0.11", "des": "Descriptor for a specific dependency that is about to be injected.", "code": "public class DependencyDescriptor extends InjectionPoint implements Serializable {\n\tboolean equals(Object other);\n\tboolean fallbackMatchAllowed(); // Return whether a fallback match is allowed.\n\tDependencyDescriptor forFallbackMatch(); // Return a variant of this descriptor that is intended for a fallback match.\n\tString getDependencyName(); // Determine the name of the wrapped parameter/field.\n\tClass<?> getDependencyType(); // Determine the declared (non-generic) type of the wrapped parameter/field.\n\torg.springframework.core.ResolvableType getResolvableType(); // Build a ResolvableType object for the wrapped parameter/field.\n\torg.springframework.core.convert.TypeDescriptor getTypeDescriptor(); // Build a TypeDescriptor object for the wrapped parameter/field.\n\tvoid increaseNestingLevel(); // Increase this descriptor's nesting level.\n\tvoid initParameterNameDiscovery(org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer); // Initialize parameter name discovery for the underlying method parameter, if any.\n\tboolean isEager(); // Return whether this dependency is 'eager' in the sense of eagerly resolving potential target beans for type matching.\n\tboolean isRequired(); // Return whether this dependency is required.\n\tObject resolveCandidate(String beanName, Class<?> requiredType, BeanFactory beanFactory); // Resolve the specified bean name, as a candidate result of the matching algorithm for this dependency, to a bean instance from the given factory.\n\tObject resolveNotUnique(org.springframework.core.ResolvableType type, Map<String,Object> matchingBeans); // Resolve the specified not-unique scenario: by default, throwing a NoUniqueBeanDefinitionException.\n\tObject resolveShortcut(BeanFactory beanFactory); // Resolve a shortcut for this dependency against the given factory, for example taking some pre-resolved information into account.\n\tvoid setContainingClass(Class<?> containingClass); // Optionally set the concrete class that contains this dependency.\n}"}
{"index": 18068, "repo": "spring-ws-core-4.0.5", "des": "Subinterface of SoapBody that exposes SOAP 1.2 functionality.", "code": "public interface Soap12Body extends SoapBody {\n\tSoap12Fault addClientOrSenderFault(String faultStringOrReason, Locale locale); // Adds a Client/Sender fault to the body.\n\tSoap12Fault addDataEncodingUnknownFault(QName[] subcodes, String reason, Locale locale); // Adds a DataEncodingUnknown fault to the body.\n\tSoap12Fault addMustUnderstandFault(String faultStringOrReason, Locale locale); // Adds a MustUnderstand fault to the body.\n\tSoap12Fault addServerOrReceiverFault(String faultStringOrReason, Locale locale); // Adds a Server/Receiver fault to the body.\n\tSoap12Fault addVersionMismatchFault(String faultStringOrReason, Locale locale); // Adds a VersionMismatch fault to the body.\n\tSoap12Fault getFault(); // Returns the SoapFault of this body.\n}"}
{"index": 8017, "repo": "commons-compress-1.23.0", "des": "Archive input streams MUST override the InputStream.", "code": "Class ArchiveInputStream {\n\tboolean canReadEntryData(ArchiveEntry archiveEntry); // Whether this stream is able to read the given entry.\n\tprotected void count(int read); // Increments the counter of already read bytes.\n\tprotected void count(long read); // Increments the counter of already read bytes.\n\tlong getBytesRead(); // Returns the current number of bytes read from this stream.\n\tabstract ArchiveEntry getNextEntry(); // Returns the next Archive Entry in this Stream.\n\tprotected void pushedBackBytes(long pushedBack); // Decrements the counter of already read bytes.\n\tint read(); // Reads a byte of data.\n}"}
{"index": 17748, "repo": "spring-web-6.0.11", "des": "Encapsulates information about a handler method consisting of a method and a bean.", "code": "public class HandlerMethod extends Object {\n\tprotected void assertTargetBean(Method method, Object targetBean, Object[] args); // Assert that the target bean class is an instance of the class where the given method is declared.\n\tHandlerMethod createWithResolvedBean(); // If the provided instance contains a bean name rather than an object instance, the bean name is resolved before a HandlerMethod is created and returned.\n\tboolean equals(Object other);\n\tprotected static Object findProvidedArgument(org.springframework.core.MethodParameter parameter, Object... providedArgs);\n\tprotected static String formatArgumentError(org.springframework.core.MethodParameter param, String message);\n\tprotected String formatInvokeError(String text, Object[] args);\n\tObject getBean(); // Return the bean for this handler method.\n\tClass<?> getBeanType(); // This method returns the type of the handler for this handler method.\n\tprotected Method getBridgedMethod(); // If the bean method is a bridge method, this method returns the bridged (user-defined) method.\n\tMethod getMethod(); // Return the method for this handler method.\n\t<A extends Annotation>A getMethodAnnotation(Class<A> annotationType); // Return a single annotation on the underlying method traversing its super methods if no annotation can be found on the given method itself.\n\torg.springframework.core.MethodParameter[] getMethodParameters(); // Return the method parameters for this handler method.\n\tHandlerMethod getResolvedFromHandlerMethod(); // Return the HandlerMethod from which this HandlerMethod instance was resolved via createWithResolvedBean().\n\tprotected HttpStatusCode getResponseStatus(); // Return the specified response status, if any.\n\tprotected String getResponseStatusReason(); // Return the associated response status reason, if any.\n\torg.springframework.core.MethodParameter getReturnType(); // Return the HandlerMethod return type.\n\torg.springframework.core.MethodParameter getReturnValueType(Object returnValue); // Return the actual return value type.\n\tString getShortLogMessage(); // Return a short representation of this handler method for log message purposes.\n\t<A extends Annotation>boolean hasMethodAnnotation(Class<A> annotationType); // Return whether the parameter is declared with the given annotation type.\n\tboolean isVoid(); // Return true if the method return type is void, false otherwise.\n}"}
{"index": 13775, "repo": "spring-webmvc-6.0.11", "des": "Utility class for easy access to request-specific state which has been set by the DispatcherServlet.", "code": "public abstract class RequestContextUtils extends Object {\n\tstatic org.springframework.web.context.WebApplicationContext findWebApplicationContext(HttpServletRequest request); // Look for the WebApplicationContext associated with the DispatcherServlet that has initiated request processing, and for the global context if none was found associated with the current request.\n\tstatic org.springframework.web.context.WebApplicationContext findWebApplicationContext(HttpServletRequest request, ServletContext servletContext); // Look for the WebApplicationContext associated with the DispatcherServlet that has initiated request processing, and for the global context if none was found associated with the current request.\n\tstatic FlashMapManager getFlashMapManager(HttpServletRequest request); // Return the FlashMapManager instance to save flash attributes.\n\tstatic Map<String,?> getInputFlashMap(HttpServletRequest request); // Return read-only \"input\" flash attributes from request before redirect.\n\tstatic Locale getLocale(HttpServletRequest request); // Retrieve the current locale from the given request, using the LocaleResolver bound to the request by the DispatcherServlet (if available), falling back to the request's locale based on the Accept-Language header or the default locale for the server.\n\tstatic LocaleResolver getLocaleResolver(HttpServletRequest request); // Return the LocaleResolver that has been bound to the request by the DispatcherServlet.\n\tstatic FlashMap getOutputFlashMap(HttpServletRequest request); // Return \"output\" FlashMap to save attributes for request after redirect.\n\tstatic org.springframework.ui.context.Theme getTheme(HttpServletRequest request); // Deprecated. as of 6.0, with no direct replacement\n\tstatic ThemeResolver getThemeResolver(HttpServletRequest request); // Deprecated. as of 6.0, with no direct replacement\n\tstatic org.springframework.ui.context.ThemeSource getThemeSource(HttpServletRequest request); // Deprecated. as of 6.0, with no direct replacement\n\tstatic TimeZone getTimeZone(HttpServletRequest request); // Retrieve the current time zone from the given request, using the TimeZoneAwareLocaleContext in the LocaleResolver bound to the request by the DispatcherServlet (if available).\n\tstatic void saveOutputFlashMap(String location, HttpServletRequest request, HttpServletResponse response); // Convenience method that retrieves the \"output\" FlashMap, updates it with the path and query params of the target URL, and then saves it using the FlashMapManager.\n}"}
{"index": 8726, "repo": "hadoop-yarn-common-3.3.6", "des": "A simple log4j-appender for container's logs.", "code": "Class ContainerLogAppender {\n\tvoid activateOptions();\n\tvoid append(org.apache.log4j.spi.LoggingEvent event);\n\tvoid close();\n\tvoid flush();\n\tString getContainerLogDir(); // Getter/Setter methods for log4j.\n\tString getContainerLogFile();\n\tlong getTotalLogFileSize();\n\tvoid setContainerLogDir(String containerLogDir);\n\tvoid setContainerLogFile(String containerLogFile);\n\tvoid setTotalLogFileSize(long logSize); // Setter so that log4j can configure it from the configuration(log4j.properties).\n}"}
{"index": 17065, "repo": "spring-integration-core-6.1.2", "des": "The component which can be used as general purpose of errors publishing.", "code": "public class ErrorMessagePublisher extends Object implements org.springframework.beans.factory.BeanFactoryAware {\n\tprotected Throwable determinePayload(Throwable throwable, org.springframework.core.AttributeAccessor context); // Build a Throwable payload for future ErrorMessage.\n\torg.springframework.messaging.MessageChannel getChannel();\n\tprotected org.springframework.messaging.core.DestinationResolver<org.springframework.messaging.MessageChannel> getChannelResolver();\n\tErrorMessageStrategy getErrorMessageStrategy();\n\tprotected MessagingTemplate getMessagingTemplate();\n\tprotected Throwable payloadWhenNull(org.springframework.core.AttributeAccessor context); // Build a Throwable payload based on the provided context for future ErrorMessage when there is original Throwable.\n\tvoid publish(Throwable throwable, org.springframework.core.AttributeAccessor context); // Publish an error message for the supplied throwable and context.\n\tvoid publish(org.springframework.messaging.Message<?> failedMessage, Throwable throwable); // Publish an error message for the supplied message and throwable.\n\tvoid publish(org.springframework.messaging.Message<?> inputMessage, org.springframework.messaging.Message<?> failedMessage, Throwable throwable); // Publish an error message for the supplied message and throwable.\n\tvoid publish(org.springframework.messaging.Message<?> inputMessage, org.springframework.messaging.MessagingException exception); // Publish an error message for the supplied exception.\n\tvoid publish(org.springframework.messaging.MessagingException exception); // Publish an error message for the supplied exception.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tfinal void setChannel(org.springframework.messaging.MessageChannel channel);\n\tvoid setChannelName(String channelName);\n\tfinal void setChannelResolver(org.springframework.messaging.core.DestinationResolver<org.springframework.messaging.MessageChannel> channelResolver);\n\tfinal void setErrorMessageStrategy(ErrorMessageStrategy errorMessageStrategy);\n\tfinal void setSendTimeout(long sendTimeout);\n}"}
{"index": 3014, "repo": "tink-1.10.0", "des": "JwtEcdsaPublicKey represents the public portion of JWT ECDSA keys.", "code": "Class JwtEcdsaPublicKey {\n\tstatic JwtEcdsaPublicKey.Builder builder();\n\tboolean equalsKey(Key o); // Returns true if the key is guaranteed to be equal to other.\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tOptional<String> getKid();\n\tJwtEcdsaParameters getParameters(); // Returns the parameters of this key.\n\tECPoint getPublicPoint();\n}"}
{"index": 2551, "repo": "exoplayer-r2.3.1", "des": "Defines a range of data located at a reference uri.", "code": "Class RangedUri {\n\tRangedUri attemptMerge(RangedUri other, java.lang.String baseUri); // Attempts to merge this RangedUri with another and an optional common base uri.\n\tboolean equals(java.lang.Object obj);\n\tandroid.net.Uri resolveUri(java.lang.String baseUri); // Returns the resolved Uri represented by the instance.\n\tjava.lang.String resolveUriString(java.lang.String baseUri); // Returns the resolved uri represented by the instance as a string.\n}"}
{"index": 17043, "repo": "spring-integration-core-6.1.2", "des": "An OutboundMessageMapper and InboundMessageMapper that maps to/from byte[].", "code": "public interface BytesMessageMapper extends InboundMessageMapper<byte[]>, OutboundMessageMapper<byte[]> {\n\tdefault org.springframework.messaging.Message<?> toMessage(byte[] object); // Convert a provided object to the Message.\n\torg.springframework.messaging.Message<?> toMessage(byte[] bytes, Map<String,Object> headers); // Convert a provided object to the Message and supply with headers if necessary and provided.\n}"}
{"index": 13381, "repo": "shiro-core-2.0.0-alpha-2", "des": "Builder design pattern implementation for creating Subject instances in a simplified way without requiring knowledge of Shiro's construction techniques.", "code": "public static class Subject.Builder extends Object {\n\tSubject.Builder authenticated(boolean authenticated); // Ensures the Subject being built will be considered authenticated.\n\tSubject buildSubject(); // Creates and returns a new Subject instance reflecting the cumulative state acquired by the other methods in this class.\n\tSubject.Builder contextAttribute(String attributeKey, Object attributeValue); // Allows custom attributes to be added to the underlying context Map used to construct the Subject instance.\n\tprotected SubjectContext getSubjectContext(); // Returns the backing context used to build the Subject instance, available to subclasses since the context class attribute is marked as private.\n\tSubject.Builder host(String host); // Ensures the Subject being built will reflect the specified host name or IP as its originating location.\n\tprotected SubjectContext newSubjectContextInstance(); // Creates a new SubjectContext instance to be used to populate with subject contextual data that will then be sent to the SecurityManager to create a new Subject instance.\n\tSubject.Builder principals(PrincipalCollection principals); // Ensures the Subject being built will reflect the specified principals (aka identity).\n\tSubject.Builder session(Session session); // Ensures the Subject being built will use the specified Session instance.\n\tSubject.Builder sessionCreationEnabled(boolean enabled); // Configures whether or not the created Subject instance can create a new Session if one does not already exist.\n\tSubject.Builder sessionId(Serializable sessionId); // Enables building a Subject instance that owns the Session with the specified sessionId.\n}"}
{"index": 16314, "repo": "maven-compat-4.0.0-alpha-7", "des": "Manages Wagon related operations in Maven.", "code": "@Named @Singleton public class DefaultWagonManager extends DefaultWagonManager implements WagonManager {\n\tvoid getArtifact(Artifact artifact, List<ArtifactRepository> remoteRepositories);\n\tvoid getArtifact(Artifact artifact, ArtifactRepository repository);\n\torg.apache.maven.wagon.authentication.AuthenticationInfo getAuthenticationInfo(String id); // this method is only here for backward compat (project-info-reports:dependencies) the default implementation will return an empty AuthenticationInfo\n\tArtifactRepository getMirrorRepository(ArtifactRepository repository); // Deprecated.\n\torg.apache.maven.wagon.proxy.ProxyInfo getProxy(String protocol);\n}"}
{"index": 5478, "repo": "druid-processing-26.0.0", "des": "This class serves as the Storage Adapter for the Unnest Segment and is responsible for creating the cursors If the column is dictionary encoded it creates UnnestDimensionCursor else UnnestColumnValueSelectorCursor These cursors help navigate the segments for these cases.", "code": "Class UnnestStorageAdapter {\n\tPair<Filter,Filter> computeBaseAndPostUnnestFilters(Filter queryFilter, Filter unnestFilter, VirtualColumns queryVirtualColumns, String inputColumn, ColumnCapabilities inputColumnCapabilites); // Split queryFilter into pre- and post-correlate filters.\n\tIndexed<String> getAvailableDimensions();\n\tIterable<String> getAvailableMetrics();\n\tStorageAdapter getBaseAdapter();\n\tColumnCapabilities getColumnCapabilities(String column); // Returns capabilities of a particular column, if known.\n\tint getDimensionCardinality(String column); // Returns the number of distinct values for a column, or DimensionDictionarySelector.CARDINALITY_UNKNOWN if unknown.\n\torg.joda.time.Interval getInterval();\n\torg.joda.time.DateTime getMaxIngestedEventTime();\n\torg.joda.time.DateTime getMaxTime(); // Metadata-only operation that returns an upper bound on ColumnHolder.TIME_COLUMN_NAME values for this adapter.\n\tComparable getMaxValue(String column); // Returns the minimum value of the provided column, if known through an index, dictionary, or cache.\n\tMetadata getMetadata();\n\torg.joda.time.DateTime getMinTime(); // Metadata-only operation that returns a lower bound on ColumnHolder.TIME_COLUMN_NAME values for this adapter.\n\tComparable getMinValue(String column); // Returns the minimum value of the provided column, if known through an index, dictionary, or cache.\n\tint getNumRows();\n\tVirtualColumn getUnnestColumn();\n\tFilter getUnnestFilter();\n\tString getUnnestInputIfDirectAccess(VirtualColumn unnestColumn); // Returns the input of unnestColumn, if it's a direct access; otherwise returns null.\n\tSequence<Cursor> makeCursors(Filter filter, org.joda.time.Interval interval, VirtualColumns virtualColumns, Granularity gran, boolean descending, QueryMetrics<?> queryMetrics); // Creates a sequence of Cursors, one for each time-granular bucket (based on the provided Granularity).\n}"}
{"index": 1578, "repo": "pdfbox-3.0.0-beta1", "des": "Resources for a shading type 7 (Tensor-Product Patch Mesh).", "code": "Class PDShadingType7 {\n\tprotected org.apache.pdfbox.pdmodel.graphics.shading.Patch generatePatch(Point2D[] points, float[][] color); // Create a patch using control points and 4 corner color values, in Type6ShadingContext, a CoonsPatch is returned; in Type6ShadingContext, a TensorPatch is returned.\n\tint getBitsPerComponent(); // The bits per component of this shading.\n\tint getBitsPerCoordinate(); // The bits per coordinate of this shading.\n\tRectangle2D getBounds(AffineTransform xform, Matrix matrix); // Calculate a bounding rectangle around the areas of this shading context.\n\tPDRange getDecodeForParameter(int paramNum); // Get the decode for the input parameter.\n\tint getNumberOfColorComponents(); // The number of color components of this shading.\n\tint getShadingType(); // This will return the shading type.\n\tprotected float interpolate(float src, long srcMax, float dstMin, float dstMax); // Calculate the interpolation, see p.345 pdf spec 1.7.\n\tprotected org.apache.pdfbox.pdmodel.graphics.shading.Patch readPatch(ImageInputStream input, boolean isFree, Point2D[] implicitEdge, float[][] implicitCornerColor, long maxSrcCoord, long maxSrcColor, PDRange rangeX, PDRange rangeY, PDRange[] colRange, Matrix matrix, AffineTransform xform, int controlPoints); // Read a single patch from a data stream, a patch contains information of its coordinates and color parameters.\n\tprotected org.apache.pdfbox.pdmodel.graphics.shading.Vertex readVertex(ImageInputStream input, long maxSrcCoord, long maxSrcColor, PDRange rangeX, PDRange rangeY, PDRange[] colRangeTab, Matrix matrix, AffineTransform xform); // Read a vertex from the bit input stream performs interpolations.\n\tvoid setBitsPerComponent(int bitsPerComponent); // Set the number of bits per component.\n\tvoid setBitsPerCoordinate(int bitsPerCoordinate); // Set the number of bits per coordinate.\n\tvoid setDecodeValues(COSArray decodeValues); // This will set the decode values.\n\tPaint toPaint(Matrix matrix); // Returns an AWT paint which corresponds to this shading\n}"}
{"index": 15649, "repo": "spring-security-core-6.1.2", "des": "Maintains a registry of SessionInformation instances.", "code": "public interface SessionRegistry {\n\tList<Object> getAllPrincipals(); // Obtains all the known principals in the SessionRegistry.\n\tList<SessionInformation> getAllSessions(Object principal, boolean includeExpiredSessions); // Obtains all the known sessions for the specified principal.\n\tSessionInformation getSessionInformation(String sessionId); // Obtains the session information for the specified sessionId.\n\tvoid refreshLastRequest(String sessionId); // Updates the given sessionId so its last request time is equal to the present date and time.\n\tvoid registerNewSession(String sessionId, Object principal); // Registers a new session for the specified principal.\n\tvoid removeSessionInformation(String sessionId); // Deletes all the session information being maintained for the specified sessionId.\n}"}
{"index": 10798, "repo": "spring-boot-actuator-3.1.1", "des": "A MappingDescriptionProvider that describes that mappings of any Filters registered with a ServletContext.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.FiltersMappingDescriptionProvider.FiltersMappingDescriptionProviderRuntimeHints.class) public class FiltersMappingDescriptionProvider extends Object implements MappingDescriptionProvider {\n\tList<FilterRegistrationMappingDescription> describeMappings(org.springframework.context.ApplicationContext context); // Produce the descriptions of the mappings identified by this provider in the given context.\n\tString getMappingName(); // Returns the name of the mappings described by this provider.\n}"}
{"index": 11295, "repo": "spring-context-6.0.11", "des": "Composite CacheManager implementation that iterates over a given collection of delegate CacheManager instances.", "code": "public class CompositeCacheManager extends Object implements CacheManager, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tCache getCache(String name); // Get the cache associated with the given name.\n\tCollection<String> getCacheNames(); // Get a collection of the cache names known by this manager.\n\tvoid setCacheManagers(Collection<CacheManager> cacheManagers); // Specify the CacheManagers to delegate to.\n\tvoid setFallbackToNoOpCache(boolean fallbackToNoOpCache); // Indicate whether a NoOpCacheManager should be added at the end of the delegate list.\n}"}
{"index": 10689, "repo": "spring-integration-kafka-6.1.2", "des": "A MessageHandlerSpec implementation for the KafkaProducerMessageHandler as a gateway.", "code": "public class KafkaOutboundGatewaySpec<K,V,R,S extends KafkaOutboundGatewaySpec<K,V,R,S>> extends KafkaProducerMessageHandlerSpec<K,V,S> {\n\tS assigmentDuration(Duration duration); // Set the time to wait for partition assignment, when used as a gateway, to determine the default reply-to topic/partition.\n\tS replyMessageConverter(org.springframework.kafka.support.converter.RecordMessageConverter messageConverter); // Set a message converter for replies (when a gateway).\n}"}
{"index": 15260, "repo": "spring-boot-3.1.1", "des": "InitializingBean that performs DataSource initialization using schema (DDL) and data (DML) scripts.", "code": "public class DataSourceScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer {\n\tprotected void customize(org.springframework.jdbc.datasource.init.ResourceDatabasePopulator populator); // Customize the ResourceDatabasePopulator.\n\tprotected final DataSource getDataSource(); // Returns the DataSource that will be initialized.\n\tprotected boolean isEmbeddedDatabase(); // Returns whether the database that is to be initialized is embedded.\n\tprotected void runScripts(AbstractScriptDatabaseInitializer.Scripts scripts); // Initialize the database by running the given scripts.\n}"}
{"index": 17955, "repo": "spring-web-6.0.11", "des": "Convenient superclass for application objects running in a WebApplicationContext.", "code": "public abstract class WebApplicationObjectSupport extends org.springframework.context.support.ApplicationObjectSupport implements ServletContextAware {\n\tprotected final ServletContext getServletContext(); // Return the current ServletContext.\n\tprotected final File getTempDir(); // Return the temporary directory for the current web application, as provided by the servlet container.\n\tprotected final WebApplicationContext getWebApplicationContext(); // Return the current application context as WebApplicationContext.\n\tprotected void initApplicationContext(org.springframework.context.ApplicationContext context); // Calls initServletContext(jakarta.servlet.ServletContext) if the given ApplicationContext is a WebApplicationContext.\n\tprotected void initServletContext(ServletContext servletContext); // Subclasses may override this for custom initialization based on the ServletContext that this application object runs in.\n\tprotected boolean isContextRequired(); // Overrides the base class behavior to enforce running in an ApplicationContext.\n\tfinal void setServletContext(ServletContext servletContext); // Set the ServletContext that this object runs in.\n}"}
{"index": 17270, "repo": "groovy-4.0.13", "des": "Helper class to return either a SourceUnit or ClassNode.", "code": "public static class ClassNodeResolver.LookupResult extends Object {\n\tClassNode getClassNode(); // returns the ClassNode\n\tSourceUnit getSourceUnit(); // returns the SourceUnit\n\tboolean isClassNode(); // returns true if a ClassNode is stored\n\tboolean isSourceUnit(); // returns true if a SourceUnit is stored\n}"}
{"index": 1882, "repo": "hadoop-hdfs-3.3.6", "des": "Stream wrapper that keeps track of the current stream position.", "code": "Class FSEditLogLoader.PositionTrackingInputStream {\n\tvoid clearLimit(); // Disable limit.\n\tlong getPos();\n\tvoid mark(int limit);\n\tint read();\n\tint read(byte[] data);\n\tint read(byte[] data, int offset, int length);\n\tvoid reset();\n\tvoid setLimit(long limit); // Set a limit.\n\tlong skip(long amt);\n}"}
{"index": 10393, "repo": "spring-core-6.0.11", "des": "MethodMetadata implementation that uses standard reflection to introspect a given Method.", "code": "public class StandardMethodMetadata extends Object implements MethodMetadata {\n\tboolean equals(Object obj);\n\tMultiValueMap<String,Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString); // Retrieve all attributes of all annotations of the given type, if any (i.e.\n\tMap<String,Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString); // Retrieve the attributes of the annotation of the given type, if any (i.e.\n\tMergedAnnotations getAnnotations(); // Return annotation details based on the direct annotations of the underlying element.\n\tString getDeclaringClassName(); // Get the fully-qualified name of the class that declares the underlying method.\n\tfinal Method getIntrospectedMethod(); // Return the underlying Method.\n\tString getMethodName(); // Get the name of the underlying method.\n\tString getReturnTypeName(); // Get the fully-qualified name of the underlying method's declared return type.\n\tboolean isAbstract(); // Determine whether the underlying method is effectively abstract: i.e.\n\tboolean isFinal(); // Determine whether the underlying method is marked as 'final'.\n\tboolean isOverridable(); // Determine whether the underlying method is overridable, i.e.\n\tboolean isStatic(); // Determine whether the underlying method is declared as 'static'.\n}"}
{"index": 9460, "repo": "curator-recipes-5.5.0", "des": "A counter that attempts atomic increments.", "code": "Class DistributedAtomicLong {\n\tAtomicValue<Long> add(Long delta); // Add delta to the current value and return the new value information.\n\tAtomicValue<Long> compareAndSet(Long expectedValue, Long newValue); // Atomically sets the value to the given updated value if the current value == the expected value.\n\tAtomicValue<Long> decrement(); // Subtract 1 from the current value and return the new value information.\n\tvoid forceSet(Long newValue); // Forcibly sets the value of the counter without any guarantees of atomicity.\n\tAtomicValue<Long> get(); // Returns the current value of the counter.\n\tAtomicValue<Long> increment(); // Add 1 to the current value and return the new value information.\n\tboolean initialize(Long initialize); // Atomic values are initially set to the equivalent of NULL in a database.\n\tAtomicValue<Long> subtract(Long delta); // Subtract delta from the current value and return the new value information.\n\tAtomicValue<Long> trySet(Long newValue); // Attempt to atomically set the value to the given value.\n}"}
{"index": 9029, "repo": "hbase-server-3.0.0-alpha-4", "des": "A class implementing PersistentIOEngine interface supports file integrity verification for BucketCache which use persistent IOEngine.", "code": "Class PersistentIOEngine {\n\tprotected byte[] calculateChecksum(String algorithm); // Using an encryption algorithm to calculate a checksum, the default encryption algorithm is MD5\n\tprotected void verifyFileIntegrity(byte[] persistentChecksum, String algorithm); // Verify cache files's integrity\n}"}
{"index": 13565, "repo": "spring-messaging-6.0.11", "des": "Spec to declare the input for an RSocket request.", "code": "public static interface RSocketRequester.RequestSpec extends RSocketRequester.MetadataSpec<RSocketRequester.RequestSpec>, RSocketRequester.RetrieveSpec {\n\tRSocketRequester.RetrieveSpec data(Object data); // Provide payload data for the request.\n\tRSocketRequester.RetrieveSpec data(Object producer, Class<?> elementClass); // Variant of data(Object) that also accepts a hint for the types of values that will be produced.\n\tRSocketRequester.RetrieveSpec data(Object producer, org.springframework.core.ParameterizedTypeReference<?> elementTypeRef); // Variant of data(Object, Class) for when the type hint has to have a generic type.\n\tRSocketRequester.RequestSpec metadata(Consumer<RSocketRequester.MetadataSpec<?>> configurer); // Append additional metadata entries through a Consumer.\n\treactor.core.publisher.Mono<Void> sendMetadata(); // Perform a metadataPush.\n}"}
{"index": 15356, "repo": "spring-boot-3.1.1", "des": "A ServletContextInitializer to register Servlets in a Servlet 3.0+ container.", "code": "public class ServletRegistrationBean<T extends jakarta.servlet.Servlet> extends DynamicRegistrationBean<jakarta.servlet.ServletRegistration.Dynamic> {\n\tprotected jakarta.servlet.ServletRegistration.Dynamic addRegistration(String description, jakarta.servlet.ServletContext servletContext);\n\tvoid addUrlMappings(String... urlMappings); // Add URL mappings, as defined in the Servlet specification, for the servlet.\n\tprotected void configure(jakarta.servlet.ServletRegistration.Dynamic registration); // Configure registration settings.\n\tprotected String getDescription(); // Return a description of the registration.\n\tjakarta.servlet.MultipartConfigElement getMultipartConfig(); // Returns the multi-part configuration to be applied or null.\n\tT getServlet(); // Return the servlet being registered.\n\tString getServletName(); // Returns the servlet name that will be registered.\n\tCollection<String> getUrlMappings(); // Return a mutable collection of the URL mappings, as defined in the Servlet specification, for the servlet.\n\tvoid setLoadOnStartup(int loadOnStartup); // Sets the loadOnStartup priority.\n\tvoid setMultipartConfig(jakarta.servlet.MultipartConfigElement multipartConfig); // Set the multi-part configuration.\n\tvoid setServlet(T servlet); // Sets the servlet to be registered.\n\tvoid setUrlMappings(Collection<String> urlMappings); // Set the URL mappings for the servlet.\n}"}
{"index": 10681, "repo": "groovy-all-4.0.13", "des": "Parse XML into a document tree that may be traversed similar to XPath expressions.", "code": "public class XmlSlurper extends DefaultHandler {\n\tvoid characters(char[] ch, int start, int length);\n\tvoid endDocument();\n\tvoid endElement(String namespaceURI, String localName, String qName);\n\tGPathResult getDocument();\n\tDTDHandler getDTDHandler();\n\tEntityResolver getEntityResolver();\n\tErrorHandler getErrorHandler();\n\tboolean getFeature(String uri);\n\tObject getProperty(String uri);\n\tvoid ignorableWhitespace(char[] buffer, int start, int len);\n\tboolean isKeepIgnorableWhitespace();\n\tGPathResult parse(File file); // Parses the content of the given file as XML turning it into a GPathResult object\n\tGPathResult parse(InputStream input); // Parse the content of the specified input stream into an GPathResult Object.\n\tGPathResult parse(Reader in); // Parse the content of the specified reader into a GPathResult Object.\n\tGPathResult parse(String uri); // Parse the content of the specified URI into a GPathResult Object\n\tGPathResult parse(Path path);\n\tGPathResult parse(InputSource input); // Parse the content of the specified input source into a GPathResult object\n\tGPathResult parseText(String text); // A helper method to parse the given text as XML\n\tvoid setDTDHandler(DTDHandler dtdHandler);\n\tvoid setEntityBaseUrl(URL base); // Resolves entities against using the supplied URL as the base for relative URLs\n\tvoid setEntityResolver(EntityResolver entityResolver);\n\tvoid setErrorHandler(ErrorHandler errorHandler);\n\tvoid setFeature(String uri, boolean value);\n\tvoid setKeepIgnorableWhitespace(boolean keepIgnorableWhitespace);\n\tvoid setKeepWhitespace(boolean keepWhitespace); // Deprecated. use setKeepIgnorableWhitespace\n\tvoid setProperty(String uri, Object value);\n\tvoid startDocument();\n\tvoid startElement(String namespaceURI, String localName, String qName, Attributes atts);\n\tvoid startPrefixMapping(String tag, String uri);\n}"}
{"index": 5053, "repo": "commons-collections-3.2.2", "des": "Decorates another List to validate that all additions match a specified predicate.", "code": "Class PredicatedList {\n\tvoid add(int index, Object object);\n\tboolean addAll(int index, Collection coll);\n\tstatic List decorate(List list, Predicate predicate); // Factory method to create a predicated (validating) list.\n\tObject get(int index);\n\tprotected List getList(); // Gets the list being decorated.\n\tint indexOf(Object object);\n\tint lastIndexOf(Object object);\n\tListIterator listIterator();\n\tListIterator listIterator(int i);\n\tObject remove(int index);\n\tObject set(int index, Object object);\n\tList subList(int fromIndex, int toIndex);\n}"}
{"index": 13650, "repo": "spring-webmvc-6.0.11", "des": "Abstract base class for Atom and RSS Feed views, using the ROME package.", "code": "public abstract class AbstractFeedView<T extends com.rometools.rome.feed.WireFeed> extends AbstractView {\n\tprotected abstract void buildFeedEntries(Map<String,Object> model, T feed, HttpServletRequest request, HttpServletResponse response); // Subclasses must implement this method to build feed entries, given the model.\n\tprotected void buildFeedMetadata(Map<String,Object> model, T feed, HttpServletRequest request); // Populate the feed metadata (title, link, description, etc.).\n\tprotected abstract T newFeed(); // Create a new feed to hold the entries.\n\tprotected final void renderMergedOutputModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Subclasses must implement this method to actually render the view.\n}"}
{"index": 16180, "repo": "spring-data-cassandra-4.1.2", "des": "Abstract builder class to support the construction of table specifications that have table options, that is, those options normally specified by WITH ... AND ....", "code": "public abstract class KeyspaceOptionsSpecification<T extends KeyspaceOptionsSpecification<T>> extends KeyspaceActionSpecification {\n\tboolean equals(Object o);\n\tMap<String,Object> getOptions();\n\tT with(String name, Object value, boolean escape, boolean quote); // Adds the given option by name to this keyspaces's options.\n\tT with(KeyspaceOption option); // Convenience method that calls with(option, null).\n\tT with(KeyspaceOption option, Object value); // Sets the given table option.\n}"}
{"index": 3127, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "Models the list of transactions that should be included in a snapshot.", "code": "Interface ValidTxnList {\n\tlong getHighWatermark(); // Get the largest transaction id used.\n\tlong[] getInvalidTransactions(); // Get the list of transactions under the high water mark that are not valid.\n\tLong getMinOpenTxn(); // Returns smallest Open transaction in this set, null if there is none.\n\tboolean isTxnAborted(long txnid); // Indicates whether a given transaction is aborted.\n\tValidTxnList.RangeResponse isTxnRangeAborted(long minTxnId, long maxTxnId); // Find out if a range of transaction ids are aborted.\n\tValidTxnList.RangeResponse isTxnRangeValid(long minTxnId, long maxTxnId); // Find out if a range of transaction ids are valid.\n\tboolean isTxnValid(long txnid); // Indicates whether a given transaction is valid.\n\tvoid readFromString(String src); // Populate this validTxnList from the string.\n\tvoid removeException(long txnId);\n\tString writeToString(); // Write this validTxnList into a string.\n}"}
{"index": 17804, "repo": "spring-web-6.0.11", "des": "Resolves Map method arguments and handles Map return values.", "code": "public class MapMethodProcessor extends Object implements HandlerMethodArgumentResolver, HandlerMethodReturnValueHandler {\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest); // Handle the given return value by adding attributes to the model and setting a view or setting the ModelAndViewContainer.setRequestHandled(boolean) flag to true to indicate the response has been handled directly.\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory); // Resolves a method parameter into an argument value from a given request.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType); // Whether the given method return type is supported by this handler.\n}"}
{"index": 11194, "repo": "wicket-extensions-10.0.0-M1", "des": "Simple concrete implementation of AbstractDataGridView", "code": "public class DataGridView<T> extends AbstractDataGridView<T> {\n\torg.apache.wicket.markup.repeater.data.IDataProvider<T> getDataProvider(); // Returns the data provider\n\tList<? extends ICellPopulator<T>> getPopulators(); // Returns the list of cell populators\n}"}
{"index": 13990, "repo": "spring-webflux-6.0.11", "des": "Exceptions that contain actual HTTP request data.", "code": "public class WebClientRequestException extends WebClientException {\n\torg.springframework.http.HttpHeaders getHeaders(); // Return the HTTP request headers.\n\torg.springframework.http.HttpMethod getMethod(); // Return the HTTP request method.\n\tURI getUri(); // Return the request URI.\n}"}
{"index": 12718, "repo": "spring-data-mongodb-4.1.2", "des": "Trigger execution by calling one of the terminating methods.", "code": "public static interface ExecutableAggregationOperation.TerminatingAggregation<T> {\n\tAggregationResults<T> all(); // Apply pipeline operations as specified and get all matching elements.\n\tStream<T> stream(); // Apply pipeline operations as specified and stream all matching elements.\n}"}
{"index": 9119, "repo": "hbase-server-3.0.0-alpha-4", "des": "A basic SegmentScanner used against an ImmutableScanner snapshot Used flushing where we do a single pass, no reverse scanning or inserts happening.", "code": "Class SnapshotSegmentScanner {\n\tvoid close(); // Close the KeyValue scanner.\n\tlong getScannerOrder(); // Get the order of this KeyValueScanner.\n\tCell next(); // Return the next Cell in this scanner, iterating the scanner\n\tCell peek(); // Look at the next Cell in this scanner, but do not iterate scanner.\n\tboolean reseek(Cell seekCell); // Reseek the scanner at or after the specified KeyValue.\n\tboolean seek(Cell seekCell); // Seek the scanner at or after the specified KeyValue.\n}"}
{"index": 8648, "repo": "avro-1.11.2", "des": "The class that generates a resolving grammar to resolve between two schemas.", "code": "Class ResolvingGrammarGenerator {\n\tstatic void encode(Encoder e, Schema s, com.fasterxml.jackson.databind.JsonNode n); // Encodes the given Json node n on to the encoder e according to the schema s.\n\tSymbol generate(Schema writer, Schema reader); // Resolves the writer schema writer and the reader schema reader and returns the start symbol for the grammar generated.\n}"}
{"index": 15180, "repo": "spring-boot-3.1.1", "des": "Abstract base class for BindHandler implementations.", "code": "public abstract class AbstractBindHandler extends Object implements BindHandler {\n\tObject onFailure(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Exception error); // Called when binding fails for any reason (including failures from BindHandler.onSuccess(org.springframework.boot.context.properties.source.ConfigurationPropertyName, org.springframework.boot.context.properties.bind.Bindable<?>, org.springframework.boot.context.properties.bind.BindContext, java.lang.Object) or BindHandler.onCreate(org.springframework.boot.context.properties.source.ConfigurationPropertyName, org.springframework.boot.context.properties.bind.Bindable<?>, org.springframework.boot.context.properties.bind.BindContext, java.lang.Object) calls).\n\tvoid onFinish(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result); // Called when binding finishes with either bound or unbound result.\n\t<T> Bindable<T> onStart(ConfigurationPropertyName name, Bindable<T> target, BindContext context); // Called when binding of an element starts but before any result has been determined.\n\tObject onSuccess(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result); // Called when binding of an element ends with a successful result.\n}"}
{"index": 4481, "repo": "beam-sdks-java-core-2.49.0", "des": "A logical type for PythonCallableSource objects.", "code": "Class PythonCallable {\n\tSchema.FieldType getArgumentType(); // A schema type representing how to interpret the argument.\n\tSchema.FieldType getBaseType(); // The base Schema.FieldType used to store values of this type.\n\tjava.lang.String getIdentifier(); // The unique identifier for this type.\n\t@NonNull java.lang.String toBaseType(@NonNull PythonCallableSource input); // Convert the input type to the type Java type used by the base Schema.FieldType.\n\t@NonNull PythonCallableSource toInputType(@NonNull java.lang.String base); // Convert the Java type used by the base Schema.FieldType to the input type.\n}"}
{"index": 10578, "repo": "groovy-all-4.0.13", "des": "A MetaClass within Groovy defines the behaviour of any given Groovy or Java class.", "code": "public interface MetaClass extends MetaObjectProtocol {\n\tObject getAttribute(Class sender, Object receiver, String messageName, boolean useSuper); // Retrieves the value of an attribute (field).\n\tClassNode getClassNode(); // Obtains a reference to the original AST for the MetaClass if it is available at runtime\n\tList<MetaMethod> getMetaMethods(); // Retrieves a list of MetaMethods held by this class.\n\tList<MetaMethod> getMethods(); // Retrieves a list of MetaMethods held by the class.\n\tList<MetaProperty> getProperties(); // Retrieves a list of MetaProperty instances that the MetaClass has\n\tObject getProperty(Class sender, Object receiver, String property, boolean isCallToSuper, boolean fromInsideClass); // Retrieves a property on the given receiver for the specified arguments.\n\tvoid initialize(); // Complete the initialisation process.\n\tObject invokeMethod(Class sender, Object receiver, String methodName, Object[] arguments, boolean isCallToSuper, boolean fromInsideClass); // Invokes a method on the given receiver for the specified arguments.\n\tObject invokeMissingMethod(Object instance, String methodName, Object[] arguments); // Attempts to invoke the methodMissing method otherwise throws a MissingMethodException\n\tObject invokeMissingProperty(Object instance, String propertyName, Object optionalValue, boolean isGetter); // Invokes the propertyMissing method otherwise throws a MissingPropertyException\n\tMetaMethod pickMethod(String methodName, Class[] arguments); // Selects a method by name and argument classes.\n\tint selectConstructorAndTransformArguments(int numberOfConstructors, Object[] arguments); // Internal method to support Groovy runtime.\n\tvoid setAttribute(Class sender, Object receiver, String messageName, Object messageValue, boolean useSuper, boolean fromInsideClass); // Sets the value of an attribute (field).\n\tvoid setProperty(Class sender, Object receiver, String property, Object value, boolean isCallToSuper, boolean fromInsideClass); // Sets a property on the given receiver for the specified arguments.\n}"}
{"index": 1433, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a Circle FDF annotation.", "code": "Class FDFAnnotationCircle {\n\tPDRectangle getFringe(); // This will get the fringe.\n\tColor getInteriorColor(); // This will retrieve the interior color of the drawn area.\n\tvoid setFringe(PDRectangle fringe); // This will set the fringe rectangle.\n\tvoid setInteriorColor(Color color); // This will set interior color of the drawn area.\n}"}
{"index": 3391, "repo": "hadoop-azure-3.3.6", "des": "TextFileBasedIdentityHandler is a IdentityHandler implements translation operation which returns identity mapped to AAD identity by loading the mapping file from the configured location.", "code": "Class TextFileBasedIdentityHandler {\n\tString lookupForLocalGroupIdentity(String originalIdentity); // Perform lookup from Security Group's Object ID to Local Security Group name.\n\tString lookupForLocalUserIdentity(String originalIdentity); // Perform lookup from Service Principal's Object ID to Local Username.\n}"}
{"index": 10781, "repo": "spring-boot-actuator-3.1.1", "des": "An InfoContributor that exposes BuildProperties.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.info.BuildInfoContributor.BuildInfoContributorRuntimeHints.class) public class BuildInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.BuildProperties> {\n\tvoid contribute(Info.Builder builder); // Contributes additional details using the specified Builder.\n\tprotected void postProcessContent(Map<String,Object> content); // Post-process the content to expose.\n\tprotected org.springframework.core.env.PropertySource<?> toSimplePropertySource(); // Return a PropertySource for the SIMPLE mode.\n}"}
{"index": 6714, "repo": "lucene-analyzers-common-8.11.2", "des": "A ShingleAnalyzerWrapper wraps a ShingleFilter around another Analyzer.", "code": "Class ShingleAnalyzerWrapper {\n\tString getFillerToken();\n\tint getMaxShingleSize(); // The max shingle (token ngram) size\n\tint getMinShingleSize(); // The min shingle (token ngram) size\n\tString getTokenSeparator();\n\tAnalyzer getWrappedAnalyzer(String fieldName);\n\tboolean isOutputUnigrams();\n\tboolean isOutputUnigramsIfNoShingles();\n\tprotected Analyzer.TokenStreamComponents wrapComponents(String fieldName, Analyzer.TokenStreamComponents components);\n}"}
{"index": 13911, "repo": "spring-webflux-6.0.11", "des": "Resolves method arguments annotated with @PathVariable.", "code": "public class PathVariableMethodArgumentResolver extends AbstractNamedValueSyncArgumentResolver {\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter); // Invoked when a named value is required, but AbstractNamedValueArgumentResolver.resolveName(String, MethodParameter, ServerWebExchange) returned null and there is no default value.\n\tprotected void handleResolvedValue(Object arg, String name, org.springframework.core.MethodParameter parameter, org.springframework.ui.Model model, org.springframework.web.server.ServerWebExchange exchange); // Invoked after a value is resolved.\n\tprotected Object resolveNamedValue(String name, org.springframework.core.MethodParameter parameter, org.springframework.web.server.ServerWebExchange exchange); // Actually resolve the value synchronously.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether this resolver supports the given method parameter.\n}"}
{"index": 11104, "repo": "tribuo-core-4.3.1", "des": "A FeatureMap used by the HashingTrainer to provide feature name hashing and guarantee that the Model does not contain feature name information, but still works with unhashed features names.", "code": "public final class HashedFeatureMap extends ImmutableFeatureMap {\n\tstatic HashedFeatureMap deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tstatic HashedFeatureMap generateHashedFeatureMap(FeatureMap map, Hasher hasher); // Converts a standard FeatureMap by hashing each entry using the supplied hash function Hasher.\n\tVariableIDInfo get(String name); // Gets the VariableIDInfo for this name.\n\tint getID(String name); // Gets the id number for this feature, returns -1 if it's unknown.\n\tvoid setSalt(String salt); // The salt is not serialised with the Model.\n}"}
{"index": 3900, "repo": "hbase-client-3.0.0-alpha-4", "des": "A point-in-time view of a space quota on a table.", "code": "Class SpaceQuotaSnapshot {\n\tboolean equals(Object o);\n\tlong getLimit(); // Returns the limit, in bytes, of the target (e.g.\n\tstatic SpaceQuotaSnapshot getNoSuchSnapshot(); // Returns a singleton that corresponds to no snapshot information.\n\tSpaceQuotaSnapshot.SpaceQuotaStatus getQuotaStatus(); // Returns the status of the quota.\n\tlong getUsage(); // Returns the current usage, in bytes, of the target (e.g.\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.SpaceQuotaSnapshot toProtoSnapshot(SpaceQuotaSnapshot snapshot);\n\tstatic SpaceQuotaSnapshot toSpaceQuotaSnapshot(org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.SpaceQuotaSnapshot proto);\n}"}
{"index": 1908, "repo": "hadoop-hdfs-3.3.6", "des": "A LevelDB based implementation of BlockAliasMap.", "code": "Class LevelDBFileRegionAliasMap {\n\tvoid close();\n\torg.apache.hadoop.conf.Configuration getConf();\n\tBlockAliasMap.Reader<FileRegion> getReader(BlockAliasMap.Reader.Options opts, String blockPoolID); // Returns a reader to the alias map.\n\tBlockAliasMap.Writer<FileRegion> getWriter(BlockAliasMap.Writer.Options opts, String blockPoolID); // Returns the writer for the alias map.\n\tvoid refresh(); // Refresh the alias map.\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 15220, "repo": "spring-boot-3.1.1", "des": "Bean to record and provide bound @ConfigurationProperties.", "code": "public class BoundConfigurationProperties extends Object {\n\tConfigurationProperty get(ConfigurationPropertyName name); // Get the configuration property bound to the given name.\n\tstatic BoundConfigurationProperties get(org.springframework.context.ApplicationContext context); // Return the BoundConfigurationProperties from the given ApplicationContext if it is available.\n\tMap<ConfigurationPropertyName,ConfigurationProperty> getAll(); // Get all bound properties.\n}"}
{"index": 807, "repo": "ignite-core-2.15.0", "des": "A future tracking requests for remote nodes transaction enlisting and locking of entries produced with complex DML queries requiring reduce step.", "code": "Class GridNearTxQueryResultsEnlistFuture {\n\tboolean checkResponse(UUID nodeId, GridNearTxQueryResultsEnlistResponse res, Throwable err);\n\tprotected void map(boolean topLocked); // Start iterating the data rows and form batches.\n\tboolean onNodeLeft(UUID nodeId); // Callback for when node left.\n\tvoid onResult(UUID nodeId, GridNearTxQueryResultsEnlistResponse res);\n\tSet<UUID> pendingResponseNodes();\n}"}
{"index": 2765, "repo": "tika-parsers-1.28.5", "des": "The class is used to read/set bit value for a byte array.", "code": "Class Bit {\n\tstatic void clearBit(byte[] array, long bit); // Set a bit value to \"Off\" in the specified byte array with the specified bit position.\n\tstatic boolean isBitSet(byte[] array, long bit); // Read a bit value from a byte array with the specified bit position.\n\tstatic void setBit(byte[] array, long bit); // Set a bit value to \"On\" in the specified byte array with the specified bit position.\n}"}
{"index": 18489, "repo": "gremlin-core-3.6.4", "des": "Features that are related to Edge operations.", "code": "Interface Graph.Features.EdgeFeatures {\n\tdefault Graph.Features.EdgePropertyFeatures properties(); // Gets features related to \"properties\" on an Edge.\n\tdefault boolean supportsAddEdges(); // Determines if an Edge can be added to a Vertex.\n\tdefault boolean supportsRemoveEdges(); // Determines if an Edge can be removed from a Vertex.\n\tdefault boolean supportsUpsert(); // Determines if the Graph implementation uses upsert functionality as opposed to insert functionality for Vertex.addEdge(String, Vertex, Object...).\n}"}
{"index": 14750, "repo": "spring-data-commons-3.1.2", "des": "TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types.", "code": "public class MappingContextTypeInformationMapper extends Object implements TypeInformationMapper {\n\tAlias createAliasFor(TypeInformation<?> type); // Returns the alias to be used for the given TypeInformation.\n\tTypeInformation<?> resolveTypeFrom(Alias alias); // Returns the actual TypeInformation to be used for the given alias.\n}"}
{"index": 14309, "repo": "wicket-core-10.0.0-M1", "des": "Interface representing any object that can be validated.", "code": "public interface IValidatable<T> {\n\tvoid error(IValidationError error); // Reports an error against this IValidatable's value.\n\tIModel<T> getModel(); // Returns the model of the component being validated\n\tT getValue(); // Retrieves the value to be validated.\n\tboolean isValid(); // Queries the current state of this IValidatable instance.\n}"}
{"index": 12107, "repo": "jena-core-4.9.0", "des": "A resolver is a base IRI and a policy for resolution.", "code": "public class IRIxResolver extends Object {\n\tstatic IRIxResolver.Builder create();\n\tstatic IRIxResolver.Builder create(String baseStr); // Create a builder for a IRIxResolver with the base URI which is resolved against the current system default base.\n\tstatic IRIxResolver.Builder create(IRIx baseIRI); // Create a builder for a IRIxResolver with the base URI which is resolved against the current system default base.\n\tstatic IRIxResolver.Builder create(IRIxResolver original); // Create a IRIxResolver with the base URI which is resolved against the current system default base.\n\tIRIx getBase(); // Return the base of this resolver\n\tString getBaseURI(); // Return the base of this resolver as a string\n\tIRIxResolver resetBase(IRIx newBase); // Create a new resolver with the same policies as the old one.\n\tIRIx resolve(String other); // Resolve the argument URI string according to resolver policy\n}"}
{"index": 15686, "repo": "pulsar-common-3.0.0", "des": "SSL context builder for Netty Server side.", "code": "public class NettyServerSslContextBuilder extends SslContextAutoRefreshBuilder<io.netty.handler.ssl.SslContext> {\n\tio.netty.handler.ssl.SslContext getSslContext(); // Returns cached SSLContext.\n\tboolean needUpdate(); // Returns whether the key files modified after a refresh time, and context need update.\n\tio.netty.handler.ssl.SslContext update(); // updates and returns cached SSLContext.\n}"}
{"index": 3036, "repo": "tink-1.10.0", "des": "A KeyFactory creates new keys from a given KeyFormat.", "code": "Class KeyTypeManager.KeyFactory<KeyFormatProtoT extends com.google.protobuf.MessageLite,KeyProtoT extends com.google.protobuf.MessageLite> {\n\tabstract KeyProtoT createKey(KeyFormatProtoT keyFormat); // Creates a new key from a given format.\n\tKeyProtoT deriveKey(KeyFormatProtoT keyFormat, InputStream pseudoRandomness); // Derives a new key from a given format, using the given pseudoRandomness.\n\tClass<KeyFormatProtoT> getKeyFormatClass(); // Returns the class corresponding to the key format protobuffer.\n\tMap<String,KeyTypeManager.KeyFactory.KeyFormat<KeyFormatProtoT>> keyFormats(); // Returns supported key formats and their names.\n\tabstract KeyFormatProtoT parseKeyFormat(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tprotected static void readFully(InputStream input, byte[] output); // Reads output.length number of bytes of (pseudo)randomness from the input stream into the provided output buffer.\n\tabstract void validateKeyFormat(KeyFormatProtoT keyFormatProto); // Checks if the given keyFormatProto is a valid key.\n}"}
{"index": 11833, "repo": "spring-kafka-3.0.9", "des": "Header names for original record property headers.", "code": "public static class DeadLetterPublishingRecoverer.HeaderNames.Original extends Object {\n\tString getConsumerGroup(); // The header name for the consumer group.\n\tString getOffsetHeader(); // The header name for the offset.\n\tString getPartitionHeader(); // The header name for the partition.\n\tString getTimestampHeader(); // The header name for the timestamp.\n\tString getTimestampTypeHeader(); // The header name for the timestamp type.\n\tString getTopicHeader(); // The header name for the topic.\n}"}
{"index": 7484, "repo": "nifi-client-dto-1.22.0", "des": "A serialized representation of this class can be placed in the entity body of a request or response to or from the API.", "code": "Class ProcessGroupFlowEntity {\n\tPermissionsDTO getPermissions(); // The permissions for this component.\n\tProcessGroupFlowDTO getProcessGroupFlow(); // The ProcessGroupFlowDTO that is being serialized.\n\tvoid setPermissions(PermissionsDTO permissions);\n\tvoid setProcessGroupFlow(ProcessGroupFlowDTO flow);\n}"}
{"index": 8203, "repo": "spring-ws-3.0.10.RELEASE", "des": "Extension of HttpUrlConnectionMessageSender that adds support for (self-signed) HTTPS certificates.", "code": "Class HttpsUrlConnectionMessageSender {\n\tvoid afterPropertiesSet();\n\tprotected void prepareConnection(HttpURLConnection connection); // Template method for preparing the given HttpURLConnection.\n\tvoid setHostnameVerifier(HostnameVerifier hostnameVerifier); // Specifies the host name verifier to use for this message sender.\n\tvoid setKeyManagers(KeyManager[] keyManagers); // Specifies the key managers to use for this message sender.\n\tvoid setSecureRandom(SecureRandom rnd); // Specifies the secure random to use for this message sender.\n\tvoid setSslProtocol(String sslProtocol); // Sets the SSL protocol to use.\n\tvoid setSslProvider(String sslProvider); // Sets the SSL provider to use.\n\tvoid setSslSocketFactory(SSLSocketFactory sslSocketFactory); // Specifies the SSLSocketFactory to use for this message sender.\n\tvoid setTrustManagers(TrustManager[] trustManagers); // Specifies the trust managers to use for this message sender.\n}"}
{"index": 10447, "repo": "groovy-all-4.0.13", "des": "Lazy evaluated representation of a node's attributes.", "code": "public class Attributes extends NodeChildren {\n\tvoid build(GroovyObject builder);\n\tIterator childNodes(); // Throws a GroovyRuntimeException, because attributes can have no children.\n\tGPathResult findAll(Closure closure); // Returns the children of this GPathResult matching the condition(s) specified in the passed closure.\n\tIterator iterator();\n\tList list(); // Creates a list of objects representing this GPathResult.\n\tString name(); // Returns the name of this GPathResult.\n\tIterator nodeIterator();\n\tGPathResult parents(); // Throws a GroovyRuntimeException, because it is not implemented yet.\n\tString text(); // Returns the text of this GPathResult as a String.\n\tWriter writeTo(Writer out); // Writes this object to the given writer.\n}"}
{"index": 5101, "repo": "commons-collections-3.2.2", "des": "UnmodifiableBoundedCollection decorates another BoundedCollection to ensure it can't be altered.", "code": "Class UnmodifiableBoundedCollection {\n\tboolean add(Object object);\n\tboolean addAll(Collection coll);\n\tvoid clear();\n\tstatic BoundedCollection decorate(BoundedCollection coll); // Factory method to create an unmodifiable bounded collection.\n\tstatic BoundedCollection decorateUsing(Collection coll); // Factory method to create an unmodifiable bounded collection.\n\tboolean isFull(); // Returns true if this collection is full and no new elements can be added.\n\tIterator iterator();\n\tint maxSize(); // Gets the maximum size of the collection (the bound).\n\tboolean remove(Object object);\n\tboolean removeAll(Collection coll);\n\tboolean retainAll(Collection coll);\n}"}
{"index": 10201, "repo": "spring-core-6.0.11", "des": "Support class for AttributeAccessors, providing a base implementation of all methods.", "code": "public abstract class AttributeAccessorSupport extends Object implements AttributeAccessor, Serializable {\n\tString[] attributeNames(); // Return the names of all attributes.\n\t<T> T computeAttribute(String name, Function<String,T> computeFunction); // Compute a new value for the attribute identified by name if necessary and set the new value in this AttributeAccessor.\n\tprotected void copyAttributesFrom(AttributeAccessor source); // Copy the attributes from the supplied AttributeAccessor to this accessor.\n\tboolean equals(Object obj);\n\tObject getAttribute(String name); // Get the value of the attribute identified by name.\n\tboolean hasAttribute(String name); // Return true if the attribute identified by name exists.\n\tObject removeAttribute(String name); // Remove the attribute identified by name and return its value.\n\tvoid setAttribute(String name, Object value); // Set the attribute defined by name to the supplied value.\n}"}
{"index": 14052, "repo": "spring-context-support-6.0.11", "des": "A Spring FactoryBean for creating a Quartz CronTrigger instance, supporting bean-style usage for trigger configuration.", "code": "public class CronTriggerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<CronTrigger>, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tJobDataMap getJobDataMap(); // Return the trigger's JobDataMap.\n\tCronTrigger getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setBeanName(String beanName);\n\tvoid setCalendarName(String calendarName); // Associate a specific calendar with this cron trigger.\n\tvoid setCronExpression(String cronExpression); // Specify the cron expression for this trigger.\n\tvoid setDescription(String description); // Associate a textual description with this trigger.\n\tvoid setGroup(String group); // Specify the trigger's group.\n\tvoid setJobDataAsMap(Map<String,?> jobDataAsMap); // Register objects in the JobDataMap via a given Map.\n\tvoid setJobDataMap(JobDataMap jobDataMap); // Set the trigger's JobDataMap.\n\tvoid setJobDetail(JobDetail jobDetail); // Set the JobDetail that this trigger should be associated with.\n\tvoid setMisfireInstruction(int misfireInstruction); // Specify a misfire instruction for this trigger.\n\tvoid setMisfireInstructionName(String constantName); // Set the misfire instruction via the name of the corresponding constant in the CronTrigger class.\n\tvoid setName(String name); // Specify the trigger's name.\n\tvoid setPriority(int priority); // Specify the priority of this trigger.\n\tvoid setStartDelay(long startDelay); // Set the start delay in milliseconds.\n\tvoid setStartTime(Date startTime); // Set a specific start time for the trigger.\n\tvoid setTimeZone(TimeZone timeZone); // Specify the time zone for this trigger's cron expression.\n}"}
{"index": 9488, "repo": "curator-recipes-5.5.0", "des": "Abstracts a shared value and allows listening for changes to the value.", "code": "Interface SharedValueReader {\n\torg.apache.curator.framework.listen.Listenable<SharedValueListener> getListenable(); // Returns the listenable\n\tbyte[] getValue(); // Return the current value of the count\n\tVersionedValue<byte[]> getVersionedValue(); // Return the current version and value\n}"}
{"index": 17742, "repo": "spring-web-6.0.11", "des": "Simple base implementation of Filter which treats its config parameters (init-param entries within the filter tag in web.xml) as bean properties.", "code": "public abstract class GenericFilterBean extends Object implements Filter, org.springframework.beans.factory.BeanNameAware, org.springframework.context.EnvironmentAware, org.springframework.core.env.EnvironmentCapable, ServletContextAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tprotected final void addRequiredProperty(String property); // Subclasses can invoke this method to specify that this property (which must match a JavaBean property they expose) is mandatory, and must be supplied as a config parameter.\n\tvoid afterPropertiesSet(); // Calls the initFilterBean() method that might contain custom initialization of a subclass.\n\tprotected org.springframework.core.env.Environment createEnvironment(); // Create and return a new StandardServletEnvironment.\n\tvoid destroy(); // Subclasses may override this to perform custom filter shutdown.\n\torg.springframework.core.env.Environment getEnvironment(); // Return the Environment associated with this filter.\n\tFilterConfig getFilterConfig(); // Make the FilterConfig of this filter available, if any.\n\tprotected String getFilterName(); // Make the name of this filter available to subclasses.\n\tprotected ServletContext getServletContext(); // Make the ServletContext of this filter available to subclasses.\n\tfinal void init(FilterConfig filterConfig); // Standard way of initializing this filter.\n\tprotected void initBeanWrapper(org.springframework.beans.BeanWrapper bw); // Initialize the BeanWrapper for this GenericFilterBean, possibly with custom editors.\n\tprotected void initFilterBean(); // Subclasses may override this to perform custom initialization.\n\tvoid setBeanName(String beanName); // Stores the bean name as defined in the Spring bean factory.\n\tvoid setEnvironment(org.springframework.core.env.Environment environment); // Set the Environment that this filter runs in.\n\tvoid setServletContext(ServletContext servletContext); // Stores the ServletContext that the bean factory runs in.\n}"}
{"index": 15039, "repo": "spring-vault-core-3.0.4", "des": "Interface to obtain an arbitrary credential that is uses in ClientAuthentication or AuthenticationSteps methods.", "code": "@FunctionalInterface public interface CredentialSupplier extends Supplier<String> {\n\tdefault CredentialSupplier cached(); // Retrieve a cached CredentialSupplier that obtains the credential early and reuses the token for each get() call.\n\tString get(); // Get a credential to be used with an authentication mechanism.\n}"}
{"index": 11346, "repo": "spring-context-6.0.11", "des": "An ApplicationContext implementation that extends GenericApplicationContext and implements GroovyObject such that beans can be retrieved with the dot de-reference syntax instead of using AbstractApplicationContext.getBean(java.lang.String).", "code": "public class GenericGroovyApplicationContext extends GenericApplicationContext implements groovy.lang.GroovyObject {\n\tgroovy.lang.MetaClass getMetaClass();\n\tObject getProperty(String property);\n\tfinal org.springframework.beans.factory.groovy.GroovyBeanDefinitionReader getReader(); // Exposes the underlying GroovyBeanDefinitionReader for convenient access to the loadBeanDefinition methods on it as well as the ability to specify an inline Groovy bean definition closure.\n\tObject invokeMethod(String name, Object args);\n\tvoid load(Class<?> relativeClass, String... resourceNames); // Load bean definitions from the given Groovy scripts or XML files.\n\tvoid load(String... resourceLocations); // Load bean definitions from the given Groovy scripts or XML files.\n\tvoid load(org.springframework.core.io.Resource... resources); // Load bean definitions from the given Groovy scripts or XML files.\n\tvoid setEnvironment(org.springframework.core.env.ConfigurableEnvironment environment); // Delegates the given environment to underlying GroovyBeanDefinitionReader.\n\tvoid setMetaClass(groovy.lang.MetaClass metaClass);\n\tvoid setProperty(String property, Object newValue);\n}"}
{"index": 9830, "repo": "commons-math3-3.6.1", "des": "Reporting interface for basic univariate statistics.", "code": "Interface StatisticalSummary {\n\tdouble getMax(); // Returns the maximum of the available values\n\tdouble getMean(); // Returns the arithmetic mean of the available values\n\tdouble getMin(); // Returns the minimum of the available values\n\tlong getN(); // Returns the number of available values\n\tdouble getStandardDeviation(); // Returns the standard deviation of the available values.\n\tdouble getSum(); // Returns the sum of the values that have been added to Univariate.\n\tdouble getVariance(); // Returns the variance of the available values.\n}"}
{"index": 5965, "repo": "commons-lang3-3.12.0", "des": "A functional interface like BiFunction that declares a Throwable.", "code": "Interface FailableBiFunction<T,U,R,E extends Throwable> {\n\tdefault <V> FailableBiFunction<T,U,V,E> andThen(FailableFunction<? super R,? extends V,E> after); // Returns a composed FailableBiFunction that like BiFunction.andThen(Function).\n\tR apply(T input1, U input2); // Applies this function.\n\tstatic <T,U,R,E extends Throwable>FailableBiFunction<T,U,R,E> nop(); // Returns The NOP singleton.\n}"}
{"index": 15497, "repo": "spring-batch-core-5.0.2", "des": "Context and execution strategy for FlowJob to allow it to delegate its execution step by step.", "code": "public interface FlowExecutor {\n\tvoid abandonStepExecution(); // Handle any status changes that might be needed at the start of a state.\n\tvoid addExitStatus(String code);\n\tvoid close(FlowExecution result); // Chance to clean up resources at the end of a flow (whether it completed successfully or not).\n\tString executeStep(Step step);\n\tJobExecution getJobExecution();\n\tStepExecution getStepExecution();\n\tboolean isRestart();\n\tvoid updateJobExecutionStatus(FlowExecutionStatus status); // Handle any status changes that might be needed in the JobExecution.\n}"}
{"index": 17078, "repo": "spring-integration-core-6.1.2", "des": "Implementations convert a channel to a name, retaining a reference to the channel keyed by the name.", "code": "public interface HeaderChannelRegistry {\n\torg.springframework.messaging.MessageChannel channelNameToChannel(String name); // Converts the channel name back to a MessageChannel (if it is registered).\n\tObject channelToChannelName(Object channel); // Converts the channel to a name (String).\n\tObject channelToChannelName(Object channel, long timeToLive); // Converts the channel to a name (String).\n\tvoid runReaper(); // Cancel the scheduled reap task and run immediately; then reschedule.\n\tint size();\n}"}
{"index": 2601, "repo": "nifi-utils-1.22.0", "des": "FlowFile attributes used during site-to-site transfer.", "code": "Enum SiteToSiteAttributes {\n\tString key();\n\tstatic SiteToSiteAttributes valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SiteToSiteAttributes[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10675, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @Vetoable annotation, and @Bindable if also present.", "code": "public class VetoableASTTransformation extends BindableASTTransformation {\n\tprotected void addVetoableChangeSupport(ClassNode declaringClass); // Adds the necessary field and methods to support vetoable change support.\n\tprotected Statement createConstrainedStatement(PropertyNode propertyNode, Expression fieldExpression); // Creates a statement body similar to: this.fireVetoableChange(\"field\", field, field = value)\n\tprotected Statement createSetStatement(Expression fieldExpression); // Creates a statement body similar to: field = value.\n\tprotected void createSetterMethod(ClassNode declaringClass, PropertyNode propertyNode, String setterName, Statement setterBlock); // Creates a setter method with the given body.\n\tstatic boolean hasVetoableAnnotation(AnnotatedNode node); // Convenience method to see if an annotated node is @Vetoable.\n\tprotected boolean needsVetoableChangeSupport(ClassNode declaringClass, SourceUnit sourceUnit); // Snoops through the declaring class and all parents looking for a field of type VetoableChangeSupport.\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // Handles the bulk of the processing, mostly delegating to other methods.\n}"}
{"index": 11342, "repo": "spring-context-6.0.11", "des": "A ConversionService implementation designed to be configured as a FormatterRegistry.", "code": "public class FormattingConversionService extends org.springframework.core.convert.support.GenericConversionService implements FormatterRegistry, EmbeddedValueResolverAware {\n\tvoid addFormatter(Formatter<?> formatter); // Adds a Formatter to format fields of a specific type.\n\tvoid addFormatterForFieldAnnotation(AnnotationFormatterFactory<? extends Annotation> annotationFormatterFactory); // Adds a Formatter to format fields annotated with a specific format annotation.\n\tvoid addFormatterForFieldType(Class<?> fieldType, Formatter<?> formatter); // Adds a Formatter to format fields of the given type.\n\tvoid addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser); // Adds a Printer/Parser pair to format fields of a specific type.\n\tvoid addParser(Parser<?> parser); // Adds a Parser to parse fields of a specific type.\n\tvoid addPrinter(Printer<?> printer); // Adds a Printer to print fields of a specific type.\n\tvoid setEmbeddedValueResolver(org.springframework.util.StringValueResolver resolver); // Set the StringValueResolver to use for resolving embedded definition values.\n}"}
{"index": 12160, "repo": "jena-core-4.9.0", "des": "A ModelGetter object can retrieve a Model given a URL for it.", "code": "public interface ModelGetter {\n\tModel getModel(String URL); // Answer a Model whose content is that associated with the URL, if possible, and otherwise answer null.\n\tModel getModel(String URL, ModelReader loadIfAbsent); // Answer a model appropriate for URL, If none is to hand, and it's possible to create one, create it and load it using loadIfAbsent.\n}"}
{"index": 11924, "repo": "maven-core-4.0.0-alpha-7", "des": "Provides basic services to manage Maven plugins and their mojos.", "code": "@Named @Singleton public class DefaultMavenPluginManager extends Object implements MavenPluginManager {\n\tvoid checkPrerequisites(PluginDescriptor pluginDescriptor); // Verifies that the specified plugin's prerequisites are met.\n\tvoid checkRequiredMavenVersion(PluginDescriptor pluginDescriptor); // Deprecated.\n\t<T> T getConfiguredMojo(Class<T> mojoInterface, MavenSession session, MojoExecution mojoExecution); // Looks up the mojo for the specified mojo execution and populates its parameters from the configuration given by the mojo execution.\n\tMojoDescriptor getMojoDescriptor(Plugin plugin, String goal, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Retrieves the descriptor for the specified plugin goal from the plugin's main artifact.\n\tPluginDescriptor getPluginDescriptor(Plugin plugin, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Retrieves the descriptor for the specified plugin from its main artifact.\n\tvoid releaseMojo(Object mojo, MojoExecution mojoExecution); // Releases the specified mojo back to the container.\n\tExtensionRealmCache.CacheRecord setupExtensionsRealm(MavenProject project, Plugin plugin, org.eclipse.aether.RepositorySystemSession session); // Sets up class realm for the specified build extensions plugin.\n\tvoid setupPluginRealm(PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent, List<String> imports, org.eclipse.aether.graph.DependencyFilter filter); // Sets up the class realm for the specified plugin.\n}"}
{"index": 15687, "repo": "pulsar-common-3.0.0", "des": "PolicyOperation authorization operations.", "code": "public enum PolicyOperation extends Enum<PolicyOperation> {\n\tstatic PolicyOperation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic PolicyOperation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 2570, "repo": "exoplayer-r2.3.1", "des": "Parses splice info sections as defined by SCTE35.", "code": "Class SpliceInfoSectionReader {\n\tvoid consume(ParsableByteArray sectionData); // Called by a SectionReader when a full section is received.\n\tvoid init(TimestampAdjuster timestampAdjuster, ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the section payload reader.\n}"}
{"index": 13807, "repo": "spring-webmvc-6.0.11", "des": "Spring Controller implementation that forwards to a named servlet, i.e.", "code": "public class ServletForwardingController extends AbstractController implements org.springframework.beans.factory.BeanNameAware {\n\tprotected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response); // Template method.\n\tvoid setBeanName(String name);\n\tvoid setServletName(String servletName); // Set the name of the servlet to forward to, i.e.\n\tprotected boolean useInclude(HttpServletRequest request, HttpServletResponse response); // Determine whether to use RequestDispatcher's include or forward method.\n}"}
{"index": 11116, "repo": "tribuo-core-4.3.1", "des": "This is a SequenceDataset which has an ImmutableFeatureMap to store the feature information.", "code": "public class ImmutableSequenceDataset<T extends Output<T>> extends SequenceDataset<T> implements Serializable {\n\tprotected void add(SequenceExample<T> ex); // Adds a SequenceExample to the dataset, which will insert feature ids, remove unknown features and sort the examples by the feature ids.\n\tprotected void add(SequenceExample<T> ex, Merger merger); // Adds a SequenceExample to the dataset, which will insert feature ids, remove unknown features and sort the examples by the feature ids.\n\tstatic <T extends Output<T>>ImmutableSequenceDataset<T> copyDataset(SequenceDataset<T> dataset); // Creates an immutable deep copy of the supplied dataset.\n\tstatic <T extends Output<T>>ImmutableSequenceDataset<T> copyDataset(SequenceDataset<T> dataset, ImmutableFeatureMap featureIDMap, ImmutableOutputInfo<T> outputIDInfo); // Creates an immutable deep copy of the supplied dataset, using a different feature and output map.\n\tstatic <T extends Output<T>>ImmutableSequenceDataset<T> copyDataset(SequenceDataset<T> dataset, ImmutableFeatureMap featureIDMap, ImmutableOutputInfo<T> outputIDInfo, Merger merger); // Creates an immutable deep copy of the supplied dataset.\n\tstatic ImmutableSequenceDataset<?> deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tImmutableFeatureMap getFeatureIDMap(); // An immutable view on the feature map.\n\tImmutableFeatureMap getFeatureMap(); // The feature map.\n\tImmutableOutputInfo<T> getOutputIDInfo(); // An immutable view on the output info in this dataset.\n\tImmutableOutputInfo<T> getOutputInfo(); // The output info in this dataset.\n\tSet<T> getOutputs(); // Gets the set of labels that occur in the examples in this dataset.\n\tDatasetProvenance getProvenance();\n\torg.tribuo.protos.core.SequenceDatasetProto serialize(); // Serializes this object to a protobuf.\n}"}
{"index": 12088, "repo": "jena-core-4.9.0", "des": "Implementation of JenaSet based on HashCommonBase.", "code": "public abstract class HashCommonSet<K> extends HashCommonBase<K> implements JenaSet<K> {\n\tvoid addUnchecked(K key); // Add the key to the set without checking if it is already present.\n\tboolean tryAdd(K key); // Add the key to the set if it is not already present.\n}"}
{"index": 12225, "repo": "jena-core-4.9.0", "des": "An RDFReader reads a serialized representation of RDF, e.g.", "code": "public interface RDFReaderI {\n\tvoid read(Model model, InputStream r, String base); // Read serialized RDF from an InputStream and add the statements to a Model.\n\tvoid read(Model model, Reader r, String base); // It is usually a mistake to use this method.\n\tvoid read(Model model, String url); // Read serialized RDF from a url and add the statements to a model.\n\tRDFErrorHandler setErrorHandler(RDFErrorHandler errHandler); // Set an error handler for the reader\n\tObject setProperty(String propName, Object propValue); // Set the value of a reader property.\n}"}
{"index": 12646, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $reverseArray.", "code": "public static class ArrayOperators.ReverseArray extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\tstatic ArrayOperators.ReverseArray reverseArrayOf(String fieldReference); // Creates new ArrayOperators.ReverseArray given fieldReference.\n\tstatic ArrayOperators.ReverseArray reverseArrayOf(Collection<?> values); // Creates new ArrayOperators.ReverseArray.\n\tstatic ArrayOperators.ReverseArray reverseArrayOf(AggregationExpression expression); // Creates new ArrayOperators.ReverseArray given AggregationExpression.\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 15709, "repo": "camel-api-4.0.0-RC1", "des": "Class needed to provide decoration of an existing SSLContext.", "code": "protected static final class BaseSSLContextParameters.SSLContextSpiDecorator extends SSLContextSpi {\n\tprotected SSLEngine configureSSLEngine(SSLEngine engine); // Configures an SSLEngine based on the configurers in instance.\n\tprotected SSLServerSocketFactory configureSSLServerSocketFactory(SSLServerSocketFactory factory); // Configures an SSLServerSocketFactory based on the configurers in this instance.\n\tprotected SSLSocketFactory configureSSLSocketFactory(SSLSocketFactory factory); // Configures an SSLSocketFactory based on the configurers in this instance.\n\tprotected SSLEngine engineCreateSSLEngine();\n\tprotected SSLEngine engineCreateSSLEngine(String peerHost, int peerPort);\n\tprotected SSLSessionContext engineGetClientSessionContext();\n\tprotected SSLSessionContext engineGetServerSessionContext();\n\tprotected SSLServerSocketFactory engineGetServerSocketFactory();\n\tprotected SSLSocketFactory engineGetSocketFactory();\n\tprotected void engineInit(KeyManager[] km, TrustManager[] tm, SecureRandom random);\n\tprotected SSLContext getDelegate();\n}"}
{"index": 9311, "repo": "hadoop-yarn-api-3.3.6", "des": "Utility methods to be used by ApplicationMasterServiceProcessor.", "code": "Class ApplicationMasterServiceUtils {\n\tstatic void addToAllocatedContainers(AllocateResponse allocateResponse, List<Container> allocatedContainers); // Add allocated containers to AllocateResponse.\n\tstatic void addToRejectedSchedulingRequests(AllocateResponse allocateResponse, List<RejectedSchedulingRequest> rejectedRequests); // Add rejected Scheduling Requests to AllocateResponse.\n\tstatic void addToUpdateContainerErrors(AllocateResponse allocateResponse, List<UpdateContainerError> updateContainerErrors); // Add update container errors to AllocateResponse.\n\tstatic void addToUpdatedContainers(AllocateResponse allocateResponse, ContainerUpdateType updateType, List<Container> updatedContainers); // Add updated containers to AllocateResponse.\n}"}
{"index": 3131, "repo": "solr-dataimporthandler-8.11.2", "des": "A data source implementation which can be used to read binary stream from content streams.", "code": "Class BinContentStreamDataSource {\n\tvoid close(); // Cleans up resources of this DataSource after use.\n\tInputStream getData(String query); // Get records for the given query.The return type depends on the implementation .\n\tvoid init(Context context, Properties initProps); // Initializes the DataSource with the Context and initialization properties.\n}"}
{"index": 13433, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Configure RabbitStreamTemplate with sensible defaults.", "code": "public class RabbitStreamTemplateConfigurer extends Object {\n\tvoid configure(org.springframework.rabbit.stream.producer.RabbitStreamTemplate template); // Configure the specified RabbitStreamTemplate.\n\tvoid setMessageConverter(org.springframework.amqp.support.converter.MessageConverter messageConverter); // Set the MessageConverter to use or null if the out-of-the-box converter should be used.\n\tvoid setProducerCustomizer(org.springframework.rabbit.stream.producer.ProducerCustomizer producerCustomizer); // Set the ProducerCustomizer instances to use.\n\tvoid setStreamMessageConverter(org.springframework.rabbit.stream.support.converter.StreamMessageConverter streamMessageConverter); // Set the StreamMessageConverter to use or null if the out-of-the-box stream message converter should be used.\n}"}
{"index": 5429, "repo": "druid-processing-26.0.0", "des": "The SerializablePairLongStringSerde serializes a Long-String pair (SerializablePairLongString).", "code": "Class SerializablePairLongStringComplexMetricSerde {\n\tvoid deserializeColumn(ByteBuffer buffer, ColumnBuilder columnBuilder); // ComplexMetricSerde.deserializeColumn(ByteBuffer, ColumnBuilder, ColumnConfig) should be used instead of this.\n\tComplexMetricExtractor<?> getExtractor();\n\tObjectStrategy<?> getObjectStrategy(); // This is deprecated because its usage is going to be removed from the code.\n\tGenericColumnSerializer<?> getSerializer(SegmentWriteOutMedium segmentWriteOutMedium, String column); // This method provides the ability for a ComplexMetricSerde to control its own serialization.\n\tString getTypeName();\n}"}
{"index": 1782, "repo": "kafka-clients-3.5.0", "des": "This interface allows to define Formatters that can be used to parse and format records read by a Consumer instance for display.", "code": "Interface MessageFormatter {\n\tdefault void close(); // Closes the formatter\n\tdefault void configure(Map<String,?> configs); // Configures the MessageFormatter\n\tvoid writeTo(ConsumerRecord<byte[],byte[]> consumerRecord, PrintStream output); // Parses and formats a record for display\n}"}
{"index": 13294, "repo": "spring-security-cas-6.1.2", "des": "Processes a CAS service ticket, obtains proxy granting tickets, and processes proxy tickets.", "code": "public class CasAuthenticationFilter extends org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter {\n\torg.springframework.security.core.Authentication attemptAuthentication(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\tprotected String obtainArtifact(jakarta.servlet.http.HttpServletRequest request); // If present, gets the artifact (CAS ticket) from the HttpServletRequest.\n\tprotected boolean requiresAuthentication(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Overridden to provide proxying capabilities.\n\tfinal void setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler failureHandler); // Wraps the AuthenticationFailureHandler to distinguish between handling proxy ticket authentication failures and service ticket failures.\n\tfinal void setProxyAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler proxyFailureHandler); // Sets the AuthenticationFailureHandler for proxy requests.\n\tfinal void setProxyGrantingTicketStorage(org.apereo.cas.client.proxy.ProxyGrantingTicketStorage proxyGrantingTicketStorage);\n\tfinal void setProxyReceptorUrl(String proxyReceptorUrl);\n\tfinal void setServiceProperties(ServiceProperties serviceProperties);\n\tprotected final void successfulAuthentication(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain chain, org.springframework.security.core.Authentication authResult);\n}"}
{"index": 15660, "repo": "spring-security-core-6.1.2", "des": "This implementation for AuthenticationUserDetailsService wraps a regular Spring Security UserDetailsService implementation, to retrieve a UserDetails object based on the user name contained in an Authentication object.", "code": "public class UserDetailsByNameServiceWrapper<T extends Authentication> extends Object implements AuthenticationUserDetailsService<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Check whether all required properties have been set.\n\tUserDetails loadUserDetails(T authentication); // Get the UserDetails object from the wrapped UserDetailsService implementation\n\tvoid setUserDetailsService(UserDetailsService aUserDetailsService); // Set the wrapped UserDetailsService implementation\n}"}
{"index": 13828, "repo": "spring-webmvc-6.0.11", "des": "Handles return values of types void and String interpreting them as view name reference.", "code": "public class ViewNameMethodReturnValueHandler extends Object implements org.springframework.web.method.support.HandlerMethodReturnValueHandler {\n\tString[] getRedirectPatterns(); // The configured redirect patterns, if any.\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, org.springframework.web.method.support.ModelAndViewContainer mavContainer, org.springframework.web.context.request.NativeWebRequest webRequest);\n\tprotected boolean isRedirectViewName(String viewName); // Whether the given view name is a redirect view reference.\n\tvoid setRedirectPatterns(String... redirectPatterns); // Configure one more simple patterns (as described in PatternMatchUtils.simpleMatch(java.lang.String, java.lang.String)) to use in order to recognize custom redirect prefixes in addition to \"redirect:\".\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType);\n}"}
{"index": 1955, "repo": "nifi-framework-api-1.22.0", "des": "Contextual details required to make a request from a UI extension.", "code": "Interface NiFiWebRequestContext {\n\tUiExtensionType getExtensionType();\n\tString getId(); // The id of the component.\n\tString getScheme(); // The request protocol scheme (http or https).\n}"}
{"index": 13140, "repo": "pulsar-client-original-3.0.0", "des": "The default implementation of ServiceNameResolver.", "code": "public class PulsarServiceNameResolver extends Object implements ServiceNameResolver {\n\tServiceURI getServiceUri(); // Get service uri.\n\tString getServiceUrl(); // Get service url.\n\tInetSocketAddress resolveHost(); // Resolve pulsar service url.\n\tURI resolveHostUri(); // Resolve pulsar service url.\n\tvoid updateServiceUrl(String serviceUrl); // Update service url.\n}"}
{"index": 13116, "repo": "maven-settings-builder-4.0.0-alpha-7", "des": "Collects settings that control building of effective settings.", "code": "public class DefaultSettingsBuildingRequest extends Object implements SettingsBuildingRequest {\n\tFile getGlobalSettingsFile(); // Gets the global settings file.\n\tSettingsSource getGlobalSettingsSource(); // Gets the global settings source.\n\tFile getProjectSettingsFile(); // Gets the project settings file.\n\tSettingsSource getProjectSettingsSource(); // Gets the project settings source.\n\tProperties getSystemProperties(); // Gets the system properties to use for interpolation.\n\tProperties getUserProperties(); // Gets the user properties to use for interpolation.\n\tFile getUserSettingsFile(); // Gets the user settings file.\n\tSettingsSource getUserSettingsSource(); // Gets the user settings source.\n\tDefaultSettingsBuildingRequest setGlobalSettingsFile(File globalSettingsFile); // Sets the global settings file.\n\tDefaultSettingsBuildingRequest setGlobalSettingsSource(SettingsSource globalSettingsSource); // Sets the global settings source.\n\tDefaultSettingsBuildingRequest setProjectSettingsFile(File projectSettingsFile); // Sets the project settings file.\n\tDefaultSettingsBuildingRequest setProjectSettingsSource(SettingsSource projectSettingsSource); // Sets the project settings source.\n\tDefaultSettingsBuildingRequest setSystemProperties(Properties systemProperties); // Sets the system properties to use for interpolation.\n\tDefaultSettingsBuildingRequest setUserProperties(Properties userProperties); // Sets the user properties to use for interpolation.\n\tDefaultSettingsBuildingRequest setUserSettingsFile(File userSettingsFile); // Sets the user settings file.\n\tDefaultSettingsBuildingRequest setUserSettingsSource(SettingsSource userSettingsSource); // Sets the user settings source.\n}"}
{"index": 6524, "repo": "exoplayer-core-2.9.6", "des": "Manages the background loading of Loader.", "code": "Class Loader {\n\tvoid cancelLoading(); // Cancels the current load.\n\tstatic Loader.LoadErrorAction createRetryAction(boolean resetErrorCount, long retryDelayMillis); // Creates a Loader.LoadErrorAction for retrying with the given parameters.\n\tboolean isLoading(); // Returns whether the Loader is currently loading a Loader.Loadable.\n\tvoid maybeThrowError(); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the Loaders default minimum number of retries.\n\tvoid maybeThrowError(int minRetryCount); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the specified minimum number of retries.\n\tvoid release(); // Releases the Loader.\n\tvoid release(Loader.ReleaseCallback callback); // Releases the Loader.\n\t<T extends Loader.Loadable>long startLoading(T loadable, Loader.Callback<T> callback, int defaultMinRetryCount); // Starts loading a Loader.Loadable.\n}"}
{"index": 308, "repo": "phoenix-core-5.1.3", "des": "Function used to provide an alternative value when the first argument is null.", "code": "Class CoalesceFunction {\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tInteger getMaxLength();\n\tString getName();\n\tboolean isNullable();\n\tboolean requiresFinalEvaluation(); // Determines if an evaluate is required after partial evaluation is run.\n}"}
{"index": 3973, "repo": "zookeeper-3.8.2", "des": "This class manages the socket i/o for the client.", "code": "Class ClientCnxn {\n\tvoid addAuthInfo(String scheme, byte[] auth);\n\tvoid close(); // Close the connection, which includes; send session disconnect to the server, shutdown the send/event threads.\n\tvoid disconnect(); // Shutdown the send/event threads.\n\tprotected void finishPacket(org.apache.zookeeper.ClientCnxn.Packet p);\n\tlong getLastZxid();\n\tlong getSessionId();\n\tbyte[] getSessionPasswd();\n\tint getSessionTimeout();\n\tint getXid();\n\tZooKeeperSaslClient getZooKeeperSaslClient();\n\tstatic boolean isInEventThread(); // Tests that current thread is the main event loop.\n\tprotected void onConnecting(InetSocketAddress addr);\n\torg.apache.zookeeper.ClientCnxn.Packet queuePacket(RequestHeader h, ReplyHeader r, Record request, Record response, AsyncCallback cb, String clientPath, String serverPath, Object ctx, ZooKeeper.WatchRegistration watchRegistration);\n\torg.apache.zookeeper.ClientCnxn.Packet queuePacket(RequestHeader h, ReplyHeader r, Record request, Record response, AsyncCallback cb, String clientPath, String serverPath, Object ctx, ZooKeeper.WatchRegistration watchRegistration, WatchDeregistration watchDeregistration);\n\tvoid saslCompleted();\n\tvoid sendPacket(Record request, Record response, AsyncCallback cb, int opCode);\n\tvoid start();\n\tReplyHeader submitRequest(RequestHeader h, Record request, Record response, ZooKeeper.WatchRegistration watchRegistration);\n\tReplyHeader submitRequest(RequestHeader h, Record request, Record response, ZooKeeper.WatchRegistration watchRegistration, WatchDeregistration watchDeregistration);\n}"}
{"index": 4383, "repo": "beam-sdks-java-core-2.49.0", "des": "A WindowFn that windows values into fixed-size timestamp-based windows.", "code": "Class FixedWindows {\n\tIntervalWindow assignWindow(org.joda.time.Instant timestamp); // Returns the single window to which elements with this timestamp belong.\n\tboolean equals(@Nullable java.lang.Object object);\n\torg.joda.time.Duration getOffset();\n\torg.joda.time.Duration getSize();\n\tboolean isCompatible(WindowFn<?,?> other); // Returns whether this performs the same merging as the given WindowFn.\n\tstatic FixedWindows of(org.joda.time.Duration size); // Partitions the timestamp space into half-open intervals of the form [N * size, (N + 1) * size), where 0 is the epoch.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tvoid verifyCompatibility(WindowFn<?,?> other); // Throw IncompatibleWindowException if this WindowFn does not perform the same merging as the given $WindowFn.\n\tCoder<IntervalWindow> windowCoder(); // Returns the Coder used for serializing the windows used by this windowFn.\n\tFixedWindows withOffset(org.joda.time.Duration offset); // Partitions the timestamp space into half-open intervals of the form [N * size + offset, (N + 1) * size + offset), where 0 is the epoch.\n}"}
{"index": 13796, "repo": "spring-webmvc-6.0.11", "des": "Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.", "code": "public abstract class RouterFunctions extends Object {\n\tstatic <T extends ServerResponse>RouterFunction<T> changeParser(RouterFunction<T> routerFunction, org.springframework.web.util.pattern.PathPatternParser parser); // Changes the PathPatternParser on the given router function.\n\tstatic <T extends ServerResponse>RouterFunction<T> nest(RequestPredicate predicate, RouterFunction<T> routerFunction); // Route to the given router function if the given request predicate applies.\n\tstatic Function<ServerRequest,Optional<org.springframework.core.io.Resource>> resourceLookupFunction(String pattern, org.springframework.core.io.Resource location); // Returns the resource lookup function used by resources(String, Resource).\n\tstatic RouterFunction<ServerResponse> resources(String pattern, org.springframework.core.io.Resource location); // Route requests that match the given pattern to resources relative to the given root location.\n\tstatic RouterFunction<ServerResponse> resources(Function<ServerRequest,Optional<org.springframework.core.io.Resource>> lookupFunction); // Route to resources using the provided lookup function.\n\tstatic RouterFunctions.Builder route(); // Offers a discoverable way to create router functions through a builder-style interface.\n\tstatic <T extends ServerResponse>RouterFunction<T> route(RequestPredicate predicate, HandlerFunction<T> handlerFunction); // Route to the given handler function if the given request predicate applies.\n}"}
{"index": 7068, "repo": "calcite-core-1.34.0", "des": "RelOptCost defines an interface for optimizer cost in terms of number of rows processed, CPU cost, and I/O cost.", "code": "Interface RelOptCost {\n\tdouble divideBy(RelOptCost cost); // Computes the ratio between this cost and another cost.\n\tboolean equals(RelOptCost cost); // Compares this to another cost.\n\tdouble getCpu(); // Returns usage of CPU resources.\n\tdouble getIo(); // Returns usage of I/O resources.\n\tdouble getRows(); // Returns the number of rows processed; this should not be confused with the row count produced by a relational expression (RelNode.estimateRowCount(org.apache.calcite.rel.metadata.RelMetadataQuery)).\n\tboolean isEqWithEpsilon(RelOptCost cost); // Compares this to another cost, allowing for slight roundoff errors.\n\tboolean isInfinite(); // Returns whether this cost represents an expression that hasn't actually been implemented (e.g.\n\tboolean isLe(RelOptCost cost); // Compares this to another cost.\n\tboolean isLt(RelOptCost cost); // Compares this to another cost.\n\tRelOptCost minus(RelOptCost cost); // Subtracts another cost from this.\n\tRelOptCost multiplyBy(double factor); // Multiplies this cost by a scalar factor.\n\tRelOptCost plus(RelOptCost cost); // Adds another cost to this.\n}"}
{"index": 5501, "repo": "druid-processing-26.0.0", "des": "Frame channel backed by a FrameFileWriter.", "code": "Class WritableFrameFileChannel {\n\tvoid close(); // Finish writing to this channel.\n\tvoid fail(Throwable cause); // Called prior to WritableFrameChannel.close() if the writer has failed.\n\tboolean isClosed(); // Whether WritableFrameChannel.close() has been called on this channel.\n\tcom.google.common.util.concurrent.ListenableFuture<?> writabilityFuture(); // Returns a future that resolves when WritableFrameChannel.write(org.apache.druid.frame.channel.FrameWithPartition) is able to receive a new frame without blocking or throwing an exception.\n\tvoid write(FrameWithPartition frame); // Writes a frame with an attached partition number.\n}"}
{"index": 14682, "repo": "spring-data-commons-3.1.2", "des": "A factory that can generate byte code to speed-up dynamic property access.", "code": "public class ClassGeneratingPropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory {\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean); // Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\tboolean isSupported(PersistentEntity<?,?> entity); // Checks whether an accessor class can be generated.\n}"}
{"index": 8610, "repo": "avro-1.11.2", "des": "Implements bzip2 compression and decompression.", "code": "Class BZip2Codec {\n\tByteBuffer compress(ByteBuffer uncompressedData); // Compresses the input data\n\tByteBuffer decompress(ByteBuffer compressedData); // Decompress the data\n\tboolean equals(Object obj); // Codecs must implement an equals() method.\n\tString getName(); // Name of the codec; written to the file's metadata.\n}"}
{"index": 8941, "repo": "hbase-server-3.0.0-alpha-4", "des": "Implementation of GlobalQuotaSettings to hide the Protobuf messages we use internally.", "code": "Class GlobalQuotaSettingsImpl {\n\tprotected Boolean getBypassGlobals();\n\tList<QuotaSettings> getQuotaSettings(); // Computes a list of QuotaSettings that present the complete quota state of the combination of this user, table, and/or namespace.\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.SpaceQuota getSpaceProto();\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.Throttle getThrottleProto();\n\tprotected GlobalQuotaSettingsImpl merge(QuotaSettings other);\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.Quotas toQuotas(); // Constructs a new QuotaProtos.Quotas message from this.\n}"}
{"index": 928, "repo": "ignite-core-2.15.0", "des": "This class provides convenient adapter for MBean implementations.", "code": "Class IgniteSpiMBeanAdapter {\n\tString getIgniteHome(); // Gets Ignite installation home folder (i.e.\n\tUUID getLocalNodeId(); // Gets ID of the local node.\n\tString getName(); // Gets name of the SPI.\n\tlong getStartTimestamp(); // Get start timestamp of this SPI.\n\tString getStartTimestampFormatted(); // Gets string presentation of the start timestamp.\n\tlong getUpTime(); // Gets up-time of this SPI in ms.\n\tString getUpTimeFormatted(); // Gets string presentation of up-time for this SPI.\n}"}
{"index": 9461, "repo": "curator-recipes-5.5.0", "des": "A distributed value that attempts atomic sets.", "code": "Class DistributedAtomicValue {\n\tAtomicValue<byte[]> compareAndSet(byte[] expectedValue, byte[] newValue); // Atomically sets the value to the given updated value if the current value == the expected value.\n\tvoid forceSet(byte[] newValue); // Forcibly sets the value any guarantees of atomicity.\n\tAtomicValue<byte[]> get(); // Returns the current value of the counter.\n\tboolean initialize(byte[] value); // Atomic values are initially set to the equivalent of NULL in a database.\n\tAtomicValue<byte[]> trySet(byte[] newValue); // Attempt to atomically set the value to the given value.\n}"}
{"index": 15244, "repo": "spring-boot-3.1.1", "des": "ConfigurableWebServerFactory for Undertow-specific features.", "code": "public interface ConfigurableUndertowWebServerFactory extends ConfigurableWebServerFactory {\n\tvoid addBuilderCustomizers(UndertowBuilderCustomizer... customizers); // Add UndertowBuilderCustomizers that should be used to customize the Undertow Undertow.Builder.\n\tvoid setAccessLogDirectory(File accessLogDirectory); // Set the access log directory.\n\tvoid setAccessLogEnabled(boolean accessLogEnabled); // Set whether access logs are enabled.\n\tvoid setAccessLogPattern(String accessLogPattern); // Set the access log pattern.\n\tvoid setAccessLogPrefix(String accessLogPrefix); // Set the access log prefix.\n\tvoid setAccessLogRotate(boolean accessLogRotate); // Set whether access logs rotation is enabled.\n\tvoid setAccessLogSuffix(String accessLogSuffix); // Set the access log suffix.\n\tvoid setBufferSize(Integer bufferSize); // Set the buffer size.\n\tvoid setBuilderCustomizers(Collection<? extends UndertowBuilderCustomizer> customizers); // Set UndertowBuilderCustomizers that should be applied to the Undertow Undertow.Builder.\n\tvoid setIoThreads(Integer ioThreads); // Set the number of IO Threads.\n\tvoid setUseDirectBuffers(Boolean useDirectBuffers); // Set whether direct buffers should be used.\n\tvoid setUseForwardHeaders(boolean useForwardHeaders); // Set if x-forward-* headers should be processed.\n\tvoid setWorkerThreads(Integer workerThreads); // Set the number of Worker Threads.\n}"}
{"index": 6630, "repo": "ignite-indexing-2.15.0", "des": "Registry of all currently available query contexts.", "code": "Class QueryContextRegistry {\n\tboolean clearShared(UUID nodeId, long qryId); // Clear shared context.\n\tvoid clearSharedOnLocalNodeStop(); // Clear shared contexts on local node stop.\n\tvoid clearSharedOnRemoteNodeStop(UUID nodeId); // Clear shared contexts on remote node stop.\n\t@Nullable QueryContext getShared(UUID nodeId, long qryId, int segmentId); // Access query context from another thread.\n\tvoid setShared(UUID nodeId, long qryId, QueryContext ctx); // Sets current thread local context.\n}"}
{"index": 12249, "repo": "jena-core-4.9.0", "des": "An implementation of the generic RuleContext for use in the RETE implementation.", "code": "public class RETERuleContext extends Object implements RuleContext {\n\tvoid add(Triple t); // Assert a new triple in the deduction graph, triggering any consequent processing as appropriate.\n\tboolean contains(Node s, Node p, Node o); // Return true if the triple pattern is already in either the graph or the stack.\n\tboolean contains(Triple t); // Return true if the triple is already in either the graph or the stack.\n\tClosableIterator<Triple> find(Node s, Node p, Node o); // In some formulations the context includes deductions that are not yet visible to the underlying graph but need to be checked for.\n\tRETEEngine getEngine(); // Returns the RETE engine associated with this context.\n\tBindingEnvironment getEnv(); // Returns the current variable binding environment for the current rule.\n\tInfGraph getGraph(); // Returns the graph.\n\tRule getRule(); // Returns the rule.\n\tvoid remove(Triple t); // Remove a triple from the deduction graph (and the original graph if relevant).\n\tvoid setEnv(BindingEnvironment env); // Sets the current binding environment for this context.\n\tvoid setRule(Rule rule); // Sets the rule.\n\tboolean shouldFire(boolean allowUnsafe); // Check whether the rule should fire in this context.\n\tboolean shouldStillFire(); // Check if a rule from the conflict set is still OK to fire.\n\tvoid silentAdd(Triple t); // Assert a new triple in the deduction graph, bypassing any processing machinery.\n}"}
{"index": 11106, "repo": "tribuo-core-4.3.1", "des": "An Options implementation which provides CLI arguments for the model hashing functionality.", "code": "public class HashingOptions extends Object implements com.oracle.labs.mlrg.olcut.config.Options {\n\t<T extends Output<T>>Trainer<T> getHashedTrainer(Trainer<T> innerTrainer); // Gets the trainer wrapped in a hashing trainer.\n\tOptional<Hasher> getHasher(); // Get the specified hasher.\n}"}
{"index": 863, "repo": "ignite-core-2.15.0", "des": "Convenience class representing mutable tuple of three values.", "code": "Class GridTuple3<V1,V2,V3> {\n\tObject clone();\n\tboolean equals(Object o);\n\tV1 get1(); // Gets first value.\n\tV2 get2(); // Gets second value.\n\tV3 get3(); // Gets third value.\n\tIterator<Object> iterator();\n\tvoid readExternal(ObjectInput in);\n\tvoid set(V1 val1, V2 val2, V3 val3); // Sets all values.\n\tvoid set1(V1 val1); // Sets first value.\n\tvoid set2(V2 val2); // Sets second value.\n\tvoid set3(V3 val3); // Sets third value.\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 2065, "repo": "hive-exec-4.0.0-alpha-2", "des": "File system specific counters with defined limits.", "code": "Class FileSystemCounterLimit {\n\tCounterLimit clone(); // Return cloned copy of this counter limit\n\tboolean equals(Object other);\n\tlong getLimit(); // Get the threshold value for the counter\n\tString getName(); // Get the name of the counter.\n}"}
{"index": 5270, "repo": "druid-processing-26.0.0", "des": "Base interface describing the mechanism used to evaluate a FunctionExpr.", "code": "Interface Function {\n\tExprEval apply(List<Expr> args, Expr.ObjectBinding bindings); // Evaluate the function, given a list of arguments and a set of bindings to provide values for IdentifierExpr.\n\tdefault <T> ExprVectorProcessor<T> asVectorProcessor(Expr.VectorInputBindingInspector inspector, List<Expr> args); // Builds a 'vectorized' function expression processor, that can build vectorized processors for its input values using Expr.asVectorProcessor(org.apache.druid.math.expr.Expr.VectorInputBindingInspector), for use in vectorized query engines.\n\tdefault boolean canVectorize(Expr.InputBindingInspector inspector, List<Expr> args); // Check if a function can be 'vectorized', for a given set of Expr inputs.\n\tdefault Set<Expr> getArrayInputs(List<Expr> args); // Given a list of arguments to this Function, get the set of arguments that must evaluate to an array value\n\tExpressionType getOutputType(Expr.InputBindingInspector inspector, List<Expr> args); // Compute the output type of this function for a given set of argument expression inputs.\n\tdefault Set<Expr> getScalarInputs(List<Expr> args); // Given a list of arguments to this Function, get the set of arguments that must evaluate to a scalar value\n\tdefault boolean hasArrayInputs(); // Returns true if a function expects any array arguments\n\tdefault boolean hasArrayOutput(); // Returns true if function produces an array.\n\tvoid validateArguments(List<Expr> args); // Validate function arguments.\n}"}
{"index": 8664, "repo": "avro-1.11.2", "des": "Builds an Avro Map type with optional properties.", "code": "Class SchemaBuilder.MapBuilder<R> {\n\tprotected SchemaBuilder.MapBuilder<R> self(); // a self-type for chaining builder subclasses.\n\tSchemaBuilder.TypeBuilder<R> values(); // Return a type builder for configuring the map's nested values schema.\n\tR values(Schema valueSchema); // Complete configuration of this map, setting the schema of the map values to the schema provided.\n}"}
{"index": 15725, "repo": "camel-api-4.0.0-RC1", "des": "A CamelContext creation and destruction tracker.", "code": "public class CamelContextTracker extends Object implements Closeable {\n\tboolean accept(CamelContext camelContext); // Called to determine whether this tracker should accept the given context.\n\tfinal void close(); // Closes the tracker so it not longer tracks.\n\tvoid contextCreated(CamelContext camelContext); // Called when a context is created.\n\tvoid contextDestroyed(CamelContext camelContext); // Called when a context has been shutdown.\n\tstatic void notifyContextCreated(CamelContext camelContext);\n\tstatic void notifyContextDestroyed(CamelContext camelContext);\n\tfinal void open(); // Opens the tracker to start tracking when new CamelContext is created or destroyed.\n}"}
{"index": 6445, "repo": "exoplayer-core-2.9.6", "des": "A DataSource for reading from a byte array.", "code": "Class ByteArrayDataSource {\n\tvoid close(); // Closes the source.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to readLength bytes of data and stores them into buffer, starting at index offset.\n}"}
{"index": 10516, "repo": "groovy-all-4.0.13", "des": "Support methods for Groovy category usage", "code": "public class GroovyCategorySupport extends Object {\n\tstatic GroovyCategorySupport.CategoryMethodList getCategoryMethods(String name); // This method is used to pull all the new methods out of the local thread context with a particular name.\n\tstatic AtomicInteger getCategoryNameUsage(String name);\n\tstatic String getPropertyCategoryGetterName(String propertyName);\n\tstatic String getPropertyCategorySetterName(String propertyName);\n\tstatic boolean hasCategoryInAnyThread(); // Deprecated. use hasCategoryInCurrentThread()\n\tstatic boolean hasCategoryInCurrentThread();\n\tstatic <T> T use(Class categoryClass, Closure<T> closure); // Create a scope based on given categoryClass and invoke closure within that scope.\n\tstatic <T> T use(List<Class> categoryClasses, Closure<T> closure); // Create a scope based on given categoryClasses and invoke closure within that scope.\n}"}
{"index": 11907, "repo": "spring-kafka-3.0.9", "des": "A general interface for managing thread-bound resources when a Consumer is available.", "code": "public interface ThreadStateProcessor {\n\tdefault void clearThreadState(org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Call to clear thread-bound resources which were set up in setupThreadState(Consumer).\n\tdefault void setupThreadState(org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Call to set up thread-bound resources which will be available for the entire duration of enclosed operation involving a Consumer.\n}"}
{"index": 12649, "repo": "spring-data-mongodb-4.1.2", "des": "MongoDB specific PersistentProperty implementation.", "code": "public class BasicMongoPersistentProperty extends AnnotationBasedPersistentProperty<MongoPersistentProperty> implements MongoPersistentProperty {\n\tprotected Association<MongoPersistentProperty> createAssociation();\n\tDBRef getDBRef(); // Returns the DBRef if the property is a reference.\n\tDocumentReference getDocumentReference(); // Returns the DocumentReference if the property is a reference.\n\tCollection<Object> getEncryptionKeyIds();\n\tEvaluationContext getEvaluationContext(Object rootObject); // Obtain the EvaluationContext for a specific root object.\n\tString getFieldName(); // Returns the key to be used to store the value of the property inside a Mongo Document.\n\tint getFieldOrder(); // Returns the order of the field if defined.\n\tClass<?> getFieldType(); // Returns the Java FieldType of the field a property is persisted to.\n\tboolean hasExplicitFieldName(); // Returns whether the property uses an annotated field name through Field.\n\tboolean isDbReference(); // Returns whether the property is a DBRef.\n\tboolean isDocumentReference(); // Returns whether the property is a DocumentReference.\n\tboolean isExplicitIdProperty(); // Returns whether the property is explicitly marked as an identifier property of the owning PersistentEntity.\n\tboolean isExplicitLanguageProperty(); // Returns true when property being annotated with Language.\n\tboolean isIdProperty(); // Also considers fields as id that are of supported id type and name.\n\tboolean isLanguageProperty(); // Returns true whether the property indicates the documents language either by having a MongoPersistentProperty.getFieldName() equal to language or being annotated with Language.\n\tboolean isTextScoreProperty(); // Returns whether the property holds the documents score calculated by text search.\n\tboolean writeNullValues(); // Returns whether the property should be written to the database if its value is null.\n}"}
{"index": 1431, "repo": "pdfbox-3.0.0-beta1", "des": "Makes up the execution context, holding the available operators and the execution stack.", "code": "Class ExecutionContext {\n\tOperators getOperators(); // Returns the operator set used by this execution context.\n\tStack<Object> getStack(); // Returns the stack used by this execution context.\n\tint popInt(); // Pops a value of type int from the stack.\n\tNumber popNumber(); // Pops a number (int or real) from the stack.\n\tfloat popReal(); // Pops a number from the stack and returns it as a real value.\n}"}
{"index": 8400, "repo": "hadoop-aws-3.3.6", "des": "Builder used in create file; takes a callback to the operation to create the file.", "code": "Class CreateFileBuilder {\n\torg.apache.hadoop.fs.FSDataOutputStream build();\n\tEnumSet<org.apache.hadoop.fs.CreateFlag> getFlags(); // make the flag getter public.\n\tCreateFileBuilder getThisBuilder();\n\tCreateFileBuilder withFlags(EnumSet<org.apache.hadoop.fs.CreateFlag> flags); // Pass flags down.\n}"}
{"index": 8416, "repo": "hadoop-aws-3.3.6", "des": "This is a dedicated committer which requires the \"magic\" directory feature of the S3A Filesystem to be enabled; it then uses paths for task and job attempts in magic paths, so as to ensure that the final output goes direct to the destination directory.", "code": "Class MagicS3GuardCommitter {\n\tvoid abortTask(org.apache.hadoop.mapreduce.TaskAttemptContext context); // Abort a task.\n\tvoid cleanupStagingDirs(); // Delete the magic directory.\n\tvoid commitTask(org.apache.hadoop.mapreduce.TaskAttemptContext context);\n\tprotected org.apache.hadoop.fs.Path getBaseTaskAttemptPath(org.apache.hadoop.mapreduce.TaskAttemptContext context); // Compute the base path where the output of a task attempt is written.\n\tprotected org.apache.hadoop.fs.Path getJobAttemptPath(int appAttemptId); // Compute the path where the output of a given job attempt will be placed.\n\tprotected org.apache.hadoop.fs.Path getJobPath(); // Compute the path under which all job attempts will be placed.\n\tString getName(); // Get the name of this committer.\n\torg.apache.hadoop.fs.Path getTaskAttemptPath(org.apache.hadoop.mapreduce.TaskAttemptContext context); // Compute the path where the output of a task attempt is stored until that task is committed.\n\torg.apache.hadoop.fs.Path getTempTaskAttemptPath(org.apache.hadoop.mapreduce.TaskAttemptContext context); // Get a temporary directory for data.\n\tprotected AbstractS3ACommitter.ActiveCommit listPendingUploadsToCommit(CommitContext commitContext); // Get the list of pending uploads for this job attempt, by listing all .pendingset files in the job attempt directory.\n\tboolean needsTaskCommit(org.apache.hadoop.mapreduce.TaskAttemptContext context); // Did this task write any files in the work directory? Probes for a task existing by looking to see if the attempt dir exists.\n\tprotected boolean requiresDelayedCommitOutputInFileSystem(); // Require magic paths in the FS client.\n\tvoid setupJob(org.apache.hadoop.mapreduce.JobContext context); // Base job setup (optionally) deletes the success marker and always creates the destination directory.\n}"}
{"index": 16551, "repo": "spring-batch-infrastructure-5.0.2", "des": "Creates a fully qualified SynchronizedItemStreamWriter.", "code": "public class SynchronizedItemStreamWriterBuilder<T> extends Object {\n\tSynchronizedItemStreamWriter<T> build(); // Returns a fully constructed SynchronizedItemStreamWriter.\n\tSynchronizedItemStreamWriterBuilder<T> delegate(ItemStreamWriter<T> delegate); // Set the delegate ItemStreamWriter.\n}"}
{"index": 8438, "repo": "hadoop-aws-3.3.6", "des": "How will tokens be issued on request? The RequestNewToken policy does not guarantee that a tokens can be created, only that an attempt will be made to request one.", "code": "Enum S3ADelegationTokens.TokenIssuingPolicy {\n\tstatic S3ADelegationTokens.TokenIssuingPolicy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic S3ADelegationTokens.TokenIssuingPolicy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9839, "repo": "commons-math3-3.6.1", "des": "Class holding the results of the split method.", "code": "Class SubHyperplane.SplitSubHyperplane<U extends Space> {\n\tSubHyperplane<U> getMinus(); // Get the part of the sub-hyperplane on the minus side of the splitting hyperplane.\n\tSubHyperplane<U> getPlus(); // Get the part of the sub-hyperplane on the plus side of the splitting hyperplane.\n\tSide getSide(); // Get the side of the split sub-hyperplane with respect to its splitter.\n}"}
{"index": 8758, "repo": "hadoop-yarn-common-3.3.6", "des": "Attribute value for String NodeAttributeType.", "code": "Class StringAttributeValue {\n\tboolean compareForOperation(AttributeValue other, AttributeExpressionOperation op); // compare the value against the other based on the AttributeExpressionOperation.\n\tString getValue();\n\tvoid validateAndInitializeValue(String valueStr); // validate the value based on the type and initialize for further compare operations.\n}"}
{"index": 434, "repo": "phoenix-core-5.1.3", "des": "Aggregators that execute on the server-side.", "code": "Class ServerAggregators {\n\tabstract void aggregate(Aggregator[] aggregators, Tuple result); // Aggregate over aggregators\n\tstatic ServerAggregators deserialize(byte[] b, org.apache.hadoop.conf.Configuration conf, MemoryManager.MemoryChunk chunk); // Deserialize aggregators from the serialized byte array representation\n\tAggregator[] newAggregators();\n\tAggregator[] newAggregators(org.apache.hadoop.conf.Configuration conf);\n\tstatic byte[] serialize(List<SingleAggregateFunction> aggFuncs, int minNullableIndex); // Serialize an Aggregator into a byte array\n}"}
{"index": 9380, "repo": "hadoop-yarn-api-3.3.6", "des": "Class representing the target expressions that are used in placement constraints.", "code": "Class PlacementConstraint.TargetExpression {\n\t<T> T accept(PlacementConstraint.Visitor<T> visitor); // Visitor pattern.\n\tboolean equals(Object o);\n\tString getTargetKey(); // Get the key of the target expression.\n\tPlacementConstraint.TargetExpression.TargetType getTargetType(); // Get the type of the target expression.\n\tSet<String> getTargetValues(); // Get the set of values of the target expression.\n}"}
{"index": 11749, "repo": "bedrock-core-7.0.2", "des": "An DeferredAtomicBoolean is a Deferred representation of an AtomicBoolean.", "code": "public class DeferredAtomicBoolean extends Object implements Deferred<Boolean> {\n\tBoolean get(); // Attempts to obtain the underlying object.\n\tClass<Boolean> getDeferredClass(); // Obtains the Class of the Deferred reference.\n}"}
{"index": 8324, "repo": "spring-ws-3.0.10.RELEASE", "des": "Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.", "code": "Interface WebServiceMessageSender {\n\tWebServiceConnection createConnection(URI uri); // Create a new WebServiceConnection to the specified URI.\n\tboolean supports(URI uri); // Does this WebServiceMessageSender support the supplied URI?\n}"}
{"index": 3225, "repo": "hbase-common-3.0.0-alpha-4", "des": "Encapsulates a data block compressed using a particular encoding algorithm.", "code": "Class EncodedDataBlock {\n\tbyte[] encodeData(); // Do the encoding, but do not cache the encoded data.\n\tstatic int getCompressedSize(Compression.Algorithm algo, org.apache.hadoop.io.compress.Compressor compressor, byte[] inputBuffer, int offset, int length); // Find the size of compressed data assuming that buffer will be compressed using given algorithm.\n\tint getEncodedCompressedSize(Compression.Algorithm comprAlgo, org.apache.hadoop.io.compress.Compressor compressor); // Estimate size after second stage of compression (e.g.\n\tIterator<Cell> getIterator(int headerSize); // Provides access to compressed value.\n\tint getSize(); // Find the size of minimal buffer that could store compressed data.\n}"}
{"index": 2929, "repo": "tink-1.10.0", "des": "Streaming encryption using AES-CTR and HMAC.", "code": "Class AesCtrHmacStreaming {\n\tlong expectedCiphertextSize(long plaintextSize); // Returns the expected size of the ciphertext for a given plaintext.\n\tint getCiphertextOffset();\n\tint getCiphertextOverhead();\n\tint getCiphertextSegmentSize();\n\tint getFirstSegmentOffset();\n\tint getHeaderLength();\n\tint getPlaintextSegmentSize();\n\tReadableByteChannel newDecryptingChannel(ReadableByteChannel ciphertextChannel, byte[] associatedData);\n\tInputStream newDecryptingStream(InputStream ciphertextStream, byte[] associatedData); // Returns a wrapper around ciphertextSource, such that any read-operation via the wrapper results in AEAD-decryption of the underlying ciphertext, using associatedData as associated authenticated data.\n\tWritableByteChannel newEncryptingChannel(WritableByteChannel ciphertextChannel, byte[] associatedData); // Returns a WritableByteChannel for plaintext.\n\tOutputStream newEncryptingStream(OutputStream ciphertext, byte[] associatedData); // Returns a wrapper around ciphertextDestination, such that any write-operation via the wrapper results in AEAD-encryption of the written data, using associatedData as associated authenticated data.\n\tSeekableByteChannel newSeekableDecryptingChannel(SeekableByteChannel ciphertextSource, byte[] associatedData); // Returns a SeekableByteChannel that allows to access the plaintext.\n\tcom.google.crypto.tink.subtle.AesCtrHmacStreaming.AesCtrHmacStreamDecrypter newStreamSegmentDecrypter();\n\tcom.google.crypto.tink.subtle.AesCtrHmacStreaming.AesCtrHmacStreamEncrypter newStreamSegmentEncrypter(byte[] aad);\n}"}
{"index": 9714, "repo": "commons-math3-3.6.1", "des": "This class implements a second order Runge-Kutta integrator for Ordinary Differential Equations.", "code": "Class MidpointFieldIntegrator<T extends RealFieldElement<T>> {\n\tprotected org.apache.commons.math3.ode.nonstiff.MidpointFieldStepInterpolator<T> createInterpolator(boolean forward, T[][] yDotK, FieldODEStateAndDerivative<T> globalPreviousState, FieldODEStateAndDerivative<T> globalCurrentState, FieldEquationsMapper<T> mapper); // Create an interpolator.\n\tT[][] getA(); // Get the internal weights from Butcher array (without the first empty row).\n\tT[] getB(); // Get the external weights for the high order method from Butcher array.\n\tT[] getC(); // Get the time steps from Butcher array (without the first zero).\n}"}
{"index": 15870, "repo": "camel-api-4.0.0-RC1", "des": "Represents the kind of options for what to do with the current task when shutting down.", "code": "public enum ShutdownRunningTask extends Enum<ShutdownRunningTask> {\n\tstatic ShutdownRunningTask valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ShutdownRunningTask[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14977, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A Filter for the OAuth 2.0 Device Authorization Grant, which handles the processing of the Device Verification Request (submission of the user code) and the Device Authorization Consent.", "code": "public final class OAuth2DeviceVerificationEndpointFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\tvoid setAuthenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter); // Sets the AuthenticationConverter used when attempting to extract a Device Verification Request (or Device Authorization Consent) from HttpServletRequest to an instance of OAuth2DeviceVerificationAuthenticationToken or OAuth2DeviceAuthorizationConsentAuthenticationToken used for authenticating the request.\n\tvoid setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,?> authenticationDetailsSource); // Sets the AuthenticationDetailsSource used for building an authentication details instance from HttpServletRequest.\n\tvoid setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler authenticationFailureHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tvoid setAuthenticationSuccessHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler authenticationSuccessHandler); // Sets the AuthenticationSuccessHandler used for handling an OAuth2DeviceVerificationAuthenticationToken and returning the response.\n\tvoid setConsentPage(String consentPage); // Specify the URI to redirect Resource Owners to if consent is required.\n}"}
{"index": 18579, "repo": "hibernate-core-5.6.15.Final", "des": "Basic implementation of a Node bridging to the Antlr CommonAST hierarchy.", "code": "Class NodeSupport {\n\tjava.lang.String getDebugText(); // Get a string representation of this node usable for debug logging or similar.\n\tjava.lang.String getRenderableText(); // Build the node's representation for use in the resulting rendering.\n}"}
{"index": 17347, "repo": "groovy-4.0.13", "des": "Handles generation of code for the @MapConstructor annotation.", "code": "public class MapConstructorASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\tString getAnnotationName(); // If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tvoid setCompilationUnit(CompilationUnit unit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 11781, "repo": "bedrock-core-7.0.2", "des": "An Option to define frequency (durations to wait) when attempting to resolve an Ensured when calling Ensured.get()", "code": "public class RetryFrequency extends Object implements Option {\n\tstatic RetryFrequency every(long duration, TimeUnit unit); // Obtains a RetryFrequency representing fixed retry Durations.\n\tstatic RetryFrequency exponential(); // Obtains a RetryFrequency based on an exponential sequence, starting at 0 with a 50% growth rate.\n\tstatic RetryFrequency exponential(double initial, double percentage); // Obtains a RetryFrequency based on an exponential sequence.\n\tstatic RetryFrequency fibonacci(); // Obtains a RetryFrequency based on the Fibonacci sequence.\n\tIterable<Duration> get(); // Obtains the Durations for the RetryFrequency.\n\tstatic RetryFrequency of(Iterable<Duration> durations); // Obtains a RetryFrequency based on the specified Durations.\n\tstatic RetryFrequency of(TimeUnit unit, long... instants); // Obtains a RetryFrequency based on the specified times.\n\tRetryFrequency randomized(); // Obtains a randomized version of this RetryFrequency, where by values returned from the get() Iterable will be randomized values between 0 and the values provided by this RetryFrequency.\n\tstatic RetryFrequency standard(); // Obtains the standard RetryFrequency for retrying every 250 milliseconds.\n}"}
{"index": 5526, "repo": "org.apache.karaf.main-2.4.4", "des": "An AdaptorHook hooks into the BaseAdaptor class.", "code": "Interface AdaptorHook {\n\tvoid addProperties(Properties properties); // Gets called by the adaptor during FrameworkAdaptor.getProperties().\n\tFrameworkLog createFrameworkLog(); // Gets called by the adaptor during FrameworkAdaptor.getFrameworkLog().\n\tvoid frameworkStart(BundleContext context); // Gets called by the adaptor during FrameworkAdaptor.frameworkStart(BundleContext).\n\tvoid frameworkStop(BundleContext context); // Gets called by the adaptor during FrameworkAdaptor.frameworkStop(BundleContext).\n\tvoid frameworkStopping(BundleContext context); // Gets called by the adaptor during FrameworkAdaptor.frameworkStopping(BundleContext).\n\tvoid handleRuntimeError(Throwable error); // Gets called by the adaptor during FrameworkAdaptor.handleRuntimeError(Throwable).\n\tvoid initialize(BaseAdaptor adaptor); // Gets called by the adaptor during FrameworkAdaptor.initialize(EventPublisher).\n\tURLConnection mapLocationToURLConnection(String location); // Gets called by the adaptor during FrameworkAdaptor.mapLocationToURLConnection(String).\n}"}
{"index": 18787, "repo": "lucene-core-9.7.0", "des": "Instances of this reader type can only be used to get stored fields from the underlying LeafReaders, but it is not possible to directly retrieve postings.", "code": "Class CompositeReader {\n\tCompositeReaderContext getContext(); // Expert: Returns the root IndexReaderContext for this IndexReader's sub-reader tree.\n\tprotected abstract List<? extends IndexReader> getSequentialSubReaders(); // Expert: returns the sequential sub readers that this reader is logically composed of.\n}"}
{"index": 2338, "repo": "commons-geometry-euclidean-1.0", "des": "Internal class used to connect line subsets together.", "code": "Class AbstractLinePathConnector.ConnectableLineSubset {\n\tboolean canConnectTo(AbstractLinePathConnector.ConnectableLineSubset next); // Return true if this instance's end point can be connected to the argument's start point.\n\tint compareTo(AbstractLinePathConnector.ConnectableLineSubset other);\n\tboolean endPointsEq(AbstractLinePathConnector.ConnectableLineSubset other); // Return true if the end point of this instance should be considered equivalent to the end point of the argument.\n\tboolean equals(Object obj);\n\tAbstractLinePathConnector.ConnectableLineSubset getConnectionSearchKey(); // Get a new instance used as a search key to help locate other elements with start points matching this instance's end point.\n\tLineConvexSubset getLineSubset(); // Get the line subset for this instance.\n\tdouble getRelativeAngle(AbstractLinePathConnector.ConnectableLineSubset next); // Return the relative angle between this element and the argument.\n\tprotected AbstractLinePathConnector.ConnectableLineSubset getSelf(); // Return the current instance as the generic type.\n\tboolean hasEnd(); // Return true if this instance has an end point that can be connected to another element's start point.\n\tboolean hasStart(); // Return true if this instance has a start point that can be connected to another element's end point.\n\tboolean hasZeroSize(); // Return true if this instance has a size equivalent to zero.\n\tboolean shouldContinueConnectionSearch(AbstractLinePathConnector.ConnectableLineSubset candidate, boolean ascending); // Return true if the search for possible connections should continue through the sorted set of possible path elements given the current candidate element and search direction.\n}"}
{"index": 18046, "repo": "spring-ws-core-4.0.5", "des": "Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.", "code": "public class MessageEndpointAdapter extends Object implements EndpointAdapter {\n\tvoid invoke(MessageContext messageContext, Object endpoint); // Use the given endpoint to handle the request.\n\tboolean supports(Object endpoint); // Does this EndpointAdapter support the given endpoint?\n}"}
{"index": 543, "repo": "ignite-core-2.15.0", "des": "Factory implementation for CacheJdbcBlobStore.", "code": "Class CacheJdbcBlobStoreFactory<K,V> {\n\tCacheJdbcBlobStore<K,V> create();\n\tCacheJdbcBlobStoreFactory<K,V> setConnectionUrl(String connUrl); // Sets connection URL.\n\tCacheJdbcBlobStoreFactory<K,V> setCreateTableQuery(String createTblQry); // Sets create table query.\n\tCacheJdbcBlobStoreFactory<K,V> setDataSource(DataSource dataSrc); // Sets data source.\n\tCacheJdbcBlobStoreFactory<K,V> setDataSourceBean(String dataSrcBean); // Sets name of the data source bean.\n\tCacheJdbcBlobStoreFactory<K,V> setDeleteQuery(String delQry); // Sets delete entry query.\n\tCacheJdbcBlobStoreFactory<K,V> setInitSchema(boolean initSchema); // Flag indicating whether DB schema should be initialized by Ignite (default behaviour) or was explicitly created by user.\n\tCacheJdbcBlobStoreFactory<K,V> setInsertQuery(String insertQry); // Sets insert entry query.\n\tCacheJdbcBlobStoreFactory<K,V> setLoadQuery(String loadQry); // Sets load query.\n\tCacheJdbcBlobStoreFactory<K,V> setPassword(String passwd); // Sets password for database access.\n\tCacheJdbcBlobStoreFactory<K,V> setUpdateQuery(String updateQry); // Sets update entry query.\n\tCacheJdbcBlobStoreFactory<K,V> setUser(String user); // Sets user name for database access.\n}"}
{"index": 5899, "repo": "hadoop-yarn-server-common-3.3.6", "des": "This encapsulates application specific information used by the Opportunistic Container Allocator to allocate containers.", "code": "Class OpportunisticContainerContext {\n\tvoid addToOutstandingReqs(List<org.apache.hadoop.yarn.api.records.ResourceRequest> resourceAsks); // Takes a list of ResourceRequests (asks), extracts the key information viz.\n\tOpportunisticContainerAllocator.AllocationParams getAppParams();\n\tSet<String> getBlacklist();\n\tOpportunisticContainerAllocator.ContainerIdGenerator getContainerIdGenerator();\n\tMap<String,RemoteNode> getNodeMap();\n\tOpportunisticSchedulerMetrics getOppSchedulerMetrics();\n\tTreeMap<SchedulerRequestKey,Map<org.apache.hadoop.yarn.api.records.Resource,OpportunisticContainerAllocator.EnrichedResourceRequest>> getOutstandingOpReqs();\n\tvoid matchAllocationToOutstandingRequest(org.apache.hadoop.yarn.api.records.Resource capability, List<OpportunisticContainerAllocator.Allocation> allocations); // This method matches a returned list of Container Allocations to any outstanding OPPORTUNISTIC ResourceRequest.\n\tvoid setContainerIdGenerator(OpportunisticContainerAllocator.ContainerIdGenerator containerIdGenerator);\n\tvoid updateAllocationParams(org.apache.hadoop.yarn.api.records.Resource minResource, org.apache.hadoop.yarn.api.records.Resource maxResource, org.apache.hadoop.yarn.api.records.Resource incrResource, int containerTokenExpiryInterval);\n\tvoid updateNodeList(List<RemoteNode> newNodeList);\n}"}
{"index": 8159, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for CallbackHandler implementations that handle WSPasswordCallback callbacks.", "code": "Class AbstractWsPasswordCallbackHandler {\n\tprotected void handleCleanup(CleanupCallback callback); // Invoked when a CleanupCallback is passed to AbstractCallbackHandler.handle(Callback[]).\n\tprotected void handleCustomToken(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.CUSTOM_TOKEN usage.\n\tprotected void handleDecrypt(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.DECRYPT usage.\n\tprotected void handleInternal(Callback callback); // Handles WSPasswordCallback callbacks.\n\tprotected void handleSecretKey(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.SECRET_KEY usage.\n\tprotected void handleSecurityContextToken(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.SECURITY_CONTEXT_TOKEN usage.\n\tprotected void handleSignature(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.SIGNATURE usage.\n\tprotected void handleUsernameToken(org.apache.wss4j.common.ext.WSPasswordCallback callback); // Invoked when the callback has a WSPasswordCallback.USERNAME_TOKEN usage.\n\tprotected void handleUsernameTokenPrincipal(UsernameTokenPrincipalCallback callback); // Invoked when a UsernameTokenPrincipalCallback is passed to AbstractCallbackHandler.handle(Callback[]).\n}"}
{"index": 15027, "repo": "spring-vault-core-3.0.4", "des": "Builder for AwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder.", "code": "public static class AwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder extends Object {\n\tAwsEc2AuthenticationOptions build(); // Build a new AwsEc2AuthenticationOptions instance.\n\tAwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder identityDocumentUri(URI identityDocumentUri); // Configure the Identity Document URI.\n\tAwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder nonce(AwsEc2AuthenticationOptions.Nonce nonce); // Configure a AwsEc2AuthenticationOptions.Nonce for login requests.\n\tAwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder path(String path); // Configure the mount path.\n\tAwsEc2AuthenticationOptions.AwsEc2AuthenticationOptionsBuilder role(String role); // Configure the name of the role against which the login is being attempted.If role is not specified, then the login endpoint looks for a role bearing the name of the AMI ID of the EC2 instance that is trying to login.\n}"}
{"index": 16360, "repo": "spring-data-jpa-3.1.2", "des": "Implementation of EntityInformation that uses JPA Metamodel to find the domain class' id field.", "code": "public class JpaMetamodelEntityInformation<T,ID> extends JpaEntityInformationSupport<T,ID> {\n\tObject getCompositeIdAttributeValue(Object id, String idAttribute); // Extracts the value for the given id attribute from a composite id\n\tString getEntityName(); // Returns the name of the entity.\n\tID getId(T entity);\n\tjakarta.persistence.metamodel.SingularAttribute<? super T,?> getIdAttribute(); // Returns the id attribute of the entity.\n\tCollection<String> getIdAttributeNames(); // Returns the attribute names of the id attributes.\n\tClass<ID> getIdType();\n\tMap<String,Object> getKeyset(Iterable<String> propertyPaths, T entity); // Extract a keyset for propertyPaths and the primary key (including composite key components if applicable).\n\tboolean hasCompositeId(); // Returns true if the entity has a composite id.\n\tboolean isNew(T entity);\n}"}
{"index": 14276, "repo": "wicket-core-10.0.0-M1", "des": "A store keeping a configurable maximum of pages in the session.", "code": "public class InSessionPageStore extends Object implements IPageStore {\n\tvoid addPage(IPageContext context, IManageablePage page); // Stores the page-\n\tprotected MetaDataKey<InSessionPageStore.SessionData> getKey(); // Session data is stored under a MetaDataKey.\n\tIManageablePage getPage(IPageContext context, int id); // Restores a page from storage.\n\tvoid removeAllPages(IPageContext context); // All pages should be removed from storage for the given context.\n\tvoid removePage(IPageContext context, IManageablePage page); // Removes a page from storage.\n\tboolean supportsVersioning(); // Is versioning of pages supported, i.e.\n}"}
{"index": 16392, "repo": "spring-integration-http-6.1.2", "des": "The BaseHttpMessageHandlerSpec implementation for the HttpRequestExecutingMessageHandler.", "code": "public class HttpMessageHandlerSpec extends BaseHttpMessageHandlerSpec<HttpMessageHandlerSpec,HttpRequestExecutingMessageHandler> {\n\tHttpMessageHandlerSpec errorHandler(org.springframework.web.client.ResponseErrorHandler errorHandler); // Set the ResponseErrorHandler for the underlying RestTemplate.\n\tprotected boolean isClientSet();\n\tHttpMessageHandlerSpec messageConverters(org.springframework.http.converter.HttpMessageConverter<?>... messageConverters); // Set a list of HttpMessageConverters to be used by the underlying RestTemplate.\n\tHttpMessageHandlerSpec requestFactory(org.springframework.http.client.ClientHttpRequestFactory requestFactory); // Set the ClientHttpRequestFactory for the underlying RestTemplate.\n}"}
{"index": 2847, "repo": "amqp-client-5.18.0", "des": "Implementation of ContentHeader - specialized by autogenerated code in AMQP.", "code": "Class AMQContentHeader {\n\tvoid appendPropertyDebugStringTo(StringBuilder acc); // Public API - A debugging utility - enable properties to be appended to a string buffer for use as trace messages.\n\tObject clone();\n\tlong getBodySize();\n\tFrame toFrame(int channelNumber, long bodySize); // Private API - Called by AMQCommand.transmit(com.rabbitmq.client.impl.AMQChannel)\n\tabstract void writePropertiesTo(ContentHeaderPropertyWriter writer); // Private API - Autogenerated writer for this header\n}"}
{"index": 6484, "repo": "exoplayer-core-2.9.6", "des": "An HttpDataSource that uses Android's HttpURLConnection.", "code": "Class DefaultHttpDataSource {\n\tprotected long bytesRead(); // Returns the number of bytes that have been read since the most recent call to open(DataSpec).\n\tprotected long bytesRemaining(); // Returns the number of bytes that are still to be read for the current DataSpec.\n\tprotected long bytesSkipped(); // Returns the number of bytes that have been skipped since the most recent call to open(DataSpec).\n\tvoid clearAllRequestProperties(); // Clears all request headers that were set by HttpDataSource.setRequestProperty(String, String).\n\tvoid clearRequestProperty(java.lang.String name); // Clears the value of a request header.\n\tvoid close(); // Closes the source.\n\tprotected java.net.HttpURLConnection getConnection(); // Returns the current connection, or null if the source is not currently opened.\n\tjava.util.Map<java.lang.String,java.util.List<java.lang.String>> getResponseHeaders(); // When the source is open, returns the response headers associated with the last DataSource.open(com.google.android.exoplayer2.upstream.DataSpec) call.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to readLength bytes of data and stores them into buffer, starting at index offset.\n\tvoid setRequestProperty(java.lang.String name, java.lang.String value); // Sets the value of a request header.\n}"}
{"index": 11997, "repo": "jena-core-4.9.0", "des": "Provides a trail of possible variable bindings for a forward rule.", "code": "public class BindingStack extends Object implements BindingEnvironment {\n\tboolean bind(int i, Node value); // Bind the ith variable in the current envionment to the given value.\n\tboolean bind(Node var, Node value); // Bind a variable in the current envionment to the given value.\n\tvoid bindNoCheck(Node_RuleVariable var, Node value); // Bind a variable in the current envionment to the given value.\n\tvoid commit(); // Forget the previously pushed state but keep the current environment.\n\tNode getBinding(Node node); // If the node is a variable then return the current binding (null if not bound) otherwise return the node itself.\n\tNode[] getEnvironment(); // Return the current array of bindings\n\tNode getGroundVersion(Node node); // Return the most ground version of the node.\n\tTriple instantiate(TriplePattern pattern); // Instantiate a triple pattern against the current environment.\n\tvoid push(); // Save the current environment on an internal stack\n\tvoid reset(int newSize); // Reset the binding environment to empty.\n\tvoid unwind(); // Forget the current environment and return the previously pushed state.\n}"}
{"index": 8152, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.", "code": "Class AbstractSoapFaultDefinitionExceptionResolver {\n\tprotected void customizeFault(Object endpoint, Exception ex, SoapFault fault); // Customize the SoapFault created by this resolver.\n\tprotected abstract SoapFaultDefinition getFaultDefinition(Object endpoint, Exception ex); // Template method that returns the SoapFaultDefinition for the given exception.\n\tprotected boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex); // Template method for resolving exceptions that is called by AbstractEndpointExceptionResolver.resolveException(org.springframework.ws.context.MessageContext, java.lang.Object, java.lang.Exception).\n\tvoid setDefaultFault(SoapFaultDefinition defaultFault); // Set the default fault.\n}"}
{"index": 15559, "repo": "spring-batch-core-5.0.2", "des": "Registry keeping track of all the Step instances defined in a Job.", "code": "public interface StepRegistry {\n\tStep getStep(String jobName, String stepName); // Returns the Step of the specified job based on its name.\n\tvoid register(String jobName, Collection<Step> steps); // Registers all the step instances of the given job.\n\tvoid unregisterStepsFromJob(String jobName); // Unregisters all the steps instances of the given job.\n}"}
{"index": 17096, "repo": "spring-integration-core-6.1.2", "des": "Utilities for adapting integration components to/from reactive types.", "code": "public final class IntegrationReactiveUtils extends Object {\n\tstatic <T> reactor.core.publisher.Flux<org.springframework.messaging.Message<T>> messageChannelToFlux(org.springframework.messaging.MessageChannel messageChannel); // Adapt a provided MessageChannel into a Flux source: - a FluxMessageChannel is returned as is because it is already a Publisher; - a SubscribableChannel is subscribed with a MessageHandler for the Sinks.Many.tryEmitNext(Object) which is returned from this method; - a PollableChannel is wrapped into a MessageSource lambda and reuses messageSourceToFlux(MessageSource).\n\tstatic <T> reactor.core.publisher.Flux<org.springframework.messaging.Message<T>> messageSourceToFlux(MessageSource<T> messageSource); // Wrap a provided MessageSource into a Flux for pulling the on demand.\n}"}
{"index": 10802, "repo": "spring-boot-actuator-3.1.1", "des": "A logical grouping of health contributors that can be exposed by the HealthEndpoint.", "code": "public interface HealthEndpointGroup {\n\tAdditionalHealthEndpointPath getAdditionalPath(); // Return an additional path that can be used to map the health group to an alternative location.\n\tHttpCodeStatusMapper getHttpCodeStatusMapper(); // Returns the HttpCodeStatusMapper that should be used for this group.\n\tStatusAggregator getStatusAggregator(); // Returns the status aggregator that should be used for this group.\n\tboolean isMember(String name); // Returns true if the given contributor is a member of this group.\n\tboolean showComponents(SecurityContext securityContext); // Returns if health components should be shown in the response.\n\tboolean showDetails(SecurityContext securityContext); // Returns if health details should be shown in the response.\n}"}
{"index": 16125, "repo": "spring-data-cassandra-4.1.2", "des": "Central Cassandra specific converter interface from Object to Row.", "code": "public interface CassandraConverter extends EntityConverter<CassandraPersistentEntity<?>,CassandraPersistentProperty,Object,Object> {\n\tObject convertToColumnType(Object value); // Converts the given object into a value Cassandra will be able to store natively in a column.\n\tObject convertToColumnType(Object value, ColumnType typeDescriptor); // Converts the given object into a value Cassandra will be able to store natively in a column.\n\tdefault Object convertToColumnType(Object value, TypeInformation<?> typeInformation); // Converts the given object into a value Cassandra will be able to store natively in a column.\n\tcom.datastax.oss.driver.api.core.type.codec.registry.CodecRegistry getCodecRegistry(); // Returns the CodecRegistry registered in the CassandraConverter.\n\tColumnTypeResolver getColumnTypeResolver(); // Returns the ColumnTypeResolver to resolve ColumnType for properties, TypeInformation, and values.\n\tCustomConversions getCustomConversions(); // Returns the CustomConversions for this converter.\n\tObject getId(Object object, CassandraPersistentEntity<?> entity); // Returns the Id for an entity.\n\tCassandraMappingContext getMappingContext();\n\tProjectionFactory getProjectionFactory(); // Returns the ProjectionFactory for this converter.\n\t<R> R project(EntityProjection<R,?> descriptor, com.datastax.oss.driver.api.core.cql.Row row); // Apply a projection to Row and return the projection return type R.\n\tvoid write(Object source, Object sink, CassandraPersistentEntity<?> entity); // Converts and writes a source object into a sink using the given CassandraPersistentEntity.\n}"}
{"index": 6927, "repo": "calcite-core-1.34.0", "des": "Relational expression representing a scan of a table in a JDBC data source.", "code": "Class JdbcTableScan {\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tSqlImplementor.Result implement(JdbcImplementor implementor);\n\tRelNode withHints(List<RelHint> hintList); // Returns a new relational expression with the specified hints hintList.\n}"}
{"index": 2033, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnDivideColumn.", "code": "Class DoubleColModuloDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 3720, "repo": "kafka-streams-3.5.0", "des": "A window store that only supports read operations.", "code": "Interface ReadOnlyWindowStore<K,V> {\n\tKeyValueIterator<Windowed<K>,V> all(); // Gets all the key-value pairs in the existing windows.\n\tdefault KeyValueIterator<Windowed<K>,V> backwardAll(); // Gets all the key-value pairs in the existing windows in backward order with respect to time (from end to beginning of time).\n\tdefault WindowStoreIterator<V> backwardFetch(K key, Instant timeFrom, Instant timeTo); // Get all the key-value pairs with the given key and the time range from all the existing windows in backward order with respect to time (from end to beginning of time).\n\tdefault KeyValueIterator<Windowed<K>,V> backwardFetch(K keyFrom, K keyTo, Instant timeFrom, Instant timeTo); // Get all the key-value pairs in the given key range and time range from all the existing windows in backward order with respect to time (from end to beginning of time).\n\tdefault KeyValueIterator<Windowed<K>,V> backwardFetchAll(Instant timeFrom, Instant timeTo); // Gets all the key-value pairs that belong to the windows within in the given time range in backward order with respect to time (from end to beginning of time).\n\tWindowStoreIterator<V> fetch(K key, Instant timeFrom, Instant timeTo); // Get all the key-value pairs with the given key and the time range from all the existing windows.\n\tKeyValueIterator<Windowed<K>,V> fetch(K keyFrom, K keyTo, Instant timeFrom, Instant timeTo); // Get all the key-value pairs in the given key range and time range from all the existing windows.\n\tV fetch(K key, long time); // Get the value of key from a window.\n\tKeyValueIterator<Windowed<K>,V> fetchAll(Instant timeFrom, Instant timeTo); // Gets all the key-value pairs that belong to the windows within in the given time range.\n}"}
{"index": 2394, "repo": "commons-geometry-euclidean-1.0", "des": "Class representing a rotation in 2 dimensional Euclidean space.", "code": "Class Rotation2D {\n\tVector2D apply(Vector2D pt);\n\tVector2D applyVector(Vector2D vec); // Apply this transform to the given vector, ignoring translations.\n\tstatic Rotation2D createVectorRotation(Vector2D u, Vector2D v); // Create a rotation instance that rotates the vector u to point in the direction of vector v.\n\tboolean equals(Object obj);\n\tdouble getAngle(); // Get the angle of rotation in radians.\n\tstatic Rotation2D identity(); // Return an instance representing the identity rotation, ie a rotation of zero radians.\n\tRotation2D inverse();\n\tstatic Rotation2D of(double angle); // Create a new instance with the given angle of rotation.\n\tboolean preservesOrientation();\n\tAffineTransformMatrix2D toMatrix(); // Return an AffineTransformMatrix2D representing the same rotation as this instance.\n}"}
{"index": 17442, "repo": "spring-security-config-6.1.2", "des": "SecurityBuilder used to create an AuthenticationManager.", "code": "public class AuthenticationManagerBuilder extends AbstractConfiguredSecurityBuilder<org.springframework.security.authentication.AuthenticationManager,AuthenticationManagerBuilder> implements ProviderManagerBuilder<AuthenticationManagerBuilder> {\n\tAuthenticationManagerBuilder authenticationEventPublisher(org.springframework.security.authentication.AuthenticationEventPublisher eventPublisher); // Sets the AuthenticationEventPublisher\n\tAuthenticationManagerBuilder authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider); // Add authentication based upon the custom AuthenticationProvider that is passed in.\n\tAuthenticationManagerBuilder eraseCredentials(boolean eraseCredentials);\n\torg.springframework.security.core.userdetails.UserDetailsService getDefaultUserDetailsService(); // Gets the default UserDetailsService for the AuthenticationManagerBuilder.\n\tInMemoryUserDetailsManagerConfigurer<AuthenticationManagerBuilder> inMemoryAuthentication(); // Add in memory authentication to the AuthenticationManagerBuilder and return a InMemoryUserDetailsManagerConfigurer to allow customization of the in memory authentication.\n\tboolean isConfigured(); // Determines if the AuthenticationManagerBuilder is configured to build a non null AuthenticationManager.\n\tJdbcUserDetailsManagerConfigurer<AuthenticationManagerBuilder> jdbcAuthentication(); // Add JDBC authentication to the AuthenticationManagerBuilder and return a JdbcUserDetailsManagerConfigurer to allow customization of the JDBC authentication.\n\tLdapAuthenticationProviderConfigurer<AuthenticationManagerBuilder> ldapAuthentication(); // Add LDAP authentication to the AuthenticationManagerBuilder and return a LdapAuthenticationProviderConfigurer to allow customization of the LDAP authentication.\n\tAuthenticationManagerBuilder parentAuthenticationManager(org.springframework.security.authentication.AuthenticationManager authenticationManager); // Allows providing a parent AuthenticationManager that will be tried if this AuthenticationManager was unable to attempt to authenticate the provided Authentication.\n\tprotected org.springframework.security.authentication.ProviderManager performBuild(); // Subclasses must implement this method to build the object that is being returned.\n\t<T extends org.springframework.security.core.userdetails.UserDetailsService>DaoAuthenticationConfigurer<AuthenticationManagerBuilder,T> userDetailsService(T userDetailsService); // Add authentication based upon the custom UserDetailsService that is passed in.\n}"}
{"index": 14035, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "Task for generating a build-info.properties file from a Project.", "code": "@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BuildInfo extends DefaultTask {\n\tvoid generateBuildProperties(); // Generates the build-info.properties file in the configured destination.\n\tabstract DirectoryProperty getDestinationDir(); // Returns the directory to which the build-info.properties file will be written.\n\tabstract SetProperty<String> getExcludes(); // Returns the names of the properties to exclude from the output.\n\tBuildInfoProperties getProperties(); // Returns the properties that will be included in the build-info.properties file.\n\tvoid properties(Action<BuildInfoProperties> action); // Executes the given action on the getProperties() properties.\n}"}
{"index": 6267, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "A MessageHandlerSpec for a JmsSendingMessageHandler.", "code": "Class JmsOutboundChannelAdapterSpec<S extends JmsOutboundChannelAdapterSpec<S>> {\n\tS destination(javax.jms.Destination destination); // Configure the destination to which this adapter will send messages.\n\t<P> S destination(Function<org.springframework.messaging.Message<P>,?> destinationFunction); // Configure a Function that will be invoked at run time to determine the destination to which a message will be sent.\n\tS destination(java.lang.String destination); // Configure the name of the destination to which this adapter will send messages.\n\tS destinationExpression(java.lang.String destination); // Configure a SpEL expression that will evaluate, at run time, the destination to which a message will be sent.\n\tS extractPayload(boolean extractPayload);\n\tS headerMapper(org.springframework.integration.jms.JmsHeaderMapper headerMapper);\n}"}
{"index": 5048, "repo": "commons-collections-3.2.2", "des": "Defines an iterator that operates over an ordered Map.", "code": "Interface OrderedMapIterator {\n\tboolean hasPrevious(); // Checks to see if there is a previous entry that can be iterated to.\n\tObject previous(); // Gets the previous key from the Map.\n}"}
{"index": 14121, "repo": "wicket-core-10.0.0-M1", "des": "A Wicket panel component to draw and maintain a complete page navigator, meant to be easily added to any PageableListView.", "code": "public class AjaxPagingNavigator extends PagingNavigator {\n\tprotected PagingNavigation newNavigation(String id, IPageable pageable, IPagingLabelProvider labelProvider); // Create a new PagingNavigation.\n\tprotected AbstractLink newPagingNavigationIncrementLink(String id, IPageable pageable, int increment); // Create a new increment link.\n\tprotected AbstractLink newPagingNavigationLink(String id, IPageable pageable, int pageNumber); // Create a new pagenumber link.\n\tprotected void onAjaxEvent(AjaxRequestTarget target); // Override this method to specify the markup container where your IPageable is part of.\n}"}
{"index": 16936, "repo": "spring-integration-ip-6.1.2", "des": "Implements a server connection factory that produces TcpNetConnections using a ServerSocket.", "code": "public class TcpNetServerConnectionFactory extends AbstractServerConnectionFactory {\n\tprotected ServerSocket createServerSocket(int port, int backlog, InetAddress whichNic); // Create a new ServerSocket.\n\tString getComponentType();\n\tint getPort(); // Return the port this server is listening on.\n\tprotected ServerSocket getServerSocket();\n\tSocketAddress getServerSocketAddress(); // Return the SocketAddress that the underlying ServerSocket is bound to.\n\tprotected TcpSocketFactorySupport getTcpSocketFactorySupport();\n\tvoid run(); // If no listener registers, exits.\n\tvoid setTcpNetConnectionSupport(TcpNetConnectionSupport connectionSupport); // Set the TcpNetConnectionSupport to use to create connection objects.\n\tvoid setTcpSocketFactorySupport(TcpSocketFactorySupport tcpSocketFactorySupport); // Set the TcpSocketFactorySupport used to create server sockets.\n\tvoid stop(); // Stops the server.\n}"}
{"index": 11469, "repo": "spring-restdocs-core-3.0.0", "des": "An OperationPreprocessor that applies a ContentModifier to the content of the request or response.", "code": "public class ContentModifyingOperationPreprocessor extends Object implements OperationPreprocessor {\n\tOperationRequest preprocess(OperationRequest request); // Processes the given request.\n\tOperationResponse preprocess(OperationResponse response); // Processes the given response.\n}"}
{"index": 18495, "repo": "poi-scratchpad-5.2.3", "des": "A container record that specifies information about an ActiveX control.", "code": "Class ExControl {\n\tExControlAtom getExControlAtom(); // Gets the ExControlAtom.\n\tlong getRecordType(); // Returns the type (held as a little endian in bytes 3 and 4) that this class handles.\n}"}
{"index": 10911, "repo": "spring-data-redis-3.1.2", "des": "Value object representing a binary Redis Hash/Object identifier composed from keyspace and object id in the form of keyspace:id.", "code": "public static class MappingRedisConverter.BinaryKeyspaceIdentifier extends Object {\n\tbyte[] getId();\n\tbyte[] getKeyspace();\n\tboolean isPhantomKey();\n\tstatic boolean isValid(byte[] key); // Check whether the key is valid, in particular whether the key contains a keyspace and an id part in the form of keyspace:id.\n\tstatic MappingRedisConverter.BinaryKeyspaceIdentifier of(byte[] key); // Parse a binary key into MappingRedisConverter.BinaryKeyspaceIdentifier.\n}"}
{"index": 16365, "repo": "spring-data-jpa-3.1.2", "des": "SPI interface to be implemented by JpaRepository implementations.", "code": "@NoRepositoryBean public interface JpaRepositoryImplementation<T,ID> extends JpaRepository<T,ID>, JpaSpecificationExecutor<T> {\n\tdefault void setEscapeCharacter(EscapeCharacter escapeCharacter); // Configures the EscapeCharacter to be used with the repository.\n\tvoid setRepositoryMethodMetadata(CrudMethodMetadata crudMethodMetadata); // Configures the CrudMethodMetadata to be used with the repository.\n}"}
{"index": 11843, "repo": "spring-kafka-3.0.9", "des": "Exception returned in the consumer record value or key when a deserialization failure occurs.", "code": "public class DeserializationException extends KafkaException {\n\tbyte[] getData(); // Get the data that failed deserialization (value or key).\n\torg.apache.kafka.common.header.Headers getHeaders(); // Get the headers.\n\tboolean isKey(); // True if deserialization of the key failed, otherwise deserialization of the value failed.\n\tvoid setHeaders(org.apache.kafka.common.header.Headers headers); // Set the headers.\n}"}
{"index": 3251, "repo": "hbase-common-3.0.0-alpha-4", "des": "Provide access to all index block encoding algorithms.", "code": "Enum IndexBlockEncoding {\n\tstatic IndexBlockEncoding getEncodingById(short indexBlockEncodingId);\n\tshort getId(); // Returns The id of a data block encoder.\n\tstatic String getNameFromId(short encoderId); // Find and return the name of data block encoder for the given id.\n\tbyte[] getNameInBytes(); // Returns name converted to bytes.\n\tstatic IndexBlockEncoding valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic IndexBlockEncoding[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n\tvoid writeIdInBytes(byte[] dest, int offset); // Writes id bytes to the given array starting from offset.\n\tvoid writeIdInBytes(OutputStream stream); // Writes id in bytes.\n}"}
{"index": 13946, "repo": "spring-webflux-6.0.11", "des": "Stores registrations of resource handlers for serving static resources such as images, css files and others through Spring WebFlux including setting cache headers optimized for efficient loading in a web browser.", "code": "public class ResourceHandlerRegistry extends Object {\n\tResourceHandlerRegistration addResourceHandler(String... patterns); // Add a resource handler for serving static resources based on the specified URL path patterns.\n\tprotected AbstractUrlHandlerMapping getHandlerMapping(); // Return a handler mapping with the mapped resource handlers; or null in case of no registrations.\n\tboolean hasMappingForPattern(String pathPattern); // Whether a resource handler has already been registered for the given path pattern.\n\tResourceHandlerRegistry setOrder(int order); // Specify the order to use for resource handling relative to other HandlerMappings configured in the Spring configuration.\n\tvoid setResourceUrlProvider(ResourceUrlProvider resourceUrlProvider); // Configure the ResourceUrlProvider that can be used by ResourceTransformer instances.\n}"}
{"index": 8116, "repo": "commons-compress-1.23.0", "des": "Utility class that represents an eight byte integer with conversion rules for the little endian byte order of ZIP files.", "code": "Class ZipEightByteInteger {\n\tboolean equals(Object o); // Override to make two instances with same value equal.\n\tbyte[] getBytes(); // Get value as eight bytes in big endian byte order.\n\tstatic byte[] getBytes(BigInteger value); // Get value as eight bytes in big endian byte order.\n\tstatic byte[] getBytes(long value); // Get value as eight bytes in big endian byte order.\n\tlong getLongValue(); // Get value as Java long.\n\tstatic long getLongValue(byte[] bytes); // Helper method to get the value as a Java long from an eight-byte array\n\tstatic long getLongValue(byte[] bytes, int offset); // Helper method to get the value as a Java long from eight bytes starting at given array offset\n\tBigInteger getValue(); // Get value as Java BigInteger.\n\tstatic BigInteger getValue(byte[] bytes); // Helper method to get the value as a Java long from an eight-byte array\n\tstatic BigInteger getValue(byte[] bytes, int offset); // Helper method to get the value as a Java BigInteger from eight bytes starting at given array offset\n}"}
{"index": 17290, "repo": "groovy-4.0.13", "des": "A ClassNode kind representing the classes coming from *.class files decompiled using ASM.", "code": "public class DecompiledClassNode extends ClassNode {\n\tList<AnnotationNode> getAnnotations();\n\tList<AnnotationNode> getAnnotations(ClassNode type);\n\tlong getCompilationTimeStamp();\n\tList<ConstructorNode> getDeclaredConstructors();\n\tFieldNode getDeclaredField(String name); // Finds a field matching the given name in this class.\n\tList<MethodNode> getDeclaredMethods(String name); // This method returns a list of all methods of the given name defined in the current class\n\tList<FieldNode> getFields();\n\tGenericsType[] getGenericsTypes();\n\tClassNode[] getInterfaces();\n\tList<MethodNode> getMethods();\n\tList<RecordComponentNode> getRecordComponents(); // Gets the record components of record type.\n\tClass getTypeClass(); // Returns the concrete class this classnode relates to.\n\tClassNode[] getUnresolvedInterfaces(boolean useRedirect);\n\tClassNode getUnresolvedSuperClass(boolean useRedirect);\n\tboolean isParameterized();\n\tboolean isResolved();\n\tboolean isSealed();\n\tboolean isUsingGenerics();\n\tvoid setGenericsPlaceHolder(boolean b);\n\tString setName(String name);\n\tvoid setRedirect(ClassNode cn); // Sets this instance as proxy for the given ClassNode.\n\tvoid setUsingGenerics(boolean b);\n}"}
{"index": 17987, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.", "code": "public abstract class AbstractPayloadMethodProcessor extends org.springframework.xml.transform.TransformerObjectSupport implements MethodArgumentResolver, MethodReturnValueHandler {\n\tprotected ByteArrayInputStream convertToByteArrayInputStream(Source source); // Converts the given source to a byte array input stream.\n\tfinal boolean supportsParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter is supported by this resolver.\n\tprotected abstract boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected abstract boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n\tfinal boolean supportsReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type is supported by this handler.\n}"}
{"index": 508, "repo": "ignite-core-2.15.0", "des": "Interface that allows to implement custom serialization logic for binary objects.", "code": "Interface Binarylizable {\n\tvoid readBinary(BinaryReader reader); // Reads fields from provided reader.\n\tvoid writeBinary(BinaryWriter writer); // Writes fields to provided writer.\n}"}
{"index": 11602, "repo": "spring-security-oauth2-client-6.1.2", "des": "Implementations of this interface are capable of resolving an OAuth2AuthorizationRequest from the provided ServerWebExchange.", "code": "public interface ServerOAuth2AuthorizationRequestResolver {\n\treactor.core.publisher.Mono<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> resolve(org.springframework.web.server.ServerWebExchange exchange); // Returns the OAuth2AuthorizationRequest resolved from the provided HttpServletRequest or null if not available.\n\treactor.core.publisher.Mono<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> resolve(org.springframework.web.server.ServerWebExchange exchange, String clientRegistrationId); // Returns the OAuth2AuthorizationRequest resolved from the provided HttpServletRequest or null if not available.\n}"}
{"index": 3814, "repo": "hbase-client-3.0.0-alpha-4", "des": "This filter is used for selecting only those keys with columns that matches a particular prefix.", "code": "Class ColumnPrefixFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tFilter.ReturnCode filterCell(Cell cell); // A way to filter based on the column family, column qualifier and/or the column value.\n\tFilter.ReturnCode filterColumn(Cell cell);\n\tboolean filterRowKey(Cell cell); // Filters a row based on the row key.\n\tCell getNextCellHint(Cell cell); // Filters that are not sure which key must be next seeked to, can inherit this implementation that, by default, returns a null Cell.\n\tbyte[] getPrefix();\n\tstatic ColumnPrefixFilter parseFrom(byte[] pbBytes); // Parses a serialized representation of the ColumnPrefixFilter\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 9728, "repo": "commons-math3-3.6.1", "des": "Base class for a multivariate scalar function optimizer.", "code": "Class MultivariateOptimizer {\n\tdouble computeObjectiveValue(double[] params); // Computes the objective function value.\n\tGoalType getGoalType();\n\tPointValuePair optimize(OptimizationData... optData); // Stores data and performs the optimization.\n\tprotected void parseOptimizationData(OptimizationData... optData); // Scans the list of (required and optional) optimization data that characterize the problem.\n}"}
{"index": 17255, "repo": "groovy-4.0.13", "des": "Intended style to use for cloning when using the @AutoClone annotation.", "code": "public enum AutoCloneStyle extends Enum<AutoCloneStyle> {\n\tstatic AutoCloneStyle valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AutoCloneStyle[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4344, "repo": "beam-sdks-java-core-2.49.0", "des": "The argument to ParDo providing the code to use to process elements of the input PCollection.", "code": "Class DoFn<InputT,OutputT> {\n\tTypeDescriptor<InputT> getInputTypeDescriptor(); // Returns a TypeDescriptor capturing what is known statically about the input type of this DoFn instance's most-derived class.\n\tTypeDescriptor<OutputT> getOutputTypeDescriptor(); // Returns a TypeDescriptor capturing what is known statically about the output type of this DoFn instance's most-derived class.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n}"}
{"index": 2479, "repo": "exoplayer-r2.3.1", "des": "Wraps a MediaPeriod and clips its SampleStreams to provide a subsequence of their samples.", "code": "Class ClippingMediaPeriod {\n\tboolean continueLoading(long positionUs); // Attempts to continue loading.\n\tvoid discardBuffer(long positionUs); // Discards buffered media up to the specified position.\n\tlong getBufferedPositionUs(); // Returns an estimate of the position up to which data is buffered for the enabled tracks.\n\tlong getNextLoadPositionUs(); // Returns the next load time, or C.TIME_END_OF_SOURCE if loading has finished.\n\tTrackGroupArray getTrackGroups(); // Returns the TrackGroups exposed by the period.\n\tvoid maybeThrowPrepareError(); // Throws an error that's preventing the period from becoming prepared.\n\tvoid onContinueLoadingRequested(MediaPeriod source); // Called by the loader to indicate that it wishes for its SequenceableLoader.continueLoading(long) method to be called when it can continue to load data.\n\tvoid onPrepared(MediaPeriod mediaPeriod); // Called when preparation completes.\n\tvoid prepare(MediaPeriod.Callback callback); // Prepares this media period asynchronously.\n\tlong readDiscontinuity(); // Attempts to read a discontinuity.\n\tlong seekToUs(long positionUs); // Attempts to seek to the specified position in microseconds.\n\tlong selectTracks(TrackSelection[] selections, boolean[] mayRetainStreamFlags, SampleStream[] streams, boolean[] streamResetFlags, long positionUs); // Performs a track selection.\n\tvoid setClipping(long startUs, long endUs); // Sets the clipping start/end times for this period, in microseconds.\n}"}
{"index": 16817, "repo": "spring-expression-6.0.11", "des": "Root exception for Spring EL related exceptions.", "code": "public class SpelParseException extends ParseException {\n\tObject[] getInserts(); // Return the message inserts.\n\tSpelMessage getMessageCode(); // Return the message code.\n}"}
{"index": 6428, "repo": "exoplayer-core-2.9.6", "des": "Represents the set of audio formats that a device is capable of playing.", "code": "Class AudioCapabilities {\n\tboolean equals(java.lang.Object other);\n\tstatic AudioCapabilities getCapabilities(android.content.Context context); // Returns the current audio capabilities for the device.\n\tint getMaxChannelCount(); // Returns the maximum number of channels the device can play at the same time.\n\tboolean supportsEncoding(int encoding); // Returns whether this device supports playback of the specified audio encoding.\n}"}
{"index": 2423, "repo": "spring-session-1.3.5.RELEASE", "des": "A Session implementation that is backed by a Map.", "code": "Class MapSession {\n\tboolean equals(java.lang.Object obj);\n\t<T> T getAttribute(java.lang.String attributeName); // Gets the Object associated with the specified name or null if no Object is associated to that name.\n\tjava.util.Set<java.lang.String> getAttributeNames(); // Gets the attribute names that have a value associated with it.\n\tlong getCreationTime(); // Gets the time when this session was created in milliseconds since midnight of 1/1/1970 GMT.\n\tjava.lang.String getId(); // Gets a unique string that identifies the Session.\n\tlong getLastAccessedTime(); // Gets the last time this Session was accessed expressed in milliseconds since midnight of 1/1/1970 GMT.\n\tint getMaxInactiveIntervalInSeconds(); // Gets the maximum inactive interval in seconds between requests before this session will be invalidated.\n\tboolean isExpired(); // Returns true if the session is expired.\n\tvoid removeAttribute(java.lang.String attributeName); // Removes the attribute with the provided attribute name.\n\tvoid setAttribute(java.lang.String attributeName, java.lang.Object attributeValue); // Sets the attribute value for the provided attribute name.\n\tvoid setCreationTime(long creationTime); // Sets the time that this Session was created in milliseconds since midnight of 1/1/1970 GMT.\n\tvoid setId(java.lang.String id); // Sets the identifier for this Session.\n\tvoid setLastAccessedTime(long lastAccessedTime); // Sets the last accessed time in milliseconds since midnight of 1/1/1970 GMT.\n\tvoid setMaxInactiveIntervalInSeconds(int interval); // Sets the maximum inactive interval in seconds between requests before this session will be invalidated.\n}"}
{"index": 1225, "repo": "ignite-core-2.15.0", "des": "Tcp Communication Connection Check Future.", "code": "Class TcpCommunicationConnectionCheckFuture {\n\tlong endTime();\n\tIgniteUuid id();\n\tvoid init(long timeout);\n\tboolean onDone(@Nullable BitSet res, @Nullable Throwable err); // Callback to notify that future is finished.\n\tvoid onEvent(Event evt); // Local event callback.\n\tvoid onTimeout(); // Timeout callback.\n}"}
{"index": 16422, "repo": "spring-batch-infrastructure-5.0.2", "des": "Encapsulation of a list of items to be processed and possibly a list of failed items to be skipped.", "code": "public class Chunk<W> extends Object implements Iterable<W>, Serializable {\n\tvoid add(W item); // Add the item to the chunk.\n\tvoid addAll(List<W> items); // Add all items to the chunk.\n\tvoid clear(); // Clear the items down to signal that we are done.\n\tvoid clearSkips(); // Clear only the skips list.\n\tboolean equals(Object obj);\n\tList<Exception> getErrors();\n\tList<W> getItems();\n\tList<SkipWrapper<W>> getSkips();\n\tObject getUserData();\n\tboolean isBusy(); // Query the chunk to see if anyone has registered an interest in keeping a reference to it.\n\tboolean isEmpty();\n\tboolean isEnd(); // Flag to indicate if the source data is exhausted.\n\tChunk<W>.ChunkIterator iterator(); // Get an unmodifiable iterator for the underlying items.\n\tstatic <W> Chunk<W> of(W... items);\n\tvoid setBusy(boolean busy); // Register an interest in the chunk to prevent it from being cleaned up before the flag is reset to false.\n\tvoid setEnd(); // Set the flag to say that this chunk represents an end of stream (there is no more data to process).\n\tvoid setUserData(Object userData);\n\tint size();\n\tvoid skip(Exception e); // Register an anonymous skip.\n}"}
{"index": 8350, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents an abstraction for XSD schemas.", "code": "Interface XsdSchema {\n\tXmlValidator createValidator(); // Creates a XmlValidator based on the schema.\n\tSource getSource(); // Returns the Source of the schema.\n\tString getTargetNamespace(); // Returns the target namespace of this schema.\n}"}
{"index": 13035, "repo": "spring-aop-6.0.11", "des": "Spring AOP advice that wraps an AspectJ before method.", "code": "public class AspectJMethodBeforeAdvice extends AbstractAspectJAdvice implements MethodBeforeAdvice, Serializable {\n\tvoid before(Method method, Object[] args, Object target); // Callback before a given method is invoked.\n\tboolean isAfterAdvice(); // Return whether this is an after advice.\n\tboolean isBeforeAdvice(); // Return whether this is a before advice.\n}"}
{"index": 16442, "repo": "spring-batch-infrastructure-5.0.2", "des": "This MailErrorHandler implementation simply rethrows the exception it receives.", "code": "public class DefaultMailErrorHandler extends Object implements MailErrorHandler {\n\tvoid handle(org.springframework.mail.MailMessage message, Exception exception); // Wraps the input exception with a runtime MailException.\n\tvoid setMaxMessageLength(int maxMessageLength); // The limit for the size of message that will be copied to the exception message.\n}"}
{"index": 2735, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "Extract grouping columns from input record.", "code": "Class GroupingTableMap {\n\tvoid configure(org.apache.hadoop.mapred.JobConf job);\n\tprotected ImmutableBytesWritable createGroupKey(byte[][] vals); // Create a key by concatenating multiple column values.\n\tprotected byte[][] extractKeyValues(Result r); // Extract columns values from the current record.\n\tstatic void initJob(String table, String columns, String groupColumns, Class<? extends TableMap> mapper, org.apache.hadoop.mapred.JobConf job); // Use this before submitting a TableMap job.\n\tvoid map(ImmutableBytesWritable key, Result value, org.apache.hadoop.mapred.OutputCollector<ImmutableBytesWritable,Result> output, org.apache.hadoop.mapred.Reporter reporter); // Extract the grouping columns from value to construct a new key.\n}"}
{"index": 2218, "repo": "hive-exec-4.0.0-alpha-2", "des": "A thread-not-safe version of Hadoop's DataOutputBuffer, which removes all synchronized modifiers.", "code": "Class NonSyncDataOutputBuffer {\n\tbyte[] getData(); // Returns the current contents of the buffer.\n\tint getLength(); // Returns the length of the valid data currently in the buffer.\n\tNonSyncDataOutputBuffer reset(); // Resets the buffer to empty.\n\tvoid write(byte[] b, int off, int len);\n\tvoid write(DataInput in, int length); // Writes bytes from a DataInput directly into the buffer.\n\tvoid write(int b);\n}"}
{"index": 13414, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Class for storing @EntityScan specified packages for reference later (e.g.", "code": "public class EntityScanPackages extends Object {\n\tstatic EntityScanPackages get(org.springframework.beans.factory.BeanFactory beanFactory); // Return the EntityScanPackages for the given bean factory.\n\tList<String> getPackageNames(); // Return the package names specified from all @EntityScan annotations.\n\tstatic void register(org.springframework.beans.factory.support.BeanDefinitionRegistry registry, String... packageNames); // Register the specified entity scan packages with the system.\n\tstatic void register(org.springframework.beans.factory.support.BeanDefinitionRegistry registry, Collection<String> packageNames); // Register the specified entity scan packages with the system.\n}"}
{"index": 9247, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Bridge DevicePlugin and the hooks related to lunch Docker container.", "code": "Class DeviceResourceDockerRuntimePluginImpl {\n\tDockerVolumeCommand getCleanupDockerVolumesCommand(Container container); // Cleanup volumes created for one docker container\n\tDockerVolumeCommand getCreateDockerVolumeCommand(Container container); // Create volume when needed.\n\tDeviceRuntimeSpec getRuntimeSpec(Container container);\n\tprotected boolean requestedDevice(String resName, Container container);\n\tvoid updateDockerRunCommand(DockerRunCommand dockerRunCommand, Container container); // Update docker run command\n}"}
{"index": 15642, "repo": "spring-security-core-6.1.2", "des": "A strategy for storing security context information against a thread.", "code": "public interface SecurityContextHolderStrategy {\n\tvoid clearContext(); // Clears the current context.\n\tSecurityContext createEmptyContext(); // Creates a new, empty context implementation, for use by SecurityContextRepository implementations, when creating a new context for the first time.\n\tSecurityContext getContext(); // Obtains the current context.\n\tdefault Supplier<SecurityContext> getDeferredContext(); // Obtains a Supplier that returns the current context.\n\tvoid setContext(SecurityContext context); // Sets the current context.\n\tdefault void setDeferredContext(Supplier<SecurityContext> deferredContext); // Sets a Supplier that will return the current context.\n}"}
{"index": 16014, "repo": "wicket-util-10.0.0-M1", "des": "Implementation of IVisit used by traversal algorithms", "code": "public class Visit<R> extends Object implements IVisit<R> {\n\tvoid dontGoDeeper(); // Prevents the visitor from visiting any children of the object currently visited\n\tR getResult(); // Gets the result of the visit/traversal.\n\tboolean isContinue(); // Checks if the visit/traversal should continue\n\tboolean isDontGoDeeper(); // Checks if the visit/traversal has been stopped from visiting children of the currently visited object\n\tboolean isStopped(); // Checks if the visit/traversal has been stopped\n\tvoid stop(); // Stops the visit/traversal\n\tvoid stop(R result); // Stops the visit/traversal and returns result\n}"}
{"index": 4405, "repo": "beam-sdks-java-core-2.49.0", "des": "An IterableCoder encodes any Iterable in the format of IterableLikeCoder.", "code": "Class IterableCoder<T> {\n\tprotected java.lang.Iterable<T> decodeToIterable(java.util.List<T> decodedElements); // Builds an instance of IterableT, this coder's associated Iterable-like subtype, from a list of decoded elements.\n\tTypeDescriptor<java.lang.Iterable<T>> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tstatic <T> IterableCoder<T> of(Coder<T> elemCoder);\n\tjava.lang.Object structuralValue(java.lang.Iterable<T> value); // Returns an object with an Object.equals() method that represents structural equality on the argument.\n}"}
{"index": 17259, "repo": "groovy-4.0.13", "des": "Handles generation of code for the @Bindable annotation when @Vetoable is not present.", "code": "public class BindableASTTransformation extends Object implements ASTTransformation, org.objectweb.asm.Opcodes {\n\tprotected void addPropertyChangeSupport(ClassNode declaringClass); // Adds the necessary field and methods to support property change support.\n\tprotected Statement createBindableStatement(PropertyNode propertyNode, Expression fieldExpression); // Creates a statement body similar to: this.firePropertyChange(\"field\", field, field = value)\n\tprotected void createSetterMethod(ClassNode declaringClass, PropertyNode propertyNode, String setterName, Statement setterBlock); // Creates a setter method with the given body.\n\tstatic boolean hasBindableAnnotation(AnnotatedNode node); // Convenience method to see if an annotated node is @Bindable.\n\tprotected boolean needsPropertyChangeSupport(ClassNode declaringClass, SourceUnit sourceUnit); // Snoops through the declaring class and all parents looking for methods void addPropertyChangeListener(PropertyChangeListener), void removePropertyChangeListener(PropertyChangeListener), and void firePropertyChange(String, Object, Object).\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // Handles the bulk of the processing, mostly delegating to other methods.\n}"}
{"index": 14555, "repo": "spring-security-web-6.1.2", "des": "Writes the Permissions-Policy response header with configured policy directives.", "code": "public final class PermissionsPolicyServerHttpHeadersWriter extends Object implements ServerHttpHeadersWriter {\n\tvoid setPolicy(String policy); // Set the policy to be used in the response header.\n\treactor.core.publisher.Mono<Void> writeHttpHeaders(org.springframework.web.server.ServerWebExchange exchange); // Write the headers to the response.\n}"}
{"index": 10682, "repo": "groovy-all-4.0.13", "des": "Template engine for use in templating scenarios where both the template source and the expected output are intended to be XML.", "code": "public class XmlTemplateEngine extends TemplateEngine {\n\tTemplate createTemplate(Reader reader); // Creates a template by reading content from the Reader.\n\tString getIndentation();\n\tvoid setConfigurePrinter(Closure configurePrinter); // Closure that can be used to configure the printer.\n\tvoid setIndentation(String indentation);\n}"}
{"index": 10602, "repo": "groovy-all-4.0.13", "des": "Helper class for processing Groovy numeric literals.", "code": "public class Numbers extends Object {\n\tstatic boolean isDigit(char c); // Returns true if the specified character is a base-10 digit.\n\tstatic boolean isHexDigit(char c); // Returns true if the specified character is a base-16 digit.\n\tstatic boolean isNumericTypeSpecifier(char c, boolean isDecimal); // Returns true if the specified character is a valid type specifier for a numeric value.\n\tstatic boolean isOctalDigit(char c); // Returns true if the specific character is a base-8 digit.\n\tstatic Number parseDecimal(String text); // Builds a Number from the given decimal descriptor.\n\tstatic Number parseInteger(String text); // Builds a Number from the given integer descriptor.\n}"}
{"index": 3976, "repo": "zookeeper-3.8.2", "des": "Class containing static methods for registering and running Commands, as well as default Command definitions.", "code": "Class Commands {\n\tstatic Command getCommand(String cmdName); // Returns the commands registered under cmdName with registerCommand, or null if no command is registered with that name.\n\tstatic Set<String> getPrimaryNames(); // Returns the primary names of all registered commands.\n\tstatic void registerCommand(Command command); // Registers the given command.\n\tstatic CommandResponse runCommand(String cmdName, ZooKeeperServer zkServer, Map<String,String> kwargs); // Run the registered command with name cmdName.\n}"}
{"index": 13710, "repo": "spring-webmvc-6.0.11", "des": "An extension of Groovy's TemplateConfiguration and an implementation of Spring MVC's GroovyMarkupConfig for creating a MarkupTemplateEngine for use in a web application.", "code": "public class GroovyMarkupConfigurer extends groovy.text.markup.TemplateConfiguration implements GroovyMarkupConfig, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected ClassLoader createTemplateClassLoader(); // Create a parent ClassLoader for Groovy to use as parent ClassLoader when loading and compiling templates.\n\tprotected groovy.text.markup.MarkupTemplateEngine createTemplateEngine();\n\tprotected org.springframework.context.ApplicationContext getApplicationContext();\n\tString getResourceLoaderPath();\n\tgroovy.text.markup.MarkupTemplateEngine getTemplateEngine(); // Return the Groovy MarkupTemplateEngine for the current web application context.\n\tprotected URL resolveTemplate(ClassLoader classLoader, String templatePath); // Resolve a template from the given template path.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setLocale(Locale locale); // This method should not be used, since the considered Locale for resolving templates is the Locale for the current HTTP request.\n\tvoid setResourceLoaderPath(String resourceLoaderPath); // Set the Groovy Markup Template resource loader path(s) via a Spring resource location.\n\tvoid setTemplateEngine(groovy.text.markup.MarkupTemplateEngine templateEngine); // Set a pre-configured MarkupTemplateEngine to use for the Groovy Markup Template web configuration.\n}"}
{"index": 3149, "repo": "solr-dataimporthandler-8.11.2", "des": "An EntityProcessor instance which provides support for reading from databases.", "code": "Class SqlEntityProcessor {\n\tString getDeltaImportQuery(String queryString);\n\tString getQuery();\n\tvoid init(Context context); // This method is called when it starts processing an entity.\n\tprotected void initQuery(String q);\n\tMap<String,Object> nextDeletedRowKey(); // This is used during delta-import.\n\tMap<String,Object> nextModifiedParentRowKey(); // This is used during delta-import.\n\tMap<String,Object> nextModifiedRowKey(); // This is used for delta-import.\n\tMap<String,Object> nextRow(); // For a simple implementation, this is the only method that the sub-class should implement.\n}"}
{"index": 3160, "repo": "commons-jexl3-3.3", "des": "Wraps any error that might occur during interpretation of a script or expression.", "code": "Class JexlException {\n\tstatic String annotationError(org.apache.commons.jexl3.parser.JexlNode node, String annotation); // Generates a message for an annotation error.\n\tJexlException clean(); // Cleans a JexlException from any org.apache.commons.jexl3.internal stack trace element.\n\tprotected String detailedMessage(); // Accesses detailed message.\n\tString getDetail();\n\tJexlInfo getInfo(); // Gets the specific information for this exception.\n\tString getMessage(); // Detailed info message about this error.\n\tprotected JexlInfo info(); // Pleasing checkstyle.\n\tstatic String methodError(org.apache.commons.jexl3.parser.JexlNode node, String method, Object[] args); // Generates a message for a unsolvable method error.\n\tstatic String operatorError(org.apache.commons.jexl3.parser.JexlNode node, String symbol); // Generates a message for an operator error.\n\tprotected String parserError(String prefix, String expr); // Formats an error message from the parser.\n\tstatic String propertyError(org.apache.commons.jexl3.parser.JexlNode node, String pty, boolean undef); // Generates a message for an unsolvable property error.\n\tstatic String sliceSource(String src, int froml, int fromc, int tol, int toc); // Removes a slice from a source.\n\tstatic JexlException tryFailed(InvocationTargetException xinvoke); // Wrap an invocation exception.\n\tstatic String variableError(org.apache.commons.jexl3.parser.JexlNode node, String variable, JexlException.VariableIssue issue); // Generates a message for a variable error.\n}"}
{"index": 2232, "repo": "hive-exec-4.0.0-alpha-2", "des": "Enables to connect related objects to eachother.", "code": "Class PlanMapper {\n\tvoid clearSignatureCache();\n\t<T> List<T> getAll(Class<T> clazz);\n\tAuxOpTreeSignature getAuxSignatureOf(Operator<?> op);\n\tOpTreeSignature getSignatureOf(Operator<?> op);\n\tIterator<PlanMapper.EquivGroup> iterateGroups();\n\tvoid link(Object o1, Object o2); // States that the two objects are representing the same.\n\t<T> T lookup(Class<T> clazz, Object key);\n\t<T> List<T> lookupAll(Class<T> clazz, Object key);\n\tvoid merge(Object o1, Object o2); // Links and optionally merges the groups identified by the two objects.\n\tvoid runMapper(GroupTransformer mapper);\n}"}
{"index": 2035, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticColumn.", "code": "Class DoubleColMultiplyDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 12352, "repo": "jena-core-4.9.0", "des": "This interface represents the Wildcard schema component.", "code": "public interface XSWildcard extends XSTerm {\n\tXSAnnotation getAnnotation(); // An annotation if it exists, otherwise null.\n\tXSObjectList getAnnotations(); // A sequence of [annotations] or an empty XSObjectList.\n\tshort getConstraintType(); // Namespace constraint: A constraint type: any, not, list.\n\tStringList getNsConstraintList(); // Namespace constraint: For constraintType NSCONSTRAINT_LIST, the list contains allowed namespaces.\n\tshort getProcessContents(); // [process contents]: one of skip, lax or strict.\n}"}
{"index": 14227, "repo": "wicket-core-10.0.0-M1", "des": "Gets the actual path for a jar file system", "code": "public class FileSystemJarPathService extends Object implements FileSystemPathService {\n\tPath getPath(URI uri, Map<String,String> env); // Gets the actual path for a specific file system to work on\n\tboolean isResponsible(URI uri); // Checks if the file system path service is responsible to handle the given URI\n}"}
{"index": 8712, "repo": "accumulo-client-mapreduce-2.0.0-alpha-1", "des": "Configuration keys for various features.", "code": "Enum InputConfigurator.Features {\n\tstatic InputConfigurator.Features valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic InputConfigurator.Features[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17747, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read and write JSON using the Google Gson library.", "code": "public class GsonHttpMessageConverter extends AbstractJsonHttpMessageConverter {\n\tcom.google.gson.Gson getGson(); // Return the configured Gson instance for this converter.\n\tprotected Object readInternal(Type resolvedType, Reader reader); // Template method that reads the JSON-bound object from the given Reader.\n\tvoid setGson(com.google.gson.Gson gson); // Set the Gson instance to use.\n\tprotected void writeInternal(Object object, Type type, Writer writer); // Template method that writes the JSON-bound object to the given Writer.\n}"}
{"index": 13954, "repo": "spring-webflux-6.0.11", "des": "Represents a function that routes to a handler function.", "code": "@FunctionalInterface public interface RouterFunction<T extends ServerResponse> {\n\tdefault void accept(RouterFunctions.Visitor visitor); // Accept the given visitor.\n\tdefault RouterFunction<T> and(RouterFunction<T> other); // Return a composed routing function that first invokes this function, and then invokes the other function (of the same response type T) if this route had no result.\n\tdefault RouterFunction<T> andNest(RequestPredicate predicate, RouterFunction<T> routerFunction); // Return a composed routing function that routes to the given router function if this route does not match and the given request predicate applies.\n\tdefault RouterFunction<?> andOther(RouterFunction<?> other); // Return a composed routing function that first invokes this function, and then invokes the other function (of a different response type) if this route had no result.\n\tdefault RouterFunction<T> andRoute(RequestPredicate predicate, HandlerFunction<T> handlerFunction); // Return a composed routing function that routes to the given handler function if this route does not match and the given request predicate applies.\n\tdefault <S extends ServerResponse>RouterFunction<S> filter(HandlerFilterFunction<T,S> filterFunction); // Filter all handler functions routed by this function with the given filter function.\n\treactor.core.publisher.Mono<HandlerFunction<T>> route(ServerRequest request); // Return the handler function that matches the given request.\n\tdefault RouterFunction<T> withAttribute(String name, Object value); // Return a new routing function with the given attribute.\n\tdefault RouterFunction<T> withAttributes(Consumer<Map<String,Object>> attributesConsumer); // Return a new routing function with attributes manipulated with the given consumer.\n}"}
{"index": 249, "repo": "commons-collections4-4.4", "des": "Decorates another NavigableSet to transform objects that are added.", "code": "Class TransformedNavigableSet<E> {\n\tE ceiling(E e);\n\tprotected NavigableSet<E> decorated(); // Gets the decorated navigable set.\n\tIterator<E> descendingIterator();\n\tNavigableSet<E> descendingSet();\n\tE floor(E e);\n\tNavigableSet<E> headSet(E toElement, boolean inclusive);\n\tE higher(E e);\n\tE lower(E e);\n\tE pollFirst();\n\tE pollLast();\n\tNavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive);\n\tNavigableSet<E> tailSet(E fromElement, boolean inclusive);\n\tstatic <E> TransformedNavigableSet<E> transformedNavigableSet(NavigableSet<E> set, Transformer<? super E,? extends E> transformer); // Factory method to create a transforming navigable set that will transform existing contents of the specified navigable set.\n\tstatic <E> TransformedNavigableSet<E> transformingNavigableSet(NavigableSet<E> set, Transformer<? super E,? extends E> transformer); // Factory method to create a transforming navigable set.\n}"}
{"index": 14764, "repo": "spring-data-commons-3.1.2", "des": "Base class providing methods for handler method argument resolvers to create paging information from web requests and thus allows injecting Pageable instances into controller methods.", "code": "public abstract class PageableHandlerMethodArgumentResolverSupport extends Object {\n\tprotected int getMaxPageSize(); // Retrieves the maximum page size to be accepted.\n\tprotected Pageable getPageable(MethodParameter methodParameter, String pageString, String pageSizeString);\n\tprotected String getPageParameterName(); // Retrieves the parameter name to be used to find the page number in the request.\n\tprotected String getParameterNameToUse(String source, MethodParameter parameter); // Returns the name of the request parameter to find the Pageable information in.\n\tprotected String getSizeParameterName(); // Retrieves the parameter name to be used to find the page size in the request.\n\tboolean isFallbackPageable(Pageable pageable); // Returns whether the given Pageable is the fallback one.\n\tprotected boolean isOneIndexedParameters(); // Indicates whether to expose and assume 1-based page number indexes in the request parameters.\n\tvoid setFallbackPageable(Pageable fallbackPageable); // Configures the Pageable to be used as fallback in case no PageableDefault can be found at the method parameter to be resolved.\n\tvoid setMaxPageSize(int maxPageSize); // Configures the maximum page size to be accepted.\n\tvoid setOneIndexedParameters(boolean oneIndexedParameters); // Configures whether to expose and assume 1-based page number indexes in the request parameters.\n\tvoid setPageParameterName(String pageParameterName); // Configures the parameter name to be used to find the page number in the request.\n\tvoid setPrefix(String prefix); // Configures a general prefix to be prepended to the page number and page size parameters.\n\tvoid setQualifierDelimiter(String qualifierDelimiter); // The delimiter to be used between the qualifier and the actual page number and size properties.\n\tvoid setSizeParameterName(String sizeParameterName); // Configures the parameter name to be used to find the page size in the request.\n}"}
{"index": 6079, "repo": "jackson-databind-2.15.2", "des": "Type that represents Java Collection types (Lists, Sets).", "code": "Class CollectionType {\n\tstatic CollectionType construct(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType elemT);\n\tJavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces); // Mutant factory method that will try to create and return a sub-type instance for known parameterized types; for other types will return `null` to indicate that no just refinement makes necessary sense, without trying to detect special status through implemented interfaces.\n\tJavaType withContentType(JavaType contentType); // Mutant factory method that may be called on structured types that have a so-called content type (element of arrays, value type of Maps, referenced type of referential types), and will construct a new instance that is identical to this instance, except that it has specified content type, instead of current one.\n\tCollectionType withContentTypeHandler(Object h); // Internal method that should not be used by any code outside of jackson-databind: only used internally by databind.\n\tCollectionType withContentValueHandler(Object h); // Internal method that should not be used by any code outside of jackson-databind: only used internally by databind.\n\tCollectionType withStaticTyping(); // Method that can be called to get a type instance that indicates that values of the type should be handled using \"static typing\" for purposes of serialization (as opposed to \"dynamic\" aka runtime typing): meaning that no runtime information is needed for determining serializers to use.\n\tCollectionType withTypeHandler(Object h); // Internal method that should not be used by any code outside of jackson-databind: only used internally by databind.\n\tCollectionType withValueHandler(Object h); // Internal method that should not be used by any code outside of jackson-databind: only used internally by databind.\n}"}
{"index": 6913, "repo": "calcite-core-1.34.0", "des": "Schema based upon a JDBC catalog (database).", "code": "Class JdbcCatalogSchema {\n\tstatic JdbcCatalogSchema create(@Nullable SchemaPlus parentSchema, String name, DataSource dataSource, SqlDialectFactory dialectFactory, String catalog);\n\tstatic JdbcCatalogSchema create(@Nullable SchemaPlus parentSchema, String name, DataSource dataSource, String catalog);\n\tDataSource getDataSource(); // Returns the data source.\n\tString getDefaultSubSchemaName(); // Returns the name of the default sub-schema.\n\tprotected Map<String,Schema> getSubSchemaMap(); // Returns a map of sub-schemas in this schema by name.\n}"}
{"index": 2085, "repo": "hive-exec-4.0.0-alpha-2", "des": "Base class for comparison UDF's (Greatest and Least).", "code": "Class GenericUDFBaseNwayCompare {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 16041, "repo": "wicket-request-10.0.0-M1", "des": "Container for parameters that are identified by their index", "code": "public interface IIndexedParameters {\n\tIIndexedParameters clearIndexed(); // Removes all indexed parameters.\n\torg.apache.wicket.util.string.StringValue get(int index);\n\tIIndexedParameters remove(int index); // Removes indexed parameter on given index\n\tIIndexedParameters set(int index, Object object); // Sets the indexed parameter on given index\n}"}
{"index": 1495, "repo": "pdfbox-3.0.0-beta1", "des": "A button field represents an interactive control on the screen that the user can manipulate with the mouse.", "code": "Class PDButton {\n\tString getDefaultValue(); // Returns the default value, if any.\n\tList<String> getExportValues(); // This will get the (optional) export values.\n\tSet<String> getOnValues(); // Get the values to set individual buttons within a group to the on state.\n\tString getValue(); // Returns the selected value.\n\tString getValueAsString(); // Returns a string representation of the \"V\" entry, or an empty string.\n\tboolean isPushButton(); // Determines if push button bit is set.\n\tboolean isRadioButton(); // Determines if radio button bit is set.\n\tvoid setDefaultValue(String value); // Sets the default value.\n\tvoid setExportValues(List<String> values); // This will set the export values.\n\tvoid setValue(int index); // Set the selected option given its index, and try to update the visual appearance.\n\tvoid setValue(String value); // Set the selected option given its name, and try to update the visual appearance.\n}"}
{"index": 15379, "repo": "spring-boot-3.1.1", "des": "ReactiveWebServerFactory that can be used to create UndertowWebServers.", "code": "public class UndertowReactiveWebServerFactory extends AbstractReactiveWebServerFactory implements ConfigurableUndertowWebServerFactory {\n\tvoid addBuilderCustomizers(UndertowBuilderCustomizer... customizers); // Add UndertowBuilderCustomizers that should be used to customize the Undertow Undertow.Builder.\n\tCollection<UndertowBuilderCustomizer> getBuilderCustomizers(); // Returns a mutable collection of the UndertowBuilderCustomizers that will be applied to the Undertow Builder.\n\tWebServer getWebServer(org.springframework.http.server.reactive.HttpHandler httpHandler); // Gets a new fully configured but paused WebServer instance.\n\tboolean isAccessLogEnabled();\n\tprotected final boolean isUseForwardHeaders();\n\tvoid setAccessLogDirectory(File accessLogDirectory); // Set the access log directory.\n\tvoid setAccessLogEnabled(boolean accessLogEnabled); // Set whether access logs are enabled.\n\tvoid setAccessLogPattern(String accessLogPattern); // Set the access log pattern.\n\tvoid setAccessLogPrefix(String accessLogPrefix); // Set the access log prefix.\n\tvoid setAccessLogRotate(boolean accessLogRotate); // Set whether access logs rotation is enabled.\n\tvoid setAccessLogSuffix(String accessLogSuffix); // Set the access log suffix.\n\tvoid setBufferSize(Integer bufferSize); // Set the buffer size.\n\tvoid setBuilderCustomizers(Collection<? extends UndertowBuilderCustomizer> customizers); // Set UndertowBuilderCustomizers that should be applied to the Undertow Undertow.Builder.\n\tvoid setIoThreads(Integer ioThreads); // Set the number of IO Threads.\n\tvoid setUseDirectBuffers(Boolean directBuffers); // Set whether direct buffers should be used.\n\tvoid setUseForwardHeaders(boolean useForwardHeaders); // Set if x-forward-* headers should be processed.\n\tvoid setWorkerThreads(Integer workerThreads); // Set the number of Worker Threads.\n}"}
{"index": 755, "repo": "ignite-core-2.15.0", "des": "This class implements stream parser based on GridNioDelimitedBuffer.", "code": "Class GridDelimitedParser {\n\tbyte[] decode(GridNioSession ses, ByteBuffer buf); // This method is called when input bytes are available on the underlying network connection.\n\tByteBuffer encode(GridNioSession ses, Object msg); // This method is called whenever a message should be sent to the network connection and network buffer is ready to be filled with bytes.\n}"}
{"index": 3935, "repo": "hudi-client-0.6.0", "des": "Base class for all write operations logically performed at the file group level.", "code": "Class HoodieWriteHandle<T extends HoodieRecordPayload> {\n\tboolean canWrite(HoodieRecord record); // Determines whether we can accept the incoming records, into the current file.\n\tabstract WriteStatus close();\n\tprotected void createMarkerFile(String partitionPath, String dataFileName); // Creates an empty marker file corresponding to storage writer path.\n\tprotected HoodieFileWriter createNewFileWriter(String instantTime, org.apache.hadoop.fs.Path path, HoodieTable<T> hoodieTable, HoodieWriteConfig config, org.apache.avro.Schema schema, SparkTaskContextSupplier sparkTaskContextSupplier);\n\tprotected long getAttemptId();\n\tprotected org.apache.hadoop.fs.FileSystem getFileSystem();\n\tabstract IOType getIOType();\n\tprotected int getPartitionId();\n\tprotected int getStageId();\n\tprotected static Pair<org.apache.avro.Schema,org.apache.avro.Schema> getWriterSchemaIncludingAndExcludingMetadataPair(HoodieWriteConfig config); // Returns writer schema pairs containing (a) Writer Schema from client (b) (a) with hoodie metadata fields.\n\torg.apache.avro.Schema getWriterSchemaWithMetafields();\n\tabstract WriteStatus getWriteStatus();\n\torg.apache.hadoop.fs.Path makeNewPath(String partitionPath);\n\tprotected org.apache.avro.generic.GenericRecord rewriteRecord(org.apache.avro.generic.GenericRecord record); // Rewrite the GenericRecord with the Schema containing the Hoodie Metadata fields.\n\tvoid write(HoodieRecord record, Option<org.apache.avro.generic.IndexedRecord> insertValue); // Perform the actual writing of the given record into the backing file.\n\tvoid write(HoodieRecord record, Option<org.apache.avro.generic.IndexedRecord> avroRecord, Option<Exception> exception); // Perform the actual writing of the given record into the backing file.\n}"}
{"index": 9544, "repo": "commons-math3-3.6.1", "des": "This interface is used to visit BSP tree nodes.", "code": "Interface BSPTreeVisitor<S extends Space> {\n\tvoid visitInternalNode(BSPTree<S> node); // Visit a BSP tree node node having a non-null sub-hyperplane.\n\tvoid visitLeafNode(BSPTree<S> node); // Visit a leaf BSP tree node node having a null sub-hyperplane.\n\tBSPTreeVisitor.Order visitOrder(BSPTree<S> node); // Determine the visit order for this node.\n}"}
{"index": 11594, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an OAuth2UserService that supports OpenID Connect 1.0 Provider's.", "code": "public class OidcUserService extends Object implements OAuth2UserService<OidcUserRequest,org.springframework.security.oauth2.core.oidc.user.OidcUser> {\n\tstatic Map<String,org.springframework.core.convert.converter.Converter<Object,?>> createDefaultClaimTypeConverters(); // Returns the default Converter's used for type conversion of claim values for an OidcUserInfo.\n\torg.springframework.security.oauth2.core.oidc.user.OidcUser loadUser(OidcUserRequest userRequest); // Returns an OAuth2User after obtaining the user attributes of the End-User from the UserInfo Endpoint.\n\tfinal void setAccessibleScopes(Set<String> accessibleScopes); // Sets the scope(s) that allow access to the user info resource.\n\tfinal void setClaimTypeConverterFactory(Function<ClientRegistration,org.springframework.core.convert.converter.Converter<Map<String,Object>,Map<String,Object>>> claimTypeConverterFactory); // Sets the factory that provides a Converter used for type conversion of claim values for an OidcUserInfo.\n\tfinal void setOauth2UserService(OAuth2UserService<OAuth2UserRequest,org.springframework.security.oauth2.core.user.OAuth2User> oauth2UserService); // Sets the OAuth2UserService used when requesting the user info resource.\n}"}
{"index": 8221, "repo": "spring-ws-3.0.10.RELEASE", "des": "Server-side component for receiving email messages using JavaMail.", "code": "Class MailMessageReceiver {\n\tvoid afterPropertiesSet(); // Calls AbstractStandaloneMessageReceiver.activate() when the BeanFactory initializes the receiver instance.\n\tprotected void onActivate(); // Template method invoked when AbstractStandaloneMessageReceiver.activate() is invoked.\n\tprotected void onShutdown(); // Template method invoked when AbstractStandaloneMessageReceiver.shutdown() is invoked.\n\tprotected void onStart(); // Template method invoked when AbstractStandaloneMessageReceiver.start() is invoked.\n\tprotected void onStop(); // Template method invoked when AbstractStandaloneMessageReceiver.stop() is invoked.\n\tvoid setFrom(String from); // Sets the from address to use when sending response messages.\n\tvoid setJavaMailProperties(Properties javaMailProperties); // Set JavaMail properties for the Session.\n\tvoid setMonitoringStrategy(MonitoringStrategy monitoringStrategy); // Sets the monitoring strategy to use for retrieving new requests.\n\tvoid setSession(javax.mail.Session session); // Set the JavaMail Session, possibly pulled from JNDI.\n\tvoid setStoreUri(String storeUri); // Sets the JavaMail Store URI to be used for retrieving request messages.\n\tvoid setTransportUri(String transportUri); // Sets the JavaMail Transport URI to be used for sending response messages.\n}"}
{"index": 367, "repo": "phoenix-core-5.1.3", "des": "Node representing the less than operator (<) in SQL.", "code": "Class LessThanParseNode {\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getFilterOp(); // Return the comparison operator associated with the given comparison expression node\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getInvertFilterOp(); // Return the inverted operator for the CompareOp\n}"}
{"index": 7984, "repo": "commons-jcs3-core-3.1", "des": "An event queue is used to propagate ordered cache events to one and only one target listener.", "code": "Class PooledCacheEventQueue<K,V> {\n\tprotected ExecutorService createPool(String threadPoolName); // Create the thread pool.\n\tvoid destroy(); // Destroy the queue.\n\tICacheEventQueue.QueueType getQueueType(); // Return the type of event queue we are using, either single or pooled.\n\tIStats getStatistics(); // Returns the historical and statistical data for an event queue cache.\n\tprotected void initialize(ICacheListener<K,V> listener, long listenerId, String cacheName, int maxFailure, int waitBeforeRetry, String threadPoolName); // Initializes the queue.\n\tboolean isEmpty(); // If the Queue is using a bounded channel we can determine the size.\n\tprotected void put(AbstractCacheEventQueue.AbstractCacheEvent event); // Adds an event to the queue.\n\tint size(); // Returns the number of elements in the queue.\n}"}
{"index": 1428, "repo": "pdfbox-3.0.0-beta1", "des": "This will perform the encoding from a dictionary.", "code": "Class DictionaryEncoding {\n\tEncoding getBaseEncoding(); // Returns the base encoding.\n\tCOSBase getCOSObject(); // Convert this standard java object to a COS object.\n\tMap<Integer,String> getDifferences(); // Returns the Differences array.\n\tString getEncodingName(); // Returns the name of this encoding.\n}"}
{"index": 17948, "repo": "spring-web-6.0.11", "des": "Factory to create UriBuilder instances with shared configuration such as a base URI, an encoding mode strategy, and others across all URI builder instances created through a factory.", "code": "public interface UriBuilderFactory extends UriTemplateHandler {\n\tUriBuilder builder(); // Create a URI builder with default settings.\n\tUriBuilder uriString(String uriTemplate); // Initialize a builder with the given URI template.\n}"}
{"index": 11518, "repo": "spring-restdocs-core-3.0.0", "des": "A TemplateFormat provides information about a particular template format, such as Asciidoctor or Markdown.", "code": "public interface TemplateFormat {\n\tString getFileExtension(); // Returns the file extension to use for files generated from templates in this format.\n\tString getId(); // Returns the id of this template format.\n}"}
{"index": 4782, "repo": "hadoop-common-3.3.4", "des": "Summary of duration tracking statistics as extracted from an IOStatistics instance.", "code": "Class DurationStatisticSummary {\n\tstatic DurationStatisticSummary fetchDurationSummary(IOStatistics source, String key, boolean success); // Fetch the duration timing summary of success or failure operations from an IO Statistics source.\n\tstatic DurationStatisticSummary fetchSuccessSummary(IOStatistics source, String key); // Fetch the duration timing summary from an IOStatistics source.\n\tlong getCount();\n\tString getKey();\n\tlong getMax();\n\tMeanStatistic getMean();\n\tlong getMin();\n\tboolean isSuccess();\n}"}
{"index": 10156, "repo": "spring-hateoas-2.1.2", "des": "Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.", "code": "public interface SimpleReactiveRepresentationModelAssembler<T> extends ReactiveRepresentationModelAssembler<T,EntityModel<T>> {\n\tdefault CollectionModel<EntityModel<T>> addLinks(CollectionModel<EntityModel<T>> resources, ServerWebExchange exchange); // Define links to add to the CollectionModel collection.\n\tdefault EntityModel<T> addLinks(EntityModel<T> resource, ServerWebExchange exchange); // Define links to add to every individual EntityModel.\n\tdefault reactor.core.publisher.Mono<CollectionModel<EntityModel<T>>> toCollectionModel(reactor.core.publisher.Flux<? extends T> entities, ServerWebExchange exchange); // Converts all given entities into resources and wraps the collection as a resource as well.\n\tdefault reactor.core.publisher.Mono<EntityModel<T>> toModel(T entity, ServerWebExchange exchange); // Converts the given entity into a EntityModel wrapped in a Mono.\n}"}
{"index": 6264, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "A base IntegrationComponentSpec for JmsDestinationAccessors.", "code": "Class JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor> {\n\tS destinationResolver(org.springframework.jms.support.destination.DestinationResolver destinationResolver); // A DestinationResolver to use.\n\tS pubSubDomain(boolean pubSubDomain); // A pubSubDomain flag.\n\tS sessionAcknowledgeMode(int sessionAcknowledgeMode); // A session acknowledgement mode.\n\tS sessionAcknowledgeModeName(java.lang.String constantName); // A session acknowledgement mode name.\n\tS sessionTransacted(boolean sessionTransacted); // A session transaction mode.\n}"}
{"index": 743, "repo": "ignite-core-2.15.0", "des": "Adapter for closeable iterator that can be safely closed concurrently.", "code": "Class GridCloseableIteratorAdapterEx<T> {\n\tvoid close(); // Closes the iterator and frees all the resources held by the iterator.\n\tboolean hasNextX(); // This method is the same as Iterator.hasNext(), but allows for failure with exception.\n\tboolean isClosed(); // Checks if iterator has been closed.\n\tT nextX(); // This method is the same as Iterator.next(), but allows for failure with exception.\n\tprotected void onClose(); // Invoked on iterator close.\n\tprotected abstract boolean onHasNext();\n\tprotected abstract T onNext();\n\tprotected void onRemove(); // Called on remove from iterator.\n\tvoid removeX(); // This method is the same as Iterator.remove(), but allows for failure with exception.\n}"}
{"index": 7332, "repo": "calcite-core-1.34.0", "des": "Abstract base class for implementing SubstitutionVisitor.", "code": "Class SubstitutionVisitor.AbstractUnifyRule {\n\tprotected static SubstitutionVisitor.Operand any(Class<? extends MutableRel> clazz); // Creates an operand that doesn't check inputs.\n\tprotected boolean isValid();\n\tprotected static SubstitutionVisitor.Operand operand(Class<? extends MutableRel> clazz, SubstitutionVisitor.Operand... inputOperands); // Creates an operand with given inputs.\n\tprotected static SubstitutionVisitor.Operand query(int ordinal); // Creates an operand that matches a relational expression in the query.\n\tprotected static SubstitutionVisitor.Operand target(int ordinal); // Creates an operand that matches a relational expression in the target.\n}"}
{"index": 9116, "repo": "hbase-server-3.0.0-alpha-4", "des": "Implementation of a file cleaner that checks if a empty directory with no subdirs and subfiles is deletable when user scan snapshot feature is enabled.", "code": "Class SnapshotScannerHDFSAclCleaner {\n\tvoid init(Map<String,Object> params); // this method is used to pass some instance into subclass\n\tboolean isEmptyDirDeletable(org.apache.hadoop.fs.Path dir); // Check if a empty directory with no subdirs or subfiles can be deleted\n\tprotected boolean isFileDeletable(org.apache.hadoop.fs.FileStatus fStat); // Should the master delete the file or keep it?\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 9224, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "This thread controls memory usage using cgroups.", "code": "Class CGroupElasticMemoryController {\n\tstatic boolean isAvailable(); // Checks if the CGroupElasticMemoryController is available on this system.\n\tvoid run(); // Main OOM listening thread.\n\tvoid stopListening(); // Stop listening to the cgroup.\n}"}
{"index": 144, "repo": "commons-collections4-4.4", "des": "Predicate implementation that always returns false.", "code": "Class FalsePredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning false always.\n\tstatic <T> Predicate<T> falsePredicate(); // Get a typed instance.\n}"}
{"index": 15113, "repo": "spring-vault-core-3.0.4", "des": "Builder for VaultTransitKeyConfiguration.", "code": "public static class VaultTransitKeyConfiguration.VaultTransitKeyConfigurationBuilder extends Object {\n\tVaultTransitKeyConfiguration build(); // Build a new VaultTransitKeyConfiguration instance.\n\tVaultTransitKeyConfiguration.VaultTransitKeyConfigurationBuilder deletionAllowed(boolean deletionAllowed); // Set whether key deletion is allowed.\n\tVaultTransitKeyConfiguration.VaultTransitKeyConfigurationBuilder minDecryptionVersion(int minDecryptionVersion); // Specifies the minimum version of ciphertext allowed to be decrypted.\n\tVaultTransitKeyConfiguration.VaultTransitKeyConfigurationBuilder minEncryptionVersion(int minEncryptionVersion); // Specifies the minimum version of the key that can be used to encrypt plaintext, sign payloads, or generate HMACs.\n}"}
{"index": 8832, "repo": "hbase-server-3.0.0-alpha-4", "des": "The asynchronous connection for internal usage.", "code": "Interface AsyncClusterConnection {\n\tCompletableFuture<Boolean> bulkLoad(TableName tableName, List<Pair<byte[],String>> familyPaths, byte[] row, boolean assignSeqNum, org.apache.hadoop.security.token.Token<?> userToken, String bulkToken, boolean copyFiles, List<String> clusterIds, boolean replicate); // Securely bulk load a list of HFiles, passing additional list of clusters ids tracking clusters where the given bulk load has already been processed (important for bulk loading replication).\n\tCompletableFuture<Void> cleanupBulkLoad(TableName tableName, String bulkToken); // Clean up after finishing bulk load, no matter success or not.\n\tCompletableFuture<org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.FlushRegionResponse> flush(byte[] regionName, boolean writeFlushWALMarker); // Flush a region and get the response.\n\tCompletableFuture<List<ServerName>> getAllBootstrapNodes(ServerName regionServer); // Get the bootstrap node list of another region server.\n\tCompletableFuture<List<ServerName>> getLiveRegionServers(MasterAddressTracker masterAddrTracker, int count); // Get live region servers from masters.\n\tNonceGenerator getNonceGenerator(); // Get the nonce generator for this connection.\n\tCompletableFuture<RegionLocations> getRegionLocations(TableName tableName, byte[] row, boolean reload); // Return all the replicas for a region.\n\tAsyncRegionServerAdmin getRegionServerAdmin(ServerName serverName); // Get the admin service for the given region server.\n\tRpcClient getRpcClient(); // Get the rpc client we used to communicate with other servers.\n\tCompletableFuture<String> prepareBulkLoad(TableName tableName); // Return the token for this bulk load.\n\tCompletableFuture<Void> replicate(RegionInfo replica, List<WAL.Entry> entries, int numRetries, long rpcTimeoutNs, long operationTimeoutNs); // Replicate wal edits to a secondary replica.\n}"}
{"index": 18213, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Encapsulation of the options for performing a load by multiple identifiers.", "code": "Interface MultiLoadOptions {\n\tjava.lang.Integer getBatchSize(); // Batch size to use when loading entities from the database.\n\tLockOptions getLockOptions(); // Specify the lock options applied during loading.\n\tboolean isOrderReturnEnabled(); // Should the entities be returned in the same order as their associated entity identifiers were provided.\n\tboolean isReturnOfDeletedEntitiesEnabled(); // Should we returned entities that are scheduled for deletion.\n\tboolean isSecondLevelCacheCheckingEnabled(); // Check the second-level cache first, and only if the entity is not found in the cache should Hibernate hit the database.\n\tboolean isSessionCheckingEnabled(); // Check the first-level cache first, and only if the entity is not found in the cache should Hibernate hit the database.\n}"}
{"index": 5723, "repo": "freemarker-2.3.32", "des": "A condition that matches some type members.", "code": "Class MemberSelectorListMemberAccessPolicy.MemberSelector {\n\tjava.lang.reflect.Constructor<?> getConstructor(); // Maybe null; set if the selector matches constructors similar to the returned one.\n\tjava.lang.reflect.Field getField(); // Maybe null; set if the selector matches fields similar to the returned one.\n\tjava.lang.reflect.Method getMethod(); // Maybe null; set if the selector matches methods similar to the returned one.\n\tjava.lang.Class<?> getUpperBoundType(); // Not null.\n\tstatic boolean isIgnoredLine(java.lang.String line); // A line is ignored if it's blank or a comment.\n\tstatic java.util.List<MemberSelectorListMemberAccessPolicy.MemberSelector> parse(java.util.Collection<java.lang.String> memberSelectors, boolean ignoreMissingClassOrMember, java.lang.ClassLoader classLoader); // Convenience method to parse all member selectors in the collection (see parse(String, ClassLoader)), while also filtering out blank and comment lines; see parse(String, ClassLoader), and isIgnoredLine(String).\n\tstatic MemberSelectorListMemberAccessPolicy.MemberSelector parse(java.lang.String memberSelectorString, java.lang.ClassLoader classLoader); // Parses a member selector that was specified with a string.\n}"}
{"index": 10733, "repo": "spring-tx-6.0.11", "des": "Adapter that implements the JTA Synchronization interface delegating to an underlying Spring TransactionSynchronization.", "code": "public class SpringJtaSynchronizationAdapter extends Object implements Synchronization {\n\tvoid afterCompletion(int status); // JTA afterCompletion callback: invoked after commit/rollback.\n\tvoid beforeCompletion(); // JTA beforeCompletion callback: just invoked before commit.\n}"}
{"index": 15028, "repo": "spring-vault-core-3.0.4", "des": "Value object for an authentication nonce.", "code": "public static class AwsEc2AuthenticationOptions.Nonce extends Object {\n\tstatic AwsEc2AuthenticationOptions.Nonce generated(); // Create a new generated AwsEc2AuthenticationOptions.Nonce using UUID.\n\tchar[] getValue();\n\tstatic AwsEc2AuthenticationOptions.Nonce provided(char[] nonce); // Create a wrapped AwsEc2AuthenticationOptions.Nonce given a nonce value.\n}"}
{"index": 11848, "repo": "spring-kafka-3.0.9", "des": "Common super class for classes that deal with failing to consume a consumer record.", "code": "public abstract class FailedRecordProcessor extends ExceptionClassifier implements DeliveryAttemptAware {\n\tvoid clearThreadState();\n\tint deliveryAttempt(TopicPartitionOffset topicPartitionOffset); // Return the next delivery attempt for the topic/partition/offset.\n\tprotected org.springframework.kafka.listener.FailedRecordTracker getFailureTracker(); // Return the failed record tracker.\n\tprotected List<RetryListener> getRetryListeners();\n\tprotected boolean isCommitRecovered(); // Whether the offset for a recovered record should be committed.\n\tboolean isSeekAfterError(); // Return whether to seek after an exception is handled.\n\tvoid setBackOffFunction(BiFunction<org.apache.kafka.clients.consumer.ConsumerRecord<?,?>,Exception,org.springframework.util.backoff.BackOff> backOffFunction); // Set a function to dynamically determine the BackOff to use, based on the consumer record and/or exception.\n\tvoid setCommitRecovered(boolean commitRecovered); // Set to true to commit the offset for a recovered record.\n\tvoid setResetStateOnExceptionChange(boolean resetStateOnExceptionChange); // Set to true to reset the retry BackOff if the exception is a different type to the previous failure for the same record.\n\tvoid setResetStateOnRecoveryFailure(boolean resetStateOnRecoveryFailure); // Set to false to immediately attempt to recover on the next attempt instead of repeating the BackOff cycle when recovery fails.\n\tvoid setRetryListeners(RetryListener... listeners); // Set one or more RetryListener to receive notifications of retries and recovery.\n\tvoid setSeekAfterError(boolean seekAfterError); // When true (default), the error handler will perform seeks on the failed and/or remaining records to they will be redelivered on the next poll.\n}"}
{"index": 3559, "repo": "mahout-mr-0.13.0", "des": "This class handles reading and writing vectors to the Hadoop distributed cache.", "code": "Class VectorCache {\n\tstatic Vector load(org.apache.hadoop.conf.Configuration conf); // Loads the vector from DistributedCache.\n\tstatic Vector load(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.Path input); // Loads a Vector from the specified path.\n\tstatic void save(org.apache.hadoop.io.Writable key, Vector vector, org.apache.hadoop.fs.Path output, org.apache.hadoop.conf.Configuration conf); // Calls the save() method, setting the cache to overwrite any previous Path and to delete the path after exiting\n\tstatic void save(org.apache.hadoop.io.Writable key, Vector vector, org.apache.hadoop.fs.Path output, org.apache.hadoop.conf.Configuration conf, boolean overwritePath, boolean deleteOnExit);\n}"}
{"index": 5571, "repo": "org.apache.karaf.main-2.4.4", "des": "A command interpreter is a shell that can interpret command lines.", "code": "Interface CommandInterpreter {\n\tObject execute(String cmd); // Execute a command line as if it came from the end user and return the result.\n\tString nextArgument(); // Get the next argument in the input.\n\tvoid print(Object o); // Prints an object to the outputstream\n\tvoid printBundleResource(Bundle bundle, String resource); // Prints the given bundle resource if it exists\n\tvoid printDictionary(Dictionary<?,?> dic, String title); // Prints the given dictionary sorted by keys.\n\tvoid println(); // Prints an empty line to the outputstream\n\tvoid println(Object o); // Prints an object to the output medium (appended with newline character).\n\tvoid printStackTrace(Throwable t); // Print a stack trace including nested exceptions.\n}"}
{"index": 1093, "repo": "ignite-core-2.15.0", "des": "This class contains logic to resolve and possibly lock PDS folder based on provided IgniteConfiguration and consistentId.", "code": "Class PdsFolderResolver<L extends FileLockHolder> {\n\tPdsFolderSettings<L> generateNew();\n\tstatic @NotNull String genNewStyleSubfolderName(int nodeIdx, UUID uuid); // Generates DB subfolder name for provided node index (local) and UUID (consistent ID)\n\tstatic @Nullable PdsFolderResolver.FolderCandidate parseSubFolderName(@NotNull File subFolderFile, @NotNull IgniteLogger log);\n\tPdsFolderSettings<L> resolve(); // Resolves PdsFolderSettings according to specified IgniteConfiguration, consistentId.\n}"}
{"index": 1541, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents a measure dictionary.", "code": "Class PDMeasureDictionary {\n\tCOSDictionary getCOSObject(); // This will return the corresponding dictionary.\n\tString getSubtype(); // returns the subtype of the measure dictionary.\n\tString getType(); // This will return the type of the measure dictionary.\n\tprotected void setSubtype(String subtype); // This will set the subtype of the measure dictionary.\n}"}
{"index": 6576, "repo": "exoplayer-core-2.9.6", "des": "Base class for SegmentDownloadAction Deserializers.", "code": "Class SegmentDownloadAction.SegmentDownloadActionDeserializer {\n\tprotected abstract DownloadAction createDownloadAction(android.net.Uri manifestUri, boolean isRemoveAction, byte[] data, java.util.List<StreamKey> keys); // Returns a DownloadAction.\n\tDownloadAction readFromStream(int version, java.io.DataInputStream input); // Deserializes an action from the input.\n\tprotected StreamKey readKey(int version, java.io.DataInputStream input); // Deserializes a key from the input.\n}"}
{"index": 9016, "repo": "hbase-server-3.0.0-alpha-4", "des": "A SpaceViolationPolicyEnforcement which disallows any inserts to the table.", "code": "Class NoInsertsViolationPolicyEnforcement {\n\tvoid check(Mutation m); // Checks the given Mutation against this policy.\n\tvoid disable(); // Disables this policy.\n\tvoid enable(); // Enables this policy.\n\tString getPolicyName(); // Returns a logical name for the SpaceViolationPolicy that this enforcement is for.\n}"}
{"index": 4020, "repo": "zookeeper-3.8.2", "des": "NIOServerCnxnFactory implements a multi-threaded ServerCnxnFactory using NIO non-blocking socket calls.", "code": "Class NIOServerCnxnFactory {\n\tvoid closeAll(ServerCnxn.DisconnectReason reason); // clear all the connections in the selector\n\tvoid configure(InetSocketAddress addr, int maxcc, int backlog, boolean secure);\n\tprotected NIOServerCnxn createConnection(SocketChannel sock, SelectionKey sk, NIOServerCnxnFactory.SelectorThread selectorThread);\n\tvoid dumpConnections(PrintWriter pwriter);\n\tIterable<Map<String,Object>> getAllConnectionInfo(boolean brief);\n\tIterable<ServerCnxn> getConnections();\n\tstatic ByteBuffer getDirectBuffer();\n\tInetSocketAddress getLocalAddress();\n\tint getLocalPort();\n\tint getMaxClientCnxnsPerHost(); // Maximum number of connections allowed from particular host (ip)\n\tint getSocketListenBacklog(); // The maximum queue length of the ZooKeeper server's socket\n\tvoid join();\n\tvoid reconfigure(InetSocketAddress addr);\n\tboolean removeCnxn(NIOServerCnxn cnxn); // De-registers the connection from the various mappings maintained by the factory.\n\tvoid resetAllConnectionStats();\n\tvoid setMaxClientCnxnsPerHost(int max); // Maximum number of connections allowed from particular host (ip)\n\tvoid shutdown();\n\tvoid start();\n\tvoid startup(ZooKeeperServer zks, boolean startServer);\n\tvoid stop();\n\tvoid touchCnxn(NIOServerCnxn cnxn); // Add or update cnxn in our cnxnExpiryQueue\n}"}
{"index": 4967, "repo": "commons-collections-3.2.2", "des": "Transformer implementation that returns a clone of the input object.", "code": "Class CloneTransformer {\n\tstatic Transformer getInstance(); // Factory returning the singleton instance.\n\tObject transform(Object input); // Transforms the input to result by cloning it.\n}"}
{"index": 2919, "repo": "tink-1.10.0", "des": "A wrapper class that provides the functionality of an underlying Aead or Deterministic Aead primitive.", "code": "Class AeadOrDaead {\n\tbyte[] decrypt(byte[] ciphertext, byte[] associatedData); // Decrypts ciphertext with associatedData as associated authenticated data.\n\tbyte[] encrypt(byte[] plaintext, byte[] associatedData); // Encrypts plaintext with associatedData as associated authenticated data.\n}"}
{"index": 12555, "repo": "spring-jdbc-6.0.11", "des": "The default implementation of Spring's SqlRowSetMetaData interface, wrapping a ResultSetMetaData instance, catching any SQLExceptions and translating them to a corresponding Spring InvalidResultSetAccessException.", "code": "public class ResultSetWrappingSqlRowSetMetaData extends Object implements SqlRowSetMetaData {\n\tString getCatalogName(int column); // Retrieve the catalog name of the table that served as the source for the specified column.\n\tString getColumnClassName(int column); // Retrieve the fully qualified class that the specified column will be mapped to.\n\tint getColumnCount(); // Retrieve the number of columns in the RowSet.\n\tint getColumnDisplaySize(int column); // Retrieve the maximum width of the designated column.\n\tString getColumnLabel(int column); // Retrieve the suggested column title for the column specified.\n\tString getColumnName(int column); // Retrieve the column name for the indicated column.\n\tString[] getColumnNames(); // Return the column names of the table that the result set represents.\n\tint getColumnType(int column); // Retrieve the SQL type code for the indicated column.\n\tString getColumnTypeName(int column); // Retrieve the DBMS-specific type name for the indicated column.\n\tint getPrecision(int column); // Retrieve the precision for the indicated column.\n\tint getScale(int column); // Retrieve the scale of the indicated column.\n\tString getSchemaName(int column); // Retrieve the schema name of the table that served as the source for the specified column.\n\tString getTableName(int column); // Retrieve the name of the table that served as the source for the specified column.\n\tboolean isCaseSensitive(int column); // Indicate whether the case of the designated column is significant.\n\tboolean isCurrency(int column); // Indicate whether the designated column contains a currency value.\n\tboolean isSigned(int column); // Indicate whether the designated column contains a signed number.\n}"}
{"index": 11188, "repo": "wicket-extensions-10.0.0-M1", "des": "A panel that participates with a bread crumb model.", "code": "public abstract class BreadCrumbPanel extends org.apache.wicket.markup.html.panel.Panel implements IBreadCrumbParticipant {\n\tvoid activate(IBreadCrumbParticipant participant); // Activates the provided participant, which typically has the effect of replacing this current panel with the one provided - as the participant typically would be a bread crumb panel - and updating the bread crumb model of this panel, pushing the bread crumb for the given participant on top.\n\tvoid activate(IBreadCrumbPanelFactory breadCrumbPanelFactory); // Activates the bread crumb panel that is the result of calling the create method of the bread crumb panel factory.\n\tfinal IBreadCrumbModel getBreadCrumbModel(); // Gets the bread crumb panel.\n\torg.apache.wicket.Component getComponent(); // The participating component == this.\n\tvoid onActivate(IBreadCrumbParticipant previous); // Called when the corresponding bread crumb is activated.\n\tfinal void setBreadCrumbModel(IBreadCrumbModel breadCrumbModel); // Sets the bread crumb panel.\n}"}
{"index": 5419, "repo": "druid-processing-26.0.0", "des": "This includes the state of a task in the task runner not covered by TaskState, this state is not stored in database.", "code": "Enum RunnerTaskState {\n\tstatic RunnerTaskState valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RunnerTaskState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11325, "repo": "spring-context-6.0.11", "des": "JNDI-based variant of ConcurrentTaskExecutor, performing a default lookup for JSR-236's \"java:comp/DefaultManagedExecutorService\" in a Jakarta EE/8 environment.", "code": "public class DefaultManagedTaskExecutor extends ConcurrentTaskExecutor implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tvoid setJndiEnvironment(Properties jndiEnvironment); // Set the JNDI environment to use for JNDI lookups.\n\tvoid setJndiName(String jndiName); // Specify a JNDI name of the Executor to delegate to, replacing the default JNDI name \"java:comp/DefaultManagedExecutorService\".\n\tvoid setJndiTemplate(JndiTemplate jndiTemplate); // Set the JNDI template to use for JNDI lookups.\n\tvoid setResourceRef(boolean resourceRef); // Set whether the lookup occurs in a Jakarta EE container, i.e.\n}"}
{"index": 12593, "repo": "spring-batch-integration-5.0.2", "des": "A StepLocator implementation that just looks in its enclosing bean factory for components of type Step.", "code": "public class BeanFactoryStepLocator extends Object implements StepLocator, org.springframework.beans.factory.BeanFactoryAware {\n\tStep getStep(String stepName); // Look up a bean with the provided name of type Step.\n\tCollection<String> getStepNames(); // Look in the bean factory for all beans of type Step.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}"}
{"index": 17463, "repo": "spring-security-config-6.1.2", "des": "Allows for configuring a SecurityBuilder.", "code": "public interface SecurityConfigurer<O,B extends SecurityBuilder<O>> {\n\tvoid configure(B builder); // Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tvoid init(B builder); // Initialize the SecurityBuilder.\n}"}
{"index": 8967, "repo": "hbase-server-3.0.0-alpha-4", "des": "A class implementing IOEngine interface supports data services for BucketCache.", "code": "Interface IOEngine {\n\tboolean isPersistent(); // Returns true if persistent storage is supported for the cache when shutdown\n\tCacheable read(org.apache.hadoop.hbase.io.hfile.bucket.BucketEntry be); // Transfers data from IOEngine to a Cacheable object.\n\tvoid shutdown(); // Shutdown the IOEngine\n\tvoid sync(); // Sync the data to IOEngine after writing\n\tdefault boolean usesSharedMemory(); // IOEngine uses shared memory means, when reading Cacheable from it, those refers to the same memory area as used by the Engine for caching it.\n\tvoid write(ByteBuffer srcBuffer, long offset); // Transfers data from the given byte buffer to IOEngine\n\tvoid write(ByteBuff srcBuffer, long offset); // Transfers the data from the given MultiByteBuffer to IOEngine\n}"}
{"index": 6765, "repo": "calcite-core-1.34.0", "des": "Implementation of the SqlOperatorBinding interface for an aggregate call applied to a set of operands in the context of a LogicalAggregate.", "code": "Class Aggregate.AggCallBinding {\n\tint getGroupCount(); // If the operator call occurs in an aggregate query, returns the number of columns in the GROUP BY clause.\n\tint getOperandCount(); // Returns the number of bound operands.\n\tRelDataType getOperandType(int ordinal); // Gets the type of a bound operand.\n\tboolean hasFilter(); // Returns whether the operator is an aggregate function with a filter.\n\tCalciteException newError(org.apache.calcite.runtime.Resources.ExInst<SqlValidatorException> e); // Wraps a validation error with context appropriate to this operator call.\n}"}
{"index": 18504, "repo": "hibernate-core-5.6.15.Final", "des": "A SQLFunction implementation that emulates the ANSI SQL trim function on dialects which do not support the full definition.", "code": "Class AnsiTrimEmulationFunction {\n\tprotected SQLFunction resolveBothSpaceTrimFromFunction(); // Resolve the function definition which should be used to trim both leading and trailing spaces.\n\tprotected SQLFunction resolveBothSpaceTrimFunction(); // Resolve the function definition which should be used to trim both leading and trailing spaces.\n\tprotected SQLFunction resolveBothTrimFunction(); // Resolve the function definition which should be used to trim the specified character from both the beginning (leading) and end (trailing) of the trim source.\n\tprotected SQLFunction resolveLeadingSpaceTrimFunction(); // Resolve the function definition which should be used to trim leading spaces.\n\tprotected SQLFunction resolveLeadingTrimFunction(); // Resolve the function definition which should be used to trim the specified character from the beginning (leading) of the trim source.\n\tprotected SQLFunction resolveTrailingSpaceTrimFunction(); // Resolve the function definition which should be used to trim trailing spaces.\n\tprotected SQLFunction resolveTrailingTrimFunction(); // Resolve the function definition which should be used to trim the specified character from the end (trailing) of the trim source.\n}"}
{"index": 8174, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.", "code": "Class CommonsXsdSchemaCollection {\n\tvoid afterPropertiesSet();\n\tXmlValidator createValidator(); // Creates a XmlValidator based on the schemas contained in this collection.\n\tXsdSchema[] getXsdSchemas(); // Returns all schemas contained in this collection.\n\tvoid setInline(boolean inline); // Defines whether included schemas should be inlined into the including schema.\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader);\n\tvoid setUriResolver(org.apache.ws.commons.schema.resolver.URIResolver uriResolver); // Sets the WS-Commons uri resolver to use when resolving (relative) schemas.\n\tvoid setXsds(org.springframework.core.io.Resource... xsdResources); // Sets the schema resources to be loaded.\n}"}
{"index": 11561, "repo": "spring-security-oauth2-client-6.1.2", "des": "A JDBC implementation of an OAuth2AuthorizedClientService that uses a JdbcOperations for OAuth2AuthorizedClient persistence.", "code": "public class JdbcOAuth2AuthorizedClientService extends Object implements OAuth2AuthorizedClientService {\n\t<T extends OAuth2AuthorizedClient>T loadAuthorizedClient(String clientRegistrationId, String principalName); // Returns the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name or null if not available.\n\tvoid removeAuthorizedClient(String clientRegistrationId, String principalName); // Removes the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name.\n\tvoid saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, org.springframework.security.core.Authentication principal); // Saves the OAuth2AuthorizedClient associating it to the provided End-User Authentication (Resource Owner).\n\tfinal void setAuthorizedClientParametersMapper(Function<JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder,List<org.springframework.jdbc.core.SqlParameterValue>> authorizedClientParametersMapper); // Sets the Function used for mapping JdbcOAuth2AuthorizedClientService.OAuth2AuthorizedClientHolder to a List of SqlParameterValue.\n\tfinal void setAuthorizedClientRowMapper(org.springframework.jdbc.core.RowMapper<OAuth2AuthorizedClient> authorizedClientRowMapper); // Sets the RowMapper used for mapping the current row in java.sql.ResultSet to OAuth2AuthorizedClient.\n}"}
{"index": 5642, "repo": "org.apache.karaf.main-2.4.4", "des": "Utility class to execute common privileged code.", "code": "Class SecureAction {\n\tstatic PrivilegedAction<SecureAction> createSecureAction(); // Creates a privileged action that can be used to construct a SecureAction object.\n\tThread createThread(Runnable target, String name, ClassLoader contextLoader); // Creates a new Thread from a Runnable.\n\tboolean exists(File file); // Returns true if a file exists, otherwise false is returned.\n\tClass<?> forName(String name); // Returns a Class.\n\tFile getAbsoluteFile(File file); // Returns the absolute file.\n\tFile getCanonicalFile(File file); // Returns the canonical file.\n\tString getCanonicalPath(File file); // Returns the canonical path of a file.\n\tFileInputStream getFileInputStream(File file); // Creates a FileInputStream from a File.\n\tFileOutputStream getFileOutputStream(File file, boolean append); // Creates a FileInputStream from a File.\n\tProperties getProperties(); // Returns the system properties.\n\tString getProperty(String property); // Returns a system property.\n\tString getProperty(String property, String def); // Returns a system property.\n\t<S> S getService(ServiceReference<S> reference, BundleContext context); // Gets a service object.\n\tURL getURL(String protocol, String host, int port, String file, URLStreamHandler handler); // Gets a URL.\n\tZipFile getZipFile(File file); // Returns a ZipFile.\n\tboolean isDirectory(File file); // Returns true if a file is a directory, otherwise false is returned.\n\tlong lastModified(File file); // Returns a file's last modified stamp.\n\tlong length(File file); // Returns the length of a file.\n\tString[] list(File file); // Returns a file's list.\n\tClass<?> loadSystemClass(String name); // Returns a Class.\n\tvoid open(ServiceTracker<?,?> tracker); // Opens a ServiceTracker.\n\tvoid start(Bundle bundle); // Starts a bundle\n\tvoid start(Bundle bundle, int options); // Starts a bundle.\n}"}
{"index": 4671, "repo": "commons-vfs2-2.9.0", "des": "This class is to keep the old logging behavior (for ant-task) and to be able to correctly use commons-logging.", "code": "Class VfsLog {\n\tstatic void debug(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonslog, String message); // debug.\n\tstatic void debug(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonsLog, String message, Throwable t); // debug.\n\tstatic void error(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonsLog, String message); // error.\n\tstatic void error(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonsLog, String message, Throwable t); // error.\n\tstatic void fatal(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonsLog, String message); // fatal.\n\tstatic void fatal(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonsLog, String message, Throwable t); // fatal.\n\tstatic void info(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonsLog, String message); // info.\n\tstatic void info(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonsLog, String message, Throwable t); // info.\n\tstatic void warn(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonslog, String message); // warning.\n\tstatic void warn(org.apache.commons.logging.Log vfsLog, org.apache.commons.logging.Log commonslog, String message, Throwable t); // warning.\n}"}
{"index": 9931, "repo": "iceberg-api-1.3.0", "des": "Represents how to produce partition data for a table.", "code": "Class PartitionSpec {\n\tstatic PartitionSpec.Builder builderFor(Schema schema); // Creates a new partition spec builder for the given Schema.\n\tboolean compatibleWith(PartitionSpec other); // Returns true if this spec is equivalent to the other, with partition field ids ignored.\n\tboolean equals(java.lang.Object other);\n\tjava.util.List<PartitionField> fields(); // Returns the list of partition fields for this spec.\n\tjava.util.List<PartitionField> getFieldsBySourceId(int fieldId); // Returns the field that partitions the given source field\n\tjava.util.Set<java.lang.Integer> identitySourceIds(); // Returns the source field ids for identity partitions.\n\tboolean isPartitioned();\n\tboolean isUnpartitioned();\n\tjava.lang.Class<?>[] javaClasses();\n\tjava.lang.String partitionToPath(StructLike data);\n\tTypes.StructType partitionType(); // Returns a Types.StructType for partition data defined by this spec.\n\tSchema schema(); // Returns the Schema for this spec.\n\tint specId(); // Returns the ID of this spec.\n\tUnboundPartitionSpec toUnbound();\n\tstatic PartitionSpec unpartitioned(); // Returns a spec for unpartitioned tables.\n}"}
{"index": 10231, "repo": "spring-core-6.0.11", "des": "Exception to be thrown when a suitable converter could not be found in a given conversion service.", "code": "public class ConverterNotFoundException extends ConversionException {\n\tTypeDescriptor getSourceType(); // Return the source type that was requested to convert from.\n\tTypeDescriptor getTargetType(); // Return the target type that was requested to convert to.\n}"}
{"index": 17938, "repo": "spring-web-6.0.11", "des": "Environment implementation to be used by Servlet-based web applications.", "code": "public class StandardServletEnvironment extends org.springframework.core.env.StandardEnvironment implements ConfigurableWebEnvironment {\n\tprotected void customizePropertySources(org.springframework.core.env.MutablePropertySources propertySources); // Customize the set of property sources with those contributed by superclasses as well as those appropriate for standard servlet-based environments: \"servletConfigInitParams\" \"servletContextInitParams\" \"jndiProperties\"\n\tvoid initPropertySources(ServletContext servletContext, ServletConfig servletConfig); // Replace any stub property source instances acting as placeholders with real servlet context/config property sources using the given parameters.\n}"}
{"index": 10842, "repo": "spring-boot-actuator-3.1.1", "des": "Value object to express state of a component or subsystem.", "code": "public final class Status extends Object {\n\tboolean equals(Object obj);\n\tString getCode(); // Return the code for this status.\n\tString getDescription(); // Return the description of this status.\n}"}
{"index": 7207, "repo": "calcite-core-1.34.0", "des": "Type of argument passed into SqlFunctions.", "code": "Enum SqlFunctions.FlatProductInputType {\n\tstatic SqlFunctions.FlatProductInputType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlFunctions.FlatProductInputType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13229, "repo": "spring-test-6.0.11", "des": "Contract that frameworks or applications can use to pre-package a set of customizations to a WebTestClient.MockServerSpec and expose that as a shortcut.", "code": "public interface MockServerConfigurer {\n\tdefault void afterConfigureAdded(WebTestClient.MockServerSpec<?> serverSpec); // Invoked immediately, i.e.\n\tdefault void beforeServerCreated(org.springframework.web.server.adapter.WebHttpHandlerBuilder builder); // Invoked just before the mock server is built.\n}"}
{"index": 3799, "repo": "hbase-client-3.0.0-alpha-4", "des": "Used to communicate with a single HBase table similar to Table but meant for batched, asynchronous puts.", "code": "Interface BufferedMutator {\n\tvoid close(); // Performs a flush() and releases any resources held.\n\tdefault void disableWriteBufferPeriodicFlush(); // Disable periodic flushing of the write buffer.\n\tvoid flush(); // Executes all the buffered, asynchronous Mutation operations and waits until they are done.\n\torg.apache.hadoop.conf.Configuration getConfiguration(); // Returns the Configuration object used by this instance.\n\tTableName getName(); // Gets the fully qualified table name instance of the table that this BufferedMutator writes to.\n\tdefault long getWriteBufferPeriodicFlushTimeoutMs(); // Returns the current periodic flush timeout value in milliseconds.\n\tdefault long getWriteBufferPeriodicFlushTimerTickMs(); // Returns the current periodic flush timertick interval in milliseconds.\n\tdefault long getWriteBufferSize(); // Returns the maximum size in bytes of the write buffer for this HTable.\n\tvoid mutate(List<? extends Mutation> mutations); // Send some Mutations to the table.\n\tvoid mutate(Mutation mutation); // Sends a Mutation to the table.\n\tdefault void setWriteBufferPeriodicFlush(long timeoutMs); // Sets the maximum time before the buffer is automatically flushed checking once per second.\n\tdefault void setWriteBufferPeriodicFlush(long timeoutMs, long timerTickMs); // Sets the maximum time before the buffer is automatically flushed.\n}"}
{"index": 11437, "repo": "spring-context-6.0.11", "des": "LoadTimeWeaver that builds and exposes a SimpleInstrumentableClassLoader.", "code": "public class SimpleLoadTimeWeaver extends Object implements LoadTimeWeaver {\n\tvoid addTransformer(ClassFileTransformer transformer); // Add a ClassFileTransformer to be applied by this LoadTimeWeaver.\n\tClassLoader getInstrumentableClassLoader(); // Return a ClassLoader that supports instrumentation through AspectJ-style load-time weaving based on user-defined ClassFileTransformers.\n\tClassLoader getThrowawayClassLoader(); // This implementation builds a SimpleThrowawayClassLoader.\n}"}
{"index": 92, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns true if all the predicates return true.", "code": "Class AllPredicate<T> {\n\tstatic <T> Predicate<T> allPredicate(Collection<? extends Predicate<? super T>> predicates); // Factory to create the predicate.\n\tstatic <T> Predicate<T> allPredicate(Predicate<? super T>... predicates); // Factory to create the predicate.\n\tboolean evaluate(T object); // Evaluates the predicate returning true if all predicates return true.\n}"}
{"index": 10286, "repo": "spring-core-6.0.11", "des": "CommandLinePropertySource implementation backed by a JOpt OptionSet.", "code": "public class JOptCommandLinePropertySource extends CommandLinePropertySource<joptsimple.OptionSet> {\n\tprotected boolean containsOption(String name); // Return whether the set of option arguments parsed from the command line contains an option with the given name.\n\tprotected List<String> getNonOptionArgs(); // Return the collection of non-option arguments parsed from the command line.\n\tList<String> getOptionValues(String name); // Return the collection of values associated with the command line option having the given name.\n\tString[] getPropertyNames(); // Return the names of all properties contained by the source object (never null).\n}"}
{"index": 11375, "repo": "spring-context-6.0.11", "des": "Simple holder class that associates a LocaleContext instance with the current thread.", "code": "public final class LocaleContextHolder extends Object {\n\tstatic Locale getLocale(); // Return the Locale associated with the current thread, if any, or the system default Locale otherwise.\n\tstatic Locale getLocale(LocaleContext localeContext); // Return the Locale associated with the given user context, if any, or the system default Locale otherwise.\n\tstatic LocaleContext getLocaleContext(); // Return the LocaleContext associated with the current thread, if any.\n\tstatic TimeZone getTimeZone(); // Return the TimeZone associated with the current thread, if any, or the system default TimeZone otherwise.\n\tstatic TimeZone getTimeZone(LocaleContext localeContext); // Return the TimeZone associated with the given user context, if any, or the system default TimeZone otherwise.\n\tstatic void resetLocaleContext(); // Reset the LocaleContext for the current thread.\n\tstatic void setDefaultLocale(Locale locale); // Set a shared default locale at the framework level, as an alternative to the JVM-wide default locale.\n\tstatic void setDefaultTimeZone(TimeZone timeZone); // Set a shared default time zone at the framework level, as an alternative to the JVM-wide default time zone.\n\tstatic void setLocale(Locale locale); // Associate the given Locale with the current thread, preserving any TimeZone that may have been set already.\n\tstatic void setLocale(Locale locale, boolean inheritable); // Associate the given Locale with the current thread, preserving any TimeZone that may have been set already.\n\tstatic void setLocaleContext(LocaleContext localeContext); // Associate the given LocaleContext with the current thread, not exposing it as inheritable for child threads.\n\tstatic void setLocaleContext(LocaleContext localeContext, boolean inheritable); // Associate the given LocaleContext with the current thread.\n\tstatic void setTimeZone(TimeZone timeZone); // Associate the given TimeZone with the current thread, preserving any Locale that may have been set already.\n\tstatic void setTimeZone(TimeZone timeZone, boolean inheritable); // Associate the given TimeZone with the current thread, preserving any Locale that may have been set already.\n}"}
{"index": 8464, "repo": "commons-io-2.13.0", "des": "A FileFilter providing conditional AND logic across a list of file filters.", "code": "Class AndFileFilter {\n\tboolean accept(File file); // Checks to see if the File should be accepted by this filter.\n\tboolean accept(File file, String name); // Checks to see if the File should be accepted by this filter.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the Path should be accepted by this filter.\n\tvoid addFileFilter(IOFileFilter... fileFilters); // Adds the given file filters.\n\tvoid addFileFilter(IOFileFilter fileFilter); // Adds the specified file filter to the list of file filters at the end of the list.\n\tList<IOFileFilter> getFileFilters(); // Gets this conditional file filter's list of file filters.\n\tboolean removeFileFilter(IOFileFilter ioFileFilter); // Removes the specified file filter.\n\tvoid setFileFilters(List<IOFileFilter> fileFilters); // Sets the list of file filters, replacing any previously configured file filters on this filter.\n}"}
{"index": 14892, "repo": "spring-data-keyvalue-3.1.2", "des": "AnnotationBasedKeySpaceResolver looks up Persistent and checks for presence of either meta or direct usage of KeySpace.", "code": "public enum AnnotationBasedKeySpaceResolver extends Enum<AnnotationBasedKeySpaceResolver> implements KeySpaceResolver {\n\tString resolveKeySpace(Class<?> type); // Determine the keySpace to use for a given type.\n\tstatic AnnotationBasedKeySpaceResolver valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AnnotationBasedKeySpaceResolver[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 18181, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Additional contract for things which describe foreign keys.", "code": "Interface ForeignKeyContributingSource {\n\tboolean createForeignKeyConstraint(); // Primarily exists to support JPA's @ForeignKey(NO_CONSTRAINT).\n\tjava.lang.String getExplicitForeignKeyName(); // Retrieve the name of the foreign key as supplied by the user, or null if the user supplied none.\n\tboolean isCascadeDeleteEnabled(); // Is \"cascade delete\" enabled for the foreign key? In other words, if a record in the parent (referenced) table is deleted, should the corresponding records in the child table automatically be deleted?\n}"}
{"index": 10792, "repo": "spring-boot-actuator-3.1.1", "des": "A MappingDescriptionProvider that introspects the HandlerMappings that are known to a DispatcherHandler.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.reactive.DispatcherHandlersMappingDescriptionProvider.DispatcherHandlersMappingDescriptionProviderRuntimeHints.class) public class DispatcherHandlersMappingDescriptionProvider extends Object implements MappingDescriptionProvider {\n\tMap<String,List<DispatcherHandlerMappingDescription>> describeMappings(org.springframework.context.ApplicationContext context); // Produce the descriptions of the mappings identified by this provider in the given context.\n\tString getMappingName(); // Returns the name of the mappings described by this provider.\n}"}
{"index": 2064, "repo": "hive-exec-4.0.0-alpha-2", "des": "Context for Expression Walker for determining predicate pushdown candidates It contains a ExprInfo object for each expression that is processed.", "code": "Class ExprWalkerInfo {\n\tExprWalkerInfo.ExprInfo addExprInfo(ExprNodeDesc expr); // Get additional info for a given expression node if it exists, or create a new one and store it if it does not\n\tvoid addFinalCandidate(String alias, ExprNodeDesc expr);\n\tvoid addNonFinalCandidate(String alias, ExprNodeDesc expr); // Adds the specified expr as a non-final candidate\n\tExprWalkerInfo.ExprInfo addOrGetExprInfo(ExprNodeDesc expr); // Get additional info for a given expression node if it exists, or create a new one and store it if it does not\n\tvoid addPushDowns(String alias, List<ExprNodeDesc> pushDowns); // Adds the passed list of pushDowns for the alias.\n\tExprWalkerInfo.ExprInfo getExprInfo(ExprNodeDesc expr); // Get additional info for a given expression node\n\tMap<String,List<ExprNodeDesc>> getFinalCandidates(); // Returns the list of pushdown expressions for each alias that appear in the current operator's RowResolver.\n\tMap<ExprNodeDesc,ExprNodeDesc> getNewToOldExprMap();\n\tMap<String,List<ExprNodeDesc>> getNonFinalCandidates(); // Returns list of non-final candidate predicate for each map.\n\tOperator<? extends OperatorDesc> getOp();\n\tMap<String,List<ExprNodeDesc>> getResidualPredicates(boolean clear);\n\tboolean hasAnyCandidates();\n\tboolean hasNonFinalCandidates();\n\tboolean isDeterministic();\n\tvoid merge(ExprWalkerInfo ewi); // Merges the specified pushdown predicates with the current class.\n\tvoid setDeterministic(boolean b); // sets the deterministic flag for this expression.\n}"}
{"index": 4938, "repo": "commons-collections-3.2.2", "des": "Abstract pair class to assist with creating KeyValue and Map.", "code": "Class AbstractKeyValue {\n\tObject getKey(); // Gets the key from the pair.\n\tObject getValue(); // Gets the value from the pair.\n}"}
{"index": 1460, "repo": "pdfbox-3.0.0-beta1", "des": "This class allows to import pages as Form XObjects into a document and use them to create layers (optional content groups).", "code": "Class LayerUtility {\n\tPDOptionalContentGroup appendFormAsLayer(PDPage targetPage, PDFormXObject form, AffineTransform transform, String layerName); // Places the given form over the existing content of the indicated page (like an overlay).\n\tPDDocument getDocument(); // Returns the PDF document we work on.\n\tPDFormXObject importPageAsForm(PDDocument sourceDoc, int pageNumber); // Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document.\n\tPDFormXObject importPageAsForm(PDDocument sourceDoc, PDPage page); // Imports a page from some PDF file as a Form XObject so it can be placed on another page in the target document.\n\tvoid wrapInSaveRestore(PDPage page); // Some applications may not wrap their page content in a save/restore (q/Q) pair which can lead to problems with coordinate system transformations when content is appended.\n}"}
{"index": 17997, "repo": "spring-ws-core-4.0.5", "des": "WebServiceMessageCallback implementation that sets the WS-Addressing Action header on the message.", "code": "public class ActionCallback extends Object implements WebServiceMessageCallback {\n\tvoid doWithMessage(WebServiceMessage message); // Execute any number of operations on the supplied message.\n\tURI getAction(); // Returns the Action.\n\tEndpointReference getFaultTo(); // Returns the FaultTo.\n\tEndpointReference getFrom(); // Returns the From.\n\tMessageIdStrategy getMessageIdStrategy(); // Returns the message id strategy used for creating WS-Addressing MessageIds.\n\tEndpointReference getReplyTo(); // Returns the ReplyTo.\n\tprotected URI getTo(); // Returns the Destination for outgoing messages.\n\tAddressingVersion getVersion(); // Returns the WS-Addressing version\n\tvoid setFaultTo(EndpointReference faultTo); // Sets the FaultTo.\n\tvoid setFrom(EndpointReference from); // Sets the From.\n\tvoid setMessageIdStrategy(MessageIdStrategy messageIdStrategy); // Sets the message id strategy used for creating WS-Addressing MessageIds.\n\tvoid setReplyTo(EndpointReference replyTo); // Sets the ReplyTo.\n\tvoid setShouldInitializeTo(boolean shouldInitializeTo); // Set whether to initialize the To header by default or not.\n}"}
{"index": 14842, "repo": "spring-data-commons-3.1.2", "des": "BeanRegistrationAotContribution used to contribute repository registrations.", "code": "public class RepositoryRegistrationAotContribution extends Object implements BeanRegistrationAotContribution {\n\tvoid applyTo(GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode);\n\tprotected org.springframework.data.repository.config.DefaultAotRepositoryContext buildAotRepositoryContext(RegisteredBean bean, RepositoryConfiguration<?> repositoryMetadata);\n\tprotected void enhanceRepositoryBeanDefinition(RegisteredBean repositoryBean, RepositoryConfiguration<?> repositoryMetadata, AotRepositoryContext repositoryContext); // Helps the AOT processing render the FactoryBean type correctly that is used to tell the outcome of the FactoryBean.\n\tRepositoryRegistrationAotContribution forBean(RegisteredBean repositoryBean); // Builds a RepositoryRegistrationAotContribution for given, required RegisteredBean representing the Repository registered in the bean registry.\n\tstatic RepositoryRegistrationAotContribution fromProcessor(RepositoryRegistrationAotProcessor repositoryRegistrationAotProcessor); // Factory method used to construct a new instance of RepositoryRegistrationAotContribution initialized with the given, required RepositoryRegistrationAotProcessor from which this contribution was created.\n\tprotected ConfigurableListableBeanFactory getBeanFactory();\n\tprotected Optional<BiConsumer<AotRepositoryContext,GenerationContext>> getModuleContribution();\n\tprotected AotRepositoryContext getRepositoryContext();\n\tRepositoryInformation getRepositoryInformation();\n\tprotected RepositoryRegistrationAotProcessor getRepositoryRegistrationAotProcessor();\n\tPredicate<Class<?>> typeFilter();\n\tRepositoryRegistrationAotContribution withModuleContribution(BiConsumer<AotRepositoryContext,GenerationContext> moduleContribution); // Callback for data module specific contributions.\n}"}
{"index": 1132, "repo": "ignite-core-2.15.0", "des": "Way of accessing a property - either via field or getter and setter methods.", "code": "Interface QueryPropertyAccessor {\n\tString getPropertyName();\n\tClass<?> getType();\n\tObject getValue(Object obj); // Get property value from given object.\n\tvoid setValue(Object obj, Object newVal); // Set property value on given object.\n}"}
{"index": 458, "repo": "phoenix-core-5.1.3", "des": "Manage the types of frequencies that we support.", "code": "Enum Tracing.Frequency {\n\tString getKey();\n\tstatic Tracing.Frequency valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Tracing.Frequency[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2572, "repo": "exoplayer-r2.3.1", "des": "Base class for SubtitleDecoder output buffers.", "code": "Class SubtitleOutputBuffer {\n\tvoid clear(); // Clears the buffer.\n\tjava.util.List<Cue> getCues(long timeUs); // Retrieve the cues that should be displayed at a given time.\n\tlong getEventTime(int index); // Returns the event time at a specified index.\n\tint getEventTimeCount(); // Returns the number of event times, where events are defined as points in time at which the cues returned by Subtitle.getCues(long) changes.\n\tint getNextEventTimeIndex(long timeUs); // Returns the index of the first event that occurs after a given time (exclusive).\n\tabstract void release(); // Releases the output buffer for reuse.\n\tvoid setContent(long timeUs, Subtitle subtitle, long subsampleOffsetUs); // Sets the content of the output buffer, consisting of a Subtitle and associated metadata.\n}"}
{"index": 5288, "repo": "druid-processing-26.0.0", "des": "Class that knows how to process a groupBy query on a single StorageAdapter.", "code": "Class GroupByQueryEngineV2 {\n\tstatic boolean canPushDownLimit(ColumnSelectorFactory columnSelectorFactory, String columnName); // check if a column will operate correctly with LimitedBufferHashGrouper for query limit pushdown\n\tstatic void convertRowTypesToOutputTypes(List<DimensionSpec> dimensionSpecs, ResultRow resultRow, int resultRowDimensionStart);\n\tstatic GroupByColumnSelectorPlus[] createGroupBySelectorPlus(ColumnSelectorPlus<GroupByColumnSelectorStrategy>[] baseSelectorPlus, int dimensionStart);\n\tstatic int getCardinalityForArrayAggregation(GroupByQueryConfig querySpecificConfig, GroupByQuery query, StorageAdapter storageAdapter, ByteBuffer buffer); // Returns the cardinality of array needed to do array-based aggregation, or -1 if array-based aggregation is impossible.\n\tstatic boolean hasNoExplodingDimensions(ColumnInspector inspector, List<DimensionSpec> dimensions); // Checks whether all \"dimensions\" are either single-valued, or if the input column or output dimension spec has specified a type that TypeSignature.isArray().\n\tstatic Sequence<ResultRow> process(GroupByQuery query, StorageAdapter storageAdapter, NonBlockingPool<ByteBuffer> intermediateResultsBufferPool, GroupByQueryConfig querySpecificConfig, DruidProcessingConfig processingConfig, GroupByQueryMetrics groupByQueryMetrics);\n}"}
{"index": 10625, "repo": "groovy-all-4.0.13", "des": "This class contains utility methods to determine which class called the current class to multiple levels of depth.", "code": "public class ReflectionUtils extends Object {\n\tstatic boolean checkAccessible(Class<?> callerClass, Class<?> declaringClass, int memberModifiers, boolean allowIllegalAccess);\n\tstatic boolean checkCanSetAccessible(AccessibleObject accessibleObject, Class<?> caller);\n\tstatic Class getCallingClass(); // Gets the immediate calling class, ignoring MOP frames.\n\tstatic Class getCallingClass(int matchLevel); // Gets the called that is matchLevel stack frames before the call, ignoring MOP frames.\n\tstatic Class getCallingClass(int matchLevel, Collection<String> extraIgnoredPackages); // Gets the called that is matchLevel stack frames before the call, ignoring MOP frames and desired exclude packages.\n\tstatic List<Method> getDeclaredMethods(Class<?> type, String name, Class<?>... parameterTypes);\n\tstatic List<Method> getMethods(Class<?> type, String name, Class<?>... parameterTypes);\n\tstatic Class<?>[] getPermittedSubclasses(Class<?> clazz);\n\tstatic boolean isCallingClassReflectionAvailable(); // Determines whether the getCallingClass methods will return any sensible results.\n\tstatic boolean isSealed(Class<?> clazz);\n\tstatic Optional<AccessibleObject> makeAccessible(AccessibleObject ao);\n\tstatic AccessibleObject[] makeAccessible(AccessibleObject[] aoa);\n\tstatic Optional<AccessibleObject> makeAccessibleInPrivilegedAction(AccessibleObject ao);\n\tstatic boolean parameterTypeMatches(Class<?>[] parameterTypes, Class<?>[] argTypes);\n\tstatic boolean trySetAccessible(AccessibleObject ao);\n}"}
{"index": 18688, "repo": "opencms-gwt-15.0", "des": "Resource bundle to access CSS and image resources.", "code": "Interface I_CmsLayoutBundle {\n\tI_CmsConstantsBundle constants(); // The CSS constants bundle.\n\tI_CmsLayoutBundle.I_CmsDialogCss dialogCss(); // Access method.\n}"}
{"index": 4286, "repo": "beam-sdks-java-core-2.49.0", "des": "A class representing a range of ByteKeys.", "code": "Class ByteKeyRange {\n\tjava.lang.Boolean containsKey(ByteKey key); // Returns true if the specified ByteKey is contained within this range.\n\tboolean equals(@Nullable java.lang.Object o);\n\tdouble estimateFractionForKey(ByteKey key); // Returns the fraction of this range [startKey, endKey) that is in the interval [startKey, key).\n\tByteKey getEndKey(); // Returns the ByteKey representing the upper bound of this ByteKeyRange.\n\tByteKey getStartKey(); // Returns the ByteKey representing the lower bound of this ByteKeyRange.\n\tByteKey interpolateKey(double fraction); // Returns a ByteKey key such that [startKey, key) represents approximately the specified fraction of the range [startKey, endKey).\n\tByteKeyRangeTracker newTracker(); // Creates a new tracker for this.\n\tstatic ByteKeyRange of(ByteKey startKey, ByteKey endKey); // Creates a new ByteKeyRange with the given start and end keys.\n\tjava.lang.Boolean overlaps(ByteKeyRange other); // Returns true if the specified ByteKeyRange overlaps this range.\n\tjava.util.List<ByteKey> split(int numSplits); // Returns a list of up to numSplits + 1 ByteKeys in ascending order, where the keys have been interpolated to form roughly equal sub-ranges of this ByteKeyRange, assuming a uniform distribution of keys within this range.\n\tByteKeyRange withEndKey(ByteKey endKey); // Returns new ByteKeyRange like this one, but with the specified end key.\n\tByteKeyRange withStartKey(ByteKey startKey); // Returns new ByteKeyRange like this one, but with the specified start key.\n}"}
{"index": 12829, "repo": "spring-data-mongodb-4.1.2", "des": "Bulk operations for insert/update/remove actions on a collection.", "code": "public interface ReactiveBulkOperations {\n\treactor.core.publisher.Mono<com.mongodb.bulk.BulkWriteResult> execute(); // Execute all bulk operations using the default write concern.\n\tReactiveBulkOperations insert(Object documents); // Add a single insert to the bulk operation.\n\tReactiveBulkOperations insert(List<? extends Object> documents); // Add a list of inserts to the bulk operation.\n\tReactiveBulkOperations remove(List<Query> removes); // Add a list of remove operations to the bulk operation.\n\tReactiveBulkOperations remove(Query remove); // Add a single remove operation to the bulk operation.\n\tdefault ReactiveBulkOperations replaceOne(Query query, Object replacement); // Add a single replace operation to the bulk operation.\n\tReactiveBulkOperations replaceOne(Query query, Object replacement, FindAndReplaceOptions options); // Add a single replace operation to the bulk operation.\n\tReactiveBulkOperations updateMulti(Query query, UpdateDefinition update); // Add a single update to the bulk operation.\n\tReactiveBulkOperations updateOne(Query query, UpdateDefinition update); // Add a single update to the bulk operation.\n\tReactiveBulkOperations upsert(Query query, UpdateDefinition update); // Add a single upsert to the bulk operation.\n}"}
{"index": 7321, "repo": "calcite-core-1.34.0", "des": "Partial implementation of operand type checker.", "code": "Class SqlWindowTableFunction.AbstractOperandMetadata {\n\tSqlOperandCountRange getOperandCountRange(); // Returns the range of operand counts allowed in a call.\n\tboolean isOptional(int i); // Returns whether the ith operand is optional.\n\tList<String> paramNames(); // Returns the names of the parameters.\n\tList<RelDataType> paramTypes(RelDataTypeFactory typeFactory); // Returns the types of the parameters.\n}"}
{"index": 10928, "repo": "spring-data-redis-3.1.2", "des": "Redis cardinality specific operations working on a HyperLogLog multiset.", "code": "public interface ReactiveHyperLogLogOperations<K,V> {\n\treactor.core.publisher.Mono<Long> add(K key, V... values); // Adds the given values to the key.\n\treactor.core.publisher.Mono<Boolean> delete(K key); // Removes the given key.\n\treactor.core.publisher.Mono<Long> size(K... keys); // Gets the current number of elements within the key.\n\treactor.core.publisher.Mono<Boolean> union(K destination, K... sourceKeys); // Merges all values of given sourceKeys into destination key.\n}"}
{"index": 3285, "repo": "hbase-common-3.0.0-alpha-4", "des": "An extended version of Cell that allows CPs manipulate Tags.", "code": "Interface RawCell {\n\tstatic void checkForTagsLength(int tagsLength); // Check the length of tags.\n\tdefault byte[] cloneTags(); // Allows cloning the tags in the cell to a new byte[]\n\tstatic Cell createCell(Cell cell, List<Tag> tags); // Returns A new cell which is having the extra tags also added to it.\n\tdefault Optional<Tag> getTag(byte type); // Returns the specific tag of the given type\n\tdefault Iterator<Tag> getTags(); // Creates a list of tags in the current cell\n}"}
{"index": 1106, "repo": "ignite-core-2.15.0", "des": "EntityFramework cache key: query + versions.", "code": "Class PlatformDotNetEntityFrameworkCacheKey {\n\tint compareTo(@NotNull PlatformDotNetEntityFrameworkCacheKey o);\n\tboolean equals(Object o);\n\tString query(); // Gets the query text.\n\tvoid readBinary(BinaryReader reader); // Reads fields from provided reader.\n\tlong[] versions(); // Gets the entity set versions.\n\tvoid writeBinary(BinaryWriter writer); // Writes fields to provided writer.\n}"}
{"index": 7898, "repo": "commons-jcs3-core-3.1", "des": "An abstract base class to the different implementations.", "code": "Class AbstractCacheEventQueue<K,V> {\n\tvoid addDisposeEvent(); // This adds a dispose event to the queue.\n\tvoid addPutEvent(ICacheElement<K,V> ce); // This adds a put event to the queue.\n\tvoid addRemoveAllEvent(); // This adds a remove all event to the queue.\n\tvoid addRemoveEvent(K key); // This adds a remove event to the queue.\n\tprotected String getCacheName();\n\tlong getListenerId(); // Gets the listenerId attribute of the ICacheEventQueue object\n\tint getWaitToDieMillis(); // Returns the time to wait for events before killing the background thread.\n\tprotected void initialize(ICacheListener<K,V> listener, long listenerId, String cacheName, int maxFailure, int waitBeforeRetry); // Initializes the queue.\n\tboolean isWorking(); // A Queue is working unless it has reached its max failure count.\n\tprotected abstract void put(AbstractCacheEventQueue.AbstractCacheEvent event); // Adds an event to the queue.\n\tvoid setWaitToDieMillis(int wtdm); // Sets the time to wait for events before killing the background thread.\n\tvoid setWorking(boolean b); // This means that the queue is functional.\n}"}
{"index": 18668, "repo": "opencms-gwt-15.0", "des": "The context menu entry used for opening the \"alias editor\" dialog.", "code": "Class CmsSeoMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 11381, "repo": "spring-context-6.0.11", "des": "Metadata indicating that instances of an annotated class are to be registered with a JMX server.", "code": "public class ManagedResource extends AbstractJmxAttribute {\n\tString getLogFile();\n\tString getObjectName(); // Return the JMX ObjectName of this managed resource.\n\tString getPersistLocation();\n\tString getPersistName();\n\tint getPersistPeriod();\n\tString getPersistPolicy();\n\tboolean isLog();\n\tvoid setLog(boolean log);\n\tvoid setLogFile(String logFile);\n\tvoid setObjectName(String objectName); // Set the JMX ObjectName of this managed resource.\n\tvoid setPersistLocation(String persistLocation);\n\tvoid setPersistName(String persistName);\n\tvoid setPersistPeriod(int persistPeriod);\n\tvoid setPersistPolicy(String persistPolicy);\n}"}
{"index": 2556, "repo": "exoplayer-r2.3.1", "des": "Reads section data packets and feeds the whole sections to a given SectionPayloadReader.", "code": "Class SectionReader {\n\tvoid consume(ParsableByteArray data, boolean payloadUnitStartIndicator); // Consumes the payload of a TS packet.\n\tvoid init(TimestampAdjuster timestampAdjuster, ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the payload reader.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 4736, "repo": "hadoop-common-3.3.4", "des": "This is a wrap class of a ReentrantLock.", "code": "Class AutoCloseableLock {\n\tAutoCloseableLock acquire(); // A wrapper method that makes a call to lock() of the underlying ReentrantLock object.\n\tvoid close(); // Attempts to release the lock by making a call to release().\n\tCondition newCondition(); // See ReentrantLock.newCondition().\n\tvoid release(); // A wrapper method that makes a call to unlock() of the underlying ReentrantLock object.\n\tboolean tryLock(); // A wrapper method that makes a call to tryLock() of the underlying Lock object.\n}"}
{"index": 17538, "repo": "pulsar-broker-3.0.0", "des": "Load shedding strategy that unloads any broker that exceeds the average resource utilization of all brokers by a configured threshold.", "code": "public class ThresholdShedder extends Object implements LoadSheddingStrategy {\n\tcom.google.common.collect.Multimap<String,String> findBundlesForUnloading(LoadData loadData, ServiceConfiguration conf); // Recommend that all of the returned bundles be unloaded.\n\tvoid onActiveBrokersChange(Set<String> newBrokers); // Triggered when active broker changes.\n}"}
{"index": 17407, "repo": "groovy-4.0.13", "des": "Static compilation AST node metadata keys.", "code": "public enum StaticCompilationMetadataKeys extends Enum<StaticCompilationMetadataKeys> {\n\tstatic StaticCompilationMetadataKeys valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic StaticCompilationMetadataKeys[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12809, "repo": "spring-data-mongodb-4.1.2", "des": "A PlatformTransactionManager implementation that manages ClientSession based transactions for a single MongoDatabaseFactory.", "code": "public class MongoTransactionManager extends AbstractPlatformTransactionManager implements ResourceTransactionManager, InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void doBegin(Object transaction, TransactionDefinition definition);\n\tprotected void doCleanupAfterCompletion(Object transaction);\n\tprotected void doCommit(MongoTransactionManager.MongoTransactionObject transactionObject); // Customization hook to perform an actual commit of the given transaction. If a commit operation encounters an error, the MongoDB driver throws a MongoException holding error labels.\n\tprotected final void doCommit(DefaultTransactionStatus status);\n\tprotected Object doGetTransaction();\n\tprotected void doResume(Object transaction, Object suspendedResources);\n\tprotected void doRollback(DefaultTransactionStatus status);\n\tprotected void doSetRollbackOnly(DefaultTransactionStatus status);\n\tprotected Object doSuspend(Object transaction);\n\tMongoDatabaseFactory getDbFactory(); // Get the MongoDatabaseFactory that this instance manages transactions for.\n\tMongoDatabaseFactory getResourceFactory();\n\tprotected boolean isExistingTransaction(Object transaction);\n\tvoid setDbFactory(MongoDatabaseFactory dbFactory); // Set the MongoDatabaseFactory that this instance should manage transactions for.\n\tvoid setOptions(com.mongodb.TransactionOptions options); // Set the TransactionOptions to be applied when starting transactions.\n}"}
{"index": 16363, "repo": "spring-data-jpa-3.1.2", "des": "JPA specific generic repository factory.", "code": "public class JpaRepositoryFactory extends RepositoryFactorySupport {\n\t<T, ID> JpaEntityInformation<T,ID> getEntityInformation(Class<T> domainClass);\n\tprotected ProjectionFactory getProjectionFactory(ClassLoader classLoader, BeanFactory beanFactory);\n\tprotected Optional<QueryLookupStrategy> getQueryLookupStrategy(QueryLookupStrategy.Key key, QueryMethodEvaluationContextProvider evaluationContextProvider);\n\tprotected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata);\n\tprotected RepositoryComposition.RepositoryFragments getRepositoryFragments(RepositoryMetadata metadata);\n\tprotected RepositoryComposition.RepositoryFragments getRepositoryFragments(RepositoryMetadata metadata, jakarta.persistence.EntityManager entityManager, EntityPathResolver resolver, CrudMethodMetadata crudMethodMetadata); // Creates RepositoryComposition.RepositoryFragments based on RepositoryMetadata to add JPA-specific extensions.\n\tprotected final JpaRepositoryImplementation<?,?> getTargetRepository(RepositoryInformation information);\n\tprotected JpaRepositoryImplementation<?,?> getTargetRepository(RepositoryInformation information, jakarta.persistence.EntityManager entityManager); // Callback to create a JpaRepository instance with the given EntityManager\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setBeanFactory(BeanFactory beanFactory); // If a BeanFactory is being set, this is clearly in a Spring context, and so we can capture the QueryRewriterProvider being a BeanFactoryQueryRewriterProvider.\n\tvoid setEntityPathResolver(EntityPathResolver entityPathResolver); // Configures the EntityPathResolver to be used.\n\tvoid setEscapeCharacter(EscapeCharacter escapeCharacter); // Configures the escape character to be used for like-expressions created for derived queries.\n\tvoid setQueryMethodFactory(JpaQueryMethodFactory queryMethodFactory); // Configures the JpaQueryMethodFactory to be used.\n\tvoid setQueryRewriterProvider(QueryRewriterProvider queryRewriterProvider); // Configures the QueryRewriterProvider to be used.\n}"}
{"index": 14270, "repo": "wicket-core-10.0.0-M1", "des": "Wicket uses a streaming XML parser to read the markup.", "code": "public interface IMarkupFilter {\n\tIMarkupFilter getNextFilter(); // IMarkupFilters are usually chained with the last filter retrieving the elements from the XML parser.\n\tMarkupElement nextElement(); // Get the next MarkupElement from the parent MarkupFilter and handle it if the specific filter criteria are met.\n\tvoid postProcess(Markup markup); // Called after all filters have been processed.\n\tvoid setNextFilter(IMarkupFilter parent); // Set parent filter.\n}"}
{"index": 7429, "repo": "mahout-math-0.13.0", "des": "Open hash map from long keys to long values.", "code": "Class OpenLongLongHashMap {\n\tlong adjustOrPutValue(long key, long newValue, long incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(long key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(long value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(LongProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(LongLongProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tlong get(long key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(long key);\n\tprotected int indexOfKey(long key);\n\tprotected int indexOfValue(long value);\n\tIterator<OpenLongLongHashMap.MapElement> iterator();\n\tvoid keys(LongArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(LongLongProcedure condition, LongArrayList keyList, LongArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(long key, long value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(long key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(LongArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 11968, "repo": "jena-core-4.9.0", "des": "Interface defining an individual in which all members of a collection are declared pair-wise disjoint.", "code": "public interface AllDifferent extends OntResource {\n\tvoid addDistinctMember(Resource res); // Add the given individual to the list of distinct members of this AllDifferent declaration.\n\tvoid addDistinctMembers(Iterator<? extends Resource> individuals); // Add the given individuals to the list of distinct members of this AllDifferent declaration.\n\tRDFList getDistinctMembers(); // Answer the list of distinct members for this AllDifferent declaration.\n\tboolean hasDistinctMember(Resource res); // Answer true if this AllDifferent declaration includes res as one of the distinct individuals.\n\tExtendedIterator<? extends OntResource> listDistinctMembers(); // Answer an iterator over all of the individuals that are declared to be distinct by this AllDifferent declaration.\n\tvoid removeDistinctMember(Resource res); // Remove the given resource from the list of distinct individuals.\n\tvoid setDistinctMembers(RDFList members); // Assert that the list of distinct individuals in this AllDifferent declaration is the given list.\n}"}
{"index": 7459, "repo": "mahout-math-0.13.0", "des": "If f(x, 0) = x and f(0, y) = 0 the zeros in x and y don't matter and we can iterate through the nonzeros in both x and y.", "code": "Class VectorBinaryAssign.AssignIterateIntersection {\n\tVector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tdouble estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tboolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 13512, "repo": "spring-messaging-6.0.11", "des": "Resolve for @DestinationVariable method parameters.", "code": "public class DestinationVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver {\n\tprotected AbstractNamedValueMethodArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueMethodArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter, Message<?> message); // Invoked when a value is required, but AbstractNamedValueMethodArgumentResolver.resolveArgumentInternal(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>, java.lang.String) returned null and there is no default value.\n\tprotected Object resolveArgumentInternal(org.springframework.core.MethodParameter parameter, Message<?> message, String name); // Resolves the given parameter type and value name into an argument value.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 6665, "repo": "artemis-odb-2.3.0", "des": "Process a subset of entities every x ticks.", "code": "Class IntervalEntityProcessingSystem {\n\tprotected abstract void process(Entity e); // Process a entity this system is interested in.\n\tprotected void processEntities(Bag<Entity> entities);\n\tprotected void processSystem(); // Process the system.\n}"}
{"index": 18014, "repo": "spring-ws-core-4.0.5", "des": "A sub-class of WsConfigurationSupport that detects and delegates to all beans of type WsConfigurer allowing them to customize the configuration provided by WsConfigurationSupport.", "code": "@Configuration public class DelegatingWsConfiguration extends WsConfigurationSupport {\n\tprotected void addArgumentResolvers(List<MethodArgumentResolver> argumentResolvers); // Add custom MethodArgumentResolvers to use in addition to the ones registered by default.\n\tprotected void addInterceptors(List<EndpointInterceptor> interceptors); // Template method to add endpoint interceptors.\n\tprotected void addReturnValueHandlers(List<MethodReturnValueHandler> returnValueHandlers); // Add custom MethodReturnValueHandlers in addition to the ones registered by default.\n\tvoid setConfigurers(List<WsConfigurer> configurers);\n}"}
{"index": 13597, "repo": "spring-messaging-6.0.11", "des": "TcpMessageCodec for STOMP, delegating to StompDecoder and StompEncoder.", "code": "public class StompTcpMessageCodec extends Object implements TcpMessageCodec<byte[]> {\n\tList<Message<byte[]>> decode(ByteBuffer nioBuffer); // Decode the input ByteBuffer into one or more Messages.\n\tByteBuffer encode(Message<byte[]> message); // Encode the given Message to the output ByteBuffer.\n}"}
{"index": 14535, "repo": "spring-security-web-6.1.2", "des": "A SecurityContextRepository implementation which stores the security context in the HttpSession between requests.", "code": "public class HttpSessionSecurityContextRepository extends Object implements SecurityContextRepository {\n\tboolean containsContext(jakarta.servlet.http.HttpServletRequest request); // Allows the repository to be queried as to whether it contains a security context for the current request.\n\tprotected org.springframework.security.core.context.SecurityContext generateNewContext(); // By default, calls SecurityContextHolder.createEmptyContext() to obtain a new context (there should be no context present in the holder when this method is called).\n\torg.springframework.security.core.context.SecurityContext loadContext(HttpRequestResponseHolder requestResponseHolder); // Gets the security context for the current request (if available) and returns it.\n\torg.springframework.security.core.context.DeferredSecurityContext loadDeferredContext(jakarta.servlet.http.HttpServletRequest request); // Defers loading the SecurityContext using the HttpServletRequest until it is needed by the application.\n\tvoid saveContext(org.springframework.security.core.context.SecurityContext context, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Stores the security context on completion of a request.\n\tvoid setAllowSessionCreation(boolean allowSessionCreation); // If set to true (the default), a session will be created (if required) to store the security context if it is determined that its contents are different from the default empty context value.\n\tvoid setDisableUrlRewriting(boolean disableUrlRewriting); // Allows the use of session identifiers in URLs to be disabled.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy strategy); // Sets the SecurityContextHolderStrategy to use.\n\tvoid setSpringSecurityContextKey(String springSecurityContextKey); // Allows the session attribute name to be customized for this repository instance.\n\tvoid setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver trustResolver); // Sets the AuthenticationTrustResolver to be used.\n}"}
{"index": 9706, "repo": "commons-math3-3.6.1", "des": "Specification for indicating that some operation applies before or after a given index.", "code": "Enum MathArrays.Position {\n\tstatic MathArrays.Position valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic MathArrays.Position[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4279, "repo": "beam-sdks-java-core-2.49.0", "des": "A Source that reads a finite amount of input and, because of that, supports some additional operations.", "code": "Class BoundedSource<T> {\n\tabstract BoundedSource.BoundedReader<T> createReader(PipelineOptions options); // Returns a new BoundedSource.BoundedReader that reads from this source.\n\tabstract long getEstimatedSizeBytes(PipelineOptions options); // An estimate of the total size (in bytes) of the data that would be read from this source.\n\tabstract java.util.List<? extends BoundedSource<T>> split(long desiredBundleSizeBytes, PipelineOptions options); // Splits the source into bundles of approximately desiredBundleSizeBytes.\n}"}
{"index": 13999, "repo": "spring-retry-2.0.2", "des": "Strategy interface to control back off between attempts in a single retry operation.", "code": "public interface BackOffPolicy {\n\tvoid backOff(BackOffContext backOffContext); // Back off/pause in an implementation-specific fashion.\n\tBackOffContext start(RetryContext context); // Start a new block of back off operations.\n}"}
{"index": 6983, "repo": "calcite-core-1.34.0", "des": "Reads a model and creates schema objects accordingly.", "code": "Class ModelHandler {\n\tstatic void addFunctions(SchemaPlus schema, @Nullable String functionName, List<String> path, String className, @Nullable String methodName, boolean upCase); // Creates and validates a ScalarFunctionImpl, and adds it to a schema.\n\tprotected Map<String,Object> operandMap(@Nullable JsonSchema jsonSchema, @Nullable Map<String,Object> operand); // Adds extra entries to an operand to a custom schema.\n\tvoid visit(JsonColumn jsonColumn);\n\tvoid visit(JsonCustomSchema jsonSchema);\n\tvoid visit(JsonCustomTable jsonTable);\n\tvoid visit(JsonFunction jsonFunction);\n\tvoid visit(JsonJdbcSchema jsonSchema);\n\tvoid visit(JsonLattice jsonLattice);\n\tvoid visit(JsonMapSchema jsonSchema);\n\tvoid visit(JsonMaterialization jsonMaterialization);\n\tvoid visit(JsonMeasure jsonMeasure);\n\tvoid visit(JsonRoot jsonRoot);\n\tvoid visit(JsonTile jsonTile);\n\tvoid visit(JsonType jsonType);\n\tvoid visit(JsonView jsonView);\n}"}
{"index": 8735, "repo": "hadoop-yarn-common-3.3.6", "des": "A simple unbuffered generic hamlet implementation.", "code": "Class HamletImpl {\n\tPrintWriter getWriter();\n\tprotected void indent(EnumSet<HamletImpl.EOpt> opts);\n\tint nestLevel();\n\tstatic String[] parseSelector(String selector); // Parse selector into id and classes\n\tprotected void printAttr(String name, String value);\n\tprotected void printEndTag(String name, EnumSet<HamletImpl.EOpt> opts);\n\tprotected void printStartTag(String name, EnumSet<HamletImpl.EOpt> opts);\n\t<T extends HamletSpec.__>HamletImpl.Generic<T> root(String name);\n\t<T extends HamletSpec.__>HamletImpl.Generic<T> root(String name, EnumSet<HamletImpl.EOpt> opts); // Create a root-level generic element.\n\tstatic <E extends HamletSpec.LINK>E setLinkHref(E e, String href);\n\tstatic <E extends HamletSpec.SCRIPT>E setScriptSrc(E e, String src);\n\tstatic <E extends HamletSpec.CoreAttrs>E setSelector(E e, String selector); // Set id and/or class attributes for an element.\n\tvoid setWasInline(boolean state);\n\tprotected void subView(Class<? extends SubView> cls); // Sub-classes should override this to do something interesting.\n\tboolean wasInline();\n}"}
{"index": 17181, "repo": "spring-integration-core-6.1.2", "des": "An Apache Avro transformer for generated SpecificRecord objects.", "code": "public class SimpleToAvroTransformer extends AbstractTransformer {\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to provide the transformation logic.\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setTypeExpression(org.springframework.expression.Expression expression); // Set the expression to evaluate against the message to determine the value for the AvroHeaders.TYPE header.\n\tvoid setTypeExpressionString(String expression); // Set the expression to evaluate against the message to determine the value for the AvroHeaders.TYPE header.\n\tSimpleToAvroTransformer typeExpression(String expression); // Set the expression to evaluate against the message to determine the value for the AvroHeaders.TYPE header.\n\tSimpleToAvroTransformer typeExpression(org.springframework.expression.Expression expression); // Set the expression to evaluate against the message to determine the value for the AvroHeaders.TYPE header.\n}"}
{"index": 6566, "repo": "exoplayer-core-2.9.6", "des": "Extracts data from the RawCC container format.", "code": "Class RawCcExtractor {\n\tvoid init(ExtractorOutput output); // Initializes the extractor with an ExtractorOutput.\n\tint read(ExtractorInput input, PositionHolder seekPosition); // Extracts data read from a provided ExtractorInput.\n\tvoid release(); // Releases all kept resources.\n\tvoid seek(long position, long timeUs); // Notifies the extractor that a seek has occurred.\n\tboolean sniff(ExtractorInput input); // Returns whether this extractor can extract samples from the ExtractorInput, which must provide data from the start of the stream.\n}"}
{"index": 10674, "repo": "groovy-all-4.0.13", "des": "Initializes the variable scopes for an AST.", "code": "public class VariableScopeVisitor extends ClassCodeVisitorSupport {\n\tprotected SourceUnit getSourceUnit();\n\tvoid prepareVisit(ClassNode node); // Sets the current class node context.\n\tvoid visitBinaryExpression(BinaryExpression expression);\n\tvoid visitBlockStatement(BlockStatement statement);\n\tvoid visitCatchStatement(CatchStatement statement);\n\tvoid visitClass(ClassNode node); // Visit a ClassNode.\n\tvoid visitClosureExpression(ClosureExpression expression);\n\tvoid visitConstructorCallExpression(ConstructorCallExpression expression);\n\tprotected void visitConstructorOrMethod(MethodNode node, boolean isConstructor);\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n\tvoid visitField(FieldNode node); // Visit a FieldNode.\n\tvoid visitFieldExpression(FieldExpression expression);\n\tvoid visitForLoop(ForStatement statement);\n\tvoid visitIfElse(IfStatement statement);\n\tvoid visitMethodCallExpression(MethodCallExpression expression);\n\tvoid visitProperty(PropertyNode node); // Visit a PropertyNode.\n\tvoid visitPropertyExpression(PropertyExpression expression);\n\tvoid visitVariableExpression(VariableExpression expression);\n}"}
{"index": 8635, "repo": "avro-1.11.2", "des": "Base class for MessageEncoder implementations that provides default implementations for most of the DatumEncoder API.", "code": "Class MessageDecoder.BaseDecoder<D> {\n\tD decode(byte[] encoded); // Deserialize a single datum from a byte array.\n\tD decode(byte[] encoded, D reuse); // Deserialize a single datum from a byte array.\n\tD decode(ByteBuffer encoded); // Deserialize a single datum from a ByteBuffer.\n\tD decode(ByteBuffer encoded, D reuse); // Deserialize a single datum from a ByteBuffer.\n\tD decode(InputStream stream); // Deserialize a single datum from an InputStream.\n}"}
{"index": 8503, "repo": "commons-io-2.13.0", "des": "Builds a new DeferredFileOutputStream instance.", "code": "Class DeferredFileOutputStream.Builder {\n\tDeferredFileOutputStream get(); // Constructs a new instance.\n\tDeferredFileOutputStream.Builder setDirectory(File directory); // Sets the temporary file directory.\n\tDeferredFileOutputStream.Builder setOutputFile(File outputFile); // Sets the file to which data is saved beyond the threshold.\n\tDeferredFileOutputStream.Builder setPrefix(String prefix); // Sets the prefix to use for the temporary file.\n\tDeferredFileOutputStream.Builder setSuffix(String suffix); // Sets the suffix to use for the temporary file.\n\tDeferredFileOutputStream.Builder setThreshold(int threshold); // Sets the number of bytes at which to trigger an event.\n}"}
{"index": 11829, "repo": "spring-kafka-3.0.9", "des": "A BackOffHandler that pauses the container for the backoff.", "code": "public class ContainerPausingBackOffHandler extends Object implements BackOffHandler {\n\tvoid onNextBackOff(MessageListenerContainer container, Exception exception, long nextBackOff); // Perform the next back off.\n\tvoid onNextBackOff(MessageListenerContainer container, org.apache.kafka.common.TopicPartition partition, long nextBackOff); // Perform the next back off for a partition.\n}"}
{"index": 15140, "repo": "spring-data-elasticsearch-5.1.2", "des": "Converter to write a GeoPoint to Map using lat/long properties.", "code": "@WritingConverter public static enum GeoConverters.GeoPointToMapConverter extends Enum<GeoConverters.GeoPointToMapConverter> implements Converter<GeoPoint,Map<String,Object>> {\n\tMap<String,Object> convert(GeoPoint source);\n\tstatic GeoConverters.GeoPointToMapConverter valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic GeoConverters.GeoPointToMapConverter[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 2717, "repo": "commons-dbcp2-2.9.0", "des": "LocalXAResource is a fake XAResource for non-XA connections.", "code": "Class LocalXAConnectionFactory.LocalXAResource {\n\tvoid commit(Xid xid, boolean flag); // Commits the transaction and restores the original auto commit setting.\n\tvoid end(Xid xid, int flag); // This method does nothing.\n\tvoid forget(Xid xid); // Clears the currently associated transaction if it is the specified xid.\n\tint getTransactionTimeout(); // Always returns 0 since we have no way to set a transaction timeout on a JDBC connection.\n\tXid getXid(); // Gets the current xid of the transaction branch associated with this XAResource.\n\tboolean isSameRM(XAResource xaResource); // Returns true if the specified XAResource == this XAResource.\n\tint prepare(Xid xid); // This method does nothing since the LocalXAConnection does not support two-phase-commit.\n\tXid[] recover(int flag); // Always returns a zero length Xid array.\n\tvoid rollback(Xid xid); // Rolls back the transaction and restores the original auto commit setting.\n\tboolean setTransactionTimeout(int transactionTimeout); // Always returns false since we have no way to set a transaction timeout on a JDBC connection.\n\tvoid start(Xid xid, int flag); // Signals that a the connection has been enrolled in a transaction.\n}"}
{"index": 8467, "repo": "commons-io-2.13.0", "des": "Proxy stream that closes and discards the underlying stream as soon as the end of input has been reached or when the stream is explicitly closed.", "code": "Class AutoCloseInputStream {\n\tprotected void afterRead(int n); // Automatically closes the stream if the end of stream was reached.\n\tstatic AutoCloseInputStream.Builder builder(); // Constructs a new AutoCloseInputStream.Builder.\n\tvoid close(); // Closes the underlying input stream and replaces the reference to it with a ClosedInputStream instance.\n\tprotected void finalize(); // Ensures that the stream is closed before it gets garbage-collected.\n}"}
{"index": 231, "repo": "commons-collections4-4.4", "des": "A Map implementation that holds a single item and is fixed size.", "code": "Class SingletonMap<K,V> {\n\tvoid clear(); // Unsupported operation.\n\tSingletonMap<K,V> clone(); // Clones the map without cloning the key or value.\n\tboolean containsKey(Object key); // Checks whether the map contains the specified key.\n\tboolean containsValue(Object value); // Checks whether the map contains the specified value.\n\tSet<Map.Entry<K,V>> entrySet(); // Gets the entrySet view of the map.\n\tboolean equals(Object obj); // Compares this map with another.\n\tK firstKey(); // Gets the first (and only) key in the map.\n\tV get(Object key); // Gets the value mapped to the key specified.\n\tK getKey(); // Gets the key.\n\tV getValue(); // Gets the value.\n\tboolean isEmpty(); // Checks whether the map is currently empty, which it never is.\n\tprotected boolean isEqualKey(Object key); // Compares the specified key to the stored key.\n\tprotected boolean isEqualValue(Object value); // Compares the specified value to the stored value.\n\tboolean isFull(); // Is the map currently full, always true.\n\tSet<K> keySet(); // Gets the unmodifiable keySet view of the map.\n\tK lastKey(); // Gets the last (and only) key in the map.\n\tOrderedMapIterator<K,V> mapIterator(); // Obtains an OrderedMapIterator over the map.\n\tint maxSize(); // Gets the maximum size of the map, always 1.\n\tK nextKey(K key); // Gets the next key after the key specified, always null.\n\tK previousKey(K key); // Gets the previous key before the key specified, always null.\n\tV put(K key, V value); // Puts a key-value mapping into this map where the key must match the existing key.\n\tvoid putAll(Map<? extends K,? extends V> map); // Puts the values from the specified map into this map.\n\tV remove(Object key); // Unsupported operation.\n\tV setValue(V value); // Sets the value.\n\tint size(); // Gets the size of the map, always 1.\n\tCollection<V> values(); // Gets the unmodifiable values view of the map.\n}"}
{"index": 3441, "repo": "preflight-3.0.0-beta1", "des": "This class is used to parse a glyph of a Type3 font program.", "code": "Class PreflightType3Stream {\n\tImage createImage(); // This will parse a type3 stream and create an image from it.\n\tfloat getWidth();\n\tprotected void processOperator(org.apache.pdfbox.contentstream.operator.Operator operator, List<org.apache.pdfbox.cos.COSBase> operands); // This is used to handle an operation.\n\tvoid showType3Character(org.apache.pdfbox.pdmodel.font.PDType3CharProc charProc);\n}"}
{"index": 8451, "repo": "hadoop-aws-3.3.6", "des": "This is a CLI tool for the select operation, which is available through the S3Guard command.", "code": "Class SelectTool {\n\tstatic double bandwidthMBs(long bytes, long durationMillisNS); // Work out the bandwidth in MB/s.\n\tlong getBytesRead();\n\tlong getLinesRead(); // Number of lines read, when printing to the console.\n\tString getName(); // Return sub-command name.\n\torg.apache.hadoop.util.OperationDuration getSelectDuration();\n\tString getUsage();\n\tint run(String[] args, PrintStream out); // Execute the select operation.\n}"}
{"index": 8356, "repo": "hive-common-4.0.0-alpha-2", "des": "Encapsulates data about GC pauses measured at the specific timestamp.", "code": "Class GcTimeMonitor.GcData {\n\tGcTimeMonitor.GcData clone();\n\tlong getAccumulatedGcTimeMs(); // Returns accumulated GC time since this JVM started.\n\tlong getGcMonitorRunTimeMs(); // Returns the time since the start of the associated GcTimeMonitor.\n\tint getGcTimePercentage(); // Returns the percentage (0..100) of time that the JVM spent in GC pauses within the observation window of the associated GcTimeMonitor.\n}"}
{"index": 16547, "repo": "spring-batch-infrastructure-5.0.2", "des": "Sybase implementation of a PagingQueryProvider using database specific features.", "code": "public class SybasePagingQueryProvider extends SqlWindowingPagingQueryProvider {\n\tString generateFirstPageQuery(int pageSize); // Method generating the query string to be used for retrieving the first page.\n\tString generateRemainingPagesQuery(int pageSize); // Method generating the query string to be used for retrieving the pages following the first page.\n\tprotected Object getSubQueryAlias();\n}"}
{"index": 6723, "repo": "lucene-analyzers-common-8.11.2", "des": "Abstract parent class for analysis factories that create TokenFilter instances.", "code": "Class TokenFilterFactory {\n\tstatic Set<String> availableTokenFilters(); // returns a list of all available tokenfilter names from context classpath\n\tabstract TokenStream create(TokenStream input); // Transform the specified input TokenStream\n\tstatic String findSPIName(Class<? extends TokenFilterFactory> serviceClass); // looks up a SPI name for the specified token filter factory\n\tstatic TokenFilterFactory forName(String name, Map<String,String> args); // looks up a tokenfilter by name from context classpath\n\tstatic Class<? extends TokenFilterFactory> lookupClass(String name); // looks up a tokenfilter class by name from context classpath\n\tTokenStream normalize(TokenStream input); // Normalize the specified input TokenStream While the default implementation returns input unchanged, filters that should be applied at normalization time can delegate to create method.\n\tstatic void reloadTokenFilters(ClassLoader classloader); // Reloads the factory list from the given ClassLoader.\n}"}
{"index": 13882, "repo": "spring-webflux-6.0.11", "des": "Configures FreeMarker for web usage via the \"configLocation\" and/or \"freemarkerSettings\" and/or \"templateLoaderPath\" properties.", "code": "public class FreeMarkerConfigurer extends org.springframework.ui.freemarker.FreeMarkerConfigurationFactory implements FreeMarkerConfig, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware {\n\tvoid afterPropertiesSet(); // Initialize FreeMarkerConfigurationFactory's Configuration if not overridden by a pre-configured FreeMarker Configuration.\n\tfreemarker.template.Configuration getConfiguration(); // Return the Configuration object wrapped by this bean.\n\tprotected void postProcessTemplateLoaders(List<freemarker.cache.TemplateLoader> templateLoaders); // This implementation registers an additional ClassTemplateLoader for the Spring-provided macros, added to the end of the list.\n\tvoid setConfiguration(freemarker.template.Configuration configuration); // Set a pre-configured Configuration to use for the FreeMarker web config, e.g.\n}"}
{"index": 13610, "repo": "spring-messaging-6.0.11", "des": "MessageHandler that handles user registry broadcasts from other application servers and periodically broadcasts the content of the local user registry.", "code": "public class UserRegistryMessageHandler extends Object implements MessageHandler, org.springframework.context.ApplicationListener<BrokerAvailabilityEvent> {\n\tString getBroadcastDestination(); // Return the configured destination for broadcasting UserRegistry information.\n\tlong getRegistryExpirationPeriod(); // Return the configured registry expiration period.\n\tvoid handleMessage(Message<?> message); // Handle the given message.\n\tvoid onApplicationEvent(BrokerAvailabilityEvent event);\n\tvoid setRegistryExpirationPeriod(long milliseconds); // Configure the amount of time (in milliseconds) before a remote user registry snapshot is considered expired.\n}"}
{"index": 11174, "repo": "wicket-extensions-10.0.0-M1", "des": "Model adapter that makes working with models for checkboxes easier.", "code": "public abstract class AbstractCheckBoxModel extends Object implements org.apache.wicket.model.IModel<Boolean> {\n\tfinal Boolean getObject();\n\tabstract boolean isSelected();\n\tabstract void select(); // Called when checkbox has been selected\n\tfinal void setObject(Boolean object);\n\tabstract void unselect(); // Called when checkbox is unselected\n}"}
{"index": 2659, "repo": "mahout-core-14.1", "des": "Open hash map from float keys to long values.", "code": "Class OpenFloatLongHashMap {\n\tlong adjustOrPutValue(float key, long newValue, long incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(float key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(long value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(FloatProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(FloatLongProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tlong get(float key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(float key);\n\tprotected int indexOfKey(float key);\n\tprotected int indexOfValue(long value);\n\tIterator<OpenFloatLongHashMap.MapElement> iterator();\n\tvoid keys(FloatArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(FloatLongProcedure condition, FloatArrayList keyList, LongArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(float key, long value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(float key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(LongArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 13649, "repo": "spring-webmvc-6.0.11", "des": "Base class for WebApplicationInitializer implementations that register a DispatcherServlet in the servlet context.", "code": "public abstract class AbstractDispatcherServletInitializer extends org.springframework.web.context.AbstractContextLoaderInitializer {\n\tprotected FrameworkServlet createDispatcherServlet(org.springframework.web.context.WebApplicationContext servletAppContext); // Create a DispatcherServlet (or other kind of FrameworkServlet-derived dispatcher) with the specified WebApplicationContext.\n\tprotected abstract org.springframework.web.context.WebApplicationContext createServletApplicationContext(); // Create a servlet application context to be provided to the DispatcherServlet.\n\tprotected void customizeRegistration(ServletRegistration.Dynamic registration); // Optionally perform further registration customization once registerDispatcherServlet(ServletContext) has completed.\n\tprotected org.springframework.context.ApplicationContextInitializer<?>[] getServletApplicationContextInitializers(); // Specify application context initializers to be applied to the servlet-specific application context that the DispatcherServlet is being created with.\n\tprotected Filter[] getServletFilters(); // Specify filters to add and map to the DispatcherServlet.\n\tprotected abstract String[] getServletMappings();\n\tprotected String getServletName(); // Return the name under which the DispatcherServlet will be registered.\n\tprotected boolean isAsyncSupported(); // A single place to control the asyncSupported flag for the DispatcherServlet and all filters added via getServletFilters().\n\tvoid onStartup(ServletContext servletContext);\n\tprotected void registerDispatcherServlet(ServletContext servletContext); // Register a DispatcherServlet against the given servlet context.\n\tprotected FilterRegistration.Dynamic registerServletFilter(ServletContext servletContext, Filter filter); // Add the given filter to the ServletContext and map it to the DispatcherServlet as follows: a default filter name is chosen based on its concrete type the asyncSupported flag is set depending on the return value of asyncSupported a filter mapping is created with dispatcher types REQUEST, FORWARD, INCLUDE, and conditionally ASYNC depending on the return value of asyncSupported\n}"}
{"index": 10433, "repo": "groovy-all-4.0.13", "des": "A base class dealing with common HTTP servlet API housekeeping aspects.", "code": "public abstract class AbstractHttpServlet extends HttpServlet implements ResourceConnector {\n\tprotected String applyResourceNameMatcher(String uri);\n\tprotected void generateNamePrefixOnce();\n\tURLConnection getResourceConnection(String name); // Interface method for ResourceContainer.\n\tprotected String getScriptUri(HttpServletRequest request); // Returns the include-aware uri of the script or template file.\n\tprotected File getScriptUriAsFile(HttpServletRequest request); // Parses the http request for the real script or template source file.\n\tvoid init(ServletConfig config); // Overrides the generic init method to set some debug flags.\n\tprotected String removeNamePrefix(String name);\n\tprotected void setVariables(ServletBinding binding); // Override this method to set your variables to the Groovy binding.\n}"}
{"index": 17260, "repo": "groovy-4.0.13", "des": "Represents the variable bindings of a script which can be altered from outside the script object or created outside of a script and passed into it.", "code": "public class Binding extends GroovyObjectSupport {\n\tObject getProperty(String property); // Overloaded to make variables appear as bean properties or via the subscript operator\n\tObject getVariable(String name);\n\tMap getVariables();\n\tboolean hasVariable(String name); // Simple check for whether the binding contains a particular variable or not.\n\tvoid removeVariable(String name); // remove the variable with the specified name\n\tvoid setProperty(String property, Object newValue); // Overloaded to make variables appear as bean properties or via the subscript operator\n\tvoid setVariable(String name, Object value); // Sets the value of the given variable\n}"}
{"index": 14674, "repo": "spring-data-commons-3.1.2", "des": "Support class to implement auditing handlers.", "code": "public abstract class AuditingHandlerSupport extends Object {\n\tprotected final boolean isAuditable(Object source); // Returns whether the given source is considered to be auditable in the first place.\n\tvoid setDateTimeForNow(boolean dateTimeForNow); // Setter do determine if Auditable.setCreatedDate(TemporalAccessor)} and Auditable.setLastModifiedDate(TemporalAccessor) shall be filled with the current Java time.\n\tvoid setDateTimeProvider(DateTimeProvider dateTimeProvider); // Sets the DateTimeProvider to be used to determine the dates to be set.\n\tvoid setModifyOnCreation(boolean modifyOnCreation); // Set this to true if you want to treat entity creation as modification and thus setting the current date as modification date during creation, too.\n}"}
{"index": 3771, "repo": "commons-pool2-2.11.1", "des": "Provides all possible states of a PooledObject.", "code": "Enum PooledObjectState {\n\tstatic PooledObjectState valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PooledObjectState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13204, "repo": "spring-test-6.0.11", "des": "Factory for assertions on the request content using JsonPath expressions.", "code": "public class JsonPathRequestMatchers extends Object {\n\tRequestMatcher doesNotExist(); // Evaluate the JSON path expression against the request content and assert that a value does not exist at the given path.\n\tRequestMatcher doesNotHaveJsonPath(); // Evaluate the JSON path expression against the supplied content and assert that a value, including null values, does not exist at the given path.\n\tRequestMatcher exists(); // Evaluate the JSON path expression against the request content and assert that a non-null value exists at the given path.\n\tRequestMatcher hasJsonPath(); // Evaluate the JSON path expression against the response content and assert that a value, possibly null, exists.\n\tRequestMatcher isArray(); // Evaluate the JSON path expression against the request content and assert that the result is an array.\n\tRequestMatcher isBoolean(); // Evaluate the JSON path expression against the request content and assert that the result is a Boolean.\n\tRequestMatcher isEmpty(); // Evaluate the JSON path expression against the request content and assert that an empty value exists at the given path.\n\tRequestMatcher isMap(); // Evaluate the JSON path expression against the request content and assert that the result is a Map.\n\tRequestMatcher isNotEmpty(); // Evaluate the JSON path expression against the request content and assert that a non-empty value exists at the given path.\n\tRequestMatcher isNumber(); // Evaluate the JSON path expression against the request content and assert that the result is a Number.\n\tRequestMatcher isString(); // Evaluate the JSON path expression against the request content and assert that the result is a String.\n\tRequestMatcher value(Object expectedValue); // Evaluate the JSON path expression against the request content and assert that the result is equal to the supplied value.\n\t<T> RequestMatcher value(Matcher<? super T> matcher); // Evaluate the JSON path expression against the request content and assert the resulting value with the given Hamcrest Matcher.\n\t<T> RequestMatcher value(Matcher<? super T> matcher, Class<T> targetType); // An overloaded variant of value(Matcher) that also accepts a target type for the resulting value that the matcher can work reliably against.\n}"}
{"index": 10685, "repo": "spring-integration-kafka-6.1.2", "des": "A MessagingGatewaySpec implementation for the KafkaInboundGateway.", "code": "public class KafkaInboundGatewaySpec<K,V,R,S extends KafkaInboundGatewaySpec<K,V,R,S>> extends org.springframework.integration.dsl.MessagingGatewaySpec<S,KafkaInboundGateway<K,V,R>> implements org.springframework.integration.dsl.ComponentsRegistration {\n\tMap<Object,String> getComponentsToRegister();\n\tS messageConverter(org.springframework.kafka.support.converter.RecordMessageConverter messageConverter); // Set the message converter to use with a record-based consumer.\n\tS onPartitionsAssignedSeekCallback(BiConsumer<Map<org.apache.kafka.common.TopicPartition,Long>,org.springframework.kafka.listener.ConsumerSeekAware.ConsumerSeekCallback> onPartitionsAssignedCallback); // Specify a BiConsumer for seeks management during ConsumerSeekAware.onPartitionsAssigned(Map, ConsumerSeekAware.ConsumerSeekCallback) call from the KafkaMessageListenerContainer.\n\tS recoveryCallback(org.springframework.retry.RecoveryCallback<?> recoveryCallback); // A RecoveryCallback instance for retry operation; if null, the exception will be thrown to the container after retries are exhausted.\n\tS retryTemplate(org.springframework.retry.support.RetryTemplate retryTemplate); // Specify a RetryTemplate instance to use for retrying deliveries.\n}"}
{"index": 12432, "repo": "spring-data-couchbase-5.1.2", "des": "A utility class for configuration allowing to tell which CouchbaseOperations should be backing repositories.", "code": "public class RepositoryOperationsMapping extends Object {\n\tCouchbaseOperations getDefault();\n\tMappingContext<? extends CouchbasePersistentEntity<?>,CouchbasePersistentProperty> getMappingContext(); // Get the MappingContext to use in repositories.\n\tRepositoryOperationsMapping map(Class<?> repositoryInterface, CouchbaseOperations couchbaseOperations); // Add a highest priority mapping that will associate a specific repository interface with a given CouchbaseOperations.\n\tRepositoryOperationsMapping mapEntity(Class<?> entityClass, CouchbaseOperations couchbaseOperations); // Add a middle priority mapping that will associate any un-mapped repository that deals with the given domain type Class with a given CouchbaseOperations.\n\tCouchbaseOperations resolve(Class<?> repositoryInterface, Class<?> domainType); // Given a repository interface and its domain type, resolves which CouchbaseOperations it should be backed with.\n\tRepositoryOperationsMapping setDefault(CouchbaseOperations aDefault); // Change the default couchbase operations in an existing mapping.\n}"}
{"index": 15902, "repo": "spring-rabbit-3.0.6", "des": "A ConnectionFactory implementation that (when the cache mode is CachingConnectionFactory.CacheMode.CHANNEL (default) returns the same Connection from all CachingConnectionFactory.createConnection() calls, and ignores calls to Connection.close() and caches Channel.", "code": "@ManagedResource public class CachingConnectionFactory extends AbstractConnectionFactory implements org.springframework.beans.factory.InitializingBean, com.rabbitmq.client.ShutdownListener {\n\tvoid addConnectionListener(ConnectionListener listener);\n\tvoid afterPropertiesSet();\n\tprotected void closeAndClear(Collection<ChannelProxy> theChannels);\n\tprotected void closeChannels(Collection<ChannelProxy> theChannels);\n\tfinal Connection createConnection();\n\tfinal void destroy(); // Close the underlying shared connection.\n\tCachingConnectionFactory.CacheMode getCacheMode();\n\tProperties getCacheProperties();\n\tint getChannelCacheSize();\n\tprotected ExecutorService getChannelsExecutor(); // Determine the executor service used for target channels.\n\tint getConnectionCacheSize();\n\tProperties getPublisherConnectionFactoryCacheProperties(); // Return the cache properties from the underlying publisher sub-factory.\n\tboolean isPublisherConfirms(); // Return true if publisher confirms are enabled.\n\tboolean isPublisherReturns(); // Return true if publisher returns are enabled.\n\tboolean isSimplePublisherConfirms(); // Return true if simple publisher confirms are enabled.\n\tprotected void reset(List<ChannelProxy> channels, List<ChannelProxy> txChannels, Map<com.rabbitmq.client.Channel,ChannelProxy> channelsAwaitingAcks);\n\tvoid resetConnection(); // Close the connection(s).\n\tvoid setCacheMode(CachingConnectionFactory.CacheMode cacheMode);\n\tvoid setChannelCacheSize(int sessionCacheSize); // The number of channels to maintain in the cache.\n\tvoid setChannelCheckoutTimeout(long channelCheckoutTimeout); // Sets the channel checkout timeout.\n\tvoid setConnectionCacheSize(int connectionCacheSize);\n\tvoid setConnectionLimit(int connectionLimit); // Set the connection limit when using cache mode CONNECTION.\n\tvoid setConnectionListeners(List<? extends ConnectionListener> listeners);\n\tvoid setPublisherChannelFactory(PublisherCallbackChannelFactory publisherChannelFactory); // Set the factory to use to create PublisherCallbackChannel instances.\n\tvoid setPublisherConfirmType(CachingConnectionFactory.ConfirmType confirmType); // Set the confirm type to use; default CachingConnectionFactory.ConfirmType.NONE.\n\tvoid setPublisherConnectionFactory(AbstractConnectionFactory publisherConnectionFactory); // Set a custom publisher connection factory; the type does not need to be the same as this factory.\n\tvoid setPublisherReturns(boolean publisherReturns);\n}"}
{"index": 14853, "repo": "spring-data-commons-3.1.2", "des": "Basic TypeInformationMapper implementation that interprets the alias handles as fully qualified class name and tries to load a class with the given name to build TypeInformation.", "code": "public class SimpleTypeInformationMapper extends Object implements TypeInformationMapper, BeanClassLoaderAware {\n\tAlias createAliasFor(TypeInformation<?> type); // Turn the given type information into the String representation that shall be stored.\n\tTypeInformation<?> resolveTypeFrom(Alias alias); // Returns the TypeInformation that shall be used when the given String value is found as type hint.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}"}
{"index": 12377, "repo": "spring-data-couchbase-5.1.2", "des": "An abstract CouchbaseConverter that provides the basics for the MappingCouchbaseConverter.", "code": "public abstract class AbstractCouchbaseConverter extends Object implements CouchbaseConverter, InitializingBean {\n\tvoid afterPropertiesSet(); // Do nothing after the properties set on the bean.\n\tObject convertForWriteIfNeeded(Object inValue); // This convertForWriteIfNeed takes only the value to convert.\n\tObject convertForWriteIfNeeded(CouchbasePersistentProperty prop, ConvertingPropertyAccessor<Object> accessor, boolean processValueConverter); // This convertForWriteIfNeeded takes a property and accessor so that the annotations can be accessed (ie.\n\tCustomConversions getConversions(); // return the conversions\n\tConversionService getConversionService(); // Return the conversion service.\n\tClass<?> getWriteClassFor(Class<?> clazz); // Return the Class that would actually be stored for a given Class.\n\tvoid setCustomConversions(CustomConversions conversions); // Set the custom conversions.\n\tvoid setInstantiators(EntityInstantiators instantiators); // Set the entity instantiators.\n}"}
{"index": 6995, "repo": "calcite-core-1.34.0", "des": "Set of names that can be accessed with and without case sensitivity.", "code": "Class NameSet {\n\tvoid add(String name);\n\tboolean contains(String name, boolean caseSensitive); // Returns whether this set contains the given name, with a given case-sensitivity.\n\tboolean equals(@Nullable Object obj);\n\tstatic NameSet immutableCopyOf(Set<String> names); // Creates a NameSet that is an immutable copy of a given collection.\n\tIterable<String> iterable(); // Returns the contents as an iterable.\n\tCollection<String> range(String name, boolean caseSensitive); // Returns an iterable over all the entries in the set that match the given name.\n}"}
{"index": 17882, "repo": "spring-web-6.0.11", "des": "An HttpCookie subclass with the additional attributes allowed in the \"Set-Cookie\" response header.", "code": "public final class ResponseCookie extends HttpCookie {\n\tboolean equals(Object other);\n\tstatic ResponseCookie.ResponseCookieBuilder from(String name); // Factory method to obtain a builder for a server-defined cookie, given its name only, and where the value as well as other attributes can be set later via builder methods.\n\tstatic ResponseCookie.ResponseCookieBuilder from(String name, String value); // Factory method to obtain a builder for a server-defined cookie that starts with a name-value pair and may also include attributes.\n\tstatic ResponseCookie.ResponseCookieBuilder fromClientResponse(String name, String value); // Factory method to obtain a builder for a server-defined cookie.\n\tString getDomain(); // Return the cookie \"Domain\" attribute, or null if not set.\n\tDuration getMaxAge(); // Return the cookie \"Max-Age\" attribute in seconds.\n\tString getPath(); // Return the cookie \"Path\" attribute, or null if not set.\n\tString getSameSite(); // Return the cookie \"SameSite\" attribute, or null if not set.\n\tboolean isHttpOnly(); // Return true if the cookie has the \"HttpOnly\" attribute.\n\tboolean isSecure(); // Return true if the cookie has the \"Secure\" attribute.\n\tResponseCookie.ResponseCookieBuilder mutate(); // Return a builder pre-populated with values from \"this\" instance.\n}"}
{"index": 7424, "repo": "mahout-math-0.13.0", "des": "Open hash map from long keys to byte values.", "code": "Class OpenLongByteHashMap {\n\tbyte adjustOrPutValue(long key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(long key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(LongProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(LongByteProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(long key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(long key);\n\tprotected int indexOfKey(long key);\n\tprotected int indexOfValue(byte value);\n\tIterator<OpenLongByteHashMap.MapElement> iterator();\n\tvoid keys(LongArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(LongByteProcedure condition, LongArrayList keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(long key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(long key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 14241, "repo": "wicket-core-10.0.0-M1", "des": "A helper class for testing validation and submission of FormComponents.", "code": "public class FormTester extends Object {\n\tForm<?> getForm(); // Retrieves the current Form object.\n\tstatic String[] getInputValue(FormComponent<?> formComponent); // Gets request parameter values for the form component that represents its current model value\n\tString getTextComponentValue(String id); // Gets the value for an AbstractTextComponent with the provided id.\n\tboolean isClearFeedbackMessagesBeforeSubmit();\n\tFormTester select(String formComponentId, int index); // Simulates selecting an option of a FormComponent.\n\tFormTester selectMultiple(String formComponentId, int[] indexes); // A convenience method to select multiple options for the FormComponent.\n\tFormTester selectMultiple(String formComponentId, int[] indexes, boolean replace); // A convenience method to select multiple options for the FormComponent.\n\tFormTester setClearFeedbackMessagesBeforeSubmit(boolean clearFeedbackMessagesBeforeSubmit);\n\tFormTester setFile(String formComponentId, org.apache.wicket.util.file.File file, String contentType); // Sets the File on a FileUploadField.\n\tFormTester setValue(String checkBoxId, boolean value);\n\tFormTester setValue(String formComponentId, String value); // Simulates filling in a field on a Form.\n\tFormTester setValue(Component formComponent, String value); // Simulates filling in a field on a Form.\n\tFormTester submit(); // Submits the Form.\n\tFormTester submit(String buttonComponentId); // A convenience method for submitting the Form with an alternate button.\n\tFormTester submit(Component buttonComponent); // A convenience method for submitting the Form with an alternate button.\n\tFormTester submitLink(String path, boolean pageRelative); // A convenience method to submit the Form via a SubmitLink which may inside or outside of the Form.\n}"}
{"index": 12066, "repo": "jena-core-4.9.0", "des": "A functor comprises a functor name and a list of arguments.", "code": "public class Functor extends Object implements ClauseEntry {\n\tboolean equals(Object obj); // Equality is based on structural comparison\n\tboolean evalAsBodyClause(RuleContext context); // Execute the given built in as a body clause.\n\tint getArgLength(); // Return the length of the functor argument array.\n\tNode[] getArgs(); // Return the functor arguments as an array of nodes\n\tNode[] getBoundArgs(BindingEnvironment env); // Return a new Node array containing the bound versions of this Functor's arguments\n\tBuiltin getImplementor(); // Return the Builtin that implements this functor\n\tString getName(); // Return the functor name\n\tstatic boolean isFunctor(Node n); // tests that a given Node represents a functor\n\tboolean isGround(); // Returns true if the functor is fully ground, no variables\n\tboolean isGround(BindingEnvironment env); // Returns true if the functor is fully ground in the given environment\n\tstatic Node makeFunctorNode(String name, Node[] args); // Create a functor and wrap it up as a Literal node\n\tstatic Node makeFunctorNode(Functor f); // Wrap a functor as a Literal node\n\tboolean safeEvalAsBodyClause(RuleContext context); // Execute the given built in as a body clause, only if it is side-effect-free.\n\tboolean sameAs(Object o); // Compare Functors, taking into account variable indices.\n\tvoid setImplementor(Builtin implementor); // Set the Builtin that implements this functor.\n}"}
{"index": 1919, "repo": "hadoop-hdfs-3.3.6", "des": "The PBImageCorruptionDetector detects corruptions in the image.", "code": "Class PBImageCorruptionDetector {\n\tvoid afterOutput(); // Method called at the end of output() phase after all the inodes with known parentPath has been printed out.\n\tprotected void buildNamespace(InputStream in, List<Long> refIdList); // Scan the INodeDirectory section to construct the namespace.\n\tprotected void checkNode(FsImageProto.INodeSection.INode p, AtomicInteger numDirs); // Checks the inode (saves if directory), and counts them.\n\tvoid close();\n\tString getEntry(String parentPath, FsImageProto.INodeSection.INode inode); // Get text output for the given inode.\n\tString getHeader(); // Get text output for the header line.\n\tprotected org.apache.hadoop.fs.permission.PermissionStatus getPermission(long perm);\n\tint getStoragePolicy(FsImageProto.INodeSection.XAttrFeatureProto xattrFeatureProto);\n\tvoid visit(RandomAccessFile file);\n}"}
{"index": 8353, "repo": "spring-ws-3.0.10.RELEASE", "des": "WS-Security endpoint interceptor that is based on Sun's XML and Web Services Security package (XWSS).", "code": "Class XwsSecurityInterceptor {\n\tvoid afterPropertiesSet();\n\tprotected void cleanUp();\n\tprotected void secureMessage(SoapMessage soapMessage, MessageContext messageContext); // Secures the given SoapMessage message in accordance with the defined security policy.\n\tvoid setCallbackHandler(CallbackHandler callbackHandler); // Sets the handler to resolve XWSS callbacks.\n\tvoid setCallbackHandlers(CallbackHandler[] callbackHandler); // Sets the handlers to resolve XWSS callbacks.\n\tvoid setPolicyConfiguration(org.springframework.core.io.Resource policyConfiguration); // Sets the policy configuration to use for XWSS.\n\tprotected void validateMessage(SoapMessage soapMessage, MessageContext messageContext); // Validates the given SoapMessage message in accordance with the defined security policy.\n}"}
{"index": 14139, "repo": "wicket-core-10.0.0-M1", "des": "Renders a stable link which can be cached in a web browser and used at a later time.", "code": "public class BookmarkablePageLink<T> extends Link<T> {\n\tfinal Class<? extends Page> getPageClass(); // Get the page class registered with the link\n\torg.apache.wicket.request.mapper.parameter.PageParameters getPageParameters();\n\tprotected boolean getStatelessHint(); // Returns whether the component can be stateless.\n\tprotected CharSequence getURL(); // Gets the url to use for this link.\n\tboolean linksTo(Page page); // Whether this link refers to the given page.\n\tfinal void onClick(); // THIS METHOD IS NOT USED! Bookmarkable links do not have a click handler.\n}"}
{"index": 14715, "repo": "spring-data-commons-3.1.2", "des": "Null handling for creating criterion out of an Example.", "code": "public static enum ExampleMatcher.NullHandler extends Enum<ExampleMatcher.NullHandler> {\n\tstatic ExampleMatcher.NullHandler valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ExampleMatcher.NullHandler[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14396, "repo": "wicket-core-10.0.0-M1", "des": "Determines whether Wicket does a redirect when rendering a page", "code": "public static enum RenderPageRequestHandler.RedirectPolicy extends Enum<RenderPageRequestHandler.RedirectPolicy> {\n\tstatic RenderPageRequestHandler.RedirectPolicy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RenderPageRequestHandler.RedirectPolicy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10895, "repo": "spring-data-redis-3.1.2", "des": "Defines the contract for Object Mapping readers.", "code": "@FunctionalInterface public interface JacksonObjectReader {\n\tstatic JacksonObjectReader create(); // Create a default JacksonObjectReader delegating to ObjectMapper.readValue(InputStream, JavaType).\n\tObject read(com.fasterxml.jackson.databind.ObjectMapper mapper, byte[] source, com.fasterxml.jackson.databind.JavaType type); // Read an object graph from the given root JSON into a Java object considering the JavaType.\n}"}
{"index": 2307, "repo": "hive-exec-4.0.0-alpha-2", "des": "An abstraction of keys within a VectorizedRowBatch.", "code": "Interface VectorKeySeries {\n\tint getCurrentDuplicateCount();\n\tboolean getCurrentHasAnyNulls();\n\tint getCurrentHashCode();\n\tboolean getCurrentIsAllNull();\n\tint getCurrentLogical();\n\tboolean next(); // Move to the next key.\n\tvoid positionToFirst(); // Position to the beginning of the key series.\n\tvoid processBatch(VectorizedRowBatch batch); // Process a non-empty batch of rows and compute a key series.\n}"}
{"index": 7364, "repo": "mahout-math-0.13.0", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface ByteComparator {\n\tint compare(byte o1, byte o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 17050, "repo": "spring-integration-core-6.1.2", "des": "An Executor that encapsulates two underlying executors.", "code": "public class CompositeExecutor extends Object implements Executor {\n\tvoid execute(Runnable task); // Execute using the primary executor.\n\tvoid execute2(Runnable task); // Execute using the secondary executor.\n}"}
{"index": 18323, "repo": "opencms-core-15.0", "des": "Action element for container-page editor includes.", "code": "Class CmsContainerpageActionElement {\n\tjava.lang.String export(); // Returns the serialized data for the core provider wrapped in a script tag.\n\tjava.lang.String exportAll(); // Returns the serialized data for the core provider.\n\tCmsCntPageData getCntPageData(); // Returns the needed server data for client-side usage.\n}"}
{"index": 7874, "repo": "cassandra-all-4.1.2", "des": "A relatively easy to use utility for general purpose thread signalling.", "code": "Interface WaitQueue {\n\tint getWaiting(); // Return how many threads are waiting\n\tboolean hasWaiters(); // getWaiting() > 0\n\tstatic WaitQueue newWaitQueue(); // Factory method used to capture and redirect instantiations for simulation\n\tWaitQueue.Signal register(); // The calling thread MUST be the thread that uses the signal\n\t<V> WaitQueue.Signal register(V supplyOnDone, java.util.function.Consumer<V> receiveOnDone); // The calling thread MUST be the thread that uses the signal.\n\tboolean signal(); // Signal one waiting thread\n\tvoid signalAll(); // Signal all waiting threads\n\tstatic void waitOnCondition(java.util.function.BooleanSupplier condition, WaitQueue queue); // Loops waiting on the supplied condition and WaitQueue and will not return until the condition is true\n}"}
{"index": 11271, "repo": "spring-context-6.0.11", "des": "Interface to be implemented by application event listeners.", "code": "@FunctionalInterface public interface ApplicationListener<E extends ApplicationEvent> extends EventListener {\n\tstatic <T> ApplicationListener<PayloadApplicationEvent<T>> forPayload(Consumer<T> consumer); // Create a new ApplicationListener for the given payload consumer.\n\tvoid onApplicationEvent(E event); // Handle an application event.\n}"}
{"index": 207, "repo": "commons-collections4-4.4", "des": "Decorates another Bag to validate that additions match a specified predicate.", "code": "Class PredicatedBag<E> {\n\tboolean add(E object, int count); // Adds nCopies copies of the specified object to the Bag.\n\tprotected Bag<E> decorated(); // Gets the decorated bag.\n\tboolean equals(Object object);\n\tint getCount(Object object); // Returns the number of occurrences (cardinality) of the given object currently in the bag.\n\tstatic <E> PredicatedBag<E> predicatedBag(Bag<E> bag, Predicate<? super E> predicate); // Factory method to create a predicated (validating) bag.\n\tboolean remove(Object object, int count); // Removes nCopies copies of the specified object from the Bag.\n\tSet<E> uniqueSet(); // Returns a Set of unique elements in the Bag.\n}"}
{"index": 11624, "repo": "spring-websocket-6.0.11", "des": "Base class that can be used to implement a standard Encoder and/or Decoder.", "code": "public abstract class ConvertingEncoderDecoderSupport<T,M> extends Object {\n\tT decode(M message); // Decode the message into an object.\n\tvoid destroy(); // Called to destroy the encoder/decoder.\n\tM encode(T object); // Encode an object to a message.\n\tprotected org.springframework.context.ApplicationContext getApplicationContext(); // Returns the active ApplicationContext.\n\tprotected org.springframework.core.convert.ConversionService getConversionService(); // Strategy method used to obtain the ConversionService.\n\tprotected org.springframework.core.convert.TypeDescriptor getMessageType(); // Returns the websocket message type.\n\tprotected org.springframework.core.convert.TypeDescriptor getType(); // Returns the type being converted.\n\tvoid init(EndpointConfig config); // Called to initialize the encoder/decoder.\n\tboolean willDecode(M bytes); // Determine if a given message can be decoded.\n}"}
{"index": 7137, "repo": "calcite-core-1.34.0", "des": "Namespace based upon a set operation (UNION, INTERSECT, EXCEPT).", "code": "Class SetopNamespace {\n\tprotected RelDataType convertToStruct(RelDataType type);\n\t@Nullable RelDataTypeField field(String name); // Returns a field of a given name, or null.\n\t@Nullable SqlNode getEnclosingNode(); // Returns the parse tree node that at is at the root of this namespace and includes all decorations.\n\tList<Pair<SqlNode,SqlMonotonicity>> getMonotonicExprs(); // Returns a list of expressions which are monotonic in this namespace.\n\tSqlMonotonicity getMonotonicity(String columnName); // Returns whether and how a given column is sorted.\n\t@Nullable SqlNode getNode(); // Returns the parse tree node at the root of this namespace.\n\tRelDataType getRowType(); // Returns the row type of this namespace, which comprises a list of names and types of the output columns.\n\tRelDataType getRowTypeSansSystemColumns(); // Returns the row type of this namespace, sans any system columns.\n\t@Nullable SqlValidatorTable getTable(); // Returns the underlying table, or null if there is none.\n\tRelDataType getType(); // Returns the type of this namespace.\n\tSqlValidator getValidator(); // Returns the validator.\n\tboolean isWrapperFor(Class<?> clazz); // Returns whether this namespace implements a given interface, or wraps a class which does.\n\t@Nullable SqlValidatorNamespace lookupChild(String name); // Looks up a child namespace of a given name.\n\tvoid makeNullable();\n\tSqlValidatorNamespace resolve(); // If this namespace resolves to another namespace, returns that namespace, following links to the end of the chain.\n\tvoid setType(RelDataType type); // Sets the type of this namespace.\n\tboolean supportsModality(SqlModality modality); // Returns whether this namespace is capable of giving results of the desired modality.\n\tprotected RelDataType toStruct(RelDataType type, @Nullable SqlNode unnest); // Converts a type to a struct if it is not already.\n\tString translate(String name);\n\t<T> T unwrap(Class<T> clazz); // Returns this namespace, or a wrapped namespace, cast to a particular class.\n\tvoid validate(RelDataType targetRowType); // Validates this namespace.\n\tRelDataType validateImpl(RelDataType targetRowType); // Validates this scope and returns the type of the records it returns.\n}"}
{"index": 11874, "repo": "spring-kafka-3.0.9", "des": "An event that is emitted when a container partition is idle if the container is configured to do so.", "code": "public class ListenerContainerPartitionIdleEvent extends KafkaEvent {\n\torg.apache.kafka.clients.consumer.Consumer<?,?> getConsumer(); // Retrieve the consumer.\n\tlong getIdleTime(); // How long the partition has been idle.\n\tString getListenerId(); // The id of the listener (if @KafkaListener) or the container bean name.\n\torg.apache.kafka.common.TopicPartition getTopicPartition(); // The idle TopicPartition.\n\tboolean isPaused(); // Return true if the consumer was paused at the time the idle event was published.\n}"}
{"index": 5407, "repo": "druid-processing-26.0.0", "des": "An adapter between arbitrary types and the needs of callers that want to read specific columns out of those types (treating them as rows).", "code": "Interface RowAdapter<RowType> {\n\tFunction<RowType,Object> columnFunction(String columnName); // Returns a function that retrieves the value for column \"columnName\" from rows.\n\tdefault ToLongFunction<RowType> timestampFunction(); // Returns a function that retrieves timestamps from rows.\n}"}
{"index": 12783, "repo": "spring-data-mongodb-4.1.2", "des": "ReferenceLoader implementation using a MongoDatabaseFactory to obtain raw documents for linked entities via a ReferenceLoader.DocumentReferenceQuery.", "code": "public class MongoDatabaseFactoryReferenceLoader extends Object implements ReferenceLoader {\n\tIterable<org.bson.Document> fetchMany(ReferenceLoader.DocumentReferenceQuery referenceQuery, ReferenceResolver.ReferenceCollection context); // Obtain multiple Document matching the given referenceQuery in the context.\n\tprotected com.mongodb.client.MongoCollection<org.bson.Document> getCollection(ReferenceResolver.ReferenceCollection context); // Obtain the MongoCollection for a given ReferenceResolver.ReferenceCollection from the underlying MongoDatabaseFactory.\n}"}
{"index": 6743, "repo": "commons-rng-simple-1.5", "des": "Uses a Long value to seed a SplitMix64 RNG and create a long[] with the requested number of random values.", "code": "Class Long2LongArray {\n\tlong[] convert(Long seed); // Converts seed from input type to output type.\n\tlong[] convert(Long seed, int outputSize); // Converts seed from input type to output type.\n}"}
{"index": 2470, "repo": "exoplayer-r2.3.1", "des": "Utility class for efficiently tracking regions of data that are stored in a Cache for a given cache key.", "code": "Class CachedRegionTracker {\n\tint getRegionEndTimeMs(long byteOffset); // When provided with a byte offset, this method locates the cached region within which the offset falls, and returns the approximate end position in milliseconds of that region.\n\tvoid onSpanAdded(Cache cache, CacheSpan span); // Called when a CacheSpan is added to the cache.\n\tvoid onSpanRemoved(Cache cache, CacheSpan span); // Called when a CacheSpan is removed from the cache.\n\tvoid onSpanTouched(Cache cache, CacheSpan oldSpan, CacheSpan newSpan); // Called when an existing CacheSpan is accessed, causing it to be replaced.\n\tvoid release();\n}"}
{"index": 10618, "repo": "groovy-all-4.0.13", "des": "QName class represents the value of a qualified name as specified in XML Schema Part2: Datatypes specification.", "code": "public class QName extends Object implements Serializable {\n\tboolean equals(Object o); // Tests this QName for equality with another object.\n\tString getLocalPart(); // Gets the Local part for this QName\n\tString getNamespaceURI(); // Gets the Namespace URI for this QName\n\tString getPrefix(); // Gets the Prefix for this QName\n\tString getQualifiedName(); // Returns the fully qualified name of this QName\n\tboolean matches(Object o); // Tests if this QName matches another object.\n\tstatic QName valueOf(String s); // Returns a QName holding the value of the specified String.\n}"}
{"index": 10439, "repo": "groovy-all-4.0.13", "des": "Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.", "code": "public class AnnotationNode extends ASTNode {\n\tvoid addMember(String name, Expression value);\n\tClassNode getClassNode();\n\tExpression getMember(String name);\n\tMap<String,Expression> getMembers();\n\tString getText();\n\tboolean hasClassRetention(); // Flag corresponding to RetentionPolicy.CLASS.\n\tboolean hasRuntimeRetention(); // Flag corresponding to RetentionPolicy.RUNTIME.\n\tboolean hasSourceRetention(); // Flag corresponding to RetentionPolicy.SOURCE.\n\tboolean isBuiltIn();\n\tboolean isTargetAllowed(int target);\n\tvoid setAllowedTargets(int bitmap);\n\tvoid setClassRetention(boolean flag); // Sets the internal flag if the current annotation has an explicit RetentionPolicy.CLASS.\n\tvoid setMember(String name, Expression value);\n\tvoid setRuntimeRetention(boolean flag); // Sets the internal flag if the current annotation has RetentionPolicy.SOURCE.\n\tvoid setSourceRetention(boolean flag); // Sets the internal flag if the current annotation has RetentionPolicy.SOURCE.\n\tstatic String targetToName(int target);\n}"}
{"index": 3909, "repo": "hbase-client-3.0.0-alpha-4", "des": "Utility client for doing visibility labels admin operations.", "code": "Class VisibilityClient {\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsResponse addLabel(Connection connection, String label); // Utility method for adding label to the system.\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsResponse addLabels(Connection connection, String[] labels); // Utility method for adding labels to the system.\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsResponse clearAuths(Connection connection, String[] auths, String user); // Removes given labels from user's globally authorized list of labels.\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.VisibilityLabelsProtos.GetAuthsResponse getAuths(Connection connection, String user); // Get the authorization for a given user\n\tstatic boolean isCellVisibilityEnabled(Connection connection); // Return true if cell visibility features are supported and enabled\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.VisibilityLabelsProtos.ListLabelsResponse listLabels(Connection connection, String regex); // Retrieve the list of visibility labels defined in the system.\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsResponse setAuths(Connection connection, String[] auths, String user); // Sets given labels globally authorized for the user.\n}"}
{"index": 2597, "repo": "nifi-utils-1.22.0", "des": "Message Digest Utilities for standardized algorithm use within the framework.", "code": "Class MessageDigestUtils {\n\tstatic byte[] getDigest(byte[] bytes); // Get Digest using standard algorithm\n\tstatic byte[] getDigest(InputStream inputStream); // Get Digest using standard algorithm\n\tprivate static MessageDigest getMessageDigest();\n}"}
{"index": 584, "repo": "ignite-core-2.15.0", "des": "Basic string builder over circular buffer.", "code": "Class CircularStringBuilder {\n\tCircularStringBuilder append(Object obj); // Appends the string representation of the Object argument.\n\tCircularStringBuilder append(String str); // Appends the specified string to this character sequence.\n\tCircularStringBuilder append(StringBuffer sb); // Append StringBuffer\n\tint capacity(); // Returns the current capacity.\n\tint getSkipped();\n\tint length(); // Returns the length (character count).\n\tvoid reset(); // Reset internal builder state\n}"}
{"index": 4592, "repo": "commons-vfs2-2.9.0", "des": "A FileProvider that handles physical files, such as the files in a local fs, or on an FTP server.", "code": "Class AbstractOriginatingFileProvider {\n\tprotected abstract FileSystem doCreateFileSystem(FileName rootFileName, FileSystemOptions fileSystemOptions); // Creates a FileSystem.\n\tprotected FileObject findFile(FileName fileName, FileSystemOptions fileSystemOptions); // Locates a file from its parsed URI.\n\tFileObject findFile(FileObject baseFileObject, String uri, FileSystemOptions fileSystemOptions); // Locates a file object, by absolute URI.\n\tprotected FileSystem getFileSystem(FileName rootFileName, FileSystemOptions fileSystemOptions); // Returns the FileSystem associated with the specified root.\n}"}
{"index": 8020, "repo": "commons-compress-1.23.0", "des": "Factory to create Archive[In|Out]putStreams from names or the first bytes of the InputStream.", "code": "Class ArchiveStreamFactory {\n\tArchiveInputStream createArchiveInputStream(InputStream in); // Create an archive input stream from an input stream, autodetecting the archive type from the first few bytes of the stream.\n\tArchiveInputStream createArchiveInputStream(String archiverName, InputStream in); // Creates an archive input stream from an archiver name and an input stream.\n\tArchiveInputStream createArchiveInputStream(String archiverName, InputStream in, String actualEncoding); // Creates an archive input stream from an archiver name and an input stream.\n\tArchiveOutputStream createArchiveOutputStream(String archiverName, OutputStream out); // Creates an archive output stream from an archiver name and an output stream.\n\tArchiveOutputStream createArchiveOutputStream(String archiverName, OutputStream out, String actualEncoding); // Creates an archive output stream from an archiver name and an output stream.\n\tstatic String detect(InputStream in); // Try to determine the type of Archiver\n\tstatic SortedMap<String,ArchiveStreamProvider> findAvailableArchiveInputStreamProviders(); // Constructs a new sorted map from input stream provider names to provider objects.\n\tstatic SortedMap<String,ArchiveStreamProvider> findAvailableArchiveOutputStreamProviders(); // Constructs a new sorted map from output stream provider names to provider objects.\n\tSortedMap<String,ArchiveStreamProvider> getArchiveInputStreamProviders();\n\tSortedMap<String,ArchiveStreamProvider> getArchiveOutputStreamProviders();\n\tString getEntryEncoding(); // Gets the encoding to use for arj, jar, ZIP, dump, cpio and tar files, or null for the archiver default.\n\tSet<String> getInputStreamArchiveNames(); // Gets all the input stream archive names for this provider\n\tSet<String> getOutputStreamArchiveNames(); // Gets all the output stream archive names for this provider\n}"}
{"index": 16372, "repo": "spring-data-jpa-3.1.2", "des": "Mutable implementation of QueryHints, without the Option to switch between MutableQueryHints.forCounts()/MutableQueryHints.withFetchGraphs(EntityManager) hints.", "code": "public class MutableQueryHints extends Object implements QueryHints {\n\tvoid add(String name, Object value); // Add a new key-value pair for a hint.\n\tQueryHints forCounts(); // Creates and returns a new QueryHints instance that will contain only those hints applicable for count queries.\n\tvoid forEach(BiConsumer<String,Object> action); // Performs the given action for each element of this query hints object until all hints have been processed or the action throws an exception.\n\tQueryHints withFetchGraphs(jakarta.persistence.EntityManager em); // Creates and returns a new QueryHints instance including EntityGraph.\n}"}
{"index": 7311, "repo": "calcite-core-1.34.0", "des": "A SqlUpdate is a node of a parse tree which represents an UPDATE statement.", "code": "Class SqlUpdate {\n\t@Nullable SqlIdentifier getAlias(); // Returns the alias for the target table of this UPDATE.\n\t@Nullable SqlNode getCondition(); // Gets the filter condition for rows to be updated.\n\tSqlKind getKind(); // Returns the type of node this is, or SqlKind.OTHER if it's nothing special.\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\tSqlNodeList getSourceExpressionList(); // Returns the list of source expressions.\n\t@Nullable SqlSelect getSourceSelect(); // Gets the source SELECT expression for the data to be updated.\n\tSqlNodeList getTargetColumnList(); // Returns the list of target column names.\n\tSqlNode getTargetTable(); // Returns the identifier for the target table of this UPDATE.\n\tvoid setAlias(SqlIdentifier alias);\n\tvoid setOperand(int i, @Nullable SqlNode operand); // Changes the value of an operand.\n\tvoid setSourceSelect(SqlSelect sourceSelect);\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n\tvoid validate(SqlValidator validator, SqlValidatorScope scope); // Validates this call.\n}"}
{"index": 12449, "repo": "drill-common-1.21.1", "des": "Builds a string in Drill's \"plan string\" format: that shown in the text version of EXPLAIN PLAN FOR output.", "code": "public class PlanStringBuilder extends Object {\n\tPlanStringBuilder escapedField(String key, char value); // Displays a character in Java-quoted format: delimiter=\"\\n\".\n\tPlanStringBuilder escapedField(String key, String value); // Displays a string in Java-quoted format: delimiter=\"\\t\".\n\tPlanStringBuilder field(String key, int value); // Displays a numeric field: size=10.\n\tPlanStringBuilder field(String key, Object value); // Displays the field as an unquoted toString() value.\n\tPlanStringBuilder field(String key, String value); // Displays the field as a quoted string: foo=\"bar\".\n\tPlanStringBuilder maskedField(String key, String value);\n\tPlanStringBuilder unquotedField(String key, String value); // Displays the field as an unquoted string.\n}"}
{"index": 1686, "repo": "samza-api-1.8.0", "des": "A reservoir interface to store, update and display values.", "code": "Interface Reservoir {\n\tSnapshot getSnapshot(); // Return a Snapshot of this reservoir\n\tint size(); // Return the number of values in this reservoir\n\tvoid update(long value); // Update the reservoir with the new value\n}"}
{"index": 17242, "repo": "spring-xml-4.0.5", "des": "Represents an abstraction for XSD schemas.", "code": "public interface XsdSchema {\n\tXmlValidator createValidator(); // Creates a XmlValidator based on the schema.\n\tSource getSource(); // Returns the Source of the schema.\n\tString getTargetNamespace(); // Returns the target namespace of this schema.\n}"}
{"index": 10538, "repo": "groovy-all-4.0.13", "des": "Enum for easy differentiation between call types", "code": "public static enum IndyInterface.CallType extends Enum<IndyInterface.CallType> {\n\tstatic IndyInterface.CallType fromCallSiteName(String callSiteName);\n\tString getCallSiteName(); // Returns the name of the call site type\n\tstatic IndyInterface.CallType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic IndyInterface.CallType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5379, "repo": "druid-processing-26.0.0", "des": "This enum is used a parameter for several methods in VersionedIntervalTimeline, specifying whether only complete partitions should be considered, or incomplete partitions as well.", "code": "Enum Partitions {\n\tstatic Partitions valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Partitions[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 116, "repo": "commons-collections4-4.4", "des": "Pluggable strategy to handle changes to the composite.", "code": "Interface CompositeCollection.CollectionMutator<E> {\n\tboolean add(CompositeCollection<E> composite, List<Collection<E>> collections, E obj); // Called when an object is to be added to the composite.\n\tboolean addAll(CompositeCollection<E> composite, List<Collection<E>> collections, Collection<? extends E> coll); // Called when a collection is to be added to the composite.\n\tboolean remove(CompositeCollection<E> composite, List<Collection<E>> collections, Object obj); // Called when an object is to be removed to the composite.\n}"}
{"index": 17754, "repo": "spring-web-6.0.11", "des": "Request and response header-based WebSessionIdResolver.", "code": "public class HeaderWebSessionIdResolver extends Object implements WebSessionIdResolver {\n\tvoid expireSession(ServerWebExchange exchange); // Instruct the client to end the current session.\n\tString getHeaderName(); // Get the configured header name.\n\tList<String> resolveSessionIds(ServerWebExchange exchange); // Resolve the session IDs associated with the request.\n\tvoid setHeaderName(String headerName); // Set the name of the session header to use for the session ID.\n\tvoid setSessionId(ServerWebExchange exchange, String id); // Send the given session ID to the client.\n}"}
{"index": 809, "repo": "ignite-core-2.15.0", "des": "A response to GridNearTxQueryResultsEnlistRequest.", "code": "Class GridNearTxQueryResultsEnlistResponse {\n\tIgniteUuid dhtFutureId();\n\tGridCacheVersion dhtVersion();\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 2075, "repo": "hive-exec-4.0.0-alpha-2", "des": "Evaluator for calculating the dense rank.", "code": "Class GenericUDAFDenseRank.GenericUDAFHypotheticalSetDenseRankEvaluator {\n\tGenericUDAFEvaluator.AggregationBuffer getNewAggregationBuffer(); // Get a new aggregation object.\n\tprotected void initPartial2AndFinalOI(ObjectInspector[] parameters);\n\tvoid iterate(GenericUDAFEvaluator.AggregationBuffer agg, Object[] parameters); // Iterate through original data.\n\tvoid merge(GenericUDAFEvaluator.AggregationBuffer agg, Object partial); // Merge with partial aggregation result.\n\tvoid reset(GenericUDAFEvaluator.AggregationBuffer agg); // Reset the aggregation.\n\tObject terminate(GenericUDAFEvaluator.AggregationBuffer agg); // Get final aggregation result.\n\tObject terminatePartial(GenericUDAFEvaluator.AggregationBuffer agg); // Get partial aggregation result.\n}"}
{"index": 9965, "repo": "commons-text-1.10.0", "des": "Helper subclass to CharSequenceTranslator to allow for translations that will replace up to one character at a time.", "code": "Class CodePointTranslator {\n\tint translate(CharSequence input, int index, Writer writer); // Implementation of translate that maps onto the abstract translate(int, Writer) method.\n\tabstract boolean translate(int codePoint, Writer writer); // Translates the specified code point into another.\n}"}
{"index": 17402, "repo": "groovy-4.0.13", "des": "This class defines new groovy methods for Sockets which enhance JDK classes inside the Groovy environment.", "code": "public class SocketGroovyMethods extends DefaultGroovyMethodsSupport {\n\tstatic Socket accept(ServerSocket serverSocket, boolean runInANewThread, Closure closure); // Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread or the calling thread, as needed.\n\tstatic Socket accept(ServerSocket serverSocket, Closure closure); // Accepts a connection and passes the resulting Socket to the closure which runs in a new Thread.\n\tstatic OutputStream leftShift(Socket self, byte[] value); // Overloads the left shift operator to provide an append mechanism to add bytes to the output stream of a socket\n\tstatic Writer leftShift(Socket self, Object value); // Overloads the left shift operator to provide an append mechanism to add things to the output stream of a socket\n\tstatic <T> T withObjectStreams(Socket socket, Closure<T> closure); // Creates an InputObjectStream and an OutputObjectStream from a Socket, and passes them to the closure.\n\tstatic <T> T withStreams(Socket socket, Closure<T> closure); // Passes the Socket's InputStream and OutputStream to the closure.\n}"}
{"index": 5427, "repo": "druid-processing-26.0.0", "des": "contains serialized data that is compressed and delta-encoded (Long) It's ready to be transferred to a WritableByteChannel.", "code": "Class SerializablePairLongStringBufferStore.TransferredBuffer {\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 12152, "repo": "jena-core-4.9.0", "des": "Interface representing the ontology abstraction for a qualified minimum cardinality restriction.", "code": "public interface MinCardinalityQRestriction extends QualifiedRestriction {\n\tint getMinCardinalityQ(); // Answer the min qualified cardinality of the restricted property.\n\tboolean hasMinCardinalityQ(int minCardinality); // Answer true if this property restriction has the given minimum qualified cardinality.\n\tvoid removeMinCardinalityQ(int minCardinality); // Remove the statement that this restriction has the given minimum qualified cardinality for the restricted property.\n\tvoid setMinCardinalityQ(int minCardinality); // Assert that this restriction restricts the property to have the given minimum cardinality.\n}"}
{"index": 919, "repo": "ignite-core-2.15.0", "des": "Convenient reducer subclass that allows for thrown grid exception.", "code": "Class IgniteReducerX<E1,R> {\n\tabstract R applyx(); // Reducer body that can throw IgniteCheckedException.\n\tR reduce(); // Reduces collected values into one.\n}"}
{"index": 14654, "repo": "spring-data-commons-3.1.2", "des": "Access options when using PersistentPropertyPathAccessor to get and set properties.", "code": "public class AccessOptions extends Object {\n\tstatic AccessOptions.GetOptions defaultGetOptions(); // Returns the default AccessOptions.GetOptions rejecting intermediate null values when accessing property paths.\n\tstatic AccessOptions.SetOptions defaultSetOptions(); // Returns the default AccessOptions.SetOptions rejecting setting values when finding an intermediate property value to be null.\n}"}
{"index": 9890, "repo": "iceberg-api-1.3.0", "des": "A scan task made of several ranges from files.", "code": "Interface CombinedScanTask {\n\tdefault CombinedScanTask asCombinedScanTask(); // Returns this cast to CombinedScanTask if it is one\n\tjava.util.Collection<FileScanTask> files(); // Return the tasks in this combined task.\n\tdefault java.util.Collection<FileScanTask> tasks(); // Returns scan tasks in this group.\n}"}
{"index": 14620, "repo": "spring-security-web-6.1.2", "des": "This AbstractPreAuthenticatedProcessingFilter implementation is based on WebSphere authentication.", "code": "public class WebSpherePreAuthenticatedProcessingFilter extends AbstractPreAuthenticatedProcessingFilter {\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest httpRequest); // For J2EE container-based authentication there is no generic way to retrieve the credentials, as such this method returns a fixed dummy value.\n\tprotected Object getPreAuthenticatedPrincipal(jakarta.servlet.http.HttpServletRequest httpRequest); // Return the WebSphere user name.\n}"}
{"index": 706, "repo": "ignite-core-2.15.0", "des": "Collection of near local locks acquired by a thread on one topology version.", "code": "Class GridCacheExplicitLockSpan {\n\tboolean addCandidate(AffinityTopologyVersion topVer, GridCacheMvccCandidate cand); // Adds candidate to a lock span.\n\t@Nullable GridCacheMvccCandidate candidate(IgniteTxKey key, @Nullable GridCacheVersion ver); // Gets explicit lock candidate for given key.\n\tboolean isEmpty();\n\tvoid markOwned(IgniteTxKey key); // Marks all candidates added for given key as owned.\n\tIgniteInternalFuture<Object> releaseFuture(); // Gets span release future.\n\tboolean removeCandidate(GridCacheMvccCandidate cand); // Removes candidate from this lock span.\n\tGridCacheMvccCandidate removeCandidate(IgniteTxKey key, @Nullable GridCacheVersion ver); // Removes lock by key and optional version.\n\t@Nullable AffinityTopologyVersion topologyVersion(); // Gets actual topology snapshot for thread lock span.\n}"}
{"index": 695, "repo": "ignite-core-2.15.0", "des": "Concurrent ordered set that automatically manages its maximum size.", "code": "Class GridBoundedConcurrentOrderedSet<E> {\n\tboolean add(E e);\n\tGridBoundedConcurrentOrderedSet<E> clone();\n\tboolean remove(Object o); // This method is not supported and always throws UnsupportedOperationException.\n\tint size(); // Approximate size at this point of time.\n}"}
{"index": 18228, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Represents a pre-update event, which occurs just prior to performing the update of an entity in the database.", "code": "Class PreUpdateEvent {\n\tjava.lang.Object[] getOldState(); // The old state of the entity at the time it was last loaded from the database; can be null in the case of detached entities.\n\tjava.lang.Object[] getState(); // Retrieves the state to be used in the update.\n}"}
{"index": 9699, "repo": "commons-math3-3.6.1", "des": "Parametric function where the input array contains the parameters of the logistic function, ordered as follows: k m b q a n .", "code": "Class Logistic.Parametric {\n\tdouble[] gradient(double x, double... param); // Computes the value of the gradient at x.\n\tdouble value(double x, double... param); // Computes the value of the sigmoid at x.\n}"}
{"index": 4756, "repo": "hadoop-common-3.3.4", "des": "A bridge from Callable to Supplier; catching exceptions raised by the callable and wrapping them as appropriate.", "code": "Class CommonCallableSupplier<T> {\n\tObject get();\n\tstatic void maybeAwaitCompletion(CompletableFuture<Void> future); // Block awaiting completion for any non-null future passed in; No-op if a null arg was supplied.\n\tstatic <T> CompletableFuture<T> submit(Executor executor, Callable<T> call); // Submit a callable into a completable future.\n\tstatic <T> void waitForCompletion(CompletableFuture<T> future); // Wait for a single of future to complete, extracting IOEs afterwards.\n\tstatic <T> void waitForCompletion(List<CompletableFuture<T>> futures); // Wait for a list of futures to complete.\n\tstatic <T> void waitForCompletionIgnoringExceptions(CompletableFuture<T> future); // Wait for a single of future to complete, ignoring exceptions raised.\n}"}
{"index": 6160, "repo": "jackson-databind-2.15.2", "des": "Simple NullValueProvider that will always throw a InvalidNullException when a null is encountered.", "code": "Class NullsFailProvider {\n\tstatic NullsFailProvider constructForProperty(BeanProperty prop);\n\tstatic NullsFailProvider constructForProperty(BeanProperty prop, JavaType type);\n\tstatic NullsFailProvider constructForRootValue(JavaType t);\n\tAccessPattern getNullAccessPattern(); // Accessor that may be used to determine if and when provider must be called to access null replacement value.\n\tObject getNullValue(DeserializationContext ctxt); // Method called to possibly convert incoming `null` token (read via underlying streaming input source) into other value of type accessor supports.\n}"}
{"index": 12994, "repo": "spring-integration-file-6.1.2", "des": "A strategy for rotating advices to allow reconfiguring the message source before and/or after a poll.", "code": "public interface RotationPolicy {\n\tvoid afterReceive(boolean messageReceived, org.springframework.integration.core.MessageSource<?> source); // Invoked after the message source receive() method.\n\tvoid beforeReceive(org.springframework.integration.core.MessageSource<?> source); // Invoked before the message source receive() method.\n\tRotationPolicy.KeyDirectory getCurrent(); // Return the current RotationPolicy.KeyDirectory.\n}"}
{"index": 10401, "repo": "spring-core-6.0.11", "des": "A MethodParameter variant which synthesizes annotations that declare attribute aliases via @AliasFor.", "code": "public class SynthesizingMethodParameter extends MethodParameter {\n\tprotected <A extends Annotation>A adaptAnnotation(A annotation); // A template method to post-process a given annotation instance before returning it to the caller.\n\tprotected Annotation[] adaptAnnotationArray(Annotation[] annotations); // A template method to post-process a given annotation array before returning it to the caller.\n\tSynthesizingMethodParameter clone();\n\tstatic SynthesizingMethodParameter forExecutable(Executable executable, int parameterIndex); // Create a new SynthesizingMethodParameter for the given method or constructor.\n\tstatic SynthesizingMethodParameter forParameter(Parameter parameter); // Create a new SynthesizingMethodParameter for the given parameter descriptor.\n}"}
{"index": 4764, "repo": "hadoop-common-3.3.4", "des": "Store the summary of a content (a directory or a file).", "code": "Class ContentSummary {\n\tboolean equals(Object to);\n\tlong getDirectoryCount();\n\tString getErasureCodingPolicy();\n\tlong getFileCount();\n\tstatic String getHeader(boolean qOption); // Return the header of the output.\n\tstatic String[] getHeaderFields(); // Returns the names of the fields from the summary header.\n\tlong getLength();\n\tstatic String[] getQuotaHeaderFields(); // Returns the names of the fields used in the quota summary.\n\tlong getSnapshotDirectoryCount();\n\tlong getSnapshotFileCount();\n\tstatic String getSnapshotHeader();\n\tlong getSnapshotLength();\n\tlong getSnapshotSpaceConsumed();\n\tString toSnapshot(boolean hOption); // Return the string representation of the snapshot counts in the output format.\n\tString toString(boolean qOption); // Return the string representation of the object in the output format.\n\tString toString(boolean qOption, boolean hOption); // Return the string representation of the object in the output format.\n\tString toString(boolean qOption, boolean hOption, boolean xOption); // Return the string representation of the object in the output format.\n\tString toString(boolean qOption, boolean hOption, boolean tOption, boolean xOption, List<StorageType> types); // Return the string representation of the object in the output format.\n\tString toString(boolean qOption, boolean hOption, boolean tOption, List<StorageType> types); // Return the string representation of the object in the output format.\n}"}
{"index": 7905, "repo": "commons-jcs3-core-3.1", "des": "This is a nominal interface that auxiliary cache attributes should implement.", "code": "Interface AuxiliaryCacheAttributes {\n\tAuxiliaryCacheAttributes clone(); // Clone object\n\tString getCacheName(); // Gets the cacheName attribute of the AuxiliaryCacheAttributes object\n\tString getEventQueuePoolName(); // Sets the pool name to use.\n\tICacheEventQueue.QueueType getEventQueueType();\n\tString getName(); // Gets the name attribute of the AuxiliaryCacheAttributes object\n\tvoid setCacheName(String s); // Sets the name of the cache, referenced by the appropriate manager.\n\tvoid setEventQueuePoolName(String s); // If you choose a POOLED event queue type, the value of EventQueuePoolName will be used.\n\tvoid setEventQueueType(ICacheEventQueue.QueueType s); // SINGLE is the default.\n\tvoid setName(String s); // Name known by by configurator\n}"}
{"index": 5823, "repo": "iceberg-core-1.3.0", "des": "Within Z-Ordering the byte representations of objects being compared must be ordered, this requires several types to be transformed when converted to bytes.", "code": "Class ZOrderByteUtils {\n\tstatic java.nio.ByteBuffer byteTruncateOrFill(byte[] val, int length, java.nio.ByteBuffer reuse); // Return a bytebuffer with the given bytes truncated to length, or filled with 0's to length depending on whether the given bytes are larger or smaller than the given length.\n\tstatic java.nio.ByteBuffer doubleToOrderedBytes(double val, java.nio.ByteBuffer reuse); // Doubles are treated the same as floats in floatToOrderedBytes(float, ByteBuffer)\n\tstatic java.nio.ByteBuffer floatToOrderedBytes(float val, java.nio.ByteBuffer reuse);\n\tstatic byte[] interleaveBits(byte[][] columnsBinary, int interleavedSize, java.nio.ByteBuffer reuse); // Interleave bits using a naive loop.\n\tstatic java.nio.ByteBuffer intToOrderedBytes(int val, java.nio.ByteBuffer reuse); // Signed ints do not have their bytes in magnitude order because of the sign bit.\n\tstatic java.nio.ByteBuffer longToOrderedBytes(long val, java.nio.ByteBuffer reuse); // Signed longs are treated the same as the signed ints in intToOrderedBytes(int, ByteBuffer)\n\tstatic java.nio.ByteBuffer shortToOrderedBytes(short val, java.nio.ByteBuffer reuse); // Signed shorts are treated the same as the signed ints in intToOrderedBytes(int, ByteBuffer)\n\tstatic java.nio.ByteBuffer stringToOrderedBytes(java.lang.String val, int length, java.nio.ByteBuffer reuse, java.nio.charset.CharsetEncoder encoder); // Strings are lexicographically sortable BUT if different byte array lengths will ruin the Z-Ordering.\n\tstatic java.nio.ByteBuffer tinyintToOrderedBytes(byte val, java.nio.ByteBuffer reuse); // Signed tiny ints are treated the same as the signed ints in intToOrderedBytes(int, ByteBuffer)\n}"}
{"index": 3912, "repo": "hbase-client-3.0.0-alpha-4", "des": "Class that hold all the paths of znode for HBase.", "code": "Class ZNodePaths {\n\tint getMetaReplicaIdFromPath(String path); // Parses the meta replicaId from the passed path.\n\tint getMetaReplicaIdFromZNode(String znode); // Parse the meta replicaId from the passed znode\n\tString getRsPath(ServerName sn);\n\tString getZNodeForReplica(int replicaId); // Returns the znode string corresponding to a replicaId\n\tboolean isClientReadable(String path); // Returns whether the path is supposed to be readable by the client and DOES NOT contain sensitive information (world readable).\n\tboolean isMetaZNodePath(String path); // Returns True is the fully qualified path is for meta location\n\tboolean isMetaZNodePrefix(String znode); // Returns True if meta znode.\n\tstatic String joinZNode(String prefix, String... suffix); // Join the prefix znode name with the suffix znode name to generate a proper full znode name.\n}"}
{"index": 4272, "repo": "beam-sdks-java-core-2.49.0", "des": "A BigEndianLongCoder encodes Longs in 8 bytes, big-endian.", "code": "Class BigEndianLongCoder {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tjava.lang.Long decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(java.lang.Long value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tprotected long getEncodedElementByteSize(java.lang.Long value); // Returns the size in bytes of the encoded value using this coder.\n\tTypeDescriptor<java.lang.Long> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tboolean isRegisterByteSizeObserverCheap(java.lang.Long value); // Returns whether Coder.registerByteSizeObserver(T, org.apache.beam.sdk.util.common.ElementByteSizeObserver) cheap enough to call for every element, that is, if this Coder can calculate the byte size of the element to be coded in roughly constant time (or lazily).\n\tstatic BigEndianLongCoder of();\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 18186, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Additional contract describing the source of an identifier mapping whose nature is EntityIdentifierNature.NON_AGGREGATED_COMPOSITE.", "code": "Interface IdentifierSourceNonAggregatedComposite {\n\tjava.util.List<SingularAttributeSource> getAttributeSourcesMakingUpIdentifier(); // Obtain the source descriptor for the identifier attribute.\n\tEmbeddableSource getIdClassSource(); // Retrieve the source information for the IdClass definition\n}"}
{"index": 236, "repo": "commons-collections4-4.4", "des": "Transformer implementation that returns the result of calling String.", "code": "Class StringValueTransformer<T> {\n\tstatic <T> Transformer<T,String> stringValueTransformer(); // Factory returning the singleton instance.\n\tString transform(T input); // Transforms the input to result by calling String.valueOf.\n}"}
{"index": 15432, "repo": "pulsar-client-api-3.0.0", "des": "The context of the message payload, which usually represents a batched message (batch) or a single message.", "code": "public interface MessagePayloadContext {\n\t<T> Message<T> asSingleMessage(MessagePayload payload, Schema<T> schema); // Convert the given payload to a single message if the entry is not a batch.\n\t<T> Message<T> getMessageAt(int index, int numMessages, MessagePayload payload, boolean containMetadata, Schema<T> schema); // Get the internal single message with a specific index from a payload if the payload is a batch.\n\tint getNumMessages(); // Get the number of messages when the payload is produced by Pulsar producer.\n\tString getProperty(String key); // Get a value associated with the given key.\n\tboolean isBatch(); // Check whether the payload is a batch when the payload is produced by Pulsar producer.\n}"}
{"index": 16941, "repo": "spring-integration-ip-6.1.2", "des": "TcpServerConnectionFactorySpec for TcpNioServerConnectionFactorys.", "code": "public class TcpNioServerConnectionFactorySpec extends TcpServerConnectionFactorySpec<TcpNioServerConnectionFactorySpec,TcpNioServerConnectionFactory> {\n\tTcpNioServerConnectionFactorySpec connectionSupport(TcpNioConnectionSupport tcpNioSupport); // The TcpNioConnectionSupport to use.\n\tTcpNioServerConnectionFactorySpec directBuffers(boolean usingDirectBuffers); // True to use direct buffers.\n}"}
{"index": 16390, "repo": "spring-integration-http-6.1.2", "des": "MultipartFileReader implementation that copies the MultipartFile's content to a new temporary File in the specified directory.", "code": "public class FileCopyingMultipartFileReader extends Object implements MultipartFileReader<org.springframework.web.multipart.MultipartFile> {\n\torg.springframework.web.multipart.MultipartFile readMultipartFile(org.springframework.web.multipart.MultipartFile multipartFile); // Read MultipartFile content.\n\tvoid setPrefix(String prefix); // Specify the prefix to use for temporary files.\n\tvoid setSuffix(String suffix); // Specify the suffix to use for temporary files.\n}"}
{"index": 4501, "repo": "beam-sdks-java-core-2.49.0", "des": "Concrete subclass of Row that explicitly stores all fields of the row.", "code": "Class RowWithStorage {\n\tint getFieldCount(); // Return the size of data fields.\n\t<T> T getValue(int fieldIdx); // Get value by field index, ClassCastException is thrown if schema doesn't match.\n\tjava.util.List<java.lang.Object> getValues(); // Return the list of raw unmodified data values to enable 0-copy code.\n}"}
{"index": 3202, "repo": "hbase-common-3.0.0-alpha-4", "des": "When deal with OutputStream which is not ByteBufferWriter type, wrap it with this class.", "code": "Class ByteBufferWriterOutputStream {\n\tvoid close();\n\tvoid flush();\n\tvoid write(byte[] b, int off, int len);\n\tvoid write(ByteBuffer b, int off, int len); // Writes len bytes from the specified ByteBuffer starting at offset off to this OutputStream.\n\tvoid write(int b);\n\tvoid writeInt(int i); // Writes an int to the underlying output stream as four bytes, high byte first.\n}"}
{"index": 1995, "repo": "hive-exec-4.0.0-alpha-2", "des": "This class implements the processor context for Column Pruner.", "code": "Class ColumnPrunerProcCtx {\n\tList<FieldNode> genColLists(Operator<? extends OperatorDesc> curOp); // Creates the list of internal column names(represented by field nodes, these names are used in the RowResolver and are different from the external column names) that are needed in the subtree.\n\tList<FieldNode> genColLists(Operator<? extends OperatorDesc> curOp, Operator<? extends OperatorDesc> child); // Creates the list of internal column names (represented by field nodes, these names are used in the RowResolver and are different from the external column names) that are needed in the subtree.\n\tList<FieldNode> getColsFromSelectExpr(SelectOperator op); // Creates the list of internal column names (represented by field nodes) from select expressions in a select operator.\n\tMap<CommonJoinOperator,Map<Byte,List<FieldNode>>> getJoinPrunedColLists();\n\tParseContext getParseContext();\n\tList<FieldNode> getPrunedColList(Operator<? extends OperatorDesc> op);\n\tMap<Operator<? extends OperatorDesc>,List<FieldNode>> getPrunedColLists();\n\tList<FieldNode> getSelectColsFromChildren(SelectOperator op, List<FieldNode> colList); // Creates the list of internal column names for select * expressions.\n\tList<FieldNode> getSelectColsFromLVJoin(RowSchema rs, List<FieldNode> colList); // Create the list of internal columns for select tag of LV\n\tvoid handleFilterUnionChildren(Operator<? extends OperatorDesc> curOp); // If the input filter operator has direct child(ren) which are union operator, and the filter's column is not the same as union's create select operator between them.\n}"}
{"index": 12891, "repo": "spring-data-mongodb-4.1.2", "des": "Factory to create MongoDatabase instances from a MongoClient instance.", "code": "public class SimpleReactiveMongoDatabaseFactory extends Object implements DisposableBean, ReactiveMongoDatabaseFactory {\n\tvoid destroy(); // Clean up the Mongo instance if it was created by the factory itself.\n\torg.bson.codecs.configuration.CodecRegistry getCodecRegistry(); // Get the underlying CodecRegistry used by the reactive MongoDB Java driver.\n\tPersistenceExceptionTranslator getExceptionTranslator(); // Exposes a shared MongoExceptionTranslator.\n\treactor.core.publisher.Mono<com.mongodb.reactivestreams.client.MongoDatabase> getMongoDatabase(); // Creates a default MongoDatabase instance.\n\treactor.core.publisher.Mono<com.mongodb.reactivestreams.client.MongoDatabase> getMongoDatabase(String dbName); // Obtain a MongoDatabase instance to access the database with the given name.\n\treactor.core.publisher.Mono<com.mongodb.reactivestreams.client.ClientSession> getSession(com.mongodb.ClientSessionOptions options); // Obtain a Mono emitting a ClientSession for given options.\n\tvoid setWriteConcern(com.mongodb.WriteConcern writeConcern); // Configures the WriteConcern to be used on the MongoDatabase instance being created.\n\tReactiveMongoDatabaseFactory withSession(com.mongodb.reactivestreams.client.ClientSession session); // Obtain a ClientSession bound instance of ReactiveMongoDatabaseFactory returning MongoDatabase instances that are aware and bound to the given session.\n}"}
{"index": 524, "repo": "ignite-core-2.15.0", "des": "Bulk load file format parser superclass + factory of known formats.", "code": "Class BulkLoadParser {\n\tstatic BulkLoadParser createParser(BulkLoadFormat format); // Creates a parser for a given format options.\n\tprotected abstract Iterable<List<Object>> parseBatch(byte[] batchData, boolean isLastBatch); // Parses a batch of input data and returns a list of records parsed (in most cases this is a list of strings).\n}"}
{"index": 5648, "repo": "org.apache.karaf.main-2.4.4", "des": "The ServiceTrackerCustomizer interface allows a ServiceTracker to customize the service objects that are tracked.", "code": "Interface ServiceTrackerCustomizer<S,T> {\n\tT addingService(ServiceReference<S> reference); // A service is being added to the ServiceTracker.\n\tvoid modifiedService(ServiceReference<S> reference, T service); // A service tracked by the ServiceTracker has been modified.\n\tvoid removedService(ServiceReference<S> reference, T service); // A service tracked by the ServiceTracker has been removed.\n}"}
{"index": 4806, "repo": "hadoop-common-3.3.4", "des": "Builder for input streams and subclasses whose return value is actually a completable future: this allows for better asynchronous operation.", "code": "Interface FutureDataInputStreamBuilder {\n\tCompletableFuture<FSDataInputStream> build(); // Instantiate the object which was being built.\n\tdefault FutureDataInputStreamBuilder withFileStatus(FileStatus status); // A FileStatus may be provided to the open request.\n}"}
{"index": 1630, "repo": "pdfbox-3.0.0-beta1", "des": "Split a document into several other documents.", "code": "Class Splitter {\n\tprotected PDDocument createNewDocument(); // Create a new document to write the split contents to.\n\tprotected PDDocument getDestinationDocument(); // The source PDF document.\n\tprotected PDDocument getSourceDocument(); // The source PDF document.\n\torg.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction getStreamCacheCreateFunction();\n\tprotected void processPage(PDPage page); // Interface to start processing a new page.\n\tvoid setEndPage(int end); // This will set the end page.\n\tvoid setSplitAtPage(int split); // This will tell the splitting algorithm where to split the pages.\n\tvoid setStartPage(int start); // This will set the start page.\n\tvoid setStreamCacheCreateFunction(org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction streamCacheCreateFunction); // Set the current function to be used to create an instance of stream cache.\n\tList<PDDocument> split(PDDocument document); // This will take a document and split into several other documents.\n\tprotected boolean splitAtPage(int pageNumber); // Check if it is necessary to create a new document.\n}"}
{"index": 16767, "repo": "spring-security-ldap-6.1.2", "des": "An Ldap implementation of UserDetailsManager.", "code": "public class LdapUserDetailsManager extends Object implements org.springframework.security.provisioning.UserDetailsManager {\n\tprotected void addAuthorities(org.springframework.ldap.core.DistinguishedName userDn, Collection<? extends org.springframework.security.core.GrantedAuthority> authorities);\n\tprotected org.springframework.ldap.core.DistinguishedName buildGroupDn(String group); // Creates a DN from a group name.\n\tvoid changePassword(String oldPassword, String newPassword); // Changes the password for the current user.\n\tprotected void copyToContext(org.springframework.security.core.userdetails.UserDetails user, org.springframework.ldap.core.DirContextAdapter ctx);\n\tvoid createUser(org.springframework.security.core.userdetails.UserDetails user);\n\tvoid deleteUser(String username);\n\torg.springframework.security.core.userdetails.UserDetails loadUserByUsername(String username);\n\tprotected void removeAuthorities(org.springframework.ldap.core.DistinguishedName userDn, Collection<? extends org.springframework.security.core.GrantedAuthority> authorities);\n\tvoid setAttributesToRetrieve(String[] attributesToRetrieve);\n\tvoid setGroupMemberAttributeName(String groupMemberAttributeName); // Sets the name of the multi-valued attribute which holds the DNs of users who are members of a group.\n\tvoid setGroupRoleAttributeName(String groupRoleAttributeName);\n\tvoid setGroupSearchBase(String groupSearchBase);\n\tvoid setPasswordAttributeName(String passwordAttributeName);\n\tvoid setRoleMapper(org.springframework.ldap.core.AttributesMapper roleMapper);\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tvoid setUsePasswordModifyExtensionOperation(boolean usePasswordModifyExtensionOperation); // Sets the method by which a user's password gets modified.\n\tvoid setUserDetailsMapper(UserDetailsContextMapper userDetailsMapper);\n\tvoid setUsernameMapper(LdapUsernameToDnMapper usernameMapper);\n\tvoid updateUser(org.springframework.security.core.userdetails.UserDetails user);\n\tboolean userExists(String username);\n}"}
{"index": 7487, "repo": "nifi-client-dto-1.22.0", "des": "Component that is capable of reporting internal NiFi state to an external service.", "code": "Class ReportingTaskDTO {\n\tInteger getActiveThreadCount();\n\tString getAnnotationData();\n\tBundleDTO getBundle(); // The details of the artifact that bundled this reporting task type.\n\tString getComments();\n\tString getCustomUiUrl();\n\tMap<String,String> getDefaultSchedulingPeriod();\n\tBoolean getDeprecated();\n\tMap<String,PropertyDescriptorDTO> getDescriptors();\n\tBoolean getExtensionMissing();\n\tBoolean getMultipleVersionsAvailable();\n\tString getName();\n\tBoolean getPersistsState();\n\tMap<String,String> getProperties();\n\tBoolean getRestricted();\n\tString getSchedulingPeriod(); // The frequency with which to schedule the reporting task.\n\tString getSchedulingStrategy();\n\tSet<String> getSensitiveDynamicPropertyNames();\n\tString getState();\n\tBoolean getSupportsSensitiveDynamicProperties();\n\tString getType();\n\tCollection<String> getValidationErrors(); // Gets the validation errors from this reporting task.\n\tString getValidationStatus();\n\tvoid setActiveThreadCount(Integer activeThreadCount);\n\tvoid setAnnotationData(String annotationData);\n\tvoid setBundle(BundleDTO bundle);\n\tvoid setComments(String comments);\n\tvoid setCustomUiUrl(String customUiUrl);\n\tvoid setDefaultSchedulingPeriod(Map<String,String> defaultSchedulingPeriod);\n\tvoid setDeprecated(Boolean deprecated);\n\tvoid setDescriptors(Map<String,PropertyDescriptorDTO> descriptors);\n\tvoid setExtensionMissing(Boolean extensionMissing);\n\tvoid setMultipleVersionsAvailable(Boolean multipleVersionsAvailable);\n\tvoid setName(String name);\n\tvoid setPersistsState(Boolean persistsState);\n\tvoid setProperties(Map<String,String> properties);\n\tvoid setRestricted(Boolean restricted);\n\tvoid setSchedulingPeriod(String schedulingPeriod);\n\tvoid setSchedulingStrategy(String schedulingStrategy);\n\tvoid setSensitiveDynamicPropertyNames(Set<String> sensitiveDynamicPropertyNames);\n\tvoid setState(String state);\n\tvoid setSupportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties);\n\tvoid setType(String type);\n\tvoid setValidationErrors(Collection<String> validationErrors);\n\tvoid setValidationStatus(String validationStatus);\n}"}
{"index": 4661, "repo": "commons-vfs2-2.9.0", "des": "A FileSystemManager that configures itself from an XML (Default: providers.", "code": "Class StandardFileSystemManager {\n\tprotected void configurePlugins(); // Scans the classpath to find any droped plugin.\n\tprotected DefaultFileReplicator createDefaultFileReplicator();\n\tvoid init(); // Initializes this manager.\n\tvoid setClassLoader(ClassLoader classLoader); // Sets the ClassLoader to use to load the providers.\n\tvoid setConfiguration(String configUri); // Sets the configuration file for this manager.\n\tvoid setConfiguration(URL configUri); // Sets the configuration file for this manager.\n}"}
{"index": 13060, "repo": "spring-aop-6.0.11", "des": "Convenient implementation of the IntroductionInterceptor interface.", "code": "public class DelegatePerTargetObjectIntroductionInterceptor extends IntroductionInfoSupport implements IntroductionInterceptor {\n\tprotected Object doProceed(MethodInvocation mi); // Proceed with the supplied MethodInterceptor.\n\tObject invoke(MethodInvocation mi); // Subclasses may need to override this if they want to perform custom behaviour in around advice.\n}"}
{"index": 15992, "repo": "wicket-util-10.0.0-M1", "des": "Encodes long values into the specified alphabet.", "code": "public class LongEncoder extends Object {\n\tstatic long decode(String value); // Decodes value using the default alphabet: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tstatic long decode(String value, String alphabet); // Decodes value using the specified alphabet\n\tstatic String encode(long value); // Encodes the value into the default alphabet: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tstatic String encode(long value, String alphabet); // Encodes value into the specified alphabet\n}"}
{"index": 12222, "repo": "jena-core-4.9.0", "des": "RandomOrderIterator - Reorders the elements returned by an Iterator.", "code": "public class RandomOrderIterator<T> extends WrappedIterator<T> {\n\tboolean hasNext(); // hasNext: defer to the base iterator\n\tT next(); // next: defer to the base iterator\n\tvoid remove(); // default remove: we have no elements, so we can't remove any.\n}"}
{"index": 15898, "repo": "spring-rabbit-3.0.6", "des": "Abstract ConnectionFactory implementation that routes AbstractRoutingConnectionFactory.createConnection() calls to one of various target ConnectionFactories based on a lookup key.", "code": "public abstract class AbstractRoutingConnectionFactory extends Object implements ConnectionFactory, RoutingConnectionFactory, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid addConnectionListener(ConnectionListener listener);\n\tprotected void addTargetConnectionFactory(Object key, ConnectionFactory connectionFactory); // Adds the given ConnectionFactory and associates it with the given lookup key.\n\tvoid afterPropertiesSet();\n\tvoid clearConnectionListeners();\n\tConnection createConnection();\n\tvoid destroy();\n\tprotected abstract Object determineCurrentLookupKey(); // Determine the current lookup key.\n\tprotected ConnectionFactory determineTargetConnectionFactory(); // Retrieve the current target ConnectionFactory.\n\tString getHost();\n\tint getPort();\n\tConnectionFactory getTargetConnectionFactory(Object key); // Returns the ConnectionFactory bound to given lookup key, or null if one does not exist.\n\tString getUsername();\n\tString getVirtualHost();\n\tboolean isLenientFallback();\n\tboolean isPublisherConfirms(); // Return true if publisher confirms are enabled.\n\tboolean isPublisherReturns(); // Return true if publisher returns are enabled.\n\tboolean removeConnectionListener(ConnectionListener listener);\n\tprotected ConnectionFactory removeTargetConnectionFactory(Object key); // Removes the ConnectionFactory associated with the given lookup key and returns it.\n\tvoid resetConnection(); // Close any connection(s) that might be cached by this factory.\n\tvoid setConsistentConfirmsReturns(boolean consistentConfirmsReturns); // Specify whether to apply a validation enforcing all ConnectionFactory.isPublisherConfirms() and ConnectionFactory.isPublisherReturns() have a consistent value.\n\tvoid setDefaultTargetConnectionFactory(ConnectionFactory defaultTargetConnectionFactory); // Specify the default target ConnectionFactory, if any.\n\tvoid setLenientFallback(boolean lenientFallback); // Specify whether to apply a lenient fallback to the default ConnectionFactory if no specific ConnectionFactory could be found for the current lookup key.\n\tvoid setTargetConnectionFactories(Map<Object,ConnectionFactory> targetConnectionFactories); // Specify the map of target ConnectionFactories, with the lookup key as key.\n}"}
{"index": 6540, "repo": "exoplayer-core-2.9.6", "des": "Loads media corresponding to a Timeline.", "code": "Interface MediaPeriod {\n\tboolean continueLoading(long positionUs); // Attempts to continue loading.\n\tvoid discardBuffer(long positionUs, boolean toKeyframe); // Discards buffered media up to the specified position.\n\tlong getAdjustedSeekPositionUs(long positionUs, SeekParameters seekParameters); // Returns the position to which a seek will be performed, given the specified seek position and SeekParameters.\n\tlong getBufferedPositionUs(); // Returns an estimate of the position up to which data is buffered for the enabled tracks.\n\tlong getNextLoadPositionUs(); // Returns the next load time, or C.TIME_END_OF_SOURCE if loading has finished.\n\tTrackGroupArray getTrackGroups(); // Returns the TrackGroups exposed by the period.\n\tvoid maybeThrowPrepareError(); // Throws an error that's preventing the period from becoming prepared.\n\tvoid prepare(MediaPeriod.Callback callback, long positionUs); // Prepares this media period asynchronously.\n\tlong readDiscontinuity(); // Attempts to read a discontinuity.\n\tvoid reevaluateBuffer(long positionUs); // Re-evaluates the buffer given the playback position.\n\tlong seekToUs(long positionUs); // Attempts to seek to the specified position in microseconds.\n\tlong selectTracks(TrackSelection[] selections, boolean[] mayRetainStreamFlags, SampleStream[] streams, boolean[] streamResetFlags, long positionUs); // Performs a track selection.\n}"}
{"index": 882, "repo": "ignite-core-2.15.0", "des": "This interface provides a rich API for working with distributed atomic stamped value.", "code": "Interface IgniteAtomicStamped<T,S> {\n\tvoid close(); // Removes this atomic stamped.\n\tboolean compareAndSet(T expVal, T newVal, S expStamp, S newStamp); // Conditionally sets the new value and new stamp.\n\tIgniteBiTuple<T,S> get(); // Gets both current value and current stamp of atomic stamped.\n\tString name(); // Name of atomic stamped.\n\tboolean removed(); // Gets status of atomic.\n\tvoid set(T val, S stamp); // Unconditionally sets the value and the stamp.\n\tS stamp(); // Gets current stamp.\n\tT value(); // Gets current value.\n}"}
{"index": 15186, "repo": "spring-boot-3.1.1", "des": "Base class for an InitializingBean that performs SQL database initialization using schema (DDL) and data (DML) scripts.", "code": "public abstract class AbstractScriptDatabaseInitializer extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tboolean initializeDatabase(); // Initializes the database by applying schema and data scripts.\n\tprotected boolean isEmbeddedDatabase(); // Returns whether the database that is to be initialized is embedded.\n\tprotected abstract void runScripts(AbstractScriptDatabaseInitializer.Scripts scripts); // Initialize the database by running the given scripts.\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader);\n}"}
{"index": 16704, "repo": "spring-beans-6.0.11", "des": "AutowireCandidateResolver implementation to use when no annotation support is available.", "code": "public class SimpleAutowireCandidateResolver extends Object implements AutowireCandidateResolver {\n\tAutowireCandidateResolver cloneIfNecessary(); // This implementation returns this as-is.\n\tClass<?> getLazyResolutionProxyClass(DependencyDescriptor descriptor, String beanName); // Determine the proxy class for lazy resolution of the dependency target, if demanded by the injection point.\n\tObject getLazyResolutionProxyIfNecessary(DependencyDescriptor descriptor, String beanName); // Build a proxy for lazy resolution of the actual dependency target, if demanded by the injection point.\n\tObject getSuggestedValue(DependencyDescriptor descriptor); // Determine whether a default value is suggested for the given dependency.\n\tboolean hasQualifier(DependencyDescriptor descriptor); // Determine whether the given descriptor declares a qualifier beyond the type (typically - but not necessarily - a specific kind of annotation).\n\tboolean isAutowireCandidate(BeanDefinitionHolder bdHolder, DependencyDescriptor descriptor); // Determine whether the given bean definition qualifies as an autowire candidate for the given dependency.\n\tboolean isRequired(DependencyDescriptor descriptor); // Determine whether the given descriptor is effectively required.\n}"}
{"index": 4813, "repo": "hadoop-common-3.3.4", "des": "A bridge that wraps around a DeflaterOutputStream to make it a CompressionOutputStream.", "code": "Class GzipCodec.GzipOutputStream {\n\tvoid close();\n\tvoid finish(); // Finishes writing compressed data to the output stream without closing the underlying stream.\n\tvoid flush();\n\tvoid resetState(); // Reset the compression to the initial state.\n\tvoid write(byte[] data, int offset, int length); // Write compressed bytes to the stream.\n\tvoid write(int b);\n}"}
{"index": 9825, "repo": "commons-math3-3.6.1", "des": "This class implements a one-dimensional sphere (i.", "code": "Class Sphere1D {\n\tint getDimension(); // Get the dimension of the space.\n\tstatic Sphere1D getInstance(); // Get the unique instance.\n\tSpace getSubSpace(); // Get the n-1 dimension subspace of this space.\n}"}
{"index": 13387, "repo": "shiro-core-2.0.0-alpha-2", "des": "A ThreadContext provides a means of binding and unbinding objects to the current thread based on key/value pairs.", "code": "public abstract class ThreadContext extends Object {\n\tstatic void bind(SecurityManager securityManager); // Convenience method that simplifies binding the application's SecurityManager instance to the ThreadContext.\n\tstatic void bind(Subject subject); // Convenience method that simplifies binding a Subject to the ThreadContext.\n\tstatic Object get(Object key); // Returns the object for the specified key that is bound to the current thread.\n\tstatic Map<Object,Object> getResources(); // Returns the ThreadLocal Map.\n\tstatic SecurityManager getSecurityManager(); // Convenience method that simplifies retrieval of the application's SecurityManager instance from the current thread.\n\tstatic Subject getSubject(); // Convenience method that simplifies retrieval of a thread-bound Subject.\n\tstatic void put(Object key, Object value); // Binds value for the given key to the current thread.\n\tstatic void remove(); // Removes the underlying ThreadLocal from the thread.\n\tstatic Object remove(Object key); // Unbinds the value for the given key from the current thread.\n\tstatic void setResources(Map<Object,Object> newResources); // Allows a caller to explicitly set the entire resource map.\n\tstatic SecurityManager unbindSecurityManager(); // Convenience method that simplifies removal of the application's SecurityManager instance from the thread.\n\tstatic Subject unbindSubject(); // Convenience method that simplifies removal of a thread-local Subject from the thread.\n}"}
{"index": 10741, "repo": "spring-tx-6.0.11", "des": "Opaque object used to hold transaction information.", "code": "protected static final class TransactionAspectSupport.TransactionInfo extends Object {\n\tString getJoinpointIdentification(); // Return a String representation of this joinpoint (usually a Method call) for use in logging.\n\tTransactionAttribute getTransactionAttribute();\n\tPlatformTransactionManager getTransactionManager();\n\tTransactionStatus getTransactionStatus();\n\tboolean hasTransaction(); // Return whether a transaction was created by this aspect, or whether we just have a placeholder to keep ThreadLocal stack integrity.\n\tvoid newTransactionStatus(TransactionStatus status);\n}"}
{"index": 5803, "repo": "iceberg-core-1.3.0", "des": "A writer capable of writing files of a single type (i.", "code": "Interface FileWriter<T,R> {\n\tlong length(); // Returns the number of bytes that were currently written by this writer.\n\tR result(); // Returns a result that contains information about written DataFiles or DeleteFiles.\n\tdefault void write(java.lang.Iterable<T> rows); // Writes rows to a predefined spec/partition.\n\tvoid write(T row); // Writes a row to a predefined spec/partition.\n}"}
{"index": 3733, "repo": "kafka-streams-3.5.0", "des": "Factory for creating serializers / deserializers for state stores in Kafka Streams.", "code": "Class StateSerdes<K,V> {\n\torg.apache.kafka.common.serialization.Deserializer<K> keyDeserializer(); // Return the key deserializer.\n\tK keyFrom(byte[] rawKey); // Deserialize the key from raw bytes.\n\torg.apache.kafka.common.serialization.Serde<K> keySerde(); // Return the key serde.\n\torg.apache.kafka.common.serialization.Serializer<K> keySerializer(); // Return the key serializer.\n\tbyte[] rawKey(K key); // Serialize the given key.\n\tbyte[] rawValue(V value); // Serialize the given value.\n\tString topic(); // Return the topic.\n\torg.apache.kafka.common.serialization.Deserializer<V> valueDeserializer(); // Return the value deserializer.\n\tV valueFrom(byte[] rawValue); // Deserialize the value from raw bytes.\n\torg.apache.kafka.common.serialization.Serde<V> valueSerde(); // Return the value serde.\n\torg.apache.kafka.common.serialization.Serializer<V> valueSerializer(); // Return the value serializer.\n\tstatic <K,V> StateSerdes<K,V> withBuiltinTypes(String topic, Class<K> keyClass, Class<V> valueClass); // Create a new instance of StateSerdes for the given state name and key-/value-type classes.\n}"}
{"index": 13300, "repo": "spring-security-rsocket-6.1.2", "des": "Uses the provided ReactiveAuthenticationManager to authenticate a Payload.", "code": "public class AuthenticationPayloadInterceptor extends Object implements PayloadInterceptor, org.springframework.core.Ordered {\n\tint getOrder();\n\treactor.core.publisher.Mono<Void> intercept(PayloadExchange exchange, PayloadInterceptorChain chain); // Process the Web request and (optionally) delegate to the next PayloadInterceptor through the given PayloadInterceptorChain.\n\tvoid setAuthenticationConverter(PayloadExchangeAuthenticationConverter authenticationConverter); // Sets the convert to be used\n\tvoid setOrder(int order);\n}"}
{"index": 9934, "repo": "iceberg-api-1.3.0", "des": "API for overwriting files in a table by partition.", "code": "Interface ReplacePartitions {\n\tReplacePartitions addFile(DataFile file); // Add a DataFile to the table.\n\tReplacePartitions validateAppendOnly(); // Validate that no partitions will be replaced and the operation is append-only.\n\tReplacePartitions validateFromSnapshot(long snapshotId); // Set the snapshot ID used in validations for this operation.\n\tReplacePartitions validateNoConflictingData(); // Enables validation that data added concurrently does not conflict with this commit's operation.\n\tReplacePartitions validateNoConflictingDeletes(); // Enables validation that deletes that happened concurrently do not conflict with this commit's operation.\n}"}
{"index": 2386, "repo": "commons-geometry-euclidean-1.0", "des": "Class representing a ray in 3D Euclidean space.", "code": "Class Ray3D {\n\tBounds3D getBounds(); // Get the 3D bounding box of the line subset or null if the subset is empty or infinite.\n\tVector3D getCentroid(); // Get the centroid, or geometric center, of the line subset or null if the subset is empty or infinite.\n\tVector3D getDirection(); // Get the direction of the ray.\n\tVector3D getEndPoint(); // Get the end point for the line subset.\n\tdouble getSize();\n\tVector3D getStartPoint(); // Get the start point for the line subset.\n\tdouble getSubspaceEnd(); // Get the 1D end location of the line subset or Double.POSITIVE_INFINITY if no end location exists.\n\tdouble getSubspaceStart(); // Get the 1D start location of the line subset or Double.NEGATIVE_INFINITY if no start location exists.\n\tboolean isFinite();\n\tboolean isInfinite();\n\tRay3D transform(Transform<Vector3D> transform); // Transform this instance.\n}"}
{"index": 9020, "repo": "hbase-server-3.0.0-alpha-4", "des": "Does not perform any kind of encoding/decoding.", "code": "Class NoOpIndexBlockEncoder {\n\tHFileIndexBlockEncoder.EncodedSeeker createSeeker();\n\tvoid encode(BlockIndexChunk blockIndexChunk, boolean rootIndexBlock, DataOutput out);\n\tIndexBlockEncoding getIndexBlockEncoding(); // Returns the index block encoding\n\tvoid saveMetadata(HFile.Writer writer); // Save metadata in HFile which will be written to disk\n}"}
{"index": 2970, "repo": "tink-1.10.0", "des": "ChunkedMacWrapper is the implementation of PrimitiveWrapper for the ChunkedMac primitive.", "code": "Class ChunkedMacWrapper {\n\tClass<ChunkedMac> getInputPrimitiveClass(); // Returns the primitive class object of the primitive used to create B.\n\tClass<ChunkedMac> getPrimitiveClass(); // Returns the primitive class object of the primitive managed.\n\tChunkedMac wrap(PrimitiveSet<ChunkedMac> primitives); // Wraps a PrimitiveSet and returns a single instance.\n}"}
{"index": 2844, "repo": "amqp-client-5.18.0", "des": "A representation of network addresses, i.", "code": "Class Address {\n\tboolean equals(Object obj);\n\tString getHost(); // Get the host name\n\tint getPort(); // Get the port number\n\tstatic boolean isHostWithPort(String addressString);\n\tstatic Address parseAddress(String addressString); // Factory method: takes a formatted addressString string as construction parameter\n\tstatic Address[] parseAddresses(String addresses); // Array-based factory method: takes an array of formatted address strings as construction parameter\n\tstatic String parseHost(String addressString); // Extracts hostname or IP address from a string containing a hostname, IP address, hostname:port pair or IP address:port pair.\n\tstatic int parsePort(String addressString);\n\tInetSocketAddress toInetSocketAddress(int port); // Construct an InetSocketAddress for this address with a specific port\n}"}
{"index": 10957, "repo": "spring-data-redis-3.1.2", "des": "Collection types supported by this factory.", "code": "public static enum RedisCollectionFactoryBean.CollectionType extends Enum<RedisCollectionFactoryBean.CollectionType> {\n\tstatic RedisCollectionFactoryBean.CollectionType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic RedisCollectionFactoryBean.CollectionType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 16488, "repo": "spring-batch-infrastructure-5.0.2", "des": "An ItemWriter implementation for Apache Kafka using a KafkaTemplate with default topic configured.", "code": "public class KafkaItemWriter<K,T> extends KeyValueItemWriter<K,T> {\n\tprotected void flush(); // Flush items to the key/value store.\n\tprotected void init(); // afterPropertiesSet() hook\n\tvoid setKafkaTemplate(org.springframework.kafka.core.KafkaTemplate<K,T> kafkaTemplate); // Set the KafkaTemplate to use.\n\tvoid setTimeout(long timeout); // The time limit to wait when flushing items to Kafka.\n\tprotected void writeKeyValue(K key, T value); // Subclasses implement this method to write each item to key value store\n}"}
{"index": 13662, "repo": "spring-webmvc-6.0.11", "des": "Extends AbstractMessageConverterMethodArgumentResolver with the ability to handle method return values by writing to the response with HttpMessageConverters.", "code": "public abstract class AbstractMessageConverterMethodProcessor extends AbstractMessageConverterMethodArgumentResolver implements org.springframework.web.method.support.HandlerMethodReturnValueHandler {\n\tprotected org.springframework.http.server.ServletServerHttpResponse createOutputMessage(org.springframework.web.context.request.NativeWebRequest webRequest); // Creates a new HttpOutputMessage from the given NativeWebRequest.\n\tprotected List<org.springframework.http.MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass); // Returns the media types that can be produced.\n\tprotected List<org.springframework.http.MediaType> getProducibleMediaTypes(HttpServletRequest request, Class<?> valueClass, Type targetType); // Returns the media types that can be produced.\n\tprotected Class<?> getReturnValueType(Object value, org.springframework.core.MethodParameter returnType); // Return the type of the value to be written to the response.\n\tprotected boolean isResourceType(Object value, org.springframework.core.MethodParameter returnType); // Return whether the returned value or the declared return type extends Resource.\n\tprotected <T> void writeWithMessageConverters(T value, org.springframework.core.MethodParameter returnType, org.springframework.http.server.ServletServerHttpRequest inputMessage, org.springframework.http.server.ServletServerHttpResponse outputMessage); // Writes the given return type to the given output message.\n\tprotected <T> void writeWithMessageConverters(T value, org.springframework.core.MethodParameter returnType, org.springframework.web.context.request.NativeWebRequest webRequest); // Writes the given return value to the given web request.\n}"}
{"index": 11062, "repo": "spring-shell-core-3.1.2", "des": "Representing result from Lexer tokenisation.", "code": "public static record Lexer.LexerResult(List<Token> tokens, List<MessageResult> messageResults) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tList<MessageResult> messageResults(); // Returns the value of the messageResults record component.\n\tList<Token> tokens(); // Returns the value of the tokens record component.\n}"}
{"index": 1746, "repo": "kafka-clients-3.5.0", "des": "Configuration data from a ConfigProvider.", "code": "Class ConfigData {\n\tMap<String,String> data(); // Returns the data.\n\tLong ttl(); // Returns the TTL (in milliseconds).\n}"}
{"index": 4006, "repo": "zookeeper-3.8.2", "des": "This class is the superclass of two of the three main actors in a ZK ensemble: Followers and Observers.", "code": "Class Learner {\n\tprotected void connectToLeader(MultipleAddresses multiAddr, String hostname); // Establish a connection with the LearnerMaster found by findLearnerMaster.\n\tprotected Socket createSocket(); // Creating a simple or and SSL socket.\n\tprotected QuorumPeer.QuorumServer findLeader(); // Returns the address of the node we think is the leader.\n\tprotected static boolean getAsyncSending();\n\tint getPendingRevalidationsCount();\n\tSocket getSocket(); // Socket getter\n\tprotected long nanoTime(); // Overridable helper method to return the System.nanoTime().\n\tprotected void ping(QuorumPacket qp);\n\tprotected long registerWithLeader(int pktType); // Once connected to the leader or learner master, perform the handshake protocol to establish a following / observing connection.\n\tprotected void revalidate(QuorumPacket qp);\n\tprotected static void setAsyncSending(boolean newMode);\n\tvoid shutdown(); // Shutdown the Peer\n\tprotected void sockConnect(Socket sock, InetSocketAddress addr, int timeout); // Overridable helper method to simply call sock.connect().\n\tprotected void startSendingThread(); // Start thread that will forward any packet in the queue to the leader\n\tprotected void syncWithLeader(long newLeaderZxid); // Finally, synchronize our history with the Leader (if Follower) or the LearnerMaster (if Observer).\n}"}
{"index": 14461, "repo": "wicket-core-10.0.0-M1", "des": "Enumerated type for different kinds of component tags.", "code": "public static enum XmlTag.TagType extends Enum<XmlTag.TagType> {\n\tstatic XmlTag.TagType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic XmlTag.TagType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7967, "repo": "commons-jcs3-core-3.1", "des": "Used to queue up update requests to the underlying cache.", "code": "Class LateralCacheNoWait<K,V> {\n\tvoid dispose(); // Adds a dispose request to the lateral cache.\n\tvoid fixCache(ICacheServiceNonLocal<K,V> lateral); // Replaces the lateral cache service handle with the given handle and reset the queue by starting up a new instance.\n\tICacheElement<K,V> get(K key); // Synchronously reads from the lateral cache.\n\tILateralCacheAttributes getAuxiliaryCacheAttributes(); // This returns the generic attributes for an auxiliary cache.\n\tString getCacheName(); // Gets the cacheName attribute of the LateralCacheNoWait object\n\tICacheType.CacheType getCacheType(); // No lateral invocation.\n\tString getEventLoggingExtraInfo(); // this won't be called since we don't do ICache logging here.\n\tString getIdentityKey(); // The identifying key to this no wait\n\tSet<K> getKeySet(); // Return the keys in this cache.\n\tMap<K,ICacheElement<K,V>> getMatching(String pattern); // Synchronously reads from the lateral cache.\n\tMap<K,ICacheElement<K,V>> getMultiple(Set<K> keys); // Gets multiple items from the cache based on the given set of keys.\n\tint getSize(); // No lateral invocation.\n\tIStats getStatistics();\n\tString getStats(); // getStats\n\tCacheStatus getStatus(); // Returns the async cache status.\n\tboolean remove(K key); // Adds a remove request to the lateral cache.\n\tvoid removeAll(); // Adds a removeAll request to the lateral cache.\n\tvoid resetEventQ(); // Resets the event q by first destroying the existing one and starting up new one.\n\tvoid setIdentityKey(String identityKey); // Set the identifying key to this no wait\n\tvoid update(ICacheElement<K,V> ce); // Puts an item to the cache.\n}"}
{"index": 5416, "repo": "druid-processing-26.0.0", "des": "Class for reading rows in the same format as used by FrameType.", "code": "Class RowReader {\n\tint fieldCount();\n\tFieldReader fieldReader(int fieldNumber);\n\tObject readField(org.apache.datasketches.memory.Memory memory, long rowPosition, long rowLength, int fieldNumber); // Read a particular field value as an object.\n\tList<Object> readRow(org.apache.datasketches.memory.Memory memory, long rowPosition, long rowLength); // Read an entire row as a list of objects.\n}"}
{"index": 18790, "repo": "lucene-core-9.7.0", "des": "A compression mode that trades speed for compression ratio.", "code": "Class DeflateWithPresetDictCompressionMode {\n\tCompressor newCompressor(); // Create a new Compressor instance.\n\tDecompressor newDecompressor(); // Create a new Decompressor instance.\n}"}
{"index": 750, "repo": "ignite-core-2.15.0", "des": "Compound future that represents the result of the external fixes for some keys.", "code": "Class GridCompoundReadRepairFuture {\n\tvoid add(IgniteInternalFuture<Void> fut);\n\tvoid apply(IgniteInternalFuture<Void> fut); // Closure body.\n\tvoid markInitialized(); // Mark this future as initialized.\n}"}
{"index": 467, "repo": "phoenix-core-5.1.3", "des": "Implementation of KeySlots for a constant value,.", "code": "Class WhereOptimizer.KeyExpressionVisitor.SingleKeySlot {\n\tList<org.apache.phoenix.compile.WhereOptimizer.KeyExpressionVisitor.KeySlot> getSlots(); // List of slots that store binding of constant values for primary key columns.\n\tboolean isPartialExtraction(); // Tracks whether or not the contained KeySlot(s) contain a slot that includes only a partial extraction of the involved expressions.\n}"}
{"index": 2004, "repo": "hive-exec-4.0.0-alpha-2", "des": "Data consumer; an equivalent of a data queue for an asynchronous data producer.", "code": "Interface Consumer<T> {\n\tvoid consumeData(T data); // Some data has been produced.\n\tvoid setDone(); // No more data will be produced; done.\n\tvoid setError(Throwable t); // No more data will be produced; error during production.\n}"}
{"index": 14347, "repo": "wicket-core-10.0.0-M1", "des": "Keep files in a nested filed structure to minimize amount of directory entries (inodes) in a single directory.", "code": "public class NestedFolders extends Object {\n\tFile get(String name, boolean create); // Get a nested folder for the given name.\n\tSet<File> getAll(); // Get all files inside.\n\tFile getBase();\n\tvoid remove(String name); // Remove a nested folder.\n}"}
{"index": 15391, "repo": "camel-base-4.0.0-RC1", "des": "A class which will auto-discover Converter objects and methods to pre-load the TypeConverterRegistry of converters on startup.", "code": "public class AnnotationTypeConverterLoader extends Object implements org.apache.camel.spi.TypeConverterLoader {\n\tprotected boolean acceptClass(Class<?> clazz);\n\tprotected String[] filterPackageNamesOnly(org.apache.camel.spi.PackageScanClassResolver resolver, String[] packageNames, Set<Class<?>> classes); // Filters the given list of packages and returns an array of only package names.\n\tprotected static String[] filterUnwantedPackage(String name, String[] packageNames); // Filters the given list of packages\n\tprotected String[] findPackageNames(); // Finds the names of the packages to search for on the classpath looking for text files on the classpath at the META_INF_SERVICES location.\n\tprotected void findPackages(Set<String> packages, ClassLoader classLoader);\n\tprotected boolean isValidConverterMethod(Method method);\n\tprotected boolean isValidFallbackConverterMethod(Method method);\n\tvoid load(org.apache.camel.spi.TypeConverterRegistry registry);\n\tprotected void loadConverterMethods(org.apache.camel.spi.TypeConverterRegistry registry, Class<?> type); // Loads all of the converter methods for the given type\n\tprotected void registerFallbackTypeConverter(org.apache.camel.spi.TypeConverterRegistry registry, org.apache.camel.TypeConverter typeConverter, Method method);\n\tprotected void registerTypeConverter(org.apache.camel.spi.TypeConverterRegistry registry, Method method, Class<?> toType, Class<?> fromType, org.apache.camel.TypeConverter typeConverter);\n}"}
{"index": 4702, "repo": "commons-geometry-core-1.0", "des": "Interface representing a generic element in a mathematical space.", "code": "Interface Spatial {\n\tint getDimension(); // Returns the number of dimensions in the space that this element belongs to.\n\tboolean isFinite(); // Returns true if all values in this element are finite, meaning they are not NaN or infinite.\n\tboolean isInfinite(); // Returns true if any value in this element is infinite and none are NaN; otherwise, returns false.\n\tboolean isNaN(); // Returns true if any value in this element is NaN; otherwise returns false.\n}"}
{"index": 5106, "repo": "commons-collections-3.2.2", "des": "Decorates another OrderedMap to ensure it can't be altered.", "code": "Class UnmodifiableOrderedMap {\n\tvoid clear();\n\tstatic OrderedMap decorate(OrderedMap map); // Factory method to create an unmodifiable sorted map.\n\tSet entrySet();\n\tSet keySet();\n\tMapIterator mapIterator(); // Obtains a MapIterator over the map.\n\tOrderedMapIterator orderedMapIterator(); // Obtains an OrderedMapIterator over the map.\n\tObject put(Object key, Object value);\n\tvoid putAll(Map mapToCopy);\n\tObject remove(Object key);\n\tCollection values();\n}"}
{"index": 6434, "repo": "exoplayer-core-2.9.6", "des": "Dispatches events to a AudioRendererEventListener.", "code": "Class AudioRendererEventListener.EventDispatcher {\n\tvoid audioSessionId(int audioSessionId); // Invokes AudioRendererEventListener.onAudioSessionId(int).\n\tvoid audioTrackUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs); // Invokes AudioRendererEventListener.onAudioSinkUnderrun(int, long, long).\n\tvoid decoderInitialized(java.lang.String decoderName, long initializedTimestampMs, long initializationDurationMs); // Invokes AudioRendererEventListener.onAudioDecoderInitialized(String, long, long).\n\tvoid disabled(DecoderCounters counters); // Invokes AudioRendererEventListener.onAudioDisabled(DecoderCounters).\n\tvoid enabled(DecoderCounters decoderCounters); // Invokes AudioRendererEventListener.onAudioEnabled(DecoderCounters).\n\tvoid inputFormatChanged(Format format); // Invokes AudioRendererEventListener.onAudioInputFormatChanged(Format).\n}"}
{"index": 14670, "repo": "spring-data-commons-3.1.2", "des": "Type-based introspector to resolve Class from a type name and to introspect the bean factory for presence of beans.", "code": "public static interface AotContext.TypeIntrospector {\n\tList<String> getBeanNames(); // Return a List containing bean names that implement this type.\n\tboolean hasBean(); // Determines whether the associated bean factory contains at least one bean of this type.\n\tdefault void ifTypePresent(Consumer<Class<?>> action); // Determines whether the type is declared on the application classpath and performs the given, required action if present.\n\tboolean isTypePresent(); // Determines whether @link Class type} is present on the application classpath.\n\tClass<?> resolveRequiredType(); // Resolves the required named type.\n\tOptional<Class<?>> resolveType(); // Resolves the type if present.\n}"}
{"index": 13509, "repo": "spring-messaging-6.0.11", "des": "Extends MessageRequestReplyOperations and adds operations for sending and receiving messages to and from a destination specified as a (resolvable) String name.", "code": "public interface DestinationResolvingMessageRequestReplyOperations<D> extends MessageRequestReplyOperations<D> {\n\t<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass); // Resolve the given destination name, convert the payload request Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to the resolved destination, receive a reply and convert its body to the specified target class.\n\t<T> T convertSendAndReceive(String destinationName, Object request, Class<T> targetClass, MessagePostProcessor requestPostProcessor); // Resolve the given destination name, convert the payload request Object to serialized form, possibly using a MessageConverter, wrap it as a message, apply the given post process, and send the resulting message to the resolved destination, then receive a reply and convert its body to the specified target class.\n\t<T> T convertSendAndReceive(String destinationName, Object request, Map<String,Object> headers, Class<T> targetClass); // Resolve the given destination name, convert the payload request Object to serialized form, possibly using a MessageConverter, wrap it as a message with the given headers and send it to the resolved destination, receive a reply and convert its body to the specified target class.\n\t<T> T convertSendAndReceive(String destinationName, Object request, Map<String,Object> headers, Class<T> targetClass, MessagePostProcessor requestPostProcessor); // Resolve the given destination name, convert the payload request Object to serialized form, possibly using a MessageConverter, wrap it as a message with the given headers, apply the given post process, and send the resulting message to the resolved destination, then receive a reply and convert its body to the specified target class.\n\tMessage<?> sendAndReceive(String destinationName, Message<?> requestMessage); // Resolve the given destination name to a destination and send the given message, receive a reply and return it.\n}"}
{"index": 757, "repo": "ignite-core-2.15.0", "des": "Future that fetches affinity assignment from remote cache nodes.", "code": "Class GridDhtAssignmentFetchFuture {\n\tint groupId();\n\tlong id();\n\tvoid init(boolean needPartState); // Initializes fetch future.\n\tboolean onDone(@Nullable GridDhtAffinityAssignmentResponse res, @Nullable Throwable err); // Callback to notify that future is finished.\n\tvoid onNodeLeft(UUID leftNodeId);\n\tvoid onResponse(UUID nodeId, GridDhtAffinityAssignmentResponse res);\n}"}
{"index": 5324, "repo": "druid-processing-26.0.0", "des": "VirtualColumn form of ListFilteredDimensionSpec, powered by ForwardingFilteredDimensionSelector.", "code": "Class ListFilteredVirtualColumn {\n\tColumnCapabilities capabilities(ColumnInspector inspector, String columnName); // Return the ColumnCapabilities which best describe the optimal selector to read from this virtual column.\n\tColumnCapabilities capabilities(String columnName); // This method is deprecated in favor of VirtualColumn.capabilities(ColumnInspector, String), which should be used whenever possible and can support virtual column implementations that need to inspect other columns as inputs.\n\tboolean equals(Object o);\n\tbyte[] getCacheKey(); // Get a byte array used as a cache key.\n\tDimensionSpec getDelegate();\n\tColumnIndexSupplier getIndexSupplier(String columnName, ColumnSelector columnSelector); // Get the ColumnIndexSupplier for the specified virtual column, with the assistance of a ColumnSelector to allow reading things from segments.\n\tString getOutputName(); // Output name of this column.\n\tSet<String> getValues();\n\tboolean isAllowList();\n\tColumnValueSelector<?> makeColumnValueSelector(String columnName, ColumnSelectorFactory factory); // Build a ColumnValueSelector corresponding to this virtual column.\n\tDimensionSelector makeDimensionSelector(DimensionSpec dimensionSpec, ColumnSelectorFactory factory); // Build a selector corresponding to this virtual column.\n\tList<String> requiredColumns(); // Returns a list of columns that this virtual column will access.\n\tboolean usesDotNotation(); // Indicates that this virtual column can be referenced with dot notation.\n}"}
{"index": 10373, "repo": "spring-core-6.0.11", "des": "A convenient delegate with pre-arranged configuration state for common serialization needs.", "code": "public class SerializationDelegate extends Object implements Serializer<Object>, Deserializer<Object> {\n\tObject deserialize(InputStream inputStream); // Read (assemble) an object of type T from the given InputStream.\n\tvoid serialize(Object object, OutputStream outputStream); // Write an object of type T to the given OutputStream.\n}"}
{"index": 16587, "repo": "spring-beans-6.0.11", "des": "Helper class for use in bean factory implementations, resolving values contained in bean definition objects into the actual values applied to the target bean instance.", "code": "public class BeanDefinitionValueResolver extends Object {\n\tprotected Object evaluate(Object value); // Evaluate the given value as an expression, if necessary.\n\tprotected Object evaluate(TypedStringValue value); // Evaluate the given value as an expression, if necessary.\n\t<T> T resolveInnerBean(String innerBeanName, BeanDefinition innerBd, BiFunction<String,RootBeanDefinition,T> resolver); // Resolve an inner bean definition and invoke the specified resolver on its merged bean definition.\n\tprotected Class<?> resolveTargetType(TypedStringValue value); // Resolve the target type in the given TypedStringValue.\n\tObject resolveValueIfNecessary(Object argName, Object value); // Given a PropertyValue, return a value, resolving any references to other beans in the factory if necessary.\n}"}
{"index": 5688, "repo": "freemarker-2.3.32", "des": "Represents the CSS output format (MIME type \"text/css\", name \"CSS\").", "code": "Class CSSOutputFormat {\n\tjava.lang.String getMimeType(); // Returns the MIME type of the output format.\n\tjava.lang.String getName(); // The short name used to refer to this format (like in the #ftl header).\n\tboolean isOutputFormatMixingAllowed(); // Tells if this output format allows inserting TemplateMarkupOutputModel-s of another output formats into it.\n}"}
{"index": 3461, "repo": "mahout-mr-0.13.0", "des": "Implementations of this interface compute an inferred preference for a user and an item that the user has not expressed any preference for.", "code": "Class AveragingPreferenceInferrer {\n\tfloat inferPreference(long userID, long itemID); // Infers the given user's preference value for an item.\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n}"}
{"index": 17807, "repo": "spring-web-6.0.11", "des": "HttpInputMessage that can eventually stores a Jackson view that will be used to deserialize the message.", "code": "public class MappingJacksonInputMessage extends Object implements HttpInputMessage {\n\tInputStream getBody(); // Return the body of the message as an input stream.\n\tClass<?> getDeserializationView();\n\tHttpHeaders getHeaders(); // Return the headers of this message.\n\tvoid setDeserializationView(Class<?> deserializationView);\n}"}
{"index": 5518, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "Implementations of this interface are aware of processing requests.", "code": "Interface RequestAware {\n\tvoid endProcessingRequest(MailboxSession session); // End the processing of a request for the given MailboxSession.\n\tvoid startProcessingRequest(MailboxSession session); // Start the processing of a request for the given MailboxSession.\n}"}
{"index": 1756, "repo": "kafka-clients-3.5.0", "des": "This interface is used to define custom partition assignment for use in KafkaConsumer.", "code": "Interface ConsumerPartitionAssignor {\n\tConsumerPartitionAssignor.GroupAssignment assign(Cluster metadata, ConsumerPartitionAssignor.GroupSubscription groupSubscription); // Perform the group assignment given the member subscriptions and current cluster metadata.\n\tstatic List<ConsumerPartitionAssignor> getAssignorInstances(List<String> assignorClasses, Map<String,Object> configs); // Get a list of configured instances of ConsumerPartitionAssignor based on the class names/types specified by ConsumerConfig.PARTITION_ASSIGNMENT_STRATEGY_CONFIG\n\tString name(); // Unique name for this assignor (e.g.\n\tdefault void onAssignment(ConsumerPartitionAssignor.Assignment assignment, ConsumerGroupMetadata metadata); // Callback which is invoked when a group member receives its assignment from the leader.\n\tdefault ByteBuffer subscriptionUserData(Set<String> topics); // Return serialized data that will be included in the ConsumerPartitionAssignor.Subscription sent to the leader and can be leveraged in assign(Cluster, GroupSubscription) ((e.g.\n\tdefault List<ConsumerPartitionAssignor.RebalanceProtocol> supportedProtocols(); // Indicate which rebalance protocol this assignor works with; By default it should always work with ConsumerPartitionAssignor.RebalanceProtocol.EAGER.\n\tdefault short version(); // Return the version of the assignor which indicates how the user metadata encodings and the assignment algorithm gets evolved.\n}"}
{"index": 6297, "repo": "commons-codec-1.16.0", "des": "Standard HmacUtils algorithm names from the Java Cryptography Architecture Standard Algorithm Name Documentation.", "code": "Enum HmacAlgorithms {\n\tString getName(); // Gets the algorithm name.\n\tstatic HmacAlgorithms valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HmacAlgorithms[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6615, "repo": "exoplayer-core-2.9.6", "des": "Style object of a Css style block in a Webvtt file.", "code": "Class WebvttCssStyle {\n\tvoid cascadeFrom(WebvttCssStyle style);\n\tint getBackgroundColor();\n\tint getFontColor();\n\tjava.lang.String getFontFamily();\n\tfloat getFontSize();\n\tint getFontSizeUnit();\n\tint getSpecificityScore(java.lang.String id, java.lang.String tag, java.lang.String[] classes, java.lang.String voice); // Returns a value in a score system compliant with the CSS Specificity rules.\n\tint getStyle(); // Returns the style or UNSPECIFIED when no style information is given.\n\tandroid.text.Layout.Alignment getTextAlign();\n\tboolean hasBackgroundColor();\n\tboolean hasFontColor();\n\tboolean isLinethrough();\n\tboolean isUnderline();\n\tvoid reset();\n\tWebvttCssStyle setBackgroundColor(int backgroundColor);\n\tWebvttCssStyle setBold(boolean bold);\n\tWebvttCssStyle setFontColor(int color);\n\tWebvttCssStyle setFontFamily(java.lang.String fontFamily);\n\tWebvttCssStyle setFontSize(float fontSize);\n\tWebvttCssStyle setFontSizeUnit(short unit);\n\tWebvttCssStyle setItalic(boolean italic);\n\tWebvttCssStyle setLinethrough(boolean linethrough);\n\tvoid setTargetClasses(java.lang.String[] targetClasses);\n\tvoid setTargetId(java.lang.String targetId);\n\tvoid setTargetTagName(java.lang.String targetTag);\n\tvoid setTargetVoice(java.lang.String targetVoice);\n\tWebvttCssStyle setTextAlign(android.text.Layout.Alignment textAlign);\n\tWebvttCssStyle setUnderline(boolean underline);\n}"}
{"index": 15607, "repo": "spring-security-core-6.1.2", "des": "Wraps a delegate Callable with logic for setting up a SecurityContext before invoking the delegate Callable and then removing the SecurityContext after the delegate has completed.", "code": "public final class DelegatingSecurityContextCallable<V> extends Object implements Callable<V> {\n\tV call();\n\tstatic <V> Callable<V> create(Callable<V> delegate, SecurityContext securityContext); // Creates a DelegatingSecurityContextCallable and with the given Callable and SecurityContext, but if the securityContext is null will defaults to the current SecurityContext on the SecurityContextHolder\n\tvoid setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 9077, "repo": "hbase-server-3.0.0-alpha-4", "des": "Implementation of a log cleaner that checks if a log is still scheduled for replication before deleting it when its TTL is over.", "code": "Class ReplicationLogCleaner {\n\tIterable<org.apache.hadoop.fs.FileStatus> getDeletableFiles(Iterable<org.apache.hadoop.fs.FileStatus> files); // Determines which of the given files are safe to delete\n\tvoid init(Map<String,Object> params); // this method is used to pass some instance into subclass\n\tboolean isStopped();\n\tvoid postClean(); // Will be called after cleaner run.\n\tvoid preClean(); // Used to do some initialize work before every period clean\n\tvoid stop(String why);\n}"}
{"index": 8790, "repo": "graal-sdk-1.0.0-rc7", "des": "A handle for an instrument installed in an engine.", "code": "Class Instrument {\n\tString getId(); // Gets the ID clients can use to acquire this instrument.\n\tString getName(); // Gets a human-readable name for this instrument.\n\tOptionDescriptors getOptions(); // Gets the options available for this instrument.\n\tString getVersion(); // Gets the version of this instrument.\n\t<T> T lookup(Class<T> type); // Looks up an additional internal service that is provided by this instrument using a Java type.\n}"}
{"index": 7913, "repo": "commons-jcs3-core-3.1", "des": "This implementation simple logs to a logger at debug level, for all events.", "code": "Class CacheEventLoggerDebugLogger {\n\t<T> ICacheEvent<T> createICacheEvent(String source, String region, String eventName, String optionalDetails, T key); // Creates an event.\n\tvoid logApplicationEvent(String source, String eventName, String optionalDetails); // Logs an event.\n\tvoid logError(String source, String eventName, String errorMessage); // Logs an error.\n\t<T> void logICacheEvent(ICacheEvent<T> event); // Logs an event.\n\tvoid setLogCategoryName(String logCategoryName);\n}"}
{"index": 13019, "repo": "spring-aop-6.0.11", "des": "Interface allowing extension to the Spring AOP framework to allow handling of new Advisors and Advice types.", "code": "public interface AdvisorAdapter {\n\tMethodInterceptor getInterceptor(Advisor advisor); // Return an AOP Alliance MethodInterceptor exposing the behavior of the given advice to an interception-based AOP framework.\n\tboolean supportsAdvice(Advice advice); // Does this adapter understand this advice object? Is it valid to invoke the getInterceptors method with an Advisor that contains this advice as an argument?\n}"}
{"index": 6414, "repo": "exoplayer-core-2.9.6", "des": "Represents ad group times relative to the start of the media and information on the state and URIs of ads within each ad group.", "code": "Class AdPlaybackState {\n\tboolean equals(java.lang.Object o);\n\tint getAdGroupIndexAfterPositionUs(long positionUs); // Returns the index of the next ad group after positionUs that has ads remaining to be played.\n\tint getAdGroupIndexForPositionUs(long positionUs); // Returns the index of the ad group at or before positionUs, if that ad group is unplayed.\n\tAdPlaybackState withAdCount(int adGroupIndex, int adCount); // Returns an instance with the number of ads in adGroupIndex resolved to adCount.\n\tAdPlaybackState withAdDurationsUs(long[][] adDurationUs); // Returns an instance with the specified ad durations, in microseconds.\n\tAdPlaybackState withAdLoadError(int adGroupIndex, int adIndexInAdGroup); // Returns an instance with the specified ad marked as having a load error.\n\tAdPlaybackState withAdResumePositionUs(long adResumePositionUs); // Returns an instance with the specified ad resume position, in microseconds.\n\tAdPlaybackState withAdUri(int adGroupIndex, int adIndexInAdGroup, android.net.Uri uri); // Returns an instance with the specified ad URI.\n\tAdPlaybackState withContentDurationUs(long contentDurationUs); // Returns an instance with the specified content duration, in microseconds.\n\tAdPlaybackState withPlayedAd(int adGroupIndex, int adIndexInAdGroup); // Returns an instance with the specified ad marked as played.\n\tAdPlaybackState withSkippedAd(int adGroupIndex, int adIndexInAdGroup); // Returns an instance with the specified ad marked as skipped.\n\tAdPlaybackState withSkippedAdGroup(int adGroupIndex); // Returns an instance with all ads in the specified ad group skipped (except for those already marked as played or in the error state).\n}"}
{"index": 17194, "repo": "spring-integration-amqp-6.1.2", "des": "The base AbstractMessageChannel implementation for AMQP.", "code": "public abstract class AbstractAmqpChannel extends org.springframework.integration.channel.AbstractMessageChannel implements org.springframework.amqp.rabbit.connection.ConnectionListener {\n\tvoid destroy();\n\tprotected abstract void doDeclares();\n\tprotected boolean doSend(org.springframework.messaging.Message<?> message, long timeout);\n\tprotected org.springframework.amqp.core.AmqpAdmin getAdmin();\n\tprotected org.springframework.amqp.core.AmqpTemplate getAmqpTemplate();\n\tprotected org.springframework.amqp.rabbit.connection.ConnectionFactory getConnectionFactory();\n\tprotected String getExchangeName(); // Subclasses may override this method to return an Exchange name.\n\tprotected AmqpHeaderMapper getInboundHeaderMapper();\n\tprotected org.springframework.amqp.rabbit.core.RabbitTemplate getRabbitTemplate();\n\tprotected String getRoutingKey(); // Subclasses may override this method to return a routing key.\n\tprotected boolean isExtractPayload();\n\tboolean isLoggingEnabled();\n\tvoid onClose(org.springframework.amqp.rabbit.connection.Connection connection);\n\tvoid onCreate(org.springframework.amqp.rabbit.connection.Connection connection);\n\tprotected void onInit();\n\tprotected final void setAdmin(org.springframework.amqp.core.AmqpAdmin admin);\n\tprotected final void setConnectionFactory(org.springframework.amqp.rabbit.connection.ConnectionFactory connectionFactory);\n\tvoid setDefaultDeliveryMode(org.springframework.amqp.core.MessageDeliveryMode defaultDeliveryMode); // Set the delivery mode to use if the message has no \"amqp_deliveryMode\" header and the message property was not set by the MessagePropertiesConverter.\n\tvoid setExtractPayload(boolean extractPayload); // Set to true to extract the payload and map the headers; otherwise the entire message is converted and sent.\n\tvoid setHeadersMappedLast(boolean headersMappedLast); // When mapping headers for the outbound message, determine whether the headers are mapped before the message is converted, or afterwards.\n\tvoid setLoggingEnabled(boolean loggingEnabled);\n}"}
{"index": 7044, "repo": "calcite-core-1.34.0", "des": "RelDataTypeField represents the definition of a field in a structured RelDataType.", "code": "Interface RelDataTypeField {\n\tint getIndex(); // Gets the ordinal of this field within its containing type.\n\tString getName(); // Gets the name of this field, which is unique within its containing type.\n\tRelDataType getType(); // Gets the type of this field.\n\tboolean isDynamicStar(); // Returns true if this is a dynamic star field.\n}"}
{"index": 15968, "repo": "wicket-util-10.0.0-M1", "des": "IVisitFilter that restricts visitors to only visiting objects of the specified class", "code": "public class ClassVisitFilter extends Object implements IVisitFilter {\n\tboolean visitChildren(Object object); // Controls whether or not the object's children will be visited\n\tboolean visitObject(Object object); // Controls whether or not the object will be visited\n}"}
{"index": 2882, "repo": "amqp-client-5.18.0", "des": "Context when creating resources for a NIO-based connection.", "code": "Class NioContext {\n\tNioParams getNioParams(); // NIO params.\n\tSSLEngine getSslEngine(); // SSLEngine for SSL/TLS connection.\n}"}
{"index": 11040, "repo": "spring-shell-core-3.1.2", "des": "A result to be handled by the ResultHandler when no command could be mapped to user input", "code": "public class CommandNotFound extends RuntimeException {\n\tString getMessage();\n\tMap<String,CommandRegistration> getRegistrations(); // Gets command registrations known when this error was created.\n\tString getText(); // Gets a raw text input.\n\tList<String> getWords(); // Gets a words in this exception.\n}"}
{"index": 13668, "repo": "spring-webmvc-6.0.11", "des": "Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering a single HTML 'input' element with a 'type' of 'checkbox' or 'radio'.", "code": "public abstract class AbstractSingleCheckedElementTag extends AbstractCheckedElementTag {\n\tprotected Object getLabel(); // Get the value of the 'label' attribute.\n\tprotected Object getValue(); // Get the value of the 'value' attribute.\n\tvoid setLabel(Object label); // Set the value of the 'label' attribute.\n\tvoid setValue(Object value); // Set the value of the 'value' attribute.\n\tprotected int writeTagContent(TagWriter tagWriter); // Renders the 'input(radio)' element with the configured value.\n\tprotected abstract void writeTagDetails(TagWriter tagWriter); // Write the details for the given primary tag: i.e.\n}"}
{"index": 17249, "repo": "groovy-4.0.13", "des": "Represents an annotation which can be attached to interfaces, classes, methods, fields, parameters, and other places.", "code": "public class AnnotationNode extends ASTNode {\n\tvoid addMember(String name, Expression value);\n\tClassNode getClassNode();\n\tExpression getMember(String name);\n\tMap<String,Expression> getMembers();\n\tString getText();\n\tboolean hasClassRetention(); // Flag corresponding to RetentionPolicy.CLASS.\n\tboolean hasRuntimeRetention(); // Flag corresponding to RetentionPolicy.RUNTIME.\n\tboolean hasSourceRetention(); // Flag corresponding to RetentionPolicy.SOURCE.\n\tboolean isBuiltIn();\n\tboolean isTargetAllowed(int target);\n\tvoid setAllowedTargets(int bitmap);\n\tvoid setClassRetention(boolean flag); // Sets the internal flag if the current annotation has an explicit RetentionPolicy.CLASS.\n\tvoid setMember(String name, Expression value);\n\tvoid setRuntimeRetention(boolean flag); // Sets the internal flag if the current annotation has RetentionPolicy.SOURCE.\n\tvoid setSourceRetention(boolean flag); // Sets the internal flag if the current annotation has RetentionPolicy.SOURCE.\n\tstatic String targetToName(int target);\n}"}
{"index": 8259, "repo": "spring-ws-3.0.10.RELEASE", "des": "Collection of generic utility methods to work with SAAJ.", "code": "Class SaajUtils {\n\tstatic SOAPEnvelope getEnvelope(SOAPElement element); // Returns the SAAJ SOAPEnvelope for the given element.\n\tstatic SOAPElement getFirstBodyElement(SOAPBody body); // Returns the first child element of the given body.\n\tstatic int getSaajVersion(); // Gets the SAAJ version.\n\tstatic int getSaajVersion(SOAPElement soapElement); // Gets the SAAJ version for the specified SOAPElement.\n\tstatic int getSaajVersion(SOAPMessage soapMessage); // Gets the SAAJ version for the specified SOAPMessage.\n\tstatic String getSaajVersionString(); // Returns the SAAJ version as a String.\n\tstatic SOAPMessage loadMessage(org.springframework.core.io.Resource resource, MessageFactory messageFactory); // Loads a SAAJ SOAPMessage from the given resource with a given message factory.\n\tstatic Name toName(QName qName, SOAPElement resolveElement); // Converts a QName to a Name.\n\tstatic QName toQName(Name name); // Converts a javax.xml.soap.Name to a javax.xml.namespace.QName.\n}"}
{"index": 14340, "repo": "wicket-core-10.0.0-M1", "des": "Mock implementation of the WebSession interface for use by the test harnesses.", "code": "public class MockHttpSession extends Object implements jakarta.servlet.http.HttpSession, Serializable {\n\tObject getAttribute(String name); // Get the attribute with the given name.\n\tEnumeration<String> getAttributeNames(); // Get the names of the attributes in the session.\n\tlong getCreationTime(); // Get the creation time of the session.\n\tString getId(); // Return the id of this session.\n\tlong getLastAccessedTime(); // Get the time the session was last accessed.\n\tint getMaxInactiveInterval(); // NOT USED.\n\tjakarta.servlet.ServletContext getServletContext(); // Return the servlet context for the session.\n\tvoid invalidate(); // Invalidate the session.\n\tboolean isNew(); // Check if the session is new.\n\tfinal boolean isTemporary(); // Indicates the state of the session.\n\tvoid removeAttribute(String name); // Remove an attribute.\n\tvoid setAttribute(String name, Object o); // Set an attribute.\n\tvoid setMaxInactiveInterval(int i); // NOT USED.\n\tfinal void setTemporary(boolean temporary); // Changes the state of this session.\n\tvoid timestamp(); // Set the last accessed time for the session.\n}"}
{"index": 15300, "repo": "spring-boot-3.1.1", "des": "WebServer that can be used to control a Jetty web server.", "code": "public class JettyWebServer extends Object implements WebServer {\n\tint getPort(); // Return the port this server is listening on.\n\torg.eclipse.jetty.server.Server getServer(); // Returns access to the underlying Jetty Server.\n\tvoid shutDownGracefully(GracefulShutdownCallback callback); // Initiates a graceful shutdown of the web server.\n\tvoid start(); // Starts the web server.\n\tvoid stop(); // Stops the web server.\n}"}
{"index": 11855, "repo": "spring-kafka-3.0.9", "des": "A Serde that provides serialization and deserialization in JSON format.", "code": "public class JsonSerde<T> extends Object implements org.apache.kafka.common.serialization.Serde<T> {\n\tvoid close();\n\tvoid configure(Map<String,?> configs, boolean isKey);\n\t<X> JsonSerde<X> copyWithType(com.fasterxml.jackson.core.type.TypeReference<? super X> newTargetType); // Copies this serde with same configuration, except new target type reference is used.\n\t<X> JsonSerde<X> copyWithType(com.fasterxml.jackson.databind.JavaType newTargetType); // Copies this serde with same configuration, except new target java type is used.\n\t<X> JsonSerde<X> copyWithType(Class<? super X> newTargetType); // Copies this serde with same configuration, except new target type is used.\n\tJsonDeserializer<T> deserializer();\n\tJsonSerde<T> dontRemoveTypeHeaders(); // Don't remove type information headers after deserialization.\n\tJsonSerde<T> forKeys(); // Designate this Serde for serializing/deserializing keys (default is values).\n\tJsonSerde<T> ignoreTypeHeaders(); // Ignore type information headers and use the configured target class.\n\tJsonSerde<T> noTypeInfo(); // Configure the serializer to not add type information.\n\tJsonSerializer<T> serializer();\n\tJsonSerde<T> typeMapper(Jackson2JavaTypeMapper mapper); // Use the supplied Jackson2JavaTypeMapper.\n}"}
{"index": 6367, "repo": "spring-data-solr-4.3.15", "des": "Writing Converter converts LocalDateTime to Date so it can be used within SolrInputDocument.", "code": "Enum DateTimeConverters.JodaLocalDateTimeToDateConverter {\n\tDate convert(org.joda.time.LocalDateTime source);\n\tstatic DateTimeConverters.JodaLocalDateTimeToDateConverter valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DateTimeConverters.JodaLocalDateTimeToDateConverter[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6647, "repo": "artemis-odb-2.3.0", "des": "Provide high performance component access and mutation from within a System.", "code": "Class ComponentMapper<A extends Component> {\n\tA create(int entityId); // Create component for this entity.\n\tA get(int entityId); // Fast but unsafe retrieval of a component for this entity.\n\tboolean has(int entityId); // Checks if the entity has this type of component.\n\tA internalCreate(int entityId);\n\tprotected void internalRemove(int entityId);\n\tvoid remove(int entityId); // Schedule component for removal.\n}"}
{"index": 8209, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of XPathOperations that uses JAXP 1.", "code": "Class Jaxp13XPathTemplate {\n\t<T> List<T> evaluate(String expression, Source context, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\tboolean evaluateAsBoolean(String expression, Source context); // Evaluates the given expression as a boolean.\n\tdouble evaluateAsDouble(String expression, Source context); // Evaluates the given expression as a double.\n\tNode evaluateAsNode(String expression, Source context); // Evaluates the given expression as a Node.\n\tList<Node> evaluateAsNodeList(String expression, Source context); // Evaluates the given expression as a list of Node objects.\n\t<T> T evaluateAsObject(String expression, Source context, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping a single Node result to a Java object via a NodeMapper.\n\tString evaluateAsString(String expression, Source context); // Evaluates the given expression as a String.\n}"}
{"index": 559, "repo": "ignite-core-2.15.0", "des": "Class is responsible to hold and persist cache and cache group descriptors.", "code": "Class CachesRegistry {\n\tIgniteInternalFuture<?> addUnregistered(Collection<DynamicCacheDescriptor> descs); // Adds cache and caches groups that is not registered yet to registry.\n\tMap<Integer,DynamicCacheDescriptor> allCaches();\n\tMap<Integer,CacheGroupDescriptor> allGroups();\n\t@Nullable DynamicCacheDescriptor cache(int cacheId);\n\tCacheGroupDescriptor group(int grpId);\n\tIgniteInternalFuture<?> init(Map<Integer,CacheGroupDescriptor> groupDescriptors, Map<String,DynamicCacheDescriptor> cacheDescriptors); // Removes currently registered cache groups and caches.\n\tvoid unregisterAll();\n\t@Nullable DynamicCacheDescriptor unregisterCache(int cacheId); // Removes cache from registry.\n\tCacheGroupDescriptor unregisterGroup(int grpId); // Removes cache group from registry.\n\tIgniteInternalFuture<?> update(ExchangeActions exchActions); // Adds caches and cache groups to start from exchActions.\n}"}
{"index": 12998, "repo": "spring-integration-file-6.1.2", "des": "Standard rotation policy; iterates over key/directory pairs; when the end is reached, starts again at the beginning.", "code": "public class StandardRotationPolicy extends Object implements RotationPolicy {\n\tvoid afterReceive(boolean messageReceived, org.springframework.integration.core.MessageSource<?> source); // Invoked after the message source receive() method.\n\tvoid beforeReceive(org.springframework.integration.core.MessageSource<?> source); // Invoked before the message source receive() method.\n\tprotected void configureSource(org.springframework.integration.core.MessageSource<?> source);\n\tRotationPolicy.KeyDirectory getCurrent(); // Return the current RotationPolicy.KeyDirectory.\n\tprotected DelegatingSessionFactory<?> getFactory();\n\tprotected Iterator<RotationPolicy.KeyDirectory> getIterator();\n\tprotected List<RotationPolicy.KeyDirectory> getKeyDirectories();\n\tprotected boolean isFair();\n\tprotected boolean isInitialized();\n\tprotected void onRotation(org.springframework.integration.core.MessageSource<?> source); // Update the state of the MessageSource after the server is rotated, if necessary.\n}"}
{"index": 17121, "repo": "spring-integration-core-6.1.2", "des": "ErrorHandler implementation that sends an ErrorMessage to a MessageChannel.", "code": "public class MessagePublishingErrorHandler extends ErrorMessagePublisher implements org.springframework.util.ErrorHandler {\n\torg.springframework.messaging.MessageChannel getDefaultErrorChannel(); // Return the default error channel for this error handler.\n\tfinal void handleError(Throwable ex);\n\tvoid setDefaultErrorChannel(org.springframework.messaging.MessageChannel defaultErrorChannel);\n\tvoid setDefaultErrorChannelName(String defaultErrorChannelName); // Specify the bean name of default error channel for this error handler.\n}"}
{"index": 5900, "repo": "hadoop-yarn-server-common-3.3.6", "des": "OpportunisticContainersStatus captures information pertaining to the state of execution of the opportunistic containers within a node.", "code": "Class OpportunisticContainersStatus {\n\tabstract int getEstimatedQueueWaitTime(); // Returns the estimated time that a container will have to wait if added to the queue of the node.\n\tabstract int getOpportCoresUsed(); // Returns CPU cores currently used on the node for running opportunistic containers.\n\tabstract long getOpportMemoryUsed(); // Returns memory currently used on the node for running opportunistic containers.\n\tabstract int getOpportQueueCapacity(); // Gets the capacity of the opportunistic containers queue on the node.\n\tabstract int getQueuedOpportContainers(); // Returns the number of queued opportunistic containers on the node.\n\tabstract int getRunningOpportContainers(); // Returns the number of currently running opportunistic containers on the node.\n\tabstract int getWaitQueueLength(); // Returns the length of the containers queue on the node.\n\tstatic OpportunisticContainersStatus newInstance();\n\tabstract void setEstimatedQueueWaitTime(int queueWaitTime); // Sets the estimated time that a container will have to wait if added to the queue of the node.\n\tabstract void setOpportCoresUsed(int opportCoresUsed); // Sets the CPU cores used on the node for running opportunistic containers.\n\tabstract void setOpportMemoryUsed(long opportMemoryUsed); // Sets the memory used on the node for running opportunistic containers.\n\tabstract void setOpportQueueCapacity(int queueCapacity); // Sets the capacity of the opportunistic containers queue on the node.\n\tabstract void setQueuedOpportContainers(int queuedOpportContainers); // Sets the number of queued opportunistic containers on the node.\n\tabstract void setRunningOpportContainers(int runningOpportContainers); // Sets the number of running opportunistic containers.\n\tabstract void setWaitQueueLength(int waitQueueLength); // Sets the length of the containers queue on the node.\n}"}
{"index": 5133, "repo": "druid-processing-26.0.0", "des": "BitSetBitmapFactory implements BitmapFactory as a wrapper for java.", "code": "Class BitSetBitmapFactory {\n\tImmutableBitmap complement(ImmutableBitmap b, int length);\n\tImmutableBitmap intersection(Iterable<ImmutableBitmap> b); // Compute the intersection (bitwise-AND) of a set of bitmaps.\n\tImmutableBitmap makeEmptyImmutableBitmap();\n\tMutableBitmap makeEmptyMutableBitmap(); // Create a new empty bitmap\n\tImmutableBitmap makeImmutableBitmap(MutableBitmap mutableBitmap);\n\tImmutableBitmap mapImmutableBitmap(ByteBuffer b); // Given a ByteBuffer pointing at a serialized version of a bitmap, instantiate an immutable mapped bitmap.\n\tImmutableBitmap union(Iterable<ImmutableBitmap> b); // Compute the union (bitwise-OR) of a set of bitmaps.\n}"}
{"index": 16199, "repo": "spring-data-cassandra-4.1.2", "des": "Base class for ReactiveCqlTemplate and other CQL-accessing DAO helpers, defining common properties such as ReactiveSessionFactory and exception translator.", "code": "public abstract class ReactiveCassandraAccessor extends Object implements InitializingBean {\n\tvoid afterPropertiesSet(); // Ensures the Cassandra ReactiveSessionFactory and exception translator has been properly set.\n\tCqlExceptionTranslator getExceptionTranslator(); // Returns the exception translator for this instance.\n\tReactiveSessionFactory getSessionFactory(); // Returns the configured ReactiveSessionFactory.\n\tvoid setExceptionTranslator(CqlExceptionTranslator exceptionTranslator); // Sets the exception translator used by this template to translate Cassandra specific exceptions into Spring DAO's Exception Hierarchy.\n\tvoid setSessionFactory(ReactiveSessionFactory sessionFactory); // Sets the ReactiveSessionFactory to use.\n\tprotected static String toCql(Object cqlProvider); // Determine CQL from potential provider object.\n\tprotected DataAccessException translate(String task, String cql, RuntimeException ex); // Translate the given DriverException into a generic DataAccessException.\n\tprotected DataAccessException translateExceptionIfPossible(RuntimeException ex); // Translate the given DriverException into a generic DataAccessException.\n}"}
{"index": 17931, "repo": "spring-web-6.0.11", "des": "Filter that generates an ETag value based on the content on the response.", "code": "public class ShallowEtagHeaderFilter extends OncePerRequestFilter {\n\tstatic void disableContentCaching(ServletRequest request); // This method can be used to suppress the content caching response wrapper of the ShallowEtagHeaderFilter.\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain); // Same contract as for doFilter, but guaranteed to be just invoked once per request within a single request thread.\n\tprotected String generateETagHeaderValue(InputStream inputStream, boolean isWeak); // Generate the ETag header value from the given response body byte array.\n\tprotected boolean isEligibleForEtag(HttpServletRequest request, HttpServletResponse response, int responseStatusCode, InputStream inputStream); // Whether an ETag should be calculated for the given request and response exchange.\n\tboolean isWriteWeakETag(); // Return whether the ETag value written to the response should be weak, as per RFC 7232.\n\tvoid setWriteWeakETag(boolean writeWeakETag); // Set whether the ETag value written to the response should be weak, as per RFC 7232.\n\tprotected boolean shouldNotFilterAsyncDispatch(); // The default value is false so that the filter may delay the generation of an ETag until the last asynchronously dispatched thread.\n}"}
{"index": 6399, "repo": "spring-data-solr-4.3.15", "des": "Trivial implementation of HighlightQuery extending SimpleQuery.", "code": "Class SimpleHighlightQuery {\n\t<T extends SolrDataQuery>T addCriteria(Criteria criteria); // Add an criteria to the query.\n\tCriteria getCriteria();\n\tHighlightOptions getHighlightOptions();\n\tJoin getJoin();\n\tString getRequestHandler();\n\tboolean hasHighlightOptions();\n\t<T extends SolrDataQuery>T setHighlightOptions(HighlightOptions highlightOptions); // Highlight options to apply when exectuing query\n\tvoid setJoin(Join join); // Set values for join {@code !\n\tvoid setRequestHandler(String requestHandler);\n}"}
{"index": 2030, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticScalar.", "code": "Class DoubleColAddDoubleScalarChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 3229, "repo": "hbase-common-3.0.0-alpha-4", "des": "EMA is similar to WeightedMovingAverage in weighted, but the weighting factor decrease exponentially.", "code": "Class ExponentialMovingAverage<T> {\n\tdouble getAverageTime(); // Get average execution time of the measured method.\n\tvoid updateMostRecentTime(long elapsed); // Update the most recent data.\n}"}
{"index": 15885, "repo": "camel-api-4.0.0-RC1", "des": "An extension to Synchronization which provides route awareness capabilities.", "code": "public interface SynchronizationRouteAware {\n\tvoid onAfterRoute(Route route, Exchange exchange); // Invoked after the Exchange has been routed by the given route.\n\tvoid onBeforeRoute(Route route, Exchange exchange); // Invoked before the Exchange is being routed by the given route.\n}"}
{"index": 10526, "repo": "groovy-all-4.0.13", "des": "Registry of services that implement the GroovyRunner interface.", "code": "public class GroovyRunnerRegistry extends Object implements Map<String,GroovyRunner>, Iterable<GroovyRunner> {\n\tvoid clear(); // Clears all registered runners from the registry and resets the registry so that it contains only the default set of runners.\n\tboolean containsKey(Object key); // Returns true if a runner was registered with the specified key.\n\tboolean containsValue(Object runner); // Returns true if registry contains the given runner instance.\n\tSet<Map.Entry<String,GroovyRunner>> entrySet(); // Returns a set of entries for registered runners.\n\tGroovyRunner get(Object key); // Returns the registered runner for the specified key.\n\tstatic GroovyRunnerRegistry getInstance(); // Returns a reference to the one and only registry instance.\n\tboolean isEmpty(); // Returns true if the registry contains no runners, else false.\n\tIterator<GroovyRunner> iterator(); // Returns an iterator for all runners that are registered.\n\tSet<String> keySet(); // Set of all keys associated with registered runners.\n\tvoid load(ClassLoader classLoader); // Loads GroovyRunner instances using the ServiceLoader facility.\n\tGroovyRunner put(String key, GroovyRunner runner); // Registers a runner with the specified key.\n\tvoid putAll(Map<? extends String,? extends GroovyRunner> m); // Adds all entries from the given Map to the registry.\n\tGroovyRunner remove(Object key); // Removes a registered runner from the registry.\n\tint size(); // Returns the number of registered runners.\n\tCollection<GroovyRunner> values(); // Returns a collection of all registered runners.\n}"}
{"index": 4219, "repo": "jackson-core-2.15.2", "des": "Object that encapsulates Location information used for reporting parsing (or potentially generation) errors, as well as current location within input streams.", "code": "Class JsonLocation {\n\tprotected static ContentReference _wrap(Object srcRef);\n\tStringBuilder appendOffsetDescription(StringBuilder sb);\n\tContentReference contentReference(); // Accessor for information about the original input source content is being read from.\n\tboolean equals(Object other);\n\tlong getByteOffset();\n\tlong getCharOffset();\n\tint getColumnNr(); // Access for getting column position of this location, if available.\n\tint getLineNr(); // Access for getting line number of this location, if available.\n\tString offsetDescription(); // Accessor for a brief summary of Location offsets (line number, column position, or byte offset, if available).\n\tString sourceDescription(); // Accessor for getting a textual description of source reference (Object returned by getSourceRef()), as included in description returned by toString().\n}"}
{"index": 2105, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generic UDF for string function LOCATE(substr, str), LOCATE(substr, str, start).", "code": "Class GenericUDFLocate {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 7069, "repo": "calcite-core-1.34.0", "des": "RelOptCostImpl provides a default implementation for the RelOptCost interface.", "code": "Class RelOptCostImpl {\n\tdouble divideBy(RelOptCost cost); // Computes the ratio between this cost and another cost.\n\tboolean equals(@Nullable Object obj);\n\tboolean equals(RelOptCost other); // Compares this to another cost.\n\tdouble getCpu(); // Returns usage of CPU resources.\n\tdouble getIo(); // Returns usage of I/O resources.\n\tdouble getRows(); // Returns the number of rows processed; this should not be confused with the row count produced by a relational expression (RelNode.estimateRowCount(org.apache.calcite.rel.metadata.RelMetadataQuery)).\n\tboolean isEqWithEpsilon(RelOptCost other); // Compares this to another cost, allowing for slight roundoff errors.\n\tboolean isInfinite(); // Returns whether this cost represents an expression that hasn't actually been implemented (e.g.\n\tboolean isLe(RelOptCost other); // Compares this to another cost.\n\tboolean isLt(RelOptCost other); // Compares this to another cost.\n\tRelOptCost minus(RelOptCost other); // Subtracts another cost from this.\n\tRelOptCost multiplyBy(double factor); // Multiplies this cost by a scalar factor.\n\tRelOptCost plus(RelOptCost other); // Adds another cost to this.\n}"}
{"index": 8990, "repo": "hbase-server-3.0.0-alpha-4", "des": "The MemStore holds in-memory modifications to the Store.", "code": "Interface MemStore {\n\tvoid add(Cell cell, MemStoreSizing memstoreSizing); // Write an update\n\tvoid add(Iterable<Cell> cells, MemStoreSizing memstoreSizing); // Write the updates\n\tvoid clearSnapshot(long id); // Clears the current snapshot of the Memstore.\n\tMemStoreSize getFlushableSize(); // Flush will first clear out the data in snapshot if any (It will take a second flush invocation to clear the current Cell set).\n\tList<KeyValueScanner> getScanners(long readPt);\n\tMemStoreSize getSnapshotSize(); // Return the size of the snapshot(s) if any\n\tboolean isSloppy();\n\tlong preFlushSeqIDEstimation(); // This method is called before the flush is executed.\n\tMemStoreSize size();\n\tMemStoreSnapshot snapshot(); // Creates a snapshot of the current memstore.\n\tdefault void startReplayingFromWAL(); // This message intends to inform the MemStore that next coming updates are going to be part of the replaying edits from WAL\n\tdefault void stopReplayingFromWAL(); // This message intends to inform the MemStore that the replaying edits from WAL are done\n\tlong timeOfOldestEdit(); // Returns Oldest timestamp of all the Cells in the MemStore\n\tvoid upsert(Iterable<Cell> cells, long readpoint, MemStoreSizing memstoreSizing); // Update or insert the specified cells.\n}"}
{"index": 7948, "repo": "commons-jcs3-core-3.1", "des": "This specifies what a remote cache configuration object should look like.", "code": "Interface IRemoteCacheAttributes {\n\tint getFailoverIndex(); // Gets the failoverIndex attribute of the IRemoteCacheAttributes object.\n\tList<RemoteLocation> getFailovers(); // Gets the failovers attribute of the IRemoteCacheAttributes object\n\tString getFailoverServers(); // Gets the failoverServers attribute of the IRemoteCacheAttributes object\n\tint getGetTimeoutMillis(); // -1 and 0 mean no timeout, this is the default if the timeout is -1 or 0, no threadpool will be used.\n\tint getLocalPort(); // Gets the localPort attribute of the IRemoteCacheAttributes object\n\tString getThreadPoolName(); // The thread pool the remote cache should use.\n\tint getZombieQueueMaxSize(); // The number of elements the zombie queue will hold.\n\tboolean isReceive(); // If RECEIVE is false then the remote cache will not register a listener with the remote server.\n\tvoid setFailoverIndex(int p); // Sets the failoverIndex attribute of the IRemoteCacheAttributes object\n\tvoid setFailovers(List<RemoteLocation> failovers); // Sets the failovers attribute of the IRemoteCacheAttributes object\n\tvoid setFailoverServers(String s); // Sets the failoverServers attribute of the IRemoteCacheAttributes object\n\tvoid setGetTimeoutMillis(int millis); // -1 means no timeout, this is the default if the timeout is -1 or 0, no threadpool will be used.\n\tvoid setLocalPort(int p); // Sets the localPort attribute of the IRemoteCacheAttributes object\n\tvoid setReceive(boolean receive); // By default this option is true.\n\tvoid setThreadPoolName(String name); // Set the name of the pool to use.\n\tvoid setZombieQueueMaxSize(int zombieQueueMaxSize); // The number of elements the zombie queue will hold.\n}"}
{"index": 8984, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class abstracts a bunch of operations the HMaster needs to interact with the underlying file system like creating the initial layout, checking file system status, etc.", "code": "Class MasterFileSystem {\n\tvoid deleteFamilyFromFS(org.apache.hadoop.fs.Path rootDir, RegionInfo region, byte[] familyName);\n\tvoid deleteFamilyFromFS(RegionInfo region, byte[] familyName);\n\tClusterId getClusterId(); // Returns The unique identifier generated for this cluster\n\torg.apache.hadoop.conf.Configuration getConfiguration();\n\torg.apache.hadoop.fs.FileSystem getFileSystem();\n\torg.apache.hadoop.fs.Path getRegionDir(RegionInfo region); // Returns the directory for a give region.\n\torg.apache.hadoop.fs.Path getRootDir(); // Returns HBase root dir.\n\torg.apache.hadoop.fs.Path getTempDir(); // Returns HBase temp dir.\n\torg.apache.hadoop.fs.FileSystem getWALFileSystem();\n\torg.apache.hadoop.fs.Path getWALRootDir(); // Returns HBase root log dir.\n\tvoid logFileSystemState(org.slf4j.Logger log);\n\tvoid stop();\n}"}
{"index": 13344, "repo": "shiro-core-2.0.0-alpha-2", "des": "Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.", "code": "public class JndiLocator extends Object {\n\tprotected String convertJndiName(String jndiName); // Convert the given JNDI name into the actual JNDI name to use.\n\tProperties getJndiEnvironment(); // Return the JNDI environment to use for JNDI lookups.\n\tJndiTemplate getJndiTemplate(); // Return the JNDI template to use for JNDI lookups.\n\tboolean isResourceRef(); // Return whether the lookup occurs in a J2EE container.\n\tprotected Object lookup(String jndiName); // Perform an actual JNDI lookup for the given name via the JndiTemplate.\n\tprotected Object lookup(String jndiName, Class requiredType); // Perform an actual JNDI lookup for the given name via the JndiTemplate.\n\tvoid setJndiEnvironment(Properties jndiEnvironment); // Set the JNDI environment to use for JNDI lookups.\n\tvoid setJndiTemplate(JndiTemplate jndiTemplate); // Set the JNDI template to use for JNDI lookups.\n\tvoid setResourceRef(boolean resourceRef); // Set whether the lookup occurs in a J2EE container, i.e.\n}"}
{"index": 8283, "repo": "spring-ws-3.0.10.RELEASE", "des": "Thrown by SoapFaultMessageResolver when the response message has a fault.", "code": "Class SoapFaultClientException {\n\tQName getFaultCode(); // Returns the fault code.\n\tString getFaultStringOrReason(); // Returns the fault string or reason.\n\tSoapFault getSoapFault(); // Returns the SoapFault.\n}"}
{"index": 6579, "repo": "exoplayer-core-2.9.6", "des": "The default ShuffleOrder implementation for random shuffle order.", "code": "Class ShuffleOrder.DefaultShuffleOrder {\n\tShuffleOrder cloneAndClear(); // Returns a copy of the shuffle order with all elements removed.\n\tShuffleOrder cloneAndInsert(int insertionIndex, int insertionCount); // Returns a copy of the shuffle order with newly inserted elements.\n\tShuffleOrder cloneAndRemove(int indexFrom, int indexToExclusive); // Returns a copy of the shuffle order with a range of elements removed.\n\tint getFirstIndex(); // Returns the first index in the shuffle order, or C.INDEX_UNSET if the shuffle order is empty.\n\tint getLastIndex(); // Returns the last index in the shuffle order, or C.INDEX_UNSET if the shuffle order is empty.\n\tint getLength(); // Returns length of shuffle order.\n\tint getNextIndex(int index); // Returns the next index in the shuffle order.\n\tint getPreviousIndex(int index); // Returns the previous index in the shuffle order.\n}"}
{"index": 10832, "repo": "spring-boot-actuator-3.1.1", "des": "Strategy interface used to contribute Health to the results returned from the reactive variant of the HealthEndpoint.", "code": "@FunctionalInterface public interface ReactiveHealthIndicator extends ReactiveHealthContributor {\n\tdefault reactor.core.publisher.Mono<Health> getHealth(boolean includeDetails); // Provide the indicator of health.\n\treactor.core.publisher.Mono<Health> health(); // Provide the indicator of health.\n}"}
{"index": 2853, "repo": "amqp-client-5.18.0", "des": "Parses an AMQP wire-protocol ContentHeader from a DataInputStream.", "code": "Class ContentHeaderPropertyReader {\n\tvoid finishPresence();\n\tvoid readFlagWord();\n\tInteger readLong(); // Reads and returns an AMQP integer content header field.\n\tLong readLonglong(); // Reads and returns an AMQP long integer content header field.\n\tLongString readLongstr(); // Reads and returns an AMQP \"long string\" (binary) content header field.\n\tint readOctet(); // Reads and returns an AMQP octet content header field.\n\tboolean readPresence();\n\tInteger readShort(); // Reads and returns an AMQP short integer content header field.\n\tString readShortstr(); // Reads and returns an AMQP short string content header field.\n\tMap<String,Object> readTable(); // Reads and returns an AMQP table content header field.\n\tDate readTimestamp(); // Reads and returns an AMQP timestamp content header field.\n}"}
{"index": 7526, "repo": "cassandra-all-4.1.2", "des": "Buffer manager used for reading from a ChunkReader when cache is not in use.", "code": "Class BufferManagingRebufferer {\n\tjava.nio.ByteBuffer buffer(); // Returns a useable buffer (i.e.\n\tChannelProxy channel();\n\tvoid close();\n\tvoid closeReader(); // Called when a reader is closed.\n\tlong fileLength();\n\tdouble getCrcCheckChance(); // Needed for tests.\n\tlong offset(); // Position in the file of the start of the buffer.\n\tRebufferer.BufferHolder rebuffer(long position); // Rebuffer (move on or seek to) a given position, and return a buffer that can be used there.\n\tvoid release(); // To be called when this buffer is no longer in use.\n}"}
{"index": 9034, "repo": "hbase-server-3.0.0-alpha-4", "des": "RPCs for the coordinator to run a barriered procedure with subprocedures executed at distributed members.", "code": "Interface ProcedureCoordinatorRpcs {\n\tvoid resetMembers(Procedure procName); // Notify Members to reset the distributed state for procedure\n\tvoid sendAbortToMembers(Procedure procName, ForeignException cause); // Notify the members that the coordinator has aborted the procedure and that it should release barrier resources.\n\tvoid sendGlobalBarrierAcquire(Procedure procName, byte[] info, List<String> members); // Notify the members to acquire barrier for the procedure\n\tvoid sendGlobalBarrierReached(Procedure procName, List<String> members); // Notify members that all members have acquired their parts of the barrier and that they can now execute under the global barrier.\n\tboolean start(ProcedureCoordinator listener); // Initialize and start threads necessary to connect an implementation's rpc mechanisms.\n}"}
{"index": 15059, "repo": "spring-vault-core-3.0.4", "des": "Support class to build Lifecycle-aware Session Manager implementations, defining common properties such as the TaskScheduler and LifecycleAwareSessionManagerSupport.RefreshTrigger.", "code": "public abstract class LifecycleAwareSessionManagerSupport extends AuthenticationEventPublisher {\n\tprotected LifecycleAwareSessionManagerSupport.RefreshTrigger getRefreshTrigger();\n\tprotected TaskScheduler getTaskScheduler();\n\tprotected boolean isExpired(LoginToken loginToken); // Check whether the Token falls below its validity threshold.\n\tprotected boolean isTokenSelfLookupEnabled(); // Returns whether token self-lookup is enabled to augment VaultToken obtained from a ClientAuthentication.\n\tvoid setLeaseStrategy(LeaseStrategy leaseStrategy); // Set the LeaseStrategy for lease renewal error handling.\n\tvoid setTokenSelfLookupEnabled(boolean tokenSelfLookupEnabled); // Enables/disables token self-lookup.\n}"}
{"index": 16115, "repo": "spring-data-cassandra-4.1.2", "des": "Object to configure a ALTER TYPE specification.", "code": "public class AlterUserTypeSpecification extends UserTypeNameSpecification {\n\tAlterUserTypeSpecification add(com.datastax.oss.driver.api.core.CqlIdentifier field, com.datastax.oss.driver.api.core.type.DataType type); // Adds an ADD to the list of field changes.\n\tAlterUserTypeSpecification add(String field, com.datastax.oss.driver.api.core.type.DataType type); // Adds an ADD to the list of field changes.\n\tAlterUserTypeSpecification alter(com.datastax.oss.driver.api.core.CqlIdentifier field, com.datastax.oss.driver.api.core.type.DataType type); // Adds an ALTER to the list of field changes.\n\tAlterUserTypeSpecification alter(String field, com.datastax.oss.driver.api.core.type.DataType type); // Adds an ALTER to the list of field changes.\n\tstatic AlterUserTypeSpecification alterType(String typeName); // Entry point into the AlterColumnSpecification's fluent API given typeName to alter a user type.\n\tList<ColumnChangeSpecification> getChanges();\n\tAlterUserTypeSpecification rename(com.datastax.oss.driver.api.core.CqlIdentifier from, com.datastax.oss.driver.api.core.CqlIdentifier to); // Adds an RENAME to the list of field changes.\n\tAlterUserTypeSpecification rename(String from, String to); // Adds an RENAME to the list of field changes.\n}"}
{"index": 10574, "repo": "groovy-all-4.0.13", "des": "Represents a memoize cache with its essential methods", "code": "public interface MemoizeCache<K,V> {\n\tvoid cleanUpNullReferences(); // Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tV get(K key); // Gets a value from the cache\n\tdefault V getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider); // Try to get the value from cache.\n\tV put(K key, V value); // Associates the specified value with the specified key in the cache.\n}"}
{"index": 12450, "repo": "drill-common-1.21.1", "des": "A collection of utility methods to retrieve and parse the values of Java system properties.", "code": "public final class SystemPropertyUtil extends Object {\n\tstatic boolean contains(String key); // Returns true if and only if the system property with the specified key exists.\n\tstatic String get(String key); // Returns the value of the Java system property with the specified key, while falling back to null if the property access fails.\n\tstatic String get(String key, String def); // Returns the value of the Java system property with the specified key, while falling back to the specified default value if the property access fails.\n\tstatic boolean getBoolean(String key, boolean def); // Returns the value of the Java system property with the specified key, while falling back to the specified default value if the property access fails.\n\tstatic int getInt(String key, int def); // Returns the value of the Java system property with the specified key, while falling back to the specified default value if the property access fails.\n\tstatic long getLong(String key, long def); // Returns the value of the Java system property with the specified key, while falling back to the specified default value if the property access fails.\n}"}
{"index": 8942, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class contains helper methods that repair parts of hbase's filesystem contents.", "code": "Class HBaseFsckRepair {\n\tstatic void closeRegionSilentlyAndWait(Connection connection, ServerName server, RegionInfo region); // Contacts a region server and waits up to hbase.hbck.close.timeout ms (default 120s) to close the region.\n\tstatic HRegion createHDFSRegionDir(org.apache.hadoop.conf.Configuration conf, RegionInfo hri, TableDescriptor htd); // Creates, flushes, and closes a new region.\n\tstatic void fixMetaHoleOnlineAndAddReplicas(org.apache.hadoop.conf.Configuration conf, RegionInfo hri, Collection<ServerName> servers, int numReplicas); // Puts the specified RegionInfo into META with replica related columns\n\tstatic void fixMultiAssignment(Connection connection, RegionInfo region, List<ServerName> servers); // Fix multiple assignment by doing silent closes on each RS hosting the region and then force ZK unassigned node to OFFLINE to trigger assignment by master.\n\tstatic void fixUnassigned(Admin admin, RegionInfo region); // Fix unassigned by creating/transition the unassigned ZK node for this region to OFFLINE state with a special flag to tell the master that this is a forced operation by HBCK.\n\tstatic void removeParentInMeta(org.apache.hadoop.conf.Configuration conf, RegionInfo hri);\n\tstatic void waitUntilAssigned(Admin admin, RegionInfo region);\n}"}
{"index": 2298, "repo": "hive-exec-4.0.0-alpha-2", "des": "Represents a set of aggregation buffers to be used for a specific key for UDAF GROUP BY.", "code": "Class VectorAggregationBufferRow {\n\tint getAccessCount();\n\tVectorAggregateExpression.AggregationBuffer getAggregationBuffer(int bufferIndex); // returns the aggregation buffer for an aggregation expression, by index.\n\tVectorAggregateExpression.AggregationBuffer[] getAggregationBuffers(); // returns the array of aggregation buffers (the entire set).\n\tint getIndex(); // cached index used by VectorAggregationBufferBatch.\n\tint getVersion(); // Versioning used to detect staleness of the index cached for benefit of VectorAggregationBufferBatch.\n\tvoid incrementAccessCount();\n\tvoid reset(); // Resets the aggregation buffers for reuse\n\tvoid resetAccessCount();\n\tvoid setVersionAndIndex(int version, int index); // accessor for VectorAggregationBufferBatch to set its caching info on this set.\n}"}
{"index": 15092, "repo": "spring-vault-core-3.0.4", "des": "Interface that specifies kv metadata related operations.", "code": "public interface VaultKeyValueMetadataOperations {\n\tvoid delete(String path); // Permanently delete the key metadata and all version data for the specified key.\n\tVaultMetadataResponse get(String path); // Retrieve the metadata and versions for the secret at the specified path.\n\tvoid put(String path, VaultMetadataRequest body); // Update the secret metadata, or creates new metadata if not present.\n}"}
{"index": 5100, "repo": "commons-collections-3.2.2", "des": "Decorates another BidiMap to ensure it can't be altered.", "code": "Class UnmodifiableBidiMap {\n\tvoid clear();\n\tstatic BidiMap decorate(BidiMap map); // Factory method to create an unmodifiable map.\n\tSet entrySet();\n\tBidiMap inverseBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tSet keySet();\n\tMapIterator mapIterator(); // Obtains a MapIterator over the map.\n\tObject put(Object key, Object value); // Puts the key-value pair into the map, replacing any previous pair.\n\tvoid putAll(Map mapToCopy);\n\tObject remove(Object key);\n\tObject removeValue(Object value); // Removes the key-value pair that is currently mapped to the specified value (optional operation).\n\tCollection values();\n}"}
{"index": 1045, "repo": "ignite-core-2.15.0", "des": "On receiving a MissingMappingRequestMessage mapping request server node looks up class name for requested platformId and typeId in its local marshaller cache and sends back a MissingMappingResponseMessage mapping response with resolved class name.", "code": "Class MissingMappingResponseMessage {\n\tString className();\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tbyte platformId();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tint typeId();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 2240, "repo": "hive-exec-4.0.0-alpha-2", "des": "A type of hook which triggers before query compilation and after query execution.", "code": "Interface QueryLifeTimeHook {\n\tvoid afterCompile(QueryLifeTimeHookContext ctx, boolean hasError); // Invoked after a query compilation.\n\tvoid afterExecution(QueryLifeTimeHookContext ctx, boolean hasError); // Invoked after a query finishes its execution.\n\tvoid beforeCompile(QueryLifeTimeHookContext ctx); // Invoked before a query enters the compilation phase.\n\tvoid beforeExecution(QueryLifeTimeHookContext ctx); // Invoked before a query enters the execution phase.\n}"}
{"index": 11393, "repo": "spring-context-6.0.11", "des": "Interface for objects that are suitable for message resolution in a MessageSource.", "code": "@FunctionalInterface public interface MessageSourceResolvable {\n\tdefault Object[] getArguments(); // Return the array of arguments to be used to resolve this message.\n\tString[] getCodes(); // Return the codes to be used to resolve this message, in the order that they should get tried.\n\tdefault String getDefaultMessage(); // Return the default message to be used to resolve this message.\n}"}
{"index": 7301, "repo": "calcite-core-1.34.0", "des": "Defines the enumerated values \"LEADING\", \"TRAILING\", \"BOTH\".", "code": "Enum SqlTrimFunction.Flag {\n\tint getLeft();\n\tint getRight();\n\tstatic SqlTrimFunction.Flag valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlTrimFunction.Flag[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3828, "repo": "hbase-client-3.0.0-alpha-4", "des": "Used to perform Delete operations on a single row.", "code": "Class Delete {\n\tDelete add(Cell cell); // Add an existing delete marker to this Delete object.\n\tDelete addColumn(byte[] family, byte[] qualifier); // Delete the latest version of the specified column.\n\tDelete addColumn(byte[] family, byte[] qualifier, long timestamp); // Delete the specified version of the specified column.\n\tDelete addColumns(byte[] family, byte[] qualifier); // Delete all versions of the specified column.\n\tDelete addColumns(byte[] family, byte[] qualifier, long timestamp); // Delete all versions of the specified column with a timestamp less than or equal to the specified timestamp.\n\tDelete addFamily(byte[] family); // Delete all versions of all columns of the specified family.\n\tDelete addFamily(byte[] family, long timestamp); // Delete all columns of the specified family with a timestamp less than or equal to the specified timestamp.\n\tDelete addFamilyVersion(byte[] family, long timestamp); // Delete all columns of the specified family with a timestamp equal to the specified timestamp.\n\tCellBuilder getCellBuilder(CellBuilderType type); // get a CellBuilder instance that already has relevant Type and Row set.\n\tDelete setACL(Map<String,Permission> perms); // Set the ACL for this operation.\n\tDelete setACL(String user, Permission perms); // Set the ACL for this operation.\n\tDelete setAttribute(String name, byte[] value); // Sets an attribute.\n\tDelete setCellVisibility(CellVisibility expression); // Sets the visibility expression associated with cells in this Mutation.\n\tDelete setClusterIds(List<UUID> clusterIds); // Marks that the clusters with the given clusterIds have consumed the mutation\n\tDelete setDurability(Durability d); // Set the durability for this mutation\n\tDelete setId(String id); // This method allows you to set an identifier on an operation.\n\tDelete setPriority(int priority);\n\tDelete setTimestamp(long timestamp); // Set the timestamp of the delete.\n\tDelete setTTL(long ttl); // Set the TTL desired for the result of the mutation, in milliseconds.\n}"}
{"index": 6439, "repo": "exoplayer-core-2.9.6", "des": "Abstract base Player which implements common implementation independent methods.", "code": "Class BasePlayer {\n\tint getBufferedPercentage(); // Returns an estimate of the percentage in the current content window or ad up to which data is buffered, or 0 if no estimate is available.\n\tlong getContentDuration(); // If Player.isPlayingAd() returns true, returns the duration of the current content window in milliseconds, or C.TIME_UNSET if the duration is not known.\n\tjava.lang.Object getCurrentTag(); // Returns the tag of the currently playing window in the timeline.\n\tint getNextWindowIndex(); // Returns the index of the next timeline window to be played, which may depend on the current repeat mode and whether shuffle mode is enabled.\n\tint getPreviousWindowIndex(); // Returns the index of the previous timeline window to be played, which may depend on the current repeat mode and whether shuffle mode is enabled.\n\tboolean hasNext(); // Returns whether a next window exists, which may depend on the current repeat mode and whether shuffle mode is enabled.\n\tboolean hasPrevious(); // Returns whether a previous window exists, which may depend on the current repeat mode and whether shuffle mode is enabled.\n\tboolean isCurrentWindowDynamic(); // Returns whether the current window is dynamic, or false if the Timeline is empty.\n\tboolean isCurrentWindowSeekable(); // Returns whether the current window is seekable, or false if the Timeline is empty.\n\tvoid next(); // Seeks to the default position of the next window in the timeline, which may depend on the current repeat mode and whether shuffle mode is enabled.\n\tvoid previous(); // Seeks to the default position of the previous window in the timeline, which may depend on the current repeat mode and whether shuffle mode is enabled.\n\tvoid seekTo(long positionMs); // Seeks to a position specified in milliseconds in the current window.\n\tvoid seekToDefaultPosition(); // Seeks to the default position associated with the current window.\n\tvoid seekToDefaultPosition(int windowIndex); // Seeks to the default position associated with the specified window.\n\tvoid stop(); // Stops playback without resetting the player.\n}"}
{"index": 1835, "repo": "nifi-web-api-0.5.0", "des": "Audits process group creation/removal and configuration changes.", "code": "Class ProcessGroupAuditor {\n\tProcessGroup createProcessGroupAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint); // Audits the creation of process groups via createProcessGroup().\n\tAction generateAuditRecord(ProcessGroup processGroup, Operation operation); // Generates an audit record for the creation of a process group.\n\tAction generateAuditRecord(ProcessGroup processGroup, Operation operation, ActionDetails actionDetails); // Generates an audit record for the creation of a process group.\n\tvoid removeProcessGroupAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint, String groupId); // Audits the removal of a process group via deleteProcessGroup().\n\tProcessGroup updateProcessGroupAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint, ProcessGroupDTO processGroupDTO); // Audits the update of process group configuration.\n}"}
{"index": 18150, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "A type that maps between VARCHAR and Character[]", "code": "Class CharacterArrayType {\n\tjava.lang.String getName(); // Returns the abbreviated name of the type.\n\tjava.lang.String[] getRegistrationKeys(); // Get the names under which this type should be registered in the type registry.\n}"}
{"index": 6884, "repo": "calcite-core-1.34.0", "des": "HepMatchOrder specifies the order of graph traversal when looking for rule matches.", "code": "Enum HepMatchOrder {\n\tstatic HepMatchOrder valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HepMatchOrder[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3381, "repo": "hadoop-azure-3.3.6", "des": "Provides tokens based on Azure VM's Managed Service Identity.", "code": "Class MsiTokenProvider {\n\tprotected boolean isTokenAboutToExpire(); // Checks if the token is about to expire as per base expiry logic.\n\tprotected AzureADToken refreshToken(); // the method to fetch the access token.\n}"}
{"index": 18673, "repo": "opencms-gwt-15.0", "des": "The toolbar button for the favorite dialog.", "code": "Class CmsToolbarFavLocationButton {\n\tvoid onToolbarActivate(); // Method executed when the button is activated.\n\tvoid onToolbarClick(); // Executed when the tool-bar button is clicked.\n\tvoid onToolbarDeactivate(); // Method executed when the button is deactivated.\n}"}
{"index": 383, "repo": "phoenix-core-5.1.3", "des": "Aggregator that finds the min of values.", "code": "Class MinAggregator {\n\tvoid aggregate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Incrementally aggregate the value with the current row\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tint getSize(); // Get the size in bytes\n\tprotected boolean keepFirst(org.apache.hadoop.hbase.io.ImmutableBytesWritable ibw1, org.apache.hadoop.hbase.io.ImmutableBytesWritable ibw2); // Compares two bytes writables, and returns true if the first one should be kept, and false otherwise.\n\tvoid reset(); // Resets the state of a expression back to its initial state and enables the expession to be evaluated incrementally (which occurs during filter evaluation where we see one key value at a time; it's possible to evaluate immediately rather than wait until all key values have been seen).\n}"}
{"index": 13924, "repo": "spring-webflux-6.0.11", "des": "Defines a builder for RenderingResponse.", "code": "public static interface RenderingResponse.Builder {\n\treactor.core.publisher.Mono<RenderingResponse> build(); // Build the response.\n\tRenderingResponse.Builder cookie(org.springframework.http.ResponseCookie cookie); // Add the given cookie to the response.\n\tRenderingResponse.Builder cookies(Consumer<org.springframework.util.MultiValueMap<String,org.springframework.http.ResponseCookie>> cookiesConsumer); // Manipulate this response's cookies with the given consumer.\n\tRenderingResponse.Builder header(String headerName, String... headerValues); // Add the given header value(s) under the given name.\n\tRenderingResponse.Builder headers(org.springframework.http.HttpHeaders headers); // Copy the given headers into the entity's headers map.\n\tRenderingResponse.Builder modelAttribute(Object attribute); // Add the supplied attribute to the model using a generated name.\n\tRenderingResponse.Builder modelAttribute(String name, Object value); // Add the supplied attribute value under the supplied name.\n\tRenderingResponse.Builder modelAttributes(Object... attributes); // Copy all attributes in the supplied array into the model, using attribute name generation for each element.\n\tRenderingResponse.Builder modelAttributes(Collection<?> attributes); // Copy all attributes in the supplied Collection into the model, using attribute name generation for each element.\n\tRenderingResponse.Builder modelAttributes(Map<String,?> attributes); // Copy all attributes in the supplied Map into the model.\n\tRenderingResponse.Builder status(int status); // Set the HTTP status.\n\tRenderingResponse.Builder status(org.springframework.http.HttpStatusCode status); // Set the HTTP status.\n}"}
{"index": 3575, "repo": "hive-serde-4.0.0-alpha-2", "des": "Enum container for all avro table properties.", "code": "Enum AvroSerdeUtils.AvroTableProperties {\n\tString getPropName();\n\tstatic AvroSerdeUtils.AvroTableProperties valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AvroSerdeUtils.AvroTableProperties[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16815, "repo": "spring-expression-6.0.11", "des": "Contains all the messages that can be produced by the Spring Expression Language.", "code": "public enum SpelMessage extends Enum<SpelMessage> {\n\tString formatMessage(Object... inserts); // Produce a complete message including the prefix and with the inserts applied to the message.\n\tstatic SpelMessage valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SpelMessage[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 12569, "repo": "spring-jdbc-6.0.11", "des": "Object to represent an SQL parameter definition.", "code": "public class SqlParameter extends Object {\n\tString getName(); // Return the name of the parameter, or null if anonymous.\n\tInteger getScale(); // Return the scale of the parameter, if any.\n\tint getSqlType(); // Return the SQL type of the parameter.\n\tString getTypeName(); // Return the type name of the parameter, if any.\n\tboolean isInputValueProvided(); // Return whether this parameter holds input values that should be set before execution even if they are null.\n\tboolean isResultsParameter(); // Return whether this parameter is an implicit return parameter used during the results processing of CallableStatement.getMoreResults/getUpdateCount.\n\tstatic List<SqlParameter> sqlTypesToAnonymousParameterList(int... types); // Convert a list of JDBC types, as defined in java.sql.Types, to a List of SqlParameter objects as used in this package.\n}"}
{"index": 13694, "repo": "spring-webmvc-6.0.11", "des": "Assists with the registration of global, URL pattern based CorsConfiguration mappings.", "code": "public class CorsRegistry extends Object {\n\tCorsRegistration addMapping(String pathPattern); // Enable cross-origin request handling for the specified path pattern.\n\tprotected Map<String,org.springframework.web.cors.CorsConfiguration> getCorsConfigurations(); // Return the registered CorsConfiguration objects, keyed by path pattern.\n}"}
{"index": 6669, "repo": "artemis-odb-2.3.0", "des": "Iterates over EntitySubscription member entities by entity identity.", "code": "Class IteratingSystem {\n\tprotected abstract void process(int entityId); // Process a entity this system is interested in.\n\tprotected void processSystem(); // Process the system.\n}"}
{"index": 15279, "repo": "spring-boot-3.1.1", "des": "Error attributes that can be included in an error response.", "code": "public static enum ErrorAttributeOptions.Include extends Enum<ErrorAttributeOptions.Include> {\n\tstatic ErrorAttributeOptions.Include valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ErrorAttributeOptions.Include[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 5783, "repo": "hive-service-4.0.0-alpha-2", "des": "Utility functions for HTTP mode authentication.", "code": "Class HttpAuthUtils {\n\tstatic String createCookieToken(String clientUserName); // Creates and returns a HS2 cookie token.\n\tstatic String getKerberosServiceTicket(String principal, String host, String serverHttpUrl, Subject loggedInSubject);\n\tstatic String getUserNameFromCookieToken(String tokenStr); // Parses a cookie token to retrieve client user name.\n}"}
{"index": 5216, "repo": "druid-processing-26.0.0", "des": "Wraps a BaseDoubleColumnValueSelector and writes field values.", "code": "Class DoubleFieldWriter {\n\tvoid close(); // Releases resources held by this writer.\n\tstatic double detransform(long bits); // Inverse of transform(double).\n\tstatic long transform(double n); // Transforms a double into a form where it can be compared as unsigned bytes without decoding.\n\tlong writeTo(org.apache.datasketches.memory.WritableMemory memory, long position, long maxSize); // Writes the current selection at the given memory position.\n}"}
{"index": 12110, "repo": "jena-core-4.9.0", "des": "Tests the single argument to make sure it is not a Functor.", "code": "public class IsFunctor extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 17378, "repo": "groovy-4.0.13", "des": "Defines new Groovy methods which appear on normal JDK 9 classes inside the Groovy environment.", "code": "public class PluginDefaultGroovyMethods extends DefaultGroovyMethodsSupport {\n\tstatic void debug(System.Logger logger, String msg); // Convenience method for logging debug level messages with the platform logger.\n\tstatic void debug(System.Logger logger, String format, Object... params); // Convenience method for logging debug level messages with the platform logger.\n\tstatic void debug(System.Logger logger, String msg, Throwable thrown); // Convenience method for logging debug level messages with the platform logger.\n\tstatic void error(System.Logger logger, String msg); // Convenience method for logging error level messages with the platform logger.\n\tstatic void error(System.Logger logger, String format, Object... params); // Convenience method for logging error level messages with the platform logger.\n\tstatic void error(System.Logger logger, String msg, Throwable thrown); // Convenience method for logging error level messages with the platform logger.\n\tstatic void info(System.Logger logger, String msg); // Convenience method for logging info level messages with the platform logger.\n\tstatic void info(System.Logger logger, String format, Object... params); // Convenience method for logging info level messages with the platform logger.\n\tstatic void info(System.Logger logger, String msg, Throwable thrown); // Convenience method for logging info level messages with the platform logger.\n\tstatic void trace(System.Logger logger, String msg); // Convenience method for logging trace level messages with the platform logger.\n\tstatic void trace(System.Logger logger, String format, Object... params); // Convenience method for logging trace level messages with the platform logger.\n\tstatic void trace(System.Logger logger, String msg, Throwable thrown); // Convenience method for logging trace level messages with the platform logger.\n\tstatic void warn(System.Logger logger, String msg); // Convenience method for logging warning level messages with the platform logger.\n\tstatic void warn(System.Logger logger, String format, Object... params); // Convenience method for logging warning level messages with the platform logger.\n\tstatic void warn(System.Logger logger, String msg, Throwable thrown); // Convenience method for logging warning level messages with the platform logger.\n}"}
{"index": 13845, "repo": "spring-webflux-6.0.11", "des": "Abstract base class for URL-based views.", "code": "public abstract class AbstractUrlBasedView extends AbstractView implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tabstract boolean checkResourceExists(Locale locale); // Check whether the resource for the configured URL actually exists.\n\tString getUrl(); // Return the URL of the resource that this view wraps.\n\tvoid setUrl(String url); // Set the URL of the resource that this view wraps.\n}"}
{"index": 10431, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "Represents a Span stored in thread local.", "code": "public class ThreadLocalSpan extends Object {\n\tSpanAndScope get();\n\tvoid remove(); // Removes the current span from thread local and brings back the previous span to the current thread local.\n\tvoid set(Span span); // Sets given span and scope.\n}"}
{"index": 11136, "repo": "tribuo-core-4.3.1", "des": "Hashes names using String.hashCode(), then reduces the dimension.", "code": "public final class ModHashCodeHasher extends Hasher {\n\tstatic ModHashCodeHasher deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization constructor.\n\tboolean equals(Object o);\n\tcom.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance getProvenance();\n\tString hash(String name); // Hashes the supplied input using the hashing function.\n\tvoid postConfig(); // Used by the OLCUT configuration system, and should not be called by external code.\n\torg.tribuo.protos.core.HasherProto serialize(); // Serializes this object to a protobuf.\n\tvoid setSalt(String salt); // The salt is transient, it must be set **to the same value as it was trained with** after the Model is deserialized.\n}"}
{"index": 1276, "repo": "ignite-core-2.15.0", "des": "Task for collection checksums primary and backup partitions of specified caches.", "code": "Class VerifyBackupPartitionsDumpTask {\n\tstatic void logParsedArgs(VisorIdleVerifyTaskArg args, Consumer<String> logConsumer); // Passes idle_verify parsed arguments to given log consumer.\n\t@NotNull Map<? extends ComputeJob,ClusterNode> map(List<ClusterNode> subgrid, VisorIdleVerifyTaskArg arg); // This method is called to map or split grid task into multiple grid jobs.\n\t@Nullable String reduce(List<ComputeJobResult> results); // Reduces (or aggregates) results received so far into one compound result to be returned to caller via ComputeTaskFuture.get() method.\n\tComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd); // Default implementation which will wait for all jobs to complete before calling ComputeTask.reduce(List) method.\n}"}
{"index": 12275, "repo": "jena-core-4.9.0", "des": "Default implementation of ValidityReport which simply stores a list of precomputed Report records.", "code": "public class StandardValidityReport extends Object implements ValidityReport {\n\tvoid add(boolean error, String type, String description); // Add a new error report\n\tvoid add(boolean error, String type, String description, Object extension); // Add a new error report\n\tvoid add(ValidityReport.Report report); // Add a new error report\n\tIterator<ValidityReport.Report> getReports(); // Return an iterator over the separate ValidityReport.Report records.\n\tboolean isClean(); // Returns true if the model is both valid (logically consistent) and no warnings were generated.\n\tboolean isValid(); // Returns true if no logical inconsistencies were detected (in which case there will be at least one error Report included).\n\tint size(); // Return a count of the number of warning or error reports generated by the validation.\n}"}
{"index": 10786, "repo": "spring-boot-actuator-3.1.1", "des": "A mutable registry of health endpoint contributors (either HealthContributor or ReactiveHealthContributor).", "code": "public interface ContributorRegistry<C> extends NamedContributors<C> {\n\tvoid registerContributor(String name, C contributor); // Register a contributor with the given name.\n\tC unregisterContributor(String name); // Unregister a previously registered contributor.\n}"}
{"index": 11453, "repo": "spring-context-6.0.11", "des": "Utility methods for decorating tasks with error handling.", "code": "public abstract class TaskUtils extends Object {\n\tstatic DelegatingErrorHandlingRunnable decorateTaskWithErrorHandler(Runnable task, org.springframework.util.ErrorHandler errorHandler, boolean isRepeatingTask); // Decorate the task for error handling.\n\tstatic org.springframework.util.ErrorHandler getDefaultErrorHandler(boolean isRepeatingTask); // Return the default ErrorHandler implementation based on the boolean value indicating whether the task will be repeating or not.\n}"}
{"index": 17012, "repo": "spring-data-r2dbc-3.1.2", "des": "A subclass of QueryMapper that maps Update to update assignments.", "code": "public class UpdateMapper extends QueryMapper {\n\tBoundAssignments getMappedObject(BindMarkers markers, Map<SqlIdentifier,? extends Object> assignments, Table table, RelationalPersistentEntity<?> entity); // Map a assignments object to BoundAssignments and consider value/NULL Bindings.\n\tBoundAssignments getMappedObject(BindMarkers markers, Update update, Table table, RelationalPersistentEntity<?> entity); // Map a Update object to BoundAssignments and consider value/NULL Bindings.\n}"}
{"index": 2208, "repo": "hive-exec-4.0.0-alpha-2", "des": "Extension of ExecDriver: - can optionally spawn a map-reduce task from a separate jvm - will make last minute adjustments to map-reduce job parameters, viz: * estimating number of reducers * estimating whether job should run locally.", "code": "Class MapRedTask {\n\tint execute(); // Execute a query plan using Hadoop.\n\tOperator<? extends OperatorDesc> getReducer(MapWork mapWork);\n\tstatic String isEligibleForLocalMode(HiveConf conf, int numReducers, long inputLength, long inputFileCount); // Find out if a job can be run in local mode based on it's characteristics\n\tboolean mapDone();\n\tboolean mapStarted();\n\tboolean reduceDone();\n\tboolean reduceStarted();\n\tvoid shutdown();\n\tvoid updateTaskMetrics(org.apache.hadoop.hive.common.metrics.common.Metrics metrics); // Provide metrics on the type and number of tasks executed by the HiveServer\n\tvoid updateWebUiStats(MapRedStats mapRedStats, org.apache.hadoop.mapred.RunningJob rj);\n}"}
{"index": 16713, "repo": "spring-beans-6.0.11", "des": "Base implementation of the TypeConverter interface, using a package-private delegate.", "code": "public abstract class TypeConverterSupport extends PropertyEditorRegistrySupport implements TypeConverter {\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType); // Convert the value to the required type (if necessary from a String).\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType, Field field); // Convert the value to the required type (if necessary from a String).\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType, org.springframework.core.convert.TypeDescriptor typeDescriptor); // Convert the value to the required type (if necessary from a String).\n\t<T> T convertIfNecessary(Object value, Class<T> requiredType, org.springframework.core.MethodParameter methodParam); // Convert the value to the required type (if necessary from a String).\n}"}
{"index": 17143, "repo": "spring-integration-core-6.1.2", "des": "Interface for components that wish to be considered for an orderly shutdown using management interfaces.", "code": "public interface OrderlyShutdownCapable {\n\tint afterShutdown(); // Called after normal shutdown of schedulers, executors etc, and after the shutdown delay has elapsed, but before any forced shutdown of any remaining active scheduler/executor threads.Can optionally return the number of active messages still in process.\n\tint beforeShutdown(); // Called before shutdown begins.\n}"}
{"index": 2477, "repo": "exoplayer-r2.3.1", "des": "A SampleStream that loads media in Chunks, obtained from a ChunkSource.", "code": "Class ChunkSampleStream<T extends ChunkSource> {\n\tboolean continueLoading(long positionUs); // Attempts to continue loading.\n\tvoid discardUnselectedEmbeddedTracksTo(long positionUs); // Discards buffered media for embedded tracks that are not currently selected, up to the specified position.\n\tlong getBufferedPositionUs(); // Returns an estimate of the position up to which data is buffered.\n\tT getChunkSource(); // Returns the ChunkSource used by this stream.\n\tlong getNextLoadPositionUs(); // Returns the next load time, or C.TIME_END_OF_SOURCE if loading has finished.\n\tboolean isReady(); // Returns whether data is available to be read.\n\tvoid maybeThrowError(); // Throws an error that's preventing data from being read.\n\tvoid onLoadCanceled(Chunk loadable, long elapsedRealtimeMs, long loadDurationMs, boolean released); // Called when a load has been canceled.\n\tvoid onLoadCompleted(Chunk loadable, long elapsedRealtimeMs, long loadDurationMs); // Called when a load has completed.\n\tint onLoadError(Chunk loadable, long elapsedRealtimeMs, long loadDurationMs, java.io.IOException error); // Called when a load encounters an error.\n\tint readData(FormatHolder formatHolder, DecoderInputBuffer buffer, boolean formatRequired); // Attempts to read from the stream.\n\tvoid release(); // Releases the stream.\n\tvoid seekToUs(long positionUs); // Seeks to the specified position in microseconds.\n\tChunkSampleStream.EmbeddedSampleStream selectEmbeddedTrack(long positionUs, int trackType); // Selects the embedded track, returning a new ChunkSampleStream.EmbeddedSampleStream from which the track's samples can be consumed.\n\tvoid skipToKeyframeBefore(long timeUs); // Attempts to skip to the keyframe before the specified time.\n}"}
{"index": 822, "repo": "ignite-core-2.15.0", "des": "Implementation of SSL filter using SSLEngine.", "code": "Class GridNioSslFilter {\n\tboolean directMode();\n\tvoid directMode(boolean directMode);\n\tvoid enabledCipherSuites(String... enabledCipherSuites); // Sets a set of cipher suites that will be enabled for this filter.\n\tvoid enabledProtocols(String... enabledProtos); // Sets enabled secure protocols for this filter.\n\tByteBuffer encrypt(GridNioSession ses, ByteBuffer input);\n\tboolean lock(GridNioSession ses);\n\tvoid needClientAuth(boolean needClientAuth); // Sets flag indicating whether client authentication will be required.\n\tvoid onExceptionCaught(GridNioSession ses, IgniteCheckedException ex); // Invoked when exception is caught in filter processing.\n\tvoid onMessageReceived(GridNioSession ses, Object msg); // Invoked when a new messages received.\n\tGridNioFuture<Boolean> onSessionClose(GridNioSession ses); // Invoked when a session close request is performed on session.\n\tvoid onSessionClosed(GridNioSession ses); // Invoked after session get closed.\n\tvoid onSessionIdleTimeout(GridNioSession ses); // Called when session is idle for longer time that is allowed by NIO server.\n\tvoid onSessionOpened(GridNioSession ses); // Invoked when a new session was created.\n\tGridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg, boolean fut, IgniteInClosure<IgniteException> ackC); // Invoked when a write request is performed on a session.\n\tvoid onSessionWriteTimeout(GridNioSession ses); // Called when session has not empty write buffer that has not been fully flushed during max timeout allowed by NIO server.\n\tvoid unlock(GridNioSession ses);\n\tvoid wantClientAuth(boolean wantClientAuth); // Sets flag indicating whether client authentication will be requested during handshake.\n}"}
{"index": 2710, "repo": "mahout-core-14.1", "des": "If f(0, y) = 0, the zeros in x don't matter and we can simply iterate through the nonzeros of x.", "code": "Class VectorBinaryAssign.AssignNonzerosIterateThisLookupThat {\n\tVector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tdouble estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tboolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 12505, "repo": "spring-jdbc-6.0.11", "des": "RowMapper implementation that converts a row into a new instance of the specified mapped target class.", "code": "public class DataClassRowMapper<T> extends BeanPropertyRowMapper<T> {\n\tprotected T constructMappedInstance(ResultSet rs, org.springframework.beans.TypeConverter tc); // Construct an instance of the mapped class for the current row.\n\tprotected void initialize(Class<T> mappedClass); // Initialize the mapping meta-data for the given class.\n\tstatic <T> DataClassRowMapper<T> newInstance(Class<T> mappedClass); // Static factory method to create a new DataClassRowMapper.\n\tstatic <T> DataClassRowMapper<T> newInstance(Class<T> mappedClass, org.springframework.core.convert.ConversionService conversionService); // Static factory method to create a new DataClassRowMapper.\n}"}
{"index": 15777, "repo": "camel-api-4.0.0-RC1", "des": "Factory to create the Map implementation to use for storing headers on Message.", "code": "public interface HeadersMapFactory {\n\tboolean isCaseInsensitive(); // Whether the created Map are case insensitive or not.\n\tboolean isInstanceOf(Map<String,Object> map); // Whether the given Map implementation is created by this factory?\n\tMap<String,Object> newMap(); // Creates a new empty Map\n\tMap<String,Object> newMap(Map<String,Object> map); // Creates a new Map and copies over all the content from the existing map.\n}"}
{"index": 5378, "repo": "druid-processing-26.0.0", "des": "Provides an interface to read a partitioned frame channel.", "code": "Interface PartitionedReadableFrameChannel {\n\tvoid close(); // Releases any resources associated with this readable channel.\n\tReadableFrameChannel getReadableFrameChannel(int partitionNumber); // Allows reading a particular partition in the channel\n}"}
{"index": 1641, "repo": "samza-api-1.8.0", "des": "An ApplicationContainerContext instance can be used for holding per-container runtime state and objects and managing their lifecycle.", "code": "Interface ApplicationContainerContext {\n\tvoid start(); // Starts this ApplicationContainerContext before any tasks in the container are initialized and before processing begins.\n\tvoid stop(); // Stops this ApplicationContainerContext after processing ends and after all tasks in the container are closed.\n}"}
{"index": 18315, "repo": "opencms-core-15.0", "des": "Represents the value of an attribute, with additional information about where the value originated from.", "code": "Class CmsADEConfigDataInternal.AttributeValue {\n\tjava.lang.String getOrigin(); // Gets the origin path.\n\tjava.lang.String getValue(); // Gets the attribute string value.\n}"}
{"index": 11308, "repo": "spring-context-6.0.11", "des": "A factory providing convenient access to a ConversionService configured with converters appropriate for most environments.", "code": "public class ConversionServiceFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<org.springframework.core.convert.ConversionService>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected org.springframework.core.convert.support.GenericConversionService createConversionService(); // Create the ConversionService instance returned by this factory bean.\n\torg.springframework.core.convert.ConversionService getObject();\n\tClass<? extends org.springframework.core.convert.ConversionService> getObjectType();\n\tboolean isSingleton();\n\tvoid setConverters(Set<?> converters); // Configure the set of custom converter objects that should be added: implementing Converter, ConverterFactory, or GenericConverter.\n}"}
{"index": 7564, "repo": "cassandra-all-4.1.2", "des": "WARNING: Be careful while changing the names or string representation of the enum members.", "code": "Enum Component.Type {\n\tstatic Component.Type fromRepresentation(java.lang.String repr);\n\tstatic Component.Type valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic Component.Type[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5334, "repo": "druid-processing-26.0.0", "des": "Provides LookupExtractorFactoryContainer to query and indexing time dimension transformations.", "code": "Interface LookupExtractorFactoryContainerProvider {\n\tOptional<LookupExtractorFactoryContainer> get(String lookupName); // Returns a lookup container for the provided lookupName, if it exists.\n\tSet<String> getAllLookupNames(); // Returns the set of all lookup names that get(java.lang.String) can return containers for.\n}"}
{"index": 10148, "repo": "spring-hateoas-2.1.2", "des": "Extension of LinkBuilderFactory for implementations that also support creating LinkBuilders by pointing to a method.", "code": "public interface MethodLinkBuilderFactory<T extends LinkBuilder> extends LinkBuilderFactory<T> {\n\tT linkTo(Class<?> type, Method method); // Returns a LinkBuilder pointing to the URI mapped to the given Method assuming it was invoked on an object of the given type expanding the mapping using null values as parameters.\n\tT linkTo(Class<?> type, Method method, Object... parameters); // Returns a LinkBuilder pointing to the URI mapped to the given Method assuming it was invoked on an object of the given type.\n\tT linkTo(Object methodInvocationResult); // Returns a LinkBuilder pointing to the URI mapped to the method the result is handed into this method.\n\tT linkTo(Method method); // Returns a LinkBuilder pointing to the URI mapped to the given Method and expanding this mapping using null values as parameters.\n\tT linkTo(Method method, Object... parameters); // Returns a LinkBuilder pointing to the URI mapped to the given Method and expanding this mapping using the given parameters.\n}"}
{"index": 11294, "repo": "spring-context-6.0.11", "des": "Class representing generic injection information about an annotated field or setter method, supporting @Resource and related annotations.", "code": "protected abstract static class CommonAnnotationBeanPostProcessor.LookupElement extends org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement {\n\tfinal org.springframework.beans.factory.config.DependencyDescriptor getDependencyDescriptor(); // Build a DependencyDescriptor for the underlying field/method.\n\tfinal Class<?> getLookupType(); // Return the desired type for the lookup.\n\tfinal String getName(); // Return the resource name for the lookup.\n}"}
{"index": 7616, "repo": "cassandra-all-4.1.2", "des": "Listener used to collect the syntax errors emitted by the Lexer and Parser.", "code": "Interface ErrorListener {\n\tvoid syntaxError(org.antlr.runtime.BaseRecognizer recognizer, java.lang.String errorMsg); // Invoked when a syntax error with a specified message occurs.\n\tvoid syntaxError(org.antlr.runtime.BaseRecognizer recognizer, java.lang.String[] tokenNames, org.antlr.runtime.RecognitionException e); // Invoked when a syntax error occurs.\n}"}
{"index": 8494, "repo": "commons-io-2.13.0", "des": "Defines operations for conditional file filters.", "code": "Interface ConditionalFileFilter {\n\tvoid addFileFilter(IOFileFilter ioFileFilter); // Adds the specified file filter to the list of file filters at the end of the list.\n\tList<IOFileFilter> getFileFilters(); // Gets this conditional file filter's list of file filters.\n\tboolean removeFileFilter(IOFileFilter ioFileFilter); // Removes the specified file filter.\n\tvoid setFileFilters(List<IOFileFilter> fileFilters); // Sets the list of file filters, replacing any previously configured file filters on this filter.\n}"}
{"index": 17067, "repo": "spring-integration-core-6.1.2", "des": "An implementation of MessageChannel that delegates to an instance of UnicastingDispatcher which in turn delegates all dispatching invocations to an Executor.", "code": "public class ExecutorChannel extends AbstractExecutorChannel {\n\tprotected UnicastingDispatcher getDispatcher();\n\tfinal void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setFailover(boolean failover); // Specify whether the channel's dispatcher should have failover enabled.\n}"}
{"index": 16678, "repo": "spring-beans-6.0.11", "des": "Simple factory facade for obtaining PropertyAccessor instances, in particular for BeanWrapper instances.", "code": "public final class PropertyAccessorFactory extends Object {\n\tstatic BeanWrapper forBeanPropertyAccess(Object target); // Obtain a BeanWrapper for the given target object, accessing properties in JavaBeans style.\n\tstatic ConfigurablePropertyAccessor forDirectFieldAccess(Object target); // Obtain a PropertyAccessor for the given target object, accessing properties in direct field style.\n}"}
{"index": 8661, "repo": "avro-1.11.2", "des": "Builds an Avro float type with optional properties.", "code": "Class SchemaBuilder.FloatBuilder<R> {\n\tR endFloat(); // complete building this type, return control to context\n\tprotected SchemaBuilder.FloatBuilder<R> self(); // a self-type for chaining builder subclasses.\n}"}
{"index": 13927, "repo": "spring-webflux-6.0.11", "des": "Contract for request mapping conditions.", "code": "public interface RequestCondition<T> {\n\tT combine(T other); // Combine this condition with another such as conditions from a type-level and method-level @RequestMapping annotation.\n\tint compareTo(T other, org.springframework.web.server.ServerWebExchange exchange); // Compare this condition to another condition in the context of a specific request.\n\tT getMatchingCondition(org.springframework.web.server.ServerWebExchange exchange); // Check if the condition matches the request returning a potentially new instance created for the current request.\n}"}
{"index": 14896, "repo": "spring-data-keyvalue-3.1.2", "des": "KeyValueEvent after removing an object by with a given key.", "code": "public static class KeyValueEvent.AfterDeleteEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\tT getPayload(); // Get the value of the element the KeyValueEvent refers to.\n\tObject getSource();\n\tClass<? extends T> getType(); // Get the type of the element the KeyValueEvent refers to.\n}"}
{"index": 13784, "repo": "spring-webmvc-6.0.11", "des": "Encapsulates information required to create a resource handler.", "code": "public class ResourceHandlerRegistration extends Object {\n\tResourceHandlerRegistration addResourceLocations(String... locations); // Add one or more resource locations from which to serve static content.\n\tResourceHandlerRegistration addResourceLocations(org.springframework.core.io.Resource... locations); // Configure locations to serve static resources from based on pre-resolved Resource references.\n\tprotected String[] getPathPatterns(); // Return the URL path patterns for the resource handler.\n\tprotected ResourceHttpRequestHandler getRequestHandler(); // Return a ResourceHttpRequestHandler instance.\n\tResourceChainRegistration resourceChain(boolean cacheResources); // Configure a chain of resource resolvers and transformers to use.\n\tResourceChainRegistration resourceChain(boolean cacheResources, org.springframework.cache.Cache cache); // Configure a chain of resource resolvers and transformers to use.\n\tResourceHandlerRegistration setCacheControl(org.springframework.http.CacheControl cacheControl); // Specify the CacheControl which should be used by the resource handler.\n\tResourceHandlerRegistration setCachePeriod(Integer cachePeriod); // Specify the cache period for the resources served by the resource handler, in seconds.\n\tResourceHandlerRegistration setOptimizeLocations(boolean optimizeLocations); // Set whether to optimize the specified locations through an existence check on startup, filtering non-existing directories upfront so that they do not have to be checked on every resource access.\n\tResourceHandlerRegistration setUseLastModified(boolean useLastModified); // Set whether the Resource.lastModified() information should be used to drive HTTP responses.\n}"}
{"index": 4579, "repo": "beam-sdks-java-core-2.49.0", "des": "For internal use only; no backwards-compatibility guarantees.", "code": "Interface WatermarkHoldState {\n\tTimestampCombiner getTimestampCombiner(); // Return the TimestampCombiner which will be used to determine a watermark hold time given an element timestamp, and to combine watermarks from windows which are about to be merged.\n\tWatermarkHoldState readLater(); // Indicate that the value will be read later.\n}"}
{"index": 2347, "repo": "commons-geometry-euclidean-1.0", "des": "Extension of the BoundarySource interface for Euclidean 3D space.", "code": "Interface BoundarySource3D {\n\tdefault Bounds3D getBounds(); // Get a Bounds3D object defining the axis-aligned box containing all vertices in the boundaries for this instance.\n\tdefault List<LinecastPoint3D> linecast(LineConvexSubset3D subset); // Intersect the given line convex subset against the boundaries in this instance, returning a list of all intersections in order of increasing distance along the line.\n\tdefault LinecastPoint3D linecastFirst(LineConvexSubset3D subset); // Intersect the given line convex subset against the boundaries in this instance, returning the first intersection found when traveling in the direction of the line subset from its start point.\n\tstatic BoundarySource3D of(Collection<PlaneConvexSubset> boundaries); // Return a BoundarySource3D instance containing the given boundaries.\n\tstatic BoundarySource3D of(PlaneConvexSubset... boundaries); // Return a BoundarySource3D instance containing the given boundaries.\n\tdefault BoundaryList3D toList(); // Return a BoundaryList3D containing the boundaries in this instance.\n\tdefault RegionBSPTree3D toTree(); // Return a BSP tree constructed from the boundaries contained in this instance.\n\tdefault TriangleMesh toTriangleMesh(Precision.DoubleEquivalence precision); // Construct a triangle mesh from the boundaries in this instance.\n\tdefault Stream<Triangle3D> triangleStream(); // Return the boundaries of this instance as a stream of Triangle3D instances.\n}"}
{"index": 17901, "repo": "spring-web-6.0.11", "des": "Wraps another ServerHttpRequest and delegates all methods to it.", "code": "public class ServerHttpRequestDecorator extends Object implements ServerHttpRequest {\n\treactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody(); // Return the body of the message as a Publisher.\n\torg.springframework.util.MultiValueMap<String,HttpCookie> getCookies(); // Return a read-only map of cookies sent by the client.\n\tServerHttpRequest getDelegate();\n\tHttpHeaders getHeaders(); // Return the headers of this message.\n\tString getId(); // Return an id that represents the underlying connection, if available, or the request for the purpose of correlating log messages.\n\tInetSocketAddress getLocalAddress(); // Return the local address the request was accepted on, if available.\n\tHttpMethod getMethod(); // Return the HTTP method of the request.\n\tstatic <T> T getNativeRequest(ServerHttpRequest request); // Return the native request of the underlying server API, if possible, also unwrapping ServerHttpRequestDecorator if necessary.\n\tRequestPath getPath(); // Returns a structured representation of the full request path up to but not including the query.\n\torg.springframework.util.MultiValueMap<String,String> getQueryParams(); // Return a read-only map with parsed and decoded query parameter values.\n\tInetSocketAddress getRemoteAddress(); // Return the remote address where this request is connected to, if available.\n\tSslInfo getSslInfo(); // Return the SSL session information if the request has been transmitted over a secure protocol including SSL certificates, if available.\n\tURI getURI(); // Return the URI of the request (including a query string if any, but only if it is well-formed for a URI representation).\n}"}
{"index": 9851, "repo": "commons-math3-3.6.1", "des": "This class implements the 3/8 fourth order Runge-Kutta integrator for Ordinary Differential Equations.", "code": "Class ThreeEighthesFieldIntegrator<T extends RealFieldElement<T>> {\n\tprotected org.apache.commons.math3.ode.nonstiff.ThreeEighthesFieldStepInterpolator<T> createInterpolator(boolean forward, T[][] yDotK, FieldODEStateAndDerivative<T> globalPreviousState, FieldODEStateAndDerivative<T> globalCurrentState, FieldEquationsMapper<T> mapper); // Create an interpolator.\n\tT[][] getA(); // Get the internal weights from Butcher array (without the first empty row).\n\tT[] getB(); // Get the external weights for the high order method from Butcher array.\n\tT[] getC(); // Get the time steps from Butcher array (without the first zero).\n}"}
{"index": 2026, "repo": "hive-exec-4.0.0-alpha-2", "des": "DefaultStorageHandler is an implementation of HiveStorageHandler which supplies the standard defaults for all options.", "code": "Class DefaultStorageHandler {\n\tvoid configureInputJobCredentials(TableDesc tableDesc, Map<String,String> secrets); // This method is called to allow the StorageHandlers the chance to populate secret keys into the job's credentials.\n\tvoid configureInputJobProperties(TableDesc tableDesc, Map<String,String> jobProperties); // This method is called to allow the StorageHandlers the chance to populate the JobContext.getConfiguration() with properties that maybe be needed by the handler's bundled artifacts (ie InputFormat, SerDe, etc).\n\tvoid configureJobConf(TableDesc tableDesc, org.apache.hadoop.mapred.JobConf jobConf); // Called just before submitting MapReduce job.\n\tvoid configureOutputJobProperties(TableDesc tableDesc, Map<String,String> jobProperties); // This method is called to allow the StorageHandlers the chance to populate the JobContext.getConfiguration() with properties that maybe be needed by the handler's bundled artifacts (ie InputFormat, SerDe, etc).\n\tvoid configureTableJobProperties(TableDesc tableDesc, Map<String,String> jobProperties); // Deprecated use configureInputJobProperties/configureOutputJobProperties methods instead.\n\tHiveAuthorizationProvider getAuthorizationProvider(); // Returns the implementation specific authorization provider\n\torg.apache.hadoop.conf.Configuration getConf();\n\tClass<? extends org.apache.hadoop.mapred.InputFormat> getInputFormatClass();\n\tHiveMetaHook getMetaHook();\n\tClass<? extends org.apache.hadoop.mapred.OutputFormat> getOutputFormatClass();\n\tClass<? extends AbstractSerDe> getSerDeClass();\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 797, "repo": "ignite-core-2.15.0", "des": "Continuous handler for message subscription.", "code": "Class GridMessageListenHandler {\n\tString cacheName();\n\tGridContinuousHandler clone(); // Clones this handler.\n\tGridContinuousBatch createBatch(); // Creates new batch.\n\tboolean isEvents();\n\tboolean isMessaging();\n\tboolean isQuery();\n\tboolean keepBinary();\n\tvoid notifyCallback(UUID nodeId, UUID routineId, Collection<?> objs, GridKernalContext ctx); // Notifies local callback.\n\tvoid onBatchAcknowledged(UUID routineId, GridContinuousBatch batch, GridKernalContext ctx); // Called when ack for a batch is received from client.\n\tvoid onClientDisconnected(); // Client node disconnected callback.\n\t@Nullable Object orderedTopic();\n\tvoid p2pMarshal(GridKernalContext ctx); // Deploys and marshals inner objects (called only if peer deployment is enabled).\n\tvoid p2pUnmarshal(UUID nodeId, GridKernalContext ctx); // Unmarshals inner objects (called only if peer deployment is enabled).\n\tvoid readExternal(ObjectInput in);\n\tGridContinuousHandler.RegisterStatus register(UUID nodeId, UUID routineId, GridKernalContext ctx); // Registers listener.\n\tvoid unregister(UUID routineId, GridKernalContext ctx); // Unregisters listener.\n\tMap<Integer,T2<Long,Long>> updateCounters();\n\tvoid updateCounters(AffinityTopologyVersion topVer, Map<UUID,Map<Integer,T2<Long,Long>>> cntrsPerNode, Map<Integer,T2<Long,Long>> cntrs);\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 2579, "repo": "exoplayer-r2.3.1", "des": "Calls through to Trace methods on supported API levels.", "code": "Class TraceUtil {\n\tstatic void beginSection(java.lang.String sectionName); // Writes a trace message to indicate that a given section of code has begun.\n\tstatic void endSection(); // Writes a trace message to indicate that a given section of code has ended.\n}"}
{"index": 3033, "repo": "tink-1.10.0", "des": "Util functions to facilitate conversion between the KeyHandle.", "code": "Class KeyStatusTypeProtoConverter {\n\tstatic KeyHandle.KeyStatusType fromProto(KeyStatusType keyStatusTypeProto); // Converts a KeyHandle.KeyStatusType proto enum into a KeyHandle.KeyStatusType enum\n\tstatic KeyStatusType toProto(KeyHandle.KeyStatusType status); // Converts a KeyHandle.KeyStatusType enum into a KeyHandle.KeyStatusType proto enum\n}"}
{"index": 2151, "repo": "hive-exec-4.0.0-alpha-2", "des": "Represents the object on which privilege is being granted/revoked, and objects being used in queries.", "code": "Class HivePrivilegeObject {\n\tint compareTo(HivePrivilegeObject o);\n\tstatic HivePrivilegeObject createHivePrivilegeObject(List<String> cmdParams); // Create HivePrivilegeObject of type HivePrivilegeObject.HivePrivilegeObjectType.COMMAND_PARAMS\n\tstatic HivePrivilegeObject forScheduledQuery(String owner, String clusterNamespace, String scheduleName);\n\tHivePrivilegeObject.HivePrivObjectActionType getActionType(); // See javadoc of HivePrivilegeObject.HivePrivObjectActionType\n\tList<String> getCellValueTransformers();\n\tString getClassName(); // The class name when the type is HivePrivilegeObject.HivePrivilegeObjectType.FUNCTION\n\tList<String> getColumns(); // Applicable columns in this object, when the type is HivePrivilegeObject.HivePrivilegeObjectType.TABLE_OR_VIEW In case of DML read operations, this is the set of columns being used.\n\tList<String> getCommandParams();\n\tString getDbname();\n\tString getObjectName();\n\tString getOwnerName();\n\torg.apache.hadoop.hive.metastore.api.PrincipalType getOwnerType();\n\tList<String> getPartKeys();\n\tString getRowFilterExpression();\n\tHivePrivilegeObject.HivePrivilegeObjectType getType();\n\tvoid setCellValueTransformers(List<String> cellValueTransformers);\n\tvoid setRowFilterExpression(String rowFilterExpression);\n}"}
{"index": 7277, "repo": "calcite-core-1.34.0", "des": "A simple parser that takes an incomplete and turn it into a syntactically correct statement.", "code": "Class SqlSimpleParser {\n\tString simplifySql(String sql); // Turns a partially completed or syntactically incorrect SQL statement into a simplified, valid one that can be validated.\n\tString simplifySql(String sql, int cursor); // Turns a partially completed or syntactically incorrect sql statement into a simplified, valid one that can be passed into getCompletionHints().\n}"}
{"index": 13111, "repo": "spring-integration-mail-6.1.2", "des": "An event-driven Channel Adapter that receives mail messages from a mail server that supports the IMAP \"idle\" command (see RFC 2177).", "code": "public class ImapIdleChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.ApplicationEventPublisherAware {\n\tvoid destroy();\n\tprotected void doStart();\n\tprotected void doStop();\n\tString getComponentType();\n\tprotected void onInit();\n\tvoid setAdviceChain(List<org.aopalliance.aop.Advice> adviceChain);\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setReconnectDelay(long reconnectDelay); // The time between connection attempts in milliseconds (default 10 seconds).\n\tvoid setShouldReconnectAutomatically(boolean shouldReconnectAutomatically); // Specify whether the IDLE task should reconnect automatically after catching a MessagingException while waiting for messages.\n\tvoid setTransactionSynchronizationFactory(org.springframework.integration.transaction.TransactionSynchronizationFactory transactionSynchronizationFactory);\n}"}
{"index": 6593, "repo": "exoplayer-core-2.9.6", "des": "A factory for SubtitleDecoder instances.", "code": "Interface SubtitleDecoderFactory {\n\tSubtitleDecoder createDecoder(Format format); // Creates a SubtitleDecoder for the given Format.\n\tboolean supportsFormat(Format format); // Returns whether the factory is able to instantiate a SubtitleDecoder for the given Format.\n}"}
{"index": 2979, "repo": "tink-1.10.0", "des": "This key manager generates new EciesAeadHkdfPrivateKey keys and produces new instances of EciesAeadHkdfHybridDecrypt.", "code": "Class EciesAeadHkdfPrivateKeyManager {\n\tstatic KeyTemplate eciesP256HkdfHmacSha256Aes128CtrHmacSha256Template();\n\tstatic KeyTemplate eciesP256HkdfHmacSha256Aes128GcmTemplate();\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tEciesAeadHkdfPublicKey getPublicKey(EciesAeadHkdfPrivateKey key); // Creates a public key from the given private key.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<EciesAeadHkdfKeyFormat,EciesAeadHkdfPrivateKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tEciesAeadHkdfPrivateKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic KeyTemplate rawEciesP256HkdfHmacSha256Aes128CtrHmacSha256CompressedTemplate();\n\tstatic KeyTemplate rawEciesP256HkdfHmacSha256Aes128GcmCompressedTemplate();\n\tstatic void registerPair(boolean newKeyAllowed); // Registers the EciesAeadHkdfPrivateKeyManager and the EciesAeadHkdfPublicKeyManager with the registry, so that the the EciesAeadHkdfKeys can be used with Tink.\n\tvoid validateKey(EciesAeadHkdfPrivateKey keyProto); // Checks if the given keyProto is a valid key.\n}"}
{"index": 12632, "repo": "spring-data-mongodb-4.1.2", "des": "An expression that calculates the inverse hyperbolic sine of a value", "code": "public static class ArithmeticOperators.ASinh extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tstatic ArithmeticOperators.ASinh asinhOf(Object value); // Creates a new AggregationExpression that calculates the inverse hyperbolic sine of a value.\n\tstatic ArithmeticOperators.ASinh asinhOf(String fieldReference); // Creates a new AggregationExpression that calculates the inverse hyperbolic sine of a value.\n\tstatic ArithmeticOperators.ASinh asinhOf(AggregationExpression expression); // Creates a new AggregationExpression that calculates the inverse hyperbolic sine of a value.\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 12837, "repo": "spring-data-mongodb-4.1.2", "des": "ReactiveMongoContext utilizes and enriches the Reactor Context with information potentially required for e.g.", "code": "public class ReactiveMongoContext extends Object {\n\tstatic reactor.core.publisher.Mono<com.mongodb.reactivestreams.client.ClientSession> getSession(); // Gets the Mono<ClientSession> from Reactor Context.\n\tstatic reactor.util.context.Context setSession(reactor.util.context.Context context, org.reactivestreams.Publisher<com.mongodb.reactivestreams.client.ClientSession> session); // Sets the ClientSession into the Reactor Context.\n}"}
{"index": 17416, "repo": "groovy-4.0.13", "des": "Base exception indicating a syntax error.", "code": "public class SyntaxException extends GroovyException {\n\tint getEndColumn();\n\tint getEndLine();\n\tint getLine(); // Retrieve the line upon which the error occurred.\n\tString getMessage();\n\tString getOriginalMessage();\n\tString getSourceLocator();\n\tint getStartColumn(); // Retrieve the column upon which the error occurred.\n\tint getStartLine();\n\tvoid setSourceLocator(String sourceLocator);\n}"}
{"index": 5557, "repo": "org.apache.karaf.main-2.4.4", "des": "The BundleTrackerCustomizer interface allows a BundleTracker to customize the Bundles that are tracked.", "code": "Interface BundleTrackerCustomizer<T> {\n\tT addingBundle(Bundle bundle, BundleEvent event); // A bundle is being added to the BundleTracker.\n\tvoid modifiedBundle(Bundle bundle, BundleEvent event, T object); // A bundle tracked by the BundleTracker has been modified.\n\tvoid removedBundle(Bundle bundle, BundleEvent event, T object); // A bundle tracked by the BundleTracker has been removed.\n}"}
{"index": 16353, "repo": "spring-data-jpa-3.1.2", "des": "The implementation of QueryEnhancer using QueryUtils.", "code": "public class DefaultQueryEnhancer extends Object implements QueryEnhancer {\n\tString applySorting(Sort sort, String alias); // Adds order by clause to the JPQL query.\n\tString createCountQueryFor(String countProjection); // Creates a count projected query from the given original query using the provided countProjection.\n\tString detectAlias(); // Resolves the alias for the entity to be retrieved from the given JPA query.\n\tSet<String> getJoinAliases();\n\tString getProjection(); // Returns the projection part of the query, i.e. everything between select and from.\n\torg.springframework.data.jpa.repository.query.DeclaredQuery getQuery(); // Gets the query we want to use for enhancements.\n}"}
{"index": 1439, "repo": "pdfbox-3.0.0-beta1", "des": "This represents an FDF catalog that is part of the FDF document.", "code": "Class FDFCatalog {\n\tCOSDictionary getCOSObject(); // Convert this standard java object to a COS object.\n\tFDFDictionary getFDF(); // This will get the FDF dictionary.\n\tPDSignature getSignature(); // This will get the signature or null if there is none.\n\tString getVersion(); // This will get the version that was specified in the catalog dictionary.\n\tvoid setFDF(FDFDictionary fdf); // This will set the FDF document.\n\tvoid setSignature(PDSignature sig); // This will set the signature that is associated with this catalog.\n\tvoid setVersion(String version); // This will set the version of the FDF document.\n\tvoid writeXML(Writer output); // This will write this element as an XML document.\n}"}
{"index": 901, "repo": "ignite-core-2.15.0", "des": "Convenient in-closure subclass that allows for thrown grid exception.", "code": "Class IgniteInClosure2X<E1,E2> {\n\tvoid apply(E1 e1, E2 e2); // Closure body.\n\tabstract void applyx(E1 e1, E2 e2); // In-closure body that can throw IgniteCheckedException.\n}"}
{"index": 18164, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Provides access to a Connection that is isolated from any \"current transaction\" with the designed purpose of performing DDL commands", "code": "Interface DdlTransactionIsolator {\n\tjava.sql.Connection getIsolatedConnection(); // Returns a Connection that is usable within the bounds of the prepare() and release() calls.\n\torg.hibernate.tool.schema.internal.exec.JdbcContext getJdbcContext();\n\tvoid prepare(); // Deprecated. Instances should be returned from TransactionCoordinatorBuilder.buildDdlTransactionIsolator(org.hibernate.tool.schema.internal.exec.JdbcContext) already prepared for use\n\tvoid release();\n}"}
{"index": 920, "repo": "ignite-core-2.15.0", "des": "Factory implementation that use reflection to create instance of given class.", "code": "Class IgniteReflectionFactory<T> {\n\tT create();\n\tClass<? extends T> getComponentClass();\n\tMap<String,Serializable> getProperties(); // Gets a map of properties.\n\tboolean isSingleton();\n\tvoid setComponentClass(Class<T> cls);\n\tvoid setProperties(Map<String,Serializable> props); // Sets a map of properties.\n\tvoid setSingleton(boolean singleton);\n}"}
{"index": 18570, "repo": "hibernate-core-5.6.15.Final", "des": "Generalized contract for a \"ManagedBean\" as seen by Hibernate", "code": "Interface ManagedBean<T> {\n\tjava.lang.Class<T> getBeanClass(); // The bean Java type\n\tT getBeanInstance(); // The bean reference\n}"}
{"index": 5108, "repo": "commons-collections-3.2.2", "des": "Decorates another SortedBag to ensure it can't be altered.", "code": "Class UnmodifiableSortedBag {\n\tboolean add(Object object); // (Violation) Adds one copy the specified object to the Bag.\n\tboolean add(Object object, int count); // Adds nCopies copies of the specified object to the Bag.\n\tboolean addAll(Collection coll);\n\tvoid clear();\n\tstatic SortedBag decorate(SortedBag bag); // Factory method to create an unmodifiable bag.\n\tIterator iterator(); // Returns an Iterator over the entire set of members, including copies due to cardinality.\n\tboolean remove(Object object); // (Violation) Removes all occurrences of the given object from the bag.\n\tboolean remove(Object object, int count); // Removes nCopies copies of the specified object from the Bag.\n\tboolean removeAll(Collection coll); // (Violation) Remove all elements represented in the given collection, respecting cardinality.\n\tboolean retainAll(Collection coll); // (Violation) Remove any members of the bag that are not in the given collection, respecting cardinality.\n\tSet uniqueSet(); // Returns a Set of unique elements in the Bag.\n}"}
{"index": 16545, "repo": "spring-batch-infrastructure-5.0.2", "des": "Item reader implementation that executes a stored procedure and then reads the returned cursor and continually retrieves the next row in the ResultSet.", "code": "public class StoredProcedureItemReader<T> extends AbstractCursorItemReader<T> {\n\tvoid afterPropertiesSet(); // Assert that mandatory properties are set.\n\tprotected void cleanupOnClose(Connection connection); // Close the cursor and database connection.\n\tString getSql();\n\tprotected void openCursor(Connection con);\n\tprotected T readCursor(ResultSet rs, int currentRow); // Read the cursor and map to the type of object this reader should return.\n\tvoid setFunction(boolean function); // Set whether this stored procedure is a function.\n\tvoid setParameters(org.springframework.jdbc.core.SqlParameter[] parameters); // Add one or more declared parameters.\n\tvoid setPreparedStatementSetter(org.springframework.jdbc.core.PreparedStatementSetter preparedStatementSetter); // Set the PreparedStatementSetter to use if any parameter values that need to be set in the supplied query.\n\tvoid setProcedureName(String sprocedureName); // Set the SQL statement to be used when creating the cursor.\n\tvoid setRefCursorPosition(int refCursorPosition); // Set the parameter position of the REF CURSOR.\n\tvoid setRowMapper(org.springframework.jdbc.core.RowMapper<T> rowMapper); // Set the RowMapper to be used for all calls to read().\n}"}
{"index": 13192, "repo": "spring-test-6.0.11", "des": "ExceptionCollector is a test utility for executing code blocks, collecting exceptions, and generating a single AssertionError containing any exceptions encountered as suppressed exceptions.", "code": "public class ExceptionCollector extends Object {\n\tvoid assertEmpty(); // Assert that this ExceptionCollector does not contain any exceptions.\n\tvoid execute(ExceptionCollector.Executable executable); // Execute the supplied ExceptionCollector.Executable and track any exception thrown.\n\tList<Throwable> getExceptions(); // Get the list of exceptions encountered in execute(Executable).\n}"}
{"index": 8432, "repo": "hadoop-aws-3.3.6", "des": "Class for single/multiple commit data structures.", "code": "Class PersistentCommitData<T extends PersistentCommitData> {\n\tstatic <T extends PersistentCommitData>T load(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.FileStatus status, org.apache.hadoop.util.JsonSerialization<T> serializer); // Load an instance from a status, then validate it.\n\tabstract org.apache.hadoop.fs.statistics.IOStatistics save(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path, org.apache.hadoop.util.JsonSerialization<T> serializer); // Save to a hadoop filesystem.\n\tstatic <T extends PersistentCommitData>org.apache.hadoop.fs.statistics.IOStatistics saveFile(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path, T instance, org.apache.hadoop.util.JsonSerialization<T> serializer, boolean performance); // Save to a file.\n\tstatic <T extends PersistentCommitData>org.apache.hadoop.fs.statistics.IOStatistics saveToStream(org.apache.hadoop.fs.Path path, T instance, org.apache.hadoop.fs.FSDataOutputStreamBuilder builder, org.apache.hadoop.util.JsonSerialization<T> serializer); // Save to a file.\n\tabstract byte[] toBytes(org.apache.hadoop.util.JsonSerialization<T> serializer); // Serialize to JSON and then to a byte array, after performing a preflight validation of the data to be saved.\n\tabstract void validate(); // Validate the data: those fields which must be non empty, must be set.\n}"}
{"index": 7658, "repo": "cassandra-all-4.1.2", "des": "Versioned serializer where the serialization depends on partitioner.", "code": "Interface IPartitionerDependentSerializer<T> {\n\tT deserialize(java.io.DataInput in, IPartitioner p, int version); // Deserialize into the specified DataInputStream instance.\n\tvoid serialize(T t, DataOutputPlus out, int version); // Serialize the specified type into the specified DataOutputStream instance.\n\tlong serializedSize(T t, int version); // Calculate serialized size of object without actually serializing.\n}"}
{"index": 8139, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for MessageContext instances.", "code": "Class AbstractMessageContext {\n\tboolean containsProperty(String name); // Check if this message context contains a property with the given name.\n\tObject getProperty(String name); // Gets the value of a specific property from the MessageContext.\n\tString[] getPropertyNames(); // Return the names of all properties in this MessageContext.\n\tvoid removeProperty(String name); // Removes a property from the MessageContext.\n\tvoid setProperty(String name, Object value); // Sets the name and value of a property associated with the MessageContext.\n}"}
{"index": 15038, "repo": "spring-vault-core-3.0.4", "des": "Builder for ClientCertificateAuthenticationOptions.", "code": "public static class ClientCertificateAuthenticationOptions.ClientCertificateAuthenticationOptionsBuilder extends Object {\n\tClientCertificateAuthenticationOptions build(); // Build a new ClientCertificateAuthenticationOptions instance.\n\tClientCertificateAuthenticationOptions.ClientCertificateAuthenticationOptionsBuilder path(String path); // Configure the mount path, defaults to azure.\n\tClientCertificateAuthenticationOptions.ClientCertificateAuthenticationOptionsBuilder role(String name); // Configure the named certificate role to authenticate against.\n}"}
{"index": 6260, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "A MailInboundChannelAdapterSpec for IMAP.", "code": "Class ImapMailInboundChannelAdapterSpec {\n\tImapMailInboundChannelAdapterSpec searchTermStrategy(org.springframework.integration.mail.SearchTermStrategy searchTermStrategy); // A SearchTermStrategy to use.\n\tImapMailInboundChannelAdapterSpec shouldMarkMessagesAsRead(boolean shouldMarkMessagesAsRead); // A flag to determine if message should be marked as read.\n}"}
{"index": 5733, "repo": "freemarker-2.3.32", "des": "Don't implement this interface yourself; use the existing implementation(s).", "code": "Interface ParserConfiguration {\n\tArithmeticEngine getArithmeticEngine(); // Overlaps with Configurable.getArithmeticEngine(); the parser needs this for creating numerical literals.\n\tint getAutoEscapingPolicy(); // See Configuration.getAutoEscapingPolicy().\n\tVersion getIncompatibleImprovements(); // See Configuration.getIncompatibleImprovements().\n\tint getInterpolationSyntax(); // See Configuration.getInterpolationSyntax().\n\tint getNamingConvention(); // See Configuration.getNamingConvention().\n\tOutputFormat getOutputFormat(); // See Configurable.getOutputEncoding().\n\tboolean getRecognizeStandardFileExtensions(); // See Configuration.getRecognizeStandardFileExtensions().\n\tboolean getStrictSyntaxMode(); // See Configuration.getStrictSyntaxMode().\n\tint getTabSize(); // See Configuration.getTabSize().\n\tint getTagSyntax(); // See Configuration.getTagSyntax().\n\tboolean getWhitespaceStripping(); // See Configuration.getWhitespaceStripping().\n}"}
{"index": 17587, "repo": "spring-ldap-core-3.1.0", "des": "TransactionManager for managing LDAP transactions.", "code": "public class ContextSourceTransactionManager extends org.springframework.transaction.support.AbstractPlatformTransactionManager implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void doBegin(Object transaction, org.springframework.transaction.TransactionDefinition definition);\n\tprotected void doCleanupAfterCompletion(Object transaction);\n\tprotected void doCommit(org.springframework.transaction.support.DefaultTransactionStatus status);\n\tprotected Object doGetTransaction();\n\tprotected void doRollback(org.springframework.transaction.support.DefaultTransactionStatus status);\n\tContextSource getContextSource(); // Get the ContextSource.\n\tprotected boolean isExistingTransaction(Object transaction);\n\tvoid setContextSource(ContextSource contextSource); // Set the ContextSource.\n\tvoid setRenamingStrategy(TempEntryRenamingStrategy renamingStrategy); // Set the TempEntryRenamingStrategy.\n}"}
{"index": 11811, "repo": "spring-kafka-3.0.9", "des": "A MessageListener adapter that invokes a configurable HandlerAdapter; used when the factory is configured for the listener to receive batches of messages.", "code": "public class BatchMessagingMessageListenerAdapter<K,V> extends MessagingMessageListenerAdapter<K,V> implements BatchAcknowledgingConsumerAwareMessageListener<K,V> {\n\tprotected final BatchMessageConverter getBatchMessageConverter(); // Return the BatchMessagingMessageConverter for this listener, being able to convert Message.\n\tprotected void invoke(Object records, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<?,?> consumer, org.springframework.messaging.Message<?> messageArg);\n\tvoid onMessage(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> records, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Kafka MessageListener entry point.\n\tvoid onMessage(org.apache.kafka.clients.consumer.ConsumerRecords<K,V> records, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // Listener receives the original ConsumerRecords object instead of a list of ConsumerRecord.\n\tvoid setBatchMessageConverter(BatchMessageConverter messageConverter); // Set the BatchMessageConverter.\n\tvoid setBatchToRecordAdapter(BatchToRecordAdapter<K,V> batchToRecordAdapter); // Set a BatchToRecordAdapter.\n\tprotected org.springframework.messaging.Message<?> toMessagingMessage(List records, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<?,?> consumer);\n\tboolean wantsPollResult(); // Return true if this listener wishes to receive the original ConsumerRecords object instead of a list of ConsumerRecord.\n}"}
{"index": 11431, "repo": "spring-context-6.0.11", "des": "Interface that defines the source of a script.", "code": "public interface ScriptSource {\n\tString getScriptAsString(); // Retrieve the current script source text as String.\n\tboolean isModified(); // Indicate whether the underlying script data has been modified since the last time getScriptAsString() was called.\n\tString suggestedClassName(); // Determine a class name for the underlying script.\n}"}
{"index": 10429, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "This API was heavily influenced by Brave.", "code": "public interface Span extends SpanCustomizer {\n\tvoid abandon(); // Ends the span.\n\tTraceContext context();\n\tvoid end(); // Ends the span.\n\tSpan error(Throwable throwable); // Records an exception for this span.\n\tSpan event(String value); // Sets an event on this span.\n\tboolean isNoop();\n\tSpan name(String name); // Sets a name on this span.\n\tdefault Span remoteIpAndPort(String ip, int port); // Sets the remote url on the span.\n\tdefault Span remoteServiceName(String remoteServiceName); // Sets the remote service name for the span.\n\tSpan start(); // Starts this span.\n\tSpan tag(String key, String value); // Sets a tag on this span.\n}"}
{"index": 5701, "repo": "freemarker-2.3.32", "des": "Holds DefaultObjectWrapper configuration settings and defines their defaults.", "code": "Class DefaultObjectWrapperConfiguration {\n\tboolean equals(java.lang.Object that); // Two BeansWrapperConfiguration-s are equal exactly if their classes are identical (==), and their field values are equal.\n\tboolean getDOMNodeSupport(); // See DefaultObjectWrapper.getDOMNodeSupport().\n\tboolean getForceLegacyNonListCollections(); // See DefaultObjectWrapper.getForceLegacyNonListCollections().\n\tboolean getIterableSupport(); // See DefaultObjectWrapper.getIterableSupport().\n\tboolean getJythonSupport(); // See DefaultObjectWrapper.getJythonSupport().\n\tboolean getUseAdaptersForContainers(); // See DefaultObjectWrapper.getUseAdaptersForContainers().\n\tvoid setDOMNodeSupport(boolean domNodeSupport); // See DefaultObjectWrapper.setDOMNodeSupport(boolean).\n\tvoid setForceLegacyNonListCollections(boolean legacyNonListCollectionWrapping); // See DefaultObjectWrapper.setForceLegacyNonListCollections(boolean).\n\tvoid setIterableSupport(boolean iterableSupport); // See DefaultObjectWrapper.setIterableSupport(boolean).\n\tvoid setJythonSupport(boolean jythonSupport); // See DefaultObjectWrapper.setJythonSupport(boolean).\n\tvoid setUseAdaptersForContainers(boolean useAdaptersForContainers); // See DefaultObjectWrapper.setUseAdaptersForContainers(boolean).\n}"}
{"index": 2798, "repo": "tika-parsers-1.28.5", "des": "The interface of the property in OneNote file.", "code": "Interface IProperty {\n\tint doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the property from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of property into a byte List.\n}"}
{"index": 2509, "repo": "exoplayer-r2.3.1", "des": "Provides one period that loads data from a Uri and extracted using an Extractor.", "code": "Class ExtractorMediaSource {\n\tMediaPeriod createPeriod(int index, Allocator allocator, long positionUs); // Returns a new MediaPeriod corresponding to the period at the specified index.\n\tvoid maybeThrowSourceInfoRefreshError(); // Throws any pending error encountered while loading or refreshing source information.\n\tvoid onSourceInfoRefreshed(Timeline newTimeline, java.lang.Object manifest); // Called when manifest and/or timeline has been refreshed.\n\tvoid prepareSource(ExoPlayer player, boolean isTopLevelSource, MediaSource.Listener listener); // Starts preparation of the source.\n\tvoid releasePeriod(MediaPeriod mediaPeriod); // Releases the period.\n\tvoid releaseSource(); // Releases the source.\n}"}
{"index": 8778, "repo": "graal-sdk-1.0.0-rc7", "des": "A pointer to a 64-bit C primitive value.", "code": "Interface CLongPointer {\n\tCLongPointer addressOf(int index); // Computes the address of the array element with the specified index, treating the pointer as an array of the C type.\n\tCLongPointer addressOf(SignedWord index); // Computes the address of the array element with the specified index, treating the pointer as an array of the C type.\n\tlong read(); // Reads the value at the pointer address.\n\tlong read(int index); // Reads the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tlong read(SignedWord index); // Reads the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tvoid write(int index, long value); // Writes the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tvoid write(long value); // Writes the value at the pointer address.\n\tvoid write(SignedWord index, long value); // Writes the value of the array element with the specified index, treating the pointer as an array of the C type.\n}"}
{"index": 18825, "repo": "lucene-core-9.7.0", "des": "Thrown when elapsed search time exceeds allowed search time.", "code": "Class TimeLimitingCollector.TimeExceededException {\n\tint getLastDocCollected(); // Returns last doc (absolute doc id) that was collected when the search time exceeded.\n\tlong getTimeAllowed(); // Returns allowed time (milliseconds).\n\tlong getTimeElapsed(); // Returns elapsed time (milliseconds).\n}"}
{"index": 16446, "repo": "spring-batch-infrastructure-5.0.2", "des": "A LineAggregator implementation that converts an object into a delimited list of strings.", "code": "public class DelimitedLineAggregator<T> extends ExtractorLineAggregator<T> {\n\tString doAggregate(Object[] fields); // Aggregate provided fields into single String.\n\tvoid setDelimiter(String delimiter); // Public setter for the delimiter.\n}"}
{"index": 7829, "repo": "cassandra-all-4.1.2", "des": "Function that rounds a timeUUID down to the closest multiple of a duration.", "code": "Class TimeFcts.FloorTimeUuidFunction {\n\tprotected java.nio.ByteBuffer fromTimeInMillis(long timeInMillis); // Serializes the specified time.\n\tstatic TimeFcts.FloorTimeUuidFunction newInstance();\n\tstatic TimeFcts.FloorTimeUuidFunction newInstanceWithStartTimeArgument();\n\tprotected java.lang.Long toStartingTimeInMillis(java.nio.ByteBuffer bytes); // Deserializes the specified starting time.\n\tprotected java.lang.Long toTimeInMillis(java.nio.ByteBuffer bytes); // Deserializes the specified input time.\n}"}
{"index": 11137, "repo": "tribuo-core-4.3.1", "des": "The MurmurHash3 algorithm was created by Austin Appleby and placed in the public domain.", "code": "public final class MurmurHash3 extends Object {\n\tstatic final int fmix32(int h); // 32-bit mixing function.\n\tstatic final long fmix64(long k); // 64-bit mixing function.\n\tstatic final long getLongLittleEndian(byte[] buf, int offset); // Gets a long from a byte buffer in little endian byte order.\n\tstatic void murmurhash3_x64_128(byte[] key, int offset, int len, int seed, MurmurHash3.LongPair out); // Returns the MurmurHash3_x64_128 hash, placing the result in \"out\".\n\tstatic int murmurhash3_x86_32(byte[] data, int offset, int len, int seed); // Returns the MurmurHash3_x86_32 hash.\n\tstatic int murmurhash3_x86_32(CharSequence data, int offset, int len, int seed); // Returns the MurmurHash3_x86_32 hash of the UTF-8 bytes of the String without actually encoding the string to a temporary buffer.\n}"}
{"index": 9089, "repo": "hbase-server-3.0.0-alpha-4", "des": "Runs the CallRunners passed here via dispatch(CallRunner).", "code": "Class RpcExecutor {\n\tprotected int computeNumCallQueues(int handlerCount, float callQueuesHandlersFactor);\n\tabstract boolean dispatch(CallRunner callTask); // Add the request to the executor queue\n\tint getActiveHandlerCount();\n\tint getActiveReadHandlerCount();\n\tint getActiveScanHandlerCount();\n\tint getActiveWriteHandlerCount();\n\tstatic QueueBalancer getBalancer(String executorName, org.apache.hadoop.conf.Configuration conf, List<BlockingQueue<CallRunner>> queues);\n\tMap<String,Long> getCallQueueCountsSummary();\n\tMap<String,Long> getCallQueueSizeSummary();\n\tprotected RpcHandler getHandler(String name, double handlerFailureThreshhold, int handlerCount, BlockingQueue<CallRunner> q, AtomicInteger activeHandlerCount, AtomicInteger failedHandlerCount, Abortable abortable); // Override if providing alternate Handler implementation.\n\tString getName();\n\tlong getNumGeneralCallsDropped();\n\tlong getNumLifoModeSwitches();\n\tint getQueueLength(); // Returns the length of the pending queue\n\tprotected List<BlockingQueue<CallRunner>> getQueues(); // Returns the list of request queues\n\tint getReadQueueLength();\n\tint getScanQueueLength();\n\tint getWriteQueueLength();\n\tprotected void initializeQueues(int numQueues);\n\tstatic boolean isCodelQueueType(String callQueueType);\n\tstatic boolean isDeadlineQueueType(String callQueueType);\n\tstatic boolean isFifoQueueType(String callQueueType);\n\tstatic boolean isPluggableQueueType(String callQueueType);\n\tstatic boolean isPluggableQueueWithFastPath(String callQueueType, org.apache.hadoop.conf.Configuration conf);\n\tvoid onConfigurationChange(org.apache.hadoop.conf.Configuration conf);\n\tvoid resizeQueues(org.apache.hadoop.conf.Configuration conf); // Update current soft limit for executor's call queues\n\tvoid start(int port);\n\tprotected void startHandlers(int port);\n\tprotected void startHandlers(String nameSuffix, int numHandlers, List<BlockingQueue<CallRunner>> callQueues, int qindex, int qsize, int port, AtomicInteger activeHandlerCount); // Start up our handlers.\n\tvoid stop();\n}"}
{"index": 17356, "repo": "groovy-4.0.13", "des": "Class used as base for the creation of MetaClass implementations.", "code": "public static class MetaClassRegistry.MetaClassCreationHandle extends Object {\n\tfinal MetaClass create(Class theClass, MetaClassRegistry registry); // Creates a metaclass implementation for theClass.\n\tprotected MetaClass createNormalMetaClass(Class theClass, MetaClassRegistry registry);\n\tboolean isDisableCustomMetaClassLookup(); // Returns whether custom metaclasses are disabled.\n\tvoid setDisableCustomMetaClassLookup(boolean disableCustomMetaClassLookup); // Set flag saying to disable lookup of custom metaclasses It's enough to call this method only once in your application for handle which was set in to registry as every new handle will inherit this property\n}"}
{"index": 9434, "repo": "hadoop-yarn-api-3.3.6", "des": "A class that holds the error code for one entity.", "code": "Class TimelinePutResponse.TimelinePutError {\n\tString getEntityId(); // Get the entity Id\n\tString getEntityType(); // Get the entity type\n\tint getErrorCode(); // Get the error code\n\tvoid setEntityId(String entityId); // Set the entity Id\n\tvoid setEntityType(String entityType); // Set the entity type\n\tvoid setErrorCode(int errorCode); // Set the error code to the given error code\n}"}
{"index": 5196, "repo": "druid-processing-26.0.0", "des": "An Aggregator that delegates everything.", "code": "Class DelegatingAggregator {\n\tvoid aggregate(); // Performs aggregation.\n\tvoid close();\n\tObject get();\n\tdouble getDouble(); // The default implementation casts Aggregator.getFloat() to double.\n\tfloat getFloat();\n\tlong getLong();\n\tboolean isNull(); // returns true if aggregator's output type is primitive long/double/float and aggregated value is null, but when aggregated output type is Object, this method always returns false, and users are advised to check nullability for the object returned by Aggregator.get() method.\n}"}
{"index": 17817, "repo": "spring-web-6.0.11", "des": "ServletRequestBindingException subclass that indicates that a path variable expected in the method parameters of an @RequestMapping method is not present among the URI variables extracted from the URL.", "code": "public class MissingPathVariableException extends MissingRequestValueException {\n\tString getMessage();\n\tfinal org.springframework.core.MethodParameter getParameter(); // Return the method parameter bound to the path variable.\n\tHttpStatusCode getStatusCode(); // Return the HTTP status code to use for the response.\n\tfinal String getVariableName(); // Return the expected name of the path variable.\n}"}
{"index": 18044, "repo": "spring-ws-core-4.0.5", "des": "Implementation of MethodArgumentResolver that supports MessageContext arguments.", "code": "public class MessageContextMethodArgumentResolver extends Object implements MethodArgumentResolver {\n\tMessageContext resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter is supported by this resolver.\n}"}
{"index": 8088, "repo": "commons-compress-1.23.0", "des": "A SeekableByteChannel implementation that wraps a byte[].", "code": "Class SeekableInMemoryByteChannel {\n\tbyte[] array(); // Obtains the array backing this channel.\n\tvoid close();\n\tboolean isOpen();\n\tlong position(); // Returns this channel's position.\n\tSeekableByteChannel position(long newPosition);\n\tint read(ByteBuffer buf);\n\tlong size(); // Returns the current size of entity to which this channel is connected.\n\tSeekableByteChannel truncate(long newSize); // Truncates the entity, to which this channel is connected, to the given size.\n\tint write(ByteBuffer b);\n}"}
{"index": 16774, "repo": "spring-security-ldap-6.1.2", "des": "Operations to map a UserDetails object to and from a Spring LDAP DirContextOperations implementation.", "code": "public interface UserDetailsContextMapper {\n\torg.springframework.security.core.userdetails.UserDetails mapUserFromContext(org.springframework.ldap.core.DirContextOperations ctx, String username, Collection<? extends org.springframework.security.core.GrantedAuthority> authorities); // Creates a fully populated UserDetails object for use by the security framework.\n\tvoid mapUserToContext(org.springframework.security.core.userdetails.UserDetails user, org.springframework.ldap.core.DirContextAdapter ctx); // Reverse of the above operation.\n}"}
{"index": 685, "repo": "ignite-core-2.15.0", "des": "Decorator of WALIterator which allow filter record by WALPointer and WALRecord.", "code": "Class FilteredWalIterator {\n\tvoid close(); // Closes the iterator and frees all the resources held by the iterator.\n\tboolean hasNextX(); // This method is the same as Iterator.hasNext(), but allows for failure with exception.\n\tboolean isClosed(); // Checks if iterator has been closed.\n\tOptional<WALPointer> lastRead();\n\tIgniteBiTuple<WALPointer,WALRecord> nextX(); // This method is the same as Iterator.next(), but allows for failure with exception.\n\tvoid removeX(); // This method is the same as Iterator.remove(), but allows for failure with exception.\n}"}
{"index": 9181, "repo": "hbase-server-3.0.0-alpha-4", "des": "Example class for how to use the table archiving coordinated via zookeeper.", "code": "Class ZKTableArchiveClient {\n\tvoid disableHFileBackup(); // Disable hfile backups for all tables.\n\tvoid disableHFileBackup(byte[] table); // Disable hfile backups for the given table.\n\tvoid disableHFileBackup(String table); // Disable hfile backups for the given table.\n\tvoid enableHFileBackupAsync(byte[] table); // Turn on backups for all HFiles for the given table.\n\tstatic String getArchiveZNode(org.apache.hadoop.conf.Configuration conf, ZKWatcher zooKeeper);\n\tboolean getArchivingEnabled(byte[] table); // Determine if archiving is enabled (but not necessarily fully propagated) for a table\n\tboolean getArchivingEnabled(String table); // Determine if archiving is enabled (but not necessarily fully propagated) for a table\n}"}
{"index": 10391, "repo": "spring-core-6.0.11", "des": "AnnotationMetadata implementation that uses standard reflection to introspect a given Class.", "code": "public class StandardAnnotationMetadata extends StandardClassMetadata implements AnnotationMetadata {\n\tMultiValueMap<String,Object> getAllAnnotationAttributes(String annotationName, boolean classValuesAsString); // Retrieve all attributes of all annotations of the given type, if any (i.e.\n\tSet<MethodMetadata> getAnnotatedMethods(String annotationName); // Retrieve the method metadata for all methods that are annotated (or meta-annotated) with the given annotation type.\n\tMap<String,Object> getAnnotationAttributes(String annotationName, boolean classValuesAsString); // Retrieve the attributes of the annotation of the given type, if any (i.e.\n\tMergedAnnotations getAnnotations(); // Return annotation details based on the direct annotations of the underlying element.\n\tSet<String> getAnnotationTypes(); // Get the fully qualified class names of all annotation types that are present on the underlying class.\n\tSet<MethodMetadata> getDeclaredMethods(); // Retrieve the method metadata for all user-declared methods on the underlying class, preserving declaration order as far as possible.\n\tboolean hasAnnotatedMethods(String annotationName); // Determine whether the underlying class has any methods that are annotated (or meta-annotated) with the given annotation type.\n}"}
{"index": 9129, "repo": "hbase-server-3.0.0-alpha-4", "des": "An interface to describe a store data file.", "code": "Interface StoreFile {\n\tboolean excludeFromMinorCompaction(); // Returns True if this file should not be part of a minor compaction.\n\tOptionalLong getBulkLoadTimestamp(); // Return the timestamp at which this bulk load file was generated.\n\tCellComparator getComparator(); // Get the comparator for comparing two cells.\n\torg.apache.hadoop.fs.Path getEncodedPath(); // Returns Encoded Path if this StoreFile was made with a Stream.\n\tOptional<Cell> getFirstKey(); // Get the first key in this store file.\n\tOptional<Cell> getLastKey(); // Get the last key in this store file.\n\tOptionalLong getMaximumTimestamp(); // Get the max timestamp of all the cells in the store file.\n\tlong getMaxMemStoreTS(); // Get max of the MemstoreTS in the KV's in this store file.\n\tlong getMaxSequenceId(); // Returns This files maximum edit sequence id.\n\tOptionalLong getMinimumTimestamp(); // Get the min timestamp of all the cells in the store file.\n\tlong getModificationTimestamp(); // Get the modification time of this store file.\n\torg.apache.hadoop.fs.Path getPath(); // Returns Path or null if this StoreFile was made with a Stream.\n\torg.apache.hadoop.fs.Path getQualifiedPath(); // Returns Returns the qualified path of this StoreFile\n\tboolean isBulkLoadResult(); // Check if this storefile was created by bulk load.\n\tboolean isHFile(); // Returns True if this is HFile.\n\tboolean isMajorCompactionResult(); // Returns True if this file was made by a major compaction.\n\tboolean isReference(); // Returns True if this is a StoreFile Reference.\n\tString toStringDetailed(); // Returns a length description of this StoreFile, suitable for debug output\n}"}
{"index": 11919, "repo": "maven-core-4.0.0-alpha-7", "des": "Provides information about artifacts (identified by groupId:artifactId string key) and classpath elements exported by Maven core itself and loaded Maven core extensions.", "code": "public class CoreExports extends Object {\n\tSet<String> getExportedArtifacts(); // Returns artifacts exported by Maven core and core extensions.\n\tMap<String,ClassLoader> getExportedPackages(); // Returns packages exported by Maven core and core extensions.\n}"}
{"index": 7566, "repo": "cassandra-all-4.1.2", "des": "Container that carries compression parameters and chunks to decompress data from stream.", "code": "Class CompressionInfo {\n\tabstract CompressionMetadata.Chunk[] chunks(); // Returns the offset and length of the file chunks.\n\tboolean equals(java.lang.Object o);\n\tlong getTotalSize(); // Computes the size of the file to transfer.\n\tstatic CompressionInfo newInstance(CompressionMetadata.Chunk[] chunks, CompressionParams parameters); // Create a CompressionInfo instance which is fully initialized.\n\tabstract CompressionParams parameters(); // Returns the compression parameters.\n}"}
{"index": 7949, "repo": "commons-jcs3-core-3.1", "des": "This defines the behavior expected of a remote cache client.", "code": "Interface IRemoteCacheClient<K,V> {\n\tvoid fixCache(ICacheServiceNonLocal<?,?> remote); // Replaces the current remote cache service handle with the given handle.\n\tIRemoteCacheListener<K,V> getListener(); // This returns the listener associated with this remote cache.\n\tlong getListenerId(); // Gets the listenerId attribute of the RemoteCacheListener object.\n}"}
{"index": 5025, "repo": "commons-collections-3.2.2", "des": "Decorates a Map to obtain Set behaviour.", "code": "Class MapBackedSet {\n\tboolean add(Object obj);\n\tboolean addAll(Collection coll);\n\tvoid clear();\n\tboolean contains(Object obj);\n\tboolean containsAll(Collection coll);\n\tstatic Set decorate(Map map); // Factory method to create a set from a map.\n\tstatic Set decorate(Map map, Object dummyValue); // Factory method to create a set from a map.\n\tboolean equals(Object obj);\n\tboolean isEmpty();\n\tIterator iterator();\n\tboolean remove(Object obj);\n\tboolean removeAll(Collection coll);\n\tboolean retainAll(Collection coll);\n\tint size();\n\tObject[] toArray();\n\tObject[] toArray(Object[] array);\n}"}
{"index": 6759, "repo": "calcite-core-1.34.0", "des": "Abstract base class for SQL implementations of RelDataType.", "code": "Class AbstractSqlType {\n\tRelDataTypeFamily getFamily(); // Gets a canonical object representing the family of this type.\n\tRelDataTypePrecedenceList getPrecedenceList(); // Returns the precedence list for this type.\n\tSqlTypeName getSqlTypeName(); // Gets the SqlTypeName of this type.\n\tboolean isNullable(); // Queries whether this type allows null values.\n}"}
{"index": 4982, "repo": "commons-collections-3.2.2", "des": "A cursor for the sublist based on LinkedSubListIterator.", "code": "Class CursorableLinkedList.SubCursor {\n\tvoid add(Object obj); // Adds an object to the list.\n\tboolean hasNext();\n\tboolean hasPrevious(); // Checks to see if there is a previous element that can be iterated to.\n\tint nextIndex(); // Gets the index of the next element to be returned.\n\tvoid remove(); // Removes the item last returned by this iterator.\n}"}
{"index": 9932, "repo": "iceberg-api-1.3.0", "des": "Utils to project expressions on rows to expressions on partitions.", "code": "Class Projections {\n\tstatic Projections.ProjectionEvaluator inclusive(PartitionSpec spec); // Creates an inclusive ProjectionEvaluator for the spec, defaulting to case sensitive mode.\n\tstatic Projections.ProjectionEvaluator inclusive(PartitionSpec spec, boolean caseSensitive); // Creates an inclusive ProjectionEvaluator for the spec.\n\tstatic Projections.ProjectionEvaluator strict(PartitionSpec spec); // Creates a strict ProjectionEvaluator for the spec, defaulting to case sensitive mode.\n\tstatic Projections.ProjectionEvaluator strict(PartitionSpec spec, boolean caseSensitive); // Creates a strict ProjectionEvaluator for the spec.\n}"}
{"index": 15047, "repo": "spring-vault-core-3.0.4", "des": "Builder for GcpIamAuthenticationOptions.", "code": "public static class GcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder extends Object {\n\tGcpIamAuthenticationOptions build(); // Build a new GcpIamAuthenticationOptions instance.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder clock(Clock clock); // Configure the Clock used to calculate epoch seconds until the JWT expiration.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder credential(com.google.api.client.googleapis.auth.oauth2.GoogleCredential credential); // Configure static Google credentials, required to create a signed JWT.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder credentialSupplier(GcpCredentialSupplier credentialSupplier); // Configure a GcpCredentialSupplier, required to create a signed JWT.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder jwtValidity(Duration jwtValidity); // Configure the Duration for the JWT expiration.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder path(String path); // Configure the mount path, defaults to aws.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder projectId(String projectId); // Configure an explicit GCP project id to use in GCP IAM API calls.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder role(String role); // Configure the name of the role against which the login is being attempted.\n\tGcpIamAuthenticationOptions.GcpIamAuthenticationOptionsBuilder serviceAccountId(String serviceAccountId); // Configure an explicit service account id to use in GCP IAM calls.\n}"}
{"index": 9603, "repo": "commons-math3-3.6.1", "des": "Wrapper used to detect only increasing or decreasing events.", "code": "Class EventFilter {\n\tEventHandler.Action eventOccurred(double t, double[] y, boolean increasing); // Handle an event and choose what to do next.\n\tdouble g(double t, double[] y); // Compute the value of the switching function.\n\tvoid init(double t0, double[] y0, double t); // Initialize event handler at the start of an ODE integration.\n\tvoid resetState(double t, double[] y); // Reset the state prior to continue the integration.\n}"}
{"index": 1729, "repo": "samza-api-1.8.0", "des": "Groups incoming messages in the MessageStream into finite windows for processing.", "code": "Interface Window<M,K,WV> {\n\tWindow<M,K,WV> setAccumulationMode(AccumulationMode mode); // Specify how a Window should process its previously emitted WindowPanes.\n\tWindow<M,K,WV> setEarlyTrigger(Trigger<M> trigger); // Set the early triggers for this Window.\n\tWindow<M,K,WV> setLateTrigger(Trigger<M> trigger); // Set the late triggers for this Window.\n}"}
{"index": 2608, "repo": "mahout-core-14.1", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface ByteComparator {\n\tint compare(byte o1, byte o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 17838, "repo": "spring-web-6.0.11", "des": "ClientHttpRequestFactory implementation that uses OkHttp 3.x to create requests.", "code": "public class OkHttp3ClientHttpRequestFactory extends Object implements ClientHttpRequestFactory, org.springframework.beans.factory.DisposableBean {\n\tClientHttpRequest createRequest(URI uri, HttpMethod httpMethod); // Create a new ClientHttpRequest for the specified URI and HTTP method.\n\tvoid destroy();\n\tvoid setConnectTimeout(int connectTimeout); // Set the underlying connect timeout in milliseconds.\n\tvoid setReadTimeout(int readTimeout); // Set the underlying read timeout in milliseconds.\n\tvoid setWriteTimeout(int writeTimeout); // Set the underlying write timeout in milliseconds.\n}"}
{"index": 15651, "repo": "spring-security-core-6.1.2", "des": "This class implements the Attributes2GrantedAuthoritiesMapper interface by doing a one-to-one mapping from roles to Spring Security GrantedAuthorities.", "code": "public class SimpleAttributes2GrantedAuthoritiesMapper extends Object implements Attributes2GrantedAuthoritiesMapper, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Check whether all properties have been set to correct values.\n\tList<GrantedAuthority> getGrantedAuthorities(Collection<String> attributes); // Map the given list of string attributes one-to-one to Spring Security GrantedAuthorities.\n\tvoid setAddPrefixIfAlreadyExisting(boolean b);\n\tvoid setAttributePrefix(String string);\n\tvoid setConvertAttributeToLowerCase(boolean b);\n\tvoid setConvertAttributeToUpperCase(boolean b);\n}"}
{"index": 9835, "repo": "commons-math3-3.6.1", "des": "Covariance implementation that does not require input data to be stored in memory.", "code": "Class StorelessCovariance {\n\tvoid append(StorelessCovariance sc); // Appends sc to this, effectively aggregating the computations in sc with this.\n\tdouble getCovariance(int xIndex, int yIndex); // Get the covariance for an individual element of the covariance matrix.\n\tRealMatrix getCovarianceMatrix(); // Returns the covariance matrix\n\tdouble[][] getData(); // Return the covariance matrix as two-dimensional array.\n\tint getN(); // This Covariance method is not supported by a StorelessCovariance, since the number of bivariate observations does not have to be the same for different pairs of covariates - i.e., N as defined in Covariance.getN() is undefined.\n\tvoid increment(double[] data); // Increment the covariance matrix with one row of data.\n}"}
{"index": 3100, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "An abstract data cache that IO formats can use to retrieve and cache data.", "code": "Interface DataCache {\n\tAllocator getAllocator(); // Gets the allocator associated with this DataCache.\n\tAllocator.BufferObjectFactory getDataBufferFactory(); // Gets the buffer object factory associated with this DataCache, to use with allocator.\n\tDiskRangeList getFileData(Object fileKey, DiskRangeList range, long baseOffset, DataCache.DiskRangeListFactory factory, DataCache.BooleanRef gotAllData); // Gets file data for particular offsets.\n\tlong[] putFileData(Object fileKey, DiskRange[] ranges, MemoryBuffer[] data, long baseOffset, CacheTag tag); // Puts file data into cache, or gets older data in case of collisions.\n\tvoid releaseBuffer(MemoryBuffer buffer); // Releases the buffer returned by getFileData/provided to putFileData back to cache.\n\tvoid reuseBuffer(MemoryBuffer buffer); // Notifies the cache that the buffer returned from getFileData/provided to putFileData will be used by another consumer and therefore released multiple times (one more time per call).\n}"}
{"index": 14895, "repo": "spring-data-keyvalue-3.1.2", "des": "KeyValueEvent gets published for operations executed by eg.", "code": "public class KeyValueEvent<T> extends ApplicationEvent {\n\tstatic <T> KeyValueEvent.AfterDeleteEvent<T> afterDelete(Object id, String keyspace, Class<? extends T> type, T value); // Create new KeyValueEvent.AfterDeleteEvent.\n\tstatic <T> KeyValueEvent.AfterDropKeySpaceEvent<T> afterDropKeySpace(String keyspace, Class<? extends T> type); // Create new KeyValueEvent.AfterDropKeySpaceEvent.\n\tstatic <T> KeyValueEvent.AfterGetEvent<T> afterGet(Object id, String keyspace, Class<T> type, T value); // Create new KeyValueEvent.AfterGetEvent.\n\tstatic <T> KeyValueEvent.AfterInsertEvent<T> afterInsert(Object id, String keyspace, Class<? extends T> type, T value); // Create new KeyValueEvent.AfterInsertEvent.\n\tstatic <T> KeyValueEvent.AfterUpdateEvent<T> afterUpdate(Object id, String keyspace, Class<? extends T> type, T actualValue, Object previousValue); // Create new KeyValueEvent.AfterUpdateEvent.\n\tstatic <T> KeyValueEvent.BeforeDeleteEvent<T> beforeDelete(Object id, String keyspace, Class<? extends T> type); // Create new KeyValueEvent.BeforeDeleteEvent.\n\tstatic <T> KeyValueEvent.BeforeDropKeySpaceEvent<T> beforeDropKeySpace(String keyspace, Class<? extends T> type); // Create new KeyValueEvent.BeforeDropKeySpaceEvent.\n\tstatic <T> KeyValueEvent.BeforeGetEvent<T> beforeGet(Object id, String keyspace, Class<T> type); // Create new KeyValueEvent.BeforeGetEvent.\n\tstatic <T> KeyValueEvent.BeforeInsertEvent<T> beforeInsert(Object id, String keyspace, Class<? extends T> type, T value); // Create new KeyValueEvent.BeforeInsertEvent.\n\tstatic <T> KeyValueEvent.BeforeUpdateEvent<T> beforeUpdate(Object id, String keyspace, Class<? extends T> type, T value); // Create new KeyValueEvent.BeforeUpdateEvent.\n\tString getKeyspace();\n}"}
{"index": 15166, "repo": "spring-data-elasticsearch-5.1.2", "des": "Encapsulates the found data with additional information from the search.", "code": "public class SearchHit<T> extends Object {\n\tT getContent();\n\tExplanation getExplanation();\n\tList<String> getHighlightField(String field); // gets the highlight values for a field.\n\tMap<String,List<String>> getHighlightFields();\n\tString getId();\n\tString getIndex();\n\tMap<String,SearchHits<?>> getInnerHits();\n\tSearchHits<?> getInnerHits(String name); // returns the SearchHits for the inner hits with the given name.\n\tList<String> getMatchedQueries();\n\tNestedMetaData getNestedMetaData(); // If this is a nested inner hit, return the nested metadata information\n\tString getRouting();\n\tfloat getScore();\n\tList<Object> getSortValues();\n}"}
{"index": 4085, "repo": "camel-core-3.0.0-RC1", "des": "Scans for Java RouteBuilder instances in the context Registry.", "code": "Class ContextScanDefinition {\n\tprotected void clear();\n\tList<String> getExcludes();\n\tBoolean getIncludeNonSingletons();\n\tList<String> getIncludes();\n\tvoid setExcludes(List<String> excludes); // Exclude finding route builder from these java package names.\n\tvoid setIncludeNonSingletons(Boolean includeNonSingletons); // Whether to include non-singleton beans (prototypes) By default only singleton beans is included in the context scan\n\tvoid setIncludes(List<String> includes); // Include finding route builder from these java package names.\n}"}
{"index": 3582, "repo": "hive-serde-4.0.0-alpha-2", "des": "A DateObjectInspector inspects an Object representing a Date.", "code": "Interface DateObjectInspector {\n\tDate getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n\tDateWritableV2 getPrimitiveWritableObject(Object o); // Return the data in an instance of primitive writable Object.\n}"}
{"index": 12177, "repo": "jena-core-4.9.0", "des": "RDF nodes with a global identity given by a URI.", "code": "public class Node_URI extends Node_Concrete {\n\tboolean equals(Object other); // Nodes only equal other Nodes that have equal labels.\n\tString getLocalName(); // get the localname part of this node if it's a URI node, else die horribly\n\tString getNameSpace(); // get the namespace part of this node if it's a URI node, else die horribly\n\tString getURI(); // get the URI of this node if it has one, else die horribly\n\tboolean hasURI(String uri); // answer true iff this node is a URI node with the given URI\n\tboolean isURI(); // Answer true iff this node is a URI node [subclasses override]\n\tString toString(PrefixMapping pm, boolean quoting); // Answer a String representing the node, taking into account the PrefixMapping.\n\tObject visitWith(NodeVisitor v); // Visit a Node and dispatch on it to the appropriate method from the NodeVisitor v.\n}"}
{"index": 10292, "repo": "spring-core-6.0.11", "des": "A MethodVisitor that renumbers local variables in their order of appearance.", "code": "public class LocalVariablesSorter extends MethodVisitor {\n\tprotected int newLocal(int size);\n\tvoid visitIincInsn(int var, int increment); // Visits an IINC instruction.\n\tvoid visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index); // Visits a local variable declaration.\n\tvoid visitMaxs(int maxStack, int maxLocals); // Visits the maximum stack size and the maximum number of local variables of the method.\n\tvoid visitVarInsn(int opcode, int var); // Visits a local variable instruction.\n}"}
{"index": 4445, "repo": "beam-sdks-java-core-2.49.0", "des": "Provides information about the pane an element belongs to.", "code": "Class PaneInfo {\n\tstatic PaneInfo createPane(boolean isFirst, boolean isLast, PaneInfo.Timing timing);\n\tstatic PaneInfo createPane(boolean isFirst, boolean isLast, PaneInfo.Timing timing, long index, long onTimeIndex); // Factory method to create a PaneInfo with the specified parameters.\n\tstatic PaneInfo decodePane(byte encodedPane);\n\tboolean equals(@Nullable java.lang.Object obj);\n\tlong getIndex(); // The zero-based index of this trigger firing that produced this pane.\n\tlong getNonSpeculativeIndex(); // The zero-based index of this trigger firing among non-speculative panes.\n\tPaneInfo.Timing getTiming(); // Return the timing of this pane.\n\tboolean isFirst(); // Return true if this is the first pane produced for the associated window.\n\tboolean isLast(); // Return true if this is the last pane that will be produced in the associated window.\n\tboolean isUnknown(); // Return true if there is no timing information for the current PaneInfo.\n}"}
{"index": 16891, "repo": "spring-security-oauth2-core-6.1.2", "des": "An \"exchange\" of an OAuth 2.0 Authorization Request and Response for the authorization code grant type.", "code": "public final class OAuth2AuthorizationExchange extends Object {\n\tOAuth2AuthorizationRequest getAuthorizationRequest(); // Returns the Authorization Request.\n\tOAuth2AuthorizationResponse getAuthorizationResponse(); // Returns the Authorization Response.\n}"}
{"index": 4003, "repo": "zookeeper-3.8.2", "des": "This class implements parsing and handling of Kerberos principal names.", "code": "Class KerberosName {\n\tString getDefaultRealm(); // Get the configured default realm.\n\tString getHostName(); // Get the second component of the name.\n\tString getRealm(); // Get the realm of the name.\n\tString getServiceName(); // Get the first component of the name.\n\tString getShortName(); // Get the translation of the principal name into an operating system user name.\n\tstatic void main(String[] args);\n\tstatic void setConfiguration(); // Set the static configuration to get the rules.\n}"}
{"index": 5211, "repo": "druid-processing-26.0.0", "des": "ShardSpec for partitioning based on ranges of one or more dimensions.", "code": "Class DimensionRangeShardSpec {\n\t<T> PartitionChunk<T> createChunk(T obj);\n\tboolean equals(Object o);\n\tList<String> getDimensions();\n\tList<String> getDomainDimensions(); // Get dimensions who have possible range for the rows this shard contains.\n\tStringTuple getEndTuple();\n\tint getNumCorePartitions();\n\tint getPartitionNum(); // Returns the partition ID of this segment.\n\tStringTuple getStartTuple();\n\tString getType(); // Get the type name of this ShardSpec.\n\tboolean isNumCorePartitionsUnknown();\n\tboolean possibleInDomain(Map<String,com.google.common.collect.RangeSet<String>> domain); // Set[:i] is the cartesian product of Set[0],...,Set[i - 1] EffectiveDomain[:i] is defined as QueryDomain[:i] INTERSECTION SegmentRange[:i] i = 1 If EffectiveDomain[:i] == {start[:i]} || EffectiveDomain == {end[:i]}: if i == index.dimensions.size: ACCEPT segment else: REPEAT with i = i + 1 else if EffectiveDomain[:i] == {}: PRUNE segment else: ACCEPT segment Example: Index on (Hour, Minute, Second).\n}"}
{"index": 498, "repo": "ignite-core-2.15.0", "des": "The simplified version of Google Guava smooth rate limiter.", "code": "Class BasicRateLimiter {\n\tvoid acquire(long permits); // Acquires the given number of permits from this RateLimiter, blocking until the request can be granted.\n\tdouble getRate();\n\tboolean isUnlimited();\n\tvoid setRate(double permitsPerSecond); // Updates the stable rate.\n}"}
{"index": 3535, "repo": "mahout-mr-0.13.0", "des": "An implementation of the Pearson correlation.", "code": "Class PearsonCorrelationSimilarity {\n\tdouble[] itemSimilarities(long itemID1, long[] itemID2s); // A bulk-get version of ItemSimilarity.itemSimilarity(long, long).\n\tdouble itemSimilarity(long itemID1, long itemID2); // Returns the degree of similarity, of two items, based on the preferences that users have expressed for the items.\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n\tvoid setPreferenceInferrer(PreferenceInferrer inferrer); // Attaches a PreferenceInferrer to the UserSimilarity implementation.\n\tdouble userSimilarity(long userID1, long userID2); // Returns the degree of similarity, of two users, based on the their preferences.\n}"}
{"index": 10592, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @Newify AST transform.", "code": "public class NewifyASTTransformation extends ClassCodeExpressionTransformer implements ASTTransformation {\n\tstatic String extractName(String s);\n\tprotected SourceUnit getSourceUnit();\n\tExpression transform(Expression expr); // NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 4198, "repo": "jackson-core-2.15.2", "des": "This class is used to determine the encoding of byte stream that is to contain JSON content.", "code": "Class ByteSourceJsonBootstrapper {\n\tJsonParser constructParser(int parserFeatures, ObjectCodec codec, ByteQuadsCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols, int factoryFeatures);\n\tReader constructReader();\n\tJsonEncoding detectEncoding(); // Method that should be called after constructing an instace.\n\tprotected boolean ensureLoaded(int minimum);\n\tstatic MatchStrength hasJSONFormat(InputAccessor acc); // Current implementation is not as thorough as other functionality (ByteSourceJsonBootstrapper); supports UTF-8, for example.\n\tstatic int skipUTF8BOM(DataInput input); // Helper method that may be called to see if given DataInput has BOM marker, and if so, to skip it.\n}"}
{"index": 6950, "repo": "calcite-core-1.34.0", "des": "Sub-class of Delta not targeted at any particular engine or calling convention.", "code": "Class LogicalDelta {\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tstatic LogicalDelta create(RelNode input); // Creates a LogicalDelta.\n}"}
{"index": 15254, "repo": "spring-boot-3.1.1", "des": "Strategy interface that can be used with ConfigurableServletWebServerFactory implementations in order to supply custom Cookie.SameSite values for specific cookies.", "code": "@FunctionalInterface public interface CookieSameSiteSupplier {\n\tCookie.SameSite getSameSite(jakarta.servlet.http.Cookie cookie); // Get the Cookie.SameSite values that should be used for the given Cookie.\n\tstatic CookieSameSiteSupplier of(Cookie.SameSite sameSite); // Return a new CookieSameSiteSupplier that always returns the given Cookie.SameSite value.\n\tstatic CookieSameSiteSupplier ofLax(); // Return a new CookieSameSiteSupplier that always returns Cookie.SameSite.LAX.\n\tstatic CookieSameSiteSupplier ofNone(); // Return a new CookieSameSiteSupplier that always returns Cookie.SameSite.NONE.\n\tstatic CookieSameSiteSupplier ofStrict(); // Return a new CookieSameSiteSupplier that always returns Cookie.SameSite.STRICT.\n\tdefault CookieSameSiteSupplier when(Predicate<jakarta.servlet.http.Cookie> predicate); // Limit this supplier so that it's only called if the predicate accepts the Cookie.\n\tdefault CookieSameSiteSupplier whenHasName(String name); // Limit this supplier so that it's only called if the Cookie has the given name.\n\tdefault CookieSameSiteSupplier whenHasName(Supplier<String> nameSupplier); // Limit this supplier so that it's only called if the Cookie has the given name.\n\tdefault CookieSameSiteSupplier whenHasNameMatching(String regex); // Limit this supplier so that it's only called if the Cookie name matches the given regex.\n\tdefault CookieSameSiteSupplier whenHasNameMatching(Pattern pattern); // Limit this supplier so that it's only called if the Cookie name matches the given Pattern.\n}"}
{"index": 6368, "repo": "spring-data-solr-4.3.15", "des": "SchemaOperations implementation based on SolrTemplate.", "code": "Class DefaultSchemaOperations {\n\tvoid addField(SchemaDefinition.SchemaField field); // Add given SchemaDefinition.SchemaField.\n\tString getSchemaName(); // Get the current schema name.\n\tDouble getSchemaVersion(); // Get the current schema version.\n\tSchemaDefinition readSchema(); // Read back the SchemaDefinition from server.\n\tvoid removeField(String name); // Remove the field with given name.\n}"}
{"index": 12679, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $toBool that converts a value to boolean.", "code": "public static class ConvertOperators.ToBool extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\tstatic ConvertOperators.ToBool toBoolean(Object value); // Creates new ConvertOperators.ToBool using the given value as input.\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 17436, "repo": "spring-security-config-6.1.2", "des": "A base class for registering RequestMatcher's.", "code": "public abstract class AbstractConfigAttributeRequestMatcherRegistry<C> extends AbstractRequestMatcherRegistry<C> {\n\tprotected final C chainRequestMatchers(List<org.springframework.security.web.util.matcher.RequestMatcher> requestMatchers); // Marks the RequestMatcher's as unmapped and then calls chainRequestMatchersInternal(List).\n\tprotected abstract C chainRequestMatchersInternal(List<org.springframework.security.web.util.matcher.RequestMatcher> requestMatchers); // Subclasses should implement this method for returning the object that is chained to the creation of the RequestMatcher instances.\n}"}
{"index": 5680, "repo": "freemarker-2.3.32", "des": "A class that will wrap an arbitrary object into TemplateHashModel interface allowing calls to arbitrary property getters and invocation of accessible methods on the object from a template using the object.", "code": "Class BeanModel {\n\tTemplateModel get(java.lang.String key); // Uses Beans introspection to locate a property or method with name matching the key name.\n\tjava.lang.Object getAdaptedObject(java.lang.Class<?> hint); // Returns the same as getWrappedObject(); to ensure that, this method will be final starting from 2.4.\n\tTemplateModel getAPI(); // Returns the model that exposes the (Java) API of the value.\n\tjava.lang.Object getWrappedObject(); // Retrieves the original object wrapped by this model.\n\tprotected boolean hasPlainGetMethod(); // Whether the model has a plain get(String) or get(Object) method\n\tprotected TemplateModel invokeGenericGet(java.util.Map classInfo, java.lang.Class<?> clazz, java.lang.String key);\n\tboolean isEmpty(); // Tells whether the model is empty.\n\tTemplateCollectionModel keys();\n\tprotected java.util.Set keySet(); // Helper method to support TemplateHashModelEx.\n\tint size();\n\tprotected java.lang.Object unwrap(TemplateModel model);\n\tTemplateCollectionModel values();\n\tprotected TemplateModel wrap(java.lang.Object obj);\n}"}
{"index": 9187, "repo": "fontbox-3.0.0-beta1", "des": "This class represents a parser for a CFF font.", "code": "Class CFFParser {\n\tList<CFFFont> parse(byte[] bytes, CFFParser.ByteSource source); // Parse CFF font using byte array, also passing in a byte source for future use.\n\tList<CFFFont> parse(org.apache.pdfbox.io.RandomAccessRead randomAccessRead); // Parse CFF font using a RandomAccessRead as input.\n}"}
{"index": 4870, "repo": "hadoop-common-3.3.4", "des": "Utility methods for both key and credential provider APIs.", "code": "Class ProviderUtils {\n\tstatic Configuration excludeIncompatibleCredentialProviders(Configuration config, Class<? extends FileSystem> fileSystemClass); // There are certain integrations of the credential provider API in which a recursive dependency between the provider and the hadoop filesystem abstraction causes a problem.\n\tstatic char[] locatePassword(String envWithPass, String fileWithPass); // The password is either found in the environment or in a file.\n\tstatic URI nestURIForLocalJavaKeyStoreProvider(URI localFile); // Mangle given local java keystore file URI to allow use as a LocalJavaKeyStoreProvider.\n\tstatic String noPasswordError(String envKey, String fileKey);\n\tstatic String noPasswordWarning(String envKey, String fileKey);\n\tstatic Path unnestUri(URI nestedUri); // Convert a nested URI to decode the underlying path.\n}"}
{"index": 10081, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Defines table column headers used by Table.", "code": "Class TableHeader {\n\tint getMaxWidth();\n\tString getName();\n\tint getWidth();\n\tvoid setMaxWidth(int maxWidth); // Defaults to -1 indicating to ignore the property.\n\tvoid setName(String name);\n\tvoid setWidth(int width);\n\tvoid updateWidth(int width); // Updated the width for this particular column, but only if the value of the passed-in width is higher than the value of the pre-existing width.\n}"}
{"index": 1475, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a named action in a PDF document.", "code": "Class PDActionNamed {\n\tString getN(); // This will get the name of the action to be performed.\n\tvoid setN(String name); // This will set the name of the action to be performed.\n}"}
{"index": 5051, "repo": "commons-collections-3.2.2", "des": "Decorates another Buffer to validate that additions match a specified predicate.", "code": "Class PredicatedBuffer {\n\tstatic Buffer decorate(Buffer buffer, Predicate predicate); // Factory method to create a predicated (validating) buffer.\n\tObject get(); // Gets the next object from the buffer without removing it.\n\tprotected Buffer getBuffer(); // Gets the buffer being decorated.\n\tObject remove(); // Gets and removes the next object from the buffer.\n}"}
{"index": 15064, "repo": "spring-vault-core-3.0.4", "des": "PCF implementation of ClientAuthentication.", "code": "public class PcfAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\tstatic AuthenticationSteps createAuthenticationSteps(PcfAuthenticationOptions options); // Creates a AuthenticationSteps for pcf authentication given PcfAuthenticationOptions.\n\tAuthenticationSteps getAuthenticationSteps(); // Get the AuthenticationSteps describing an authentication flow.\n\tVaultToken login(); // Return a VaultToken.\n}"}
{"index": 10686, "repo": "spring-integration-kafka-6.1.2", "des": "A ConcurrentMessageListenerContainer configuration KafkaInboundGatewaySpec extension.", "code": "public static class KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R> extends KafkaInboundGatewaySpec<K,V,R,KafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R>> {\n\tKafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R> configureListenerContainer(Consumer<KafkaMessageListenerContainerSpec<K,V>> configurer); // Configure a listener container by invoking the Consumer callback, with a KafkaMessageListenerContainerSpec argument.\n\tKafkaInboundGatewaySpec.KafkaInboundGatewayListenerContainerSpec<K,V,R> configureTemplate(Consumer<KafkaTemplateSpec<K,R>> configurer); // Configure a template by invoking the Consumer callback, with a KafkaTemplateSpec argument.\n\tMap<Object,String> getComponentsToRegister();\n}"}
{"index": 10118, "repo": "spring-hateoas-2.1.2", "des": "EntityLinks implementation that delegates to the EntityLinks instances registered in the PluginRegistry given on instance creation.", "code": "public class DelegatingEntityLinks extends Object implements EntityLinks {\n\tLinkBuilder linkFor(Class<?> type); // Returns a LinkBuilder able to create links to the controller managing the given entity type.\n\tLinkBuilder linkFor(Class<?> type, Object... parameters); // Returns a LinkBuilder able to create links to the controller managing the given entity type, unfolding the given parameters into the URI template the backing controller is mapped to.\n\tLinkBuilder linkForItemResource(Class<?> type, Object id); // Returns a LinkBuilder able to create links to the controller managing the given entity type and id.\n\tLink linkToCollectionResource(Class<?> type); // Creates a Link pointing to the collection resource of the given type.\n\tLink linkToItemResource(Class<?> type, Object id); // Creates a Link pointing to item resource backing the given entity type and id.\n\tboolean supports(Class<?> delimiter);\n}"}
{"index": 3142, "repo": "solr-dataimporthandler-8.11.2", "des": "A DataSource which reads from local files The file is read with the default platform encoding.", "code": "Class FileDataSource {\n\tvoid close(); // Cleans up resources of this DataSource after use.\n\tReader getData(String query); // Returns a reader for the given file.\n\tvoid init(Context context, Properties initProps); // Initializes the DataSource with the Context and initialization properties.\n\tprotected Reader openStream(File file); // Open a Reader for the given file name\n}"}
{"index": 9266, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Base interface for network tag mapping manager.", "code": "Interface NetworkTagMappingManager {\n\tString getNetworkTagHexID(Container container); // Get networkTagHexID for the given container.\n\tvoid initialize(org.apache.hadoop.conf.Configuration conf); // Initialize the networkTagMapping manager.\n}"}
{"index": 14264, "repo": "wicket-core-10.0.0-M1", "des": "Triggers a form submit and controls its processing", "code": "public interface IFormSubmitter {\n\tboolean getDefaultFormProcessing(); // Returns whether form should be processed the default way.\n\tForm<?> getForm(); // Returns the form this component submits.\n\tvoid onAfterSubmit(); // Override this method to provide special submit handling in a multi-button form.\n\tvoid onError(); // Method that is invoked when form processing fails; for example, when there are validation errors.\n\tvoid onSubmit(); // Override this method to provide special submit handling in a multi-button form.\n}"}
{"index": 17728, "repo": "spring-web-6.0.11", "des": "Convenience methods to retrieve Spring's root WebApplicationContext for a given JSF FacesContext.", "code": "public abstract class FacesContextUtils extends Object {\n\tstatic WebApplicationContext getRequiredWebApplicationContext(FacesContext fc); // Find the root WebApplicationContext for this web app, typically loaded via ContextLoaderListener.\n\tstatic Object getSessionMutex(FacesContext fc); // Return the best available mutex for the given session: that is, an object to synchronize on for the given session.\n\tstatic WebApplicationContext getWebApplicationContext(FacesContext fc); // Find the root WebApplicationContext for this web app, typically loaded via ContextLoaderListener.\n}"}
{"index": 10198, "repo": "spring-core-6.0.11", "des": "Extended interface for asynchronous TaskExecutor implementations, offering support for Callable.", "code": "public interface AsyncTaskExecutor extends TaskExecutor {\n\tvoid execute(Runnable task, long startTimeout); // Deprecated. as of 5.3.16 since the common executors do not support start timeouts\n\tFuture<?> submit(Runnable task); // Submit a Runnable task for execution, receiving a Future representing that task.\n\t<T> Future<T> submit(Callable<T> task); // Submit a Callable task for execution, receiving a Future representing that task.\n\tdefault CompletableFuture<Void> submitCompletable(Runnable task); // Submit a Runnable task for execution, receiving a CompletableFuture representing that task.\n\tdefault <T> CompletableFuture<T> submitCompletable(Callable<T> task); // Submit a Callable task for execution, receiving a CompletableFuture representing that task.\n}"}
{"index": 3810, "repo": "hbase-client-3.0.0-alpha-4", "des": "Metrics information on the HBase cluster.", "code": "Interface ClusterMetrics {\n\tdefault double getAverageLoad(); // Returns the average cluster load\n\tList<ServerName> getBackupMasterNames(); // Returns the names of backup masters\n\tBoolean getBalancerOn();\n\tString getClusterId();\n\tList<ServerName> getDeadServerNames(); // Returns the names of region servers on the dead list\n\tList<ServerName> getDecommissionedServerNames(); // Returns the names of region servers on the decommissioned list\n\tString getHBaseVersion(); // Returns the HBase version string as reported by the HMaster\n\tdefault long getLastMajorCompactionTimestamp(byte[] regionName);\n\tdefault long getLastMajorCompactionTimestamp(TableName table);\n\tMap<ServerName,ServerMetrics> getLiveServerMetrics(); // Returns the names of region servers on the live list\n\tList<String> getMasterCoprocessorNames();\n\tint getMasterInfoPort();\n\tServerName getMasterName(); // Returns detailed information about the current master ServerName.\n\tList<ServerTask> getMasterTasks(); // Provide the list of master tasks\n\tdefault int getRegionCount(); // Returns the number of regions deployed on the cluster\n\tList<RegionState> getRegionStatesInTransition();\n\tdefault long getRequestCount(); // Returns the number of requests since last report\n\tList<ServerName> getServersName();\n\tMap<TableName,RegionStatesCount> getTableRegionStatesCount(); // Provide region states count for given table.\n\tList<ServerName> getUnknownServerNames(); // Returns the names of region servers on the unknown list\n}"}
{"index": 11908, "repo": "spring-kafka-3.0.9", "des": "A configuration container to represent a topic name, partition number and, optionally, an offset for it.", "code": "public class TopicPartitionOffset extends Object {\n\tboolean equals(Object o);\n\tLong getOffset();\n\tint getPartition();\n\tTopicPartitionOffset.SeekPosition getPosition();\n\tString getTopic();\n\torg.apache.kafka.common.TopicPartition getTopicPartition();\n\tboolean isRelativeToCurrent();\n\tvoid setOffset(Long offset); // Set the offset.\n\tvoid setRelativeToCurrent(boolean relativeToCurrent); // Set whether the offset is relative to the current position.\n}"}
{"index": 11421, "repo": "spring-context-6.0.11", "des": "Subclass of ShadowingClassLoader that overrides attempts to locate certain files.", "code": "public class ResourceOverridingShadowingClassLoader extends ShadowingClassLoader {\n\tvoid copyOverrides(ResourceOverridingShadowingClassLoader other); // Copy all overrides from the given ClassLoader.\n\tURL getResource(String requestedPath);\n\tInputStream getResourceAsStream(String requestedPath);\n\tEnumeration<URL> getResources(String requestedPath);\n\tvoid override(String oldPath, String newPath); // Return the resource (if any) at the new path on an attempt to locate a resource at the old path.\n\tvoid suppress(String oldPath); // Ensure that a resource with the given path is not found.\n}"}
{"index": 11564, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an OAuth2AuthorizedClientProvider for the jwt-bearer grant.", "code": "public final class JwtBearerOAuth2AuthorizedClientProvider extends Object implements OAuth2AuthorizedClientProvider {\n\tOAuth2AuthorizedClient authorize(OAuth2AuthorizationContext context); // Attempt to authorize (or re-authorize) the client in the provided context.\n\tvoid setAccessTokenResponseClient(OAuth2AccessTokenResponseClient<JwtBearerGrantRequest> accessTokenResponseClient); // Sets the client used when requesting an access token credential at the Token Endpoint for the jwt-bearer grant.\n\tvoid setClock(Clock clock); // Sets the Clock used in Instant.now(Clock) when checking the access token expiry.\n\tvoid setClockSkew(Duration clockSkew); // Sets the maximum acceptable clock skew, which is used when checking the access token expiry.\n\tvoid setJwtAssertionResolver(Function<OAuth2AuthorizationContext,org.springframework.security.oauth2.jwt.Jwt> jwtAssertionResolver); // Sets the resolver used for resolving the Jwt assertion.\n}"}
{"index": 16813, "repo": "spring-expression-6.0.11", "des": "Captures the possible configuration settings for a compiler that can be used when evaluating expressions.", "code": "public enum SpelCompilerMode extends Enum<SpelCompilerMode> {\n\tstatic SpelCompilerMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SpelCompilerMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 567, "repo": "ignite-core-2.15.0", "des": "Notification of CdcConsumer about cache creation/change events.", "code": "Interface CdcCacheEvent {\n\tint cacheId();\n\tCacheConfiguration<?,?> configuration(); // Note, CacheConfiguration.getQueryEntities() value not changed on table schema change.\n\tCollection<QueryEntity> queryEntities(); // Returns current state of configured QueryEntity.\n}"}
{"index": 15450, "repo": "pulsar-client-api-3.0.0", "des": "The provider to provide the service url.", "code": "@Public @Stable public interface ServiceUrlProvider extends AutoCloseable {\n\tdefault void close(); // Close the resource that the provider allocated.\n\tString getServiceUrl(); // Get the current service URL the Pulsar client should connect to.\n\tvoid initialize(PulsarClient client); // Initialize the service url provider with Pulsar client instance.\n}"}
{"index": 4151, "repo": "camel-core-3.0.0-RC1", "des": "To use Camel message body or header with a tokenizer in Camel expressions or predicates.", "code": "Class TokenizerExpression {\n\torg.apache.camel.Expression createExpression(org.apache.camel.CamelContext camelContext);\n\torg.apache.camel.Predicate createPredicate(org.apache.camel.CamelContext camelContext);\n\tString getEndToken();\n\tString getGroup();\n\tString getGroupDelimiter();\n\tString getHeaderName();\n\tBoolean getIncludeTokens();\n\tString getInheritNamespaceTagName();\n\tString getLanguage();\n\tBoolean getRegex();\n\tBoolean getSkipFirst();\n\tString getToken();\n\tBoolean getXml();\n\tvoid setEndToken(String endToken); // The end token to use as tokenizer if using start/end token pairs.\n\tvoid setGroup(String group); // To group N parts together, for example to split big files into chunks of 1000 lines.\n\tvoid setGroupDelimiter(String groupDelimiter); // Sets the delimiter to use when grouping.\n\tvoid setHeaderName(String headerName); // Name of header to tokenize instead of using the message body.\n\tvoid setIncludeTokens(Boolean includeTokens); // Whether to include the tokens in the parts when using pairs The default value is false\n\tvoid setInheritNamespaceTagName(String inheritNamespaceTagName); // To inherit namespaces from a root/parent tag name when using XML You can use simple language as the tag name to support dynamic names.\n\tvoid setRegex(boolean regex); // If the token is a regular expression pattern.\n\tvoid setSkipFirst(Boolean skipFirst); // To skip the very first element\n\tvoid setToken(String token); // The (start) token to use as tokenizer, for example you can use the new line token.\n\tvoid setXml(Boolean xml); // Whether the input is XML messages.\n}"}
{"index": 6049, "repo": "jackson-databind-2.15.2", "des": "Type serializer that preferably embeds type information as an \"external\" type property; embedded in enclosing JSON object.", "code": "Class AsExternalTypeSerializer {\n\tprotected void _writeArrayPrefix(Object value, JsonGenerator g);\n\tprotected void _writeArraySuffix(Object value, JsonGenerator g, String typeId);\n\tprotected void _writeObjectPrefix(Object value, JsonGenerator g);\n\tprotected void _writeObjectSuffix(Object value, JsonGenerator g, String typeId);\n\tprotected void _writeScalarPrefix(Object value, JsonGenerator g);\n\tprotected void _writeScalarSuffix(Object value, JsonGenerator g, String typeId);\n\tAsExternalTypeSerializer forProperty(BeanProperty prop); // Method called to create contextual version, to be used for values of given property.\n\tString getPropertyName(); // Name of property that contains type information, if property-based inclusion is used.\n\tJsonTypeInfo.As getTypeInclusion(); // Accessor for type information inclusion method that serializer uses; indicates how type information is embedded in resulting JSON.\n}"}
{"index": 7476, "repo": "nifi-client-dto-1.22.0", "des": "A request to drop the contents of a connection.", "code": "Class DropRequestDTO {\n\tString getCurrent();\n\tInteger getCurrentCount();\n\tLong getCurrentSize();\n\tString getDropped();\n\tInteger getDroppedCount();\n\tLong getDroppedSize();\n\tString getFailureReason();\n\tString getId(); // The id for this drop request.\n\tDate getLastUpdated();\n\tString getOriginal();\n\tInteger getOriginalCount();\n\tLong getOriginalSize();\n\tInteger getPercentCompleted();\n\tString getState();\n\tDate getSubmissionTime();\n\tString getUri(); // The uri for linking to this drop request in this NiFi.\n\tBoolean isFinished();\n\tvoid setCurrent(String current);\n\tvoid setCurrentCount(Integer currentCount);\n\tvoid setCurrentSize(Long currentSize);\n\tvoid setDropped(String dropped);\n\tvoid setDroppedCount(Integer droppedCount);\n\tvoid setDroppedSize(Long droppedSize);\n\tvoid setFailureReason(String failureReason);\n\tvoid setFinished(Boolean finished);\n\tvoid setId(String id);\n\tvoid setLastUpdated(Date lastUpdated);\n\tvoid setOriginal(String original);\n\tvoid setOriginalCount(Integer originalCount);\n\tvoid setOriginalSize(Long originalSize);\n\tvoid setPercentCompleted(Integer percentCompleted);\n\tvoid setState(String state);\n\tvoid setSubmissionTime(Date submissionTime);\n\tvoid setUri(String uri);\n}"}
{"index": 10246, "repo": "spring-core-6.0.11", "des": "The default policy used by AbstractClassGenerator.", "code": "public class DefaultNamingPolicy extends Object implements NamingPolicy {\n\tboolean equals(Object o); // The NamingPolicy in use does not currently, but may in the future, affect the caching of classes generated by AbstractClassGenerator, so this is a reminder that you should correctly implement equals and hashCode to avoid generating too many classes.\n\tString getClassName(String prefix, String source, Object key, Predicate names); // Choose a name for a generated class.\n\tprotected String getTag(); // Returns a string which is incorporated into every generated class name.\n}"}
{"index": 3550, "repo": "mahout-mr-0.13.0", "des": "An Ordered List of Strings which can be used in a Hadoop Map/Reduce Job.", "code": "Class StringTuple {\n\tboolean add(String entry); // add an entry to the end of the list\n\tint compareTo(StringTuple otherTuple);\n\tboolean equals(Object obj);\n\tList<String> getEntries(); // Fetch the list of entries from the tuple\n\tint length(); // Returns the length of the tuple\n\tvoid readFields(DataInput in);\n\tString replaceAt(int index, String newString); // Replaces the string at the given index with the given newString\n\tString stringAt(int index); // Fetches the string at the given location\n\tvoid write(DataOutput out);\n}"}
{"index": 15757, "repo": "camel-api-4.0.0-RC1", "des": "An endpoint implements the Message Endpoint pattern and represents an endpoint that can send and receive message exchanges", "code": "public interface Endpoint extends IsSingleton, Service {\n\tvoid configureExchange(Exchange exchange); // Configures a newly created Exchange.\n\tvoid configureProperties(Map<String,Object> options); // Configure properties on this endpoint.\n\tAsyncProducer createAsyncProducer(); // Creates a new producer which is used send messages into the endpoint Important: Do not do any initialization in the constructor of the Producer.\n\tConsumer createConsumer(Processor processor); // Creates a new Event Driven Consumer which consumes messages from the endpoint using the given processor Important: Do not do any initialization in the constructor of the Consumer.\n\tExchange createExchange(); // Create a new exchange for communicating with this endpoint.\n\tExchange createExchange(ExchangePattern pattern); // Create a new exchange for communicating with this endpoint with the specified ExchangePattern such as whether its going to be an ExchangePattern.InOnly or ExchangePattern.InOut exchange\n\tPollingConsumer createPollingConsumer(); // Creates a new Polling Consumer so that the caller can poll message exchanges from the consumer using PollingConsumer.receive(), PollingConsumer.receiveNoWait() or PollingConsumer.receive(long) whenever it is ready to do so rather than using the Event Based Consumer returned by createConsumer(Processor) Important: Do not do any initialization in the constructor of the PollingConsumer.\n\tProducer createProducer(); // Creates a new producer which is used send messages into the endpoint.\n\tCamelContext getCamelContext(); // Returns the context which created the endpoint\n\tdefault String getEndpointBaseUri(); // Returns the string representation of the base endpoint URI (without query parameters).\n\tString getEndpointKey(); // Returns a string key of this endpoint.\n\tString getEndpointUri(); // Returns the string representation of the endpoint URI\n\tExchangePattern getExchangePattern(); // Returns the default exchange pattern to use when creating an exchange.\n\tboolean isLenientProperties(); // Should all properties be known or does the endpoint allow unknown options?\n\tdefault boolean isSingletonProducer(); // Whether this endpoint creates singleton producers\n\tvoid setCamelContext(CamelContext context); // Sets the camel context.\n}"}
{"index": 7703, "repo": "cassandra-all-4.1.2", "des": "A Compressor which doesn't actually compress any data.", "code": "Class NoopCompressor {\n\tvoid compress(java.nio.ByteBuffer input, java.nio.ByteBuffer output); // Compression for ByteBuffers.\n\tstatic NoopCompressor create(java.util.Map<java.lang.String,java.lang.String> ignored);\n\tint initialCompressedBufferLength(int chunkLength);\n\tBufferType preferredBufferType(); // Returns the preferred (most efficient) buffer type for this compressor.\n\tjava.util.Set<java.lang.String> supportedOptions();\n\tboolean supports(BufferType bufferType); // Checks if the given buffer would be supported by the compressor.\n\tint uncompress(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset);\n\tvoid uncompress(java.nio.ByteBuffer input, java.nio.ByteBuffer output); // Decompression for DirectByteBuffers.\n}"}
{"index": 6812, "repo": "calcite-core-1.34.0", "des": "Type checking strategy which verifies that types have the required attributes to be used as arguments to comparison operators.", "code": "Class ComparableOperandTypeChecker {\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks the types of all operands to an operator call.\n\tboolean checkOperandTypes(SqlOperatorBinding operatorBinding, SqlCallBinding callBinding); // Similar functionality to checkOperandTypes(SqlCallBinding, boolean), but not part of the interface, and cannot throw an error.\n\tSqlOperandTypeChecker.Consistency getConsistency(); // Returns the strategy for making the arguments have consistency types.\n\tprotected String getTypeName(); // Override to change the behavior of SameOperandTypeChecker.getAllowedSignatures(SqlOperator, String).\n}"}
{"index": 2398, "repo": "commons-geometry-euclidean-1.0", "des": "A simple implementation of the TriangleMesh interface.", "code": "Class SimpleTriangleMesh {\n\tStream<PlaneConvexSubset> boundaryStream();\n\tstatic SimpleTriangleMesh.Builder builder(Precision.DoubleEquivalence precision); // Return a builder for creating new triangle mesh objects.\n\tIterable<TriangleMesh.Face> faces(); // Get an iterable containing all faces in the mesh.\n\tstatic SimpleTriangleMesh from(BoundarySource3D boundarySrc, Precision.DoubleEquivalence precision); // Construct a new mesh instance containing all triangles from the given boundary source.\n\tstatic SimpleTriangleMesh from(Collection<Vector3D> vertices, Collection<int[]> faces, Precision.DoubleEquivalence precision); // Construct a new triangle mesh from the given vertices and face indices.\n\tstatic SimpleTriangleMesh from(Vector3D[] vertices, int[][] faces, Precision.DoubleEquivalence precision); // Construct a new triangle mesh from the given vertices and face indices.\n\tBounds3D getBounds(); // Get a Bounds3D object defining the axis-aligned box containing all vertices in the boundaries for this instance.\n\tTriangleMesh.Face getFace(int index); // Get a face from the mesh by its index.\n\tint getFaceCount(); // Get the number of faces in the mesh.\n\tList<TriangleMesh.Face> getFaces(); // Get a list containing all faces in the mesh.\n\tPrecision.DoubleEquivalence getPrecision(); // Get the precision context for the mesh.\n\tint getVertexCount(); // Get the number of vertices in the mesh.\n\tList<Vector3D> getVertices(); // Get a list containing all vertices in the mesh.\n\tSimpleTriangleMesh toTriangleMesh(Precision.DoubleEquivalence meshPrecision); // Return this instance if the given precision context is equal to the current precision context.\n\tSimpleTriangleMesh transform(Transform<Vector3D> transform); // Return a new, transformed mesh by applying the given transform to all vertices.\n\tStream<Triangle3D> triangleStream(); // Return the boundaries of this instance as a stream of Triangle3D instances.\n\tIterable<Vector3D> vertices(); // Get an iterable containing the vertices in the mesh.\n}"}
{"index": 13762, "repo": "spring-webmvc-6.0.11", "des": "A logical disjunction (' || ') request condition to match a request's 'Accept' header to a list of media type expressions.", "code": "public final class ProducesRequestCondition extends AbstractRequestCondition<ProducesRequestCondition> {\n\tstatic void clearMediaTypesAttribute(HttpServletRequest request); // Use this to clear MEDIA_TYPES_ATTRIBUTE that contains the parsed, requested media types.\n\tProducesRequestCondition combine(ProducesRequestCondition other); // Returns the \"other\" instance if it has any expressions; returns \"this\" instance otherwise.\n\tint compareTo(ProducesRequestCondition other, HttpServletRequest request); // Compares this and another \"produces\" condition as follows: Sort 'Accept' header media types by quality value via MimeTypeUtils.sortBySpecificity(List) and iterate the list.\n\tprotected List<org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.ProduceMediaTypeExpression> getContent(); // Return the discrete items a request condition is composed of.\n\tSet<MediaTypeExpression> getExpressions(); // Return the contained \"produces\" expressions.\n\tProducesRequestCondition getMatchingCondition(HttpServletRequest request); // Checks if any of the contained media type expressions match the given request 'Content-Type' header and returns an instance that is guaranteed to contain matching expressions only.\n\tSet<org.springframework.http.MediaType> getProducibleMediaTypes(); // Return the contained producible media types excluding negated expressions.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n\tboolean isEmpty(); // Whether the condition has any media type expressions.\n}"}
{"index": 15086, "repo": "spring-vault-core-3.0.4", "des": "Enumeration to specify the type of the transit key.", "code": "public enum TransitKeyType extends Enum<TransitKeyType> {\n\tString getValue();\n\tstatic TransitKeyType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic TransitKeyType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 11587, "repo": "spring-security-oauth2-client-6.1.2", "des": "Represents a request the OAuth2UserService uses when initiating a request to the UserInfo Endpoint.", "code": "public class OAuth2UserRequest extends Object {\n\torg.springframework.security.oauth2.core.OAuth2AccessToken getAccessToken(); // Returns the access token.\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters that may be used in the request.\n\tClientRegistration getClientRegistration(); // Returns the client registration.\n}"}
{"index": 14566, "repo": "spring-security-web-6.1.2", "des": "Uses a regular expression to decide whether a supplied the URL of a supplied HttpServletRequest.", "code": "public final class RegexRequestMatcher extends Object implements RequestMatcher {\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request); // Performs the match of the request URL (servletPath + pathInfo + queryString ) against the compiled pattern.\n\tstatic RegexRequestMatcher regexMatcher(String pattern); // Creates a case-sensitive Pattern instance to match against the request.\n\tstatic RegexRequestMatcher regexMatcher(org.springframework.http.HttpMethod method); // Creates an instance that matches to all requests with the same HttpMethod.\n\tstatic RegexRequestMatcher regexMatcher(org.springframework.http.HttpMethod method, String pattern); // Creates a case-sensitive Pattern instance to match against the request.\n}"}
{"index": 307, "repo": "phoenix-core-5.1.3", "des": "Query plan that does where, order-by limit at client side, which is for derived-table queries that cannot be flattened by SubselectRewriter.", "code": "Class ClientProcessingPlan {\n\tStatementContext getContext();\n\tInteger getLimit();\n\tInteger getOffset();\n\tOrderByCompiler.OrderBy getOrderBy(); // Return the compiled Order By clause of SelectStatement.\n\tRowProjector getProjector(); // Returns projector used to formulate resultSet row\n\tFilterableStatement getStatement();\n\tTableRef getTableRef();\n\tExpression getWhere();\n}"}
{"index": 14627, "repo": "spring-cloud-stream-4.0.0", "des": "Base class for bindable proxy factories.", "code": "public class AbstractBindableProxyFactory extends Object implements Bindable {\n\tCollection<Binding<Object>> createAndBindInputs(BindingService bindingService); // Binds all the inputs associated with this instance.\n\tCollection<Binding<Object>> createAndBindOutputs(BindingService bindingService); // Binds all the outputs associated with this instance.\n\tprotected BindingTargetFactory getBindingTargetFactory(Class<?> bindingTargetType);\n\tSet<String> getInputs(); // Enumerates all the input binding names.\n\tSet<String> getOutputs(); // Enumerates all the output binding names.\n\tprotected void populateBindingTargetFactories(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid unbindInputs(BindingService bindingService); // Unbinds all the inputs associated with this instance.\n\tvoid unbindOutputs(BindingService bindingService); // Unbinds all the outputs associated with this instance.\n}"}
{"index": 1184, "repo": "ignite-core-2.15.0", "des": "Distributed process to restore cache group from the snapshot.", "code": "Class SnapshotRestoreProcess {\n\tSet<UUID> cacheStartRequiredAliveNodes(IgniteUuid reqId);\n\tIgniteFuture<Boolean> cancel(UUID reqId, String snpName); // Cancel the currently running local restore procedure.\n\tprotected void cleanup(); // Cleanup temporary directories if any exists.\n\tvoid interrupt(IgniteCheckedException reason); // Interrupt the currently running local restore procedure.\n\tboolean isRestoring(CacheConfiguration<?,?> ccfg);\n\tvoid onNodeLeft(UUID leftNodeId); // Node left callback.\n\tprotected void registerMetrics(); // Register local metrics.\n\t@Nullable String restoringSnapshotName(); // Get the name of the snapshot currently being restored\n\tIgniteFutureImpl<Void> start(String snpName, @Nullable String snpPath, @Nullable Collection<String> cacheGrpNames, int incIdx, boolean check); // Start cache group restore operation.\n}"}
{"index": 12097, "repo": "jena-core-4.9.0", "des": "Implementation for the ontology abstraction representing ontology class descriptions.", "code": "public class IndividualImpl extends OntResourceImpl implements Individual {\n\tvoid addOntClass(Resource cls); // Add the given ontology class as one of the classes to which this individual belongs.\n\tOntClass getOntClass(); // Answer an ontology class to which this individual belongs.\n\tOntClass getOntClass(boolean direct); // Answer an ontology class to which this individual belongs.\n\tboolean hasOntClass(String uri); // Answer true if this individual is a member of the class denoted by the given URI.\n\tboolean hasOntClass(Resource ontClass); // Answer true if this individual is a member of the class denoted by the given ontology class resource.\n\tboolean hasOntClass(Resource ontClass, boolean direct); // Answer true if this individual is a member of the class denoted by the given class resource.\n\t<T extends OntClass>ExtendedIterator<T> listOntClasses(boolean direct); // Answer an iterator over the ontology classes to which this individual belongs.\n\tvoid removeOntClass(Resource ontClass); // Attempt to remove this individual as a member of the given ontology class.\n\tvoid setOntClass(Resource cls); // Set the ontology class for this individual, replacing any existing class membership.\n}"}
{"index": 18334, "repo": "opencms-core-15.0", "des": "Class for the import from server option.", "code": "Class CmsDbImportServer {\n\tprotected com.vaadin.ui.Button getCancelButton(); // Gets a button for a cancel function.\n\tcom.vaadin.v7.ui.ComboBox getImportSelect(); // Gets a combo box for selecting the file on server.\n\tprotected com.vaadin.ui.Button getOkButton(); // Gets a button for a ok function.\n\tprotected com.vaadin.v7.ui.ComboBox getProjectSelector(); // Gets a combobox used for the site selector.\n\tprotected java.lang.String getReportPath(); // Get the path (state) for the app to show the report for the import thread.\n\tprotected com.vaadin.v7.ui.ComboBox getSiteSelector(); // Gets a combobox used for the site selector.\n\tA_CmsReportThread getThread(); // Gets the thread which gets started by clicking the ok button.\n\tprotected java.lang.String getTitle(); // Gets the title of the report to show.\n}"}
{"index": 7781, "repo": "cassandra-all-4.1.2", "des": "A wrapper for possibly sharing portions of a single, BufferPools.", "code": "Class ShareableBytes {\n\tjava.nio.ByteBuffer get();\n\tboolean hasRemaining();\n\tvoid release();\n\tint remaining();\n\tShareableBytes share(); // Ensure this ShareableBytes will use atomic operations for updating its count from now on.\n\tShareableBytes sliceAndConsume(int length); // Create a slice over the next length bytes, consuming them from our buffer, and incrementing the owner count\n\tstatic ShareableBytes wrap(java.nio.ByteBuffer buffer);\n}"}
{"index": 14344, "repo": "wicket-core-10.0.0-M1", "des": "Form component that allows the user to select multiple files to upload via a single <input type=\"file\"/> field.", "code": "public class MultiFileUploadField extends FormComponentPanel<Collection<FileUpload>> {\n\tprotected Collection<FileUpload> convertValue(String[] value); // Subclasses should overwrite this if the conversion is not done through the type field and the IConverter.\n\tprotected boolean forceCloseStreamsOnDetach(); // The FileUploadField will close any input streams you have opened in its FileUpload by default.\n\tString[] getInputAsArray(); // Gets the request parameters for this component as strings.\n\tboolean isMultiPart();\n\tprotected void onBeforeRender(); // Called on all visible components before any component is rendered.\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tprotected void onDetach(); // Sets the temporary converted input value to null.\n\tvoid renderHead(IHeaderResponse response); // Render to the web response whatever the component wants to contribute to the head section.\n\tvoid updateModel(); // See FormComponent.updateCollectionModel(FormComponent) for details on how the model is updated.\n}"}
{"index": 8280, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents the Envelope element in a SOAP message.", "code": "Interface SoapEnvelope {\n\tSoapBody getBody(); // Returns the SoapBody.\n\tSoapHeader getHeader(); // Returns the SoapHeader.\n}"}
{"index": 9895, "repo": "iceberg-api-1.3.0", "des": "A task that returns data as rows instead of where to read data.", "code": "Interface DataTask {\n\tdefault DataTask asDataTask(); // Returns this cast to DataTask if it is one\n\tdefault boolean isDataTask(); // Returns true if this is a DataTask, false otherwise.\n\tCloseableIterable<StructLike> rows(); // Returns an iterable of StructLike rows.\n}"}
{"index": 4276, "repo": "beam-sdks-java-core-2.49.0", "des": "A Block represents a block of records that can be read.", "code": "Class BlockBasedSource.Block<T> {\n\tabstract T getCurrentRecord(); // Returns the current record.\n\tabstract double getFractionOfBlockConsumed(); // Returns the fraction of the block already consumed, if possible, as a value in [0, 1].\n\tabstract boolean readNextRecord(); // Reads the next record from the block and returns true iff one exists.\n}"}
{"index": 4425, "repo": "beam-sdks-java-core-2.49.0", "des": "The name of a metric consists of a getNamespace() and a getName().", "code": "Class MetricName {\n\tabstract java.lang.String getName(); // The name of this metric.\n\tabstract java.lang.String getNamespace(); // The namespace associated with this metric.\n\tstatic MetricName named(java.lang.Class<?> namespace, java.lang.String name);\n\tstatic MetricName named(java.lang.String namespace, java.lang.String name);\n}"}
{"index": 3082, "repo": "tink-1.10.0", "des": "An interface for streaming authenticated encryption with associated data.", "code": "Interface StreamingAead {\n\tReadableByteChannel newDecryptingChannel(ReadableByteChannel ciphertextSource, byte[] associatedData);\n\tInputStream newDecryptingStream(InputStream ciphertextSource, byte[] associatedData); // Returns a wrapper around ciphertextSource, such that any read-operation via the wrapper results in AEAD-decryption of the underlying ciphertext, using associatedData as associated authenticated data.\n\tWritableByteChannel newEncryptingChannel(WritableByteChannel ciphertextDestination, byte[] associatedData); // Returns a WritableByteChannel for plaintext.\n\tOutputStream newEncryptingStream(OutputStream ciphertextDestination, byte[] associatedData); // Returns a wrapper around ciphertextDestination, such that any write-operation via the wrapper results in AEAD-encryption of the written data, using associatedData as associated authenticated data.\n\tSeekableByteChannel newSeekableDecryptingChannel(SeekableByteChannel ciphertextSource, byte[] associatedData); // Returns a SeekableByteChannel that allows to access the plaintext.\n}"}
{"index": 15814, "repo": "camel-api-4.0.0-RC1", "des": "A resolver that can find classes based on package scanning.", "code": "public interface PackageScanClassResolver extends StaticService {\n\tvoid addClassLoader(ClassLoader classLoader); // Adds the class loader to the existing loaders\n\tvoid addFilter(PackageScanFilter filter); // Add a filter that will be applied to all scan operations\n\tvoid clearCache(); // Clears and frees the internal cache.\n\tSet<Class<?>> findAnnotated(Class<? extends Annotation> annotation, String... packageNames); // Attempts to discover classes that are annotated with to the annotation.\n\tSet<Class<?>> findAnnotated(Set<Class<? extends Annotation>> annotations, String... packageNames); // Attempts to discover classes that are annotated with to the annotation.\n\tSet<Class<?>> findByFilter(PackageScanFilter filter, String... packageNames); // Attempts to discover classes filter by the provided filter\n\tSet<Class<?>> findImplementations(Class<?> parent, String... packageNames); // Attempts to discover classes that are assignable to the type provided (exclude abstract classes).\n\tSet<ClassLoader> getClassLoaders(); // Gets the ClassLoader instances that should be used when scanning for classes.\n\tvoid removeFilter(PackageScanFilter filter); // Removes the filter\n\tvoid setAcceptableSchemes(String schemes); // To specify a set of accepted schemas to use for loading resources as URL connections (besides http and https schemas)\n}"}
{"index": 10149, "repo": "spring-hateoas-2.1.2", "des": "Value object to represent MethodParameters to allow to easily find the ones with a given annotation.", "code": "public class MethodParameters extends Object {\n\tOptional<MethodParameter> getParameter(String name); // Returns the MethodParameter with the given name or null if none found.\n\tList<MethodParameter> getParameters(); // Returns all MethodParameters.\n\tList<MethodParameter> getParametersOfType(Class<?> type); // Returns all parameters of the given type.\n\tList<MethodParameter> getParametersWith(Class<? extends Annotation> annotation); // Returns all MethodParameters annotated with the given annotation type.\n\tstatic MethodParameters of(Method method); // Returns the MethodParameters for the given Method.\n}"}
{"index": 5485, "repo": "druid-processing-26.0.0", "des": "An object that can aggregate metrics into a ByteBuffer, from vectorized column selectors.", "code": "Interface VectorAggregator {\n\tvoid aggregate(ByteBuffer buf, int numRows, int[] positions, int[] rows, int positionOffset); // Aggregate a list of rows (\"rows\") into a list of aggregation slots (\"positions\").\n\tvoid aggregate(ByteBuffer buf, int position, int startRow, int endRow); // Aggregate a range of rows into a single aggregation slot.\n\tvoid close(); // Release any resources used by the aggregator.\n\tObject get(ByteBuffer buf, int position); // Same as BufferAggregator.get(java.nio.ByteBuffer, int).\n\tvoid init(ByteBuffer buf, int position); // Same as BufferAggregator.init(java.nio.ByteBuffer, int).\n\tdefault void relocate(int oldPosition, int newPosition, ByteBuffer oldBuffer, ByteBuffer newBuffer); // Same as BufferAggregator.relocate(int, int, java.nio.ByteBuffer, java.nio.ByteBuffer).\n}"}
{"index": 3020, "repo": "tink-1.10.0", "des": "This key manager generates new JwtRsaSsaPkcs1PrivateKey keys and produces new instances of JwtPublicKeySign.", "code": "Class JwtRsaSsaPkcs1SignKeyManager {\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tJwtRsaSsaPkcs1PublicKey getPublicKey(JwtRsaSsaPkcs1PrivateKey privKeyProto); // Creates a public key from the given private key.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<JwtRsaSsaPkcs1KeyFormat,JwtRsaSsaPkcs1PrivateKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tJwtRsaSsaPkcs1PrivateKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void registerPair(boolean newKeyAllowed); // Registers the RsaSsapkcs1SignKeyManager and the RsaSsapkcs1VerifyKeyManager with the registry, so that the the RsaSsapkcs1-Keys can be used with Tink.\n\tvoid validateKey(JwtRsaSsaPkcs1PrivateKey privKey); // Checks if the given keyProto is a valid key.\n}"}
{"index": 16089, "repo": "shiro-web-2.0.0-alpha-2", "des": "Configuration for Shiro's root level servlet filter.", "code": "public class ShiroFilterConfiguration extends Object {\n\tboolean isFilterOncePerRequest(); // Returns true if the filter should only execute once per request.\n\tboolean isStaticSecurityManagerEnabled(); // Returns true if the constructed SecurityManager associated with the filter should be bound to static memory (via SecurityUtils.setSecurityManager), false otherwise.\n\tvoid setFilterOncePerRequest(boolean filterOncePerRequest); // Sets whether the filter executes once per request or for every invocation of the filter.\n\tShiroFilterConfiguration setStaticSecurityManagerEnabled(boolean staticSecurityManagerEnabled); // Sets if the constructed SecurityManager associated with the filter should be bound to static memory (via SecurityUtils.setSecurityManager).\n}"}
{"index": 5804, "repo": "iceberg-core-1.3.0", "des": "A factory for creating data and delete writers.", "code": "Interface FileWriterFactory<T> {\n\tDataWriter<T> newDataWriter(org.apache.iceberg.encryption.EncryptedOutputFile file, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Creates a new DataWriter.\n\tEqualityDeleteWriter<T> newEqualityDeleteWriter(org.apache.iceberg.encryption.EncryptedOutputFile file, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Creates a new EqualityDeleteWriter.\n\tPositionDeleteWriter<T> newPositionDeleteWriter(org.apache.iceberg.encryption.EncryptedOutputFile file, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Creates a new PositionDeleteWriter.\n}"}
{"index": 9257, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Interface providing information about the health of a service.", "code": "Interface HealthReporter {\n\tString getHealthReport(); // Returns output from health check.\n\tlong getLastHealthReportTime(); // Returns time stamp when node health check was last run.\n\tboolean isHealthy(); // Gets whether the node is healthy or not.\n}"}
{"index": 7993, "repo": "commons-jcs3-core-3.1", "des": "These attributes are used to configure the remote cache server.", "code": "Class RemoteCacheServerAttributes {\n\tString getConfigFileName(); // Gets the ConfigFileName attribute of the IRemoteCacheAttributes object\n\tlong getRegistryKeepAliveDelayMillis();\n\tint getServicePort(); // Gets the localPort attribute of the RemoteCacheAttributes object\n\tboolean isAllowClusterGet(); // Should gets from non-cluster clients be allowed to get from other remote auxiliaries.\n\tboolean isUseRegistryKeepAlive(); // Should we try to keep the registry alive\n\tvoid setAllowClusterGet(boolean r); // Should we try to get from other cluster servers if we don't find the items locally.\n\tvoid setConfigFileName(String s); // Sets the ConfigFileName attribute of the IRemoteCacheAttributes object\n\tvoid setRegistryKeepAliveDelayMillis(long registryKeepAliveDelayMillis);\n\tvoid setServicePort(int p); // Sets the localPort attribute of the RemoteCacheAttributes object\n\tvoid setUseRegistryKeepAlive(boolean useRegistryKeepAlive); // Should we try to keep the registry alive\n}"}
{"index": 12331, "repo": "jena-core-4.9.0", "des": "Representation of an XSD datatype based on the Xerces-2 XSD implementation.", "code": "public class XSDDatatype extends BaseDatatype {\n\tObject extendedTypeDefinition(); // Returns the Xerces datatype representation for this type, this is an XSSimpleType, in fact an XSSimpleTypeDecl.\n\tClass<?> getJavaClass(); // If this datatype is used as the cannonical representation for a particular java datatype then return that java type, otherwise returns null.\n\tboolean isBaseTypeCompatible(LiteralLabel lit); // Test if the given typed value is in the right partition of the XSD type space.\n\tboolean isEqual(LiteralLabel value1, LiteralLabel value2); // Compares two instances of values of the given datatype.\n\tboolean isValidLiteral(LiteralLabel lit); // Test whether the given LiteralLabel is a valid instance of this datatype.\n\tstatic void loadXSDSimpleTypes(TypeMapper tm); // Add all of the XSD pre-defined simple types to the given type mapper registry.\n\tstatic void main(String[] args);\n\tObject parse(String lexicalForm); // Parse a lexical form of this datatype to a value\n\tObject parseValidated(String lexical); // Parse a validated lexical form.\n\tstatic String trimPlus(String str); // Helper function to return the substring of a validated number string omitting any leading + sign.\n\tString unparse(Object value); // Convert a value of this datatype out to lexical form.\n}"}
{"index": 9721, "repo": "commons-math3-3.6.1", "des": "The multiple linear regression can be represented in matrix-notation.", "code": "Interface MultipleLinearRegression {\n\tdouble estimateRegressandVariance(); // Returns the variance of the regressand, ie Var(y).\n\tdouble[] estimateRegressionParameters(); // Estimates the regression parameters b.\n\tdouble[] estimateRegressionParametersStandardErrors(); // Returns the standard errors of the regression parameters.\n\tdouble[][] estimateRegressionParametersVariance(); // Estimates the variance of the regression parameters, ie Var(b).\n\tdouble[] estimateResiduals(); // Estimates the residuals, ie u = y - X*b.\n}"}
{"index": 6163, "repo": "jackson-databind-2.15.2", "des": "As a fallback, we may need to use this serializer for other types of Numbers: both custom types and \"big\" numbers like BigInteger and BigDecimal.", "code": "Class NumberSerializer {\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tstatic JsonSerializer<?> bigDecimalAsStringSerializer();\n\tJsonSerializer<?> createContextual(SerializerProvider prov, BeanProperty property); // Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property.\n\tvoid serialize(Number value, JsonGenerator g, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n}"}
{"index": 15939, "repo": "spring-rabbit-3.0.6", "des": "Creates the necessary MessageListenerContainer instances for the registered endpoints.", "code": "public class RabbitListenerEndpointRegistry extends Object implements org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent> {\n\tprotected MessageListenerContainer createListenerContainer(RabbitListenerEndpoint endpoint, RabbitListenerContainerFactory<?> factory); // Create and start a new MessageListenerContainer using the specified factory.\n\tvoid destroy();\n\tMessageListenerContainer getListenerContainer(String id); // Return the MessageListenerContainer with the specified id or null if no such container exists.\n\tSet<String> getListenerContainerIds(); // Return the ids of the managed MessageListenerContainer instance(s).\n\tCollection<MessageListenerContainer> getListenerContainers();\n\tint getPhase();\n\tboolean isAutoStartup();\n\tboolean isRunning();\n\tvoid onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent event);\n\tvoid registerListenerContainer(RabbitListenerEndpoint endpoint, RabbitListenerContainerFactory<?> factory); // Create a message listener container for the given RabbitListenerEndpoint.\n\tvoid registerListenerContainer(RabbitListenerEndpoint endpoint, RabbitListenerContainerFactory<?> factory, boolean startImmediately); // Create a message listener container for the given RabbitListenerEndpoint.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid start();\n\tvoid stop();\n\tvoid stop(Runnable callback);\n\tMessageListenerContainer unregisterListenerContainer(String id); // Remove a listener container from the registry.\n}"}
{"index": 12266, "repo": "jena-core-4.9.0", "des": "Setup of jena-iri package IRI Factory for parsing and for checking.", "code": "public class SetupJenaIRI extends Object {\n\tstatic IRIFactory iriCheckerFactory(); // An IRIFactory with more detailed warnings.\n\tstatic IRIFactory iriFactory(); // The IRI checker setup, focused on parsing and languages.\n}"}
{"index": 3861, "repo": "hbase-client-3.0.0-alpha-4", "des": "Slow/Large Log payload for hbase-client, to be used by Admin API get_slow_responses and get_large_responses.", "code": "Class OnlineLogRecord {\n\tboolean equals(Object o);\n\tlong getBlockBytesScanned(); // Return the amount of block bytes scanned to retrieve the response cells.\n\tString getCallDetails();\n\tString getClientAddress();\n\tString getMethodName();\n\tint getMultiGetsCount();\n\tint getMultiMutationsCount();\n\tint getMultiServiceCalls();\n\tString getParam();\n\tint getProcessingTime();\n\tint getQueueTime();\n\tString getRegionName();\n\tlong getResponseSize();\n\tOptional<Scan> getScan(); // If \"hbase.slowlog.scan.payload.enabled\" is enabled then this value may be present and should represent the Scan that produced the given OnlineLogRecord\n\tString getServerClass();\n\tlong getStartTime();\n\tString getUserName();\n\tString toJsonPrettyPrint(); // Based on response sent by server, provide pretty printed Json representation in string\n}"}
{"index": 5001, "repo": "commons-collections-3.2.2", "des": "Decorates another SortedMap to fix the size blocking add/remove.", "code": "Class FixedSizeSortedMap {\n\tvoid clear();\n\tstatic SortedMap decorate(SortedMap map); // Factory method to create a fixed size sorted map.\n\tSet entrySet();\n\tprotected SortedMap getSortedMap(); // Gets the map being decorated.\n\tSortedMap headMap(Object toKey);\n\tboolean isFull(); // Returns true if this map is full and no new elements can be added.\n\tSet keySet();\n\tint maxSize(); // Gets the maximum size of the map (the bound).\n\tObject put(Object key, Object value);\n\tvoid putAll(Map mapToCopy);\n\tObject remove(Object key);\n\tSortedMap subMap(Object fromKey, Object toKey);\n\tSortedMap tailMap(Object fromKey);\n\tCollection values();\n}"}
{"index": 11809, "repo": "spring-kafka-3.0.9", "des": "Listener for handling a batch of incoming Kafka messages; the list is created from the consumer records object returned by a poll.", "code": "@FunctionalInterface public interface BatchMessageListener<K,V> extends GenericMessageListener<List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>>> {\n\tdefault void onMessage(org.apache.kafka.clients.consumer.ConsumerRecords<K,V> records, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // Listener receives the original ConsumerRecords object instead of a list of ConsumerRecord.\n\tdefault boolean wantsPollResult(); // Return true if this listener wishes to receive the original ConsumerRecords object instead of a list of ConsumerRecord.\n}"}
{"index": 15200, "repo": "spring-boot-3.1.1", "des": "Event published by a SpringApplication when it fails to start.", "code": "public class ApplicationFailedEvent extends SpringApplicationEvent {\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext(); // Return the application context.\n\tThrowable getException(); // Return the exception that caused the failure.\n}"}
{"index": 16897, "repo": "spring-security-oauth2-core-6.1.2", "des": "A builder for OAuth2DeviceAuthorizationResponse.", "code": "public static final class OAuth2DeviceAuthorizationResponse.Builder extends Object {\n\tOAuth2DeviceAuthorizationResponse.Builder additionalParameters(Map<String,Object> additionalParameters); // Sets the additional parameters returned in the response.\n\tOAuth2DeviceAuthorizationResponse build(); // Builds a new OAuth2DeviceAuthorizationResponse.\n\tOAuth2DeviceAuthorizationResponse.Builder expiresIn(long expiresIn); // Sets the lifetime (in seconds) of the device code and user code.\n\tOAuth2DeviceAuthorizationResponse.Builder interval(long interval); // Sets the minimum amount of time (in seconds) that the client should wait between polling requests to the token endpoint.\n\tOAuth2DeviceAuthorizationResponse.Builder verificationUri(String verificationUri); // Sets the end-user verification URI.\n\tOAuth2DeviceAuthorizationResponse.Builder verificationUriComplete(String verificationUriComplete); // Sets the end-user verification URI that includes the user code.\n}"}
{"index": 1199, "repo": "ignite-core-2.15.0", "des": "Sql index representation for a SystemView.", "code": "Class SqlIndexView {\n\tint cacheGroupId(); // Returns cache group ID.\n\tString cacheGroupName(); // Returns Cache group name.\n\tint cacheId(); // Returns cache ID.\n\tString cacheName(); // Returns cache name.\n\tString columns(); // Returns all columns on which index is built.\n\tString indexName(); // Returns index name.\n\tString indexType(); // Returns index type.\n\tInteger inlineSize(); // Returns inline size in bytes.\n\tboolean isPk(); // Returns boolean value which indicates whether this index is for primary key or not.\n\tboolean isUnique(); // Returns boolean value which indicates whether this index is unique or not.\n\tString schemaName(); // Returns schema name.\n\tString tableName(); // Returns table name.\n}"}
{"index": 12805, "repo": "spring-data-mongodb-4.1.2", "des": "Simple Converter implementation to transform a MongoPersistentProperty into its field name.", "code": "public static enum MongoPersistentProperty.PropertyToFieldNameConverter extends Enum<MongoPersistentProperty.PropertyToFieldNameConverter> implements Converter<MongoPersistentProperty,String> {\n\tString convert(MongoPersistentProperty source);\n\tstatic MongoPersistentProperty.PropertyToFieldNameConverter valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic MongoPersistentProperty.PropertyToFieldNameConverter[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 209, "repo": "commons-collections4-4.4", "des": "Builder for creating predicated collections.", "code": "Class PredicatedCollection.Builder<E> {\n\tPredicatedCollection.Builder<E> add(E item); // Adds the item to the builder.\n\tPredicatedCollection.Builder<E> addAll(Collection<? extends E> items); // Adds all elements from the given collection to the builder.\n\tBag<E> createPredicatedBag(); // Create a new predicated bag filled with the accepted elements.\n\tBag<E> createPredicatedBag(Bag<E> bag); // Decorates the given bag with validating behavior using the predicate.\n\tList<E> createPredicatedList(); // Create a new predicated list filled with the accepted elements.\n\tList<E> createPredicatedList(List<E> list); // Decorates the given list with validating behavior using the predicate.\n\tMultiSet<E> createPredicatedMultiSet(); // Create a new predicated multiset filled with the accepted elements.\n\tMultiSet<E> createPredicatedMultiSet(MultiSet<E> multiset); // Decorates the given multiset with validating behavior using the predicate.\n\tQueue<E> createPredicatedQueue(); // Create a new predicated queue filled with the accepted elements.\n\tQueue<E> createPredicatedQueue(Queue<E> queue); // Decorates the given queue with validating behavior using the predicate.\n\tSet<E> createPredicatedSet(); // Create a new predicated set filled with the accepted elements.\n\tSet<E> createPredicatedSet(Set<E> set); // Decorates the given list with validating behavior using the predicate.\n\tCollection<E> rejectedElements(); // Returns an unmodifiable collection containing all rejected elements.\n}"}
{"index": 124, "repo": "commons-collections4-4.4", "des": "A cursor for the sublist based on LinkedSubListIterator.", "code": "Class CursorableLinkedList.SubCursor<E> {\n\tvoid add(E obj); // Adds an object to the list.\n\tboolean hasNext();\n\tboolean hasPrevious(); // Checks to see if there is a previous element that can be iterated to.\n\tint nextIndex(); // Gets the index of the next element to be returned.\n\tvoid remove(); // Removes the item last returned by this iterator.\n}"}
{"index": 617, "repo": "ignite-core-2.15.0", "des": "Convenience adapter for ComputeJob implementations.", "code": "Class ComputeJobContinuationAdapter {\n\tvoid callcc(); // Resumes job if it was held by ComputeJobContinuation.holdcc() method.\n\tboolean heldcc(); // Checks if job execution has been temporarily held (suspended).\n\t<T> T holdcc(); // Holds (suspends) a given job indefinitely until ComputeJobContinuation.callcc() is called.\n\t<T> T holdcc(long timeout); // Holds (suspends) a given job for specified timeout or until ComputeJobContinuation.callcc() is called.\n}"}
{"index": 11264, "repo": "spring-context-6.0.11", "des": "A factory that creates formatters to format values of fields annotated with a particular Annotation.", "code": "public interface AnnotationFormatterFactory<A extends Annotation> {\n\tSet<Class<?>> getFieldTypes(); // The types of fields that may be annotated with the <A> annotation.\n\tParser<?> getParser(A annotation, Class<?> fieldType); // Get the Parser to parse a submitted value for a field of fieldType annotated with annotation.\n\tPrinter<?> getPrinter(A annotation, Class<?> fieldType); // Get the Printer to print the value of a field of fieldType annotated with annotation.\n}"}
{"index": 10586, "repo": "groovy-all-4.0.13", "des": "Utility class for working with MethodNodes", "code": "public class MethodNodeUtils extends Object {\n\tstatic BlockStatement getCodeAsBlock(MethodNode mNode); // Gets the code for a method (or constructor) as a block.\n\tstatic String getPropertyName(MethodNode mNode); // For a method node potentially representing a property, returns the name of the property.\n\tstatic boolean isGetterCandidate(MethodNode mNode); // Determines if given method is a getter candidate.\n\tstatic String methodDescriptor(MethodNode mNode); // Return the method node's descriptor which includes its return type, name and parameter types without generics.\n\tstatic String methodDescriptor(MethodNode mNode, boolean pretty); // Return the method node's descriptor which includes its return type, name and parameter types without generics.\n\tstatic String methodDescriptorWithoutReturnType(MethodNode mNode); // Return the method node's descriptor including its name and parameter types without generics.\n}"}
{"index": 18001, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the EndpointMapping interface that uses the @Action annotation to map methods to a WS-Addressing Action header.", "code": "public class AnnotationActionEndpointMapping extends AbstractActionMethodEndpointMapping implements org.springframework.beans.factory.config.BeanPostProcessor {\n\tprotected URI getActionForMethod(Method method); // Returns the action value for the specified method.\n\tprotected URI getEndpointAddress(Object endpoint); // Returns the address property of the given MethodEndpoint, by looking for the Address annotation.\n\tprotected Class<? extends Annotation> getEndpointAnnotationType(); // Returns the 'endpoint' annotation type.\n\tprotected URI getFaultAction(Object endpoint, MessageAddressingProperties map); // Provides the WS-Addressing Action for response fault messages, given the endpoint, and request Message Addressing Properties.\n\tprotected URI getResponseAction(Object endpoint, MessageAddressingProperties map); // Provides the WS-Addressing Action for response messages, given the endpoint, and request Message Addressing Properties.\n\tfinal Object postProcessAfterInitialization(Object bean, String beanName);\n\tfinal Object postProcessBeforeInitialization(Object bean, String beanName);\n}"}
{"index": 1670, "repo": "samza-api-1.8.0", "des": "An immutable view of the KeyValueStore at a point-in-time.", "code": "Interface KeyValueSnapshot<K,V> {\n\tvoid close(); // Closes this snapshot releasing any associated resources.\n\tKeyValueIterator<K,V> iterator(); // Creates a new iterator for this snapshot.\n}"}
{"index": 5397, "repo": "druid-processing-26.0.0", "des": "Provides a batch of offsets, ostensibly as indexes into an array.", "code": "Interface ReadableVectorOffset {\n\tint[] getOffsets(); // If \"isContiguous\" is false, this method returns a batch of offsets.\n\tint getStartOffset(); // If \"isContiguous\" is true, this method returns the start offset of the range.\n\tboolean isContiguous(); // Checks if the current batch is a contiguous range or not.\n}"}
{"index": 3156, "repo": "commons-jexl3-3.3", "des": "Helper interface used when creating a set literal.", "code": "Interface JexlArithmetic.SetBuilder {\n\tvoid add(Object value); // Adds a literal to the set.\n\tObject create(); // Creates the actual \"set\" instance.\n}"}
{"index": 16661, "repo": "spring-beans-6.0.11", "des": "A simple holder for a given bean name plus bean instance.", "code": "public class NamedBeanHolder<T> extends Object implements NamedBean {\n\tT getBeanInstance(); // Return the corresponding bean instance.\n\tString getBeanName(); // Return the name of the bean.\n}"}
{"index": 5157, "repo": "druid-processing-26.0.0", "des": "Describes a key used for sorting or partitioning.", "code": "Class ClusterBy {\n\tComparator<RowKey> bucketComparator(); // Comparator that compares bucket keys for this instance.\n\tComparator<byte[]> byteKeyComparator(); // Comparator that compares byte arrays of keys for this instance using the given signature directly.\n\tboolean equals(Object o);\n\tint getBucketByCount(); // How many fields from getColumns() comprise the \"bucket key\".\n\tList<KeyColumn> getColumns(); // The columns that comprise this key, in order.\n\tboolean isEmpty(); // Whether this key is empty.\n\tComparator<RowKey> keyComparator(); // Comparator that compares keys for this instance using the given signature.\n\tRowKeyReader keyReader(ColumnInspector inspector); // Create a reader for keys for this instance.\n\tstatic ClusterBy none(); // Create an empty key.\n\tboolean sortable(); // Whether this key is sortable.\n}"}
{"index": 6694, "repo": "lucene-analyzers-common-8.11.2", "des": "Abstract parent class for analysis factories that create ConditionalTokenFilter instances.", "code": "Class ConditionalTokenFilterFactory {\n\tTokenStream create(TokenStream input); // Transform the specified input TokenStream\n\tprotected abstract ConditionalTokenFilter create(TokenStream input, Function<TokenStream,TokenStream> inner); // Modify the incoming TokenStream with a ConditionalTokenFilter\n\tprotected void doInform(ResourceLoader loader); // Initialises this component with the corresponding ResourceLoader\n\tvoid inform(ResourceLoader loader); // Initializes this component with the provided ResourceLoader (used for loading classes, files, etc).\n\tvoid setInnerFilters(List<TokenFilterFactory> innerFilters); // Set the inner filter factories to produce the TokenFilters that will be wrapped by the ConditionalTokenFilter\n}"}
{"index": 5916, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol buffer based implementation of SubClusterDeregisterRequest.", "code": "Class SubClusterDeregisterRequestPBImpl {\n\tboolean equals(Object other);\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.SubClusterDeregisterRequestProto getProto();\n\tSubClusterState getState(); // Get the SubClusterState of the subcluster.\n\tSubClusterId getSubClusterId(); // Get the SubClusterId representing the unique identifier of the subcluster.\n\tvoid setState(SubClusterState state); // Set the SubClusterState of the subcluster.\n\tvoid setSubClusterId(SubClusterId subClusterId); // Set the SubClusterId representing the unique identifier of the subcluster.\n}"}
{"index": 16455, "repo": "spring-batch-infrastructure-5.0.2", "des": "A builder for constructing a FixedLengthTokenizer", "code": "public static class FlatFileItemReaderBuilder.FixedLengthBuilder<T> extends Object {\n\tFlatFileItemReaderBuilder.FixedLengthBuilder<T> addColumns(Range range); // Add a column range to the existing list\n\tFlatFileItemReaderBuilder.FixedLengthBuilder<T> addColumns(Range range, int index); // Insert a column range to the existing list\n\tFixedLengthTokenizer build(); // Returns a FixedLengthTokenizer\n\tFlatFileItemReaderBuilder.FixedLengthBuilder<T> columns(Range... ranges); // The column ranges for each field\n\tFlatFileItemReaderBuilder.FixedLengthBuilder<T> fieldSetFactory(FieldSetFactory fieldSetFactory); // A factory for creating the resulting FieldSet.\n\tFlatFileItemReaderBuilder<T> names(String... names); // The names of the fields to be parsed from the file.\n\tFlatFileItemReaderBuilder.FixedLengthBuilder<T> strict(boolean strict); // Boolean indicating if the number of tokens in a line must match the number of fields (ranges) configured.\n}"}
{"index": 17912, "repo": "spring-web-6.0.11", "des": "BeanPostProcessor implementation that passes the ServletContext to beans that implement the ServletContextAware interface.", "code": "public class ServletContextAwareProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor {\n\tprotected ServletConfig getServletConfig(); // Returns the ServletConfig to be injected or null.\n\tprotected ServletContext getServletContext(); // Returns the ServletContext to be injected or null.\n\tObject postProcessAfterInitialization(Object bean, String beanName);\n\tObject postProcessBeforeInitialization(Object bean, String beanName);\n}"}
{"index": 16884, "repo": "spring-security-oauth2-core-6.1.2", "des": "The default implementation of an OidcUser.", "code": "public class DefaultOidcUser extends DefaultOAuth2User implements OidcUser {\n\tMap<String,Object> getClaims(); // Returns the claims about the user.\n\tOidcIdToken getIdToken(); // Returns the ID Token containing claims about the user.\n\tOidcUserInfo getUserInfo(); // Returns the UserInfo containing claims about the user.\n}"}
{"index": 10378, "repo": "spring-core-6.0.11", "des": "Simple implementation of the AliasRegistry interface.", "code": "public class SimpleAliasRegistry extends Object implements AliasRegistry {\n\tprotected boolean allowAliasOverriding(); // Determine whether alias overriding is allowed.\n\tString canonicalName(String name); // Determine the raw name, resolving aliases to canonical names.\n\tprotected void checkForAliasCircle(String name, String alias); // Check whether the given name points back to the given alias as an alias in the other direction already, catching a circular reference upfront and throwing a corresponding IllegalStateException.\n\tString[] getAliases(String name); // Return the aliases for the given name, if defined.\n\tboolean hasAlias(String name, String alias); // Determine whether the given name has the given alias registered.\n\tboolean isAlias(String name); // Determine whether the given name is defined as an alias (as opposed to the name of an actually registered component).\n\tvoid registerAlias(String name, String alias); // Given a name, register an alias for it.\n\tvoid removeAlias(String alias); // Remove the specified alias from this registry.\n\tvoid resolveAliases(StringValueResolver valueResolver); // Resolve all alias target names and aliases registered in this registry, applying the given StringValueResolver to them.\n}"}
{"index": 10775, "repo": "spring-boot-actuator-3.1.1", "des": "A custom HandlerMapping that makes web endpoints available over HTTP using Spring MVC.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.servlet.AbstractWebMvcEndpointHandlerMapping.AbstractWebMvcEndpointHandlerMappingRuntimeHints.class) public abstract class AbstractWebMvcEndpointHandlerMapping extends org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected org.springframework.web.method.HandlerMethod createHandlerMethod(Object handler, Method method);\n\tprotected void extendInterceptors(List<Object> interceptors);\n\tCollection<ExposableWebEndpoint> getEndpoints(); // Return the web endpoints being mapped.\n\tprotected abstract AbstractWebMvcEndpointHandlerMapping.LinksHandler getLinksHandler(); // Return the Handler providing actuator links at the root endpoint.\n\tprotected org.springframework.web.servlet.mvc.method.RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType);\n\tprotected boolean hasCorsConfigurationSource(Object handler);\n\tprotected org.springframework.web.cors.CorsConfiguration initCorsConfiguration(Object handler, Method method, org.springframework.web.servlet.mvc.method.RequestMappingInfo mapping);\n\tprotected void initHandlerMethods();\n\tprotected boolean isHandler(Class<?> beanType);\n\tprotected void registerMapping(ExposableWebEndpoint endpoint, WebOperationRequestPredicate predicate, WebOperation operation, String path);\n\tprotected AbstractWebMvcEndpointHandlerMapping.ServletWebOperation wrapServletWebOperation(ExposableWebEndpoint endpoint, WebOperation operation, AbstractWebMvcEndpointHandlerMapping.ServletWebOperation servletWebOperation); // Hook point that allows subclasses to wrap the AbstractWebMvcEndpointHandlerMapping.ServletWebOperation before it's called.\n}"}
{"index": 4721, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "Strategy for constructing different site URLs, such as the 'mobile' site URL.", "code": "Interface SiteUrlFactory {\n\tjava.lang.String createSiteUrl(javax.servlet.http.HttpServletRequest request); // Create a fully-qualified URL that can be used to redirect the user to this site.\n\tboolean isRequestForSite(javax.servlet.http.HttpServletRequest request); // Did the request originate from this site? Used to determine what site the user is currently viewing.\n}"}
{"index": 3055, "repo": "tink-1.10.0", "des": "A Tink Keyset can be converted into a set of PRFs using this primitive.", "code": "Class PrfSet {\n\tbyte[] computePrimary(byte[] input, int outputLength); // Convenience method to compute the primary PRF on a given input.\n\tabstract Map<Integer,Prf> getPrfs(); // A map of the PRFs represented by the keys in this keyset.\n\tabstract int getPrimaryId(); // Returns the primary ID of the keyset.\n}"}
{"index": 7461, "repo": "mahout-math-0.13.0", "des": "If f(0, 0) = 0 we can iterate through the nonzeros in either x or y.", "code": "Class VectorBinaryAssign.AssignIterateUnionRandomMergeUpdates {\n\tVector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tdouble estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tboolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 6250, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "A base MessagingGatewaySpec implementation for AmqpInboundGateway endpoint options.", "code": "Class AmqpBaseInboundGatewaySpec<S extends AmqpBaseInboundGatewaySpec<S>> {\n\tS defaultReplyTo(java.lang.String defaultReplyTo); // The defaultReplyTo address with the form (exchange)/(routingKey)\n\tS headerMapper(org.springframework.integration.amqp.support.AmqpHeaderMapper headerMapper); // Configure the gateway's AmqpHeaderMapper; defaults to DefaultAmqpHeaderMapper.\n\tS mappedReplyHeaders(java.lang.String... headers); // Only applies if the default header mapper is used.\n\tS mappedRequestHeaders(java.lang.String... headers); // Only applies if the default header mapper is used.\n\tS messageConverter(org.springframework.amqp.support.converter.MessageConverter messageConverter); // Configure the gateway's MessageConverter; defaults to SimpleMessageConverter.\n}"}
{"index": 9524, "repo": "commons-math3-3.6.1", "des": "Base class multi-start optimizer for a multivariate function.", "code": "Class BaseMultiStartMultivariateOptimizer<PAIR> {\n\tprotected abstract void clear(); // Method that will called in order to clear all stored optima.\n\tprotected PAIR doOptimize(); // Performs the bulk of the optimization algorithm.\n\tint getEvaluations(); // Gets the number of evaluations of the objective function.\n\tabstract PAIR[] getOptima(); // Gets all the optima found during the last call to optimize.\n\tPAIR optimize(OptimizationData... optData); // Stores data and performs the optimization.\n\tprotected abstract void store(PAIR optimum); // Method that will be called in order to store each found optimum.\n}"}
{"index": 1542, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents metadata for various objects in a PDF document.", "code": "Class PDMetadata {\n\tInputStream exportXMPMetadata(); // Extract the XMP metadata.\n\tvoid importXMPMetadata(byte[] xmp); // Import an XMP stream into the PDF document.\n}"}
{"index": 15107, "repo": "spring-vault-core-3.0.4", "des": "Interface that specifies token-related operations.", "code": "public interface VaultTokenOperations {\n\tVaultTokenResponse create(); // Create a new token.\n\tVaultTokenResponse create(VaultTokenRequest request); // Create a new token for the given VaultTokenRequest.\n\tVaultTokenResponse createOrphan(); // Create a new orphan token.\n\tVaultTokenResponse createOrphan(VaultTokenRequest request); // Create a new orphan token for the given VaultTokenRequest.\n\tVaultTokenResponse renew(VaultToken vaultToken); // Renew a VaultToken.\n\tvoid revoke(VaultToken vaultToken); // Revoke a VaultToken.\n\tvoid revokeOrphan(VaultToken vaultToken); // Revoke a VaultToken but not its child tokens.\n}"}
{"index": 14825, "repo": "spring-data-commons-3.1.2", "des": "Utility class to expose details about reactive wrapper types.", "code": "public abstract class ReactiveWrappers extends Object {\n\tstatic boolean isAvailable(); // Returns true if reactive support is available.\n\tstatic boolean isAvailable(ReactiveWrappers.ReactiveLibrary reactiveLibrary); // Returns true if the ReactiveWrappers.ReactiveLibrary is available.\n\tstatic boolean isMultiValueType(Class<?> type); // Returns true if type is a reactive wrapper type supporting multiple values (0..N elements).\n\tstatic boolean isNoValueType(Class<?> type); // Returns true if type is a reactive wrapper type that contains no value.\n\tstatic boolean isSingleValueType(Class<?> type); // Returns true if type is a reactive wrapper type for a single value.\n\tstatic boolean supports(Class<?> type); // Returns true if the type is a supported reactive wrapper type.\n\tstatic boolean usesReactiveType(Class<?> type); // Returns whether the given type uses any reactive wrapper type in its method signatures.\n}"}
{"index": 1147, "repo": "ignite-core-2.15.0", "des": "Future for cron-based scheduled execution.", "code": "Interface SchedulerFuture<R> {\n\tdouble averageExecutionTime(); // Gets average execution time in milliseconds since future was created.\n\tdouble averageIdleTime(); // Gets average idle time for this scheduled task.\n\tint count(); // Gets total count of executions this task has already completed.\n\tlong createTime(); // Gets time in milliseconds at which this future was created.\n\tR get(); // Waits for the completion of the next scheduled execution and returns its result.\n\tR get(long timeout, TimeUnit unit); // Waits for the completion of the next scheduled execution for specified amount of time and returns its result.\n\tString id(); // Gets scheduled task ID.\n\tboolean isRunning(); // Returns true if scheduled task is currently running.\n\tR last(); // Gets result of the last execution of scheduled task, or null if task has not been executed, or has not produced a result yet.\n\tlong lastFinishTime(); // Gets finish time of last execution (0 if first execution has not finished).\n\tlong lastIdleTime(); // Gets last interval between scheduled executions.\n\tlong lastStartTime(); // Gets start time of last execution (0 if never started).\n\tlong nextExecutionTime(); // Gets next execution time of scheduled task.\n\tlong[] nextExecutionTimes(int cnt, long start); // Gets an array of the next execution times after passed start timestamp.\n\tString pattern(); // Gets scheduling pattern.\n}"}
{"index": 4811, "repo": "hadoop-common-3.3.4", "des": "An interface for the implementation of a user-to-groups mapping service used by Groups.", "code": "Interface GroupMappingServiceProvider {\n\tvoid cacheGroupsAdd(List<String> groups); // Caches the group user information\n\tvoid cacheGroupsRefresh(); // Refresh the cache of groups and user mapping\n\tList<String> getGroups(String user); // Get all various group memberships of a given user.\n}"}
{"index": 12565, "repo": "spring-jdbc-6.0.11", "des": "SQL \"function\" wrapper for a query that returns a single row of results.", "code": "public class SqlFunction<T> extends MappingSqlQuery<T> {\n\tprotected T mapRow(ResultSet rs, int rowNum); // This implementation of this method extracts a single value from the single row returned by the function.\n\tint run(); // Convenient method to run the function without arguments.\n\tint run(int parameter); // Convenient method to run the function with a single int argument.\n\tint run(Object... parameters); // Analogous to the SqlQuery.execute([]) method.\n\tObject runGeneric(); // Convenient method to run the function without arguments, returning the value as an object.\n\tObject runGeneric(int parameter); // Convenient method to run the function with a single int argument.\n\tObject runGeneric(Object[] parameters); // Analogous to the SqlQuery.findObject(Object[]) method.\n\tvoid setResultType(Class<T> resultType); // Specify the type that the result object is required to match.\n}"}
{"index": 4001, "repo": "zookeeper-3.8.2", "des": "This class encapsulates a Jetty server for running Commands.", "code": "Class JettyAdminServer {\n\tvoid setZooKeeperServer(ZooKeeperServer zkServer); // Set the ZooKeeperServer that will be used to run Commands.\n\tvoid shutdown(); // Stop the embedded Jetty server.\n\tvoid start(); // Start the embedded Jetty server.\n}"}
{"index": 7802, "repo": "cassandra-all-4.1.2", "des": "Internal interface for supporting versioned grammars.", "code": "Interface StandardTokenizerInterface {\n\tchar[] getArray();\n\tbyte[] getBytes();\n\tint getNextToken(); // Resumes scanning until the next regular expression is matched, the end of input is encountered or an I/O-Error occurs.\n\tjava.lang.String getText();\n\tlong yychar(); // Returns the current position.\n\tint yylength(); // Returns the length of the matched text region.\n\tvoid yyreset(java.io.Reader reader); // Resets the scanner to read from a new input stream.\n}"}
{"index": 11860, "repo": "spring-kafka-3.0.9", "des": "Control flag values for login configuration.", "code": "public static enum KafkaJaasLoginModuleInitializer.ControlFlag extends Enum<KafkaJaasLoginModuleInitializer.ControlFlag> {\n\tstatic KafkaJaasLoginModuleInitializer.ControlFlag valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic KafkaJaasLoginModuleInitializer.ControlFlag[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 5890, "repo": "hadoop-yarn-server-common-3.3.6", "des": "This implements a simple load-balancing policy.", "code": "Class LoadBasedRouterPolicy {\n\tSubClusterId getHomeSubcluster(org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blacklist); // Determines the sub-cluster that the user application submission should be routed to.\n\tvoid reinitialize(FederationPolicyInitializationContext policyContext); // This method is invoked to initialize of update the configuration of policies.\n}"}
{"index": 13759, "repo": "spring-webmvc-6.0.11", "des": "A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.", "code": "public final class PathPatternsRequestCondition extends AbstractRequestCondition<PathPatternsRequestCondition> {\n\tPathPatternsRequestCondition combine(PathPatternsRequestCondition other); // Combine the patterns of the current and of the other instances as follows: If only one instance has patterns, use those.\n\tint compareTo(PathPatternsRequestCondition other, HttpServletRequest request); // Compare the two conditions based on the URL patterns they contain.\n\tprotected Collection<org.springframework.web.util.pattern.PathPattern> getContent(); // Return the discrete items a request condition is composed of.\n\tSet<String> getDirectPaths(); // Return the mapping paths that are not patterns.\n\torg.springframework.web.util.pattern.PathPattern getFirstPattern(); // Return the first pattern.\n\tPathPatternsRequestCondition getMatchingCondition(HttpServletRequest request); // Checks if any of the patterns match the given request and returns an instance that is guaranteed to contain matching patterns, sorted.\n\tSet<org.springframework.web.util.pattern.PathPattern> getPatterns(); // Return the patterns in this condition.\n\tSet<String> getPatternValues(); // Return the getPatterns() mapped to Strings.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n\tboolean isEmptyPathMapping(); // Whether the condition is the \"\" (empty path) mapping.\n}"}
{"index": 12, "repo": "spring-cloud-aws-jdbc-2.2.6.RELEASE", "des": "A map based implementation of the DatabasePlatformSupport interface.", "code": "Class MapBasedDatabasePlatformSupport {\n\tprotected abstract Map<DatabaseType,String> getAuthenticationInfo();\n\tString getDatabaseUrlForDatabase(DatabaseType databaseType, String hostname, int port, String databaseName); // Constructs the URL for the database by using a URI to construct the URL.\n\tString getDriverClassNameForDatabase(DatabaseType databaseType); // Returns the driver class for the database platform.\n\tprotected abstract Map<DatabaseType,String> getDriverClassNameMappings(); // Template method that must be implemented in order to retrieve all driver class names for every supported database platform.\n\tprotected abstract Map<DatabaseType,String> getSchemeNames(); // Template method that mus be implemented to get all scheme names for every supported database platform.\n}"}
{"index": 301, "repo": "phoenix-core-5.1.3", "des": "TaskRunner that just manages the underlying thread pool.", "code": "Class BaseTaskRunner {\n\tboolean isStopped();\n\tvoid stop(String why);\n\t<R> org.apache.hadoop.hbase.util.Pair<List<R>,List<Future<R>>> submit(TaskBatch<R> tasks); // Submit the given tasks to the pool and wait for them to complete.\n\tprotected abstract <R> org.apache.phoenix.thirdparty.com.google.common.util.concurrent.ListenableFuture<List<R>> submitTasks(List<org.apache.phoenix.thirdparty.com.google.common.util.concurrent.ListenableFuture<R>> futures); // Build a ListenableFuture for the tasks.\n\t<R> org.apache.hadoop.hbase.util.Pair<List<R>,List<Future<R>>> submitUninterruptible(TaskBatch<R> tasks); // Similar to TaskRunner.submit(TaskBatch), but is not interruptible.\n}"}
{"index": 8445, "repo": "hadoop-aws-3.3.6", "des": "Get info about a bucket and its S3Guard integration status.", "code": "Class S3GuardTool.BucketInfo {\n\tString getName(); // Return sub-command name.\n\tString getUsage();\n\tint run(String[] args, PrintStream out); // Run the tool, capturing the output (if the tool supports that).\n}"}
{"index": 14944, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An Authentication implementation used when issuing an OAuth 2.0 Access Token and (optional) Refresh Token.", "code": "public class OAuth2AccessTokenAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\torg.springframework.security.oauth2.core.OAuth2AccessToken getAccessToken(); // Returns the access token.\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters.\n\tObject getCredentials();\n\tObject getPrincipal();\n\torg.springframework.security.oauth2.core.OAuth2RefreshToken getRefreshToken(); // Returns the refresh token.\n\tRegisteredClient getRegisteredClient(); // Returns the registered client.\n}"}
{"index": 4398, "repo": "beam-sdks-java-core-2.49.0", "des": "Thrown when a value appears to have been mutated, but that mutation is forbidden.", "code": "Class IllegalMutationException {\n\tjava.lang.Object getNewValue(); // The value after the illegal mutation.\n\tjava.lang.Object getSavedValue(); // The original value, before the illegal mutation.\n}"}
{"index": 7287, "repo": "calcite-core-1.34.0", "des": "Aggregate function that splits into two applications of itself.", "code": "Class SqlSplittableAggFunction.SelfSplitter {\n\t@Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom); // Merge top and bottom aggregate calls into a single aggregate call, if they are legit to merge.\n\t@Nullable AggregateCall other(RelDataTypeFactory typeFactory, AggregateCall e); // Called to generate an aggregate for the other side of the join than the side aggregate call's arguments come from.\n\tRexNode singleton(RexBuilder rexBuilder, RelDataType inputRowType, AggregateCall aggregateCall); // Generates an expression for the value of the aggregate function when applied to a single row.\n\tAggregateCall split(AggregateCall aggregateCall, Mappings.TargetMapping mapping);\n\tAggregateCall topSplit(RexBuilder rexBuilder, SqlSplittableAggFunction.Registry<RexNode> extra, int offset, RelDataType inputRowType, AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal); // Generates an aggregate call to merge sub-totals.\n}"}
{"index": 5161, "repo": "druid-processing-26.0.0", "des": "Allows for accessing a column, provides methods to enable row-by-row access of a specific column.", "code": "Interface ColumnAccessor {\n\tint compareRows(int lhsRowNum, int rhsRowNum); // Compares two rows using a comparison that follows the same semantics as Comparator.compare(T, T)\n\tdouble getDouble(int rowNum); // Get the primitive double representation of the row.\n\tfloat getFloat(int rowNum); // Get the primitive float representation of the row.\n\tint getInt(int rowNum); // Get the primitive int representation of the row.\n\tlong getLong(int rowNum); // Get the primitive long representation of the row.\n\tObject getObject(int rowNum); // Get the Object representation of the row.\n\tColumnType getType(); // Get the type of the Column\n\tboolean isNull(int rowNum); // Get whether the value of a row is null\n\tint numRows(); // Get the number of rows\n}"}
{"index": 18429, "repo": "opencms-core-15.0", "des": "Represents a single rule configured for a policy.", "code": "Class CmsTwoFactorAuthenticationUserPolicy.Rule {\n\tjava.util.regex.Pattern getPattern(); // Gets the pattern (only used for check type 'pattern').\n\tCmsTwoFactorAuthenticationUserPolicy.CheckType getType(); // Gets the match type, which determines what the name is compared to.\n\tjava.lang.String getValue(); // Gets the name that is used for comparison.\n}"}
{"index": 9002, "repo": "hbase-server-3.0.0-alpha-4", "des": "Wraps together the mutations which are applied as a batch to the region and their operation status and WALEdits.", "code": "Class MiniBatchOperationInProgress<T> {\n\tvoid addCellCount(int cellCount);\n\tvoid addOperationsFromCP(int index, Mutation[] newOperations); // Add more Mutations corresponding to the Mutation at the given index to be committed atomically in the same batch.\n\tint getCellCount();\n\tint getLastIndexExclusive();\n\tint getNumOfAppends();\n\tint getNumOfDeletes();\n\tint getNumOfIncrements();\n\tint getNumOfPuts();\n\tT getOperation(int index); // Returns The operation(Mutation) at the specified position.\n\tMutation[] getOperationsFromCoprocessors(int index);\n\tOperationStatus getOperationStatus(int index); // Returns Gets the status code for the operation(Mutation) at the specified position.\n\tint getReadyToWriteCount();\n\tWALEdit getWalEdit(int index); // Returns Gets the walEdit for the operation(Mutation) at the specified position.\n\tWALEdit getWalEditForReplicateIfExistsSkipWAL();\n\tvoid incrementNumOfAppends();\n\tvoid incrementNumOfDeletes();\n\tvoid incrementNumOfIncrements();\n\tvoid incrementNumOfPuts();\n\tvoid setOperationStatus(int index, OperationStatus opStatus); // Sets the status code for the operation(Mutation) at the specified position.\n\tvoid setWalEdit(int index, WALEdit walEdit); // Sets the walEdit for the operation(Mutation) at the specified position.\n\tvoid setWalEditForReplicateIfExistsSkipWAL(WALEdit walEditForReplicateSkipWAL);\n\tint size(); // Returns The number of operations(Mutations) involved in this batch.\n}"}
{"index": 2770, "repo": "tika-parsers-1.28.5", "des": "Represents entry types: uncompressed, compressed.", "code": "Enum ChmCommons.EntryType {\n\tstatic ChmCommons.EntryType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ChmCommons.EntryType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7743, "repo": "cassandra-all-4.1.2", "des": "Sidekick helper for snitches that want to reconnect from one IP addr for a node to another.", "code": "Class ReconnectableSnitchHelper {\n\tvoid beforeChange(InetAddressAndPort endpoint, EndpointState currentState, ApplicationState newStateKey, VersionedValue newValue);\n\tvoid onAlive(InetAddressAndPort endpoint, EndpointState state);\n\tvoid onChange(InetAddressAndPort endpoint, ApplicationState state, VersionedValue value);\n\tvoid onDead(InetAddressAndPort endpoint, EndpointState state);\n\tvoid onJoin(InetAddressAndPort endpoint, EndpointState epState); // Use to inform interested parties about the change in the state for specified endpoint\n\tvoid onRemove(InetAddressAndPort endpoint);\n\tvoid onRestart(InetAddressAndPort endpoint, EndpointState state); // Called whenever a node is restarted.\n}"}
{"index": 15847, "repo": "camel-api-4.0.0-RC1", "des": "To allow objects to be injected with the route id", "code": "public interface RouteIdAware {\n\tString getRouteId(); // Gets the route id\n\tvoid setRouteId(String routeId); // Sets the route id\n}"}
{"index": 8912, "repo": "hbase-server-3.0.0-alpha-4", "des": "Abstract base class for all HBase event handlers.", "code": "Class EventHandler {\n\tint compareTo(EventHandler o); // Default prioritized runnable comparator which implements a FIFO ordering.\n\tEventType getEventType(); // Return the event type\n\tString getInformativeName(); // Event implementations should override thie class to provide an informative name about what event they are handling.\n\tint getPriority(); // Get the priority level for this handler instance.\n\tlong getSeqid(); // Returns This events' sequence id.\n\tprotected void handleException(Throwable t); // Event exception handler, may be overridden\n\tEventHandler prepare(); // Event handlers should do all the necessary checks in this method (rather than in the constructor, or in process()) so that the caller, which is mostly executed in the ipc context can fail fast.\n\tabstract void process(); // This method is the main processing loop to be implemented by the various subclasses.\n\tvoid run();\n}"}
{"index": 6312, "repo": "mina-core-3.0.0-M2", "des": "A convenient IoHandler implementation to be sub-classed for easier IoHandler implementation.", "code": "Class AbstractIoHandler {\n\tvoid exceptionCaught(IoSession session, Exception cause); // Invoked when any runtime exception is thrown during session processing (filters, unexpected error, etc..).\n\tvoid messageReceived(IoSession session, Object message); // Invoked when a message is received.\n\tvoid messageSent(IoSession session, Object message); // Invoked when a high level message was written to the low level O/S buffer.\n\tvoid serviceActivated(IoService service); // Invoked when a new service is activated by an IoService.\n\tvoid serviceInactivated(IoService service); // Invoked when a service is inactivated by an IoService.\n\tvoid sessionClosed(IoSession session); // Invoked when a connection is closed.\n\tvoid sessionIdle(IoSession session, IdleStatus status); // Invoked with the related IdleStatus when a connection becomes idle.\n\tvoid sessionOpened(IoSession session); // Invoked when a connection has been opened.\n}"}
{"index": 2883, "repo": "amqp-client-5.18.0", "des": "Parameters used to configure the NIO mode of a ConnectionFactory.", "code": "Class NioParams {\n\tNioParams enableHostnameVerification(); // Enable server hostname verification for TLS connections.\n\tByteBufferFactory getByteBufferFactory();\n\tExecutorService getConnectionShutdownExecutor();\n\tint getNbIoThreads();\n\tExecutorService getNioExecutor();\n\tint getReadByteBufferSize();\n\tSocketChannelConfigurator getSocketChannelConfigurator();\n\tSslEngineConfigurator getSslEngineConfigurator();\n\tThreadFactory getThreadFactory();\n\tint getWriteByteBufferSize();\n\tint getWriteEnqueuingTimeoutInMs();\n\tint getWriteQueueCapacity();\n\tFunction<NioContext,NioQueue> getWriteQueueFactory();\n\tNioParams setByteBufferFactory(ByteBufferFactory byteBufferFactory); // Set the factory to create ByteBuffers.\n\tNioParams setConnectionShutdownExecutor(ExecutorService connectionShutdownExecutor); // Set the ExecutorService used for connection shutdown.\n\tNioParams setNbIoThreads(int nbIoThreads); // Sets the max number of threads/tasks used for NIO.\n\tNioParams setNioExecutor(ExecutorService nioExecutor); // Sets the ExecutorService to use for NIO threads/tasks.\n\tNioParams setReadByteBufferSize(int readByteBufferSize); // Sets the size in byte of the read ByteBuffer used in the NIO loop.\n\tvoid setSocketChannelConfigurator(SocketChannelConfigurator configurator); // Set the SocketChannel configurator.\n\tvoid setSslEngineConfigurator(SslEngineConfigurator configurator); // Set the SSLEngine configurator.\n\tNioParams setThreadFactory(ThreadFactory threadFactory); // Sets the ThreadFactory to use for NIO threads/tasks.\n\tNioParams setWriteByteBufferSize(int writeByteBufferSize); // Sets the size in byte of the write ByteBuffer used in the NIO loop.\n\tNioParams setWriteEnqueuingTimeoutInMs(int writeEnqueuingTimeoutInMs); // Sets the timeout for queuing outbound frames.\n\tNioParams setWriteQueueCapacity(int writeQueueCapacity); // Set the capacity of the queue used for outbound frames.\n\tNioParams setWriteQueueFactory(Function<NioContext,NioQueue> writeQueueFactory); // Set the factory to create NioQueues.\n}"}
{"index": 14589, "repo": "spring-security-web-6.1.2", "des": "Defines a filter chain which is capable of being matched against a ServerWebExchange in order to decide whether it applies to that request.", "code": "public interface SecurityWebFilterChain {\n\treactor.core.publisher.Flux<org.springframework.web.server.WebFilter> getWebFilters(); // The WebFilter to use\n\treactor.core.publisher.Mono<Boolean> matches(org.springframework.web.server.ServerWebExchange exchange); // Determines if this SecurityWebFilterChain matches the provided ServerWebExchange\n}"}
{"index": 10903, "repo": "spring-data-redis-3.1.2", "des": "Base MessageListener implementation for listening to Redis keyspace notifications.", "code": "public abstract class KeyspaceEventMessageListener extends Object implements MessageListener, InitializingBean, DisposableBean {\n\tvoid afterPropertiesSet();\n\tvoid destroy();\n\tprotected abstract void doHandleMessage(Message message); // Handle the actual message\n\tprotected void doRegister(RedisMessageListenerContainer container); // Register instance within the container.\n\tvoid init(); // Initialize the message listener by writing requried redis config for notify-keyspace-events and registering the listener within the container.\n\tvoid onMessage(Message message, byte[] pattern); // Callback for processing received objects through Redis.\n\tvoid setKeyspaceNotificationsConfigParameter(String keyspaceNotificationsConfigParameter); // Set the configuration string to use for notify-keyspace-events.\n}"}
{"index": 15248, "repo": "spring-boot-3.1.1", "des": "Interface that can be used to control configuration property source caches.", "code": "public interface ConfigurationPropertyCaching {\n\tvoid clear(); // Clear the cache and force it to be reloaded on next access.\n\tvoid disable(); // Disable caching.\n\tvoid enable(); // Enable caching with an unlimited time-to-live.\n\tstatic ConfigurationPropertyCaching get(Iterable<ConfigurationPropertySource> sources); // Get for all specified configuration property sources.\n\tstatic ConfigurationPropertyCaching get(Iterable<ConfigurationPropertySource> sources, Object underlyingSource); // Get for a specific configuration property source in the specified configuration property sources.\n\tstatic ConfigurationPropertyCaching get(org.springframework.core.env.Environment environment); // Get for all configuration property sources in the environment.\n\tstatic ConfigurationPropertyCaching get(org.springframework.core.env.Environment environment, Object underlyingSource); // Get for a specific configuration property source in the environment.\n\tvoid setTimeToLive(Duration timeToLive); // Set amount of time that an item can live in the cache.\n}"}
{"index": 7474, "repo": "nifi-client-dto-1.22.0", "des": "A Controller Service that can be shared by other components.", "code": "Class ControllerServiceDTO {\n\tboolean equals(Object obj);\n\tString getAnnotationData();\n\tString getBulletinLevel();\n\tBundleDTO getBundle(); // The details of the artifact that bundled this controller service type.\n\tString getComments();\n\tList<ControllerServiceApiDTO> getControllerServiceApis(); // Lists the APIs this Controller Service implements.\n\tString getCustomUiUrl();\n\tBoolean getDeprecated();\n\tMap<String,PropertyDescriptorDTO> getDescriptors();\n\tBoolean getExtensionMissing();\n\tBoolean getMultipleVersionsAvailable();\n\tString getName();\n\tBoolean getPersistsState();\n\tMap<String,String> getProperties();\n\tSet<ControllerServiceReferencingComponentEntity> getReferencingComponents();\n\tBoolean getRestricted();\n\tSet<String> getSensitiveDynamicPropertyNames();\n\tString getState();\n\tBoolean getSupportsSensitiveDynamicProperties();\n\tString getType();\n\tCollection<String> getValidationErrors(); // Gets the validation errors from this controller service.\n\tString getValidationStatus();\n\tvoid setAnnotationData(String annotationData);\n\tvoid setBulletinLevel(String bulletinLevel);\n\tvoid setBundle(BundleDTO bundle);\n\tvoid setComments(String comments);\n\tvoid setControllerServiceApis(List<ControllerServiceApiDTO> controllerServiceApis);\n\tvoid setCustomUiUrl(String customUiUrl);\n\tvoid setDeprecated(Boolean deprecated);\n\tvoid setDescriptors(Map<String,PropertyDescriptorDTO> descriptors);\n\tvoid setExtensionMissing(Boolean extensionMissing);\n\tvoid setMultipleVersionsAvailable(Boolean multipleVersionsAvailable);\n\tvoid setName(String name);\n\tvoid setPersistsState(Boolean persistsState);\n\tvoid setProperties(Map<String,String> properties);\n\tvoid setReferencingComponents(Set<ControllerServiceReferencingComponentEntity> referencingComponents);\n\tvoid setRestricted(Boolean restricted);\n\tvoid setSensitiveDynamicPropertyNames(Set<String> sensitiveDynamicPropertyNames);\n\tvoid setState(String state);\n\tvoid setSupportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties);\n\tvoid setType(String type);\n\tvoid setValidationErrors(Collection<String> validationErrors);\n\tvoid setValidationStatus(String validationStatus);\n}"}
{"index": 4437, "repo": "beam-sdks-java-core-2.49.0", "des": "A NullableCoder encodes nullable values of type T using a nested Coder<T> that does not tolerate null values.", "code": "Class NullableCoder<T> {\n\tboolean consistentWithEquals(); // NullableCoder is consistent with equals if the nested Coder is.\n\tT decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tT decode(java.io.InputStream inStream, Coder.Context context); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(T value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tvoid encode(T value, java.io.OutputStream outStream, Coder.Context context); // Encodes the given value of type T onto the given output stream in the given context.\n\tjava.util.List<Coder<T>> getCoderArguments(); // If this is a Coder for a parameterized type, returns the list of Coders being used for each of the parameters in the same order they appear within the parameterized type's type signature.\n\tprotected long getEncodedElementByteSize(T value); // Overridden to short-circuit the default StructuredCoder behavior of encoding and counting the bytes.\n\tTypeDescriptor<T> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tCoder<T> getValueCoder(); // Returns the inner Coder wrapped by this NullableCoder instance.\n\tboolean isRegisterByteSizeObserverCheap(T value); // NullableCoder is cheap if valueCoder is cheap.\n\tstatic <T> NullableCoder<T> of(Coder<T> valueCoder);\n\tvoid registerByteSizeObserver(T value, ElementByteSizeObserver observer); // Overridden to short-circuit the default StructuredCoder behavior of encoding and counting the bytes.\n\tjava.lang.Object structuralValue(T value); // Returns an object with an Object.equals() method that represents structural equality on the argument.\n\tvoid verifyDeterministic(); // NullableCoder is deterministic if the nested Coder is.\n}"}
{"index": 13330, "repo": "shiro-core-2.0.0-alpha-2", "des": "A Default SessionStorageEvaluator that provides reasonable control over if and how Sessions may be used for storing Subject state.", "code": "public class DefaultSessionStorageEvaluator extends Object implements SessionStorageEvaluator {\n\tboolean isSessionStorageEnabled(); // Returns true if any Subject's Session may be used to persist that Subject's state, false otherwise.\n\tboolean isSessionStorageEnabled(Subject subject); // This implementation functions as follows: If the specified Subject already has an existing Session (typically because an application developer has called subject.getSession() already), Shiro will use that existing session to store subject state. If a Subject does not yet have a Session, this implementation checks the sessionStorageEnabled property: If sessionStorageEnabled is true (the default setting), a new session may be created to persist Subject state if necessary. If sessionStorageEnabled is false, a new session will not be created to persist session state. Most applications use Sessions and are OK with the default true setting for sessionStorageEnabled.\n\tvoid setSessionStorageEnabled(boolean sessionStorageEnabled); // Sets if any Subject's Session may be used to persist that Subject's state.\n}"}
{"index": 17874, "repo": "spring-web-6.0.11", "des": "Resolves method arguments annotated with @RequestParam, arguments of type MultipartFile in conjunction with Spring's MultipartResolver abstraction, and arguments of type jakarta.servlet.http.Part in conjunction with Servlet multipart requests.", "code": "public class RequestParamMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver implements UriComponentsContributor {\n\tvoid contributeMethodArgument(org.springframework.core.MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String,Object> uriVariables, org.springframework.core.convert.ConversionService conversionService); // Process the given method argument and either update the UriComponentsBuilder or add to the map with URI variables to use to expand the URI after all arguments are processed.\n\tprotected AbstractNamedValueMethodArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueMethodArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected String formatUriValue(org.springframework.core.convert.ConversionService cs, org.springframework.core.convert.TypeDescriptor sourceType, Object value);\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest request); // Invoked when a named value is required, but AbstractNamedValueMethodArgumentResolver.resolveName(String, MethodParameter, NativeWebRequest) returned null and there is no default value.\n\tprotected void handleMissingValueAfterConversion(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest request); // Invoked when a named value is present but becomes null after conversion.\n\tprotected void handleMissingValueInternal(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest request, boolean missingAfterConversion);\n\tprotected Object resolveName(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest request); // Resolve the given parameter type and value name into an argument value.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Supports the following: @RequestParam-annotated method arguments.\n}"}
{"index": 17216, "repo": "spring-boot-maven-plugin-3.1.1", "des": "Package an application into an OCI image using a buildpack.", "code": "public abstract class BuildImageMojo extends AbstractPackagerMojo {\n\tvoid execute();\n\tprotected AbstractPackagerMojo.LayoutType getLayout(); // Return the type of archive that should be used when building the image.\n\tprotected org.springframework.boot.loader.tools.LayoutFactory getLayoutFactory(); // Return the layout factory that will be used to determine the AbstractPackagerMojo.LayoutType if no explicit layout is set.\n}"}
{"index": 7414, "repo": "mahout-math-0.13.0", "des": "Open hash map from float keys to int values.", "code": "Class OpenFloatIntHashMap {\n\tint adjustOrPutValue(float key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(float key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(FloatProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(FloatIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(float key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(float key);\n\tprotected int indexOfKey(float key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenFloatIntHashMap.MapElement> iterator();\n\tvoid keys(FloatArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(FloatIntProcedure condition, FloatArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(float key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(float key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 16065, "repo": "shiro-web-2.0.0-alpha-2", "des": "Default WebEnvironment implementation based on a backing Map instance.", "code": "public class DefaultWebEnvironment extends org.apache.shiro.env.DefaultEnvironment implements MutableWebEnvironment {\n\tFilterChainResolver getFilterChainResolver(); // Returns the web application's FilterChainResolver if one has been configured or null if one is not available.\n\torg.apache.shiro.mgt.SecurityManager getSecurityManager();\n\tjavax.servlet.ServletContext getServletContext(); // Returns the ServletContext associated with this WebEnvironment instance.\n\tShiroFilterConfiguration getShiroFilterConfiguration(); // Returns the configuration object used to configure the ShiroFilter.\n\tWebSecurityManager getWebSecurityManager(); // Returns the web application's security manager instance.\n\tvoid setFilterChainResolver(FilterChainResolver filterChainResolver); // Sets the WebEnvironment's FilterChainResolver.\n\tvoid setSecurityManager(org.apache.shiro.mgt.SecurityManager securityManager);\n\tvoid setServletContext(javax.servlet.ServletContext servletContext); // Sets the WebEnvironment's associated ServletContext instance.\n\tvoid setShiroFilterConfiguration(ShiroFilterConfiguration filterConfiguration); // Sets the WebEnvironment's ShiroFilterConfiguration.\n\tvoid setWebSecurityManager(WebSecurityManager wsm); // Sets the WebEnvironment's WebSecurityManager.\n}"}
{"index": 6405, "repo": "spring-data-solr-4.3.15", "des": "SolrClientUtils replaces SolrServerUtils from version 1.", "code": "Class SolrClientUtils {\n\tstatic void close(org.apache.solr.client.solrj.SolrClient solrClient); // Close the SolrClient by calling Closeable.close() or shutdown for the generation 5 libraries.\n\tstatic String resolveSolrCoreName(Class<?> type); // Resolve solr core/collection name for given type.\n}"}
{"index": 4299, "repo": "beam-sdks-java-core-2.49.0", "des": "A CoderRegistry allows creating a Coder for a given Java class or type descriptor.", "code": "Class CoderRegistry {\n\tstatic CoderRegistry createDefault(); // Creates a CoderRegistry containing registrations for all standard coders part of the core Java Apache Beam SDK and also any registrations provided by coder registrars.\n\t<T> Coder<T> getCoder(java.lang.Class<T> clazz); // Returns the Coder to use for values of the given class.\n\t<T> Coder<T> getCoder(TypeDescriptor<T> type); // Returns the Coder to use for values of the given type.\n\tvoid registerCoderForClass(java.lang.Class<?> clazz, Coder<?> coder); // Registers the provided Coder for the given class.\n\tvoid registerCoderForType(TypeDescriptor<?> type, Coder<?> coder); // Registers the provided Coder for the given type.\n\tvoid registerCoderProvider(CoderProvider coderProvider); // Registers coderProvider as a potential CoderProvider which can produce Coder instances.\n}"}
{"index": 12839, "repo": "spring-data-mongodb-4.1.2", "des": "Helper class for managing reactive MongoDatabase instances via ReactiveMongoDatabaseFactory.", "code": "public class ReactiveMongoDatabaseUtils extends Object {\n\tstatic reactor.core.publisher.Mono<com.mongodb.reactivestreams.client.MongoDatabase> getDatabase(String dbName, ReactiveMongoDatabaseFactory factory); // Obtain the database with given name form the given factory using native session synchronization.\n\tstatic reactor.core.publisher.Mono<com.mongodb.reactivestreams.client.MongoDatabase> getDatabase(String dbName, ReactiveMongoDatabaseFactory factory, SessionSynchronization sessionSynchronization); // Obtain the database with given name form the given factory.\n\tstatic reactor.core.publisher.Mono<com.mongodb.reactivestreams.client.MongoDatabase> getDatabase(ReactiveMongoDatabaseFactory factory); // Obtain the default database form the given factory using native session synchronization.\n\tstatic reactor.core.publisher.Mono<com.mongodb.reactivestreams.client.MongoDatabase> getDatabase(ReactiveMongoDatabaseFactory factory, SessionSynchronization sessionSynchronization); // Obtain the default database form the given factory.\n\tstatic reactor.core.publisher.Mono<Boolean> isTransactionActive(ReactiveMongoDatabaseFactory databaseFactory); // Check if the ReactiveMongoDatabaseFactory is actually bound to a ClientSession that has an active transaction, or if a TransactionSynchronization has been registered for the resource and if the associated ClientSession has an active transaction.\n}"}
{"index": 18486, "repo": "gremlin-core-3.6.4", "des": "Simple implementation of the ImportCustomizer which allows direct setting of all the different import types.", "code": "Class DefaultImportCustomizer {\n\tstatic DefaultImportCustomizer.Builder build();\n\tSet<Class> getClassImports(); // Gets the set of classes to be imported to the GremlinScriptEngine.\n\tSet<Enum> getEnumImports(); // Gets the set of enums to be imported to the GremlinScriptEngine.\n\tSet<Field> getFieldImports(); // Gets the set of fields to be imported to the GremlinScriptEngine.\n\tSet<Method> getMethodImports(); // Gets the set of static methods to be imported to the GremlinScriptEngine.\n}"}
{"index": 8516, "repo": "commons-io-2.13.0", "des": "FileAlterationObserver represents the state of files below a root directory, checking the file system and notifying listeners of create, change or delete events.", "code": "Class FileAlterationObserver {\n\tvoid addListener(FileAlterationListener listener); // Adds a file system listener.\n\tvoid checkAndNotify(); // Checks whether the file and its children have been created, modified or deleted.\n\tvoid destroy(); // Final processing.\n\tFile getDirectory(); // Returns the directory being observed.\n\tFileFilter getFileFilter(); // Returns the fileFilter.\n\tIterable<FileAlterationListener> getListeners(); // Returns the set of registered file system listeners.\n\tvoid initialize(); // Initializes the observer.\n\tvoid removeListener(FileAlterationListener listener); // Removes a file system listener.\n}"}
{"index": 5544, "repo": "org.apache.karaf.main-2.4.4", "des": "A Framework exception used to indicate that a bundle lifecycle problem occurred.", "code": "Class BundleException {\n\tThrowable getCause(); // Returns the cause of this exception or null if no cause was set.\n\tThrowable getNestedException(); // Returns the cause of this exception or null if no cause was specified when this exception was created.\n\tint getType(); // Returns the type for this exception or UNSPECIFIED if the type was unspecified or unknown.\n\tThrowable initCause(Throwable cause); // Initializes the cause of this exception to the specified value.\n}"}
{"index": 5074, "repo": "commons-collections-3.2.2", "des": "Decorates another Bag to synchronize its behaviour for a multi-threaded environment.", "code": "Class SynchronizedBag {\n\tboolean add(Object object, int count); // Adds nCopies copies of the specified object to the Bag.\n\tstatic Bag decorate(Bag bag); // Factory method to create a synchronized bag.\n\tprotected Bag getBag(); // Gets the bag being decorated.\n\tint getCount(Object object); // Returns the number of occurrences (cardinality) of the given object currently in the bag.\n\tboolean remove(Object object, int count); // Removes nCopies copies of the specified object from the Bag.\n\tSet uniqueSet(); // Returns a Set of unique elements in the Bag.\n}"}
{"index": 2243, "repo": "hive-exec-4.0.0-alpha-2", "des": "A class to handle management and lookup of cached Hive query results.", "code": "Class QueryResultsCache {\n\tQueryResultsCache.CacheEntry addToCache(QueryResultsCache.QueryInfo queryInfo, ValidTxnWriteIdList txnWriteIdList); // Add an entry to the cache.\n\tstatic void cleanupInstance();\n\tvoid clear();\n\tstatic void decrementMetric(String name);\n\tstatic void decrementMetric(String name, long count);\n\torg.apache.hadoop.fs.Path getCacheDirPath();\n\tstatic QueryResultsCache getInstance();\n\tlong getSize();\n\tstatic void incrementMetric(String name);\n\tstatic void incrementMetric(String name, long count);\n\tstatic void initialize(HiveConf conf);\n\tQueryResultsCache.CacheEntry lookup(QueryResultsCache.LookupInfo request); // Check if the cache contains an entry for the requested LookupInfo.\n\tvoid notifyTableChanged(String dbName, String tableName, long updateTime);\n\tvoid removeEntry(QueryResultsCache.CacheEntry entry);\n\tboolean setEntryValid(QueryResultsCache.CacheEntry cacheEntry, FetchWork fetchWork); // Updates a pending cache entry with a FetchWork result from a finished query.\n}"}
{"index": 18299, "repo": "tomcat-servletapi-10.1", "des": "The programmatic equivalent of ServletSecurity used to configre security constraints for a Servlet.", "code": "Class ServletSecurityElement {\n\tjava.util.Collection<HttpMethodConstraintElement> getHttpMethodConstraints(); // Obtain the collection of security constraints configured for specific methods.\n\tjava.util.Collection<java.lang.String> getMethodNames(); // Obtain the collection HTTP methods for which security constraints have been defined.\n}"}
{"index": 8046, "repo": "commons-compress-1.23.0", "des": "CpioArchiveOutputStream is a stream for writing CPIO streams.", "code": "Class CpioArchiveOutputStream {\n\tvoid close(); // Closes the CPIO output stream as well as the stream being filtered.\n\tvoid closeArchiveEntry(); // Closes the archive entry, writing any trailer information that may be required.\n\tArchiveEntry createArchiveEntry(File inputFile, String entryName); // Creates a new ArchiveEntry.\n\tArchiveEntry createArchiveEntry(Path inputPath, String entryName, LinkOption... options); // Creates a new ArchiveEntry.\n\tvoid finish(); // Finishes writing the contents of the CPIO output stream without closing the underlying stream.\n\tvoid putArchiveEntry(ArchiveEntry entry); // Begins writing a new CPIO file entry and positions the stream to the start of the entry data.\n\tvoid write(byte[] b, int off, int len); // Writes an array of bytes to the current CPIO entry data.\n}"}
{"index": 18261, "repo": "tomcat-api-10.1", "des": "This the NIO2 based protocol handler implementation for AJP.", "code": "Class AjpNio2Protocol {\n\tprotected Log getLog(); // Concrete implementations need to provide access to their logger to be used by the abstract classes.\n\tprotected String getNamePrefix(); // Obtain the prefix to be used when construction a name for this protocol handler.\n}"}
{"index": 15519, "repo": "spring-batch-core-5.0.2", "des": "Parser for the <job/> element in the Batch namespace.", "code": "public class JobParser extends org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser {\n\tprotected void doParse(Element element, org.springframework.beans.factory.xml.ParserContext parserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder builder); // Create a bean definition for a FlowJob.\n\tprotected Class<JobParserJobFactoryBean> getBeanClass(Element element);\n\torg.springframework.beans.BeanMetadataElement parseBeanElement(Element element, org.springframework.beans.factory.xml.ParserContext parserContext); // Parse the element to retrieve BeanMetadataElement.\n}"}
{"index": 10088, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Factory bean building YarnClient instances.", "code": "Class YarnClientFactoryBean {\n\tvoid afterPropertiesSet();\n\tYarnClient getObject();\n\tClass<YarnClient> getObjectType();\n\tboolean isSingleton();\n\tvoid setAppName(String appName); // Sets the name for submitted application.\n\tvoid setAppType(String appType); // Sets the type for submitted application.\n\tvoid setClientClass(Class<? extends YarnClient> clientClass); // Sets the client class.\n\tvoid setCommands(List<String> commands); // Sets the commands starting appmaster.\n\tvoid setCommands(String[] commands); // Sets the commands starting appmaster.\n\tvoid setConfiguration(Configuration configuration); // Sets the Yarn configuration.\n\tvoid setEnvironment(Map<String,String> environment); // Sets the environment for appmaster.\n\tvoid setLabelExpression(String labelExpression); // Sets the application label expression.\n\tvoid setMemory(int memory); // Sets the memory.\n\tvoid setPriority(int priority); // Sets the priority.\n\tvoid setQueue(String queue); // Sets the queue.\n\tvoid setResourceLocalizer(ResourceLocalizer resourceLocalizer); // Sets the resource localizer for appmaster container.\n\tvoid setTemplate(ClientRmOperations template);\n\tvoid setVirtualcores(int virtualcores); // Sets the virtualcores.\n}"}
{"index": 16456, "repo": "spring-batch-infrastructure-5.0.2", "des": "This class is an item writer that writes data to a file or stream.", "code": "public class FlatFileItemWriter<T> extends AbstractFileItemWriter<T> {\n\tvoid afterPropertiesSet(); // Assert that mandatory properties (lineAggregator) are set.\n\tString doWrite(Chunk<? extends T> items); // Write out a string of items followed by a \"new line\", where the format of the new line separator is determined by the underlying operating system.\n\tvoid setLineAggregator(LineAggregator<T> lineAggregator); // Public setter for the LineAggregator.\n}"}
{"index": 3661, "repo": "hive-serde-4.0.0-alpha-2", "des": "StandardUnionObjectInspector works on union data that is stored as UnionObject.", "code": "Class StandardUnionObjectInspector {\n\tObject create();\n\tObjectInspector.Category getCategory(); // An ObjectInspector must inherit from one of the following interfaces if getCategory() returns: PRIMITIVE: PrimitiveObjectInspector LIST: ListObjectInspector MAP: MapObjectInspector STRUCT: StructObjectInspector.\n\tObject getField(Object o); // Return the field based on the tag value associated with the Object.\n\tList<ObjectInspector> getObjectInspectors(); // Returns the array of ObjectInspectors that are for each of the tags.\n\tbyte getTag(Object o); // Return the tag of the object.\n\tString getTypeName(); // Returns the name of the data type that is inspected by this ObjectInspector.\n\tObject setFieldAndTag(Object union, Object field, byte tag);\n}"}
{"index": 1485, "repo": "pdfbox-3.0.0-beta1", "des": "This is the class that represents a rubber stamp annotation.", "code": "Class PDAnnotationRubberStamp {\n\tString getName(); // This will retrieve the name (and hence appearance, AP taking precedence) For this annotation.\n\tvoid setName(String name); // This will set the name (and hence appearance, AP taking precedence) For this annotation.\n}"}
{"index": 4323, "repo": "beam-sdks-java-core-2.49.0", "des": "The checkpoint for an unbounded CountingSource is simply the last value produced.", "code": "Class CountingSource.CounterMark {\n\tvoid finalizeCheckpoint(); // Called by the system to signal that this checkpoint mark has been committed along with all the records which have been read from the UnboundedSource.UnboundedReader since the previous checkpoint was taken.\n\tlong getLastEmitted(); // Returns the last value emitted by the reader.\n\torg.joda.time.Instant getStartTime(); // Returns the time the reader was started.\n}"}
{"index": 14343, "repo": "wicket-core-10.0.0-M1", "des": "Model is the basic implementation of an IModel.", "code": "public class Model<T extends Serializable> extends Object implements IObjectClassAwareModel<T> {\n\tvoid detach(); // Detaches model after use.\n\tboolean equals(Object obj);\n\tT getObject(); // Gets the model object.\n\tClass<T> getObjectClass(); // Returns the class of model object\n\tstatic <T extends Serializable>Model<T> of(); // Factory methods for Model which uses type inference to make code shorter.\n\tstatic <C> IModel<Collection<C>> of(Collection<C> collection); // Factory method for models that contain collections.\n\tstatic <T extends Serializable>Model<T> of(T object); // Factory methods for Model which uses type inference to make code shorter.\n\tstatic <C> IModel<List<C>> ofList(List<C> list); // Factory method for models that contain lists.\n\tstatic <K, V> IModel<Map<K,V>> ofMap(Map<K,V> map); // Factory method for models that contain maps.\n\tstatic <C> IModel<Set<C>> ofSet(Set<C> set); // Factory method for models that contain sets.\n\tvoid setObject(T object); // Set the model object; calls setObject(java.io.Serializable).\n}"}
{"index": 17308, "repo": "groovy-4.0.13", "des": "Represents particular files of interest.", "code": "public enum FileType extends Enum<FileType> {\n\tstatic FileType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FileType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9035, "repo": "hbase-server-3.0.0-alpha-4", "des": "Process to kick off and manage a running Subprocedure on a member.", "code": "Class ProcedureMember {\n\tvoid close(); // Best effort attempt to close the threadpool via Thread.interrupt.\n\tvoid controllerConnectionFailure(String message, Throwable cause, String procName); // The connection to the rest of the procedure group (member and coordinator) has been broken/lost/failed.\n\tSubprocedure createSubprocedure(String opName, byte[] data); // This is separated from execution so that we can detect and handle the case where the subprocedure is invalid and inactionable due to bad info (like DISABLED snapshot type being sent here)\n\tstatic ThreadPoolExecutor defaultPool(String memberName, int procThreads); // Default thread pool for the procedure\n\tstatic ThreadPoolExecutor defaultPool(String memberName, int procThreads, long keepAliveMillis); // Default thread pool for the procedure\n\tvoid receiveAbortProcedure(String procName, ForeignException ee); // Send abort to the specified procedure\n\tvoid receivedReachedGlobalBarrier(String procName); // Notification that procedure coordinator has reached the global barrier\n\tboolean submitSubprocedure(Subprocedure subproc); // Submit an subprocedure for execution.\n}"}
{"index": 13860, "repo": "spring-webflux-6.0.11", "des": "Implementation of the Headers interface that can be subclassed to adapt the headers in a exchange filter function.", "code": "public static class ClientResponseWrapper.HeadersWrapper extends Object implements ClientResponse.Headers {\n\torg.springframework.http.HttpHeaders asHttpHeaders(); // Return the headers as an HttpHeaders instance.\n\tOptionalLong contentLength(); // Return the length of the body in bytes, as specified by the Content-Length header.\n\tOptional<org.springframework.http.MediaType> contentType(); // Return the media type of the body, as specified by the Content-Type header.\n\tList<String> header(String headerName); // Return the header value(s), if any, for the header of the given name.\n}"}
{"index": 4951, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that returns true if both the predicates return true.", "code": "Class AndPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning true if both predicates return true.\n\tstatic Predicate getInstance(Predicate predicate1, Predicate predicate2); // Factory to create the predicate.\n\tPredicate[] getPredicates(); // Gets the two predicates being decorated as an array.\n}"}
{"index": 15428, "repo": "pulsar-client-api-3.0.0", "des": "This interface models a Schema that is composed of two parts.", "code": "public interface KeyValueSchema<K,V> extends Schema<KeyValue<K,V>> {\n\tSchema<K> getKeySchema(); // Get the Schema of the Key.\n\tKeyValueEncodingType getKeyValueEncodingType(); // Get the KeyValueEncodingType.\n\tSchema<V> getValueSchema(); // Get the Schema of the Value.\n}"}
{"index": 14199, "repo": "wicket-core-10.0.0-M1", "des": "If an exception is thrown when a page is being rendered this mapper will decide which error page to show depending on the exception type and application configuration", "code": "public class DefaultExceptionMapper extends Object implements org.apache.wicket.request.IExceptionMapper {\n\tprotected RenderPageRequestHandler createPageRequestHandler(PageProvider pageProvider); // Creates a RenderPageRequestHandler for the target page provided by pageProvider.\n\tprotected Page extractCurrentPage();\n\tprotected org.apache.wicket.request.IRequestHandler handleNestedException(Exception originalException, RuntimeException nestedException); // Handles the case when an exception is generated while mapping the original exception happened\n\tprotected boolean isProcessingAjaxRequest();\n\torg.apache.wicket.request.IRequestHandler map(Exception e);\n\tprotected org.apache.wicket.request.IRequestHandler mapExpectedExceptions(Exception e, Application application); // Maps expected exceptions (i.e.\n\tprotected org.apache.wicket.request.IRequestHandler mapUnexpectedExceptions(Exception e, Application application); // Maps unexpected exceptions to their corresponding IRequestHandler.\n}"}
{"index": 17098, "repo": "spring-integration-core-6.1.2", "des": "Chained utility methods to simplify some Java repetitive code.", "code": "public final class JavaUtils extends Object {\n\t<T1, T2> JavaUtils acceptIfCondition(boolean condition, T1 t1, T2 t2, BiConsumer<T1,T2> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the condition is true.\n\t<T> JavaUtils acceptIfCondition(boolean condition, T value, Consumer<T> consumer); // Invoke Consumer.accept(Object) with the value if the condition is true.\n\tJavaUtils acceptIfHasText(String value, Consumer<String> consumer); // Invoke Consumer.accept(Object) with the value if it is not null or empty.\n\t<T> JavaUtils acceptIfHasText(T t1, String value, BiConsumer<T,String> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the value argument is not null or empty.\n\t<T> JavaUtils acceptIfNotEmpty(List<T> value, Consumer<List<T>> consumer); // Invoke Consumer.accept(Object) with the value if it is not null or empty.\n\t<T> JavaUtils acceptIfNotEmpty(T[] value, Consumer<T[]> consumer); // Invoke Consumer.accept(Object) with the value if it is not null or empty.\n\t<T1, T2> JavaUtils acceptIfNotNull(T1 t1, T2 t2, BiConsumer<T1,T2> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the t2 argument is not null.\n\t<T> JavaUtils acceptIfNotNull(T value, Consumer<T> consumer); // Invoke Consumer.accept(Object) with the value if it is not null.\n}"}
{"index": 16280, "repo": "spring-r2dbc-6.0.11", "des": "Value object representing value and null bindings for a Statement using BindMarkers.", "code": "public class Bindings extends Object implements Iterable<Bindings.Binding> {\n\tBindings and(Bindings other); // Merge this bindings with an other Bindings object and create a new merged Bindings object.\n\tvoid apply(BindTarget bindTarget); // Apply the bindings to a BindTarget.\n\tstatic Bindings empty(); // Return an empty Bindings object.\n\tvoid forEach(Consumer<? super Bindings.Binding> action); // Perform the given action for each binding of this Bindings until all bindings have been processed or the action throws an exception.\n\tprotected Map<BindMarker,Bindings.Binding> getBindings();\n\tIterator<Bindings.Binding> iterator();\n\tstatic Bindings merge(Bindings left, Bindings right); // Merge this bindings with an other Bindings object and create a new merged Bindings object.\n\tSpliterator<Bindings.Binding> spliterator();\n}"}
{"index": 11163, "repo": "tribuo-core-4.3.1", "des": "An interface for things that can train predictive models.", "code": "public interface Trainer<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<TrainerProvenance> {\n\tint getInvocationCount(); // The number of times this trainer instance has had it's train method invoked.\n\tdefault void setInvocationCount(int invocationCount); // Set the internal state of the trainer to the provided number of invocations of the train method.\n\tdefault Model<T> train(Dataset<T> examples); // Trains a predictive model using the examples in the given data set.\n\tModel<T> train(Dataset<T> examples, Map<String,com.oracle.labs.mlrg.olcut.provenance.Provenance> runProvenance); // Trains a predictive model using the examples in the given data set.\n\tdefault Model<T> train(Dataset<T> examples, Map<String,com.oracle.labs.mlrg.olcut.provenance.Provenance> runProvenance, int invocationCount); // Trains a predictive model using the examples in the given data set.\n}"}
{"index": 18149, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Second level cache statistics of a specific region", "code": "Interface CacheRegionStatistics {\n\tlong getElementCountInMemory(); // The number of elements currently in memory within the cache provider.\n\tlong getElementCountOnDisk(); // The number of elements currently stored to disk within the cache provider.\n\tlong getHitCount(); // The number of successful cache look-ups against the region since the last Statistics clearing\n\tlong getMissCount(); // The number of unsuccessful cache look-ups against the region since the last Statistics clearing\n\tlong getPutCount(); // The number of cache puts into the region since the last Statistics clearing\n\tjava.lang.String getRegionName();\n\tlong getSizeInMemory(); // The size that the in-memory elements take up within the cache provider.\n}"}
{"index": 7883, "repo": "nifi-framework-core-api-1.22.0", "des": "Specifies the concurrency level of a Process Group.", "code": "Enum FlowFileConcurrency {\n\tstatic FlowFileConcurrency valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FlowFileConcurrency[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2125, "repo": "hive-exec-4.0.0-alpha-2", "des": "The class shouldn't be used, and only to align the implementation of vectorization UDF for struct field.", "code": "Class GenericUDFStructField {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 10839, "repo": "spring-boot-actuator-3.1.1", "des": "EndpointDiscoverer for servlet endpoints.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointDiscoverer.ServletEndpointDiscovererRuntimeHints.class) public class ServletEndpointDiscoverer extends EndpointDiscoverer<ExposableServletEndpoint,Operation> implements ServletEndpointsSupplier {\n\tprotected ExposableServletEndpoint createEndpoint(Object endpointBean, EndpointId id, boolean enabledByDefault, Collection<Operation> operations); // Factory method called to create the endpoint.\n\tprotected Operation createOperation(EndpointId endpointId, DiscoveredOperationMethod operationMethod, OperationInvoker invoker); // Factory method to create an endpoint operation.\n\tprotected EndpointDiscoverer.OperationKey createOperationKey(Operation operation); // Create an EndpointDiscoverer.OperationKey for the given operation.\n\tprotected boolean isEndpointTypeExposed(Class<?> beanType); // Determine if an endpoint bean should be exposed.\n}"}
{"index": 6704, "repo": "lucene-analyzers-common-8.11.2", "des": "This interface is used to connect the XML pattern file parser to the hyphenation tree.", "code": "Interface PatternConsumer {\n\tvoid addClass(String chargroup); // Add a character class.\n\tvoid addException(String word, ArrayList<Object> hyphenatedword); // Add a hyphenation exception.\n\tvoid addPattern(String pattern, String values); // Add hyphenation patterns.\n}"}
{"index": 9436, "repo": "hadoop-yarn-api-3.3.6", "des": "A class that holds the error code for one entity.", "code": "Class TimelineWriteResponse.TimelineWriteError {\n\tString getEntityId(); // Get the entity Id.\n\tString getEntityType(); // Get the entity type.\n\tint getErrorCode(); // Get the error code.\n\tvoid setEntityId(String id); // Set the entity Id.\n\tvoid setEntityType(String type); // Set the entity type.\n\tvoid setErrorCode(int code); // Set the error code to the given error code.\n}"}
{"index": 2668, "repo": "mahout-core-14.1", "des": "Open hash map from long keys to byte values.", "code": "Class OpenLongByteHashMap {\n\tbyte adjustOrPutValue(long key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(long key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(LongProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(LongByteProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(long key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(long key);\n\tprotected int indexOfKey(long key);\n\tprotected int indexOfValue(byte value);\n\tIterator<OpenLongByteHashMap.MapElement> iterator();\n\tvoid keys(LongArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(LongByteProcedure condition, LongArrayList keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(long key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(long key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 1009, "repo": "ignite-core-2.15.0", "des": "Long metric implementation based on LongAdder.", "code": "Class LongAdderMetric {\n\tvoid add(long x); // Adds x to the metric.\n\tvoid decrement(); // Adds -1 to the metric.\n\tvoid increment(); // Adds 1 to the metric.\n\tvoid reset(); // Resets metric state.\n\tlong value();\n}"}
{"index": 13846, "repo": "spring-webflux-6.0.11", "des": "Abstract base class for URL-mapped HandlerMapping implementations.", "code": "public abstract class AbstractUrlHandlerMapping extends AbstractHandlerMapping {\n\treactor.core.publisher.Mono<Object> getHandlerInternal(org.springframework.web.server.ServerWebExchange exchange); // Look up a handler for the given request, returning an empty Mono if no specific one is found.\n\tfinal Map<org.springframework.web.util.pattern.PathPattern,Object> getHandlerMap(); // Return a read-only view of registered path patterns and handlers which may be an actual handler instance or the bean name of lazily initialized handler.\n\tprotected Object lookupHandler(org.springframework.http.server.PathContainer lookupPath, org.springframework.web.server.ServerWebExchange exchange); // Look up a handler instance for the given URL lookup path.\n\tprotected void registerHandler(String[] urlPaths, String beanName); // Register the specified handler for the given URL paths.\n\tprotected void registerHandler(String urlPath, Object handler); // Register the specified handler for the given URL path.\n\tvoid setHandlerPredicate(BiPredicate<Object,org.springframework.web.server.ServerWebExchange> handlerPredicate); // Configure a predicate for extended matching of the handler that was matched by URL path.\n\tvoid setLazyInitHandlers(boolean lazyInitHandlers); // Set whether to lazily initialize handlers.\n\tprotected void validateHandler(Object handler, org.springframework.web.server.ServerWebExchange exchange); // Validate the given handler against the current request.\n}"}
{"index": 7172, "repo": "calcite-core-1.34.0", "des": "Extension to StringBuilder for the purposes of creating SQL queries and expressions.", "code": "Class SqlBuilder {\n\tSqlBuilder append(char c); // Appends a character, without any quoting.\n\tSqlBuilder append(long n); // Appends a number, per StringBuilder.append(long).\n\tSqlBuilder append(SqlString s); // Appends a hygienic SQL string.\n\tSqlBuilder append(String s); // Appends a string, without any quoting.\n\tvoid clear(); // Clears the contents of the buffer.\n\tSqlDialect getDialect(); // Returns the dialect.\n\tString getSql(); // Returns the SQL.\n\tString getSqlAndClear(); // Returns the SQL and clears the buffer.\n\tSqlBuilder identifier(List<String> names); // Appends a compound identifier to this buffer, quoting accordingly.\n\tSqlBuilder identifier(String... names); // Appends one or more identifiers to this buffer, quoting accordingly.\n\tSqlBuilder identifier(String name); // Appends an identifier to this buffer, quoting accordingly.\n\tint indexOf(String str); // Returns the index within this string of the first occurrence of the specified substring.\n\tint indexOf(String str, int fromIndex); // Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.\n\tSqlBuilder insert(int offset, String str); // Inserts the string into this character sequence.\n\tint length(); // Returns the length (character count).\n\tSqlBuilder literal(String s); // Appends a string literal to this buffer.\n\tSqlBuilder literal(Timestamp timestamp); // Appends a timestamp literal to this buffer.\n\tSqlString toSqlString(); // Returns the contents of this SQL buffer as a 'certified kocher' SQL string.\n}"}
{"index": 3584, "repo": "hive-serde-4.0.0-alpha-2", "des": "HiveDeserializer is used to deserialize the data from hadoop Writable to a custom java object that can be of any type that the developer wants.", "code": "Interface Deserializer {\n\tObject deserialize(org.apache.hadoop.io.Writable blob); // Deserialize an object out of a Writable blob.\n\tObjectInspector getObjectInspector(); // Get the object inspector that can be used to navigate through the internal structure of the Object returned from deserialize(...).\n}"}
{"index": 12410, "repo": "spring-data-couchbase-5.1.2", "des": "Utility class to deal with geo/dimensional indexed data and queries.", "code": "public class GeoUtils extends Object {\n\tstatic void convertPointsTo2DRanges(com.couchbase.client.java.json.JsonArray startRange, com.couchbase.client.java.json.JsonArray endRange, boolean isBoundingBox, Point... points); // Convert a sequence of Points describing a polygon to a pair of JsonArray ranges corresponding to that polygon's bounding box, and inject the coordinates into startRange and endRange.\n\tstatic void convertShapeTo2DRanges(com.couchbase.client.java.json.JsonArray startRange, com.couchbase.client.java.json.JsonArray endRange, Shape shape); // Convert a Shape to a pair of JsonArray ranges, injected into startRange and endRange.\n\tstatic double[] getBoundingBoxForNear(Point origin, Distance distance); // Computes the bounding box approximation for a \"near\" query (max distance from a point of origin).\n}"}
{"index": 2101, "repo": "hive-exec-4.0.0-alpha-2", "des": "GenericUDF Class for support of \"INTERVAL (expression) (DAY|YEAR|.", "code": "Class GenericUDFInternalInterval {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 7019, "repo": "calcite-core-1.34.0", "des": "PreparedExplanation is a PreparedResult for an EXPLAIN PLAN statement.", "code": "Class Prepare.PreparedExplain {\n\tString getCode(); // Returns the code generated by preparation.\n\tList<List<String>> getFieldOrigins(); // Returns a list describing, for each result field, the origin of the field as a 4-element list of (database, schema, table, column).\n\tRelDataType getParameterRowType(); // Returns a record type whose fields are the parameters of this statement.\n\tTableModify.Operation getTableModOp(); // Returns the table modification operation corresponding to this statement if it is a table modification statement; otherwise null.\n\tboolean isDml(); // Returns whether this result is for a DML statement, in which case the result set is one row with one column containing the number of rows affected.\n}"}
{"index": 8338, "repo": "spring-ws-3.0.10.RELEASE", "des": "Factory to make XMPPConnection and perform connection and login on the XMPP server.", "code": "Class XmppConnectionFactoryBean {\n\tvoid afterPropertiesSet();\n\tprotected org.jivesoftware.smack.tcp.XMPPTCPConnectionConfiguration createConnectionConfiguration(String host, int port, String serviceName); // Creates the ConnectionConfiguration from the given parameters.\n\tvoid destroy();\n\torg.jivesoftware.smack.tcp.XMPPTCPConnection getObject();\n\tClass<org.jivesoftware.smack.tcp.XMPPTCPConnection> getObjectType();\n\tboolean isSingleton();\n\tvoid setHost(String host); // Sets the server host to connect to.\n\tvoid setPassword(String password);\n\tvoid setPort(int port); // Sets the server port to connect to.\n\tvoid setResource(String resource);\n\tvoid setServiceName(String serviceName); // Sets the service name to connect to.\n\tvoid setUsername(String username);\n}"}
{"index": 14123, "repo": "wicket-core-10.0.0-M1", "des": "The method to be used when submitting a form", "code": "public static enum AjaxRequestAttributes.Method extends Enum<AjaxRequestAttributes.Method> {\n\tstatic AjaxRequestAttributes.Method valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AjaxRequestAttributes.Method[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7431, "repo": "mahout-math-0.13.0", "des": "Open hash map from Object keys to byte values.", "code": "Class OpenObjectByteHashMap<T> {\n\tbyte adjustOrPutValue(T key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(T key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ObjectProcedure<T> procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ObjectByteProcedure<T> procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(T key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(T key);\n\tprotected int indexOfKey(T key);\n\tprotected int indexOfValue(byte value);\n\tvoid keys(List<T> list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ObjectByteProcedure<T> condition, List<T> keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(T key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(T key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 11135, "repo": "tribuo-core-4.3.1", "des": "Contains provenance information for an instance of a Model.", "code": "public class ModelProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance {\n\tboolean equals(Object o);\n\tString getArch(); // The CPU architecture used to create this model.\n\tString getClassName();\n\tDatasetProvenance getDatasetProvenance(); // The training dataset provenance.\n\tcom.oracle.labs.mlrg.olcut.provenance.MapProvenance<? extends com.oracle.labs.mlrg.olcut.provenance.Provenance> getInstanceProvenance(); // Provenance for the specific training run which created this model.\n\tString getJavaVersion(); // The Java version used to create this model.\n\tString getOS(); // The name of the OS used to create this model.\n\tTrainerProvenance getTrainerProvenance(); // The trainer provenance.\n\tOffsetDateTime getTrainingTime(); // The training timestamp.\n\tString getTribuoVersion(); // The Tribuo version used to create this model.\n\tprotected List<com.oracle.labs.mlrg.olcut.util.Pair<String,com.oracle.labs.mlrg.olcut.provenance.Provenance>> internalProvenances(); // Returns a list of all the provenances in this model provenance so subclasses can append to the list.\n\tIterator<com.oracle.labs.mlrg.olcut.util.Pair<String,com.oracle.labs.mlrg.olcut.provenance.Provenance>> iterator(); // Calls internalProvenances() and returns the iterator from that list.\n}"}
{"index": 11220, "repo": "wicket-extensions-10.0.0-M1", "des": "A convenience implementation of column that adds a label to the cell whose model is determined by the provided wicket property expression (same as used by PropertyModel) that is evaluated against the current row's model object", "code": "public class PropertyColumn<T,S> extends AbstractColumn<T,S> implements IExportableColumn<T,S> {\n\torg.apache.wicket.model.IModel<?> getDataModel(org.apache.wicket.model.IModel<T> rowModel); // Factory method for generating a model that will generated the displayed value.\n\tString getPropertyExpression();\n\tvoid populateItem(org.apache.wicket.markup.repeater.Item<ICellPopulator<T>> item, String componentId, org.apache.wicket.model.IModel<T> rowModel); // Implementation of populateItem which adds a label to the cell whose model is the provided property expression evaluated against rowModelObject\n}"}
{"index": 4004, "repo": "zookeeper-3.8.2", "des": "This enum represents the file type of a KeyStore or TrustStore.", "code": "Enum KeyStoreFileType {\n\tstatic KeyStoreFileType fromFilename(String filename); // Detects the type of KeyStore / TrustStore file from the file extension.\n\tstatic KeyStoreFileType fromPropertyValue(String propertyValue); // Converts a property value to a StoreFileType enum.\n\tstatic KeyStoreFileType fromPropertyValueOrFileName(String propertyValue, String filename); // If propertyValue is not null or empty, returns the result of KeyStoreFileType.fromPropertyValue(propertyValue).\n\tString getDefaultFileExtension(); // The file extension that is associated with this file type.\n\tString getPropertyValue(); // The property string that specifies that a key store or trust store should use this store file type.\n\tstatic KeyStoreFileType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic KeyStoreFileType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16981, "repo": "spring-orm-6.0.11", "des": "FactoryBean that exposes a shared JPA EntityManager reference for a given EntityManagerFactory.", "code": "public class SharedEntityManagerBean extends EntityManagerFactoryAccessor implements org.springframework.beans.factory.FactoryBean<EntityManager>, org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\tEntityManager getObject();\n\tClass<? extends EntityManager> getObjectType();\n\tboolean isSingleton();\n\tvoid setEntityManagerInterface(Class<? extends EntityManager> entityManagerInterface); // Specify the EntityManager interface to expose.\n\tvoid setSynchronizedWithTransaction(boolean synchronizedWithTransaction); // Set whether to automatically join ongoing transactions (according to the JPA 2.1 SynchronizationType rules).\n}"}
{"index": 1926, "repo": "hadoop-hdfs-3.3.6", "des": "This class represents replicas that are under block recovery It has a recovery id that is equal to the generation stamp that the replica will be bumped to after recovery The recovery id is used to handle multiple concurrent block recoveries.", "code": "Class ReplicaUnderRecovery {\n\torg.apache.hadoop.hdfs.server.protocol.ReplicaRecoveryInfo createInfo();\n\tboolean equals(Object o);\n\tlong getBytesOnDisk(); // Get the number of bytes that have written to disk\n\torg.apache.hadoop.hdfs.server.datanode.ReplicaInfo getOriginalReplica(); // Get the original replica that's under recovery\n\tlong getRecoveryID(); // Get the recovery id.\n\tHdfsServerConstants.ReplicaState getState(); // Get the replica state\n\tlong getVisibleLength(); // Get the number of bytes that are visible to readers\n\tvoid setBlockId(long blockId);\n\tvoid setGenerationStamp(long gs);\n\tvoid setNumBytes(long numBytes);\n\tvoid setRecoveryID(long recoveryId); // Set the recovery id.\n\tvoid updateWithReplica(org.apache.hadoop.hdfs.server.datanode.StorageLocation replicaLocation); // Update this replica with the StorageLocation found.\n}"}
{"index": 8044, "repo": "commons-compress-1.23.0", "des": "Stream that tracks the number of bytes read.", "code": "Class CountingOutputStream {\n\tprotected void count(long written); // Increments the counter of already written bytes.\n\tlong getBytesWritten(); // Returns the current number of bytes written to this stream.\n\tvoid write(byte[] b);\n\tvoid write(byte[] b, int off, int len);\n\tvoid write(int b);\n}"}
{"index": 9205, "repo": "fontbox-3.0.0-beta1", "des": "This class represents a ligature, which is an entry of the CharMetrics.", "code": "Class Ligature {\n\tString getLigature(); // Getter for property ligature.\n\tString getSuccessor(); // Getter for property successor.\n}"}
{"index": 2031, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticColumn.", "code": "Class DoubleColAddLongColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 8321, "repo": "spring-ws-3.0.10.RELEASE", "des": "The WebServiceMessageFactory serves as a factory for WebServiceMessages.", "code": "Interface WebServiceMessageFactory {\n\tWebServiceMessage createWebServiceMessage(); // Creates a new, empty WebServiceMessage.\n\tWebServiceMessage createWebServiceMessage(InputStream inputStream); // Reads a WebServiceMessage from the given input stream.\n}"}
{"index": 17086, "repo": "spring-integration-core-6.1.2", "des": "A Builder pattern implementation for the options to register IntegrationFlow in the application context.", "code": "public static interface IntegrationFlowContext.IntegrationFlowRegistrationBuilder {\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder addBean(Object bean); // Add an object which will be registered as an IntegrationFlow dependant bean in the application context.\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder addBean(String name, Object bean); // Add an object which will be registered as an IntegrationFlow dependant bean in the application context.\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder autoStartup(boolean autoStartup); // The boolean flag to indication if an IntegrationFlow must be started automatically after registration.\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder id(String id); // Specify an id for the IntegrationFlow to register.\n\tIntegrationFlowContext.IntegrationFlowRegistration register(); // Register an IntegrationFlow and all the dependant and support components in the application context and return an associated IntegrationFlowContext.IntegrationFlowRegistration control object.\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder setSource(Object source); // Set the configuration source Object for this manual Integration flow definition.\n\tdefault IntegrationFlowContext.IntegrationFlowRegistrationBuilder useFlowIdAsPrefix(); // Invoke this method to prefix bean names in the flow with the (required) flow id and a period.\n}"}
{"index": 8721, "repo": "hadoop-yarn-common-3.3.6", "des": "Interface to capture operations on AttributeValue.", "code": "Interface AttributeValue {\n\tboolean compareForOperation(AttributeValue other, AttributeExpressionOperation op); // compare the value against the other based on the AttributeExpressionOperation.\n\tString getValue();\n\tvoid validateAndInitializeValue(String value); // validate the value based on the type and initialize for further compare operations.\n}"}
{"index": 7184, "repo": "calcite-core-1.34.0", "des": "Parse tree for CREATE MATERIALIZED VIEW statement.", "code": "Class SqlCreateMaterializedView {\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n}"}
{"index": 1929, "repo": "hadoop-hdfs-3.3.6", "des": "Manages client short-circuit memory segments on the DataNode.", "code": "Class ShortCircuitRegistry {\n\tShortCircuitRegistry.NewShmInfo createNewMemorySegment(String clientName, org.apache.hadoop.net.unix.DomainSocket sock); // Handle a DFSClient request to create a new memory segment.\n\tString getClientNames(org.apache.hadoop.hdfs.ExtendedBlockId blockId);\n\tint getShmNum();\n\tvoid processBlockInvalidation(org.apache.hadoop.hdfs.ExtendedBlockId blockId); // Invalidate any slot associated with a blockId that we are invalidating (deleting) from this DataNode.\n\tvoid processBlockMlockEvent(org.apache.hadoop.hdfs.ExtendedBlockId blockId); // Process a block mlock event from the FsDatasetCache.\n\tboolean processBlockMunlockRequest(org.apache.hadoop.hdfs.ExtendedBlockId blockId); // Mark any slots associated with this blockId as unanchorable.\n\tvoid registerSlot(org.apache.hadoop.hdfs.ExtendedBlockId blockId, org.apache.hadoop.hdfs.shortcircuit.ShortCircuitShm.SlotId slotId, boolean isCached);\n\tvoid removeShm(org.apache.hadoop.hdfs.shortcircuit.ShortCircuitShm shm);\n\tvoid shutdown();\n\tvoid unregisterSlot(org.apache.hadoop.hdfs.shortcircuit.ShortCircuitShm.SlotId slotId);\n\tboolean visit(ShortCircuitRegistry.Visitor visitor);\n}"}
{"index": 12627, "repo": "spring-data-mongodb-4.1.2", "des": "Gateway to Arithmetic aggregation operations that perform math operations on numbers.", "code": "public class ArithmeticOperators extends Object {\n\tstatic ArithmeticOperators.Rand rand(); // Creates new AggregationExpression that returns a random float between 0 and 1 each time it is called.\n\tstatic ArithmeticOperators.ArithmeticOperatorFactory valueOf(String fieldReference); // Take the field referenced by given fieldReference.\n\tstatic ArithmeticOperators.ArithmeticOperatorFactory valueOf(AggregationExpression expression); // Take the value resulting from the given AggregationExpression.\n}"}
{"index": 3094, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "BloomFilter is a probabilistic data structure for set membership check.", "code": "Class BloomFilter {\n\tvoid add(byte[] val);\n\tvoid addBytes(byte[] val, int offset, int length);\n\tvoid addDouble(double val);\n\tvoid addLong(long val);\n\tvoid addString(String val);\n\tstatic BloomFilter deserialize(InputStream in); // Deserialize a bloom filter Read a byte stream, which was written by serialize(OutputStream, BloomFilter) into a BloomFilter\n\tlong[] getBitSet();\n\tint getBitSize();\n\tint getNumHashFunctions();\n\tvoid merge(BloomFilter that); // Merge the specified bloom filter with current bloom filter.\n\tstatic void mergeBloomFilterBytes(byte[] bf1Bytes, int bf1Start, int bf1Length, byte[] bf2Bytes, int bf2Start, int bf2Length); // Merges BloomFilter bf2 into bf1.\n\tvoid reset();\n\tstatic void serialize(OutputStream out, BloomFilter bloomFilter); // Serialize a bloom filter\n\tlong sizeInBytes();\n\tboolean test(byte[] val);\n\tboolean testBytes(byte[] val, int offset, int length);\n\tboolean testDouble(double val);\n\tboolean testLong(long val);\n\tboolean testString(String val);\n}"}
{"index": 3425, "repo": "nifi-api-1.22.0", "des": "Indicates the valid values for the state of a Triggerable entity with respect to scheduling the entity to run.", "code": "Enum ScheduledState {\n\tstatic ScheduledState valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ScheduledState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13169, "repo": "spring-test-6.0.11", "des": "BootstrapContext encapsulates the context in which the Spring TestContext Framework is bootstrapped.", "code": "public interface BootstrapContext {\n\tCacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate(); // Get the CacheAwareContextLoaderDelegate to use for transparent interaction with the ContextCache.\n\tClass<?> getTestClass(); // Get the test class for this bootstrap context.\n}"}
{"index": 3302, "repo": "hbase-common-3.0.0-alpha-4", "des": "This class is an extension to ContentSizeCachedKeyValue where there are no tags in Cell.", "code": "Class SizeCachedNoTagsKeyValue {\n\tint getSerializedSize(boolean withTags); // KeyValue format <4 bytes keylength> <4 bytes valuelength> <2 bytes rowlength> <row> <1 byte columnfamilylength> <columnfamily> <columnqualifier> <8 bytes timestamp> <1 byte keytype> <value> <2 bytes tagslength> <tags>\n\tint getTagsLength(); // Return the total length of the tag bytes\n\tint write(OutputStream out, boolean withTags); // Write this cell to an OutputStream in a KeyValue format.\n}"}
{"index": 8466, "repo": "commons-io-2.13.0", "des": "Writer implementation that writes the data to an Appendable Object.", "code": "Class AppendableWriter<T extends Appendable> {\n\tWriter append(char c); // Appends the specified character to the underlying appendable.\n\tWriter append(CharSequence csq); // Appends the specified character sequence to the underlying appendable.\n\tWriter append(CharSequence csq, int start, int end); // Appends a subsequence of the specified character sequence to the underlying appendable.\n\tvoid close(); // Closes the stream.\n\tvoid flush(); // Flushes the stream.\n\tT getAppendable(); // Return the target appendable.\n\tvoid write(char[] cbuf, int off, int len); // Writes a portion of an array of characters to the underlying appendable.\n\tvoid write(int c); // Writes a character to the underlying appendable.\n\tvoid write(String str, int off, int len); // Writes a portion of a String to the underlying appendable.\n}"}
{"index": 5430, "repo": "druid-processing-26.0.0", "des": "Main interface for \"serializeable something\" in Druid segment serialization.", "code": "Interface Serializer {\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 5718, "repo": "freemarker-2.3.32", "des": "Legacy blacklist based member access policy, used only to keep old behavior, as it can't provide meaningful safety.", "code": "Class LegacyDefaultMemberAccessPolicy {\n\tClassMemberAccessPolicy forClass(java.lang.Class<?> containingClass); // Returns the ClassMemberAccessPolicy that encapsulates the member access policy for a given class.\n\tboolean isToStringAlwaysExposed(); // If this returns true, we won't invoke the probably more expensive lookup to figure out if Object.toString() (including its overridden variants) is exposed for a given object.\n}"}
{"index": 9310, "repo": "hadoop-yarn-api-3.3.6", "des": "Interface to abstract out the the actual processing logic of the Application Master Service.", "code": "Interface ApplicationMasterServiceProcessor {\n\tvoid allocate(ApplicationAttemptId appAttemptId, AllocateRequest request, AllocateResponse response); // Allocate call.\n\tvoid finishApplicationMaster(ApplicationAttemptId applicationAttemptId, FinishApplicationMasterRequest request, FinishApplicationMasterResponse response); // Finish AM.\n\tvoid init(ApplicationMasterServiceContext amsContext, ApplicationMasterServiceProcessor nextProcessor); // Initialize with and ApplicationMasterService Context as well as the next processor in the chain.\n\tvoid registerApplicationMaster(ApplicationAttemptId applicationAttemptId, RegisterApplicationMasterRequest request, RegisterApplicationMasterResponse response); // Register AM attempt.\n}"}
{"index": 883, "repo": "ignite-core-2.15.0", "des": "Defines a predicate which accepts two parameters and returns true or false.", "code": "Interface IgniteBiPredicate<E1,E2> {\n\tdefault IgniteBiPredicate<E1,E2> and(IgniteBiPredicate<E1,E2> then); // Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another.\n\tboolean apply(E1 e1, E2 e2); // Predicate body.\n}"}
{"index": 3054, "repo": "tink-1.10.0", "des": "Class that provides the functionality expressed by the Mac primitive using a Prf implementation.", "code": "Class PrfMac {\n\tbyte[] computeMac(byte[] data); // Computes message authentication code (MAC) for data.\n\tstatic Mac create(AesCmacKey key); // Creates an object implementing the Mac interface using an AesCmac underneath.\n\tstatic Mac create(HmacKey key); // Creates an object implementing the Mac interface using an Hmac underneath.\n\tvoid verifyMac(byte[] mac, byte[] data); // Verifies whether mac is a correct authentication code (MAC) for data.\n}"}
{"index": 4204, "repo": "jackson-core-2.15.2", "des": "Marker interface that is to be implemented by data format - specific features.", "code": "Interface FormatFeature {\n\tboolean enabledByDefault(); // Accessor for checking whether this feature is enabled by default.\n\tboolean enabledIn(int flags); // Convenience method for checking whether feature is enabled in given bitmask\n\tint getMask(); // Returns bit mask for this feature instance; must be a single bit, that is of form (1 << N)\n}"}
{"index": 17044, "repo": "spring-integration-core-6.1.2", "des": "The AbstractRequestHandlerAdvice implementation for caching AbstractReplyProducingMessageHandler.RequestHandler#handleRequestMessage(Message) results.", "code": "public class CacheRequestHandlerAdvice extends AbstractRequestHandlerAdvice implements org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterSingletonsInstantiated();\n\tprotected Object doInvoke(AbstractRequestHandlerAdvice.ExecutionCallback callback, Object target, org.springframework.messaging.Message<?> message); // Subclasses implement this method to apply behavior to the MessageHandler.\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setCacheManager(org.springframework.cache.CacheManager cacheManager); // Configure a common CacheManager if some CacheOperation comes without it.\n\tvoid setCacheOperations(org.springframework.cache.interceptor.CacheOperation... cacheOperations); // Configure a set of CacheOperation which are going to be applied to the AbstractReplyProducingMessageHandler.RequestHandler#handleRequestMessage(Message) method via CacheRequestHandlerAdvice.IntegrationCacheAspect.\n\tvoid setCacheResolver(org.springframework.cache.interceptor.CacheResolver cacheResolver); // Configure a common CacheResolver if some CacheOperation comes without it.\n\tvoid setErrorHandler(org.springframework.cache.interceptor.CacheErrorHandler errorHandler); // Set the CacheErrorHandler instance to use to handle errors thrown by the cache provider.\n\tvoid setKeyExpression(org.springframework.expression.Expression keyExpression); // Configure a SpEL expression to evaluate a cache key at runtime against a request message.\n\tvoid setKeyExpressionString(String keyExpression); // Configure an expression in SpEL style to evaluate a cache key at runtime against a request message.\n\tvoid setKeyFunction(Function<org.springframework.messaging.Message<?>,?> keyFunction); // Configure a Function to evaluate a cache key at runtime against a request message.\n}"}
{"index": 9437, "repo": "hadoop-yarn-api-3.3.6", "des": "Token is the security entity used by the framework to verify authenticity of any resource.", "code": "Class Token {\n\tabstract ByteBuffer getIdentifier(); // Get the token identifier.\n\tabstract String getKind(); // Get the token kind.\n\tabstract ByteBuffer getPassword(); // Get the token password\n\tabstract String getService(); // Get the service to which the token is allocated.\n\tstatic Token newInstance(byte[] identifier, String kind, byte[] password, String service);\n\tabstract void setIdentifier(ByteBuffer identifier);\n\tabstract void setKind(String kind);\n\tabstract void setPassword(ByteBuffer password);\n\tabstract void setService(String service);\n}"}
{"index": 13969, "repo": "spring-webflux-6.0.11", "des": "HandlerAdapter that allows using the plain WebHandler contract with the generic DispatcherHandler.", "code": "public class SimpleHandlerAdapter extends Object implements HandlerAdapter {\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler); // Handle the request with the given handler, previously checked via HandlerAdapter.supports(Object).\n\tboolean supports(Object handler); // Whether this HandlerAdapter supports the given handler.\n}"}
{"index": 12014, "repo": "jena-core-4.9.0", "des": "Some support for the Character Model Recommendation from the W3C (currently in second last call working draft).", "code": "public class CharacterModel extends Object {\n\tstatic boolean isComposingChar(char x); // Is the character a composing character as defined by the Character Model 2nd Last Call Working Draft.\n\tstatic boolean isFullyNormalizedConstruct(String str); // Is this string fully normalized as defined by the Character Model 2nd Last Call Working Draft.\n\tstatic boolean isNormalFormC(String str); // Is this string in Unicode Normal Form C.\n\tstatic boolean startsWithComposingCharacter(String str);\n}"}
{"index": 15405, "repo": "spring-security-crypto-6.1.2", "des": "A generator for unique byte array-based keys.", "code": "public interface BytesKeyGenerator {\n\tbyte[] generateKey(); // Generate a new key.\n\tint getKeyLength(); // Get the length, in bytes, of keys created by this generator.\n}"}
{"index": 10032, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Interface used for allocator to notify newly allocated and completed containers.", "code": "Interface ContainerAllocatorListener {\n\tvoid allocated(List<Container> allocatedContainers); // Invoked when new containers are allocated.\n\tvoid completed(List<ContainerStatus> completedContainers); // Invoked when containers are releases and thus marked as completed.\n}"}
{"index": 739, "repo": "ignite-core-2.15.0", "des": "Listener interface for notifying on nodes joining or leaving remote grid.", "code": "Interface GridClientTopologyListener {\n\tvoid onNodeAdded(GridClientNode node); // Callback for new nodes joining the remote grid.\n\tvoid onNodeRemoved(GridClientNode node); // Callback for nodes leaving the remote grid.\n}"}
{"index": 7178, "repo": "calcite-core-1.34.0", "des": "A sql type name specification of collection type.", "code": "Class SqlCollectionTypeNameSpec {\n\tRelDataType deriveType(SqlValidator validator); // Derive type from this SqlTypeNameSpec.\n\tboolean equalsDeep(SqlTypeNameSpec spec, Litmus litmus); // Returns whether this spec is structurally equivalent to another spec.\n\tSqlTypeNameSpec getElementTypeName();\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this spec to a writer.\n}"}
{"index": 11922, "repo": "maven-core-4.0.0-alpha-7", "des": "Helps to provide backward-compatibility with plugins that use legacy components.", "code": "@Named @Singleton public class DefaultLegacySupport extends Object implements LegacySupport {\n\torg.eclipse.aether.RepositorySystemSession getRepositorySession(); // Gets the currently active repository session.\n\tMavenSession getSession(); // Gets the currently active session.\n\tvoid setSession(MavenSession session); // Sets the currently active session.\n}"}
{"index": 1902, "repo": "hadoop-hdfs-3.3.6", "des": "An anonymous reference with reference count.", "code": "Class INodeReference.WithCount {\n\tvoid addReference(INodeReference ref); // Increment and then return the reference count.\n\tINodeReference.WithName getLastWithName(); // Return the last WithName reference if there is any, null otherwise.\n\tINodeReference getParentRef(int snapshotId);\n\tint getReferenceCount();\n\tvoid removeReference(INodeReference ref); // Decrement and then return the reference count.\n}"}
{"index": 13188, "repo": "spring-test-6.0.11", "des": "TestExecutionListener which provides support for marking the ApplicationContext associated with a test as dirty for both test classes and test methods annotated with the @DirtiesContext annotation.", "code": "public class DirtiesContextTestExecutionListener extends AbstractDirtiesContextTestExecutionListener {\n\tvoid afterTestClass(TestContext testContext); // If the test class of the supplied test context is annotated with @DirtiesContext and the class mode is set to AFTER_CLASS, the application context of the test context will be marked as dirty, and the REINJECT_DEPENDENCIES_ATTRIBUTE in the test context will be set to true.\n\tvoid afterTestMethod(TestContext testContext); // If the current test method of the supplied test context is annotated with @DirtiesContext and the method mode is set to AFTER_METHOD, or if the test class is annotated with @DirtiesContext and the class mode is set to AFTER_EACH_TEST_METHOD, the application context of the test context will be marked as dirty and the REINJECT_DEPENDENCIES_ATTRIBUTE in the test context will be set to true.\n\tfinal int getOrder(); // Returns 3000.\n}"}
{"index": 7713, "repo": "cassandra-all-4.1.2", "des": "PartitionDenylist uses the system_distributed.", "code": "Class PartitionDenylist {\n\tboolean addKeyToDenylist(java.lang.String keyspace, java.lang.String table, java.nio.ByteBuffer key); // We expect the caller to confirm that we are working with a valid keyspace and table.\n\tint getDeniedKeysInRangeCount(java.lang.String keyspace, java.lang.String table, AbstractBounds<PartitionPosition> range);\n\tint getDeniedKeysInRangeCount(TableId tid, AbstractBounds<PartitionPosition> range);\n\tint getLoadAttempts();\n\tint getLoadSuccesses();\n\tvoid initialLoad(); // Performs initial load of the partition denylist.\n\tboolean isKeyPermitted(java.lang.String keyspace, java.lang.String table, java.nio.ByteBuffer key);\n\tboolean isKeyPermitted(TableId tid, java.nio.ByteBuffer key);\n\tvoid load(); // We need to fully rebuild a new cache to accommodate deleting items from the denylist and potentially shrinking the max allowable size in the list.\n\tboolean removeKeyFromDenylist(java.lang.String keyspace, java.lang.String table, java.nio.ByteBuffer key); // We expect the caller to confirm that we are working with a valid keyspace and table.\n}"}
{"index": 3969, "repo": "zookeeper-3.8.2", "des": "Using BitSet to store all the elements, and use HashSet to cache limited number of elements to find a balance between memory and time complexity.", "code": "Class BitHashSet {\n\tboolean add(Integer elementBit);\n\tint cachedSize();\n\tboolean contains(Integer elementBit);\n\tboolean isEmpty();\n\tIterator<Integer> iterator(); // This function is not thread-safe, need to synchronized when iterate through this set.\n\tboolean remove(Integer elementBit);\n\tint remove(Set<Integer> bitSet, BitSet bits); // Remove the watches, and return the number of watches being removed.\n\tint size();\n}"}
{"index": 11317, "repo": "spring-context-6.0.11", "des": "Formats fields annotated with the DateTimeFormat annotation using a DateFormatter.", "code": "public class DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat> {\n\tSet<Class<?>> getFieldTypes(); // The types of fields that may be annotated with the <A> annotation.\n\tprotected Formatter<Date> getFormatter(DateTimeFormat annotation, Class<?> fieldType);\n\tParser<?> getParser(DateTimeFormat annotation, Class<?> fieldType); // Get the Parser to parse a submitted value for a field of fieldType annotated with annotation.\n\tPrinter<?> getPrinter(DateTimeFormat annotation, Class<?> fieldType); // Get the Printer to print the value of a field of fieldType annotated with annotation.\n}"}
{"index": 12205, "repo": "jena-core-4.9.0", "des": "Reasoner configuration for the OWL mini reasoner.", "code": "public class OWLMiniReasoner extends GenericRuleReasoner implements Reasoner {\n\tInfGraph bind(Graph data); // Attach the reasoner to a set of RDF data to process.\n\tCapabilities getGraphCapabilities(); // Return the Jena Graph Capabilties that the inference graphs generated by this reasoner are expected to conform to.\n\tstatic List<Rule> loadRules(); // Return the rule set, loading it in if necessary\n}"}
{"index": 8309, "repo": "spring-ws-3.0.10.RELEASE", "des": "A TransportInputStream is an input stream with MIME input headers.", "code": "Class TransportInputStream {\n\tint available();\n\tvoid close();\n\tprotected abstract InputStream createInputStream(); // Returns the input stream to read from.\n\tabstract Iterator<String> getHeaderNames(); // Returns an iteration over all the header names this stream contains.\n\tabstract Iterator<String> getHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tvoid mark(int readlimit);\n\tboolean markSupported();\n\tint read();\n\tint read(byte[] b);\n\tint read(byte[] b, int off, int len);\n\tvoid reset();\n\tlong skip(long n);\n}"}
{"index": 12908, "repo": "spring-data-mongodb-4.1.2", "des": "Builder for creating TailableCursorRequest.", "code": "public static class TailableCursorRequest.TailableCursorRequestBuilder<T> extends Object {\n\tTailableCursorRequest<T> build();\n\tTailableCursorRequest.TailableCursorRequestBuilder<T> collection(String collectionName); // Set the name of the MongoCollection to listen to.\n\tTailableCursorRequest.TailableCursorRequestBuilder<T> filter(Query filter); // Set the filter to apply.\n\tTailableCursorRequest.TailableCursorRequestBuilder<T> publishTo(MessageListener<org.bson.Document,? super T> messageListener); // Set the MessageListener event messages will be published to.\n}"}
{"index": 5908, "repo": "hadoop-yarn-server-common-3.3.6", "des": "The request from the NodeManager to the SharedCacheManager that requests whether it can upload a resource in the shared cache.", "code": "Class SCMUploaderCanUploadRequest {\n\tabstract String getResourceKey(); // Get the key of the resource that would be uploaded to the shared cache.\n\tabstract void setResourceKey(String key); // Set the key of the resource that would be uploaded to the shared cache.\n}"}
{"index": 12405, "repo": "spring-data-couchbase-5.1.2", "des": "Terminating operations invoking the actual execution.", "code": "public static interface ExecutableRemoveByIdOperation.TerminatingRemoveById extends OneAndAllId<RemoveResult> {\n\tList<RemoveResult> all(Collection<String> ids); // Remove the documents in the collection.\n\tList<RemoveResult> allEntities(Collection<Object> entities); // Remove documents based on the entities.\n\tRemoveResult one(String id); // Remove one document based on the given ID.\n\tRemoveResult oneEntity(Object entity); // Remove one document based on the entity.\n}"}
{"index": 14434, "repo": "wicket-core-10.0.0-M1", "des": "Add Subresource integrity and crossOrigin to all ISubresourceHeaderItems.", "code": "public abstract class SubresourceHeaderResponse extends DecoratingHeaderResponse {\n\tprotected abstract void configure(ISubresourceHeaderItem item); // Configure the item Subresource.\n\tvoid render(HeaderItem item); // Renders the given HeaderItem to the response if none of its tokens has been rendered before.\n}"}
{"index": 12431, "repo": "spring-data-couchbase-5.1.2", "des": "Terminating operations invoking the actual execution.", "code": "public static interface ReactiveUpsertByIdOperation.TerminatingUpsertById<T> extends OneAndAllEntityReactive<T> {\n\treactor.core.publisher.Flux<? extends T> all(Collection<? extends T> objects); // Insert a collection of entities.\n\treactor.core.publisher.Mono<T> one(T object); // Upsert one entity.\n}"}
{"index": 3366, "repo": "hadoop-azure-3.3.6", "des": "Returns an Azure Active Directory token when requested.", "code": "Class AccessTokenProvider {\n\tAzureADToken getToken(); // returns the AzureADToken cached (or retrieved) by this instance.\n\tprotected boolean isTokenAboutToExpire(); // Checks if the token is about to expire in the next 5 minutes.\n\tprotected abstract AzureADToken refreshToken(); // the method to fetch the access token.\n}"}
{"index": 11856, "repo": "spring-kafka-3.0.9", "des": "Generic Serializer for sending Java objects to Kafka as JSON.", "code": "public class JsonSerializer<T> extends Object implements org.apache.kafka.common.serialization.Serializer<T> {\n\tvoid close();\n\tvoid configure(Map<String,?> configs, boolean isKey);\n\t<X> JsonSerializer<X> copyWithType(com.fasterxml.jackson.core.type.TypeReference<? super X> newTargetType); // Copies this serializer with same configuration, except new target type reference is used.\n\t<X> JsonSerializer<X> copyWithType(com.fasterxml.jackson.databind.JavaType newTargetType); // Copies this serializer with same configuration, except new target java type is used.\n\t<X> JsonSerializer<X> copyWithType(Class<? super X> newTargetType); // Copies this serializer with same configuration, except new target type reference is used.\n\tprotected static Map<String,Class<?>> createMappings(String mappings);\n\tJsonSerializer<T> forKeys(); // Designate this serializer for serializing keys (default is values); only applies if the default type mapper is used.\n\tJackson2JavaTypeMapper getTypeMapper();\n\tboolean isAddTypeInfo();\n\tJsonSerializer<T> noTypeInfo(); // Do not include type info headers.\n\tbyte[] serialize(String topic, org.apache.kafka.common.header.Headers headers, T data);\n\tbyte[] serialize(String topic, T data);\n\tvoid setAddTypeInfo(boolean addTypeInfo); // Set to false to disable adding type info headers.\n\tvoid setTypeMapper(Jackson2JavaTypeMapper typeMapper); // Set a customized type mapper.\n\tvoid setUseTypeMapperForKey(boolean isKey); // Configure the default Jackson2JavaTypeMapper to use key type headers.\n\tJsonSerializer<T> typeMapper(Jackson2JavaTypeMapper mapper); // Use the supplied Jackson2JavaTypeMapper.\n}"}
{"index": 16669, "repo": "spring-beans-6.0.11", "des": "Public delegate for resolving autowirable parameters on externally managed constructors and methods.", "code": "public final class ParameterResolutionDelegate extends Object {\n\tstatic boolean isAutowirable(Parameter parameter, int parameterIndex); // Determine if the supplied Parameter can potentially be autowired from an AutowireCapableBeanFactory.\n\tstatic Object resolveDependency(Parameter parameter, int parameterIndex, Class<?> containingClass, AutowireCapableBeanFactory beanFactory); // Resolve the dependency for the supplied Parameter from the supplied AutowireCapableBeanFactory.\n}"}
{"index": 14108, "repo": "wicket-core-10.0.0-M1", "des": "An ajax submit button that will degrade to a normal request if ajax is not available or javascript is disabled.", "code": "public abstract class AjaxFallbackButton extends Button {\n\tForm<?> getForm(); // Override to not throw exception if there is no parent form.\n\tprotected final boolean isButtonEnabled(); // Helper methods that both checks whether the link is enabled and whether the action ENABLE is allowed.\n\tprotected AjaxFormSubmitBehavior newAjaxEventBehavior(Form<?> form, String event);\n\tfinal void onAfterSubmit(); // Override this method to provide special submit handling in a multi-button form.\n\tprotected void onAfterSubmit(Optional<AjaxRequestTarget> target); // Callback for the onClick event.\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tfinal void onError(); // Method that is invoked when form processing fails; for example, when there are validation errors.\n\tprotected void onError(Optional<AjaxRequestTarget> target); // Listener method invoked on form submit with errors.\n\tfinal void onSubmit(); // Override this method to provide special submit handling in a multi-button form.\n\tprotected void onSubmit(Optional<AjaxRequestTarget> target); // Callback for the onClick event.\n\tprotected boolean shouldTriggerJavaScriptSubmitEvent(); // Controls whether or not a JS submit should be triggered on the submitting form.\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes);\n}"}
{"index": 9061, "repo": "hbase-server-3.0.0-alpha-4", "des": "A manager for filesystem space quotas in the RegionServer.", "code": "Class RegionServerSpaceQuotaManager {\n\tboolean areCompactionsDisabled(TableName tableName); // Returns whether or not compactions should be disabled for the given tableName per a space quota violation policy.\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.RegionServerStatusProtos.FileArchiveNotificationRequest buildFileArchiveRequest(TableName tn, Collection<Map.Entry<String,Long>> archivedFiles); // Builds the protobuf message to inform the Master of files being archived.\n\tMap<TableName,SpaceQuotaSnapshot> copyQuotaSnapshots(); // Copies the last SpaceQuotaSnapshots that were recorded.\n\tvoid disableViolationPolicyEnforcement(TableName tableName); // Disables enforcement on any violation policy on the given tableName.\n\tvoid enforceViolationPolicy(TableName tableName, SpaceQuotaSnapshot snapshot); // Enforces the given violationPolicy on the given table in this RegionServer.\n\tActivePolicyEnforcement getActiveEnforcements(); // Creates an object well-suited for the RegionServer to use in verifying active policies.\n\tMap<TableName,SpaceQuotaSnapshot> getActivePoliciesAsMap(); // Converts a map of table to SpaceViolationPolicyEnforcements into SpaceViolationPolicys.\n\tRegionSizeStore getRegionSizeStore(); // Returns the RegionSizeStore tracking filesystem utilization by each region.\n\tboolean isStarted(); // Returns if the Chore has been started.\n\tvoid start();\n\tvoid stop();\n\tvoid updateQuotaSnapshot(Map<TableName,SpaceQuotaSnapshot> newSnapshots); // Updates the current SpaceQuotaSnapshots for the RegionServer.\n}"}
{"index": 16252, "repo": "maven-model-builder-4.0.0-alpha-7", "des": "Caches auxiliary data used during model building like already processed raw/effective models.", "code": "public interface ModelCache {\n\tObject get(String groupId, String artifactId, String version, String tag); // Gets the specified data from the cache.\n\tdefault <T> T get(String groupId, String artifactId, String version, org.apache.maven.model.building.ModelCacheTag<T> tag); // Gets the specified data from the cache.\n\tdefault Object get(Source path, String tag); // Gets the specified data from the cache.\n\tdefault <T> T get(Source path, org.apache.maven.model.building.ModelCacheTag<T> tag); // Gets the specified data from the cache.\n\tvoid put(String groupId, String artifactId, String version, String tag, Object data); // Puts the specified data into the cache.\n\tdefault <T> void put(String groupId, String artifactId, String version, org.apache.maven.model.building.ModelCacheTag<T> tag, T data); // Puts the specified data into the cache.\n\tdefault void put(Source path, String tag, Object data); // Puts the specified data into the cache.\n\tdefault <T> void put(Source path, org.apache.maven.model.building.ModelCacheTag<T> tag, T data); // Puts the specified data into the cache.\n}"}
{"index": 5500, "repo": "druid-processing-26.0.0", "des": "Interface for writing a sequence of frames.", "code": "Interface WritableFrameChannel {\n\tvoid close(); // Finish writing to this channel.\n\tvoid fail(Throwable cause); // Called prior to close() if the writer has failed.\n\tboolean isClosed(); // Whether close() has been called on this channel.\n\tcom.google.common.util.concurrent.ListenableFuture<?> writabilityFuture(); // Returns a future that resolves when write(org.apache.druid.frame.channel.FrameWithPartition) is able to receive a new frame without blocking or throwing an exception.\n\tdefault void write(Frame frame); // Writes a frame without an attached partition number.\n\tvoid write(FrameWithPartition frameWithPartition); // Writes a frame with an attached partition number.\n}"}
{"index": 14312, "repo": "wicket-core-10.0.0-M1", "des": "The interface of a streaming XML parser as required by Wicket.", "code": "public interface IXmlPullParser {\n\tCharSequence getDoctype(); // Gets the <!DOCTYPE ...> tag if found in the markup\n\tXmlTag getElement();\n\tString getEncoding(); // Return the encoding applied while reading the markup resource.\n\tCharSequence getInput(int fromPos, int toPos); // Wicket dissects the markup into Wicket relevant tags and raw markup, which is not further analyzed by Wicket.\n\tCharSequence getInputFromPositionMarker(int toPos); // Wicket dissects the markup into Wicket relevant tags and raw markup, which is not further analyzed by Wicket.\n\tCharSequence getString();\n\tIXmlPullParser.HttpTagType next(); // Move to the next XML element\n\tvoid parse(InputStream inputStream); // Reads and parses markup from an input stream, using UTF-8 encoding by default when not specified in XML declaration.\n\tvoid parse(InputStream inputStream, String encoding); // Reads and parses markup from an input stream.\n\tvoid parse(CharSequence string); // Parse the markup provided.\n\tvoid setPositionMarker(); // Set the position marker of the markup at the current position.\n\tvoid setPositionMarker(int pos); // Set the position marker of the markup\n}"}
{"index": 13608, "repo": "spring-messaging-6.0.11", "des": "MessageHandler with support for \"user\" destinations.", "code": "public class UserDestinationMessageHandler extends Object implements MessageHandler, org.springframework.context.SmartLifecycle {\n\tString getBroadcastDestination(); // Return the configured destination for unresolved messages.\n\tMessageSendingOperations<String> getBrokerMessagingTemplate(); // Return the messaging template used to send resolved messages to the broker channel.\n\tMessageHeaderInitializer getHeaderInitializer(); // Return the configured header initializer.\n\tUserDestinationResolver getUserDestinationResolver(); // Return the configured UserDestinationResolver.\n\tvoid handleMessage(Message<?> message); // Handle the given message.\n\tfinal boolean isRunning();\n\tvoid setBroadcastDestination(String destination); // Set a destination to broadcast messages to that remain unresolved because the user is not connected.\n\tvoid setHeaderInitializer(MessageHeaderInitializer headerInitializer); // Configure a custom MessageHeaderInitializer to initialize the headers of resolved target messages.\n\tfinal void start();\n\tfinal void stop();\n\tfinal void stop(Runnable callback);\n}"}
{"index": 12835, "repo": "spring-data-mongodb-4.1.2", "des": "Compose insert execution by calling one of the terminating methods.", "code": "public static interface ReactiveInsertOperation.TerminatingInsert<T> {\n\treactor.core.publisher.Flux<T> all(Collection<? extends T> objects); // Insert a collection of objects.\n\treactor.core.publisher.Mono<T> one(T object); // Insert exactly one object.\n}"}
{"index": 2667, "repo": "mahout-core-14.1", "des": "Open hash map from int keys to short values.", "code": "Class OpenIntShortHashMap {\n\tshort adjustOrPutValue(int key, short newValue, short incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(int key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(short value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(IntProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(IntShortProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tshort get(int key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(int key);\n\tprotected int indexOfKey(int key);\n\tprotected int indexOfValue(short value);\n\tIterator<OpenIntShortHashMap.MapElement> iterator();\n\tvoid keys(IntArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(IntShortProcedure condition, IntArrayList keyList, ShortArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(int key, short value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(int key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ShortArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 14016, "repo": "spring-retry-2.0.2", "des": "Low-level access to ongoing retry operation.", "code": "public interface RetryContext extends org.springframework.core.AttributeAccessor {\n\tThrowable getLastThrowable(); // Accessor for the exception object that caused the current retry.\n\tRetryContext getParent(); // Accessor for the parent context if retry blocks are nested.\n\tint getRetryCount(); // Counts the number of retry attempts.\n\tboolean isExhaustedOnly(); // Public accessor for the exhausted flag setExhaustedOnly().\n\tvoid setExhaustedOnly(); // Signal to the framework that no more attempts should be made to try or retry the current RetryCallback.\n}"}
{"index": 15155, "repo": "spring-data-elasticsearch-5.1.2", "des": "Interface defining methods to convert the value of an entity-property to a value in Elasticsearch and back.", "code": "public interface PropertyValueConverter {\n\tObject read(Object value); // Converts an elasticsearch property value to a property value.\n\tObject write(Object value); // Converts a property value to an elasticsearch value.\n}"}
{"index": 13599, "repo": "spring-messaging-6.0.11", "des": "A MessageChannel that maintains a registry of subscribers and invokes them to handle messages sent through this channel.", "code": "public interface SubscribableChannel extends MessageChannel {\n\tboolean subscribe(MessageHandler handler); // Register a message handler.\n\tboolean unsubscribe(MessageHandler handler); // Un-register a message handler.\n}"}
{"index": 18011, "repo": "spring-ws-core-4.0.5", "des": "Convenient implementation of Wsdl11Definition that creates a SOAP 1.1 or 1.2 binding based on naming conventions in one or more inlined XSD schemas.", "code": "public class DefaultWsdl11Definition extends Object implements Wsdl11Definition, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tSource getSource(); // Returns the Source of the definition.\n\tvoid setCreateSoap11Binding(boolean createSoap11Binding); // Indicates whether a SOAP 1.1 binding should be created.\n\tvoid setCreateSoap12Binding(boolean createSoap12Binding); // Indicates whether a SOAP 1.2 binding should be created.\n\tvoid setFaultSuffix(String faultSuffix); // Sets the suffix used to detect fault elements in the schema.\n\tvoid setLocationUri(String locationUri); // Sets the value used for the SOAP Address location attribute value.\n\tvoid setPortTypeName(String portTypeName); // Sets the port type name used for this definition.\n\tvoid setRequestSuffix(String requestSuffix); // Sets the suffix used to detect request elements in the schema.\n\tvoid setResponseSuffix(String responseSuffix); // Sets the suffix used to detect response elements in the schema.\n\tvoid setSchema(org.springframework.xml.xsd.XsdSchema schema); // Sets the single XSD schema to inline.\n\tvoid setSchemaCollection(org.springframework.xml.xsd.XsdSchemaCollection schemaCollection); // Sets the XSD schema collection to inline.\n\tvoid setServiceName(String serviceName); // Sets the service name.\n\tvoid setSoapActions(Properties soapActions); // Sets the SOAP Actions for this binding.\n\tvoid setTargetNamespace(String targetNamespace); // Sets the target namespace used for this definition.\n\tvoid setTransportUri(String transportUri); // Sets the value used for the binding transport attribute value.\n}"}
{"index": 18101, "repo": "spring-ws-core-4.0.5", "des": "A TransportOutputStream is an output stream with MIME input headers.", "code": "public abstract class TransportOutputStream extends OutputStream {\n\tabstract void addHeader(String name, String value); // Adds a header with the given name and value.\n\tvoid close();\n\tprotected abstract OutputStream createOutputStream(); // Returns the output stream to write to.\n\tvoid flush();\n\tvoid write(byte[] b);\n\tvoid write(byte[] b, int off, int len);\n\tvoid write(int b);\n}"}
{"index": 15424, "repo": "pulsar-client-api-3.0.0", "des": "A schema that serializes and deserializes between GenericRecord and bytes.", "code": "@Public @Stable public interface GenericSchema<T extends GenericRecord> extends Schema<T> {\n\tList<Field> getFields(); // Returns the list of fields.\n\tGenericRecordBuilder newRecordBuilder(); // Create a builder to build GenericRecord.\n\tstatic GenericSchema of(SchemaInfo schemaInfo);\n\tstatic GenericSchema of(SchemaInfo schemaInfo, boolean useProvidedSchemaAsReaderSchema);\n}"}
{"index": 14857, "repo": "spring-data-commons-3.1.2", "des": "Extension of Sort to use method handles to define properties to sort by.", "code": "public static class Sort.TypedSort<T> extends Sort {\n\tSort ascending(); // Returns a new Sort with the current setup but ascending order direction.\n\t<S> Sort.TypedSort<S> by(Function<T,S> property);\n\t<S> Sort.TypedSort<S> by(MethodInvocationRecorder.Recorded.ToCollectionConverter<T,S> collectionProperty);\n\t<S> Sort.TypedSort<S> by(MethodInvocationRecorder.Recorded.ToMapConverter<T,S> mapProperty);\n\tSort descending(); // Returns a new Sort with the current setup but descending order direction.\n\tboolean isEmpty(); // Returns whether the current Streamable is empty.\n\tIterator<Sort.Order> iterator();\n}"}
{"index": 10281, "repo": "spring-core-6.0.11", "des": "GeneratedFiles implementation that keeps generated files in-memory.", "code": "public class InMemoryGeneratedFiles extends Object implements GeneratedFiles {\n\tvoid addFile(GeneratedFiles.Kind kind, String path, InputStreamSource content); // Add a generated file of the specified GeneratedFiles.Kind with content from the given InputStreamSource.\n\tInputStreamSource getGeneratedFile(GeneratedFiles.Kind kind, String path); // Return the InputStreamSource of specified file.\n\tString getGeneratedFileContent(GeneratedFiles.Kind kind, String path); // Return the content of the specified file.\n\tMap<String,InputStreamSource> getGeneratedFiles(GeneratedFiles.Kind kind); // Return a Map of the generated files of a specific GeneratedFiles.Kind.\n}"}
{"index": 4027, "repo": "zookeeper-3.8.2", "des": "Represents a single operation in a multi-operation transaction.", "code": "Class Op {\n\tstatic Op check(String path, int version); // Constructs an version check operation.\n\tstatic Op create(String path, byte[] data, CreateOptions options); // Constructs a create operation which uses ZooDefs.OpCode.create2 if no one is inferred from create mode.\n\tstatic Op create(String path, byte[] data, List<ACL> acl, CreateMode createMode); // Constructs a create operation.\n\tstatic Op create(String path, byte[] data, List<ACL> acl, CreateMode createMode, long ttl); // Constructs a create operation.\n\tstatic Op create(String path, byte[] data, List<ACL> acl, int flags); // Constructs a create operation.\n\tstatic Op create(String path, byte[] data, List<ACL> acl, int flags, long ttl); // Constructs a create operation.\n\tstatic Op delete(String path, int version); // Constructs a delete operation.\n\tstatic Op getChildren(String path);\n\tstatic Op getData(String path);\n\tOp.OpKind getKind(); // Gets the kind of an Op.\n\tString getPath(); // Gets the path for an Op.\n\tint getType(); // Gets the integer type code for an Op.\n\tstatic Op setData(String path, byte[] data, int version); // Constructs an update operation.\n\tabstract Record toRequestRecord(); // Encodes an op for wire transmission.\n}"}
{"index": 5049, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that returns true if either of the predicates return true.", "code": "Class OrPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning true if either predicate returns true.\n\tstatic Predicate getInstance(Predicate predicate1, Predicate predicate2); // Factory to create the predicate.\n\tPredicate[] getPredicates(); // Gets the two predicates being decorated as an array.\n}"}
{"index": 10863, "repo": "spring-data-redis-3.1.2", "des": "A Record within the stream backed by a collection of binary field/value pairs.", "code": "public interface ByteBufferRecord extends MapRecord<ByteBuffer,ByteBuffer,ByteBuffer> {\n\tdefault <K, HK, HV> MapRecord<K,HK,HV> deserialize(RedisSerializer<? extends K> streamSerializer, RedisSerializer<? extends HK> fieldSerializer, RedisSerializer<? extends HV> valueSerializer); // Deserialize key with the streamSerializer, field names with the fieldSerializer and values with the valueSerializer.\n\tdefault <T> MapRecord<T,T,T> deserialize(RedisSerializer<T> serializer); // Deserialize key and field/value pairs with the given RedisSerializer.\n\tstatic ByteBufferRecord of(MapRecord<ByteBuffer,ByteBuffer,ByteBuffer> source); // Convert a binary MapRecord into a ByteRecord.\n\tdefault <OV> ObjectRecord<ByteBuffer,OV> toObjectRecord(HashMapper<? super OV,? super ByteBuffer,? super ByteBuffer> mapper); // Convert a binary MapRecord into an ObjectRecord.\n\tByteBufferRecord withId(RecordId id); // Create a new instance of Record with the given RecordId.\n\tByteBufferRecord withStreamKey(ByteBuffer key); // Create a new ByteBufferRecord with the associated stream key.\n}"}
{"index": 843, "repo": "ignite-core-2.15.0", "des": "Reads lines in a file reversely (similar to a BufferedReader, but starting at the last line).", "code": "Class GridReversedLinesFileReader {\n\tvoid close(); // Closes underlying resources.\n\tString readLine(); // Returns the lines of the file from bottom to top.\n}"}
{"index": 8421, "repo": "hadoop-aws-3.3.6", "des": "Stores the credentials for a session or for a full login.", "code": "Class MarshalledCredentials {\n\tString buildInvalidCredentialsError(MarshalledCredentials.CredentialTypeRequired typeRequired); // Build an error string for when the credentials do not match those required.\n\tstatic MarshalledCredentials empty(); // Return a set of empty credentials.\n\tboolean equals(Object o);\n\tString getAccessKey();\n\tlong getExpiration(); // Expiration; will be 0 for none known.\n\tOptional<OffsetDateTime> getExpirationDateTime(); // Get a temporal representing the time of expiration, if there is one.\n\tString getRoleARN();\n\tString getSecretKey();\n\tString getSessionToken();\n\tboolean hasSessionToken(); // Does this set of credentials have a session token.\n\tboolean isEmpty(); // Is this empty: does it contain any credentials at all? This test returns true if either the access key or secret key is empty.\n\tboolean isValid(MarshalledCredentials.CredentialTypeRequired required); // Is this a valid set of credentials tokens?\n\tvoid readFields(DataInput in); // Read in the fields.\n\tvoid setAccessKey(String accessKey);\n\tvoid setExpiration(long expiration);\n\tvoid setRoleARN(String roleARN);\n\tvoid setSecretKey(String secretKey);\n\tvoid setSecretsInConfiguration(org.apache.hadoop.conf.Configuration config); // Patch a configuration with the secrets.\n\tvoid setSessionToken(String sessionToken);\n\tvoid validate(String message, MarshalledCredentials.CredentialTypeRequired typeRequired); // Verify that a set of credentials is valid.\n\tvoid write(DataOutput out); // Write the token.\n}"}
{"index": 3259, "repo": "hbase-common-3.0.0-alpha-4", "des": "A simple form of KeyValue that creates a keyvalue with only the key part of the byte[] Mainly used in places where we need to compare two cells.", "code": "Class KeyValue.KeyOnlyKeyValue {\n\tvoid clear();\n\tboolean equals(Object other); // Needed doing 'contains' on List.\n\tbyte[] getFamilyArray(); // Returns the backing array of the entire KeyValue (all KeyValue fields are in a single array)\n\tbyte getFamilyLength(); // Returns Family length\n\tint getFamilyOffset(); // Returns Family offset\n\tbyte[] getKey(); // Do not use unless you have to.\n\tint getKeyLength(); // Returns Length of key portion.\n\tint getKeyOffset(); // Returns Key offset in backing buffer..\n\tbyte[] getQualifierArray(); // Returns the backing array of the entire KeyValue (all KeyValue fields are in a single array)\n\tint getQualifierLength(); // Returns Qualifier length\n\tint getQualifierOffset(); // Returns Qualifier offset\n\tbyte[] getRowArray(); // Returns the backing array of the entire KeyValue (all KeyValue fields are in a single array)\n\tshort getRowLength(); // Returns Row length\n\tint getRowOffset(); // Returns Row offset\n\tbyte[] getTagsArray(); // Returns the backing array of the entire KeyValue (all KeyValue fields are in a single array)\n\tint getTagsLength(); // Return the total length of the tag bytes\n\tint getTagsOffset(); // Return the offset where the tag data starts.\n\tlong getTimestamp(); // Return the timestamp.\n\tint getTimestampOffset(); // Returns Timestamp offset\n\tbyte getTypeByte(); // Returns KeyValue.TYPE byte representation\n\tbyte[] getValueArray(); // Returns the backing array of the entire KeyValue (all KeyValue fields are in a single array)\n\tint getValueLength(); // Returns Value length\n\tint getValueOffset(); // Returns the value offset\n\tlong heapSize(); // HeapSize implementation We do not count the bytes in the rowCache because it should be empty for a KeyValue in the MemStore.\n\tvoid set(KeyValue.KeyOnlyKeyValue keyOnlyKeyValue);\n\tvoid setKey(byte[] key, int offset, int length); // A setter that helps to avoid object creation every time and whenever there is a need to create new KeyOnlyKeyValue.\n\tint write(OutputStream out, boolean withTags); // Write this cell to an OutputStream in a KeyValue format.\n}"}
{"index": 15119, "repo": "spring-vault-core-3.0.4", "des": "Builder that can be used to configure and create a WebClient.", "code": "public class WebClientBuilder extends Object {\n\tWebClient build(); // Build a new WebClient.\n\tstatic WebClientBuilder builder(); // Create a new WebClientBuilder.\n\tprotected WebClient.Builder createWebClientBuilder(); // Create the WebClient.Builder to use.\n\tWebClientBuilder customizers(WebClientCustomizer... customizer); // Add the WebClientCustomizers that should be applied to the WebClient.\n\tWebClientBuilder defaultHeader(String name, String value); // Add a default header that will be set if not already present on the outgoing HttpRequest.\n\tWebClientBuilder endpoint(VaultEndpoint endpoint); // Set the VaultEndpoint that should be used with the WebClient.\n\tWebClientBuilder endpointProvider(ReactiveVaultEndpointProvider provider); // Set the ReactiveVaultEndpointProvider that should be used with the WebClient.\n\tWebClientBuilder endpointProvider(VaultEndpointProvider provider); // Set the VaultEndpointProvider that should be used with the WebClient.\n\tWebClientBuilder filter(ExchangeFilterFunction... filterFunctions); // Add the ExchangeFilterFunctions that should be applied to the ClientRequest.\n\tWebClientBuilder httpConnector(ClientHttpConnector httpConnector); // Set the ClientHttpConnector that should be used with the WebClient.\n\tWebClientBuilder httpConnectorFactory(Supplier<ClientHttpConnector> httpConnector); // Set the Supplier of ClientHttpConnector that should be called each time we build() a new WebClient instance.\n}"}
{"index": 5714, "repo": "freemarker-2.3.32", "des": "Generic model for arbitrary Jython objects.", "code": "Class JythonModel {\n\tjava.lang.Object exec(java.util.List arguments); // Executes the method call.\n\tTemplateModel get(java.lang.String key); // Calls PyObject.__findattr__(java.lang.String), then if it returns null calls PyObject.__finditem__(java.lang.String).\n\tjava.lang.Object getAdaptedObject(java.lang.Class hint); // Retrieves the underlying object, or some other object semantically equivalent to its value narrowed by the class hint.\n\tboolean getAsBoolean(); // Returns the value of PyObject.__nonzero__().\n\tjava.lang.String getAsString(); // Returns the value of Object.toString().\n\tjava.lang.Object getWrappedObject(); // Retrieves the original object wrapped by this model.\n\tboolean isEmpty(); // Returns PyObject.__len__() == 0.\n}"}
{"index": 12502, "repo": "spring-jdbc-6.0.11", "des": "JavaBean for holding custom JDBC error codes translation for a particular database.", "code": "public class CustomSQLErrorCodesTranslation extends Object {\n\tString[] getErrorCodes(); // Return the SQL error codes to match.\n\tClass<?> getExceptionClass(); // Return the exception class for the specified error codes.\n\tvoid setErrorCodes(String... errorCodes); // Set the SQL error codes to match.\n\tvoid setExceptionClass(Class<?> exceptionClass); // Set the exception class for the specified error codes.\n}"}
{"index": 9350, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by the ApplicationMaster to the NodeManager to get ContainerStatus of requested containers.", "code": "Class GetContainerStatusesRequest {\n\tabstract List<ContainerId> getContainerIds(); // Get the list of ContainerIds of containers for which to obtain the ContainerStatus.\n\tstatic GetContainerStatusesRequest newInstance(List<ContainerId> containerIds);\n\tabstract void setContainerIds(List<ContainerId> containerIds); // Set a list of ContainerIds of containers for which to obtain the ContainerStatus\n}"}
{"index": 2622, "repo": "mahout-core-14.1", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface IntComparator {\n\tint compare(int o1, int o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 13931, "repo": "spring-webflux-6.0.11", "des": "Helper to create and configure ParameterContentTypeResolver.", "code": "public static class RequestedContentTypeResolverBuilder.ParameterResolverConfigurer extends Object {\n\tRequestedContentTypeResolverBuilder.ParameterResolverConfigurer mediaType(String key, org.springframework.http.MediaType mediaType); // Configure a mapping between a lookup key (extracted from a query parameter value) and a corresponding MediaType.\n\tRequestedContentTypeResolverBuilder.ParameterResolverConfigurer mediaType(Map<String,org.springframework.http.MediaType> mediaTypes); // Map-based variant of mediaType(String, MediaType).\n\tRequestedContentTypeResolverBuilder.ParameterResolverConfigurer parameterName(String parameterName); // Set the name of the parameter to use to determine requested media types.\n}"}
{"index": 13910, "repo": "spring-webflux-6.0.11", "des": "Resolver for Map method arguments annotated with @PathVariable where the annotation does not specify a path variable name.", "code": "public class PathVariableMapMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter methodParameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange); // Resolve the value for the method parameter synchronously.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether this resolver supports the given method parameter.\n}"}
{"index": 8531, "repo": "commons-io-2.13.0", "des": "Like Spliterator but throws IOException.", "code": "Interface IOSpliterator<T> {\n\tstatic <E> IOSpliterator<E> adapt(Spliterator<E> iterator); // Adapts the given Spliterator as an IOSpliterator.\n\tdefault Spliterator<T> asSpliterator(); // Creates a Spliterator for this instance that throws UncheckedIOException instead of IOException.\n\tdefault int characteristics(); // Like Spliterator.characteristics().\n\tdefault long estimateSize(); // Like Spliterator.estimateSize().\n\tdefault void forEachRemaining(IOConsumer<? super T> action); // Like Spliterator.forEachRemaining(Consumer).\n\tdefault IOComparator<? super T> getComparator(); // Like Spliterator.getComparator().\n\tdefault long getExactSizeIfKnown(); // Like Spliterator.getExactSizeIfKnown().\n\tdefault boolean hasCharacteristics(int characteristics); // Like Spliterator.hasCharacteristics(int).\n\tdefault boolean tryAdvance(IOConsumer<? super T> action); // Like Spliterator.tryAdvance(Consumer).\n\tdefault IOSpliterator<T> trySplit(); // Like Spliterator.trySplit().\n\tSpliterator<T> unwrap(); // Unwraps this instance and returns the underlying Spliterator.\n}"}
{"index": 7702, "repo": "cassandra-all-4.1.2", "des": "No-Op implementation of IAuditLogger to be used as a default audit logger when audit logging is disabled.", "code": "Class NoOpAuditLogger {\n\tboolean isEnabled();\n\tvoid log(AuditLogEntry logMessage); // Logs AuditLogEntry.\n\tvoid stop(); // Stop and cleanup any resources of IAuditLogger implementations.\n}"}
{"index": 11075, "repo": "spring-shell-core-3.1.2", "des": "Interface for selectitem contract in selectors.", "code": "public interface SelectItem {\n\tboolean enabled(); // Returns if item is enabled.\n\tString item(); // Gets an item\n\tString name(); // Gets a name.\n\tstatic SelectItem of(String name, String item);\n\tstatic SelectItem of(String name, String item, boolean enabled, boolean selected);\n\tboolean selected(); // Return if the item is selected.\n}"}
{"index": 4456, "repo": "beam-sdks-java-core-2.49.0", "des": "PBegin is the \"input\" to a root PTransform, such as Read or Create.", "code": "Class PBegin {\n\t<OutputT extends POutput>OutputT apply(PTransform<? super PBegin,OutputT> t); // Like apply(String, PTransform) but defaulting to the name of the PTransform.\n\t<OutputT extends POutput>OutputT apply(java.lang.String name, PTransform<? super PBegin,OutputT> t); // Applies the given PTransform to this PBegin, using name to identify this specific application of the transform.\n\tjava.util.Map<TupleTag<?>,PValue> expand(); // Expands this PInput into a list of its component output PValues.\n\tPipeline getPipeline(); // Returns the owning Pipeline of this PInput.\n\tstatic PBegin in(Pipeline pipeline); // Returns a PBegin in the given Pipeline.\n}"}
{"index": 6007, "repo": "commons-lang3-3.12.0", "des": "Wraps a domain object and a lock for access by lambdas.", "code": "Class LockingVisitors.LockVisitor<O,L> {\n\tvoid acceptReadLocked(FailableConsumer<O,?> consumer); // Provides read (shared, non-exclusive) access to the locked (hidden) object.\n\tvoid acceptWriteLocked(FailableConsumer<O,?> consumer); // Provides write (exclusive) access to the locked (hidden) object.\n\t<T> T applyReadLocked(FailableFunction<O,T,?> function); // Provides read (shared, non-exclusive) access to the locked (hidden) object for the purpose of computing a result object.\n\t<T> T applyWriteLocked(FailableFunction<O,T,?> function); // Provides write (exclusive) access to the locked (hidden) object for the purpose of computing a result object.\n\tL getLock(); // Gets the lock.\n\tO getObject(); // Gets the guarded object.\n\tprotected void lockAcceptUnlock(Supplier<Lock> lockSupplier, FailableConsumer<O,?> consumer); // This method provides the default implementation for acceptReadLocked(FailableConsumer), and acceptWriteLocked(FailableConsumer).\n\tprotected <T> T lockApplyUnlock(Supplier<Lock> lockSupplier, FailableFunction<O,T,?> function); // This method provides the actual implementation for applyReadLocked(FailableFunction), and applyWriteLocked(FailableFunction).\n}"}
{"index": 17696, "repo": "spring-web-6.0.11", "des": "Bootstrap listener to start up and shut down Spring's root WebApplicationContext.", "code": "public class ContextLoaderListener extends ContextLoader implements ServletContextListener {\n\tvoid contextDestroyed(ServletContextEvent event); // Close the root web application context.\n\tvoid contextInitialized(ServletContextEvent event); // Initialize the root web application context.\n}"}
{"index": 10970, "repo": "spring-data-redis-3.1.2", "des": "Data object holding Bucket representing the domain object to be stored in a Redis hash.", "code": "public class RedisData extends Object {\n\tvoid addIndexedData(Collection<IndexedData> indexes);\n\tvoid addIndexedData(IndexedData index);\n\tBucket getBucket();\n\tString getId();\n\tSet<IndexedData> getIndexedData();\n\tString getKeyspace();\n\tLong getTimeToLive(); // Get the time before expiration in seconds.\n\tvoid setId(String id); // Set the id to be used as part of the key.\n\tvoid setKeyspace(String keyspace);\n\tvoid setTimeToLive(Long timeToLive); // Set the time before expiration in TimeUnit.SECONDS.\n\tvoid setTimeToLive(Long timeToLive, TimeUnit timeUnit); // Set the time before expiration converting the given arguments to TimeUnit.SECONDS.\n}"}
{"index": 17617, "repo": "spring-ldap-core-3.1.0", "des": "Wrapper class to handle the full identification of an LDAP entry.", "code": "public class LdapEntryIdentification extends Object {\n\tboolean equals(Object obj);\n\tDistinguishedName getAbsoluteDn(); // Deprecated. DistinguishedName and associated classes and methods are deprecated as of 2.0.\n\tLdapName getAbsoluteName(); // Get the DN of the identified entry relative to the base LDAP path, e.g.\n\tDistinguishedName getRelativeDn(); // Deprecated. DistinguishedName and associated classes and methods are deprecated as of 2.0.\n\tLdapName getRelativeName(); // Get the absolute DN of the identified entry, e.g.\n}"}
{"index": 13570, "repo": "spring-messaging-6.0.11", "des": "Builder to create an RSocketServiceProxyFactory.", "code": "public static final class RSocketServiceProxyFactory.Builder extends Object {\n\tRSocketServiceProxyFactory.Builder blockTimeout(Duration blockTimeout); // Configure how long to wait for a response for an HTTP service method with a synchronous (blocking) method signature.\n\tRSocketServiceProxyFactory build(); // Build the RSocketServiceProxyFactory instance.\n\tRSocketServiceProxyFactory.Builder customArgumentResolver(RSocketServiceArgumentResolver resolver); // Register a custom argument resolver, invoked ahead of default resolvers.\n\tRSocketServiceProxyFactory.Builder embeddedValueResolver(org.springframework.util.StringValueResolver resolver); // Set the StringValueResolver to use for resolving placeholders and expressions embedded in RSocketExchange.value().\n\tRSocketServiceProxyFactory.Builder reactiveAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry registry); // Set the ReactiveAdapterRegistry to use to support different asynchronous types for HTTP service method return values.\n\tRSocketServiceProxyFactory.Builder rsocketRequester(RSocketRequester requester); // Provide the requester to perform requests through.\n}"}
{"index": 20, "repo": "connect-api-3.5.0", "des": "ConnectorContext allows Connectors to proactively interact with the Kafka Connect runtime.", "code": "Interface ConnectorContext {\n\tvoid raiseError(Exception e); // Raise an unrecoverable exception to the Connect framework.\n\tvoid requestTaskReconfiguration(); // Requests that the runtime reconfigure the Tasks for this source.\n}"}
{"index": 3989, "repo": "zookeeper-3.8.2", "des": "This is not a true AuthenticationProvider in the strict sense.", "code": "Class EnsembleAuthenticationProvider {\n\tString getScheme(); // The String used to represent this provider.\n\tKeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData); // This method is called when a client passes authentication data for this scheme.\n\tboolean isAuthenticated(); // This method is used to check if the authentication done by this provider should be used to identify the creator of a node.\n\tboolean isValid(String id); // Validates the syntax of an id.\n\tboolean matches(String id, String aclExpr); // This method is called to see if the given id matches the given id expression in the ACL.\n\tvoid setEnsembleNames(String namesCSV);\n}"}
{"index": 15444, "repo": "pulsar-client-api-3.0.0", "des": "A Reader can be used to scan through all the messages currently available in a topic.", "code": "@Public @Stable public interface Reader<T> extends Closeable {\n\tCompletableFuture<Void> closeAsync(); // Asynchronously close the reader and stop the broker to push more messages.\n\tString getTopic();\n\tboolean hasMessageAvailable(); // Check if there is any message available to read from the current position.\n\tCompletableFuture<Boolean> hasMessageAvailableAsync(); // Asynchronously check if there is any message available to read from the current position.\n\tboolean hasReachedEndOfTopic(); // Return true if the topic was terminated and this reader has reached the end of the topic.\n\tboolean isConnected();\n\tMessage<T> readNext(); // Read the next message in the topic.\n\tMessage<T> readNext(int timeout, TimeUnit unit); // Read the next message in the topic waiting for a maximum time.\n\tCompletableFuture<Message<T>> readNextAsync(); // Read asynchronously the next message in the topic.\n\tvoid seek(long timestamp); // Reset the subscription associated with this reader to a specific message publish time.\n\tvoid seek(Function<String,Object> function); // Reset the subscription associated with this consumer to a specific message ID or message publish time.\n\tvoid seek(MessageId messageId); // Reset the subscription associated with this reader to a specific message id.\n\tCompletableFuture<Void> seekAsync(long timestamp); // Reset the subscription associated with this reader to a specific message publish time.\n\tCompletableFuture<Void> seekAsync(Function<String,Object> function); // Reset the subscription associated with this consumer to a specific message ID or message publish time asynchronously.\n\tCompletableFuture<Void> seekAsync(MessageId messageId); // Reset the subscription associated with this reader to a specific message id.\n}"}
{"index": 16292, "repo": "spring-r2dbc-6.0.11", "des": "A mutable builder for creating a DatabaseClient.", "code": "public static interface DatabaseClient.Builder {\n\tDatabaseClient.Builder apply(Consumer<DatabaseClient.Builder> builderConsumer); // Apply a Consumer to configure this builder.\n\tDatabaseClient.Builder bindMarkers(BindMarkersFactory bindMarkers); // Configure the BindMarkers to be used.\n\tDatabaseClient build(); // Build the DatabaseClient instance.\n\tDatabaseClient.Builder connectionFactory(ConnectionFactory factory); // Configure the R2DBC connector.\n\tDatabaseClient.Builder executeFunction(ExecuteFunction executeFunction); // Configure an ExecuteFunction to execute Statement objects.\n\tDatabaseClient.Builder namedParameters(boolean enabled); // Configure whether to use named parameter expansion.\n}"}
{"index": 7900, "repo": "commons-jcs3-core-3.1", "des": "This has common attributes that any conceivable disk cache would need.", "code": "Class AbstractDiskCacheAttributes {\n\tIDiskCacheAttributes.DiskLimitType getDiskLimitType();\n\tFile getDiskPath(); // Gets the diskPath attribute of the attributes object\n\tint getMaxPurgatorySize(); // Gets the maxKeySize attribute of the DiskCacheAttributes object\n\tint getShutdownSpoolTimeLimit(); // Get the amount of time in seconds we will wait for elements to move to disk during shutdown for a particular region.\n\tboolean isAllowRemoveAll(); // If this is true then remove all is not prohibited.\n\tvoid setAllowRemoveAll(boolean allowRemoveAll); // If this is false, then remove all requests will not be honored.\n\tvoid setDiskLimitType(IDiskCacheAttributes.DiskLimitType diskLimitType); // set the type of the limit of the cache size\n\tvoid setDiskLimitTypeName(String diskLimitTypeName); // Translates and stores String values of DiskLimitType Allowed values: \"COUNT\" and \"SIZE\"\n\tvoid setDiskPath(File diskPath); // Sets the diskPath attribute of the DiskCacheAttributes object\n\tvoid setDiskPath(String path); // Sets the diskPath attribute of the DiskCacheAttributes object\n\tvoid setMaxPurgatorySize(int maxPurgatorySize); // Sets the maxPurgatorySize attribute of the DiskCacheAttributes object\n\tvoid setShutdownSpoolTimeLimit(int shutdownSpoolTimeLimit); // Sets the amount of time in seconds we will wait for elements to move to disk during shutdown for a particular region.\n}"}
{"index": 6388, "repo": "spring-data-solr-4.3.15", "des": "Implementation of if(value|field|function,trueValue,falseValue).", "code": "Class IfFunction {\n\tString getOperation(); // solr readable representation of function\n\tstatic IfFunction.Builder when(Field field);\n\tstatic IfFunction.Builder when(Function function);\n\tstatic IfFunction.Builder when(Object condition); // Creates new IfFunction.Builder for creating IfFunction\n\tstatic IfFunction.Builder when(String fieldname);\n}"}
{"index": 17094, "repo": "spring-integration-core-6.1.2", "des": "The Enterprise Integration Pattern types.", "code": "public enum IntegrationPatternType extends Enum<IntegrationPatternType> {\n\tIntegrationPatternType.IntegrationPatternCategory getPatternCategory();\n\tstatic IntegrationPatternType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic IntegrationPatternType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14988, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A Filter for the OAuth 2.0 Token Introspection endpoint.", "code": "public final class OAuth2TokenIntrospectionEndpointFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\tvoid setAuthenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter); // Sets the AuthenticationConverter used when attempting to extract an Introspection Request from HttpServletRequest to an instance of OAuth2TokenIntrospectionAuthenticationToken used for authenticating the request.\n\tvoid setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler authenticationFailureHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Resonse.\n\tvoid setAuthenticationSuccessHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler authenticationSuccessHandler); // Sets the AuthenticationSuccessHandler used for handling an OAuth2TokenIntrospectionAuthenticationToken.\n}"}
{"index": 14814, "repo": "spring-data-commons-3.1.2", "des": "Simple value object to work with ranges and boundaries.", "code": "public final class Range<T> extends Object {\n\tstatic <T> Range<T> closed(T from, T to); // Creates a new Range with inclusive bounds for both values.\n\tboolean contains(Comparable<T> value); // Returns whether the Range contains the given value.\n\tboolean contains(T value, Comparator<T> comparator); // Returns whether the Range contains the given value.\n\tboolean equals(Object o);\n\tstatic <T> Range.RangeBuilder<T> from(Range.Bound<T> lower); // Create a Range.RangeBuilder given the lower Range.Bound.\n\tRange.Bound<T> getLowerBound();\n\tRange.Bound<T> getUpperBound();\n\tstatic <T> Range<T> just(T value); // Creates a new Range with the given value as sole member.\n\tstatic <T> Range<T> leftOpen(T from, T to); // Creates a new left-open Range, i.e. left exclusive, right inclusive.\n\tstatic <T> Range<T> leftUnbounded(Range.Bound<T> to); // Creates a left-unbounded Range (the left bound set to Range.Bound.unbounded()) with the given right bound.\n\t<R> Range<R> map(Function<? super T,? extends R> mapper); // Apply a mapping Function to the lower and upper boundary values.\n\tstatic <T> Range<T> of(Range.Bound<T> lowerBound, Range.Bound<T> upperBound); // Creates a new Range with the given lower and upper bound.\n\tstatic <T> Range<T> open(T from, T to); // Creates a new Range with exclusive bounds for both values.\n\tstatic <T> Range<T> rightOpen(T from, T to); // Creates a new right-open Range, i.e. left inclusive, right exclusive.\n\tstatic <T> Range<T> rightUnbounded(Range.Bound<T> from); // Creates a right-unbounded Range (the right bound set to Range.Bound.unbounded()) with the given left bound.\n\tstatic <T> Range<T> unbounded(); // Returns an unbounded Range.\n}"}
{"index": 8977, "repo": "hbase-server-3.0.0-alpha-4", "des": "This Chore, every time it runs, will attempt to delete the WALs and Procedure WALs in the old logs folder.", "code": "Class LogCleaner {\n\tvoid cancel(boolean mayInterruptIfRunning);\n\tvoid cleanup();\n\tprotected int deleteFiles(Iterable<org.apache.hadoop.fs.FileStatus> filesToDelete); // Delete the given files\n\tvoid onConfigurationChange(org.apache.hadoop.conf.Configuration conf);\n\tprotected boolean validate(org.apache.hadoop.fs.Path file); // Validate the file to see if it even belongs in the directory.\n}"}
{"index": 16801, "repo": "spring-expression-6.0.11", "des": "The plus operator will: add numbers concatenate strings", "code": "public class OpPlus extends Operator {\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode for this node into the supplied visitor.\n\tSpelNodeImpl getRightOperand();\n\tTypedValue getValueInternal(ExpressionState state);\n\tboolean isCompilable(); // Check whether a node can be compiled to bytecode.\n\tString toStringAST(); // String format for all operators is the same '(' [operand] [operator] [operand] ')'.\n}"}
{"index": 2092, "repo": "hive-exec-4.0.0-alpha-2", "des": "UDF to get current group from authenticator.", "code": "Class GenericUDFCurrentGroups {\n\tvoid copyToNewInstance(Object newInstance); // Some information may be set during initialize() which needs to be saved when the UDF is copied.\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tList<org.apache.hadoop.io.Text> getCurrentGroups();\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n\tvoid setCurrentGroups(List<org.apache.hadoop.io.Text> currentGroups);\n}"}
{"index": 976, "repo": "ignite-core-2.15.0", "des": "File logging handler which skips all the messages until node ID is set.", "code": "Class JavaLoggerFileHandler {\n\tvoid close();\n\t@Nullable String fileName(); // Returns current log file.\n\tvoid flush();\n\tboolean isLoggable(LogRecord record);\n\tstatic File logDirectory(String workDir); // Resolves logging directory.\n\tvoid nodeId(@Nullable String app, @Nullable UUID nodeId, String workDir); // Sets Node id and instantiates FileHandler delegate.\n\tvoid nodeId(UUID nodeId, String workDir); // Sets Node id and instantiates FileHandler delegate.\n\tvoid publish(LogRecord record);\n}"}
{"index": 14629, "repo": "spring-cloud-stream-4.0.0", "des": "Marker interface for instances that can bind/unbind groups of inputs and outputs.", "code": "public interface Bindable {\n\tdefault Collection<Binding<Object>> createAndBindInputs(BindingService adapter); // Binds all the inputs associated with this instance.\n\tdefault Collection<Binding<Object>> createAndBindOutputs(BindingService adapter); // Binds all the outputs associated with this instance.\n\tdefault Set<String> getInputs(); // Enumerates all the input binding names.\n\tdefault Set<String> getOutputs(); // Enumerates all the output binding names.\n\tdefault void unbindInputs(BindingService adapter); // Unbinds all the inputs associated with this instance.\n\tdefault void unbindOutputs(BindingService adapter); // Unbinds all the outputs associated with this instance.\n}"}
{"index": 18367, "repo": "opencms-core-15.0", "des": "Represents a single option (type) that can be selected in the list element creation dialog.", "code": "Class CmsListElementCreationOption {\n\tCmsListInfoBean getInfo(); // Gets the list info bean representing the type.\n\tjava.lang.String getNewLink(); // Gets the string used by the content editor to create the new resource.\n\tjava.lang.String getType(); // Gets the resource type name.\n}"}
{"index": 3457, "repo": "mahout-mr-0.13.0", "des": "Class implementing the Naive Bayes Classifier Algorithm.", "code": "Class AbstractNaiveBayesClassifier {\n\tVector classify(Vector instance); // Unsupported method.\n\tVector classifyFull(Vector instance); // Computes and returns a vector containing n scores, where n is numCategories(), given an input vector instance.\n\tVector classifyFull(Vector r, Vector instance); // Computes and returns a vector containing n scores, where n is numCategories(), given an input vector instance.\n\tdouble classifyScalar(Vector instance); // Unsupported method.\n\tprotected NaiveBayesModel getModel();\n\tprotected abstract double getScoreForLabelFeature(int label, int feature);\n\tprotected double getScoreForLabelInstance(int label, Vector instance);\n\tint numCategories(); // Returns the number of categories that a target variable can be assigned to.\n}"}
{"index": 7240, "repo": "calcite-core-1.34.0", "des": "A SqlMerge is a node of a parse tree which represents a MERGE statement.", "code": "Class SqlMerge {\n\t@Nullable SqlIdentifier getAlias(); // Returns the alias for the target table of this MERGE.\n\tSqlNode getCondition(); // Returns the condition expression to determine whether to UPDATE or INSERT.\n\t@Nullable SqlInsert getInsertCall(); // Returns the INSERT statement for this MERGE.\n\tSqlKind getKind(); // Returns the type of node this is, or SqlKind.OTHER if it's nothing special.\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\t@Nullable SqlSelect getSourceSelect(); // Gets the source SELECT expression for the data to be updated/inserted.\n\tSqlNode getSourceTableRef(); // Returns the source query of this MERGE.\n\tSqlNode getTargetTable(); // Return the identifier for the target table of this MERGE.\n\t@Nullable SqlUpdate getUpdateCall(); // Returns the UPDATE statement for this MERGE.\n\tvoid setOperand(int i, @Nullable SqlNode operand); // Changes the value of an operand.\n\tvoid setSourceSelect(SqlSelect sourceSelect);\n\tvoid setSourceTableRef(SqlNode tableRef);\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n\tvoid validate(SqlValidator validator, SqlValidatorScope scope); // Validates this call.\n}"}
{"index": 2067, "repo": "hive-exec-4.0.0-alpha-2", "des": "An implementation of SerializationContext is responsible for looking up the Serialization implementation for the given RecordReader.", "code": "Interface FlatFileInputFormat.SerializationContext<S> {\n\tClass<? extends S> getRealClass(); // Produces the specific class to deserialize.\n\torg.apache.hadoop.io.serializer.Serialization<S> getSerialization(); // An Serialization object for objects of type S.\n}"}
{"index": 6280, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "A RemoteFileInboundChannelAdapterSpec for a SftpInboundFileSynchronizingMessageSource.", "code": "Class SftpInboundChannelAdapterSpec {\n\tSftpInboundChannelAdapterSpec patternFilter(java.lang.String pattern); // Configure a simple pattern filter (e.g.\n\tSftpInboundChannelAdapterSpec regexFilter(java.lang.String regex); // Configure a regex pattern filter (e.g.\n}"}
{"index": 2438, "repo": "calcite-linq4j-1.34.0", "des": "Entry point for optimizers that factor out deterministic expressions to final static fields.", "code": "Class ClassDeclarationFinder {\n\tstatic ClassDeclarationFinder create(); // Creates visitor that uses default optimizer.\n\tstatic ClassDeclarationFinder create(Class<? extends ClassDeclarationFinder> optimizingClass); // Creates visitor that uses given class as optimizer.\n\tstatic ClassDeclarationFinder create(Function1<ClassDeclarationFinder,ClassDeclarationFinder> childFactory); // Creates visitor that uses given factory to create optimizers.\n\tprotected @Nullable ParameterExpression findDeclaredExpression(Expression expression); // Finds if there exists ready for reuse declaration for given expression.\n\tprotected ClassDeclarationFinder goDeeper(); // Creates child visitor.\n\tprotected boolean hasField(String name); // Verifies if the variable name is already in use.\n\tprotected boolean isConstant(Expression expression); // Verifies if the expression is effectively constant.\n\tprotected boolean isConstant(Iterable<? extends Expression> list); // Verifies if all the expressions in given list are effectively constant.\n\tprotected void learnFinalStaticDeclarations(List<MemberDeclaration> memberDeclarations); // Processes the list of declarations when class expression detected.\n\tprotected List<MemberDeclaration> optimizeDeclarations(List<MemberDeclaration> memberDeclarations); // Adds new declarations (e.g.\n\tShuttle preVisit(ClassDeclaration classDeclaration); // Creates optimizer local to the newly generated class.\n\tShuttle preVisit(NewExpression newExpression); // Creates optimizer local to the newly generated anonymous class.\n\tprotected Expression tryOptimizeNewInstance(NewExpression newExpression); // Optimizes new Type() constructs.\n\tClassDeclaration visit(ClassDeclaration classDeclaration, List<MemberDeclaration> memberDeclarations);\n\tExpression visit(NewExpression newExpression, List<Expression> arguments, @Nullable List<MemberDeclaration> memberDeclarations);\n}"}
{"index": 13376, "repo": "shiro-core-2.0.0-alpha-2", "des": "Simple implementation of the MergableAuthenticationInfo interface that holds the principals and credentials.", "code": "public class SimpleAuthenticationInfo extends Object implements MergableAuthenticationInfo, SaltedAuthenticationInfo {\n\tboolean equals(Object o); // Returns true if the Object argument is an instanceof SimpleAuthenticationInfo and its principals are equal to this instance's principals, false otherwise.\n\tObject getCredentials(); // Returns the credentials associated with the corresponding Subject.\n\torg.apache.shiro.lang.util.ByteSource getCredentialsSalt(); // Returns the salt used to hash the credentials, or null if no salt was used or credentials were not hashed at all.\n\tPrincipalCollection getPrincipals(); // Returns all principals associated with the corresponding Subject.\n\tvoid merge(AuthenticationInfo info); // Takes the specified info argument and adds its principals and credentials into this instance.\n\tvoid setCredentials(Object credentials); // Sets the credentials that verify the principals/identity of the associated Realm account.\n\tvoid setCredentialsSalt(org.apache.shiro.lang.util.ByteSource salt); // Sets the salt used to hash the credentials, or null if no salt was used or credentials were not hashed at all.\n\tvoid setPrincipals(PrincipalCollection principals); // Sets the identifying principal(s) represented by this instance.\n}"}
{"index": 3233, "repo": "hbase-common-3.0.0-alpha-4", "des": "Wraps an existing DataType implementation as a fixed-length version of itself.", "code": "Class FixedLengthWrapper<T> {\n\tT decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tint encode(PositionedByteRange dst, T val); // Write instance val into buffer dst.\n\tClass<T> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(T val); // Inform consumers how long the encoded byte[] will be.\n\tint getLength(); // Retrieve the maximum length (in bytes) of encoded values.\n\tOrder getOrder(); // Retrieve the sort Order imposed by this data type, or null when natural ordering is not preserved.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n\tboolean isOrderPreserving(); // Indicates whether this instance writes encoded byte[]'s which preserve the natural sort order of the unencoded value.\n\tboolean isSkippable(); // Indicates whether this instance is able to skip over it's encoded value.\n\tint skip(PositionedByteRange src); // Skip src's position forward over one encoded value.\n}"}
{"index": 11976, "repo": "jena-core-4.9.0", "des": "Used to set event handlers and options on ARP0, SAX2Model, and SAX2RDF instances.", "code": "public interface ARPConfig {\n\tARPHandlers getHandlers(); // The handlers used during parsing.\n\tARPOptions getOptions(); // The options used during parsing.\n\tvoid setHandlersWith(ARPHandlers handlers); // Copies the handlers from the argument to be used by this instance.\n\tvoid setOptionsWith(ARPOptions opts); // Copies the options from the argument to be used by this instance.\n}"}
{"index": 8728, "repo": "hadoop-yarn-common-3.3.6", "des": "This is base class for allocated and available metrics for custom resources.", "code": "Class CustomResourceMetrics {\n\tvoid decreaseAllocated(org.apache.hadoop.yarn.api.records.Resource res);\n\tvoid decreaseAllocated(org.apache.hadoop.yarn.api.records.Resource res, int containers);\n\tMap<String,Long> getAllocatedValues();\n\tCustomResourceMetricValue getAvailable();\n\tMap<String,Long> getAvailableValues();\n\tvoid increaseAllocated(org.apache.hadoop.yarn.api.records.Resource res);\n\tvoid increaseAllocated(org.apache.hadoop.yarn.api.records.Resource res, int containers);\n\tMap<String,Long> initAndGetCustomResources(); // Get a map of all custom resource metric.\n\tvoid registerCustomResources(Map<String,Long> customResources, org.apache.hadoop.metrics2.lib.MetricsRegistry registry); // Register all custom resources metrics as part of initialization.\n\tvoid registerCustomResources(Map<String,Long> customResources, org.apache.hadoop.metrics2.lib.MetricsRegistry registry, String metricPrefix, String metricDesc); // As and when this metric object construction happens for any queue, all custom resource metrics value would be initialized with '0' like any other mandatory resources metrics.\n\tvoid setAvailable(org.apache.hadoop.yarn.api.records.Resource res);\n}"}
{"index": 2654, "repo": "mahout-core-14.1", "des": "Open hash map from float keys to byte values.", "code": "Class OpenFloatByteHashMap {\n\tbyte adjustOrPutValue(float key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(float key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(FloatProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(FloatByteProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(float key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(float key);\n\tprotected int indexOfKey(float key);\n\tprotected int indexOfValue(byte value);\n\tIterator<OpenFloatByteHashMap.MapElement> iterator();\n\tvoid keys(FloatArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(FloatByteProcedure condition, FloatArrayList keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(float key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(float key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 1455, "repo": "pdfbox-3.0.0-beta1", "des": "An interface for visiting a PDF document at the type (COS) level.", "code": "Interface ICOSVisitor {\n\tvoid visitFromArray(COSArray obj); // Notification of visit to Array object.\n\tvoid visitFromBoolean(COSBoolean obj); // Notification of visit to boolean object.\n\tvoid visitFromDictionary(COSDictionary obj); // Notification of visit to dictionary object.\n\tvoid visitFromDocument(COSDocument obj); // Notification of visit to document object.\n\tvoid visitFromFloat(COSFloat obj); // Notification of visit to float object.\n\tvoid visitFromInt(COSInteger obj); // Notification of visit to integer object.\n\tvoid visitFromName(COSName obj); // Notification of visit to name object.\n\tvoid visitFromNull(COSNull obj); // Notification of visit to null object.\n\tvoid visitFromStream(COSStream obj); // Notification of visit to stream object.\n\tvoid visitFromString(COSString obj); // Notification of visit to string object.\n}"}
{"index": 2985, "repo": "tink-1.10.0", "des": "This instance of KeyManager generates new Ed25519PrivateKey keys and produces new instances of Ed25519Sign.", "code": "Class Ed25519PrivateKeyManager {\n\tstatic KeyTemplate ed25519Template();\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tEd25519PublicKey getPublicKey(Ed25519PrivateKey key); // Creates a public key from the given private key.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<Ed25519KeyFormat,Ed25519PrivateKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tEd25519PrivateKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic KeyTemplate rawEd25519Template();\n\tstatic void registerPair(boolean newKeyAllowed); // Registers the Ed25519PrivateKeyManager and the Ed25519PublicKeyManager with the registry, so that the the Ed25519-Keys can be used with Tink.\n\tvoid validateKey(Ed25519PrivateKey keyProto); // Checks if the given keyProto is a valid key.\n}"}
{"index": 8957, "repo": "hbase-server-3.0.0-alpha-4", "des": "An encapsulation for the FileSystem object that hbase uses to access data.", "code": "Class HFileSystem {\n\tstatic boolean addLocationsOrderInterceptor(org.apache.hadoop.conf.Configuration conf);\n\tvoid close(); // Close this filesystem object\n\torg.apache.hadoop.fs.FSDataOutputStream createNonRecursive(org.apache.hadoop.fs.Path f, boolean overwrite, int bufferSize, short replication, long blockSize, org.apache.hadoop.util.Progressable progress); // The org.apache.hadoop.fs.FilterFileSystem does not yet support createNonRecursive.\n\tstatic org.apache.hadoop.fs.FileSystem get(org.apache.hadoop.conf.Configuration conf); // Create a new HFileSystem object, similar to FileSystem.get().\n\torg.apache.hadoop.fs.FileSystem getBackingFs(); // Returns the underlying filesystem\n\torg.apache.hadoop.fs.FileSystem getNoChecksumFs(); // Returns the filesystem that is specially setup for doing reads from storage.\n\tString getStoragePolicyName(org.apache.hadoop.fs.Path path); // Get the storage policy of the source path (directory/file).\n\tvoid setStoragePolicy(org.apache.hadoop.fs.Path path, String policyName); // Set the source path (directory/file) to the specified storage policy.\n\tboolean useHBaseChecksum(); // Are we verifying checksums in HBase?\n}"}
{"index": 14065, "repo": "spring-context-support-6.0.11", "des": "Implementation of the MailMessage interface for a JavaMail MIME message, to let message population code interact with a simple message or a MIME message through a common interface.", "code": "public class MimeMailMessage extends Object implements MailMessage {\n\tfinal MimeMessage getMimeMessage(); // Return the JavaMail MimeMessage that this MimeMailMessage is based on.\n\tfinal MimeMessageHelper getMimeMessageHelper(); // Return the MimeMessageHelper that this MimeMailMessage is based on.\n\tvoid setBcc(String bcc);\n\tvoid setBcc(String... bcc);\n\tvoid setCc(String cc);\n\tvoid setCc(String... cc);\n\tvoid setFrom(String from);\n\tvoid setReplyTo(String replyTo);\n\tvoid setSentDate(Date sentDate);\n\tvoid setSubject(String subject);\n\tvoid setText(String text);\n\tvoid setTo(String to);\n\tvoid setTo(String... to);\n}"}
{"index": 4257, "repo": "beam-sdks-java-core-2.49.0", "des": "A composite Trigger that executes its sub-triggers in order.", "code": "Class AfterEach {\n\tprotected Trigger getContinuationTrigger(java.util.List<Trigger> continuationTriggers); // Subclasses should override this to return the Trigger.getContinuationTrigger() of this Trigger.\n\torg.joda.time.Instant getWatermarkThatGuaranteesFiring(BoundedWindow window); // For internal use only; no backwards-compatibility guarantees.\n\tstatic AfterEach inOrder(java.util.List<Trigger> triggers); // Returns an AfterEach Trigger with the given subtriggers.\n\tstatic AfterEach inOrder(Trigger... triggers); // Returns an AfterEach Trigger with the given subtriggers.\n\tboolean mayFinish(); // For internal use only; no backwards-compatibility guarantees.\n}"}
{"index": 13521, "repo": "spring-messaging-6.0.11", "des": "Resolves method parameters by delegating to a list of registered HandlerMethodArgumentResolvers.", "code": "public class HandlerMethodArgumentResolverComposite extends Object implements HandlerMethodArgumentResolver {\n\tHandlerMethodArgumentResolverComposite addResolver(HandlerMethodArgumentResolver resolver); // Add the given HandlerMethodArgumentResolver.\n\tHandlerMethodArgumentResolverComposite addResolvers(List<? extends HandlerMethodArgumentResolver> resolvers); // Add the given HandlerMethodArgumentResolvers.\n\tHandlerMethodArgumentResolverComposite addResolvers(HandlerMethodArgumentResolver... resolvers); // Add the given HandlerMethodArgumentResolvers.\n\tvoid clear(); // Clear the list of configured resolvers and the resolver cache.\n\tHandlerMethodArgumentResolver getArgumentResolver(org.springframework.core.MethodParameter parameter); // Find a registered HandlerMethodArgumentResolver that supports the given method parameter.\n\tList<HandlerMethodArgumentResolver> getResolvers(); // Return a read-only list with the contained resolvers, or an empty list.\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message); // Iterate over registered HandlerMethodArgumentResolvers and invoke the one that supports it.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by any registered HandlerMethodArgumentResolver.\n}"}
{"index": 16441, "repo": "spring-batch-infrastructure-5.0.2", "des": "Default implementation of FragmentEventReader", "code": "public class DefaultFragmentEventReader extends Object implements FragmentEventReader {\n\tvoid close();\n\tString getElementText();\n\tObject getProperty(String name);\n\tboolean hasNext();\n\tvoid markFragmentProcessed(); // Finishes reading the fragment in case the fragment was processed without being read until the end.\n\tvoid markStartFragment(); // Tells the event reader its cursor position is exactly before the fragment.\n\tObject next();\n\tXMLEvent nextEvent();\n\tXMLEvent nextTag();\n\tXMLEvent peek();\n\tvoid remove();\n\tvoid reset(); // Reset the state of the fragment reader - make it forget it assumptions about current position of cursor (e.g.\n}"}
{"index": 15183, "repo": "spring-boot-3.1.1", "des": "Abstract base ServletContextInitializer to register Filters in a Servlet 3.0+ container.", "code": "public abstract class AbstractFilterRegistrationBean<T extends jakarta.servlet.Filter> extends DynamicRegistrationBean<jakarta.servlet.FilterRegistration.Dynamic> {\n\tprotected jakarta.servlet.FilterRegistration.Dynamic addRegistration(String description, jakarta.servlet.ServletContext servletContext);\n\tvoid addServletNames(String... servletNames); // Add servlet names for the filter.\n\tvoid addServletRegistrationBeans(ServletRegistrationBean<?>... servletRegistrationBeans); // Add ServletRegistrationBeans for the filter.\n\tvoid addUrlPatterns(String... urlPatterns); // Add URL patterns, as defined in the Servlet specification, that the filter will be registered against.\n\tprotected void configure(jakarta.servlet.FilterRegistration.Dynamic registration); // Configure registration settings.\n\tprotected String getDescription(); // Return a description of the registration.\n\tabstract T getFilter(); // Return the Filter to be registered.\n\tCollection<String> getServletNames(); // Return a mutable collection of servlet names that the filter will be registered against.\n\tCollection<ServletRegistrationBean<?>> getServletRegistrationBeans(); // Return a mutable collection of the ServletRegistrationBean that the filter will be registered against.\n\tCollection<String> getUrlPatterns(); // Return a mutable collection of URL patterns, as defined in the Servlet specification, that the filter will be registered against.\n\tboolean isMatchAfter(); // Return if filter mappings should be matched after any declared Filter mappings of the ServletContext.\n\tvoid setDispatcherTypes(jakarta.servlet.DispatcherType first, jakarta.servlet.DispatcherType... rest); // Convenience method to set dispatcher types using the specified elements.\n\tvoid setDispatcherTypes(EnumSet<jakarta.servlet.DispatcherType> dispatcherTypes); // Sets the dispatcher types that should be used with the registration.\n\tvoid setMatchAfter(boolean matchAfter); // Set if the filter mappings should be matched after any declared filter mappings of the ServletContext.\n\tvoid setServletNames(Collection<String> servletNames); // Set servlet names that the filter will be registered against.\n\tvoid setServletRegistrationBeans(Collection<? extends ServletRegistrationBean<?>> servletRegistrationBeans); // Set ServletRegistrationBeans that the filter will be registered against.\n\tvoid setUrlPatterns(Collection<String> urlPatterns); // Set the URL patterns that the filter will be registered against.\n}"}
{"index": 7468, "repo": "nifi-client-dto-1.22.0", "des": "Contains details about this NiFi including the title and version.", "code": "Class AboutDTO {\n\tString getBuildBranch();\n\tString getBuildRevision();\n\tString getBuildTag();\n\tDate getBuildTimestamp();\n\tString getContentViewerUrl();\n\tDate getTimezone();\n\tString getTitle(); // The title to be used on the page and in the About dialog.\n\tString getUri();\n\tString getVersion(); // The version of this NiFi.\n\tvoid setBuildBranch(String buildBranch);\n\tvoid setBuildRevision(String buildRevision);\n\tvoid setBuildTag(String buildTag);\n\tvoid setBuildTimestamp(Date buildTimestamp);\n\tvoid setContentViewerUrl(String contentViewerUrl);\n\tvoid setTimezone(Date timezone);\n\tvoid setTitle(String title);\n\tvoid setUri(String uri);\n\tvoid setVersion(String version);\n}"}
{"index": 3329, "repo": "spring-social-core-1.1.6.RELEASE", "des": "Base abstraction for factories that construct service provider Connection instances.", "code": "Class ConnectionFactory<A> {\n\tabstract Connection<A> createConnection(ConnectionData data);\n\tprotected ApiAdapter<A> getApiAdapter(); // Exposes the ApiAdapter to subclasses.\n\tjava.lang.String getProviderId(); // The unique id of the provider this factory creates connections to.\n\tprotected ServiceProvider<A> getServiceProvider(); // Exposes the ServiceProvider instance to subclasses.\n}"}
{"index": 4128, "repo": "camel-core-3.0.0-RC1", "des": "Removes message headers whose name matches a specified pattern.", "code": "Class RemoveHeadersDefinition {\n\tString getExcludePattern();\n\tString[] getExcludePatterns();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getPattern();\n\tString getShortName();\n\tvoid setExcludePattern(String excludePattern); // Name or patter of headers to not remove.\n\tvoid setExcludePatterns(String[] excludePatterns); // Name or pattern of headers to not remove.\n\tvoid setPattern(String pattern); // Name or pattern of headers to remove.\n}"}
{"index": 6102, "repo": "jackson-databind-2.15.2", "des": "Enumeration that defines simple on/off features that affect the way Java objects are deserialized from JSON Note that features can be set both through ObjectMapper (as sort of defaults) and through ObjectReader.", "code": "Enum DeserializationFeature {\n\tboolean enabledByDefault(); // Accessor for checking whether this feature is enabled by default.\n\tboolean enabledIn(int flags); // Convenience method for checking whether feature is enabled in given bitmask\n\tint getMask(); // Returns bit mask for this feature instance\n\tstatic DeserializationFeature valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DeserializationFeature[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10671, "repo": "groovy-all-4.0.13", "des": "interface to mark a AstNode as Variable.", "code": "public interface Variable {\n\tExpression getInitialExpression(); // expression used to initialize the variable or null of there is no initialization.\n\tint getModifiers();\n\tString getName(); // the name of the variable\n\tClassNode getOriginType(); // the type before wrapping primitives type of the variable\n\tClassNode getType(); // the type of the variable\n\tboolean hasInitialExpression(); // returns true if there is an initialization expression\n\tboolean isClosureSharedVariable();\n\tboolean isDynamicTyped();\n\tboolean isInStaticContext(); // returns true if this variable is used in a static context.\n\tvoid setClosureSharedVariable(boolean inClosure);\n}"}
{"index": 1438, "repo": "pdfbox-3.0.0-beta1", "des": "This abstract class is used as a superclass for the different FDF annotations with text markup attributes.", "code": "Class FDFAnnotationTextMarkup {\n\tfloat[] getCoords(); // Get the coordinates of individual words or group of words.\n\tvoid setCoords(float[] coords); // Set the coordinates of individual words or group of words.\n}"}
{"index": 16246, "repo": "maven-model-builder-4.0.0-alpha-7", "des": "Wraps an ordinary File as a model source.", "code": "public class FileModelSource extends FileSource implements ModelSource2 {\n\tboolean equals(Object obj);\n\tURI getLocationURI(); // Returns location of the POM, never null.\n\tFile getPomFile(); // Deprecated. instead use FileSource.getFile()\n\tModelSource2 getRelatedSource(String relPath); // Returns model source identified by a path relative to this model source POM.\n}"}
{"index": 171, "repo": "commons-collections4-4.4", "des": "Decorates a Map to ensure that the order of addition is retained using a List to maintain order.", "code": "Class ListOrderedMap<K,V> {\n\tList<K> asList(); // Gets an unmodifiable List view of the keys which changes as the map changes.\n\tvoid clear();\n\tSet<Map.Entry<K,V>> entrySet(); // Gets a view over the entries in the map.\n\tK firstKey(); // Gets the first key in this map by insert order.\n\tK get(int index); // Gets the key at the specified index.\n\tV getValue(int index); // Gets the value at the specified index.\n\tint indexOf(Object key); // Gets the index of the specified key.\n\tList<K> keyList(); // Gets a view over the keys in the map as a List.\n\tSet<K> keySet(); // Gets a view over the keys in the map.\n\tK lastKey(); // Gets the last key in this map by insert order.\n\tstatic <K,V> ListOrderedMap<K,V> listOrderedMap(Map<K,V> map); // Factory method to create an ordered map.\n\tOrderedMapIterator<K,V> mapIterator(); // Obtains a MapIterator over the map.\n\tK nextKey(Object key); // Gets the next key to the one specified using insert order.\n\tK previousKey(Object key); // Gets the previous key to the one specified using insert order.\n\tV put(int index, K key, V value); // Puts a key-value mapping into the map at the specified index.\n\tV put(K key, V value); // Note that the return type is Object, rather than V as in the Map interface.\n\tvoid putAll(int index, Map<? extends K,? extends V> map); // Puts the values contained in a supplied Map into the Map starting at the specified index.\n\tvoid putAll(Map<? extends K,? extends V> map);\n\tV remove(int index); // Removes the element at the specified index.\n\tV remove(Object key);\n\tV setValue(int index, V value); // Sets the value at the specified index.\n\tList<V> valueList(); // Gets a view over the values in the map as a List.\n\tCollection<V> values(); // Gets a view over the values in the map.\n}"}
{"index": 17810, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read and write XML using Spring's Marshaller and Unmarshaller abstractions.", "code": "public class MarshallingHttpMessageConverter extends AbstractXmlHttpMessageConverter<Object> {\n\tboolean canRead(Class<?> clazz, MediaType mediaType); // This implementation checks if the given class is supported, and if the supported media types include the given media type.\n\tboolean canWrite(Class<?> clazz, MediaType mediaType); // This implementation checks if the given class is supported, and if the supported media types include the given media type.\n\tprotected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source source); // Abstract template method called from AbstractHttpMessageConverter.read(Class, HttpInputMessage).\n\tvoid setMarshaller(org.springframework.oxm.Marshaller marshaller); // Set the Marshaller to be used by this message converter.\n\tvoid setUnmarshaller(org.springframework.oxm.Unmarshaller unmarshaller); // Set the Unmarshaller to be used by this message converter.\n\tprotected boolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tprotected void writeToResult(Object o, HttpHeaders headers, Result result); // Abstract template method called from AbstractXmlHttpMessageConverter.writeInternal(Object, HttpOutputMessage).\n}"}
{"index": 17313, "repo": "groovy-4.0.13", "des": "Support methods for Groovy category usage", "code": "public class GroovyCategorySupport extends Object {\n\tstatic GroovyCategorySupport.CategoryMethodList getCategoryMethods(String name); // This method is used to pull all the new methods out of the local thread context with a particular name.\n\tstatic AtomicInteger getCategoryNameUsage(String name);\n\tstatic String getPropertyCategoryGetterName(String propertyName);\n\tstatic String getPropertyCategorySetterName(String propertyName);\n\tstatic boolean hasCategoryInAnyThread(); // Deprecated. use hasCategoryInCurrentThread()\n\tstatic boolean hasCategoryInCurrentThread();\n\tstatic <T> T use(Class categoryClass, Closure<T> closure); // Create a scope based on given categoryClass and invoke closure within that scope.\n\tstatic <T> T use(List<Class> categoryClasses, Closure<T> closure); // Create a scope based on given categoryClasses and invoke closure within that scope.\n}"}
{"index": 3687, "repo": "hive-serde-4.0.0-alpha-2", "des": "An interface for TProtocols that actually write out nulls - This should be for all those that don't actually use fieldids in the written data like TCTLSeparatedProtocol.", "code": "Interface WriteNullsProtocol {\n\tboolean lastPrimitiveWasNull(); // Was the last primitive read really a NULL.\n\tvoid writeNull(); // Write a null.\n}"}
{"index": 14484, "repo": "spring-security-web-6.1.2", "des": "Decides whether a web channel provides sufficient security.", "code": "public interface ChannelDecisionManager {\n\tvoid decide(FilterInvocation invocation, Collection<org.springframework.security.access.ConfigAttribute> config); // Decided whether the presented FilterInvocation provides the appropriate level of channel security based on the requested list of ConfigAttributes.\n\tboolean supports(org.springframework.security.access.ConfigAttribute attribute); // Indicates whether this ChannelDecisionManager is able to process the passed ConfigAttribute.\n}"}
{"index": 18636, "repo": "opencms-gwt-15.0", "des": "The context menu entry for \"bumping\" a detail page, i.e.", "code": "Class CmsBumpDetailPageMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 9454, "repo": "curator-recipes-5.5.0", "des": "A utility that attempts to keep the data from a node locally cached.", "code": "Interface CuratorCache {\n\tstatic CuratorCacheBridgeBuilder bridgeBuilder(org.apache.curator.framework.CuratorFramework client, String path); // Start a Curator Cache Bridge builder.\n\tstatic CuratorCache build(org.apache.curator.framework.CuratorFramework client, String path, CuratorCache.Options... options); // Return a Curator Cache for the given path with the given options using a standard storage instance\n\tstatic CuratorCacheBuilder builder(org.apache.curator.framework.CuratorFramework client, String path); // Start a Curator Cache builder\n\tvoid close(); // Close the cache, stop responding to events, etc.\n\tOptional<ChildData> get(String path); // Return an entry from storage\n\torg.apache.curator.framework.listen.Listenable<CuratorCacheListener> listenable(); // Return the listener container so that listeners can be registered to be notified of changes to the cache\n\tint size(); // Return the current number of entries in storage\n\tvoid start(); // Start the cache.\n\tStream<ChildData> stream(); // Return a stream over the storage entries.\n}"}
{"index": 15125, "repo": "spring-data-elasticsearch-5.1.2", "des": "Response of an update by query operation.", "code": "public class ByQueryResponse extends Object {\n\tstatic ByQueryResponse.ByQueryResponseBuilder builder(); // Create a new ByQueryResponse.ByQueryResponseBuilder to build ByQueryResponse\n\tint getBatches(); // The number of scroll responses pulled back by the update by query.\n\tlong getBulkRetries(); // The number of times that the request had retry bulk actions.\n\tlong getDeleted(); // The number of documents that were successfully deleted.\n\tList<ByQueryResponse.Failure> getFailures(); // All of the bulk failures.\n\tlong getNoops(); // The number of documents that were ignored because the script used for the update by query returned a noop value for ctx.op.\n\tString getReasonCancelled(); // The reason that the request was canceled or null if it hasn't been.\n\tList<ByQueryResponse.SearchFailure> getSearchFailures(); // Failures during search phase\n\tlong getSearchRetries(); // The number of times that the request had retry search actions.\n\tboolean getTimedOut(); // Did any of the sub-requests that were part of this request timeout?\n\tlong getTook(); // The number of milliseconds from start to end of the whole operation.\n\tlong getTotal(); // The number of documents that were successfully processed.\n\tlong getUpdated(); // The number of documents that were successfully updated.\n\tlong getVersionConflicts(); // The number of version conflicts that the update by query hit.\n}"}
{"index": 4335, "repo": "beam-sdks-java-core-2.49.0", "des": "A DelegateCoder<T, IntermediateT> wraps a Coder for IntermediateT and encodes/decodes values of type T by converting to/from IntermediateT and then encoding/decoding using the underlying Coder<IntermediateT>.", "code": "Class DelegateCoder<T,IntermediateT> {\n\tT decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tT decode(java.io.InputStream inStream, Coder.Context context); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(T value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tvoid encode(T value, java.io.OutputStream outStream, Coder.Context context); // Encodes the given value of type T onto the given output stream in the given context.\n\tboolean equals(@Nullable java.lang.Object o);\n\tCoder<IntermediateT> getCoder(); // Returns the coder used to encode/decode the intermediate values produced/consumed by the coding functions of this DelegateCoder.\n\tTypeDescriptor<T> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tstatic <T,IntermediateT>DelegateCoder<T,IntermediateT> of(Coder<IntermediateT> coder, DelegateCoder.CodingFunction<T,IntermediateT> toFn, DelegateCoder.CodingFunction<IntermediateT,T> fromFn);\n\tstatic <T,IntermediateT>DelegateCoder<T,IntermediateT> of(Coder<IntermediateT> coder, DelegateCoder.CodingFunction<T,IntermediateT> toFn, DelegateCoder.CodingFunction<IntermediateT,T> fromFn, @Nullable TypeDescriptor<T> typeDescriptor);\n\tjava.lang.Object structuralValue(T value); // Returns an object with an Object.equals() method that represents structural equality on the argument.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 10831, "repo": "spring-boot-actuator-3.1.1", "des": "Base class for descriptions of a Trigger.", "code": "public abstract static class QuartzEndpoint.TriggerDescriptor extends Object {\n\tprotected abstract void appendDetails(Map<String,Object> content); // Append trigger-implementation specific details to the specified content.\n\tprotected abstract void appendSummary(Map<String,Object> content); // Append trigger-implementation specific summary items to the specified content.\n\tMap<String,Object> buildDetails(org.quartz.Trigger.TriggerState triggerState, Map<String,Object> sanitizedDataMap); // Build the full details of the trigger.\n\tMap<String,Object> buildSummary(boolean addTriggerSpecificSummary); // Build the summary of the trigger.\n\tprotected org.quartz.Trigger getTrigger();\n\tprotected org.springframework.boot.actuate.quartz.QuartzEndpoint.TriggerType getType();\n\tprotected void putIfNoNull(Map<String,Object> content, String key, Object value);\n}"}
{"index": 9587, "repo": "commons-math3-3.6.1", "des": "This class is a step handler that does nothing.", "code": "Class DummyStepHandler {\n\tstatic DummyStepHandler getInstance(); // Get the only instance.\n\tvoid handleStep(StepInterpolator interpolator, boolean isLast); // Handle the last accepted step.\n\tvoid init(double t0, double[] y0, double t); // Initialize step handler at the start of an ODE integration.\n}"}
{"index": 9729, "repo": "commons-math3-3.6.1", "des": "Base interface for multivariate distributions on the reals.", "code": "Interface MultivariateRealDistribution {\n\tdouble density(double[] x); // Returns the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tint getDimension(); // Gets the number of random variables of the distribution.\n\tvoid reseedRandomGenerator(long seed); // Reseeds the random generator used to generate samples.\n\tdouble[] sample(); // Generates a random value vector sampled from this distribution.\n\tdouble[][] sample(int sampleSize); // Generates a list of a random value vectors from the distribution.\n}"}
{"index": 13757, "repo": "spring-webmvc-6.0.11", "des": "The <param> tag collects name-value parameters and passes them to a ParamAware ancestor in the tag hierarchy.", "code": "public class ParamTag extends BodyTagSupport {\n\tint doEndTag();\n\tvoid release();\n\tvoid setName(String name); // Set the name of the parameter (required).\n\tvoid setValue(String value); // Set the value of the parameter (optional).\n}"}
{"index": 569, "repo": "ignite-core-2.15.0", "des": "Message represent request for change cluster global state.", "code": "Class ChangeGlobalStateMessage {\n\t@Nullable DiscoveryCustomMessage ackMessage(); // Called when custom message has been handled by all nodes.\n\t@Nullable BaselineTopology baselineTopology();\n\tDiscoCache createDiscoCache(GridDiscoveryManager mgr, AffinityTopologyVersion topVer, DiscoCache discoCache); // Creates new discovery cache if message caused topology version change.\n\t@Nullable ExchangeActions exchangeActions();\n\tboolean forceChangeBaselineTopology();\n\tboolean forceDeactivation();\n\tIgniteUuid id();\n\tUUID initiatorNodeId();\n\tboolean isMutable();\n\tUUID requestId();\n\t@Nullable ServiceDeploymentActions servicesDeploymentActions();\n\tvoid servicesDeploymentActions(ServiceDeploymentActions serviceDeploymentActions);\n\tClusterState state();\n\t@Nullable List<StoredCacheData> storedCacheConfigurations();\n\tlong timestamp();\n}"}
{"index": 17793, "repo": "spring-web-6.0.11", "des": "ClientHttpConnector for the Java HttpClient.", "code": "public class JdkClientHttpConnector extends Object implements ClientHttpConnector {\n\treactor.core.publisher.Mono<ClientHttpResponse> connect(HttpMethod method, URI uri, Function<? super ClientHttpRequest,reactor.core.publisher.Mono<Void>> requestCallback); // Connect to the origin server using the given HttpMethod and URI and apply the given requestCallback when the HTTP request of the underlying API can be initialized and written to.\n\tvoid setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory bufferFactory); // Set the buffer factory to use.\n}"}
{"index": 16522, "repo": "spring-batch-infrastructure-5.0.2", "des": "A ItemReader that reads records utilizing a PagingAndSortingRepository.", "code": "public class RepositoryItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void doClose(); // Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doOpen(); // Open resources necessary to start reading input.\n\tprotected List<T> doPageRead(); // Performs the actual reading of a page via the repository.\n\tprotected T doRead(); // Read next item from input.\n\tprotected void jumpToItem(int itemLastIndex); // Move to the given item index.\n\tvoid setArguments(List<?> arguments); // Arguments to be passed to the data providing method.\n\tvoid setMethodName(String methodName); // Specifies what method on the repository to call.\n\tvoid setPageSize(int pageSize);\n\tvoid setRepository(org.springframework.data.repository.PagingAndSortingRepository<?,?> repository); // The PagingAndSortingRepository implementation used to read input from.\n\tvoid setSort(Map<String,org.springframework.data.domain.Sort.Direction> sorts); // Provides ordering of the results so that order is maintained between paged queries\n}"}
{"index": 4935, "repo": "commons-collections-3.2.2", "des": "Provides a base decorator that enables additional functionality to be added to a BidiMap via decoration.", "code": "Class AbstractBidiMapDecorator {\n\tprotected BidiMap getBidiMap(); // Gets the map being decorated.\n\tObject getKey(Object value); // Gets the key that is currently mapped to the specified value.\n\tBidiMap inverseBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tMapIterator mapIterator(); // Obtains a MapIterator over the map.\n\tObject removeValue(Object value); // Removes the key-value pair that is currently mapped to the specified value (optional operation).\n}"}
{"index": 1105, "repo": "ignite-core-2.15.0", "des": "AffinityFunction implementation which can be used to configure .", "code": "Class PlatformDotNetAffinityFunction {\n\tList<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx); // Gets affinity nodes for a partition.\n\tPlatformAffinityFunction getFunc(); // Gets the inner func.\n\tMap<String,?> getProperties(); // Get properties.\n\tString getTypeName(); // Gets .NET type name.\n\tvoid init(PlatformAffinityFunction func); // Initializes this instance.\n\tint partition(Object key); // Gets partition number for a given key starting from 0.\n\tint partitions(); // Gets total number of partitions available.\n\tvoid readExternal(ObjectInput in);\n\tvoid removeNode(UUID nodeId); // Removes node from affinity.\n\tvoid reset(); // Resets cache affinity to its initial state.\n\tPlatformDotNetAffinityFunction setProperties(Map<String,?> props); // Set properties.\n\tPlatformDotNetAffinityFunction setTypeName(String typName); // Sets .NET type name.\n\tvoid start(); // Starts grid component, called on grid start.\n\tvoid stop(); // Stops grid component, called on grid shutdown.\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 7644, "repo": "cassandra-all-4.1.2", "des": "Ways that a particular instance of ICompressor should be used internally in Cassandra.", "code": "Enum ICompressor.Uses {\n\tstatic ICompressor.Uses valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic ICompressor.Uses[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11764, "repo": "bedrock-core-7.0.2", "des": "A Existing is a specialized Deferred implementation that is based on a well-known and already established object, that is guaranteed to be available when Existing.get() is called.", "code": "public class Existing<T> extends Object implements Deferred<T> {\n\tT get(); // Attempts to obtain the underlying object.\n\tClass<T> getDeferredClass(); // Obtains the Class of the Deferred reference.\n}"}
{"index": 7709, "repo": "cassandra-all-4.1.2", "des": "A class for providing synchronization between producers and consumers that do not communicate directly with each other, but where the consumers need to process their work in contiguous batches.", "code": "Class OpOrder {\n\tvoid awaitNewBarrier();\n\tOpOrder.Group getCurrent();\n\tOpOrder.Barrier newBarrier(); // Creates a new barrier.\n\tOpOrder.Group start(); // Start an operation against this OpOrder.\n}"}
{"index": 3865, "repo": "hbase-client-3.0.0-alpha-4", "des": "Base permissions instance representing the ability to perform a given set of actions.", "code": "Class Permission {\n\tboolean equals(Object obj);\n\tboolean equalsExceptActions(Object obj); // Check if two permission equals regardless of actions.\n\tPermission.Scope getAccessScope();\n\tPermission.Action[] getActions();\n\tbyte getVersion(); // Returns the object version number\n\tboolean implies(Permission.Action action); // check if given action is granted\n\tstatic Permission.Builder newBuilder(); // Build a global permission\n\tstatic Permission.Builder newBuilder(String namespace); // Build a namespace permission\n\tstatic Permission.Builder newBuilder(TableName tableName); // Build a table permission\n\tprotected String rawExpression();\n\tvoid readFields(DataInput in);\n\tvoid setActions(Permission.Action[] assigned);\n\tvoid write(DataOutput out);\n}"}
{"index": 11157, "repo": "tribuo-core-4.3.1", "des": "This is used for stateless functions such as exp, log, addition or multiplication by a constant.", "code": "public final class SimpleTransform extends Object implements Transformer, Transformation, TransformStatistics {\n\tstatic SimpleTransform add(double operand); // Generate a SimpleTransform that adds the operand to each value.\n\tstatic SimpleTransform binarise(); // Generate a SimpleTransform that sets negative and zero values to zero and positive values to one.\n\tTransformStatistics createStats(); // Returns itself.\n\tstatic SimpleTransform div(double operand); // Generate a SimpleTransform that divides each value by the operand.\n\tboolean equals(Object o);\n\tstatic SimpleTransform exp(); // Generate a SimpleTransform that applies Math.exp(double).\n\tTransformer generateTransformer(); // Returns itself.\n\tTransformationProvenance getProvenance();\n\tstatic SimpleTransform log(); // Generate a SimpleTransform that applies Math.log(double).\n\tstatic SimpleTransform mul(double operand); // Generate a SimpleTransform that multiplies each value by the operand.\n\tvoid observeSparse(); // Deprecated.\n\tvoid observeSparse(int count); // No-op on this TransformStatistics.\n\tvoid observeValue(double value); // No-op on this TransformStatistics.\n\tvoid postConfig(); // Used by the OLCUT configuration system, and should not be called by external code.\n\torg.tribuo.protos.core.TransformerProto serialize(); // Serializes this object to a protobuf.\n\tstatic SimpleTransform sub(double operand); // Generate a SimpleTransform that subtracts the operand from each value.\n\tstatic SimpleTransform threshold(double min, double max); // Generate a SimpleTransform that sets values below min to min, and values above max to max.\n\tdouble transform(double input); // Apply the operation to the input.\n}"}
{"index": 785, "repo": "ignite-core-2.15.0", "des": "Convenient adapter for \"rich\" iterable interface.", "code": "Class GridIterableAdapter<T> {\n\tboolean hasNext();\n\tboolean hasNextX(); // This method is the same as Iterator.hasNext(), but allows for failure with exception.\n\tGridIterator<T> iterator(); // Returns GridIterator which extends regular Iterator interface and adds methods that account for possible failures in cases when iterating over data that has been partially received over network.\n\tT next();\n\tT nextX(); // This method is the same as Iterator.next(), but allows for failure with exception.\n\tvoid remove();\n\tvoid removeX(); // This method is the same as Iterator.remove(), but allows for failure with exception.\n}"}
{"index": 7153, "repo": "calcite-core-1.34.0", "des": "An assistant which offers hints and corrections to a partially-formed SQL statement.", "code": "Class SqlAdvisor {\n\tprotected @Nullable SqlNode collectParserError(String sql, List<SqlAdvisor.ValidateErrorInfo> errorList); // Attempts to parse a SQL statement and adds to the errorList if any syntax error is found.\n\tList<SqlMoniker> getCompletionHints(String sql, int cursor, String[] replaced); // Gets completion hints for a partially completed or syntactically incorrect sql statement with cursor pointing to the position where completion hints are requested.\n\tList<SqlMoniker> getCompletionHints(String sql, SqlParserPos pos); // Gets completion hints for a syntactically correct SQL statement with dummy SqlIdentifier.\n\tList<SqlMoniker> getCompletionHints0(String sql, int cursor);\n\tprotected org.apache.calcite.sql.parser.SqlAbstractParserImpl.Metadata getParserMetadata(); // Returns the underlying Parser metadata.\n\t@Nullable SqlMoniker getQualifiedName(String sql, int cursor); // Gets the fully qualified name for a SqlIdentifier at a given position of a sql statement.\n\tString getReplacement(SqlMoniker hint, boolean quoted, org.apache.calcite.avatica.util.Casing preferredCasing);\n\tString getReplacement(SqlMoniker hint, String word);\n\tList<String> getReservedAndKeyWords(); // Returns an array of SQL reserved and keywords.\n\tboolean isValid(String sql); // Attempts to complete and validate a given partially completed sql statement, and returns whether it is valid.\n\tprotected SqlNode parseQuery(String sql); // Wrapper function to parse a SQL query (SELECT or VALUES, but not INSERT, UPDATE, DELETE, CREATE, DROP etc.), throwing a SqlParseException if the statement is not syntactically valid.\n\tString simplifySql(String sql, int cursor); // Turns a partially completed or syntactically incorrect sql statement into a simplified, valid one that can be passed into getCompletionHints(String, SqlParserPos).\n\t@Nullable List<SqlAdvisor.ValidateErrorInfo> validate(String sql); // Attempts to parse and validate a SQL statement.\n}"}
{"index": 18452, "repo": "opencms-core-15.0", "des": "Interface for components used as editable group rows.", "code": "Interface I_CmsEditableGroupRow {\n\tCmsEditableGroupButtons getButtonBar(); // Returns the button bar widget.\n\tcom.vaadin.ui.Component getComponent(); // Returns the input field.\n}"}
{"index": 5999, "repo": "commons-lang3-3.12.0", "des": "Faster methods to produce custom time zones.", "code": "Class FastTimeZone {\n\tstatic TimeZone getGmtTimeZone(); // Gets the GMT TimeZone.\n\tstatic TimeZone getGmtTimeZone(String pattern); // Gets a TimeZone with GMT offsets.\n\tstatic TimeZone getTimeZone(String id); // Gets a TimeZone, looking first for GMT custom ids, then falling back to Olson ids.\n}"}
{"index": 8184, "repo": "spring-ws-3.0.10.RELEASE", "des": "A sub-class of WsConfigurationSupport that detects and delegates to all beans of type WsConfigurer allowing them to customize the configuration provided by WsConfigurationSupport.", "code": "Class DelegatingWsConfiguration {\n\tprotected void addArgumentResolvers(List<MethodArgumentResolver> argumentResolvers); // Add custom MethodArgumentResolvers to use in addition to the ones registered by default.\n\tprotected void addInterceptors(List<EndpointInterceptor> interceptors); // Template method to add endpoint interceptors.\n\tprotected void addReturnValueHandlers(List<MethodReturnValueHandler> returnValueHandlers); // Add custom MethodReturnValueHandlers in addition to the ones registered by default.\n\tvoid setConfigurers(List<WsConfigurer> configurers);\n}"}
{"index": 17154, "repo": "spring-integration-core-6.1.2", "des": "A channel that sends Messages to each of its subscribers.", "code": "public class PublishSubscribeChannel extends AbstractExecutorChannel implements BroadcastCapableChannel {\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tprotected BroadcastingDispatcher getDispatcher();\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tfinal void onInit(); // Callback method for initialization.\n\tvoid setApplySequence(boolean applySequence); // Specify whether to apply the sequence number and size headers to the messages prior to invoking the subscribed handlers.\n\tvoid setErrorHandler(org.springframework.util.ErrorHandler errorHandler); // Provide an ErrorHandler strategy for handling Exceptions that occur downstream from this channel.\n\tvoid setIgnoreFailures(boolean ignoreFailures); // Specify whether failures for one or more of the handlers should be ignored.\n\tvoid setMinSubscribers(int minSubscribers); // If at least this number of subscribers receive the message, AbstractMessageChannel.send(org.springframework.messaging.Message) will return true.\n}"}
{"index": 10778, "repo": "spring-boot-actuator-3.1.1", "des": "A value object representing an audit event: at a particular time, a particular user or agent carried out an action of a particular type.", "code": "public class AuditEvent extends Object implements Serializable {\n\tMap<String,Object> getData(); // Returns the event data.\n\tString getPrincipal(); // Returns the user principal responsible for the event or an empty String if the principal is not available.\n\tInstant getTimestamp(); // Returns the date/time that the event was logged.\n\tString getType(); // Returns the type of event.\n}"}
{"index": 12425, "repo": "spring-data-couchbase-5.1.2", "des": "Reactive PartTree RepositoryQuery implementation for Couchbase.", "code": "public class ReactivePartTreeCouchbaseQuery extends AbstractReactiveCouchbaseQuery {\n\tprotected Query createCountQuery(ParametersParameterAccessor accessor); // Creates a Query instance using the given ParametersParameterAccessor.\n\tprotected Query createQuery(ParametersParameterAccessor accessor); // Creates a Query instance using the given ParameterAccessor\n\tPartTree getTree(); // Return the PartTree backing the query.\n\tprotected boolean isLimiting(); // Return whether the query has an explicit limit set.\n}"}
{"index": 6726, "repo": "ratis-common-2.5.1", "des": "Wrap a lock with the AutoCloseable interface so that the close() method will unlock the lock.", "code": "Class AutoCloseableLock {\n\tstatic AutoCloseableLock acquire(Lock lock); // Acquire the given lock and then wrap it with AutoCloseableLock so that the given lock can be released by calling close(), or by using a try-with-resources statement as shown below.\n\tstatic AutoCloseableLock acquire(Lock lock, Runnable preUnlock);\n\tvoid close(); // Unlock the underlying lock.\n}"}
{"index": 8376, "repo": "hadoop-aws-3.3.6", "des": "Base class for the audit spans implementations.", "code": "Class AbstractAuditSpanImpl {\n\tAuditSpanS3A activate();\n\tvoid close(); // Invoke AuditSpan.deactivate().\n\tString getOperationName(); // Get the name of the operation.\n\tString getSpanId(); // Return a span ID which must be unique for all spans within everywhere.\n\tlong getTimestamp();\n}"}
{"index": 11786, "repo": "bedrock-core-7.0.2", "des": "A Table represents a collection of zero or more vertically arranged Rows, each Row consisting of zero or more horizontally arranged Cells.", "code": "public class Table extends Object implements Iterable<Row>, Option {\n\tTable addRow(Cell... cells); // Adds a Row consisting of a collection of Cells to the Table\n\tTable addRow(Row row); // Adds a Row to the Table\n\tTable addRow(String... cells); // Adds a Row consisting of a collection of Cell content to the Table\n\tOptionsByType getOptions(); // Obtain the formatting OptionsByType for the Table.\n\tRow getRow(int index); // Obtains the Row at the specified index, commencing at 0.\n\tIterator<Row> iterator();\n\tstatic Row.Comparator orderByColumn(int column); // Obtains a Row Row.Comparator that uses the specific Cell for comparison (uses natural ordering of the Cell content to order the Row).\n\tint size(); // Obtains the number of Rows in the Table\n}"}
{"index": 16325, "repo": "maven-compat-4.0.0-alpha-7", "des": "Describes repository directory metadata.", "code": "public interface RepositoryMetadata extends ArtifactMetadata {\n\tMetadata getMetadata(); // Get the repository metadata associated with this marker.\n\tint getNature(); // Gets the artifact quality this metadata refers to.\n\tArtifactRepositoryPolicy getPolicy(ArtifactRepository repository); // Gets the policy that applies to this metadata regarding the specified repository.\n\tArtifactRepository getRepository(); // Get the repository the metadata was located in.\n\tboolean isSnapshot(); // Whether this represents a snapshot.\n\tvoid setMetadata(Metadata metadata); // Set the metadata contents.\n\tvoid setRepository(ArtifactRepository remoteRepository); // Set the repository the metadata was located in.\n}"}
{"index": 2143, "repo": "hive-exec-4.0.0-alpha-2", "des": "Common FileSystem utilities around FileId.", "code": "Class HdfsUtils {\n\tstatic long createTestFileId(String pathStr, org.apache.hadoop.fs.FileStatus fs, boolean doLog, String fsName);\n\tstatic Object getFileId(org.apache.hadoop.fs.FileSystem fileSystem, org.apache.hadoop.fs.Path path, boolean allowSynthetic, boolean checkDefaultFs, boolean forceSyntheticIds);\n\tstatic org.apache.hadoop.fs.Path getFileIdPath(org.apache.hadoop.fs.Path path, long fileId);\n\tstatic boolean isDefaultFs(org.apache.hadoop.hdfs.DistributedFileSystem fs);\n\tstatic List<org.apache.hadoop.hive.shims.HadoopShims.HdfsFileStatusWithId> listFileStatusWithId(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path dir, Ref<Boolean> useFileIds, boolean recursive, org.apache.hadoop.fs.PathFilter filter); // List files recursively in the given directory.\n\tstatic List<org.apache.hadoop.fs.FileStatus> listLocatedFileStatus(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path, org.apache.hadoop.fs.PathFilter filter, boolean recursive); // List filestatuses in the given directory.\n\tstatic List<org.apache.hadoop.fs.Path> listPath(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path, org.apache.hadoop.fs.PathFilter filter, boolean recursive);\n\tstatic boolean pathExists(org.apache.hadoop.fs.Path p, org.apache.hadoop.conf.Configuration conf);\n\tstatic List<org.apache.hadoop.hive.shims.HadoopShims.HdfsFileStatusWithId> tryListLocatedHdfsStatus(Ref<Boolean> useFileIds, org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path directory, org.apache.hadoop.fs.PathFilter filter);\n}"}
{"index": 6973, "repo": "calcite-core-1.34.0", "des": "Source mapping that returns the same result as a parent Mappings.", "code": "Class Mappings.OverridingSourceMapping {\n\tvoid clear(); // Removes all elements in the mapping.\n\tMappingType getMappingType(); // Returns the mapping type.\n\tint getSource(int target); // Returns the source that a target maps to.\n\tMapping inverse();\n\tboolean isIdentity(); // Returns whether this mapping is the identity.\n\tIterator<IntPair> iterator(); // Returns an iterator over the elements in this mapping.\n\tint size(); // Returns the number of elements in the mapping.\n}"}
{"index": 1768, "repo": "kafka-clients-3.5.0", "des": "Encapsulates details about finalized as well as supported features.", "code": "Class FeatureMetadata {\n\tboolean equals(Object other);\n\tMap<String,FinalizedVersionRange> finalizedFeatures(); // Returns a map of finalized feature versions.\n\tOptional<Long> finalizedFeaturesEpoch(); // The epoch for the finalized features.\n\tMap<String,SupportedVersionRange> supportedFeatures(); // Returns a map of supported feature versions.\n}"}
{"index": 17968, "repo": "spring-web-6.0.11", "des": "Sub-interface of ReactiveOutputMessage that has support for \"zero-copy\" file transfers.", "code": "public interface ZeroCopyHttpOutputMessage extends ReactiveHttpOutputMessage {\n\tdefault reactor.core.publisher.Mono<Void> writeWith(File file, long position, long count); // Use the given File to write the body of the message to the underlying HTTP layer.\n\treactor.core.publisher.Mono<Void> writeWith(Path file, long position, long count); // Use the given Path to write the body of the message to the underlying HTTP layer.\n}"}
{"index": 5551, "repo": "org.apache.karaf.main-2.4.4", "des": "The BundleRepository holds all installed Bundle object for the Framework.", "code": "Class BundleRepository {\n\tvoid add(AbstractBundle bundle);\n\tAbstractBundle getBundle(long bundleId); // Gets a bundle by its bundle Id.\n\tList<AbstractBundle> getBundles(); // Gets a list of bundles ordered by install order.\n\tAbstractBundle[] getBundles(String symbolicName);\n\tList<AbstractBundle> getBundles(String symbolicName, Version version);\n\tboolean remove(AbstractBundle bundle);\n\tvoid removeAllBundles();\n\tvoid update(String oldSymbolicName, AbstractBundle bundle);\n}"}
{"index": 9781, "repo": "commons-math3-3.6.1", "des": "Utilities for creating RandomGenerator instances.", "code": "Class RandomGeneratorFactory {\n\tstatic long convertToLong(int[] seed); // Converts seed from one representation to another.\n\tstatic RandomGenerator createRandomGenerator(Random rng); // Creates a RandomDataGenerator instance that wraps a Random instance.\n}"}
{"index": 13003, "repo": "spring-aop-6.0.11", "des": "Extension of AbstractAutoProxyCreator which implements BeanFactoryAware, adds exposure of the original target class for each proxied bean (AutoProxyUtils.ORIGINAL_TARGET_CLASS_ATTRIBUTE), and participates in an externally enforced target-class mode for any given bean (AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE).", "code": "public abstract class AbstractBeanFactoryAwareAdvisingPostProcessor extends AbstractAdvisingBeanPostProcessor implements org.springframework.beans.factory.BeanFactoryAware {\n\tprotected boolean isEligible(Object bean, String beanName); // Check whether the given bean is eligible for advising with this post-processor's Advisor.\n\tprotected ProxyFactory prepareProxyFactory(Object bean, String beanName); // Prepare a ProxyFactory for the given bean.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}"}
{"index": 12796, "repo": "spring-data-mongodb-4.1.2", "des": "The context in which a specific MongoJsonSchemaCreator.JsonSchemaPropertyContext.getProperty() is encountered during schema creation.", "code": "public static interface MongoJsonSchemaCreator.JsonSchemaPropertyContext {\n\tString getPath(); // The path to a given field/property in dot notation.\n\tMongoPersistentProperty getProperty(); // The current property.\n\t<T> MongoPersistentEntity<T> resolveEntity(MongoPersistentProperty property); // Obtain the MongoPersistentEntity for a given property.\n}"}
{"index": 10523, "repo": "groovy-all-4.0.13", "des": "GroovyResultSetExtension implements additional logic for ResultSet.", "code": "public class GroovyResultSetExtension extends GroovyObjectSupport {\n\tvoid add(Map values); // Adds a new row to the result set\n\tvoid eachRow(Closure closure); // Call the closure once for each row in the result set.\n\tObject getAt(int index); // Supports integer based subscript operators for accessing at numbered columns starting at zero.\n\tObject getProperty(String columnName); // Gets the value of the designated column in the current row of as an Object.\n\tprotected ResultSet getResultSet(); // Gets the current result set.\n\tObject invokeMethod(String name, Object args); // Invokes the given method.\n\tboolean next(); // Moves the cursor down one row from its current position.\n\tprotected int normalizeIndex(int index); // Takes a zero based index and convert it into an SQL based 1 based index.\n\tboolean previous(); // Moves the cursor to the previous row in this getResultSet() object.\n\tvoid putAt(int index, Object newValue); // Supports integer based subscript operators for updating the values of numbered columns starting at zero.\n\tvoid setProperty(String columnName, Object newValue); // Updates the designated column with an Object value.\n}"}
{"index": 4674, "repo": "commons-vfs2-2.9.0", "des": "A read-only file system for ZIP and JAR files.", "code": "Class ZipFileSystem {\n\tprotected void addCapabilities(Collection<Capability> caps); // Returns the capabilities of this file system.\n\tprotected FileObject createFile(AbstractFileName name); // Creates a file object.\n\tprotected ZipFile createZipFile(File file);\n\tprotected ZipFileObject createZipFileObject(AbstractFileName name, ZipEntry entry);\n\tprotected void doCloseCommunicationLink(); // Closes the underlying link used to access the files.\n\tprotected Charset getCharset();\n\tprotected FileObject getFileFromCache(FileName name); // Returns a cached file.\n\tprotected ZipFile getZipFile();\n\tvoid init(); // Initializes this component.\n\tprotected void putFileToCache(FileObject file); // Adds a file object to the cache.\n\tprotected void removeFileFromCache(FileName name); // remove a cached file.\n}"}
{"index": 4121, "repo": "camel-core-3.0.0-RC1", "des": "Route to be executed when Hystrix EIP executes fallback.", "code": "Class OnFallbackDefinition {\n\tBoolean getFallbackViaNetwork();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getShortName();\n\tboolean isFallbackViaNetwork();\n\tvoid setFallbackViaNetwork(Boolean fallbackViaNetwork); // Whether the fallback goes over the network.\n}"}
{"index": 401, "repo": "phoenix-core-5.1.3", "des": "Determines type of Phoenix Map Reduce job.", "code": "Enum PhoenixConfigurationUtil.MRJobType {\n\tstatic PhoenixConfigurationUtil.MRJobType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PhoenixConfigurationUtil.MRJobType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18374, "repo": "opencms-core-15.0", "des": "Holds exported module data and a modification date.", "code": "Class CmsModuleImportExportRepository.ModuleExportData {\n\tbyte[] getContent(); // Gets the exported data.\n\tlong getDateLastModified(); // Gets the last modification date.\n}"}
{"index": 17919, "repo": "spring-web-6.0.11", "des": "Servlet-based implementation of the RequestAttributes interface.", "code": "public class ServletRequestAttributes extends AbstractRequestAttributes {\n\tObject getAttribute(String name, int scope); // Return the value for the scoped attribute of the given name, if any.\n\tString[] getAttributeNames(int scope); // Retrieve the names of all attributes in the scope.\n\tfinal HttpServletRequest getRequest(); // Exposes the native HttpServletRequest that we're wrapping.\n\tfinal HttpServletResponse getResponse(); // Exposes the native HttpServletResponse that we're wrapping (if any).\n\tprotected final HttpSession getSession(boolean allowCreate); // Exposes the HttpSession that we're wrapping.\n\tString getSessionId(); // Return an id for the current underlying session.\n\tObject getSessionMutex(); // Expose the best available mutex for the underlying session: that is, an object to synchronize on for the underlying session.\n\tprotected boolean isImmutableSessionAttribute(String name, Object value); // Determine whether the given value is to be considered as an immutable session attribute, that is, doesn't have to be re-set via session.setAttribute since its value cannot meaningfully change internally.\n\tvoid registerDestructionCallback(String name, Runnable callback, int scope); // Register a callback to be executed on destruction of the specified attribute in the given scope.\n\tprotected void registerSessionDestructionCallback(String name, Runnable callback); // Register the given callback as to be executed after session termination.\n\tvoid removeAttribute(String name, int scope); // Remove the scoped attribute of the given name, if it exists.\n\tObject resolveReference(String key); // Resolve the contextual reference for the given key, if any.\n\tvoid setAttribute(String name, Object value, int scope); // Set the value for the scoped attribute of the given name, replacing an existing value (if any).\n\tprotected void updateAccessedSessionAttributes(); // Update all accessed session attributes through session.setAttribute calls, explicitly indicating to the container that they might have been modified.\n}"}
{"index": 13109, "repo": "spring-aop-6.0.11", "des": "Interceptor to wrap an after-throwing advice.", "code": "public class ThrowsAdviceInterceptor extends Object implements MethodInterceptor, AfterAdvice {\n\tint getHandlerMethodCount(); // Return the number of handler methods in this advice.\n\tObject invoke(MethodInvocation mi); // Implement this method to perform extra treatments before and after the invocation.\n}"}
{"index": 17323, "repo": "groovy-4.0.13", "des": "Handles generation of code for the @Immutable annotation.", "code": "public class ImmutableASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\tstatic Object checkImmutable(Class<?> clazz, String fieldName, Object field); // For compatibility with pre 2.5 compiled classes\n\tstatic Object checkImmutable(Class<?> clazz, String fieldName, Object field, List<String> knownImmutableFieldNames, List<Class> knownImmutableClasses);\n\tstatic Object checkImmutable(String className, String fieldName, Object field); // This method exists to be binary compatible with 1.7 - 1.8.6 compiled code.\n\tstatic void checkPropNames(Object instance, Map<String,Object> args); // Called during named-arguments constructor execution to check given names.\n\tString getAnnotationName(); // If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tvoid setCompilationUnit(CompilationUnit unit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 6015, "repo": "commons-lang3-3.12.0", "des": "Utility library that supplements the standard Random class.", "code": "Class RandomUtils {\n\tstatic boolean nextBoolean(); // Returns a random boolean value\n\tstatic byte[] nextBytes(int count); // Creates an array of random bytes.\n\tstatic double nextDouble(); // Returns a random double within 0 - Double.MAX_VALUE\n\tstatic double nextDouble(double startInclusive, double endExclusive); // Returns a random double within the specified range.\n\tstatic float nextFloat(); // Returns a random float within 0 - Float.MAX_VALUE\n\tstatic float nextFloat(float startInclusive, float endExclusive); // Returns a random float within the specified range.\n\tstatic int nextInt(); // Returns a random int within 0 - Integer.MAX_VALUE\n\tstatic int nextInt(int startInclusive, int endExclusive); // Returns a random integer within the specified range.\n\tstatic long nextLong(); // Returns a random long within 0 - Long.MAX_VALUE\n\tstatic long nextLong(long startInclusive, long endExclusive); // Returns a random long within the specified range.\n}"}
{"index": 13912, "repo": "spring-webflux-6.0.11", "des": "A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.", "code": "public final class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition> {\n\tPatternsRequestCondition combine(PatternsRequestCondition other); // Combine the patterns of the current and of the other instances as follows: If only one instance has patterns, use those.\n\tint compareTo(PatternsRequestCondition other, org.springframework.web.server.ServerWebExchange exchange); // Compare the two conditions based on the URL patterns they contain.\n\tprotected Collection<org.springframework.web.util.pattern.PathPattern> getContent(); // Return the discrete items a request condition is composed of.\n\tSet<String> getDirectPaths(); // Return the mapping paths that are not patterns.\n\tPatternsRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange exchange); // Checks if any of the patterns match the given request and returns an instance that is guaranteed to contain matching patterns, sorted.\n\tSet<org.springframework.web.util.pattern.PathPattern> getPatterns();\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n\tboolean isEmptyPathMapping(); // Whether the condition is the \"\" (empty path) mapping.\n}"}
{"index": 16951, "repo": "spring-integration-ip-6.1.2", "des": "Convenience class providing methods for testing IP components.", "code": "public final class TestingUtilities extends Object {\n\tstatic void waitListening(AbstractInternetProtocolReceivingChannelAdapter adapter, Long delayArg); // Wait for a server connection factory to actually start listening before starting a test.\n\tstatic void waitListening(AbstractServerConnectionFactory serverConnectionFactory, Long delayArg); // Wait for a server connection factory to actually start listening before starting a test.\n\tstatic void waitStopListening(AbstractServerConnectionFactory serverConnectionFactory, Long delayArg); // Wait for a server connection factory to stop listening.\n\tstatic void waitUntilFactoryHasThisNumberOfConnections(AbstractConnectionFactory factory, int n); // Wait for up to 10 seconds for the connection factory to have the specified number of connections.\n}"}
{"index": 15190, "repo": "spring-boot-3.1.1", "des": "AnsiElement implementation for ANSI 8-bit foreground or background color codes.", "code": "public final class Ansi8BitColor extends Object implements AnsiElement {\n\tstatic Ansi8BitColor background(int code); // Return a background ANSI color code instance for the given code.\n\tboolean equals(Object obj);\n\tstatic Ansi8BitColor foreground(int code); // Return a foreground ANSI color code instance for the given code.\n}"}
{"index": 14872, "repo": "spring-data-commons-3.1.2", "des": "A scanner that searches the classpath for matching types within given target packages.", "code": "public interface TypeScanner {\n\tdefault Set<Class<?>> collectAsSet(); // Obtain the scan result.\n\tvoid forEach(Consumer<Class<?>> action); // Performs the given action for each element found while scanning.\n\tdefault TypeScanner forTypesAnnotatedWith(Class<? extends Annotation>... annotations); // Define annotations identifying types to include in the scan result.\n\tTypeScanner forTypesAnnotatedWith(Collection<Class<? extends Annotation>> annotations); // Define annotations identifying types to include in the scan result.\n\tTypeScanner onClassNotFound(Consumer<ClassNotFoundException> action); // Define what happens in the case of a ClassNotFoundException.\n\tdefault TypeScanner scanPackages(String... packageNames); // Collects the names of packages to scan.\n\tTypeScanner scanPackages(Collection<String> packageNames); // Collects the names of packages to scan.\n\tstatic TypeScanner typeScanner(ClassLoader classLoader); // Create a new TypeScanner using the given ClassLoader.\n\tstatic TypeScanner typeScanner(ApplicationContext context); // Create a new TypeScanner using the given ApplicationContext.\n\tstatic TypeScanner typeScanner(ResourceLoader resourceLoader); // Create a new TypeScanner using the given ResourceLoader.\n}"}
{"index": 2916, "repo": "tink-1.10.0", "des": "Interface for Authenticated Encryption with Associated Data (AEAD).", "code": "Interface Aead {\n\tbyte[] decrypt(byte[] ciphertext, byte[] associatedData); // Decrypts ciphertext with associatedData as associated authenticated data.\n\tbyte[] encrypt(byte[] plaintext, byte[] associatedData); // Encrypts plaintext with associatedData as associated authenticated data.\n}"}
{"index": 13561, "repo": "spring-messaging-6.0.11", "des": "A STOMP over TCP client, configurable with either ReactorNettyTcpClient or ReactorNetty2TcpClient.", "code": "public class ReactorNettyTcpStompClient extends StompClientSupport {\n\torg.springframework.util.concurrent.ListenableFuture<StompSession> connect(StompHeaders connectHeaders, StompSessionHandler handler); // Deprecated. as of 6.0, in favor of connectAsync(StompHeaders, StompSessionHandler)\n\torg.springframework.util.concurrent.ListenableFuture<StompSession> connect(StompSessionHandler handler); // Deprecated. as of 6.0, in favor of connectAsync(StompSessionHandler)\n\tCompletableFuture<StompSession> connectAsync(StompHeaders connectHeaders, StompSessionHandler handler); // An overloaded version of connectAsync(StompSessionHandler) that accepts headers to use for the STOMP CONNECT frame.\n\tCompletableFuture<StompSession> connectAsync(StompSessionHandler handler); // Connect and notify the given StompSessionHandler when connected on the STOMP level.\n\tvoid shutdown(); // Shut down the client and release resources.\n}"}
{"index": 16073, "repo": "shiro-web-2.0.0-alpha-2", "des": "Requires the requesting user to be authenticated for the request to continue, and if they are not, forces the user to login via by redirecting them to the loginUrl you configure.", "code": "public class FormAuthenticationFilter extends AuthenticatingFilter {\n\tprotected org.apache.shiro.authc.AuthenticationToken createToken(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response);\n\tString getFailureKeyAttribute();\n\tprotected String getPassword(javax.servlet.ServletRequest request);\n\tString getPasswordParam();\n\tString getRememberMeParam();\n\tprotected String getUsername(javax.servlet.ServletRequest request);\n\tString getUsernameParam();\n\tprotected boolean isLoginSubmission(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response); // This default implementation merely returns true if the request is an HTTP POST, false otherwise.\n\tprotected boolean isRememberMe(javax.servlet.ServletRequest request); // Returns true if \"rememberMe\" should be enabled for the login attempt associated with the current request, false otherwise.\n\tprotected boolean onAccessDenied(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response); // Processes requests where the subject was denied access as determined by the isAccessAllowed method.\n\tprotected boolean onLoginFailure(org.apache.shiro.authc.AuthenticationToken token, org.apache.shiro.authc.AuthenticationException e, javax.servlet.ServletRequest request, javax.servlet.ServletResponse response);\n\tprotected boolean onLoginSuccess(org.apache.shiro.authc.AuthenticationToken token, org.apache.shiro.subject.Subject subject, javax.servlet.ServletRequest request, javax.servlet.ServletResponse response);\n\tprotected void setFailureAttribute(javax.servlet.ServletRequest request, org.apache.shiro.authc.AuthenticationException ae);\n\tvoid setFailureKeyAttribute(String failureKeyAttribute);\n\tvoid setLoginUrl(String loginUrl); // Sets the login URL used to authenticate a user.\n\tvoid setPasswordParam(String passwordParam); // Sets the request parameter name to look for when acquiring the password.\n\tvoid setRememberMeParam(String rememberMeParam); // Sets the request parameter name to look for when acquiring the rememberMe boolean value.\n\tvoid setUsernameParam(String usernameParam); // Sets the request parameter name to look for when acquiring the username.\n}"}
{"index": 11078, "repo": "spring-shell-core-3.1.2", "des": "Interface for single item selector spec builder.", "code": "public interface SingleItemSelectorSpec extends BaseInputSpec<SingleItemSelectorSpec> {\n\tComponentFlow.Builder and(); // Build and return parent builder.\n\tSingleItemSelectorSpec defaultSelect(String name); // Automatically selects and exposes a given item.\n\tSingleItemSelectorSpec max(int max); // Sets a maximum number of items in a selector list;\n\tSingleItemSelectorSpec name(String name); // Sets a name.\n\tSingleItemSelectorSpec next(Function<SingleItemSelector.SingleItemSelectorContext<String,SelectorItem<String>>,String> next); // Define a function which may return id of a next component to go.\n\tSingleItemSelectorSpec postHandler(Consumer<SingleItemSelector.SingleItemSelectorContext<String,SelectorItem<String>>> handler); // Adds a post-run context handler.\n\tSingleItemSelectorSpec preHandler(Consumer<SingleItemSelector.SingleItemSelectorContext<String,SelectorItem<String>>> handler); // Adds a pre-run context handler.\n\tSingleItemSelectorSpec renderer(Function<SingleItemSelector.SingleItemSelectorContext<String,SelectorItem<String>>,List<org.jline.utils.AttributedString>> renderer); // Sets a renderer function.\n\tSingleItemSelectorSpec resultMode(ResultMode resultMode); // Sets a result mode.\n\tSingleItemSelectorSpec resultValue(String resultValue); // Sets a result value.\n\tSingleItemSelectorSpec selectItem(String name, String item); // Adds a select item.\n\tSingleItemSelectorSpec selectItems(Map<String,String> selectItems); // Adds a map of select items.\n\tSingleItemSelectorSpec sort(Comparator<SelectorItem<String>> comparator); // Sets a Comparator for sorting items.\n\tSingleItemSelectorSpec storeResult(boolean store); // Automatically stores result from a SingleItemSelector.SingleItemSelectorContext into ComponentContext with key given to builder.\n\tSingleItemSelectorSpec template(String location); // Sets a default renderer template location.\n}"}
{"index": 14202, "repo": "wicket-core-10.0.0-M1", "des": "Default page context using RequestCycle.getRequest() and Session.get().", "code": "public class DefaultPageContext extends Object implements IPageContext {\n\t<T> T getRequestData(MetaDataKey<T> key, Supplier<T> defaultValue); // Get data from the current request cycle.\n\t<T extends Serializable>T getSessionAttribute(String key, Supplier<T> defaultValue); // Get an attribute from the session.\n\t<T extends Serializable>T getSessionData(MetaDataKey<T> key, Supplier<T> defaultValue); // Get metadata from the session.\n\tString getSessionId(boolean bind); // Get the identifier of the session.\n}"}
{"index": 12316, "repo": "jena-core-4.9.0", "des": "A wrapper class which simply defers all operations to its base.", "code": "public class WrappedGraph extends Object implements GraphWithPerform {\n\tvoid add(Triple t); // Add the triple t (if possible) to the set belonging to this graph\n\tvoid clear(); // Remove all the statements from this graph.\n\tvoid close(); // Free all resources, any further use of this Graph is an error.\n\tboolean contains(Node s, Node p, Node o); // Answer true iff the graph contains a triple matching (s, p, o).\n\tboolean contains(Triple t); // Answer true iff the graph contains a triple that t matches; t may be fluid.\n\tvoid delete(Triple t); // Delete the triple t (if possible) from the set belonging to this graph\n\tboolean dependsOn(Graph other); // true if this graph's content depends on the other graph.\n\tExtendedIterator<Triple> find(Node s, Node p, Node o); // Returns an iterator over Triples matching a pattern.\n\tExtendedIterator<Triple> find(Triple m); // Returns an iterator over all the Triples that match the triple pattern.\n\tCapabilities getCapabilities(); // returns this Graph's capabilities\n\tGraphEventManager getEventManager(); // Answer this Graph's event manager.\n\tPrefixMapping getPrefixMapping(); // returns this Graph's prefix mapping.\n\tTransactionHandler getTransactionHandler(); // returns this Graph's transaction handler\n\tGraph getWrapped();\n\tboolean isClosed(); // Answer true iff .close() has been called on this Graph.\n\tboolean isEmpty(); // Answer true iff this graph is empty.\n\tboolean isIsomorphicWith(Graph g);\n\tvoid performAdd(Triple t); // add t to this graph, but do not generate any event\n\tvoid performDelete(Triple t); // remove t from this graph, but do not generate any event\n\tvoid remove(Node s, Node p, Node o); // Remove all triples that match by find(s, p, o)\n\tint size(); // For a concrete graph this returns the number of triples in the graph.\n}"}
{"index": 3986, "repo": "zookeeper-3.8.2", "des": "This class contains the data for a node in the data tree.", "code": "Class DataNode {\n\tboolean addChild(String child); // Method that inserts a child into the children set\n\tvoid copyStat(Stat to);\n\tvoid deserialize(InputArchive archive, String tag);\n\tSet<String> getChildren(); // convenience methods to get the children\n\tbyte[] getData();\n\tlong getDigest();\n\tboolean isDigestCached();\n\tboolean removeChild(String child); // Method that removes a child from the children set\n\tvoid serialize(OutputArchive archive, String tag);\n\tvoid setChildren(HashSet<String> children); // convenience method for setting the children for this datanode\n\tvoid setDigest(long digest);\n\tvoid setDigestCached(boolean digestCached);\n}"}
{"index": 16952, "repo": "spring-integration-ip-6.1.2", "des": "A channel adapter to receive incoming UDP packets.", "code": "public class UnicastReceivingChannelAdapter extends AbstractInternetProtocolReceivingChannelAdapter {\n\tprotected boolean asyncSendMessage(DatagramPacket packet);\n\tprotected void doSend(DatagramPacket packet);\n\tprotected void doStop();\n\tString getComponentType();\n\tint getPort();\n\tDatagramSocket getSocket();\n\tprotected DatagramSocket getTheSocket();\n\tboolean isLongLived();\n\tprotected void onInit();\n\tprotected DatagramPacket receive();\n\tvoid run();\n\tprotected void sendAck(org.springframework.messaging.Message<byte[]> message);\n\tvoid setLengthCheck(boolean lengthCheck);\n\tvoid setLookupHost(boolean lookupHost);\n\tvoid setSocket(DatagramSocket socket);\n\tprotected void setSocketAttributes(DatagramSocket socket); // Sets timeout and receive buffer size; calls the socket customizer.\n\tvoid setSocketCustomizer(SocketCustomizer socketCustomizer); // Set a customizer to further configure the socket after creation.\n\tvoid setSoSendBufferSize(int soSendBufferSize);\n}"}
{"index": 4023, "repo": "zookeeper-3.8.2", "des": "This is a dummy MetricsProvider which does nothing.", "code": "Class NullMetricsProvider {\n\tvoid configure(Properties configuration); // Configure the provider.\n\tvoid dump(BiConsumer<String,Object> sink); // Dumps all metrics as a key-value pair.\n\tMetricsContext getRootContext(); // Provides access to the root context.\n\tvoid resetAllValues(); // Reset all values.\n\tvoid start(); // Start the provider.\n\tvoid stop(); // Releases resources held by the provider. This method must not throw exceptions. This method can be called more than once.\n}"}
{"index": 6985, "repo": "calcite-core-1.34.0", "des": "Extension to ViewTable that is modifiable.", "code": "Class ModifiableViewTable {\n\tModifiableViewTable extend(List<RelDataTypeField> extendedColumns, RelDataTypeFactory typeFactory); // Extends the underlying table and returns a new view with updated row-type and column-mapping.\n\tprotected ModifiableViewTable extend(Table extendedTable, RelProtoDataType protoRowType, ImmutableIntList newColumnMapping);\n\tImmutableIntList getColumnMapping(); // Returns the column mapping onto another table.\n\tRexNode getConstraint(RexBuilder rexBuilder, RelDataType tableRowType); // Returns a constraint that each candidate row must satisfy.\n\tTable getTable(); // Returns the underlying table.\n\tPath getTablePath(); // Returns the full path of the underlying table.\n\t<C> C unwrap(Class<C> aClass); // Finds an instance of an interface implemented by this object, or returns null if this object does not support that interface.\n}"}
{"index": 11792, "repo": "bedrock-core-7.0.2", "des": "A utility class for representing Version numbers and comparing them.", "code": "public class Version extends Object implements Comparable<Version> {\n\tint compareTo(Version other);\n\tboolean equals(Object o);\n\tstatic Version of(String... strings); // Constructs a Version by parsing the specified components of a version number.\n\tstatic Version unknown(); // Construct a Version representing an unknown version number.\n}"}
{"index": 5112, "repo": "druid-processing-26.0.0", "des": "An Aggregator is an object that can aggregate metrics.", "code": "Interface Aggregator {\n\tvoid aggregate(); // Performs aggregation.\n\tdefault long aggregateWithSize(); // Performs aggregation and returns the increase in required on-heap memory caused by this aggregation step.\n\tvoid close();\n\tObject get();\n\tdefault double getDouble(); // The default implementation casts getFloat() to double.\n\tfloat getFloat();\n\tlong getLong();\n\tdefault boolean isNull(); // returns true if aggregator's output type is primitive long/double/float and aggregated value is null, but when aggregated output type is Object, this method always returns false, and users are advised to check nullability for the object returned by get() method.\n}"}
{"index": 17847, "repo": "spring-web-6.0.11", "des": "Representation of a parsed path pattern.", "code": "public class PathPattern extends Object implements Comparable<PathPattern> {\n\tPathPattern combine(PathPattern pattern2string); // Combine this pattern with another.\n\tint compareTo(PathPattern otherPattern); // Compare this pattern with a supplied pattern: return -1,0,+1 if this pattern is more specific, the same or less specific than the supplied pattern.\n\tboolean equals(Object other);\n\tPathContainer extractPathWithinPattern(PathContainer path); // Determine the pattern-mapped part for the given path.\n\tString getPatternString(); // Return the original String that was parsed to create this PathPattern.\n\tboolean hasPatternSyntax(); // Whether the pattern string contains pattern syntax that would require use of matches(PathContainer), or if it is a regular String that could be compared directly to others.\n\tPathPattern.PathMatchInfo matchAndExtract(PathContainer pathContainer); // Match this pattern to the given URI path and return extracted URI template variables as well as path parameters (matrix variables).\n\tboolean matches(PathContainer pathContainer); // Whether this pattern matches the given path.\n\tPathPattern.PathRemainingMatchInfo matchStartOfPath(PathContainer pathContainer); // Match the beginning of the given path and return the remaining portion not covered by this pattern.\n}"}
{"index": 18416, "repo": "opencms-core-15.0", "des": "Table with resources for which a given principal has permissions.", "code": "Class CmsShowResourceTable {\n\tprotected CmsObject getCms(); // Gets CmsObject.\n\tboolean hasNoEntries(); // Checks if table is empty.\n}"}
{"index": 1269, "repo": "ignite-core-2.15.0", "des": "Wraps value provided by user, must be copied before stored in cache.", "code": "Class UserCacheObjectByteArrayImpl {\n\tCacheObject prepareForCache(CacheObjectContext ctx); // Prepares cache object for cache (e.g. copies user-provided object if needed).\n\t<T> T value(CacheObjectValueContext ctx, boolean cpy);\n\t<T> T value(CacheObjectValueContext ctx, boolean cpy, ClassLoader ldr); // Deserializes a value from an internal representation.\n}"}
{"index": 3488, "repo": "mahout-mr-0.13.0", "des": "DistributedRowMatrix is a FileSystem-backed VectorIterable in which the vectors live in a SequenceFile, and distributed operations are executed as M/R passes on Hadoop.", "code": "Class DistributedRowMatrix {\n\tVector columnMeans();\n\tVector columnMeans(String vectorClass); // Returns the column-wise mean of a DistributedRowMatrix\n\torg.apache.hadoop.conf.Configuration getConf();\n\torg.apache.hadoop.fs.Path getOutputTempPath();\n\torg.apache.hadoop.fs.Path getRowPath();\n\tIterator<MatrixSlice> iterateAll();\n\tIterator<MatrixSlice> iterateNonEmpty();\n\tIterator<MatrixSlice> iterator();\n\tint numCols();\n\tint numRows();\n\tint numSlices();\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n\tvoid setOutputTempPathString(String outPathString);\n\tDistributedRowMatrix times(DistributedRowMatrix other); // This implements matrix this.transpose().times(other)\n\tDistributedRowMatrix times(DistributedRowMatrix other, org.apache.hadoop.fs.Path outPath); // This implements matrix this.transpose().times(other)\n\tVector times(Vector v);\n\tVector timesSquared(Vector v);\n\tDistributedRowMatrix transpose();\n}"}
{"index": 7723, "repo": "cassandra-all-4.1.2", "des": "SslContextFactory for the PEM standard encoded PKCS#8 private keys and X509 certificates/public-keys.", "code": "Class PEMBasedSslContextFactory {\n\tprotected javax.net.ssl.KeyManagerFactory buildKeyManagerFactory(); // Builds required KeyManagerFactory from the PEM based keystore.\n\tprotected javax.net.ssl.TrustManagerFactory buildTrustManagerFactory(); // Builds TrustManagerFactory from the PEM based truststore.\n\tboolean hasKeystore(); // Decides if this factory has a keystore defined - key material specified in files or inline to the configuration.\n\tvoid initHotReloading(); // This enables 'hot' reloading of the key/trust stores based on the last updated timestamps if they are file based.\n}"}
{"index": 15336, "repo": "spring-boot-3.1.1", "des": "A wrapper for an Object value and Origin.", "code": "public class OriginTrackedValue extends Object implements OriginProvider {\n\tboolean equals(Object obj);\n\tOrigin getOrigin(); // Return the source origin or null if the origin is not known.\n\tObject getValue(); // Return the tracked value.\n\tstatic OriginTrackedValue of(Object value);\n\tstatic OriginTrackedValue of(Object value, Origin origin); // Create an OriginTrackedValue containing the specified value and origin.\n}"}
{"index": 13222, "repo": "spring-test-6.0.11", "des": "Support class that simplifies the creation of a WebConnection that uses MockMvc and optionally delegates to a real WebConnection for specific requests.", "code": "public abstract class MockMvcWebConnectionBuilderSupport<T extends MockMvcWebConnectionBuilderSupport<T>> extends Object {\n\tT alwaysUseMockMvc(); // Specify that MockMvc should always be used regardless of what the request looks like.\n\tT contextPath(String contextPath); // Set the context path to use.\n\tprotected final com.gargoylesoftware.htmlunit.WebConnection createConnection(com.gargoylesoftware.htmlunit.WebClient webClient); // Create a new WebConnection that will use a MockMvc instance if one of the specified WebRequestMatcher instances matches.\n\tT useMockMvc(WebRequestMatcher... matchers); // Add additional WebRequestMatcher instances that will ensure that MockMvc is used to process the request, if such a matcher matches against the web request.\n\tT useMockMvcForHosts(String... hosts);\n}"}
{"index": 7244, "repo": "calcite-core-1.34.0", "des": "Definition of the SQL:2003 standard MULTISET constructor, MULTISET [<expr>, .", "code": "Class SqlMultisetValueConstructor {\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks that the operand values in a SqlCall to this operator are valid.\n\tprotected @Nullable RelDataType getComponentType(RelDataTypeFactory typeFactory, List<RelDataType> argTypes);\n\tRelDataType inferReturnType(SqlOperatorBinding opBinding); // Infers the return type of an invocation of this operator; only called after the number and types of operands have already been validated.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n}"}
{"index": 9256, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Allocate GPU resources according to requirements.", "code": "Class GpuResourceAllocator {\n\tvoid addGpu(GpuDevice gpuDevice); // Add GPU to the allowed list of GPUs.\n\torg.apache.hadoop.yarn.server.nodemanager.containermanager.linux.resources.gpu.GpuResourceAllocator.GpuAllocation assignGpus(Container container); // Assign GPU to the specified container.\n\tList<GpuDevice> getAllowedGpus();\n\tList<AssignedGpuDevice> getAssignedGpus();\n\tint getAvailableGpus();\n\tMap<GpuDevice,org.apache.hadoop.yarn.api.records.ContainerId> getDeviceAllocationMapping();\n\tstatic int getRequestedGpus(org.apache.hadoop.yarn.api.records.Resource requestedResource); // Get number of requested GPUs from resource.\n\tvoid recoverAssignedGpus(org.apache.hadoop.yarn.api.records.ContainerId containerId);\n\tvoid unassignGpus(org.apache.hadoop.yarn.api.records.ContainerId containerId); // Clean up all GPUs assigned to containerId.\n}"}
{"index": 7581, "repo": "cassandra-all-4.1.2", "des": "An implementation of the DataOutputStream interface using a FastByteArrayOutputStream and exposing its buffer so copies can be avoided.", "code": "Class DataOutputBuffer {\n\tjava.nio.ByteBuffer asNewBuffer();\n\tjava.nio.ByteBuffer buffer();\n\tjava.nio.ByteBuffer buffer(boolean duplicate);\n\tvoid clear();\n\tvoid close();\n\tprotected void doFlush(int count);\n\tprotected void expandToFit(long count);\n\tvoid flush();\n\tbyte[] getData();\n\tint getLength();\n\tboolean hasPosition(); // If the implementation supports providing a position, this method returns true, otherwise false.\n\tprotected java.nio.channels.WritableByteChannel newDefaultChannel();\n\tlong position(); // Returns the current position of the underlying target like a file-pointer or the position withing a buffer.\n\tbyte[] toByteArray();\n}"}
{"index": 8144, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract implementation of the MimeMessage interface.", "code": "Class AbstractMimeMessage {\n\tAttachment addAttachment(String contentId, File file); // Add an attachment to the message, taking the content from a File.\n\tAttachment addAttachment(String contentId, org.springframework.core.io.InputStreamSource inputStreamSource, String contentType); // Add an attachment to the message, taking the content from an InputStreamSource.\n}"}
{"index": 10056, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "FactoryBean for creating a Map of environment variables.", "code": "Class EnvironmentFactoryBean {\n\tvoid afterPropertiesSet();\n\tprotected Map<String,String> createEnvironment(); // Creates the Map to be returned from this factory bean.\n\tMap<String,String> getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setClasspath(String classpath); // Sets incoming classpath.\n\tvoid setConfiguration(Configuration configuration); // Sets the yarn configuration.\n\tvoid setDefaultMapreduceAppClasspath(String defaultMapreduceAppClasspath); // Sets the default mr app classpath.\n\tvoid setDefaultYarnAppClasspath(String defaultYarnAppClasspath); // Sets the default yarn app classpath.\n\tvoid setDelimiter(String delimiter); // Sets the delimiter used in a classpath.\n\tvoid setIncludeBaseDirectory(boolean includeBaseDirectory); // If set to true a base directory entry will be added to a 'CLASSPATH' environment variable.\n\tvoid setIncludeLocalSystemEnv(boolean includeLocalSystemEnv); // If set to true properties from a System.getenv() will be included to environment settings.\n\tvoid setProperties(Properties properties); // Sets the configuration properties.\n\tvoid setUseDefaultMapreduceClasspath(boolean useDefaultMapreduceClasspath); // If set to true a default 'mr' entries will be added to a 'CLASSPATH' environment variable.\n\tvoid setUseDefaultYarnClasspath(boolean useDefaultYarnClasspath); // If set to true a default 'yarn' entries will be added to a 'CLASSPATH' environment variable.\n}"}
{"index": 5530, "repo": "org.apache.karaf.main-2.4.4", "des": "An ApplicationLauncher is used to launch ParameterizedRunnable objects using the main thread.", "code": "Interface ApplicationLauncher {\n\tvoid launch(ParameterizedRunnable runnable, Object context); // Launches the specified runnable using the main thread.\n\tvoid shutdown(); // Forces the current runnable which is running to be stopped.\n}"}
{"index": 13774, "repo": "spring-webmvc-6.0.11", "des": "Superclass for all tags that require a RequestContext.", "code": "public abstract class RequestContextAwareTag extends TagSupport implements TryCatchFinally {\n\tvoid doCatch(Throwable throwable);\n\tvoid doFinally();\n\tfinal int doStartTag(); // Create and expose the current RequestContext.\n\tprotected abstract int doStartTagInternal(); // Called by doStartTag to perform the actual work.\n\tprotected final RequestContext getRequestContext(); // Return the current RequestContext.\n}"}
{"index": 10655, "repo": "groovy-all-4.0.13", "des": "Interface for template resolvers, which, given a template identifier, return a URL where the template can be loaded.", "code": "public interface TemplateResolver {\n\tvoid configure(ClassLoader templateClassLoader, TemplateConfiguration configuration); // This method is called once the template engine is initialized, providing the resolver with the template engine configuration and its template class loader.\n\tURL resolveTemplate(String templatePath); // Resolvers must implement this method in order to resolve a template, given a template path.\n}"}
{"index": 868, "repo": "ignite-core-2.15.0", "des": "Message requesting to wait until node's SPI context initialize.", "code": "Class HandshakeWaitMessage {\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 9290, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "This interface abstracts out how a container contributes to Resource Utilization of the node.", "code": "Interface ResourceUtilizationTracker {\n\tvoid addContainerResources(Container container); // Add Container's resources to Node Utilization.\n\torg.apache.hadoop.yarn.api.records.ResourceUtilization getCurrentUtilization(); // Get the current total utilization of all the Containers running on the node.\n\tboolean hasResourcesAvailable(Container container); // Check if NM has resources available currently to run the container.\n\tvoid subtractContainerResource(Container container); // Subtract Container's resources to Node Utilization.\n}"}
{"index": 5901, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol Buffer implementation of OpportunisticContainersStatus.", "code": "Class OpportunisticContainersStatusPBImpl {\n\tint getEstimatedQueueWaitTime(); // Returns the estimated time that a container will have to wait if added to the queue of the node.\n\tint getOpportCoresUsed(); // Returns CPU cores currently used on the node for running opportunistic containers.\n\tlong getOpportMemoryUsed(); // Returns memory currently used on the node for running opportunistic containers.\n\tint getOpportQueueCapacity(); // Gets the capacity of the opportunistic containers queue on the node.\n\torg.apache.hadoop.yarn.proto.YarnServerCommonProtos.OpportunisticContainersStatusProto getProto();\n\tint getQueuedOpportContainers(); // Returns the number of queued opportunistic containers on the node.\n\tint getRunningOpportContainers(); // Returns the number of currently running opportunistic containers on the node.\n\tint getWaitQueueLength(); // Returns the length of the containers queue on the node.\n\tvoid setEstimatedQueueWaitTime(int queueWaitTime); // Sets the estimated time that a container will have to wait if added to the queue of the node.\n\tvoid setOpportCoresUsed(int opportCoresUsed); // Sets the CPU cores used on the node for running opportunistic containers.\n\tvoid setOpportMemoryUsed(long opportMemoryUsed); // Sets the memory used on the node for running opportunistic containers.\n\tvoid setOpportQueueCapacity(int maxOpportQueueLength); // Sets the capacity of the opportunistic containers queue on the node.\n\tvoid setQueuedOpportContainers(int queuedOpportContainers); // Sets the number of queued opportunistic containers on the node.\n\tvoid setRunningOpportContainers(int runningOpportContainers); // Sets the number of running opportunistic containers.\n\tvoid setWaitQueueLength(int waitQueueLength); // Sets the length of the containers queue on the node.\n}"}
{"index": 12051, "repo": "jena-core-4.9.0", "des": "A special factory to create/return built-in schema DVs and create user-defined DVs that includes anyAtomicType, yearMonthDuration, dayTimeDuration and dateTimeStamp @xerces.internal", "code": "public class ExtendedSchemaDVFactoryImpl extends BaseSchemaDVFactory {\n\tXSSimpleType getBuiltInType(String name); // Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the ur-types and if all simple types should be derived from a complex type, so as of now we ignore the fact that anySimpleType is derived from anyType, and pass 'null' as the base of anySimpleType.\n\tSymbolHash getBuiltInTypes(); // get all built-in simple types, which are stored in a hashtable keyed by the name\n}"}
{"index": 5883, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Request class to obtain information about all sub-clusters that are participating in federation.", "code": "Class GetSubClustersInfoRequest {\n\tabstract boolean getFilterInactiveSubClusters(); // Get the flag that indicates whether only active sub-clusters should be returned.\n\tstatic GetSubClustersInfoRequest newInstance(boolean filterInactiveSubClusters);\n\tabstract void setFilterInactiveSubClusters(boolean filterInactiveSubClusters); // Set the flag that indicates whether only active sub-clusters should be returned.\n}"}
{"index": 15343, "repo": "spring-boot-3.1.1", "des": "Utility that can be used to map values from a supplied source to a destination.", "code": "public final class PropertyMapper extends Object {\n\tPropertyMapper alwaysApplying(PropertyMapper.SourceOperator operator); // Return a new PropertyMapper instance that applies the given PropertyMapper.SourceOperator to every source.\n\tPropertyMapper alwaysApplyingWhenNonNull(); // Return a new PropertyMapper instance that applies whenNonNull to every source.\n\t<T> PropertyMapper.Source<T> from(Supplier<T> supplier); // Return a new PropertyMapper.Source from the specified value supplier that can be used to perform the mapping.\n\t<T> PropertyMapper.Source<T> from(T value); // Return a new PropertyMapper.Source from the specified value that can be used to perform the mapping.\n\tstatic PropertyMapper get(); // Return the property mapper.\n}"}
{"index": 17404, "repo": "groovy-4.0.13", "des": "Provides an anchor for a single source unit (usually a script file) as it passes through the compiler system.", "code": "public class SourceUnit extends ProcessingUnit {\n\tvoid addError(SyntaxException se); // This method adds a SyntaxException to the error collector.\n\tvoid addErrorAndContinue(SyntaxException se);\n\tvoid addException(Exception e); // This method adds an exception to the error collector.\n\tvoid addFatalError(String text, ASTNode node); // Convenience wrapper for ErrorCollector.addFatalError(org.codehaus.groovy.control.messages.Message).\n\tvoid addWarning(String text, ASTNode node);\n\tModuleNode buildAST(); // Builds the AST.\n\tvoid convert(); // Generates an AST from the CST.\n\tstatic SourceUnit create(String name, String source); // A convenience routine to create a standalone SourceUnit on a String with defaults for almost everything that is configurable.\n\tstatic SourceUnit create(String name, String source, int tolerance); // A convenience routine to create a standalone SourceUnit on a String with defaults for almost everything that is configurable.\n\tboolean failedWithUnexpectedEOF(); // Convenience routine, primarily for use by the InteractiveShell, that returns true if parse() failed with an unexpected EOF.\n\tModuleNode getAST(); // Returns the Abstract Syntax Tree produced during convert()ing and expanded during later phases.\n\tReduction getCST(); // Returns the Concrete Syntax Tree produced during parse()ing.\n\tString getName(); // Returns the name for the SourceUnit.\n\tString getSample(int line, int column, Janitor janitor); // Returns a sampling of the source at the specified line and column, or null if it is unavailable.\n\tReaderSource getSource();\n\tvoid parse(); // Parses the source to a CST.\n\tvoid setSource(ReaderSource source);\n}"}
{"index": 5831, "repo": "hbase-hadoop2-compat-2.5.5-hadoop3", "des": "Extended histogram implementation with counters for metric time ranges.", "code": "Class MutableTimeHistogram {\n\tlong[] getRanges(); // Returns the ranges to be counted\n\tString getRangeType(); // Returns the type of range histogram size or time\n}"}
{"index": 9522, "repo": "commons-math3-3.6.1", "des": "Provide a default implementation for several generic functions.", "code": "Class BaseAbstractUnivariateIntegrator {\n\tprotected double computeObjectiveValue(double point); // Compute the objective function value.\n\tprotected abstract double doIntegrate(); // Method for implementing actual integration algorithms in derived classes.\n\tdouble getAbsoluteAccuracy(); // Get the absolute accuracy.\n\tint getEvaluations(); // Get the number of function evaluations of the last run of the integrator.\n\tint getIterations(); // Get the number of iterations of the last run of the integrator.\n\tprotected double getMax();\n\tint getMaximalIterationCount(); // Get the upper limit for the number of iterations.\n\tprotected double getMin();\n\tint getMinimalIterationCount(); // Get the min limit for the number of iterations.\n\tdouble getRelativeAccuracy(); // Get the relative accuracy.\n\tprotected void incrementCount(); // Increment the number of iterations.\n\tdouble integrate(int maxEval, UnivariateFunction f, double lower, double upper); // Integrate the function in the given interval.\n\tprotected void setup(int maxEval, UnivariateFunction f, double lower, double upper); // Prepare for computation.\n}"}
{"index": 2978, "repo": "tink-1.10.0", "des": "This key manager generates new EcdsaPrivateKey keys and produces new instances of EcdsaSignJce.", "code": "Class EcdsaSignKeyManager {\n\tstatic KeyTemplate createKeyTemplate(HashType hashType, EllipticCurveType curve, EcdsaSignatureEncoding encoding, KeyTemplate.OutputPrefixType prefixType);\n\tstatic KeyTemplate ecdsaP256Template();\n\tTinkFipsUtil.AlgorithmFipsCompatibility fipsStatus(); // Returns the FIPS compatibility of this KeyTypeManager.\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tEcdsaPublicKey getPublicKey(EcdsaPrivateKey key); // Creates a public key from the given private key.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<EcdsaKeyFormat,EcdsaPrivateKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tEcdsaPrivateKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic KeyTemplate rawEcdsaP256Template();\n\tstatic void registerPair(boolean newKeyAllowed); // Registers the EcdsaSignKeyManager and the EcdsaVerifyKeyManager with the registry, so that the the Ecdsa-Keys can be used with Tink.\n\tvoid validateKey(EcdsaPrivateKey privKey); // Checks if the given keyProto is a valid key.\n}"}
{"index": 1057, "repo": "ignite-core-2.15.0", "des": "No-op implementation of metric exporter SPI.", "code": "Class NoopMetricExporterSpi {\n\tvoid setExportFilter(Predicate<ReadOnlyMetricRegistry> filter); // Sets export filter.\n\tvoid setMetricRegistry(ReadOnlyMetricManager registry); // Sets metrics registry that SPI should export.\n\tvoid spiStart(@Nullable String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 12158, "repo": "jena-core-4.9.0", "des": "The ModelExpansion code expands a model M against a schema S, returning a new model which contains the statements of M any statements (A rdfs:subClassOf B) from S where neither A nor B is a bnode.", "code": "public class ModelExpansion extends Object {\n\tstatic void addSubClassClosure(Model m); // Do (limited) subclass closure on m.\n\tstatic Model withSchema(Model model, Model schema); // Answer a new model which is the aggregation of the statements of model the non-bnode subclass statements of schema the subclass closure of those statements the rdf:type statements implied by the rdfs:domain statements of schema and the model statements using that statements property similarly for rdfs:range the rdf:type statements implied by the subclass closure\n}"}
{"index": 17532, "repo": "pulsar-broker-3.0.0", "des": "Protobuf enum pulsar.schema.SchemaInfo.SchemaType", "code": "public static enum SchemaRegistryFormat.SchemaInfo.SchemaType extends Enum<SchemaRegistryFormat.SchemaInfo.SchemaType> implements com.google.protobuf.ProtocolMessageEnum {\n\tstatic SchemaRegistryFormat.SchemaInfo.SchemaType forNumber(int value);\n\tstatic final com.google.protobuf.Descriptors.EnumDescriptor getDescriptor();\n\tfinal com.google.protobuf.Descriptors.EnumDescriptor getDescriptorForType();\n\tfinal int getNumber();\n\tfinal com.google.protobuf.Descriptors.EnumValueDescriptor getValueDescriptor();\n\tstatic com.google.protobuf.Internal.EnumLiteMap<SchemaRegistryFormat.SchemaInfo.SchemaType> internalGetValueMap();\n\tstatic SchemaRegistryFormat.SchemaInfo.SchemaType valueOf(int value); // Deprecated.\n\tstatic SchemaRegistryFormat.SchemaInfo.SchemaType valueOf(com.google.protobuf.Descriptors.EnumValueDescriptor desc); // Returns the enum constant of this class with the specified name.\n\tstatic SchemaRegistryFormat.SchemaInfo.SchemaType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SchemaRegistryFormat.SchemaInfo.SchemaType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 4742, "repo": "hadoop-common-3.3.4", "des": "A storage policy specifies the placement of block replicas on specific storage types.", "code": "Interface BlockStoragePolicySpi {\n\tStorageType[] getCreationFallbacks(); // Get the fallback storage types for creating new block replicas.\n\tString getName(); // Return the name of the storage policy.\n\tStorageType[] getReplicationFallbacks(); // Get the fallback storage types for replicating existing block replicas.\n\tStorageType[] getStorageTypes(); // Return the preferred storage types associated with this policy.\n\tboolean isCopyOnCreateFile(); // Returns true if the policy is inherit-only and cannot be changed for an existing file.\n}"}
{"index": 6750, "repo": "hbase-backup-3.0.0-alpha-4", "des": "View to an on-disk Backup Image FileSytem Provides the set of methods necessary to interact with the on-disk Backup Image data.", "code": "Class HBackupFileSystem {\n\tstatic void checkImageManifestExist(HashMap<TableName,BackupManifest> backupManifestMap, TableName[] tableArray, org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.Path backupRootPath, String backupId); // Check whether the backup image path and there is manifest file in the path.\n\tstatic org.apache.hadoop.fs.Path getBackupPath(String backupRootDir, String backupId);\n\tstatic org.apache.hadoop.fs.Path getBackupTmpDirPath(String backupRootDir); // Get backup temporary directory\n\tstatic org.apache.hadoop.fs.Path getBackupTmpDirPathForBackupId(String backupRoot, String backupId); // Get backup tmp directory for backupId\n\tstatic String getLogBackupDir(String backupRootDir, String backupId); // Given the backup root dir and the backup id, return the log file location for an incremental backup.\n\tstatic org.apache.hadoop.fs.Path getLogBackupPath(String backupRootDir, String backupId);\n\tstatic BackupManifest getManifest(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.Path backupRootPath, String backupId);\n\tstatic String getTableBackupDataDir(String backupRootDir, String backupId, TableName tableName);\n\tstatic String getTableBackupDir(String backupRootDir, String backupId, TableName tableName); // Given the backup root dir, backup id and the table name, return the backup image location, which is also where the backup manifest file is.\n\tstatic org.apache.hadoop.fs.Path getTableBackupPath(TableName tableName, org.apache.hadoop.fs.Path backupRootPath, String backupId); // Given the backup root dir, backup id and the table name, return the backup image location, which is also where the backup manifest file is.\n}"}
{"index": 420, "repo": "phoenix-core-5.1.3", "des": "Static class for various methods that would be nice to have added to Result.", "code": "Class ResultUtil {\n\tstatic int compareKeys(org.apache.hadoop.hbase.client.Result r1, org.apache.hadoop.hbase.client.Result r2);\n\tstatic void getKey(org.apache.hadoop.hbase.Cell value, org.apache.hadoop.hbase.io.ImmutableBytesWritable key);\n\tstatic org.apache.hadoop.hbase.io.ImmutableBytesWritable getKey(org.apache.hadoop.hbase.client.Result r); // Return a pointer into a potentially much bigger byte buffer that points to the key of a Result.\n\tstatic void getKey(org.apache.hadoop.hbase.client.Result r, org.apache.hadoop.hbase.io.ImmutableBytesWritable key);\n\tstatic org.apache.hadoop.hbase.io.ImmutableBytesWritable getKey(org.apache.hadoop.hbase.client.Result r, int offset); // Return a pointer into a potentially much bigger byte buffer that points to the key of a Result.\n\tstatic void getKey(org.apache.hadoop.hbase.client.Result r, int offset, int length, org.apache.hadoop.hbase.io.ImmutableBytesWritable key);\n\tstatic org.apache.hadoop.hbase.client.Result toResult(org.apache.hadoop.hbase.io.ImmutableBytesWritable bytes);\n}"}
{"index": 4978, "repo": "commons-collections-3.2.2", "des": "Factory implementation that returns the same constant each time.", "code": "Class ConstantFactory {\n\tObject create(); // Always return constant.\n\tObject getConstant(); // Gets the constant.\n\tstatic Factory getInstance(Object constantToReturn); // Factory method that performs validation.\n}"}
{"index": 16877, "repo": "spring-security-oauth2-core-6.1.2", "des": "The Address Claim represents a physical mailing address defined by the OpenID Connect Core 1.0 specification that can be returned either in the UserInfo Response or the ID Token.", "code": "public interface AddressStandardClaim {\n\tString getCountry(); // Returns the country.\n\tString getFormatted(); // Returns the full mailing address, formatted for display.\n\tString getLocality(); // Returns the city or locality.\n\tString getPostalCode(); // Returns the zip code or postal code.\n\tString getRegion(); // Returns the state, province, prefecture, or region.\n\tString getStreetAddress(); // Returns the full street address, which may include house number, street name, P.O.\n}"}
{"index": 3407, "repo": "nifi-api-1.22.0", "des": "Indicates the scope of expression language on a property descriptor.", "code": "Enum ExpressionLanguageScope {\n\tString getDescription();\n\tstatic ExpressionLanguageScope valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ExpressionLanguageScope[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16502, "repo": "spring-batch-infrastructure-5.0.2", "des": "A builder implementation for the MongoItemWriter", "code": "public class MongoItemWriterBuilder<T> extends Object {\n\tMongoItemWriter<T> build(); // Validates and builds a MongoItemWriter.\n\tMongoItemWriterBuilder<T> collection(String collection); // Set the name of the Mongo collection to be written to.\n\tMongoItemWriterBuilder<T> delete(boolean delete); // Indicates if the items being passed to the writer are to be saved or removed from the data store.\n\tMongoItemWriterBuilder<T> template(org.springframework.data.mongodb.core.MongoOperations template); // Set the MongoOperations to be used to save items to be written.\n}"}
{"index": 8460, "repo": "commons-io-2.13.0", "des": "Abstracts the origin of data for builders like a File, Path, Reader, Writer, InputStream, OutputStream, and URI.", "code": "Class AbstractOrigin<T,B extends AbstractOrigin<T,B>> {\n\tT get(); // Gets the origin.\n\tbyte[] getByteArray(); // Gets this origin as a byte array, if possible.\n\tbyte[] getByteArray(long position, int length); // Gets this origin as a byte array, if possible.\n\tCharSequence getCharSequence(Charset charset); // Gets this origin as a byte array, if possible.\n\tFile getFile(); // Gets this origin as a Path, if possible.\n\tInputStream getInputStream(OpenOption... options); // Gets this origin as an InputStream, if possible.\n\tOutputStream getOutputStream(OpenOption... options); // Gets this origin as an OutputStream, if possible.\n\tPath getPath(); // Gets this origin as a Path, if possible.\n\tReader getReader(Charset charset); // Gets a new Reader on the origin, buffered by default.\n\tWriter getWriter(Charset charset, OpenOption... options); // Gets a new Writer on the origin, buffered by default.\n\tlong size(); // Gets the size of the origin, if possible.\n}"}
{"index": 1011, "repo": "ignite-core-2.15.0", "des": "Inline index column implementation for inlining Long values.", "code": "Class LongInlineIndexKeyType {\n\tint compare0(long pageAddr, int off, IndexKey key); // Compares inlined and given value.\n\tprotected LongIndexKey get0(long pageAddr, int off); // Restores value from inline.\n\tprotected int put0(long pageAddr, int off, LongIndexKey key, int maxSize); // Puts given value into inline index tree.\n}"}
{"index": 11727, "repo": "spring-data-neo4j-7.1.2", "des": "An interface that can be added to any reactive repository so that the repository exposes several methods taking in a Statement from the Cypher-DSL, that allows for full customization of the queries executed in a programmatic way in contrast to provide custom queries declaratively via @Query annotations.", "code": "@API(status=STABLE, since=\"6.1\") public interface ReactiveCypherdslStatementExecutor<T> {\n\treactor.core.publisher.Flux<T> findAll(org.neo4j.cypherdsl.core.Statement statement); // Find all elements of the domain as defined by the statement.\n\t<PT> reactor.core.publisher.Flux<PT> findAll(org.neo4j.cypherdsl.core.Statement statement, Class<PT> projectionClass); // Creates a custom projection of the repository type by a Cypher-DSL based statement.\n\treactor.core.publisher.Mono<T> findOne(org.neo4j.cypherdsl.core.Statement statement); // Find one element of the domain as defined by the statement.\n\t<PT> reactor.core.publisher.Mono<PT> findOne(org.neo4j.cypherdsl.core.Statement statement, Class<PT> projectionClass); // Creates a custom projection of the repository type by a Cypher-DSL based statement.\n}"}
{"index": 18034, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the WebServiceConnection interface that uses a HttpURLConnection.", "code": "public class HttpUrlConnection extends AbstractHttpSenderConnection {\n\tvoid addRequestHeader(String name, String value); // Adds a request header with the given name and value.\n\tHttpURLConnection getConnection();\n\tprotected InputStream getRawResponseInputStream(); // Returns the raw, possibly compressed input stream to read the response from.\n\tprotected OutputStream getRequestOutputStream(); // Returns the output stream to write the request to.\n\tprotected int getResponseCode(); // Returns the HTTP status code of the response.\n\tprotected long getResponseContentLength(); // Returns the length of the response.\n\tIterator<String> getResponseHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getResponseHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected String getResponseMessage(); // Returns the HTTP status message of the response.\n\tURI getUri(); // Returns the URI for this connection.\n\tvoid onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n}"}
{"index": 7371, "repo": "mahout-math-0.13.0", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface DoubleComparator {\n\tint compare(double o1, double o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 6212, "repo": "jackson-databind-2.15.2", "des": "Serializer implementation for Blob to write as binary (for JSON and other formats Base64-encoded String, for binary formats as true binary).", "code": "Class SqlBlobSerializer {\n\tprotected void _writeValue(Blob value, JsonGenerator gen, SerializerProvider ctxt);\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tboolean isEmpty(SerializerProvider provider, Blob value); // Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values).\n\tvoid serialize(Blob value, JsonGenerator gen, SerializerProvider ctxt); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(Blob value, JsonGenerator gen, SerializerProvider ctxt, TypeSerializer typeSer); // Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix.\n}"}
{"index": 13605, "repo": "spring-messaging-6.0.11", "des": "A contract for managing lifecycle events for a TCP connection including the handling of incoming messages.", "code": "public interface TcpConnectionHandler<P> {\n\tvoid afterConnected(TcpConnection<P> connection); // Invoked after a connection is successfully established.\n\tvoid afterConnectFailure(Throwable ex); // Invoked on failure to connect.\n\tvoid afterConnectionClosed(); // Invoked after the connection is closed.\n\tvoid handleFailure(Throwable ex); // Handle a failure on the connection.\n\tvoid handleMessage(Message<P> message); // Handle a message received from the remote host.\n}"}
{"index": 11460, "repo": "spring-context-6.0.11", "des": "A validator for application-specific objects.", "code": "public interface Validator {\n\tboolean supports(Class<?> clazz); // Can this Validator validate instances of the supplied clazz?\n\tvoid validate(Object target, Errors errors); // Validate the supplied target object, which must be of a Class for which the supports(Class) method typically has (or would) return true.\n}"}
{"index": 975, "repo": "ignite-core-2.15.0", "des": "Writes 'words' of fixed width, in sequence, to a byte array.", "code": "Interface IWordSerializer {\n\tbyte[] getBytes(); // Returns the backing array of bytes that contain the serialized words.\n\tvoid writeWord(long word); // Writes the word to the backing array.\n}"}
{"index": 2808, "repo": "tika-parsers-1.28.5", "des": "This class is used to represent a ObjectSpaceObjectStreamOfContextIDs.", "code": "Class ObjectSpaceObjectStreamOfContextIDs {\n\tint doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the ObjectSpaceObjectStreamOfContextIDs object from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of ObjectSpaceObjectStreamOfContextIDs object into a byte List.\n}"}
{"index": 5473, "repo": "druid-processing-26.0.0", "des": "This interface serves as a common foundation for Druids native type system, and provides common methods for reasoning about and handling type matters.", "code": "Interface TypeSignature<Type extends TypeDescriptor> {\n\tdefault boolean anyOf(Type... types); // Check if the value of getType() matches any of the TypeDescriptor specified.\n\tdefault String asTypeString(); // Convert a TypeSignature into a simple string.\n\tString getComplexTypeName(); // Type name of 'complex' types (ValueType.COMPLEX, ExprType.COMPLEX), which are 'registered' by their name, acting as a key to get the correct set of serialization, deserialization, and other type specific handling facilties.\n\tTypeSignature<Type> getElementType(); // TypeSignature for the elements contained in an array type (ValueType.ARRAY, ExprType.ARRAY).\n\tdefault <T> NullableTypeStrategy<T> getNullableStrategy(); // A NullableTypeStrategy is a TypeStrategy which can handle reading and writing null values, at the very high cost of an additional byte per value, of which a single bit is used to store NullHandling.IS_NULL_BYTE or NullHandling.IS_NOT_NULL_BYTE as appropriate.\n\t<T> TypeStrategy<T> getStrategy(); // A TypeStrategy provides facilities to reading and writing values to buffers, as well as basic value comparators and byte size estimation.\n\tType getType(); // TypeDescriptor enumeration used to handle different classes of types\n\tdefault boolean is(Type candidate); // Check if the value of getType() is equal to the candidate TypeDescriptor.\n\tdefault boolean isArray(); // Check if the type is an array (TypeDescriptor.isArray())\n\tdefault boolean isNumeric(); // Check if the type is numeric (TypeDescriptor.isNumeric())\n\tdefault boolean isPrimitive(); // Check if the type is a primitive (TypeDescriptor.isPrimitive(), e.g.\n}"}
{"index": 8707, "repo": "accumulo-client-mapreduce-2.0.0-alpha-1", "des": "This class allows MapReduce jobs to write output in the Accumulo data file format.", "code": "Class AccumuloFileOutputFormat {\n\torg.apache.hadoop.mapred.RecordWriter<Key,Value> getRecordWriter(org.apache.hadoop.fs.FileSystem ignored, org.apache.hadoop.mapred.JobConf job, String name, org.apache.hadoop.util.Progressable progress);\n\tstatic void setCompressionType(org.apache.hadoop.mapred.JobConf job, String compressionType); // Sets the compression type to use for data blocks.\n\tstatic void setDataBlockSize(org.apache.hadoop.mapred.JobConf job, long dataBlockSize); // Sets the size for data blocks within each file. Data blocks are a span of key/value pairs stored in the file that are compressed and indexed as a group.\n\tstatic void setFileBlockSize(org.apache.hadoop.mapred.JobConf job, long fileBlockSize); // Sets the size for file blocks in the file system; file blocks are managed, and replicated, by the underlying file system.\n\tstatic void setIndexBlockSize(org.apache.hadoop.mapred.JobConf job, long indexBlockSize); // Sets the size for index blocks within each file; smaller blocks means a deeper index hierarchy within the file, while larger blocks mean a more shallow index hierarchy within the file.\n\tstatic void setReplication(org.apache.hadoop.mapred.JobConf job, int replication); // Sets the file system replication factor for the resulting file, overriding the file system default.\n\tstatic void setSampler(org.apache.hadoop.mapred.JobConf job, SamplerConfiguration samplerConfig); // Specify a sampler to be used when writing out data.\n\tstatic void setSummarizers(org.apache.hadoop.mapred.JobConf job, SummarizerConfiguration... summarizerConfigs); // Specifies a list of summarizer configurations to create summary data in the output file.\n}"}
{"index": 14114, "repo": "wicket-core-10.0.0-M1", "des": "Ajax event behavior that submits the form and updates all form feedback panels on the page.", "code": "public class AjaxFormValidatingBehavior extends Behavior {\n\tprotected final void addFeedbackPanels(AjaxRequestTarget target); // Adds all feedback panels on the page to the ajax request target so they are updated\n\tvoid bind(Component component); // Bind this handler to the given component.\n\tprotected void onAfterSubmit(AjaxRequestTarget target);\n\tvoid onConfigure(Component component); // Called immediately after the onConfigure method in a component.\n\tprotected void onError(AjaxRequestTarget target);\n\tprotected void onSubmit(AjaxRequestTarget target);\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes);\n}"}
{"index": 17278, "repo": "groovy-4.0.13", "des": "Represents the entire contents of a compilation step which consists of one or more ModuleNode instances.", "code": "public class CompileUnit extends Object implements NodeMetaDataHandler {\n\tvoid addClass(ClassNode node); // Adds a class to the unit.\n\tvoid addClasses(List<ClassNode> list); // Appends all of the fully-qualified class names in this module into the given map.\n\tvoid addClassNodeToCompile(ClassNode node, SourceUnit location); // this method actually does not compile a class.\n\tvoid addGeneratedInnerClass(InnerClassNode icn);\n\tvoid addModule(ModuleNode node);\n\tClassNode getClass(String name);\n\tList<ClassNode> getClasses();\n\tMap<String,ClassNode> getClassesToCompile();\n\tGroovyClassLoader getClassLoader();\n\tCodeSource getCodeSource();\n\tCompilerConfiguration getConfig();\n\tInnerClassNode getGeneratedInnerClass(String name);\n\tMap<String,InnerClassNode> getGeneratedInnerClasses();\n\tMap<?,?> getMetaDataMap();\n\tList<ModuleNode> getModules();\n\tSourceUnit getScriptSourceLocation(String className);\n\tboolean hasClassNodeToCompile(); // Deprecated.\n\tIterator<String> iterateClassNodeToCompile(); // Deprecated.\n\tvoid setMetaDataMap(Map<?,?> metaDataMap);\n}"}
{"index": 8150, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for WebServiceConnection implementations used for receiving requests.", "code": "Class AbstractReceiverConnection {\n\tprotected TransportInputStream createTransportInputStream(); // Returns a TransportInputStream.\n\tprotected TransportOutputStream createTransportOutputStream(); // Returns a TransportOutputStream for the given message.\n\tprotected abstract InputStream getRequestInputStream(); // Returns the input stream to read the response from.\n\tprotected abstract OutputStream getResponseOutputStream(); // Returns the output stream to write the request to.\n\tprotected void onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n}"}
{"index": 9403, "repo": "hadoop-yarn-api-3.3.6", "des": "ReservationRequests captures the set of resource and constraints the user cares about regarding a reservation.", "code": "Class ReservationRequests {\n\tabstract ReservationRequestInterpreter getInterpreter(); // Get the ReservationRequestInterpreter, representing how the list of resources should be allocated, this captures temporal ordering and other constraints.\n\tabstract List<ReservationRequest> getReservationResources(); // Get the list of ReservationRequest representing the resources required by the application\n\tstatic ReservationRequests newInstance(List<ReservationRequest> reservationResources, ReservationRequestInterpreter type);\n\tabstract void setInterpreter(ReservationRequestInterpreter interpreter); // Set the ReservationRequestInterpreter, representing how the list of resources should be allocated, this captures temporal ordering and other constraints.\n\tabstract void setReservationResources(List<ReservationRequest> reservationResources); // Set the list of ReservationRequest representing the resources required by the application\n}"}
{"index": 12053, "repo": "jena-core-4.9.0", "des": "This is the base class for FastHashSet and FastHashSet.", "code": "public abstract class FastHashBase<K> extends Object implements JenaMapSetCommon<K> {\n\tfinal boolean anyMatch(Predicate<K> predicate); // Attentions: Due to the ordering of the keys, this method may be slow if matching elements are at the start of the list.\n\tfinal boolean anyMatchRandomOrder(Predicate<K> predicate); // This method can be faster than anyMatch(Predicate) if one expects to find many matches.\n\tvoid clear(); // Removes all the elements from this collection (optional operation).\n\tfinal boolean containsKey(K o); // Check whether the collection contains a given key.\n\tfinal boolean isEmpty(); // Returns true if this collection contains no elements.\n\tfinal ExtendedIterator<K> keyIterator(); // Get an iterator over the keys in the collection.\n\tfinal Spliterator<K> keySpliterator(); // Get a spliterator over the keys in the collection.\n\tfinal int removeAndGetIndex(K e); // Removes the element at the given position.\n\tfinal int removeAndGetIndex(K e, int hashCode); // Removes the element at the given position.\n\tfinal void removeUnchecked(K e); // Removes a key from the collection.\n\tfinal void removeUnchecked(K e, int hashCode);\n\tint size(); // Returns the number of elements in this collection.\n\tfinal boolean tryRemove(K o); // Tries to remove a key from the collection.\n\tfinal boolean tryRemove(K e, int hashCode);\n}"}
{"index": 14696, "repo": "spring-data-commons-3.1.2", "des": "Default implementation to discover CRUD methods based on the given RepositoryMetadata.", "code": "public class DefaultCrudMethods extends Object implements CrudMethods {\n\tOptional<Method> getDeleteMethod(); // Returns the delete method of the repository.\n\tOptional<Method> getFindAllMethod(); // Returns the find all method of the repository.\n\tOptional<Method> getFindOneMethod(); // Returns the find one method of the repository.\n\tOptional<Method> getSaveMethod(); // Returns the method to be used for saving entities.\n\tboolean hasDelete(); // Returns whether the repository exposes a delete method.\n\tboolean hasFindAllMethod(); // Returns whether the repository exposes a find all method at all.\n\tboolean hasFindOneMethod(); // Returns whether the repository exposes a find one method.\n\tboolean hasSaveMethod(); // Returns whether the repository exposes a save method at all.\n}"}
{"index": 15407, "repo": "spring-security-crypto-6.1.2", "des": "Factory for commonly used key generators.", "code": "public final class KeyGenerators extends Object {\n\tstatic BytesKeyGenerator secureRandom(); // Create a BytesKeyGenerator that uses a SecureRandom to generate keys of 8 bytes in length.\n\tstatic BytesKeyGenerator secureRandom(int keyLength); // Create a BytesKeyGenerator that uses a SecureRandom to generate keys of a custom length.\n\tstatic BytesKeyGenerator shared(int keyLength); // Create a BytesKeyGenerator that returns a single, shared SecureRandom key of a custom length.\n\tstatic StringKeyGenerator string(); // Creates a StringKeyGenerator that hex-encodes SecureRandom keys of 8 bytes in length.\n}"}
{"index": 10999, "repo": "spring-data-redis-3.1.2", "des": "High-level abstraction over a Redis SORT (generified equivalent of SortParameters).", "code": "public interface SortQuery<K> {\n\tString getBy(); // Returns the pattern of the external key used for sorting.\n\tList<String> getGetPattern(); // Returns the external key(s) whose values are returned by the sort.\n\tK getKey(); // Return the target key for sorting.\n\tSortParameters.Range getLimit(); // Returns the sorting limit (range or pagination).\n\tSortParameters.Order getOrder(); // Returns the sorting order.\n\tBoolean isAlphabetic(); // Indicates if the sorting is numeric (default) or alphabetical (lexicographical).\n}"}
{"index": 13985, "repo": "spring-webflux-6.0.11", "des": "Assist with the configuration of a chain of ViewResolver's supporting different template mechanisms.", "code": "public class ViewResolverRegistry extends Object {\n\tvoid defaultViews(View... defaultViews); // Set default views associated with any view name and selected based on the best match for the requested content type.\n\tUrlBasedViewResolverRegistration freeMarker(); // Register a FreeMarkerViewResolver with a \".ftl\" suffix.\n\tprotected List<View> getDefaultViews();\n\tprotected int getOrder();\n\tprotected List<ViewResolver> getViewResolvers();\n\tboolean hasRegistrations(); // Whether any view resolvers have been registered.\n\tvoid order(int order); // Set the order for the ViewResolutionResultHandler.\n\tUrlBasedViewResolverRegistration scriptTemplate(); // Register a script template view resolver with an empty default view name prefix and suffix.\n\tvoid viewResolver(ViewResolver viewResolver); // Register a ViewResolver bean instance.\n}"}
{"index": 14994, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A representation of an OpenID Client Registration Request and Response, which is sent to and returned from the Client Registration Endpoint, and contains a set of claims about the Client's Registration information.", "code": "public final class OidcClientRegistration extends Object implements OidcClientMetadataClaimAccessor, Serializable {\n\tstatic OidcClientRegistration.Builder builder(); // Constructs a new OidcClientRegistration.Builder with empty claims.\n\tMap<String,Object> getClaims(); // Returns the metadata as claims.\n\tstatic OidcClientRegistration.Builder withClaims(Map<String,Object> claims); // Constructs a new OidcClientRegistration.Builder with the provided claims.\n}"}
{"index": 10211, "repo": "spring-core-6.0.11", "des": "Factory for collections that is aware of common Java and Spring collection types.", "code": "public final class CollectionFactory extends Object {\n\tstatic <E> Collection<E> createApproximateCollection(Object collection, int capacity); // Create the most approximate collection for the given collection.\n\tstatic <K, V> Map<K,V> createApproximateMap(Object map, int capacity); // Create the most approximate map for the given map.\n\tstatic <E> Collection<E> createCollection(Class<?> collectionType, int capacity); // Create the most appropriate collection for the given collection type.\n\tstatic <E> Collection<E> createCollection(Class<?> collectionType, Class<?> elementType, int capacity); // Create the most appropriate collection for the given collection type.\n\tstatic <K, V> Map<K,V> createMap(Class<?> mapType, int capacity); // Create the most appropriate map for the given map type.\n\tstatic <K, V> Map<K,V> createMap(Class<?> mapType, Class<?> keyType, int capacity); // Create the most appropriate map for the given map type.\n\tstatic Properties createSortedProperties(boolean omitComments); // Create a variant of Properties that sorts properties alphanumerically based on their keys.\n\tstatic Properties createSortedProperties(Properties properties, boolean omitComments); // Create a variant of Properties that sorts properties alphanumerically based on their keys.\n\tstatic Properties createStringAdaptingProperties(); // Create a variant of Properties that automatically adapts non-String values to String representations in Properties.getProperty(java.lang.String).\n\tstatic boolean isApproximableCollectionType(Class<?> collectionType); // Determine whether the given collection type is an approximable type, i.e.\n\tstatic boolean isApproximableMapType(Class<?> mapType); // Determine whether the given map type is an approximable type, i.e.\n}"}
{"index": 14440, "repo": "wicket-core-10.0.0-M1", "des": "Holds thread local state for Wicket data.", "code": "public class ThreadContext extends Object {\n\tstatic ThreadContext detach(); // Cleans the ThreadContext and returns previous context.\n\tstatic boolean exists(); // Checks if ThreadContext exists for the current thread\n\tstatic ThreadContext get(boolean createIfDoesNotExist); // INTERNAL METHOD\n\tstatic Application getApplication();\n\tstatic RequestCycle getRequestCycle();\n\tstatic Session getSession();\n\tstatic void restore(ThreadContext threadContext); // Restores the context\n\tstatic void setApplication(Application application); // Binds the specified application to current thread.\n\tstatic void setRequestCycle(RequestCycle requestCycle); // Binds the RequestCycle to current thread.\n\tstatic void setSession(Session session); // Binds the session to current thread.\n}"}
{"index": 5830, "repo": "hbase-hadoop2-compat-2.5.5-hadoop3", "des": "Extended histogram implementation with counters for metric size ranges.", "code": "Class MutableSizeHistogram {\n\tlong[] getRanges(); // Returns the ranges to be counted\n\tString getRangeType(); // Returns the type of range histogram size or time\n}"}
{"index": 13368, "repo": "shiro-core-2.0.0-alpha-2", "des": "A SessionContext is a 'bucket' of data presented to a SessionFactory which interprets this data to construct Session instances.", "code": "public interface SessionContext extends Map<String,Object> {\n\tString getHost(); // Returns the originating host name or IP address (as a String) from where the Subject is initiating the Session.\n\tSerializable getSessionId();\n\tvoid setHost(String host); // Sets the originating host name or IP address (as a String) from where the Subject is initiating the Session.\n\tvoid setSessionId(Serializable sessionId);\n}"}
{"index": 17210, "repo": "spring-integration-amqp-6.1.2", "des": "Spec for an inbound channel adapter with a StreamListenerContainer.", "code": "public class RabbitStreamInboundChannelAdapterSpec extends AmqpInboundChannelAdapterSpec<RabbitStreamInboundChannelAdapterSpec,org.springframework.rabbit.stream.listener.StreamListenerContainer> {\n\tRabbitStreamInboundChannelAdapterSpec configureContainer(Consumer<RabbitStreamMessageListenerContainerSpec> configurer);\n\tRabbitStreamInboundChannelAdapterSpec streamName(String streamName); // Configure a name for Rabbit stream to consume from.\n\tRabbitStreamInboundChannelAdapterSpec superStream(String superStream, String consumerName); // Configure a name for Rabbit super stream to consume from.\n\tRabbitStreamInboundChannelAdapterSpec superStream(String superStream, String consumerName, int consumers); // Configure a name for Rabbit super stream to consume from.\n}"}
{"index": 12590, "repo": "spring-jdbc-6.0.11", "des": "Reusable RDBMS query in which concrete subclasses must implement the abstract updateRow(ResultSet, int, context) method to update each row of the JDBC ResultSet and optionally map contents into an object.", "code": "public abstract class UpdatableSqlQuery<T> extends SqlQuery<T> {\n\tprotected RowMapper<T> newRowMapper(Object[] parameters, Map<?,?> context); // Implementation of the superclass template method.\n\tprotected abstract T updateRow(ResultSet rs, int rowNum, Map<?,?> context); // Subclasses must implement this method to update each row of the ResultSet and optionally create object of the result type.\n}"}
{"index": 15058, "repo": "spring-vault-core-3.0.4", "des": "Strategy interface to control whether to retain or drop a Lease after a failure.", "code": "@FunctionalInterface public interface LeaseStrategy {\n\tstatic LeaseStrategy dropOnError(); // Predefined strategy to drop leases on error.\n\tstatic LeaseStrategy retainOnError(); // Predefined strategy to retain leases on error.\n\tstatic LeaseStrategy retainOnIoError(); // Predefined strategy to retain leases on I/O errors.\n\tboolean shouldDrop(Throwable error); // Return true to drop the lease after error happened.\n}"}
{"index": 17490, "repo": "plc4j-api-0.10.0", "des": "Interface defining the most basic methods a PLC4X connection should support.", "code": "public interface PlcConnection extends AutoCloseable {\n\tPlcBrowseRequest.Builder browseRequestBuilder();\n\tvoid close(); // Closes the connection to the remote PLC.\n\tvoid connect(); // Establishes the connection to the remote PLC.\n\tPlcConnectionMetadata getMetadata(); // Provides connection metadata.\n\tboolean isConnected(); // Indicates if the connection is established to a remote PLC.\n\tCompletableFuture<Void> ping(); // Execute a ping query against a remote device to check the availability of the connection.\n\tdefault PlcField prepareField(String fieldQuery); // Deprecated.\n\tPlcReadRequest.Builder readRequestBuilder();\n\tPlcSubscriptionRequest.Builder subscriptionRequestBuilder();\n\tPlcUnsubscriptionRequest.Builder unsubscriptionRequestBuilder();\n\tPlcWriteRequest.Builder writeRequestBuilder();\n}"}
{"index": 10703, "repo": "spring-tx-6.0.11", "des": "Default implementation of the TransactionDefinition interface, offering bean-style configuration and sensible default values (PROPAGATION_REQUIRED, ISOLATION_DEFAULT, TIMEOUT_DEFAULT, readOnly=false).", "code": "public class DefaultTransactionDefinition extends Object implements TransactionDefinition, Serializable {\n\tboolean equals(Object other); // This implementation compares the toString() results.\n\tprotected final StringBuilder getDefinitionDescription(); // Return an identifying description for this transaction definition.\n\tfinal int getIsolationLevel(); // Return the isolation level.\n\tfinal String getName(); // Return the name of this transaction.\n\tfinal int getPropagationBehavior(); // Return the propagation behavior.\n\tfinal int getTimeout(); // Return the transaction timeout.\n\tfinal boolean isReadOnly(); // Return whether to optimize as a read-only transaction.\n\tfinal void setIsolationLevel(int isolationLevel); // Set the isolation level.\n\tfinal void setIsolationLevelName(String constantName); // Set the isolation level by the name of the corresponding constant in TransactionDefinition, e.g.\n\tfinal void setName(String name); // Set the name of this transaction.\n\tfinal void setPropagationBehavior(int propagationBehavior); // Set the propagation behavior.\n\tfinal void setPropagationBehaviorName(String constantName); // Set the propagation behavior by the name of the corresponding constant in TransactionDefinition, e.g.\n\tfinal void setReadOnly(boolean readOnly); // Set whether to optimize as read-only transaction.\n\tfinal void setTimeout(int timeout); // Set the timeout to apply, as number of seconds.\n}"}
{"index": 3669, "repo": "hive-serde-4.0.0-alpha-2", "des": "The set of fields this struct contains, along with convenience methods for finding and manipulating them.", "code": "Enum ThriftTestObj._Fields {\n\tstatic ThriftTestObj._Fields findByName(String name); // Find the _Fields constant that matches name, or null if its not found.\n\tstatic ThriftTestObj._Fields findByThriftId(int fieldId); // Find the _Fields constant that matches fieldId, or null if its not found.\n\tstatic ThriftTestObj._Fields findByThriftIdOrThrow(int fieldId); // Find the _Fields constant that matches fieldId, throwing an exception if it is not found.\n\tString getFieldName();\n\tshort getThriftFieldId();\n\tstatic ThriftTestObj._Fields valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ThriftTestObj._Fields[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 779, "repo": "ignite-core-2.15.0", "des": "Future which waits for embedded future to complete and then asynchronously executes provided closure with embedded future result.", "code": "Class GridEmbeddedFuture<A,B> {\n\tboolean cancel(); // Default no-op implementation that always returns false.\n\tboolean isCancelled(); // Returns true if this computation was cancelled before it completed normally.\n}"}
{"index": 13120, "repo": "maven-settings-builder-4.0.0-alpha-7", "des": "Handles serialization of settings into the default textual format.", "code": "@Named @Singleton public class DefaultSettingsWriter extends Object implements SettingsWriter {\n\tvoid write(File output, Map<String,Object> options, Settings settings); // Writes the supplied settings to the specified file.\n\tvoid write(OutputStream output, Map<String,Object> options, Settings settings); // Writes the supplied settings to the specified byte stream.\n\tvoid write(Writer output, Map<String,Object> options, Settings settings); // Writes the supplied settings to the specified character writer.\n}"}
{"index": 18497, "repo": "poi-scratchpad-5.2.3", "des": "User-friendly interface to office drawing objects.", "code": "Interface OfficeDrawing {\n\tOfficeDrawing.HorizontalPositioning getHorizontalPositioning(); // Returns the type of horizontal positioning to use for a shape\n\tOfficeDrawing.HorizontalRelativeElement getHorizontalRelative(); // Specifies a page element relative to which a shape is horizontally positioned\n\tEscherContainerRecord getOfficeArtSpContainer(); // Returns escher record that represent shape container (record type is 0xF004).\n\tbyte[] getPictureData(); // Returns picture data if this shape has (single?) associated picture data\n\tint getRectangleBottom(); // Bottom of the rectangle enclosing shape relative to the origin of the shape\n\tint getRectangleLeft(); // Left of rectangle enclosing shape relative to the origin of the shape\n\tint getRectangleRight(); // Right of rectangle enclosing shape relative to the origin of the shape\n\tint getRectangleTop(); // Top of rectangle enclosing shape relative to the origin of the shape\n\tint getShapeId(); // Shape Identifier\n\tOfficeDrawing.VerticalPositioning getVerticalPositioning(); // Specifies the type of vertical positioning to use for a shape\n\tOfficeDrawing.VerticalRelativeElement getVerticalRelativeElement(); // Specifies a page element relative to which a shape is vertically positioned\n}"}
{"index": 18049, "repo": "spring-ws-core-4.0.5", "des": "Represents a bean method that will be invoked as part of an incoming Web service message.", "code": "public final class MethodEndpoint extends Object {\n\tboolean equals(Object o);\n\tObject getBean(); // Returns the object bean for this method endpoint.\n\tMethod getMethod(); // Returns the method for this method endpoint.\n\torg.springframework.core.MethodParameter[] getMethodParameters(); // Returns the method parameters for this method endpoint.\n\torg.springframework.core.MethodParameter getReturnType(); // Returns the method return type, as MethodParameter.\n\tObject invoke(Object... args); // Invokes this method endpoint with the given arguments.\n}"}
{"index": 1354, "repo": "nutch-2.4", "des": "Utility methods for handling application-level locking.", "code": "Class LockUtil {\n\tstatic void createLockFile(FileSystem fs, Path lockFile, boolean accept); // Create a lock file.\n\tstatic boolean removeLockFile(FileSystem fs, Path lockFile); // Remove lock file.\n}"}
{"index": 6251, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "A MessageProducerSpec for AmqpInboundChannelAdapters.", "code": "Class AmqpInboundChannelAdapterSpec {\n\tAmqpInboundChannelAdapterSpec acknowledgeMode(org.springframework.amqp.core.AcknowledgeMode acknowledgeMode);\n\tAmqpInboundChannelAdapterSpec addQueueNames(java.lang.String... queueName);\n\tAmqpInboundChannelAdapterSpec addQueues(org.springframework.amqp.core.Queue... queues);\n\tAmqpInboundChannelAdapterSpec adviceChain(org.aopalliance.aop.Advice... adviceChain);\n\tAmqpInboundChannelAdapterSpec channelTransacted(boolean transactional);\n\tAmqpInboundChannelAdapterSpec concurrentConsumers(int concurrentConsumers);\n\tAmqpInboundChannelAdapterSpec consecutiveActiveTrigger(int consecutiveActiveTrigger);\n\tAmqpInboundChannelAdapterSpec consecutiveIdleTrigger(int consecutiveIdleTrigger);\n\tAmqpInboundChannelAdapterSpec defaultRequeueRejected(boolean defaultRequeueRejected);\n\tAmqpInboundChannelAdapterSpec errorHandler(org.springframework.util.ErrorHandler errorHandler);\n\tAmqpInboundChannelAdapterSpec exclusive(boolean exclusive);\n\tjava.util.Collection<java.lang.Object> getComponentsToRegister();\n\tAmqpInboundChannelAdapterSpec maxConcurrentConsumers(int maxConcurrentConsumers);\n\tAmqpInboundChannelAdapterSpec prefetchCount(int prefetchCount);\n\tAmqpInboundChannelAdapterSpec receiveTimeout(long receiveTimeout);\n\tAmqpInboundChannelAdapterSpec recoveryInterval(long recoveryInterval);\n\tAmqpInboundChannelAdapterSpec shutdownTimeout(long shutdownTimeout);\n\tAmqpInboundChannelAdapterSpec startConsumerMinInterval(long startConsumerMinInterval);\n\tAmqpInboundChannelAdapterSpec stopConsumerMinInterval(long stopConsumerMinInterval);\n\tAmqpInboundChannelAdapterSpec taskExecutor(java.util.concurrent.Executor taskExecutor); // Configure an Executor used to invoke the message listener.\n\tAmqpInboundChannelAdapterSpec transactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Configure a PlatformTransactionManager; used to synchronize the rabbit transaction with some other transaction(s).\n\tAmqpInboundChannelAdapterSpec txSize(int txSize);\n}"}
{"index": 16496, "repo": "spring-batch-infrastructure-5.0.2", "des": "Utility methods for create MethodInvoker instances.", "code": "public class MethodInvokerUtils extends Object {\n\tstatic MethodInvoker getMethodInvokerByAnnotation(Class<? extends Annotation> annotationType, Object target); // Create MethodInvoker for the method with the provided annotation on the provided object.\n\tstatic MethodInvoker getMethodInvokerByAnnotation(Class<? extends Annotation> annotationType, Object target, Class<?>... expectedParamTypes); // Create a MethodInvoker from the delegate based on the annotationType.\n\tstatic MethodInvoker getMethodInvokerByName(Object object, String methodName, boolean paramsRequired, Class<?>... paramTypes); // Create a MethodInvoker using the provided method name to search.\n\tstatic MethodInvoker getMethodInvokerForInterface(Class<?> cls, String methodName, Object object, Class<?>... paramTypes); // Create a MethodInvoker using the provided interface, and method name from that interface.\n\tstatic <C, T> MethodInvoker getMethodInvokerForSingleArgument(Object target); // Create a MethodInvoker for the delegate from a single public method.\n\tstatic String getParamTypesString(Class<?>... paramTypes); // Create a String representation of the array of parameter types.\n}"}
{"index": 16031, "repo": "spring-integration-jms-6.1.2", "des": "A MessageConsumer that sends the converted Message payload within a JMS Message.", "code": "public class JmsSendingMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler {\n\tString getComponentType();\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> message);\n\tprotected void onInit();\n\tvoid setDeliveryModeExpression(org.springframework.expression.Expression deliveryModeExpression); // Specify a SpEL expression to evaluate a deliveryMode for the JMS message to send.\n\tvoid setDeliveryModeExpressionString(String deliveryModeExpression); // Specify a SpEL expression to evaluate a deliveryMode for the JMS message to send.\n\tvoid setDestination(jakarta.jms.Destination destination);\n\tvoid setDestinationExpression(org.springframework.expression.Expression destinationExpression);\n\tvoid setDestinationName(String destinationName);\n\tvoid setExtractPayload(boolean extractPayload); // Specify whether the payload should be extracted from each integration Message to be used as the JMS Message body.\n\tvoid setHeaderMapper(JmsHeaderMapper headerMapper);\n\tvoid setTimeToLiveExpression(org.springframework.expression.Expression timeToLiveExpression); // Specify a SpEL expression to evaluate a timeToLive for the JMS message to send.\n\tvoid setTimeToLiveExpressionString(String timeToLiveExpression); // Specify a SpEL expression to evaluate a timeToLive for the JMS message to send.\n}"}
{"index": 2498, "repo": "exoplayer-r2.3.1", "des": "An ExtractorInput that wraps a DataSource.", "code": "Class DefaultExtractorInput {\n\tvoid advancePeekPosition(int length); // Advances the peek position by length bytes.\n\tboolean advancePeekPosition(int length, boolean allowEndOfInput); // Advances the peek position by length bytes.\n\tlong getLength(); // Returns the length of the source stream, or C.LENGTH_UNSET if it is unknown.\n\tlong getPeekPosition(); // Returns the current peek position (byte offset) in the stream.\n\tlong getPosition(); // Returns the current read position (byte offset) in the stream.\n\tvoid peekFully(byte[] target, int offset, int length); // Peeks length bytes from the peek position, writing them into target at index offset.\n\tboolean peekFully(byte[] target, int offset, int length, boolean allowEndOfInput); // Peeks length bytes from the peek position, writing them into target at index offset.\n\tint read(byte[] target, int offset, int length); // Reads up to length bytes from the input and resets the peek position.\n\tvoid readFully(byte[] target, int offset, int length); // Equivalent to readFully(target, offset, length, false).\n\tboolean readFully(byte[] target, int offset, int length, boolean allowEndOfInput); // Like ExtractorInput.read(byte[], int, int), but reads the requested length in full.\n\tvoid resetPeekPosition(); // Resets the peek position to equal the current read position.\n\t<E extends java.lang.Throwable>void setRetryPosition(long position, E e); // Called when reading fails and the required retry position is different from the last position.\n\tint skip(int length); // Like ExtractorInput.read(byte[], int, int), except the data is skipped instead of read.\n\tvoid skipFully(int length); // Like ExtractorInput.readFully(byte[], int, int), except the data is skipped instead of read.\n\tboolean skipFully(int length, boolean allowEndOfInput); // Like ExtractorInput.readFully(byte[], int, int, boolean), except the data is skipped instead of read.\n}"}
{"index": 7547, "repo": "cassandra-all-4.1.2", "des": "A comparator of clustering prefixes (or more generally of Clusterable}.", "code": "Class ClusteringComparator {\n\tint compare(Clusterable c1, Clusterable c2);\n\t<V1,V2> int compare(Clustering<V1> c1, Clustering<V2> c2);\n\t<V1,V2> int compare(Clustering<V1> c1, Clustering<V2> c2, int size); // Compares the specified part of the specified clusterings.\n\t<V1,V2> int compare(ClusteringPrefix<V1> c1, ClusteringPrefix<V2> c2);\n\t<V1,V2> int compareComponent(int i, ClusteringPrefix<V1> v1, ClusteringPrefix<V2> v2);\n\t<V1,V2> int compareComponent(int i, V1 v1, ValueAccessor<V1> accessor1, V2 v2, ValueAccessor<V2> accessor2);\n\tboolean equals(java.lang.Object o);\n\tjava.util.Comparator<IndexInfo> indexComparator(boolean reversed);\n\tboolean isCompatibleWith(ClusteringComparator previous); // Returns whether this clustering comparator is compatible with the provided one, that is if the provided one can be safely replaced by this new one.\n\tClustering<?> make(java.lang.Object... values); // Creates a row clustering based on the clustering values.\n\tjava.util.Comparator<Clusterable> reversed();\n\tjava.util.Comparator<Row> rowComparator(); // A comparator for rows.\n\tint size(); // The number of clustering columns for the table this is the comparator of.\n\tAbstractType<?> subtype(int i); // Returns the type of the ith clustering column of the table.\n\tjava.util.List<AbstractType<?>> subtypes(); // The \"subtypes\" of this clustering comparator, that is the types of the clustering columns for the table this is a comparator of.\n\t<T> void validate(ClusteringPrefix<T> clustering); // Validates the provided prefix for corrupted data.\n}"}
{"index": 7286, "repo": "calcite-core-1.34.0", "des": "Common splitting strategy for SUM and SUM0 functions.", "code": "Class SqlSplittableAggFunction.AbstractSumSplitter {\n\tprotected abstract SqlAggFunction getMergeAggFunctionOfTopSplit();\n\t@Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom); // Merge top and bottom aggregate calls into a single aggregate call, if they are legit to merge.\n\t@Nullable AggregateCall other(RelDataTypeFactory typeFactory, AggregateCall e); // Called to generate an aggregate for the other side of the join than the side aggregate call's arguments come from.\n\tRexNode singleton(RexBuilder rexBuilder, RelDataType inputRowType, AggregateCall aggregateCall); // Generates an expression for the value of the aggregate function when applied to a single row.\n\tAggregateCall split(AggregateCall aggregateCall, Mappings.TargetMapping mapping);\n\tAggregateCall topSplit(RexBuilder rexBuilder, SqlSplittableAggFunction.Registry<RexNode> extra, int offset, RelDataType inputRowType, AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal); // Generates an aggregate call to merge sub-totals.\n}"}
{"index": 16340, "repo": "spring-session-core-3.1.1", "des": "A SessionRepository backed by a Map and that uses a MapSession.", "code": "public class MapSessionRepository extends Object implements SessionRepository<MapSession> {\n\tMapSession createSession(); // Creates a new Session that is capable of being persisted by this SessionRepository.\n\tvoid deleteById(String id); // Deletes the Session with the given Session.getId() or does nothing if the Session is not found.\n\tMapSession findById(String id); // Gets the Session by the Session.getId() or null if no Session is found.\n\tvoid save(MapSession session); // Ensures the Session created by SessionRepository.createSession() is saved.\n\tvoid setDefaultMaxInactiveInterval(Duration defaultMaxInactiveInterval); // Set the maximum inactive interval in seconds between requests before newly created sessions will be invalidated.\n}"}
{"index": 11047, "repo": "spring-shell-core-3.1.2", "des": "Default implementation of a CommandParser.CommandParserResults.", "code": "public static class CommandParser.DefaultCommandParserResults extends Object implements CommandParser.CommandParserResults {\n\tList<CommandParser.CommandParserException> errors(); // Gets parsing errors.\n\tList<String> positional(); // Gets the unmapped positional arguments.\n\tCommandRegistration registration(); // Gets the registration.\n\tList<CommandParser.CommandParserResult> results(); // Gets the results.\n}"}
{"index": 10284, "repo": "spring-core-6.0.11", "des": "A hint that describes the need for Java serialization at runtime.", "code": "public class JavaSerializationHint extends Object implements ConditionalHint {\n\tboolean equals(Object o);\n\tTypeReference getReachableType(); // Return the type that should be reachable for this hint to apply, or null if this hint should always been applied.\n\tTypeReference getType(); // Return the type that needs to be serialized using Java serialization at runtime.\n}"}
{"index": 12652, "repo": "spring-data-mongodb-4.1.2", "des": "Gateway to boolean expressions that evaluate their argument expressions as booleans and return a boolean as the result.", "code": "public class BooleanOperators extends Object {\n\tstatic BooleanOperators.Not not(String fieldReference); // Creates new AggregationExpression that evaluates the boolean value of the referenced field and returns the opposite boolean value.\n\tstatic BooleanOperators.Not not(AggregationExpression expression); // Creates new AggregationExpression that evaluates the boolean value of AggregationExpression result and returns the opposite boolean value.\n\tstatic BooleanOperators.BooleanOperatorFactory valueOf(String fieldReference); // Take the array referenced by given fieldReference.\n\tstatic BooleanOperators.BooleanOperatorFactory valueOf(AggregationExpression fieldReference); // Take the value resulting of the given AggregationExpression.\n}"}
{"index": 10215, "repo": "spring-core-6.0.11", "des": "Support class for throttling concurrent access to a specific resource.", "code": "public abstract class ConcurrencyThrottleSupport extends Object implements Serializable {\n\tprotected void afterAccess(); // To be invoked after the main execution logic of concrete subclasses.\n\tprotected void beforeAccess(); // To be invoked before the main execution logic of concrete subclasses.\n\tint getConcurrencyLimit(); // Return the maximum number of concurrent access attempts allowed.\n\tboolean isThrottleActive(); // Return whether this throttle is currently active.\n\tvoid setConcurrencyLimit(int concurrencyLimit); // Set the maximum number of concurrent access attempts allowed.\n}"}
{"index": 11777, "repo": "bedrock-core-7.0.2", "des": "A utility class for working with prime numbers between 1 and 1000;", "code": "public class Primes extends Object {\n\tstatic int closestPrimeTo(int n); // Obtains the closest prime number to the specified value.\n\tstatic int largestPrime(); // Obtains the largest prime known to Primes.\n\tstatic int nthPrime(int i); // Obtains the ith prime number, the first being 2.\n}"}
{"index": 3565, "repo": "commons-geometry-hull-1.0-beta1", "des": "Implements Andrew's monotone chain method to generate the convex hull of a finite set of points in the two-dimensional Euclidean space.", "code": "Class MonotoneChain {\n\tCollection<Vector2D> findHullVertices(Collection<Vector2D> points); // Find the convex hull vertices from the set of input points.\n\tConvexHull2D generate(Collection<Vector2D> points); // Build a convex hull from the set of input points.\n\tDoublePrecisionContext getPrecision(); // Get the object used to determine floating point equality for this region.\n\tboolean isIncludeCollinearPoints(); // Returns if collinear points on the hull will be added as hull vertices.\n}"}
{"index": 5279, "repo": "druid-processing-26.0.0", "des": "Base class for a single variable input mathematical Function, with specialized 'eval' implementations that that operate on primitive number types.", "code": "Class Function.UnivariateMathFunction {\n\tboolean canVectorize(Expr.InputBindingInspector inspector, List<Expr> args); // Check if a function can be 'vectorized', for a given set of Expr inputs.\n\tprotected ExprEval eval(double param);\n\tprotected ExprEval eval(ExprEval param);\n\tprotected ExprEval eval(long param);\n\tExpressionType getOutputType(Expr.InputBindingInspector inspector, List<Expr> args); // Compute the output type of this function for a given set of argument expression inputs.\n}"}
{"index": 11618, "repo": "spring-websocket-6.0.11", "des": "Abstract base class for XHR transport implementations to extend.", "code": "public abstract class AbstractXhrTransport extends Object implements XhrTransport {\n\tCompletableFuture<WebSocketSession> connectAsync(TransportRequest request, WebSocketHandler handler); // Connect the transport.\n\tprotected abstract void connectInternal(TransportRequest request, WebSocketHandler handler, URI receiveUrl, org.springframework.http.HttpHeaders handshakeHeaders, XhrClientSockJsSession session, CompletableFuture<WebSocketSession> connectFuture);\n\tprotected void connectInternal(TransportRequest request, WebSocketHandler handler, URI receiveUrl, org.springframework.http.HttpHeaders handshakeHeaders, XhrClientSockJsSession session, org.springframework.util.concurrent.SettableListenableFuture<WebSocketSession> connectFuture); // Deprecated.\n\tString executeInfoRequest(URI infoUrl, org.springframework.http.HttpHeaders headers); // Perform an HTTP request to the SockJS \"Info\" URL.\n\tprotected abstract org.springframework.http.ResponseEntity<String> executeInfoRequestInternal(URI infoUrl, org.springframework.http.HttpHeaders headers);\n\tvoid executeSendRequest(URI url, org.springframework.http.HttpHeaders headers, TextMessage message); // Execute a request to send the message to the server.\n\tprotected abstract org.springframework.http.ResponseEntity<String> executeSendRequestInternal(URI url, org.springframework.http.HttpHeaders headers, TextMessage message);\n\tList<TransportType> getTransportTypes(); // Get the SockJS transport types that this transport can be used for.\n\tboolean isXhrStreamingDisabled(); // Whether XHR streaming is disabled or not.\n\tvoid setXhrStreamingDisabled(boolean disabled); // An XhrTransport can support both the \"xhr_streaming\" and \"xhr\" SockJS server transports.\n}"}
{"index": 12686, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $toString that converts a value to string.", "code": "public static class ConvertOperators.ToString extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tstatic ConvertOperators.ToString toString(Object value); // Creates new ConvertOperators.ToString using the given value as input.\n\tprotected List<Object> values();\n}"}
{"index": 6032, "repo": "jackson-databind-2.15.2", "des": "Shared base class used for anything on which annotations (included within a AnnotationMap).", "code": "Class Annotated {\n\tabstract boolean equals(Object o);\n\tabstract AnnotatedElement getAnnotated(); // Method that can be used to find actual JDK element that this instance represents.\n\tabstract <A extends Annotation>A getAnnotation(Class<A> acls);\n\tprotected abstract int getModifiers();\n\tabstract String getName();\n\tabstract Class<?> getRawType(); // \"Raw\" type (type-erased class) of the annotated element; definition of what exactly this means depends on sub-class.\n\tabstract JavaType getType(); // Full generic type of the annotated element; definition of what exactly this means depends on sub-class.\n\tabstract boolean hasAnnotation(Class<?> acls);\n\tabstract boolean hasOneOf(Class<? extends Annotation>[] annoClasses);\n\tboolean isPublic();\n}"}
{"index": 8366, "repo": "hive-common-4.0.0-alpha-2", "des": "Collection of Number manipulation utilities common across Hive.", "code": "Class NumberUtils {\n\tstatic int getFirstInt(long pair); // Get the first int stored in a long value.\n\tstatic int getSecondInt(long pair); // Get the second int stored in a long value.\n\tstatic long makeIntPair(int i1, int i2); // Store two ints in a single long value.\n}"}
{"index": 16066, "repo": "shiro-web-2.0.0-alpha-2", "des": "Default WebSecurityManager implementation used in web-based applications or any application that requires HTTP connectivity (SOAP, http remoting, etc.).", "code": "public class DefaultWebSecurityManager extends org.apache.shiro.mgt.DefaultSecurityManager implements WebSecurityManager {\n\tprotected void afterSessionManagerSet();\n\tprotected void beforeLogout(org.apache.shiro.subject.Subject subject);\n\tprotected org.apache.shiro.subject.SubjectContext copy(org.apache.shiro.subject.SubjectContext subjectContext);\n\tprotected org.apache.shiro.session.mgt.SessionContext createSessionContext(org.apache.shiro.subject.SubjectContext subjectContext);\n\tprotected org.apache.shiro.session.mgt.SessionManager createSessionManager(String sessionMode);\n\tprotected org.apache.shiro.subject.SubjectContext createSubjectContext();\n\tprotected org.apache.shiro.session.mgt.SessionKey getSessionKey(org.apache.shiro.subject.SubjectContext context);\n\tString getSessionMode(); // Deprecated.\n\tboolean isHttpSessionMode(); // Security information needs to be retained from request to request, so Shiro makes use of a session for this.\n\tprotected void removeRequestIdentity(org.apache.shiro.subject.Subject subject);\n\tvoid setSessionManager(org.apache.shiro.session.mgt.SessionManager sessionManager);\n\tvoid setSessionMode(String sessionMode); // Deprecated. since 1.2\n\tvoid setSubjectDAO(org.apache.shiro.mgt.SubjectDAO subjectDAO);\n}"}
{"index": 12336, "repo": "jena-core-4.9.0", "des": "An interface that provides a method to load XML Schema documents.", "code": "public interface XSLoader {\n\tDOMConfiguration getConfig(); // The configuration of a document.\n\tXSModel load(LSInput is); // Parse an XML Schema document from a resource identified by a LSInput .\n\tXSModel loadInputList(LSInputList is); // Parses the content of XML Schema documents specified as a list of LSInputs.\n\tXSModel loadURI(String uri); // Parse an XML Schema document from a location identified by a URI reference.\n\tXSModel loadURIList(StringList uriList); // Parses the content of XML Schema documents specified as the list of URI references.\n}"}
{"index": 12657, "repo": "spring-data-mongodb-4.1.2", "des": "Base class for BucketOperationSupport.Output builders that result in a BucketOperationSupport providing the built BucketOperationSupport.Output.", "code": "public abstract static class BucketOperationSupport.OutputBuilder<B extends BucketOperationSupport.OutputBuilder<B,T>,T extends BucketOperationSupport<T,B>> extends Object {\n\tB addToSet(); // Generates a builder for an $addToSet-expression for the current value.\n\tB apply(String operation, Object... values); // Apply an operator to the current value.\n\tprotected abstract B apply(BucketOperationSupport.OperationOutput operationOutput); // Apply an BucketOperationSupport.OperationOutput to this output.\n\tT as(String alias); // Returns the finally to be applied BucketOperation with the given alias.\n\tB avg(); // Generates a builder for an $avg-expression for the current value.\n\tB count(); // Generates a builder for a $sum-expression.\n\tB first(); // Generates a builder for a $first-expression the current value.\n\tB last(); // Generates a builder for an $last-expression for the current value..\n\tB max(); // Generates a builder for an $max-expression for the current value.\n\tB min(); // Generates a builder for an $min-expression for the current value.\n\tB push(); // Generates a builder for an $push-expression for the current value.\n\tB sum(); // Generates a builder for a $sum-expression for the current value.\n\tB sum(Number value); // Generates a builder for a $sum-expression for the given value.\n}"}
{"index": 11217, "repo": "wicket-extensions-10.0.0-M1", "des": "Representation of a single node in the tree.", "code": "public abstract class Node<T> extends org.apache.wicket.markup.html.panel.Panel {\n\tprotected abstract org.apache.wicket.Component createContent(String id, org.apache.wicket.model.IModel<T> model); // Create the component to display the actual node's content.\n\tprotected org.apache.wicket.MarkupContainer createJunctionComponent(String id); // The junction component expands and collapses this node.\n\tprotected String getCollapsedStyleClass();\n\tprotected String getExpandedStyleClass(T t);\n\torg.apache.wicket.model.IModel<T> getModel();\n\tT getModelObject();\n\tprotected String getOtherStyleClass();\n\tprotected String getStyleClass(); // Get the style class depending on the current AbstractTree.State of this node.\n\tprotected void onInitialize();\n\tprotected void toggle(); // Toggle the node.\n}"}
{"index": 454, "repo": "phoenix-core-5.1.3", "des": "Wrapper for ResultScanner creation that closes HTableInterface when ResultScanner is closed.", "code": "Class TableResultIterator {\n\tvoid close();\n\tvoid explain(List<String> planSteps);\n\tvoid explain(List<String> planSteps, ExplainPlanAttributes.ExplainPlanAttributesBuilder explainPlanAttributesBuilder); // Generate ExplainPlan steps and add steps as list of Strings in planSteps argument as readable statement as well as add same generated steps in explainPlanAttributesBuilder so that we prepare ExplainPlan result as an attribute object useful to retrieve individual plan step attributes.\n\tvoid initScanner();\n\tTuple next(); // Grab the next row's worth of values.\n\tTableResultIterator.RenewLeaseStatus renewLease();\n}"}
{"index": 4274, "repo": "beam-sdks-java-core-2.49.0", "des": "A BigIntegerCoder encodes a BigInteger as a byte array containing the big endian two's-complement representation, encoded via ByteArrayCoder.", "code": "Class BigIntegerCoder {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tjava.math.BigInteger decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tjava.math.BigInteger decode(java.io.InputStream inStream, Coder.Context context); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(java.math.BigInteger value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tvoid encode(java.math.BigInteger value, java.io.OutputStream outStream, Coder.Context context); // Encodes the given value of type T onto the given output stream in the given context.\n\tprotected long getEncodedElementByteSize(java.math.BigInteger value); // Returns the size in bytes of the encoded value using this coder.\n\tboolean isRegisterByteSizeObserverCheap(java.math.BigInteger value); // Returns whether Coder.registerByteSizeObserver(T, org.apache.beam.sdk.util.common.ElementByteSizeObserver) cheap enough to call for every element, that is, if this Coder can calculate the byte size of the element to be coded in roughly constant time (or lazily).\n\tstatic BigIntegerCoder of();\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 6324, "repo": "mina-core-3.0.0-M2", "des": "Filter are interceptors/processors for incoming data received/sent.", "code": "Interface IoFilter {\n\tvoid messageReceived(IoSession session, Object message, ReadFilterChainController controller); // Invoked when a message is received.\n\tvoid messageSent(IoSession session, Object message); // Invoked when a high level message was written to the low level O/S buffer.\n\tvoid messageWriting(IoSession session, WriteRequest message, WriteFilterChainController controller); // Invoked when a message is under writing.\n\tvoid sessionClosed(IoSession session); // Invoked when a connection is closed.\n\tvoid sessionIdle(IoSession session, IdleStatus status); // Invoked with the related IdleStatus when a connection becomes idle.\n\tvoid sessionOpened(IoSession session); // Invoked when a connection has been opened.\n}"}
{"index": 7375, "repo": "mahout-math-0.13.0", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface FloatComparator {\n\tint compare(float o1, float o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 11161, "repo": "tribuo-core-4.3.1", "des": "A model which uses a subset of the features it knows about to make predictions.", "code": "public abstract class SparseModel<T extends Output<T>> extends Model<T> {\n\tSparseModel<T> copy(); // Copies a model, returning a deep copy of any mutable state, and a shallow copy otherwise.\n\tMap<String,List<String>> getActiveFeatures(); // Return an immutable view on the active features for each dimension.\n}"}
{"index": 12279, "repo": "jena-core-4.9.0", "des": "The callback from a reader to an RDF application.", "code": "public interface StatementHandler {\n\tvoid statement(AResource subj, AResource pred, ALiteral lit); // A triple in the file.\n\tvoid statement(AResource subj, AResource pred, AResource obj); // A triple in the file.\n}"}
{"index": 6799, "repo": "calcite-core-1.34.0", "des": "Extension to Calcite's implementation of JDBC connection allows schemas to be defined dynamically.", "code": "Interface CalciteConnection {\n\tCalciteConnectionConfig config();\n\tCalcitePrepare.Context createPrepareContext(); // Creates a context for preparing a statement for execution.\n\tProperties getProperties(); // Returns an instance of the connection properties.\n\tSchemaPlus getRootSchema(); // Returns the root schema.\n\tString getSchema();\n\tJavaTypeFactory getTypeFactory(); // Returns the type factory.\n\tvoid setSchema(String schema);\n}"}
{"index": 10515, "repo": "groovy-all-4.0.13", "des": "This class represents an error that is thrown when a bug is recognized inside the runtime.", "code": "public class GroovyBugError extends AssertionError {\n\tString getBugText(); // Returns the bug text to describe this error\n\tThrowable getCause();\n\tString getMessage(); // Returns the detail message string of this error.\n\tvoid setBugText(String msg); // Sets the bug text to describe this error\n}"}
{"index": 8003, "repo": "commons-jcs3-core-3.1", "des": "A factory that looks up the DataSource using the JDBC2 pool methods.", "code": "Class SharedPoolDataSourceFactory {\n\tvoid close(); // Closes the pool associated with this factory and releases it.\n\tDataSource getDataSource();\n\tString getName();\n\tvoid initialize(JDBCDiskCacheAttributes config); // Initialize the factory.\n}"}
{"index": 10375, "repo": "spring-core-6.0.11", "des": "Generator of SerializationHints predicates, testing whether the given hints match the expected behavior for serialization.", "code": "public class SerializationHintsPredicates extends Object {\n\tPredicate<RuntimeHints> onType(Class<?> type); // Return a predicate that checks whether a serialization hint is registered for the given type.\n\tPredicate<RuntimeHints> onType(TypeReference typeReference); // Return a predicate that checks whether a serialization hint is registered for the given type reference.\n}"}
{"index": 5986, "repo": "commons-lang3-3.12.0", "des": "A functional interface like LongUnaryOperator that declares a Throwable.", "code": "Interface FailableLongUnaryOperator<E extends Throwable> {\n\tdefault FailableLongUnaryOperator<E> andThen(FailableLongUnaryOperator<E> after); // Returns a composed FailableDoubleUnaryOperator like LongUnaryOperator.andThen(LongUnaryOperator).\n\tlong applyAsLong(long operand); // Applies this operator to the given operand.\n\tdefault FailableLongUnaryOperator<E> compose(FailableLongUnaryOperator<E> before); // Returns a composed FailableLongUnaryOperator like LongUnaryOperator.compose(LongUnaryOperator).\n\tstatic <E extends Throwable>FailableLongUnaryOperator<E> identity(); // Returns a unary operator that always returns its input argument.\n\tstatic <E extends Throwable>FailableLongUnaryOperator<E> nop(); // Returns The NOP singleton.\n}"}
{"index": 14752, "repo": "spring-data-commons-3.1.2", "des": "SPI to create MethodInterceptor instances based on the given source object and the target type to produce.", "code": "public interface MethodInterceptorFactory {\n\tMethodInterceptor createMethodInterceptor(Object source, Class<?> targetType); // Returns the MethodInterceptor to be used for the given source object and target type.\n\tboolean supports(Object source, Class<?> targetType); // Returns whether the current factory is supposed to be used to create a MethodInterceptor for proxy of the given target type.\n}"}
{"index": 5287, "repo": "druid-processing-26.0.0", "des": "Contains a collection of query processing methods for type-specific operations used exclusively by GroupByQueryEngineV2.", "code": "Interface GroupByColumnSelectorStrategy {\n\tGrouper.BufferComparator bufferComparator(int keyBufferPosition, StringComparator stringComparator); // Return BufferComparator for values written using this strategy when limit is pushed down to segment scan.\n\tboolean checkRowIndexAndAddValueToGroupingKey(int keyBufferPosition, Object rowObj, int rowValIdx, ByteBuffer keyBuffer); // If rowValIdx is less than the size of rowObj (haven't handled all of the row values): First, read the value at rowValIdx from a rowObj and write that value to the keyBuffer at keyBufferPosition.\n\tint getGroupingKeySize(); // Return the size, in bytes, of this dimension's values in the grouping key.\n\tint initColumnValues(ColumnValueSelector selector, int columnIndex, Object[] valuess); // Retrieve a row object from the ColumnValueSelector and put it in valuess at columnIndex.\n\tvoid initGroupingKeyColumnValue(int keyBufferPosition, int dimensionIndex, Object rowObj, ByteBuffer keyBuffer, int[] stack); // Read the first value within a row values object (e.\n\tvoid processValueFromGroupingKey(GroupByColumnSelectorPlus selectorPlus, ByteBuffer key, ResultRow resultRow, int keyBufferPosition); // Read a value from a grouping key and add it to the group by query result row, using the output name specified in a DimensionSpec.\n\tvoid reset(); // Reset any internal state held by this selector.\n\tint writeToKeyBuffer(int keyBufferPosition, ColumnValueSelector selector, ByteBuffer keyBuffer); // Write a single object from the given selector to the keyBuffer at keyBufferPosition.\n}"}
{"index": 8496, "repo": "commons-io-2.13.0", "des": "Provides counters for files, directories, and sizes, as a visit proceeds.", "code": "Class Counters {\n\tstatic Counters.Counter bigIntegerCounter(); // Returns a new BigInteger Counter.\n\tstatic Counters.PathCounters bigIntegerPathCounters(); // Returns a new BigInteger PathCounters.\n\tstatic Counters.Counter longCounter(); // Returns a new long Counter.\n\tstatic Counters.PathCounters longPathCounters(); // Returns a new BigInteger PathCounters.\n\tstatic Counters.Counter noopCounter(); // Returns the no-op Counter.\n\tstatic Counters.PathCounters noopPathCounters(); // Returns the no-op PathCounters.\n}"}
{"index": 7314, "repo": "calcite-core-1.34.0", "des": "Common base class for DML statement namespaces.", "code": "Class SqlValidatorImpl.DmlNamespace {\n\tprotected RelDataType convertToStruct(RelDataType type);\n\t@Nullable RelDataTypeField field(String name); // Returns a field of a given name, or null.\n\t@Nullable SqlNode getEnclosingNode(); // Returns the parse tree node that at is at the root of this namespace and includes all decorations.\n\tRelDataType getRowType(); // Returns the row type of this namespace, which comprises a list of names and types of the output columns.\n\tRelDataType getRowTypeSansSystemColumns(); // Returns the row type of this namespace, sans any system columns.\n\tRelDataType getType(); // Returns the type of this namespace.\n\tSqlValidator getValidator(); // Returns the validator.\n\tboolean isWrapperFor(Class<?> clazz); // Returns whether this namespace implements a given interface, or wraps a class which does.\n\t@Nullable SqlValidatorNamespace lookupChild(String name); // Looks up a child namespace of a given name.\n\tvoid makeNullable();\n\tvoid setType(RelDataType type); // Sets the type of this namespace.\n\tprotected RelDataType toStruct(RelDataType type, @Nullable SqlNode unnest); // Converts a type to a struct if it is not already.\n\tString translate(String name);\n\t<T> T unwrap(Class<T> clazz); // Returns this namespace, or a wrapped namespace, cast to a particular class.\n\tvoid validate(RelDataType targetRowType); // Validates this namespace.\n}"}
{"index": 1323, "repo": "ignite-core-2.15.0", "des": "MBean that provides control of system workersRegistry.", "code": "Class WorkersControlMXBeanImpl {\n\tList<String> getWorkerNames(); // Returns names of all registered workers.\n\tboolean stopThreadById(long id); // Stops thread by id, if exists.\n\tboolean stopThreadByUniqueName(String name); // Stops thread by name, if exists and unique.\n\tboolean terminateWorker(String name); // Terminates worker.\n}"}
{"index": 10744, "repo": "spring-tx-6.0.11", "des": "Advisor driven by a TransactionAttributeSource, used to include a TransactionInterceptor only for methods that are transactional.", "code": "public class TransactionAttributeSourceAdvisor extends org.springframework.aop.support.AbstractPointcutAdvisor {\n\torg.aopalliance.aop.Advice getAdvice();\n\torg.springframework.aop.Pointcut getPointcut();\n\tvoid setClassFilter(org.springframework.aop.ClassFilter classFilter); // Set the ClassFilter to use for this pointcut.\n\tvoid setTransactionInterceptor(TransactionInterceptor interceptor); // Set the transaction interceptor to use for this advisor.\n}"}
{"index": 418, "repo": "phoenix-core-5.1.3", "des": "Implementation of REGEXP_SUBSTR(<source>, <pattern>, <offset>) built-in function, where <offset> is the offset from the start of <string> .", "code": "Class RegexpSubstrFunction {\n\tprotected abstract AbstractBasePattern compilePatternSpec(String value);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tint getKeyFormationTraversalIndex(); // Determines whether or not a function may be used to form the start/stop key of a scan When OrderPreserving is YES, in order to make order-by optimization valid, it should return 0.\n\tInteger getMaxLength();\n\tString getName();\n\tFunctionExpression.OrderPreserving preservesOrder(); // Determines whether or not the result of the function invocation will be ordered in the same way as the input to the function.\n\tvoid readFields(DataInput input);\n}"}
{"index": 6862, "repo": "calcite-core-1.34.0", "des": "Implementation of Uncollect in enumerable calling convention.", "code": "Class EnumerableUncollect {\n\tEnumerableUncollect copy(RelTraitSet traitSet, RelNode newInput);\n\tstatic EnumerableUncollect create(RelTraitSet traitSet, RelNode input, boolean withOrdinality); // Creates an EnumerableUncollect.\n\tEnumerableRel.Result implement(EnumerableRelImplementor implementor, EnumerableRel.Prefer pref); // Creates a plan for this expression according to a calling convention.\n}"}
{"index": 17959, "repo": "spring-web-6.0.11", "des": "Special DataBinder for data binding from web request parameters to JavaBean objects.", "code": "public class WebDataBinder extends org.springframework.validation.DataBinder {\n\tprotected void adaptEmptyArrayIndices(org.springframework.beans.MutablePropertyValues mpvs); // Check for property values with names that end on \"[]\".\n\tprotected void bindMultipart(Map<String,List<MultipartFile>> multipartFiles, org.springframework.beans.MutablePropertyValues mpvs); // Bind all multipart files contained in the given request, if any (in case of a multipart request).\n\tprotected void checkFieldDefaults(org.springframework.beans.MutablePropertyValues mpvs); // Check the given property values for field defaults, i.e.\n\tprotected void checkFieldMarkers(org.springframework.beans.MutablePropertyValues mpvs); // Check the given property values for field markers, i.e.\n\tprotected void doBind(org.springframework.beans.MutablePropertyValues mpvs); // This implementation performs a field default and marker check before delegating to the superclass binding process.\n\tObject getEmptyValue(Class<?> fieldType); // Determine an empty value for the specified field.\n\tprotected Object getEmptyValue(String field, Class<?> fieldType); // Determine an empty value for the specified field.\n\tString getFieldDefaultPrefix(); // Return the prefix for parameters that mark default fields.\n\tString getFieldMarkerPrefix(); // Return the prefix for parameters that mark potentially empty fields.\n\tboolean isBindEmptyMultipartFiles(); // Return whether to bind empty MultipartFile parameters.\n\tvoid setBindEmptyMultipartFiles(boolean bindEmptyMultipartFiles); // Set whether to bind empty MultipartFile parameters.\n\tvoid setFieldDefaultPrefix(String fieldDefaultPrefix); // Specify a prefix that can be used for parameters that indicate default value fields, having \"prefix + field\" as name.\n\tvoid setFieldMarkerPrefix(String fieldMarkerPrefix); // Specify a prefix that can be used for parameters that mark potentially empty fields, having \"prefix + field\" as name.\n}"}
{"index": 12680, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $toDate that converts a value to date.", "code": "public static class ConvertOperators.ToDate extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\tstatic ConvertOperators.ToDate toDate(Object value); // Creates new ConvertOperators.ToDate using the given value as input.\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 13098, "repo": "spring-aop-6.0.11", "des": "Implementation of AspectInstanceFactory that locates the aspect from the BeanFactory using a configured bean name.", "code": "public class SimpleBeanFactoryAwareAspectInstanceFactory extends Object implements AspectInstanceFactory, org.springframework.beans.factory.BeanFactoryAware {\n\tClassLoader getAspectClassLoader(); // Expose the aspect class loader that this factory uses.\n\tObject getAspectInstance(); // Look up the aspect bean from the BeanFactory and return it.\n\tint getOrder();\n\tvoid setAspectBeanName(String aspectBeanName); // Set the name of the aspect bean.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}"}
{"index": 13143, "repo": "pulsar-client-original-3.0.0", "des": "Interface of transaction buffer handler.", "code": "public interface TransactionBufferHandler {\n\tvoid close(); // Release resources.\n\tCompletableFuture<TxnID> endTxnOnSubscription(String topic, String subscription, long txnIdMostBits, long txnIdLeastBits, TxnAction action, long lowWaterMark); // End transaction on subscription.\n\tCompletableFuture<TxnID> endTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, TxnAction action, long lowWaterMark); // End transaction on topic.\n\tint getAvailableRequestCredits();\n\tint getPendingRequestsCount();\n\tvoid handleEndTxnOnSubscriptionResponse(long requestId, CommandEndTxnOnSubscriptionResponse response); // Handle response of tend transaction on subscription.\n\tvoid handleEndTxnOnTopicResponse(long requestId, CommandEndTxnOnPartitionResponse response); // Handle response of end transaction on topic.\n}"}
{"index": 5385, "repo": "druid-processing-26.0.0", "des": "Creates ValueMatcher that apply a predicate to each value.", "code": "Class PredicateValueMatcherFactory {\n\tColumnType defaultType(); // This default type will be used when the underlying column has an unknown type.\n\tValueMatcher makeComplexProcessor(BaseObjectColumnValueSelector<?> selector); // Create a processor for a complex column.\n\tValueMatcher makeDimensionProcessor(DimensionSelector selector, boolean multiValue); // Create a processor for a string column.\n\tValueMatcher makeDoubleProcessor(BaseDoubleColumnValueSelector selector); // Create a processor for a double column.\n\tValueMatcher makeFloatProcessor(BaseFloatColumnValueSelector selector); // Create a processor for a float column.\n\tValueMatcher makeLongProcessor(BaseLongColumnValueSelector selector); // Create a processor for a long column.\n}"}
{"index": 3548, "repo": "mahout-mr-0.13.0", "des": "Implements a streaming k-means algorithm for weighted vectors.", "code": "Class StreamingKMeans {\n\tUpdatableSearcher cluster(Centroid datapoint); // Cluster one data point.\n\tUpdatableSearcher cluster(Iterable<Centroid> datapoints); // Cluster the data points in an Iterable.\n\tUpdatableSearcher cluster(Matrix data); // Cluster the rows of a matrix, treating them as Centroids with weight 1.\n\tdouble getDistanceCutoff();\n\tDistanceMeasure getDistanceMeasure();\n\tint getNumClusters();\n\tIterator<Centroid> iterator();\n\tvoid reindexCentroids();\n\tvoid setDistanceCutoff(double distanceCutoff);\n}"}
{"index": 5729, "repo": "freemarker-2.3.32", "des": "Experimental - subject to change: Adds functionality to ObjectWrapper that creates a plain Java object from a TemplateModel.", "code": "Interface ObjectWrapperAndUnwrapper {\n\tjava.lang.Object tryUnwrapTo(TemplateModel tm, java.lang.Class<?> targetClass); // Attempts to unwrap a TemplateModel to a plain Java object that's the instance of the given class (or is null).\n\tjava.lang.Object unwrap(TemplateModel tm); // Unwraps a TemplateModel to a plain Java object.\n}"}
{"index": 2752, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "TableSnapshotInputFormat allows a MapReduce job to run over a table snapshot.", "code": "Class TableSnapshotInputFormat {\n\torg.apache.hadoop.mapred.RecordReader<ImmutableBytesWritable,Result> getRecordReader(org.apache.hadoop.mapred.InputSplit split, org.apache.hadoop.mapred.JobConf job, org.apache.hadoop.mapred.Reporter reporter);\n\torg.apache.hadoop.mapred.InputSplit[] getSplits(org.apache.hadoop.mapred.JobConf job, int numSplits);\n\tstatic void setInput(org.apache.hadoop.mapred.JobConf job, String snapshotName, org.apache.hadoop.fs.Path restoreDir); // Configures the job to use TableSnapshotInputFormat to read from a snapshot.\n\tstatic void setInput(org.apache.hadoop.mapred.JobConf job, String snapshotName, org.apache.hadoop.fs.Path restoreDir, RegionSplitter.SplitAlgorithm splitAlgo, int numSplitsPerRegion); // Configures the job to use TableSnapshotInputFormat to read from a snapshot.\n}"}
{"index": 7043, "repo": "calcite-core-1.34.0", "des": "RelDataTypeComparability is an enumeration of the categories of comparison operators which types may support.", "code": "Enum RelDataTypeComparability {\n\tstatic RelDataTypeComparability valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RelDataTypeComparability[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14494, "repo": "spring-security-web-6.1.2", "des": "An Implementation of RequestCache which saves the original request URI in a cookie.", "code": "public class CookieRequestCache extends Object implements RequestCache {\n\tjakarta.servlet.http.HttpServletRequest getMatchingRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Returns a wrapper around the saved request, if it matches the current request.\n\tSavedRequest getRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Returns the saved request, leaving it cached.\n\tvoid removeRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Removes the cached request.\n\tvoid saveRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Caches the current request for later retrieval, once authentication has taken place.\n\tvoid setRequestMatcher(RequestMatcher requestMatcher); // Allows selective use of saved requests for a subset of requests.\n}"}
{"index": 15946, "repo": "spring-rabbit-3.0.6", "des": "Functional sub interface enabling a lambda for the onShutDown method.", "code": "@FunctionalInterface public interface ShutDownChannelListener extends ChannelListener {\n\tdefault void onCreate(com.rabbitmq.client.Channel channel, boolean transactional); // Called when a new channel is created.\n\tvoid onShutDown(com.rabbitmq.client.ShutdownSignalException signal); // Called when the underlying RabbitMQ channel is closed for any reason.\n}"}
{"index": 12292, "repo": "jena-core-4.9.0", "des": "A tokenizer, similar to java's StringTokenizer but allows for quoted character strings which can include other separators.", "code": "public class Tokenizer extends Object {\n\tboolean hasMoreTokens(); // Test if there are more tokens which can be returned.\n\tString nextToken(); // Return the next token.\n}"}
{"index": 12195, "repo": "jena-core-4.9.0", "des": "An OntModelSpecAssembler constructs OntModelSpec's from their RDF description.", "code": "public class OntModelSpecAssembler extends AssemblerBase implements Assembler {\n\tstatic OntModelSpec getOntModelSpecField(String name); // Answer the OntModelSpec in the OntModelSpec class with the given member name, or null if there isn't one.\n\tObject open(Assembler a, Resource root, Mode irrelevant); // The core operation: answer a new object constructed according to the object description hanging from root, using the assembler a for any sub-objects.\n}"}
{"index": 10010, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Base implementation of YarnContainer providing some common functionality like environment properties, command line parameters and handling of the run().", "code": "Class AbstractYarnContainer {\n\tvoid addContainerStateListener(ContainerStateListener listener); // Adds the container state listener.\n\tConfiguration getConfiguration(); // Gets the Yarn configuration.\n\tMap<String,String> getEnvironment(); // Gets the environment.\n\tString getEnvironment(String key); // Gets the environment variable.\n\tProperties getParameters(); // Gets the parameters.\n\tboolean isWaitCompleteState(); // Indication for possible handler using this bean whether it should wait COMPLETED state.\n\tprotected void notifyCompleted(); // Notify completed state to container state listeners.\n\tprotected void notifyCompleted(int exit); // Notify completed state to container state listeners.\n\tprotected void notifyContainerState(ContainerStateListener.ContainerState state, Object exit); // Notify state to container state listeners.\n\tvoid run(); // This method is called when something is ran in a container.\n\tprotected abstract void runInternal(); // Internal method to handle the actual run() method.\n\tvoid setConfiguration(Configuration configuration); // Sets the Yarn configuration.\n\tvoid setEnvironment(Map<String,String> environment); // Sets the environment variables.\n\tvoid setParameters(Properties parameters); // Sets the parameters.\n}"}
{"index": 7839, "repo": "cassandra-all-4.1.2", "des": "Base class for codecs mapping CQL maps to a Java Map.", "code": "Class TypeCodec.AbstractMapCodec<K,V> {\n\tboolean accepts(java.lang.Object value); // Return true if this codec is capable of serializing the given object.\n\tjava.util.Map<K,V> deserialize(java.nio.ByteBuffer bytes, ProtocolVersion protocolVersion); // Deserialize the given ByteBuffer instance according to the CQL type handled by this codec.\n\tjava.lang.String format(java.util.Map<K,V> value); // Format the given value as a valid CQL literal according to the CQL type handled by this codec.\n\tprotected abstract java.util.Map<K,V> newInstance(int size); // Return a new Map instance with the given estimated size.\n\tjava.util.Map<K,V> parse(java.lang.String value); // Parse the given CQL literal into an instance of the Java type handled by this codec.\n\tjava.nio.ByteBuffer serialize(java.util.Map<K,V> value, ProtocolVersion protocolVersion); // Serialize the given value according to the CQL type handled by this codec.\n}"}
{"index": 11144, "repo": "tribuo-core-4.3.1", "des": "Output is the root interface for the supported prediction types.", "code": "public interface Output<T extends Output<T>> extends ProtoSerializable<org.tribuo.protos.core.OutputProto>, Serializable {\n\tT copy(); // Deep copy of the output up to its immutable state.\n\tstatic Output<?> deserialize(org.tribuo.protos.core.OutputProto proto); // Deserializes a OutputProto into a Output subclass.\n\tboolean fullEquals(T other); // Compares other to this output.\n\tdefault boolean fullEquals(T other, double tolerance); // Compares other to this output.\n\tString getSerializableForm(boolean includeConfidence); // Generates a String suitable for writing to a csv or json file.\n}"}
{"index": 7694, "repo": "cassandra-all-4.1.2", "des": "This class generates a BigIntegerToken using a Murmur3 hash.", "code": "Class Murmur3Partitioner {\n\tDecoratedKey decorateKey(java.nio.ByteBuffer key); // Transform key to object representation of the on-disk format.\n\tjava.util.Map<Token,java.lang.Float> describeOwnership(java.util.List<Token> sortedTokens); // Calculate the deltas between tokens in the ring in order to compare relative sizes.\n\tToken getMaximumToken(); // The biggest token for this partitioner, unlike getMinimumToken, this token is actually used and users wanting to include all tokens need to do getMaximumToken().maxKeyBound() Not implemented for the ordered partitioners\n\tint getMaxTokenSize();\n\tMurmur3Partitioner.LongToken getMinimumToken();\n\tMurmur3Partitioner.LongToken getRandomToken();\n\tMurmur3Partitioner.LongToken getRandomToken(java.util.Random r);\n\tMurmur3Partitioner.LongToken getToken(java.nio.ByteBuffer key); // Generate the token of a key.\n\tToken.TokenFactory getTokenFactory();\n\tAbstractType<?> getTokenValidator();\n\tToken midpoint(Token lToken, Token rToken); // Calculate a Token representing the approximate \"middle\" of the given range.\n\tAbstractType<?> partitionOrdering(); // Abstract type that orders the same way as DecoratedKeys provided by this partitioner.\n\tboolean preservesOrder();\n\tToken split(Token lToken, Token rToken, double ratioToLeft); // Calculate a Token which take approximate 0 <= ratioToLeft <= 1 ownership of the given range.\n\tjava.util.Optional<Splitter> splitter();\n}"}
{"index": 16060, "repo": "shiro-web-2.0.0-alpha-2", "des": "Base class for all Filters that require the current user to be authenticated.", "code": "public abstract class AuthenticationFilter extends AccessControlFilter {\n\tString getSuccessUrl(); // Returns the success url to use as the default location a user is sent after logging in.\n\tprotected boolean isAccessAllowed(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, Object mappedValue); // Determines whether the current subject is authenticated.\n\tprotected void issueSuccessRedirect(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response); // Redirects to user to the previously attempted URL after a successful login.\n\tvoid setSuccessUrl(String successUrl); // Sets the default/fallback success url to use as the default location a user is sent after logging in.\n}"}
{"index": 10425, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "This API is taken from OpenZipkin Brave.", "code": "public interface HttpServerHandler {\n\tSpan handleReceive(HttpServerRequest request); // Conditionally joins a span, or starts a new trace, depending on if a trace context was extracted from the request.\n\tvoid handleSend(HttpServerResponse response, Span span); // Finishes the server span after assigning it tags according to the response or error.\n}"}
{"index": 6929, "repo": "calcite-core-1.34.0", "des": "Rule to convert a relational expression from JdbcConvention to EnumerableConvention.", "code": "Class JdbcToEnumerableConverterRule {\n\t@Nullable RelNode convert(RelNode rel); // Converts a relational expression to the target trait(s) of this rule.\n\tstatic JdbcToEnumerableConverterRule create(JdbcConvention out); // Creates a JdbcToEnumerableConverterRule.\n}"}
{"index": 15862, "repo": "camel-api-4.0.0-RC1", "des": "Represents the core lifecycle API for services which can be initialized, started and stopped", "code": "public interface Service extends AutoCloseable {\n\tdefault void build(); // Optional build phase which is executed by frameworks that supports pre-building projects (pre-compile) which allows special optimizations such as camel-quarkus.\n\tdefault void close(); // Delegates to stop() so it can be used in try-with-resources expression.\n\tdefault void init(); // Initialize the service\n\tvoid start(); // Starts the service\n\tvoid stop(); // Stops the service\n}"}
{"index": 2592, "repo": "exoplayer-r2.3.1", "des": "Extractor to extract samples from a WAV byte stream.", "code": "Class WavExtractor {\n\tlong getDurationUs(); // Returns the duration of the stream in microseconds.\n\tlong getPosition(long timeUs); // Maps a seek position in microseconds to a corresponding position (byte offset) in the stream from which data can be provided to the extractor.\n\tvoid init(ExtractorOutput output); // Initializes the extractor with an ExtractorOutput.\n\tboolean isSeekable(); // Returns whether seeking is supported.\n\tint read(ExtractorInput input, PositionHolder seekPosition); // Extracts data read from a provided ExtractorInput.\n\tvoid release(); // Releases all kept resources.\n\tvoid seek(long position, long timeUs); // Notifies the extractor that a seek has occurred.\n\tboolean sniff(ExtractorInput input); // Returns whether this extractor can extract samples from the ExtractorInput, which must provide data from the start of the stream.\n}"}
{"index": 11481, "repo": "spring-restdocs-core-3.0.0", "des": "Representation of a link used in a Hypermedia-based API.", "code": "public class Link extends Object {\n\tboolean equals(Object obj);\n\tString getHref(); // Returns the link's href.\n\tString getRel(); // Returns the link's rel.\n\tString getTitle(); // Returns the link's title, or null if it does not have a title.\n}"}
{"index": 8931, "repo": "hbase-server-3.0.0-alpha-4", "des": "A flush policy determines the stores that need to be flushed when flushing a region.", "code": "Class FlushPolicy {\n\tprotected void configureForRegion(HRegion region); // Upon construction, this method will be called with the region to be governed.\n\tabstract Collection<HStore> selectStoresToFlush(); // Returns the stores need to be flushed.\n}"}
{"index": 17335, "repo": "groovy-4.0.13", "des": "Additional Java 16 based functions will be added here as needed.", "code": "public class Java16 extends Java10 {\n\tObject getInvokeSpecialHandle(Method method, Object receiver); // Returns a handle with bound receiver to invokeSpecial the given method.\n\tint getVersion(); // Gives the version the plugin is made for\n\tObject invokeHandle(Object handle, Object[] args); // Invokes a handle produced by #getInvokeSpecialdHandle\n\tprotected void makeRecordComponents(CompileUnit cu, ClassNode classNode, Class<?> clazz);\n\tprotected MethodHandles.Lookup newLookup(Class<?> declaringClass);\n}"}
{"index": 7887, "repo": "nifi-framework-core-api-1.22.0", "des": "A component that is responsible for tracking which components reference each Parameter.", "code": "Interface ParameterReferenceManager {\n\tSet<ControllerServiceNode> getControllerServicesReferencing(ParameterContext parameterContext, String parameterName); // Returns the set of all ControllerServices in the flow that reference the parameter with the given name\n\tSet<ProcessGroup> getProcessGroupsBound(ParameterContext parameterContext); // Returns the set of all Process Groups that are bound to the given Parameter Context\n\tSet<ProcessorNode> getProcessorsReferencing(ParameterContext parameterContext, String parameterName); // Returns the set of all Processors in the flow that reference the parameter with the given name\n\tList<ParameterReferencedControllerServiceData> getReferencedControllerServiceData(ParameterContext parameterContext, String parameterName); // Collects controller service reference data for a given parameter.\n}"}
{"index": 8180, "repo": "spring-ws-3.0.10.RELEASE", "des": "Helper class for for loading default implementations of an interface.", "code": "Class DefaultStrategiesHelper {\n\t<T> List<T> getDefaultStrategies(Class<T> strategyInterface); // Create a list of strategy objects for the given strategy interface.\n\t<T> List<T> getDefaultStrategies(Class<T> strategyInterface, org.springframework.context.ApplicationContext applicationContext); // Create a list of strategy objects for the given strategy interface.\n\t<T> T getDefaultStrategy(Class<T> strategyInterface); // Return the default strategy object for the given strategy interface.\n\t<T> T getDefaultStrategy(Class<T> strategyInterface, org.springframework.context.ApplicationContext applicationContext); // Return the default strategy object for the given strategy interface.\n}"}
{"index": 4013, "repo": "zookeeper-3.8.2", "des": "A local zookeeper server MBean interface.", "code": "Interface LocalPeerMXBean {\n\tString getClientAddress();\n\tlong getConfigVersion();\n\tString getElectionAddress();\n\tint getElectionType();\n\tint getInitLimit();\n\tString getLearnerType();\n\tint getMaxClientCnxnsPerHost(); // Current maxClientCnxns allowed from a particular host\n\tint getMaxCnxns();\n\tint getMaxSessionTimeout();\n\tint getMinSessionTimeout();\n\tString getQuorumAddress();\n\tString getQuorumSystemInfo();\n\tString getState();\n\tint getSyncLimit();\n\tint getTick();\n\tint getTickTime();\n\tboolean isLeader();\n\tboolean isPartOfEnsemble();\n\tvoid setInitLimit(int initLimit); // Set the number of ticks that the initial sync phase can take\n\tvoid setSyncLimit(int syncLimit); // Set the number of ticks that can pass between sending a request and getting a acknowledgment\n}"}
{"index": 12676, "repo": "spring-data-mongodb-4.1.2", "des": "Custom ParameterAccessor that uses a MongoWriter to serialize parameters into Mongo format.", "code": "public class ConvertingParameterAccessor extends Object implements MongoParameterAccessor {\n\tClass<?> findDynamicProjection();\n\tObject getBindableValue(int index);\n\tCollation getCollation(); // Returns the Collation to be used for the query.\n\tRange<Distance> getDistanceRange(); // Returns a Distance to be applied to Mongo geo queries.\n\tTextCriteria getFullText(); // Returns the TextCriteria to be used for full text query.\n\tPoint getGeoNearLocation(); // Returns the Point to use for a geo-near query.\n\tPageable getPageable();\n\tScrollPosition getScrollPosition();\n\tSort getSort();\n\tUpdateDefinition getUpdate(); // Returns the Update to be used for an update execution.\n\tObject[] getValues(); // Returns the raw parameter values of the underlying query method.\n\tboolean hasBindableNullValue();\n\tConvertingParameterAccessor.PotentiallyConvertingIterator iterator();\n}"}
{"index": 3702, "repo": "kafka-streams-3.5.0", "des": "Kafka Streams states are the possible state that a Kafka Streams instance can be in.", "code": "Enum KafkaStreams.State {\n\tboolean hasCompletedShutdown();\n\tboolean hasNotStarted();\n\tboolean hasStartedOrFinishedShuttingDown();\n\tboolean isRunningOrRebalancing();\n\tboolean isShuttingDown();\n\tboolean isValidTransition(KafkaStreams.State newState);\n\tstatic KafkaStreams.State valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic KafkaStreams.State[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13953, "repo": "spring-webflux-6.0.11", "des": "Handles return values of type HttpEntity, ResponseEntity, HttpHeaders, ErrorResponse, and ProblemDetail.", "code": "public class ResponseEntityResultHandler extends AbstractMessageWriterResultHandler implements HandlerResultHandler {\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result); // Process the given result modifying response headers and/or writing data to the response.\n\tboolean supports(HandlerResult result); // Whether this handler supports the given HandlerResult.\n}"}
{"index": 17514, "repo": "pulsar-broker-3.0.0", "des": "Load management component which determines the criteria for unloading bundles.", "code": "public interface LoadSheddingStrategy {\n\tcom.google.common.collect.Multimap<String,String> findBundlesForUnloading(LoadData loadData, ServiceConfiguration conf); // Recommend that all of the returned bundles be unloaded.\n\tdefault void onActiveBrokersChange(Set<String> activeBrokers); // Triggered when active broker changes.\n}"}
{"index": 6716, "repo": "lucene-analyzers-common-8.11.2", "des": "Factory for SnowballFilter, with configurable language Note: Use of the \"Lovins\" stemmer is not recommended, as it is implemented with reflection.", "code": "Class SnowballPorterFilterFactory {\n\tTokenFilter create(TokenStream input); // Transform the specified input TokenStream\n\tvoid inform(ResourceLoader loader); // Initializes this component with the provided ResourceLoader (used for loading classes, files, etc).\n}"}
{"index": 17461, "repo": "spring-security-config-6.1.2", "des": "An AbstractHttpConfigurer for SAML 2.0 Login, which leverages the SAML 2.0 Web Browser Single Sign On (WebSSO) Flow.", "code": "public final class Saml2LoginConfigurer<B extends HttpSecurityBuilder<B>> extends AbstractAuthenticationFilterConfigurer<B,Saml2LoginConfigurer<B>,org.springframework.security.saml2.provider.service.web.authentication.Saml2WebSsoAuthenticationFilter> {\n\tSaml2LoginConfigurer<B> authenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter); // Use this AuthenticationConverter when converting incoming requests to an Authentication.\n\tSaml2LoginConfigurer<B> authenticationManager(org.springframework.security.authentication.AuthenticationManager authenticationManager); // Allows a configuration of a AuthenticationManager to be used during SAML 2 authentication.\n\tSaml2LoginConfigurer<B> authenticationRequestResolver(org.springframework.security.saml2.provider.service.web.authentication.Saml2AuthenticationRequestResolver authenticationRequestResolver); // Use this Saml2AuthenticationRequestResolver for generating SAML 2.0 Authentication Requests.\n\tSaml2LoginConfigurer<B> authenticationRequestUri(String authenticationRequestUri); // Customize the URL that the SAML Authentication Request will be sent to.\n\tvoid configure(B http); // Configure the SecurityBuilder by setting the necessary properties on the SecurityBuilder.\n\tprotected org.springframework.security.web.util.matcher.RequestMatcher createLoginProcessingUrlMatcher(String loginProcessingUrl); // Create the RequestMatcher given a loginProcessingUrl\n\tvoid init(B http); // Initialize the SecurityBuilder.\n\tSaml2LoginConfigurer<B> loginPage(String loginPage); // Specifies the URL to send users to if login is required.\n\tSaml2LoginConfigurer<B> loginProcessingUrl(String loginProcessingUrl); // Specifies the URL to validate the credentials.\n\tSaml2LoginConfigurer<B> relyingPartyRegistrationRepository(org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository repo); // Sets the RelyingPartyRegistrationRepository of relying parties, each party representing a service provider, SP and this host, and identity provider, IDP pair that communicate with each other.\n}"}
{"index": 17202, "repo": "spring-integration-amqp-6.1.2", "des": "A MessageChannelSpec for a AbstractAmqpChannels.", "code": "public class AmqpPollableMessageChannelSpec<S extends AmqpPollableMessageChannelSpec<S,T>,T extends AbstractAmqpChannel> extends org.springframework.integration.dsl.MessageChannelSpec<S,T> {\n\tS amqpMessageConverter(org.springframework.amqp.support.converter.MessageConverter messageConverter);\n\tS channelTransacted(boolean channelTransacted); // Configure channelTransacted on both the RabbitTemplate (for sends) and SimpleMessageListenerContainer (for receives) when using Spring Integration 4.0.\n\tS defaultDeliveryMode(org.springframework.amqp.core.MessageDeliveryMode mode); // Configure the delivery mode for messages that don't have an AmqpHeaders.DELIVERY_MODE header.\n\tprotected T doGet();\n\tS encoding(String encoding);\n\tS extractPayload(boolean extract); // Configure whether normal spring-messaging to AMQP message mapping is enabled.\n\tS headersMappedLast(boolean headersLast);\n\tprotected S id(String id);\n\tS inboundHeaderMapper(AmqpHeaderMapper mapper); // Configure the inbound header mapper to use when extractPayload(boolean) is true.\n\tS messagePropertiesConverter(org.springframework.amqp.rabbit.support.MessagePropertiesConverter messagePropertiesConverter); // Configure messagePropertiesConverter on both the RabbitTemplate (for sends) and SimpleMessageListenerContainer (for receives).\n\tS outboundHeaderMapper(AmqpHeaderMapper mapper); // Configure the outbound header mapper to use when extractPayload(boolean) is true.\n\tS queueName(String queueName); // Also implicitly sets the id(String) (if not explicitly set).\n\tS templateChannelTransacted(boolean channelTransacted); // Configure channelTransacted on the RabbitTemplate used when sending messages to the channel.\n}"}
{"index": 13227, "repo": "spring-test-6.0.11", "des": "Main entry point for client-side REST testing.", "code": "public final class MockRestServiceServer extends Object {\n\tstatic MockRestServiceServer.MockRestServiceServerBuilder bindTo(org.springframework.web.client.RestTemplate restTemplate); // Return a builder for a MockRestServiceServer that should be used to reply to the given RestTemplate.\n\tstatic MockRestServiceServer.MockRestServiceServerBuilder bindTo(org.springframework.web.client.support.RestGatewaySupport restGatewaySupport); // Return a builder for a MockRestServiceServer that should be used to reply to the given RestGatewaySupport.\n\tstatic MockRestServiceServer createServer(org.springframework.web.client.RestTemplate restTemplate); // A shortcut for bindTo(restTemplate).build().\n\tstatic MockRestServiceServer createServer(org.springframework.web.client.support.RestGatewaySupport restGateway); // A shortcut for bindTo(restGateway).build().\n\tResponseActions expect(ExpectedCount count, RequestMatcher matcher); // An alternative to expect(RequestMatcher) that also indicates how many times the request is expected to be executed.\n\tResponseActions expect(RequestMatcher matcher); // Set up an expectation for a single HTTP request.\n\tvoid reset(); // Reset the internal state removing all expectations and recorded requests.\n\tvoid verify(); // Verify that all expected requests set up via expect(RequestMatcher) were indeed performed.\n\tvoid verify(Duration timeout); // Variant of verify() that waits for up to the specified time for all expectations to be fulfilled.\n}"}
{"index": 4492, "repo": "beam-sdks-java-core-2.49.0", "des": "Pipeline authors can use resource hints to provide additional information to runners about the desired aspects of the execution environment.", "code": "Class ResourceHints {\n\tstatic ResourceHints create(); // Creates a ResourceHints instance with no hints.\n\tboolean equals(@Nullable java.lang.Object other);\n\tstatic ResourceHints fromOptions(PipelineOptions options); // Creates a ResourceHints instance with hints supplied in options.\n\tjava.util.Map<java.lang.String,ResourceHint> hints();\n\tResourceHints mergeWithOuter(ResourceHints outer);\n\tResourceHints withAccelerator(java.lang.String accelerator); // Declares hardware accelerators that are desired to have in the execution environment.\n\tResourceHints withHint(java.lang.String urn, ResourceHint hint); // Declares a custom resource hint that has a specified URN.\n\tResourceHints withMinRam(long ramBytes); // Sets desired minimal available RAM size to have in transform's execution environment.\n\tResourceHints withMinRam(java.lang.String ramBytes); // Sets desired minimal available RAM size to have in transform's execution environment.\n}"}
{"index": 1231, "repo": "ignite-core-2.15.0", "des": "Message telling nodes that new node should be added to topology.", "code": "Class TcpDiscoveryNodeAddedMessage {\n\tvoid clearDiscoveryData(); // Clears discovery data to minimize message size.\n\tvoid clearUnmarshalledDiscoveryData(); // Clears unmarshalled discovery data to minimize message size.\n\tCollection<TcpDiscoveryNode> clientTopology();\n\tvoid clientTopology(Collection<TcpDiscoveryNode> top);\n\t@Nullable IgniteUuid discardedCustomMessageId(); // Gets discarded custom message ID.\n\t@Nullable IgniteUuid discardedMessageId(); // Gets discarded message ID.\n\tDiscoveryDataPacket gridDiscoveryData();\n\tlong gridStartTime();\n\t@Nullable Collection<TcpDiscoveryAbstractMessage> messages(); // Gets pending messages sent to new node by its previous.\n\tvoid messages(@Nullable Collection<TcpDiscoveryAbstractMessage> msgs, @Nullable IgniteUuid discardMsgId, @Nullable IgniteUuid discardCustomMsgId); // Sets pending messages to send to new node.\n\tTcpDiscoveryNode node(); // Gets newly added node.\n\t@Nullable Collection<TcpDiscoveryNode> topology(); // Gets topology.\n\tvoid topology(@Nullable Collection<TcpDiscoveryNode> top); // Sets topology.\n\tMap<Long,Collection<ClusterNode>> topologyHistory(); // Gets topology snapshots history.\n\tvoid topologyHistory(@Nullable Map<Long,Collection<ClusterNode>> topHist); // Sets topology snapshots history.\n}"}
{"index": 4509, "repo": "beam-sdks-java-core-2.49.0", "des": "A schema represented as a serialized proto bytes.", "code": "Class SchemaLogicalType {\n\t@Nullable Schema.FieldType getArgumentType(); // A schema type representing how to interpret the argument.\n\tSchema.FieldType getBaseType(); // The base Schema.FieldType used to store values of this type.\n\tjava.lang.String getIdentifier(); // The unique identifier for this type.\n\tbyte[] toBaseType(Schema input); // Convert the input type to the type Java type used by the base Schema.FieldType.\n\tSchema toInputType(byte[] base); // Convert the Java type used by the base Schema.FieldType to the input type.\n}"}
{"index": 17400, "repo": "groovy-4.0.13", "des": "Some semantic predicates for altering the behaviour of the lexer and parser", "code": "public class SemanticPredicates extends Object {\n\tstatic boolean isFollowedBy(org.antlr.v4.runtime.CharStream cs, char... chars);\n\tstatic boolean isFollowedByJavaLetterInGString(org.antlr.v4.runtime.CharStream cs);\n\tstatic boolean isFollowedByWhiteSpaces(org.antlr.v4.runtime.CharStream cs);\n\tstatic boolean isFollowingArgumentsOrClosure(GroovyParser.ExpressionContext context); // Check whether following a method name of command expression.\n\tstatic boolean isInvalidLocalVariableDeclaration(org.antlr.v4.runtime.TokenStream ts); // Distinguish between local variable declaration and method call, e.g.\n\tstatic boolean isInvalidMethodDeclaration(org.antlr.v4.runtime.TokenStream ts); // Distinguish between method declaration and method call/constructor declaration\n}"}
{"index": 4154, "repo": "camel-core-3.0.0-RC1", "des": "Represents a Transformer which declaratively transforms message content according to the input type declared by InputTypeDefinition and/or output type declared by OutputTypeDefinition.", "code": "Class TransformerDefinition {\n\tString getFromType();\n\tString getScheme();\n\tString getToType();\n\tvoid setFromType(Class<?> clazz); // Set the 'from' data type using Java class.\n\tvoid setFromType(String from); // Set the 'from' data type name.\n\tvoid setScheme(String scheme); // Set a scheme name supported by the transformer.\n\tvoid setToType(Class<?> clazz); // Set the 'to' data type using Java class.\n\tvoid setToType(String to); // Set the 'to' data type name.\n}"}
{"index": 15399, "repo": "spring-security-crypto-6.1.2", "des": "BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in \"A Future-Adaptable Password Scheme\" by Niels Provos and David Mazieres.", "code": "public class BCrypt extends Object {\n\tstatic boolean checkpw(byte[] passwordb, String hashed); // Check that a password (as a byte array) matches a previously hashed one\n\tstatic boolean checkpw(String plaintext, String hashed); // Check that a plaintext password matches a previously hashed one\n\tstatic String gensalt(); // Generate a salt for use with the BCrypt.hashpw() method, selecting a reasonable default for the number of hashing rounds to apply\n\tstatic String gensalt(int log_rounds); // Generate a salt for use with the BCrypt.hashpw() method\n\tstatic String gensalt(int log_rounds, SecureRandom random); // Generate a salt for use with the BCrypt.hashpw() method\n\tstatic String gensalt(String prefix);\n\tstatic String gensalt(String prefix, int log_rounds); // Generate a salt for use with the BCrypt.hashpw() method\n\tstatic String gensalt(String prefix, int log_rounds, SecureRandom random); // Generate a salt for use with the BCrypt.hashpw() method\n\tstatic String hashpw(byte[] passwordb, String salt); // Hash a password using the OpenBSD bcrypt scheme\n\tstatic String hashpw(String password, String salt); // Hash a password using the OpenBSD bcrypt scheme\n}"}
{"index": 15630, "repo": "spring-security-core-6.1.2", "des": "A MethodInterceptor which filters a reactive method argument by evaluating an expression from the PreFilter annotation.", "code": "public final class PreFilterAuthorizationReactiveMethodInterceptor extends Object implements org.springframework.core.Ordered, org.aopalliance.intercept.MethodInterceptor, org.springframework.aop.PointcutAdvisor, org.springframework.aop.framework.AopInfrastructureBean {\n\torg.aopalliance.aop.Advice getAdvice();\n\tint getOrder();\n\torg.springframework.aop.Pointcut getPointcut();\n\tObject invoke(org.aopalliance.intercept.MethodInvocation mi); // Filters a reactive method argument by evaluating an expression from the PreFilter annotation.\n\tboolean isPerInstance();\n\tvoid setOrder(int order);\n\tvoid setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer); // Sets the ParameterNameDiscoverer.\n}"}
{"index": 3062, "repo": "tink-1.10.0", "des": "Represents a Parameters object serialized with binary protobuf Serialization.", "code": "Class ProtoParametersSerialization {\n\tstatic ProtoParametersSerialization checkedCreate(KeyTemplate keyTemplate); // Creates a new ProtoParametersSerialization object.\n\tstatic ProtoParametersSerialization create(KeyTemplate keyTemplate); // Creates a new ProtoParametersSerialization object.\n\tstatic ProtoParametersSerialization create(String typeUrl, OutputPrefixType outputPrefixType, com.google.protobuf.MessageLite value); // Creates a new ProtoParametersSerialization object from the individual parts.\n\tKeyTemplate getKeyTemplate(); // The contents of the field value in the message com.google.crypto.tink.proto.KeyData.\n\tBytes getObjectIdentifier(); // The typeUrl.\n}"}
{"index": 2644, "repo": "mahout-core-14.1", "des": "Open hash map from char keys to int values.", "code": "Class OpenCharIntHashMap {\n\tint adjustOrPutValue(char key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(char key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(CharProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(CharIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(char key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(char key);\n\tprotected int indexOfKey(char key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenCharIntHashMap.MapElement> iterator();\n\tvoid keys(CharArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(CharIntProcedure condition, CharArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(char key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(char key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 18199, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "More-or-less a parameter-object intended for use in determining the SQL/JDBC type recommended by the JDBC spec (explicitly or implicitly) for a given Java type.", "code": "Interface JdbcRecommendedSqlTypeMappingContext {\n\tdefault EnumType getEnumeratedType(); // For enum mappings, what style of storage was requested (name vs.\n\tdefault int getPreferredSqlTypeCodeForBoolean(); // When mapping a boolean type to the database what is the preferred SQL type code to use?\n\tTypeConfiguration getTypeConfiguration(); // Provides access to the TypeConfiguration for access to various type-system registries.\n\tdefault boolean isLob(); // Was LOB datatype requested for the given Java type?\n\tdefault boolean isNationalized(); // Was nationalized character datatype requested for the given Java type?\n}"}
{"index": 889, "repo": "ignite-core-2.15.0", "des": "Convenient closure subclass that allows for thrown grid exception.", "code": "Class IgniteClosureX<E,R> {\n\tR apply(E e); // Closure body.\n\tabstract R applyx(E e); // Closure body that can throw IgniteCheckedException.\n}"}
{"index": 16464, "repo": "spring-batch-infrastructure-5.0.2", "des": "SAP HANA implementation of a PagingQueryProvider using database specific features.", "code": "public class HanaPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\tString generateFirstPageQuery(int pageSize); // Method generating the query string to be used for retrieving the first page.\n\tString generateRemainingPagesQuery(int pageSize); // Method generating the query string to be used for retrieving the pages following the first page.\n}"}
{"index": 14003, "repo": "spring-retry-2.0.2", "des": "Wrapper for an object to adapt it to the Classifier interface.", "code": "public class ClassifierAdapter<C,T> extends Object implements Classifier<C,T> {\n\tT classify(C classifiable); // Classify the given object and return an object of a different type, possibly an enumerated type.\n\tfinal void setDelegate(Object delegate); // Search for the Classifier annotation on a method in the supplied delegate and use that to create a Classifier from the parameter type to the return type.\n\tvoid setDelegate(Classifier<C,T> delegate);\n}"}
{"index": 13767, "repo": "spring-webmvc-6.0.11", "des": "Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.", "code": "public class RenderingContext extends Object {\n\torg.springframework.context.ApplicationContext getApplicationContext(); // Return the application context.\n\tLocale getLocale(); // Return the locale of the rendered template.\n\tFunction<String,String> getTemplateLoader(); // Return a function that takes a template path as input and returns the template content as a String.\n\tString getUrl(); // Return the URL of the rendered template.\n}"}
{"index": 10552, "repo": "groovy-all-4.0.13", "des": "Utility class used as delegate of closures representing JSON objects.", "code": "public class JsonDelegate extends GroovyObjectSupport {\n\tstatic Map<String,Object> cloneDelegateAndGetContent(Closure<?> c); // Factory method for creating JsonDelegates from closures.\n\tstatic Map<String,Object> curryDelegateAndGetContent(Closure<?> c, Object o); // Factory method for creating JsonDelegates from closures currying an object argument.\n\tMap<String,Object> getContent();\n\tObject invokeMethod(String name, Object args); // Intercepts calls for setting a key and value for a JSON object\n}"}
{"index": 10220, "repo": "spring-core-6.0.11", "des": "The types of restructuring that can be performed.", "code": "protected static enum ConcurrentReferenceHashMap.Restructure extends Enum<ConcurrentReferenceHashMap.Restructure> {\n\tstatic ConcurrentReferenceHashMap.Restructure valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ConcurrentReferenceHashMap.Restructure[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 2795, "repo": "tika-parsers-1.28.5", "des": "A frame of ID3v2 data, which is then passed to a handler to be turned into useful data.", "code": "Class ID3v2Frame {\n\tstatic MP3Frame createFrameIfPresent(InputStream inp); // Returns the next ID3v2 Frame in the file, or null if the next batch of data doesn't correspond to either an ID3v2 header.\n\tprotected static int get7BitsInt(byte[] data, int offset); // AKA a Synchsafe integer.\n\tprotected static ID3Tags.ID3Comment getComment(byte[] data, int offset, int length); // Builds up the ID3 comment, by parsing and extracting the comment string parts from the given data.\n\tbyte[] getData();\n\tbyte[] getExtendedHeader();\n\tint getFlags();\n\tprotected static int getInt(byte[] data);\n\tprotected static int getInt(byte[] data, int offset);\n\tprotected static int getInt2(byte[] data, int offset);\n\tprotected static int getInt3(byte[] data, int offset);\n\tint getLength();\n\tint getMajorVersion();\n\tint getMinorVersion();\n\tprotected static String getString(byte[] data, int offset, int length); // Returns the String at the given offset and length.\n\tprotected static String getTagString(byte[] data, int offset, int length); // Returns the (possibly null padded) String at the given offset and length.\n\tprotected static byte[] readFully(InputStream inp, int length);\n\tprotected static byte[] readFully(InputStream inp, int length, boolean shortDataIsFatal);\n}"}
{"index": 10262, "repo": "spring-core-6.0.11", "des": "All enhanced instances returned by the Enhancer class implement this interface.", "code": "public interface Factory {\n\tCallback getCallback(int index); // Return the Callback implementation at the specified index.\n\tCallback[] getCallbacks(); // Get the current set of callbacks for ths object.\n\tObject newInstance(Class[] types, Object[] args, Callback[] callbacks); // Creates a new instance of the same type, using the constructor matching the given signature.\n\tObject newInstance(Callback callback); // Creates new instance of the same type, using the no-arg constructor.\n\tObject newInstance(Callback[] callbacks); // Creates new instance of the same type, using the no-arg constructor.\n\tvoid setCallback(int index, Callback callback); // Set the callback for this object for the given type.\n\tvoid setCallbacks(Callback[] callbacks); // Replace all of the callbacks for this object at once.\n}"}
{"index": 11636, "repo": "spring-websocket-6.0.11", "des": "A SockJS session for use with polling HTTP transports.", "code": "public class PollingSockJsSession extends AbstractHttpSockJsSession {\n\tprotected void flushCache(); // Called when the connection is active and ready to write to the response.\n\tprotected void handleRequestInternal(org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response, boolean initialRequest); // Invoked when a SockJS transport request is received.\n\tprotected void writeFrame(SockJsFrame frame); // For internal use within a TransportHandler and the (TransportHandler-specific) session class.\n}"}
{"index": 4459, "repo": "beam-sdks-java-core-2.49.0", "des": "Implementation which is able to adapt an iterable materialization to a Iterable<T>.", "code": "Class PCollectionViews.IterableViewFn2<T> {\n\tjava.lang.Iterable<T> apply(Materializations.IterableView<T> primitiveViewT); // A function to adapt a primitive view type to a desired view type.\n\tMaterialization<Materializations.IterableView<T>> getMaterialization(); // Gets the materialization of this ViewFn.\n\tTypeDescriptor<java.lang.Iterable<T>> getTypeDescriptor(); // Return the TypeDescriptor describing the output of this fn.\n}"}
{"index": 9269, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "This class provides functionality of checking the health of a node and reporting back to the service for which the health checker has been asked to report.", "code": "Class NodeHealthCheckerService {\n\tLocalDirsHandlerService getDiskHandler();\n\tString getHealthReport(); // Joining the health reports of the dependent services.\n\tlong getLastHealthReportTime(); // Returns time stamp when node health check was last run.\n\tboolean isHealthy(); // Gets whether the node is healthy or not.\n\tvoid reportException(Exception exception); // Propagating an exception to ExceptionReporter.\n\tprotected void serviceInit(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 9881, "repo": "commons-math3-3.6.1", "des": "An implementation of the Wilcoxon signed-rank test.", "code": "Class WilcoxonSignedRankTest {\n\tdouble wilcoxonSignedRank(double[] x, double[] y); // Computes the Wilcoxon signed ranked statistic comparing mean for two related samples or repeated measurements on a single sample.\n\tdouble wilcoxonSignedRankTest(double[] x, double[] y, boolean exactPValue); // Returns the observed significance level, or p-value, associated with a Wilcoxon signed ranked statistic comparing mean for two related samples or repeated measurements on a single sample.\n}"}
{"index": 16607, "repo": "spring-beans-6.0.11", "des": "Exception thrown when the BeanFactory cannot load the specified class of a given bean.", "code": "public class CannotLoadBeanClassException extends FatalBeanException {\n\tString getBeanClassName(); // Return the name of the class we were trying to load.\n\tString getBeanName(); // Return the name of the bean requested.\n\tString getResourceDescription(); // Return the description of the resource that the bean definition came from.\n}"}
{"index": 10622, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @RecordType annotation.", "code": "public class RecordTypeASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\tString getAnnotationName(); // If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tprotected GroovyClassLoader getTransformLoader();\n\tstatic boolean recordNative(ClassNode node); // Indicates that the given classnode is a native JVM record class.\n\tvoid setCompilationUnit(CompilationUnit unit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 10840, "repo": "spring-boot-actuator-3.1.1", "des": "A MappingDescriptionProvider that describes that mappings of any Servlets registered with a ServletContext.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.ServletsMappingDescriptionProvider.ServletsMappingDescriptionProviderRuntimeHints.class) public class ServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider {\n\tList<ServletRegistrationMappingDescription> describeMappings(org.springframework.context.ApplicationContext context); // Produce the descriptions of the mappings identified by this provider in the given context.\n\tString getMappingName(); // Returns the name of the mappings described by this provider.\n}"}
{"index": 13279, "repo": "spring-test-6.0.11", "des": "Spec for expectations on the response body content.", "code": "public static interface WebTestClient.BodyContentSpec {\n\tWebTestClient.BodyContentSpec consumeWith(Consumer<EntityExchangeResult<byte[]>> consumer); // Assert the response body content with the given Consumer.\n\tEntityExchangeResult<Void> isEmpty(); // Assert the response body is empty and return the exchange result.\n\tdefault WebTestClient.BodyContentSpec json(String expectedJson); // Parse the expected and actual response content as JSON and perform a comparison verifying that they contain the same attribute-value pairs regardless of formatting with lenient checking (extensible and non-strict array ordering).\n\tWebTestClient.BodyContentSpec json(String expectedJson, boolean strict); // Parse the expected and actual response content as JSON and perform a comparison verifying that they contain the same attribute-value pairs regardless of formatting.\n\tJsonPathAssertions jsonPath(String expression, Object... args); // Access to response body assertions using a JsonPath expression to inspect a specific subset of the body.\n\tEntityExchangeResult<byte[]> returnResult(); // Exit the chained API and return an ExchangeResult with the raw response content.\n\tWebTestClient.BodyContentSpec xml(String expectedXml); // Parse expected and actual response content as XML and assert that the two are \"similar\", i.e.\n\tdefault XpathAssertions xpath(String expression, Object... args); // Access to response body assertions using an XPath expression to inspect a specific subset of the body.\n\tXpathAssertions xpath(String expression, Map<String,String> namespaces, Object... args); // Access to response body assertions with specific namespaces using an XPath expression to inspect a specific subset of the body.\n}"}
{"index": 13821, "repo": "spring-webmvc-6.0.11", "des": "Assist with configuring a UrlBasedViewResolver.", "code": "public class UrlBasedViewResolverRegistration extends Object {\n\tUrlBasedViewResolverRegistration attributes(Map<String,?> attributes); // Set static attributes to be added to the model of every request for all views resolved by this view resolver.\n\tUrlBasedViewResolverRegistration cache(boolean cache); // Enable or disable caching.\n\tUrlBasedViewResolverRegistration cacheLimit(int cacheLimit); // Specify the maximum number of entries for the view cache.\n\tprotected UrlBasedViewResolver getViewResolver();\n\tUrlBasedViewResolverRegistration prefix(String prefix); // Set the prefix that gets prepended to view names when building a URL.\n\tUrlBasedViewResolverRegistration suffix(String suffix); // Set the suffix that gets appended to view names when building a URL.\n\tUrlBasedViewResolverRegistration viewClass(Class<?> viewClass); // Set the view class that should be used to create views.\n\tUrlBasedViewResolverRegistration viewNames(String... viewNames); // Set the view names (or name patterns) that can be handled by this view resolver.\n}"}
{"index": 16449, "repo": "spring-batch-infrastructure-5.0.2", "des": "An abstract LineAggregator implementation that utilizes a FieldExtractor to convert the incoming object to an array of its parts.", "code": "public abstract class ExtractorLineAggregator<T> extends Object implements LineAggregator<T> {\n\tString aggregate(T item); // Extract fields from the given item using the FieldExtractor and then aggregate them.\n\tprotected abstract String doAggregate(Object[] fields); // Aggregate provided fields into single String.\n\tvoid setFieldExtractor(FieldExtractor<T> fieldExtractor); // Public setter for the field extractor responsible for splitting an input object up into an array of objects.\n}"}
{"index": 3596, "repo": "hive-serde-4.0.0-alpha-2", "des": "A JavaByteObjectInspector inspects a Java Byte Object.", "code": "Class JavaByteObjectInspector {\n\tObject create(byte value); // Create an object with the value.\n\tbyte get(Object o); // Get the byte data.\n\tObject getPrimitiveWritableObject(Object o); // Return the data in an instance of primitive writable Object.\n\tObject set(Object o, byte value); // Set the object with the value.\n}"}
{"index": 11673, "repo": "spring-websocket-6.0.11", "des": "A central class for aggregating information about internal state and counters from key infrastructure components of the setup that comes with @EnableWebSocketMessageBroker for Java config and <websocket:message-broker> for XML.", "code": "public class WebSocketMessageBrokerStats extends Object {\n\tString getClientInboundExecutorStatsInfo(); // Get stats about the executor processing incoming messages from WebSocket clients.\n\tString getClientOutboundExecutorStatsInfo(); // Get stats about the executor processing outgoing messages to WebSocket clients.\n\tlong getLoggingPeriod(); // Return the configured logging period frequency in milliseconds.\n\tString getSockJsTaskSchedulerStatsInfo(); // Get stats about the SockJS task scheduler.\n\tString getStompBrokerRelayStatsInfo(); // Get stats about STOMP broker relay (when using a full-featured STOMP broker).\n\tString getStompSubProtocolStatsInfo(); // Get stats about STOMP-related WebSocket message processing.\n\tString getWebSocketSessionStatsInfo(); // Get stats about WebSocket sessions.\n\tvoid setInboundChannelExecutor(org.springframework.core.task.TaskExecutor inboundChannelExecutor);\n\tvoid setLoggingPeriod(long period); // Set the frequency for logging information at INFO level in milliseconds.\n\tvoid setOutboundChannelExecutor(org.springframework.core.task.TaskExecutor outboundChannelExecutor);\n\tvoid setSockJsTaskScheduler(org.springframework.scheduling.TaskScheduler sockJsTaskScheduler);\n\tvoid setStompBrokerRelay(org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler stompBrokerRelay);\n\tvoid setSubProtocolWebSocketHandler(SubProtocolWebSocketHandler webSocketHandler);\n}"}
{"index": 5507, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "Returned by the list method of MailboxRepository and others.", "code": "Interface MailboxMetaData {\n\tchar getHierarchyDelimiter(); // Return the delimiter\n\tMailboxId getId();\n\tMailboxPath getPath(); // Return the MailboxPath\n\tMailboxMetaData.Selectability getSelectability(); // Gets the RFC3501 Selectability flag.\n\tMailboxMetaData.Children inferiors(); // Gets the inferiors status of this mailbox.\n}"}
{"index": 16860, "repo": "spring-amqp-3.0.6", "des": "The 0-8 and 0-9-1 AMQP specifications do not define an Message class or interface.", "code": "public class Message extends Object implements Serializable {\n\tboolean equals(Object obj);\n\tbyte[] getBody();\n\tMessageProperties getMessageProperties();\n\tstatic void setDefaultEncoding(String encoding); // Set the encoding to use in toString() when converting the body if there is no contentEncoding message property present.\n\tstatic void setMaxBodyLength(int length); // Set the maximum length of a test message body to render as a String in toString().\n}"}
{"index": 5564, "repo": "org.apache.karaf.main-2.4.4", "des": "A certificate verifier is used to verify the authenticity of a signed repository.", "code": "Interface CertificateVerifier {\n\tvoid checkContent(); // Verify the content of the repository.\n\tCertificateChain[] getChains(); // Returns all certificate chains of the repository.\n\tboolean isSigned(); // Returns true if the repository is signed\n\tString[] verifyContent(); // Verifies the content of the repository.\n}"}
{"index": 4743, "repo": "hadoop-common-3.3.4", "des": "Implements a Bloom filter, as defined by Bloom in 1970.", "code": "Class BloomFilter {\n\tvoid add(org.apache.hadoop.util.bloom.Key key); // Adds a key to this filter.\n\tvoid and(org.apache.hadoop.util.bloom.Filter filter); // Peforms a logical AND between this filter and a specified filter.\n\tint getVectorSize();\n\tboolean membershipTest(org.apache.hadoop.util.bloom.Key key); // Determines wether a specified key belongs to this filter.\n\tvoid not(); // Performs a logical NOT on this filter.\n\tvoid or(org.apache.hadoop.util.bloom.Filter filter); // Peforms a logical OR between this filter and a specified filter.\n\tvoid readFields(DataInput in); // Deserialize the fields of this object from in.\n\tvoid write(DataOutput out); // Serialize the fields of this object to out.\n\tvoid xor(org.apache.hadoop.util.bloom.Filter filter); // Peforms a logical XOR between this filter and a specified filter.\n}"}
{"index": 6438, "repo": "exoplayer-core-2.9.6", "des": "Base MediaSource implementation to handle parallel reuse and to keep a list of MediaSourceEventListeners.", "code": "Class BaseMediaSource {\n\tvoid addEventListener(android.os.Handler handler, MediaSourceEventListener eventListener); // Adds a MediaSourceEventListener to the list of listeners which are notified of media source events.\n\tprotected MediaSourceEventListener.EventDispatcher createEventDispatcher(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId, long mediaTimeOffsetMs); // Returns a MediaSourceEventListener.EventDispatcher which dispatches all events to the registered listeners with the specified window index, media period id and time offset.\n\tprotected MediaSourceEventListener.EventDispatcher createEventDispatcher(MediaSource.MediaPeriodId mediaPeriodId); // Returns a MediaSourceEventListener.EventDispatcher which dispatches all events to the registered listeners with the specified media period id.\n\tprotected MediaSourceEventListener.EventDispatcher createEventDispatcher(MediaSource.MediaPeriodId mediaPeriodId, long mediaTimeOffsetMs); // Returns a MediaSourceEventListener.EventDispatcher which dispatches all events to the registered listeners with the specified media period id and time offset.\n\tvoid prepareSource(MediaSource.SourceInfoRefreshListener listener, TransferListener mediaTransferListener); // Starts source preparation if not yet started, and adds a listener for timeline and/or manifest updates.\n\tprotected abstract void prepareSourceInternal(TransferListener mediaTransferListener); // Starts source preparation.\n\tprotected void refreshSourceInfo(Timeline timeline, java.lang.Object manifest); // Updates timeline and manifest and notifies all listeners of the update.\n\tvoid releaseSource(MediaSource.SourceInfoRefreshListener listener); // Removes a listener for timeline and/or manifest updates and releases the source if no longer required.\n\tprotected abstract void releaseSourceInternal(); // Releases the source.\n\tvoid removeEventListener(MediaSourceEventListener eventListener); // Removes a MediaSourceEventListener from the list of listeners which are notified of media source events.\n}"}
{"index": 14472, "repo": "spring-security-web-6.1.2", "des": "A base class for performing session fixation protection.", "code": "public abstract class AbstractSessionFixationProtectionStrategy extends Object implements SessionAuthenticationStrategy, org.springframework.context.ApplicationEventPublisherAware {\n\tvoid onAuthentication(org.springframework.security.core.Authentication authentication, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Called when a user is newly authenticated.\n\tprotected void onSessionChange(String originalSessionId, jakarta.servlet.http.HttpSession newSession, org.springframework.security.core.Authentication auth); // Called when the session has been changed and the old attributes have been migrated to the new session.\n\tvoid setAlwaysCreateSession(boolean alwaysCreateSession);\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher); // Sets the ApplicationEventPublisher to use for submitting SessionFixationProtectionEvent.\n}"}
{"index": 10009, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Extension of AbstractAppmaster which adds a common container services needed for usual application master.", "code": "Class AbstractServicesAppmaster {\n\tContainerAllocator getAllocator(); // Gets a used ContainerAllocator for this class.\n\tContainerLauncher getLauncher(); // Gets a used ContainerLauncher for this class.\n\tContainerMonitor getMonitor(); // Gets a used ContainerMonitor for this class.\n\tvoid setAllocator(ContainerAllocator allocator); // Sets the ContainerAllocator used for this class.\n\tvoid setLauncher(ContainerLauncher launcher); // Sets the ContainerLauncher used for this class.\n\tvoid setMonitor(ContainerMonitor monitor); // Sets the ContainerMonitor used for this class.\n}"}
{"index": 6921, "repo": "calcite-core-1.34.0", "des": "Rule that converts a table-modification to JDBC.", "code": "Class JdbcRules.JdbcTableModificationRule {\n\t@Nullable RelNode convert(RelNode rel); // Converts a relational expression to the target trait(s) of this rule.\n\tstatic JdbcRules.JdbcTableModificationRule create(JdbcConvention out); // Creates a JdbcToEnumerableConverterRule.\n}"}
{"index": 10898, "repo": "spring-data-redis-3.1.2", "des": "Builder for Pooling-related JedisClientConfiguration.", "code": "public static interface JedisClientConfiguration.JedisPoolingClientConfigurationBuilder {\n\tJedisClientConfiguration.JedisClientConfigurationBuilder and(); // Return to JedisClientConfiguration.JedisClientConfigurationBuilder.\n\tJedisClientConfiguration build(); // Build the JedisClientConfiguration with the configuration applied from this builder.\n\tJedisClientConfiguration.JedisPoolingClientConfigurationBuilder poolConfig(org.apache.commons.pool2.impl.GenericObjectPoolConfig poolConfig);\n}"}
{"index": 6454, "repo": "exoplayer-core-2.9.6", "des": "An Extractor wrapper for loading chunks that contain a single primary track, and possibly additional embedded tracks.", "code": "Class ChunkExtractorWrapper {\n\tvoid endTracks(); // Called when all tracks have been identified, meaning no new trackId values will be passed to ExtractorOutput.track(int, int).\n\tFormat[] getSampleFormats(); // Returns the sample Formats most recently output by the extractor, or null.\n\tSeekMap getSeekMap(); // Returns the SeekMap most recently output by the extractor, or null.\n\tvoid init(ChunkExtractorWrapper.TrackOutputProvider trackOutputProvider, long startTimeUs, long endTimeUs); // Initializes the wrapper to output to TrackOutputs provided by the specified ChunkExtractorWrapper.TrackOutputProvider, and configures the extractor to receive data from a new chunk.\n\tvoid seekMap(SeekMap seekMap); // Called when a SeekMap has been extracted from the stream.\n\tTrackOutput track(int id, int type); // Called by the Extractor to get the TrackOutput for a specific track.\n}"}
{"index": 12255, "repo": "jena-core-4.9.0", "des": "Interface used to convey context information from a rule engine to the stack of procedural builtins.", "code": "public interface RuleContext {\n\tvoid add(Triple t); // Assert a new triple in the deduction graph, triggering any consequent processing as appropriate.\n\tboolean contains(Node s, Node p, Node o); // Return true if the triple pattern is already in either the graph or the stack.\n\tboolean contains(Triple t); // Return true if the triple is already in either the graph or the stack.\n\tClosableIterator<Triple> find(Node s, Node p, Node o); // In some formulations the context includes deductions that are not yet visible to the underlying graph but need to be checked for.\n\tBindingEnvironment getEnv(); // Returns the current variable binding environment for the current rule.\n\tInfGraph getGraph(); // Returns the parent inference graph.\n\tRule getRule(); // Returns the rule.\n\tvoid remove(Triple t); // Remove a triple from the deduction graph (and the original graph if relevant).\n\tvoid setRule(Rule rule); // Sets the rule.\n\tvoid silentAdd(Triple t); // Assert a new triple in the deduction graph, bypassing any processing machinery.\n}"}
{"index": 3767, "repo": "commons-pool2-2.11.1", "des": "Provides proxy objects using Java reflection.", "code": "Class JdkProxySource<T> {\n\tT createProxy(T pooledObject, UsageTracking<T> usageTracking); // Creates a new proxy object, wrapping the given pooled object.\n\tT resolveProxy(T proxy); // Resolves the wrapped object from the given proxy.\n}"}
{"index": 9504, "repo": "commons-math3-3.6.1", "des": "Abstract implementation of the StorelessUnivariateStatistic interface.", "code": "Class AbstractStorelessUnivariateStatistic {\n\tabstract void clear(); // Clears the internal state of the Statistic\n\tabstract StorelessUnivariateStatistic copy(); // Returns a copy of the statistic with the same internal state.\n\tboolean equals(Object object); // Returns true iff object is an AbstractStorelessUnivariateStatistic returning the same values as this for getResult() and getN()\n\tdouble evaluate(double[] values); // This default implementation calls clear(), then invokes increment(double) in a loop over the the input array, and then uses getResult() to compute the return value.\n\tdouble evaluate(double[] values, int begin, int length); // This default implementation calls clear(), then invokes increment(double) in a loop over the specified portion of the input array, and then uses getResult() to compute the return value.\n\tabstract double getResult(); // Returns the current value of the Statistic.\n\tabstract void increment(double d); // Updates the internal state of the statistic to reflect the addition of the new value.\n\tvoid incrementAll(double[] values); // This default implementation just calls increment(double) in a loop over the input array.\n\tvoid incrementAll(double[] values, int begin, int length); // This default implementation just calls increment(double) in a loop over the specified portion of the input array.\n}"}
{"index": 7349, "repo": "calcite-core-1.34.0", "des": "Relational expression whose value is a sequence of zero or more literal row values.", "code": "Class Values {\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tprotected RelDataType deriveRowType();\n\tdouble estimateRowCount(RelMetadataQuery mq); // Returns an estimate of the number of rows this relational expression will return.\n\tRelWriter explainTerms(RelWriter pw); // Describes the inputs and attributes of this relational expression.\n\tcom.google.common.collect.ImmutableList<RelHint> getHints(); // Returns the hints of this relational expressions as an immutable list.\n\tcom.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<RexLiteral>> getTuples(); // Returns the rows of literals represented by this Values relational expression.\n\tcom.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<RexLiteral>> getTuples(RelInput input);\n\tstatic boolean isEmpty(Values values); // Predicate, to be used when defining an operand of a RelOptRule, that returns true if a Values contains zero tuples.\n\tstatic boolean isNotEmpty(Values values); // Predicate, to be used when defining an operand of a RelOptRule, that returns true if a Values contains one or more tuples.\n}"}
{"index": 2374, "repo": "commons-geometry-euclidean-1.0", "des": "This class consists exclusively of static matrix utility methods.", "code": "Class Matrices {\n\tstatic double checkDeterminantForInverse(double det); // Check that the given determinant is valid for use in calculating a matrix inverse.\n\tstatic double checkElementForInverse(double element); // Check that the given matrix element is valid for use in calculation of a matrix inverse, throwing an IllegalStateException if not.\n\tstatic double determinant(double a00, double a01, double a10, double a11); // Compute the determinant of the 2x2 matrix represented by the given values.\n\tstatic double determinant(double a00, double a01, double a02, double a10, double a11, double a12, double a20, double a21, double a22); // Compute the determinant of the 3x3 matrix represented by the given values.\n}"}
{"index": 14437, "repo": "wicket-core-10.0.0-M1", "des": "Some utils to handle tags which otherwise would bloat the Tag API.", "code": "public class TagUtils extends Object {\n\tstatic void copyAttributes(MarkupContainer component, ComponentTag tag); // Copy attributes from e.g.\n\tstatic final IMarkupFragment findTagMarkup(IMarkupFragment fragment, String id, String tagName, int streamOffset); // Find the markup fragment of a tag with wicket:id equal to id starting at offset streamOffset.\n\tstatic boolean isBodyTag(ComponentTag tag);\n\tstatic boolean isExtendTag(IMarkupFragment markup, int i);\n\tstatic boolean isHeadTag(MarkupElement elem);\n\tstatic boolean isWicketBodyTag(MarkupElement elem);\n\tstatic boolean isWicketBorderTag(MarkupElement elem);\n\tstatic boolean isWicketHeaderItemsTag(MarkupElement elem);\n\tstatic boolean isWicketHeadTag(MarkupElement elem);\n\tstatic boolean isWicketTag(IMarkupFragment markup, int i);\n}"}
{"index": 16693, "repo": "spring-beans-6.0.11", "des": "Interface that receives callbacks for component, alias and import registrations during a bean definition reading process.", "code": "public interface ReaderEventListener extends EventListener {\n\tvoid aliasRegistered(AliasDefinition aliasDefinition); // Notification that the given alias has been registered.\n\tvoid componentRegistered(ComponentDefinition componentDefinition); // Notification that the given component has been registered.\n\tvoid defaultsRegistered(DefaultsDefinition defaultsDefinition); // Notification that the given defaults has been registered.\n\tvoid importProcessed(ImportDefinition importDefinition); // Notification that the given import has been processed.\n}"}
{"index": 7960, "repo": "commons-jcs3-core-3.1", "des": "Interface for doing a piece of work which is expected to be cached.", "code": "Interface JCSWorkerHelper<V> {\n\tV doWork(); // The method to implement to do the work that should be cached.\n\tboolean isFinished(); // Tells us whether or not the work has been completed.\n\tvoid setFinished(boolean isFinished); // Sets whether or not the work has been done.\n}"}
{"index": 371, "repo": "phoenix-core-5.1.3", "des": "Manage the state of the HRegion's view of the table, for the single row.", "code": "Class LocalTableState {\n\tvoid addPendingUpdates(org.apache.hadoop.hbase.Cell... kvs);\n\tvoid addPendingUpdates(List<org.apache.hadoop.hbase.Cell> kvs);\n\tvoid applyPendingUpdates(); // Apply the KeyValues set in setPendingUpdates(Collection).\n\tbyte[] getCurrentRowKey();\n\tlong getCurrentTimestamp();\n\tList<? extends IndexedColumnGroup> getIndexColumnHints(); // Get the 'hint' for the columns that were indexed last time for the same set of keyvalues.\n\torg.apache.hadoop.hbase.util.Pair<ScannerBuilder.CoveredDeleteScanner,IndexUpdate> getIndexedColumnsTableState(Collection<? extends ColumnReference> indexedColumns, boolean ignoreNewerMutations, boolean isStateForDeletes, IndexMetaData indexMetaData); // Get a scanner on the columns that are needed by the index.\n\torg.apache.hadoop.hbase.util.Pair<ValueGetter,IndexUpdate> getIndexUpdateState(Collection<? extends ColumnReference> indexedColumns, boolean ignoreNewerMutations, boolean isStateForDeletes, IndexMetaData indexMetaData); // Get a getter interface for the state of the index row\n\tCollection<org.apache.hadoop.hbase.Cell> getPendingUpdate(); // Can be used to help the codec to determine which columns it should attempt to index.\n\tSet<ColumnTracker> getTrackedColumns();\n\tvoid resetTrackedColumns();\n\tvoid rollback(Collection<org.apache.hadoop.hbase.KeyValue> values); // Rollback all the given values from the underlying state.\n\tvoid setCurrentTimestamp(long timestamp); // Set the current timestamp up to which the table should allow access to the underlying table.\n\tvoid setHints(List<? extends IndexedColumnGroup> hints);\n\tvoid setPendingUpdates(Collection<org.apache.hadoop.hbase.Cell> update); // Set the KeyValues in the update for which we are currently building an index update, but don't actually apply them.\n}"}
{"index": 558, "repo": "ignite-core-2.15.0", "des": "Input params for CacheResetLostPartitionsTask.", "code": "Class CacheResetLostPartitionsTaskArg {\n\tSet<String> getCaches();\n\tprotected void readExternalData(byte ver, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 15666, "repo": "pulsar-common-3.0.0", "des": "Concurrent hash set where values are composed of pairs of longs.", "code": "public class ConcurrentLongPairSet extends Object implements LongPairSet {\n\tboolean add(long item1, long item2); // Adds composite value of item1 and item2 to set.\n\tlong capacity(); // Returns capacity of the set.\n\tvoid clear(); // Removes all items from set.\n\tboolean contains(long item1, long item2); // Checks if given (item1,item2) composite value exists into set.\n\tvoid forEach(ConcurrentLongPairSet.LongPairConsumer processor); // Execute ConcurrentLongPairSet.LongPairConsumer processor for each entry in the set.\n\tboolean isEmpty(); // Check if set is empty.\n\tSet<ConcurrentLongPairSet.LongPair> items();\n\tSet<ConcurrentLongPairSet.LongPair> items(int numberOfItems);\n\t<T> Set<T> items(int numberOfItems, LongPairSet.LongPairFunction<T> longPairConverter);\n\tstatic ConcurrentLongPairSet.Builder newBuilder();\n\tboolean remove(long item1, long item2); // Remove an existing entry if found.\n\tint removeIf(LongPairSet.LongPairPredicate filter); // Removes all of the elements of this collection that satisfy the given predicate.\n\tlong size(); // Returns size of the set.\n}"}
{"index": 11993, "repo": "jena-core-4.9.0", "des": "Reasoner implementation which augments or transforms an RDF graph according to a set of rules.", "code": "public class BasicForwardRuleReasoner extends Object implements Reasoner {\n\tvoid addDescription(Model configSpec, Resource base); // Add a configuration description for this reasoner into a partial configuration specification model.\n\tInfGraph bind(Graph data); // Attach the reasoner to a set of RDF data to process.\n\tReasoner bindSchema(Graph tbox); // Precompute the implications of a schema graph.\n\tReasoner bindSchema(Model tbox); // Precompute the implications of a schema Model.\n\tCapabilities getGraphCapabilities(); // Return the Jena Graph Capabilities that the inference graphs generated by this reasoner are expected to conform to.\n\tModel getReasonerCapabilities(); // Return a description of the capabilities of this reasoner encoded in RDF.\n\tList<Rule> getRules(); // Return the this of Rules used by this reasoner\n\tvoid setDerivationLogging(boolean logOn); // Switch on/off derivation logging.\n\tvoid setParameter(Property parameter, Object value); // Set a configuration paramter for the reasoner.\n\tvoid setTraceOn(boolean state); // Set the state of the trace flag.\n\tboolean supportsProperty(Property property); // Determine whether the given property is recognized and treated specially by this reasoner.\n}"}
{"index": 13634, "repo": "slf4j-ext-2.0.7", "des": "A logger specialized in localized logging.", "code": "public class LocLogger extends LoggerWrapper implements Logger {\n\tvoid debug(Enum<?> key, Object... args); // Log a localized message at the DEBUG level.\n\tvoid error(Enum<?> key, Object... args); // Log a localized message at the ERROR level.\n\tvoid info(Enum<?> key, Object... args); // Log a localized message at the INFO level.\n\tvoid trace(Enum<?> key, Object... args); // Log a localized message at the TRACE level.\n\tvoid warn(Enum<?> key, Object... args); // Log a localized message at the WARN level.\n}"}
{"index": 3253, "repo": "hbase-common-3.0.0-alpha-4", "des": "Produces 32-bit hash for hash table lookup.", "code": "Class JenkinsHash {\n\tstatic Hash getInstance();\n\t<T> int hash(HashKey<T> hashKey, int initval); // taken from hashlittle() -- hash a variable-length key into a 32-bit value\n\tstatic void main(String[] args); // Compute the hash of the specified file\n}"}
{"index": 15431, "repo": "pulsar-client-api-3.0.0", "des": "A listener that will be called in order for every message received.", "code": "@Public @Stable public interface MessageListener<T> extends Serializable {\n\tdefault void reachedEndOfTopic(Consumer<T> consumer); // Get the notification when a topic is terminated.\n\tvoid received(Consumer<T> consumer, Message<T> msg); // This method is called whenever a new message is received.\n}"}
{"index": 9696, "repo": "commons-math3-3.6.1", "des": "Population of chromosomes represented by a List.", "code": "Class ListPopulation {\n\tvoid addChromosome(Chromosome chromosome); // Add the given chromosome to the population.\n\tvoid addChromosomes(Collection<Chromosome> chromosomeColl); // Add a Collection of chromosomes to this Population.\n\tprotected List<Chromosome> getChromosomeList(); // Access the list of chromosomes.\n\tList<Chromosome> getChromosomes(); // Returns an unmodifiable list of the chromosomes in this population.\n\tChromosome getFittestChromosome(); // Access the fittest chromosome in this population.\n\tint getPopulationLimit(); // Access the maximum population size.\n\tint getPopulationSize(); // Access the current population size.\n\tIterator<Chromosome> iterator(); // Returns an iterator over the unmodifiable list of chromosomes.\n\tvoid setChromosomes(List<Chromosome> chromosomes); // Deprecated. use addChromosomes(Collection) instead\n\tvoid setPopulationLimit(int populationLimit); // Sets the maximal population size.\n}"}
{"index": 3479, "repo": "mahout-mr-0.13.0", "des": "This is a clustering iterator which works with a set of Vector data and a prior ClusterClassifier which has been initialized with a set of models.", "code": "Class ClusterIterator {\n\tstatic ClusterClassifier iterate(Iterable<Vector> data, ClusterClassifier classifier, int numIterations); // Iterate over data using a prior-trained ClusterClassifier, for a number of iterations\n\tstatic void iterateMR(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.Path inPath, org.apache.hadoop.fs.Path priorPath, org.apache.hadoop.fs.Path outPath, int numIterations); // Iterate over data using a prior-trained ClusterClassifier, for a number of iterations using a mapreduce implementation\n\tstatic void iterateSeq(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.Path inPath, org.apache.hadoop.fs.Path priorPath, org.apache.hadoop.fs.Path outPath, int numIterations); // Iterate over data using a prior-trained ClusterClassifier, for a number of iterations using a sequential implementation\n}"}
{"index": 6559, "repo": "exoplayer-core-2.9.6", "des": "A downloader for progressive media streams.", "code": "Class ProgressiveDownloader {\n\tvoid cancel(); // Interrupts any current download operation and prevents future operations from running.\n\tvoid download(); // Downloads the media.\n\tlong getDownloadedBytes(); // Returns the total number of downloaded bytes.\n\tfloat getDownloadPercentage(); // Returns the estimated download percentage, or C.PERCENTAGE_UNSET if no estimate is available.\n\tvoid remove(); // Removes the media.\n}"}
{"index": 6205, "repo": "jackson-databind-2.15.2", "des": "Simple AbstractTypeResolver implementation, which is based on static mapping from abstract super types into sub types (concrete or abstract), but retaining generic parameterization.", "code": "Class SimpleAbstractTypeResolver {\n\t<T> SimpleAbstractTypeResolver addMapping(Class<T> superType, Class<? extends T> subType); // Method for adding a mapping from super type to specific subtype.\n\tJavaType findTypeMapping(DeserializationConfig config, JavaType type); // Try to locate a subtype for given abstract type, to either resolve to a concrete type, or at least to a more-specific (and hopefully supported) abstract type, one which may have registered deserializers.\n\tJavaType resolveAbstractType(DeserializationConfig config, BeanDescription typeDesc); // Method called to try to resolve an abstract type into concrete type (usually for purposes of deserializing), when no concrete implementation was found.\n}"}
{"index": 9053, "repo": "hbase-server-3.0.0-alpha-4", "des": "Manager the buffer size for all RegionReplicationSink.", "code": "Class RegionReplicationBufferManager {\n\tvoid decrease(long size); // Called after you ship the edits out.\n\tboolean increase(long size); // Return whether we should just drop all the edits, if we have reached the hard limit of max pending size.\n\tvoid stop();\n}"}
{"index": 895, "repo": "ignite-core-2.15.0", "des": "Map of partitions demanded during rebalancing.", "code": "Class IgniteDhtDemandedPartitionsMap {\n\tvoid addFull(int partId); // Adds partition for preloading from all current data.\n\tvoid addHistorical(int partId, long from, long to, int partCnt); // Adds partition for preloading from history.\n\tCollection<Integer> all();\n\tSet<Integer> fullSet();\n\tboolean hasFull();\n\tboolean hasFull(int partId);\n\tboolean hasHistorical();\n\tboolean hasHistorical(int partId);\n\tboolean hasPartition(int partId);\n\tCachePartitionPartialCountersMap historicalMap();\n\tSet<Integer> historicalSet();\n\tboolean isEmpty();\n\tboolean remove(int partId); // Removes partition.\n\tint size();\n}"}
{"index": 17540, "repo": "pulsar-broker-3.0.0", "des": "The state of the topicTransactionBuffer TopicTransactionBuffer.", "code": "public static enum TopicTransactionBufferState.State extends Enum<TopicTransactionBufferState.State> {\n\tstatic TopicTransactionBufferState.State valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic TopicTransactionBufferState.State[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 2193, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticScalar.", "code": "Class LongColSubtractDoubleScalarChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 18428, "repo": "opencms-core-15.0", "des": "Represents the configuration for the two-factor authentication feature.", "code": "Class CmsTwoFactorAuthenticationConfig {\n\torg.dom4j.Element getConfigElement(); // Gets the configuration element.\n\tjava.lang.String getIssuer(); // Gets the issuer (encoded in generated QR codes and displayed by authenticator apps).\n\tCmsTwoFactorAuthenticationUserPolicy getPolicy(); // Gets the policy which controls which users should use two-factor authentication.\n\tjava.lang.String getSecret(); // Gets the secret key which is used to encrypt/decrypt two-factor authentication information stored in the user's additional infos.\n\tjava.lang.String getSetupMessage(); // Gets the setup message.\n\tboolean isEnabled(); // Checks if two-factor authentication is enabled.\n}"}
{"index": 11772, "repo": "bedrock-core-7.0.2", "des": "An Option to define the maximum delay that may occur between successive attempts to resolve an Ensured when calling Ensured.get().", "code": "public class MaximumRetryDelay extends Object implements Option {\n\tboolean equals(Object other);\n\tDuration getDuration(); // Obtains the Duration of the MaximumRetryDelay.\n\tstatic MaximumRetryDelay of(long duration, TimeUnit units); // Obtains a MaximumRetryDelay of a specified duration.\n\tstatic MaximumRetryDelay of(Duration duration); // Obtains a MaximumRetryDelay of a specified Duration.\n\tstatic MaximumRetryDelay of(String duration); // Obtains a MaximumRetryDelay of a specified time represented as a String formatted as (0-9)+['ms'|'s'|'m'|'h'].\n\tstatic MaximumRetryDelay standard(); // Obtains the default MaximumRetryDelay (of 1 second).\n\tlong to(TimeUnit units); // Obtains the MaximumRetryDelay Duration in the specified TimeUnit.\n}"}
{"index": 9608, "repo": "commons-math3-3.6.1", "des": "This class represents a combined set of first order differential equations, with at least a primary set of equations expandable by some sets of secondary equations.", "code": "Class ExpandableStatefulODE {\n\tint addSecondaryEquations(SecondaryEquations secondary); // Add a set of secondary equations to be integrated along with the primary set.\n\tvoid computeDerivatives(double t, double[] y, double[] yDot); // Get the current time derivative of the complete state vector.\n\tdouble[] getCompleteState(); // Get the complete current state.\n\tFirstOrderDifferentialEquations getPrimary(); // Get the primary set of differential equations.\n\tEquationsMapper getPrimaryMapper(); // Get an equations mapper for the primary equations set.\n\tdouble[] getPrimaryState(); // Get primary part of the current state.\n\tdouble[] getPrimaryStateDot(); // Get primary part of the current state derivative.\n\tEquationsMapper[] getSecondaryMappers(); // Get the equations mappers for the secondary equations sets.\n\tdouble[] getSecondaryState(int index); // Get secondary part of the current state.\n\tdouble[] getSecondaryStateDot(int index); // Get secondary part of the current state derivative.\n\tdouble getTime(); // Get current time.\n\tint getTotalDimension(); // Return the dimension of the complete set of equations.\n\tvoid setCompleteState(double[] completeState); // Set the complete current state.\n\tvoid setPrimaryState(double[] primaryState); // Set primary part of the current state.\n\tvoid setSecondaryState(int index, double[] secondaryState); // Set secondary part of the current state.\n\tvoid setTime(double time); // Set current time.\n}"}
{"index": 7953, "repo": "commons-jcs3-core-3.1", "des": "ShutdownObservers can observe ShutdownObservable objects.", "code": "Interface IShutdownObservable {\n\tvoid deregisterShutdownObserver(IShutdownObserver observer); // Deregister the observer with the observable.\n\tvoid registerShutdownObserver(IShutdownObserver observer); // Registers an observer with the observable object.\n}"}
{"index": 7830, "repo": "cassandra-all-4.1.2", "des": "Events related to TokenMetadata changes.", "code": "Class TokenMetadataEvent {\n\tTokenMetadataEvent.TokenMetadataEventType getType(); // Returns event type discriminator.\n\tjava.util.HashMap<java.lang.String,java.io.Serializable> toMap(); // Returns map of key-value pairs containing relevant event details.\n}"}
{"index": 5110, "repo": "commons-collections-3.2.2", "des": "Closure implementation that executes a closure repeatedly until a condition is met, like a do-while or while loop.", "code": "Class WhileClosure {\n\tvoid execute(Object input); // Executes the closure until the predicate is false.\n\tClosure getClosure(); // Gets the closure.\n\tstatic Closure getInstance(Predicate predicate, Closure closure, boolean doLoop); // Factory method that performs validation.\n\tPredicate getPredicate(); // Gets the predicate in use.\n\tboolean isDoLoop(); // Is the loop a do-while loop.\n}"}
{"index": 85, "repo": "commons-collections4-4.4", "des": "Provides a base decorator that enables additional functionality to be added to an OrderedMap via decoration.", "code": "Class AbstractOrderedMapDecorator<K,V> {\n\tprotected OrderedMap<K,V> decorated(); // Gets the map being decorated.\n\tK firstKey(); // Gets the first key currently in this map.\n\tK lastKey(); // Gets the last key currently in this map.\n\tOrderedMapIterator<K,V> mapIterator(); // Obtains a MapIterator over the map.\n\tK nextKey(K key); // Gets the next key after the one specified.\n\tK previousKey(K key); // Gets the previous key before the one specified.\n}"}
{"index": 17990, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for EndpointMappings that resolve qualified names as registration keys.", "code": "public abstract class AbstractQNameEndpointMapping extends AbstractMapBasedEndpointMapping {\n\tprotected final String getLookupKeyForMessage(MessageContext messageContext); // Returns the endpoint key for the given message context.\n\tprotected abstract QName resolveQName(MessageContext messageContext); // Template method that resolves the qualified names from the given SOAP message.\n\tprotected boolean validateLookupKey(String key); // Validates the given endpoint key.\n}"}
{"index": 14784, "repo": "spring-data-commons-3.1.2", "des": "Converter to parse two comma-separated doubles into a Point.", "code": "public enum PointFormatter extends Enum<PointFormatter> implements Converter<String,Point>, Formatter<Point> {\n\tPoint convert(String source);\n\tPoint parse(String text, Locale locale);\n\tString print(Point point, Locale locale);\n\tstatic PointFormatter valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic PointFormatter[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 2115, "repo": "hive-exec-4.0.0-alpha-2", "des": "The reason that we list evaluate methods with all numeric types is for both better performance and type checking (so we know int + int is still an int instead of a double); otherwise a single method that takes (Number a, Number b) and use a.", "code": "Class GenericUDFOPPlus {\n\tprotected GenericUDF instantiateDTIUDF(); // Instantiate date-time/interval version of the arithmetic UDF\n\tprotected GenericUDFBaseNumeric instantiateNumericUDF(); // Instantiate numeric version of the arithmetic UDF\n}"}
{"index": 11668, "repo": "spring-websocket-6.0.11", "des": "Wraps another WebSocketHandler instance and delegates to it.", "code": "public class WebSocketHandlerDecorator extends Object implements WebSocketHandler {\n\tvoid afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus); // Invoked after the WebSocket connection has been closed by either side, or after a transport error has occurred.\n\tvoid afterConnectionEstablished(WebSocketSession session); // Invoked after WebSocket negotiation has succeeded and the WebSocket connection is opened and ready for use.\n\tWebSocketHandler getDelegate();\n\tWebSocketHandler getLastHandler();\n\tvoid handleMessage(WebSocketSession session, WebSocketMessage<?> message); // Invoked when a new WebSocket message arrives.\n\tvoid handleTransportError(WebSocketSession session, Throwable exception); // Handle an error from the underlying WebSocket message transport.\n\tboolean supportsPartialMessages(); // Whether the WebSocketHandler handles partial messages.\n\tstatic WebSocketHandler unwrap(WebSocketHandler handler);\n}"}
{"index": 7127, "repo": "calcite-core-1.34.0", "des": "Listener for logging useful debugging information on certain rule events.", "code": "Class RuleEventLogger {\n\tvoid relChosen(RelOptListener.RelChosenEvent event); // Notifies this listener that a relational expression has been chosen as part of the final implementation of the query plan.\n\tvoid relDiscarded(RelOptListener.RelDiscardedEvent event); // Notifies this listener that a relational expression is no longer of interest to the planner.\n\tvoid relEquivalenceFound(RelOptListener.RelEquivalenceEvent event); // Notifies this listener that a relational expression has been registered with a particular equivalence class after an equivalence has been either detected or asserted.\n\tvoid ruleAttempted(RelOptListener.RuleAttemptedEvent event); // Notifies this listener that an optimizer rule is being applied to a particular relational expression.\n\tvoid ruleProductionSucceeded(RelOptListener.RuleProductionEvent event); // Notifies this listener that an optimizer rule has been successfully applied to a particular relational expression, resulting in a new equivalent expression (relEquivalenceFound will also be called unless the new expression is identical to an existing one).\n}"}
{"index": 12150, "repo": "jena-core-4.9.0", "des": "Implementation of the max cardinality restriction abstraction.", "code": "public class MaxCardinalityRestrictionImpl extends RestrictionImpl implements MaxCardinalityRestriction {\n\tint getMaxCardinality(); // Answer the maximum cardinality of the restricted property.\n\tboolean hasMaxCardinality(int cardinality); // Answer true if this property restriction has the given maximum cardinality.\n\tvoid removeMaxCardinality(int cardinality); // Remove the statement that this restriction has the given maximum cardinality for the restricted property.\n\tvoid setMaxCardinality(int cardinality); // Assert that this restriction restricts the property to have the given maximum cardinality.\n}"}
{"index": 18178, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Information extracted from DatabaseMetaData regarding what the JDBC driver reports as being supported or not.", "code": "Interface ExtractedDatabaseMetaData {\n\tboolean doesDataDefinitionCauseTransactionCommit(); // Did the driver report to DDL statements performed within a transaction performing an implicit commit of the transaction.\n\tjava.lang.String getConnectionCatalogName(); // Retrieve the name of the catalog in effect when we connected to the database.\n\tjava.lang.String getConnectionSchemaName(); // Retrieve the name of the schema in effect when we connected to the database.\n\tJdbcEnvironment getJdbcEnvironment(); // Obtain the JDBC Environment from which this metadata came.\n\tdefault java.util.List<SequenceInformation> getSequenceInformationList(); // Retrieve the list of SequenceInformation objects which describe the underlying database sequences.\n\tSQLStateType getSqlStateType(); // Retrieve the type of codes the driver says it uses for SQLState.\n\tboolean supportsBatchUpdates(); // Did the driver report to supporting batched updates?\n\tboolean supportsDataDefinitionInTransaction(); // Did the driver report to support performing DDL within transactions?\n\tboolean supportsGetGeneratedKeys(); // Did the driver report to supporting retrieval of generated keys?\n\tboolean supportsNamedParameters(); // Does the driver report supporting named parameters?\n\tboolean supportsRefCursors(); // Does the driver report supporting REF_CURSORs?\n\tboolean supportsScrollableResults(); // Did the driver report to supporting scrollable result sets?\n}"}
{"index": 6906, "repo": "calcite-core-1.34.0", "des": "IntervalSqlType represents a standard SQL datetime interval type.", "code": "Class IntervalSqlType {\n\tIntervalSqlType combine(RelDataTypeFactoryImpl typeFactory, IntervalSqlType that); // Combines two IntervalTypes and returns the result.\n\tprotected void generateTypeString(StringBuilder sb, boolean withDetail); // Generates a string representation of this type.\n\tSqlIntervalQualifier getIntervalQualifier(); // Gets this type's interval qualifier, or null if this is not an interval type.\n\tint getPrecision(); // Gets the JDBC-defined precision for values of this type.\n\tint getScale(); // Gets the scale of this type.\n}"}
{"index": 884, "repo": "ignite-core-2.15.0", "des": "Convenience class representing mutable tuple of two values.", "code": "Class IgniteBiTuple<V1,V2> {\n\tvoid clear();\n\tObject clone();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object val);\n\tSet<Map.Entry<V1,V2>> entrySet();\n\tboolean equals(Object o);\n\tV2 get(Object key);\n\tV1 get1(); // Gets first value.\n\tV2 get2(); // Gets second value.\n\tV1 getKey();\n\tV2 getValue();\n\tboolean isEmpty();\n\tIterator<Object> iterator();\n\tSet<V1> keySet();\n\tV2 put(V1 key, V2 val);\n\tvoid putAll(Map<? extends V1,? extends V2> m);\n\tvoid readExternal(ObjectInput in);\n\tV2 remove(Object key);\n\tvoid set(V1 val1, V2 val2); // Sets both values in the tuple.\n\tvoid set1(V1 val1); // Sets first value.\n\tvoid set2(V2 val2); // Sets second value.\n\tV2 setValue(V2 val);\n\tint size();\n\tIgniteBiTuple<V2,V1> swap(); // Swaps values.\n\tCollection<V2> values();\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 18698, "repo": "opencms-gwt-15.0", "des": "CSS resource bundle for the acacia editor widgets.", "code": "Interface I_CmsWidgetsLayoutBundle {\n\tI_CmsWidgetsLayoutBundle.I_CmsGalleryWidgetsCss galleryWidgetsCss(); // Access method.\n\tI_CmsWidgetsLayoutBundle.I_CmsWidgetCss widgetCss(); // Access method.\n}"}
{"index": 15712, "repo": "camel-api-4.0.0-RC1", "des": "Factory for creating a Processor that can invoke a method on a bean and supporting using Camel bean parameter bindings.", "code": "public interface BeanProcessorFactory {\n\tProcessor createBeanProcessor(CamelContext camelContext, Object bean, Method method); // Creates the bean processor from the existing bean instance\n\tProcessor createBeanProcessor(CamelContext camelContext, Object bean, String beanType, Class<?> beanClass, String ref, String method, BeanScope scope); // Creates the bean processor from a given set of parameters that can refer to the bean via an existing bean, a reference to a bean, or its class name etc.\n}"}
{"index": 15604, "repo": "spring-security-core-6.1.2", "des": "The default strategy for publishing authentication events.", "code": "public class DefaultAuthenticationEventPublisher extends Object implements AuthenticationEventPublisher, org.springframework.context.ApplicationEventPublisherAware {\n\tvoid publishAuthenticationFailure(AuthenticationException exception, Authentication authentication);\n\tvoid publishAuthenticationSuccess(Authentication authentication);\n\tvoid setAdditionalExceptionMappings(Map<Class<? extends AuthenticationException>,Class<? extends AbstractAuthenticationFailureEvent>> mappings); // Sets additional exception to event mappings.\n\tvoid setAdditionalExceptionMappings(Properties additionalExceptionMappings); // Deprecated. use setAdditionalExceptionMappings(Map)\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n\tvoid setDefaultAuthenticationFailureEvent(Class<? extends AbstractAuthenticationFailureEvent> defaultAuthenticationFailureEventClass); // Sets a default authentication failure event as a fallback event for any unmapped exceptions not mapped in the exception mappings.\n}"}
{"index": 9255, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "DeletionTask handling the removal of files (and directories).", "code": "Class FileDeletionTask {\n\torg.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.DeletionServiceDeleteTaskProto convertDeletionTaskToProto(); // Convert the FileDeletionTask to the Protobuf representation for storing in the state store and recovery.\n\tList<org.apache.hadoop.fs.Path> getBaseDirs(); // Get the base directories containing the subdirectory.\n\torg.apache.hadoop.fs.Path getSubDir(); // Get the subdirectory to delete.\n\tvoid run(); // Delete the specified file/directory as the specified user.\n}"}
{"index": 10989, "repo": "spring-data-redis-3.1.2", "des": "Configuration class used for setting up RedisConnection via RedisConnectionFactory using the provided Master / Replica configuration to nodes know to not change address.", "code": "public class RedisStaticMasterReplicaConfiguration extends Object implements RedisConfiguration, RedisConfiguration.StaticMasterReplicaConfiguration {\n\tvoid addNode(String hostName, int port); // Add a node to the list of nodes given hostName.\n\tboolean equals(Object o);\n\tint getDatabase(); // Get the database index to use.\n\tList<RedisStandaloneConfiguration> getNodes();\n\tRedisPassword getPassword(); // Get the RedisPassword to use when connecting.\n\tString getUsername(); // Get the username to use when connecting.\n\tRedisStaticMasterReplicaConfiguration node(String hostName); // Add a node to the list of nodes given hostName.\n\tRedisStaticMasterReplicaConfiguration node(String hostName, int port); // Add a node to the list of nodes given hostName and port.\n\tvoid setDatabase(int index); // Set the database index to use.\n\tvoid setPassword(RedisPassword password); // Create and set a RedisPassword for given String.\n\tvoid setUsername(String username); // Create and set a username with the given String.\n}"}
{"index": 1656, "repo": "samza-api-1.8.0", "des": "The framework-provided context for the current container.", "code": "Interface ContainerContext {\n\tMetricsRegistry getContainerMetricsRegistry(); // Gets the MetricsRegistry for this container, which can be used to register metrics that are reported per container.\n\tContainerModel getContainerModel(); // Gets the ContainerModel for this container, which contains this container's id and its TaskModel.\n}"}
{"index": 3242, "repo": "hbase-common-3.0.0-alpha-4", "des": "Stores the hostname and weight for that hostname.", "code": "Class HDFSBlocksDistribution.HostAndWeight {\n\tvoid addWeight(long weight, long weightForSsd); // add weight\n\tString getHost(); // Returns the host name\n\tlong getWeight(); // Returns the weight\n\tlong getWeightForSsd(); // Returns the weight for ssd\n}"}
{"index": 11975, "repo": "jena-core-4.9.0", "des": "Used to set event handlers and options on ARP, SAX2Model, and SAX2RDF instances.", "code": "public interface ARPConfig {\n\tARPHandlers getHandlers(); // The handlers used during parsing.\n\tARPOptions getOptions(); // The options used during parsing.\n\tvoid setHandlersWith(ARPHandlers handlers); // Copies the handlers from the argument to be used by this instance.\n\tvoid setOptionsWith(ARPOptions opts); // Copies the options from the argument to be used by this instance.\n}"}
{"index": 13550, "repo": "spring-messaging-6.0.11", "des": "A resolver to extract and convert the payload of a message using a MessageConverter.", "code": "public class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\tprotected boolean isEmptyPayload(Object payload); // Specify if the given payload is empty.\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message); // Resolves a method parameter into an argument value from a given message.\n\tprotected Class<?> resolveTargetClass(org.springframework.core.MethodParameter parameter, Message<?> message); // Resolve the target class to convert the payload to.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n\tprotected void validate(Message<?> message, org.springframework.core.MethodParameter parameter, Object target); // Validate the payload if applicable.\n}"}
{"index": 14095, "repo": "wicket-core-10.0.0-M1", "des": "Base class that collects request and session information for request logging to enable rich information about the events that transpired during a single request.", "code": "public abstract class AbstractRequestLogger extends Object implements IRequestLogger {\n\tprotected void addRequest(IRequestLogger.RequestData rd);\n\tprotected String formatDate(Date date); // Thread-safely formats the passed date in format 'yyyy-MM-dd hh:mm:ss,SSS' with GMT timezone\n\tlong getAverageRequestTime();\n\tint getCurrentActiveRequestCount();\n\tIRequestLogger.RequestData getCurrentRequest();\n\tIRequestLogger.SessionData[] getLiveSessions();\n\tint getPeakActiveRequestCount();\n\tint getPeakSessions();\n\tList<IRequestLogger.RequestData> getRequests(); // This method returns a List of the current requests that are in mem.\n\tlong getRequestsPerMinute();\n\tint getTotalCreatedSessions();\n\tprotected abstract void log(IRequestLogger.RequestData rd, IRequestLogger.SessionData sd);\n\tvoid logEventTarget(org.apache.wicket.request.IRequestHandler requestHandler); // Sets the target that was the event target for the current request\n\tvoid logRequestedUrl(String url); // Logs the URL that was requested by the browser.\n\tvoid logResponseTarget(org.apache.wicket.request.IRequestHandler requestHandler); // Sets the target that was the response target for the current request\n\tvoid objectCreated(Object value); // Called to monitor additions of objects in the ISessionStore\n\tvoid objectRemoved(Object value); // Called to monitor removals of objects out of the ISessionStore\n\tvoid objectUpdated(Object value); // Called to monitor updates of objects in the ISessionStore\n\tvoid performLogging(); // Perform the actual logging\n\tvoid requestTime(long timeTaken); // This method is called when the request is over.\n\tvoid sessionCreated(String sessionId); // called when the session is created and has an id.\n\tvoid sessionDestroyed(String sessionId); // Method used to cleanup a livesession when the session was invalidated by the webcontainer\n}"}
{"index": 18557, "repo": "hibernate-core-5.6.15.Final", "des": "Strategy for describing values which are generated in the database.", "code": "Interface InDatabaseValueGenerationStrategy {\n\tGenerationTiming getGenerationTiming(); // When is this value generated : NEVER, INSERT, ALWAYS (INSERT+UPDATE)\n\tjava.lang.String[] getReferencedColumnValues(); // For columns that will be referenced in the SQL (per referenceColumnsInSql()), what value should be used in the SQL as the column value.\n\tboolean referenceColumnsInSql(); // Should the column(s) be referenced in the INSERT / UPDATE SQL?\n}"}
{"index": 17076, "repo": "spring-integration-core-6.1.2", "des": "A Protocol Buffer transformer to instantiate Message objects from either byte[] if content type is application/x-protobuf or from String in case of application/json content type.", "code": "public class FromProtobufTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware {\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to provide the transformation logic.\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tFromProtobufTransformer setExpectedType(Class<? extends com.google.protobuf.Message> expectedType); // Set an expected protobuf class type.\n\tFromProtobufTransformer setExpectedTypeExpression(org.springframework.expression.Expression expression); // Set an expression to evaluate against the message to determine the type.\n\tFromProtobufTransformer setExpectedTypeExpressionString(String expression); // Set an expression to evaluate against the message to determine the type id.\n}"}
{"index": 11189, "repo": "wicket-extensions-10.0.0-M1", "des": "Base implementation for Panel/ Component based IBreadCrumbParticipant that decouples the implementation from the actual panel class.", "code": "public abstract class BreadCrumbParticipantDelegate extends Object implements IBreadCrumbParticipant {\n\torg.apache.wicket.Component getComponent(); // Gets the participating component.\n\tvoid onActivate(IBreadCrumbParticipant previous); // If the previous participant is not null (and a component, which it should be), replace that component on it's parent with this one.\n}"}
{"index": 15002, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Configurer for OpenID Connect 1.0 RP-Initiated Logout Endpoint.", "code": "public final class OidcLogoutEndpointConfigurer extends Object {\n\tOidcLogoutEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider); // Adds an AuthenticationProvider used for authenticating an OidcLogoutAuthenticationToken.\n\tOidcLogoutEndpointConfigurer authenticationProviders(Consumer<List<org.springframework.security.authentication.AuthenticationProvider>> authenticationProvidersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationProvider's allowing the ability to add, remove, or customize a specific AuthenticationProvider.\n\tOidcLogoutEndpointConfigurer errorResponseHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler errorResponseHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tprotected final org.springframework.security.config.annotation.ObjectPostProcessor<Object> getObjectPostProcessor();\n\tOidcLogoutEndpointConfigurer logoutRequestConverter(org.springframework.security.web.authentication.AuthenticationConverter logoutRequestConverter); // Adds an AuthenticationConverter used when attempting to extract a Logout Request from HttpServletRequest to an instance of OidcLogoutAuthenticationToken used for authenticating the request.\n\tOidcLogoutEndpointConfigurer logoutRequestConverters(Consumer<List<org.springframework.security.web.authentication.AuthenticationConverter>> logoutRequestConvertersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationConverter's allowing the ability to add, remove, or customize a specific AuthenticationConverter.\n\tOidcLogoutEndpointConfigurer logoutResponseHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler logoutResponseHandler); // Sets the AuthenticationSuccessHandler used for handling an OidcLogoutAuthenticationToken and performing the logout.\n\tprotected final <T> T postProcess(T object);\n}"}
{"index": 15235, "repo": "spring-boot-3.1.1", "des": "ConfigDataNotFoundException thrown when a ConfigDataLocation cannot be found.", "code": "public class ConfigDataLocationNotFoundException extends ConfigDataNotFoundException {\n\tConfigDataLocation getLocation(); // Return the location that could not be found.\n\tOrigin getOrigin(); // Return the source origin or null if the origin is not known.\n\tString getReferenceDescription(); // Return a description of actual referenced item that could not be found.\n}"}
{"index": 2899, "repo": "amqp-client-5.18.0", "des": "Interface for components that are shutdown capable and that allow listeners to be added for shutdown signals.", "code": "Interface ShutdownNotifier {\n\tvoid addShutdownListener(ShutdownListener listener); // Add shutdown listener.\n\tShutdownSignalException getCloseReason(); // Get the shutdown reason object\n\tboolean isOpen(); // Determine whether the component is currently open.\n\tvoid notifyListeners(); // Protected API - notify the listeners attached to the component\n\tvoid removeShutdownListener(ShutdownListener listener); // Remove shutdown listener for the component.\n}"}
{"index": 7421, "repo": "mahout-math-0.13.0", "des": "Open hash map from int keys to int values.", "code": "Class OpenIntIntHashMap {\n\tint adjustOrPutValue(int key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(int key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(IntProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(IntIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(int key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(int key);\n\tprotected int indexOfKey(int key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenIntIntHashMap.MapElement> iterator();\n\tvoid keys(IntArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(IntIntProcedure condition, IntArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(int key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(int key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 12253, "repo": "jena-core-4.9.0", "des": "Inner class which provides minimalist parsing support based on tokenisation with depth 1 lookahead.", "code": "public static class Rule.Parser extends Object {\n\tMap<String,String> getPrefixMap(); // Return a map of all the discovered prefixes\n\tList<Rule> getRulesPreload(); // Return the complete set of preloaded rules;\n\tRule parseRule(); // Parse a rule, terminated by a \"]\" or \".\" character.\n\tString recentTokens(); // Return a trace of the recently seen tokens, for use in error reporting\n\tvoid registerPrefix(String prefix, String namespace); // Register a new namespace prefix with the parser\n\tvoid registerPrefixMap(Map<String,String> map); // Register a set of prefix to namespace mappings with the parser\n}"}
{"index": 1359, "repo": "nutch-2.4", "des": "This plugin implements a variant of an Online Page Importance Computation (OPIC) score, described in this paper: Abiteboul, Serge and Preda, Mihai and Cobena, Gregory (2003), Adaptive On-Line Page Importance Computation .", "code": "Class OPICScoringFilter {\n\tvoid distributeScoreToOutlinks(java.lang.String fromUrl, WebPage row, java.util.Collection<ScoreDatum> scoreData, int allCount); // Get cash on hand, divide it by the number of outlinks and apply.\n\tfloat generatorSortValue(java.lang.String url, WebPage row, float initSort); // Use WebPage.getScore().\n\tConfiguration getConf();\n\tjava.util.Collection<WebPage.Field> getFields();\n\tfloat indexerScore(java.lang.String url, NutchDocument doc, WebPage row, float initScore); // Dampen the boost value by scorePower.\n\tvoid initialScore(java.lang.String url, WebPage row); // Set to 0.0f (unknown value) - inlink contributions will bring it to a correct level.\n\tvoid injectedScore(java.lang.String url, WebPage row); // Set an initial score for newly injected pages.\n\tvoid setConf(Configuration conf);\n\tvoid updateScore(java.lang.String url, WebPage row, java.util.List<ScoreDatum> inlinkedScoreData); // Increase the score by a sum of inlinked scores.\n}"}
{"index": 6569, "repo": "exoplayer-core-2.9.6", "des": "Watches whether the Requirements are met and notifies the RequirementsWatcher.", "code": "Class RequirementsWatcher {\n\tRequirements getRequirements(); // Returns watched Requirements.\n\tvoid start(); // Starts watching for changes.\n\tvoid stop(); // Stops watching for changes.\n}"}
{"index": 15374, "repo": "spring-boot-3.1.1", "des": "Builder that can be used to configure and create a TaskScheduler.", "code": "public class TaskSchedulerBuilder extends Object {\n\tTaskSchedulerBuilder additionalCustomizers(Iterable<TaskSchedulerCustomizer> customizers); // Add taskSchedulerCustomizers that should be applied to the ThreadPoolTaskScheduler.\n\tTaskSchedulerBuilder additionalCustomizers(TaskSchedulerCustomizer... customizers); // Add taskSchedulerCustomizers that should be applied to the ThreadPoolTaskScheduler.\n\tTaskSchedulerBuilder awaitTermination(boolean awaitTermination); // Set whether the executor should wait for scheduled tasks to complete on shutdown, not interrupting running tasks and executing all tasks in the queue.\n\tTaskSchedulerBuilder awaitTerminationPeriod(Duration awaitTerminationPeriod); // Set the maximum time the executor is supposed to block on shutdown.\n\torg.springframework.scheduling.concurrent.ThreadPoolTaskScheduler build(); // Build a new ThreadPoolTaskScheduler instance and configure it using this builder.\n\t<T extends org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler>T configure(T taskScheduler); // Configure the provided ThreadPoolTaskScheduler instance using this builder.\n\tTaskSchedulerBuilder customizers(Iterable<TaskSchedulerCustomizer> customizers); // Set the taskSchedulerCustomizers that should be applied to the ThreadPoolTaskScheduler.\n\tTaskSchedulerBuilder customizers(TaskSchedulerCustomizer... customizers); // Set the TaskSchedulerCustomizers that should be applied to the ThreadPoolTaskScheduler.\n\tTaskSchedulerBuilder poolSize(int poolSize); // Set the maximum allowed number of threads.\n\tTaskSchedulerBuilder threadNamePrefix(String threadNamePrefix); // Set the prefix to use for the names of newly created threads.\n}"}
{"index": 3902, "repo": "hbase-client-3.0.0-alpha-4", "des": "A point-in-time view of a space quota on a table, read only.", "code": "Interface SpaceQuotaSnapshotView {\n\tlong getLimit(); // Returns the limit, in bytes, of the target (e.g.\n\tSpaceQuotaSnapshotView.SpaceQuotaStatusView getQuotaStatus(); // Returns the status of the quota.\n\tlong getUsage(); // Returns the current usage, in bytes, of the target (e.g.\n}"}
{"index": 15184, "repo": "spring-boot-3.1.1", "des": "Abstract base class for a FailureAnalyzer that handles some kind of injection failure.", "code": "public abstract class AbstractInjectionFailureAnalyzer<T extends Throwable> extends AbstractFailureAnalyzer<T> {\n\tprotected final FailureAnalysis analyze(Throwable rootFailure, T cause); // Returns an analysis of the given rootFailure, or null if no analysis was possible.\n\tprotected abstract FailureAnalysis analyze(Throwable rootFailure, T cause, String description); // Returns an analysis of the given rootFailure, or null if no analysis was possible.\n}"}
{"index": 10467, "repo": "groovy-all-4.0.13", "des": "An interface for MetaMethods that invoke closures to implements.", "code": "public interface ClosureInvokingMethod {\n\tClosure getClosure(); // Returns the original closure that this method invokes\n\tString getName(); // The method name\n\tboolean isStatic(); // Is it a static method?\n}"}
{"index": 14209, "repo": "wicket-core-10.0.0-M1", "des": "A convenience class to represent an empty data provider.", "code": "public class EmptyDataProvider<T> extends Object implements IDataProvider<T> {\n\tstatic <T> EmptyDataProvider<T> getInstance();\n\tIterator<T> iterator(long first, long count); // Gets an iterator for the subset of total data\n\tIModel<T> model(Object object); // Callback used by the consumer of this data provider to wrap objects retrieved from IDataProvider.iterator(long, long) with a model (usually a detachable one).\n\tlong size(); // Gets total number of items in the collection represented by the DataProvider\n}"}
{"index": 3186, "repo": "hbase-common-3.0.0-alpha-4", "des": "An abstract implementation of the ByteRange API.", "code": "Class AbstractByteRange {\n\tprotected void clearHashCache();\n\tint compareTo(ByteRange other); // Bitwise comparison of each byte in the array.\n\tvoid deepCopySubRangeTo(int innerOffset, int copyLength, byte[] destination, int destinationOffset); // Wrapper for System.arraycopy.\n\tvoid deepCopyTo(byte[] destination, int destinationOffset); // Wrapper for System.arraycopy.\n\tbyte[] deepCopyToNewArray(); // Instantiate a new byte[] with exact length, which is at least 24 bytes + length.\n\tboolean equals(Object obj);\n\tbyte get(int index); // Retrieve the byte at index.\n\tByteRange get(int index, byte[] dst); // Fill dst with bytes from the range, starting from index.\n\tByteRange get(int index, byte[] dst, int offset, int length); // Fill dst with bytes from the range, starting from index.\n\tbyte[] getBytes(); // The underlying byte[].\n\tint getInt(int index); // Retrieve the int value at index\n\tint getLength(); // The length of the range.\n\tlong getLong(int index); // Retrieve the long value at index\n\tint getOffset(); // The offset, the index into the underlying byte[] at which this range begins.\n\tshort getShort(int index); // Retrieve the short value at index\n\tlong getVLong(int index); // Retrieve the long value at index which is stored as VLong\n\tstatic int getVLongSize(long val);\n\tboolean isEmpty(); // Returns true when this range is of zero length, false otherwise.\n\tstatic boolean isEmpty(ByteRange range); // Returns true when range is of zero length, false otherwise.\n\tprotected boolean isHashCached();\n\tByteRange set(byte[] bytes); // Reuse this ByteRange over a new byte[].\n\tByteRange set(byte[] bytes, int offset, int length); // Reuse this ByteRange over a new byte[].\n\tByteRange set(int capacity); // Reuse this ByteRange over a new byte[].\n\tByteRange setLength(int length); // Update the length of this range.\n\tByteRange setOffset(int offset); // Update the beginning of this range.\n}"}
{"index": 18051, "repo": "spring-ws-core-4.0.5", "des": "Represents a Web service message with MIME attachments.", "code": "public interface MimeMessage extends WebServiceMessage {\n\tAttachment addAttachment(String contentId, jakarta.activation.DataHandler dataHandler); // Add an attachment to the message, taking the content from a DataHandler.\n\tAttachment addAttachment(String contentId, File file); // Add an attachment to the message, taking the content from a File.\n\tAttachment addAttachment(String contentId, org.springframework.core.io.InputStreamSource inputStreamSource, String contentType); // Add an attachment to the message, taking the content from an InputStreamSource.\n\tboolean convertToXopPackage(); // Turns this message into a XOP package.\n\tAttachment getAttachment(String contentId); // Returns the Attachment with the specified content Id.\n\tIterator<Attachment> getAttachments(); // Returns an Iterator over all Attachment objects that are part of this message.\n\tboolean isXopPackage(); // Indicates whether this message is a XOP package.\n}"}
{"index": 16966, "repo": "spring-orm-6.0.11", "des": "JpaDialect implementation for Hibernate.", "code": "public class HibernateJpaDialect extends DefaultJpaDialect {\n\tObject beginTransaction(EntityManager entityManager, org.springframework.transaction.TransactionDefinition definition); // This implementation invokes the standard JPA Transaction.begin method.\n\tvoid cleanupTransaction(Object transactionData); // This implementation does nothing, since the default beginTransaction implementation does not require any cleanup.\n\tprotected org.springframework.dao.DataAccessException convertHibernateAccessException(HibernateException ex); // Convert the given HibernateException to an appropriate exception from the org.springframework.dao hierarchy.\n\tprotected Object getIdentifier(HibernateException hibEx);\n\torg.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly); // This implementation always returns null, indicating that no JDBC Connection can be provided.\n\tprotected SessionImplementor getSession(EntityManager entityManager);\n\tprotected FlushMode prepareFlushMode(Session session, boolean readOnly);\n\tObject prepareTransaction(EntityManager entityManager, boolean readOnly, String name); // Prepare a JPA transaction, applying the specified semantics.\n\tvoid setJdbcExceptionTranslator(org.springframework.jdbc.support.SQLExceptionTranslator jdbcExceptionTranslator); // Set the JDBC exception translator for Hibernate exception translation purposes.\n\tvoid setPrepareConnection(boolean prepareConnection); // Set whether to prepare the underlying JDBC Connection of a transactional Hibernate Session, that is, whether to apply a transaction-specific isolation level and/or the transaction's read-only flag to the underlying JDBC Connection.\n\torg.springframework.dao.DataAccessException translateExceptionIfPossible(RuntimeException ex); // This implementation delegates to EntityManagerFactoryUtils.\n}"}
{"index": 15533, "repo": "spring-batch-core-5.0.2", "des": "Step builder for PartitionStep instances.", "code": "public class PartitionStepBuilder extends StepBuilderHelper<PartitionStepBuilder> {\n\tPartitionStepBuilder aggregator(StepExecutionAggregator aggregator); // Provide a step execution aggregator for aggregating partitioned step executions into a single result for the PartitionStep itself.\n\tStep build();\n\tprotected StepExecutionAggregator getAggregator();\n\tprotected int getGridSize();\n\tprotected Partitioner getPartitioner();\n\tprotected PartitionHandler getPartitionHandler();\n\tprotected StepExecutionSplitter getSplitter();\n\tprotected Step getStep();\n\tprotected String getStepName();\n\tprotected org.springframework.core.task.TaskExecutor getTaskExecutor();\n\tPartitionStepBuilder gridSize(int gridSize); // A hint to the splitter(StepExecutionSplitter) about how many step executions are required.\n\tPartitionStepBuilder partitioner(String workerStepName, Partitioner partitioner); // Add a partitioner which can be used to create a StepExecutionSplitter.\n\tPartitionStepBuilder partitionHandler(PartitionHandler partitionHandler); // Provide an explicit partition handler that will carry out the work of the partition step.\n\tprotected PartitionStepBuilder self();\n\tPartitionStepBuilder splitter(StepExecutionSplitter splitter); // Provide an explicit StepExecutionSplitter instead of having one build from the partitioner(String, Partitioner).\n\tPartitionStepBuilder step(Step step); // Provide an actual step instance to execute in parallel.\n\tPartitionStepBuilder taskExecutor(org.springframework.core.task.TaskExecutor taskExecutor); // Provide a task executor to use when constructing a PartitionHandler from the step(Step).\n}"}
{"index": 1518, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents an external data dictionary.", "code": "Class PDExternalDataDictionary {\n\tCOSDictionary getCOSObject(); // returns the dictionary.\n\tString getSubtype(); // returns the subtype of the external data dictionary.\n\tString getType(); // returns the type of the external data dictionary.\n\tvoid setSubtype(String subtype); // This will set the subtype of the external data dictionary.\n}"}
{"index": 7623, "repo": "cassandra-all-4.1.2", "des": "Synchronous, file-based audit logger; just uses the standard logging mechansim.", "code": "Class FileAuditLogger {\n\tboolean isEnabled();\n\tvoid log(AuditLogEntry auditLogEntry); // Logs AuditLogEntry.\n\tvoid stop(); // Stop and cleanup any resources of IAuditLogger implementations.\n}"}
{"index": 11406, "repo": "spring-context-6.0.11", "des": "Simple CacheOperationSource implementation that allows attributes to be matched by registered name.", "code": "public class NameMatchCacheOperationSource extends Object implements CacheOperationSource, Serializable {\n\tvoid addCacheMethod(String methodName, Collection<CacheOperation> ops); // Add an attribute for a cacheable method.\n\tboolean equals(Object other);\n\tCollection<CacheOperation> getCacheOperations(Method method, Class<?> targetClass); // Return the collection of cache operations for this method, or null if the method contains no cacheable annotations.\n\tprotected boolean isMatch(String methodName, String mappedName); // Return if the given method name matches the mapped name.\n\tvoid setNameMap(Map<String,Collection<CacheOperation>> nameMap); // Set a name/attribute map, consisting of method names (e.g.\n}"}
{"index": 15433, "repo": "pulsar-client-api-3.0.0", "des": "Interface for custom message router that can be passed to a producer to select the partition that a particular messsage should be published on.", "code": "@Public @Stable public interface MessageRouter extends Serializable {\n\tdefault int choosePartition(Message<?> msg); // Deprecated. since 1.22.0.\n\tdefault int choosePartition(Message<?> msg, TopicMetadata metadata); // Choose a partition based on msg and the topic metadata.\n}"}
{"index": 9160, "repo": "hbase-server-3.0.0-alpha-4", "des": "Maintains the cache for visibility labels and also uses the zookeeper to update the labels in the system.", "code": "Class VisibilityLabelsCache {\n\tstatic VisibilityLabelsCache createAndGet(ZKWatcher watcher, org.apache.hadoop.conf.Configuration conf); // Creates the singleton instance, if not yet present, and returns the same.\n\tstatic VisibilityLabelsCache get();\n\tList<String> getGroupAuths(String[] groups);\n\tSet<Integer> getGroupAuthsAsOrdinals(String[] groups); // Returns the list of ordinals of labels associated with the groups\n\tString getLabel(int ordinal); // Returns the string associated with the ordinal.\n\tint getLabelOrdinal(String label);\n\tint getLabelsCount(); // Returns The total number of visibility labels.\n\tList<String> getUserAuths(String user);\n\tSet<Integer> getUserAuthsAsOrdinals(String user); // Returns the list of ordinals of labels associated with the user\n\tvoid refreshLabelsCache(byte[] data);\n\tvoid refreshUserAuthsCache(byte[] data);\n\tvoid writeToZookeeper(byte[] data, boolean labelsOrUserAuths);\n}"}
{"index": 5153, "repo": "druid-processing-26.0.0", "des": "A circular buffer that supports random bidirectional access.", "code": "Class CircularBuffer<E> {\n\tvoid add(E item);\n\tE get(int index); // Access object at a given index, starting from the earliest entry added and moving forward.\n\tE[] getBuffer();\n\tE getLatest(int index); // Access object at a given index, starting from the latest entry added and moving backwards.\n\tint size();\n}"}
{"index": 16948, "repo": "spring-integration-ip-6.1.2", "des": "Connection factories that act as TCP servers, listening for incoming connections.", "code": "public interface TcpServerConnectionFactory {\n\tint getPort(); // Return the port this server is listening on.\n\tSocketAddress getServerSocketAddress(); // Return the SocketAddress that the underlying ServerSocket is bound to.\n}"}
{"index": 8612, "repo": "avro-1.11.2", "des": "Encapsulates the ability to specify and configure a compression codec.", "code": "Class CodecFactory {\n\tstatic CodecFactory addCodec(String name, CodecFactory c); // Adds a new codec implementation.\n\tstatic CodecFactory bzip2Codec(); // bzip2 codec.\n\tprotected abstract Codec createInstance(); // Creates internal Codec.\n\tstatic CodecFactory deflateCodec(int compressionLevel); // Deflate codec, with specific compression.\n\tstatic CodecFactory fromString(String s); // Maps a codec name into a CodecFactory.\n\tstatic CodecFactory nullCodec(); // Null codec, for no compression.\n\tstatic CodecFactory snappyCodec(); // Snappy codec.\n\tstatic CodecFactory xzCodec(int compressionLevel); // XZ codec, with specific compression.\n\tstatic CodecFactory zstandardCodec(int level); // zstandard codec, with specific compression level.\n\tstatic CodecFactory zstandardCodec(int level, boolean useChecksum); // zstandard codec, with specific compression level.\n\tstatic CodecFactory zstandardCodec(int level, boolean useChecksum, boolean useBufferPool); // zstandard codec, with specific compression level, checksum, and bufferPool\n}"}
{"index": 4366, "repo": "beam-sdks-java-core-2.49.0", "des": "Represents type information for a Java type that will be used to infer a Schema type.", "code": "Class FieldValueTypeInformation {\n\tstatic FieldValueTypeInformation forField(java.lang.reflect.Field field, int index);\n\tstatic FieldValueTypeInformation forGetter(java.lang.reflect.Method method, int index);\n\tstatic FieldValueTypeInformation forOneOf(java.lang.String name, boolean nullable, java.util.Map<java.lang.String,FieldValueTypeInformation> oneOfTypes);\n\tstatic FieldValueTypeInformation forSetter(java.lang.reflect.Method method);\n\tstatic FieldValueTypeInformation forSetter(java.lang.reflect.Method method, java.lang.String setterPrefix);\n\tabstract @Nullable java.lang.String getDescription(); // If the field has a description, returns the description for the field.\n\tabstract @Nullable FieldValueTypeInformation getElementType(); // If the field is a container type, returns the element type.\n\tabstract @Nullable java.lang.reflect.Field getField();\n\tstatic <T extends java.lang.reflect.AnnotatedElement & java.lang.reflect.Member>@Nullable java.lang.String getFieldDescription(T member);\n\tabstract @Nullable FieldValueTypeInformation getMapKeyType(); // If the field is a map type, returns the key type.\n\tabstract @Nullable FieldValueTypeInformation getMapValueType(); // If the field is a map type, returns the key type.\n\tabstract @Nullable java.lang.reflect.Method getMethod();\n\tabstract java.lang.String getName(); // Returns the field name.\n\tstatic <T extends java.lang.reflect.AnnotatedElement & java.lang.reflect.Member>java.lang.String getNameOverride(java.lang.String original, T member);\n\tabstract @Nullable java.lang.Integer getNumber(); // Optionally returns the field index.\n\tstatic <T extends java.lang.reflect.AnnotatedElement & java.lang.reflect.Member>int getNumberOverride(int index, T member);\n\tabstract java.util.Map<java.lang.String,FieldValueTypeInformation> getOneOfTypes();\n\tabstract java.lang.Class<?> getRawType(); // Returns the raw class type.\n\tabstract TypeDescriptor<?> getType(); // Returns the field type.\n\tabstract boolean isNullable(); // Returns whether the field is nullable.\n\tFieldValueTypeInformation withName(java.lang.String name);\n}"}
{"index": 13658, "repo": "spring-webmvc-6.0.11", "des": "Abstract base class for LocaleContextResolver implementations.", "code": "public abstract class AbstractLocaleContextResolver extends AbstractLocaleResolver implements LocaleContextResolver {\n\tTimeZone getDefaultTimeZone(); // Get the default TimeZone that this resolver is supposed to fall back to, if any.\n\tvoid setDefaultTimeZone(TimeZone defaultTimeZone); // Set a default TimeZone that this resolver will return if no other time zone is found.\n}"}
{"index": 5083, "repo": "commons-collections-3.2.2", "des": "Decorates another Collection to transform objects that are added.", "code": "Class TransformedCollection {\n\tboolean add(Object object);\n\tboolean addAll(Collection coll);\n\tstatic Collection decorate(Collection coll, Transformer transformer); // Factory method to create a transforming collection.\n\tprotected Collection transform(Collection coll); // Transforms a collection.\n\tprotected Object transform(Object object); // Transforms an object.\n}"}
{"index": 10266, "repo": "spring-core-6.0.11", "des": "Resource implementation for java.io.File and java.nio.file.Path handles with a file system target.", "code": "public class FileSystemResource extends AbstractResource implements WritableResource {\n\tlong contentLength(); // This implementation returns the underlying File/Path length.\n\tResource createRelative(String relativePath); // This implementation creates a FileSystemResource, applying the given path relative to the path of the underlying file of this resource descriptor.\n\tboolean equals(Object obj); // This implementation compares the underlying file paths.\n\tboolean exists(); // This implementation returns whether the underlying file exists.\n\tbyte[] getContentAsByteArray(); // Return the contents of this resource as a byte array.\n\tString getContentAsString(Charset charset); // Returns the contents of this resource as a string, using the specified charset.\n\tString getDescription(); // This implementation returns a description that includes the absolute path of the file.\n\tFile getFile(); // This implementation returns the underlying File reference.\n\tString getFilename(); // This implementation returns the name of the file.\n\tInputStream getInputStream(); // This implementation opens an NIO file stream for the underlying file.\n\tOutputStream getOutputStream(); // This implementation opens a FileOutputStream for the underlying file.\n\tfinal String getPath(); // Return the file path for this resource.\n\tURI getURI(); // This implementation returns a URI for the underlying file.\n\tURL getURL(); // This implementation returns a URL for the underlying file.\n\tboolean isFile(); // This implementation always indicates a file.\n\tboolean isReadable(); // This implementation checks whether the underlying file is marked as readable (and corresponds to an actual file with content, not to a directory).\n\tboolean isWritable(); // This implementation checks whether the underlying file is marked as writable (and corresponds to an actual file with content, not to a directory).\n\tlong lastModified(); // This implementation returns the underlying File/Path last-modified time.\n\tReadableByteChannel readableChannel(); // This implementation opens a FileChannel for the underlying file.\n\tWritableByteChannel writableChannel(); // This implementation opens a FileChannel for the underlying file.\n}"}
{"index": 11379, "repo": "spring-context-6.0.11", "des": "Metadata that indicates a JMX notification emitted by a bean.", "code": "public class ManagedNotification extends Object {\n\tString getDescription(); // Return a description for this notification.\n\tString getName(); // Return the name of this notification.\n\tString[] getNotificationTypes(); // Return the list of notification types.\n\tvoid setDescription(String description); // Set a description for this notification.\n\tvoid setName(String name); // Set the name of this notification.\n\tvoid setNotificationType(String notificationType); // Set a single notification type, or a list of notification types as comma-delimited String.\n\tvoid setNotificationTypes(String... notificationTypes); // Set a list of notification types.\n}"}
{"index": 1536, "repo": "pdfbox-3.0.0-beta1", "des": "ICCBased color spaces are based on a cross-platform color profile as defined by the International Color Consortium (ICC).", "code": "Class PDICCBased {\n\tstatic PDICCBased create(COSArray iccArray, PDResources resources); // Creates a new ICC color space using the PDF array, optionally using a resource cache.\n\tPDColorSpace getAlternateColorSpace(); // Returns a list of alternate color spaces for non-conforming readers.\n\tint getColorSpaceType(); // Returns the type of the color space in the ICC profile.\n\tfloat[] getDefaultDecode(int bitsPerComponent); // Returns the default decode array for this color space.\n\tPDColor getInitialColor(); // Returns the initial color value for this color space.\n\tCOSStream getMetadata(); // Returns the metadata stream for this object, or null if there is no metadata stream.\n\tString getName(); // Returns the name of the color space.\n\tint getNumberOfComponents(); // Returns the number of components in this color space\n\tPDStream getPDStream(); // Get the underlying ICC profile stream.\n\tPDRange getRangeForComponent(int n); // Returns the range for a certain component number.\n\tvoid setAlternateColorSpaces(List<PDColorSpace> list); // Sets the list of alternateColorSpace color spaces.\n\tvoid setMetadata(COSStream metadata); // Sets the metadata stream that is associated with this color space.\n\tvoid setRangeForComponent(PDRange range, int n); // Sets the range for this color space.\n\tBufferedImage toRawImage(WritableRaster raster); // Returns the image in this colorspace or null.\n\tfloat[] toRGB(float[] value); // Returns the RGB equivalent of the given color value.\n\tBufferedImage toRGBImage(WritableRaster raster); // Returns the (A)RGB equivalent of the given raster.\n}"}
{"index": 13001, "repo": "spring-aop-6.0.11", "des": "Generic auto proxy creator that builds AOP proxies for specific beans based on detected Advisors for each bean.", "code": "public abstract class AbstractAdvisorAutoProxyCreator extends AbstractAutoProxyCreator {\n\tprotected boolean advisorsPreFiltered(); // This auto-proxy creator always returns pre-filtered Advisors.\n\tprotected void extendAdvisors(List<Advisor> candidateAdvisors); // Extension hook that subclasses can override to register additional Advisors, given the sorted Advisors obtained to date.\n\tprotected List<Advisor> findAdvisorsThatCanApply(List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName); // Search the given candidate Advisors to find all Advisors that can apply to the specified bean.\n\tprotected List<Advisor> findCandidateAdvisors(); // Find all candidate Advisors to use in auto-proxying.\n\tprotected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName); // Find all eligible Advisors for auto-proxying this class.\n\tprotected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource targetSource); // Return whether the given bean is to be proxied, what additional advices (e.g.\n\tprotected void initBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\tprotected boolean isEligibleAdvisorBean(String beanName); // Return whether the Advisor bean with the given name is eligible for proxying in the first place.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tprotected List<Advisor> sortAdvisors(List<Advisor> advisors); // Sort advisors based on ordering.\n}"}
{"index": 15124, "repo": "spring-data-elasticsearch-5.1.2", "des": "Options that may be passed to an DocumentOperations.bulkIndex(List, BulkOptions, IndexCoordinates) or DocumentOperations.bulkUpdate(List, BulkOptions, IndexCoordinates) call.", "code": "public class BulkOptions extends Object {\n\tstatic BulkOptions.BulkOptionsBuilder builder(); // Create a new BulkOptions.BulkOptionsBuilder to build BulkOptions.\n\tstatic BulkOptions defaultOptions(); // Return default BulkOptions.\n\tString getPipeline();\n\tRefreshPolicy getRefreshPolicy();\n\tString getRoutingId();\n\tDuration getTimeout();\n\tActiveShardCount getWaitForActiveShards();\n}"}
{"index": 11433, "repo": "spring-context-6.0.11", "des": "Simple implementation of the ApplicationEventMulticaster interface.", "code": "public class SimpleApplicationEventMulticaster extends AbstractApplicationEventMulticaster {\n\tprotected org.springframework.util.ErrorHandler getErrorHandler(); // Return the current error handler for this multicaster.\n\tprotected Executor getTaskExecutor(); // Return the current task executor for this multicaster.\n\tprotected void invokeListener(ApplicationListener<?> listener, ApplicationEvent event); // Invoke the given listener with the given event.\n\tvoid multicastEvent(ApplicationEvent event); // Multicast the given application event to appropriate listeners.\n\tvoid multicastEvent(ApplicationEvent event, org.springframework.core.ResolvableType eventType); // Multicast the given application event to appropriate listeners.\n\tvoid setErrorHandler(org.springframework.util.ErrorHandler errorHandler); // Set the ErrorHandler to invoke in case an exception is thrown from a listener.\n\tvoid setTaskExecutor(Executor taskExecutor); // Set a custom executor (typically a TaskExecutor) to invoke each listener with.\n}"}
{"index": 11284, "repo": "spring-context-6.0.11", "des": "BeanShell-based implementation of Spring's ScriptEvaluator strategy interface.", "code": "public class BshScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware {\n\tObject evaluate(ScriptSource script); // Evaluate the given script.\n\tObject evaluate(ScriptSource script, Map<String,Object> arguments); // Evaluate the given script with the given arguments.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}"}
{"index": 18311, "repo": "commons-configuration2-2.9.0", "des": "An interface controlling synchronization of configuration instances.", "code": "Interface Synchronizer {\n\tvoid beginRead(); // Notifies this Synchronizer that the current thread is going to start a read operation on the managed configuration.\n\tvoid beginWrite(); // Notifies this Synchronizer that the current thread is going to start a write operation on the managed configuration.\n\tvoid endRead(); // Notifies this Synchronizer that the current thread has finished its read operation.\n\tvoid endWrite(); // Notifies this Synchronizer that the current thread has finished its write operation.\n}"}
{"index": 6416, "repo": "exoplayer-core-2.9.6", "des": "Interface for loaders of ads, which can be used with AdsMediaSource.", "code": "Interface AdsLoader {\n\tvoid handlePrepareError(int adGroupIndex, int adIndexInAdGroup, java.io.IOException exception); // Notifies the ads loader that the player was not able to prepare media for a given ad.\n\tvoid release(); // Releases the loader.\n\tvoid setPlayer(Player player); // Sets the player that will play the loaded ads.\n\tvoid setSupportedContentTypes(int... contentTypes); // Sets the supported content types for ad media.\n\tvoid start(AdsLoader.EventListener eventListener, AdsLoader.AdViewProvider adViewProvider); // Starts using the ads loader for playback.\n\tvoid stop(); // Stops using the ads loader for playback and deregisters the event listener.\n}"}
{"index": 18535, "repo": "hibernate-core-5.6.15.Final", "des": "Specialized DomainDataCachingConfig describing the requested caching config for a particular entity hierarchy's state data", "code": "Interface EntityDataCachingConfig {\n\tjava.util.Set<NavigableRole> getCachedTypes(); // The list of specific subclasses of the root that are actually written to cache.\n\tjava.util.function.Supplier<java.util.Comparator> getVersionComparatorAccess(); // Access to the comparator to be used with the entity's version.\n\tboolean isVersioned(); // Mainly here to allow optimization of not having to know the actual comparator instance to use here yet.\n}"}
{"index": 192, "repo": "commons-collections4-4.4", "des": "Predicate implementation that throws an exception if the input is null.", "code": "Class NullIsExceptionPredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning the result of the decorated predicate once a null check is performed.\n\tPredicate<? super T>[] getPredicates(); // Gets the predicate being decorated.\n\tstatic <T> Predicate<T> nullIsExceptionPredicate(Predicate<? super T> predicate); // Factory to create the null exception predicate.\n}"}
{"index": 17020, "repo": "spring-integration-core-6.1.2", "des": "A pattern-based AbstractHeaderMapper.HeaderMatcher that matches if the specified header matches the specified simple pattern.", "code": "protected static class AbstractHeaderMapper.SinglePatternBasedHeaderMatcher extends Object implements AbstractHeaderMapper.HeaderMatcher {\n\tboolean isNegated(); // Return true if this match should be explicitly excluded from the mapping.\n\tboolean matchHeader(String headerName); // Specify if the given headerName matches.\n}"}
{"index": 816, "repo": "ignite-core-2.15.0", "des": "Filter chain implementation for nio server filters.", "code": "Class GridNioFilterChain<T> {\n\tvoid onExceptionCaught(GridNioSession ses, IgniteCheckedException e); // Starts chain notification from head to tail.\n\tvoid onMessageReceived(GridNioSession ses, Object msg); // Starts chain notification from head to tail.\n\tGridNioFuture<?> onPauseReads(GridNioSession ses); // Starts chain notification from tail to head.\n\tGridNioFuture<?> onResumeReads(GridNioSession ses); // Starts chain notification from tail to head.\n\tGridNioFuture<Boolean> onSessionClose(GridNioSession ses); // Starts chain notification from tail to head.\n\tvoid onSessionClosed(GridNioSession ses); // Starts chain notification from head to tail.\n\tvoid onSessionIdleTimeout(GridNioSession ses); // Called when session is idle for longer time that is allowed by NIO server.\n\tvoid onSessionOpened(GridNioSession ses); // Starts chain notification from head to tail.\n\tGridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg, boolean fut, IgniteInClosure<IgniteException> ackC); // Starts chain notification from tail to head.\n\tvoid onSessionWriteTimeout(GridNioSession ses); // Called when session has not empty write buffer that has not been fully flushed during max timeout allowed by NIO server.\n\tvoid start(); // Starts all filters in order from application layer to the network layer.\n\tvoid stop(); // Stops all filters in order from network layer to the application layer.\n}"}
{"index": 5183, "repo": "druid-processing-26.0.0", "des": "This writer output encoded values to the given ByteBuffer or OutputStream.", "code": "Interface CompressionFactory.LongEncodingWriter {\n\tvoid flush(); // Flush the unwritten content to the current output.\n\tint getBlockSize(int bytesPerBlock); // Get the number of values that can be encoded into each block for the given block size in bytes\n\tint getNumBytes(int values); // Get the number of bytes required to encoding the given number of values\n\tint metaSize();\n\tvoid putMeta(ByteBuffer metaOut, CompressionStrategy strategy); // Output the header values of the associating encoding format to the given outputStream.\n\tvoid setBuffer(ByteBuffer buffer); // Data will be written starting from current position of the buffer, and the position of the buffer will be updated as content is written.\n\tvoid setOutputStream(WriteOutBytes output);\n\tvoid write(long value);\n}"}
{"index": 1193, "repo": "ignite-core-2.15.0", "des": "ANALYZE command to mark object for statistics collection.", "code": "Class SqlAnalyzeCommand {\n\tStatisticsObjectConfiguration buildConfig(StatisticsTarget target, Map<String,String> params); // Build statistics object configuration from command arguments.\n\tCollection<StatisticsObjectConfiguration> configurations();\n\tSqlCommand parse(SqlLexer lex); // Parse command.\n}"}
{"index": 14459, "repo": "wicket-core-10.0.0-M1", "des": "A PartialPageUpdate that serializes itself to XML.", "code": "public class XmlPartialPageUpdate extends PartialPageUpdate {\n\tprotected CharSequence encode(CharSequence str);\n\tvoid setContentType(org.apache.wicket.request.http.WebResponse response, String encoding); // Sets the Content-Type header to indicate the type of the response.\n\tprotected void writeComponent(org.apache.wicket.request.Response response, String markupId, CharSequence contents); // Writes a component to the response.\n\tprotected void writeEvaluation(org.apache.wicket.request.Response response, CharSequence contents); // Write evaluation.\n\tprotected void writeFooter(org.apache.wicket.request.Response response, String encoding);\n\tprotected void writeHeader(org.apache.wicket.request.Response response, String encoding); // Writes the head part of the response.\n\tprotected void writeHeaderContribution(org.apache.wicket.request.Response response, CharSequence contents); // Writes a header contribution to the response.\n\tprotected void writePriorityEvaluation(org.apache.wicket.request.Response response, CharSequence contents); // Write priority-evaluation.\n}"}
{"index": 9992, "repo": "commons-text-1.10.0", "des": "Provides access to matchers defined in this package.", "code": "Class StringMatcherFactory {\n\tStringMatcher andMatcher(StringMatcher... stringMatchers); // Creates a matcher that matches all of the given matchers in order.\n\tStringMatcher charMatcher(char ch); // Constructor that creates a matcher from a character.\n\tStringMatcher charSetMatcher(char... chars); // Constructor that creates a matcher from a set of characters.\n\tStringMatcher charSetMatcher(String chars); // Creates a matcher from a string representing a set of characters.\n\tStringMatcher commaMatcher(); // Returns a matcher which matches the comma character.\n\tStringMatcher doubleQuoteMatcher(); // Returns a matcher which matches the double quote character.\n\tStringMatcher noneMatcher(); // Matches no characters.\n\tStringMatcher quoteMatcher(); // Returns a matcher which matches the single or double quote character.\n\tStringMatcher singleQuoteMatcher(); // Returns a matcher which matches the single quote character.\n\tStringMatcher spaceMatcher(); // Returns a matcher which matches the space character.\n\tStringMatcher splitMatcher(); // Matches the same characters as StringTokenizer, namely space, tab, newline and form feed.\n\tStringMatcher stringMatcher(char... chars); // Creates a matcher from a string.\n\tStringMatcher stringMatcher(String str); // Creates a matcher from a string.\n\tStringMatcher tabMatcher(); // Returns a matcher which matches the tab character.\n\tStringMatcher trimMatcher(); // Matches the String trim() whitespace characters.\n}"}
{"index": 9929, "repo": "iceberg-api-1.3.0", "des": "Represents a single field in a PartitionSpec.", "code": "Class PartitionField {\n\tboolean equals(java.lang.Object other);\n\tint fieldId(); // Returns the partition field id across all the table metadata's partition specs.\n\tjava.lang.String name(); // Returns the name of this partition field.\n\tint sourceId(); // Returns the field id of the source field in the spec's table schema.\n\tTransform<?,?> transform(); // Returns the transform used to produce partition values from source values.\n}"}
{"index": 11703, "repo": "spring-cloud-commons-3.1.7", "des": "A ReactiveDiscoveryClient that will use the properties file as a source of service instances.", "code": "public class SimpleReactiveDiscoveryClient extends Object implements ReactiveDiscoveryClient {\n\tString description(); // A human-readable description of the implementation, used in HealthIndicator.\n\treactor.core.publisher.Flux<ServiceInstance> getInstances(String serviceId); // Gets all ServiceInstances associated with a particular serviceId.\n\tint getOrder(); // Default implementation for getting order of discovery clients.\n\treactor.core.publisher.Flux<String> getServices();\n}"}
{"index": 1816, "repo": "kafka-clients-3.5.0", "des": "Describes whether the server should require or request client authentication.", "code": "Enum SslClientAuth {\n\tstatic SslClientAuth forConfig(String key);\n\tstatic SslClientAuth valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SslClientAuth[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14004, "repo": "spring-retry-2.0.2", "des": "A RetryPolicy that composes a list of other policies and delegates calls to them in order.", "code": "public class CompositeRetryPolicy extends Object implements RetryPolicy {\n\tboolean canRetry(RetryContext context); // Delegate to the policies that were in operation when the context was created.\n\tvoid close(RetryContext context); // Delegate to the policies that were in operation when the context was created.\n\tRetryContext open(RetryContext parent); // Creates a new context that copies the existing policies and keeps a list of the contexts from each one.\n\tvoid registerThrowable(RetryContext context, Throwable throwable); // Delegate to the policies that were in operation when the context was created.\n\tvoid setOptimistic(boolean optimistic); // Setter for optimistic.\n\tvoid setPolicies(RetryPolicy[] policies); // Setter for policies.\n}"}
{"index": 18010, "repo": "spring-ws-core-4.0.5", "des": "Helper class for for loading default implementations of an interface.", "code": "public class DefaultStrategiesHelper extends Object {\n\t<T> List<T> getDefaultStrategies(Class<T> strategyInterface); // Create a list of strategy objects for the given strategy interface.\n\t<T> List<T> getDefaultStrategies(Class<T> strategyInterface, org.springframework.context.ApplicationContext applicationContext); // Create a list of strategy objects for the given strategy interface.\n\t<T> T getDefaultStrategy(Class<T> strategyInterface); // Return the default strategy object for the given strategy interface.\n\t<T> T getDefaultStrategy(Class<T> strategyInterface, org.springframework.context.ApplicationContext applicationContext); // Return the default strategy object for the given strategy interface.\n}"}
{"index": 17886, "repo": "spring-web-6.0.11", "des": "Defines a builder that adds headers to the response entity.", "code": "public static interface ResponseEntity.HeadersBuilder<B extends ResponseEntity.HeadersBuilder<B>> {\n\tB allow(HttpMethod... allowedMethods); // Set the set of allowed HTTP methods, as specified by the Allow header.\n\t<T> ResponseEntity<T> build(); // Build the response entity with no body.\n\tB cacheControl(CacheControl cacheControl); // Set the caching directives for the resource, as specified by the HTTP 1.1 Cache-Control header.\n\tB eTag(String etag); // Set the entity tag of the body, as specified by the ETag header.\n\tB header(String headerName, String... headerValues); // Add the given, single header value under the given name.\n\tB headers(Consumer<HttpHeaders> headersConsumer); // Manipulate this entity's headers with the given consumer.\n\tB headers(HttpHeaders headers); // Copy the given headers into the entity's headers map.\n\tB lastModified(long lastModified); // Set the time the resource was last changed, as specified by the Last-Modified header.\n\tB lastModified(Instant lastModified); // Set the time the resource was last changed, as specified by the Last-Modified header.\n\tB lastModified(ZonedDateTime lastModified); // Set the time the resource was last changed, as specified by the Last-Modified header.\n\tB location(URI location); // Set the location of a resource, as specified by the Location header.\n\tB varyBy(String... requestHeaders); // Configure one or more request header names (e.g.\n}"}
{"index": 5050, "repo": "commons-collections-3.2.2", "des": "Decorates another Bag to validate that additions match a specified predicate.", "code": "Class PredicatedBag {\n\tboolean add(Object object, int count); // Adds nCopies copies of the specified object to the Bag.\n\tstatic Bag decorate(Bag bag, Predicate predicate); // Factory method to create a predicated (validating) bag.\n\tprotected Bag getBag(); // Gets the decorated bag.\n\tint getCount(Object object); // Returns the number of occurrences (cardinality) of the given object currently in the bag.\n\tboolean remove(Object object, int count); // Removes nCopies copies of the specified object from the Bag.\n\tSet uniqueSet(); // Returns a Set of unique elements in the Bag.\n}"}
{"index": 5580, "repo": "org.apache.karaf.main-2.4.4", "des": "This class has debug constants which can be used by the Framework implementation and Adaptor implementations.", "code": "Class Debug {\n\tstatic void print(boolean x); // Prints x to the PrintStream\n\tstatic void print(char x); // Prints x to the PrintStream\n\tstatic void print(char[] x); // Prints x to the PrintStream\n\tstatic void print(double x); // Prints x to the PrintStream\n\tstatic void print(float x); // Prints x to the PrintStream\n\tstatic void print(int x); // Prints x to the PrintStream\n\tstatic void print(long x); // Prints x to the PrintStream\n\tstatic void print(Object x); // Prints x to the PrintStream\n\tstatic void print(String x); // Prints x to the PrintStream\n\tstatic void println(boolean x); // Prints x to the PrintStream\n\tstatic void println(char x); // Prints x to the PrintStream\n\tstatic void println(char[] x); // Prints x to the PrintStream\n\tstatic void println(double x); // Prints x to the PrintStream\n\tstatic void println(float x); // Prints x to the PrintStream\n\tstatic void println(int x); // Prints x to the PrintStream\n\tstatic void println(long x); // Prints x to the PrintStream\n\tstatic void println(Object x); // Prints x to the PrintStream\n\tstatic void println(String x); // Prints x to the PrintStream\n\tstatic void printStackTrace(Throwable t); // Prints t to the PrintStream\n}"}
{"index": 13164, "repo": "spring-test-6.0.11", "des": "AotTestContextInitializers provides mappings from test classes to AOT-optimized context initializers.", "code": "public class AotTestContextInitializers extends Object {\n\torg.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext> getContextInitializer(Class<?> testClass); // Get the AOT ApplicationContextInitializer for the specified test class.\n\tClass<org.springframework.context.ApplicationContextInitializer<?>> getContextInitializerClass(Class<?> testClass); // Get the AOT ApplicationContextInitializer Class for the specified test class.\n\tboolean isSupportedTestClass(Class<?> testClass); // Determine if the specified test class has an AOT-optimized application context initializer.\n}"}
{"index": 2255, "repo": "hive-exec-4.0.0-alpha-2", "des": "ReplAck, used for repl acknowledgement constants.", "code": "Enum ReplAck {\n\tstatic ReplAck valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ReplAck[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14985, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A representation of the claims returned in an OAuth 2.0 Token Introspection Response.", "code": "public final class OAuth2TokenIntrospection extends Object implements org.springframework.security.oauth2.core.OAuth2TokenIntrospectionClaimAccessor, Serializable {\n\tstatic OAuth2TokenIntrospection.Builder builder(); // Constructs a new OAuth2TokenIntrospection.Builder initialized with the active claim to false.\n\tstatic OAuth2TokenIntrospection.Builder builder(boolean active); // Constructs a new OAuth2TokenIntrospection.Builder initialized with the provided active claim.\n\tMap<String,Object> getClaims(); // Returns the claims in the Token Introspection Response.\n\tstatic OAuth2TokenIntrospection.Builder withClaims(Map<String,Object> claims); // Constructs a new OAuth2TokenIntrospection.Builder initialized with the provided claims.\n}"}
{"index": 4056, "repo": "zookeeper-3.8.2", "des": "Enumeration of states the ZooKeeper may be at the event.", "code": "Enum Watcher.Event.KeeperState {\n\tstatic Watcher.Event.KeeperState fromInt(int intValue);\n\tint getIntValue();\n\tstatic Watcher.Event.KeeperState valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Watcher.Event.KeeperState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10826, "repo": "spring-boot-actuator-3.1.1", "des": "An OperationArgumentResolver for producible enums.", "code": "public class ProducibleOperationArgumentResolver extends Object implements OperationArgumentResolver {\n\tboolean canResolve(Class<?> type); // Return whether an argument of the given type can be resolved.\n\t<T> T resolve(Class<T> type); // Resolves an argument of the given type.\n}"}
{"index": 10326, "repo": "spring-core-6.0.11", "des": "Implementation of the DataBufferFactory interface based on a Netty 4 ByteBufAllocator.", "code": "public class NettyDataBufferFactory extends Object implements DataBufferFactory {\n\tNettyDataBuffer allocateBuffer(); // Deprecated.\n\tNettyDataBuffer allocateBuffer(int initialCapacity); // Allocate a data buffer of the given initial capacity.\n\tio.netty.buffer.ByteBufAllocator getByteBufAllocator(); // Return the ByteBufAllocator used by this factory.\n\tboolean isDirect(); // Indicates whether this factory allocates direct buffers (i.e.\n\tDataBuffer join(List<? extends DataBuffer> dataBuffers); // Return a new DataBuffer composed of the dataBuffers elements joined together.\n\tstatic io.netty.buffer.ByteBuf toByteBuf(DataBuffer dataBuffer); // Return the given Netty DataBuffer as a ByteBuf.\n\tDataBuffer wrap(byte[] bytes); // Wrap the given byte array in a DataBuffer.\n\tNettyDataBuffer wrap(io.netty.buffer.ByteBuf byteBuf); // Wrap the given Netty ByteBuf in a NettyDataBuffer.\n\tNettyDataBuffer wrap(ByteBuffer byteBuffer); // Wrap the given ByteBuffer in a DataBuffer.\n}"}
{"index": 9312, "repo": "hadoop-yarn-api-3.3.6", "des": "Enumeration that controls the scope of applications fetched.", "code": "Enum ApplicationsRequestScope {\n\tstatic ApplicationsRequestScope valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ApplicationsRequestScope[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2346, "repo": "commons-geometry-euclidean-1.0", "des": "Extension of the BoundarySource interface for Euclidean 2D space.", "code": "Interface BoundarySource2D {\n\tdefault Bounds2D getBounds(); // Get a Bounds2D object defining the axis-aligned box containing all vertices in the boundaries for this instance.\n\tdefault List<LinecastPoint2D> linecast(LineConvexSubset subset); // Intersect the given line subset against the boundaries in this instance, returning a list of all intersections in order of increasing position along the line.\n\tdefault LinecastPoint2D linecastFirst(LineConvexSubset subset); // Intersect the given line subset against the boundaries in this instance, returning the first intersection found when traveling in the direction of the line subset from its start location.\n\tstatic BoundarySource2D of(Collection<LineConvexSubset> boundaries); // Return a BoundarySource2D instance containing the given boundaries.\n\tstatic BoundarySource2D of(LineConvexSubset... boundaries); // Return a BoundarySource2D instance containing the given boundaries.\n\tdefault BoundaryList2D toList(); // Return a BoundaryList2D containing the boundaries in this instance.\n\tdefault RegionBSPTree2D toTree(); // Return a BSP tree constructed from the boundaries contained in this instance.\n}"}
{"index": 18214, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Commonality for non-scalar root returns for a native query result mapping", "code": "Interface NativeQueryNonScalarRootReturn {\n\tjava.lang.String getAlias(); // Access the alias associated with this return\n\tLockMode getLockMode(); // Access the LockMode associated with this return\n\tjava.util.List<JaxbHbmNativeQueryPropertyReturnType> getReturnProperty(); // Access the nested property mappings associated with this return\n}"}
{"index": 2727, "repo": "commons-dbcp2-2.9.0", "des": "A pooling DataSource appropriate for deployment within J2EE environment.", "code": "Class SharedPoolDataSource {\n\tvoid close(); // Closes pool being maintained by this data source.\n\tprotected org.apache.commons.dbcp2.datasources.PooledConnectionManager getConnectionManager(org.apache.commons.dbcp2.datasources.UserPassKey userPassKey);\n\tint getMaxTotal(); // Gets BaseGenericObjectPool.getMaxTotal() for this pool.\n\tint getNumActive(); // Gets the number of active connections in the pool.\n\tint getNumIdle(); // Gets the number of idle connections in the pool.\n\tprotected org.apache.commons.dbcp2.datasources.PooledConnectionAndInfo getPooledConnectionAndInfo(String userName, String userPassword); // This method is protected but can only be implemented in this package because PooledConnectionAndInfo is a package private type.\n\tReference getReference(); // Creates a new Reference to a SharedPoolDataSource.\n\tvoid setMaxTotal(int maxTotal); // Sets BaseGenericObjectPool.getMaxTotal() for this pool.\n\tprotected void setupDefaults(Connection connection, String userName);\n\tprotected void toStringFields(StringBuilder builder);\n}"}
{"index": 7415, "repo": "mahout-math-0.13.0", "des": "Open hash map from float keys to long values.", "code": "Class OpenFloatLongHashMap {\n\tlong adjustOrPutValue(float key, long newValue, long incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(float key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(long value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(FloatProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(FloatLongProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tlong get(float key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(float key);\n\tprotected int indexOfKey(float key);\n\tprotected int indexOfValue(long value);\n\tIterator<OpenFloatLongHashMap.MapElement> iterator();\n\tvoid keys(FloatArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(FloatLongProcedure condition, FloatArrayList keyList, LongArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(float key, long value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(float key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(LongArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 1186, "repo": "ignite-core-2.15.0", "des": "Cache eviction policy which will select the minimum cache entry for eviction.", "code": "Class SortedEvictionPolicy<K,V> {\n\tint getCurrentSize();\n\tObject getMBean();\n\tCollection<EvictableEntry<K,V>> queue(); // Gets read-only view of backed queue in proper order.\n\tvoid readExternal(ObjectInput in);\n\tprotected boolean removeMeta(Object meta); // Removes holder from backed queue and marks holder as removed.\n\tSortedEvictionPolicy<K,V> setBatchSize(int batchSize); // Sets batch size.\n\tSortedEvictionPolicy<K,V> setMaxMemorySize(long maxMemSize); // Sets maximum allowed cache size in bytes.\n\tSortedEvictionPolicy<K,V> setMaxSize(int max); // Sets maximum allowed size of cache before entry will start getting evicted.\n\tprotected int shrink0(); // Tries to remove one item from queue.\n\tprotected boolean touch(EvictableEntry<K,V> entry);\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 10699, "repo": "spring-tx-6.0.11", "des": "Composite TransactionAttributeSource implementation that iterates over a given array of TransactionAttributeSource instances.", "code": "public class CompositeTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable {\n\tTransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass); // Return the transaction attribute for the given method, or null if the method is non-transactional.\n\tfinal TransactionAttributeSource[] getTransactionAttributeSources(); // Return the TransactionAttributeSource instances that this CompositeTransactionAttributeSource combines.\n\tboolean isCandidateClass(Class<?> targetClass); // Determine whether the given class is a candidate for transaction attributes in the metadata format of this TransactionAttributeSource.\n}"}
{"index": 9153, "repo": "hbase-server-3.0.0-alpha-4", "des": "A block cache that is memory-aware using HeapSize, memory bounded using the W-TinyLFU eviction algorithm, and concurrent.", "code": "Class TinyLfuBlockCache {\n\tvoid cacheBlock(BlockCacheKey key, Cacheable value); // Add block to cache (defaults to not in-memory).\n\tvoid cacheBlock(BlockCacheKey cacheKey, Cacheable value, boolean inMemory); // Add block to cache.\n\tboolean containsBlock(BlockCacheKey cacheKey); // Whether the cache contains the block with specified cacheKey\n\tboolean evictBlock(BlockCacheKey cacheKey); // Evict block from cache.\n\tint evictBlocksByHfileName(String hfileName); // Evicts all blocks for the given HFile.\n\tCacheable getBlock(BlockCacheKey cacheKey, boolean caching, boolean repeat, boolean updateCacheMetrics); // Fetch block from cache.\n\tBlockCache[] getBlockCaches(); // Returns The list of sub blockcaches that make up this one; returns null if no sub caches.\n\tlong getBlockCount(); // Returns the number of blocks currently cached in the block cache.\n\tlong getCurrentDataSize(); // Returns the occupied size of data blocks, in bytes.\n\tlong getCurrentSize(); // Returns the occupied size of the block cache, in bytes.\n\tlong getDataBlockCount(); // Returns the number of data blocks currently cached in the block cache.\n\tlong getFreeSize(); // Returns the free size of the block cache, in bytes.\n\tlong getMaxSize(); // Returns the Max size of the block cache, in bytes.\n\tCacheStats getStats(); // Get the statistics for this block cache.\n\tlong heapSize();\n\tIterator<CachedBlock> iterator(); // Returns Iterator over the blocks in the cache.\n\tvoid setMaxSize(long size); // Sets the max heap size that can be used by the BlockCache.\n\tvoid setVictimCache(BlockCache victimCache); // Specifies the secondary cache.\n\tvoid shutdown(); // Shutdown the cache.\n\tlong size(); // Returns the total size of the block cache, in bytes.\n}"}
{"index": 16798, "repo": "spring-expression-6.0.11", "des": "Implements greater-than-or-equal operator.", "code": "public class OpGE extends Operator {\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode for this node into the supplied visitor.\n\tBooleanTypedValue getValueInternal(ExpressionState state);\n\tboolean isCompilable(); // Check whether a node can be compiled to bytecode.\n}"}
{"index": 8344, "repo": "spring-ws-3.0.10.RELEASE", "des": "Defines the contract for a precompiled XPath expression.", "code": "Interface XPathExpression {\n\t<T> List<T> evaluate(Node node, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\tboolean evaluateAsBoolean(Node node); // Evaluates the given expression as a boolean.\n\tNode evaluateAsNode(Node node); // Evaluates the given expression as a Node.\n\tList<Node> evaluateAsNodeList(Node node); // Evaluates the given expression, and returns all Node objects that conform to it.\n\tdouble evaluateAsNumber(Node node); // Evaluates the given expression as a number (double).\n\t<T> T evaluateAsObject(Node node, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping a single Node result to a Java object via a NodeMapper.\n\tString evaluateAsString(Node node); // Evaluates the given expression as a String.\n}"}
{"index": 4619, "repo": "commons-vfs2-2.9.0", "des": "A FileSelector that selects files of a particular type.", "code": "Class FileTypeSelector {\n\tboolean includeFile(FileSelectInfo fileInfo); // Determines if a file or folder should be selected.\n\tboolean traverseDescendents(FileSelectInfo fileInfo); // Determines whether a folder should be traversed.\n}"}
{"index": 14350, "repo": "wicket-core-10.0.0-M1", "des": "resource caching strategy that does nothing at all", "code": "public class NoOpResourceCachingStrategy extends Object implements IResourceCachingStrategy {\n\tvoid clearCache(); // Clears any stateful information\n\tvoid decorateResponse(AbstractResource.ResourceResponse response, IStaticCacheableResource resource); // decorate resource response\n\tvoid decorateUrl(ResourceUrl url, IStaticCacheableResource resource); // add caching related information to filename + parameters\n\tvoid undecorateUrl(ResourceUrl url); // Removes caching related information from filename + parameters.\n}"}
{"index": 7590, "repo": "cassandra-all-4.1.2", "des": "A decaying histogram reservoir where values collected during each minute will be twice as significant as the values collected in the previous minute.", "code": "Class DecayingEstimatedHistogramReservoir {\n\tvoid clear();\n\tstatic float fastLog12(long v);\n\tstatic int findIndex(long[] bucketOffsets, long value);\n\tcom.codahale.metrics.Snapshot getPercentileSnapshot();\n\tcom.codahale.metrics.Snapshot getSnapshot(); // Returns a snapshot of the decaying values in this reservoir.\n\tvoid rebase(org.apache.cassandra.metrics.DecayingEstimatedHistogramReservoir.EstimatedHistogramReservoirSnapshot snapshot); // Replaces current internal values with the given one from a Snapshot.\n\tint size(); // Returns the logical number of buckets where recorded values are stored.\n\tint stripeCount();\n\tint stripedIndex(int offsetIndex, int stripe);\n\tvoid update(long value); // Increments the count of the bucket closest to n, rounding UP.\n\tvoid updateBucket(java.util.concurrent.atomic.AtomicLongArray buckets, int index, long value);\n}"}
{"index": 5534, "repo": "org.apache.karaf.main-2.4.4", "des": "This class represents a base description object for a state.", "code": "Interface BaseDescription {\n\tBundleCapability getCapability(); // Returns the capability represented by this description.\n\tMap<String,Object> getDeclaredAttributes(); // Returns the attributes declared with the description.\n\tMap<String,String> getDeclaredDirectives(); // Returns the directives declared with the description.\n\tString getName(); // Returns the name.\n\tBundleDescription getSupplier(); // Returns the bundle which supplies this base description\n\tObject getUserObject(); // Returns the user object associated to this description, or null if none exists.\n\tVersion getVersion(); // Returns the version.\n\tvoid setUserObject(Object userObject); // Associates a user-provided object to this description, or removes an existing association, if null is provided.\n}"}
{"index": 11847, "repo": "spring-kafka-3.0.9", "des": "Subclass of FailedRecordProcessor that can process (and recover) a batch.", "code": "public abstract class FailedBatchProcessor extends FailedRecordProcessor {\n\tprotected void doHandle(Exception thrownException, org.apache.kafka.clients.consumer.ConsumerRecords<?,?> data, org.apache.kafka.clients.consumer.Consumer<?,?> consumer, MessageListenerContainer container, Runnable invokeListener);\n\tprotected CommonErrorHandler getFallbackBatchHandler(); // Return the fallback batch error handler.\n\tprotected <K, V> org.apache.kafka.clients.consumer.ConsumerRecords<K,V> handle(Exception thrownException, org.apache.kafka.clients.consumer.ConsumerRecords<?,?> data, org.apache.kafka.clients.consumer.Consumer<?,?> consumer, MessageListenerContainer container, Runnable invokeListener);\n\tprotected void notRetryable(Stream<Class<? extends Exception>> notRetryable); // Subclasses can override this to receive notification of configuration of not retryable exceptions.\n\tBoolean removeClassification(Class<? extends Exception> exceptionType); // Remove an exception type from the configured list.\n\tvoid setClassifications(Map<Class<? extends Throwable>,Boolean> classifications, boolean defaultValue); // Set an exception classifications to determine whether the exception should cause a retry (until exhaustion) or not.\n\tvoid setLogLevel(KafkaException.Level logLevel); // Set the level at which the exception thrown by this handler is logged.\n\tvoid setReclassifyOnExceptionChange(boolean reclassifyOnExceptionChange); // Set to false to not reclassify the exception if different from the previous failure.\n\tvoid setRetryListeners(RetryListener... listeners); // Set one or more RetryListener to receive notifications of retries and recovery.\n}"}
{"index": 3729, "repo": "kafka-streams-3.5.0", "des": "A sliding window used for aggregating events.", "code": "Class SlidingWindows {\n\tboolean equals(Object o);\n\tlong gracePeriodMs();\n\tstatic SlidingWindows ofTimeDifferenceAndGrace(Duration timeDifference, Duration afterWindowEnd); // Return a window definition with the window size based on the given maximum time difference (inclusive) between records in the same window and given window grace period.\n\tstatic SlidingWindows ofTimeDifferenceWithNoGrace(Duration timeDifference); // Return a window definition with the window size based on the given maximum time difference (inclusive) between records in the same window and given window grace period.\n\tlong timeDifferenceMs();\n}"}
{"index": 2464, "repo": "exoplayer-r2.3.1", "des": "Receives broadcast events indicating changes to the device's audio capabilities, notifying a AudioCapabilitiesReceiver.", "code": "Class AudioCapabilitiesReceiver {\n\tAudioCapabilities register(); // Registers the receiver, meaning it will notify the listener when audio capability changes occur.\n\tvoid unregister(); // Unregisters the receiver, meaning it will no longer notify the listener when audio capability changes occur.\n}"}
{"index": 11060, "repo": "spring-shell-core-3.1.2", "des": "Enumeration for modes shell is operating.", "code": "public enum InteractionMode extends Enum<InteractionMode> {\n\tstatic InteractionMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic InteractionMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 8763, "repo": "hadoop-yarn-common-3.3.6", "des": "A client library that can be used to post some information in terms of a number of conceptual entities.", "code": "Class TimelineV2Client {\n\tstatic TimelineV2Client createTimelineClient(org.apache.hadoop.yarn.api.records.ApplicationId appId); // Creates an instance of the timeline v.2 client.\n\tabstract void putEntities(org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity... entities); // Send the information of a number of conceptual entities within the scope of YARN application to the timeline service v.2 collector.\n\tabstract void putEntitiesAsync(org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity... entities); // Send the information of a number of conceptual entities within the scope of YARN application to the timeline service v.2 collector.\n\tabstract void putSubAppEntities(org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity... entities); // Send the information of a number of conceptual entities within the scope of a sub-application to the timeline service v.2 collector.\n\tabstract void putSubAppEntitiesAsync(org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity... entities); // Send the information of a number of conceptual entities within the scope of a sub-application to the timeline service v.2 collector.\n\tabstract void setTimelineCollectorInfo(org.apache.hadoop.yarn.api.records.CollectorInfo collectorInfo); // Update collector info received in AllocateResponse which contains the timeline service address where the request will be sent to and the timeline delegation token which will be used to send the request.\n}"}
{"index": 14777, "repo": "spring-data-commons-3.1.2", "des": "Value object to access PersistentEntity instances managed by MappingContexts.", "code": "public class PersistentEntities extends Object implements Streamable<PersistentEntity<?,? extends PersistentProperty<?>>> {\n\tPersistentEntity<?,?> getEntityUltimatelyReferredToBy(PersistentProperty<?> property); // Returns the PersistentEntity the given PersistentProperty refers to in case it's an association.\n\tStreamable<TypeInformation<?>> getManagedTypes(); // Returns all TypeInformation exposed by the registered MappingContexts.\n\tOptional<PersistentEntity<?,? extends PersistentProperty<?>>> getPersistentEntity(Class<?> type); // Returns the PersistentEntity for the given type.\n\tPersistentEntity<?,? extends PersistentProperty<?>> getRequiredPersistentEntity(Class<?> type); // Returns the PersistentEntity for the given type.\n\tTypeInformation<?> getTypeUltimatelyReferredToBy(PersistentProperty<?> property); // Returns the type the given PersistentProperty ultimately refers to.\n\tIterator<PersistentEntity<?,? extends PersistentProperty<?>>> iterator();\n\t<T> Optional<T> mapOnContext(Class<?> type, BiFunction<MappingContext<?,? extends PersistentProperty<?>>,PersistentEntity<?,?>,T> combiner); // Executes the given BiFunction on the given MappingContext and PersistentEntity based on the given type.\n\tstatic PersistentEntities of(MappingContext<?,?>... contexts); // Creates a new PersistentEntities for the given MappingContexts.\n}"}
{"index": 5353, "repo": "druid-processing-26.0.0", "des": "A wrapper around a non-null-aware VectorAggregator that makes it null-aware.", "code": "Class NullableNumericVectorAggregator {\n\tvoid aggregate(ByteBuffer buf, int numRows, int[] positions, int[] rows, int positionOffset); // Aggregate a list of rows (\"rows\") into a list of aggregation slots (\"positions\").\n\tvoid aggregate(ByteBuffer buf, int position, int startRow, int endRow); // Aggregate a range of rows into a single aggregation slot.\n\tvoid close(); // Release any resources used by the aggregator.\n\tObject get(ByteBuffer buf, int position); // Same as BufferAggregator.get(java.nio.ByteBuffer, int).\n\tvoid init(ByteBuffer buf, int position); // Same as BufferAggregator.init(java.nio.ByteBuffer, int).\n\tvoid relocate(int oldPosition, int newPosition, ByteBuffer oldBuffer, ByteBuffer newBuffer); // Same as BufferAggregator.relocate(int, int, java.nio.ByteBuffer, java.nio.ByteBuffer).\n}"}
{"index": 15549, "repo": "spring-batch-core-5.0.2", "des": "Convenient entry point for building all kinds of steps.", "code": "public class StepBuilder extends StepBuilderHelper<StepBuilder> {\n\t<I, O> SimpleStepBuilder<I,O> chunk(int chunkSize); // Deprecated. use chunk(int, PlatformTransactionManager)\n\t<I, O> SimpleStepBuilder<I,O> chunk(int chunkSize, org.springframework.transaction.PlatformTransactionManager transactionManager); // Build a step that processes items in chunks with the size provided.\n\t<I, O> SimpleStepBuilder<I,O> chunk(CompletionPolicy completionPolicy); // Deprecated. use chunk(CompletionPolicy, PlatformTransactionManager)\n\t<I, O> SimpleStepBuilder<I,O> chunk(CompletionPolicy completionPolicy, org.springframework.transaction.PlatformTransactionManager transactionManager); // Build a step that processes items in chunks with the completion policy provided.\n\tFlowStepBuilder flow(Flow flow); // Create a new step builder that will execute a flow.\n\tJobStepBuilder job(Job job); // Create a new step builder that will execute a job.\n\tPartitionStepBuilder partitioner(String stepName, Partitioner partitioner); // Create a partition step builder for a remote (or local) step.\n\tPartitionStepBuilder partitioner(Step step); // Create a partition step builder for a remote (or local) step.\n\tprotected StepBuilder self();\n\tTaskletStepBuilder tasklet(Tasklet tasklet); // Deprecated. use tasklet(Tasklet, PlatformTransactionManager)\n\tTaskletStepBuilder tasklet(Tasklet tasklet, org.springframework.transaction.PlatformTransactionManager transactionManager); // Build a step with a custom tasklet, not necessarily item processing.\n}"}
{"index": 1266, "repo": "ignite-core-2.15.0", "des": "Is sent as an acknowledgement for end (with success or error) of user management operation on the cluster (see UserProposedMessage and UserManagementOperation).", "code": "Class UserAcceptedMessage {\n\t@Nullable DiscoveryCustomMessage ackMessage(); // Called when custom message has been handled by all nodes.\n\t@Nullable DiscoCache createDiscoCache(GridDiscoveryManager mgr, AffinityTopologyVersion topVer, DiscoCache discoCache); // Creates new discovery cache if message caused topology version change.\n\tIgniteUuid id();\n\tboolean isMutable();\n}"}
{"index": 10054, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "The default strategy for publishing Yarn events.", "code": "Class DefaultYarnEventPublisher {\n\tvoid publishContainerAllocated(Object source, Container container); // Publish an application event containing information about the allocated Container.\n\tvoid publishContainerCompleted(Object source, ContainerStatus status); // Publish an application event containing information about the completed ContainerStatus.\n\tvoid publishContainerLaunched(Object source, Container container); // Publish an application event containing information about the launched Container.\n\tvoid publishContainerLaunchRequestFailed(Object source, Container container); // Publish an application event containing information about the failed Container launch request.\n\tvoid publishEvent(AbstractYarnEvent event); // Publish a general application event of type AbstractYarnEvent.\n\tvoid setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher);\n}"}
{"index": 6408, "repo": "spring-data-solr-4.3.15", "des": "Update one or more fields of a Document without touching the others.", "code": "Interface Update {\n\tValueHoldingField getIdField(); // get id field of document to update\n\tIterable<UpdateField> getUpdates(); // List of fields and values to update\n\tObject getVersion(); // Document Version _version_\n}"}
{"index": 3150, "repo": "solr-dataimporthandler-8.11.2", "des": "A data source implementation which can be used to read character files using HTTP.", "code": "Class URLDataSource {\n\tvoid close(); // Cleans up resources of this DataSource after use.\n\tString getBaseUrl();\n\tReader getData(String query); // Get records for the given query.The return type depends on the implementation .\n\tvoid init(Context context, Properties initProps); // Initializes the DataSource with the Context and initialization properties.\n}"}
{"index": 16396, "repo": "spring-integration-http-6.1.2", "des": "Inbound Messaging Gateway that handles HTTP Requests.", "code": "public class HttpRequestHandlingMessagingGateway extends HttpRequestHandlingEndpointSupport implements org.springframework.web.HttpRequestHandler {\n\tfinal void handleRequest(jakarta.servlet.http.HttpServletRequest servletRequest, jakarta.servlet.http.HttpServletResponse servletResponse); // Handles the HTTP request by generating a Message and sending it to the request channel.\n\tvoid setConvertExceptions(boolean convertExceptions); // Flag to determine if conversion and writing out of message handling exceptions should be attempted (default false, in which case they will simply be re-thrown).\n}"}
{"index": 10100, "repo": "spring-plugin-core-3.0.0", "des": "Abstract base class to implement types that need access to all beans of a given type from the ApplicationContext.", "code": "public abstract class AbstractTypeAwareSupport<T> extends Object implements org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected List<T> getBeans(); // Returns all beans from the ApplicationContext that match the given type.\n\tvoid onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent event);\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext context);\n\tvoid setExclusions(Class<?>[] exclusions); // Configures the types to be excluded from the lookup.\n\tvoid setType(Class<T> type); // Configures the type of beans to be looked up.\n}"}
{"index": 12380, "repo": "spring-data-couchbase-5.1.2", "des": "A default PointInShapeEvaluator implementation based on the JDK's java.awt.geom classes.", "code": "public class AwtPointInShapeEvaluator extends PointInShapeEvaluator {\n\tboolean pointInCircle(Point p, Circle c); // Determine if a Point is contained by a Circle.\n\tboolean pointInCircle(Point p, Point center, Distance radiusDistance); // Determine if a Point is contained by a Circle represented by its center Point and Distance radius.\n\tboolean pointInPolygon(Point p, Point... points); // Determine if a Point is contained by a polygon represented as an array of points.\n\tboolean pointInPolygon(Point p, Polygon polygon); // Determine if a Point is contained by a Polygon.\n}"}
{"index": 16507, "repo": "spring-batch-infrastructure-5.0.2", "des": "MySQL implementation of a PagingQueryProvider using database specific features.", "code": "public class MySqlPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\tString generateFirstPageQuery(int pageSize); // Method generating the query string to be used for retrieving the first page.\n\tString generateRemainingPagesQuery(int pageSize); // Method generating the query string to be used for retrieving the pages following the first page.\n}"}
{"index": 3265, "repo": "hbase-common-3.0.0-alpha-4", "des": "An extension of the ByteBufferKeyValue where the tags length is always 0.", "code": "Class NoTagsByteBufferKeyValue {\n\tExtendedCell deepClone(); // Does a deep copy of the contents to a new memory area and returns it as a new cell.\n\tint getSerializedSize(boolean withTags); // KeyValue format <4 bytes keylength> <4 bytes valuelength> <2 bytes rowlength> <row> <1 byte columnfamilylength> <columnfamily> <columnqualifier> <8 bytes timestamp> <1 byte keytype> <value> <2 bytes tagslength> <tags>\n\tbyte[] getTagsArray(); // Contiguous raw bytes representing tags that may start at any index in the containing array.\n\tint getTagsLength(); // HBase internally uses 2 bytes to store tags length in Cell.\n}"}
{"index": 8596, "repo": "commons-io-2.13.0", "des": "Filters files using the supplied wildcards.", "code": "Class WildcardFileFilter {\n\tboolean accept(File file); // Checks to see if the file name matches one of the wildcards.\n\tboolean accept(File dir, String name); // Checks to see if the file name matches one of the wildcards.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the file name matches one of the wildcards.\n\tstatic WildcardFileFilter.Builder builder(); // Constructs a new WildcardFileFilter.Builder.\n}"}
{"index": 9767, "repo": "commons-math3-3.6.1", "des": "Immutable representation of a real polynomial function with real coefficients.", "code": "Class PolynomialFunction {\n\tPolynomialFunction add(PolynomialFunction p); // Add a polynomial to the instance.\n\tint degree(); // Returns the degree of the polynomial.\n\tUnivariateFunction derivative(); // Returns the derivative as a UnivariateFunction.\n\tprotected static double[] differentiate(double[] coefficients); // Returns the coefficients of the derivative of the polynomial with the given coefficients.\n\tboolean equals(Object obj);\n\tprotected static double evaluate(double[] coefficients, double argument); // Uses Horner's Method to evaluate the polynomial with the given coefficients at the argument.\n\tdouble[] getCoefficients(); // Returns a copy of the coefficients array.\n\tPolynomialFunction multiply(PolynomialFunction p); // Multiply the instance by a polynomial.\n\tPolynomialFunction negate(); // Negate the instance.\n\tPolynomialFunction polynomialDerivative(); // Returns the derivative as a PolynomialFunction.\n\tPolynomialFunction subtract(PolynomialFunction p); // Subtract a polynomial from the instance.\n\tDerivativeStructure value(DerivativeStructure t); // Simple mathematical function.\n\tdouble value(double x); // Compute the value of the function for the given argument.\n}"}
{"index": 8723, "repo": "hadoop-yarn-common-3.3.6", "des": "A CharSequence appender that considers its limit as upper bound.", "code": "Class BoundedAppender {\n\tBoundedAppender append(CharSequence csq); // Append a CharSequence considering limit, truncating from the head of csq or messages when necessary.\n\tint getLimit();\n\tint length(); // Get current length of messages considering truncates without header and ellipses.\n}"}
{"index": 7619, "repo": "cassandra-all-4.1.2", "des": "Entry point for configuring and creating new executors.", "code": "Interface ExecutorBuilderFactory<E extends ExecutorPlus,S extends SequentialExecutorPlus> {\n\tExecutorBuilder<? extends E> configurePooled(java.lang.String name, int threads); // Configure a pooled executor with the requested number of threads\n\tExecutorBuilder<? extends S> configureSequential(java.lang.String name); // Configure a sequential (single threaded) executor\n\tdefault E pooled(java.lang.String name, int threads); // Return a default configuration of pooled executor\n\tdefault S sequential(java.lang.String name); // Return a default configuration of sequential executor\n}"}
{"index": 3783, "repo": "hbase-client-3.0.0-alpha-4", "des": "Performs Append operations on a single row.", "code": "Class Append {\n\tAppend add(Cell cell); // Add column and value to this Append operation.\n\tAppend addColumn(byte[] family, byte[] qualifier, byte[] value); // Add the specified column and value to this Append operation.\n\tprotected long extraHeapSize(); // Subclasses should override this method to add the heap size of their own fields.\n\tCellBuilder getCellBuilder(CellBuilderType type); // get a CellBuilder instance that already has relevant Type and Row set.\n\tTimeRange getTimeRange(); // Gets the TimeRange used for this append.\n\tboolean isReturnResults(); // Returns current setting for returnResults\n\tAppend setACL(Map<String,Permission> perms); // Set the ACL for this operation.\n\tAppend setACL(String user, Permission perms); // Set the ACL for this operation.\n\tAppend setAttribute(String name, byte[] value); // Sets an attribute.\n\tAppend setCellVisibility(CellVisibility expression); // Sets the visibility expression associated with cells in this Mutation.\n\tAppend setClusterIds(List<UUID> clusterIds); // Marks that the clusters with the given clusterIds have consumed the mutation\n\tAppend setDurability(Durability d); // Set the durability for this mutation\n\tAppend setId(String id); // This method allows you to set an identifier on an operation.\n\tAppend setPriority(int priority);\n\tAppend setReturnResults(boolean returnResults); // True (default) if the append operation should return the results.\n\tAppend setTimeRange(long minStamp, long maxStamp); // Sets the TimeRange to be used on the Get for this append.\n\tAppend setTimestamp(long timestamp); // Set the timestamp of the delete.\n\tAppend setTTL(long ttl); // Set the TTL desired for the result of the mutation, in milliseconds.\n}"}
{"index": 14962, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A Filter for the OAuth 2.0 Authorization Code Grant, which handles the processing of the OAuth 2.0 Authorization Request and Consent.", "code": "public final class OAuth2AuthorizationEndpointFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\tvoid setAuthenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter); // Sets the AuthenticationConverter used when attempting to extract an Authorization Request (or Consent) from HttpServletRequest to an instance of OAuth2AuthorizationCodeRequestAuthenticationToken or OAuth2AuthorizationConsentAuthenticationToken used for authenticating the request.\n\tvoid setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,?> authenticationDetailsSource); // Sets the AuthenticationDetailsSource used for building an authentication details instance from HttpServletRequest.\n\tvoid setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler authenticationFailureHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthorizationCodeRequestAuthenticationException and returning the Error Response.\n\tvoid setAuthenticationSuccessHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler authenticationSuccessHandler); // Sets the AuthenticationSuccessHandler used for handling an OAuth2AuthorizationCodeRequestAuthenticationToken and returning the Authorization Response.\n\tvoid setConsentPage(String consentPage); // Specify the URI to redirect Resource Owners to if consent is required.\n\tvoid setSessionAuthenticationStrategy(org.springframework.security.web.authentication.session.SessionAuthenticationStrategy sessionAuthenticationStrategy); // Sets the SessionAuthenticationStrategy used for handling an OAuth2AuthorizationCodeRequestAuthenticationToken before calling the AuthenticationSuccessHandler.\n}"}
{"index": 10428, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "Represents the \"current span\" until ScopedSpan.end() ()} is called.", "code": "public interface ScopedSpan {\n\tTraceContext context();\n\tvoid end(); // Ends the span.\n\tScopedSpan error(Throwable throwable); // Records an exception for this span.\n\tScopedSpan event(String value); // Sets an event on this span.\n\tboolean isNoop();\n\tScopedSpan name(String name); // Sets a name on this span.\n\tScopedSpan tag(String key, String value); // Sets a tag on this span.\n}"}
{"index": 10821, "repo": "spring-boot-actuator-3.1.1", "des": "Resolver for an argument of an Operation.", "code": "public interface OperationArgumentResolver {\n\tboolean canResolve(Class<?> type); // Return whether an argument of the given type can be resolved.\n\tstatic <T> OperationArgumentResolver of(Class<T> type, Supplier<? extends T> supplier); // Factory method that creates an OperationArgumentResolver for a specific type using a Supplier.\n\t<T> T resolve(Class<T> type); // Resolves an argument of the given type.\n}"}
{"index": 16892, "repo": "spring-security-oauth2-core-6.1.2", "des": "A representation of an OAuth 2.0 Authorization Request for the authorization code grant type.", "code": "public final class OAuth2AuthorizationRequest extends Object implements Serializable {\n\tstatic OAuth2AuthorizationRequest.Builder authorizationCode(); // Returns a new OAuth2AuthorizationRequest.Builder, initialized with the authorization code grant type.\n\tstatic OAuth2AuthorizationRequest.Builder from(OAuth2AuthorizationRequest authorizationRequest); // Returns a new OAuth2AuthorizationRequest.Builder, initialized with the values from the provided authorizationRequest.\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameter(s) used in the request.\n\t<T> T getAttribute(String name); // Returns the value of an attribute associated to the request.\n\tMap<String,Object> getAttributes(); // Returns the attribute(s) associated to the request.\n\tString getAuthorizationRequestUri(); // Returns the URI string representation of the OAuth 2.0 Authorization Request.\n\tString getAuthorizationUri(); // Returns the uri for the authorization endpoint.\n\tString getClientId(); // Returns the client identifier.\n\tAuthorizationGrantType getGrantType(); // Returns the grant type.\n\tString getRedirectUri(); // Returns the uri for the redirection endpoint.\n\tOAuth2AuthorizationResponseType getResponseType(); // Returns the response type.\n\tSet<String> getScopes(); // Returns the scope(s).\n\tString getState(); // Returns the state.\n}"}
{"index": 5329, "repo": "druid-processing-26.0.0", "des": "VectorAggregator variant of LongConstantAggregator.", "code": "Class LongConstantVectorAggregator {\n\tvoid aggregate(ByteBuffer buf, int numRows, int[] positions, int[] rows, int positionOffset); // Aggregate a list of rows (\"rows\") into a list of aggregation slots (\"positions\").\n\tvoid aggregate(ByteBuffer buf, int position, int startRow, int endRow); // Aggregate a range of rows into a single aggregation slot.\n\tvoid close(); // Release any resources used by the aggregator.\n\tObject get(ByteBuffer buf, int position); // Same as BufferAggregator.get(java.nio.ByteBuffer, int).\n\tvoid init(ByteBuffer buf, int position); // Same as BufferAggregator.init(java.nio.ByteBuffer, int).\n}"}
{"index": 7882, "repo": "nifi-framework-core-api-1.22.0", "des": "Represents an extension registry that can be used to list/retrieve available bundles.", "code": "Interface ExtensionRegistry<T extends ExtensionBundleMetadata> {\n\tString getDescription();\n\tInputStream getExtensionBundleContent(NiFiUser user, T bundleMetadata); // Retrieves the content of a bundle specified by the given bundle metadata.\n\tSet<T> getExtensionBundleMetadata(NiFiUser user); // Retrieves a listing of all available bundles in the given registry.\n\tString getIdentifier();\n\tString getName();\n\tString getURL();\n\tvoid setDescription(String description);\n\tvoid setName(String name);\n\tvoid setURL(String url);\n}"}
{"index": 10423, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "In order to describe your spans via e.g.", "code": "public interface DocumentedSpan {\n\tdefault EventValue[] getEvents();\n\tString getName();\n\tdefault TagKey[] getTagKeys();\n\tdefault String prefix(); // Returns required prefix to be there for events and tags.\n\tdefault AssertingSpan wrap(Span span); // Asserts on tags, names and allowed events.\n\tdefault AssertingSpanBuilder wrap(Span.Builder span); // Asserts on tags, names and allowed events.\n\tdefault AssertingSpanCustomizer wrap(SpanCustomizer span); // Asserts on tags, names and allowed events.\n}"}
{"index": 532, "repo": "ignite-core-2.15.0", "des": "This class defines cache-based implementation for checkpoint SPI.", "code": "Class CacheCheckpointSpi {\n\tString getCacheName(); // Gets cache name to be used by this SPI..\n\t@Nullable byte[] loadCheckpoint(String key); // Loads checkpoint from storage by its unique key.\n\tprotected void onContextDestroyed0(); // Method to be called in the beginning of onContextDestroyed() method.\n\tprotected void onContextInitialized0(IgniteSpiContext spiCtx); // Method to be called in the end of onContextInitialized method.\n\tboolean removeCheckpoint(String key); // This method instructs the checkpoint provider to clean saved data for a given key.\n\tboolean saveCheckpoint(String key, byte[] state, long timeout, boolean overwrite); // Saves checkpoint to the storage.\n\tCacheCheckpointSpi setCacheName(String cacheName); // Sets cache name to be used by this SPI.\n\tvoid setCheckpointListener(CheckpointListener lsnr); // Sets the checkpoint listener.\n\tCacheCheckpointSpi setName(String name); // Sets SPI name.\n\tvoid spiStart(@Nullable String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 12078, "repo": "jena-core-4.9.0", "des": "A factory for providing instances of named graphs with appropriate storage models.", "code": "public interface GraphMaker {\n\tvoid close(); // Close the factory - no more requests need be honoured, and any clean-up can be done.\n\tGraph createGraph(); // Answer a graph who's name isn't interesting.\n\tGraph createGraph(String name); // Create a graph that does not already exist - equivalent to createGraph( name, false ).\n\tGraph createGraph(String name, boolean strict); // Create a new graph associated with the given name.\n\tGraph getGraph(); // Answer the default graph of this GraphMaker.\n\tboolean hasGraph(String name); // return true iff the factory has a graph with the given name\n\tExtendedIterator<String> listGraphs(); // Answer an [extended] iterator where each element is the name of a graph in the maker, and the complete sequence exhausts the set of names.\n\tGraph openGraph(); // Answer the default graph of this GraphMaker, if it has one.\n\tGraph openGraph(String name); // Equivalent to openGraph( name, false )\n\tGraph openGraph(String name, boolean strict); // Find an existing graph that this factory knows about under the given name.\n\tvoid removeGraph(String name); // Remove the association between the name and the graph.\n}"}
{"index": 6381, "repo": "spring-data-solr-4.3.15", "des": "Converts a Point to a solrReadable request parameter.", "code": "Enum GeoConverters.Point3DToStringConverter {\n\tString convert(Point source);\n\tstatic GeoConverters.Point3DToStringConverter valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic GeoConverters.Point3DToStringConverter[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8656, "repo": "avro-1.11.2", "des": "Builds an Avro Enum type with optional properties, namespace, doc, and aliases.", "code": "Class SchemaBuilder.EnumBuilder<R> {\n\tSchemaBuilder.EnumBuilder<R> defaultSymbol(String enumDefault); // Set the default value of the enum.\n\tprotected SchemaBuilder.EnumBuilder<R> self(); // a self-type for chaining builder subclasses.\n\tR symbols(String... symbols); // Configure this enum type's symbols, and end its configuration.\n}"}
{"index": 4547, "repo": "beam-sdks-java-core-2.49.0", "des": "For internal use only; no backwards-compatibility guarantees.", "code": "Class TimestampTransform {\n\tstatic TimestampTransform alignTo(org.joda.time.Duration period); // For internal use only; no backwards-compatibility guarantees.\n\tstatic TimestampTransform alignTo(org.joda.time.Duration period, org.joda.time.Instant offset); // For internal use only; no backwards-compatibility guarantees.\n\tstatic TimestampTransform delay(org.joda.time.Duration delay); // For internal use only; no backwards-compatibility guarantees.\n}"}
{"index": 15937, "repo": "spring-rabbit-3.0.6", "des": "Convenient super class for application classes that need RabbitMQ access.", "code": "public class RabbitGatewaySupport extends Object implements org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\tprotected RabbitTemplate createRabbitTemplate(ConnectionFactory connectionFactory); // Create a RabbitTemplate for the given ConnectionFactory.\n\tfinal ConnectionFactory getConnectionFactory();\n\tfinal RabbitOperations getRabbitOperations();\n\tprotected void initGateway(); // Subclasses can override this for custom initialization behavior.\n\tfinal void setConnectionFactory(ConnectionFactory connectionFactory); // Set the Rabbit connection factory to be used by the gateway.\n\tfinal void setRabbitOperations(RabbitOperations rabbitOperations); // Set the RabbitOperations for the gateway.\n}"}
{"index": 15054, "repo": "spring-vault-core-3.0.4", "des": "A lease abstracting the lease Id, duration and its renewability.", "code": "public class Lease extends Object {\n\tboolean equals(Object o);\n\tstatic Lease fromTimeToLive(Duration leaseDuration); // Create a new non-renewable Lease, without a leaseId and specified duration.\n\tDuration getLeaseDuration();\n\tString getLeaseId();\n\tboolean hasLeaseId();\n\tboolean isRenewable();\n\tstatic Lease none(); // Factory method to return a non-renewable, zero-duration Lease.\n\tstatic Lease of(String leaseId, Duration leaseDuration, boolean renewable); // Create a new Lease.\n}"}
{"index": 17149, "repo": "spring-integration-core-6.1.2", "des": "Kryo Codec that can encode and decode arbitrary types.", "code": "public class PojoCodec extends AbstractKryoCodec {\n\tprotected void configureKryoInstance(com.esotericsoftware.kryo.Kryo kryo); // Subclasses implement this to configure the kryo instance.\n\tprotected <T> T doDecode(com.esotericsoftware.kryo.Kryo kryo, com.esotericsoftware.kryo.io.Input input, Class<T> type); // Subclasses implement this method to decode with Kryo.\n\tprotected void doEncode(com.esotericsoftware.kryo.Kryo kryo, Object object, com.esotericsoftware.kryo.io.Output output); // Subclasses implement this method to encode with Kryo.\n}"}
{"index": 9770, "repo": "commons-math3-3.6.1", "des": "Represents a polynomial spline function.", "code": "Class PolynomialSplineFunction {\n\tUnivariateFunction derivative(); // Get the derivative of the polynomial spline function.\n\tdouble[] getKnots(); // Get an array copy of the knot points.\n\tint getN(); // Get the number of spline segments.\n\tPolynomialFunction[] getPolynomials(); // Get a copy of the interpolating polynomials array.\n\tboolean isValidPoint(double x); // Indicates whether a point is within the interpolation range.\n\tPolynomialSplineFunction polynomialSplineDerivative(); // Get the derivative of the polynomial spline function.\n\tDerivativeStructure value(DerivativeStructure t); // Simple mathematical function.\n\tdouble value(double v); // Compute the value for the function.\n}"}
{"index": 14216, "repo": "wicket-core-10.0.0-M1", "des": "How to handle errors while processing an Ajax request", "code": "public static enum ExceptionSettings.AjaxErrorStrategy extends Enum<ExceptionSettings.AjaxErrorStrategy> {\n\tstatic ExceptionSettings.AjaxErrorStrategy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ExceptionSettings.AjaxErrorStrategy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5660, "repo": "org.apache.karaf.main-2.4.4", "des": "The StateManager manages the system state for the framework.", "code": "Class StateManager {\n\tvoid addDisabledInfo(DisabledInfo disabledInfo); // Adds the disabled info to the state managed by this platform admin.\n\tvoid commit(State state); // Commit the differences between the current state and the given state.\n\tResolver createResolver(); // Creates a new Resolver that is not associated with any State.\n\tState createSystemState(); // Creates a new State used by the system.\n\tlong getCachedTimeStamp(); // Returns the cached time stamp of the system State.\n\tStateObjectFactory getFactory(); // Returns a factory that knows how to create state objects, such as bundle descriptions and the different types of version constraints.\n\tResolver getResolver(); // Deprecated.\n\tState getState(); // Returns a mutable state representing the current system.\n\tState getState(boolean mutable); // Returns a state representing the current system.\n\tStateHelper getStateHelper(); // Returns a state helper object.\n\tState getSystemState(); // Returns the State used by the system.\n\tState readSystemState(); // Reads the State used by the system.\n\tvoid removeDisabledInfo(DisabledInfo disabledInfo); // Removes the disabled info from the state managed by this platform admin.\n\tvoid run();\n\tboolean saveNeeded();\n\tvoid shutdown(File saveStateFile, File saveLazyFile); // Shutsdown the state manager.\n\tvoid stopDataManager(); // Stops the active data manager thread which is used to unload unused state objects from memory.\n\tvoid update(File updateStateFile, File updateLazyFile); // Update the given target files with the state data in memory.\n}"}
{"index": 10950, "repo": "spring-data-redis-3.1.2", "des": "Interface for the cluster commands supported by Redis.", "code": "public interface RedisClusterCommands {\n\tvoid clusterAddSlots(RedisClusterNode node, int... slots); // Assign slots to given RedisClusterNode.\n\tvoid clusterAddSlots(RedisClusterNode node, RedisClusterNode.SlotRange range); // Assign RedisClusterNode.SlotRange.getSlotsArray() to given RedisClusterNode.\n\tLong clusterCountKeysInSlot(int slot); // Count the number of keys assigned to one slot.\n\tvoid clusterDeleteSlots(RedisClusterNode node, int... slots); // Remove slots from RedisClusterNode.\n\tvoid clusterDeleteSlotsInRange(RedisClusterNode node, RedisClusterNode.SlotRange range); // Removes RedisClusterNode.SlotRange.getSlotsArray() from given RedisClusterNode.\n\tvoid clusterForget(RedisClusterNode node); // Remove given node from cluster.\n\tClusterInfo clusterGetClusterInfo(); // Get cluster information.\n\tList<byte[]> clusterGetKeysInSlot(int slot, Integer count); // Get keys served by slot.\n\tMap<RedisClusterNode,Collection<RedisClusterNode>> clusterGetMasterReplicaMap(); // Retrieve information about masters and their connected replicas.\n\tRedisClusterNode clusterGetNodeForKey(byte[] key); // Find the RedisClusterNode serving given key.\n\tRedisClusterNode clusterGetNodeForSlot(int slot); // Find the RedisClusterNode serving given slot.\n\tIterable<RedisClusterNode> clusterGetNodes(); // Retrieve cluster node information such as id, host, port and slots.\n\tCollection<RedisClusterNode> clusterGetReplicas(RedisClusterNode master); // Retrieve information about connected replicas for given master node.\n\tInteger clusterGetSlotForKey(byte[] key); // Find the slot for a given key.\n\tvoid clusterMeet(RedisClusterNode node); // Add given node to cluster.\n\tvoid clusterReplicate(RedisClusterNode master, RedisClusterNode replica); // Assign a replica to given master.\n\tvoid clusterSetSlot(RedisClusterNode node, int slot, RedisClusterCommands.AddSlots mode);\n}"}
{"index": 7419, "repo": "mahout-math-0.13.0", "des": "Open hash map from int keys to double values.", "code": "Class OpenIntDoubleHashMap {\n\tdouble adjustOrPutValue(int key, double newValue, double incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(int key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(double value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(IntProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(IntDoubleProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tdouble get(int key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(int key);\n\tprotected int indexOfKey(int key);\n\tprotected int indexOfValue(double value);\n\tIterator<OpenIntDoubleHashMap.MapElement> iterator();\n\tvoid keys(IntArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(IntDoubleProcedure condition, IntArrayList keyList, DoubleArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(int key, double value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(int key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(DoubleArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 10430, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "Allows to customize the current span in scope.", "code": "public interface SpanCustomizer {\n\tSpanCustomizer event(String value); // Sets an event on a span.\n\tSpanCustomizer name(String name); // Sets a name on a span.\n\tSpanCustomizer tag(String key, String value); // Sets a tag on a span.\n}"}
{"index": 2311, "repo": "hive-exec-4.0.0-alpha-2", "des": "This class has methods for generating vectorized join results for Anti joins.", "code": "Class VectorMapJoinAntiJoinGenerateResultOperator {\n\tprotected void commonSetup();\n\tprotected void finishAnti(VectorizedRowBatch batch, int allMatchCount, int spillCount, VectorMapJoinHashTableResult[] hashTableResults); // Generate the anti join output results for one vectorized row batch.\n\tprotected void finishAntiRepeated(VectorizedRowBatch batch, JoinUtil.JoinResult joinResult, VectorMapJoinHashTableResult hashSetResult);\n\tprotected int generateHashSetResultRepeatedAll(VectorizedRowBatch batch); // Generate the anti join output results for one vectorized row batch with a repeated key.\n\tprotected JoinUtil.JoinResult inverseResultForAntiJoin(JoinUtil.JoinResult joinResult);\n}"}
{"index": 9227, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "List of supported cgroup subsystem types.", "code": "Enum CGroupsHandler.CGroupController {\n\tString getName();\n\tstatic Set<String> getValidCGroups(); // Get the list of valid cgroup names.\n\tstatic CGroupsHandler.CGroupController valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CGroupsHandler.CGroupController[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 873, "repo": "ignite-core-2.15.0", "des": "Accumulates approximate hit rate statistics.", "code": "Class HitRateMetric {\n\tvoid add(long x); // Adds x to the metric.\n\tvoid increment(); // Adds 1 to the metric.\n\tlong rateTimeInterval();\n\tvoid reset(); // Resets metric state.\n\tvoid reset(long rateTimeInterval); // Resets metric with the new parametes.\n\tvoid reset(long rateTimeInterval, int size); // Resets metric with the new parameters.\n\tlong value();\n}"}
{"index": 6029, "repo": "jackson-databind-2.15.2", "des": "Helper class that implements all abstract methods with dummy implementations.", "code": "Class AccessorNamingStrategy.Base {\n\tString findNameForIsGetter(AnnotatedMethod method, String name); // Method called to find whether given method would be considered an \"is-getter\" getter method in context of type introspected, and if so, what is the logical property it is associated with (which in turn suggest external name for property)\n\tString findNameForMutator(AnnotatedMethod method, String name); // Method called to find whether given method would be considered a \"mutator\" (usually setter, but for builders \"with-method\" or similar) in context of type introspected, and if so, what is the logical property it is associated with (which in turn suggest external name for property)\n\tString findNameForRegularGetter(AnnotatedMethod method, String name); // Method called to find whether given method would be considered a \"regular\" getter method in context of type introspected, and if so, what is the logical property it is associated with (which in turn suggest external name for property)\n\tString modifyFieldName(AnnotatedField field, String name); // Method called to find the name of logical property that given field should be associated with, if any.\n}"}
{"index": 8584, "repo": "commons-io-2.13.0", "des": "Unchecks calls by throwing UncheckedIOException instead of IOException.", "code": "Class Uncheck {\n\tstatic <T,U> void accept(IOBiConsumer<T,U> consumer, T t, U u); // Accepts an IO consumer with the given arguments.\n\tstatic <T> void accept(IOConsumer<T> consumer, T t); // Accepts an IO consumer with the given argument.\n\tstatic <T,U,V> void accept(IOTriConsumer<T,U,V> consumer, T t, U u, V v); // Accepts an IO consumer with the given arguments.\n\tstatic <T,U,R> R apply(IOBiFunction<T,U,R> function, T t, U u); // Applies an IO function with the given arguments.\n\tstatic <T,R> R apply(IOFunction<T,R> function, T t); // Applies an IO function with the given arguments.\n\tstatic <T,U,V,W,R>R apply(IOQuadFunction<T,U,V,W,R> function, T t, U u, V v, W w); // Applies an IO quad-function with the given arguments.\n\tstatic <T,U,V,R> R apply(IOTriFunction<T,U,V,R> function, T t, U u, V v); // Applies an IO tri-function with the given arguments.\n\tstatic <T> int compare(IOComparator<T> comparator, T t, T u); // Compares the arguments with the comparator.\n\tstatic <T> T get(IOSupplier<T> supplier); // Gets the result from an IO supplier.\n\tstatic void run(IORunnable runnable); // Runs an IO runnable.\n\tstatic <T> boolean test(IOPredicate<T> predicate, T t); // Tests an IO predicate.\n}"}
{"index": 1862, "repo": "hadoop-hdfs-3.3.6", "des": "The difference between the current state and a previous state of a list.", "code": "Class Diff<K,E extends Diff.Element<K>> {\n\tDiff.Container<E> accessCurrent(K name); // Find an element in the current state.\n\tDiff.Container<E> accessPrevious(K name); // Find an element in the previous state.\n\tList<E> apply2Current(List<E> current); // Apply the reverse of this diff to current state in order to obtain the previous state.\n\tList<E> apply2Previous(List<E> previous); // Apply this diff to previous state in order to obtain current state.\n\tvoid clearCreated();\n\tvoid clearDeleted();\n\tvoid combinePosterior(Diff<K,E> posterior, Diff.Processor<E> deletedProcesser); // Combine this diff with a posterior diff.\n\tboolean containsDeleted(E element);\n\tboolean containsDeleted(K key);\n\tint create(E element); // Create an element in current state.\n\tDiff.UndoInfo<E> delete(E element); // Delete an element from current state.\n\tList<E> getCreatedUnmodifiable();\n\tE getDeleted(K key);\n\tList<E> getDeletedUnmodifiable();\n\tboolean isEmpty();\n\tDiff.UndoInfo<E> modify(E oldElement, E newElement); // Modify an element in current state.\n\tboolean removeCreated(E element);\n\tboolean removeDeleted(E element);\n\tprotected static <K,E extends Comparable<K>>int search(List<E> elements, K name); // Search the element from the list.\n\tE setCreated(int index, E element);\n\tvoid undoCreate(E element, int insertionPoint); // Undo the previous create(E) operation.\n\tvoid undoDelete(E element, Diff.UndoInfo<E> undoInfo); // Undo the previous delete(E) operation.\n\tvoid undoModify(E oldElement, E newElement, Diff.UndoInfo<E> undoInfo); // Undo the previous modify(E, E) operation.\n}"}
{"index": 17087, "repo": "spring-integration-core-6.1.2", "des": "The BaseIntegrationFlowDefinition extension for syntax sugar with generics for some type-based EIP-methods when an expected payload type is assumed from upstream.", "code": "public abstract class IntegrationFlowDefinition<B extends IntegrationFlowDefinition<B>> extends BaseIntegrationFlowDefinition<B> {\n\t<P> B filter(GenericSelector<P> genericSelector); // Populate a MessageFilter with MethodInvokingSelector for the provided GenericSelector.\n\t<P> B filter(GenericSelector<P> genericSelector, Consumer<FilterEndpointSpec> endpointConfigurer); // Populate a MessageFilter with MethodInvokingSelector for the provided GenericSelector.\n\t<P> B handle(GenericHandler<P> handler); // Populate a ServiceActivatingHandler for the MethodInvokingMessageProcessor to invoke the provided GenericHandler at runtime.\n\t<P> B handle(GenericHandler<P> handler, Consumer<GenericEndpointSpec<ServiceActivatingHandler>> endpointConfigurer); // Populate a ServiceActivatingHandler for the MethodInvokingMessageProcessor to invoke the provided GenericHandler at runtime.\n\t<S, T> B route(Function<S,T> router); // Populate the MethodInvokingRouter for provided Function with default options.\n\t<S, T> B route(Function<S,T> router, Consumer<RouterSpec<T,MethodInvokingRouter>> routerConfigurer); // Populate the MethodInvokingRouter for provided Function with provided options from RouterSpec.\n\t<P> B split(Function<P,?> splitter, Consumer<SplitterEndpointSpec<MethodInvokingSplitter>> endpointConfigurer); // Populate the MethodInvokingSplitter to evaluate the provided Function at runtime.\n\t<S, T> B transform(GenericTransformer<S,T> genericTransformer); // Populate the MessageTransformingHandler instance for the provided GenericTransformer.\n\t<S, T> B transform(GenericTransformer<S,T> genericTransformer, Consumer<GenericEndpointSpec<MessageTransformingHandler>> endpointConfigurer); // Populate the MessageTransformingHandler instance for the provided GenericTransformer.\n}"}
{"index": 8914, "repo": "hbase-server-3.0.0-alpha-4", "des": "The following is a list of all executor types, both those that run in the master and those that run in the regionserver.", "code": "Enum ExecutorType {\n\tstatic ExecutorType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ExecutorType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 198, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns true if only one of the predicates return true.", "code": "Class OnePredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning true if only one decorated predicate returns true.\n\tstatic <T> Predicate<T> onePredicate(Collection<? extends Predicate<? super T>> predicates); // Factory to create the predicate.\n\tstatic <T> Predicate<T> onePredicate(Predicate<? super T>... predicates); // Factory to create the predicate.\n}"}
{"index": 3689, "repo": "kafka-streams-3.5.0", "des": "Branches the records in the original stream based on the predicates supplied for the branch definitions.", "code": "Interface BranchedKStream<K,V> {\n\tBranchedKStream<K,V> branch(Predicate<? super K,? super V> predicate); // Define a branch for records that match the predicate.\n\tBranchedKStream<K,V> branch(Predicate<? super K,? super V> predicate, Branched<K,V> branched); // Define a branch for records that match the predicate.\n\tMap<String,KStream<K,V>> defaultBranch(); // Finalize the construction of branches and defines the default branch for the messages not intercepted by other branches.\n\tMap<String,KStream<K,V>> defaultBranch(Branched<K,V> branched); // Finalize the construction of branches and defines the default branch for the messages not intercepted by other branches.\n\tMap<String,KStream<K,V>> noDefaultBranch(); // Finalize the construction of branches without forming a default branch.\n}"}
{"index": 808, "repo": "ignite-core-2.15.0", "des": "Request to enlist into transaction and acquire locks for entries produced with complex DML queries with reducer step.", "code": "Class GridNearTxQueryResultsEnlistRequest {\n\tboolean addDeploymentInfo(); // Deployment enabled flag indicates whether deployment info has to be added to this message.\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid finishUnmarshal(GridCacheSharedContext ctx, ClassLoader ldr); // This method is called after the message is deserialized and is responsible for unmarshalling state marshalled in GridCacheMessage.prepareMarshal(GridCacheSharedContext) method.\n\tboolean firstClientRequest();\n\tIgniteUuid futureId();\n\tint miniId();\n\tMvccSnapshot mvccSnapshot();\n\tEnlistOperation operation();\n\tvoid prepareMarshal(GridCacheSharedContext ctx); // This method is called before the whole message is serialized and is responsible for pre-marshalling state.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tCollection<Object> rows();\n\tint taskNameHash();\n\tlong threadId();\n\tlong timeout();\n\tAffinityTopologyVersion topologyVersion(); // Gets topology version or -1 in case of topology version is not required for this message.\n\tlong txTimeout();\n\tGridCacheVersion version();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 15101, "repo": "spring-vault-core-3.0.4", "des": "Utility methods to unwrap Vault responses and build VaultException.", "code": "public abstract class VaultResponses extends Object {\n\tstatic VaultException buildException(HttpStatusCode statusCode, String path, String message);\n\tstatic VaultException buildException(HttpStatusCodeException e); // Build a VaultException given HttpStatusCodeException.\n\tstatic VaultException buildException(HttpStatusCodeException e, String path); // Build a VaultException given HttpStatusCodeException and request path.\n\tstatic String getError(String json); // Obtain the error message from a JSON response.\n\tstatic <T> ParameterizedTypeReference<VaultResponseSupport<T>> getTypeReference(Class<T> responseType); // Create a ParameterizedTypeReference for responseType.\n\tstatic <T> T unwrap(String wrappedResponse, Class<T> responseType); // Unwrap a wrapped response created by Vault Response Wrapping\n}"}
{"index": 6389, "repo": "spring-data-solr-4.3.15", "des": "Solr specific implementation of AbstractEntityInformation.", "code": "Class MappingSolrEntityInformation<T,ID> {\n\tString getCollectionName(); // Get the name of the solr collection the entity resides in.\n\tString getIdAttribute(); // Get the name of the id attribute.\n}"}
{"index": 12456, "repo": "spring-integration-jmx-6.1.2", "des": "A JMX NotificationListener implementation that will send Messages containing the JMX Notification instances as their payloads.", "code": "public class NotificationListeningMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport implements NotificationListener, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent> {\n\tprotected void doStart(); // Registers the notification listener with the specified ObjectNames.\n\tprotected void doStop(); // Unregisters the notification listener.\n\tString getComponentType();\n\tvoid handleNotification(Notification notification, Object handback); // Notification handling method implementation.\n\tvoid onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent event); // The NotificationListener might not be registered on AbstractEndpoint.start() because the MBeanExporter might not been started yet.\n\tprotected Collection<ObjectName> retrieveMBeanNames(); // Return a collection of ObjectName ofr provided mBeanObjectNames.\n\tvoid setFilter(NotificationFilter filter); // Specify a NotificationFilter to be passed to the server when registering this listener.\n\tvoid setHandback(Object handback); // Specify a handback object to provide context to the listener upon notification.\n\tvoid setObjectName(ObjectName... objectNames); // Specify the JMX ObjectNames (or patterns) of the notification publisher to which this notification listener should be subscribed.\n\tvoid setServer(MBeanServerConnection server); // Provide a reference to the MBeanServer where the notification publishing MBeans are registered.\n}"}
{"index": 6206, "repo": "jackson-databind-2.15.2", "des": "Simple PropertyFilter implementation that only uses property name to determine whether to serialize property as is, or to filter it out.", "code": "Class SimpleBeanPropertyFilter {\n\tvoid depositSchemaProperty(PropertyWriter writer, JsonObjectFormatVisitor objectVisitor, SerializerProvider provider); // Method called by BeanSerializer to let the filter determine whether, and in what form the given property exist within the parent, or root, schema.\n\tstatic SimpleBeanPropertyFilter filterOutAll(); // Convenience factory method that will return a filter that will simply filter out everything.\n\tstatic SimpleBeanPropertyFilter filterOutAllExcept(Set<String> properties); // Factory method to construct filter that filters out all properties except ones includes in set\n\tstatic SimpleBeanPropertyFilter filterOutAllExcept(String... propertyArray);\n\tstatic PropertyFilter from(BeanPropertyFilter src); // Helper method to ease transition from BeanPropertyWriter into PropertyWriter\n\tprotected boolean include(BeanPropertyWriter writer); // Method called to determine whether property will be included (if 'true' returned) or filtered out (if 'false' returned)\n\tprotected boolean include(PropertyWriter writer); // Method called to determine whether property will be included (if 'true' returned) or filtered out (if 'false' returned)\n\tprotected boolean includeElement(Object elementValue); // Method that defines what to do with container elements (values contained in an array or Collection: default implementation simply writes them out.\n\tstatic SimpleBeanPropertyFilter serializeAll(); // Convenience factory method that will return a \"no-op\" filter that will simply just serialize all properties that are given, and filter out nothing.\n\tstatic SimpleBeanPropertyFilter serializeAllExcept(Set<String> properties);\n\tstatic SimpleBeanPropertyFilter serializeAllExcept(String... propertyArray);\n\tvoid serializeAsElement(Object elementValue, JsonGenerator jgen, SerializerProvider provider, PropertyWriter writer); // Method called by container to let the filter decide what to do with given element value: the usual choices are to either filter out (i.e.\n\tvoid serializeAsField(Object pojo, JsonGenerator jgen, SerializerProvider provider, PropertyWriter writer); // Method called by BeanSerializer to let the filter decide what to do with given bean property value: the usual choices are to either filter out (i.e.\n}"}
{"index": 4920, "repo": "hadoop-common-3.3.4", "des": "Provides a trash facility which supports pluggable Trash policies.", "code": "Class Trash {\n\tvoid checkpoint(); // Create a trash checkpoint.\n\tvoid expunge(); // Delete old checkpoint(s).\n\tvoid expungeImmediately(); // Delete all trash immediately.\n\tPath getCurrentTrashDir(Path path);\n\tRunnable getEmptier(); // Return a Runnable that periodically empties the trash of all users, intended to be run by the superuser.\n\tboolean isEnabled(); // Returns whether the trash is enabled for this filesystem\n\tstatic boolean moveToAppropriateTrash(FileSystem fs, Path p, Configuration conf); // In case of the symlinks or mount points, one has to move the appropriate trashbin in the actual volume of the path p being deleted.\n\tboolean moveToTrash(Path path); // Move a file or directory to the current trash directory.\n}"}
{"index": 7374, "repo": "mahout-math-0.13.0", "des": "Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.", "code": "Class FileBasedSparseBinaryMatrix {\n\tMatrix assignColumn(int column, Vector other); // Assign the other vector values to the column of the receiver\n\tMatrix assignRow(int row, Vector other); // Assign the other vector values to the row of the receiver\n\tdouble getQuick(int rowIndex, int columnIndex); // Return the value at the given indexes, without checking bounds\n\tMatrix like(); // Return an empty matrix of the same underlying class as the receiver\n\tMatrix like(int rows, int columns); // Returns an empty matrix of the same underlying class as the receiver and of the specified size.\n\tvoid setData(File f);\n\tvoid setQuick(int row, int column, double value); // Set the value at the given index, without checking bounds\n\tMatrix viewPart(int[] offset, int[] size); // Return a view into part of a matrix.\n\tVector viewRow(int rowIndex); // Returns a view of a row.\n\tstatic void writeMatrix(File f, Matrix m);\n}"}
{"index": 18759, "repo": "solr-core-9.3.0", "des": "Tracks the current JVM heap usage and triggers if it exceeds the defined percentage of the maximum heap size allocated to the JVM.", "code": "Class MemoryCircuitBreaker {\n\tprotected long calculateLiveMemoryUsage(); // Calculate the live memory usage for the system.\n\tString getDebugInfo(); // Get debug useful info.\n\tString getErrorMessage(); // Get error message when the circuit breaker triggers\n\tboolean isTripped(); // Check if circuit breaker is tripped.\n}"}
{"index": 18414, "repo": "opencms-core-15.0", "des": "The form for importing a module from the application server.", "code": "Class CmsServerModuleImportForm {\n\tprotected com.vaadin.ui.Button getCancelButton(); // Gets the cancel button.\n\tprotected com.vaadin.ui.Button getOkButton(); // Gets the OK button.\n\tprotected CmsAutoItemCreatingComboBox getSiteSelector(); // Returns the site selector for the module import.\n}"}
{"index": 8548, "repo": "commons-io-2.13.0", "des": "Accepts only an exact Path object match.", "code": "Class PathEqualsFileFilter {\n\tboolean accept(File file); // Checks to see if the File should be accepted by this filter.\n\tFileVisitResult accept(Path path, BasicFileAttributes attributes); // Checks to see if the Path should be accepted by this filter.\n}"}
{"index": 15774, "repo": "camel-api-4.0.0-RC1", "des": "Configuration for access to Hashicorp Vault Secrets.", "code": "public class HashicorpVaultConfiguration extends VaultConfiguration {\n\tString getEngine(); // Engine to look at hashicorp vault\n\tString getHost(); // Host to access hashicorp vault\n\tString getPort(); // Port to access hashicorp vault\n\tString getScheme(); // Scheme to access hashicorp vault\n\tString getToken(); // Token to access hashicorp vault\n\tvoid setEngine(String engine);\n\tvoid setHost(String host);\n\tvoid setPort(String port);\n\tvoid setScheme(String scheme);\n\tvoid setToken(String token);\n}"}
{"index": 1907, "repo": "hadoop-hdfs-3.3.6", "des": "Enums for features that change the layout version before rolling upgrade is supported.", "code": "Enum LayoutVersion.Feature {\n\tLayoutVersion.FeatureInfo getInfo();\n\tstatic LayoutVersion.Feature valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic LayoutVersion.Feature[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8940, "repo": "hbase-server-3.0.0-alpha-4", "des": "Utility methods for interacting with the hbase.", "code": "Class FSVisitor {\n\tstatic void visitRegionStoreFiles(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path regionDir, FSVisitor.StoreFileVisitor visitor); // Iterate over the region store files\n\tstatic void visitTableStoreFiles(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path tableDir, FSVisitor.StoreFileVisitor visitor); // Iterate over the table store files\n}"}
{"index": 15430, "repo": "pulsar-client-api-3.0.0", "des": "Opaque unique identifier of a single message", "code": "@Public @Stable public interface MessageId extends Comparable<MessageId>, Serializable {\n\tstatic MessageId fromByteArray(byte[] data); // De-serialize a message id from a byte array.\n\tstatic MessageId fromByteArrayWithTopic(byte[] data, String topicName); // De-serialize a message id from a byte array with its topic information attached.\n\tbyte[] toByteArray(); // Serialize the message ID into a byte array.\n}"}
{"index": 11452, "repo": "spring-context-6.0.11", "des": "Task scheduler interface that abstracts the scheduling of Runnables based on different kinds of triggers.", "code": "public interface TaskScheduler {\n\tdefault Clock getClock(); // Return the clock to use for scheduling purposes.\n\tScheduledFuture<?> schedule(Runnable task, Instant startTime); // Schedule the given Runnable, invoking it at the specified execution time.\n\tdefault ScheduledFuture<?> schedule(Runnable task, Date startTime); // Deprecated. as of 6.0, in favor of schedule(Runnable, Instant)\n\tScheduledFuture<?> schedule(Runnable task, Trigger trigger); // Schedule the given Runnable, invoking it whenever the trigger indicates a next execution time.\n\tdefault ScheduledFuture<?> scheduleAtFixedRate(Runnable task, long period); // Deprecated. as of 6.0, in favor of scheduleAtFixedRate(Runnable, Duration)\n\tScheduledFuture<?> scheduleAtFixedRate(Runnable task, Duration period); // Schedule the given Runnable, starting as soon as possible and invoking it with the given period.\n\tScheduledFuture<?> scheduleAtFixedRate(Runnable task, Instant startTime, Duration period); // Schedule the given Runnable, invoking it at the specified execution time and subsequently with the given period.\n\tdefault ScheduledFuture<?> scheduleAtFixedRate(Runnable task, Date startTime, long period); // Deprecated. as of 6.0, in favor of scheduleAtFixedRate(Runnable, Instant, Duration)\n\tdefault ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, long delay); // Deprecated. as of 6.0, in favor of scheduleWithFixedDelay(Runnable, Duration)\n\tScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Duration delay); // Schedule the given Runnable, starting as soon as possible and invoking it with the given delay between the completion of one execution and the start of the next.\n\tScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Instant startTime, Duration delay); // Schedule the given Runnable, invoking it at the specified execution time and subsequently with the given delay between the completion of one execution and the start of the next.\n\tdefault ScheduledFuture<?> scheduleWithFixedDelay(Runnable task, Date startTime, long delay); // Deprecated. as of 6.0, in favor of scheduleWithFixedDelay(Runnable, Instant, Duration)\n}"}
{"index": 2832, "repo": "tika-parsers-1.28.5", "des": "An 32-bit header for a compound object would indicate the start of a stream object.", "code": "Class StreamObjectHeaderStart32bit {\n\tprotected int doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the StreamObjectHeaderStart32bit basic object from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of StreamObjectHeaderStart32bit basic object into a byte List.\n}"}
{"index": 15010, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Configurer for OpenID Connect 1.0 UserInfo Endpoint.", "code": "public final class OidcUserInfoEndpointConfigurer extends Object {\n\tOidcUserInfoEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider); // Adds an AuthenticationProvider used for authenticating an OidcUserInfoAuthenticationToken.\n\tOidcUserInfoEndpointConfigurer authenticationProviders(Consumer<List<org.springframework.security.authentication.AuthenticationProvider>> authenticationProvidersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationProvider's allowing the ability to add, remove, or customize a specific AuthenticationProvider.\n\tOidcUserInfoEndpointConfigurer errorResponseHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler errorResponseHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tprotected final org.springframework.security.config.annotation.ObjectPostProcessor<Object> getObjectPostProcessor();\n\tprotected final <T> T postProcess(T object);\n\tOidcUserInfoEndpointConfigurer userInfoMapper(Function<OidcUserInfoAuthenticationContext,org.springframework.security.oauth2.core.oidc.OidcUserInfo> userInfoMapper); // Sets the Function used to extract claims from OidcUserInfoAuthenticationContext to an instance of OidcUserInfo for the UserInfo response.\n\tOidcUserInfoEndpointConfigurer userInfoRequestConverter(org.springframework.security.web.authentication.AuthenticationConverter userInfoRequestConverter); // Adds an AuthenticationConverter used when attempting to extract an UserInfo Request from HttpServletRequest to an instance of OidcUserInfoAuthenticationToken used for authenticating the request.\n\tOidcUserInfoEndpointConfigurer userInfoRequestConverters(Consumer<List<org.springframework.security.web.authentication.AuthenticationConverter>> userInfoRequestConvertersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationConverter's allowing the ability to add, remove, or customize a specific AuthenticationConverter.\n\tOidcUserInfoEndpointConfigurer userInfoResponseHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler userInfoResponseHandler); // Sets the AuthenticationSuccessHandler used for handling an OidcUserInfoAuthenticationToken and returning the UserInfo Response.\n}"}
{"index": 9834, "repo": "commons-math3-3.6.1", "des": "This class wraps an object implementing FixedStepHandler into a StepHandler.", "code": "Class StepNormalizer {\n\tvoid handleStep(StepInterpolator interpolator, boolean isLast); // Handle the last accepted step\n\tvoid init(double t0, double[] y0, double t); // Initialize step handler at the start of an ODE integration.\n}"}
{"index": 16221, "repo": "spring-data-cassandra-4.1.2", "des": "CodecRegistry-based TupleTypeFactory using DefaultTupleType to create tuple types.", "code": "public enum SimpleTupleTypeFactory extends Enum<SimpleTupleTypeFactory> implements TupleTypeFactory {\n\tcom.datastax.oss.driver.api.core.type.TupleType create(com.datastax.oss.driver.api.core.type.DataType... types); // Create a TupleType representing the given tuple element types.\n\tcom.datastax.oss.driver.api.core.type.TupleType create(List<com.datastax.oss.driver.api.core.type.DataType> types); // Create a TupleType representing the given tuple element types.\n\tstatic SimpleTupleTypeFactory valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SimpleTupleTypeFactory[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 9444, "repo": "hadoop-yarn-api-3.3.6", "des": "UpdateContainerRequest represents the request made by an application to the ResourceManager to update an attribute of a Container such as its Resource allocation or (@code ExecutionType} It includes: version for the container.", "code": "Class UpdateContainerRequest {\n\tboolean equals(Object obj);\n\tabstract Resource getCapability(); // Get the Resource capability of the request.\n\tabstract ContainerId getContainerId(); // Get the ContainerId of the container.\n\tabstract ContainerUpdateType getContainerUpdateType(); // Get the ContainerUpdateType of the container.\n\tabstract int getContainerVersion(); // Get the ContainerId of the container.\n\tabstract ExecutionType getExecutionType(); // Get the target ExecutionType of the container.\n\tstatic UpdateContainerRequest newInstance(int version, ContainerId containerId, ContainerUpdateType updateType, Resource targetCapability, ExecutionType targetExecutionType);\n\tabstract void setCapability(Resource capability); // Set the Resource capability of the request.\n\tabstract void setContainerId(ContainerId containerId); // Set the ContainerId of the container.\n\tabstract void setContainerUpdateType(ContainerUpdateType updateType); // Set the ContainerUpdateType of the container.\n\tabstract void setContainerVersion(int containerVersion); // Set the current version of the container.\n\tabstract void setExecutionType(ExecutionType executionType); // Set the target ExecutionType of the container.\n}"}
{"index": 12287, "repo": "jena-core-4.9.0", "des": "This class is an unsynchronized hash table primary used for String to Object mapping.", "code": "public class SymbolHash extends Object {\n\tvoid clear(); // Remove all key/value assocaition.\n\tObject get(Object key); // Get the value associated with the given key.\n\tObject[] getEntries(); // Return key/value pairs of all entries in the map\n\tint getLength(); // Get the number of key/value pairs stored in this table.\n\tint getValues(Object[] elements, int from); // Add all values to the given array.\n\tSymbolHash makeClone(); // Make a clone of this object.\n\tvoid put(Object key, Object value); // Adds the key/value mapping to the key table.\n}"}
{"index": 16380, "repo": "spring-data-jpa-3.1.2", "des": "This interface describes the API for enhancing a given Query.", "code": "public interface QueryEnhancer {\n\tdefault String applySorting(Sort sort); // Adds order by clause to the JPQL query.\n\tString applySorting(Sort sort, String alias); // Adds order by clause to the JPQL query.\n\tdefault String createCountQueryFor(); // Creates a count projected query from the given original query.\n\tString createCountQueryFor(String countProjection); // Creates a count projected query from the given original query using the provided countProjection.\n\tString detectAlias(); // Resolves the alias for the entity to be retrieved from the given JPA query.\n\tSet<String> getJoinAliases();\n\tString getProjection(); // Returns the projection part of the query, i.e. everything between select and from.\n\torg.springframework.data.jpa.repository.query.DeclaredQuery getQuery(); // Gets the query we want to use for enhancements.\n\tdefault boolean hasConstructorExpression(); // Returns whether the given JPQL query contains a constructor expression.\n}"}
{"index": 8463, "repo": "commons-io-2.13.0", "des": "Filters files based on a cutoff time, can filter either newer files or files equal to or older.", "code": "Class AgeFileFilter {\n\tboolean accept(File file); // Checks to see if the last modification of the file matches cutoff favorably.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the last modification of the file matches cutoff favorably.\n}"}
{"index": 10616, "repo": "groovy-all-4.0.13", "des": "A proxy generator responsible for mapping a map of closures to a class implementing a list of interfaces.", "code": "public class ProxyGeneratorAdapter extends org.objectweb.asm.ClassVisitor {\n\tGroovyObject delegatingProxy(Object delegate, Map<Object,Object> map, Object... constructorArgs);\n\tstatic Closure ensureClosure(Object o); // Ensures that the provided object is wrapped into a closure if it's not a closure.\n\tprotected org.objectweb.asm.MethodVisitor makeDelegateCall(String name, String desc, String signature, String[] exceptions, int accessFlags); // Generate a call to the delegate object.\n\tprotected org.objectweb.asm.MethodVisitor makeDelegateToClosureCall(String name, String desc, String signature, String[] exceptions, int accessFlags);\n\tGroovyObject proxy(Map<Object,Object> map, Object... constructorArgs);\n\tvoid visit(int version, int access, String name, String signature, String superName, String[] interfaces);\n\torg.objectweb.asm.MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions);\n}"}
{"index": 1808, "repo": "kafka-clients-3.5.0", "des": "SCRAM credential class that encapsulates the credential data persisted for each user that is accessible to the server.", "code": "Class ScramCredential {\n\tint iterations(); // Number of iterations used to process this credential using the SCRAM algorithm.\n\tbyte[] salt(); // Returns the salt used to process this credential using the SCRAM algorithm.\n\tbyte[] serverKey(); // Server key computed from the client password using the SCRAM algorithm.\n\tbyte[] storedKey(); // Stored key computed from the client password using the SCRAM algorithm.\n}"}
{"index": 12089, "repo": "jena-core-4.9.0", "des": "An implementation of BunchMap that does open-addressed hashing.", "code": "public class HashedBunchMap extends HashCommon<Object> implements BunchMap {\n\tvoid clear(); // Clear this map: all entries are removed.\n\tTripleBunch get(Object key); // Answer the TripleBunch associated with key, or null if there isn't one.\n\tTripleBunch getOrSet(Object key, Function<Object,TripleBunch> setter); // Get the key and return the value found there; if nothing, calculate the value and insert.\n\tIterator<TripleBunch> iterator();\n\tvoid put(Object key, TripleBunch value); // Associate key and value.\n\tlong size(); // The number of items in the bunch.\n\tSpliterator<TripleBunch> spliterator();\n}"}
{"index": 17744, "repo": "spring-web-6.0.11", "des": "Subclass of GenericApplicationContext, suitable for web environments.", "code": "public class GenericWebApplicationContext extends org.springframework.context.support.GenericApplicationContext implements ConfigurableWebApplicationContext, org.springframework.ui.context.ThemeSource {\n\tprotected org.springframework.core.env.ConfigurableEnvironment createEnvironment(); // Create and return a new StandardServletEnvironment.\n\tString getApplicationName();\n\tString[] getConfigLocations(); // Return the config locations for this web application context, or null if none specified.\n\tString getNamespace(); // Return the namespace for this web application context, if any.\n\tprotected org.springframework.core.io.Resource getResourceByPath(String path); // This implementation supports file paths beneath the root of the ServletContext.\n\tprotected org.springframework.core.io.support.ResourcePatternResolver getResourcePatternResolver(); // This implementation supports pattern matching in unexpanded WARs too.\n\tServletConfig getServletConfig(); // Return the ServletConfig for this web application context, if any.\n\tServletContext getServletContext(); // Return the standard Servlet API ServletContext for this application.\n\torg.springframework.ui.context.Theme getTheme(String themeName); // Deprecated.\n\tprotected void initPropertySources();\n\tprotected void onRefresh(); // Initialize the theme capability.\n\tprotected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory); // Register request/session scopes, environment beans, a ServletContextAwareProcessor, etc.\n\tvoid setConfigLocation(String configLocation); // Set the config locations for this web application context in init-param style, i.e.\n\tvoid setConfigLocations(String... configLocations); // Set the config locations for this web application context.\n\tvoid setNamespace(String namespace); // Set the namespace for this web application context, to be used for building a default context config location.\n\tvoid setServletConfig(ServletConfig servletConfig); // Set the ServletConfig for this web application context.\n\tvoid setServletContext(ServletContext servletContext); // Set the ServletContext that this WebApplicationContext runs in.\n}"}
{"index": 4136, "repo": "camel-core-3.0.0-RC1", "des": "Forces a rollback by stopping routing the message.", "code": "Class RollbackDefinition {\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tBoolean getMarkRollbackOnly();\n\tBoolean getMarkRollbackOnlyLast();\n\tString getMessage();\n\tString getShortName();\n\tvoid setMarkRollbackOnly(Boolean markRollbackOnly); // Mark the transaction for rollback only (cannot be overruled to commit)\n\tvoid setMarkRollbackOnlyLast(Boolean markRollbackOnlyLast); // Mark only last sub transaction for rollback only.\n\tvoid setMessage(String message); // Message to use in rollback exception\n}"}
{"index": 16047, "repo": "wicket-request-10.0.0-M1", "des": "An interface that a Url can implement if it knows how to render itself as full url or relative to a base url", "code": "public interface IUrlRenderer {\n\tString renderFullUrl(Url url, Url baseUrl); // Renders the passed url as full/absolute.\n\tString renderRelativeUrl(Url url, Url baseUrl); // Renders the passed url as relative to a base url.\n}"}
{"index": 3267, "repo": "hbase-common-3.0.0-alpha-4", "des": "A thread-safe shared object pool in which object creation is expected to be lightweight, and the objects may be excessively created and discarded.", "code": "Class ObjectPool<K,V> {\n\tabstract Reference<V> createReference(K key, V obj); // Create a reference associated with the given object\n\tV get(K key); // Returns a shared object associated with the given key, which is identified by the equals method.\n\tabstract K getReferenceKey(Reference<V> ref); // Get key of the given reference\n\tvoid purge(); // Removes stale references of shared objects from the pool.\n\tint size(); // Returns an estimated count of objects kept in the pool.\n}"}
{"index": 5810, "repo": "iceberg-core-1.3.0", "des": "A writer capable of writing files of a single type (i.", "code": "Interface PartitioningWriter<T,R> {\n\tR result(); // Returns a result that contains information about written DataFiles or DeleteFiles.\n\tvoid write(T row, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Writes a row to the provided spec/partition.\n}"}
{"index": 11554, "repo": "spring-security-oauth2-client-6.1.2", "des": "The default implementation of ServerOAuth2AuthorizationRequestResolver.", "code": "public class DefaultServerOAuth2AuthorizationRequestResolver extends Object implements ServerOAuth2AuthorizationRequestResolver {\n\treactor.core.publisher.Mono<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> resolve(org.springframework.web.server.ServerWebExchange exchange); // Returns the OAuth2AuthorizationRequest resolved from the provided HttpServletRequest or null if not available.\n\treactor.core.publisher.Mono<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> resolve(org.springframework.web.server.ServerWebExchange exchange, String clientRegistrationId); // Returns the OAuth2AuthorizationRequest resolved from the provided HttpServletRequest or null if not available.\n\tfinal void setAuthorizationRequestCustomizer(Consumer<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest.Builder> authorizationRequestCustomizer); // Sets the Consumer to be provided the OAuth2AuthorizationRequest.Builder allowing for further customizations.\n}"}
{"index": 2896, "repo": "amqp-client-5.18.0", "des": "Class which manages a request queue for a simple RPC-style service.", "code": "Class RpcServer {\n\tvoid close(); // Public API - cancels the consumer, thus deleting the queue, if it was a temporary queue, and marks the RpcServer as closed.\n\tChannel getChannel(); // Retrieve the channel.\n\tString getQueueName(); // Retrieve the queue name.\n\tbyte[] handleCall(AMQP.BasicProperties requestProperties, byte[] requestBody, AMQP.BasicProperties replyProperties); // Mid-level response method.\n\tbyte[] handleCall(byte[] requestBody, AMQP.BasicProperties replyProperties); // High-level response method.\n\tbyte[] handleCall(Delivery request, AMQP.BasicProperties replyProperties); // Lowest-level response method.\n\tvoid handleCast(AMQP.BasicProperties requestProperties, byte[] requestBody); // Mid-level handler method.\n\tvoid handleCast(byte[] requestBody); // High-level handler method.\n\tvoid handleCast(Delivery request); // Lowest-level handler method.\n\tShutdownSignalException mainloop(); // Public API - main server loop.\n\tprotected AMQP.BasicProperties postprocessReplyProperties(Delivery request, AMQP.BasicProperties.Builder builder); // Gives a chance to set/modify reply properties after the handling call\n\tprotected AMQP.BasicProperties preprocessReplyProperties(Delivery request, AMQP.BasicProperties.Builder builder); // Gives a chance to set/modify reply properties before handling call.\n\tvoid processRequest(Delivery request); // Private API - Process a single request.\n\tprotected RpcServer.RpcConsumer setupConsumer(); // Registers a consumer on the reply queue.\n\tvoid terminateMainloop(); // Call this method to terminate the mainloop.\n}"}
{"index": 8071, "repo": "commons-compress-1.23.0", "des": "A compressor-defined class file attribute.", "code": "Class NewAttribute {\n\tvoid addBCIndex(int length, int value);\n\tvoid addBCLength(int length, int value);\n\tvoid addBCOffset(int length, int value);\n\tvoid addInteger(int length, long value);\n\tvoid addToBody(int length, Object value);\n\tint getLayoutIndex();\n\tprotected int getLength();\n\tprotected ClassFileEntry[] getNestedClassFileEntries();\n\tprotected int[] getStartPCs();\n\tvoid renumber(List<Integer> byteCodeOffsets); // In Pack200, line number tables are BCI renumbered.\n\tprotected void resolve(ClassConstantPool pool); // Allows the constant pool entries to resolve their nested entries.\n\tprotected void writeBody(DataOutputStream dos);\n}"}
{"index": 9252, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "DeletionTask handling the removal of Docker containers.", "code": "Class DockerContainerDeletionTask {\n\torg.apache.hadoop.yarn.proto.YarnServerNodemanagerRecoveryProtos.DeletionServiceDeleteTaskProto convertDeletionTaskToProto(); // Convert the DockerContainerDeletionTask to the Protobuf representation for storing in the state store and recovery.\n\tString getContainerId(); // Get the id of the container to delete.\n\tvoid run(); // Delete the specified Docker container.\n}"}
{"index": 505, "repo": "ignite-core-2.15.0", "des": "Implementation of binary field descriptor.", "code": "Class BinaryFieldImpl {\n\tboolean exists(BinaryObject obj); // Check whether field exists in the object.\n\tint fieldId();\n\tint fieldOrder(BinaryObjectExImpl obj); // Get relative field offset.\n\tString name(); // Get field's name.\n\t<F> F readField(ByteBuffer buf); // Reads field value from the given byte buffer.\n\tint typeId();\n\t<T> T value(BinaryObject obj); // Get field's value from the given object.\n\tboolean writeField(BinaryObject obj, ByteBuffer buf); // Writes field value to the given byte buffer.\n}"}
{"index": 2186, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnDivideColumn.", "code": "Class LongColModuloDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 5884, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol buffer based implementation of GetSubClustersInfoRequest.", "code": "Class GetSubClustersInfoRequestPBImpl {\n\tboolean equals(Object other);\n\tboolean getFilterInactiveSubClusters(); // Get the flag that indicates whether only active sub-clusters should be returned.\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.GetSubClustersInfoRequestProto getProto();\n\tvoid setFilterInactiveSubClusters(boolean filterInactiveSubClusters); // Set the flag that indicates whether only active sub-clusters should be returned.\n}"}
{"index": 5639, "repo": "org.apache.karaf.main-2.4.4", "des": "ResolverErrors represent a single error that prevents a bundle from resolving in a State object.", "code": "Interface ResolverError {\n\tBundleDescription getBundle(); // Returns the bundle which this ResolverError is for\n\tString getData(); // Returns non-translatable data associated with this ResolverError.\n\tint getType(); // Returns the type of ResolverError this is\n\tVersionConstraint getUnsatisfiedConstraint(); // Returns the unsatisfied constraint if this ResolverError occurred because of an unsatisfied constraint; otherwise null is returned.\n}"}
{"index": 14234, "repo": "wicket-core-10.0.0-M1", "des": "This header response allows you to separate things that are added to the IHeaderResponse into different buckets.", "code": "public class FilteringHeaderResponse extends DecoratingHeaderResponse {\n\tvoid close(); // Mark Header rendering is completed and subsequent usage will be ignored.\n\tprotected IHeaderResponse decorate(IHeaderResponse response); // Decorate the given response used to get contents.\n\tstatic FilteringHeaderResponse get();\n\tfinal CharSequence getContent(String filterName); // Gets the content that was rendered to this header response and matched the filter with the given name.\n\tvoid render(HeaderItem item); // Renders the given HeaderItem to the response if none of its tokens has been rendered before.\n\tprotected void render(HeaderItem item, List<HeaderItem> filteredItems);\n\tprotected void setFilters(Iterable<? extends FilteringHeaderResponse.IHeaderResponseFilter> filters);\n}"}
{"index": 14137, "repo": "wicket-core-10.0.0-M1", "des": "An ImageResource subclass for dynamic images that come from database BLOB fields.", "code": "public abstract class BlobImageResource extends DynamicImageResource {\n\tprotected abstract Blob getBlob(IResource.Attributes attributes); // Gets the BLOB (Binary Large OBject) that holds the raw image data.\n\tprotected byte[] getImageData(IResource.Attributes attributes); // Get image data for our dynamic image resource.\n}"}
{"index": 7465, "repo": "mahout-math-0.13.0", "des": "If f(x, 0) = x, the zeros in y don't matter and we can simply iterate through the nonzeros of y.", "code": "Class VectorBinaryAssign.AssignNonzerosIterateThatLookupThisMergeUpdates {\n\tVector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tdouble estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tboolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 1948, "repo": "nifi-framework-api-1.22.0", "des": "Initialization context for ContentRepository.", "code": "Interface ContentRepositoryContext {\n\tEventReporter getEventReporter(); // Provides a EventReporter for ContentRepository that is used to emit bulletins.\n\tResourceClaimManager getResourceClaimManager(); // Provides a ResourceClaimManager for ContentRepository that is to be used for interacting with ContentClaims.\n}"}
{"index": 4861, "repo": "hadoop-common-3.3.4", "des": "Enum for indicating what mode to use when combining chunk and block checksums to define an aggregate FileChecksum.", "code": "Enum Options.ChecksumCombineMode {\n\tstatic Options.ChecksumCombineMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Options.ChecksumCombineMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1248, "repo": "ignite-core-2.15.0", "des": "Represents committed transactions hash for a pair of nodes.", "code": "Class TransactionsHashRecord {\n\tObject localConsistentId();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tObject remoteConsistentId();\n\tint transactionHash();\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 9115, "repo": "hbase-server-3.0.0-alpha-4", "des": "A remote procedure which is used to send region snapshot request to region server.", "code": "Class SnapshotRegionProcedure {\n\tprotected boolean abort(MasterProcedureEnv env);\n\tprotected Procedure.LockState acquireLock(MasterProcedureEnv env);\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected Procedure<MasterProcedureEnv>[] execute(MasterProcedureEnv env);\n\tString getProcName();\n\tRegionInfo getRegion();\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tprotected boolean holdLock(MasterProcedureEnv env);\n\tprotected void releaseLock(MasterProcedureEnv env);\n\tOptional<RemoteProcedureDispatcher.RemoteOperation> remoteCallBuild(MasterProcedureEnv env, ServerName serverName);\n\tvoid remoteCallFailed(MasterProcedureEnv env, ServerName serverName, IOException e);\n\tvoid remoteOperationCompleted(MasterProcedureEnv env);\n\tvoid remoteOperationFailed(MasterProcedureEnv env, RemoteProcedureException e);\n\tprotected void rollback(MasterProcedureEnv env);\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tprotected boolean setTimeoutFailure(MasterProcedureEnv env);\n\tprotected void toStringClassDetails(StringBuilder builder);\n\tprotected boolean waitInitialized(MasterProcedureEnv env);\n}"}
{"index": 12351, "repo": "jena-core-4.9.0", "des": "Represents an actual value of a simple type.", "code": "public interface XSValue {\n\tObject getActualValue(); // The actual value.\n\tshort getActualValueType(); // The actual value built-in datatype, e.g.\n\tShortList getListValueTypes(); // In the case the actual value represents a list, i.e.\n\tXSSimpleTypeDefinition getMemberTypeDefinition(); // If the declared simple type definition is a union, return the member type actually used to validate the value.\n\tXSObjectList getMemberTypeDefinitions(); // If getTypeDefinition() returns a list type whose item type is a union type, then this method returns a list with the same length as the value list, for simple types that actually validated the corresponding item in the value.\n\tString getNormalizedValue(); // The schema normalized value.\n\tXSSimpleTypeDefinition getTypeDefinition(); // The declared simple type definition used to validate this value.\n}"}
{"index": 12529, "repo": "spring-jdbc-6.0.11", "des": "DataSource that routes to one of various target DataSources based on the current transaction isolation level.", "code": "public class IsolationLevelDataSourceRouter extends AbstractRoutingDataSource {\n\tprotected Object determineCurrentLookupKey(); // Determine the current lookup key.\n\tprotected Object resolveSpecifiedLookupKey(Object lookupKey); // Supports Integer values for the isolation level constants as well as isolation level names as defined on the TransactionDefinition interface.\n}"}
{"index": 4772, "repo": "hadoop-common-3.3.4", "des": "A SSLSocketFactory that can delegate to various SSL implementations.", "code": "Class DelegatingSSLSocketFactory {\n\tSocket createSocket();\n\tSocket createSocket(InetAddress host, int port);\n\tSocket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort);\n\tSocket createSocket(Socket s, String host, int port, boolean autoClose);\n\tSocket createSocket(String host, int port);\n\tSocket createSocket(String host, int port, InetAddress localHost, int localPort);\n\tDelegatingSSLSocketFactory.SSLChannelMode getChannelMode(); // Get the channel mode of this instance.\n\tString[] getDefaultCipherSuites();\n\tstatic DelegatingSSLSocketFactory getDefaultFactory(); // Singleton instance of the SSLSocketFactory.\n\tString getProviderName();\n\tString[] getSupportedCipherSuites();\n\tstatic void initializeDefaultFactory(DelegatingSSLSocketFactory.SSLChannelMode preferredMode); // Initialize a singleton SSL socket factory.\n\tstatic void resetDefaultFactory(); // For testing only: reset the socket factory.\n}"}
{"index": 15453, "repo": "pulsar-client-api-3.0.0", "des": "Types of subscription supported by Pulsar.", "code": "@Public @Stable public enum SubscriptionType extends Enum<SubscriptionType> {\n\tstatic SubscriptionType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SubscriptionType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13705, "repo": "spring-webmvc-6.0.11", "des": "A FlashMap provides a way for one request to store attributes intended for use in another.", "code": "public final class FlashMap extends HashMap<String,Object> implements Comparable<FlashMap> {\n\tFlashMap addTargetRequestParam(String name, String value); // Provide a request parameter identifying the request for this FlashMap.\n\tFlashMap addTargetRequestParams(org.springframework.util.MultiValueMap<String,String> params); // Provide request parameters identifying the request for this FlashMap.\n\tint compareTo(FlashMap other); // Compare two FlashMaps and prefer the one that specifies a target URL path or has more target URL parameters.\n\tboolean equals(Object other);\n\tlong getExpirationTime(); // Return the expiration time for the FlashMap or -1 if the expiration period has not started.\n\torg.springframework.util.MultiValueMap<String,String> getTargetRequestParams(); // Return the parameters identifying the target request, or an empty map.\n\tString getTargetRequestPath(); // Return the target URL path (or null if none specified).\n\tboolean isExpired(); // Return whether this instance has expired depending on the amount of elapsed time since the call to startExpirationPeriod(int).\n\tvoid setExpirationTime(long expirationTime); // Set the expiration time for the FlashMap.\n\tvoid setTargetRequestPath(String path); // Provide a URL path to help identify the target request for this FlashMap.\n\tvoid startExpirationPeriod(int timeToLive); // Start the expiration period for this instance.\n}"}
{"index": 11639, "repo": "spring-websocket-6.0.11", "des": "Detects beans of type ServerEndpointConfig and registers with the standard Jakarta WebSocket runtime.", "code": "public class ServerEndpointExporter extends org.springframework.web.context.support.WebApplicationObjectSupport implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterPropertiesSet();\n\tvoid afterSingletonsInstantiated();\n\tprotected ServerContainer getServerContainer(); // Return the JSR-356 ServerContainer to use for endpoint registration.\n\tprotected void initServletContext(ServletContext servletContext);\n\tprotected boolean isContextRequired();\n\tprotected void registerEndpoints(); // Actually register the endpoints.\n\tvoid setAnnotatedEndpointClasses(Class<?>... annotatedEndpointClasses); // Explicitly list annotated endpoint types that should be registered on startup.\n\tvoid setServerContainer(ServerContainer serverContainer); // Set the JSR-356 ServerContainer to use for endpoint registration.\n}"}
{"index": 5496, "repo": "druid-processing-26.0.0", "des": "Unpack bitpacked long values from an underlying contiguous memory block.", "code": "Interface VSizeLongSerde.LongDeserializer {\n\tlong get(int index); // Unpack long value at the specified row index\n\tdefault int getDelta(long[] out, int outPosition, int[] indexes, int length, int indexOffset, int limit, long base); // Unpack a non-contiguous vector of long values at the specified indexes and adjust them by the supplied delta base value.\n\tvoid getDelta(long[] out, int outPosition, int startIndex, int length, long base); // Unpack a contiguous vector of long values at the specified start index of length and adjust them by the supplied delta base value.\n\tdefault int getTable(long[] out, int outPosition, int[] indexes, int length, int indexOffset, int limit, long[] table); // Unpack a contiguous vector of long values at the specified indexes and lookup and replace stored values based on their index in the supplied value lookup 'table'\n\tdefault void getTable(long[] out, int outPosition, int startIndex, int length, long[] table); // Unpack a contiguous vector of long values at the specified start index of length and lookup and replace stored values based on their index in the supplied value lookup 'table'\n}"}
{"index": 818, "repo": "ignite-core-2.15.0", "des": "This interface declares a basic contract on message parsing and encoding to the underlying network layer.", "code": "Interface GridNioParser {\n\t@Nullable Object decode(GridNioSession ses, ByteBuffer buf); // This method is called when input bytes are available on the underlying network connection.\n\tByteBuffer encode(GridNioSession ses, Object msg); // This method is called whenever a message should be sent to the network connection and network buffer is ready to be filled with bytes.\n}"}
{"index": 9783, "repo": "commons-math3-3.6.1", "des": "Base interface for distributions on the reals.", "code": "Interface RealDistribution {\n\tdouble cumulativeProbability(double x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble cumulativeProbability(double x0, double x1); // Deprecated. As of 3.1. In 4.0, this method will be renamed probability(double x0, double x1).\n\tdouble density(double x); // Returns the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tdouble getSupportLowerBound(); // Access the lower bound of the support.\n\tdouble getSupportUpperBound(); // Access the upper bound of the support.\n\tdouble inverseCumulativeProbability(double p); // Computes the quantile function of this distribution.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tboolean isSupportLowerBoundInclusive(); // Deprecated. to be removed in 4.0\n\tboolean isSupportUpperBoundInclusive(); // Deprecated. to be removed in 4.0\n\tdouble probability(double x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X = x).\n\tvoid reseedRandomGenerator(long seed); // Reseed the random generator used to generate samples.\n\tdouble sample(); // Generate a random value sampled from this distribution.\n\tdouble[] sample(int sampleSize); // Generate a random sample from the distribution.\n}"}
{"index": 2499, "repo": "exoplayer-r2.3.1", "des": "An HttpDataSource that uses Android's HttpURLConnection.", "code": "Class DefaultHttpDataSource {\n\tprotected long bytesRead(); // Returns the number of bytes that have been read since the most recent call to open(DataSpec).\n\tprotected long bytesRemaining(); // Returns the number of bytes that are still to be read for the current DataSpec.\n\tprotected long bytesSkipped(); // Returns the number of bytes that have been skipped since the most recent call to open(DataSpec).\n\tvoid clearAllRequestProperties(); // Clears all request headers that were set by HttpDataSource.setRequestProperty(String, String).\n\tvoid clearRequestProperty(java.lang.String name); // Clears the value of a request header.\n\tvoid close(); // Closes the source.\n\tprotected java.net.HttpURLConnection getConnection(); // Returns the current connection, or null if the source is not currently opened.\n\tjava.util.Map<java.lang.String,java.util.List<java.lang.String>> getResponseHeaders(); // Returns the headers provided in the response, or null if response headers are unavailable.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to length bytes of data and stores them into buffer, starting at index offset.\n\tvoid setRequestProperty(java.lang.String name, java.lang.String value); // Sets the value of a request header.\n}"}
{"index": 12626, "repo": "spring-data-mongodb-4.1.2", "des": "Abstraction for db.collection.update() using an aggregation pipeline.", "code": "public class AggregationUpdate extends Aggregation implements UpdateDefinition {\n\tstatic AggregationUpdate from(List<AggregationOperation> pipeline); // Create a new AggregationUpdate from the given AggregationOperations.\n\tList<UpdateDefinition.ArrayFilter> getArrayFilters(); // Get the specification which elements to modify in an array field.\n\torg.bson.Document getUpdateObject();\n\tvoid inc(String key); // Increment the value of a given key by 1.\n\tBoolean isIsolated(); // If true prevents a write operation that affects multiple documents from yielding to other reads or writes once the first document is written.\n\tAggregationUpdate isolated(); // Prevents a write operation that affects multiple documents from yielding to other reads or writes once the first document is written.\n\tboolean modifies(String key); // Check if a given key is modified by applying the update.\n\tAggregationUpdate replaceWith(Object value); // $replaceWith replaces the input document with the value.\n\tAggregationUpdate replaceWith(ReplaceWithOperation replaceWithOperation); // $replaceWith replaces the input document with the specified document.\n\tAggregationUpdate.SetValueAppender set(String key); // Fluent API variant for $set adding a single pipeline operation every time.\n\tAggregationUpdate set(SetOperation setOperation); // Adds new fields to documents.\n\tAggregationUpdate unset(String... keys); // Short for unset(UnsetOperation).\n\tAggregationUpdate unset(UnsetOperation unsetOperation); // $unset removes/excludes fields from documents.\n\tstatic AggregationUpdate update(); // Start defining the update pipeline to execute.\n}"}
{"index": 6302, "repo": "commons-codec-1.16.0", "des": "Implementation of the MurmurHash3 32-bit and 128-bit hash functions.", "code": "Class MurmurHash3 {\n\tstatic long[] hash128(byte[] data); // Generates 128-bit hash from the byte array with a default seed.\n\tstatic long[] hash128x64(byte[] data); // Generates 128-bit hash from the byte array with a seed of zero.\n\tstatic long[] hash128x64(byte[] data, int offset, int length, int seed); // Generates 128-bit hash from the byte array with the given offset, length and seed.\n\tstatic int hash32(long data); // Generates 32-bit hash from a long with a default seed value.\n\tstatic int hash32(long data, int seed); // Generates 32-bit hash from a long with the given seed.\n\tstatic int hash32(long data1, long data2); // Generates 32-bit hash from two longs with a default seed value.\n\tstatic int hash32(long data1, long data2, int seed); // Generates 32-bit hash from two longs with the given seed.\n\tstatic int hash32x86(byte[] data); // Generates 32-bit hash from the byte array with a seed of zero.\n\tstatic int hash32x86(byte[] data, int offset, int length, int seed); // Generates 32-bit hash from the byte array with the given offset, length and seed.\n}"}
{"index": 2230, "repo": "hive-exec-4.0.0-alpha-2", "des": "The transformation step that does partition pruning.", "code": "Class PartitionPruner {\n\tstatic boolean hasColumnExpr(ExprNodeDesc desc); // Whether the expression contains a column node or not.\n\tstatic boolean onlyContainsPartnCols(Table tab, ExprNodeDesc expr); // Find out whether the condition only contains partitioned columns.\n\tstatic PrunedPartitionList prune(Table tab, ExprNodeDesc prunerExpr, HiveConf conf, String alias, Map<String,PrunedPartitionList> prunedPartitionsMap); // Get the partition list for the table that satisfies the partition pruner condition.\n\tstatic PrunedPartitionList prune(TableScanOperator ts, ParseContext parseCtx, String alias); // Get the partition list for the TS operator that satisfies the partition pruner condition.\n\tstatic boolean prunePartitionNames(List<String> partColumnNames, List<PrimitiveTypeInfo> partColumnTypeInfos, ExprNodeDesc prunerExpr, String defaultPartitionName, List<String> partNames); // Prunes partition names to see if they match the prune expression.\n\tParseContext transform(ParseContext pctx); // All transformation steps implement this interface.\n}"}
{"index": 954, "repo": "ignite-core-2.15.0", "des": "Index queries work over distributed indexes and retrieve cache entries that match the specified criteria.", "code": "Class IndexQuery<K,V> {\n\tList<IndexQueryCriterion> getCriteria(); // Index query criteria.\n\tIgniteBiPredicate<K,V> getFilter(); // Gets remote cache entries filter.\n\tString getIndexName(); // Index name.\n\t@Nullable Integer getPartition(); // Gets partition number over which this query should iterate.\n\tString getValueType(); // Cache Value type.\n\tIndexQuery<K,V> setCriteria(IndexQueryCriterion... criteria); // Sets conjunction (AND) criteria for index query.\n\tIndexQuery<K,V> setCriteria(List<IndexQueryCriterion> criteria); // Sets conjunction (AND) criteria for index query.\n\tIndexQuery<K,V> setFilter(IgniteBiPredicate<K,V> filter); // Sets remote cache entries filter.\n\tIndexQuery<K,V> setPartition(@Nullable Integer part); // Sets partition number over which this query should iterate.\n}"}
{"index": 4845, "repo": "hadoop-common-3.3.4", "des": "Interface to provide immutable metainfo for metrics.", "code": "Interface MetricsInfo {\n\tString description(); // Typically the description corresponds to annotation Metric.about() or the name of the class.\n\tString name(); // Typically name corresponds to annotation Metric.value() or the name of the class.\n}"}
{"index": 17794, "repo": "spring-web-6.0.11", "des": "Factory to manage JDK HttpClient resources such as a shared Executor within the lifecycle of a Spring ApplicationContext.", "code": "public class JdkHttpClientResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet();\n\tvoid destroy();\n\tExecutor getExecutor(); // Return the configured Executor.\n\tvoid setExecutor(Executor executor); // Configure the Executor to use for HttpClient exchanges.\n\tvoid setThreadPrefix(String threadPrefix); // Configure the thread prefix to initialize the executor with.\n}"}
{"index": 4049, "repo": "zookeeper-3.8.2", "des": "Abstraction that exposes various methods useful for testing ZooKeeper.", "code": "Interface Testable {\n\tvoid injectSessionExpiration(); // Cause the ZooKeeper instance to behave as if the session expired\n\tvoid queueEvent(WatchedEvent event); // Allow an event to be inserted into the event queue\n}"}
{"index": 6220, "repo": "jackson-databind-2.15.2", "des": "Separate implementation for serializing String arrays (instead of using ObjectArrayDeserializer.", "code": "Class StringArrayDeserializer {\n\tprotected String[] _deserializeCustom(JsonParser p, DeserializationContext ctxt, String[] old); // Offlined version used when we do not use the default deserialization method.\n\tJsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property); // Contextualization is needed to see whether we can \"inline\" deserialization of String values, or if we have to use separate value deserializer.\n\tString[] deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tString[] deserialize(JsonParser p, DeserializationContext ctxt, String[] intoValue); // Alternate deserialization method (compared to the most commonly used, JsonDeserializer.deserialize(JsonParser, DeserializationContext)), which takes in initialized value instance, to be configured and/or populated by deserializer.\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Base implementation that does not assume specific type inclusion mechanism.\n\tAccessPattern getEmptyAccessPattern(); // This method may be called in conjunction with calls to JsonDeserializer.getEmptyValue(DeserializationContext), to check whether it needs to be called just once (static values), or each time empty value is needed.\n\tObject getEmptyValue(DeserializationContext ctxt); // Method called to determine value to be used for \"empty\" values (most commonly when deserializing from empty JSON Strings).\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n\tBoolean supportsUpdate(DeserializationConfig config); // Introspection method that may be called to see whether deserializer supports update of an existing value (aka \"merging\") or not.\n}"}
{"index": 12864, "repo": "spring-data-mongodb-4.1.2", "des": "ScriptOperators.Accumulator defines a custom aggregation $accumulator operator, one that maintains its state (e.g. totals, maximums, minimums, and related data) as documents progress through the pipeline, in JavaScript.", "code": "public static class ScriptOperators.Accumulator extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 15525, "repo": "spring-batch-core-5.0.2", "des": "Central convenience class for framework use in managing the job scope context.", "code": "public class JobSynchronizationManager extends Object {\n\tstatic void close(); // Method for unregistering the current context - should always and only be used by in conjunction with a matching register(JobExecution) to ensure that getContext() always returns the correct value.\n\tstatic JobContext getContext(); // Getter for the current context if there is one, otherwise returns null.\n\tstatic JobContext register(JobExecution JobExecution); // Register a context with the current thread - always put a matching close() call in a finally block to ensure that the correct context is available in the enclosing block.\n\tstatic void release(); // A convenient \"deep\" close operation.\n}"}
{"index": 5757, "repo": "freemarker-2.3.32", "des": "Runtime exception in a template (as opposed to a parsing-time exception: ParseException).", "code": "Class TemplateException {\n\tjava.lang.String getBlamedExpressionString(); // If there was a blamed expression attached to this exception, it returns its canonical form, otherwise it returns null.\n\tjava.lang.Integer getColumnNumber(); // 1-based column number of the failing section, or null if the information is not available.\n\tjava.lang.Integer getEndColumnNumber(); // 1-based column number of the last character of the failing template section, or null if the information is not available.\n\tjava.lang.Integer getEndLineNumber(); // 1-based line number of the last line that contains the failing section, or null if the information is not available.\n\tEnvironment getEnvironment();\n\tjava.lang.String getFTLInstructionStack(); // Returns the snapshot of the FTL stack trace at the time this exception was created.\n\tjava.lang.Integer getLineNumber(); // 1-based line number of the failing section, or null if the information is not available.\n\tjava.lang.String getMessage();\n\tjava.lang.String getMessageWithoutStackTop(); // Similar to getMessage(), but it doesn't contain the position of the failing instruction at then end of the text.\n\tjava.lang.String getTemplateSourceName(); // Returns the source name (Template.getSourceName()) of the template where the error has occurred, or null if the information isn't available.\n\tvoid printStackTrace(java.io.PrintStream out); // Overrides Throwable.printStackTrace(PrintStream) so that it will include the FTL stack trace.\n\tvoid printStackTrace(java.io.PrintStream out, boolean heading, boolean ftlStackTrace, boolean javaStackTrace);\n\tvoid printStackTrace(java.io.PrintWriter out); // Overrides Throwable.printStackTrace(PrintWriter) so that it will include the FTL stack trace.\n\tvoid printStackTrace(java.io.PrintWriter out, boolean heading, boolean ftlStackTrace, boolean javaStackTrace);\n\tvoid printStandardStackTrace(java.io.PrintStream ps); // Prints the stack trace as if wasn't overridden by TemplateException.\n\tvoid printStandardStackTrace(java.io.PrintWriter pw); // Prints the stack trace as if wasn't overridden by TemplateException.\n}"}
{"index": 16216, "repo": "spring-data-cassandra-4.1.2", "des": "Factory for Cassandra Schema objects such as user-defined types, tables and indexes.", "code": "public class SchemaFactory extends Object {\n\tList<CreateIndexSpecification> getCreateIndexSpecificationsFor(Class<?> entityType); // Returns index specifications derived from CassandraPersistentEntity.\n\tList<CreateIndexSpecification> getCreateIndexSpecificationsFor(CassandraPersistentEntity<?> entity); // Returns index specifications derived from CassandraPersistentEntity.\n\tList<CreateIndexSpecification> getCreateIndexSpecificationsFor(CassandraPersistentEntity<?> entity, com.datastax.oss.driver.api.core.CqlIdentifier tableName); // Returns index specifications derived from CassandraPersistentEntity using table name.\n\tCreateTableSpecification getCreateTableSpecificationFor(Class<?> entityType); // Returns a CreateTableSpecification for the given entity, including all mapping information.\n\tCreateTableSpecification getCreateTableSpecificationFor(CassandraPersistentEntity<?> entity); // Returns a CreateTableSpecification for the given entity, including all mapping information.\n\tCreateTableSpecification getCreateTableSpecificationFor(CassandraPersistentEntity<?> entity, com.datastax.oss.driver.api.core.CqlIdentifier tableName); // Returns a CreateTableSpecification for the given entity using table name, including all mapping information.\n\tCreateUserTypeSpecification getCreateUserTypeSpecificationFor(CassandraPersistentEntity<?> entity); // Returns a CreateUserTypeSpecification for the given entity, including all mapping information.\n}"}
{"index": 5706, "repo": "freemarker-2.3.32", "des": "As opposed to PathGlobMatcher, it only compares the \"file name\" part (the part after the last /) of the source name with the given glob.", "code": "Class FileNameGlobMatcher {\n\tFileNameGlobMatcher caseInsensitive(boolean caseInsensitive); // Fluid API variation of setCaseInsensitive(boolean)\n\tboolean isCaseInsensitive();\n\tboolean matches(java.lang.String sourceName, java.lang.Object templateSource);\n\tvoid setCaseInsensitive(boolean caseInsensitive); // Sets if the matching will be case insensitive (UNICODE compliant); default is false.\n}"}
{"index": 4500, "repo": "beam-sdks-java-core-2.49.0", "des": "A Concrete subclass of Row that delegates to a set of provided FieldValueGetters.", "code": "Class RowWithGetters {\n\tboolean equals(@Nullable java.lang.Object o);\n\tint getFieldCount(); // Return the size of data fields.\n\tjava.util.List<FieldValueGetter> getGetters();\n\tjava.lang.Object getGetterTarget();\n\t<T> T getValue(int fieldIdx); // Get value by field index, ClassCastException is thrown if schema doesn't match.\n\tjava.util.List<java.lang.Object> getValues(); // Return the list of raw unmodified data values to enable 0-copy code.\n}"}
{"index": 11698, "repo": "spring-cloud-commons-3.1.7", "des": "A REST resource that can be discovered and can be either gone or available.", "code": "public interface RemoteResource {\n\torg.springframework.hateoas.Link getLink(); // Returns the Link to the resource if it is available, or null if it is gone (i.e.\n\tvoid verifyOrDiscover(); // Discovers the resource if it hasn't been discovered yet or has become unavailable.\n}"}
{"index": 16257, "repo": "maven-model-builder-4.0.0-alpha-7", "des": "Provides access to the contents of a POM independently of the backing store (e.g.", "code": "public interface ModelSource2 extends ModelSource {\n\tURI getLocationURI(); // Returns location of the POM, never null.\n\tModelSource2 getRelatedSource(String relPath); // Returns model source identified by a path relative to this model source POM.\n}"}
{"index": 5926, "repo": "hadoop-yarn-server-common-3.3.6", "des": "An utility that helps to determine the sub-cluster that a specified node or rack belongs to.", "code": "Interface SubClusterResolver {\n\tSubClusterId getSubClusterForNode(String nodename); // Obtain the sub-cluster that a specified node belongs to.\n\tSet<SubClusterId> getSubClustersForRack(String rackname); // Obtain the sub-clusters that have nodes on a specified rack.\n\tvoid load(); // Load the nodes to subCluster mapping from the file.\n}"}
{"index": 10992, "repo": "spring-data-redis-3.1.2", "des": "Transaction/Batch specific commands supported by Redis.", "code": "public interface RedisTxCommands {\n\tvoid discard(); // Discard all commands issued after multi().\n\tList<Object> exec(); // Executes all queued commands in a transaction started with multi().\n\tvoid multi(); // Mark the start of a transaction block.\n\tvoid unwatch(); // Flushes all the previously watch(byte[]...) keys.\n\tvoid watch(byte[]... keys); // Watch given keys for modifications during transaction started with multi().\n}"}
{"index": 6550, "repo": "exoplayer-core-2.9.6", "des": "Helper class to download, renew and release offline licenses.", "code": "Class OfflineLicenseHelper<T extends ExoMediaCrypto> {\n\tbyte[] downloadLicense(DrmInitData drmInitData); // Downloads an offline license.\n\tandroid.util.Pair<java.lang.Long,java.lang.Long> getLicenseDurationRemainingSec(byte[] offlineLicenseKeySetId); // Returns the remaining license and playback durations in seconds, for an offline license.\n\tbyte[] getPropertyByteArray(java.lang.String key);\n\tjava.lang.String getPropertyString(java.lang.String key);\n\tstatic OfflineLicenseHelper<FrameworkMediaCrypto> newWidevineInstance(java.lang.String defaultLicenseUrl, boolean forceDefaultLicenseUrl, HttpDataSource.Factory httpDataSourceFactory); // Instantiates a new instance which uses Widevine CDM.\n\tstatic OfflineLicenseHelper<FrameworkMediaCrypto> newWidevineInstance(java.lang.String defaultLicenseUrl, boolean forceDefaultLicenseUrl, HttpDataSource.Factory httpDataSourceFactory, java.util.HashMap<java.lang.String,java.lang.String> optionalKeyRequestParameters); // Instantiates a new instance which uses Widevine CDM.\n\tstatic OfflineLicenseHelper<FrameworkMediaCrypto> newWidevineInstance(java.lang.String defaultLicenseUrl, HttpDataSource.Factory httpDataSourceFactory); // Instantiates a new instance which uses Widevine CDM.\n\tvoid release(); // Releases the helper.\n\tvoid releaseLicense(byte[] offlineLicenseKeySetId); // Releases an offline license.\n\tbyte[] renewLicense(byte[] offlineLicenseKeySetId); // Renews an offline license.\n\tvoid setPropertyByteArray(java.lang.String key, byte[] value);\n\tvoid setPropertyString(java.lang.String key, java.lang.String value);\n}"}
{"index": 5089, "repo": "commons-collections-3.2.2", "des": "Decorates another SortedSet to transform objects that are added.", "code": "Class TransformedSortedSet {\n\tComparator comparator();\n\tstatic SortedSet decorate(SortedSet set, Transformer transformer); // Factory method to create a transforming sorted set.\n\tObject first();\n\tprotected SortedSet getSortedSet(); // Gets the decorated set.\n\tSortedSet headSet(Object toElement);\n\tObject last();\n\tSortedSet subSet(Object fromElement, Object toElement);\n\tSortedSet tailSet(Object fromElement);\n}"}
{"index": 7219, "repo": "calcite-core-1.34.0", "des": "A SqlJdbcFunctionCall is a node of a parse tree which represents a JDBC function call.", "code": "Class SqlJdbcFunctionCall {\n\tSqlCall createCall(@Nullable SqlLiteral functionQualifier, SqlParserPos pos, SqlNode... operands); // Creates a call to this operator with an array of operands.\n\tRelDataType deriveType(SqlValidator validator, SqlValidatorScope scope, SqlCall call); // Derives the type of a call to this operator.\n\tString getAllowedSignatures(String name); // Returns a string describing the expected operand types of a call, e.g.\n\tSqlCall getLookupCall();\n\tstatic String getNumericFunctions(); // As DatabaseMetaData.getNumericFunctions().\n\tstatic String getStringFunctions(); // As DatabaseMetaData.getStringFunctions().\n\tstatic String getSystemFunctions(); // As DatabaseMetaData.getSystemFunctions().\n\tstatic String getTimeDateFunctions(); // As DatabaseMetaData.getTimeDateFunctions().\n\tRelDataType inferReturnType(SqlOperatorBinding opBinding); // Infers the return type of an invocation of this operator; only called after the number and types of operands have already been validated.\n\tSqlNode rewriteCall(SqlValidator validator, SqlCall call); // Rewrites a call to this operator.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n}"}
{"index": 5968, "repo": "commons-lang3-3.12.0", "des": "A functional interface like DoubleConsumer that declares a Throwable.", "code": "Interface FailableDoubleConsumer<E extends Throwable> {\n\tvoid accept(double value); // Accepts the consumer.\n\tdefault FailableDoubleConsumer<E> andThen(FailableDoubleConsumer<E> after); // Returns a composed FailableDoubleConsumer like DoubleConsumer.andThen(DoubleConsumer).\n\tstatic <E extends Throwable>FailableDoubleConsumer<E> nop(); // Returns The NOP singleton.\n}"}
{"index": 8367, "repo": "hive-common-4.0.0-alpha-2", "des": "Same as Hadoop ReflectionUtils, but (1) does not leak classloaders (or shouldn't anyway, we rely on Guava cache, and could fix it otherwise); (2) does not have a hidden epic lock.", "code": "Class ReflectionUtil {\n\tstatic <T> T newInstance(Class<T> theClass, org.apache.hadoop.conf.Configuration conf); // Create an object for the given class and initialize it from conf\n\tstatic void setConf(Object theObject, org.apache.hadoop.conf.Configuration conf); // Check and set 'configuration' if necessary.\n}"}
{"index": 8557, "repo": "commons-io-2.13.0", "des": "Simple alternative to JDK PipedInputStream; queue input stream provides what's written in queue output stream.", "code": "Class QueueInputStream {\n\tstatic QueueInputStream.Builder builder(); // Constructs a new QueueInputStream.Builder.\n\tQueueOutputStream newQueueOutputStream(); // Creates a new QueueOutputStream instance connected to this.\n\tint read(); // Reads and returns a single byte.\n}"}
{"index": 4723, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "Path based site URL factory implementation that handles requests for the \"tablet\" site.", "code": "Class TabletSitePathUrlFactory {\n\tjava.lang.String createSiteUrl(javax.servlet.http.HttpServletRequest request); // Create a fully-qualified URL that can be used to redirect the user to this site.\n\tboolean isRequestForSite(javax.servlet.http.HttpServletRequest request); // Did the request originate from this site? Used to determine what site the user is currently viewing.\n}"}
{"index": 10382, "repo": "spring-core-6.0.11", "des": "Simple javax.xml.namespace.NamespaceContext implementation.", "code": "public class SimpleNamespaceContext extends Object implements NamespaceContext {\n\tvoid bindDefaultNamespaceUri(String namespaceUri); // Bind the given namespace as default namespace.\n\tvoid bindNamespaceUri(String prefix, String namespaceUri); // Bind the given prefix to the given namespace.\n\tvoid clear(); // Remove all declared prefixes.\n\tIterator<String> getBoundPrefixes(); // Return all declared prefixes.\n\tString getNamespaceURI(String prefix);\n\tString getPrefix(String namespaceUri);\n\tIterator<String> getPrefixes(String namespaceUri);\n\tvoid removeBinding(String prefix); // Remove the given prefix from this context.\n\tvoid setBindings(Map<String,String> bindings); // Set the bindings for this namespace context.\n}"}
{"index": 2790, "repo": "tika-parsers-1.28.5", "des": "This class is used to represent the property contains 4 bytes of data in the PropertySet.", "code": "Class FourBytesOfData {\n\tint doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the FourBytesOfData from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of FourBytesOfData into a byte List.\n}"}
{"index": 6873, "repo": "calcite-core-1.34.0", "des": "Relational expression that iterates over its input and returns elements for which condition evaluates to true.", "code": "Class Filter {\n\tRelNode accept(RexShuttle shuttle); // Accepts a visit from a shuttle.\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tboolean containsOver(); // Returns whether this Filter contains any windowed-aggregate functions.\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tabstract Filter copy(RelTraitSet traitSet, RelNode input, RexNode condition);\n\tprotected boolean deepEquals0(@Nullable Object obj);\n\tprotected int deepHashCode0();\n\tdouble estimateRowCount(RelMetadataQuery mq); // Returns an estimate of the number of rows this relational expression will return.\n\tRelWriter explainTerms(RelWriter pw); // Describes the inputs and attributes of this relational expression.\n\tRexNode getCondition();\n\tcom.google.common.collect.ImmutableList<RelHint> getHints(); // Returns the hints of this relational expressions as an immutable list.\n\tboolean isValid(Litmus litmus, @Nullable RelNode.Context context); // Returns whether this relational expression is valid.\n}"}
{"index": 7678, "repo": "cassandra-all-4.1.2", "des": "Common abstraction of functionality which can be implemented for different logging backend implementations (slf4j bindings).", "code": "Interface LoggingSupport {\n\tjava.util.Map<java.lang.String,java.lang.String> getLoggingLevels();\n\tdefault void onShutdown(); // Hook used to execute logging implementation specific customization at Cassandra shutdown time.\n\tdefault void onStartup(); // Hook used to execute logging implementation specific customization at Cassandra startup time.\n\tvoid setLoggingLevel(java.lang.String classQualifier, java.lang.String rawLevel); // Changes the given logger to the given log level.\n}"}
{"index": 10676, "repo": "groovy-all-4.0.13", "des": "Interface to access VM version based actions.", "code": "public interface VMPlugin {\n\tboolean checkAccessible(Class<?> callerClass, Class<?> declaringClass, int memberModifiers, boolean allowIllegalAccess); // check whether the member can be accessed or not\n\tboolean checkCanSetAccessible(AccessibleObject accessibleObject, Class<?> callerClass); // Check whether invoking AccessibleObject.setAccessible(boolean) on the accessible object will be completed successfully\n\tvoid configureAnnotation(AnnotationNode an);\n\tvoid configureAnnotationNodeFromDefinition(AnnotationNode definition, AnnotationNode root);\n\tvoid configureClassNode(CompileUnit compileUnit, ClassNode classNode);\n\t<T> T doPrivileged(PrivilegedAction<T> action); // Deprecated.\n\t<T> T doPrivileged(PrivilegedExceptionAction<T> action); // Deprecated.\n\tdefault Map<String,Set<String>> getDefaultImportClasses(String[] packageNames); // Returns the default import classes: class name -> the relevant package names\n\tObject getInvokeSpecialHandle(Method m, Object receiver); // Returns a handle with bound receiver to invokeSpecial the given method.\n\tstatic String getJavaVersion(); // Returns java version, e.g.\n\tClass[] getPluginDefaultGroovyMethods();\n\tClass[] getPluginStaticGroovyMethods();\n\tint getVersion(); // Gives the version the plugin is made for\n\tvoid invalidateCallSites();\n\tObject invokeHandle(Object handle, Object[] args); // Invokes a handle produced by #getInvokeSpecialdHandle\n\tvoid setAdditionalClassInformation(ClassNode c);\n\tMetaMethod transformMetaMethod(MetaClass metaClass, MetaMethod metaMethod); // transform meta method.\n\tMetaMethod transformMetaMethod(MetaClass metaClass, MetaMethod metaMethod, Class<?> caller); // transform meta method\n\tboolean trySetAccessible(AccessibleObject ao); // Set the accessible flag for this reflected object to true if possible.\n}"}
{"index": 1178, "repo": "ignite-core-2.15.0", "des": "Snapshot task to verify snapshot metadata on the baseline nodes for given snapshot name.", "code": "Class SnapshotMetadataVerificationTask {\n\t@NotNull Map<? extends ComputeJob,ClusterNode> map(List<ClusterNode> subgrid, SnapshotMetadataVerificationTaskArg arg); // This method is called to map or split grid task into multiple grid jobs.\n\t@Nullable SnapshotMetadataVerificationTaskResult reduce(List<ComputeJobResult> results); // Reduces (or aggregates) results received so far into one compound result to be returned to caller via ComputeTaskFuture.get() method.\n\tComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd); // Default implementation which will wait for all jobs to complete before calling ComputeTask.reduce(List) method.\n}"}
{"index": 17616, "repo": "spring-ldap-core-3.1.0", "des": "Helper class to encode and decode ldap names and values.", "code": "public final class LdapEncoder extends Object {\n\tstatic String filterEncode(String value); // Escape a value for use in a filter.\n\tstatic String nameDecode(String value); // Decodes a value.\n\tstatic String nameEncode(String value); // LDAP Encodes a value for use with a DN.\n\tstatic byte[] parseBase64Binary(String val); // Converts the Base64 encoded string argument into an array of bytes.\n\tstatic String printBase64Binary(byte[] val); // Converts an array of bytes into a Base64 encoded string according to the rules for converting LDAP Attributes in RFC2849.\n\tprotected static String toTwoCharHex(char c);\n}"}
{"index": 1773, "repo": "kafka-clients-3.5.0", "des": "A scheme for calculating the bins where the width of each bin is a constant determined by the range of values and the number of bins.", "code": "Class Histogram.ConstantBinScheme {\n\tint bins(); // Get the number of bins.\n\tdouble fromBin(int b); // Determine the value at the upper range of the specified bin.\n\tint toBin(double x); // Determine the 0-based bin number in which the supplied value should be placed.\n}"}
{"index": 432, "repo": "phoenix-core-5.1.3", "des": "Region observer coprocessor for sequence operations: 1) For creating a sequence, as checkAndPut does not allow us to scope the Get done for the check with a TimeRange.", "code": "Class SequenceRegionObserver {\n\tOptional<org.apache.hadoop.hbase.coprocessor.RegionObserver> getRegionObserver();\n\torg.apache.hadoop.hbase.client.Result preAppend(org.apache.hadoop.hbase.coprocessor.ObserverContext<org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment> e, org.apache.hadoop.hbase.client.Append append); // Override the preAppend for checkAndPut and checkAndDelete, as we need the ability to a) set the TimeRange for the Get being done and b) return something back to the client to indicate success/failure\n\torg.apache.hadoop.hbase.client.Result preIncrement(org.apache.hadoop.hbase.coprocessor.ObserverContext<org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment> e, org.apache.hadoop.hbase.client.Increment increment); // Use PreIncrement hook of BaseRegionObserver to overcome deficiencies in Increment implementation (HBASE-10254): 1) Lack of recognition and identification of when the key value to increment doesn't exist 2) Lack of the ability to set the timestamp of the updated key value.\n}"}
{"index": 11821, "repo": "spring-kafka-3.0.9", "des": "An error handler that has access to the consumer.", "code": "@FunctionalInterface public interface ConsumerAwareListenerErrorHandler extends KafkaListenerErrorHandler {\n\tdefault Object handleError(org.springframework.messaging.Message<?> message, ListenerExecutionFailedException exception); // Handle the error.\n\tObject handleError(org.springframework.messaging.Message<?> message, ListenerExecutionFailedException exception, org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Handle the error.\n}"}
{"index": 6620, "repo": "ignite-indexing-2.15.0", "des": "Processor responsible for execution of all non-SELECT and non-DML commands.", "code": "Class CommandProcessor {\n\tvoid doRollback(@NotNull GridNearTxLocal tx); // Rollback and properly close transaction.\n\tstatic boolean isCommand(org.h2.command.Prepared cmd);\n\tstatic boolean isCommandNoOp(org.h2.command.Prepared cmd);\n\tboolean isCommandSupported(SqlCommand cmd);\n\tCommandResult runCommand(String sql, SqlCommand cmdNative, GridSqlStatement cmdH2, QueryParameters params, @Nullable SqlClientContext cliCtx, long qryId); // Execute command.\n\tFieldsQueryCursor<List<?>> runNativeCommand(String sql, SqlCommand cmdNative, QueryParameters params, @Nullable SqlClientContext cliCtx, Long qryId); // Execute native command.\n}"}
{"index": 7177, "repo": "calcite-core-1.34.0", "des": "A <character value expression> consisting of a column reference has the coercibility characteristic Implicit, with collating sequence as defined when the column was created.", "code": "Enum SqlCollation.Coercibility {\n\tstatic SqlCollation.Coercibility valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlCollation.Coercibility[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5755, "repo": "freemarker-2.3.32", "des": "Represents a date/time/dateTime format; used in templates for formatting and parsing with that format.", "code": "Class TemplateDateFormat {\n\tjava.lang.Object format(TemplateDateModel dateModel); // Formats the model to markup instead of to plain text if the result markup will be more than just plain text escaped, otherwise falls back to formatting to plain text.\n\tabstract java.lang.String formatToPlainText(TemplateDateModel dateModel);\n\tabstract boolean isLocaleBound(); // Tells if this formatter should be re-created if the locale changes.\n\tabstract boolean isTimeZoneBound(); // Tells if this formatter should be re-created if the time zone changes.\n\tabstract java.lang.Object parse(java.lang.String s, int dateType); // Parsers a string to date/time/datetime, according to this format.\n}"}
{"index": 15467, "repo": "spring-batch-core-5.0.2", "des": "A JobFactory that creates its own ApplicationContext and pulls a bean out when asked to create a Job.", "code": "public class ApplicationContextJobFactory extends Object implements JobFactory {\n\tfinal Job createJob(); // Create an ApplicationContext from the factory provided and pull out a bean with the name given during initialization.\n\tString getJobName(); // Return the name of the instance passed in on initialization.\n}"}
{"index": 3443, "repo": "preflight-3.0.0-beta1", "des": "Object returned by the validate method of the PDFValidator.", "code": "Class ValidationResult {\n\tvoid addError(ValidationResult.ValidationError error); // Add error to the list of ValidationError.\n\tvoid addErrors(List<ValidationResult.ValidationError> errors); // Add a set of errors to the list of ValidationError.\n\tList<ValidationResult.ValidationError> getErrorsList();\n\torg.apache.xmpbox.XMPMetadata getXmpMetaData();\n\tboolean isValid();\n\tvoid mergeResult(ValidationResult otherResult); // Add the ValidationError object of the otherResult in the Error list of the current object.\n}"}
{"index": 11664, "repo": "spring-websocket-6.0.11", "des": "An extension of AbstractClientSockJsSession wrapping and delegating to an actual WebSocket session.", "code": "public class WebSocketClientSockJsSession extends AbstractClientSockJsSession implements NativeWebSocketSession {\n\tprotected void disconnect(CloseStatus status);\n\tString getAcceptedProtocol(); // Return the negotiated sub-protocol.\n\tint getBinaryMessageSizeLimit(); // Get the configured maximum size for an incoming binary message.\n\tList<WebSocketExtension> getExtensions(); // Determine the negotiated extensions.\n\tInetSocketAddress getLocalAddress(); // Return the address on which the request was received.\n\tObject getNativeSession(); // Return the underlying native WebSocketSession.\n\t<T> T getNativeSession(Class<T> requiredType); // Return the underlying native WebSocketSession, if available.\n\tInetSocketAddress getRemoteAddress(); // Return the address of the remote client.\n\tint getTextMessageSizeLimit(); // Get the configured maximum size for an incoming text message.\n\tvoid initializeDelegateSession(WebSocketSession session);\n\tprotected void sendInternal(TextMessage textMessage);\n\tvoid setBinaryMessageSizeLimit(int messageSizeLimit); // Configure the maximum size for an incoming binary message.\n\tvoid setTextMessageSizeLimit(int messageSizeLimit); // Configure the maximum size for an incoming text message.\n}"}
{"index": 2358, "repo": "commons-geometry-euclidean-1.0", "des": "Extension of the Plane class that supports embedding of 2D subspaces in the plane.", "code": "Class EmbeddingPlane {\n\tboolean equals(Object obj);\n\tEmbeddingPlane getEmbedding(); // Return the current instance.\n\tVector3D.Unit getU(); // Get the plane first canonical vector.\n\tVector3D.Unit getV(); // Get the plane second canonical vector.\n\tVector3D.Unit getW(); // Get the plane third canonical vector, ie, the plane normal.\n\tVector3D pointAt(Vector2D inPlane, double offset); // Get one point from the 3D-space.\n\tEmbeddingPlane reverse(); // Build a new reversed version of this plane, with opposite orientation.\n\tEmbeddingPlane rotate(Vector3D center, QuaternionRotation rotation); // Rotate the plane around the specified point.\n\tEmbeddingPlane.SubspaceTransform subspaceTransform(Transform<Vector3D> transform); // Get an object containing the current plane transformed by the argument along with a 2D transform that can be applied to subspace points.\n\tVector3D toSpace(Vector2D point); // Transform an in-plane point into a 3D space point.\n\tVector2D toSubspace(Vector3D point); // Transform a 3D space point into an in-plane point.\n\tEmbeddingPlane transform(Transform<Vector3D> transform);\n\tEmbeddingPlane translate(Vector3D translation); // Translate the plane by the specified amount.\n}"}
{"index": 10866, "repo": "spring-data-redis-3.1.2", "des": "CacheKeyPrefix is a callback hook for creating custom prefixes prepended to the actual key stored in Redis.", "code": "@FunctionalInterface public interface CacheKeyPrefix {\n\tString compute(String cacheName); // Compute the prefix for the actual cache key stored in Redis.\n\tstatic CacheKeyPrefix prefixed(String prefix); // Creates a CacheKeyPrefix scheme that prefixes cache keys with the given prefix.\n\tstatic CacheKeyPrefix simple(); // Creates a default CacheKeyPrefix scheme that prefixes cache keys with the name of the cache followed by double colons.\n}"}
{"index": 5654, "repo": "org.apache.karaf.main-2.4.4", "des": "A SignerInfo object represents a single signer chain.", "code": "Interface SignerInfo {\n\tCertificate[] getCertificateChain(); // Returns the certificate chain\n\tString getMessageDigestAlgorithm(); // Returns the MessageDigest algorithm used to verify content signed by this signer info.\n\tCertificate getTrustAnchor(); // Returns the certificate trust anchor used to establish authenticity.\n\tboolean isTrusted(); // Returns true if the trust anchor has been authenticated.\n}"}
{"index": 7232, "repo": "calcite-core-1.34.0", "des": "Enumerates the possible types of SqlNode.", "code": "Enum SqlKind {\n\tboolean belongsTo(Collection<SqlKind> category); // Returns whether this SqlKind belongs to a given category.\n\tSqlKind negate(); // Returns the kind that you get if you apply NOT to this kind.\n\tSqlKind negateNullSafe(); // Returns the kind that you get if you negate this kind.\n\tSqlKind reverse(); // Returns the kind that corresponds to this operator but in the opposite direction.\n\tstatic SqlKind valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlKind[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9788, "repo": "commons-math3-3.6.1", "des": "Interface for one-dimensional data sets transformations producing real results.", "code": "Interface RealTransformer {\n\tdouble[] transform(double[] f, TransformType type); // Returns the (forward, inverse) transform of the specified real data set.\n\tdouble[] transform(UnivariateFunction f, double min, double max, int n, TransformType type); // Returns the (forward, inverse) transform of the specified real function, sampled on the specified interval.\n}"}
{"index": 11228, "repo": "wicket-extensions-10.0.0-M1", "des": "A wizard step that displays the provided static content without expecting any input.", "code": "public class StaticContentStep extends WizardStep {\n\tfinal boolean getAllowHtml(); // Gets whether html is allowed as output.\n\tfinal String getContent(); // Gets the content from the content model.\n\tfinal org.apache.wicket.model.IModel<?> getContentModel(); // Gets the content model.\n\tfinal <T> void setContentModel(org.apache.wicket.model.IModel<T> content); // Sets the content model.\n}"}
{"index": 18076, "repo": "spring-ws-core-4.0.5", "des": "SOAP-specific sub-interface of the EndpointMapping.", "code": "public interface SoapEndpointMapping extends EndpointMapping {\n\tvoid setActorOrRole(String actorOrRole); // Sets a single SOAP actor/actorOrRole to apply to all endpoints mapped by the delegate endpoint mapping.\n\tvoid setActorsOrRoles(String[] actorsOrRoles); // Sets the array of SOAP actors/actorsOrRoles to apply to all endpoints mapped by the delegate endpoint mapping.\n\tvoid setUltimateReceiver(boolean ultimateReceiver); // Indicates whether this the endpoint fulfills the SOAP 1.2 Ultimate Receiver role.\n}"}
{"index": 7063, "repo": "calcite-core-1.34.0", "des": "Default implementations of the BuiltInMetadata.", "code": "Class RelMdSize {\n\tList<Double> averageColumnSizes(Aggregate rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Calc rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Exchange rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Filter rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Intersect rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Join rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Minus rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Project rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Size.averageColumnSizes(), invoked using reflection.\n\t@Nullable List<Double> averageColumnSizes(Sort rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(TableModify rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(TableScan rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Union rel, RelMetadataQuery mq);\n\t@Nullable List<Double> averageColumnSizes(Values rel, RelMetadataQuery mq);\n\tprotected @Nullable Double averageFieldValueSize(RelDataTypeField field); // Estimates the average size (in bytes) of a value of a field, knowing nothing more than its type.\n\t@Nullable Double averageRexSize(RexNode node, List<? extends Double> inputColumnSizes);\n\t@Nullable Double averageRowSize(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Size.averageRowSize(), invoked using reflection.\n\t@Nullable Double averageTypeValueSize(RelDataType type); // Estimates the average size (in bytes) of a value of a type.\n\tMetadataDef<BuiltInMetadata.Size> getDef();\n\tdouble typeValueSize(RelDataType type, @Nullable Comparable value); // Estimates the average size (in bytes) of a value of a type.\n}"}
{"index": 16403, "repo": "spring-integration-ftp-6.1.2", "des": "The FtpRemoteFileTemplate.exists(String) operation mode.", "code": "public static enum FtpRemoteFileTemplate.ExistsMode extends Enum<FtpRemoteFileTemplate.ExistsMode> {\n\tstatic FtpRemoteFileTemplate.ExistsMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic FtpRemoteFileTemplate.ExistsMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10068, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Extension of YarnContainer indicating that container is intended to be a long running operation.", "code": "Interface LongRunningYarnContainer {\n\tvoid addContainerStateListener(ContainerStateListener listener); // Adds the container state listener.\n\tboolean isWaitCompleteState(); // Indication for possible handler using this bean whether it should wait COMPLETED state.\n}"}
{"index": 3913, "repo": "hbase-client-3.0.0-alpha-4", "des": "Methods that help working with ZooKeeper.", "code": "Class ZooKeeperHelper {\n\tstatic org.apache.zookeeper.ZooKeeper ensureConnectedZooKeeper(org.apache.zookeeper.ZooKeeper zookeeper, int timeout); // Ensure passed zookeeper is connected.\n\tstatic org.apache.zookeeper.ZooKeeper getConnectedZooKeeper(String connectString, int sessionTimeoutMs); // Get a ZooKeeper instance and wait until it connected before returning.\n}"}
{"index": 5937, "repo": "commons-lang3-3.12.0", "des": "Sorts and returns arrays in the fluent style.", "code": "Class ArraySorter {\n\tstatic byte[] sort(byte[] array); // Sorts and returns the given array.\n\tstatic char[] sort(char[] array); // Sorts and returns the given array.\n\tstatic double[] sort(double[] array); // Sorts and returns the given array.\n\tstatic float[] sort(float[] array); // Sorts and returns the given array.\n\tstatic int[] sort(int[] array); // Sorts and returns the given array.\n\tstatic long[] sort(long[] array); // Sorts and returns the given array.\n\tstatic short[] sort(short[] array); // Sorts and returns the given array.\n\tstatic <T> T[] sort(T[] array); // Sorts and returns the given array.\n\tstatic <T> T[] sort(T[] array, Comparator<? super T> comparator); // Sorts and returns the given array.\n}"}
{"index": 15977, "repo": "wicket-util-10.0.0-M1", "des": "A FileResourceStream is an IResource implementation for files.", "code": "public class FileResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream {\n\tvoid close(); // Closes this resource.\n\tString getContentType(); // Gets the mime type of this resource\n\tFile getFile();\n\tInputStream getInputStream(); // Gets the resource stream.\n\tInstant lastModifiedTime(); // Gets the last time this modifiable thing changed.\n\tBytes length(); // Gets the size of this resource\n\tString locationAsString();\n}"}
{"index": 13187, "repo": "spring-test-6.0.11", "des": "TestExecutionListener which provides support for marking the ApplicationContext associated with a test as dirty for both test classes and test methods annotated with the @DirtiesContext annotation.", "code": "public class DirtiesContextBeforeModesTestExecutionListener extends AbstractDirtiesContextTestExecutionListener {\n\tvoid beforeTestClass(TestContext testContext); // If the test class of the supplied test context is annotated with @DirtiesContext and the class mode is set to BEFORE_CLASS, the application context of the test context will be marked as dirty, and the REINJECT_DEPENDENCIES_ATTRIBUTE in the test context will be set to true.\n\tvoid beforeTestMethod(TestContext testContext); // If the current test method of the supplied test context is annotated with @DirtiesContext and the method mode is set to BEFORE_METHOD, or if the test class is annotated with @DirtiesContext and the class mode is set to BEFORE_EACH_TEST_METHOD, the application context of the test context will be marked as dirty and the REINJECT_DEPENDENCIES_ATTRIBUTE in the test context will be set to true.\n\tfinal int getOrder(); // Returns 1500.\n}"}
{"index": 6949, "repo": "calcite-core-1.34.0", "des": "A relational operator that performs nested-loop joins.", "code": "Class LogicalCorrelate {\n\tRelNode accept(RelShuttle shuttle); // Accepts a visit from a shuttle.\n\tLogicalCorrelate copy(RelTraitSet traitSet, RelNode left, RelNode right, CorrelationId correlationId, ImmutableBitSet requiredColumns, JoinRelType joinType);\n\tstatic LogicalCorrelate create(RelNode left, RelNode right, List<RelHint> hints, CorrelationId correlationId, ImmutableBitSet requiredColumns, JoinRelType joinType); // Creates a LogicalCorrelate.\n\tRelNode withHints(List<RelHint> hintList); // Returns a new relational expression with the specified hints hintList.\n}"}
{"index": 17488, "repo": "spring-integration-redis-6.1.2", "des": "Redis implementation of ConcurrentMetadataStore.", "code": "public class RedisMetadataStore extends Object implements org.springframework.integration.metadata.ConcurrentMetadataStore {\n\tString get(String key); // Retrieve the persisted value for the provided key.\n\tvoid put(String key, String value); // Persists the provided key and value to Redis.\n\tString putIfAbsent(String key, String value);\n\tString remove(String key);\n\tboolean replace(String key, String oldValue, String newValue);\n}"}
{"index": 6682, "repo": "lucene-analyzers-common-8.11.2", "des": "Analyzer for Brazilian Portuguese language.", "code": "Class BrazilianAnalyzer {\n\tprotected Analyzer.TokenStreamComponents createComponents(String fieldName); // Creates Analyzer.TokenStreamComponents used to tokenize all the text in the provided Reader.\n\tstatic CharArraySet getDefaultStopSet(); // Returns an unmodifiable instance of the default stop-words set.\n\tprotected TokenStream normalize(String fieldName, TokenStream in);\n}"}
{"index": 1754, "repo": "kafka-clients-3.5.0", "des": "A listing of a consumer group in the cluster.", "code": "Class ConsumerGroupListing {\n\tboolean equals(Object obj);\n\tString groupId(); // Consumer Group Id\n\tboolean isSimpleConsumerGroup(); // If Consumer Group is simple or not.\n\tOptional<ConsumerGroupState> state(); // Consumer Group state\n}"}
{"index": 8330, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the DestinationProvider that resolves a destination URI from a WSDL file.", "code": "Class Wsdl11DestinationProvider {\n\tprotected URI lookupDestination(); // Abstract template method that looks up the URI.\n\tvoid setLocationExpression(String expression); // Sets the XPath expression to use when extracting the service location URI from a WSDL.\n\tvoid setWsdl(org.springframework.core.io.Resource wsdlResource); // Sets a WSDL location from which the service destination URI will be resolved.\n}"}
{"index": 18201, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Provides the JdbcSession implementation with contextual information it needs during its lifecycle.", "code": "Interface JdbcSessionContext {\n\tboolean doesConnectionProviderDisableAutoCommit();\n\tConnectionAcquisitionMode getConnectionAcquisitionMode(); // Deprecated. Use getPhysicalConnectionHandlingMode() instead\n\tConnectionReleaseMode getConnectionReleaseMode(); // Deprecated. Use getPhysicalConnectionHandlingMode() instead\n\tint getFetchSize();\n\tJdbcObserver getObserver();\n\tPhysicalConnectionHandlingMode getPhysicalConnectionHandlingMode();\n\tServiceRegistry getServiceRegistry();\n\tSessionFactoryImplementor getSessionFactory(); // Retrieve the session factory for this environment.\n\tStatementInspector getStatementInspector();\n\tboolean isGetGeneratedKeysEnabled();\n\tboolean isScrollableResultSetsEnabled();\n}"}
{"index": 1584, "repo": "pdfbox-3.0.0-beta1", "des": "This class will hold the current state of the text parameters when executing a content stream.", "code": "Class PDTextState {\n\tPDTextState clone();\n\tfloat getCharacterSpacing(); // Get the value of the characterSpacing.\n\tPDFont getFont(); // Get the value of the font.\n\tfloat getFontSize(); // Get the value of the fontSize.\n\tfloat getHorizontalScaling(); // Get the value of the horizontalScaling.\n\tboolean getKnockoutFlag(); // Get the value of the knockout.\n\tfloat getLeading(); // Get the value of the leading.\n\tRenderingMode getRenderingMode(); // Get the value of the renderingMode.\n\tfloat getRise(); // Get the value of the rise.\n\tfloat getWordSpacing(); // Get the value of the wordSpacing.\n\tvoid setCharacterSpacing(float value); // Set the value of the characterSpacing.\n\tvoid setFont(PDFont value); // Set the value of the font.\n\tvoid setFontSize(float value); // Set the value of the fontSize.\n\tvoid setHorizontalScaling(float value); // Set the value of the horizontalScaling.\n\tvoid setKnockoutFlag(boolean value); // Set the value of the knockout.\n\tvoid setLeading(float value); // Set the value of the leading.\n\tvoid setRenderingMode(RenderingMode renderingMode); // Set the value of the renderingMode.\n\tvoid setRise(float value); // Set the value of the rise.\n\tvoid setWordSpacing(float value); // Set the value of the wordSpacing.\n}"}
{"index": 7660, "repo": "cassandra-all-4.1.2", "des": "Supported options for CREATE ROLE/ALTER ROLE (and CREATE USER/ALTER USER, which are aliases provided for backwards compatibility).", "code": "Enum IRoleManager.Option {\n\tstatic IRoleManager.Option valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic IRoleManager.Option[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17152, "repo": "spring-integration-core-6.1.2", "des": "A message channel that prioritizes messages based on a Comparator.", "code": "public class PriorityChannel extends QueueChannel {\n\tprotected org.springframework.messaging.Message<?> doReceive(long timeout); // Subclasses must implement this method.\n\tprotected boolean doSend(org.springframework.messaging.Message<?> message, long timeout); // Subclasses must implement this method.\n\tint getRemainingCapacity(); // Obtain the remaining capacity of this channel.\n}"}
{"index": 12591, "repo": "spring-jdbc-6.0.11", "des": "An adapter for a target JDBC DataSource, applying the specified user credentials to every standard getConnection() call, implicitly invoking getConnection(username, password) on the target.", "code": "public class UserCredentialsDataSourceAdapter extends DelegatingDataSource {\n\tprotected Connection doGetConnection(String username, String password); // This implementation delegates to the getConnection(username, password) method of the target DataSource, passing in the specified user credentials.\n\tConnection getConnection(); // Determine whether there are currently thread-bound credentials, using them if available, falling back to the statically specified username and password (i.e.\n\tConnection getConnection(String username, String password); // Simply delegates to doGetConnection(String, String), keeping the given user credentials as-is.\n\tvoid removeCredentialsFromCurrentThread(); // Remove any user credentials for this proxy from the current thread.\n\tvoid setCatalog(String catalog); // Specify a database catalog to be applied to each retrieved Connection.\n\tvoid setCredentialsForCurrentThread(String username, String password); // Set user credentials for this proxy and the current thread.\n\tvoid setPassword(String password); // Set the default user's password that this adapter should use for retrieving Connections.\n\tvoid setSchema(String schema); // Specify a database schema to be applied to each retrieved Connection.\n\tvoid setUsername(String username); // Set the default username that this adapter should use for retrieving Connections.\n}"}
{"index": 12488, "repo": "spring-jdbc-6.0.11", "des": "Abstract implementation of the SqlTypeValue interface, for convenient creation of type values that are supposed to be passed into the PreparedStatement.setObject method.", "code": "public abstract class AbstractSqlTypeValue extends Object implements SqlTypeValue {\n\tprotected abstract Object createTypeValue(Connection con, int sqlType, String typeName); // Create the type value to be passed into PreparedStatement.setObject.\n\tfinal void setTypeValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName); // Set the type value on the given PreparedStatement.\n}"}
{"index": 10638, "repo": "groovy-all-4.0.13", "des": "This class defines all the new SQL-related groovy methods which enhance the normal JDK SQL classes when inside the Groovy environment.", "code": "public class SqlExtensions extends Object {\n\tstatic boolean asBoolean(GroovyResultSet grs); // Coerce a GroovyResultSet to a boolean value.\n\tstatic Iterator<ResultSetMetaDataWrapper> iterator(ResultSetMetaData resultSetMetaData); // Return an Iterator given a ResultSetMetaData.\n\tstatic GroovyRowResult toRowResult(ResultSet rs); // Returns a GroovyRowResult given a ResultSet.\n\tstatic Timestamp toTimestamp(Date d); // Return a java.sql.Timestamp given a java.util.Date.\n}"}
{"index": 11237, "repo": "wicket-extensions-10.0.0-M1", "des": "The default bar of button components for wizards.", "code": "public class WizardButtonBar extends org.apache.wicket.markup.html.panel.Panel {\n\tWizardButton getDefaultButton(IWizardModel model);\n\tprotected WizardButton newCancelButton(String id, IWizard wizard); // Creates a new button for IWizardModel.cancel().\n\tprotected WizardButton newFinishButton(String id, IWizard wizard); // Creates a new button for IWizardModel.finish().\n\tprotected WizardButton newLastButton(String id, IWizard wizard); // Creates a new button for IWizardModel.last().\n\tprotected WizardButton newNextButton(String id, IWizard wizard); // Creates a new button for IWizardModel.next().\n\tprotected WizardButton newPreviousButton(String id, IWizard wizard); // Creates a new button for IWizardModel.previous().\n\tprotected void onBeforeRender();\n\tprotected void onInitialize();\n}"}
{"index": 16201, "repo": "spring-data-cassandra-4.1.2", "des": "FactoryBean to create ReactiveCassandraRepository instances.", "code": "public class ReactiveCassandraRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID> {\n\tvoid afterPropertiesSet();\n\tprotected Optional<QueryMethodEvaluationContextProvider> createDefaultQueryMethodEvaluationContextProvider(ListableBeanFactory beanFactory);\n\tprotected final RepositoryFactorySupport createRepositoryFactory();\n\tprotected RepositoryFactorySupport getFactoryInstance(ReactiveCassandraOperations operations); // Creates and initializes a RepositoryFactorySupport instance.\n\tprotected void setMappingContext(MappingContext<?,?> mappingContext);\n\tvoid setReactiveCassandraOperations(ReactiveCassandraOperations operations); // Configures the ReactiveCassandraOperations used for Cassandra data access operations.\n}"}
{"index": 15146, "repo": "spring-data-elasticsearch-5.1.2", "des": "GeoJsonMultiLineString is defined as list of GeoJsonLineStrings.", "code": "public class GeoJsonMultiLineString extends Object implements GeoJson<Iterable<GeoJsonLineString>> {\n\tboolean equals(Object o);\n\tList<GeoJsonLineString> getCoordinates(); // The value of the coordinates member is always an Iterable.\n\tString getType(); // String value representing the type of the GeoJson object.\n\tstatic GeoJsonMultiLineString of(List<GeoJsonLineString> lines); // Creates new GeoJsonMultiLineString for the given GeoJsonLineStrings.\n\tstatic GeoJsonMultiLineString of(List<Point>... lines); // Creates new GeoJsonMultiLineString for the given Points.\n}"}
{"index": 14200, "repo": "wicket-core-10.0.0-M1", "des": "Wicket's default implementation for the mapper context", "code": "public class DefaultMapperContext extends Object implements IMapperContext {\n\tString getBookmarkableIdentifier();\n\tClass<? extends IRequestablePage> getHomePageClass(); // Returns the home page class.\n\tString getNamespace();\n\tString getPageIdentifier();\n\tIRequestablePage getPageInstance(int pageId); // Returns existing page instance if the page exists.\n\tString getResourceIdentifier();\n\tResourceReferenceRegistry getResourceReferenceRegistry();\n\tIRequestablePage newPageInstance(Class<? extends IRequestablePage> pageClass, org.apache.wicket.request.mapper.parameter.PageParameters pageParameters); // Creates new page instance of page with given class.\n}"}
{"index": 17161, "repo": "spring-integration-core-6.1.2", "des": "<recipient-list-router id=\"simpleRouter\" input-channel=\"routingChannelA\"> <recipient channel=\"channel1\"/> <recipient channel=\"channel2\"/> </recipient-list-router>", "code": "public class RecipientListRouter extends AbstractMessageRouter implements RecipientListRouterManagement {\n\tvoid addRecipient(String channelName); // Add a recipient with channelName.\n\tvoid addRecipient(String channelName, String selectorExpression); // Add a recipient with channelName and expression.\n\tvoid addRecipient(String channelName, MessageSelector selector);\n\tvoid addRecipient(org.springframework.messaging.MessageChannel channel);\n\tvoid addRecipient(org.springframework.messaging.MessageChannel channel, MessageSelector selector);\n\tprotected Collection<org.springframework.messaging.MessageChannel> determineTargetChannels(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to return a Collection of zero or more MessageChannels to which the given Message should be routed.\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tCollection<RecipientListRouter.Recipient> getRecipients();\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tint removeRecipient(String channelName); // Remove all recipients that match the channelName.\n\tint removeRecipient(String channelName, String selectorExpression); // Remove all recipients that match the channelName and expression.\n\tvoid replaceRecipients(Properties recipientMappings); // Replace recipient.\n\tvoid setChannels(List<org.springframework.messaging.MessageChannel> channels); // Set the channels for this router.\n\tvoid setRecipientMappings(Map<String,String> recipientMappings); // Set the recipients for this router.\n\tvoid setRecipients(List<RecipientListRouter.Recipient> recipients); // Set the recipients for this router.\n}"}
{"index": 7101, "repo": "calcite-core-1.34.0", "des": "RexCallBinding implements SqlOperatorBinding by referring to an underlying collection of RexNode operands.", "code": "Class RexCallBinding {\n\tstatic RexCallBinding create(RelDataTypeFactory typeFactory, RexCall call, List<RelCollation> inputCollations); // Creates a binding of the appropriate type.\n\tstatic RexCallBinding create(RelDataTypeFactory typeFactory, RexCall call, @Nullable RexProgram program, List<RelCollation> inputCollations); // Creates a binding of the appropriate type, optionally with a program.\n\tint getIntLiteralOperand(int ordinal); // Gets the integer value of a numeric literal operand.\n\tint getOperandCount(); // Returns the number of bound operands.\n\t<T> T getOperandLiteralValue(int ordinal, Class<T> clazz); // Gets the value of a literal operand.\n\tSqlMonotonicity getOperandMonotonicity(int ordinal); // Gets the monotonicity of a bound operand.\n\tRelDataType getOperandType(int ordinal); // Gets the type of a bound operand.\n\t@Nullable String getStringLiteralOperand(int ordinal); // Gets the string value of a string literal operand.\n\tboolean isOperandLiteral(int ordinal, boolean allowCast); // Determines whether an operand is a literal.\n\tboolean isOperandNull(int ordinal, boolean allowCast); // Determines whether a bound operand is NULL.\n\tCalciteException newError(org.apache.calcite.runtime.Resources.ExInst<SqlValidatorException> e); // Wraps a validation error with context appropriate to this operator call.\n\tList<RexNode> operands();\n}"}
{"index": 12603, "repo": "maven-embedder-4.0.0-alpha-7", "des": "Colored message utils, to manage colors.", "code": "public class MessageUtils extends Object {\n\tstatic org.apache.maven.api.services.MessageBuilder builder(); // Create a default message buffer.\n\tstatic org.apache.maven.api.services.MessageBuilder builder(int size); // Create a message buffer with an internal buffer of defined size.\n\tstatic org.apache.maven.api.services.MessageBuilder builder(StringBuilder builder); // Create a message buffer with defined String builder.\n\tstatic int getTerminalWidth(); // Get the terminal width or -1 if the width cannot be determined.\n\tstatic boolean isColorEnabled(); // Is message color enabled: requires Jansi available (through Maven) and the color has not been disabled.\n\tstatic void registerShutdownHook(); // Register a shutdown hook with the JVM runtime, uninstalling Ansi support on JVM shutdown unless is has already been uninstalled at that time.\n\tstatic void setColorEnabled(boolean flag); // Enables message color (if Jansi is available).\n\tstatic String stripAnsiCodes(String msg); // Remove any ANSI code from a message (colors or other escape sequences).\n\tstatic void systemInstall(); // Install color support.\n\tstatic void systemUninstall(); // Undo a previous systemInstall().\n}"}
{"index": 17679, "repo": "spring-web-6.0.11", "des": "Represents a client-side reactive HTTP response.", "code": "public interface ClientHttpResponse extends ReactiveHttpInputMessage {\n\torg.springframework.util.MultiValueMap<String,ResponseCookie> getCookies(); // Return a read-only map of response cookies received from the server.\n\tdefault String getId(); // Return an id that represents the underlying connection, if available, or the request for the purpose of correlating log messages.\n\tdefault int getRawStatusCode(); // Deprecated, for removal: This API element is subject to removal in a future version. as of 6.0, in favor of getStatusCode()\n\tHttpStatusCode getStatusCode(); // Return the HTTP status code as an HttpStatusCode.\n}"}
{"index": 18546, "repo": "hibernate-core-5.6.15.Final", "des": "Common contract between Entity and MappedSuperclass sources.", "code": "Interface IdentifiableTypeSource {\n\tEntityHierarchySource getHierarchy(); // Get the hierarchy this belongs to.\n\tjava.util.List<JpaCallbackSource> getJpaCallbackClasses(); // Access to the sources describing JPA lifecycle callbacks.\n\tLocalMetadataBuildingContext getLocalMetadataBuildingContext(); // Obtain the metadata-building context local to this entity source.\n\tOrigin getOrigin(); // Obtain the origin of this source.\n\tjava.util.Collection<IdentifiableTypeSource> getSubTypes(); // Access the subtype sources for types extending from this type source,\n\tIdentifiableTypeSource getSuperType();\n\tjava.lang.String getTypeName(); // Get the name of this type.\n}"}
{"index": 9563, "repo": "commons-math3-3.6.1", "des": "This class represents a convex hull in an two-dimensional euclidean space.", "code": "Class ConvexHull2D {\n\tRegion<Euclidean2D> createRegion(); // Returns a new region that is enclosed by the convex hull.\n\tSegment[] getLineSegments(); // Get the line segments of the convex hull, ordered.\n\tVector2D[] getVertices(); // Get the vertices of the convex hull.\n}"}
{"index": 1716, "repo": "samza-api-1.8.0", "des": "Common retry policy parameters for table IO.", "code": "Class TableRetryPolicy {\n\torg.apache.samza.table.retry.TableRetryPolicy.BackoffType getBackoffType();\n\tdouble getExponentialFactor();\n\tjava.time.Duration getExponentialMaxSleep();\n\tjava.time.Duration getJitter(); // Introduce randomness to the sleepTime time.\n\tjava.lang.Integer getMaxAttempts(); // Termination after a fix number of attempts.\n\tjava.time.Duration getMaxDuration(); // Termination after a fixed duration.\n\tjava.time.Duration getRandomMax();\n\tjava.time.Duration getRandomMin();\n\tTableRetryPolicy.RetryPredicate getRetryPredicate();\n\tjava.time.Duration getSleepTime();\n\tjava.util.Map<java.lang.String,java.lang.String> toConfig(Config jobConfig, Config tableConfig); // Generate configuration for this building block.\n\tTableRetryPolicy withExponentialBackoff(java.time.Duration sleepTime, java.time.Duration maxSleep, double factor); // Set the parameters for the exponential backoff policy.\n\tTableRetryPolicy withFixedBackoff(java.time.Duration sleepTime); // Set the sleepTime time for the fixed backoff policy.\n\tTableRetryPolicy withJitter(java.time.Duration jitter); // Set the jitter for the backoff policy to provide additional randomness.\n\tTableRetryPolicy withRandomBackoff(java.time.Duration minSleep, java.time.Duration maxSleep); // Set the sleepTime time for the random backoff policy.\n\tTableRetryPolicy withRetryPredicate(TableRetryPolicy.RetryPredicate retryPredicate); // Set the predicate to use for identifying retriable exceptions.\n\tTableRetryPolicy withStopAfterAttempts(int maxAttempts); // Set maximum number of attempts before terminating the operation.\n\tTableRetryPolicy withStopAfterDelay(java.time.Duration maxDelay); // Set maximum total delay (sleepTime + execution) before terminating the operation.\n}"}
{"index": 3291, "repo": "hbase-common-3.0.0-alpha-4", "des": "An DataType for interacting with values encoded using Bytes.", "code": "Class RawString {\n\tString decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tint encode(PositionedByteRange dst, String val); // Write instance val into buffer dst.\n\tClass<String> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(String val); // Inform consumers how long the encoded byte[] will be.\n\tOrder getOrder(); // Retrieve the sort Order imposed by this data type, or null when natural ordering is not preserved.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n\tboolean isOrderPreserving(); // Indicates whether this instance writes encoded byte[]'s which preserve the natural sort order of the unencoded value.\n\tboolean isSkippable(); // Indicates whether this instance is able to skip over it's encoded value.\n\tint skip(PositionedByteRange src); // Skip src's position forward over one encoded value.\n}"}
{"index": 12975, "repo": "spring-integration-file-6.1.2", "des": "SessionFactory that delegates to a SessionFactory retrieved from a SessionFactoryLocator.", "code": "public class DelegatingSessionFactory<F> extends Object implements SessionFactory<F> {\n\tvoid clearThreadKey(); // Clear the key for this thread.\n\torg.springframework.messaging.Message<?> clearThreadKey(org.springframework.messaging.Message<?> message); // Messaging-friendly version of clearThreadKey() that can be invoked from a service activator.\n\tSessionFactoryLocator<F> getFactoryLocator(); // Return this factory's locator.\n\tSession<F> getSession();\n\tSession<F> getSession(Object key);\n\tvoid setThreadKey(Object key); // Set a key to be used for getSession() on this thread.\n\torg.springframework.messaging.Message<?> setThreadKey(org.springframework.messaging.Message<?> message, Object key); // Messaging-friendly version of setThreadKey(Object) that can be invoked from a service activator.\n}"}
{"index": 8327, "repo": "spring-ws-3.0.10.RELEASE", "des": "Defines callback methods to customize the Java-based configuration for Spring Web Services enabled via @EnableWs.", "code": "Interface WsConfigurer {\n\tvoid addArgumentResolvers(List<MethodArgumentResolver> argumentResolvers); // Add resolvers to support custom endpoint method argument types.\n\tvoid addInterceptors(List<EndpointInterceptor> interceptors); // Add EndpointInterceptors for pre- and post-processing of endpoint method invocations.\n\tvoid addReturnValueHandlers(List<MethodReturnValueHandler> returnValueHandlers); // Add handlers to support custom controller method return value types.\n}"}
{"index": 3871, "repo": "hbase-client-3.0.0-alpha-4", "des": "A filter that includes rows based on a chance.", "code": "Class RandomRowFilter {\n\tboolean equals(Object obj);\n\tboolean filterAllRemaining(); // Filters that never filter all remaining can inherit this implementation that never stops the filter early.\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRow(); // Filters that never filter by rows based on previously gathered state from Filter.filterCell(Cell) can inherit this implementation that never filters a row.\n\tboolean filterRowKey(Cell firstRowCell); // Filters a row based on the row key.\n\tfloat getChance(); // Returns The chance that a row gets included.\n\tboolean hasFilterRow(); // Filters that never filter by modifying the returned List of Cells can inherit this implementation that does nothing.\n\tstatic RandomRowFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of RandomRowFilter\n\tvoid reset(); // Filters that are purely stateless and do nothing in their reset() methods can inherit this null/empty implementation.\n\tvoid setChance(float chance); // Set the chance that a row is included.\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 4771, "repo": "hadoop-common-3.3.4", "des": "DefaultStringifier is the default implementation of the Stringifier interface which stringifies the objects using base64 encoding of the serialized version of the objects.", "code": "Class DefaultStringifier<T> {\n\tvoid close(); // Closes this object.\n\tT fromString(String str); // Restores the object from its string representation.\n\tstatic <K> K load(Configuration conf, String keyName, Class<K> itemClass); // Restores the object from the configuration.\n\tstatic <K> K[] loadArray(Configuration conf, String keyName, Class<K> itemClass); // Restores the array of objects from the configuration.\n\tstatic <K> void store(Configuration conf, K item, String keyName); // Stores the item in the configuration with the given keyName.\n\tstatic <K> void storeArray(Configuration conf, K[] items, String keyName); // Stores the array of items in the configuration with the given keyName.\n\tString toString(T obj); // Converts the object to a string representation\n}"}
{"index": 4215, "repo": "jackson-core-2.15.2", "des": "TSFBuilder implementation for constructing vanilla JsonFactory instances for reading/writing JSON encoded content.", "code": "Class JsonFactoryBuilder {\n\tJsonFactory build(); // Method for constructing actual TokenStreamFactory instance, given configuration.\n\tCharacterEscapes characterEscapes();\n\tJsonFactoryBuilder characterEscapes(CharacterEscapes esc); // Method for defining custom escapes factory uses for JsonGenerators it creates.\n\tJsonFactoryBuilder configure(JsonReadFeature f, boolean state);\n\tJsonFactoryBuilder configure(JsonWriteFeature f, boolean state);\n\tJsonFactoryBuilder disable(JsonReadFeature f);\n\tJsonFactoryBuilder disable(JsonReadFeature first, JsonReadFeature... other);\n\tJsonFactoryBuilder disable(JsonWriteFeature f);\n\tJsonFactoryBuilder disable(JsonWriteFeature first, JsonWriteFeature... other);\n\tJsonFactoryBuilder enable(JsonReadFeature f);\n\tJsonFactoryBuilder enable(JsonReadFeature first, JsonReadFeature... other);\n\tJsonFactoryBuilder enable(JsonWriteFeature f);\n\tJsonFactoryBuilder enable(JsonWriteFeature first, JsonWriteFeature... other);\n\tint highestNonEscapedChar();\n\tJsonFactoryBuilder highestNonEscapedChar(int maxNonEscaped); // Method that allows specifying threshold beyond which all characters are automatically escaped (without checking possible custom escaping settings a la characterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes): for example, to force escaping of all non-ASCII characters (set to 127), or all non-Latin-1 character (set to 255).\n\tchar quoteChar();\n\tJsonFactoryBuilder quoteChar(char ch); // Method that allows specifying an alternate character used for quoting field names (if field name quoting has not been disabled with JsonWriteFeature.QUOTE_FIELD_NAMES) and JSON String values.\n\tSerializableString rootValueSeparator();\n\tJsonFactoryBuilder rootValueSeparator(SerializableString sep); // Method that allows overriding String used for separating root-level JSON values (default is single space character)\n\tJsonFactoryBuilder rootValueSeparator(String sep); // Method that allows overriding String used for separating root-level JSON values (default is single space character)\n}"}
{"index": 13535, "repo": "spring-messaging-6.0.11", "des": "A registry for configuring message broker options.", "code": "public class MessageBrokerRegistry extends Object {\n\tChannelRegistration configureBrokerChannel(); // Customize the channel used to send messages from the application to the message broker.\n\tSimpleBrokerRegistration enableSimpleBroker(String... destinationPrefixes); // Enable a simple message broker and configure one or more prefixes to filter destinations targeting the broker (e.g.\n\tStompBrokerRelayRegistration enableStompBrokerRelay(String... destinationPrefixes); // Enable a STOMP broker relay and configure the destination prefixes supported by the message broker.\n\tprotected Collection<String> getApplicationDestinationPrefixes();\n\tprotected ChannelRegistration getBrokerChannelRegistration();\n\tprotected org.springframework.util.PathMatcher getPathMatcher();\n\tprotected SimpleBrokerMessageHandler getSimpleBroker(SubscribableChannel brokerChannel);\n\tprotected StompBrokerRelayMessageHandler getStompBrokerRelay(SubscribableChannel brokerChannel);\n\tprotected String getUserDestinationBroadcast();\n\tprotected String getUserDestinationPrefix();\n\tprotected String getUserRegistryBroadcast();\n\tprotected Integer getUserRegistryOrder();\n\tMessageBrokerRegistry setApplicationDestinationPrefixes(String... prefixes); // Configure one or more prefixes to filter destinations targeting application annotated methods.\n\tMessageBrokerRegistry setCacheLimit(int cacheLimit); // Configure the cache limit to apply for registrations with the broker.\n\tMessageBrokerRegistry setPathMatcher(org.springframework.util.PathMatcher pathMatcher); // Configure the PathMatcher to use to match the destinations of incoming messages to @MessageMapping and @SubscribeMapping methods.\n\tMessageBrokerRegistry setPreservePublishOrder(boolean preservePublishOrder); // Whether the client must receive messages in the order of publication.\n\tMessageBrokerRegistry setUserDestinationPrefix(String destinationPrefix); // Configure the prefix used to identify user destinations.\n\tvoid setUserRegistryOrder(int order); // Set the order for the SimpUserRegistry to use as a SmartApplicationListener.\n}"}
{"index": 15415, "repo": "pulsar-client-api-3.0.0", "des": "AutoClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider.", "code": "@Public @Evolving public interface AutoClusterFailoverBuilder {\n\tServiceUrlProvider build(); // Build the ServiceUrlProvider instance.\n\tAutoClusterFailoverBuilder checkInterval(long interval, TimeUnit timeUnit); // Set the checkInterval for probe.\n\tAutoClusterFailoverBuilder failoverDelay(long failoverDelay, TimeUnit timeUnit); // Set the switch failoverDelay.\n\tAutoClusterFailoverBuilder failoverPolicy(AutoClusterFailoverBuilder.FailoverPolicy policy); // Set secondary choose policy.\n\tAutoClusterFailoverBuilder primary(String primary); // Set the primary service url.\n\tAutoClusterFailoverBuilder secondary(List<String> secondary); // Set the secondary service url.\n\tAutoClusterFailoverBuilder secondaryAuthentication(Map<String,Authentication> authentication); // Set secondary authentication.\n\tAutoClusterFailoverBuilder secondaryTlsTrustCertsFilePath(Map<String,String> tlsTrustCertsFilePath); // Set secondary tlsTrustCertsFilePath.\n\tAutoClusterFailoverBuilder secondaryTlsTrustStorePassword(Map<String,String> tlsTrustStorePassword); // Set secondary tlsTrustStorePassword.\n\tAutoClusterFailoverBuilder secondaryTlsTrustStorePath(Map<String,String> tlsTrustStorePath); // Set secondary tlsTrustStorePath.\n\tAutoClusterFailoverBuilder switchBackDelay(long switchBackDelay, TimeUnit timeUnit); // Set the switchBackDelay.\n}"}
{"index": 3327, "repo": "spring-social-core-1.1.6.RELEASE", "des": "An adapter that bridges between the uniform Connection model and a specific provider API model.", "code": "Interface ApiAdapter<A> {\n\tUserProfile fetchUserProfile(A api); // Implements Connection.fetchUserProfile() for connections to the given API.\n\tvoid setConnectionValues(A api, ConnectionValues values); // Sets values for ConnectionKey.getProviderUserId(), Connection.getDisplayName(), Connection.getProfileUrl(), and Connection.getImageUrl() for connections to the given API.\n\tboolean test(A api); // Implements Connection.test() for connections to the given API.\n\tvoid updateStatus(A api, java.lang.String message); // Implements Connection.updateStatus(String) for connections to the given API.\n}"}
{"index": 9749, "repo": "commons-math3-3.6.1", "des": "Common settings for all optimization problems.", "code": "Interface OptimizationProblem<PAIR> {\n\tConvergenceChecker<PAIR> getConvergenceChecker(); // Gets the convergence checker.\n\tIncrementor getEvaluationCounter(); // Get a independent Incrementor that counts up to the maximum number of evaluations and then throws an exception.\n\tIncrementor getIterationCounter(); // Get a independent Incrementor that counts up to the maximum number of iterations and then throws an exception.\n}"}
{"index": 9095, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class is responsible for the tracking and enforcement of Deletes during the course of a Scan operation.", "code": "Class ScanDeleteTracker {\n\tvoid add(Cell cell); // Add the specified Cell to the list of deletes to check against for this row operation.\n\tvoid beforeShipped(); // The action that needs to be performed before Shipper.shipped() is performed\n\tCellComparator getCellComparator(); // Return the comparator passed to this delete tracker\n\tDeleteTracker.DeleteResult isDeleted(Cell cell); // Check if the specified Cell buffer has been deleted by a previously seen delete.\n\tboolean isEmpty(); // Returns true if there are no current delete, false otherwise\n\tvoid reset(); // Called between rows.\n\tvoid update(); // Called at the end of every StoreFile.\n}"}
{"index": 99, "repo": "commons-collections4-4.4", "des": "Defines a map that allows bidirectional lookup between key and values.", "code": "Interface BidiMap<K,V> {\n\tK getKey(Object value); // Gets the key that is currently mapped to the specified value.\n\tBidiMap<V,K> inverseBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tV put(K key, V value); // Puts the key-value pair into the map, replacing any previous pair.\n\tK removeValue(Object value); // Removes the key-value pair that is currently mapped to the specified value (optional operation).\n\tSet<V> values(); // Returns a Set view of the values contained in this map.\n}"}
{"index": 412, "repo": "phoenix-core-5.1.3", "des": "Unsigned integer type that restricts values to be from 0 to Integer.", "code": "Class PUnsignedInt {\n\tint compareTo(Object lhs, Object rhs, PDataType rhsType);\n\tInteger getByteSize();\n\torg.apache.hadoop.hbase.util.Order getOrder();\n\tint getResultSetSqlType(); // By default returns sqlType for the PDataType, however it allows unknown types (our unsigned types) to return the regular corresponding sqlType so that tools like SQuirrel correctly display values of this type.\n\tObject getSampleValue(Integer maxLength, Integer arrayLength);\n\tInteger getScale(Object o);\n\tboolean isCoercibleTo(PDataType targetType);\n\tboolean isCoercibleTo(PDataType targetType, Object value);\n\tboolean isComparableTo(PDataType targetType);\n\tboolean isFixedWidth();\n\tboolean isOrderPreserving();\n\tboolean isSkippable();\n\tbyte[] toBytes(Object object);\n\tint toBytes(Object object, byte[] b, int o); // Convert from the object representation of a data type value into the serialized byte form.\n\tObject toObject(byte[] b, int o, int l, PDataType actualType, SortOrder sortOrder, Integer maxLength, Integer scale);\n\tObject toObject(Object object, PDataType actualType);\n\tObject toObject(String value); // Convert from a string to the object representation of a given type\n}"}
{"index": 2011, "repo": "hive-exec-4.0.0-alpha-2", "des": "A high-performance set implementation used to support fast set membership testing, using Cuckoo hashing.", "code": "Class CuckooSetLong {\n\tvoid insert(long x);\n\tvoid load(long[] a); // Insert all values in the input array into the set.\n\tboolean lookup(long x); // Return true if and only if the value x is present in the set.\n}"}
{"index": 4581, "repo": "beam-sdks-java-core-2.49.0", "des": "Specifies the conditions under which a final pane will be created when a window is permanently closed.", "code": "Enum Window.ClosingBehavior {\n\tstatic Window.ClosingBehavior valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic Window.ClosingBehavior[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5816, "repo": "iceberg-core-1.3.0", "des": "A rolling position delete writer that splits incoming deletes into multiple files within one spec/partition based on the target file size.", "code": "Class RollingPositionDeleteWriter<T> {\n\tprotected void addResult(DeleteWriteResult result);\n\tprotected DeleteWriteResult aggregatedResult();\n\tvoid close();\n\tjava.lang.CharSequence currentFilePath();\n\tlong currentFileRows();\n\tlong length(); // Returns the number of bytes that were currently written by this writer.\n\tprotected PositionDeleteWriter<T> newWriter(org.apache.iceberg.encryption.EncryptedOutputFile file);\n\tprotected void openCurrentWriter();\n\tprotected org.apache.iceberg.StructLike partition();\n\tR result(); // Returns a result that contains information about written DataFiles or DeleteFiles.\n\tprotected org.apache.iceberg.PartitionSpec spec();\n\tvoid write(T row); // Writes a row to a predefined spec/partition.\n}"}
{"index": 12823, "repo": "spring-data-mongodb-4.1.2", "des": "Encapsulates the aggregation framework $project-operation.", "code": "public class ProjectionOperation extends Object implements FieldsExposingAggregationOperation {\n\tProjectionOperation.ProjectionOperationBuilder and(String name); // Creates a new ProjectionOperation.ProjectionOperationBuilder to define a projection for the field with the given name.\n\tProjectionOperation.ProjectionOperationBuilder and(AggregationExpression expression);\n\tProjectionOperation.ArrayProjectionOperationBuilder andArrayOf(Object... values); // Includes the given values (field references, expression, plain values) as an array.\n\tProjectionOperation andExclude(String... fieldNames); // Excludes the given fields from the projection.\n\tProjectionOperation.ExpressionProjectionOperationBuilder andExpression(String expression, Object... params);\n\tProjectionOperation andInclude(String... fieldNames); // Includes the given fields into the projection.\n\tProjectionOperation andInclude(Fields fields); // Includes the given fields into the projection.\n\tProjectionOperation asArray(String name); // Includes the current ProjectionOperation as an array with given name.\n\tExposedFields getFields(); // Returns the fields exposed by the AggregationOperation.\n\tString getOperator(); // Return the MongoDB operator that is used for this AggregationOperation.\n\tboolean inheritsFields();\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n}"}
{"index": 8110, "repo": "commons-compress-1.23.0", "des": "Holds size and other extended information for entries that use Zip64 features.", "code": "Class Zip64ExtendedInformationExtraField {\n\tbyte[] getCentralDirectoryData(); // The actual data to put into central directory - without Header-ID or length specifier.\n\tZipShort getCentralDirectoryLength(); // Length of the extra field in the central directory - without Header-ID or length specifier.\n\tZipEightByteInteger getCompressedSize(); // The compressed size stored in this extra field.\n\tZipLong getDiskStartNumber(); // The disk start number stored in this extra field.\n\tZipShort getHeaderId(); // The Header-ID.\n\tbyte[] getLocalFileDataData(); // The actual data to put into local file data - without Header-ID or length specifier.\n\tZipShort getLocalFileDataLength(); // Length of the extra field in the local file data - without Header-ID or length specifier.\n\tZipEightByteInteger getRelativeHeaderOffset(); // The relative header offset stored in this extra field.\n\tZipEightByteInteger getSize(); // The uncompressed size stored in this extra field.\n\tvoid parseFromCentralDirectoryData(byte[] buffer, int offset, int length); // Populate data from this array as if it was in central directory data.\n\tvoid parseFromLocalFileData(byte[] buffer, int offset, int length); // Populate data from this array as if it was in local file data.\n\tvoid reparseCentralDirectoryData(boolean hasUncompressedSize, boolean hasCompressedSize, boolean hasRelativeHeaderOffset, boolean hasDiskStart); // Parses the raw bytes read from the central directory extra field with knowledge which fields are expected to be there.\n\tvoid setCompressedSize(ZipEightByteInteger compressedSize); // The uncompressed size stored in this extra field.\n\tvoid setDiskStartNumber(ZipLong ds); // The disk start number stored in this extra field.\n\tvoid setRelativeHeaderOffset(ZipEightByteInteger rho); // The relative header offset stored in this extra field.\n\tvoid setSize(ZipEightByteInteger size); // The uncompressed size stored in this extra field.\n}"}
{"index": 11527, "repo": "spring-cloud-task-core-3.0.3", "des": "Factory bean for PagingQueryProvider interface.", "code": "public class SqlPagingQueryProviderFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<PagingQueryProvider> {\n\tPagingQueryProvider getObject(); // Get a PagingQueryProvider instance using the provided properties and appropriate for the given database type.\n\tClass<PagingQueryProvider> getObjectType(); // Always returns PagingQueryProvider.\n\tboolean isSingleton(); // Always returns true.\n\tvoid setDatabaseType(String databaseType);\n\tvoid setDataSource(DataSource dataSource);\n\tvoid setFromClause(String fromClause);\n\tvoid setSelectClause(String selectClause);\n\tvoid setSortKeys(Map<String,org.springframework.batch.item.database.Order> sortKeys);\n\tvoid setWhereClause(String whereClause);\n}"}
{"index": 10368, "repo": "spring-core-6.0.11", "des": "Subclass of PropertiesPropertySource that loads a Properties object from a given Resource or resource location such as \"classpath:/com/myco/foo.properties\" or \"file:/path/to/file.xml\".", "code": "public class ResourcePropertySource extends PropertiesPropertySource {\n\tResourcePropertySource withName(String name); // Return a potentially adapted variant of this ResourcePropertySource, overriding the previously given (or derived) name with the specified name.\n\tResourcePropertySource withResourceName(); // Return a potentially adapted variant of this ResourcePropertySource, overriding the previously given name (if any) with the original resource name (equivalent to the name generated by the name-less constructor variants).\n}"}
{"index": 9761, "repo": "commons-math3-3.6.1", "des": "This interface represents a generic geometrical point.", "code": "Interface Point<S extends Space> {\n\tdouble distance(Point<S> p); // Compute the distance between the instance and another point.\n\tSpace getSpace(); // Get the space to which the point belongs.\n\tboolean isNaN(); // Returns true if any coordinate of this point is NaN; false otherwise\n}"}
{"index": 2281, "repo": "hive-exec-4.0.0-alpha-2", "des": "base class for operator graph walker this class takes list of starting ops and walks them one by one.", "code": "Class TaskGraphWalker {\n\tvoid dispatch(Node nd, Stack<Node> ndStack, TaskGraphWalker.TaskGraphWalkerContext walkerCtx); // Dispatch the current operator.\n\tSet<Node> getDispatchedList();\n\tList<Node> getToWalk();\n\tvoid startWalking(Collection<Node> startNodes, HashMap<Node,Object> nodeOutput); // starting point for walking.\n\tvoid walk(Node nd); // walk the current operator and its descendants.\n}"}
{"index": 7748, "repo": "cassandra-all-4.1.2", "des": "Coordinates the (active) repair of a list of non overlapping token ranges.", "code": "Class RepairSession {\n\tvoid convict(InetAddressAndPort endpoint, double phi); // Convict the specified endpoint.\n\tprotected ExecutorPlus createExecutor();\n\tjava.util.Collection<InetAddressAndPort> endpoints();\n\tvoid forceShutdown(java.lang.Throwable reason); // clear all RepairJobs and terminate this session.\n\tTimeUUID getId();\n\tvoid onIRStateChange(LocalSession session);\n\tvoid onRemove(InetAddressAndPort endpoint);\n\tvoid onRestart(InetAddressAndPort endpoint, EndpointState epState); // Called whenever a node is restarted.\n\tjava.util.Collection<Range<Token>> ranges();\n\tvoid start(ExecutorPlus executor); // Start RepairJob on given ColumnFamilies.\n\tvoid syncComplete(RepairJobDesc desc, SyncNodePair nodes, boolean success, java.util.List<SessionSummary> summaries); // Notify this session that sync completed/failed with given SyncNodePair.\n\tvoid terminate();\n\tvoid trackSyncCompletion(Pair<RepairJobDesc,SyncNodePair> key, CompletableRemoteSyncTask task);\n\tvoid trackValidationCompletion(Pair<RepairJobDesc,InetAddressAndPort> key, ValidationTask task);\n\tvoid validationComplete(RepairJobDesc desc, InetAddressAndPort endpoint, MerkleTrees trees); // Receive merkle tree response or failed response from endpoint for current repair job.\n}"}
{"index": 18368, "repo": "opencms-core-15.0", "des": "Bean class which keeps track of a locking action performed on a resource.", "code": "Class CmsLockActionRecord {\n\tCmsLockActionRecord.LockChange getChange(); // Gets the change type.\n\tCmsLock getLock(); // Gets the lock state after the action.\n}"}
{"index": 4698, "repo": "commons-geometry-core-1.0", "des": "Enum describing the possible behaviors when cutting a region BSP tree node with a hyperplane to produce two new child nodes.", "code": "Enum RegionCutRule {\n\tstatic RegionCutRule valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RegionCutRule[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6435, "repo": "exoplayer-core-2.9.6", "des": "Provides estimates of the currently available bandwidth.", "code": "Interface BandwidthMeter {\n\tvoid addEventListener(android.os.Handler eventHandler, BandwidthMeter.EventListener eventListener); // Adds an BandwidthMeter.EventListener to be informed of bandwidth samples.\n\tlong getBitrateEstimate(); // Returns the estimated bandwidth in bits/sec.\n\tTransferListener getTransferListener(); // Returns the TransferListener that this instance uses to gather bandwidth information from data transfers.\n\tvoid removeEventListener(BandwidthMeter.EventListener eventListener); // Removes an BandwidthMeter.EventListener.\n}"}
{"index": 13117, "repo": "maven-settings-builder-4.0.0-alpha-7", "des": "Collects parameters that control the decryption of settings.", "code": "public class DefaultSettingsDecryptionRequest extends Object implements SettingsDecryptionRequest {\n\tList<Proxy> getProxies(); // Gets the proxies whose passwords should be decrypted.\n\tList<Server> getServers(); // Gets the servers whose passwords should be decrypted.\n\tDefaultSettingsDecryptionRequest setProxies(List<Proxy> proxies); // Sets the proxies whose passwords should be decrypted.\n\tDefaultSettingsDecryptionRequest setServers(List<Server> servers); // Sets the servers whose passwords should be decrypted.\n}"}
{"index": 8918, "repo": "hbase-server-3.0.0-alpha-4", "des": "RPC Executor that extends RWQueueRpcExecutor with fast-path feature, used in FastPathBalancedQueueRpcExecutor.", "code": "Class FastPathRWQueueRpcExecutor {\n\tboolean dispatch(CallRunner callTask); // Add the request to the executor queue\n\tprotected RpcHandler getHandler(String name, double handlerFailureThreshhold, int handlerCount, BlockingQueue<CallRunner> q, AtomicInteger activeHandlerCount, AtomicInteger failedHandlerCount, Abortable abortable); // Override if providing alternate Handler implementation.\n}"}
{"index": 2617, "repo": "mahout-core-14.1", "des": "Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.", "code": "Class FileBasedMatrix {\n\tMatrix assignColumn(int column, Vector other); // Assign the other vector values to the column of the receiver\n\tMatrix assignRow(int row, Vector other); // Assign the other vector values to the row of the receiver\n\tdouble getQuick(int row, int column); // Return the value at the given indexes, without checking bounds\n\tMatrix like(); // Return an empty matrix of the same underlying class as the receiver\n\tMatrix like(int rows, int columns); // Returns an empty matrix of the same underlying class as the receiver and of the specified size.\n\tvoid setData(File f, boolean loadNow);\n\tvoid setQuick(int row, int column, double value); // Set the value at the given index, without checking bounds\n\tMatrix viewPart(int[] offset, int[] size); // Return a view into part of a matrix.\n\tstatic void writeMatrix(File f, Matrix m);\n}"}
{"index": 9441, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by the client to the ResourceManager to set or update the application timeout.", "code": "Class UpdateApplicationTimeoutsRequest {\n\tabstract ApplicationId getApplicationId(); // Get the ApplicationId of the application.\n\tabstract Map<ApplicationTimeoutType,String> getApplicationTimeouts(); // Get ApplicationTimeouts of the application.\n\tstatic UpdateApplicationTimeoutsRequest newInstance(ApplicationId applicationId, Map<ApplicationTimeoutType,String> applicationTimeouts);\n\tabstract void setApplicationId(ApplicationId applicationId); // Set the ApplicationId of the application.\n\tabstract void setApplicationTimeouts(Map<ApplicationTimeoutType,String> applicationTimeouts); // Set the ApplicationTimeouts for the application.\n}"}
{"index": 11509, "repo": "spring-restdocs-core-3.0.0", "des": "A Snippet that documents the cookies in a response.", "code": "public class ResponseCookiesSnippet extends AbstractCookiesSnippet {\n\tfinal ResponseCookiesSnippet and(List<CookieDescriptor> additionalDescriptors); // Returns a new ResponseCookiesSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tfinal ResponseCookiesSnippet and(CookieDescriptor... additionalDescriptors); // Returns a new ResponseCookiesSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tprotected Set<String> extractActualCookies(Operation operation); // Extracts the names of the cookies from the request or response of the given operation.\n\tprotected void verificationFailed(Set<String> undocumentedCookies, Set<String> missingCookies); // Called when the documented cookies do not match the actual cookies.\n}"}
{"index": 16158, "repo": "spring-data-cassandra-4.1.2", "des": "Object to configure a CREATE KEYSPACE specification.", "code": "public class CreateKeyspaceSpecification extends KeyspaceOptionsSpecification<CreateKeyspaceSpecification> implements KeyspaceDescriptor {\n\tstatic CreateKeyspaceSpecification createKeyspace(com.datastax.oss.driver.api.core.CqlIdentifier name); // Entry point into the CreateKeyspaceSpecification's fluent API given name to create a keyspace.\n\tstatic CreateKeyspaceSpecification createKeyspace(String name); // Entry point into the CreateKeyspaceSpecification's fluent API given name to create a keyspace.\n\tstatic CreateKeyspaceSpecification createKeyspace(KeyspaceIdentifier name); // Deprecated. since 3.0, use createKeyspace(CqlIdentifier)\n\tboolean equals(Object o);\n\tboolean getIfNotExists();\n\tCreateKeyspaceSpecification ifNotExists(); // Causes the inclusion of an IF NOT EXISTS clause.\n\tCreateKeyspaceSpecification ifNotExists(boolean ifNotExists); // Toggles the inclusion of an IF NOT EXISTS clause.\n\tCreateKeyspaceSpecification with(String name, Object value, boolean escape, boolean quote); // Adds the given option by name to this keyspaces's options.\n\tCreateKeyspaceSpecification with(KeyspaceOption option); // Convenience method that calls with(option, null).\n\tCreateKeyspaceSpecification with(KeyspaceOption option, Object value); // Sets the given table option.\n\tCreateKeyspaceSpecification withNetworkReplication(DataCenterReplication... dcrs); // Configure datacenter replication given DataCenterReplication.\n\tCreateKeyspaceSpecification withSimpleReplication(); // Configure simple replication with a replication factor of 1.\n\tCreateKeyspaceSpecification withSimpleReplication(long replicationFactor); // Configure simple replication with a replicationFactor.\n}"}
{"index": 10177, "repo": "spring-integration-smb-6.1.2", "des": "A RemoteFileStreamingInboundChannelAdapterSpec for a SmbStreamingMessageSource.", "code": "public class SmbStreamingInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileStreamingInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbStreamingInboundChannelAdapterSpec,SmbStreamingMessageSource> {\n\tSmbStreamingInboundChannelAdapterSpec patternFilter(String pattern); // Specify a simple pattern to match remote files (e.g.\n\tSmbStreamingInboundChannelAdapterSpec regexFilter(String regex); // Specify a regular expression to match remote files (e.g.\n}"}
{"index": 10829, "repo": "spring-boot-actuator-3.1.1", "des": "Description of a CalendarIntervalTrigger.", "code": "public static final class QuartzEndpoint.CalendarIntervalTriggerDescriptor extends QuartzEndpoint.TriggerDescriptor {\n\tprotected void appendDetails(Map<String,Object> content); // Append trigger-implementation specific details to the specified content.\n\tprotected void appendSummary(Map<String,Object> content); // Append trigger-implementation specific summary items to the specified content.\n}"}
{"index": 11532, "repo": "spring-cloud-task-core-3.0.3", "des": "Offers methods that allow users to query the task executions that are available.", "code": "public interface TaskExplorer {\n\torg.springframework.data.domain.Page<TaskExecution> findAll(org.springframework.data.domain.Pageable pageable); // Retrieves all the task executions within the pageable constraints sorted by start date descending, taskExecution id descending.\n\torg.springframework.data.domain.Page<TaskExecution> findRunningTaskExecutions(String taskName, org.springframework.data.domain.Pageable pageable); // Retrieve a collection of taskExecutions that have the task name provided.\n\torg.springframework.data.domain.Page<TaskExecution> findTaskExecutionsByName(String taskName, org.springframework.data.domain.Pageable pageable); // Get a collection/page of executions.\n\tSet<Long> getJobExecutionIdsByTaskExecutionId(long taskExecutionId); // Returns a Set of JobExecution ids for the jobs that were executed within the scope of the requested task.\n\tTaskExecution getLatestTaskExecutionForTaskName(String taskName); // Returns the latest task execution for a given task name.\n\tList<TaskExecution> getLatestTaskExecutionsByTaskNames(String... taskNames); // Returns a List of the latest TaskExecution for 1 or more task names.\n\tlong getRunningTaskExecutionCount(); // Retrieves current number of running task executions.\n\tTaskExecution getTaskExecution(long executionId); // Retrieve a TaskExecution by its id.\n\tlong getTaskExecutionCount(); // Retrieves current number of task executions.\n\tlong getTaskExecutionCountByTaskName(String taskName); // Get number of executions for a taskName.\n\tLong getTaskExecutionIdByJobExecutionId(long jobExecutionId); // Returns the id of the TaskExecution that the requested Spring Batch job execution was executed within the context of.\n\tList<String> getTaskNames(); // Retrieve a list of available task names.\n}"}
{"index": 1179, "repo": "ignite-core-2.15.0", "des": "Input parameters for checking snapshot metadata.", "code": "Class SnapshotMetadataVerificationTaskArg {\n\tint incrementIndex();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tString snapshotName();\n\tString snapshotPath();\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 18514, "repo": "hibernate-core-5.6.15.Final", "des": "Wraps a character stream (reader) to also provide the length (number of characters) which is needed when binding.", "code": "Interface CharacterStream {\n\tjava.io.Reader asReader(); // Provides access to the underlying data as a Reader.\n\tjava.lang.String asString(); // Provides access to the underlying data as a String.\n\tlong getLength(); // Retrieve the number of characters.\n\tvoid release(); // Release any underlying resources.\n}"}
{"index": 5185, "repo": "druid-processing-26.0.0", "des": "A RowsAndColumns implementation that effectively concatenates multiple RowsAndColumns objects together.", "code": "Class ConcatRowsAndColumns {\n\t<T> T as(Class<T> clazz); // Asks the RowsAndColumns to return itself as a concrete implementation of a specific interface.\n\tColumn findColumn(String name); // Finds a column by name.\n\tCollection<String> getColumnNames(); // The set of column names available from the RowsAndColumns\n\tint numRows(); // The number of rows in the RowsAndColumns object\n}"}
{"index": 2158, "repo": "hive-exec-4.0.0-alpha-2", "des": "HiveSemanticAnalyzerHook allows Hive to be extended with custom logic for semantic analysis of QL statements.", "code": "Interface HiveSemanticAnalyzerHook {\n\tvoid postAnalyze(HiveSemanticAnalyzerHookContext context, List<Task<?>> rootTasks); // Invoked after Hive performs its own semantic analysis on a statement (including optimization).\n\tASTNode preAnalyze(HiveSemanticAnalyzerHookContext context, ASTNode ast); // Invoked before Hive performs its own semantic analysis on a statement.\n}"}
{"index": 299, "repo": "phoenix-core-5.1.3", "des": "Class that parallelizes the scan over a table using the ExecutorService provided.", "code": "Class BaseResultIterators {\n\tstatic KeyRange clipRange(RowKeySchema schema, int fieldIndex, int rangeSpan, KeyRange range); // Truncates range to be a max of rangeSpan fields\n\tvoid close();\n\tstatic ScanRanges computePrefixScanRanges(ScanRanges dataScanRanges, int nColumnsInCommon);\n\tvoid explain(List<String> planSteps);\n\tvoid explain(List<String> planSteps, ExplainPlanAttributes.ExplainPlanAttributesBuilder explainPlanAttributesBuilder); // Generate ExplainPlan steps and add steps as list of Strings in planSteps argument as readable statement as well as add same generated steps in explainPlanAttributesBuilder so that we prepare ExplainPlan result as an attribute object useful to retrieve individual plan step attributes.\n\tLong getEstimatedByteCount();\n\tLong getEstimatedRowCount();\n\tLong getEstimateInfoTimestamp();\n\tList<PeekingResultIterator> getIterators(); // Executes the scan in parallel across all regions, blocking until all scans are complete.\n\tprotected abstract String getName();\n\tList<List<org.apache.hadoop.hbase.client.Scan>> getScans();\n\tList<KeyRange> getSplits();\n\tprotected abstract boolean isSerial();\n\tstatic <T> List<T> reverseIfNecessary(List<T> list, boolean reverse);\n\tint size();\n\tprotected abstract void submitWork(List<List<org.apache.hadoop.hbase.client.Scan>> nestedScans, List<List<org.apache.hadoop.hbase.util.Pair<org.apache.hadoop.hbase.client.Scan,Future<PeekingResultIterator>>>> nestedFutures, Queue<PeekingResultIterator> allIterators, int estFlattenedSize, boolean isReverse, ParallelScanGrouper scanGrouper);\n\tprotected boolean useStats();\n}"}
{"index": 7491, "repo": "cassandra-all-4.1.2", "des": "Base abstract class for Cell implementations.", "code": "Class AbstractCell<V> {\n\tCell<?> clone(ByteBufferCloner cloner);\n\tint dataSize(); // The size of the data hold by this ColumnData.\n\tvoid digest(Digest digest); // Adds the data to the provided digest.\n\tstatic <V1,V2> boolean equals(Cell<V1> left, Cell<V2> right);\n\tboolean equals(java.lang.Object other);\n\tboolean hasInvalidDeletions(); // Validates the deletions (ttl and local deletion time) if any.\n\tboolean isCounterCell(); // Whether the cell is a counter cell or not.\n\tboolean isExpiring(); // Whether the cell is an expiring one or not.\n\tboolean isLive(int nowInSec); // Whether the cell is live or not given the current time.\n\tboolean isTombstone(); // Whether the cell is a tombstone or not.\n\tCell<?> markCounterLocalToBeCleared();\n\tlong maxTimestamp();\n\tCell<?> purge(DeletionPurger purger, int nowInSec);\n\tCell<?> purgeDataOlderThan(long timestamp);\n\tCell<?> updateAllTimestamp(long newTimestamp); // Returns a copy of the data where all timestamps for live data have replaced by newTimestamp and all deletion timestamp by newTimestamp - 1.\n\tvoid validate(); // Validate the column data.\n}"}
{"index": 6068, "repo": "jackson-databind-2.15.2", "des": "Serializer used for primitive boolean, as well as java.", "code": "Class BooleanSerializer {\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tJsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property); // Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property.\n\tvoid serialize(Object value, JsonGenerator g, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(Object value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer); // Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix.\n}"}
{"index": 17324, "repo": "groovy-4.0.13", "des": "This factory allows the generation of an import customizer.", "code": "public class ImportCustomizerFactory extends AbstractFactory {\n\tboolean isHandlesNodeChildren(); // Does this factory \"Own\" its child closure.\n\tObject newInstance(FactoryBuilderSupport builder, Object name, Object value, Map attributes);\n\tboolean onNodeChildren(FactoryBuilderSupport builder, Object node, Closure childContent); // Only called if it isLeaf is false and isHandlesNodeChildren is true\n}"}
{"index": 8078, "repo": "commons-compress-1.23.0", "des": "This class provides the binding between the standard Pack200 interface and the internal interface for (un)packing.", "code": "Class Pack200UnpackerAdapter {\n\tvoid unpack(File file, JarOutputStream out); // Unpack the contents of the specified File to the specified JAR output stream.\n\tvoid unpack(InputStream in, JarOutputStream out); // Unpack the specified stream to the specified JAR output stream.\n}"}
{"index": 17683, "repo": "spring-web-6.0.11", "des": "Registry for custom HTTP message readers and writers.", "code": "public static interface CodecConfigurer.CustomCodecs {\n\tvoid decoder(org.springframework.core.codec.Decoder<?> decoder); // Deprecated. as of 5.1.13, use register(Object) or registerWithDefaultConfig(Object) instead.\n\tvoid encoder(org.springframework.core.codec.Encoder<?> encoder); // Deprecated. as of 5.1.13, use register(Object) or registerWithDefaultConfig(Object) instead.\n\tvoid reader(HttpMessageReader<?> reader); // Deprecated. as of 5.1.13, use register(Object) or registerWithDefaultConfig(Object) instead.\n\tvoid register(Object codec); // Register a custom codec.\n\tvoid registerWithDefaultConfig(Object codec); // Variant of register(Object) that also applies the below properties, if configured, via CodecConfigurer.defaultCodecs(): maxInMemorySize enableLoggingRequestDetails\n\tvoid registerWithDefaultConfig(Object codec, Consumer<CodecConfigurer.DefaultCodecConfig> configConsumer); // Variant of register(Object) that also allows the caller to apply the properties from CodecConfigurer.DefaultCodecConfig to the given codec.\n\tvoid withDefaultCodecConfig(Consumer<CodecConfigurer.DefaultCodecConfig> codecsConfigConsumer); // Deprecated. as of 5.1.13, use registerWithDefaultConfig(Object) or registerWithDefaultConfig(Object, Consumer) instead.\n\tvoid writer(HttpMessageWriter<?> writer); // Deprecated. as of 5.1.13, use register(Object) or registerWithDefaultConfig(Object) instead.\n}"}
{"index": 1534, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents a Type 4 (PostScript calculator) function in a PDF document.", "code": "Class PDFunctionType4 {\n\tfloat[] eval(float[] input); // Evaluates the function at the given input.\n\tint getFunctionType(); // Returns the function type.\n}"}
{"index": 5494, "repo": "druid-processing-26.0.0", "des": "Streams integers out in the binary format described by VSizeColumnarInts.", "code": "Class VSizeColumnarIntsSerializer {\n\tvoid addValue(int val);\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid open();\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 15726, "repo": "camel-api-4.0.0-RC1", "des": "An exception caused by a specific message Exchange", "code": "public class CamelExchangeException extends CamelException {\n\tstatic String createExceptionMessage(String message, Exchange exchange, Throwable cause); // Creates an exception message with the provided details.\n\tExchange getExchange(); // Returns the exchange which caused the exception\n}"}
{"index": 13313, "repo": "shiro-core-2.0.0-alpha-2", "des": "Shiro support of a SecurityManager class hierarchy that delegates all authentication operations to a wrapped Authenticator instance.", "code": "public abstract class AuthenticatingSecurityManager extends RealmSecurityManager {\n\tprotected void afterRealmsSet(); // Passes on the realms to the internal delegate Authenticator instance so that it may use them during authentication attempts.\n\tAuthenticationInfo authenticate(AuthenticationToken token); // Delegates to the wrapped Authenticator for authentication.\n\tvoid destroy(); // Destroys the cacheManager via LifecycleUtils.destroy.\n\tAuthenticator getAuthenticator(); // Returns the delegate Authenticator instance that this SecurityManager uses to perform all authentication operations.\n\tvoid setAuthenticator(Authenticator authenticator); // Sets the delegate Authenticator instance that this SecurityManager uses to perform all authentication operations.\n}"}
{"index": 7157, "repo": "calcite-core-1.34.0", "des": "SqlAdvisorValidator is used by SqlAdvisor to traverse the parse tree of a SQL statement, not for validation purpose but for setting up the scopes and namespaces to facilitate retrieval of SQL statement completion hints.", "code": "Class SqlAdvisorValidator {\n\tRelDataType deriveType(SqlValidatorScope scope, SqlNode operand); // Calls the parent class method and mask Farrago exception thrown.\n\tSqlNode expand(SqlNode expr, SqlValidatorScope scope); // Expands an expression.\n\tSqlNode expandOrderExpr(SqlSelect select, SqlNode orderExpr); // Expands an expression in the ORDER BY clause into an expression with the same semantics as expressions in the SELECT clause.\n\tSqlNode expandSelectExpr(SqlNode expr, SelectScope scope, SqlSelect select);\n\tprotected boolean shouldAllowOverRelation();\n\tprotected void validateFrom(SqlNode node, RelDataType targetRowType, SqlValidatorScope scope); // Validates the FROM clause of a query, or (recursively) a child node of the FROM clause: AS, OVER, JOIN, VALUES, or sub-query.\n\tprotected void validateHavingClause(SqlSelect select); // Calls the parent class method and masks Farrago exception thrown.\n\tvoid validateIdentifier(SqlIdentifier id, SqlValidatorScope scope); // Registers the identifier and its scope into a map keyed by ParserPosition.\n\tboolean validateModality(SqlSelect select, SqlModality modality, boolean fail); // Validates that a query is capable of producing a return of given modality (relational or streaming).\n\tprotected void validateNamespace(SqlValidatorNamespace namespace, RelDataType targetRowType); // Validates a namespace.\n\tprotected void validateOver(SqlCall call, SqlValidatorScope scope);\n\tprotected void validateWhereClause(SqlSelect select); // Calls the parent class method and masks Farrago exception thrown.\n}"}
{"index": 16834, "repo": "maven-artifact-4.0.0-alpha-7", "des": "Exception caused when one or more artifacts can not be resolved because they are not found in the local or remote repositories.", "code": "public class MultipleArtifactsNotFoundException extends ArtifactResolutionException {\n\tList<Artifact> getMissingArtifacts(); // artifacts that could NOT be resolved\n\tList<Artifact> getResolvedArtifacts(); // artifacts that could be resolved\n}"}
{"index": 2382, "repo": "commons-geometry-euclidean-1.0", "des": "Interface representing a finite or infinite convex subset of points in a plane in Euclidean 3D space.", "code": "Interface PlaneConvexSubset {\n\tPlaneConvexSubset.Embedded getEmbedded(); // Return an object containing the plane subset as an embedded 2D subspace region.\n\tList<Vector3D> getVertices(); // Get the vertices for the convex subset in a counter-clockwise order as viewed looking down the plane normal.\n\tPlaneConvexSubset reverse();\n\tSplit<PlaneConvexSubset> split(Hyperplane<Vector3D> splitter);\n\tdefault List<PlaneConvexSubset> toConvex();\n\tPlaneConvexSubset transform(Transform<Vector3D> transform);\n}"}
{"index": 294, "repo": "phoenix-core-5.1.3", "des": "Version of Metric that can be used when the metric is being concurrently accessed or modified by multiple threads.", "code": "Class AtomicMetric {\n\tvoid change(long delta); // Change the metric by the specified amount\n\tvoid decrement(); // Decrease the value of metric by 1\n\tString getCurrentMetricState();\n\tMetricType getMetricType();\n\tlong getValue();\n\tvoid increment(); // Increase the value of metric by 1\n\tvoid reset(); // Reset the metric\n}"}
{"index": 11506, "repo": "spring-restdocs-core-3.0.0", "des": "A Snippet that documents the request parts supported by a RESTful resource.", "code": "public class RequestPartsSnippet extends TemplatedSnippet {\n\tfinal RequestPartsSnippet and(List<RequestPartDescriptor> additionalDescriptors); // Returns a new RequestPartsSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tfinal RequestPartsSnippet and(RequestPartDescriptor... additionalDescriptors); // Returns a new RequestPartsSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tprotected Map<String,Object> createModel(Operation operation); // Create the model that should be used during template rendering to document the given operation.\n}"}
{"index": 15202, "repo": "spring-boot-3.1.1", "des": "An ApplicationListener that saves application PID into file.", "code": "public class ApplicationPidFileWriter extends Object implements org.springframework.context.ApplicationListener<SpringApplicationEvent>, org.springframework.core.Ordered {\n\tint getOrder();\n\tvoid onApplicationEvent(SpringApplicationEvent event);\n\tprotected static void reset(); // Reset the created flag for testing purposes.\n\tvoid setOrder(int order);\n\tvoid setTriggerEventType(Class<? extends SpringApplicationEvent> triggerEventType); // Sets the type of application event that will trigger writing of the PID file.\n}"}
{"index": 2442, "repo": "calcite-linq4j-1.34.0", "des": "Extension methods for OrderedEnumerable.", "code": "Interface ExtendedOrderedEnumerable<T> {\n\t<TKey> OrderedEnumerable<T> createOrderedEnumerable(Function1<T,TKey> keySelector, Comparator<TKey> comparator, boolean descending); // Performs a subsequent ordering of the elements in an OrderedEnumerable according to a key, using a specified comparator.\n\t<TKey extends Comparable<TKey>>OrderedEnumerable<T> thenBy(Function1<T,TKey> keySelector); // Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.\n\t<TKey> OrderedEnumerable<T> thenBy(Function1<T,TKey> keySelector, Comparator<TKey> comparator); // Performs a subsequent ordering of the elements in a sequence in ascending order according to a key, using a specified comparator.\n\t<TKey extends Comparable<TKey>>OrderedEnumerable<T> thenByDescending(Function1<T,TKey> keySelector); // Performs a subsequent ordering of the elements in a sequence in descending order according to a key.\n\t<TKey> OrderedEnumerable<T> thenByDescending(Function1<T,TKey> keySelector, Comparator<TKey> comparator); // Performs a subsequent ordering of the elements in a sequence in descending order according to a key, using a specified comparator.\n}"}
{"index": 3864, "repo": "hbase-client-3.0.0-alpha-4", "des": "NonceGenerator implementation that uses client ID hash + random int as nonce group, and random numbers as nonces.", "code": "Class PerClientRandomNonceGenerator {\n\tstatic PerClientRandomNonceGenerator get(); // Get the singleton nonce generator.\n\tlong getNonceGroup(); // Returns the nonce group (client ID) of this client manager.\n\tlong newNonce(); // Returns New nonce.\n}"}
{"index": 17319, "repo": "groovy-4.0.13", "des": "Registry of services that implement the GroovyRunner interface.", "code": "public class GroovyRunnerRegistry extends Object implements Map<String,GroovyRunner>, Iterable<GroovyRunner> {\n\tvoid clear(); // Clears all registered runners from the registry and resets the registry so that it contains only the default set of runners.\n\tboolean containsKey(Object key); // Returns true if a runner was registered with the specified key.\n\tboolean containsValue(Object runner); // Returns true if registry contains the given runner instance.\n\tSet<Map.Entry<String,GroovyRunner>> entrySet(); // Returns a set of entries for registered runners.\n\tGroovyRunner get(Object key); // Returns the registered runner for the specified key.\n\tstatic GroovyRunnerRegistry getInstance(); // Returns a reference to the one and only registry instance.\n\tboolean isEmpty(); // Returns true if the registry contains no runners, else false.\n\tIterator<GroovyRunner> iterator(); // Returns an iterator for all runners that are registered.\n\tSet<String> keySet(); // Set of all keys associated with registered runners.\n\tvoid load(ClassLoader classLoader); // Loads GroovyRunner instances using the ServiceLoader facility.\n\tGroovyRunner put(String key, GroovyRunner runner); // Registers a runner with the specified key.\n\tvoid putAll(Map<? extends String,? extends GroovyRunner> m); // Adds all entries from the given Map to the registry.\n\tGroovyRunner remove(Object key); // Removes a registered runner from the registry.\n\tint size(); // Returns the number of registered runners.\n\tCollection<GroovyRunner> values(); // Returns a collection of all registered runners.\n}"}
{"index": 14718, "repo": "spring-data-commons-3.1.2", "des": "Accessor for the ExampleMatcher to use in modules that support query by example (QBE) querying.", "code": "public class ExampleMatcherAccessor extends Object {\n\tExampleMatcher.StringMatcher getDefaultStringMatcher(); // Get defined ExampleMatcher.StringMatcher.\n\tExampleMatcher.NullHandler getNullHandler(); // Get defined null handling.\n\tExampleMatcher.PropertySpecifier getPropertySpecifier(String path); // Get the ExampleMatcher.PropertySpecifier for given path.\n\tCollection<ExampleMatcher.PropertySpecifier> getPropertySpecifiers(); // Returns the ExampleMatcher.PropertySpecifiers of the underlying ExampleMatcher.\n\tExampleMatcher.StringMatcher getStringMatcherForPath(String path); // Get the ExampleMatcher.StringMatcher for a given path or return the default one if none defined.\n\tExampleMatcher.PropertyValueTransformer getValueTransformerForPath(String path); // Get the ignore case flag for a given path or return ExampleMatcher.NoOpPropertyValueTransformer if none defined.\n\tboolean hasPropertySpecifier(String path); // Returns whether the underlying ExampleMatcher contains a ExampleMatcher.PropertySpecifier for the given path.\n\tboolean hasPropertySpecifiers();\n\tboolean isIgnoreCaseEnabled();\n\tboolean isIgnoreCaseForPath(String path); // Get the ignore case flag for a given path or return the default one if none defined.\n\tboolean isIgnoredPath(String path);\n}"}
{"index": 5676, "repo": "org.apache.karaf.main-2.4.4", "des": "A BundleFile that uses a ZipFile as it base file.", "code": "Class ZipBundleFile {\n\tprotected ZipFile basicOpen(); // Opens the ZipFile for this bundle file\n\tprotected boolean checkedOpen(); // Checks if the zip file is open\n\tvoid close(); // Closes the BundleFile.\n\tboolean containsDir(String dir); // Determines if any BundleEntries exist in the given directory path.\n\tprotected File extractDirectory(String dirName); // Extracts a directory and all sub content to disk\n\tBundleEntry getEntry(String path); // Locates a file name in this bundle and returns a BundleEntry object\n\tEnumeration<String> getEntryPaths(String path); // Allows to access the entries of the bundle.\n\tEnumeration<String> getEntryPaths(String path, boolean doRecurse);\n\tprotected File getExtractFile(String entryName);\n\tFile getFile(String entry, boolean nativeCode); // Returns a File for the bundle entry specified by the path.\n\tprotected ZipEntry getZipEntry(String path); // Returns a ZipEntry for the bundle file.\n\tprotected ZipFile getZipFile(); // Returns an open ZipFile for this bundle file.\n\tvoid open(); // Opens the BundleFiles.\n}"}
{"index": 14302, "repo": "wicket-core-10.0.0-M1", "des": "Interface for code that locates resources, taking into account variations for locale and style.", "code": "public interface IResourceStreamLocator {\n\torg.apache.wicket.util.resource.IResourceStream locate(Class<?> clazz, String path); // Locate a resource, given a path and class.\n\torg.apache.wicket.util.resource.IResourceStream locate(Class<?> clazz, String path, String style, String variation, Locale locale, String extension, boolean strict); // Locate a resource by combining the given path, style, variation, locale and extension parameters.\n\tIResourceNameIterator newResourceNameIterator(String path, Locale locale, String style, String variation, String extension, boolean strict); // Markup resources and Properties files both need to iterate over different combinations of locale, style, etc..\n}"}
{"index": 13879, "repo": "spring-webflux-6.0.11", "des": "A mutable builder for an ExchangeStrategies.", "code": "public static interface ExchangeStrategies.Builder {\n\tExchangeStrategies build(); // Builds the ExchangeStrategies.\n\tExchangeStrategies.Builder codecs(Consumer<org.springframework.http.codec.ClientCodecConfigurer> consumer); // Customize the list of client-side HTTP message readers and writers.\n}"}
{"index": 16867, "repo": "spring-amqp-3.0.6", "des": "Simple container collecting information to describe a queue.", "code": "public class Queue extends AbstractDeclarable implements Cloneable {\n\tObject clone();\n\tString getActualName(); // Return the name provided to the constructor or the broker-generated name if that name is an empty String.\n\tString getName(); // Return the name provided in the constructor.\n\tboolean isAutoDelete(); // True if the server should delete the queue when it is no longer in use (the last consumer is cancelled).\n\tboolean isDurable(); // A durable queue will survive a server restart.\n\tboolean isExclusive(); // True if the server should only send messages to the declarer's connection.\n\tvoid setActualName(String name); // Set the name from the DeclareOk.\n\tfinal void setLeaderLocator(String locator); // Set the leader locator strategy argument for this queue.\n}"}
{"index": 13790, "repo": "spring-webmvc-6.0.11", "des": "A central component to use to obtain the public URL path that clients should use to access a static resource.", "code": "public class ResourceUrlProvider extends Object implements org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent>, org.springframework.context.ApplicationContextAware {\n\tprotected void detectResourceHandlers(org.springframework.context.ApplicationContext appContext);\n\tfinal String getForLookupPath(String lookupPath); // Compare the given path against configured resource handler mappings and if a match is found use the ResourceResolver chain of the matched ResourceHttpRequestHandler to resolve the URL path to expose for public use.\n\tfinal String getForRequestUrl(HttpServletRequest request, String requestUrl); // A variation on getForLookupPath(String) that accepts a full request URL path (i.e.\n\tMap<String,ResourceHttpRequestHandler> getHandlerMap(); // Return the resource mappings, either manually configured or auto-detected when the Spring ApplicationContext is refreshed.\n\torg.springframework.util.PathMatcher getPathMatcher(); // Return the configured PathMatcher.\n\torg.springframework.web.util.UrlPathHelper getUrlPathHelper(); // Return the configured UrlPathHelper.\n\tboolean isAutodetect(); // Return false if resource mappings were manually configured, true otherwise.\n\tvoid onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent event);\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setHandlerMap(Map<String,ResourceHttpRequestHandler> handlerMap); // Manually configure the resource mappings.\n\tvoid setPathMatcher(org.springframework.util.PathMatcher pathMatcher); // Configure a PathMatcher to use when comparing target lookup path against resource mappings.\n\tvoid setUrlPathHelper(org.springframework.web.util.UrlPathHelper urlPathHelper); // Configure a UrlPathHelper to use in getForRequestUrl(jakarta.servlet.http.HttpServletRequest, String) in order to derive the lookup path for a target request URL path.\n}"}
{"index": 4212, "repo": "jackson-core-2.15.2", "des": "Container similar to EnumSet meant for storing sets of JacksonFeatures (usually Enums): main difference being that these sets are immutable.", "code": "Class JacksonFeatureSet<F extends JacksonFeature> {\n\tint asBitmask(); // Accessor for underlying bitmask\n\tstatic <F extends JacksonFeature>JacksonFeatureSet<F> fromBitmask(int bitmask);\n\tstatic <F extends JacksonFeature>JacksonFeatureSet<F> fromDefaults(F[] allFeatures); // \"Default\" factory which will calculate settings based on default-enabled status of all features.\n\tboolean isEnabled(F feature); // Main accessor for checking whether given feature is enabled in this feature set.\n\tJacksonFeatureSet<F> with(F feature); // Mutant factory for getting a set in which specified feature is enabled: will either return this instance (if no change), or newly created set (if there is change).\n\tJacksonFeatureSet<F> without(F feature); // Mutant factory for getting a set in which specified feature is disabled: will either return this instance (if no change), or newly created set (if there is change).\n}"}
{"index": 3486, "repo": "mahout-mr-0.13.0", "des": "Implementations represent a repository of information about users and their associated Preferences for items.", "code": "Interface DataModel {\n\tLongPrimitiveIterator getItemIDs();\n\tFastIDSet getItemIDsFromUser(long userID);\n\tfloat getMaxPreference();\n\tfloat getMinPreference();\n\tint getNumItems();\n\tint getNumUsers();\n\tint getNumUsersWithPreferenceFor(long itemID);\n\tint getNumUsersWithPreferenceFor(long itemID1, long itemID2);\n\tPreferenceArray getPreferencesForItem(long itemID);\n\tPreferenceArray getPreferencesFromUser(long userID);\n\tLong getPreferenceTime(long userID, long itemID); // Retrieves the time at which a preference value from a user and item was set, if known.\n\tFloat getPreferenceValue(long userID, long itemID); // Retrieves the preference value for a single user and item.\n\tLongPrimitiveIterator getUserIDs();\n\tboolean hasPreferenceValues();\n\tvoid removePreference(long userID, long itemID); // Removes a particular preference for a user.\n\tvoid setPreference(long userID, long itemID, float value); // Sets a particular preference (item plus rating) for a user.\n}"}
{"index": 5065, "repo": "commons-collections-3.2.2", "des": "SingletonIterator is an Iterator over a single object instance.", "code": "Class SingletonIterator {\n\tboolean hasNext(); // Is another object available from the iterator?\n\tObject next(); // Get the next object from the iterator.\n\tvoid remove(); // Remove the object from this iterator.\n\tvoid reset(); // Reset the iterator to the start.\n}"}
{"index": 2290, "repo": "hive-exec-4.0.0-alpha-2", "des": "A factory to get an instance of HiveTxnManager.", "code": "Class TxnManagerFactory {\n\tHiveTxnManager getTxnManager(HiveConf conf); // Create a new transaction manager.\n\tstatic TxnManagerFactory getTxnManagerFactory(); // Get the singleton instance of this factory.\n}"}
{"index": 7275, "repo": "calcite-core-1.34.0", "des": "SetSemanticsTable appears as an parameter in a table function.", "code": "Class SqlSetSemanticsTableOperator {\n\tboolean argumentMustBeScalar(int ordinal); // Returns whether the ordinalth argument to this operator must be scalar (as opposed to a query).\n\tSqlCall createCall(@Nullable SqlLiteral functionQualifier, SqlParserPos pos, SqlNode... operands); // Creates a call to this operator with an array of operands.\n\tRelDataType deriveType(SqlValidator validator, SqlValidatorScope scope, SqlCall call); // Derives the type of a call to this operator.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n}"}
{"index": 8771, "repo": "graal-sdk-1.0.0-rc7", "des": "The built-in methods which can be aliased.", "code": "Enum CEntryPoint.Builtin {\n\tstatic CEntryPoint.Builtin valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CEntryPoint.Builtin[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 866, "repo": "ignite-core-2.15.0", "des": "Convenience class representing mutable tuple of six values.", "code": "Class GridTuple6<V1,V2,V3,V4,V5,V6> {\n\tObject clone();\n\tboolean equals(Object o);\n\tV1 get1(); // Gets first value.\n\tV2 get2(); // Gets second value.\n\tV3 get3(); // Gets third value.\n\tV4 get4(); // Gets forth value.\n\tV5 get5(); // Gets fifth value.\n\tV6 get6(); // Gets sizth value.\n\tIterator<Object> iterator();\n\tvoid readExternal(ObjectInput in);\n\tvoid set(V1 val1, V2 val2, V3 val3, V4 val4, V5 val5, V6 val6); // Sets all values.\n\tvoid set1(V1 v1); // Sets first value.\n\tvoid set2(V2 v2); // Sets second value.\n\tvoid set3(V3 v3); // Sets third value.\n\tvoid set4(V4 v4); // Sets forth value.\n\tvoid set5(V5 v5); // Sets fifth value.\n\tvoid set6(V6 v6); // Sets sixth value.\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 14146, "repo": "wicket-core-10.0.0-M1", "des": "A store of pages that uses an IPageStore as a cache in front of another store to delegate to.", "code": "public class CachingPageStore extends DelegatingPageStore {\n\tvoid addPage(IPageContext context, IManageablePage page); // Stores the page-\n\tvoid destroy(); // Destroy the store.\n\tvoid detach(IPageContext context); // Detach from the current context.\n\tIPageStore getCache(); // Get the store used a cache.\n\tIManageablePage getPage(IPageContext context, int id); // Get the page from cache first.\n\tvoid removeAllPages(IPageContext context); // All pages should be removed from storage for the given context.\n\tvoid removePage(IPageContext context, IManageablePage page); // Removes a page from storage.\n\tvoid revertPage(IPageContext context, IManageablePage page); // Revert adding a page - optional operation.\n}"}
{"index": 9583, "repo": "commons-math3-3.6.1", "des": "This class implements the 8(5,3) Dormand-Prince integrator for Ordinary Differential Equations.", "code": "Class DormandPrince853Integrator {\n\tprotected double estimateError(double[][] yDotK, double[] y0, double[] y1, double h); // Compute the error ratio.\n\tint getOrder(); // Get the order of the method.\n}"}
{"index": 18085, "repo": "spring-ws-core-4.0.5", "des": "Represents the contents of an individual SOAP header in the a SOAP message.", "code": "public interface SoapHeaderElement extends SoapElement {\n\tString getActorOrRole(); // Returns the actor or role for this header element.\n\tboolean getMustUnderstand(); // Indicates whether the mustUnderstand attribute for this header element is set.\n\tResult getResult(); // Returns a Result that allows for writing to the contents of the header element.\n\tString getText(); // Returns the text content of this header element, if any.\n\tvoid setActorOrRole(String actorOrRole); // Sets the actor or role for this header element.\n\tvoid setMustUnderstand(boolean mustUnderstand); // Sets the mustUnderstand attribute for this header element.\n\tvoid setText(String content); // Sets the text content of this header element.\n}"}
{"index": 6430, "repo": "exoplayer-core-2.9.6", "des": "Manages requesting and responding to changes in audio focus.", "code": "Class AudioFocusManager {\n\tfloat getVolumeMultiplier(); // Gets the current player volume multiplier.\n\tint handlePrepare(boolean playWhenReady); // Called by a player as part of ExoPlayer.prepare(MediaSource, boolean, boolean).\n\tint handleSetPlayWhenReady(boolean playWhenReady, int playerState); // Called by the player as part of Player.setPlayWhenReady(boolean).\n\tvoid handleStop(); // Called by the player as part of Player.stop(boolean).\n\tint setAudioAttributes(AudioAttributes audioAttributes, boolean playWhenReady, int playerState); // Sets audio attributes that should be used to manage audio focus.\n}"}
{"index": 14120, "repo": "wicket-core-10.0.0-M1", "des": "An Ajax version of a link to a page of a PageableListView.", "code": "public class AjaxPagingNavigationLink extends PagingNavigationLink<Void> implements IAjaxLink {\n\tprotected AjaxPagingNavigationBehavior newAjaxPagingNavigationBehavior(IPageable pageable, String event);\n\tvoid onClick(); // Fallback event listener, will redisplay the current page.\n\tvoid onClick(AjaxRequestTarget target); // Performs the actual action of this component, performing a non-ajax fallback when there was no AjaxRequestTarget available.\n\tprotected void onComponentTag(ComponentTag tag); // Handles this link's tag.\n\tprotected void onInitialize(); // This method is meant to be used as an alternative to initialize components.\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes);\n}"}
{"index": 5513, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "Describes the optional data types which will get set in the MessageManager.", "code": "Enum MessageManager.MetaData.FetchGroup {\n\tstatic MessageManager.MetaData.FetchGroup valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic MessageManager.MetaData.FetchGroup[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 459, "repo": "phoenix-core-5.1.3", "des": "Interface representing an ordered list of KeyValues returned as the result of a query.", "code": "Interface Tuple {\n\tvoid getKey(org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Get the row key for the Tuple\n\tlong getSequenceValue(int index); // Get the sequence value given the sequence index.\n\torg.apache.hadoop.hbase.Cell getValue(byte[] family, byte[] qualifier); // Get the KeyValue contained by the Tuple with the given family and qualifier name.\n\tboolean getValue(byte[] family, byte[] qualifier, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Get the value byte array of the KeyValue contained by the Tuple with the given family and qualifier name.\n\torg.apache.hadoop.hbase.Cell getValue(int index); // Get the KeyValue at the given index.\n\tboolean isImmutable(); // Determines whether or not the Tuple is immutable (the typical case) or will potentially have additional KeyValues added to it (the case during filter evaluation when we see one KeyValue at a time).\n\torg.apache.hadoop.hbase.Cell mergeWithDynColsListBytesAndGetValue(int index, byte[] dynColsList); // Get the KeyValue at the given index whose value is concatenated with the serialized list of dynamic column PColumns for that row key.\n\tvoid setKeyValues(List<org.apache.hadoop.hbase.Cell> values);\n\tint size();\n}"}
{"index": 1791, "repo": "kafka-clients-3.5.0", "des": "A Callback for use by the SaslServer implementation when it needs to provide an OAuth 2 bearer token compact serialization for validation.", "code": "Class OAuthBearerValidatorCallback {\n\tvoid error(String errorStatus, String errorScope, String errorOpenIDConfiguration); // Set the error values as per RFC 7628: A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth.\n\tString errorOpenIDConfiguration(); // Return the (potentially null) error openid-configuration value as per RFC 7628: A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth.\n\tString errorScope(); // Return the (potentially null) error scope value as per RFC 7628: A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth.\n\tString errorStatus(); // Return the (potentially null) error status value as per RFC 7628: A Set of Simple Authentication and Security Layer (SASL) Mechanisms for OAuth and the IANA OAuth Extensions Error Registry.\n\tOAuthBearerToken token(); // Return the (potentially null) token\n\tvoid token(OAuthBearerToken token); // Set the token.\n\tString tokenValue(); // Return the (always non-null) token value\n}"}
{"index": 6806, "repo": "calcite-core-1.34.0", "des": "CancelFlag is used to post and check cancellation requests.", "code": "Class CancelFlag {\n\tvoid clearCancel(); // Clears any pending cancellation request.\n\tboolean isCancelRequested(); // Returns whether a cancellation has been requested.\n\tvoid requestCancel(); // Requests a cancellation.\n}"}
{"index": 18135, "repo": "jena-querybuilder-4.9.0", "des": "A QuadHolder implementation for a single quad.", "code": "public class SingleQuadHolder extends Object implements QuadHolder {\n\tExtendedIterator<Quad> getQuads(); // Get an extended iterator over the quads this holder holds.\n\tQuadHolder setValues(Map<Var,Node> values); // Apply values to the variables in the quads held by this holder.\n}"}
{"index": 11285, "repo": "spring-context-6.0.11", "des": "ScriptFactory implementation for a BeanShell script.", "code": "public class BshScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware {\n\tObject getScriptedObject(ScriptSource scriptSource, Class<?>... actualInterfaces); // Load and parse the BeanShell script via BshScriptUtils.\n\tClass<?> getScriptedObjectType(ScriptSource scriptSource); // Determine the type of the scripted Java object.\n\tClass<?>[] getScriptInterfaces(); // Return the business interfaces that the script is supposed to implement.\n\tString getScriptSourceLocator(); // Return a locator that points to the source of the script.\n\tboolean requiresConfigInterface(); // BeanShell scripts do require a config interface.\n\tboolean requiresScriptedObjectRefresh(ScriptSource scriptSource); // Determine whether a refresh is required (e.g.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}"}
{"index": 12181, "repo": "jena-core-4.9.0", "des": "Tests whether the first argument is not an instance of the datatype defined by the resource in the second argument.", "code": "public class NotDType extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 17624, "repo": "spring-ldap-core-3.1.0", "des": "A CompensatingTransactionOperationRecorder keeping track of modifyAttributes operations, creating corresponding ModifyAttributesOperationExecutor instances for rollback.", "code": "public class ModifyAttributesOperationRecorder extends Object implements CompensatingTransactionOperationRecorder {\n\tprotected ModificationItem getCompensatingModificationItem(Attributes originalAttributes, ModificationItem modificationItem); // Get a ModificationItem to use for rollback of the supplied modification.\n\tCompensatingTransactionOperationExecutor recordOperation(Object[] args); // Record information about the operation performed and return a corresponding CompensatingTransactionOperationExecutor to be used if the operation would need to be rolled back.\n}"}
{"index": 814, "repo": "ignite-core-2.15.0", "des": "Future that delegates to some other future.", "code": "Class GridNioEmbeddedFuture<R> {\n\tvoid onDone(GridNioFuture<R> res); // Callback to notify that future is finished.\n\tvoid onDone(@Nullable GridNioFuture<R> delegate, @Nullable Throwable err); // Callback to notify that future is finished.\n}"}
{"index": 6328, "repo": "mina-core-3.0.0-M2", "des": "Base interface for all IoServers and IoClients that provide I/O service and manage IoSession s.", "code": "Interface IoService {\n\tIoFilter[] getFilters(); // Get the list of filters installed on this service\n\tIoHandler getIoHandler(); // Get the IoHandler in charge of your business logic for this service.\n\tIoHandlerExecutor getIoHandlerExecutor(); // Get the IoHandlerExecutor used for executing IoHandler events in another pool of thread (not in the low level I/O one).\n\tMap<Long,IoSession> getManagedSessions(); // Returns the map of all sessions which are currently managed by this service.\n\tIoSessionConfig getSessionConfig(); // Returns the default configuration of the new IoSessions created by this service.\n\tvoid setFilters(IoFilter... filters); // Set the list of filters for this service.\n\tvoid setIoHandler(IoHandler handler); // Set the IoHandler in charge of your business logic for this service.\n}"}
{"index": 15216, "repo": "spring-boot-3.1.1", "des": "A simple bootstrap context that is available during startup and Environment post-processing up to the point that the ApplicationContext is prepared.", "code": "public interface BootstrapContext {\n\t<T> T get(Class<T> type); // Return an instance from the context if the type has been registered.\n\t<T> T getOrElse(Class<T> type, T other); // Return an instance from the context if the type has been registered.\n\t<T> T getOrElseSupply(Class<T> type, Supplier<T> other); // Return an instance from the context if the type has been registered.\n\t<T, X extends Throwable>T getOrElseThrow(Class<T> type, Supplier<? extends X> exceptionSupplier); // Return an instance from the context if the type has been registered.\n\t<T> boolean isRegistered(Class<T> type); // Return if a registration exists for the given type.\n}"}
{"index": 11279, "repo": "spring-context-6.0.11", "des": "Default implementation of the Errors and BindingResult interfaces, for the registration and evaluation of binding errors on JavaBean objects.", "code": "public class BeanPropertyBindingResult extends AbstractPropertyBindingResult implements Serializable {\n\tprotected org.springframework.beans.BeanWrapper createBeanWrapper(); // Create a new BeanWrapper for the underlying target object.\n\tfinal org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor(); // Returns the BeanWrapper that this instance uses.\n\tfinal Object getTarget(); // Return the wrapped target object.\n}"}
{"index": 10562, "repo": "groovy-all-4.0.13", "des": "The LineColumnReader is an extension to BufferedReader that keeps track of the line and column information of where the cursor is.", "code": "public class LineColumnReader extends BufferedReader {\n\tvoid close(); // Closes the stream and releases any system resources associated with it.\n\tlong getColumn();\n\tlong getColumnMark();\n\tlong getLine();\n\tlong getLineMark();\n\tvoid mark(int readAheadLimit); // Marks the present position in the stream.\n\tint read(); // Reads a single character.\n\tint read(char[] chars); // Reads characters into an array.\n\tint read(char[] chars, int startOffset, int length); // Reads characters into a portion of an array.\n\tint read(CharBuffer buffer); // Not implemented.\n\tString readLine(); // Reads a line of text.\n\tvoid reset(); // Resets the stream to the most recent mark.\n\tvoid setColumn(long column);\n\tvoid setColumnMark(long columnMark);\n\tvoid setLine(long line);\n\tvoid setLineMark(long lineMark);\n\tlong skip(long toSkip); // Skips characters.\n}"}
{"index": 6370, "repo": "spring-data-solr-4.3.15", "des": "DelegatingCursor is a base Cursor implementation that temporarily holds data fetched in one run and delegates iteration.", "code": "Class DelegatingCursor<T> {\n\tvoid close();\n\tprotected void doClose(); // Customization hook for clean up operations\n\tprotected abstract DelegatingCursor.PartialResult<T> doLoad(org.apache.solr.client.solrj.SolrQuery nativeQuery); // Read data from Solr.\n\tprotected void doOpen(String cursorMark); // Customization hook for open().\n\tString getCursorMark(); // Get the current set cursorMark\n\tlong getPosition();\n\tboolean hasNext();\n\tboolean isClosed();\n\tboolean isFinished();\n\tboolean isOpen();\n\tboolean isReady();\n\tprotected T moveNext(Iterator<T> source); // Move one position next in given source.\n\tT next();\n\tDelegatingCursor<T> open(); // Opens the cursor.\n\tvoid remove();\n}"}
{"index": 10543, "repo": "groovy-all-4.0.13", "des": "A closure which stores calls in a List so that method calls can be iterated over in a 'yield' style way", "code": "public class IteratorClosureAdapter<T> extends Closure {\n\tList<T> asList();\n\tprotected Object doCall(T argument);\n\tMetaClass getMetaClass(); // Returns the metaclass for a given class.\n\tvoid setMetaClass(MetaClass metaClass); // Allows the MetaClass to be replaced with a derived implementation.\n}"}
{"index": 12175, "repo": "jena-core-4.9.0", "des": "A variation on the normal Node_Variable which support for value bindings.", "code": "public class Node_RuleVariable extends Node_Variable {\n\tNode_RuleVariable cloneNode(); // Clone the rule variable to allow multiple rule instaces to be active at the same time.\n\tNode deref(); // Dereference a variable by following the reference chain.\n\tboolean equals(Object o); // Nodes only equal other Nodes that have equal labels.\n\tint getIndex(); // Returns the variable's index in a binding vector.\n\tNode getRawBoundValue(); // Return the raw value to which this variable is bound (via LP binding) with no dereferencing.\n\tboolean isUnbound(); // Test if the variable is unbound (in the brule sense).\n\tstatic boolean sameNodeAs(Node n, Node m); // Compare two nodes, taking into account variable indices.\n\tboolean sameValueAs(Object o); // Test that two nodes are semantically equivalent.\n\tvoid setIndex(int index); // Changes the variable's index.\n\tvoid simpleBind(Node node); // Binds a value to the brule version of the variable.\n\tvoid unbind(); // Set the variable to be unbound (in the brule sense)\n}"}
{"index": 5484, "repo": "druid-processing-26.0.0", "des": "Serializer for a NestedCommonFormatColumn for single type arrays and mixed type columns, but not columns with nested data.", "code": "Class VariantColumnSerializer {\n\tString getColumnName();\n\tDictionaryIdLookup getGlobalLookup();\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tboolean hasNulls();\n\tvoid open();\n\tvoid openDictionaryWriter();\n\tvoid serialize(ColumnValueSelector<? extends StructuredData> selector);\n\tvoid serializeDictionaries(Iterable<String> strings, Iterable<Long> longs, Iterable<Double> doubles, Iterable<int[]> arrays);\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 2364, "repo": "commons-geometry-euclidean-1.0", "des": "Class containing a transformed line instance along with a subspace (1D) transform.", "code": "Class Line3D.SubspaceTransform {\n\tLine3D getLine(); // Get the transformed line instance.\n\tAffineTransformMatrix1D getTransform(); // Get the 1D transform that can be applied to subspace points.\n}"}
{"index": 10460, "repo": "groovy-all-4.0.13", "des": "Utility class to guess the encoding of a given text file.", "code": "public class CharsetToolkit extends Object {\n\tstatic Charset[] getAvailableCharsets(); // Retrieves all the available Charsets on the platform, among which the default charset.\n\tCharset getCharset();\n\tCharset getDefaultCharset(); // Retrieves the default Charset\n\tstatic Charset getDefaultSystemCharset(); // Retrieve the default charset of the system.\n\tboolean getEnforce8Bit(); // Gets the enforce8Bit flag, in case we do not want to ever get a US-ASCII encoding.\n\tBufferedReader getReader(); // Gets a BufferedReader (indeed a LineNumberReader) from the File specified in the constructor of CharsetToolkit using the charset discovered or the default charset if an 8-bit Charset is encountered.\n\tboolean hasUTF16BEBom(); // Has a Byte Order Marker for UTF-16 Big Endian (utf-16 and ucs-2).\n\tboolean hasUTF16LEBom(); // Has a Byte Order Marker for UTF-16 Low Endian (ucs-2le, ucs-4le, and ucs-16le).\n\tboolean hasUTF8Bom(); // Has a Byte Order Marker for UTF-8 (Used by Microsoft's Notepad and other editors).\n\tvoid setDefaultCharset(Charset defaultCharset); // Defines the default Charset used in case the buffer represents an 8-bit Charset.\n\tvoid setEnforce8Bit(boolean enforce); // If US-ASCII is recognized, enforce to return the default encoding, rather than US-ASCII.\n}"}
{"index": 15508, "repo": "spring-batch-core-5.0.2", "des": "Batch domain object representing the execution of a job.", "code": "public class JobExecution extends Entity {\n\tvoid addFailureException(Throwable t); // Add the provided throwable to the failure exception list.\n\tvoid addStepExecutions(List<StepExecution> stepExecutions); // Add some step executions.\n\tStepExecution createStepExecution(String stepName); // Register a step execution with the current job execution.\n\tList<Throwable> getAllFailureExceptions(); // Return all failure causing exceptions for this JobExecution, including step executions.\n\tLocalDateTime getCreateTime();\n\tLocalDateTime getEndTime();\n\tExecutionContext getExecutionContext(); // Returns the ExecutionContext for this execution.\n\tExitStatus getExitStatus();\n\tList<Throwable> getFailureExceptions(); // Retrieve a list of exceptions.\n\tLong getJobId(); // Convenience getter for the id of the enclosing job.\n\tJobInstance getJobInstance();\n\tJobParameters getJobParameters();\n\tLocalDateTime getLastUpdated(); // Get the date representing the last time this JobExecution was updated in the JobRepository.\n\tLocalDateTime getStartTime();\n\tBatchStatus getStatus();\n\tCollection<StepExecution> getStepExecutions(); // Accessor for the step executions.\n\tboolean isRunning(); // Test if this JobExecution indicates that it is running.\n\tboolean isStopping(); // Test if this JobExecution indicates that it has been signalled to stop.\n\tvoid setCreateTime(LocalDateTime createTime);\n\tvoid setEndTime(LocalDateTime endTime); // Set the end time.\n\tvoid setExecutionContext(ExecutionContext executionContext); // Sets the ExecutionContext for this execution.\n\tvoid setExitStatus(ExitStatus exitStatus);\n\tvoid setJobInstance(JobInstance jobInstance); // Set the JobInstance used by the JobExecution.\n\tvoid setLastUpdated(LocalDateTime lastUpdated); // Set the last time this JobExecution was updated.\n\tvoid setStartTime(LocalDateTime startTime); // Set the start time.\n\tvoid setStatus(BatchStatus status); // Set the value of the status field.\n\tvoid upgradeStatus(BatchStatus status); // Upgrade the status field if the provided value is greater than the existing one.\n}"}
{"index": 2845, "repo": "amqp-client-5.18.0", "des": "Strategy interface to get the potential servers to connect to.", "code": "Interface AddressResolver {\n\tList<Address> getAddresses(); // Get the potential Addresses to connect to.\n\tdefault List<Address> maybeShuffle(List<Address> input); // Optionally shuffle the list of addresses returned by getAddresses().\n}"}
{"index": 7092, "repo": "calcite-core-1.34.0", "des": "RelTrait represents the manifestation of a relational expression trait within a trait definition.", "code": "Interface RelTrait {\n\tdefault <T extends RelTrait>T apply(Mappings.TargetMapping mapping); // Applies a mapping to this trait.\n\tboolean equals(@Nullable Object o); // See note about equals() and hashCode().\n\tRelTraitDef getTraitDef(); // Returns the RelTraitDef that defines this RelTrait.\n\tdefault boolean isDefault(); // Returns whether this trait is the default trait value.\n\tvoid register(RelOptPlanner planner); // Registers a trait instance with the planner.\n\tboolean satisfies(RelTrait trait); // Returns whether this trait satisfies a given trait.\n}"}
{"index": 13573, "repo": "spring-messaging-6.0.11", "des": "A HandlerMethodReturnValueHandler for sending to destinations specified in a SendTo or SendToUser method-level annotations.", "code": "public class SendToMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler {\n\tString getDefaultDestinationPrefix(); // Return the configured default destination prefix.\n\tString getDefaultUserDestinationPrefix(); // Return the configured default user destination prefix.\n\tMessageHeaderInitializer getHeaderInitializer(); // Return the configured header initializer.\n\tprotected String[] getTargetDestinations(Annotation annotation, Message<?> message, String defaultPrefix);\n\tprotected String getUserName(Message<?> message, MessageHeaders headers);\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, Message<?> message); // Handle the given return value.\n\tvoid setDefaultDestinationPrefix(String defaultDestinationPrefix); // Configure a default prefix to add to message destinations in cases where a method is not annotated with @SendTo or does not specify any destinations through the annotation's value attribute.\n\tvoid setDefaultUserDestinationPrefix(String prefix); // Configure a default prefix to add to message destinations in cases where a method is annotated with @SendToUser but does not specify any destinations through the annotation's value attribute.\n\tvoid setHeaderInitializer(MessageHeaderInitializer headerInitializer); // Configure a MessageHeaderInitializer to apply to the headers of all messages sent to the client outbound channel.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType); // Whether the given method return type is supported by this handler.\n}"}
{"index": 610, "repo": "ignite-core-2.15.0", "des": "Collector to compute statistic by single column.", "code": "Class ColumnStatisticsCollector {\n\tvoid add(Object val); // Add value to statistics.\n\tstatic ColumnStatistics aggregate(List<ColumnStatistics> partStats, StatisticsColumnOverrides overrides); // Aggregate specified (partition or local) column statistics into (local or global) single one.\n\tint columnId();\n\tString columnName();\n\tClass<?> columnType();\n\tColumnStatistics finish(); // Get total column statistics.\n}"}
{"index": 6643, "repo": "artemis-odb-2.3.0", "des": "Performance optimized bitset implementation.", "code": "Class BitVector {\n\tvoid and(BitVector other); // Performs a logical AND of this target bit set with the argument bit set.\n\tvoid andNot(BitVector other); // Clears all of the bits in this bit set whose corresponding bit is set in the specified bit set.\n\tint cardinality();\n\tvoid clear(); // Clears the entire bitset\n\tvoid clear(int index);\n\tboolean containsAll(BitVector other); // Returns true if this bit set is a super set of the specified set, i.e.\n\tvoid ensureCapacity(int bits); // Grows the backing array (long[]) so that it can hold the requested bits.\n\tboolean equals(Object obj);\n\tvoid flip(int index);\n\tboolean get(int index);\n\tboolean intersects(BitVector other); // Returns true if the specified BitVector has any bits set to true that are also set to true in this BitVector.\n\tboolean isEmpty();\n\tint length(); // Returns the \"logical size\" of this bitset: the index of the highest set bit in the bitset plus one.\n\tint nextClearBit(int fromIndex); // Returns the index of the first bit that is set to false that occurs on or after the specified starting index.\n\tint nextSetBit(int fromIndex); // Returns the index of the first bit that is set to true that occurs on or after the specified starting index.\n\tvoid or(BitVector other); // Performs a logical OR of this bit set with the bit set argument.\n\tvoid set(int index);\n\tvoid set(int index, boolean value);\n\tIntBag toIntBag(IntBag out); // Decodes the set bits as integers.\n\tIntBag toIntBagIdCid(ComponentManager cm, IntBag out); // Decodes the set bits as pairs of entity id and compositionId.\n\tvoid unsafeClear(int index);\n\tboolean unsafeGet(int index);\n\tvoid unsafeSet(int index);\n\tvoid unsafeSet(int index, boolean value);\n\tvoid xor(BitVector other); // Performs a logical XOR of this bit set with the bit set argument.\n}"}
{"index": 16896, "repo": "spring-security-oauth2-core-6.1.2", "des": "A representation of an OAuth 2.0 Device Authorization Response.", "code": "public final class OAuth2DeviceAuthorizationResponse extends Object {\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters returned in the response.\n\tOAuth2DeviceCode getDeviceCode(); // Returns the Device Code.\n\tlong getInterval(); // Returns the minimum amount of time (in seconds) that the client should wait between polling requests to the token endpoint.\n\tOAuth2UserCode getUserCode(); // Returns the User Code.\n\tString getVerificationUri(); // Returns the end-user verification URI.\n\tString getVerificationUriComplete(); // Returns the end-user verification URI that includes the user code.\n\tstatic OAuth2DeviceAuthorizationResponse.Builder with(String deviceCode, String userCode); // Returns a new OAuth2DeviceAuthorizationResponse.Builder, initialized with the provided device code and user code values.\n\tstatic OAuth2DeviceAuthorizationResponse.Builder with(OAuth2DeviceCode deviceCode, OAuth2UserCode userCode); // Returns a new OAuth2DeviceAuthorizationResponse.Builder, initialized with the provided device code and user code.\n}"}
{"index": 7513, "repo": "cassandra-all-4.1.2", "des": "A DataOutputStreamPlus that writes ASYNCHRONOUSLY to a Netty Channel.", "code": "Class AsyncMessageOutputPlus {\n\tvoid close(); // Flush any remaining writes, and release any buffers.\n\tvoid discard(); // Discard any buffered data, and the buffers that contain it.\n\tprotected void doFlush(int count);\n\tlong position(); // Returns the current position of the underlying target like a file-pointer or the position withing a buffer.\n}"}
{"index": 10305, "repo": "spring-core-6.0.11", "des": "Factory interface for MetadataReader instances.", "code": "public interface MetadataReaderFactory {\n\tMetadataReader getMetadataReader(String className); // Obtain a MetadataReader for the given class name.\n\tMetadataReader getMetadataReader(Resource resource); // Obtain a MetadataReader for the given resource.\n}"}
{"index": 27, "repo": "connect-api-3.5.0", "des": "Abstract class that defines the configuration options for Converter and HeaderConverter instances.", "code": "Class ConverterConfig {\n\tstatic org.apache.kafka.common.config.ConfigDef newConfigDef(); // Create a new ConfigDef instance containing the configurations defined by ConverterConfig.\n\tConverterType type(); // Get the type of converter as defined by the TYPE_CONFIG configuration.\n}"}
{"index": 15747, "repo": "camel-api-4.0.0-RC1", "des": "An interface for listening to consumer events and allow proxying between a consumer predicate and the Camel component.", "code": "public interface ConsumerListener<C,P> {\n\tboolean afterConsume(C consumePayload); // This is an event that runs after data consumption.\n\tboolean afterProcess(P processingPayload); // This is an event that runs after data processing.\n\tvoid setResumableCheck(Predicate<?> afterConsumeEval); // This sets the predicate responsible for evaluating whether the processing can resume or not.\n}"}
{"index": 5303, "repo": "druid-processing-26.0.0", "des": "Indexes support fast lookups on key columns.", "code": "Interface IndexedTable.Index {\n\tboolean areKeysUnique(); // Returns whether keys are unique in this index.\n\tit.unimi.dsi.fastutil.ints.IntSortedSet find(Object key); // Returns the list of row numbers corresponding to \"key\" in this index.\n\tint findUniqueLong(long key); // Returns the row number corresponding to \"key\" in this index, or NOT_FOUND if the key does not exist in the index.\n\tColumnType keyType(); // Returns the natural key type for the index.\n}"}
{"index": 12325, "repo": "jena-core-4.9.0", "des": "This interface represents the Attribute Group Definition schema component.", "code": "public interface XSAttributeGroupDefinition extends XSObject {\n\tXSAnnotation getAnnotation(); // An annotation if it exists, otherwise null.\n\tXSObjectList getAnnotations(); // A sequence of [annotations] or an empty XSObjectList.\n\tXSObjectList getAttributeUses(); // A set of [attribute uses] if it exists, otherwise an empty XSObjectList.\n\tXSWildcard getAttributeWildcard(); // A [wildcard] if it exists, otherwise null.\n}"}
{"index": 3839, "repo": "hbase-client-3.0.0-alpha-4", "des": "A filter that will only return the first KV from each row.", "code": "Class FirstKeyOnlyFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRowKey(Cell cell); // Filters a row based on the row key.\n\tprotected boolean hasFoundKV(); // Returns true if first KV has been found.\n\tstatic FirstKeyOnlyFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of FirstKeyOnlyFilter\n\tvoid reset(); // Filters that are purely stateless and do nothing in their reset() methods can inherit this null/empty implementation.\n\tprotected void setFoundKV(boolean value); // Set or clear the indication if the first KV has been found.\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 486, "repo": "ignite-core-2.15.0", "des": "Implementation of node load probing based on total job processing time.", "code": "Class AdaptiveProcessingTimeLoadProbe {\n\tdouble getLoad(ClusterNode node, int jobsSentSinceLastUpdate); // Calculates load value for a given node.\n\tboolean isUseAverage(); // Gets flag indicating whether to use average execution time vs. current.\n\tvoid setUseAverage(boolean useAvg); // Sets flag indicating whether to use average execution time vs. current.\n}"}
{"index": 14144, "repo": "wicket-core-10.0.0-M1", "des": "Subclass of WebResponse that buffers the actions and performs those on another response.", "code": "public class BufferedWebResponse extends org.apache.wicket.request.http.WebResponse implements IMetaDataBufferingWebResponse {\n\tvoid addCookie(jakarta.servlet.http.Cookie cookie);\n\tvoid addHeader(String name, String value);\n\tvoid clearCookie(jakarta.servlet.http.Cookie cookie);\n\tvoid disableCaching();\n\tString encodeRedirectURL(CharSequence url);\n\tString encodeURL(CharSequence url);\n\tvoid flush();\n\tObject getContainerResponse();\n\tCharSequence getText(); // Returns the text already written to this response.\n\tboolean isHeaderSupported();\n\tboolean isRedirect();\n\tvoid reset();\n\tvoid sendError(int sc, String msg);\n\tvoid sendRedirect(String url);\n\tvoid setContentLength(long length);\n\tvoid setContentType(String mimeType);\n\tvoid setDateHeader(String name, Instant date);\n\tvoid setHeader(String name, String value);\n\tvoid setStatus(int sc);\n\tvoid setText(CharSequence text); // Replaces the text in this response\n\tvoid write(byte[] array);\n\tvoid write(byte[] array, int offset, int length);\n\tvoid write(CharSequence sequence);\n\tvoid writeMetaData(org.apache.wicket.request.http.WebResponse response); // transfer cookie operations (add, clear) to given web response\n\tvoid writeTo(org.apache.wicket.request.http.WebResponse response); // Writes the content of the buffer to the specified response.\n}"}
{"index": 7312, "repo": "calcite-core-1.34.0", "des": "A sql type name specification of user defined type.", "code": "Class SqlUserDefinedTypeNameSpec {\n\tRelDataType deriveType(SqlValidator validator); // Derive type from this SqlTypeNameSpec.\n\tboolean equalsDeep(SqlTypeNameSpec spec, Litmus litmus); // Returns whether this spec is structurally equivalent to another spec.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this spec to a writer.\n}"}
{"index": 3699, "repo": "kafka-streams-3.5.0", "des": "The class that is used to capture the key and value Serdes and set the part of name used for repartition topics when performing KStream.", "code": "Class Grouped<K,V> {\n\tstatic <K,V> Grouped<K,V> as(String name); // Create a Grouped instance with the provided name used as part of the repartition topic if required.\n\tstatic <K,V> Grouped<K,V> keySerde(org.apache.kafka.common.serialization.Serde<K> keySerde); // Create a Grouped instance with the provided keySerde.\n\tstatic <K,V> Grouped<K,V> valueSerde(org.apache.kafka.common.serialization.Serde<V> valueSerde); // Create a Grouped instance with the provided valueSerde.\n\tstatic <K,V> Grouped<K,V> with(org.apache.kafka.common.serialization.Serde<K> keySerde, org.apache.kafka.common.serialization.Serde<V> valueSerde); // Create a Grouped instance with the provided keySerde and valueSerde.\n\tstatic <K,V> Grouped<K,V> with(String name, org.apache.kafka.common.serialization.Serde<K> keySerde, org.apache.kafka.common.serialization.Serde<V> valueSerde); // Create a Grouped instance with the provided name, keySerde, and valueSerde.\n\tGrouped<K,V> withKeySerde(org.apache.kafka.common.serialization.Serde<K> keySerde); // Perform the grouping operation using the provided keySerde for serializing the key.\n\tGrouped<K,V> withName(String name); // Perform the grouping operation with the name for a repartition topic if required.\n\tGrouped<K,V> withValueSerde(org.apache.kafka.common.serialization.Serde<V> valueSerde); // Perform the grouping operation using the provided valueSerde for serializing the value.\n}"}
{"index": 6396, "repo": "spring-data-solr-4.3.15", "des": "Trivial implementation of FieldStatsResult.", "code": "Class SimpleFieldStatsResult {\n\tLong getDistinctCount(); // Return the count of distinct values for this field.\n\tCollection<Object> getDistinctValues(); // Return the distinct values for this field.\n\tMap<String,StatsResult> getFacetStatsResult(Field field); // Return a map of value associated to its statistics for a given field.\n\tMap<String,StatsResult> getFacetStatsResult(String fieldName); // Return a map of value associated to its statistics for a given field name.\n\tMap<String,Map<String,StatsResult>> getFacetStatsResults(); // Return a map of fieldName associated to value facets for the given FieldStatsResult.\n\tvoid setCountDistinct(Long distinctCount);\n\tvoid setDistinctValues(Collection<Object> distinctValues);\n\tvoid setStatsResults(Map<String,Map<String,StatsResult>> statsResults);\n}"}
{"index": 4389, "repo": "beam-sdks-java-core-2.49.0", "des": "A SchemaProvider base class that vends schemas and rows based on FieldValueGetters.", "code": "Class GetterBasedSchemaProvider {\n\tboolean equals(@Nullable java.lang.Object obj);\n\tabstract java.util.List<FieldValueGetter> fieldValueGetters(java.lang.Class<?> targetClass, Schema schema); // Implementing class should override to return FieldValueGetters.\n\tabstract java.util.List<FieldValueTypeInformation> fieldValueTypeInformations(java.lang.Class<?> targetClass, Schema schema); // Implementing class should override to return a list of type-informations.\n\t<T> SerializableFunction<Row,T> fromRowFunction(TypeDescriptor<T> typeDescriptor); // Given a type, returns a function that converts from a Row object to that type.\n\tabstract SchemaUserTypeCreator schemaTypeCreator(java.lang.Class<?> targetClass, Schema schema); // Implementing class should override to return a constructor.\n\t<T> SerializableFunction<T,Row> toRowFunction(TypeDescriptor<T> typeDescriptor); // Given a type, return a function that converts that type to a Row object If no schema exists, returns null.\n}"}
{"index": 14686, "repo": "spring-data-commons-3.1.2", "des": "API to easily set up GenericConverter instances using Java 8 lambdas, mostly in bidirectional fashion for easy registration as custom type converters of the Spring Data mapping subsystem.", "code": "public interface ConverterBuilder {\n\tSet<GenericConverter> getConverters(); // Returns all GenericConverter instances to be registered for the current ConverterBuilder.\n\tstatic <S, T> ConverterBuilder.ReadingConverterBuilder<S,T> reading(Class<S> source, Class<T> target, Function<? super S,? extends T> function); // Creates a new ConverterBuilder.ReadingConverterBuilder to produce a converter to read values of the given source (the store type) into the given target (the domain type).\n\tstatic <S, T> ConverterBuilder.WritingConverterBuilder<S,T> writing(Class<S> source, Class<T> target, Function<? super S,? extends T> function); // Creates a new ConverterBuilder.WritingConverterBuilder to produce a converter to write values of the given source (the domain type) into the given target (the store type).\n}"}
{"index": 1374, "repo": "nutch-2.4", "des": "Generic URL filter based on regular expressions.", "code": "Class RegexURLFilterBase {\n\tprotected abstract RegexRule createRule(boolean sign, java.lang.String regex); // Creates a new RegexRule.\n\tjava.lang.String filter(java.lang.String url);\n\tConfiguration getConf();\n\tprotected abstract java.io.Reader getRulesReader(Configuration conf); // Returns the name of the file of rules to use for a particular implementation.\n\tstatic void main(RegexURLFilterBase filter, java.lang.String[] args); // Filter the standard input using a RegexURLFilterBase.\n\tvoid setConf(Configuration conf);\n}"}
{"index": 10422, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "This API was heavily influenced by Brave.", "code": "public interface CurrentTraceContext {\n\tTraceContext context();\n\tCurrentTraceContext.Scope maybeScope(TraceContext context); // Like newScope(TraceContext), except returns a noop scope if the given context is already in scope.\n\tCurrentTraceContext.Scope newScope(TraceContext context); // Sets the current span in scope until the returned object is closed.\n\tRunnable wrap(Runnable task); // Wraps a task in a trace representation.\n\t<C> Callable<C> wrap(Callable<C> task); // Wraps a task in a trace representation.\n\tExecutor wrap(Executor delegate); // Wraps an executor in a trace representation.\n\tExecutorService wrap(ExecutorService delegate); // Wraps an executor service in a trace representation.\n}"}
{"index": 4414, "repo": "beam-sdks-java-core-2.49.0", "des": "A Coder for List, using the format of IterableLikeCoder.", "code": "Class ListCoder<T> {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tprotected java.util.List<T> decodeToIterable(java.util.List<T> decodedElements); // Builds an instance of IterableT, this coder's associated Iterable-like subtype, from a list of decoded elements.\n\tTypeDescriptor<java.util.List<T>> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tstatic <T> ListCoder<T> of(Coder<T> elemCoder);\n\tjava.lang.Object structuralValue(java.util.List<T> values); // Returns an object with an Object.equals() method that represents structural equality on the argument.\n\tvoid verifyDeterministic(); // List sizes are always known, so ListIterable may be deterministic while the general IterableLikeCoder is not.\n}"}
{"index": 16179, "repo": "spring-data-cassandra-4.1.2", "des": "Available actions for Keyspace Specifications.", "code": "public enum KeyspaceAction extends Enum<KeyspaceAction> {\n\tstatic KeyspaceAction valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic KeyspaceAction[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14045, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "Entry point to Spring Boot's Gradle DSL.", "code": "public class SpringBootExtension extends Object {\n\tvoid buildInfo(); // Creates a new BuildInfo task named bootBuildInfo and configures the Java plugin's classes task to depend upon it.\n\tvoid buildInfo(Action<BuildInfo> configurer); // Creates a new BuildInfo task named bootBuildInfo and configures the Java plugin's classes task to depend upon it.\n\tProperty<String> getMainClass(); // Returns the fully-qualified name of the application's main class.\n}"}
{"index": 4438, "repo": "beam-sdks-java-core-2.49.0", "des": "Utility methods for working with sharded files.", "code": "Class NumberedShardedFile {\n\tjava.lang.String getFilePattern();\n\tjava.util.List<java.lang.String> readFilesWithRetries(); // Discovers all shards of this file.\n\tjava.util.List<java.lang.String> readFilesWithRetries(Sleeper sleeper, BackOff backOff); // Discovers all shards of this file using the provided Sleeper and BackOff.\n}"}
{"index": 9672, "repo": "commons-math3-3.6.1", "des": "This class defines a set of secondary equations to compute the Jacobian matrices with respect to the initial state vector and, if any, to some parameters of the primary ODE set.", "code": "Class JacobianMatrices {\n\tvoid addParameterJacobianProvider(ParameterJacobianProvider provider); // Add a parameter Jacobian provider.\n\tvoid getCurrentMainSetJacobian(double[][] dYdY0); // Get the current value of the Jacobian matrix with respect to state.\n\tvoid getCurrentParameterJacobian(String pName, double[] dYdP); // Get the current value of the Jacobian matrix with respect to one parameter.\n\tvoid registerVariationalEquations(ExpandableStatefulODE expandable); // Register the variational equations for the Jacobians matrices to the expandable set.\n\tvoid setInitialMainStateJacobian(double[][] dYdY0); // Set the initial value of the Jacobian matrix with respect to state.\n\tvoid setInitialParameterJacobian(String pName, double[] dYdP); // Set the initial value of a column of the Jacobian matrix with respect to one parameter.\n\tvoid setParameterizedODE(ParameterizedODE parameterizedOde); // Set a parameter Jacobian provider.\n\tvoid setParameterStep(String parameter, double hP); // Set the step associated to a parameter in order to compute by finite difference the Jacobian matrix.\n}"}
{"index": 18478, "repo": "accumulo-master-2.0.1", "des": "Keep a persistent roughly monotone view of how long a master has been overseeing this cluster.", "code": "Class MasterTime {\n\tlong getTime(); // How long has this cluster had a Master?\n\tvoid run();\n\tvoid shutdown(); // Shut down the time keeping.\n}"}
{"index": 15464, "repo": "spring-batch-core-5.0.2", "des": "Base PartitionHandler implementation providing common base features.", "code": "public abstract class AbstractPartitionHandler extends Object implements PartitionHandler {\n\tprotected abstract Set<StepExecution> doHandle(StepExecution managerStepExecution, Set<StepExecution> partitionStepExecutions); // Executes the specified StepExecution instances and returns an updated view of them.\n\tint getGridSize(); // Returns the number of step executions.\n\tCollection<StepExecution> handle(StepExecutionSplitter stepSplitter, StepExecution managerStepExecution); // Main entry point for PartitionHandler interface.\n\tvoid setGridSize(int gridSize); // Passed to the StepExecutionSplitter in the handle(StepExecutionSplitter, StepExecution) method, instructing it how many StepExecution instances are required, ideally.\n}"}
{"index": 13386, "repo": "shiro-core-2.0.0-alpha-2", "des": "A SimpleAccountRealm that enables text-based configuration of the initial User, Role, and Permission objects created at startup.", "code": "public class TextConfigurationRealm extends SimpleAccountRealm {\n\tString getRoleDefinitions();\n\tString getUserDefinitions();\n\tprotected void onInit(); // Will call 'processDefinitions' on startup.\n\tprotected void processDefinitions();\n\tprotected void processRoleDefinitions();\n\tprotected void processRoleDefinitions(Map<String,String> roleDefs);\n\tprotected void processUserDefinitions();\n\tprotected void processUserDefinitions(Map<String,String> userDefs);\n\tvoid setRoleDefinitions(String roleDefinitions); // Sets a newline (\\n) delimited String that defines role-to-permission definitions.\n\tvoid setUserDefinitions(String userDefinitions); // Sets a newline (\\n) delimited String that defines user-to-password-and-role(s) key/value pairs according to the following format:\n\tprotected static Set<String> toLines(String s);\n\tprotected static Map<String,String> toMap(Collection<String> keyValuePairs);\n}"}
{"index": 16740, "repo": "spring-jms-6.0.11", "des": "A MessageHeaderAccessor implementation giving access to JMS-specific headers.", "code": "public class JmsMessageHeaderAccessor extends org.springframework.messaging.support.NativeMessageHeaderAccessor {\n\tString getCorrelationId(); // Return the correlationId.\n\tInteger getDeliveryMode(); // Return the delivery mode.\n\tDestination getDestination(); // Return the destination.\n\tLong getExpiration(); // Return the message expiration.\n\tString getMessageId(); // Return the message id.\n\tInteger getPriority(); // Return the priority.\n\tBoolean getRedelivered(); // Return the redelivered flag.\n\tDestination getReplyTo(); // Return the reply to.\n\tLong getTimestamp(); // Return the timestamp.\n\tString getType(); // Return the type.\n\tstatic JmsMessageHeaderAccessor wrap(org.springframework.messaging.Message<?> message); // Create a JmsMessageHeaderAccessor from the headers of an existing message.\n}"}
{"index": 2874, "repo": "amqp-client-5.18.0", "des": "TrafficListener that logs Command at TRACE level.", "code": "Class LogTrafficListener {\n\tvoid read(Command inboundCommand); // Notified for each inbound Command.\n\tprotected boolean shouldLog(Command command);\n\tvoid write(Command outboundCommand); // Notified for each outbound Command.\n}"}
{"index": 1447, "repo": "pdfbox-3.0.0-beta1", "des": "B* Fill and then stroke the path, using the even-odd rule to determine the region to fill.", "code": "Class FillEvenOddAndStrokePath {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> operands); // Process the operator.\n}"}
{"index": 2759, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "This map-only job compares the data from a local table with a remote one.", "code": "Class VerifyReplication {\n\torg.apache.hadoop.mapreduce.Job createSubmittableJob(org.apache.hadoop.conf.Configuration conf, String[] args); // Sets up the actual job.\n\tboolean doCommandLine(String[] args);\n\tstatic void main(String[] args); // Main entry point.\n\tint run(String[] args);\n}"}
{"index": 13645, "repo": "spring-webmvc-6.0.11", "des": "Abstract base class to provide common methods for implementing databinding-aware JSP tags for rendering an HTML 'input' element with a 'type' of 'checkbox' or 'radio'.", "code": "public abstract class AbstractCheckedElementTag extends AbstractHtmlInputElementTag {\n\tprotected String autogenerateId(); // Return a unique ID for the bound name within the current PageContext.\n\tprotected abstract String getInputType(); // Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected boolean isValidDynamicAttribute(String localName, Object value); // Flags \"type\" as an illegal dynamic attribute.\n\tprotected void renderFromBoolean(Boolean boundValue, TagWriter tagWriter); // Render the 'input(checkbox)' with the supplied value, marking the 'input' element as 'checked' if the supplied Boolean is true.\n\tprotected void renderFromValue(Object item, Object value, TagWriter tagWriter); // Render the 'input(checkbox)' with the supplied value, marking the 'input' element as 'checked' if the supplied value matches the bound value.\n\tprotected void renderFromValue(Object value, TagWriter tagWriter); // Render the 'input(checkbox)' with the supplied value, marking the 'input' element as 'checked' if the supplied value matches the bound value.\n\tprotected abstract int writeTagContent(TagWriter tagWriter); // Writes the 'input' element to the supplied TagWriter, marking it as 'checked' if appropriate.\n}"}
{"index": 9898, "repo": "iceberg-api-1.3.0", "des": "A default Timer implementation that uses a Stopwatch instance internally to measure time.", "code": "Class DefaultTimer {\n\tlong count(); // The number of times Timer.time(Duration) was called.\n\tvoid record(long amount, java.util.concurrent.TimeUnit unit); // Records a custom amount in the given time unit.\n\tTimer.Timed start(); // Starts the timer and returns a Timer.Timed instance.\n\tvoid time(java.lang.Runnable runnable); // Executes and measures the given Runnable instance.\n\t<T> T time(java.util.function.Supplier<T> supplier); // Gets the result from the given Supplier and measures its execution time.\n\t<T> T timeCallable(java.util.concurrent.Callable<T> callable); // Executes and measures the given Callable and returns its result.\n\tjava.time.Duration totalDuration(); // The total duration that was recorded.\n\tjava.util.concurrent.TimeUnit unit(); // The TimeUnit of the timer.\n}"}
{"index": 18073, "repo": "spring-ws-core-4.0.5", "des": "Represents the Body element in a SOAP message.", "code": "public interface SoapBody extends SoapElement {\n\tSoapFault addClientOrSenderFault(String faultStringOrReason, Locale locale); // Adds a Client/Sender fault to the body.\n\tSoapFault addMustUnderstandFault(String faultStringOrReason, Locale locale); // Adds a MustUnderstand fault to the body.\n\tSoapFault addServerOrReceiverFault(String faultStringOrReason, Locale locale); // Adds a Server/Receiver fault to the body.\n\tSoapFault addVersionMismatchFault(String faultStringOrReason, Locale locale); // Adds a VersionMismatch fault to the body.\n\tSoapFault getFault(); // Returns the SoapFault of this body.\n\tResult getPayloadResult(); // Returns a Result that represents the contents of the body.\n\tSource getPayloadSource(); // Returns a Source that represents the contents of the body.\n\tboolean hasFault(); // Indicates whether this body has a SoapFault.\n}"}
{"index": 18147, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Wraps a binary stream to also provide the length which is needed when binding.", "code": "Interface BinaryStream {\n\tbyte[] getBytes(); // Access to the bytes.\n\tjava.io.InputStream getInputStream(); // Retrieve the input stream.\n\tlong getLength(); // Retrieve the length of the input stream\n\tvoid release(); // Release any underlying resources.\n}"}
{"index": 13089, "repo": "spring-aop-6.0.11", "des": "Extension of the AOP Alliance MethodInvocation interface, allowing access to the proxy that the method invocation was made through.", "code": "public interface ProxyMethodInvocation extends MethodInvocation {\n\tObject getProxy(); // Return the proxy that this method invocation was made through.\n\tObject getUserAttribute(String key); // Return the value of the specified user attribute.\n\tMethodInvocation invocableClone(); // Create a clone of this object.\n\tMethodInvocation invocableClone(Object... arguments); // Create a clone of this object.\n\tvoid setArguments(Object... arguments); // Set the arguments to be used on subsequent invocations in the any advice in this chain.\n\tvoid setUserAttribute(String key, Object value); // Add the specified user attribute with the given value to this invocation.\n}"}
{"index": 17800, "repo": "spring-web-6.0.11", "des": "Abstract base class for HttpMessageConverter implementations that defer to Kotlin string serializers.", "code": "public abstract class KotlinSerializationStringHttpMessageConverter<T extends kotlinx.serialization.StringFormat> extends AbstractKotlinSerializationHttpMessageConverter<T> {\n\tprotected Object readInternal(kotlinx.serialization.KSerializer<Object> serializer, T format, HttpInputMessage inputMessage); // Reads the given input message with the given serializer and format.\n\tprotected void writeInternal(Object object, kotlinx.serialization.KSerializer<Object> serializer, T format, HttpOutputMessage outputMessage); // Write the given object to the output message with the given serializer and format.\n}"}
{"index": 17220, "repo": "spring-boot-maven-plugin-3.1.1", "des": "Run an application in place using the test runtime classpath.", "code": "@Mojo(name=\"test-run\", requiresProject=true, defaultPhase=VALIDATE, requiresDependencyResolution=TEST) @Execute(phase=TEST_COMPILE) public class TestRunMojo extends AbstractRunMojo {\n\tprotected List<File> getClassesDirectories(); // Returns the directories that contain the application's classes and resources.\n\tprotected boolean isUseTestClasspath();\n\tprotected org.springframework.boot.maven.RunArguments resolveJvmArguments(); // Resolve the JVM arguments to use.\n\tprotected void run(org.springframework.boot.maven.JavaProcessExecutor processExecutor, File workingDirectory, List<String> args, Map<String,String> environmentVariables); // Run the application.\n}"}
{"index": 16293, "repo": "spring-r2dbc-6.0.11", "des": "Contract for specifying an SQL call along with options leading to the execution.", "code": "public static interface DatabaseClient.GenericExecuteSpec {\n\tDatabaseClient.GenericExecuteSpec bind(int index, Object value); // Bind a non-null value to a parameter identified by its index.\n\tDatabaseClient.GenericExecuteSpec bind(String name, Object value); // Bind a non-null value to a parameter identified by its name.\n\tDatabaseClient.GenericExecuteSpec bindNull(int index, Class<?> type); // Bind a null value to a parameter identified by its index.\n\tDatabaseClient.GenericExecuteSpec bindNull(String name, Class<?> type); // Bind a null value to a parameter identified by its name.\n\tFetchSpec<Map<String,Object>> fetch(); // Perform the SQL call and retrieve the result by entering the execution stage.\n\tdefault DatabaseClient.GenericExecuteSpec filter(Function<? super Statement,? extends Statement> filterFunction); // Add the given filter to the end of the filter chain.\n\tDatabaseClient.GenericExecuteSpec filter(StatementFilterFunction filter); // Add the given filter to the end of the filter chain.\n\t<R> reactor.core.publisher.Flux<R> flatMap(Function<Result,Publisher<R>> mappingFunction); // Perform the SQL call and apply function to the Result.\n\t<R> RowsFetchSpec<R> map(BiFunction<Row,RowMetadata,R> mappingFunction); // Configure a result mapping function and enter the execution stage.\n\t<R> RowsFetchSpec<R> map(Function<? super Readable,R> mappingFunction); // Configure a result mapping function and enter the execution stage.\n\treactor.core.publisher.Mono<Void> then(); // Perform the SQL call and return a Mono that completes without result on statement completion.\n}"}
{"index": 14817, "repo": "spring-data-commons-3.1.2", "des": "Provides a way to access a centrally defined potentially shared EvaluationContext.", "code": "public interface ReactiveEvaluationContextProvider extends EvaluationContextProvider {\n\treactor.core.publisher.Mono<? extends EvaluationContext> getEvaluationContextLater(Object rootObject); // Return a EvaluationContext built using the given parameter values.\n\tdefault reactor.core.publisher.Mono<? extends EvaluationContext> getEvaluationContextLater(Object rootObject, ExpressionDependencies dependencies); // Return a tailored EvaluationContext built using the given parameter values and considering expression dependencies.\n}"}
{"index": 12349, "repo": "jena-core-4.9.0", "des": "This interface represents the Simple Type Definition schema component.", "code": "public interface XSSimpleTypeDefinition extends XSTypeDefinition {\n\tXSObjectList getAnnotations(); // A sequence of [annotations] or an empty XSObjectList.\n\tboolean getBounded(); // Fundamental Facet: bounded.\n\tshort getBuiltInKind(); // Returns the closest built-in type category this type represents or derived from.\n\tshort getDefinedFacets(); // [facets]: all facets defined on this type.\n\tXSObject getFacet(int facetType); // A constraining facet object.\n\tXSObjectList getFacets(); // A list of constraining facets if it exists, otherwise an empty XSObjectList.\n\tboolean getFinite(); // Fundamental Facet: cardinality.\n\tshort getFixedFacets(); // [facets]: all defined facets for this type which are fixed.\n\tXSSimpleTypeDefinition getItemType(); // If variety is list the item type definition (an atomic or union simple type definition) is available, otherwise null.\n\tStringList getLexicalEnumeration(); // A list of enumeration values if it exists, otherwise an empty StringList.\n\tString getLexicalFacetValue(short facetName); // Convenience method.\n\tStringList getLexicalPattern(); // A list of pattern values if it exists, otherwise an empty StringList.\n\tXSObjectList getMemberTypes(); // If variety is union the list of member type definitions (a non-empty sequence of simple type definitions) is available, otherwise an empty XSObjectList.\n\tXSObjectList getMultiValueFacets(); // A list of enumeration and pattern constraining facets if it exists, otherwise an empty XSObjectList.\n\tboolean getNumeric(); // Fundamental Facet: numeric.\n\tshort getOrdered(); // Fundamental Facet: ordered.\n\tXSSimpleTypeDefinition getPrimitiveType(); // If variety is atomic the primitive type definition (a built-in primitive datatype definition or the simple ur-type definition) is available, otherwise null.\n\tshort getVariety(); // [variety]: one of {atomic, list, union} or absent.\n\tboolean isDefinedFacet(short facetName); // Convenience method.\n\tboolean isFixedFacet(short facetName); // Convenience method.\n}"}
{"index": 12863, "repo": "spring-data-mongodb-4.1.2", "des": "Gateway to $function and $accumulator aggregation operations.", "code": "public class ScriptOperators extends Object {\n\tstatic ScriptOperators.Accumulator.AccumulatorInitBuilder accumulatorBuilder(); // Create a custom $accumulator operator in Javascript.\n\tstatic ScriptOperators.Function function(String body); // Create a custom aggregation $function in JavaScript.\n}"}
{"index": 4628, "repo": "commons-vfs2-2.9.0", "des": "A VFS FileSystem that interacts with HDFS.", "code": "Class HdfsFileSystem {\n\tprotected void addCapabilities(Collection<Capability> capabilities); // Adds the capabilities of this file system.\n\tvoid close(); // Closes this component.\n\tprotected FileObject createFile(AbstractFileName name); // Creates a file object.\n\tFileObject resolveFile(FileName name); // Resolve FileName into FileObject.\n}"}
{"index": 17896, "repo": "spring-web-6.0.11", "des": "Documented KeyValues for the HTTP server observations for reactive web applications.", "code": "public enum ServerHttpObservationDocumentation extends Enum<ServerHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\tstatic ServerHttpObservationDocumentation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ServerHttpObservationDocumentation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 16692, "repo": "spring-beans-6.0.11", "des": "Context that gets passed along a bean definition reading process, encapsulating all relevant configuration as well as state.", "code": "public class ReaderContext extends Object {\n\tvoid error(String message, Object source); // Raise a regular error.\n\tvoid error(String message, Object source, Throwable cause); // Raise a regular error.\n\tvoid error(String message, Object source, ParseState parseState); // Raise a regular error.\n\tvoid error(String message, Object source, ParseState parseState, Throwable cause); // Raise a regular error.\n\tObject extractSource(Object sourceCandidate); // Call the source extractor for the given source object.\n\tvoid fatal(String message, Object source); // Raise a fatal error.\n\tvoid fatal(String message, Object source, Throwable cause); // Raise a fatal error.\n\tvoid fatal(String message, Object source, ParseState parseState); // Raise a fatal error.\n\tvoid fatal(String message, Object source, ParseState parseState, Throwable cause); // Raise a fatal error.\n\tvoid fireAliasRegistered(String beanName, String alias, Object source); // Fire an alias-registered event.\n\tvoid fireComponentRegistered(ComponentDefinition componentDefinition); // Fire a component-registered event.\n\tvoid fireDefaultsRegistered(DefaultsDefinition defaultsDefinition); // Fire a defaults-registered event.\n\tvoid fireImportProcessed(String importedResource, Object source); // Fire an import-processed event.\n\tvoid fireImportProcessed(String importedResource, org.springframework.core.io.Resource[] actualResources, Object source); // Fire an import-processed event.\n\tfinal org.springframework.core.io.Resource getResource();\n\tSourceExtractor getSourceExtractor(); // Return the source extractor in use.\n\tvoid warning(String message, Object source); // Raise a non-critical warning.\n\tvoid warning(String message, Object source, Throwable cause); // Raise a non-critical warning.\n\tvoid warning(String message, Object source, ParseState parseState); // Raise a non-critical warning.\n\tvoid warning(String message, Object source, ParseState parseState, Throwable cause); // Raise a non-critical warning.\n}"}
{"index": 1432, "repo": "pdfbox-3.0.0-beta1", "des": "Interface for external signature creation scenarios.", "code": "Interface ExternalSigningSupport {\n\tInputStream getContent(); // Get PDF content to be signed.\n\tvoid setSignature(byte[] signature); // Set CMS signature bytes to PDF.\n}"}
{"index": 7242, "repo": "calcite-core-1.34.0", "des": "An interface of an object identifier that represents a SqlIdentifier.", "code": "Interface SqlMoniker {\n\tList<String> getFullyQualifiedNames(); // Returns the array of component names.\n\tSqlMonikerType getType(); // Returns the type of object referred to by this moniker.\n\tString id();\n\tSqlIdentifier toIdentifier(); // Creates a SqlIdentifier containing the fully-qualified name.\n}"}
{"index": 4962, "repo": "commons-collections-3.2.2", "des": "The BoundedFifoBuffer is a very efficient implementation of Buffer that is of a fixed size.", "code": "Class BoundedFifoBuffer {\n\tboolean add(Object element); // Adds the given element to this buffer.\n\tvoid clear(); // Clears this buffer.\n\tObject get(); // Returns the least recently inserted element in this buffer.\n\tboolean isEmpty(); // Returns true if this buffer is empty; false otherwise.\n\tboolean isFull(); // Returns true if this collection is full and no new elements can be added.\n\tIterator iterator(); // Returns an iterator over this buffer's elements.\n\tint maxSize(); // Gets the maximum size of the collection (the bound).\n\tObject remove(); // Removes the least recently inserted element from this buffer.\n\tint size(); // Returns the number of elements stored in the buffer.\n}"}
{"index": 13302, "repo": "shiro-core-2.0.0-alpha-2", "des": "Superclass for almost all Authenticator implementations that performs the common work around authentication attempts.", "code": "public abstract class AbstractAuthenticator extends Object implements Authenticator, LogoutAware {\n\tfinal AuthenticationInfo authenticate(AuthenticationToken token); // Implementation of the Authenticator interface that functions in the following manner: Calls template doAuthenticate method for subclass execution of the actual authentication behavior. If an AuthenticationException is thrown during doAuthenticate, notify any registered AuthenticationListeners of the exception and then propagate the exception for the caller to handle. If no exception is thrown (indicating a successful login), notify any registered AuthenticationListeners of the successful attempt. Return the AuthenticationInfo\n\tprotected abstract AuthenticationInfo doAuthenticate(AuthenticationToken token); // Template design pattern hook for subclasses to implement specific authentication behavior.\n\tCollection<AuthenticationListener> getAuthenticationListeners(); // Returns the AuthenticationListeners that should be notified during authentication attempts.\n\tprotected void notifyFailure(AuthenticationToken token, AuthenticationException ae); // Notifies any registered AuthenticationListeners that authentication failed for the specified token which resulted in the specified ae exception.\n\tprotected void notifyLogout(PrincipalCollection principals); // Notifies any registered AuthenticationListeners that a Subject has logged-out.\n\tprotected void notifySuccess(AuthenticationToken token, AuthenticationInfo info); // Notifies any registered AuthenticationListeners that authentication was successful for the specified token which resulted in the specified info.\n\tvoid onLogout(PrincipalCollection principals); // This implementation merely calls notifyLogout to allow any registered listeners to react to the logout.\n\tvoid setAuthenticationListeners(Collection<AuthenticationListener> listeners); // Sets the AuthenticationListeners that should be notified during authentication attempts.\n}"}
{"index": 17984, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for EndpointAdapter implementations that support MethodEndpoints.", "code": "public abstract class AbstractMethodEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter {\n\tfinal void invoke(MessageContext messageContext, Object endpoint); // Delegates to invokeInternal(org.springframework.ws.context.MessageContext,MethodEndpoint).\n\tprotected abstract void invokeInternal(MessageContext messageContext, MethodEndpoint methodEndpoint); // Use the given method endpoint to handle the request.\n\tfinal boolean supports(Object endpoint); // Delegates to supportsInternal(org.springframework.ws.server.endpoint.MethodEndpoint).\n\tprotected abstract boolean supportsInternal(MethodEndpoint methodEndpoint); // Given a method endpoint, return whether or not this adapter can support it.\n}"}
{"index": 14586, "repo": "spring-security-web-6.1.2", "des": "Performs a logout by modifying the SecurityContextHolder.", "code": "public class SecurityContextLogoutHandler extends Object implements LogoutHandler {\n\tboolean isInvalidateHttpSession();\n\tvoid logout(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authentication); // Requires the request to be passed in.\n\tvoid setClearAuthentication(boolean clearAuthentication); // If true, removes the Authentication from the SecurityContext to prevent issues with concurrent requests.\n\tvoid setInvalidateHttpSession(boolean invalidateHttpSession); // Causes the HttpSession to be invalidated when this LogoutHandler is invoked.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextRepository(SecurityContextRepository securityContextRepository); // Sets the SecurityContextRepository to use.\n}"}
{"index": 2164, "repo": "hive-exec-4.0.0-alpha-2", "des": "Represents the join result between two tables.", "code": "Enum JoinUtil.JoinResult {\n\tstatic JoinUtil.JoinResult valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic JoinUtil.JoinResult[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 134, "repo": "commons-collections4-4.4", "des": "Adapter to make Enumeration instances appear to be Iterator instances.", "code": "Class EnumerationIterator<E> {\n\tEnumeration<? extends E> getEnumeration(); // Returns the underlying enumeration.\n\tboolean hasNext(); // Returns true if the underlying enumeration has more elements.\n\tE next(); // Returns the next object from the enumeration.\n\tvoid remove(); // Removes the last retrieved element if a collection is attached.\n\tvoid setEnumeration(Enumeration<? extends E> enumeration); // Sets the underlying enumeration.\n}"}
{"index": 8452, "repo": "hadoop-aws-3.3.6", "des": "The session token DT binding: creates an AWS session token for the DT, extracts and serves it up afterwards.", "code": "Class SessionTokenBinding {\n\tprotected String bindingName(); // Get the role of this token; subclasses should override this for better logging.\n\tAWSCredentialProviderList bindToTokenIdentifier(AbstractS3ATokenIdentifier retrievedIdentifier); // Sets the field tokenIdentifier to the extracted/cast session token identifier, and expirationDateTime to any expiration passed in.\n\tSessionTokenIdentifier createEmptyIdentifier(); // Create a new subclass of AbstractS3ATokenIdentifier.\n\tSessionTokenIdentifier createTokenIdentifier(Optional<RoleModel.Policy> policy, EncryptionSecrets encryptionSecrets, org.apache.hadoop.io.Text renewer); // Create a token identifier with all the information needed to be included in a delegation token.\n\tAWSCredentialProviderList deployUnbonded(); // Return an unbonded provider chain.\n\tString getDescription(); // Return a description.\n\tlong getDuration(); // Duration of sessions.\n\tprotected Optional<OffsetDateTime> getExpirationDateTime(); // Expiration date time as passed in from source.\n\tprotected Invoker getInvoker(); // Get the invoker for STS calls.\n\tprotected Optional<SessionTokenIdentifier> getTokenIdentifier(); // Token identifier bound to.\n\tString getUserAgentField(); // UA field contains the UUID of the token if present.\n\tprotected Optional<STSClientFactory.STSClient> prepareSTSClient(); // Get the client to AWS STS.\n\tprotected void serviceStart(); // Service start will read in all configuration options then build that client.\n\tprotected void serviceStop();\n\tprotected void setExpirationDateTime(Optional<OffsetDateTime> expirationDateTime);\n\tprotected void setTokenIdentifier(Optional<SessionTokenIdentifier> tokenIdentifier);\n}"}
{"index": 494, "repo": "ignite-core-2.15.0", "des": "Represents base class for atomic data structures.", "code": "Class AtomicDataStructureProxy<V extends AtomicDataStructureValue> {\n\tprotected void checkRemoved(); // Check removed status.\n\tprotected IgniteException checkRemovedAfterFail(Exception cause); // Checks removed status after fail.\n\tprotected void invalidateLocalState(); // Invalidates local state.\n\tGridCacheInternalKey key();\n\tString name();\n\tvoid needCheckNotRemoved();\n\tvoid onActivate(GridKernalContext kctx); // Called when cluster performing activation.\n\tvoid onDeActivate(GridKernalContext kctx); // Called when cluster performing deactivation.\n\tboolean onRemoved(); // Set status of data structure as removed.\n\tboolean removed();\n\tvoid restart(IgniteInternalCache cache); // Would return this object work to normal.\n\tvoid suspend(); // Would suspend calls for this object.\n}"}
{"index": 8603, "repo": "commons-rdf-api-0.5.0", "des": "A \"graph-like\" interface that contains TripleLike statements.", "code": "Interface GraphLike<T extends TripleLike> {\n\tvoid add(T statement); // Add a statement.\n\tvoid clear(); // Remove all statements.\n\tboolean contains(T statement); // Check if statement is contained.\n\tIterable<T> iterate(); // Iterate over contained statements.\n\tvoid remove(T statement); // Add a statement.\n\tlong size(); // Number of statements.\n\tStream<? extends T> stream(); // Return a Stream of contained statements.\n}"}
{"index": 9209, "repo": "fontbox-3.0.0-beta1", "des": "This class represents and renders a Type 1 CharString.", "code": "Class Type1CharString {\n\tprotected void addCommand(List<Number> numbers, CharStringCommand command); // Add a command to the type1 sequence.\n\tRectangle2D getBounds(); // Returns the bounds of the renderer path.\n\tprotected Object getLastSequenceEntry(); // Returns the last entry of the underlying type1 sequence.\n\tString getName();\n\tGeneralPath getPath(); // Returns the path of the character.\n\tint getWidth(); // Returns the advance width of the glyph.\n\tprotected boolean isSequenceEmpty(); // Indicates if the underlying type1 sequence is empty.\n}"}
{"index": 3755, "repo": "kafka-streams-3.5.0", "des": "The window specification for fixed size windows that is used to define window boundaries and grace period.", "code": "Class Windows<W extends Window> {\n\tabstract long gracePeriodMs(); // Return the window grace period (the time to admit out-of-order events after the end of the window.) Delay is defined as (stream_time - record_timestamp).\n\tabstract long size(); // Return the size of the specified windows in milliseconds.\n\tabstract Map<Long,W> windowsFor(long timestamp); // Create all windows that contain the provided timestamp, indexed by non-negative window start timestamps.\n}"}
{"index": 1096, "repo": "ignite-core-2.15.0", "des": "Histogram to show count of items for each time interval with limited set of intervals.", "code": "Class PeriodicHistogramMetricImpl {\n\tlong[] bounds();\n\tvoid bounds(long[] bounds); // Sets bounds for this histogram.\n\tint bucketsCount(); // Gets buckets count.\n\tlong bucketsInterval(); // Gets buckets interval.\n\tvoid decrement(long ts); // Decrement count of items in interval by timestamp.\n\tIgniteBiTuple<long[],long[]> histogram(); // Gets histogram.\n\tvoid increment(long ts); // Increment count of items in interval by timestamp.\n\tvoid reinit(long bucketsInterval, int bucketsCnt);\n\tvoid reset(long itemsCnt);\n\tlong startTs(); // Gets start timestamp.\n\tClass<long[]> type();\n\tlong[] value();\n}"}
{"index": 18715, "repo": "opennlp-tools-2.2.0", "des": "Note: Do not use this class, internal use only!", "code": "Class ADPOSSampleStream {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tPOSSample read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 4738, "repo": "hadoop-common-3.3.4", "des": "Interface filesystems MAY implement to offer a batched list.", "code": "Interface BatchListingOperations {\n\tRemoteIterator<PartialListing<LocatedFileStatus>> batchedListLocatedStatusIterator(List<Path> paths); // Batched listing API that returns PartialListings for the passed Paths.\n\tRemoteIterator<PartialListing<FileStatus>> batchedListStatusIterator(List<Path> paths); // Batched listing API that returns PartialListings for the passed Paths.\n}"}
{"index": 12484, "repo": "spring-jdbc-6.0.11", "des": "Abstract ResultSetExtractor implementation that assumes streaming of LOB data.", "code": "public abstract class AbstractLobStreamingResultSetExtractor<T> extends Object implements ResultSetExtractor<T> {\n\tfinal T extractData(ResultSet rs); // Delegates to handleNoRowFound, handleMultipleRowsFound and streamData, according to the ResultSet state.\n\tprotected void handleMultipleRowsFound(); // Handle the case where the ResultSet contains multiple rows.\n\tprotected void handleNoRowFound(); // Handle the case where the ResultSet does not contain a row.\n\tprotected abstract void streamData(ResultSet rs); // Stream LOB content from the given ResultSet to some OutputStream.\n}"}
{"index": 5905, "repo": "hadoop-yarn-server-common-3.3.6", "des": "A set of resource requests of the same scheduler key ResourceRequestSetKey.", "code": "Class ResourceRequestSet {\n\tvoid addAndOverrideRR(org.apache.hadoop.yarn.api.records.ResourceRequest ask); // Add a ResourceRequest into the requestSet.\n\tvoid addAndOverrideRRSet(ResourceRequestSet requestSet); // Merge a requestSet into this one.\n\tvoid cleanupZeroNonAnyRR(); // Remove all non-Any ResourceRequests from the set.\n\tMap<String,org.apache.hadoop.yarn.api.records.ResourceRequest> getAsks();\n\tint getNumContainers();\n\tCollection<org.apache.hadoop.yarn.api.records.ResourceRequest> getRRs();\n\tvoid setNumContainers(int newValue); // Force set the # of containers to ask for this requestSet to a given value.\n}"}
{"index": 1809, "repo": "kafka-clients-3.5.0", "des": "Optional callback used for SCRAM mechanisms if any extensions need to be set in the SASL/SCRAM exchange.", "code": "Class ScramExtensionsCallback {\n\tMap<String,String> extensions(); // Returns map of the extension names and values that are sent by the client to the server in the initial client SCRAM authentication message.\n\tvoid extensions(Map<String,String> extensions); // Sets the SCRAM extensions on this callback.\n}"}
{"index": 2439, "repo": "calcite-linq4j-1.34.0", "des": "Simple enumerator that just delegates all calls to the passed enumerator.", "code": "Class DelegatingEnumerator<T> {\n\tvoid close(); // Closes this enumerable and releases resources.\n\tT current(); // Gets the current element in the collection.\n\tboolean moveNext(); // Advances the enumerator to the next element of the collection.\n\tvoid reset(); // Sets the enumerator to its initial position, which is before the first element in the collection.\n}"}
{"index": 6636, "repo": "ignite-indexing-2.15.0", "des": "DML statement execution plan type - MERGE/INSERT from rows or subquery, or UPDATE/DELETE from subquery or literals/params based.", "code": "Enum UpdateMode {\n\tstatic UpdateMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic UpdateMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9012, "repo": "hbase-server-3.0.0-alpha-4", "des": "The Class NamespaceAuditor performs checks to ensure operations like table creation and region splitting preserve namespace quota.", "code": "Class NamespaceAuditor {\n\tvoid addNamespace(NamespaceDescriptor ns);\n\tvoid checkQuotaToCreateTable(TableName tName, int regions); // Check quota to create table.\n\tvoid checkQuotaToSplitRegion(RegionInfo hri);\n\tvoid checkQuotaToUpdateRegion(TableName tName, int regions); // Check and update region count quota for an existing table.\n\tvoid deleteNamespace(String namespace);\n\tint getRegionCountOfTable(TableName tName); // Get region count for table\n\torg.apache.hadoop.hbase.namespace.NamespaceTableAndRegionInfo getState(String namespace);\n\tboolean isInitialized(); // Checks if namespace auditor is initialized.\n\tvoid removeFromNamespaceUsage(TableName tableName);\n\tvoid removeRegionFromNamespaceUsage(RegionInfo hri);\n\tvoid start();\n\tvoid updateQuotaForRegionMerge(RegionInfo mergedRegion);\n}"}
{"index": 9057, "repo": "hbase-server-3.0.0-alpha-4", "des": "This manager class handles flushing of the regions for table on a HRegionServer.", "code": "Class RegionServerFlushTableProcedureManager {\n\tSubprocedure buildSubprocedure(String table, String family); // If in a running state, creates the specified subprocedure to flush table regions.\n\tString getProcedureSignature(); // Return the unique signature of the procedure.\n\tvoid initialize(RegionServerServices rss); // Initialize this region server flush procedure manager Uses a zookeeper based member controller.\n\tvoid start(); // Start accepting flush table requests.\n\tvoid stop(boolean force); // Close this and all running tasks\n}"}
{"index": 13590, "repo": "spring-messaging-6.0.11", "des": "Base class for STOMP client implementations.", "code": "public abstract class StompClientSupport extends Object {\n\tprotected ConnectionHandlingStompSession createSession(StompHeaders connectHeaders, StompSessionHandler handler); // Factory method for create and configure a new session.\n\tlong[] getDefaultHeartbeat(); // Return the configured default heart-beat value (never null).\n\tMessageConverter getMessageConverter(); // Return the configured MessageConverter.\n\tlong getReceiptTimeLimit(); // Return the configured receipt time limit.\n\torg.springframework.scheduling.TaskScheduler getTaskScheduler(); // The configured TaskScheduler.\n\tboolean isDefaultHeartbeatEnabled(); // Determine whether heartbeats are enabled.\n\tprotected StompHeaders processConnectHeaders(StompHeaders connectHeaders); // Further initialize the StompHeaders, for example setting the heart-beat header if necessary.\n\tvoid setDefaultHeartbeat(long[] heartbeat); // Configure the default value for the \"heart-beat\" header of the STOMP CONNECT frame.\n\tvoid setMessageConverter(MessageConverter messageConverter); // Set the MessageConverter to use to convert the payload of incoming and outgoing messages to and from byte[] based on object type and the \"content-type\" header.\n\tvoid setReceiptTimeLimit(long receiptTimeLimit); // Configure the number of milliseconds before a receipt is considered expired.\n\tvoid setTaskScheduler(org.springframework.scheduling.TaskScheduler taskScheduler); // Configure a scheduler to use for heartbeats and for receipt tracking.\n}"}
{"index": 5786, "repo": "hive-service-4.0.0-alpha-2", "des": "Static utility methods related to LDAP authentication module.", "code": "Class LdapUtils {\n\tstatic List<String> createCandidatePrincipals(HiveConf conf, String user); // Creates a list of principals to be used for user authentication.\n\tstatic String extractBaseDn(String dn); // Extracts a base DN from the provided distinguished name.\n\tstatic String extractFirstRdn(String dn); // Extracts the first Relative Distinguished Name (RDN).\n\tstatic String extractUserName(String userDn); // Extracts username from user DN.\n\tstatic String getShortName(String rdn); // Gets value part of the first attribute in the provided RDN.\n\tstatic boolean hasDomain(String userName); // Check for a domain part in the provided username.\n\tstatic boolean isDn(String name); // Detects DN names.\n\tstatic List<String> parseDnPatterns(HiveConf conf, HiveConf.ConfVars var); // Reads and parses DN patterns from Hive configuration.\n\tstatic List<String> patternsToBaseDns(Collection<String> patterns); // Converts a collection of Distinguished Name patterns to a collection of base DNs.\n}"}
{"index": 1477, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a Sound action that can be executed in a PDF document.", "code": "Class PDActionSound {\n\tboolean getMix(); // Gets the flag specifying whether to mix this sound with any other sound already playing.\n\tboolean getRepeat(); // Gets whether to repeat the sound indefinitely.\n\tCOSStream getSound(); // Gets the sound object.\n\tboolean getSynchronous(); // Gets the synchronous flag.\n\tfloat getVolume(); // Sets the volume.\n\tvoid setMix(boolean mix); // The flag specifying whether to mix this sound with any other sound already playing.\n\tvoid setRepeat(boolean repeat); // A flag specifying whether to repeat the sound indefinitely.\n\tvoid setSound(COSStream sound); // Sets the sound object.\n\tvoid setSynchronous(boolean synchronous); // A flag specifying whether to play the sound synchronously or asynchronously.\n\tvoid setVolume(float volume);\n}"}
{"index": 18431, "repo": "opencms-core-15.0", "des": "Implementation of the I_CmsFormDataItem which delegates its methods to a FileItem from Apache Commons Upload.", "code": "Class CmsUgcDataItem {\n\tbyte[] getData(); // Gets the data from the field as a byte array.\n\tjava.lang.String getFieldName(); // Gets the field name.\n\tjava.lang.String getFileName(); // Gets the file name, if this is a file upload field.\n}"}
{"index": 1328, "repo": "nutch-2.4", "des": "Authentication enum which holds authentication types for NutchServer REST API.", "code": "Enum AuthenticationTypeEnum {\n\tstatic AuthenticationTypeEnum valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic AuthenticationTypeEnum[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3695, "repo": "kafka-streams-3.5.0", "des": "This enumeration type captures the various top-level reasons that a particular partition of a store would fail to execute a query.", "code": "Enum FailureReason {\n\tstatic FailureReason valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FailureReason[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12100, "repo": "jena-core-4.9.0", "des": "Default implementation of the InfModel interface which simply wraps up an InfGraph.", "code": "public class InfModelImpl extends ModelCom implements InfModel {\n\tModel getDeductionsModel(); // Returns a derivations model.\n\tIterator<Derivation> getDerivation(Statement statement); // Return the derivation of the given statement (which should be the result of some previous list operation).\n\tInfGraph getInfGraph(); // Return the underlying inference graph for this model.\n\tModel getRawModel(); // Return the raw RDF model being processed (i.e.\n\tReasoner getReasoner(); // Return the Reasoner which is being used to answer queries to this graph.\n\tStmtIterator listStatements(Resource subject, Property predicate, RDFNode object, Model posit); // Find all the statements matching a pattern.\n\tvoid prepare(); // Perform any initial processing and caching.\n\tvoid rebind(); // Cause the inference model to reconsult the underlying data to take into account changes.\n\tvoid reset(); // Reset any internal caches.\n\tvoid setDerivationLogging(boolean logOn); // Switch on/off drivation logging.\n\tValidityReport validate(); // Test the consistency of the underlying data.\n}"}
{"index": 7712, "repo": "cassandra-all-4.1.2", "des": "In-memory representation of a Partition.", "code": "Interface Partition {\n\tRegularAndStaticColumns columns();\n\tRow getRow(Clustering<?> clustering); // Returns the row corresponding to the provided clustering, or null if there is not such row.\n\tboolean hasRows(); // Whether the partition object has rows.\n\tboolean isEmpty(); // Whether the partition object has no informations at all, including any deletion informations.\n\tTableMetadata metadata();\n\tDecoratedKey partitionKey();\n\tDeletionTime partitionLevelDeletion();\n\tEncodingStats stats();\n\tUnfilteredRowIterator unfilteredIterator(); // Returns an UnfilteredRowIterator over all the rows/RT contained by this partition.\n\tUnfilteredRowIterator unfilteredIterator(ColumnFilter columns, java.util.NavigableSet<Clustering<?>> clusteringsInQueryOrder, boolean reversed); // Returns an UnfilteredRowIterator over the rows/RT contained by this partition selected by the provided clusterings.\n\tUnfilteredRowIterator unfilteredIterator(ColumnFilter columns, Slices slices, boolean reversed); // Returns an UnfilteredRowIterator over the rows/RT contained by this partition selected by the provided slices.\n}"}
{"index": 9101, "repo": "hbase-server-3.0.0-alpha-4", "des": "Keeps KVs that are scoped other than local.", "code": "Class ScopeWALEntryFilter {\n\tWAL.Entry filter(WAL.Entry entry); // Applies the filter, possibly returning a different Entry instance.\n\tCell filterCell(WAL.Entry entry, Cell cell); // Applies the filter, possibly returning a different Cell instance.\n}"}
{"index": 9286, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Provides mechanisms to get various resource handlers - cpu, memory, network, disk etc.", "code": "Class ResourceHandlerModule {\n\tstatic CGroupsHandler getCGroupsHandler(); // Returns a (possibly null) reference to a cGroupsHandler.\n\tstatic String getCgroupsRelativeRoot(); // Returns relative root for cgroups.\n\tstatic ResourceHandlerChain getConfiguredResourceHandlerChain(org.apache.hadoop.conf.Configuration conf, Context nmContext);\n\tstatic CpuResourceHandler getCpuResourceHandler();\n\tstatic DiskResourceHandler getDiskResourceHandler();\n\tstatic MemoryResourceHandler getMemoryResourceHandler();\n\tstatic NetworkPacketTaggingHandlerImpl getNetworkResourceHandler();\n\tstatic ResourceHandler getNetworkTaggingHandler(org.apache.hadoop.conf.Configuration conf);\n\tstatic DiskResourceHandler initDiskResourceHandler(org.apache.hadoop.conf.Configuration conf);\n\tstatic MemoryResourceHandler initMemoryResourceHandler(org.apache.hadoop.conf.Configuration conf);\n\tstatic ResourceHandler initNetworkResourceHandler(org.apache.hadoop.conf.Configuration conf);\n\tstatic OutboundBandwidthResourceHandler initOutboundBandwidthResourceHandler(org.apache.hadoop.conf.Configuration conf);\n\tstatic Map<String,Set<String>> parseConfiguredCGroupPath(String cgroupMountPath); // If a cgroup mount directory is specified, it returns cgroup directories with valid names.\n}"}
{"index": 1365, "repo": "nutch-2.4", "des": "A nutch-plugin is an container for a set of custom logic that provide extensions to the nutch core functionality or another plugin that provides an API for extending.", "code": "Class Plugin {\n\tprotected void finalize();\n\tPluginDescriptor getDescriptor(); // Returns the plugin descriptor\n\tvoid shutDown(); // Shutdown the plugin.\n\tvoid startUp(); // Will be invoked until plugin start up.\n}"}
{"index": 9961, "repo": "iceberg-api-1.3.0", "des": "A Catalog API for view create, drop, and load operations.", "code": "Interface ViewCatalog {\n\tViewBuilder buildView(TableIdentifier identifier); // Instantiate a builder to create or replace a SQL view.\n\tboolean dropView(TableIdentifier identifier); // Drop a view.\n\tdefault void initialize(java.lang.String name, java.util.Map<java.lang.String,java.lang.String> properties); // Initialize a view catalog given a custom name and a map of catalog properties.\n\tdefault void invalidateView(TableIdentifier identifier); // Invalidate cached view metadata from current catalog.\n\tjava.util.List<TableIdentifier> listViews(Namespace namespace); // Return all the identifiers under this namespace.\n\tView loadView(TableIdentifier identifier); // Load a view.\n\tjava.lang.String name(); // Return the name for this catalog.\n\tvoid renameView(TableIdentifier from, TableIdentifier to); // Rename a view.\n\tdefault boolean viewExists(TableIdentifier identifier); // Check whether view exists.\n}"}
{"index": 2822, "repo": "tika-parsers-1.28.5", "des": "Specifies a revision manifest object group references, each followed by object group extended GUIDs.", "code": "Class RevisionManifestObjectGroupReferences {\n\tprotected void deserializeItemsFromByteArray(byte[] byteArray, AtomicInteger currentIndex, int lengthOfItems); // Used to de-serialize the element.\n\tprotected int serializeItemsToByteList(List<Byte> byteList); // Used to convert the element into a byte List.\n}"}
{"index": 3473, "repo": "mahout-mr-0.13.0", "des": "Implementation of City Block distance (also known as Manhattan distance) - the absolute value of the difference of each direction is summed.", "code": "Class CityBlockSimilarity {\n\tdouble[] itemSimilarities(long itemID1, long[] itemID2s); // A bulk-get version of ItemSimilarity.itemSimilarity(long, long).\n\tdouble itemSimilarity(long itemID1, long itemID2); // Returns the degree of similarity, of two items, based on the preferences that users have expressed for the items.\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n\tvoid setPreferenceInferrer(PreferenceInferrer inferrer); // Attaches a PreferenceInferrer to the UserSimilarity implementation.\n\tdouble userSimilarity(long userID1, long userID2); // Returns the degree of similarity, of two users, based on the their preferences.\n}"}
{"index": 14443, "repo": "wicket-core-10.0.0-M1", "des": "A simple \"transparent\" markup container.", "code": "public class TransparentWebMarkupContainer extends WebMarkupContainer implements IComponentResolver {\n\tprotected Component findChildComponent(ComponentTag tag); // Search the child component for the given tag.\n\tvoid internalRenderHead(HtmlHeaderContainer container); // THIS METHOD IS NOT PART OF THE WICKET PUBLIC API.\n\tComponent resolve(MarkupContainer container, MarkupStream markupStream, ComponentTag tag); // Try to resolve a component.\n}"}
{"index": 11731, "repo": "spring-data-neo4j-7.1.2", "des": "Contract for a runnable query that can be either run returning its result, run without results or be parameterized.", "code": "public static interface ReactiveNeo4jClient.RunnableSpec extends Neo4jClient.BindSpec<ReactiveNeo4jClient.RunnableSpec> {\n\tReactiveNeo4jClient.RecordFetchSpec<Map<String,Object>> fetch(); // Fetch all records mapped into generic maps\n\t<T> ReactiveNeo4jClient.MappingSpec<T> fetchAs(Class<T> targetClass); // Create a mapping for each record return to a specific type.\n\treactor.core.publisher.Mono<org.neo4j.driver.summary.ResultSummary> run(); // Execute the query and discard the results.\n}"}
{"index": 18012, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the SmartEndpointInterceptor interface that delegates to a delegate EndpointInterceptor.", "code": "public class DelegatingSmartEndpointInterceptor extends Object implements SmartEndpointInterceptor {\n\tvoid afterCompletion(MessageContext messageContext, Object endpoint, Exception ex); // Callback after completion of request and response (fault) processing.\n\tEndpointInterceptor getDelegate(); // Returns the delegate.\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Processes the outgoing response fault.\n\tboolean handleRequest(MessageContext messageContext, Object endpoint); // Processes the incoming request message.\n\tboolean handleResponse(MessageContext messageContext, Object endpoint); // Processes the outgoing response message.\n\tboolean shouldIntercept(MessageContext messageContext, Object endpoint); // Indicates whether this interceptor should intercept the given message context.\n\tprotected boolean shouldIntercept(WebServiceMessage request, Object endpoint); // Indicates whether this interceptor should intercept the given request message.\n}"}
{"index": 3643, "repo": "hive-serde-4.0.0-alpha-2", "des": "Provide a general grouping for each primitive data type.", "code": "Enum PrimitiveObjectInspectorUtils.PrimitiveGrouping {\n\tstatic PrimitiveObjectInspectorUtils.PrimitiveGrouping valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PrimitiveObjectInspectorUtils.PrimitiveGrouping[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8830, "repo": "hbase-server-3.0.0-alpha-4", "des": "Reads special method annotations and table names to figure a priority for use by QoS facility in ipc; e.", "code": "Class AnnotationReadingPriorityFunction<T extends HBaseRpcServicesBase<?>> {\n\tprotected int getAnnotatedPriority(org.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.RequestHeader header); // See if the method has an annotation.\n\tprotected abstract int getBasePriority(org.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.RequestHeader header, org.apache.hbase.thirdparty.com.google.protobuf.Message param); // Get the priority for a given request from the header and the param.\n\tint getPriority(org.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.RequestHeader header, org.apache.hbase.thirdparty.com.google.protobuf.Message param, User user); // Returns a 'priority' based on the request type.\n\tprotected abstract int normalizePriority(int priority);\n}"}
{"index": 1491, "repo": "pdfbox-3.0.0-beta1", "des": "An appearance dictionary specifying how the annotation shall be presented visually on the page.", "code": "Class PDAppearanceDictionary {\n\tCOSDictionary getCOSObject(); // Convert this standard java object to a COS object.\n\tPDAppearanceEntry getDownAppearance(); // This will return a list of appearances.\n\tPDAppearanceEntry getNormalAppearance(); // This will return a list of appearances.\n\tPDAppearanceEntry getRolloverAppearance(); // This will return a list of appearances.\n\tvoid setDownAppearance(PDAppearanceEntry entry); // This will set a list of appearances.\n\tvoid setDownAppearance(PDAppearanceStream ap); // This will set the down appearance when there is down appearance to be shown.\n\tvoid setNormalAppearance(PDAppearanceEntry entry); // This will set a list of appearances.\n\tvoid setNormalAppearance(PDAppearanceStream ap); // This will set the normal appearance when there is only one appearance to be shown.\n\tvoid setRolloverAppearance(PDAppearanceEntry entry); // This will set a list of appearances.\n\tvoid setRolloverAppearance(PDAppearanceStream ap); // This will set the rollover appearance when there is rollover appearance to be shown.\n}"}
{"index": 18210, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Defines a (contextual) set of values to use as defaults in the absence of related mapping information.", "code": "Interface MappingDefaults {\n\tboolean areCollectionsImplicitlyLazy(); // Identifies whether plural attributes are lazy by default if not specified in the mapping.\n\tboolean areEntitiesImplicitlyLazy(); // Identifies whether singular associations (many-to-one, one-to-one) are lazy by default if not specified in the mapping.\n\tAccessType getImplicitCacheAccessType(); // The cache access type to use if none is specified\n\tjava.lang.String getImplicitCascadeStyleName(); // Identifies the cascade style to apply to associations if none specified in the mapping.\n\tjava.lang.String getImplicitCatalogName(); // Identifies the database catalog name to use if none specified in the mapping.\n\tjava.lang.String getImplicitDiscriminatorColumnName(); // Identifies the column name to use for the discriminator column if none specified in the mapping.\n\tjava.lang.String getImplicitIdColumnName(); // Identifies the column name to use for the identifier column if none specified in the mapping.\n\tjava.lang.String getImplicitPackageName(); // Identifies the package name to use if none specified in the mapping.\n\tjava.lang.String getImplicitPropertyAccessorName(); // Identifies the default PropertyAccessStrategy name to use if none specified in the mapping.\n\tjava.lang.String getImplicitSchemaName(); // Identifies the database schema name to use if none specified in the mapping.\n\tjava.lang.String getImplicitTenantIdColumnName(); // Identifies the column name to use for the tenant identifier column if none is specified in the mapping.\n\tboolean isAutoImportEnabled(); // Is auto-importing of entity (short) names enabled?\n\tboolean shouldImplicitlyQuoteIdentifiers(); // Should all database identifiers encountered in this context be implicitly quoted? true indicates that all identifier encountered within this context should be quoted.\n}"}
{"index": 1950, "repo": "nifi-framework-api-1.22.0", "des": "Defines a mechanism by which FlowFiles can be move into external storage or memory so that they can be removed from the Java heap and vice-versa.", "code": "Interface FlowFileSwapManager {\n\tString changePartitionName(String swapLocation, String newPartitionName); // Updates the name of the partition that owns a given swap file\n\tString getQueueIdentifier(String swapLocation); // Returns the ID of the queue that the given swap file belongs to\n\tSet<String> getSwappedPartitionNames(FlowFileQueue queue); // Determines the names of each of the Partitions for which there are swap files for the given queue\n\tSwapSummary getSwapSummary(String swapLocation); // Parses the contents of the swap file at the given location and provides a SwapSummary that provides pertinent information about the information stored within the swap file\n\tvoid initialize(SwapManagerInitializationContext initializationContext); // Initializes the Swap Manager, providing a SwapManagerInitializationContext so that the Swap Manager has access to all of the components necessary to perform its functions\n\tSwapContents peek(String swapLocation, FlowFileQueue flowFileQueue); // Recovers the FlowFiles from the swap file that lives at the given location.\n\tvoid purge(); // Purge all known Swap Files without updating FlowFileRepository or Provenance Repository\n\tList<String> recoverSwapLocations(FlowFileQueue flowFileQueue, String partitionName); // Determines swap files that exist for the given FlowFileQueue\n\tSwapContents swapIn(String swapLocation, FlowFileQueue flowFileQueue); // Recovers the FlowFiles from the swap file that lives at the given location and belongs to the FlowFile Queue with the given identifier.\n\tString swapOut(List<FlowFileRecord> flowFiles, FlowFileQueue flowFileQueue, String partitionName); // Swaps out the given FlowFiles that belong to the queue with the given identifier.\n}"}
{"index": 8975, "repo": "hbase-server-3.0.0-alpha-4", "des": "Procedure to allow blessed clients and external admin tools to take our internal Schema locks used by the procedure framework isolating procedures doing creates/deletes etc.", "code": "Class LockProcedure {\n\tprotected boolean abort(MasterProcedureEnv env);\n\tprotected Procedure.LockState acquireLock(MasterProcedureEnv env);\n\tprotected void beforeReplay(MasterProcedureEnv env); // On recovery, re-execute from start to acquire the locks.\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected Procedure<MasterProcedureEnv>[] execute(MasterProcedureEnv env);\n\tString getDescription();\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tLockType getType();\n\tboolean holdLock(MasterProcedureEnv env);\n\tboolean isLocked();\n\tprotected void releaseLock(MasterProcedureEnv env);\n\tprotected void rollback(MasterProcedureEnv env);\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tprotected boolean setTimeoutFailure(MasterProcedureEnv env); // Re run the procedure after every timeout to write new WAL entries so we don't hold back old WALs.\n\tprotected void toStringClassDetails(StringBuilder builder);\n\tvoid unlock(MasterProcedureEnv env);\n\tvoid updateHeartBeat(); // Updates timeout deadline for the lock.\n}"}
{"index": 8751, "repo": "hadoop-yarn-common-3.3.6", "des": "Store implementation for Non Appendable File Store.", "code": "Class NonAppendableFSNodeLabelStore {\n\tvoid close();\n\tvoid recover(); // Recover labels and node to labels mappings from store, but if ignoreNodeToLabelsMappings is true then node to labels mappings should not be recovered.\n\tvoid removeClusterNodeLabels(Collection<String> labels); // Remove labels.\n\tvoid storeNewClusterNodeLabels(List<org.apache.hadoop.yarn.api.records.NodeLabel> labels); // Store new labels.\n\tvoid updateNodeToLabelsMappings(Map<org.apache.hadoop.yarn.api.records.NodeId,Set<String>> nodeToLabels); // Store node -> label.\n}"}
{"index": 15930, "repo": "spring-rabbit-3.0.6", "des": "A RabbitListenerEndpoint providing the method to invoke to process an incoming message for this endpoint.", "code": "public class MethodRabbitListenerEndpoint extends AbstractRabbitListenerEndpoint {\n\tprotected HandlerAdapter configureListenerAdapter(MessagingMessageListenerAdapter messageListener); // Create a HandlerAdapter for this listener adapter.\n\tprotected MessagingMessageListenerAdapter createMessageListener(MessageListenerContainer container); // Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected MessagingMessageListenerAdapter createMessageListenerInstance(Boolean batch); // Create an empty MessagingMessageListenerAdapter instance.\n\tObject getBean();\n\tprotected StringBuilder getEndpointDescription();\n\tprotected org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory getMessageHandlerMethodFactory();\n\tMethod getMethod();\n\tvoid setAdapterProvider(MethodRabbitListenerEndpoint.AdapterProvider adapterProvider); // Set a provider to create adapter instances.\n\tvoid setBean(Object bean); // Set the object instance that should manage this endpoint.\n\tvoid setErrorHandler(RabbitListenerErrorHandler errorHandler); // Set the RabbitListenerErrorHandler to invoke if the listener method throws an exception.\n\tvoid setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory messageHandlerMethodFactory); // Set the MessageHandlerMethodFactory to use to build the InvocableHandlerMethod responsible to manage the invocation of this endpoint.\n\tvoid setMethod(Method method); // Set the method to invoke to process a message managed by this endpoint.\n\tvoid setReturnExceptions(boolean returnExceptions); // Set whether exceptions thrown by the listener should be returned to the sender using the normal replyTo/@SendTo semantics.\n}"}
{"index": 18365, "repo": "opencms-core-15.0", "des": "Tells for which resource properties should be looked up (with or without searching), depending on the CmsJspTagProperty.FileUse.", "code": "Class CmsJspTagProperty.CmsPropertyAction {\n\tjava.lang.String getVfsUri(); // Returns the VFS site path of the resource for which the properties should be read.\n\tboolean isSearch(); // Returns true if it should be searched for the property, otherwise false.\n}"}
{"index": 3963, "repo": "spring-cloud-commons-parent-1.1.9.RELEASE", "des": "A simple cache implementation backed by a concurrent map.", "code": "Class StandardScopeCache {\n\tCollection<Object> clear(); // Clear the cache and return all objects in an unmodifiable collection.\n\tObject get(String name); // Get the named object from the cache.\n\tObject put(String name, Object value); // Put a value in the cache if the key is not already used.\n\tObject remove(String name); // Remove the object with this name from the cache.\n}"}
{"index": 12900, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $indexOfBytes.", "code": "public static class StringOperators.IndexOfBytes extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tstatic StringOperators.IndexOfBytes.SubstringBuilder valueOf(String fieldReference); // Start creating a new StringOperators.IndexOfBytes.\n\tstatic StringOperators.IndexOfBytes.SubstringBuilder valueOf(AggregationExpression expression); // Start creating a new StringOperators.IndexOfBytes.\n\tprotected List<Object> values();\n\tStringOperators.IndexOfBytes within(Range<Long> range); // Optionally define the substring search start and end position.\n}"}
{"index": 17132, "repo": "spring-integration-core-6.1.2", "des": "A callback to be invoked whenever a value changes in the data store.", "code": "public interface MetadataStoreListener {\n\tvoid onAdd(String key, String value); // Invoked when a key is added to the store.\n\tvoid onRemove(String key, String oldValue); // Invoked when a key is removed from the store.\n\tvoid onUpdate(String key, String newValue); // Invoked when a key is updated into the store.\n}"}
{"index": 11600, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of a ReactiveOAuth2AuthorizedClientProvider for the refresh_token grant.", "code": "public final class RefreshTokenReactiveOAuth2AuthorizedClientProvider extends Object implements ReactiveOAuth2AuthorizedClientProvider {\n\treactor.core.publisher.Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context); // Attempt to re-authorize the client in the provided context.\n\tvoid setAccessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest> accessTokenResponseClient); // Sets the client used when requesting an access token credential at the Token Endpoint for the refresh_token grant.\n\tvoid setClock(Clock clock); // Sets the Clock used in Instant.now(Clock) when checking the access token expiry.\n\tvoid setClockSkew(Duration clockSkew); // Sets the maximum acceptable clock skew, which is used when checking the access token expiry.\n}"}
{"index": 8073, "repo": "commons-compress-1.23.0", "des": "Set of bands relating to a non-predefined attribute.", "code": "Class NewAttributeBands {\n\tint getBackwardsCallCount();\n\tBHSDCodec getCodec(String layoutElement); // Returns the BHSDCodec that should be used for the given layout element.\n\tList<Attribute> parseAttributes(InputStream in, int occurrenceCount); // Parse the bands relating to this AttributeLayout and return the correct class file attributes as a List of Attribute.\n\tvoid read(InputStream in);\n\tvoid setBackwardsCalls(int[] backwardsCalls); // Once the attribute bands have been read the callables can be informed about the number of times each is subject to a backwards call.\n\tvoid unpack();\n}"}
{"index": 16886, "repo": "spring-security-oauth2-core-6.1.2", "des": "An implementation of an AbstractOAuth2Token representing an OAuth 2.0 Access Token.", "code": "public class OAuth2AccessToken extends AbstractOAuth2Token {\n\tSet<String> getScopes(); // Returns the scope(s) associated to the token.\n\tOAuth2AccessToken.TokenType getTokenType(); // Returns the token type.\n}"}
{"index": 10117, "repo": "spring-hateoas-2.1.2", "des": "Default implementation of LinkRelationProvider to simply use the uncapitalized version of the given type's name as item resource LinkRelation as well as an appended List for the collection resource LinkRelation.", "code": "public class DefaultLinkRelationProvider extends Object implements LinkRelationProvider, Ordered {\n\tLinkRelation getCollectionResourceRelFor(Class<?> type); // Returns the relation type to be used to point to a collection resource of the given type.\n\tLinkRelation getItemResourceRelFor(Class<?> type); // Returns the relation type to be used to point to an item resource of the given type.\n\tint getOrder();\n\tboolean supports(LinkRelationProvider.LookupContext delimiter); // Callback method to manually select LinkRelationProvider implementations based on a given LinkRelationProvider.LookupContext.\n}"}
{"index": 5856, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Utility class to validate the inputs to FederationApplicationHomeSubClusterStore, allows a fail fast mechanism for invalid user inputs.", "code": "Class FederationApplicationHomeSubClusterStoreInputValidator {\n\tstatic void validate(AddApplicationHomeSubClusterRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n\tstatic void validate(DeleteApplicationHomeSubClusterRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n\tstatic void validate(GetApplicationHomeSubClusterRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n\tstatic void validate(UpdateApplicationHomeSubClusterRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n}"}
{"index": 6843, "repo": "calcite-core-1.34.0", "des": "Relational expression that converts an enumerable input to interpretable calling convention.", "code": "Class EnumerableInterpretable {\n\tEnumerableInterpretable copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tNode implement(InterpretableRel.InterpreterImplementor implementor); // Creates an interpreter node to implement this relational expression.\n\tstatic Bindable toBindable(Map<String,Object> parameters, CalcitePrepare.SparkHandler spark, EnumerableRel rel, EnumerableRel.Prefer prefer);\n}"}
{"index": 1661, "repo": "samza-api-1.8.0", "des": "Table descriptor for Guava-based caching table.", "code": "Class GuavaCacheTableDescriptor<K,V> {\n\tjava.lang.String getProviderFactoryClassName(); // Return the fully qualified class name of the TableProviderFactory\n\tjava.util.Map<java.lang.String,java.lang.String> toConfig(Config jobConfig); // Generate configuration for this table descriptor, the generated configuration should be the complete configuration for this table that can be directly included in the job configuration.\n\tprotected void validate(); // Validate that this table descriptor is constructed properly; this method is used internally.\n\tGuavaCacheTableDescriptor withCache(com.google.common.cache.Cache<K,V> cache); // Specify a pre-configured Guava cache instance to be used for caching table.\n}"}
{"index": 12383, "repo": "spring-data-couchbase-5.1.2", "des": "CacheKeyPrefix provides a hook for creating custom prefixes prepended to the actual key stored in Couchbase.", "code": "@FunctionalInterface public interface CacheKeyPrefix {\n\tString compute(String cacheName); // Compute the prefix for the actual key stored in Couchbase.\n\tstatic CacheKeyPrefix prefixed(String prefix); // Creates a CacheKeyPrefix scheme that prefixes cache keys with the given prefix.\n\tstatic CacheKeyPrefix simple(); // Creates a default CacheKeyPrefix scheme that prefixes cache keys with cacheName followed by double colons.\n}"}
{"index": 4751, "repo": "hadoop-common-3.3.4", "des": "A KeyProviderExtension implementation providing a short lived cache for KeyVersions and Metadatato avoid burst of requests to hit the underlying KeyProvider.", "code": "Class CachingKeyProvider {\n\tvoid deleteKey(String name); // Delete the given key.\n\tKeyProvider.KeyVersion getCurrentKey(String name); // Get the current version of the key, which should be used for encrypting new data.\n\tKeyProvider.KeyVersion getKeyVersion(String versionName); // Get the key material for a specific version of the key.\n\tKeyProvider.Metadata getMetadata(String name); // Get metadata about the key.\n\tvoid invalidateCache(String name); // Can be used by implementing classes to invalidate the caches.\n\tKeyProvider.KeyVersion rollNewVersion(String name); // Roll a new version of the given key generating the material for it.\n\tKeyProvider.KeyVersion rollNewVersion(String name, byte[] material); // Roll a new version of the given key.\n}"}
{"index": 9125, "repo": "hbase-server-3.0.0-alpha-4", "des": "Detail class that shares data between coordination and split log manager.", "code": "Class SplitLogManagerCoordination.SplitLogManagerDetails {\n\tSet<String> getFailedDeletions(); // Returns a set of failed deletions\n\tMasterServices getMaster(); // Returns the master value\n\tServerName getServerName(); // Returns server name\n\tConcurrentMap<String,SplitLogManager.Task> getTasks(); // Returns map of tasks\n}"}
{"index": 8794, "repo": "graal-sdk-1.0.0-rc7", "des": "Categorizes options according to user relevance.", "code": "Enum OptionCategory {\n\tstatic OptionCategory valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic OptionCategory[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17247, "repo": "groovy-4.0.13", "des": "Base class for any AST node which is capable of being annotated", "code": "public class AnnotatedNode extends ASTNode implements GroovydocHolder<AnnotatedNode> {\n\tvoid addAnnotation(AnnotationNode annotation);\n\tAnnotationNode addAnnotation(ClassNode type);\n\tvoid addAnnotations(List<AnnotationNode> annotations);\n\tList<AnnotationNode> getAnnotations();\n\tList<AnnotationNode> getAnnotations(ClassNode type);\n\tClassNode getDeclaringClass();\n\tGroovydoc getGroovydoc(); // Get the groovydoc\n\tAnnotatedNode getInstance(); // Get GroovydocHolder instance\n\tboolean hasNoRealSourcePosition(); // Returns true for default constructors added by the compiler.\n\tboolean isSynthetic(); // Indicates if this node was added by the compiler.\n\tvoid setDeclaringClass(ClassNode declaringClass);\n\tvoid setHasNoRealSourcePosition(boolean hasNoRealSourcePosition);\n\tvoid setSynthetic(boolean synthetic); // Sets this node as a node added by the compiler.\n}"}
{"index": 14978, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An Authentication implementation used for the OAuth 2.0 Refresh Token Grant.", "code": "public class OAuth2RefreshTokenAuthenticationToken extends OAuth2AuthorizationGrantAuthenticationToken {\n\tString getRefreshToken(); // Returns the refresh token.\n\tSet<String> getScopes(); // Returns the requested scope(s).\n}"}
{"index": 1247, "repo": "ignite-core-2.15.0", "des": "Cache transaction proxy which supports only rollback or close operations and getters.", "code": "Class TransactionProxyRollbackOnlyImpl<K,V> {\n\tvoid commit(); // Commits this transaction by initiating two-phase-commit process.\n\tIgniteFuture<Void> commitAsync(); // Asynchronously commits this transaction by initiating two-phase-commit process.\n\tvoid resume(); // Resume a transaction if it was previously suspended.\n\tboolean setRollbackOnly(); // Modify the transaction associated with the current thread such that the only possible outcome of the transaction is to roll back the transaction.\n\tvoid suspend(); // Suspends a transaction.\n\tlong timeout(long timeout); // Sets transaction timeout value.\n}"}
{"index": 18649, "repo": "opencms-gwt-15.0", "des": "Sitemap context menu open in explorer entry.", "code": "Class CmsGotoExplorerMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 11386, "repo": "spring-context-6.0.11", "des": "Creates a proxy to a managed resource running either locally or remotely.", "code": "public class MBeanProxyFactoryBean extends MBeanClientInterceptor implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Checks that the proxyInterface has been specified and then generates the proxy for the target MBean.\n\tObject getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setProxyInterface(Class<?> proxyInterface); // Set the interface that the generated proxy will implement.\n}"}
{"index": 3410, "repo": "nifi-api-1.22.0", "des": "A flow file is a logical notion of an item in a flow with its associated attributes and identity which can be used as a reference for its actual content.", "code": "Interface FlowFile {\n\tString getAttribute(String key); // Obtains the attribute value for the given key\n\tMap<String,String> getAttributes();\n\tlong getEntryDate();\n\tlong getId();\n\tLong getLastQueueDate();\n\tlong getLineageStartDate();\n\tlong getLineageStartIndex(); // Returns a 64-bit integer that indicates the order in which the FlowFile was added to the flow with respect to other FlowFiles that have the same last lineage start date.\n\tlong getQueueDateIndex(); // Returns a 64-bit integer that indicates the order in which the FlowFile was added to the FlowFile queue with respect to other FlowFiles that have the same last queue date.\n\tlong getSize();\n\tboolean isPenalized();\n}"}
{"index": 5617, "repo": "org.apache.karaf.main-2.4.4", "des": "Provides methods to retrieve LogEntry objects from the log.", "code": "Interface LogReaderService {\n\tvoid addLogListener(LogListener listener); // Subscribes to LogEntry objects.\n\tEnumeration getLog(); // Returns an Enumeration of all LogEntry objects in the log.\n\tvoid removeLogListener(LogListener listener); // Unsubscribes to LogEntry objects.\n}"}
{"index": 829, "repo": "ignite-core-2.15.0", "des": "Registers and deregisters all ports used by SPI and Manager.", "code": "Class GridPortProcessor {\n\tvoid addPortListener(GridPortListener lsnr); // Add listener.\n\tvoid deregisterPort(int port, IgnitePortProtocol proto, Class cls); // Deregisters port used by passed class.\n\tvoid deregisterPorts(Class cls); // Deregisters all ports used by passed class.\n\tvoid printMemoryStats(); // Prints memory statistics (sizes of internal structures, etc.).\n\tCollection<GridPortRecord> records(); // Returns unmodifiable collections of records.\n\tvoid registerPort(int port, IgnitePortProtocol proto, Class cls); // Registers port using by passed class.\n\tvoid removePortListener(GridPortListener lsnr); // Remove listener.\n\tvoid start(); // Starts grid component.\n\tvoid stop(boolean cancel); // Stops grid component.\n}"}
{"index": 3597, "repo": "hive-serde-4.0.0-alpha-2", "des": "A JavaDateObjectInspector inspects a Java Date Object.", "code": "Class JavaDateObjectInspector {\n\tObject create(Date value);\n\tDate get(Object o);\n\tDate getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n\tDateWritableV2 getPrimitiveWritableObject(Object o); // Return the data in an instance of primitive writable Object.\n\tObject set(Object o, Date value);\n\tObject set(Object o, DateWritableV2 d);\n}"}
{"index": 1245, "repo": "ignite-core-2.15.0", "des": "Defines different cache transaction isolation levels.", "code": "Enum TransactionIsolation {\n\tstatic @Nullable TransactionIsolation fromOrdinal(int ord); // Efficiently gets enumerated value from its ordinal.\n\tstatic TransactionIsolation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TransactionIsolation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 15310, "repo": "spring-boot-3.1.1", "des": "Represents a collection of callbacks that can be invoked in a lambda safe way.", "code": "public static final class LambdaSafe.Callbacks<C,A> extends LambdaSafe.LambdaSafeCallback<C,A,LambdaSafe.Callbacks<C,A>> {\n\tvoid invoke(Consumer<C> invoker); // Invoke the callback instances where the callback method returns void.\n\t<R> Stream<R> invokeAnd(Function<C,R> invoker); // Invoke the callback instances where the callback method returns a result.\n}"}
{"index": 10569, "repo": "groovy-all-4.0.13", "des": "This is a basic implementation of a map able to forget its values.", "code": "public class ManagedConcurrentValueMap<K,V> extends Object {\n\tV get(K key); // Returns the value stored for the given key at the point of call.\n\tvoid put(K key, V value); // Sets a new value for a given key.\n\tvoid setBundle(ReferenceBundle bundle); // Sets a new bundle used for reference creation.\n}"}
{"index": 2137, "repo": "hive-exec-4.0.0-alpha-2", "des": "Takes a row of data and repeats n times.", "code": "Class GenericUDTFReplicateRows {\n\tvoid close(); // Called to notify the UDTF that there are no more rows to process.\n\tStructObjectInspector initialize(ObjectInspector[] args); // Initialize this GenericUDTF.\n\tvoid process(Object[] args); // Give a set of arguments for the UDTF to process.\n}"}
{"index": 6369, "repo": "spring-data-solr-4.3.15", "des": "Implementation of def(field|function,defaultValue).", "code": "Class DefaultValueFunction {\n\tstatic DefaultValueFunction defaultValue(Field field, Object defaultValue); // Creates new DefaultValueFunction representing def(field.getName(), defaultValue))\n\tstatic DefaultValueFunction defaultValue(Function function, Object defaultValue); // Creates new DefaultValueFunction representing def(function, defaultValue))\n\tstatic DefaultValueFunction defaultValue(String fieldName, Object defaultValue); // Creates new DefaultValueFunction representing def(fieldname, defaultValue))\n\tString getOperation(); // solr readable representation of function\n}"}
{"index": 17088, "repo": "spring-integration-core-6.1.2", "des": "Base interface for Integration managed components.", "code": "public interface IntegrationManagement extends NamedComponent, org.springframework.beans.factory.DisposableBean {\n\tdefault void destroy();\n\tdefault String getManagedName();\n\tdefault String getManagedType();\n\tdefault IntegrationManagement.ManagementOverrides getOverrides(); // Return the overrides.\n\tdefault <T> T getThisAs(); // Return this IntegrationManagement as its concrete type.\n\tdefault boolean isLoggingEnabled(); // Return whether logging is enabled.\n\tdefault boolean isObserved(); // True if this implementation is going to deal with a registry other than the ObservationRegistry.NOOP instance.\n\tdefault void registerMetricsCaptor(MetricsCaptor captor); // Inject a MetricsCaptor.\n\tdefault void registerObservationRegistry(io.micrometer.observation.ObservationRegistry observationRegistry); // Inject an ObservationRegistry.\n\tdefault void setLoggingEnabled(boolean enabled); // Enable logging or not.\n\tdefault void setManagedName(String managedName);\n\tdefault void setManagedType(String managedType);\n}"}
{"index": 65, "repo": "spring-yarn-boot-2.5.0.RELEASE", "des": "Generic Spring Boot client application used to push Spring Yarn Boot based apps into hdfs.", "code": "Class YarnPushApplication {\n\tYarnPushApplication configFile(String configFileName, Properties configProperties); // Associates a new Properties with a name.\n\tprotected YarnPushApplication getThis(); // Gets the instance of this defined by a sub-class.\n\tString run(); // Run a SpringApplication build by a SpringApplicationBuilder using an empty args.\n\tString run(String... args); // Run a SpringApplication build by a SpringApplicationBuilder.\n}"}
{"index": 5656, "repo": "org.apache.karaf.main-2.4.4", "des": "Service interface used to monitor the startup process.", "code": "Interface StartupMonitor {\n\tvoid applicationRunning(); // This method is called by the platform from the primary thread once the application is completely initialized and running.\n\tvoid update(); // Update the monitor.\n}"}
{"index": 15082, "repo": "spring-vault-core-3.0.4", "des": "Configuration for a key store/trust store.", "code": "public static class SslConfiguration.KeyStoreConfiguration extends Object {\n\tResource getResource();\n\tchar[] getStorePassword();\n\tString getStoreType();\n\tboolean isPresent();\n\tstatic SslConfiguration.KeyStoreConfiguration of(Resource resource); // Create a new SslConfiguration.KeyStoreConfiguration given Resource.\n\tstatic SslConfiguration.KeyStoreConfiguration of(Resource resource, char[] storePassword); // Create a new SslConfiguration.KeyStoreConfiguration given Resource and storePassword using the default keystore type.\n\tstatic SslConfiguration.KeyStoreConfiguration of(Resource resource, char[] storePassword, String keyStoreType); // Create a new SslConfiguration.KeyStoreConfiguration given Resource, storePassword, and keyStoreType.\n\tstatic SslConfiguration.KeyStoreConfiguration unconfigured(); // Create an unconfigured, empty SslConfiguration.KeyStoreConfiguration.\n\tSslConfiguration.KeyStoreConfiguration withStoreType(String storeType); // Create a new SslConfiguration.KeyStoreConfiguration by applying all values from this object and the given storeType.\n}"}
{"index": 17552, "repo": "spring-security-oauth2-resource-server-6.1.2", "des": "Authenticates requests that contain an OAuth 2.0 Bearer Token.", "code": "public class BearerTokenAuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain); // Extract any Bearer Token from the request and attempt an authentication.\n\tvoid setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,?> authenticationDetailsSource); // Set the AuthenticationDetailsSource to use.\n\tvoid setAuthenticationEntryPoint(org.springframework.security.web.AuthenticationEntryPoint authenticationEntryPoint); // Set the AuthenticationEntryPoint to use.\n\tvoid setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler authenticationFailureHandler); // Set the AuthenticationFailureHandler to use.\n\tvoid setBearerTokenResolver(BearerTokenResolver bearerTokenResolver); // Set the BearerTokenResolver to use.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextRepository(org.springframework.security.web.context.SecurityContextRepository securityContextRepository); // Sets the SecurityContextRepository to save the SecurityContext on authentication success.\n}"}
{"index": 14936, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An OAuth2AuthorizationConsentService that stores OAuth2AuthorizationConsent's in-memory.", "code": "public final class InMemoryOAuth2AuthorizationConsentService extends Object implements OAuth2AuthorizationConsentService {\n\tOAuth2AuthorizationConsent findById(String registeredClientId, String principalName); // Returns the OAuth2AuthorizationConsent identified by the provided registeredClientId and principalName, or null if not found.\n\tvoid remove(OAuth2AuthorizationConsent authorizationConsent); // Removes the OAuth2AuthorizationConsent.\n\tvoid save(OAuth2AuthorizationConsent authorizationConsent); // Saves the OAuth2AuthorizationConsent.\n}"}
{"index": 10272, "repo": "spring-core-6.0.11", "des": "Interface that can be used to add source, resource, or class files generated during ahead-of-time processing.", "code": "public interface GeneratedFiles {\n\tdefault void addClassFile(String path, InputStreamSource content); // Add a generated class file with content from the given InputStreamSource.\n\tdefault void addFile(GeneratedFiles.Kind kind, String path, CharSequence content); // Add a generated file of the specified GeneratedFiles.Kind with content from the given CharSequence.\n\tvoid addFile(GeneratedFiles.Kind kind, String path, InputStreamSource content); // Add a generated file of the specified GeneratedFiles.Kind with content from the given InputStreamSource.\n\tdefault void addFile(GeneratedFiles.Kind kind, String path, ThrowingConsumer<Appendable> content); // Add a generated file of the specified GeneratedFiles.Kind with content written to an Appendable passed to the given ThrowingConsumer.\n\tdefault void addResourceFile(String path, CharSequence content); // Add a generated resource file with content from the given CharSequence.\n\tdefault void addResourceFile(String path, InputStreamSource content); // Add a generated resource file with content from the given InputStreamSource.\n\tdefault void addResourceFile(String path, ThrowingConsumer<Appendable> content); // Add a generated resource file with content written to an Appendable passed to the given ThrowingConsumer.\n\tdefault void addSourceFile(String className, CharSequence content); // Add a generated source file with content from the given CharSequence.\n\tdefault void addSourceFile(String className, InputStreamSource content); // Add a generated source file with content from the given InputStreamSource.\n\tdefault void addSourceFile(String className, ThrowingConsumer<Appendable> content); // Add a generated source file with content written to an Appendable passed to the given ThrowingConsumer.\n\tdefault void addSourceFile(org.springframework.javapoet.JavaFile javaFile); // Add a generated source file with content from the given JavaFile.\n}"}
{"index": 4600, "repo": "commons-vfs2-2.9.0", "des": "A read-only file system for compressed files.", "code": "Class CompressedFileFileSystem {\n\tprotected abstract void addCapabilities(Collection<Capability> caps); // Returns the capabilities of this file system.\n\tprotected abstract FileObject createFile(AbstractFileName name); // Creates a file object.\n}"}
{"index": 16037, "repo": "wicket-request-10.0.0-M1", "des": "IRequestParameters implementation that combines other IRequestParameterss.", "code": "public class CombinedRequestParametersAdapter extends Object implements IRequestParameters {\n\tSet<String> getParameterNames(); // Returns immutable set of all available parameter names.\n\torg.apache.wicket.util.string.StringValue getParameterValue(String name); // Returns single value for parameter with specified name.\n\tList<org.apache.wicket.util.string.StringValue> getParameterValues(String name); // Returns list of values for parameter with specified name.\n}"}
{"index": 7650, "repo": "cassandra-all-4.1.2", "des": "Listener for processing events emitted during a single partition update.", "code": "Interface Index.Indexer {\n\tvoid begin(); // Notification of the start of a partition update.\n\tvoid finish(); // Notification of the end of the partition update.\n\tvoid insertRow(Row row); // Notification that a new row was inserted into the Memtable holding the partition.\n\tvoid partitionDelete(DeletionTime deletionTime); // Notification of a top level partition delete.\n\tvoid rangeTombstone(RangeTombstone tombstone); // Notification of a RangeTombstone.\n\tvoid removeRow(Row row); // Notification that a row was removed from the partition.\n\tvoid updateRow(Row oldRowData, Row newRowData); // Notification of a modification to a row in the base table's Memtable.\n}"}
{"index": 594, "repo": "ignite-core-2.15.0", "des": "Client cluster group projection representation.", "code": "Class ClientClusterGroupProjection {\n\tClusterGroup apply(ClusterGroup clusterGrp); // Applies projection.\n\tstatic ClientClusterGroupProjection read(BinaryRawReader reader); // Reads projection from a stream.\n}"}
{"index": 4285, "repo": "beam-sdks-java-core-2.49.0", "des": "A class representing a key consisting of an array of bytes.", "code": "Class ByteKey {\n\tint compareTo(ByteKey other); // ByteKey implements Comparable<ByteKey> by comparing the arrays in lexicographic order.\n\tstatic ByteKey copyFrom(byte[] bytes); // Creates a new ByteKey backed by a copy of the specified byte[].\n\tstatic ByteKey copyFrom(java.nio.ByteBuffer value); // Creates a new ByteKey backed by a copy of the data remaining in the specified ByteBuffer.\n\tboolean equals(@Nullable java.lang.Object o);\n\tbyte[] getBytes(); // Returns a newly-allocated byte[] representing this ByteKey.\n\tjava.nio.ByteBuffer getValue(); // Returns a read-only ByteBuffer representing this ByteKey.\n\tboolean isEmpty(); // Returns true if the byte[] backing this ByteKey is of length 0.\n\tstatic ByteKey of(int... bytes); // Creates a new ByteKey backed by a copy of the specified int[].\n}"}
{"index": 16048, "repo": "wicket-request-10.0.0-M1", "des": "Request parameters that can be modified.", "code": "public interface IWritableRequestParameters extends IRequestParameters {\n\tvoid reset(); // Clears all parameters.\n\tvoid setParameterValues(String key, List<org.apache.wicket.util.string.StringValue> values); // Sets the values for given parameter.\n}"}
{"index": 13532, "repo": "spring-messaging-6.0.11", "des": "A Jackson 2 based MessageConverter implementation.", "code": "public class MappingJackson2MessageConverter extends AbstractMessageConverter {\n\tprotected boolean canConvertFrom(Message<?> message, Class<?> targetClass);\n\tprotected boolean canConvertTo(Object payload, MessageHeaders headers);\n\tprotected Object convertFromInternal(Message<?> message, Class<?> targetClass, Object conversionHint); // Convert the message payload from serialized form to an Object.\n\tprotected Object convertToInternal(Object payload, MessageHeaders headers, Object conversionHint); // Convert the payload object to serialized form.\n\tprotected JsonEncoding getJsonEncoding(org.springframework.util.MimeType contentType); // Determine the JSON encoding to use for the given content type.\n\tObjectMapper getObjectMapper(); // Return the underlying ObjectMapper for this converter.\n\tprotected Class<?> getSerializationView(Object conversionHint); // Determine a Jackson serialization view based on the given conversion hint.\n\tprotected void logWarningIfNecessary(Type type, Throwable cause); // Determine whether to log the given exception coming from a ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType) / ObjectMapper.canSerialize(java.lang.Class<?>) check.\n\tvoid setObjectMapper(ObjectMapper objectMapper); // Set the ObjectMapper for this converter.\n\tvoid setPrettyPrint(boolean prettyPrint); // Whether to use the DefaultPrettyPrinter when writing JSON.\n\tprotected boolean supports(Class<?> clazz); // Whether the given class is supported by this converter.\n}"}
{"index": 1332, "repo": "nutch-2.4", "des": "Adds basic searchable fields to a document.", "code": "Class CCIndexingFilter {\n\tvoid addUrlFeatures(NutchDocument doc, java.lang.String urlString); // Add the features represented by a license URL.\n\tNutchDocument filter(NutchDocument doc, java.lang.String url, WebPage page); // Adds fields or otherwise modifies the document that will be indexed for a parse.\n\tConfiguration getConf();\n\tjava.util.Collection<WebPage.Field> getFields();\n\tvoid setConf(Configuration conf);\n}"}
{"index": 2715, "repo": "commons-dbcp2-2.9.0", "des": "An implementation of XAConnectionFactory which uses a real XADataSource to obtain connections and XAResources.", "code": "Class DataSourceXAConnectionFactory {\n\tConnection createConnection(); // Create a new Connection in an implementation specific fashion.\n\tTransactionRegistry getTransactionRegistry(); // Gets the TransactionRegistry for this connection factory which contains a the XAResource for every connection created by this factory.\n\tString getUserName(); // Gets the user name used to authenticate new connections.\n\tchar[] getUserPassword(); // Gets the user password.\n\tXADataSource getXaDataSource(); // Gets the XA data source.\n\tvoid setPassword(char[] userPassword); // Sets the password used to authenticate new connections.\n\tvoid setPassword(String userPassword); // Sets the password used to authenticate new connections.\n\tvoid setUsername(String userName); // Sets the user name used to authenticate new connections.\n}"}
{"index": 17134, "repo": "spring-integration-core-6.1.2", "des": "The MessageSelector implementation using a ConcurrentMetadataStore and MessageProcessor.", "code": "public class MetadataStoreSelector extends Object implements MessageSelector {\n\tboolean accept(org.springframework.messaging.Message<?> message);\n\tMetadataStoreSelector compareValues(BiPredicate<String,String> compareValues); // Fluent version of setCompareValues(BiPredicate).\n\tvoid setCompareValues(BiPredicate<String,String> compareValues); // Set a BiPredicate to compare old and new values in the metadata store for the key.\n}"}
{"index": 10400, "repo": "spring-core-6.0.11", "des": "Decode from a data buffer stream to a String stream, either splitting or aggregating incoming data chunks to realign along newlines delimiters and produce a stream of strings.", "code": "public final class StringDecoder extends AbstractDataBufferDecoder<String> {\n\tstatic StringDecoder allMimeTypes(); // Create a StringDecoder that supports all MIME types.\n\tstatic StringDecoder allMimeTypes(List<String> delimiters, boolean stripDelimiter); // Create a StringDecoder that supports all MIME types.\n\tboolean canDecode(ResolvableType elementType, MimeType mimeType); // Whether the decoder supports the given target element type and the MIME type of the source stream.\n\treactor.core.publisher.Flux<String> decode(Publisher<DataBuffer> input, ResolvableType elementType, MimeType mimeType, Map<String,Object> hints); // Decode a DataBuffer input stream into a Flux of T.\n\tString decode(DataBuffer dataBuffer, ResolvableType elementType, MimeType mimeType, Map<String,Object> hints); // Decode a data buffer to an Object of type T.\n\tCharset getDefaultCharset(); // Return the configured defaultCharset.\n\tvoid setDefaultCharset(Charset defaultCharset); // Set the default character set to fall back on if the MimeType does not specify any.\n\tstatic StringDecoder textPlainOnly(); // Create a StringDecoder for \"text/plain\".\n\tstatic StringDecoder textPlainOnly(List<String> delimiters, boolean stripDelimiter); // Create a StringDecoder for \"text/plain\".\n}"}
{"index": 18028, "repo": "spring-ws-core-4.0.5", "des": "FactoryBean to set up a CloseableHttpClient using HttpComponents HttpClient 5.", "code": "public class HttpComponents5ClientFactory extends Object implements org.springframework.beans.factory.FactoryBean<org.apache.hc.client5.http.impl.classic.CloseableHttpClient> {\n\torg.apache.hc.client5.http.impl.classic.CloseableHttpClient getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setAuthScope(org.apache.hc.client5.http.auth.AuthScope authScope); // Sets the authentication scope to be used.\n\tvoid setClientBuilderCustomizer(HttpComponents5ClientFactory.HttpClientBuilderCustomizer clientBuilderCustomizer);\n\tvoid setConnectionManagerBuilderCustomizer(HttpComponents5ClientFactory.PoolingHttpClientConnectionManagerBuilderCustomizer connectionManagerBuilderCustomizer);\n\tvoid setConnectionTimeout(Duration timeout); // Sets the timeout until a connection is established.\n\tvoid setCredentials(org.apache.hc.client5.http.auth.Credentials credentials); // Sets the credentials to be used.\n\tvoid setMaxConnectionsPerHost(Map<String,String> maxConnectionsPerHost); // Sets the maximum number of connections per host for the underlying HttpClient.\n\tvoid setMaxTotalConnections(int maxTotalConnections); // Sets the maximum number of connections allowed for the underlying HttpClient.\n\tvoid setReadTimeout(Duration timeout); // Set the socket read timeout for the underlying HttpClient.\n}"}
{"index": 13378, "repo": "shiro-core-2.0.0-alpha-2", "des": "Simple CredentialsMatcher implementation.", "code": "public class SimpleCredentialsMatcher extends org.apache.shiro.lang.codec.CodecSupport implements CredentialsMatcher {\n\tboolean doCredentialsMatch(AuthenticationToken token, AuthenticationInfo info); // This implementation acquires the token's credentials (via getCredentials(token)) and then the account's credentials (via getCredentials(account)) and then passes both of them to the equals(tokenCredentials, accountCredentials) method for equality comparison.\n\tprotected boolean equals(Object tokenCredentials, Object accountCredentials); // Returns true if the tokenCredentials argument is logically equal to the accountCredentials argument.\n\tprotected Object getCredentials(AuthenticationInfo info); // Returns the account's credentials.\n\tprotected Object getCredentials(AuthenticationToken token); // Returns the token's credentials.\n}"}
{"index": 1996, "repo": "hive-exec-4.0.0-alpha-2", "des": "Factory for generating the different node processors used by ColumnPruner.", "code": "Class ColumnPrunerProcFactory {\n\tstatic ColumnPrunerProcFactory.ColumnPrunerDefaultProc getDefaultProc(); // Factory method to get the ColumnPrunerDefaultProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerFilterProc getFilterProc(); // Factory method to get the ColumnPrunerFilterProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerGroupByProc getGroupByProc(); // Factory method to get the ColumnPrunerGroupByProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerJoinProc getJoinProc(); // The Factory method to get ColumnJoinProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerLateralViewForwardProc getLateralViewForwardProc();\n\tstatic ColumnPrunerProcFactory.ColumnPrunerLateralViewJoinProc getLateralViewJoinProc();\n\tstatic ColumnPrunerProcFactory.ColumnPrunerLimitProc getLimitProc();\n\tstatic ColumnPrunerProcFactory.ColumnPrunerMapJoinProc getMapJoinProc(); // The Factory method to get ColumnMapJoinProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerPTFProc getPTFProc(); // Factory method to get the ColumnPrunerGroupByProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerReduceSinkProc getReduceSinkProc(); // The Factory method to get ColumnPrunerReduceSinkProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerScriptProc getScriptProc();\n\tstatic ColumnPrunerProcFactory.ColumnPrunerSelectProc getSelectProc(); // The Factory method to get the ColumnPrunerSelectProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerTableScanProc getTableScanProc(); // Factory method to get the ColumnPrunerDefaultProc class.\n\tstatic ColumnPrunerProcFactory.ColumnPrunerUnionProc getUnionProc(); // The Factory method to get UnionProc class.\n\tstatic void setupNeededColumns(TableScanOperator scanOp, RowSchema inputRS, List<FieldNode> cols); // Sets up needed columns for TSOP.\n}"}
{"index": 11246, "repo": "spring-context-6.0.11", "des": "Abstract base @Configuration class providing common structure for enabling Spring's annotation-driven cache management capability.", "code": "@Configuration(proxyBeanMethods=false) public abstract class AbstractCachingConfiguration extends Object implements ImportAware {\n\tvoid setImportMetadata(org.springframework.core.type.AnnotationMetadata importMetadata); // Set the annotation metadata of the importing @Configuration class.\n\tprotected void useCachingConfigurer(AbstractCachingConfiguration.CachingConfigurerSupplier cachingConfigurerSupplier); // Extract the configuration from the nominated CachingConfigurer.\n}"}
{"index": 4689, "repo": "commons-geometry-core-1.0", "des": "This interface defines mappings between a space and one of its subspaces.", "code": "Interface Embedding<P extends Point<P>,S extends Point<S>> {\n\tdefault List<P> toSpace(Collection<S> pts); // Transform a collection of subspace points into space points.\n\tP toSpace(S pt); // Transform a subspace point into a space point.\n\tdefault List<S> toSubspace(Collection<P> pts); // Transform a collection of space points into subspace points.\n\tS toSubspace(P pt); // Transform a space point into a subspace point.\n}"}
{"index": 16182, "repo": "spring-data-cassandra-4.1.2", "des": "Factory class for producing implementations of given id interfaces.", "code": "public class MapIdFactory extends Object {\n\tstatic <T> T id(Class<T> idInterface); // Produces an implementation of the given id interface type using the type's class loader.\n\tstatic <T> T id(Class<T> idInterface, ClassLoader loader); // Produces an implementation of the given class loader.\n}"}
{"index": 266, "repo": "commons-collections4-4.4", "des": "Decorates another Bag to ensure it can't be altered.", "code": "Class UnmodifiableBag<E> {\n\tboolean add(E object); // (Violation) Adds one copy of the specified object to the Bag.\n\tboolean add(E object, int count); // Adds nCopies copies of the specified object to the Bag.\n\tboolean addAll(Collection<? extends E> coll);\n\tvoid clear();\n\tIterator<E> iterator(); // Returns an Iterator over the entire set of members, including copies due to cardinality.\n\tboolean remove(Object object); // (Violation) Removes all occurrences of the given object from the bag.\n\tboolean remove(Object object, int count); // Removes nCopies copies of the specified object from the Bag.\n\tboolean removeAll(Collection<?> coll); // (Violation) Remove all elements represented in the given collection, respecting cardinality.\n\tboolean removeIf(Predicate<? super E> filter);\n\tboolean retainAll(Collection<?> coll); // (Violation) Remove any members of the bag that are not in the given collection, respecting cardinality.\n\tSet<E> uniqueSet(); // Returns a Set of unique elements in the Bag.\n\tstatic <E> Bag<E> unmodifiableBag(Bag<? extends E> bag); // Factory method to create an unmodifiable bag.\n}"}
{"index": 4390, "repo": "beam-sdks-java-core-2.49.0", "des": "A WindowFn that assigns all data to the same window.", "code": "Class GlobalWindows {\n\tboolean assignsToOneWindow(); // Returns true if this WindowFn always assigns an element to exactly one window.\n\tjava.util.Collection<GlobalWindow> assignWindows(WindowFn.AssignContext c); // Given a timestamp and element, returns the set of windows into which it should be placed.\n\tboolean equals(@Nullable java.lang.Object other);\n\tWindowMappingFn<GlobalWindow> getDefaultWindowMappingFn(); // Returns the default WindowMappingFn to use to map main input windows to side input windows.\n\tboolean isCompatible(WindowFn<?,?> o); // Returns whether this performs the same merging as the given WindowFn.\n\tvoid verifyCompatibility(WindowFn<?,?> other); // Throw IncompatibleWindowException if this WindowFn does not perform the same merging as the given $WindowFn.\n\tCoder<GlobalWindow> windowCoder(); // Returns the Coder used for serializing the windows used by this windowFn.\n}"}
{"index": 3557, "repo": "mahout-mr-0.13.0", "des": "An implementation of the cosine similarity.", "code": "Class UncenteredCosineSimilarity {\n\tdouble[] itemSimilarities(long itemID1, long[] itemID2s); // A bulk-get version of ItemSimilarity.itemSimilarity(long, long).\n\tdouble itemSimilarity(long itemID1, long itemID2); // Returns the degree of similarity, of two items, based on the preferences that users have expressed for the items.\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n\tvoid setPreferenceInferrer(PreferenceInferrer inferrer); // Attaches a PreferenceInferrer to the UserSimilarity implementation.\n\tdouble userSimilarity(long userID1, long userID2); // Returns the degree of similarity, of two users, based on the their preferences.\n}"}
{"index": 6279, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "The MessageProcessorSpec implementation for the DslScriptExecutingMessageProcessor.", "code": "Class ScriptSpec {\n\tprotected org.springframework.integration.handler.MessageProcessor<?> doGet();\n\tScriptSpec lang(java.lang.String lang); // The script lang (Groovy, ruby, python etc.).\n\tScriptSpec refreshCheckDelay(long refreshCheckDelay); // The refreshCheckDelay in milliseconds for refreshable script resource.\n\tScriptSpec variable(java.lang.String name, java.lang.Object value); // The script variable to use.\n\tScriptSpec variableGenerator(org.springframework.integration.scripting.ScriptVariableGenerator variableGenerator); // The ScriptVariableGenerator to use.\n\tScriptSpec variables(java.util.Map<java.lang.String,java.lang.Object> variables); // The script variables to use\n\tScriptSpec variables(MapBuilder<?,java.lang.String,java.lang.Object> variables); // The script variables to use.\n}"}
{"index": 17029, "repo": "spring-integration-core-6.1.2", "des": "A MessageHandlerSpec for AbstractMessageRouters.", "code": "public class AbstractRouterSpec<S extends AbstractRouterSpec<S,R>,R extends AbstractMessageRouter> extends ConsumerEndpointSpec<S,R> {\n\tS applySequence(boolean applySequence);\n\tS defaultOutputChannel(String channelName); // Specify a MessageChannel bean name as a default output from the router.\n\tS defaultOutputChannel(org.springframework.messaging.MessageChannel channel); // Specify a MessageChannel as a default output from the router.\n\tS defaultOutputToParentFlow(); // Make a default output mapping of the router to the parent flow.\n\tS defaultSubFlowMapping(IntegrationFlow subFlow); // Specify an IntegrationFlow as an output from the router when no any other mapping has matched.\n\tS ignoreSendFailures(boolean ignoreSendFailures);\n\tprotected boolean isDefaultToParentFlow();\n}"}
{"index": 14759, "repo": "spring-data-commons-3.1.2", "des": "Simple value object to wrap a nullable delegate.", "code": "public class NullableWrapper extends Object {\n\tObject getValue(); // Returns the backing value.\n\tClass<?> getValueType(); // Returns the type of the contained value.\n}"}
{"index": 1676, "repo": "samza-api-1.8.0", "des": "Store abstraction responsible for managing the metadata of a Samza job.", "code": "Interface MetadataStore {\n\tjava.util.Map<java.lang.String,byte[]> all(); // Returns all the entries in this metadata store.\n\tvoid close(); // Closes the metadata store, if applicable, relinquishing all the underlying resources and connections.\n\tvoid delete(java.lang.String key); // Deletes the mapping for the specified key from this metadata store (if such mapping exists).\n\tvoid flush(); // Flushes the metadata store, if applicable.\n\tbyte[] get(java.lang.String key); // Gets the value associated with the specified key.\n\tvoid init(); // Initializes the metadata store, if applicable, setting up the underlying resources and connections to the store endpoints.\n\tvoid put(java.lang.String key, byte[] value); // Updates the mapping of the specified key-value pair.\n\tdefault void putAll(java.util.Map<java.lang.String,byte[]> entries); // Updates the mapping with the specified map.\n}"}
{"index": 16963, "repo": "spring-orm-6.0.11", "des": "Convenient superclass for Hibernate-based data access objects.", "code": "public abstract class HibernateDaoSupport extends org.springframework.dao.support.DaoSupport {\n\tprotected final void checkDaoConfig();\n\tprotected HibernateTemplate createHibernateTemplate(SessionFactory sessionFactory); // Create a HibernateTemplate for the given SessionFactory.\n\tprotected final Session currentSession(); // Conveniently obtain the current Hibernate Session.\n\tfinal HibernateTemplate getHibernateTemplate(); // Return the HibernateTemplate for this DAO, pre-initialized with the SessionFactory or set explicitly.\n\tfinal SessionFactory getSessionFactory(); // Return the Hibernate SessionFactory used by this DAO.\n\tfinal void setHibernateTemplate(HibernateTemplate hibernateTemplate); // Set the HibernateTemplate for this DAO explicitly, as an alternative to specifying a SessionFactory.\n\tfinal void setSessionFactory(SessionFactory sessionFactory); // Set the Hibernate SessionFactory to be used by this DAO.\n}"}
{"index": 7384, "repo": "mahout-math-0.13.0", "des": "Only for performance tuning of compute intensive linear algebraic computations.", "code": "Class Mult {\n\tdouble apply(double a); // Returns the result of the function evaluation.\n\tstatic Mult div(double constant); // a / constant.\n\tdouble getMultiplicator();\n\tstatic Mult mult(double constant); // a * constant.\n\tvoid setMultiplicator(double multiplicator);\n}"}
{"index": 7130, "repo": "calcite-core-1.34.0", "des": "Utilities for creating and composing rule sets.", "code": "Class RuleSets {\n\tstatic RuleSet ofList(Iterable<? extends RelOptRule> rules); // Creates a rule set with a given collection of rules.\n\tstatic RuleSet ofList(RelOptRule... rules); // Creates a rule set with a given array of rules.\n}"}
{"index": 894, "repo": "ignite-core-2.15.0", "des": "Defragmentation operation service implementation.", "code": "Class IgniteDefragmentationImpl {\n\tIgniteDefragmentation.CancelResult cancel(); // Cancel scheduled or ongoing defragmentation.\n\tboolean inProgress();\n\tint processedPartitions();\n\tIgniteDefragmentation.ScheduleResult schedule(List<String> cacheNames); // Schedule defragmentaton on next start of the node.\n\tlong startTime();\n\tIgniteDefragmentation.DefragmentationStatus status(); // Get the status of the ongoing defragmentation.\n\tint totalPartitions();\n}"}
{"index": 10837, "repo": "spring-boot-actuator-3.1.1", "des": "Security context in which an endpoint is being invoked.", "code": "public interface SecurityContext {\n\tPrincipal getPrincipal(); // Return the currently authenticated Principal or null.\n\tboolean isUserInRole(String role); // Returns true if the currently authenticated user is in the given role, or false otherwise.\n}"}
{"index": 13013, "repo": "spring-aop-6.0.11", "des": "Abstract TargetSource implementation that wraps a refreshable target object.", "code": "public abstract class AbstractRefreshableTargetSource extends Object implements TargetSource, Refreshable {\n\tprotected abstract Object freshTarget(); // Obtain a fresh target object.\n\tlong getLastRefreshTime(); // Return the last time an actual refresh happened (as timestamp).\n\tlong getRefreshCount(); // Return the number of actual refreshes since startup.\n\tfinal Object getTarget(); // Return a target instance.\n\tClass<?> getTargetClass(); // Return the type of targets returned by this TargetSource.\n\tboolean isStatic(); // Not static.\n\tfinal void refresh(); // Refresh the underlying target object.\n\tvoid releaseTarget(Object object); // No need to release target.\n\tprotected boolean requiresRefresh(); // Determine whether a refresh is required.\n\tvoid setRefreshCheckDelay(long refreshCheckDelay); // Set the delay between refresh checks, in milliseconds.\n}"}
{"index": 224, "repo": "commons-collections4-4.4", "des": "Reverses the order of another comparator by reversing the arguments to its compare method.", "code": "Class ReverseComparator<E> {\n\tint compare(E obj1, E obj2); // Compares two objects in reverse order.\n\tboolean equals(Object object); // Returns true iff that Object is is a Comparator whose ordering is known to be equivalent to mine.\n}"}
{"index": 5209, "repo": "druid-processing-26.0.0", "des": "Processing related interface A DimensionMerger is a per-dimension stateful object that encapsulates type-specific operations and data structures used during the segment merging process (i.", "code": "Interface DimensionMerger {\n\tColumnValueSelector convertSortedSegmentRowValuesToMergedRowValues(int segmentIndex, ColumnValueSelector source); // Creates a value selector, which converts values with per-segment, _sorted order_ (see DimensionIndexer.convertUnsortedValuesToSorted(org.apache.druid.segment.ColumnValueSelector)) encoding from the given selector to their equivalent representation in the merged set of rows.\n\tboolean hasOnlyNulls(); // Returns true if this dimension has no data besides nulls.\n\tvoid processMergedRow(ColumnValueSelector selector); // Process a column value(s) (potentially multi-value) of a row from the given selector and update the DimensionMerger's internal state.\n\tvoid writeIndexes(List<IntBuffer> segmentRowNumConversions); // Internally construct any index structures relevant to this DimensionMerger.\n\tvoid writeMergedValueDictionary(List<IndexableAdapter> adapters); // Given a list of segment adapters: - Read _sorted order_ (e.\n}"}
{"index": 3039, "repo": "tink-1.10.0", "des": "A container for KmsClient-objects that are needed by KeyManager-objects for primitives that use KMS-managed keys.", "code": "Class KmsClients {\n\tstatic void add(KmsClient client); // Adds a client to the list of known KmsClient-objects.\n\tstatic KmsClient get(String keyUri); // Returns the first KmsClient registered with add(com.google.crypto.tink.KmsClient) that supports keyUri.\n\tstatic KmsClient getAutoLoaded(String keyUri); // Returns the first KmsClient automatically loaded with ServiceLoader that supports keyUri.\n}"}
{"index": 5987, "repo": "commons-lang3-3.12.0", "des": "A functional interface like ObjDoubleConsumer that declares a Throwable.", "code": "Interface FailableObjDoubleConsumer<T,E extends Throwable> {\n\tvoid accept(T object, double value); // Accepts the consumer.\n\tstatic <T,E extends Throwable>FailableObjDoubleConsumer<T,E> nop(); // Returns The NOP singleton.\n}"}
{"index": 17276, "repo": "groovy-4.0.13", "des": "Represents a simple key-value cache, which is NOT thread safe and backed by a Map instance", "code": "public class CommonCache<K,V> extends Object implements EvictableCache<K,V>, ValueConvertable<V,Object>, Serializable {\n\tvoid cleanUpNullReferences(); // Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tMap<K,V> clearAll(); // Clear the cache\n\tboolean containsKey(Object key); // Determines if the cache contains an entry for the specified key.\n\tboolean containsValue(Object value);\n\tObject convertValue(V value); // convert the original value to the target value\n\tSet<Map.Entry<K,V>> entrySet();\n\tV get(Object key); // Gets a value from the cache\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider); // Try to get the value from cache.\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider, boolean shouldCache);\n\tboolean isEmpty();\n\tSet<K> keys(); // Get all keys associated to cached values\n\tSet<K> keySet();\n\tV put(K key, V value); // Associates the specified value with the specified key in the cache.\n\tvoid putAll(Map<? extends K,? extends V> m);\n\tV remove(Object key); // Remove the cached value by the key\n\tint size(); // Get the size of the cache\n\tCollection<V> values(); // Get all cached values\n}"}
{"index": 1648, "repo": "samza-api-1.8.0", "des": "Provides interface for common blob store operations: GET, PUT and DELETE.", "code": "Interface BlobStoreManager {\n\tvoid close(); // Cleanly close resources like blob store client\n\tjava.util.concurrent.CompletionStage<java.lang.Void> delete(java.lang.String id, Metadata metadata); // Non-blocking call to mark a blob for deletion in the remote blob store\n\tjava.util.concurrent.CompletionStage<java.lang.Void> get(java.lang.String id, java.io.OutputStream outputStream, Metadata metadata); // Non-blocking GET call to remote blob store\n\tvoid init(); // Initialize underlying blob store client, if necessary.\n\tjava.util.concurrent.CompletionStage<java.lang.String> put(java.io.InputStream inputStream, Metadata metadata); // Non-blocking PUT call to remote blob store with supplied metadata\n\tjava.util.concurrent.CompletionStage<java.lang.Void> removeTTL(java.lang.String blobId, Metadata metadata); // Non-blocking call to remove the Time-To-Live (TTL) for a blob and make it permanent.\n}"}
{"index": 9758, "repo": "commons-math3-3.6.1", "des": "An enum for various estimation strategies of a percentile referred in wikipedia on quantile with the names of enum matching those of types mentioned in wikipedia.", "code": "Enum Percentile.EstimationType {\n\tprotected double estimate(double[] work, int[] pivotsHeap, double pos, int length, KthSelector selector); // Estimation based on Kth selection.\n\tdouble evaluate(double[] work, double p, KthSelector selector); // Evaluate method to compute the percentile for a given bounded array.\n\tprotected double evaluate(double[] work, int[] pivotsHeap, double p, KthSelector selector); // Evaluate method to compute the percentile for a given bounded array using earlier computed pivots heap. This basically calls the index and then estimate functions to return the estimated percentile value.\n\tprotected abstract double index(double p, int length); // Finds the index of array that can be used as starting index to estimate percentile.\n\tstatic Percentile.EstimationType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Percentile.EstimationType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17983, "repo": "spring-ws-core-4.0.5", "des": "Base class for WebApplicationInitializer implementations that register a MessageDispatcherServlet in the servlet context.", "code": "public abstract class AbstractMessageDispatcherServletInitializer extends org.springframework.web.context.AbstractContextLoaderInitializer {\n\tprotected abstract org.springframework.web.context.WebApplicationContext createServletApplicationContext(); // Create a servlet application context to be provided to the MessageDispatcherServlet.\n\tprotected void customizeRegistration(jakarta.servlet.ServletRegistration.Dynamic registration); // Optionally perform further registration customization once registerMessageDispatcherServlet(ServletContext) has completed.\n\tprotected String[] getServletMappings(); // Specify the servlet mapping(s) for the MessageDispatcherServlet.\n\tprotected String getServletName(); // Return the name under which the MessageDispatcherServlet will be registered.\n\tprotected boolean isTransformSchemaLocations(); // Indicates whether relative address locations in the XSD are to be transformed using the request URI of the incoming HTTP request.\n\tboolean isTransformWsdlLocations(); // Indicates whether relative address locations in the WSDL are to be transformed using the request URI of the incoming HTTP request.\n\tvoid onStartup(jakarta.servlet.ServletContext servletContext);\n\tprotected void registerMessageDispatcherServlet(jakarta.servlet.ServletContext servletContext); // Register a MessageDispatcherServlet against the given servlet context.\n}"}
{"index": 6022, "repo": "commons-lang3-3.12.0", "des": "A predicate implementation which matches a thread or threadgroup name.", "code": "Class ThreadUtils.NamePredicate {\n\tboolean test(Thread thread); // Evaluates this predicate on the given thread.\n\tboolean test(ThreadGroup threadGroup); // Evaluates this predicate on the given threadgroup.\n}"}
{"index": 536, "repo": "ignite-core-2.15.0", "des": "Splitter implementation that actually does not split cache configuration.", "code": "Class CacheConfigurationSplitterOldFormat {\n\tT2<CacheConfiguration,CacheConfigurationEnrichment> split(CacheConfiguration ccfg); // Splits the given cache configuration into two parts CacheConfiguration and CacheConfigurationEnrichment that are serialized separately.\n\tT2<CacheConfiguration,CacheConfigurationEnrichment> split(CacheGroupDescriptor desc); // Splits cache configuration associated with the given desc into two parts CacheConfiguration and CacheConfigurationEnrichment that are serialized separately.\n\tT2<CacheConfiguration,CacheConfigurationEnrichment> split(DynamicCacheDescriptor desc); // Splits cache configuration associated with the given desc into two parts CacheConfiguration and CacheConfigurationEnrichment that are serialized separately.\n}"}
{"index": 11347, "repo": "spring-context-6.0.11", "des": "Convenient application context with built-in XML support.", "code": "public class GenericXmlApplicationContext extends GenericApplicationContext {\n\tfinal org.springframework.beans.factory.xml.XmlBeanDefinitionReader getReader(); // Exposes the underlying XmlBeanDefinitionReader for additional configuration facilities and loadBeanDefinition variations.\n\tvoid load(Class<?> relativeClass, String... resourceNames); // Load bean definitions from the given XML resources.\n\tvoid load(String... resourceLocations); // Load bean definitions from the given XML resources.\n\tvoid load(org.springframework.core.io.Resource... resources); // Load bean definitions from the given XML resources.\n\tvoid setEnvironment(org.springframework.core.env.ConfigurableEnvironment environment); // Delegates the given environment to underlying XmlBeanDefinitionReader.\n\tvoid setValidating(boolean validating); // Set whether to use XML validation.\n}"}
{"index": 6881, "repo": "calcite-core-1.34.0", "des": "Information about a function call that is passed to the constructor of a function instance.", "code": "Interface FunctionContext {\n\t<V> V getArgumentValueAs(int ordinal, Class<V> valueClass); // Returns the value of an argument to this function, null if the argument is the NULL literal.\n\tint getParameterCount(); // Returns the number of parameters.\n\tRelDataTypeFactory getTypeFactory(); // Returns the type factory.\n\tboolean isArgumentConstant(int ordinal); // Returns whether the value of an argument is constant.\n}"}
{"index": 8654, "repo": "avro-1.11.2", "des": "Choose whether to use a default value for the field or not.", "code": "Class SchemaBuilder.BytesDefault<R> {\n\tSchemaBuilder.FieldAssembler<R> bytesDefault(byte[] defaultVal); // Completes this field with the default value provided, cannot be null\n\tSchemaBuilder.FieldAssembler<R> bytesDefault(ByteBuffer defaultVal); // Completes this field with the default value provided, cannot be null\n\tSchemaBuilder.FieldAssembler<R> bytesDefault(String defaultVal); // Completes this field with the default value provided, cannot be null.\n}"}
{"index": 8859, "repo": "hbase-server-3.0.0-alpha-4", "des": "Stores all of the cache objects and configuration for a single HFile.", "code": "Class CacheConfig {\n\tvoid enableCacheOnWrite(); // Enable cache on write including: cacheDataOnWrite cacheIndexesOnWrite cacheBloomsOnWrite\n\tOptional<BlockCache> getBlockCache(); // Returns the block cache.\n\tByteBuffAllocator getByteBuffAllocator();\n\tlong getCacheCompactedBlocksOnWriteThreshold(); // Returns total file size in bytes threshold for caching while writing during compaction\n\tboolean isCombinedBlockCache();\n\tboolean isInMemory(); // Returns true if blocks in this file should be flagged as in-memory\n\tvoid setCacheDataOnWrite(boolean cacheDataOnWrite);\n\tvoid setEvictOnClose(boolean evictOnClose); // Only used for testing.\n\tboolean shouldCacheBlockOnRead(BlockType.BlockCategory category); // Should we cache a block of a particular category? We always cache important blocks such as index blocks, as long as the block cache is available.\n\tboolean shouldCacheBloomsOnWrite();\n\tboolean shouldCacheCompactedBlocksOnWrite(); // Returns true if blocks should be cached while writing during compaction, false if not\n\tboolean shouldCacheCompressed(BlockType.BlockCategory category); // Returns true if this BlockType.BlockCategory should be compressed in blockcache, false otherwise\n\tboolean shouldCacheDataCompressed(); // Returns true if data blocks should be compressed in the cache, false if not\n\tboolean shouldCacheDataOnRead(); // Returns whether the DATA blocks of this HFile should be cached on read or not (we always cache the meta blocks, the INDEX and BLOOM blocks).\n\tboolean shouldCacheDataOnWrite();\n\tboolean shouldCacheIndexesOnWrite();\n\tboolean shouldDropBehindCompaction();\n\tboolean shouldEvictOnClose();\n\tboolean shouldLockOnCacheMiss(BlockType blockType); // If we make sure the block could not be cached, we will not acquire the lock otherwise we will acquire lock\n\tboolean shouldPrefetchOnOpen(); // Returns true if blocks should be prefetched into the cache on open, false if not\n\tboolean shouldReadBlockFromCache(BlockType blockType); // Return true if we may find this type of block in block cache.\n}"}
{"index": 16381, "repo": "spring-data-jpa-3.1.2", "des": "Interface to hide different implementations to extract the original JPA query string from a Query.", "code": "public interface QueryExtractor {\n\tboolean canExtractQuery(); // Returns whether the extractor is able to extract the original query string from a given Query.\n\tString extractQueryString(jakarta.persistence.Query query); // Reverse engineers the query string from the Query object.\n}"}
{"index": 16238, "repo": "spring-data-cassandra-4.1.2", "des": "Object to support the configuration of user type specifications that have columns.", "code": "public class UserTypeSpecification<T extends UserTypeSpecification<T>> extends UserTypeNameSpecification {\n\tT field(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type); // Adds an ADD to the list of field changes.\n\tT field(String name, com.datastax.oss.driver.api.core.type.DataType type); // Adds the given field to the type.\n\tList<FieldSpecification> getFields();\n}"}
{"index": 8289, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of MethodArgumentResolver that supports resolving SoapHeaderElement parameters.", "code": "Class SoapHeaderElementMethodArgumentResolver {\n\tObject resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter is supported by this resolver.\n}"}
{"index": 12815, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $mergeObjects that combines multiple documents into a single document.", "code": "public static class ObjectOperators.MergeObjects extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tstatic ObjectOperators.MergeObjects merge(Object... values); // Creates new aggregation expression that takes given values and combines them into a single document.\n\tstatic ObjectOperators.MergeObjects mergeValuesOf(String... fieldReferences); // Creates new aggregation expression that takes the given field references and combines them into a single document.\n\tstatic ObjectOperators.MergeObjects mergeValuesOf(AggregationExpression... expressions); // Creates new aggregation expression that takes the result of the given expressions and combines them into a single document.\n\tObjectOperators.MergeObjects mergeWith(Object... values); // Creates new aggregation expression by adding the given values (documents or mapped objects).\n\tObjectOperators.MergeObjects mergeWithValuesOf(String... fieldReferences); // Creates new aggregation expression by adding the given field references.\n\tObjectOperators.MergeObjects mergeWithValuesOf(AggregationExpression... expression); // Creates new aggregation expression by adding the given expressions.\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 11603, "repo": "spring-security-oauth2-client-6.1.2", "des": "Provides an easy mechanism for using an OAuth2AuthorizedClient to make OAuth2 requests by including the token as a Bearer Token.", "code": "public final class ServerOAuth2AuthorizedClientExchangeFilterFunction extends Object implements org.springframework.web.reactive.function.client.ExchangeFilterFunction {\n\tstatic Consumer<Map<String,Object>> clientRegistrationId(String clientRegistrationId); // Modifies the ClientRequest.attributes() to include the ClientRegistration.getRegistrationId() to be used to look up the OAuth2AuthorizedClient.\n\treactor.core.publisher.Mono<org.springframework.web.reactive.function.client.ClientResponse> filter(org.springframework.web.reactive.function.client.ClientRequest request, org.springframework.web.reactive.function.client.ExchangeFunction next);\n\tstatic Consumer<Map<String,Object>> oauth2AuthorizedClient(OAuth2AuthorizedClient authorizedClient); // Modifies the ClientRequest.attributes() to include the OAuth2AuthorizedClient to be used for providing the Bearer Token.\n\tstatic Consumer<Map<String,Object>> serverWebExchange(org.springframework.web.server.ServerWebExchange serverWebExchange); // Modifies the ClientRequest.attributes() to include the ServerWebExchange to be used for providing the Bearer Token.\n\tvoid setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler authorizationFailureHandler); // Sets the handler that handles authentication and authorization failures when communicating to the OAuth 2.0 Resource Server.\n\tvoid setDefaultClientRegistrationId(String clientRegistrationId); // If set, will be used as the default ClientRegistration.getRegistrationId().\n\tvoid setDefaultOAuth2AuthorizedClient(boolean defaultOAuth2AuthorizedClient); // If true, a default OAuth2AuthorizedClient can be discovered from the current Authentication.\n}"}
{"index": 2292, "repo": "hive-exec-4.0.0-alpha-2", "des": "This class can be used for math based UDFs that only have an evaluate method for doubles.", "code": "Class UDFMath {\n\tprotected abstract DoubleWritable doEvaluate(DoubleWritable a); // For subclass to implement.\n\tDoubleWritable evaluate(DoubleWritable a); // Returns null if the passed in value is and passes on to doEvaluate(DoubleWritable) if not.\n\tDoubleWritable evaluate(HiveDecimalWritable writable); // Convert HiveDecimal to a double and call evaluate() on it.\n}"}
{"index": 11065, "repo": "spring-shell-core-3.1.2", "des": "Support facilities for CommandRegistration.OptionNameModifier providing common naming types.", "code": "public abstract class OptionNameModifierSupport extends Object {\n\tstatic String toCamelCase(String name); // Convert given name to camelCase.\n\tstatic String toKebabCase(String name); // Convert given name to kebab-case.\n\tstatic String toPascalCase(String name); // Convert given name to PascalCase.\n\tstatic String toSnakeCase(String name); // Convert given name to snake_case.\n}"}
{"index": 18128, "repo": "jena-querybuilder-4.9.0", "des": "A collection of static methods to convert from Objects to various types used in Query and Update construction.", "code": "public class Converters extends Object {\n\tstatic Node checkVar(Node n); // Converts any Node_Variable nodes into Var nodes.\n\tstatic Node makeLiteral(Object o); // Creates a literal from an object.\n\tstatic Node makeLiteral(String value, String typeUri); // Creates a literal from the value and type URI.\n\tstatic Node makeNode(Object o, PrefixMapping pMapping); // Makes a node from an object while using the associated prefix mapping.\n\tstatic Object makeNodeOrPath(Object o, PrefixMapping pMapping); // Creates a Path or Node as appropriate.\n\tstatic Collection<Node> makeValueNodes(Iterator<?> iter, PrefixMapping prefixMapping); // Creates a collection of nodes from an iterator of Objects.\n\tstatic Var makeVar(Object o); // Makes a Var from an object.\n\tstatic String quoted(String q); // A convenience method to quote a string.\n}"}
{"index": 17002, "repo": "spring-data-r2dbc-3.1.2", "des": "An AbstractR2dbcQuery implementation based on a PartTree.", "code": "public class PartTreeR2dbcQuery extends AbstractR2dbcQuery {\n\tprotected reactor.core.publisher.Mono<PreparedOperation<?>> createQuery(RelationalParameterAccessor accessor); // Creates a BindableQuery instance using the given ParameterAccessor\n\tprotected boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected boolean isModifyingQuery(); // Returns whether this query is a modifying one.\n}"}
{"index": 11184, "repo": "wicket-extensions-10.0.0-M1", "des": "An panel for an Ajax-ified list of components.", "code": "public class AjaxListPanel extends org.apache.wicket.markup.html.panel.Panel {\n\t<T extends org.apache.wicket.Component>T append(T component, org.apache.wicket.ajax.AjaxRequestTarget target); // Append a component.\n\t<T extends org.apache.wicket.Component>T delete(T component, org.apache.wicket.ajax.AjaxRequestTarget target); // Delete a component.\n\tString newChildId(); // Get an id for a new child to be appended.\n}"}
{"index": 8595, "repo": "commons-io-2.13.0", "des": "An ObjectInputStream that's restricted to deserialize a limited set of classes.", "code": "Class ValidatingObjectInputStream {\n\tValidatingObjectInputStream accept(Class<?>... classes); // Accept the specified classes for deserialization, unless they are otherwise rejected.\n\tValidatingObjectInputStream accept(ClassNameMatcher m); // Accept class names where the supplied ClassNameMatcher matches for deserialization, unless they are otherwise rejected.\n\tValidatingObjectInputStream accept(Pattern pattern); // Accept class names that match the supplied pattern for deserialization, unless they are otherwise rejected.\n\tValidatingObjectInputStream accept(String... patterns); // Accept the wildcard specified classes for deserialization, unless they are otherwise rejected.\n\tprotected void invalidClassNameFound(String className); // Called to throw InvalidClassException if an invalid class name is found during deserialization.\n\tValidatingObjectInputStream reject(Class<?>... classes); // Reject the specified classes for deserialization, even if they are otherwise accepted.\n\tValidatingObjectInputStream reject(ClassNameMatcher m); // Reject class names where the supplied ClassNameMatcher matches for deserialization, even if they are otherwise accepted.\n\tValidatingObjectInputStream reject(Pattern pattern); // Reject class names that match the supplied pattern for deserialization, even if they are otherwise accepted.\n\tValidatingObjectInputStream reject(String... patterns); // Reject the wildcard specified classes for deserialization, even if they are otherwise accepted.\n\tprotected Class<?> resolveClass(ObjectStreamClass osc);\n}"}
{"index": 18804, "repo": "lucene-core-9.7.0", "des": "Simplifies the implementation of iterators a bit.", "code": "Class IntIntHashMap.AbstractIterator<E> {\n\tprotected E done(); // Call when done.\n\tprotected abstract E fetch(); // Fetch next element.\n\tboolean hasNext();\n\tE next();\n\tvoid remove(); // Default implementation throws UnsupportedOperationException.\n}"}
{"index": 13351, "repo": "shiro-core-2.0.0-alpha-2", "des": "Simple memory-based implementation of the SessionDAO that stores all of its sessions in an in-memory ConcurrentMap.", "code": "public class MemorySessionDAO extends AbstractSessionDAO {\n\tvoid delete(Session session); // Deletes the associated EIS record of the specified session.\n\tprotected Serializable doCreate(Session session); // Subclass hook to actually persist the given Session instance to the underlying EIS.\n\tprotected Session doReadSession(Serializable sessionId); // Subclass implementation hook that retrieves the Session object from the underlying EIS or null if a session with that ID could not be found.\n\tCollection<Session> getActiveSessions(); // Returns all sessions in the EIS that are considered active, meaning all sessions that haven't been stopped/expired.\n\tprotected Session storeSession(Serializable id, Session session);\n\tvoid update(Session session); // Updates (persists) data from a previously created Session instance in the EIS identified by {@link Session#getId() session.getId()}.\n}"}
{"index": 16508, "repo": "spring-batch-infrastructure-5.0.2", "des": "Oracle implementation of a PagingQueryProvider using database specific features.", "code": "public class OraclePagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\tString generateFirstPageQuery(int pageSize); // Method generating the query string to be used for retrieving the first page.\n\tString generateRemainingPagesQuery(int pageSize); // Method generating the query string to be used for retrieving the pages following the first page.\n}"}
{"index": 732, "repo": "ignite-core-2.15.0", "des": "Simple marshaller that utilize JDK serialization features.", "code": "Class GridClientJdkMarshaller {\n\tByteBuffer marshal(Object obj, int off); // Marshals object to byte array.\n\t<T> T unmarshal(byte[] bytes); // Unmarshals object from byte array.\n}"}
{"index": 5432, "repo": "druid-processing-26.0.0", "des": "Virtual column that returns a changeable value, via setValue(long).", "code": "Class SettableLongVirtualColumn {\n\tColumnCapabilities capabilities(String columnName); // This method is deprecated in favor of VirtualColumn.capabilities(ColumnInspector, String), which should be used whenever possible and can support virtual column implementations that need to inspect other columns as inputs.\n\tbyte[] getCacheKey(); // Get a byte array used as a cache key.\n\tString getOutputName(); // Output name of this column.\n\tlong getValue();\n\tColumnValueSelector<?> makeColumnValueSelector(String columnName, ColumnSelectorFactory factory); // Build a ColumnValueSelector corresponding to this virtual column.\n\tDimensionSelector makeDimensionSelector(DimensionSpec dimensionSpec, ColumnSelectorFactory factory); // Build a selector corresponding to this virtual column.\n\tList<String> requiredColumns(); // Returns a list of columns that this virtual column will access.\n\tvoid setValue(long theValue);\n\tboolean usesDotNotation(); // Indicates that this virtual column can be referenced with dot notation.\n}"}
{"index": 8271, "repo": "spring-ws-3.0.10.RELEASE", "des": "Subinterface of SoapBody that exposes SOAP 1.", "code": "Interface Soap12Body {\n\tSoap12Fault addClientOrSenderFault(String faultStringOrReason, Locale locale); // Adds a Client/Sender fault to the body.\n\tSoap12Fault addDataEncodingUnknownFault(QName[] subcodes, String reason, Locale locale); // Adds a DataEncodingUnknown fault to the body.\n\tSoap12Fault addMustUnderstandFault(String faultStringOrReason, Locale locale); // Adds a MustUnderstand fault to the body.\n\tSoap12Fault addServerOrReceiverFault(String faultStringOrReason, Locale locale); // Adds a Server/Receiver fault to the body.\n\tSoap12Fault addVersionMismatchFault(String faultStringOrReason, Locale locale); // Adds a VersionMismatch fault to the body.\n\tSoap12Fault getFault(); // Returns the SoapFault of this body.\n}"}
{"index": 17651, "repo": "spring-web-6.0.11", "des": "Abstract base class for Publisher implementations that bridge between event-listener read APIs and Reactive Streams.", "code": "public abstract class AbstractListenerReadPublisher<T> extends Object implements Publisher<T> {\n\tprotected abstract void checkOnDataAvailable(); // Check if data is available and either call onDataAvailable() immediately or schedule a notification.\n\tprotected abstract void discardData(); // Invoked after an I/O read error from the underlying server or after a cancellation signal from the downstream consumer to allow subclasses to discard any current cached data they might have.\n\tString getLogPrefix(); // Return the configured log message prefix.\n\tvoid onAllDataRead(); // Subclasses can call this method to delegate a contain notification when all data has been read.\n\tfinal void onDataAvailable(); // Invoked when reading is possible, either in the same thread after a check via checkOnDataAvailable(), or as a callback from the underlying container.\n\tfinal void onError(Throwable ex); // Subclasses can call this to delegate container error notifications.\n\tprotected abstract T read(); // Read once from the input, if possible.\n\tprotected abstract void readingPaused(); // Invoked when reading is paused due to a lack of demand.\n\tvoid subscribe(Subscriber<? super T> subscriber);\n}"}
{"index": 1123, "repo": "ignite-core-2.15.0", "des": "Base class for exporters that pushes metrics to the external system.", "code": "Class PushMetricsExporterAdapter {\n\tabstract void export(); // Callback to do the export of metrics info.\n\tlong getPeriod();\n\tprotected void onContextInitialized0(IgniteSpiContext spiCtx); // Method to be called in the end of onContextInitialized method.\n\tvoid setExportFilter(Predicate<ReadOnlyMetricRegistry> filter); // Sets export filter.\n\tvoid setMetricRegistry(ReadOnlyMetricManager mreg); // Sets metrics registry that SPI should export.\n\tvoid setPeriod(long period); // Sets period in milliseconds after export() method should be called.\n\tvoid spiStart(@Nullable String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 13347, "repo": "shiro-core-2.0.0-alpha-2", "des": "Interface that encapsulates the creation of LdapContext objects that are used by DefaultLdapRealms to perform authentication attempts and query for authorization data.", "code": "public interface LdapContextFactory {\n\tLdapContext getLdapContext(Object principal, Object credentials); // Creates (or retrieves from a pool) an LdapContext connection bound using the specified principal and credentials.\n\tLdapContext getSystemLdapContext(); // Creates (or retrieves from a pool) a LdapContext connection bound using the system account, or anonymously if no system account is configured.\n}"}
{"index": 11962, "repo": "jena-core-4.9.0", "des": "Base class for representation of XSD duration, time, date/time and related datatype instances.", "code": "public class AbstractDateTime extends Object implements Comparable<AbstractDateTime> {\n\tint compare(AbstractDateTime other); // Comparison function.\n\tint compareTo(AbstractDateTime o); // Normal java comparison function.\n\tboolean equals(Object obj); // Equality function\n\tstatic void normalize(int[] date, int[] timeZone); // If timezone present - normalize dateTime [E Adding durations to dateTimes] Public to allow reuse with type objects.\n}"}
{"index": 13088, "repo": "spring-aop-6.0.11", "des": "FactoryBean implementation that builds an AOP proxy based on beans in a Spring BeanFactory.", "code": "public class ProxyFactoryBean extends ProxyCreatorSupport implements org.springframework.beans.factory.FactoryBean<Object>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.BeanFactoryAware {\n\tprotected void adviceChanged(); // Blow away and recache singleton on an advice change.\n\tObject getObject(); // Return a proxy.\n\tClass<?> getObjectType(); // Return the type of the proxy.\n\tprotected Object getProxy(AopProxy aopProxy); // Return the proxy object to expose.\n\tboolean isSingleton();\n\tvoid setAdvisorAdapterRegistry(AdvisorAdapterRegistry advisorAdapterRegistry); // Specify the AdvisorAdapterRegistry to use.\n\tvoid setAutodetectInterfaces(boolean autodetectInterfaces); // Set whether to autodetect proxy interfaces if none specified.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setFrozen(boolean frozen); // Set whether this config should be frozen.\n\tvoid setInterceptorNames(String... interceptorNames); // Set the list of Advice/Advisor bean names.\n\tvoid setProxyClassLoader(ClassLoader classLoader); // Set the ClassLoader to generate the proxy class in.\n\tvoid setProxyInterfaces(Class<?>[] proxyInterfaces); // Set the names of the interfaces we're proxying.\n\tvoid setSingleton(boolean singleton); // Set the value of the singleton property.\n\tvoid setTargetName(String targetName); // Set the name of the target bean.\n}"}
{"index": 5800, "repo": "iceberg-core-1.3.0", "des": "A data writer capable of writing to multiple specs and partitions that keeps data writers for each seen spec/partition pair open until this writer is closed.", "code": "Class FanoutDataWriter<T> {\n\tprotected void addResult(DataWriteResult result);\n\tprotected DataWriteResult aggregatedResult();\n\tvoid close();\n\tprotected org.apache.iceberg.encryption.EncryptedOutputFile newOutputFile(OutputFileFactory fileFactory, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition);\n\tprotected FileWriter<T,DataWriteResult> newWriter(org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition);\n\tR result(); // Returns a result that contains information about written DataFiles or DeleteFiles.\n\tvoid write(T row, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Writes a row to the provided spec/partition.\n}"}
{"index": 17885, "repo": "spring-web-6.0.11", "des": "Defines a builder that adds a body to the response entity.", "code": "public static interface ResponseEntity.BodyBuilder extends ResponseEntity.HeadersBuilder<ResponseEntity.BodyBuilder> {\n\t<T> ResponseEntity<T> body(T body); // Set the body of the response entity and returns it.\n\tResponseEntity.BodyBuilder contentLength(long contentLength); // Set the length of the body in bytes, as specified by the Content-Length header.\n\tResponseEntity.BodyBuilder contentType(MediaType contentType); // Set the media type of the body, as specified by the Content-Type header.\n}"}
{"index": 13257, "repo": "spring-test-6.0.11", "des": "Utility methods for working with @TestConstructor.", "code": "public abstract class TestConstructorUtils extends Object {\n\tstatic boolean isAutowirableConstructor(Constructor<?> constructor, Class<?> testClass); // Determine if the supplied constructor for the given test class is autowirable.\n\tstatic boolean isAutowirableConstructor(Constructor<?> constructor, Class<?> testClass, PropertyProvider fallbackPropertyProvider); // Determine if the supplied constructor for the given test class is autowirable.\n\tstatic boolean isAutowirableConstructor(Executable executable, Class<?> testClass); // Determine if the supplied executable for the given test class is an autowirable constructor.\n\tstatic boolean isAutowirableConstructor(Executable executable, Class<?> testClass, PropertyProvider fallbackPropertyProvider); // Determine if the supplied executable for the given test class is an autowirable constructor.\n}"}
{"index": 18381, "repo": "opencms-core-15.0", "des": "Class to generate or parse a link to a PDF thumbnail.", "code": "Class CmsPdfThumbnailLink {\n\tjava.lang.String getFormat(); // Gets the image format.\n\tint getHeight(); // Returns the height.\n\tjava.lang.String getLinkWithOptions(); // Gets the link, with the options appended as a request parameter.\n\tint getPage(); // Returns the page.\n\tint getWidth(); // Returns the width.\n}"}
{"index": 16558, "repo": "spring-beans-6.0.11", "des": "Abstract BeanDefinitionParser implementation providing a number of convenience methods and a template method that subclasses must override to provide the actual parsing logic.", "code": "public abstract class AbstractBeanDefinitionParser extends Object implements BeanDefinitionParser {\n\tfinal BeanDefinition parse(Element element, ParserContext parserContext); // Parse the specified Element and register the resulting BeanDefinition(s) with the BeanDefinitionRegistry embedded in the supplied ParserContext.\n\tprotected abstract AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext); // Central template method to actually parse the supplied Element into one or more BeanDefinitions.\n\tprotected void postProcessComponentDefinition(BeanComponentDefinition componentDefinition); // Hook method called after the primary parsing of a BeanComponentDefinition but before the BeanComponentDefinition has been registered with a BeanDefinitionRegistry.\n\tprotected void registerBeanDefinition(BeanDefinitionHolder definition, BeanDefinitionRegistry registry); // Register the supplied bean with the supplied registry.\n\tprotected String resolveId(Element element, AbstractBeanDefinition definition, ParserContext parserContext); // Resolve the ID for the supplied BeanDefinition.\n\tprotected boolean shouldFireEvents(); // Determine whether this parser is supposed to fire a BeanComponentDefinition event after parsing the bean definition.\n\tprotected boolean shouldGenerateId(); // Should an ID be generated instead of read from the passed in Element?\n\tprotected boolean shouldGenerateIdAsFallback(); // Should an ID be generated instead if the passed in Element does not specify an \"id\" attribute explicitly?\n\tprotected boolean shouldParseNameAsAliases(); // Determine whether the element's \"name\" attribute should get parsed as bean definition aliases, i.e.\n}"}
{"index": 12308, "repo": "jena-core-4.9.0", "des": "Predicate used to check if a variable has not been bound.", "code": "public class Unbound extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 12889, "repo": "spring-data-mongodb-4.1.2", "des": "Factory to create MongoDatabase instances from a MongoClient instance.", "code": "public class SimpleMongoClientDatabaseFactory extends MongoDatabaseFactorySupport<com.mongodb.client.MongoClient> implements DisposableBean {\n\tprotected void closeClient(); // Close the client instance.\n\tprotected com.mongodb.client.MongoDatabase doGetMongoDatabase(String dbName); // Get the actual MongoDatabase from the client.\n\tcom.mongodb.client.ClientSession getSession(com.mongodb.ClientSessionOptions options); // Obtain a ClientSession for given ClientSessionOptions.\n}"}
{"index": 12397, "repo": "spring-data-couchbase-5.1.2", "des": "The factory bean to create repositories.", "code": "public class CouchbaseRepositoryFactoryBean<T extends Repository<S,ID>,S,ID extends Serializable> extends RepositoryFactoryBeanSupport<T,S,ID> {\n\tvoid afterPropertiesSet(); // Make sure that the dependencies are set and not null.\n\tprotected RepositoryFactorySupport createRepositoryFactory(); // Returns a factory instance.\n\tprotected CouchbaseRepositoryFactory getFactoryInstance(RepositoryOperationsMapping operationsMapping); // Get the factory instance for the operations.\n\tvoid setCouchbaseOperations(CouchbaseOperations operations); // Set the template reference.\n\tvoid setCouchbaseOperationsMapping(RepositoryOperationsMapping mapping);\n}"}
{"index": 10729, "repo": "spring-tx-6.0.11", "des": "TransactionAttribute implementation that works out whether a given exception should cause transaction rollback by applying a number of rollback rules, both positive and negative.", "code": "public class RuleBasedTransactionAttribute extends DefaultTransactionAttribute implements Serializable {\n\tList<RollbackRuleAttribute> getRollbackRules(); // Return the list of RollbackRuleAttribute objects (never null).\n\tboolean rollbackOn(Throwable ex); // Winning rule is the shallowest rule (that is, the closest in the inheritance hierarchy to the exception).\n\tvoid setRollbackRules(List<RollbackRuleAttribute> rollbackRules); // Set the list of RollbackRuleAttribute objects (and/or NoRollbackRuleAttribute objects) to apply.\n}"}
{"index": 11565, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an ReactiveOAuth2AuthorizedClientProvider for the jwt-bearer grant.", "code": "public final class JwtBearerReactiveOAuth2AuthorizedClientProvider extends Object implements ReactiveOAuth2AuthorizedClientProvider {\n\treactor.core.publisher.Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context); // Attempt to authorize (or re-authorize) the client in the provided context.\n\tvoid setAccessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<JwtBearerGrantRequest> accessTokenResponseClient); // Sets the client used when requesting an access token credential at the Token Endpoint for the jwt-bearer grant.\n\tvoid setClock(Clock clock); // Sets the Clock used in Instant.now(Clock) when checking the access token expiry.\n\tvoid setClockSkew(Duration clockSkew); // Sets the maximum acceptable clock skew, which is used when checking the access token expiry.\n\tvoid setJwtAssertionResolver(Function<OAuth2AuthorizationContext,reactor.core.publisher.Mono<org.springframework.security.oauth2.jwt.Jwt>> jwtAssertionResolver); // Sets the resolver used for resolving the Jwt assertion.\n}"}
{"index": 8131, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for EndpointMapping implementations.", "code": "Class AbstractEndpointMapping {\n\tprotected EndpointInvocationChain createEndpointInvocationChain(MessageContext messageContext, Object endpoint, EndpointInterceptor[] interceptors); // Creates a new EndpointInvocationChain based on the given message context, endpoint, and interceptors.\n\tprotected Object getDefaultEndpoint(); // Returns the default endpoint for this endpoint mapping.\n\tEndpointInvocationChain getEndpoint(MessageContext messageContext); // Look up an endpoint for the given message context, falling back to the default endpoint if no specific one is found.\n\tprotected abstract Object getEndpointInternal(MessageContext messageContext); // Lookup an endpoint for the given request, returning null if no specific one is found.\n\tEndpointInterceptor[] getInterceptors(); // Returns the endpoint interceptors to apply to all endpoints mapped by this endpoint mapping.\n\tint getOrder();\n\tprotected void initApplicationContext(); // Initializes the interceptors.\n\tprotected void initInterceptors(); // Initialize the specified interceptors, adapting them where necessary.\n\tprotected Object resolveStringEndpoint(String endpointName); // Resolves an endpoint string.\n\tvoid setDefaultEndpoint(Object defaultEndpoint); // Sets the default endpoint for this endpoint mapping.\n\tvoid setInterceptors(EndpointInterceptor[] interceptors); // Sets the endpoint interceptors to apply to all endpoints mapped by this endpoint mapping.\n\tvoid setOrder(int order); // Specify the order value for this mapping.\n}"}
{"index": 570, "repo": "ignite-core-2.15.0", "des": "Task that checks whether last checkpoint is applicable for providing history for all groups and partitions that are passed as parameters.", "code": "Class CheckCpHistTask {\n\tMap<org.apache.ignite.internal.CheckCpHistTask.CheckCpHistClosureJob,ClusterNode> map(List<ClusterNode> subgrid, Map<UUID,Map<Integer,Set<Integer>>> arg); // This method is called to map or split grid task into multiple grid jobs.\n\tBoolean reduce(List<ComputeJobResult> results); // Reduces (or aggregates) results received so far into one compound result to be returned to caller via ComputeTaskFuture.get() method.\n\tComputeJobResultPolicy result(ComputeJobResult res, List<ComputeJobResult> rcvd); // Default implementation which will wait for all jobs to complete before calling ComputeTask.reduce(List) method.\n}"}
{"index": 14938, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A RegisteredClientRepository that stores RegisteredClient(s) in-memory.", "code": "public final class InMemoryRegisteredClientRepository extends Object implements RegisteredClientRepository {\n\tRegisteredClient findByClientId(String clientId); // Returns the registered client identified by the provided clientId, or null if not found.\n\tRegisteredClient findById(String id); // Returns the registered client identified by the provided id, or null if not found.\n\tvoid save(RegisteredClient registeredClient); // Saves the registered client.\n}"}
{"index": 2335, "repo": "commons-geometry-euclidean-1.0", "des": "Base class representing an axis-aligned bounding box with minimum and maximum bounding points.", "code": "Class AbstractBounds<P extends EuclideanVector<P>,B extends AbstractBounds<P,B>> {\n\tabstract boolean contains(P pt); // Return true if the given point is strictly within or on the boundary of the bounding box.\n\tabstract boolean contains(P pt, Precision.DoubleEquivalence precision); // Return true if the given point is within or on the boundary of the bounding box, using the given precision context for floating point comparisons.\n\tboolean eq(B other, Precision.DoubleEquivalence precision); // Return true if the current instance and argument are considered equal as evaluated by the given precision context.\n\tP getCentroid(); // Get the centroid, or geometric center, of the bounding box.\n\tP getDiagonal(); // Get the diagonal of the bounding box.\n\tP getMax(); // Get the maximum point.\n\tP getMin(); // Get the minimum point.\n\tabstract boolean hasSize(Precision.DoubleEquivalence precision); // Return true if the bounding box has non-zero size along each coordinate axis, as evaluated by the given precision context.\n\tabstract B intersection(B other); // Return the intersection of this bounding box and the argument, or null if no intersection exists.\n\tabstract boolean intersects(B other); // Return true if any point on the interior or boundary of this instance is also considered to be on the interior or boundary of the argument.\n\tabstract HyperplaneBoundedRegion<P> toRegion(Precision.DoubleEquivalence precision); // Return a hyperplane-bounded region containing the same points as this instance.\n}"}
{"index": 8930, "repo": "hbase-server-3.0.0-alpha-4", "des": "A FlushPolicy that only flushes store larger than a given threshold.", "code": "Class FlushNonSloppyStoresFirstPolicy {\n\tprotected void configureForRegion(HRegion region); // Upon construction, this method will be called with the region to be governed.\n\tCollection<HStore> selectStoresToFlush(); // Returns the stores need to be flushed.\n}"}
{"index": 17266, "repo": "groovy-4.0.13", "des": "Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members", "code": "public class ClassCompletionVerifier extends ClassCodeVisitorSupport {\n\tClassNode getClassNode();\n\tprotected SourceUnit getSourceUnit();\n\tvoid visitBinaryExpression(BinaryExpression expression);\n\tvoid visitCatchStatement(CatchStatement cs);\n\tvoid visitClass(ClassNode node); // Visit a ClassNode.\n\tvoid visitConstantExpression(ConstantExpression expression);\n\tvoid visitConstructor(ConstructorNode node); // Visit a ConstructorNode.\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n\tvoid visitField(FieldNode node); // Visit a FieldNode.\n\tvoid visitGStringExpression(GStringExpression expression);\n\tvoid visitMethod(MethodNode node); // Visit a MethodNode.\n\tvoid visitMethodCallExpression(MethodCallExpression mce);\n\tvoid visitProperty(PropertyNode node); // Visit a PropertyNode.\n}"}
{"index": 17887, "repo": "spring-web-6.0.11", "des": "Strategy interface used by the RestTemplate to determine whether a particular response has an error or not.", "code": "public interface ResponseErrorHandler {\n\tdefault void handleError(URI url, HttpMethod method, ClientHttpResponse response); // Alternative to handleError(ClientHttpResponse) with extra information providing access to the request URL and HTTP method.\n\tvoid handleError(ClientHttpResponse response); // Handle the error in the given response.\n\tboolean hasError(ClientHttpResponse response); // Indicate whether the given response has any errors.\n}"}
{"index": 7169, "repo": "calcite-core-1.34.0", "des": "Defines the \"SYMMETRIC\" and \"ASYMMETRIC\" keywords.", "code": "Enum SqlBetweenOperator.Flag {\n\tstatic SqlBetweenOperator.Flag valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlBetweenOperator.Flag[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10652, "repo": "groovy-all-4.0.13", "des": "Base exception indicating a syntax error.", "code": "public class SyntaxException extends GroovyException {\n\tint getEndColumn();\n\tint getEndLine();\n\tint getLine(); // Retrieve the line upon which the error occurred.\n\tString getMessage();\n\tString getOriginalMessage();\n\tString getSourceLocator();\n\tint getStartColumn(); // Retrieve the column upon which the error occurred.\n\tint getStartLine();\n\tvoid setSourceLocator(String sourceLocator);\n}"}
{"index": 9206, "repo": "fontbox-3.0.0-beta1", "des": "A cmap lookup that performs substitution via the 'GSUB' table.", "code": "Class SubstitutingCmapLookup {\n\tList<Integer> getCharCodes(int gid); // Returns all possible character codes for the given gid, or null if there is none.\n\tint getGlyphId(int characterCode); // Returns the GlyphId linked with the given character code.\n}"}
{"index": 4981, "repo": "commons-collections-3.2.2", "des": "An extended ListIterator that allows concurrent changes to the underlying list.", "code": "Class CursorableLinkedList.Cursor {\n\tvoid add(Object obj); // Adds an object to the list.\n\tprotected void checkModCount(); // Override superclass modCount check, and replace it with our valid flag.\n\tvoid close(); // Mark this cursor as no longer being needed.\n\tint nextIndex(); // Gets the index of the next element to be returned.\n\tprotected void nodeChanged(AbstractLinkedList.Node node); // Handle event from the list when a node has changed.\n\tprotected void nodeInserted(AbstractLinkedList.Node node); // Handle event from the list when a node has been added.\n\tprotected void nodeRemoved(AbstractLinkedList.Node node); // Handle event from the list when a node has been removed.\n\tvoid remove(); // Removes the item last returned by this iterator.\n}"}
{"index": 15834, "repo": "camel-api-4.0.0-RC1", "des": "An interface to represent an object which wishes to be injected with the Resource", "code": "public interface ResourceAware {\n\tResource getResource(); // Gets the Resource.\n\tvoid setResource(Resource resource); // Sets the Resource.\n\tstatic <T> T trySetResource(T object, Resource resource); // Set the Resource resource if the object is an instance of ResourceAware.\n}"}
{"index": 4750, "repo": "hadoop-common-3.3.4", "des": "A cached implementation of DNSToSwitchMapping that takes an raw DNSToSwitchMapping and stores the resolved network location in a cache.", "code": "Class CachedDNSToSwitchMapping {\n\tMap<String,String> getSwitchMap(); // Get the (host x switch) map.\n\tboolean isSingleSwitch(); // Delegate the switch topology query to the raw mapping, via AbstractDNSToSwitchMapping.isMappingSingleSwitch(DNSToSwitchMapping)\n\tvoid reloadCachedMappings(); // Reload all of the cached mappings.\n\tvoid reloadCachedMappings(List<String> names); // Reload cached mappings on specific nodes.\n\tList<String> resolve(List<String> names); // Resolves a list of DNS-names/IP-addresses and returns back a list of switch information (network paths).\n}"}
{"index": 15941, "repo": "spring-rabbit-3.0.6", "des": "Rabbit resource holder, wrapping a RabbitMQ Connection and Channel.", "code": "public class RabbitResourceHolder extends org.springframework.transaction.support.ResourceHolderSupport {\n\tfinal void addChannel(com.rabbitmq.client.Channel channel);\n\tfinal void addChannel(com.rabbitmq.client.Channel channel, Connection connection);\n\tfinal void addConnection(Connection connection);\n\tvoid addDeliveryTag(com.rabbitmq.client.Channel channel, long deliveryTag);\n\tvoid closeAll();\n\tvoid commitAll();\n\tboolean containsChannel(com.rabbitmq.client.Channel channel);\n\tcom.rabbitmq.client.Channel getChannel();\n\tConnection getConnection();\n\tboolean isReleaseAfterCompletion(); // Whether the resources should be released after transaction completion.\n\tvoid rollbackAll();\n\tvoid setRequeueOnRollback(boolean requeueOnRollback); // Set to true to requeue a message on rollback; default true.\n}"}
{"index": 17803, "repo": "spring-web-6.0.11", "des": "Base class for Encoder, Decoder, HttpMessageReader, or HttpMessageWriter that uses a logger and shows potentially sensitive request data.", "code": "public class LoggingCodecSupport extends Object {\n\tboolean isEnableLoggingRequestDetails(); // Whether any logging of values being encoded or decoded is explicitly disabled regardless of log level.\n\tvoid setEnableLoggingRequestDetails(boolean enable); // Whether to log form data at DEBUG level, and headers at TRACE level.\n}"}
{"index": 10513, "repo": "groovy-all-4.0.13", "des": "Transformation for declarative dependency management.", "code": "public class GrabAnnotationTransformation extends ClassCodeVisitorSupport implements ASTTransformation, CompilationUnitAware {\n\tSourceUnit getSourceUnit();\n\tvoid setCompilationUnit(CompilationUnit compilationUnit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n\tvoid visitAnnotations(AnnotatedNode node); // Adds the annotation to the internal target list if a match is found.\n}"}
{"index": 9764, "repo": "commons-math3-3.6.1", "des": "Implementation of the Poisson distribution.", "code": "Class PoissonDistribution {\n\tdouble cumulativeProbability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble getMean(); // Get the mean for the distribution.\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tint getSupportLowerBound(); // Access the lower bound of the support.\n\tint getSupportUpperBound(); // Access the upper bound of the support.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tdouble logProbability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns log(P(X = x)), where log is the natural logarithm.\n\tdouble normalApproximateProbability(int x); // Calculates the Poisson distribution function using a normal approximation.\n\tdouble probability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X = x).\n\tint sample(); // Generate a random value sampled from this distribution.\n}"}
{"index": 16688, "repo": "spring-beans-6.0.11", "des": "Object to hold information and value for an individual bean property.", "code": "public class PropertyValue extends BeanMetadataAttributeAccessor implements Serializable {\n\tboolean equals(Object other);\n\tObject getConvertedValue(); // Return the converted value of this property value, after processed type conversion.\n\tString getName(); // Return the name of the property.\n\tPropertyValue getOriginalPropertyValue(); // Return the original PropertyValue instance for this value holder.\n\tObject getValue(); // Return the value of the property.\n\tboolean isConverted(); // Return whether this holder contains a converted value already (true), or whether the value still needs to be converted (false).\n\tboolean isOptional(); // Return whether this is an optional value, that is, to be ignored when no corresponding property exists on the target class.\n\tvoid setConvertedValue(Object value); // Set the converted value of this property value, after processed type conversion.\n\tvoid setOptional(boolean optional); // Set whether this is an optional value, that is, to be ignored when no corresponding property exists on the target class.\n}"}
{"index": 18696, "repo": "opencms-gwt-15.0", "des": "Resource bundle to access CSS and image resources.", "code": "Interface I_CmsSitemapLayoutBundle {\n\tI_CmsSitemapLayoutBundle.I_CmsClipboardCss clipboardCss(); // Access method.\n\tI_CmsImageBundle images(); // Access method.\n\tI_CmsSitemapLayoutBundle.I_CmsSitemapCss sitemapCss(); // Access method.\n\tI_CmsSitemapItemCss sitemapItemCss(); // Access method.\n}"}
{"index": 8719, "repo": "hadoop-yarn-common-3.3.6", "des": "YARN internal application-related utilities.", "code": "Class Apps {\n\tstatic void addToEnvironment(Map<String,String> environment, String variable, String value, String classPathSeparator);\n\tstatic String crossPlatformify(String var);\n\tstatic Set<String> getEnvVarsFromInputProperty(String propName, String defaultPropValue, org.apache.hadoop.conf.Configuration conf); // Return the list of environment variable names specified in the given property or default string and those specified individually with the propname.VARNAME syntax (e.g., mapreduce.map.env.VARNAME=value).\n\tstatic boolean isApplicationFinalState(org.apache.hadoop.yarn.api.records.YarnApplicationState appState); // Returns whether a given application state is final: FINISHED, FAILED or KILLED.\n\tstatic void setEnvFromInputProperty(Map<String,String> env, String propName, String defaultPropValue, org.apache.hadoop.conf.Configuration conf, String classPathSeparator); // Set environment variables from the given environment input property.\n\tstatic void setEnvFromInputString(Map<String,String> env, String envString, String classPathSeparator);\n\tstatic boolean shouldCountTowardsNodeBlacklisting(int exitStatus);\n\tstatic void shouldHaveNext(String prefix, String s, Iterator<String> it);\n\tstatic void throwParseException(String name, String s);\n\tstatic org.apache.hadoop.yarn.api.records.ApplicationId toAppID(String aid);\n\tstatic org.apache.hadoop.yarn.api.records.ApplicationId toAppID(String prefix, String s, Iterator<String> it);\n}"}
{"index": 1321, "repo": "ignite-core-2.15.0", "des": "Management MBean for WeightedRandomLoadBalancingSpi SPI.", "code": "Interface WeightedRandomLoadBalancingSpiMBean {\n\tint getNodeWeight(); // Gets weight of this node.\n\tboolean isUseWeights(); // Checks whether node weights are considered when doing random load balancing.\n}"}
{"index": 1617, "repo": "pdfbox-3.0.0-beta1", "des": "g: Set the non-stroking colour space to DeviceGray and set the gray level to use for non-stroking operations.", "code": "Class SetNonStrokingDeviceGrayColor {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> arguments); // Process the operator.\n}"}
{"index": 12733, "repo": "spring-data-mongodb-4.1.2", "des": "Simple callback interface to allow customization of a FindPublisher.", "code": "public interface FindPublisherPreparer extends ReadPreferenceAware {\n\tdefault com.mongodb.ReadPreference getReadPreference();\n\tdefault com.mongodb.reactivestreams.client.FindPublisher<org.bson.Document> initiateFind(com.mongodb.reactivestreams.client.MongoCollection<org.bson.Document> collection, Function<com.mongodb.reactivestreams.client.MongoCollection<org.bson.Document>,com.mongodb.reactivestreams.client.FindPublisher<org.bson.Document>> find); // Apply query specific settings to MongoCollection and initate a find operation returning a FindPublisher via the given find function.\n\tcom.mongodb.reactivestreams.client.FindPublisher<org.bson.Document> prepare(com.mongodb.reactivestreams.client.FindPublisher<org.bson.Document> findPublisher); // Prepare the given cursor (apply limits, skips and so on).\n}"}
{"index": 2247, "repo": "hive-exec-4.0.0-alpha-2", "des": "Write KeyBuffer/ValueBuffer pairs to a RCFile.", "code": "Class RCFile.Writer {\n\tvoid append(org.apache.hadoop.io.Writable val); // Append a row of values.\n\tvoid close();\n\tvoid flushBlock(RCFile.KeyBuffer keyBuffer, RCFile.ValueBuffer valueBuffer, int recordLen, int keyLength, int compressedKeyLen); // flush a block out without doing anything except compressing the key part.\n\tlong getLength();\n\tvoid sync(); // create a sync point.\n}"}
{"index": 492, "repo": "ignite-core-2.15.0", "des": "File I/O implementation based on AsynchronousFileChannel.", "code": "Class AsyncFileIO {\n\tvoid clear(); // Truncates current file to zero length and resets current file position to zero.\n\tvoid close(); // Closes current file.\n\tvoid force(); // Forces any updates of this file to be written to the storage device that contains it.\n\tvoid force(boolean withMetadata); // Forces any updates of this file to be written to the storage device that contains it.\n\tint getFileSystemBlockSize();\n\tlong getSparseSize();\n\tMappedByteBuffer map(int sizeBytes); // Allocates memory mapped buffer for this file with given size.\n\tlong position(); // Returns current file position.\n\tvoid position(long newPosition); // Sets new current file position.\n\tint punchHole(long position, int len);\n\tint read(byte[] buf, int off, int length); // Reads a up to length bytes from this file into the buffer.\n\tint read(ByteBuffer destBuf); // Reads a sequence of bytes from this file into the destinationBuffer.\n\tint read(ByteBuffer destBuf, long position); // Reads a sequence of bytes from this file into the destinationBuffer starting from specified file position.\n\tlong size(); // Returns current file size in bytes.\n\tint write(byte[] buf, int off, int len); // Writes length bytes from the buffer starting at offset off to this file.\n\tint write(ByteBuffer srcBuf); // Writes a sequence of bytes to this file from the sourceBuffer.\n\tint write(ByteBuffer srcBuf, long position); // Writes a sequence of bytes to this file from the sourceBuffer starting from specified file position\n}"}
{"index": 1003, "repo": "ignite-core-2.15.0", "des": "All components provided in Ignite configuration can implement this interface.", "code": "Interface LifecycleAware {\n\tvoid start(); // Starts grid component, called on grid start.\n\tvoid stop(); // Stops grid component, called on grid shutdown.\n}"}
{"index": 4514, "repo": "beam-sdks-java-core-2.49.0", "des": "Options that are used to control configuration of the SDK harness.", "code": "Interface SdkHarnessOptions {\n\tstatic java.util.List<java.util.logging.Logger> getConfiguredLoggerFromOptions(SdkHarnessOptions loggingOptions); // Configure log manager's default log level and log level overrides from the sdk harness options, and return the list of configured loggers.\n\tSdkHarnessOptions.LogLevel getDefaultSdkHarnessLogLevel(); // This option controls the default log level of all loggers without a log level override.\n\tint getGroupingTableMaxSizeMb(); // Size (in MB) of each grouping table used to pre-combine elements.\n\tjava.util.List<java.lang.String> getJdkAddOpenModules(); // Open modules needed for reflection that access JDK internals with Java 9+\n\tboolean getLogMdc(); // Whether to include SLF4J MDC in log entries.\n\t@NonNegative int getMaxCacheMemoryUsageMb(); // Size (in MB) for the process wide cache within the SDK harness.\n\tjava.lang.Class<? extends SdkHarnessOptions.MaxCacheMemoryUsageMb> getMaxCacheMemoryUsageMbClass(); // An instance of this class will be used to specify the maximum amount of memory to allocate to a cache within an SDK harness instance.\n\t@NonNegative float getMaxCacheMemoryUsagePercent(); // Size (in % [0 - 100]) for the process wide cache within the SDK harness.\n\tSdkHarnessOptions.SdkHarnessLogLevelOverrides getSdkHarnessLogLevelOverrides(); // This option controls the log levels for specifically named loggers.\n\tvoid setDefaultSdkHarnessLogLevel(SdkHarnessOptions.LogLevel logLevel);\n\tvoid setGroupingTableMaxSizeMb(int value);\n\tvoid setJdkAddOpenModules(java.util.List<java.lang.String> options);\n\tvoid setLogMdc(boolean value);\n\tvoid setMaxCacheMemoryUsageMb(@NonNegative int value);\n\tvoid setMaxCacheMemoryUsageMbClass(java.lang.Class<? extends SdkHarnessOptions.MaxCacheMemoryUsageMb> kls);\n\tvoid setMaxCacheMemoryUsagePercent(@NonNegative float value);\n\tvoid setSdkHarnessLogLevelOverrides(SdkHarnessOptions.SdkHarnessLogLevelOverrides value);\n}"}
{"index": 2159, "repo": "hive-exec-4.0.0-alpha-2", "des": "Context information provided by Hive to implementations of HiveSemanticAnalyzerHook.", "code": "Interface HiveSemanticAnalyzerHookContext {\n\tString getCommand();\n\tHive getHive();\n\tHiveOperation getHiveOperation();\n\tSet<ReadEntity> getInputs(); // The following methods will only be available to hooks executing postAnalyze.\n\tString getIpAddress();\n\tSet<WriteEntity> getOutputs();\n\tString getUserName();\n\tvoid setCommand(String command);\n\tvoid setHiveOperation(HiveOperation commandType);\n\tvoid setIpAddress(String ipAddress);\n\tvoid setUserName(String userName);\n\tvoid update(BaseSemanticAnalyzer sem); // This should be called after the semantic analyzer completes.\n}"}
{"index": 8023, "repo": "commons-compress-1.23.0", "des": "Adds Unix file permission and UID/GID fields as well as symbolic link handling.", "code": "Class AsiExtraField {\n\tObject clone();\n\tbyte[] getCentralDirectoryData(); // Delegate to local file data.\n\tZipShort getCentralDirectoryLength(); // Delegate to local file data.\n\tint getGroupId(); // Get the group id.\n\tZipShort getHeaderId(); // The Header-ID.\n\tString getLinkedFile(); // Name of linked file\n\tbyte[] getLocalFileDataData(); // The actual data to put into local file data - without Header-ID or length specifier.\n\tZipShort getLocalFileDataLength(); // Length of the extra field in the local file data - without Header-ID or length specifier.\n\tint getMode(); // File mode of this file.\n\tprotected int getMode(int mode); // Get the file mode for given permissions with the correct file type.\n\tint getUserId(); // Get the user id.\n\tboolean isDirectory(); // Is this entry a directory?\n\tboolean isLink(); // Is this entry a symbolic link?\n\tvoid parseFromCentralDirectoryData(byte[] buffer, int offset, int length); // Doesn't do anything special since this class always uses the same data in central directory and local file data.\n\tvoid parseFromLocalFileData(byte[] data, int offset, int length); // Populate data from this array as if it was in local file data.\n\tvoid setDirectory(boolean dirFlag); // Indicate whether this entry is a directory.\n\tvoid setGroupId(int gid); // Set the group id.\n\tvoid setLinkedFile(String name); // Indicate that this entry is a symbolic link to the given file name.\n\tvoid setMode(int mode); // File mode of this file.\n\tvoid setUserId(int uid); // Set the user id.\n}"}
{"index": 9489, "repo": "curator-recipes-5.5.0", "des": "Controls which nodes a TreeCache processes.", "code": "Interface TreeCacheSelector {\n\tboolean acceptChild(String fullPath); // Return true if this node should be returned from the cache\n\tboolean traverseChildren(String fullPath); // Return true if children of this path should be cached.\n}"}
{"index": 4952, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that returns true if any of the predicates return true.", "code": "Class AnyPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning true if any predicate returns true.\n\tstatic Predicate getInstance(Collection predicates); // Factory to create the predicate.\n\tstatic Predicate getInstance(Predicate[] predicates); // Factory to create the predicate.\n\tPredicate[] getPredicates(); // Gets the predicates, do not modify the array.\n}"}
{"index": 5583, "repo": "org.apache.karaf.main-2.4.4", "des": "This class provides helper methods to support developement classpaths.", "code": "Class DevClassPathHelper {\n\tstatic String[] getArrayFromList(String prop); // Returns the result of converting a list of comma-separated tokens into an array\n\tstatic String[] getDevClassPath(String id); // Returns a list of classpath elements for the specified bundle symbolic name.\n\tstatic String[] getDevClassPath(String id, Dictionary<String,String> properties); // Returns a list of classpath elements for the specified bundle symbolic name.\n\tstatic boolean inDevelopmentMode(); // Indicates the development mode.\n}"}
{"index": 13537, "repo": "spring-messaging-6.0.11", "des": "Contract for mapping conditions to messages.", "code": "public interface MessageCondition<T> {\n\tT combine(T other); // Define the rules for combining this condition with another.\n\tint compareTo(T other, Message<?> message); // Compare this condition to another in the context of a specific message.\n\tT getMatchingCondition(Message<?> message); // Check if this condition matches the given Message and returns a potentially new condition with content tailored to the current message.\n}"}
{"index": 3819, "repo": "hbase-client-3.0.0-alpha-4", "des": "A cluster connection encapsulating lower level individual connections to actual servers and a connection to zookeeper.", "code": "Interface Connection {\n\tvoid clearRegionLocationCache(); // Clear all the entries in the region location cache, for all the tables.\n\tvoid close();\n\tAdmin getAdmin(); // Retrieve an Admin implementation to administer an HBase cluster.\n\tBufferedMutator getBufferedMutator(BufferedMutatorParams params); // Retrieve a BufferedMutator for performing client-side buffering of writes.\n\tdefault BufferedMutator getBufferedMutator(TableName tableName); // Retrieve a BufferedMutator for performing client-side buffering of writes.\n\tdefault String getClusterId(); // Returns the cluster ID unique to this HBase cluster.\n\torg.apache.hadoop.conf.Configuration getConfiguration(); // Returns Configuration instance being used by this Connection instance.\n\tdefault Hbck getHbck(); // Retrieve an Hbck implementation to fix an HBase cluster.\n\tdefault Hbck getHbck(ServerName masterServer); // Retrieve an Hbck implementation to fix an HBase cluster.\n\tRegionLocator getRegionLocator(TableName tableName); // Retrieve a RegionLocator implementation to inspect region information on a table.\n\tdefault Table getTable(TableName tableName); // Retrieve a Table implementation for accessing a table.\n\tdefault Table getTable(TableName tableName, ExecutorService pool); // Retrieve a Table implementation for accessing a table.\n\tTableBuilder getTableBuilder(TableName tableName, ExecutorService pool); // Returns an TableBuilder for creating Table.\n\tboolean isClosed(); // Returns whether the connection is closed or not.\n\tAsyncConnection toAsyncConnection(); // Convert this connection to an AsyncConnection.\n}"}
{"index": 11620, "repo": "spring-websocket-6.0.11", "des": "Represents a WebSocket close status code and reason.", "code": "public final class CloseStatus extends Object implements Serializable {\n\tboolean equals(Object other);\n\tboolean equalsCode(CloseStatus other);\n\tint getCode(); // Return the status code.\n\tString getReason(); // Return the reason, or null if none.\n\tCloseStatus withReason(String reason); // Create a new CloseStatus from this one with the specified reason.\n}"}
{"index": 109, "repo": "commons-collections4-4.4", "des": "Decorates another Bag to comply with the Collection contract.", "code": "Class CollectionBag<E> {\n\tboolean add(E object); // (Change) Adds one copy of the specified object to the Bag.\n\tboolean add(E object, int count); // (Change) Adds count copies of the specified object to the Bag.\n\tboolean addAll(Collection<? extends E> coll);\n\tstatic <E> Bag<E> collectionBag(Bag<E> bag); // Factory method to create a bag that complies to the Collection contract.\n\tboolean containsAll(Collection<?> coll); // (Change) Returns true if the bag contains all elements in the given collection, not respecting cardinality.\n\tboolean remove(Object object); // (Change) Removes the first occurrence of the given object from the bag.\n\tboolean removeAll(Collection<?> coll); // (Change) Remove all elements represented in the given collection, not respecting cardinality.\n\tboolean retainAll(Collection<?> coll); // (Change) Remove any members of the bag that are not in the given collection, not respecting cardinality.\n}"}
{"index": 12701, "repo": "spring-data-mongodb-4.1.2", "des": "Default implementation of ReactiveIndexOperations.", "code": "public class DefaultReactiveIndexOperations extends Object implements ReactiveIndexOperations {\n\treactor.core.publisher.Mono<Void> alterIndex(String name, IndexOptions options); // Alters the index with given name.\n\treactor.core.publisher.Mono<Void> dropAllIndexes(); // Drops all indices from this collection.\n\treactor.core.publisher.Mono<Void> dropIndex(String name); // Drops an index from this collection.\n\treactor.core.publisher.Mono<String> ensureIndex(IndexDefinition indexDefinition); // Ensure that an index for the provided IndexDefinition exists for the collection indicated by the entity class.\n\treactor.core.publisher.Flux<IndexInfo> getIndexInfo(); // Returns the index information on the collection.\n}"}
{"index": 2053, "repo": "hive-exec-4.0.0-alpha-2", "des": "Classes implementing ErrorHeuristic are able to generate a possible cause and solution for Hive jobs that have failed by examining the query, task log files, and the job configuration.", "code": "Interface ErrorHeuristic {\n\tErrorAndSolution getErrorAndSolution(); // Examine the hive query, job configuration, and the lines from the task log seen so far though processLogLine() and generate a possible cause/solution.\n\tvoid init(String query, org.apache.hadoop.mapred.JobConf jobConf); // Initialize this error heuristic.\n\tvoid processLogLine(String line); // Process the given log line.\n}"}
{"index": 1260, "repo": "ignite-core-2.15.0", "des": "Memory provider implementation based on unsafe memory access.", "code": "Class UnsafeMemoryProvider {\n\tvoid initialize(long[] sizes);\n\tDirectMemoryRegion nextRegion(); // Attempts to allocate next memory region.\n\tvoid shutdown(boolean deallocate); // Shuts down the provider.\n}"}
{"index": 5829, "repo": "hbase-hadoop2-compat-2.5.5-hadoop3", "des": "Extended histogram implementation with metric range counters.", "code": "Class MutableRangeHistogram {\n\tlong getCount();\n\tabstract long[] getRanges(); // Returns the ranges to be counted\n\tabstract String getRangeType(); // Returns the type of range histogram size or time\n\tvoid snapshot(MetricsRecordBuilder metricsRecordBuilder, boolean all);\n\tvoid updateSnapshotRangeMetrics(MetricsRecordBuilder metricsRecordBuilder, Snapshot snapshot);\n}"}
{"index": 9505, "repo": "commons-math3-3.6.1", "des": "This class implements the dimension-independent parts of SubHyperplane.", "code": "Class AbstractSubHyperplane<S extends Space,T extends Space> {\n\tAbstractSubHyperplane<S,T> applyTransform(Transform<S,T> transform); // Apply a transform to the instance.\n\tprotected abstract AbstractSubHyperplane<S,T> buildNew(Hyperplane<S> hyper, Region<T> remaining); // Build a sub-hyperplane from an hyperplane and a region.\n\tAbstractSubHyperplane<S,T> copySelf(); // Copy the instance.\n\tHyperplane<S> getHyperplane(); // Get the underlying hyperplane.\n\tRegion<T> getRemainingRegion(); // Get the remaining region of the hyperplane.\n\tdouble getSize(); // Get the size of the instance.\n\tboolean isEmpty(); // Check if the instance is empty.\n\tAbstractSubHyperplane<S,T> reunite(SubHyperplane<S> other); // Compute the union of the instance and another sub-hyperplane.\n\tSide side(Hyperplane<S> hyper); // Deprecated.\n\tabstract SubHyperplane.SplitSubHyperplane<S> split(Hyperplane<S> hyper); // Split the instance in two parts by an hyperplane.\n}"}
{"index": 1702, "repo": "samza-api-1.8.0", "des": "A StreamJob runs Samza StreamTasks in its specific environment.", "code": "Interface StreamJob {\n\tApplicationStatus getStatus(); // Get current ApplicationStatus of the job\n\tStreamJob kill(); // Kill this job immediately.\n\tStreamJob submit(); // Submit this job to be run.\n\tApplicationStatus waitForFinish(long timeoutMs); // Block on this job until either it finishes or reaches its timeout value\n\tApplicationStatus waitForStatus(ApplicationStatus status, long timeoutMs); // Block on this job until either it transitions to the specified status or reaches it timeout value\n}"}
{"index": 6493, "repo": "exoplayer-core-2.9.6", "des": "Initialization data for one or more DRM schemes.", "code": "Class DrmInitData {\n\tint compare(DrmInitData.SchemeData first, DrmInitData.SchemeData second);\n\tDrmInitData copyWithSchemeType(java.lang.String schemeType); // Returns a copy with the specified protection scheme type.\n\tstatic DrmInitData createSessionCreationData(DrmInitData manifestData, DrmInitData mediaData); // Merges DrmInitData obtained from a media manifest and a media stream.\n\tint describeContents();\n\tboolean equals(java.lang.Object obj);\n\tDrmInitData.SchemeData get(int index); // Retrieves the DrmInitData.SchemeData at a given index.\n\tvoid writeToParcel(android.os.Parcel dest, int flags);\n}"}
{"index": 15275, "repo": "spring-boot-3.1.1", "des": "Type of HTTP message to consider for encoding configuration.", "code": "public static enum Encoding.Type extends Enum<Encoding.Type> {\n\tstatic Encoding.Type valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Encoding.Type[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 16909, "repo": "spring-integration-ip-6.1.2", "des": "Abstract class for client connection factories; client connection factories establish outgoing connections.", "code": "public abstract class AbstractClientConnectionFactory extends AbstractConnectionFactory {\n\tprotected TcpConnectionSupport buildNewConnection();\n\tvoid enableManualListenerRegistration(); // Set whether to automatically (default) or manually add a TcpListener to the connections created by this factory.\n\tvoid forceClose(TcpConnection connection); // Force close the connection and null the field if it's a shared connection.\n\tTcpConnectionSupport getConnection(); // Obtain a connection - if AbstractConnectionFactory.setSingleUse(boolean) was called with true, a new connection is returned; otherwise a single connection is reused for all requests while the connection remains open.\n\tprotected Predicate<TcpConnectionSupport> getConnectionTest(); // Get a Predicate that will be invoked to test a new connection; return true to accept the connection, false the reject.\n\tprotected Duration getConnectTimeout();\n\tprotected TcpConnectionSupport getTheConnection();\n\tprotected void initializeConnection(TcpConnectionSupport connection, Socket socket); // Transfer attributes such as (de)serializers, singleUse etc to a new connection.\n\tprotected TcpConnectionSupport obtainConnection();\n\tprotected final TcpConnectionSupport obtainNewConnection();\n\tprotected final TcpConnectionSupport obtainSharedConnection();\n\tvoid setConnectionTest(Predicate<TcpConnectionSupport> connectionTest); // Set a Predicate that will be invoked to test a new connection; return true to accept the connection, false the reject.\n\tvoid setConnectTimeout(int connectTimeout); // Set the connection timeout in seconds.\n\tprotected void setTheConnection(TcpConnectionSupport theConnection);\n}"}
{"index": 15364, "repo": "spring-boot-3.1.1", "des": "An opinionated WebApplicationInitializer to run a SpringApplication from a traditional WAR deployment.", "code": "public abstract class SpringBootServletInitializer extends Object implements org.springframework.web.WebApplicationInitializer {\n\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder builder); // Configure the application.\n\tprotected org.springframework.web.context.WebApplicationContext createRootApplicationContext(jakarta.servlet.ServletContext servletContext);\n\tprotected SpringApplicationBuilder createSpringApplicationBuilder(); // Returns the SpringApplicationBuilder that is used to configure and create the SpringApplication.\n\tprotected void deregisterJdbcDrivers(jakarta.servlet.ServletContext servletContext); // Deregisters the JDBC drivers that were registered by the application represented by the given servletContext.\n\tvoid onStartup(jakarta.servlet.ServletContext servletContext);\n\tprotected org.springframework.web.context.WebApplicationContext run(SpringApplication application); // Called to run a fully configured SpringApplication.\n\tprotected final void setRegisterErrorPageFilter(boolean registerErrorPageFilter); // Set if the ErrorPageFilter should be registered.\n}"}
{"index": 16098, "repo": "shiro-web-2.0.0-alpha-2", "des": "A WebSubject represents a Subject instance that was acquired as a result of an incoming ServletRequest.", "code": "public interface WebSubject extends org.apache.shiro.subject.Subject, RequestPairSource {\n\tjavax.servlet.ServletRequest getServletRequest(); // Returns the ServletRequest accessible when the Subject instance was created.\n\tjavax.servlet.ServletResponse getServletResponse(); // Returns the ServletResponse accessible when the Subject instance was created.\n}"}
{"index": 12184, "repo": "jena-core-4.9.0", "des": "Can be used in two arg form (X, P) or three arg form (X, P, V).", "code": "public class NoValue extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n\tboolean isMonotonic(); // Flag as non-monotonic so the guard clause will get rerun after deferal as part of a non-trivial conflict set.\n}"}
{"index": 6189, "repo": "jackson-databind-2.15.2", "des": "Helper container used for resolving serializers for dynamic (possibly but not necessarily polymorphic) properties: properties whose type is not forced to use dynamic (declared) type and that are not final.", "code": "Class PropertySerializerMap {\n\tPropertySerializerMap.SerializerAndMapResult addSerializer(Class<?> type, JsonSerializer<Object> serializer); // Method that can be used to 'register' a serializer that caller has resolved without help of this map.\n\tPropertySerializerMap.SerializerAndMapResult addSerializer(JavaType type, JsonSerializer<Object> serializer);\n\tstatic PropertySerializerMap emptyForProperties();\n\tstatic PropertySerializerMap emptyForRootValues();\n\tPropertySerializerMap.SerializerAndMapResult findAndAddKeySerializer(Class<?> type, SerializerProvider provider, BeanProperty property); // Method called if initial lookup fails, when looking for a key serializer (possible attached indirectly to a property) Will both find serializer and construct new map instance if warranted, and return both.\n\tPropertySerializerMap.SerializerAndMapResult findAndAddPrimarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property); // Method called if initial lookup fails, when looking for a primary serializer (one that is directly attached to a property).\n\tPropertySerializerMap.SerializerAndMapResult findAndAddPrimarySerializer(JavaType type, SerializerProvider provider, BeanProperty property);\n\tPropertySerializerMap.SerializerAndMapResult findAndAddRootValueSerializer(Class<?> type, SerializerProvider provider); // Method called if initial lookup fails, when looking for a root value serializer: one that is not directly attached to a property, but needs to have TypeSerializer wrapped around it.\n\tPropertySerializerMap.SerializerAndMapResult findAndAddRootValueSerializer(JavaType type, SerializerProvider provider);\n\tPropertySerializerMap.SerializerAndMapResult findAndAddSecondarySerializer(Class<?> type, SerializerProvider provider, BeanProperty property); // Method called if initial lookup fails, when looking for a non-primary serializer (one that is not directly attached to a property).\n\tPropertySerializerMap.SerializerAndMapResult findAndAddSecondarySerializer(JavaType type, SerializerProvider provider, BeanProperty property);\n\tabstract PropertySerializerMap newWith(Class<?> type, JsonSerializer<Object> serializer);\n\tabstract JsonSerializer<Object> serializerFor(Class<?> type); // Main lookup method.\n}"}
{"index": 14894, "repo": "spring-data-keyvalue-3.1.2", "des": "KeyValueAdapter unifies access and shields the underlying key/value specific implementation.", "code": "public interface KeyValueAdapter extends DisposableBean {\n\tvoid clear(); // Removes all objects.\n\tboolean contains(Object id, String keyspace); // Check if a object with given id exists in keyspace.\n\tlong count(String keyspace); // Count number of objects within keyspace.\n\tlong count(KeyValueQuery<?> query, String keyspace); // Count all matching objects within keyspace.\n\tObject delete(Object id, String keyspace); // Delete and return the object with given type and id.\n\t<T> T delete(Object id, String keyspace, Class<T> type); // Delete and return the object with given type and id.\n\tvoid deleteAllOf(String keyspace); // Remove all objects of given type.\n\tCloseableIterator<Map.Entry<Object,Object>> entries(String keyspace); // Returns a CloseableIterator that iterates over all entries.\n\tdefault <T> CloseableIterator<Map.Entry<Object,T>> entries(String keyspace, Class<T> type); // Returns a CloseableIterator that iterates over all entries.\n\tdefault boolean exists(KeyValueQuery<?> query, String keyspace); // Determine whether result of given KeyValueQuery within keyspace contains at least one element.\n\tdefault Iterable<?> find(KeyValueQuery<?> query, String keyspace); // Find all matching objects within keyspace.\n\t<T> Iterable<T> find(KeyValueQuery<?> query, String keyspace, Class<T> type);\n\tObject get(Object id, String keyspace); // Get the object with given id from keyspace.\n\t<T> T get(Object id, String keyspace, Class<T> type); // Get the object with given id from keyspace.\n\tIterable<?> getAllOf(String keyspace); // Get all elements for given keyspace.\n\tdefault <T> Iterable<T> getAllOf(String keyspace, Class<T> type); // Get all elements for given keyspace.\n\tObject put(Object id, Object item, String keyspace); // Add object with given id to keyspace.\n}"}
{"index": 13425, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required to establish a connection to a MongoDB service.", "code": "public interface MongoConnectionDetails extends ConnectionDetails {\n\tcom.mongodb.ConnectionString getConnectionString(); // The ConnectionString for MongoDB.\n\tdefault MongoConnectionDetails.GridFs getGridFs(); // GridFS configuration.\n}"}
{"index": 3021, "repo": "tink-1.10.0", "des": "This key manager generates new JwtRsaSsaPssPrivateKey keys and produces new instances of JwtPublicKeySign.", "code": "Class JwtRsaSsaPssSignKeyManager {\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tJwtRsaSsaPssPublicKey getPublicKey(JwtRsaSsaPssPrivateKey privKeyProto); // Creates a public key from the given private key.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<JwtRsaSsaPssKeyFormat,JwtRsaSsaPssPrivateKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tJwtRsaSsaPssPrivateKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void registerPair(boolean newKeyAllowed); // Registers the RsaSsaPssSignKeyManager and the RsaSsaPssVerifyKeyManager with the registry, so that the the RsaSsaPss-Keys can be used with Tink.\n\tvoid validateKey(JwtRsaSsaPssPrivateKey privKey); // Checks if the given keyProto is a valid key.\n}"}
{"index": 8175, "repo": "spring-ws-3.0.10.RELEASE", "des": "Populates the X509 authorities via an UserDetailsService.", "code": "Class DaoX509AuthoritiesPopulator {\n\tvoid afterPropertiesSet();\n\torg.springframework.security.core.userdetails.UserDetails getUserDetails(X509Certificate clientCert); // Obtains the granted authorities for the specified user.\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n\tvoid setSubjectDNRegex(String subjectDNRegex); // Sets the regular expression which will by used to extract the user name from the certificate's Subject DN.\n\tvoid setUserDetailsService(org.springframework.security.core.userdetails.UserDetailsService userDetailsService);\n}"}
{"index": 14903, "repo": "spring-data-keyvalue-3.1.2", "des": "Interface that specifies a basic set of key/value operations.", "code": "public interface KeyValueOperations extends DisposableBean {\n\tlong count(Class<?> type); // Total number of elements with given type available.\n\tlong count(KeyValueQuery<?> query, Class<?> type); // Total number of elements matching given query.\n\tvoid delete(Class<?> type); // Remove all elements of type.\n\t<T> T delete(Object id, Class<T> type); // Delete item of type with given id.\n\t<T> T delete(T objectToDelete);\n\t<T> T execute(KeyValueCallback<T> action); // Execute operation against underlying store.\n\tboolean exists(KeyValueQuery<?> query, Class<?> type); // Determine whether result of given KeyValueQuery contains at least one element.\n\t<T> Iterable<T> find(KeyValueQuery<?> query, Class<T> type); // Get all elements matching the given query.\n\t<T> Iterable<T> findAll(Class<T> type); // Get all elements of given type.\n\t<T> Iterable<T> findAll(Sort sort, Class<T> type); // Get all elements ordered by sort.\n\t<T> Optional<T> findById(Object id, Class<T> type); // Get element of given type with given id.\n\t<T> Iterable<T> findInRange(long offset, int rows, Class<T> type); // Get all elements in given range.\n\t<T> Iterable<T> findInRange(long offset, int rows, Sort sort, Class<T> type); // Get all elements in given range ordered by sort.\n\tMappingContext<?,?> getMappingContext();\n\t<T> T insert(Object id, T objectToInsert); // Add object with given id.\n\t<T> T insert(T objectToInsert); // Add given object.\n\t<T> T update(Object id, T objectToUpdate);\n\t<T> T update(T objectToUpdate);\n}"}
{"index": 15203, "repo": "spring-boot-3.1.1", "des": "Event published as late as conceivably possible to indicate that the application is ready to service requests.", "code": "public class ApplicationReadyEvent extends SpringApplicationEvent {\n\torg.springframework.context.ConfigurableApplicationContext getApplicationContext(); // Return the application context.\n\tDuration getTimeTaken(); // Return the time taken for the application to be ready to service requests, or null if unknown.\n}"}
{"index": 16460, "repo": "spring-batch-infrastructure-5.0.2", "des": "Interface for event readers which support treating XML fragments as standalone XML documents by wrapping the fragments with StartDocument and EndDocument events.", "code": "public interface FragmentEventReader extends XMLEventReader {\n\tvoid markFragmentProcessed(); // Tells the event reader the current fragment has been processed.\n\tvoid markStartFragment(); // Tells the event reader its cursor position is exactly before the fragment.\n\tvoid reset(); // Reset the state of the fragment reader - make it forget it assumptions about current position of cursor (e.g.\n}"}
{"index": 1561, "repo": "pdfbox-3.0.0-beta1", "des": "Contains information for a page label range.", "code": "Class PDPageLabelRange {\n\tCOSDictionary getCOSObject(); // Returns the underlying dictionary.\n\tString getPrefix(); // Returns the page label prefix for this page range.\n\tint getStart(); // Returns the start value for page numbering in this page range.\n\tString getStyle(); // Returns the numbering style for this page range.\n\tvoid setPrefix(String prefix); // Sets the page label prefix for this page range.\n\tvoid setStart(int start); // Sets the start value for page numbering in this page range.\n\tvoid setStyle(String style); // Sets the numbering style for this page range.\n}"}
{"index": 17619, "repo": "spring-ldap-core-3.1.0", "des": "Holds all information regarding a Ldap query to be performed.", "code": "public interface LdapQuery {\n\tString[] attributes(); // Get the attributes to return.\n\tName base(); // Get the search base.\n\tInteger countLimit(); // Get the count limit.\n\tFilter filter(); // Get the filter.\n\tSearchScope searchScope(); // Get the search scope.\n\tInteger timeLimit(); // Get the time limit.\n}"}
{"index": 11873, "repo": "spring-kafka-3.0.9", "des": "An event that is emitted when a container is no longer idle if configured to publish idle events.", "code": "public class ListenerContainerNoLongerIdleEvent extends KafkaEvent {\n\torg.apache.kafka.clients.consumer.Consumer<?,?> getConsumer(); // Retrieve the consumer.\n\tlong getIdleTime(); // How long the container was idle.\n\tString getListenerId(); // The id of the listener (if @KafkaListener) or the container bean name.\n\tCollection<org.apache.kafka.common.TopicPartition> getTopicPartitions(); // The TopicPartitions the container is listening to.\n}"}
{"index": 18801, "repo": "lucene-core-9.7.0", "des": "This exception is thrown when Lucene detects an index that is newer than this Lucene version.", "code": "Class IndexFormatTooNewException {\n\tint getMaxVersion(); // Returns the maximum version accepted\n\tint getMinVersion(); // Returns the minimum version accepted\n\tString getResourceDescription(); // Returns a description of the file that was too new\n\tint getVersion(); // Returns the version of the file that was too new\n}"}
{"index": 11885, "repo": "spring-kafka-3.0.9", "des": "A wrapper for micrometer timers when available on the class path.", "code": "public final class MicrometerHolder extends Object {\n\tvoid destroy(); // Remove the timers.\n\tvoid failure(Object sample, String exception); // Record failure.\n\tvoid failure(Object sample, String exception, Object record); // Record failure.\n\tObject start(); // Start the timer.\n\tvoid success(Object sample); // Record success.\n\tvoid success(Object sample, Object record); // Record success.\n}"}
{"index": 7852, "repo": "cassandra-all-4.1.2", "des": "Provides context information for a particular user defined function.", "code": "Interface UDFContext {\n\tTupleValue newArgTupleValue(int argNum); // Creates a new TupleValue instance for an argument.\n\tTupleValue newArgTupleValue(java.lang.String argName); // Creates a new TupleValue instance for an argument.\n\tUDTValue newArgUDTValue(int argNum); // Creates a new UDTValue instance for an argument.\n\tUDTValue newArgUDTValue(java.lang.String argName); // Creates a new UDTValue instance for an argument.\n\tTupleValue newReturnTupleValue(); // Creates a new TupleValue instance for the return value.\n\tUDTValue newReturnUDTValue(); // Creates a new UDTValue instance for the return value.\n\tTupleValue newTupleValue(java.lang.String cqlDefinition); // Creates a new TupleValue instance for the CQL type definition.\n\tUDTValue newUDTValue(java.lang.String udtName); // Creates a new UDTValue instance by name in the same keyspace.\n}"}
{"index": 7164, "repo": "calcite-core-1.34.0", "des": "Concrete implementation of SqlAggFunction.", "code": "Class SqlBasicAggFunction {\n\tboolean allowsNullTreatment(); // Returns whether this aggregate function allows specifying null treatment (RESPECT NULLS or IGNORE NULLS).\n\tboolean allowsSeparator(); // Returns whether this aggregate function allows 'SEPARATOR string' among its arguments.\n\tstatic SqlBasicAggFunction create(SqlKind kind, SqlReturnTypeInference returnTypeInference, SqlOperandTypeChecker operandTypeChecker); // Creates a SqlBasicAggFunction whose name is the same as its kind.\n\tstatic SqlBasicAggFunction create(String name, SqlKind kind, SqlReturnTypeInference returnTypeInference, SqlOperandTypeChecker operandTypeChecker); // Creates a SqlBasicAggFunction.\n\tRelDataType deriveType(SqlValidator validator, SqlValidatorScope scope, SqlCall call); // Derives the type of a call to this operator.\n\tOptionality getDistinctOptionality(); // Returns whether this aggregate function allows the DISTINCT keyword.\n\tSqlOperandTypeChecker getOperandTypeChecker();\n\tSqlReturnTypeInference getReturnTypeInference(); // Returns the return type inference strategy for this operator, or null if return type inference is implemented by a subclass override.\n\tSqlSyntax getSyntax(); // Returns the syntactic type of this operator, never null.\n\tboolean isPercentile(); // Returns whether this aggregate function is a PERCENTILE function.\n\tSqlBasicAggFunction withAllowsNullTreatment(boolean allowsNullTreatment); // Sets allowsNullTreatment().\n\tSqlBasicAggFunction withAllowsSeparator(boolean allowsSeparator); // Sets allowsSeparator().\n\tSqlBasicAggFunction withFunctionType(SqlFunctionCategory category); // Sets SqlFunction.getFunctionType().\n\tSqlBasicAggFunction withGroupOrder(Optionality groupOrder); // Sets SqlAggFunction.requiresGroupOrder().\n\tSqlAggFunction withName(String name); // Sets SqlOperator.getName().\n\tSqlBasicAggFunction withPercentile(boolean percentile); // Sets isPercentile().\n\tSqlBasicAggFunction withSyntax(SqlSyntax syntax); // Sets getSyntax().\n}"}
{"index": 12841, "repo": "spring-data-mongodb-4.1.2", "des": "Reactive specific implementation of MongoQueryMethod.", "code": "public class ReactiveMongoQueryMethod extends MongoQueryMethod {\n\tprotected MongoParameters createParameters(Method method);\n\tboolean hasReactiveWrapperParameter(); // Check if the given QueryMethod receives a reactive parameter wrapper as one of its parameters.\n\tboolean isCollectionQuery();\n\tboolean isGeoNearQuery(); // Returns whether the query is a geo near query.\n\tboolean isModifyingQuery();\n\tboolean isQueryForEntity();\n\tboolean isStreamQuery();\n\tvoid verify(); // Verify the actual QueryMethod is valid in terms of supported return and parameter types.\n}"}
{"index": 7886, "repo": "nifi-framework-core-api-1.22.0", "des": "Represents a start/stop lifecyle for a component.", "code": "Interface LifeCycle {\n\tboolean isRunning();\n\tvoid start(); // Initiates the start state of the lifecyle.\n\tvoid stop(boolean force); // Initiates the stop state of the lifecycle.\n}"}
{"index": 13323, "repo": "shiro-core-2.0.0-alpha-2", "des": "A very basic starting point for the SecurityManager interface that merely provides logging and caching support.", "code": "public abstract class CachingSecurityManager extends Object implements SecurityManager, org.apache.shiro.lang.util.Destroyable, org.apache.shiro.cache.CacheManagerAware, org.apache.shiro.event.EventBusAware {\n\tprotected void afterCacheManagerSet(); // Template callback to notify subclasses that a CacheManager has been set and is available for use via the getCacheManager() method.\n\tprotected void afterEventBusSet(); // Template callback to notify subclasses that an EventBus has been set and is available for use via the getEventBus() method.\n\tprotected void applyEventBusToCacheManager();\n\tvoid destroy(); // Destroys the cacheManager via LifecycleUtils.destroy.\n\torg.apache.shiro.cache.CacheManager getCacheManager(); // Returns the CacheManager used by this SecurityManager.\n\torg.apache.shiro.event.EventBus getEventBus(); // Returns the EventBus used by this SecurityManager and potentially any of its children components.\n\tvoid setCacheManager(org.apache.shiro.cache.CacheManager cacheManager); // Sets the CacheManager used by this SecurityManager and potentially any of its children components.\n\tvoid setEventBus(org.apache.shiro.event.EventBus eventBus); // Sets the EventBus used by this SecurityManager and potentially any of its children components.\n}"}
{"index": 9180, "repo": "hbase-server-3.0.0-alpha-4", "des": "ZooKeeper based implementation of SplitLogWorkerCoordination It listen for changes in ZooKeeper and.", "code": "Class ZkSplitLogWorkerCoordination {\n\tprotected static int attemptToOwnTask(boolean isFirstTime, ZKWatcher zkw, ServerName server, String task, int taskZKVersion); // Try to own the task by transitioning the zk node data from UNASSIGNED to OWNED.\n\tvoid endTask(SplitLogTask slt, LongAdder ctr, SplitLogWorkerCoordination.SplitTaskDetails details); // endTask() can fail and the only way to recover out of it is for the SplitLogManager to timeout the task node.\n\tvoid getDataSetWatchAsync();\n\tint getTaskReadySeq(); // Used by unit tests to check how many tasks were processed\n\tvoid init(RegionServerServices server, org.apache.hadoop.conf.Configuration conf, SplitLogWorker.TaskExecutor splitExecutor, SplitLogWorker worker); // Override setter from SplitLogWorkerCoordination\n\tboolean isReady(); // Check whether the log splitter is ready to supply tasks\n\tboolean isStop(); // Returns the current value of exitWorker\n\tvoid markCorrupted(org.apache.hadoop.fs.Path rootDir, String name, org.apache.hadoop.fs.FileSystem fs); // marks log file as corrupted\n\tvoid nodeChildrenChanged(String path); // Override handler from ZKListener\n\tvoid nodeDataChanged(String path); // Override handler from ZKListener\n\tvoid registerListener(); // set the listener for task changes.\n\tvoid removeListener(); // remove the listener for task changes.\n\tvoid stopProcessingTasks(); // called when Coordination should stop processing tasks and exit\n\tvoid taskLoop(); // Wait for tasks to become available at /hbase/splitlog zknode.\n}"}
{"index": 3101, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "This class extends LongColumnVector in order to introduce some date-specific semantics.", "code": "Class DateColumnVector {\n\tvoid changeCalendar(boolean useProleptic, boolean updateData); // Change the calendar to or from proleptic.\n\tString formatDate(int i);\n\tboolean isUsingProlepticCalendar(); // Detect whether this data is using the proleptic calendar.\n\tDateColumnVector setUsingProlepticCalendar(boolean usingProlepticCalendar);\n\tvoid shallowCopyTo(ColumnVector otherCv); // Shallow copy of the contents of this vector to the other vector; replaces other vector's values.\n}"}
{"index": 14277, "repo": "wicket-core-10.0.0-M1", "des": "Components that implement this interface will be pageable, they should return the pagecount so that an object/component knows how many pages it can use for the setCurrentPage method.", "code": "public interface IPageable extends org.apache.wicket.util.io.IClusterable {\n\tlong getCurrentPage();\n\tlong getPageCount(); // Gets the total number of pages this pageable object has.\n\tvoid setCurrentPage(long page); // Sets the a page that should be rendered (page number is zero-based)\n}"}
{"index": 4159, "repo": "camel-core-3.0.0-RC1", "des": "To configure headers for UniVocity data formats.", "code": "Class UniVocityHeader {\n\tInteger getLength();\n\tString getName();\n\tvoid setLength(Integer length); // Header length\n\tvoid setName(String name); // Header name\n}"}
{"index": 5690, "repo": "freemarker-2.3.32", "des": "Wraps arbitrary subclass of Date into a reflective model.", "code": "Class DateModel {\n\tjava.util.Date getAsDate(); // Returns the date value.\n\tint getDateType(); // Returns the type of the date.\n}"}
{"index": 7536, "repo": "cassandra-all-4.1.2", "des": "used to transfer the part(or whole) of a SSTable data file.", "code": "Class CassandraOutgoingFile {\n\tboolean computeShouldStreamEntireSSTables();\n\tboolean contained(java.util.List<SSTableReader.PartitionPositionBounds> sections, SSTableReader sstable);\n\tboolean equals(java.lang.Object o);\n\tvoid finish(); // Release any resources held by the stream\n\tstatic CassandraOutgoingFile fromStream(OutgoingStream stream);\n\tlong getEstimatedSize();\n\tjava.lang.String getName();\n\tint getNumFiles();\n\tTimeUUID getPendingRepair();\n\tRef<SSTableReader> getRef();\n\tlong getRepairedAt();\n\tTableId getTableId();\n\tvoid write(StreamSession session, StreamingDataOutputPlus out, int version); // Write the streams data into the socket\n}"}
{"index": 14971, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An Authentication implementation for the Device Authorization Consent used in the OAuth 2.0 Device Authorization Grant.", "code": "public class OAuth2DeviceAuthorizationConsentAuthenticationToken extends OAuth2AuthorizationConsentAuthenticationToken {\n\tSet<String> getRequestedScopes(); // Returns the requested scopes.\n\tString getUserCode(); // Returns the user code.\n}"}
{"index": 3489, "repo": "mahout-mr-0.13.0", "des": "Implements a linear combination of L1 and L2 priors.", "code": "Class ElasticBandPrior {\n\tdouble age(double oldValue, double generations, double learningRate); // Applies the regularization to a coefficient.\n\tdouble logP(double betaIJ); // Returns the log of the probability of a particular coefficient value according to the prior.\n\tvoid readFields(DataInput in);\n\tvoid write(DataOutput out);\n}"}
{"index": 10909, "repo": "spring-data-redis-3.1.2", "des": "Redis client configuration for lettuce using a driver level pooled connection by adding pooling specific configuration to LettuceClientConfiguration.", "code": "public interface LettucePoolingClientConfiguration extends LettuceClientConfiguration {\n\tstatic LettucePoolingClientConfiguration.LettucePoolingClientConfigurationBuilder builder(); // Creates a new LettucePoolingClientConfiguration.LettucePoolingClientConfigurationBuilder to build LettucePoolingClientConfiguration to be used with the Lettuce client.\n\tstatic LettucePoolingClientConfiguration defaultConfiguration(); // Creates a default LettucePoolingClientConfiguration with SSL no Peer Verification yes Start TLS no Client Options ClientOptions with enabled TimeoutOptions Client Resources none Client name none Read From none Connect Timeout 60 Seconds Shutdown Timeout 100 Milliseconds Shutdown Quiet Period 100 Milliseconds pool config default GenericObjectPoolConfig\n\torg.apache.commons.pool2.impl.GenericObjectPoolConfig getPoolConfig();\n}"}
{"index": 15314, "repo": "spring-boot-3.1.1", "des": "Immutable class that represents the configuration of a LoggingSystem's logger.", "code": "public final class LoggerConfiguration extends Object {\n\tboolean equals(Object obj);\n\tLogLevel getConfiguredLevel(); // Returns the configured level of the logger.\n\tLogLevel getEffectiveLevel(); // Returns the effective level of the logger.\n\tLoggerConfiguration.LevelConfiguration getLevelConfiguration(); // Return the level configuration, considering inherited loggers.\n\tLoggerConfiguration.LevelConfiguration getLevelConfiguration(LoggerConfiguration.ConfigurationScope scope); // Return the level configuration for the given scope.\n\tString getName(); // Returns the name of the logger.\n}"}
{"index": 5645, "repo": "org.apache.karaf.main-2.4.4", "des": "Allows services to provide customized service objects in the OSGi environment.", "code": "Interface ServiceFactory<S> {\n\tS getService(Bundle bundle, ServiceRegistration<S> registration); // Creates a new service object.\n\tvoid ungetService(Bundle bundle, ServiceRegistration<S> registration, S service); // Releases a service object.\n}"}
{"index": 13549, "repo": "spring-messaging-6.0.11", "des": "A resolver to extract and decode the payload of a message using a Decoder, where the payload is expected to be a Publisher of DataBuffer.", "code": "public class PayloadMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\torg.springframework.core.ReactiveAdapterRegistry getAdapterRegistry(); // Return the configured ReactiveAdapterRegistry.\n\tList<org.springframework.core.codec.Decoder<?>> getDecoders(); // Return a read-only list of the configured decoders.\n\tprotected org.springframework.util.MimeType getMimeType(Message<?> message); // Return the mime type for the content.\n\torg.springframework.validation.Validator getValidator(); // Return the configured validator, if any.\n\tboolean isUseDefaultResolution(); // Whether this resolver is configured to use default resolution, i.e.\n\tfinal reactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message); // Decode the content of the given message payload through a compatible Decoder.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 290, "repo": "phoenix-core-5.1.3", "des": "Interface to abstract the incremental calculation of an aggregated value.", "code": "Interface Aggregator {\n\tvoid aggregate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Incrementally aggregate the value with the current row\n\tint getSize(); // Get the size in bytes\n\tboolean trackSize(); // Determines whether or not we should track the heap size as this aggregator is executing on the server side.\n}"}
{"index": 12560, "repo": "spring-jdbc-6.0.11", "des": "Implementation of SmartDataSource that wraps a single JDBC Connection which is not closed after use.", "code": "public class SingleConnectionDataSource extends DriverManagerDataSource implements SmartDataSource, org.springframework.beans.factory.DisposableBean {\n\tvoid destroy(); // Close the underlying Connection.\n\tprotected Boolean getAutoCommitValue(); // Return whether the returned Connection's \"autoCommit\" setting should be overridden.\n\tprotected Connection getCloseSuppressingConnectionProxy(Connection target); // Wrap the given Connection with a proxy that delegates every method call to it but suppresses close calls.\n\tConnection getConnection(); // This implementation delegates to getConnectionFromDriver, using the default username and password of this DataSource.\n\tConnection getConnection(String username, String password); // Specifying a custom username and password doesn't make sense with a single Connection.\n\tvoid initConnection(); // Initialize the underlying Connection via the DriverManager.\n\tprotected boolean isSuppressClose(); // Return whether the returned Connection will be a close-suppressing proxy or the physical Connection.\n\tprotected void prepareConnection(Connection con); // Prepare the given Connection before it is exposed.\n\tvoid resetConnection(); // Reset the underlying shared Connection, to be reinitialized on next access.\n\tvoid setAutoCommit(boolean autoCommit); // Set whether the returned Connection's \"autoCommit\" setting should be overridden.\n\tvoid setSuppressClose(boolean suppressClose); // Set whether the returned Connection should be a close-suppressing proxy or the physical Connection.\n\tboolean shouldClose(Connection con); // This is a single Connection: Do not close it when returning to the \"pool\".\n}"}
{"index": 13258, "repo": "spring-test-6.0.11", "des": "TestContext encapsulates the context in which a test is executed, agnostic of the actual testing framework in use.", "code": "public interface TestContext extends org.springframework.core.AttributeAccessor, Serializable {\n\torg.springframework.context.ApplicationContext getApplicationContext(); // Get the application context for this test context, possibly cached.\n\tClass<?> getTestClass(); // Get the test class for this test context.\n\tThrowable getTestException(); // Get the exception that was thrown during execution of the test method.\n\tObject getTestInstance(); // Get the current test instance for this test context.\n\tMethod getTestMethod(); // Get the current test method for this test context.\n\tdefault boolean hasApplicationContext(); // Determine if the application context for this test context is known to be available.\n\tvoid markApplicationContextDirty(DirtiesContext.HierarchyMode hierarchyMode); // Call this method to signal that the application context associated with this test context is dirty and should be removed from the context cache.\n\tdefault void publishEvent(Function<TestContext,? extends org.springframework.context.ApplicationEvent> eventFactory); // Publish the ApplicationEvent created by the given eventFactory to the application context for this test context.\n\tvoid updateState(Object testInstance, Method testMethod, Throwable testException); // Update this test context to reflect the state of the currently executing test.\n}"}
{"index": 17173, "repo": "spring-integration-core-6.1.2", "des": "A simple advice that polls at one rate when messages exist and another when there are no messages.", "code": "public class SimpleActiveIdleReceiveMessageAdvice extends Object implements ReceiveMessageAdvice {\n\torg.springframework.messaging.Message<?> afterReceive(org.springframework.messaging.Message<?> result, Object source); // Subclasses can take actions based on the result of the Joinpoint.proceed(); e.g.\n\tvoid setActivePollPeriod(long activePollPeriod); // Set the poll period when messages are returned.\n\tvoid setIdlePollPeriod(long idlePollPeriod); // Set the poll period when messages are not returned.\n}"}
{"index": 4917, "repo": "hadoop-common-3.3.4", "des": "A trivial renewer for token kinds that aren't managed.", "code": "Class Token.TrivialRenewer {\n\tvoid cancel(Token<?> token, Configuration conf); // Cancel the given token\n\tprotected Text getKind();\n\tboolean handleKind(Text kind); // Does this renewer handle this kind of token?\n\tboolean isManaged(Token<?> token); // Is the given token managed? Only managed tokens may be renewed or cancelled.\n\tlong renew(Token<?> token, Configuration conf); // Renew the given token.\n}"}
{"index": 1165, "repo": "ignite-core-2.15.0", "des": "Segmented ring byte buffer that represents multi producer/single consumer queue that can be used by multiple writer threads and one reader thread.", "code": "Class SegmentedRingByteBuffer {\n\tvoid close(); // Closes the buffer.\n\tvoid free(); // Frees allocated memory in case of direct byte buffer.\n\tvoid init(long pos); // Performs initialization of ring buffer state.\n\tSegmentedRingByteBuffer.BufferMode mode(); // Returns buffer mode.\n\tSegmentedRingByteBuffer.WriteSegment offer(int size); // Reserves size bytes in SegmentedRingByteBuffer and returns instance of SegmentedRingByteBuffer.WriteSegment class that points to wrapped ByteBuffer instance with corresponding capacity.\n\tSegmentedRingByteBuffer.WriteSegment offerSafe(int size); // Behaves like offer(int) but in safe manner: there are no any concurrent threads and buffer in closed state.\n\tList<SegmentedRingByteBuffer.ReadSegment> poll(); // Retrieves list of SegmentedRingByteBuffer.ReadSegment instances that point to ByteBuffer that contains all data available for reading from SegmentedRingByteBuffer or null if there are no available data for reading.\n\tList<SegmentedRingByteBuffer.ReadSegment> poll(long pos); // Retrieves list of SegmentedRingByteBuffer.ReadSegment instances that point to ByteBuffer that contains data available for reading from SegmentedRingByteBuffer limited by pos parameter or null if there are no available data for reading.\n\tSegmentedRingByteBuffer reset(); // Resets the state of the buffer and returns new instance but with the same underlying buffer.\n\tlong tail(); // Returns actual buffer tail.\n}"}
{"index": 17878, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read/write Resources and supports byte range requests.", "code": "public class ResourceHttpMessageConverter extends AbstractHttpMessageConverter<org.springframework.core.io.Resource> {\n\tvoid addDefaultHeaders(HttpOutputMessage message, org.springframework.core.io.Resource resource, MediaType contentType); // Adds the default headers for the given resource to the given message.\n\tprotected Long getContentLength(org.springframework.core.io.Resource resource, MediaType contentType); // Returns the content length for the given type.\n\tprotected MediaType getDefaultContentType(org.springframework.core.io.Resource resource); // Returns the default content type for the given type.\n\tprotected org.springframework.core.io.Resource readInternal(Class<? extends org.springframework.core.io.Resource> clazz, HttpInputMessage inputMessage); // Abstract template method that reads the actual object.\n\tprotected boolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tprotected void writeContent(org.springframework.core.io.Resource resource, HttpOutputMessage outputMessage);\n\tprotected void writeInternal(org.springframework.core.io.Resource resource, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 17917, "repo": "spring-web-6.0.11", "des": "ServletContext-aware subclass of PathMatchingResourcePatternResolver, able to find matching resources below the web application root directory via ServletContext.getResourcePaths(java.lang.String).", "code": "public class ServletContextResourcePatternResolver extends org.springframework.core.io.support.PathMatchingResourcePatternResolver {\n\tprotected Set<org.springframework.core.io.Resource> doFindPathMatchingFileResources(org.springframework.core.io.Resource rootDirResource, String subPattern); // Overridden version which checks for ServletContextResource and uses ServletContext.getResourcePaths to find matching resources below the web application root directory.\n\tprotected void doRetrieveMatchingServletContextResources(ServletContext servletContext, String fullPattern, String dir, Set<org.springframework.core.io.Resource> result); // Recursively retrieve ServletContextResources that match the given pattern, adding them to the given result set.\n}"}
{"index": 1694, "repo": "samza-api-1.8.0", "des": "A Startpoint that represents a timestamp offset in a stream partition.", "code": "Class StartpointTimestamp {\n\t<IN,OUT> OUT apply(IN input, StartpointVisitor<IN,OUT> startpointVisitor); // Applies the StartpointVisitor's visit methods to the Startpoint and returns the result of that operation.\n\tboolean equals(java.lang.Object o);\n\tjava.lang.Long getTimestampOffset(); // Getter for the timestamp offset.\n}"}
{"index": 11147, "repo": "tribuo-core-4.3.1", "des": "Utilities for working with Tribuo protobufs.", "code": "public final class ProtoUtil extends Object {\n\tstatic <SERIALIZED extends com.google.protobuf.Message, PROTO_SERIALIZABLE extends ProtoSerializable<SERIALIZED>>PROTO_SERIALIZABLE deserialize(SERIALIZED serialized); // Instantiates the class from the supplied protobuf fields.\n\tstatic String generateMethodName(String prefix, String name); // Generate the method name for the type from the protobuf.\n\tstatic int getCurrentVersion(Class<? extends ProtoSerializable<?>> clazz); // If this class is annotated with ProtoSerializableClass returns the version number, otherwise returns -1.\n\tstatic <SERIALIZED_CLASS extends com.google.protobuf.Message, SERIALIZED_DATA extends com.google.protobuf.Message, PROTO_SERIALIZABLE extends ProtoSerializable<SERIALIZED_CLASS>>SERIALIZED_CLASS serialize(PROTO_SERIALIZABLE protoSerializable); // Serializes a ProtoSerializable class which has the appropriate ProtoSerializableClass annotations.\n}"}
{"index": 937, "repo": "ignite-core-2.15.0", "des": "An ExecutorService that executes submitted tasks using pooled grid threads.", "code": "Class IgniteStripedThreadPoolExecutor {\n\tboolean awaitTermination(long timeout, TimeUnit unit);\n\tvoid execute(Runnable cmd);\n\tvoid execute(Runnable task, int idx); // Executes the given command at some time in the future.\n\t<T> @NotNull List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks);\n\t<T> @NotNull List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit);\n\t<T> T invokeAny(Collection<? extends Callable<T>> tasks);\n\t<T> T invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit);\n\tboolean isShutdown();\n\tboolean isTerminated();\n\tvoid registerMetrics(MetricRegistry mreg); // Register thread pool metrics.\n\tvoid shutdown();\n\tList<Runnable> shutdownNow();\n\t<T> @NotNull Future<T> submit(Callable<T> task);\n\t@NotNull Future<?> submit(Runnable task);\n\t<T> @NotNull Future<T> submit(Runnable task, T res);\n\tint threadId(int idx);\n}"}
{"index": 15024, "repo": "spring-vault-core-3.0.4", "des": "Authentication DSL allowing flow composition to create a VaultToken.", "code": "public class AuthenticationSteps extends Object {\n\tstatic <T> AuthenticationSteps.Node<T> fromHttpRequest(AuthenticationSteps.HttpRequest<T> request); // Start flow composition from a AuthenticationSteps.HttpRequest.\n\tstatic <T> AuthenticationSteps.Node<T> fromSupplier(Supplier<T> supplier); // Start flow composition from a Supplier.\n\tstatic <T> AuthenticationSteps.Node<T> fromValue(T value); // Start flow composition from a scalar value.\n\tstatic AuthenticationSteps just(AuthenticationSteps.HttpRequest<VaultResponse> request); // Create a flow definition from a AuthenticationSteps.HttpRequest returning a VaultResponse.\n\tstatic AuthenticationSteps just(VaultToken token); // Create a flow definition using a provided VaultToken.\n}"}
{"index": 15489, "repo": "spring-batch-core-5.0.2", "des": "DAO interface for persisting and retrieving ExecutionContexts.", "code": "public interface ExecutionContextDao {\n\tdefault void deleteExecutionContext(JobExecution jobExecution); // Delete the execution context of the given JobExecution.\n\tdefault void deleteExecutionContext(StepExecution stepExecution); // Delete the execution context of the given StepExecution.\n\tExecutionContext getExecutionContext(JobExecution jobExecution);\n\tExecutionContext getExecutionContext(StepExecution stepExecution);\n\tvoid saveExecutionContext(JobExecution jobExecution); // Persist the execution context associated with the given jobExecution, persistent entry for the context should not exist yet.\n\tvoid saveExecutionContext(StepExecution stepExecution); // Persist the execution context associated with the given stepExecution, persistent entry for the context should not exist yet.\n\tvoid saveExecutionContexts(Collection<StepExecution> stepExecutions); // Persist the execution context associated with each stepExecution in a given collection, persistent entry for the context should not exist yet.\n\tvoid updateExecutionContext(JobExecution jobExecution); // Persist the updates of execution context associated with the given jobExecution.\n\tvoid updateExecutionContext(StepExecution stepExecution); // Persist the updates of execution context associated with the given stepExecution.\n}"}
{"index": 15795, "repo": "camel-api-4.0.0-RC1", "des": "Used as additional filer mechanism to control if customizers need to be applied or not.", "code": "@FunctionalInterface public static interface LanguageCustomizer.Policy extends BiPredicate<String,Language> {\n\tstatic LanguageCustomizer.Policy any(); // A simple allow-all policy.\n\tstatic LanguageCustomizer.Policy none(); // A simple deny-all policy.\n}"}
{"index": 9378, "repo": "hadoop-yarn-api-3.3.6", "des": "Consider a set of nodes N that belongs to the scope specified in the constraint.", "code": "Class PlacementConstraint.SingleConstraint {\n\t<T> T accept(PlacementConstraint.Visitor<T> visitor); // Visitor pattern.\n\tboolean equals(Object o);\n\tint getMaxCardinality(); // Get the maximum cardinality of the constraint.\n\tint getMinCardinality(); // Get the minimum cardinality of the constraint.\n\tNodeAttributeOpCode getNodeAttributeOpCode(); // Get the NodeAttributeOpCode of the constraint.\n\tString getScope(); // Get the scope of the constraint.\n\tSet<PlacementConstraint.TargetExpression> getTargetExpressions(); // Get the target expressions of the constraint.\n}"}
{"index": 12342, "repo": "jena-core-4.9.0", "des": "The interface represents the namespace schema information information item.", "code": "public interface XSNamespaceItem {\n\tXSObjectList getAnnotations(); // [annotations]: a set of annotations if it exists, otherwise an empty XSObjectList.\n\tXSAttributeDeclaration getAttributeDeclaration(String name); // Convenience method.\n\tXSAttributeGroupDefinition getAttributeGroup(String name); // Convenience method.\n\tXSNamedMap getComponents(short objectType); // [schema components]: a list of top-level components, i.e.\n\tStringList getDocumentLocations(); // [document location] - a list of location URIs for the documents that contributed to the XSModel.\n\tXSElementDeclaration getElementDeclaration(String name); // Convenience method.\n\tXSIDCDefinition getIDCDefinition(String name); // Convenience method.\n\tXSModelGroupDefinition getModelGroupDefinition(String name); // Convenience method.\n\tXSNotationDeclaration getNotationDeclaration(String name); // Convenience method.\n\tString getSchemaNamespace(); // [schema namespace]: A namespace name or null if absent.\n\tXSTypeDefinition getTypeDefinition(String name); // Convenience method.\n}"}
{"index": 16829, "repo": "spring-expression-6.0.11", "des": "A type converter can convert values between different types encountered during expression evaluation.", "code": "public interface TypeConverter {\n\tboolean canConvert(org.springframework.core.convert.TypeDescriptor sourceType, org.springframework.core.convert.TypeDescriptor targetType); // Return true if the type converter can convert the specified type to the desired target type.\n\tObject convertValue(Object value, org.springframework.core.convert.TypeDescriptor sourceType, org.springframework.core.convert.TypeDescriptor targetType); // Convert (or coerce) a value from one type to another, for example from a boolean to a String.\n}"}
{"index": 12986, "repo": "spring-integration-file-6.1.2", "des": "Strategy for synchronizing from a remote File system to a local directory.", "code": "@FunctionalInterface public interface InboundFileSynchronizer {\n\tvoid synchronizeToLocalDirectory(File localDirectory); // Synchronize all available files to the local directory.\n\tdefault void synchronizeToLocalDirectory(File localDirectory, int maxFetchSize); // Synchronize up to maxFetchSize files to the local directory.\n}"}
{"index": 15215, "repo": "spring-boot-3.1.1", "des": "A container object to return the result of a Binder bind operation.", "code": "public final class BindResult<T> extends Object {\n\tboolean equals(Object obj);\n\tT get(); // Return the object that was bound or throw a NoSuchElementException if no value was bound.\n\tvoid ifBound(Consumer<? super T> consumer); // Invoke the specified consumer with the bound value, or do nothing if no value has been bound.\n\tboolean isBound(); // Returns true if a result was bound.\n\t<U> BindResult<U> map(Function<? super T,? extends U> mapper); // Apply the provided mapping function to the bound value, or return an updated unbound result if no value has been bound.\n\tT orElse(T other); // Return the object that was bound, or other if no value has been bound.\n\tT orElseGet(Supplier<? extends T> other); // Return the object that was bound, or the result of invoking other if no value has been bound.\n\t<X extends Throwable>T orElseThrow(Supplier<? extends X> exceptionSupplier); // Return the object that was bound, or throw an exception to be created by the provided supplier if no value has been bound.\n}"}
{"index": 13024, "repo": "spring-aop-6.0.11", "des": "Utility methods for AOP proxy factories.", "code": "public abstract class AopProxyUtils extends Object {\n\tstatic Class<?>[] completeJdkProxyInterfaces(Class<?>... userInterfaces); // Complete the set of interfaces that are typically required in a JDK dynamic proxy generated by Spring AOP.\n\tstatic Class<?>[] completeProxiedInterfaces(AdvisedSupport advised); // Determine the complete set of interfaces to proxy for the given AOP configuration.\n\tstatic boolean equalsAdvisors(AdvisedSupport a, AdvisedSupport b); // Check equality of the advisors behind the given AdvisedSupport objects.\n\tstatic boolean equalsInProxy(AdvisedSupport a, AdvisedSupport b); // Check equality of the proxies behind the given AdvisedSupport objects.\n\tstatic boolean equalsProxiedInterfaces(AdvisedSupport a, AdvisedSupport b); // Check equality of the proxied interfaces behind the given AdvisedSupport objects.\n\tstatic Object getSingletonTarget(Object candidate); // Obtain the singleton target object behind the given proxy, if any.\n\tstatic Class<?>[] proxiedUserInterfaces(Object proxy); // Extract the user-specified interfaces that the given proxy implements, i.e.\n\tstatic Class<?> ultimateTargetClass(Object candidate);\n}"}
{"index": 7823, "repo": "cassandra-all-4.1.2", "des": "Configure a ThreadPoolExecutorPlus, applying Cassandra's best practices by default Core threads may timeout, and use a default keepAlive time in keepAliveUnits Threads share the same ThreadGroup, which may be configurably a child of a specified ThreadGroup descended from the same parent of the NamedThreadFactory.", "code": "Class ThreadPoolExecutorBuilder<E extends ExecutorPlus> {\n\tE build(); // Build the configured executor\n\tExecutorBuilder<E> withDefaultThreadGroup(); // Use the system default thread group for the threads we create.\n\tThreadPoolExecutorBuilder<E> withKeepAlive(); // Core threads for the executor built by this factory will never timeout (default for single threaded builders).\n\tThreadPoolExecutorBuilder<E> withKeepAlive(long keepAlive, java.util.concurrent.TimeUnit keepAliveUnits); // Threads for the executor built by this factory will timeout (terminate) after the specified period.\n\tThreadPoolExecutorBuilder<E> withQueueLimit(int queueLimit); // The executor built by this factory will limit the number of queued tasks; default is unlimited.\n\tThreadPoolExecutorBuilder<E> withRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler); // Set the RejectedExecutionHandler for the executor built by this factory.\n\tExecutorBuilder<E> withThreadGroup(java.lang.ThreadGroup threadGroup); // Threads for the executor built by this factory will all be (transitively) members of threadGroup, but may directly reside in a child thread group.\n\tThreadPoolExecutorBuilder<E> withThreadPriority(int threadPriority); // Specify the priority of threads that service the executor built by this factory (default to Thread.NORM_PRIORITY)\n\tThreadPoolExecutorBuilder<E> withUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler uncaughtExceptionHandler); // Set the Thread.UncaughtExceptionHandler for threads that service executors built by this factory.\n}"}
{"index": 6794, "repo": "calcite-core-1.34.0", "des": "Metadata about the memory use of an operator.", "code": "Interface BuiltInMetadata.Memory {\n\t@Nullable Double cumulativeMemoryWithinPhase(); // Returns the cumulative amount of memory, in bytes, required by the physical operator implementing this relational expression, and all other operators within the same phase, across all splits.\n\t@Nullable Double cumulativeMemoryWithinPhaseSplit(); // Returns the expected cumulative amount of memory, in bytes, required by the physical operator implementing this relational expression, and all operators within the same phase, within each split.\n\t@Nullable Double memory(); // Returns the expected amount of memory, in bytes, required by a physical operator implementing this relational expression, across all splits.\n}"}
{"index": 18554, "repo": "hibernate-core-5.6.15.Final", "des": "Context for determining the implicit name of a \"join column\" (think JoinColumn).", "code": "Interface ImplicitJoinColumnNameSource {\n\tAttributePath getAttributePath(); // Access to the name of the attribute that defines the association.\n\tEntityNaming getEntityNaming(); // Access to entity naming information.\n\tImplicitJoinColumnNameSource.Nature getNature();\n\tIdentifier getReferencedColumnName(); // Access the name of the column that is the target of the FK being described\n\tIdentifier getReferencedTableName(); // Access the name of the table that is the target of the FK being described\n}"}
{"index": 4336, "repo": "beam-sdks-java-core-2.49.0", "des": "Implementation of Counter that delegates to the instance for the current context.", "code": "Class DelegatingCounter {\n\tvoid dec();\n\tvoid dec(long n);\n\tMetricName getName(); // The MetricName given to this metric.\n\tvoid inc(); // Increment the counter.\n\tvoid inc(long n); // Increment the counter by the given amount.\n}"}
{"index": 17949, "repo": "spring-web-6.0.11", "des": "Represents an immutable collection of URI components, mapping component type to String values.", "code": "public abstract class UriComponents extends Object implements Serializable {\n\tprotected abstract void copyToUriComponentsBuilder(UriComponentsBuilder builder); // Set all components of the given UriComponentsBuilder.\n\tfinal UriComponents encode(); // Invoke this after expanding URI variables to encode the resulting URI component values.\n\tabstract UriComponents encode(Charset charset); // A variant of encode() with a charset other than \"UTF-8\".\n\tfinal UriComponents expand(Object... uriVariableValues); // Replace all URI template variables with the values from a given array.\n\tfinal UriComponents expand(Map<String,?> uriVariables); // Replace all URI template variables with the values from a given map.\n\tfinal UriComponents expand(UriComponents.UriTemplateVariables uriVariables); // Replace all URI template variables with the values from the given UriComponents.UriTemplateVariables.\n\tfinal String getFragment(); // Return the fragment.\n\tabstract String getHost(); // Return the host.\n\tabstract String getPath(); // Return the path.\n\tabstract List<String> getPathSegments(); // Return the list of path segments.\n\tabstract int getPort(); // Return the port.\n\tabstract String getQuery(); // Return the query.\n\tabstract org.springframework.util.MultiValueMap<String,String> getQueryParams(); // Return the map of query parameters.\n\tfinal String getScheme(); // Return the scheme.\n\tabstract String getSchemeSpecificPart(); // Return the scheme specific part.\n\tabstract String getUserInfo(); // Return the user info.\n\tabstract UriComponents normalize(); // Normalize the path removing sequences like \"path/..\".\n\tabstract URI toUri(); // Create a URI from this instance as follows:\n\tabstract String toUriString(); // Concatenate all URI components to return the fully formed URI String.\n}"}
{"index": 4612, "repo": "commons-vfs2-2.9.0", "des": "A FileSelector that selects all children of the given fileObject.", "code": "Class FileFilterSelector {\n\tboolean accept(FileSelectInfo fileInfo); // Determines whether the file should be selected.\n\tboolean includeFile(FileSelectInfo fileInfo); // Determines if a file or folder should be selected.\n}"}
{"index": 4043, "repo": "zookeeper-3.8.2", "des": "A base class for running a Unix command.", "code": "Class Shell {\n\tstatic String execCommand(Map<String,String> env, String... cmd); // Static method to execute a shell command.\n\tstatic String execCommand(Map<String,String> env, String[] cmd, long timeout); // Static method to execute a shell command.\n\tstatic String execCommand(String... cmd); // Static method to execute a shell command.\n\tprotected abstract String[] getExecString(); // return an array containing the command name and its parameters\n\tint getExitCode(); // get the exit code\n\tstatic String[] getGET_PERMISSION_COMMAND(); // Return a Unix command to get permission information.\n\tstatic String[] getGroupsCommand(); // a Unix command to get the current user's groups list\n\tstatic String[] getGroupsForUserCommand(String user); // a Unix command to get a given user's groups list\n\tProcess getProcess(); // get the current sub-process executing the given command\n\tstatic String[] getUlimitMemoryCommand(int memoryLimit); // Get the Unix command for setting the maximum virtual memory available to a given child process.\n\tboolean isTimedOut(); // To check if the passed script to shell command executor timed out or not.\n\tprotected abstract void parseExecResult(BufferedReader lines); // Parse the execution result\n\tprotected void run(); // check to see if a command needs to be executed and execute if needed\n\tprotected void setEnvironment(Map<String,String> env); // set the environment for the command\n\tprotected void setWorkingDirectory(File dir); // set the working directory\n}"}
{"index": 11853, "repo": "spring-kafka-3.0.9", "des": "Chained utility methods to simplify some Java repetitive code.", "code": "public final class JavaUtils extends Object {\n\t<T1, T2> JavaUtils acceptIfCondition(boolean condition, T1 t1, T2 t2, BiConsumer<T1,T2> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the condition is true.\n\t<T> JavaUtils acceptIfCondition(boolean condition, T value, Consumer<T> consumer); // Invoke Consumer.accept(Object) with the value if the condition is true.\n\tJavaUtils acceptIfHasText(String value, Consumer<String> consumer); // Invoke Consumer.accept(Object) with the value if it is not null or empty.\n\t<T> JavaUtils acceptIfHasText(T t1, String value, BiConsumer<T,String> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the value argument is not null or empty.\n\t<T> JavaUtils acceptIfInstanceOf(Class<T> type, Object value, Consumer<T> consumer); // Invoke Consumer.accept(Object) with the cast value if the object is an instance of the provided class.\n\t<T> JavaUtils acceptIfNotEmpty(List<T> value, Consumer<List<T>> consumer); // Invoke Consumer.accept(Object) with the value if it is not null or empty.\n\t<T> JavaUtils acceptIfNotEmpty(T[] value, Consumer<T[]> consumer); // Invoke Consumer.accept(Object) with the value if it is not null or empty.\n\t<T1, T2> JavaUtils acceptIfNotNull(T1 t1, T2 t2, BiConsumer<T1,T2> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the t2 argument is not null.\n\t<T> JavaUtils acceptIfNotNull(T value, Consumer<T> consumer); // Invoke Consumer.accept(Object) with the value if it is not null.\n}"}
{"index": 13701, "repo": "spring-webmvc-6.0.11", "des": "The <errors> tag renders field errors in an HTML 'span' tag.", "code": "public class ErrorsTag extends AbstractHtmlElementBodyTag implements BodyTag {\n\tprotected String autogenerateId(); // Get the value for the HTML 'id' attribute.\n\tprotected void exposeAttributes(); // Exposes any bind status error messages under this key in the PageContext.PAGE_SCOPE.\n\tString getDelimiter(); // Return the delimiter to be used between error messages.\n\tString getElement(); // Get the HTML element must be used to render the error messages.\n\tprotected String getName(); // Get the value for the HTML 'name' attribute.\n\tprotected void removeAttributes(); // Removes any bind status error messages that were previously stored under this key in the PageContext.PAGE_SCOPE.\n\tprotected void renderDefaultContent(TagWriter tagWriter);\n\tvoid setDelimiter(String delimiter); // Set the delimiter to be used between error messages.\n\tvoid setElement(String element); // Set the HTML element must be used to render the error messages.\n\tprotected boolean shouldRender(); // Should rendering of this tag proceed at all?\n}"}
{"index": 7561, "repo": "cassandra-all-4.1.2", "des": "The type of CQL3 column this definition represents.", "code": "Enum ColumnMetadata.Kind {\n\tboolean isPrimaryKeyKind();\n\tstatic ColumnMetadata.Kind valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic ColumnMetadata.Kind[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14581, "repo": "spring-security-web-6.1.2", "des": "A factory class to create RequestMatcher instances.", "code": "public final class RequestMatchers extends Object {\n\tstatic RequestMatcher allOf(RequestMatcher... matchers); // Creates a RequestMatcher that matches if all the given RequestMatchers match, if matchers are empty then the returned matcher always matches.\n\tstatic RequestMatcher anyOf(RequestMatcher... matchers); // Creates a RequestMatcher that matches if at least one of the given RequestMatchers matches, if matchers are empty then the returned matcher never matches.\n\tstatic RequestMatcher not(RequestMatcher matcher); // Creates a RequestMatcher that matches if the given RequestMatcher does not match.\n}"}
{"index": 8619, "repo": "avro-1.11.2", "des": "An Encoder for Avro's binary encoding that does not buffer output.", "code": "Class DirectBinaryEncoder {\n\tint bytesBuffered(); // Returns the number of bytes currently buffered by this encoder.\n\tvoid flush();\n\tvoid writeBoolean(boolean b); // Write a boolean value.\n\tvoid writeDouble(double d); // Write a double.\n\tvoid writeFixed(byte[] bytes, int start, int len); // Writes a fixed size binary object.\n\tvoid writeFloat(float f); // Write a float.\n\tvoid writeInt(int n); // Writes a 32-bit integer.\n\tvoid writeLong(long n); // Write a 64-bit integer.\n\tprotected void writeZero(); // Write a zero byte to the underlying output.\n}"}
{"index": 1364, "repo": "nutch-2.4", "des": "A Utility class containing methods to simply perform parsing utilities such as iterating through a preferred list of Parsers to obtain Parse objects.", "code": "Class ParseUtil {\n\tConfiguration getConf();\n\tParse parse(java.lang.String url, WebPage page); // Performs a parse by iterating through a List of preferred Parsers until a successful parse is performed and a Parse object is returned.\n\tvoid process(java.lang.String url, WebPage page); // Parses given web page and stores parsed content within page.\n\tvoid processSitemapParse(java.lang.String url, WebPage page, Mapper.Context context); // Parses given sitemap page and stores parsed content within page.\n\tvoid setConf(Configuration conf);\n\tboolean status(java.lang.String url, WebPage page);\n}"}
{"index": 14746, "repo": "spring-data-commons-3.1.2", "des": "Types managed by a Spring Data implementation.", "code": "@FunctionalInterface public interface ManagedTypes {\n\tstatic ManagedTypes empty(); // Factory method used to construct a new instance of ManagedTypes containing no types.\n\tvoid forEach(Consumer<Class<?>> action); // Applies the given action to each of the types contained in this ManagedTypes instance.\n\tstatic ManagedTypes from(Class<?>... types); // Factory method used to construct ManagedTypes from the given array of types.\n\tstatic ManagedTypes fromIterable(Iterable<? extends Class<?>> types); // Factory method used to construct ManagedTypes from the given, required Iterable of types.\n\tstatic ManagedTypes fromStream(Stream<? extends Class<?>> types); // Factory method used to construct ManagedTypes from the given, required Stream of types.\n\tstatic ManagedTypes fromSupplier(Supplier<Iterable<Class<?>>> dataProvider); // Factory method used to construct ManagedTypes from the given, required Supplier of an Iterable of types.\n\tdefault List<Class<?>> toList(); // Returns all the ManagedTypes in a List.\n}"}
{"index": 18513, "repo": "hibernate-core-5.6.15.Final", "des": "A type that maps between VARCHAR and Character[]", "code": "Class CharacterArrayType {\n\tjava.lang.String getName(); // Returns the abbreviated name of the type.\n\tjava.lang.String[] getRegistrationKeys(); // Get the names under which this type should be registered in the type registry.\n}"}
{"index": 13731, "repo": "spring-webmvc-6.0.11", "des": "Convenient subclass of UrlBasedViewResolver that supports InternalResourceView (i.e.", "code": "public class InternalResourceViewResolver extends UrlBasedViewResolver {\n\tprotected AbstractUrlBasedView buildView(String viewName); // Creates a new View instance of the specified view class and configures it.\n\tprotected AbstractUrlBasedView instantiateView(); // Instantiate the specified view class.\n\tprotected Class<?> requiredViewClass(); // Return the required type of view for this resolver.\n\tvoid setAlwaysInclude(boolean alwaysInclude); // Specify whether to always include the view rather than forward to it.\n}"}
{"index": 17304, "repo": "groovy-4.0.13", "des": "A handle for the MetaClassRegistry that changes all classes loaded into the Grails VM to use ExpandoMetaClass instances", "code": "public class ExpandoMetaClassCreationHandle extends MetaClassRegistry.MetaClassCreationHandle {\n\tprotected MetaClass createNormalMetaClass(Class theClass, MetaClassRegistry registry);\n\tstatic void disable();\n\tstatic void enable(); // Enables the ExpandoMetaClassCreationHandle with the registry ExpandoMetaClassCreationHandle.enable();\n\tboolean hasModifiedMetaClass(ExpandoMetaClass emc);\n\tvoid registerModifiedMetaClass(ExpandoMetaClass emc); // Registers a modified ExpandoMetaClass with the creation handle\n}"}
{"index": 8820, "repo": "hbase-server-3.0.0-alpha-4", "des": "Base class for cell sink that separates the provided cells into multiple files.", "code": "Class AbstractMultiFileWriter {\n\tList<org.apache.hadoop.fs.Path> abortWriters(); // Close all writers without throwing any exceptions.\n\tvoid beforeShipped(); // The action that needs to be performed before Shipper.shipped() is performed\n\tList<org.apache.hadoop.fs.Path> commitWriters(long maxSeqId, boolean majorCompaction); // Commit all writers.\n\tList<org.apache.hadoop.fs.Path> commitWriters(long maxSeqId, boolean majorCompaction, Collection<HStoreFile> storeFiles);\n\tvoid init(StoreScanner sourceScanner, AbstractMultiFileWriter.WriterFactory factory); // Initializes multi-writer before usage.\n\tprotected void preCloseWriter(StoreFileWriter writer); // Subclasses override this method to be called before we close the give writer.\n\tprotected void preCommitWriters(); // Subclasses override this method to be called at the end of a successful sequence of append; all appends are processed before this method is called.\n\tprotected abstract Collection<StoreFileWriter> writers();\n}"}
{"index": 13623, "repo": "spring-ws-security-4.0.5", "des": "Abstract implementation of a CallbackHandler.", "code": "public abstract class AbstractCallbackHandler extends Object implements CallbackHandler {\n\tfinal void handle(Callback[] callbacks); // Iterates over the given callbacks, and calls handleInternal for each of them.\n\tprotected abstract void handleInternal(Callback callback); // Template method that should be implemented by subclasses.\n}"}
{"index": 16615, "repo": "spring-beans-6.0.11", "des": "A BeanFactoryPostProcessor implementation that allows for convenient registration of custom autowire qualifier types.", "code": "public class CustomAutowireConfigurer extends Object implements BeanFactoryPostProcessor, BeanClassLoaderAware, org.springframework.core.Ordered {\n\tint getOrder();\n\tvoid postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory); // Modify the application context's internal bean factory after its standard initialization.\n\tvoid setBeanClassLoader(ClassLoader beanClassLoader); // Callback that supplies the bean class loader to a bean instance.\n\tvoid setCustomQualifierTypes(Set<?> customQualifierTypes); // Register custom qualifier annotation types to be considered when autowiring beans.\n\tvoid setOrder(int order);\n}"}
{"index": 18388, "repo": "opencms-core-15.0", "des": "Defines a read-only publish job that has been already published.", "code": "Class CmsPublishJobFinished {\n\tlong getEnqueueTime(); // Returns the time this object has been created.\n\tlong getFinishTime(); // Returns the time the publish job ends.\n\tlong getStartTime(); // Returns the time the publish job did actually start.\n}"}
{"index": 15598, "repo": "spring-security-core-6.1.2", "des": "A MethodInterceptor which can determine if an Authentication has access to the returned object from the MethodInvocation using the configured ReactiveAuthorizationManager.", "code": "public final class AuthorizationManagerAfterReactiveMethodInterceptor extends Object implements org.springframework.core.Ordered, org.aopalliance.intercept.MethodInterceptor, org.springframework.aop.PointcutAdvisor, org.springframework.aop.framework.AopInfrastructureBean {\n\torg.aopalliance.aop.Advice getAdvice();\n\tint getOrder();\n\torg.springframework.aop.Pointcut getPointcut();\n\tObject invoke(org.aopalliance.intercept.MethodInvocation mi); // Determines if an Authentication has access to the returned object from the MethodInvocation using the configured ReactiveAuthorizationManager.\n\tboolean isPerInstance();\n\tstatic AuthorizationManagerAfterReactiveMethodInterceptor postAuthorize(); // Creates an instance for the PostAuthorize annotation.\n\tstatic AuthorizationManagerAfterReactiveMethodInterceptor postAuthorize(ReactiveAuthorizationManager<MethodInvocationResult> authorizationManager); // Creates an instance for the PostAuthorize annotation.\n\tvoid setOrder(int order);\n}"}
{"index": 3868, "repo": "hbase-client-3.0.0-alpha-4", "des": "Base class for HBase read operations; e.", "code": "Class Query {\n\tboolean doLoadColumnFamiliesOnDemand(); // Get the logical value indicating whether on-demand CF loading should be allowed.\n\tbyte[] getACL(); // Returns The serialized ACL for this operation, or null if none\n\tAuthorizations getAuthorizations(); // Returns The authorizations this Query is associated with.\n\tMap<byte[],TimeRange> getColumnFamilyTimeRange(); // Returns A map of column families to time ranges\n\tConsistency getConsistency(); // Returns the consistency level for this operation\n\tFilter getFilter();\n\tIsolationLevel getIsolationLevel(); // Returns The isolation level of this query.\n\tBoolean getLoadColumnFamiliesOnDemandValue(); // Get the raw loadColumnFamiliesOnDemand setting; if it's not set, can be null.\n\tint getReplicaId(); // Returns region replica id where Query will fetch data from.\n\tQuery setACL(Map<String,Permission> perms); // Set the ACL for the operation.\n\tQuery setACL(String user, Permission perms); // Set the ACL for the operation.\n\tQuery setAuthorizations(Authorizations authorizations); // Sets the authorizations to be used by this Query\n\tQuery setColumnFamilyTimeRange(byte[] cf, long minStamp, long maxStamp); // Get versions of columns only within the specified timestamp range, [minStamp, maxStamp) on a per CF bases.\n\tQuery setConsistency(Consistency consistency); // Sets the consistency level for this operation\n\tQuery setFilter(Filter filter); // Apply the specified server-side filter when performing the Query.\n\tQuery setIsolationLevel(IsolationLevel level); // Set the isolation level for this query.\n\tQuery setLoadColumnFamiliesOnDemand(boolean value); // Set the value indicating whether loading CFs on demand should be allowed (cluster default is false).\n\tQuery setReplicaId(int Id); // Specify region replica id where Query will fetch data from.\n}"}
{"index": 12480, "repo": "spring-jdbc-6.0.11", "des": "Abstract base class for DataFieldMaxValueIncrementer implementations which are based on identity columns in a sequence-like table.", "code": "public abstract class AbstractIdentityColumnMaxValueIncrementer extends AbstractColumnMaxValueIncrementer {\n\tprotected String getDeleteStatement(long[] values); // Statement to use to clean up \"sequence\" values.\n\tprotected abstract String getIdentityStatement(); // Statement to use to obtain the current identity value.\n\tprotected abstract String getIncrementStatement(); // Statement to use to increment the \"sequence\" value.\n\tprotected long getNextKey(); // Determine the next key to use, as a long.\n\tboolean isDeleteSpecificValues(); // Return whether to delete the entire range below the current maximum key value (false - the default), or the specifically generated values (true).\n\tvoid setDeleteSpecificValues(boolean deleteSpecificValues); // Specify whether to delete the entire range below the current maximum key value (false - the default), or the specifically generated values (true).\n}"}
{"index": 18114, "repo": "spring-ws-core-4.0.5", "des": "Defines callback methods to customize the Java-based configuration for Spring Web Services enabled via @EnableWs.", "code": "public interface WsConfigurer {\n\tvoid addArgumentResolvers(List<MethodArgumentResolver> argumentResolvers); // Add resolvers to support custom endpoint method argument types.\n\tvoid addInterceptors(List<EndpointInterceptor> interceptors); // Add EndpointInterceptors for pre- and post-processing of endpoint method invocations.\n\tvoid addReturnValueHandlers(List<MethodReturnValueHandler> returnValueHandlers); // Add handlers to support custom controller method return value types.\n}"}
{"index": 3361, "repo": "hadoop-azure-3.3.6", "des": "OutputStream statistics implementation for Abfs.", "code": "Class AbfsOutputStreamStatisticsImpl {\n\tvoid blockAllocated(); // Increment the counter to indicate a block has been allocated.\n\tvoid blockReleased(); // Increment the counter to indicate a block has been released.\n\tvoid bytesToUpload(long bytes); // Records the need to upload bytes and increments the total bytes that needs to be uploaded.\n\tlong getBytesToUpload();\n\tlong getBytesUploadFailed();\n\tlong getBytesUploadSuccessful();\n\torg.apache.hadoop.fs.statistics.IOStatistics getIOStatistics(); // Get the IOStatisticsStore instance from AbfsOutputStreamStatistics.\n\tlong getQueueShrunkOps();\n\tdouble getTimeSpentOnPutRequest(); // Getter for mean value of time taken to complete a PUT request by AbfsOutputStream.\n\tlong getTimeSpentOnTaskWait();\n\tlong getWriteCurrentBufferOperations();\n\tvoid queueShrunk(); // Number of times task queue is shrunk.\n\torg.apache.hadoop.fs.statistics.DurationTracker timeSpentTaskWait(); // Time spent in waiting for tasks to be completed in the blocking queue.\n\tvoid uploadFailed(long bytes); // Records the total bytes failed to upload through AbfsOutputStream.\n\tvoid uploadSuccessful(long bytes); // Records the total bytes successfully uploaded through AbfsOutputStream.\n\tvoid writeCurrentBuffer(); // Number of times buffer is written to the service after a write operation.\n}"}
{"index": 15158, "repo": "spring-data-elasticsearch-5.1.2", "des": "Encapsulation of methods for accessing the Cluster API.", "code": "public static interface ReactiveElasticsearchClient.Cluster {\n\tdefault reactor.core.publisher.Mono<org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse> health(Consumer<org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest> consumer); // Execute the given {ClusterHealthRequest} against the cluster API.\n\tdefault reactor.core.publisher.Mono<org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse> health(org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest clusterHealthRequest); // Execute the given {ClusterHealthRequest} against the cluster API.\n\treactor.core.publisher.Mono<org.elasticsearch.action.admin.cluster.health.ClusterHealthResponse> health(HttpHeaders headers, org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest clusterHealthRequest); // Execute the given {ClusterHealthRequest} against the cluster API.\n}"}
{"index": 17980, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.", "code": "public abstract class AbstractLoggingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor {\n\tvoid afterCompletion(MessageContext messageContext, Object endpoint, Exception ex); // Does nothing by default\n\tprotected abstract Source getSource(WebServiceMessage message); // Abstract template method that returns the Source for the given WebServiceMessage.\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Does nothing by default.\n\tboolean handleRequest(MessageContext messageContext, Object endpoint); // Logs the request message payload.\n\tboolean handleResponse(MessageContext messageContext, Object endpoint); // Logs the response message payload.\n\tprotected boolean isLogEnabled(); // Determine whether the logger field is enabled.\n\tprotected void logMessage(String message); // Logs the given string message.\n\tprotected void logMessageSource(String logMessage, Source source); // Logs the given source to the logger, using the message as a prefix.\n\tvoid setLoggerName(String loggerName); // Set the name of the logger to use.\n\tfinal void setLogRequest(boolean logRequest); // Indicates whether the request should be logged.\n\tfinal void setLogResponse(boolean logResponse); // Indicates whether the response should be logged.\n}"}
{"index": 278, "repo": "commons-collections4-4.4", "des": "Decorates another SortedMap to ensure it can't be altered.", "code": "Class UnmodifiableSortedMap<K,V> {\n\tvoid clear();\n\tComparator<? super K> comparator();\n\tSet<Map.Entry<K,V>> entrySet();\n\tK firstKey(); // Gets the first key currently in this map.\n\tSortedMap<K,V> headMap(K toKey);\n\tSet<K> keySet();\n\tK lastKey(); // Gets the last key currently in this map.\n\tV put(K key, V value); // Note that the return type is Object, rather than V as in the Map interface.\n\tvoid putAll(Map<? extends K,? extends V> mapToCopy);\n\tV remove(Object key);\n\tSortedMap<K,V> subMap(K fromKey, K toKey);\n\tSortedMap<K,V> tailMap(K fromKey);\n\tstatic <K,V> SortedMap<K,V> unmodifiableSortedMap(SortedMap<K,? extends V> map); // Factory method to create an unmodifiable sorted map.\n\tCollection<V> values();\n}"}
{"index": 17611, "repo": "spring-ldap-core-3.1.0", "des": "The specifications for the LdapClient.list(java.lang.String) request.", "code": "public static interface LdapClient.ListSpec {\n\t<T> List<T> toList(NameClassPairMapper<T> mapper); // Return the entry's children as a list of mapped results\n\t<T> Stream<T> toStream(NameClassPairMapper<T> mapper); // Return the entry's children as a stream of mapped results.\n}"}
{"index": 14098, "repo": "wicket-core-10.0.0-M1", "des": "Abstract base class for single-select choices.", "code": "public abstract class AbstractSingleSelectChoice<T> extends AbstractChoice<T,T> {\n\tprotected T convertChoiceIdToChoice(String id); // Converts submitted choice id string back to choice object.\n\tprotected final T convertValue(String[] value); // Subclasses should overwrite this if the conversion is not done through the type field and the IConverter.\n\tprotected CharSequence getDefaultChoice(String selectedValue); // Asks the Localizer for the property to display for an additional default choice depending on isNullValid(): \"nullValid\" if null is valid, defaulting to an empty string. \"null\" if null is not valid but no choice is selected (i.e.\n\tString getModelValue();\n\tprotected String getNullKey(); // Return the localization key for null value\n\tprotected String getNullKeyDisplayValue(); // Returns the display value if null is not valid but is selected.\n\tprotected String getNullValidDisplayValue(); // Returns the display value for the null value.\n\tprotected String getNullValidKey(); // Return the localization key for nullValid value\n\tboolean isNullValid(); // Determines whether or not the null value should be included in the list of choices when the field's model value is nonnull, and whether or not the null_valid string property (e.g.\n\tprotected boolean isSelected(T object, int index, String selected); // Gets whether the given value represents the current selection.\n\tAbstractSingleSelectChoice<T> setNullValid(boolean nullValid); // Determines whether or not the null value should be included in the list of choices when the field's model value is nonnull, and whether or not the null_valid string property (e.g.\n}"}
{"index": 13442, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Callback interface that can be implemented by beans wishing to further customize the RestClient through a RestClientBuilder whilst retaining default auto-configuration.", "code": "@FunctionalInterface public interface RestClientBuilderCustomizer {\n\tdefault void customize(org.apache.http.client.config.RequestConfig.Builder builder); // Customize the RequestConfig.Builder.\n\tdefault void customize(org.apache.http.impl.nio.client.HttpAsyncClientBuilder builder); // Customize the HttpAsyncClientBuilder.\n\tvoid customize(org.elasticsearch.client.RestClientBuilder builder); // Customize the RestClientBuilder.\n}"}
{"index": 1422, "repo": "pdfbox-3.0.0-beta1", "des": "y Append curved segment to path with final point replicated.", "code": "Class CurveToReplicateFinalPoint {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> operands); // Process the operator.\n}"}
{"index": 12543, "repo": "spring-jdbc-6.0.11", "des": "Reusable RDBMS query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to map each row of the JDBC ResultSet into an object.", "code": "public abstract class MappingSqlQueryWithParameters<T> extends SqlQuery<T> {\n\tprotected abstract T mapRow(ResultSet rs, int rowNum, Object[] parameters, Map<?,?> context); // Subclasses must implement this method to convert each row of the ResultSet into an object of the result type.\n\tprotected RowMapper<T> newRowMapper(Object[] parameters, Map<?,?> context); // Implementation of protected abstract method.\n}"}
{"index": 2205, "repo": "hive-exec-4.0.0-alpha-2", "des": "Retrieve rows from hashtable key by key, one key at a time, w/o copying the structures for each key.", "code": "Interface MapJoinTableContainer.ReusableGetAdaptor {\n\tObject[] getCurrentKey();\n\tMapJoinRowContainer getCurrentRows();\n\tboolean hasAnyNulls(int fieldCount, boolean[] nullsafes); // Checks whether the current key has any nulls.\n\tJoinUtil.JoinResult setFromOther(MapJoinTableContainer.ReusableGetAdaptor other); // Changes current rows to which adaptor is referring to the rows corresponding to the key that another adaptor has already deserialized via setFromVector/setFromRow.\n\tJoinUtil.JoinResult setFromRow(Object row, List<ExprNodeEvaluator> fields, List<ObjectInspector> ois); // Changes current rows to which adaptor is referring to the rows corresponding to the key represented by a row object, and fields and ois used to interpret it.\n\tJoinUtil.JoinResult setFromRowNoNulls(Object row, List<ExprNodeEvaluator> fields, List<ObjectInspector> ois, MatchTracker matchTracker);\n\tJoinUtil.JoinResult setFromVector(VectorHashKeyWrapperBase kw, VectorExpressionWriter[] keyOutputWriters, VectorHashKeyWrapperBatch keyWrapperBatch); // Changes current rows to which adaptor is referring to the rows corresponding to the key represented by a VHKW object, and writers and batch used to interpret it.\n\tJoinUtil.JoinResult setFromVectorNoNulls(VectorHashKeyWrapperBase kw, VectorExpressionWriter[] keyOutputWriters, VectorHashKeyWrapperBatch keyWrapperBatch, MatchTracker matchTracker);\n}"}
{"index": 3671, "repo": "hive-serde-4.0.0-alpha-2", "des": "TimestampWritable Writable equivalent of java.", "code": "Class TimestampWritable {\n\tint compareTo(TimestampWritable t);\n\tstatic void convertTimestampToBytes(Timestamp t, byte[] b, int offset); // Writes a Timestamp's serialized value to byte array b at the given offset\n\tstatic Timestamp createTimestamp(byte[] bytes, int offset);\n\tboolean equals(Object o);\n\tbyte[] getBinarySortable();\n\tbyte[] getBytes(); // Used to create copies of objects\n\tdouble getDouble();\n\tHiveDecimal getHiveDecimal();\n\tstatic HiveDecimal getHiveDecimal(Timestamp timestamp);\n\tstatic long getLong(Timestamp timestamp);\n\tint getNanos();\n\tstatic int getNanos(byte[] bytes, int offset);\n\tlong getSeconds();\n\tstatic long getSeconds(byte[] bytes, int offset); // Gets seconds stored as integer at bytes[offset]\n\tTimestamp getTimestamp();\n\tstatic int getTotalLength(byte[] bytes, int offset);\n\tboolean hasDecimal();\n\tstatic Timestamp longToTimestamp(long time, boolean intToTimestampInSeconds); // Converts the time in seconds or milliseconds to a timestamp.\n\tvoid readFields(DataInput in);\n\tvoid set(byte[] bytes, int offset);\n\tvoid set(Timestamp t);\n\tvoid set(TimestampWritable t);\n\tvoid setBinarySortable(byte[] bytes, int binSortOffset); // Given a byte[] that has binary sortable data, initialize the internal structures to hold that data\n\tvoid setInternal(long secondsAsMillis, int nanos);\n\tvoid setTime(long time);\n\tstatic void setTimestamp(Timestamp t, byte[] bytes, int offset);\n\tstatic void updateTimestamp(Timestamp timestamp, long secondsAsMillis, int nanos);\n\tvoid write(DataOutput out);\n\tvoid writeToByteStream(ByteStream.RandomAccessOutput byteStream);\n}"}
{"index": 12119, "repo": "jena-core-4.9.0", "des": "Tests if the first argument is less than or equal to the second.", "code": "public class LE extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 2984, "repo": "tink-1.10.0", "des": "The key for computing Ed25519 signatures.", "code": "Class Ed25519PrivateKey {\n\tstatic Ed25519PrivateKey create(Ed25519PublicKey publicKey, SecretBytes privateKeyBytes);\n\tboolean equalsKey(Key o); // Returns true if the key is guaranteed to be equal to other.\n\tEd25519Parameters getParameters(); // Returns the parameters of this key.\n\tSecretBytes getPrivateKeyBytes();\n\tEd25519PublicKey getPublicKey(); // Returns the SignaturePublicKey, which contains the verify function of the digital signature primitive.\n}"}
{"index": 4255, "repo": "spring-cloud-loadbalancer-3.1.6", "des": "A Builder for creating a ServiceInstanceListSupplier hierarchy to be used in ReactorLoadBalancer configuration.", "code": "Class ServiceInstanceListSupplierBuilder {\n\tServiceInstanceListSupplier build(org.springframework.context.ConfigurableApplicationContext context); // Builds the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder with(ServiceInstanceListSupplierBuilder.DelegateCreator delegateCreator); // Support ServiceInstanceListSupplierBuilder can be added to the expansion implementation of ServiceInstanceListSupplier by this method.\n\tServiceInstanceListSupplierBuilder withBase(ServiceInstanceListSupplier supplier); // Sets a user-provided ServiceInstanceListSupplier as a base ServiceInstanceListSupplier in the hierarchy.\n\tServiceInstanceListSupplierBuilder withBlockingDiscoveryClient(); // Sets a blocking DiscoveryClient-based DiscoveryClientServiceInstanceListSupplier as a base ServiceInstanceListSupplier in the hierarchy.\n\tServiceInstanceListSupplierBuilder withBlockingHealthChecks(); // Adds a HealthCheckServiceInstanceListSupplier that uses user-provided RestTemplate instance to the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder withBlockingHealthChecks(org.springframework.web.client.RestTemplate restTemplate); // Adds a HealthCheckServiceInstanceListSupplier that uses user-provided RestTemplate instance to the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder withCaching(); // If LoadBalancerCacheManager is available in the context, wraps created ServiceInstanceListSupplier hierarchy with a CachingServiceInstanceListSupplier instance to provide a caching mechanism for service instances.\n\tServiceInstanceListSupplierBuilder withDiscoveryClient(); // Sets a ReactiveDiscoveryClient-based DiscoveryClientServiceInstanceListSupplier as a base ServiceInstanceListSupplier in the hierarchy.\n\tServiceInstanceListSupplierBuilder withHealthChecks(); // Adds a HealthCheckServiceInstanceListSupplier to the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder withHealthChecks(org.springframework.web.reactive.function.client.WebClient webClient); // Adds a HealthCheckServiceInstanceListSupplier that uses user-provided WebClient instance to the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder withHints();\n\tServiceInstanceListSupplierBuilder withRequestBasedStickySession(); // Adds a RequestBasedStickySessionServiceInstanceListSupplier to the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder withRetryAwareness();\n\tServiceInstanceListSupplierBuilder withSameInstancePreference(); // Adds a SameInstancePreferenceServiceInstanceListSupplier to the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder withZonePreference(); // Adds a ZonePreferenceServiceInstanceListSupplier to the ServiceInstanceListSupplier hierarchy.\n\tServiceInstanceListSupplierBuilder withZonePreference(String zoneName); // Adds a ZonePreferenceServiceInstanceListSupplier to the ServiceInstanceListSupplier hierarchy.\n}"}
{"index": 9605, "repo": "commons-math3-3.6.1", "des": "Enumerate for actions to be performed when an event occurs.", "code": "Enum EventHandler.Action {\n\tstatic EventHandler.Action valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic EventHandler.Action[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13979, "repo": "spring-webflux-6.0.11", "des": "Exception thrown to indicate that a Content-Type is not supported.", "code": "public class UnsupportedMediaTypeException extends org.springframework.core.NestedRuntimeException {\n\torg.springframework.core.ResolvableType getBodyType(); // Return the body type in the context of which this exception was generated.\n\torg.springframework.http.MediaType getContentType(); // Return the request Content-Type header if it was parsed successfully, or null otherwise.\n\tList<org.springframework.http.MediaType> getSupportedMediaTypes(); // Return the list of supported content types in cases when the Content-Type header is parsed but not supported, or an empty list otherwise.\n}"}
{"index": 13639, "repo": "slf4j-ext-2.0.7", "des": "This interface sets the methods that must be implemented by Profiler and StopWatch classes.", "code": "public interface TimeInstrument {\n\tlong elapsedTime(); // Time elapsed between start and stop, in nanoseconds.\n\tString getName(); // All time instruments are named entities.\n\torg.slf4j.profiler.TimeInstrumentStatus getStatus();\n\tvoid log(); // If the time instrument has an associated logger, then log information about this time instrument.\n\tvoid print(); // Print information about this time instrument on the console.\n\tvoid start(String name); // Start this time instrument.\n\tTimeInstrument stop(); // Stop this time instrument.\n}"}
{"index": 16474, "repo": "spring-batch-infrastructure-5.0.2", "des": "ItemReader for reading database records using JDBC in a paging fashion.", "code": "public class JdbcPagingItemReader<T> extends AbstractPagingItemReader<T> implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Check mandatory properties.\n\tprotected void doReadPage();\n\tvoid open(ExecutionContext executionContext); // No-op.\n\tvoid setDataSource(DataSource dataSource);\n\tvoid setFetchSize(int fetchSize); // Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed for this ResultSet object.\n\tvoid setParameterValues(Map<String,Object> parameterValues); // The parameter values to be used for the query execution.\n\tvoid setQueryProvider(PagingQueryProvider queryProvider); // A PagingQueryProvider.\n\tvoid setRowMapper(org.springframework.jdbc.core.RowMapper<T> rowMapper); // The row mapper implementation to be used by this reader.\n\tvoid update(ExecutionContext executionContext); // Return empty ExecutionContext.\n}"}
{"index": 4318, "repo": "beam-sdks-java-core-2.49.0", "des": "An accessor for additional capabilities available in Contextful.", "code": "Class Contextful.Fn.Context {\n\t<T> T sideInput(PCollectionView<T> view); // Accesses the given side input.\n\tstatic <InputT> Contextful.Fn.Context wrapProcessContext(DoFn.ProcessContext c); // Convenience wrapper for creating a Contextful.Fn.Context from a DoFn.ProcessContext, to support the common case when a PTransform is invoking the closure from inside a DoFn.\n}"}
{"index": 701, "repo": "ignite-core-2.15.0", "des": "This class defines output stream backed by byte array.", "code": "Class GridByteArrayOutputStream {\n\tvoid close();\n\tbyte[] internalArray(); // Returns internal array without copy (use with care).\n\tvoid reset(); // Resets the count field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded.\n\tint size(); // Returns the current size of the buffer.\n\tbyte[] toByteArray(); // Creates a newly allocated byte array.\n\tvoid write(byte[] b, int off, int len); // Writes len bytes from the specified byte array starting at offset off to this byte array output stream.\n\tvoid write(int b); // Writes the specified byte to this byte array output stream.\n\tvoid writeTo(OutputStream out); // Writes the complete contents of this byte array output stream to the specified output stream argument, as if by calling the output stream's write method using out.write(buf, 0, count).\n}"}
{"index": 6292, "repo": "commons-codec-1.16.0", "des": "Charsets required of every implementation of the Java platform.", "code": "Class Charsets {\n\tstatic Charset toCharset(Charset charset); // Returns the given Charset or the default Charset if the given Charset is null.\n\tstatic Charset toCharset(String charset); // Returns a Charset for the named charset.\n}"}
{"index": 3920, "repo": "hudi-client-0.6.0", "des": "This strategy orders compactions in reverse order of creation of Hive Partitions.", "code": "Class DayBasedCompactionStrategy {\n\tList<String> filterPartitionPaths(HoodieWriteConfig writeConfig, List<String> allPartitionPaths); // Filter the partition paths based on compaction strategy.\n\tComparator<String> getComparator();\n\tprotected static String getPartitionPathWithoutPartitionKeys(String partitionPath); // If is Hive style partition path, convert it to regular partition path.\n\tList<HoodieCompactionOperation> orderAndFilter(HoodieWriteConfig writeConfig, List<HoodieCompactionOperation> operations, List<HoodieCompactionPlan> pendingCompactionPlans); // Order and Filter the list of compactions.\n}"}
{"index": 13763, "repo": "spring-webmvc-6.0.11", "des": "The <radiobutton> tag renders an HTML 'input' tag with type 'radio'.", "code": "public class RadioButtonTag extends AbstractSingleCheckedElementTag {\n\tprotected String getInputType(); // Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected void writeTagDetails(TagWriter tagWriter); // Write the details for the given primary tag: i.e.\n}"}
{"index": 8325, "repo": "spring-ws-3.0.10.RELEASE", "des": "Miscellaneous utilities for web applications.", "code": "Class WebUtils {\n\tstatic String extractFilenameFromUrlPath(String urlPath); // Extract the URL filename from the given request URL path.\n\tstatic String extractFullFilenameFromUrlPath(String urlPath); // Extract the full URL filename (including file extension) from the given request URL path.\n}"}
{"index": 1088, "repo": "ignite-core-2.15.0", "des": "Update counter wrapper for error logging.", "code": "Class PartitionUpdateCounterErrorWrapper {\n\tObject comparableState();\n\tCacheGroupContext context();\n\tPartitionUpdateCounter copy();\n\tboolean empty();\n\tboolean equals(Object o);\n\tGridLongList finalizeUpdateCounters(); // Flushes pending update counters closing all possible gaps.\n\tlong get(); // Get LWM.\n\t@Nullable byte[] getBytes();\n\tlong highestAppliedCounter(); // Returns highest applied update counter.\n\tvoid init(long initUpdCntr, @Nullable byte[] cntrUpdData); // Restores update counter state.\n\tlong initial();\n\tIterator<long[]> iterator();\n\tlong next(); // Increment LWM by 1.\n\tlong next(long delta); // Increment LWM by delta.\n\tlong reserve(long delta); // Increment HWM by delta.\n\tlong reserved(); // Returns HWM.\n\tvoid reset(); // Reset counter internal state to zero.\n\tvoid resetInitialCounter(); // Reset the initial counter value to zero.\n\tboolean sequential();\n\tvoid update(long val); // Sets update counter to absolute value.\n\tboolean update(long start, long delta); // Applies counter update out of range.\n\tvoid updateInitial(long start, long delta);\n}"}
{"index": 9457, "repo": "curator-recipes-5.5.0", "des": "Interface for maintaining data in a CuratorCache.", "code": "Interface CuratorCacheStorage {\n\tvoid clear(); // Reset the storage to zero entries\n\tstatic CuratorCacheStorage dataNotCached(); // Return a new storage instance that does not retain the data bytes.\n\tOptional<ChildData> get(String path); // Return an entry from storage\n\tOptional<ChildData> put(ChildData data); // Add an entry to storage and return any previous entry at that path\n\tOptional<ChildData> remove(String path); // Remove the entry from storage and return any previous entry at that path\n\tint size(); // Return the current number of entries in storage\n\tstatic CuratorCacheStorage standard(); // Return a new standard storage instance\n\tStream<ChildData> stream(); // Return a stream over the storage entries.\n}"}
{"index": 11103, "repo": "tribuo-core-4.3.1", "des": "Contains provenance information for an instance of a SelectedFeatureSet.", "code": "public final class FeatureSetProvenance extends Object implements com.oracle.labs.mlrg.olcut.provenance.ObjectProvenance {\n\tboolean equals(Object o);\n\tString getClassName();\n\tDatasetProvenance getDatasetProvenance(); // The training dataset provenance.\n\tFeatureSelectorProvenance getFeatureSelectorProvenance(); // The feature selector provenance.\n\tString getTribuoVersion(); // The Tribuo version used to create this feature set.\n\tprotected List<com.oracle.labs.mlrg.olcut.util.Pair<String,com.oracle.labs.mlrg.olcut.provenance.Provenance>> internalProvenances(); // Returns a list of all the provenances in this model provenance so subclasses can append to the list.\n\tIterator<com.oracle.labs.mlrg.olcut.util.Pair<String,com.oracle.labs.mlrg.olcut.provenance.Provenance>> iterator(); // Calls internalProvenances() and returns the iterator from that list.\n}"}
{"index": 4741, "repo": "hadoop-common-3.3.4", "des": "Represents the network location of a block, information about the hosts that contain block replicas, and other block metadata (E.", "code": "Class BlockLocation {\n\tString[] getCachedHosts(); // Get the list of hosts (hostname) hosting a cached replica of the block.\n\tString[] getHosts(); // Get the list of hosts (hostname) hosting this block.\n\tlong getLength(); // Get the length of the block.\n\tString[] getNames(); // Get the list of names (IP:xferPort) hosting this block.\n\tlong getOffset(); // Get the start offset of file associated with this block.\n\tString[] getStorageIds(); // Get the storageID of each replica of the block.\n\tStorageType[] getStorageTypes(); // Get the storage type of each replica of the block.\n\tString[] getTopologyPaths(); // Get the list of network topology paths for each of the hosts.\n\tboolean isCorrupt(); // Get the corrupt flag.\n\tboolean isStriped(); // Return true if the block is striped (erasure coded).\n\tvoid setCachedHosts(String[] cachedHosts); // Set the hosts hosting a cached replica of this block.\n\tvoid setCorrupt(boolean corrupt); // Set the corrupt flag.\n\tvoid setHosts(String[] hosts); // Set the hosts hosting this block.\n\tvoid setLength(long length); // Set the length of block.\n\tvoid setNames(String[] names); // Set the names (host:port) hosting this block.\n\tvoid setOffset(long offset); // Set the start offset of file associated with this block.\n\tvoid setStorageIds(String[] storageIds);\n\tvoid setStorageTypes(StorageType[] storageTypes);\n\tvoid setTopologyPaths(String[] topologyPaths); // Set the network topology paths of the hosts.\n}"}
{"index": 306, "repo": "phoenix-core-5.1.3", "des": "This class implements client-side hash aggregation in memory.", "code": "Class ClientHashAggregatingResultIterator {\n\tAggregator[] aggregate(Tuple result); // Provides a means of re-aggregating a result row.\n\tvoid close();\n\tvoid explain(List<String> planSteps);\n\tvoid explain(List<String> planSteps, ExplainPlanAttributes.ExplainPlanAttributesBuilder explainPlanAttributesBuilder); // Generate ExplainPlan steps and add steps as list of Strings in planSteps argument as readable statement as well as add same generated steps in explainPlanAttributesBuilder so that we prepare ExplainPlan result as an attribute object useful to retrieve individual plan step attributes.\n\tprotected org.apache.hadoop.hbase.io.ImmutableBytesWritable getGroupingKey(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr);\n\tTuple next(); // Grab the next row's worth of values.\n\tprotected Tuple wrapKeyValueAsResult(org.apache.hadoop.hbase.Cell keyValue);\n}"}
{"index": 9357, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by clients to get queue information from the ResourceManager.", "code": "Class GetQueueInfoRequest {\n\tabstract boolean getIncludeApplications(); // Is information about active applications required?\n\tabstract boolean getIncludeChildQueues(); // Is information about child queues required?\n\tabstract String getQueueName(); // Get the queue name for which to get queue information.\n\tabstract boolean getRecursive(); // Is information on the entire child queue hierarchy required?\n\tstatic GetQueueInfoRequest newInstance(String queueName, boolean includeApplications, boolean includeChildQueues, boolean recursive);\n\tabstract void setIncludeApplications(boolean includeApplications); // Should we get fetch information about active applications?\n\tabstract void setIncludeChildQueues(boolean includeChildQueues); // Should we fetch information about child queues?\n\tabstract void setQueueName(String queueName); // Set the queue name for which to get queue information\n\tabstract void setRecursive(boolean recursive); // Should we fetch information on the entire child queue hierarchy?\n}"}
{"index": 15736, "repo": "camel-api-4.0.0-RC1", "des": "Represents the options for the client authentication settings of a server socket.", "code": "public enum ClientAuthentication extends Enum<ClientAuthentication> {\n\tstatic ClientAuthentication valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ClientAuthentication[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14649, "repo": "spring-data-commons-3.1.2", "des": "Convenience base class for aggregate roots that exposes a AbstractAggregateRoot.registerEvent(Object) to capture domain events and expose them via AbstractAggregateRoot.domainEvents().", "code": "public class AbstractAggregateRoot<A extends AbstractAggregateRoot<A>> extends Object {\n\tprotected final A andEvent(Object event); // Adds the given event to the aggregate for later publication when calling a Spring Data repository's save-method.\n\tprotected final A andEventsFrom(A aggregate); // Adds all events contained in the given aggregate to the current one.\n\tprotected void clearDomainEvents(); // Clears all domain events currently held.\n\tprotected Collection<Object> domainEvents(); // All domain events currently captured by the aggregate.\n\tprotected <T> T registerEvent(T event); // Registers the given event object for publication on a call to a Spring Data repository's save methods.\n}"}
{"index": 9967, "repo": "commons-text-1.10.0", "des": "Formats using one formatter and parses using a different formatter.", "code": "Class CompositeFormat {\n\tStringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos); // Formats the input.\n\tFormat getFormatter(); // Gets the parser Format implementation.\n\tFormat getParser(); // Gets the parser Format implementation.\n\tObject parseObject(String source, ParsePosition pos); // Parses the input.\n\tString reformat(String input); // Parses and then reformats a String.\n}"}
{"index": 3641, "repo": "hive-serde-4.0.0-alpha-2", "des": "OpenCSVSerde use opencsv to deserialize CSV format.", "code": "Class OpenCSVSerde {\n\tObject deserialize(org.apache.hadoop.io.Writable blob); // Deserialize an object out of a Writable blob.\n\tObjectInspector getObjectInspector(); // Get the object inspector that can be used to navigate through the internal structure of the Object returned from deserialize(...).\n\tClass<? extends org.apache.hadoop.io.Writable> getSerializedClass(); // Returns the Writable class that would be returned by the serialize method.\n\tvoid initialize(org.apache.hadoop.conf.Configuration configuration, Properties tableProperties, Properties partitionProperties); // Initialize the SerDe.\n\torg.apache.hadoop.io.Writable serialize(Object obj, ObjectInspector objInspector); // Serialize an object by navigating inside the Object with the ObjectInspector.\n}"}
{"index": 8084, "repo": "commons-compress-1.23.0", "des": "A run codec is a grouping of two nested codecs; K values are decoded from the first codec, and the remaining codes are decoded from the remaining codec.", "code": "Class RunCodec {\n\tint decode(InputStream in); // Decode a sequence of bytes from the given input stream, returning the value as a long.\n\tint decode(InputStream in, long last); // Decode a sequence of bytes from the given input stream, returning the value as a long.\n\tint[] decodeInts(int n, InputStream in); // Decodes a sequence of n values from in.\n\tbyte[] encode(int value); // Encode a single value into a sequence of bytes.\n\tbyte[] encode(int value, int last); // Encode a single value into a sequence of bytes.\n\tCodec getACodec();\n\tCodec getBCodec();\n\tint getK();\n}"}
{"index": 3421, "repo": "nifi-api-1.22.0", "des": "This interface provides a bridge between the NiFi Framework and a ReportingTask.", "code": "Interface ReportingContext {\n\tBulletin createBulletin(String category, Severity severity, String message); // Creates a controller-level Bulletin with the given category, severity level, and message, so that the Bulletin can be added to the BulletinRepository.\n\tBulletin createBulletin(String componentId, String category, Severity severity, String message); // Creates a Bulletin for the component with the specified identifier.\n\tBulletinRepository getBulletinRepository();\n\tString getClusterNodeIdentifier();\n\tControllerServiceLookup getControllerServiceLookup();\n\tEventAccess getEventAccess();\n\tMap<PropertyDescriptor,String> getProperties();\n\tStateManager getStateManager();\n\tdefault boolean isAnalyticsEnabled();\n\tboolean isClustered();\n}"}
{"index": 14745, "repo": "spring-data-commons-3.1.2", "des": "Interface to allow execution of QueryDsl Predicate instances.", "code": "public interface ListQuerydslPredicateExecutor<T> extends QuerydslPredicateExecutor<T> {\n\tList<T> findAll(com.querydsl.core.types.OrderSpecifier<?>... orders); // Returns all entities ordered by the given OrderSpecifiers.\n\tList<T> findAll(com.querydsl.core.types.Predicate predicate); // Returns all entities matching the given Predicate.\n\tList<T> findAll(com.querydsl.core.types.Predicate predicate, com.querydsl.core.types.OrderSpecifier<?>... orders); // Returns all entities matching the given Predicate applying the given OrderSpecifiers.\n\tList<T> findAll(com.querydsl.core.types.Predicate predicate, Sort sort); // Returns all entities matching the given Predicate applying the given Sort.\n}"}
{"index": 17458, "repo": "spring-security-config-6.1.2", "des": "Allows configuring a shared PortMapper instance used to determine the ports when redirecting between HTTP and HTTPS.", "code": "public final class PortMapperConfigurer<H extends HttpSecurityBuilder<H>> extends AbstractHttpConfigurer<PortMapperConfigurer<H>,H> {\n\tPortMapperConfigurer<H>.HttpPortMapping http(int httpPort); // Adds a port mapping\n\tvoid init(H http); // Initialize the SecurityBuilder.\n\tPortMapperConfigurer<H> portMapper(org.springframework.security.web.PortMapper portMapper); // Allows specifying the PortMapper instance.\n}"}
{"index": 1802, "repo": "kafka-clients-3.5.0", "des": "Represents a cluster resource with a tuple of (type, name).", "code": "Class Resource {\n\tboolean equals(Object o);\n\tboolean isUnknown(); // Return true if this Resource has any UNKNOWN components.\n\tString name(); // Return the resource name.\n\tResourceType resourceType(); // Return the resource type.\n}"}
{"index": 12037, "repo": "jena-core-4.9.0", "des": "A variant of the \"remove\" builtin that will delete matched triples from the graph but will not trigger further rule processing for the removed triples.", "code": "public class Drop extends BaseBuiltin {\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n\tvoid headAction(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule head.\n\tboolean isMonotonic(); // Returns false if this builtin is non-monotonic.\n}"}
{"index": 13591, "repo": "spring-messaging-6.0.11", "des": "Decodes one or more STOMP frames contained in a ByteBuffer.", "code": "public class StompDecoder extends Object {\n\tList<Message<byte[]>> decode(ByteBuffer byteBuffer); // Decodes one or more STOMP frames from the given ByteBuffer into a list of Messages.\n\tList<Message<byte[]>> decode(ByteBuffer byteBuffer, org.springframework.util.MultiValueMap<String,String> partialMessageHeaders); // Decodes one or more STOMP frames from the given buffer and returns a list of Messages.\n\tMessageHeaderInitializer getHeaderInitializer(); // Return the configured MessageHeaderInitializer, if any.\n\tvoid setHeaderInitializer(MessageHeaderInitializer headerInitializer); // Configure a MessageHeaderInitializer to apply to the headers of Messages from decoded STOMP frames.\n\tprotected void skipEol(ByteBuffer byteBuffer); // Skip one ore more EOL characters at the start of the given ByteBuffer.\n}"}
{"index": 15073, "repo": "spring-vault-core-3.0.4", "des": "This class encapsulates main Vault interaction.", "code": "public class ReactiveVaultTemplate extends Object implements ReactiveVaultOperations {\n\tMono<Void> delete(String path); // Delete a path.\n\tprotected WebClient doCreateSessionWebClient(VaultEndpointProvider endpointProvider, ClientHttpConnector connector); // Create a session-bound WebClient to be used by VaultTemplate for Vault communication given VaultEndpointProvider and ClientHttpConnector for calls that require an authenticated context.\n\tprotected WebClient doCreateWebClient(VaultEndpointProvider endpointProvider, ClientHttpConnector connector); // Create a WebClient to be used by ReactiveVaultTemplate for Vault communication given VaultEndpointProvider and ClientHttpConnector.\n\t<V, T extends org.reactivestreams.Publisher<V>>T doWithSession(Function<WebClient,? extends T> sessionCallback); // Executes a Vault RestOperationsCallback.\n\t<V, T extends org.reactivestreams.Publisher<V>>T doWithVault(Function<WebClient,? extends T> clientCallback); // Executes a Vault RestOperationsCallback.\n\tFlux<String> list(String path); // Enumerate keys from a Vault path.\n\tMono<VaultResponse> read(String path); // Read from a Vault path.\n\t<T> Mono<VaultResponseSupport<T>> read(String path, Class<T> responseType); // Read from a Vault path.\n\tMono<VaultResponse> write(String path, Object body); // Write to a Vault path.\n}"}
{"index": 11824, "repo": "spring-kafka-3.0.9", "des": "Called whenever a consumer is added or removed.", "code": "public static interface ConsumerFactory.Listener<K,V> {\n\tdefault void consumerAdded(String id, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // A new consumer was created.\n\tdefault void consumerRemoved(String id, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // An existing consumer was removed.\n}"}
{"index": 3637, "repo": "hive-serde-4.0.0-alpha-2", "des": "ObjectInspector helps us to look into the internal structure of a complex object.", "code": "Interface ObjectInspector {\n\tObjectInspector.Category getCategory(); // An ObjectInspector must inherit from one of the following interfaces if getCategory() returns: PRIMITIVE: PrimitiveObjectInspector LIST: ListObjectInspector MAP: MapObjectInspector STRUCT: StructObjectInspector.\n\tString getTypeName(); // Returns the name of the data type that is inspected by this ObjectInspector.\n}"}
{"index": 4041, "repo": "zookeeper-3.8.2", "des": "A variation on AuthenticationProvider that provides additional parameters for more detailed authentication.", "code": "Class ServerAuthenticationProvider {\n\tabstract KeeperException.Code handleAuthentication(ServerAuthenticationProvider.ServerObjs serverObjs, byte[] authData); // This method is called when a client passes authentication data for this scheme.\n\tKeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData); // This method is called when a client passes authentication data for this scheme.\n\tabstract boolean matches(ServerAuthenticationProvider.ServerObjs serverObjs, ServerAuthenticationProvider.MatchValues matchValues); // This method is called to see if the given id matches the given id expression in the ACL.\n\tboolean matches(String id, String aclExpr); // This method is called to see if the given id matches the given id expression in the ACL.\n}"}
{"index": 3745, "repo": "kafka-streams-3.5.0", "des": "The unlimited window specifications used for aggregations.", "code": "Class UnlimitedWindows {\n\tboolean equals(Object o);\n\tlong gracePeriodMs(); // Return the window grace period (the time to admit out-of-order events after the end of the window.) Delay is defined as (stream_time - record_timestamp).\n\tstatic UnlimitedWindows of(); // Return an unlimited window starting at timestamp zero.\n\tlong size(); // Return the size of the specified windows in milliseconds.\n\tUnlimitedWindows startOn(Instant start); // Return a new unlimited window for the specified start timestamp.\n\tMap<Long,org.apache.kafka.streams.kstream.internals.UnlimitedWindow> windowsFor(long timestamp); // Create all windows that contain the provided timestamp, indexed by non-negative window start timestamps.\n}"}
{"index": 18319, "repo": "opencms-core-15.0", "des": "A bean representing a set of select options.", "code": "Class CmsBuiltinPreference.SelectOptions {\n\tjava.util.List<java.lang.String> getOptions(); // Gets the select option labels.\n\tint getSelectedIndex(); // Gets the selected index.\n\tjava.util.List<java.lang.String> getValues(); // Gets the select widget values.\n\tjava.lang.String toClientSelectWidgetConfiguration(); // Creates a configuration string for client-side select widgets from the options.\n}"}
{"index": 6150, "repo": "jackson-databind-2.15.2", "des": "This singleton node class is generated to denote \"missing nodes\" along paths that do not exist.", "code": "Class MissingNode {\n\tString asText(); // Method that will return a valid String representation of the container value, if the node is a value node (method JsonNode.isValueNode() returns true), otherwise empty String.\n\tString asText(String defaultValue); // Method similar to JsonNode.asText(), except that it will return defaultValue in cases where null value would be returned; either for missing nodes (trying to access missing property, or element at invalid item for array) or explicit nulls.\n\tJsonToken asToken(); // Method that can be used for efficient type detection when using stream abstraction for traversing nodes.\n\t<T extends JsonNode>T deepCopy(); // All current value nodes are immutable, so we can just return them as is.\n\tboolean equals(Object o); // Equality for node objects is defined as full (deep) value equality.\n\tstatic MissingNode getInstance();\n\tJsonNodeType getNodeType(); // Return the type of this node\n\tboolean isMissingNode();\n\tprotected Object readResolve();\n\tJsonNode require(); // Method that may be called to verify that this node is NOT so-called \"missing node\": that is, one for which JsonNode.isMissingNode() returns true.\n\tJsonNode requireNonNull(); // Method that may be called to verify that this node is neither so-called \"missing node\" (that is, one for which JsonNode.isMissingNode() returns true) nor \"null node\" (one for which JsonNode.isNull() returns true).\n\tvoid serialize(JsonGenerator g, SerializerProvider provider); // Method called to serialize node instances using given generator.\n\tvoid serializeWithType(JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer); // Type information is needed, even if JsonNode instances are \"plain\" JSON, since they may be mixed with other types.\n\tString toPrettyString(); // Alternative to JsonNode.toString() that will serialize this node using Jackson default pretty-printer.\n}"}
{"index": 7799, "repo": "cassandra-all-4.1.2", "des": "Wraps one or more writers as output for rewriting one or more readers: every sstable_preemptive_open_interval we look in the summary we're collecting for the latest writer for the penultimate key that we know to have been fully flushed to the index file, and then double check that the key is fully present in the flushed data file.", "code": "Class SSTableRewriter {\n\tRowIndexEntry append(UnfilteredRowIterator partition);\n\tstatic SSTableRewriter construct(ColumnFamilyStore cfs, ILifecycleTransaction transaction, boolean keepOriginals, long maxAge);\n\tstatic SSTableRewriter constructKeepingOriginals(ILifecycleTransaction transaction, boolean keepOriginals, long maxAge);\n\tstatic SSTableRewriter constructWithoutEarlyOpening(ILifecycleTransaction transaction, boolean keepOriginals, long maxAge);\n\tSSTableWriter currentWriter();\n\tprotected java.lang.Throwable doAbort(java.lang.Throwable accumulate);\n\tprotected java.lang.Throwable doCommit(java.lang.Throwable accumulate);\n\tprotected void doPrepare(); // Do any preparatory work prior to commit.\n\tjava.util.List<SSTableReader> finish(); // Finishes the new file(s) Creates final files, adds the new files to the Tracker (via replaceReader).\n\tjava.util.List<SSTableReader> finished();\n\tSSTableRewriter setRepairedAt(long repairedAt);\n\tvoid switchWriter(SSTableWriter newWriter);\n\tvoid throwDuringPrepare(boolean earlyException);\n\tRowIndexEntry tryAppend(UnfilteredRowIterator partition);\n}"}
{"index": 9144, "repo": "hbase-server-3.0.0-alpha-4", "des": "Procedures that operates on a specific Table (e.", "code": "Interface TableProcedureInterface {\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n}"}
{"index": 8045, "repo": "commons-compress-1.23.0", "des": "CpioArchiveInputStream is a stream for reading cpio streams.", "code": "Class CpioArchiveInputStream {\n\tint available(); // Returns 0 after EOF has reached for the current entry data, otherwise always return 1.\n\tvoid close(); // Closes the CPIO input stream.\n\tCpioArchiveEntry getNextCPIOEntry(); // Reads the next CPIO file entry and positions stream at the beginning of the entry data.\n\tArchiveEntry getNextEntry(); // Returns the next Archive Entry in this Stream.\n\tstatic boolean matches(byte[] signature, int length); // Checks if the signature matches one of the following magic values: Strings: \"070701\" - MAGIC_NEW \"070702\" - MAGIC_NEW_CRC \"070707\" - MAGIC_OLD_ASCII Octal Binary value: 070707 - MAGIC_OLD_BINARY (held as a short) = 0x71C7 or 0xC771\n\tint read(byte[] b, int off, int len); // Reads from the current CPIO entry into an array of bytes.\n\tlong skip(long n); // Skips specified number of bytes in the current CPIO entry.\n}"}
{"index": 13398, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Class for storing auto-configuration packages for reference later (e.g.", "code": "public abstract class AutoConfigurationPackages extends Object {\n\tstatic List<String> get(org.springframework.beans.factory.BeanFactory beanFactory); // Return the auto-configuration base packages for the given bean factory.\n\tstatic boolean has(org.springframework.beans.factory.BeanFactory beanFactory); // Determine if the auto-configuration base packages for the given bean factory are available.\n\tstatic void register(org.springframework.beans.factory.support.BeanDefinitionRegistry registry, String... packageNames); // Programmatically registers the auto-configuration package names.\n}"}
{"index": 16046, "repo": "wicket-request-10.0.0-M1", "des": "Maps IRequestHandler(s) into Url(s) and Request(s) to IRequestHandler(s).", "code": "public interface IRequestMapper {\n\tint getCompatibilityScore(Request request); // Returns the score representing how compatible this request mapper is to processing the given request.\n\tUrl mapHandler(IRequestHandler requestHandler); // Returns the Url for given IRequestHandler or null if the request handler is not recognized.\n\tIRequestHandler mapRequest(Request request); // Returns IRequestHandler for the request or null if the Url is not recognized.\n}"}
{"index": 10101, "repo": "spring-plugin-core-3.0.0", "des": "Base class for PluginRegistry implementations.", "code": "public abstract class PluginRegistrySupport<T extends Plugin<S>,S> extends Object implements PluginRegistry<T,S>, Iterable<T> {\n\tList<T> getPlugins(); // Returns all registered plugins.\n\tprotected List<T> initialize(List<T> plugins); // Callback to initialize the plugin List.\n\tIterator<T> iterator();\n}"}
{"index": 10760, "repo": "spring-tx-6.0.11", "des": "Template class that simplifies programmatic transaction demarcation and transaction exception handling.", "code": "public class TransactionTemplate extends DefaultTransactionDefinition implements TransactionOperations, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tboolean equals(Object other); // This implementation compares the toString() results.\n\t<T> T execute(TransactionCallback<T> action); // Execute the action specified by the given callback object within a transaction.\n\tPlatformTransactionManager getTransactionManager(); // Return the transaction management strategy to be used.\n\tvoid setTransactionManager(PlatformTransactionManager transactionManager); // Set the transaction management strategy to be used.\n}"}
{"index": 17224, "repo": "spring-xml-4.0.5", "des": "Implementation of the XsdSchemaCollection that uses Apache WS-Commons XML Schema.", "code": "public class CommonsXsdSchemaCollection extends Object implements XsdSchemaCollection, org.springframework.beans.factory.InitializingBean, org.springframework.context.ResourceLoaderAware {\n\tvoid afterPropertiesSet();\n\tXmlValidator createValidator(); // Creates a XmlValidator based on the schemas contained in this collection.\n\tXsdSchema[] getXsdSchemas(); // Returns all schemas contained in this collection.\n\tvoid setInline(boolean inline); // Defines whether included schemas should be inlined into the including schema.\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader);\n\tvoid setUriResolver(org.apache.ws.commons.schema.resolver.URIResolver uriResolver); // Sets the WS-Commons uri resolver to use when resolving (relative) schemas.\n\tvoid setXsds(org.springframework.core.io.Resource... xsdResources); // Sets the schema resources to be loaded.\n}"}
{"index": 8430, "repo": "hadoop-aws-3.3.6", "des": "Path operations for the staging committers.", "code": "Class Paths {\n\tstatic String addUUID(String pathStr, String uuid); // Insert the UUID to a path if it is not there already.\n\tstatic void clearTempFolderInfo(org.apache.hadoop.mapreduce.TaskAttemptID attemptID); // Remove all information held about task attempts.\n\tstatic org.apache.hadoop.fs.Path getLocalTaskAttemptTempDir(org.apache.hadoop.conf.Configuration conf, String uuid, org.apache.hadoop.mapreduce.TaskAttemptID attemptID); // Get the task attempt temporary directory in the local filesystem.\n\tstatic org.apache.hadoop.fs.Path getMultipartUploadCommitsDirectory(org.apache.hadoop.conf.Configuration conf, String uuid); // Build a qualified temporary path for the multipart upload commit information in the cluster filesystem.\n\tstatic String getParent(String pathStr); // Get the parent path of a string path: everything up to but excluding the last \"/\" in the path.\n\tprotected static String getPartition(String relative); // Returns the partition of a relative file path, or null if the path is a file name with no relative directory.\n\tstatic Set<String> getPartitions(org.apache.hadoop.fs.Path attemptPath, List<? extends org.apache.hadoop.fs.FileStatus> taskOutput); // Get the set of partitions from the list of files being staged.\n\tstatic String getRelativePath(org.apache.hadoop.fs.Path basePath, org.apache.hadoop.fs.Path fullPath); // Using URI#relativize(), build the relative path from the base path to the full path.\n\tstatic org.apache.hadoop.fs.Path path(org.apache.hadoop.fs.Path parent, String... child); // Varags constructor of paths.\n\tstatic void resetTempFolderCache(); // Reset the temp folder cache; useful in tests.\n\tstatic org.apache.hadoop.fs.Path tempDirForStaging(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.conf.Configuration conf); // Try to come up with a good temp directory for different filesystems.\n}"}
{"index": 445, "repo": "phoenix-core-5.1.3", "des": "Class implements an active spilled partition serialized tuples are first written into an in-memory data structure that represents a single page.", "code": "Class SpillMap {\n\tSet<Map.Entry<ImmutableBytesPtr,byte[]>> entrySet();\n\tbyte[] get(Object key); // Get a key from the spillable data structures.\n\tSpillFile getSpillFile(); // Function returns the current spill file\n\tIterator<byte[]> iterator(); // Iterate over all spilled elements, including the ones that are currently paged into memory\n\tbyte[] put(ImmutableBytesPtr key, byte[] value); // Spill a key First we discover if the key has been spilled before and load it into memory: #ref get() if it was loaded before just replace the old value in the memory page if it was not loaded before try to store it in the current page alternatively if not enough memory available, request new page.\n}"}
{"index": 11203, "repo": "wicket-extensions-10.0.0-M1", "des": "A renderer used to generate html output for the AutoCompleteBehavior.", "code": "public interface IAutoCompleteRenderer<T> extends org.apache.wicket.model.IDetachable {\n\tdefault void detach(); // Override when needed.\n\tvoid render(T object, org.apache.wicket.request.Response response, String criteria); // Render the html fragment for the given completion object.\n\tvoid renderFooter(org.apache.wicket.request.Response response, int count); // Render the html footer fragment for the completion.\n\tvoid renderHeader(org.apache.wicket.request.Response response); // Render the html header fragment for the completion.\n}"}
{"index": 15868, "repo": "camel-api-4.0.0-RC1", "des": "Allows Consumer to fine grained control on shutdown which mostly have to cater for in-memory based components.", "code": "public interface ShutdownAware extends ShutdownPrepared {\n\tboolean deferShutdown(ShutdownRunningTask shutdownRunningTask); // To defer shutdown during first phase of shutdown.\n\tint getPendingExchangesSize(); // Gets the number of pending exchanges.\n}"}
{"index": 7892, "repo": "nifi-framework-core-api-1.22.0", "des": "Interface that provides a mechanism for obtaining the StateManager for a particular component .", "code": "Interface StateManagerProvider {\n\tvoid disableClusterProvider(); // Disables the Cluster State Provider and begins using the Local State Provider to persist and retrieve state, even when components request a clustered provider\n\tvoid enableClusterProvider(); // Initializes the Cluster State Provider and enables it for use\n\tStateManager getStateManager(String componentId); // Returns the StateManager for the component with the given ID, or null if no State Manager exists for the component with the given ID\n\tvoid onComponentRemoved(String componentId); // Notifies the State Manager Provider that the component with the given ID has been removed from the NiFi instance and will no longer be needed, so the appropriate resource cleanup can take place.\n\tvoid shutdown(); // Shuts down the state managers, cleaning up any resources that they occupy\n}"}
{"index": 8542, "repo": "commons-io-2.13.0", "des": "This filter produces a logical NOT of the filters specified.", "code": "Class NotFileFilter {\n\tboolean accept(File file); // Returns the logical NOT of the underlying filter's return value for the same File.\n\tboolean accept(File file, String name); // Returns the logical NOT of the underlying filter's return value for the same arguments.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Returns the logical NOT of the underlying filter's return value for the same File.\n}"}
{"index": 1412, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents an abstract number in a PDF document.", "code": "Class COSNumber {\n\tabstract float floatValue(); // This will get the float value of this number.\n\tstatic COSNumber get(String number); // This factory method will get the appropriate number object.\n\tabstract int intValue(); // This will get the integer value of this number.\n\tabstract long longValue(); // This will get the long value of this number.\n}"}
{"index": 5616, "repo": "org.apache.karaf.main-2.4.4", "des": "Provides named logger support for the OSGi LogService.", "code": "Interface Logger {\n\tString getName(); // Returns the name associated with this Logger object.\n\tboolean isLoggable(int level); // Pre-checks if there are LogListeners who are listening for a matching log entry from this Logger.\n\tvoid log(int level, String message);\n\tvoid log(int level, String message, Throwable exception);\n\tvoid log(Object context, int level, String message); // Extends the LogService Logs a message with a context object\n\tvoid log(Object context, int level, String message, Throwable exception); // Logs a message with an exception associated and a context object.\n\tvoid log(ServiceReference<?> sr, int level, String message);\n\tvoid log(ServiceReference<?> sr, int level, String message, Throwable exception);\n}"}
{"index": 3185, "repo": "iceberg-spark3-0.13.2", "des": "Represents a sort order in the public expression API.", "code": "Interface SortOrder {\n\tSortDirection direction(); // Returns the sort direction.\n\torg.apache.spark.sql.connector.expressions.Expression expression(); // Returns the sort expression.\n\tNullOrdering nullOrdering(); // Returns the null ordering.\n}"}
{"index": 705, "repo": "ignite-core-2.15.0", "des": "Entry information that gets passed over wire.", "code": "Class GridCacheEntryInfo {\n\tint cacheId();\n\tvoid cacheId(int cacheId);\n\tshort directType(); // Gets message type.\n\tlong expireTime();\n\tvoid expireTime(long expireTime);\n\tbyte fieldsCount(); // Gets fields count.\n\tboolean isDeleted();\n\tboolean isNew();\n\tKeyCacheObject key();\n\tvoid key(KeyCacheObject key);\n\tvoid marshal(CacheObjectContext ctx);\n\tvoid marshal(GridCacheContext ctx);\n\tint marshalledSize(CacheObjectContext ctx);\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tvoid setDeleted(boolean deleted);\n\tvoid setNew(boolean isNew);\n\tlong ttl();\n\tvoid ttl(long ttl);\n\tvoid unmarshal(CacheObjectContext ctx, ClassLoader clsLdr); // Unmarshalls entry.\n\tvoid unmarshal(GridCacheContext ctx, ClassLoader clsLdr); // Unmarshalls entry.\n\tvoid unmarshalValue(GridCacheContext<?,?> ctx, ClassLoader ldr);\n\tCacheObject value();\n\tvoid value(CacheObject val);\n\tGridCacheVersion version();\n\tvoid version(GridCacheVersion ver);\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 12894, "repo": "spring-data-mongodb-4.1.2", "des": "Encapsulates the aggregation framework $sort-operation.", "code": "public class SortOperation extends Object implements AggregationOperation {\n\tSortOperation and(Sort sort);\n\tSortOperation and(Sort.Direction direction, String... fields);\n\tString getOperator(); // Return the MongoDB operator that is used for this AggregationOperation.\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n}"}
{"index": 7460, "repo": "mahout-math-0.13.0", "des": "If f(0, 0) = 0 we can iterate through the nonzeros in either x or y.", "code": "Class VectorBinaryAssign.AssignIterateUnionRandomInplaceUpdates {\n\tVector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tdouble estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tboolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 15571, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "des": "Factory that can be used to create a RequestMatcher for actuator endpoint locations.", "code": "public final class EndpointRequest extends Object {\n\tstatic EndpointRequest.EndpointRequestMatcher to(Class<?>... endpoints); // Returns a matcher that includes the specified actuator endpoints.\n\tstatic EndpointRequest.EndpointRequestMatcher to(String... endpoints); // Returns a matcher that includes the specified actuator endpoints.\n\tstatic EndpointRequest.EndpointRequestMatcher toAnyEndpoint(); // Returns a matcher that includes all actuator endpoints.\n\tstatic EndpointRequest.LinksRequestMatcher toLinks(); // Returns a matcher that matches only on the links endpoint.\n}"}
{"index": 377, "repo": "phoenix-core-5.1.3", "des": "Base class for a ResultIterator that does a merge sort on the list of iterators provided.", "code": "Class MergeSortResultIterator {\n\tvoid close();\n\tprotected abstract int compare(Tuple t1, Tuple t2);\n\tTuple next(); // Grab the next row's worth of values.\n\tTuple peek(); // Returns the next result without advancing the iterator\n}"}
{"index": 11361, "repo": "spring-context-6.0.11", "des": "Convenient superclass for JNDI accessors, providing \"jndiTemplate\" and \"jndiEnvironment\" bean properties.", "code": "public class JndiAccessor extends Object {\n\tProperties getJndiEnvironment(); // Return the JNDI environment to use for JNDI lookups.\n\tJndiTemplate getJndiTemplate(); // Return the JNDI template to use for JNDI lookups.\n\tvoid setJndiEnvironment(Properties jndiEnvironment); // Set the JNDI environment to use for JNDI lookups.\n\tvoid setJndiTemplate(JndiTemplate jndiTemplate); // Set the JNDI template to use for JNDI lookups.\n}"}
{"index": 5446, "repo": "druid-processing-26.0.0", "des": "Simultaneously sorts and limits its input.", "code": "Class StableLimitingSorter<T> {\n\tvoid add(T element); // Offer an element to the sorter.\n\tIterator<T> drain(); // Drain elements in sorted order (least first).\n\tint size(); // Returns the number of elements currently in the sorter.\n}"}
{"index": 9975, "repo": "commons-text-1.10.0", "des": "Represents the intersection result between two sets.", "code": "Class IntersectionResult {\n\tboolean equals(Object o);\n\tint getIntersection(); // Gets the size of the intersection between set A and B.\n\tint getSizeA(); // Gets the size of set A.\n\tint getSizeB(); // Gets the size of set B.\n}"}
{"index": 16267, "repo": "spring-data-jdbc-3.1.2", "des": "Beans that must be registered for Spring Data JDBC to work.", "code": "@Configuration(proxyBeanMethods=false) public class AbstractJdbcConfiguration extends Object implements ApplicationContextAware {\n\tDataAccessStrategy dataAccessStrategyBean(NamedParameterJdbcOperations operations, JdbcConverter jdbcConverter, JdbcMappingContext context, Dialect dialect); // Create a DataAccessStrategy for reuse in the JdbcAggregateOperations and the JdbcConverter.\n\tprotected Set<Class<?>> getInitialEntitySet(); // Scans the mapping base package for classes annotated with Table.\n\tprotected Collection<String> getMappingBasePackages(); // Returns the base packages to scan for JDBC mapped entities at startup.\n\tJdbcAggregateTemplate jdbcAggregateTemplate(ApplicationContext applicationContext, JdbcMappingContext mappingContext, JdbcConverter converter, DataAccessStrategy dataAccessStrategy); // Register a JdbcAggregateTemplate as a bean for easy use in applications that need a lower level of abstraction than the normal repository abstraction.\n\tJdbcConverter jdbcConverter(JdbcMappingContext mappingContext, NamedParameterJdbcOperations operations, RelationResolver relationResolver, JdbcCustomConversions conversions, Dialect dialect); // Creates a RelationalConverter using the configured jdbcMappingContext(Optional, JdbcCustomConversions, RelationalManagedTypes).\n\tJdbcCustomConversions jdbcCustomConversions(); // Register custom Converters in a JdbcCustomConversions object if required.\n\tDialect jdbcDialect(NamedParameterJdbcOperations operations); // Resolves a JDBC dialect by inspecting NamedParameterJdbcOperations.\n\tRelationalManagedTypes jdbcManagedTypes(); // Returns the a RelationalManagedTypes object holding the initial entity set.\n\tJdbcMappingContext jdbcMappingContext(Optional<NamingStrategy> namingStrategy, JdbcCustomConversions customConversions, RelationalManagedTypes jdbcManagedTypes); // Register a JdbcMappingContext and apply an optional NamingStrategy.\n\tprotected Set<Class<?>> scanForEntities(String basePackage); // Scans the given base package for entities, i.e.\n\tvoid setApplicationContext(ApplicationContext applicationContext);\n\tprotected List<?> userConverters();\n}"}
{"index": 2605, "repo": "nifi-utils-1.22.0", "des": "Implementation of demarcator of text lines in the provided InputStream.", "code": "Class TextLineDemarcator {\n\tTextLineDemarcator.OffsetInfo nextOffsetInfo(); // Will compute the next offset info for a text line (line terminated by either '\\r', '\\n' or '\\r\\n').\n\tTextLineDemarcator.OffsetInfo nextOffsetInfo(byte[] startsWith); // Will compute the next offset info for a text line (line terminated by either '\\r', '\\n' or '\\r\\n').\n}"}
{"index": 8328, "repo": "spring-ws-3.0.10.RELEASE", "des": "An default implementation of WsConfigurer with empty methods allowing sub-classes to override only the methods they're interested in.", "code": "Class WsConfigurerAdapter {\n\tvoid addArgumentResolvers(List<MethodArgumentResolver> argumentResolvers); // Add resolvers to support custom endpoint method argument types.\n\tvoid addInterceptors(List<EndpointInterceptor> interceptors); // Add EndpointInterceptors for pre- and post-processing of endpoint method invocations.\n\tvoid addReturnValueHandlers(List<MethodReturnValueHandler> returnValueHandlers); // Add handlers to support custom controller method return value types.\n}"}
{"index": 8090, "repo": "commons-compress-1.23.0", "des": "SegmentConstantPool manages the constant pool used for re-creating class files.", "code": "Class SegmentConstantPool {\n\tConstantPoolEntry getClassPoolEntry(String name); // Given the name of a class, answer the CPClass associated with that class.\n\tConstantPoolEntry getClassSpecificPoolEntry(int cp, long desiredIndex, String desiredClassName); // Subset the constant pool of the specified type to be just that which has the specified class name.\n\tConstantPoolEntry getConstantPoolEntry(int cp, long value);\n\tConstantPoolEntry getInitMethodPoolEntry(int cp, long value, String desiredClassName); // Answer the init method for the specified class.\n\tClassFileEntry getValue(int cp, long value);\n\tprotected int matchSpecificPoolEntryIndex(String[] primaryArray, String[] secondaryArray, String primaryCompareString, String secondaryCompareRegex, int desiredIndex); // This method's function is to look through pairs of arrays.\n\tprotected int matchSpecificPoolEntryIndex(String[] nameArray, String compareString, int desiredIndex); // A number of things make use of subsets of structures.\n\tprotected static boolean regexMatches(String regexString, String compareString); // We don't want a dependency on regex in Pack200.\n}"}
{"index": 11488, "repo": "spring-restdocs-core-3.0.0", "des": "An implementation of OperationPreprocessor that returns the request and response as-is.", "code": "public abstract class OperationPreprocessorAdapter extends Object implements OperationPreprocessor {\n\tOperationRequest preprocess(OperationRequest request); // Returns the given request as-is.\n\tOperationResponse preprocess(OperationResponse response); // Returns the given response as-is.\n}"}
{"index": 8828, "repo": "hbase-server-3.0.0-alpha-4", "des": "Adaptive LIFO blocking queue utilizing CoDel algorithm to prevent queue overloading.", "code": "Class AdaptiveLifoCoDelCallQueue {\n\tboolean add(CallRunner callRunner);\n\tboolean addAll(Collection<? extends CallRunner> c);\n\tvoid clear();\n\tboolean contains(Object o);\n\tboolean containsAll(Collection<?> c);\n\tint drainTo(Collection<? super CallRunner> c);\n\tint drainTo(Collection<? super CallRunner> c, int maxElements);\n\tCallRunner element();\n\tboolean isEmpty();\n\tIterator<CallRunner> iterator();\n\tboolean offer(CallRunner callRunner);\n\tboolean offer(CallRunner callRunner, long timeout, TimeUnit unit);\n\tCallRunner peek();\n\tCallRunner poll();\n\tCallRunner poll(long timeout, TimeUnit unit);\n\tvoid put(CallRunner callRunner);\n\tint remainingCapacity();\n\tCallRunner remove();\n\tboolean remove(Object o);\n\tboolean removeAll(Collection<?> c);\n\tboolean retainAll(Collection<?> c);\n\tint size();\n\tCallRunner take(); // Behaves as LinkedBlockingQueue.take(), except it will silently skip all calls which it thinks should be dropped.\n\tObject[] toArray();\n\t<T> T[] toArray(T[] a);\n\tvoid updateTunables(int newCodelTargetDelay, int newCodelInterval, double newLifoThreshold); // Update tunables.\n}"}
{"index": 7110, "repo": "calcite-core-1.34.0", "des": "Utility class for various methods related to multisets.", "code": "Class RexMultisetUtil {\n\tstatic boolean containsMixing(RexNode node); // Returns true if a node contains a mixing between multiset and non-multiset calls.\n\tstatic boolean containsMixing(RexProgram program); // Returns true if any expression in a program contains a mixing between multiset and non-multiset calls.\n\tstatic boolean containsMultiset(List<RexNode> nodes, boolean deep); // Returns whether a list of expressions contains a multiset.\n\tstatic boolean containsMultiset(RexNode node, boolean deep); // Returns true if node contains a multiset operator, otherwise false.\n\tstatic boolean containsMultiset(RexProgram program); // Returns whether a program contains a multiset.\n\tstatic @Nullable RexCall findFirstMultiset(RexNode node, boolean deep); // Returns a reference to the first found multiset call or null if none was found.\n\tstatic boolean isMultisetCast(RexCall call); // Returns true if call is a call to CAST and the to/from cast types are of multiset types.\n}"}
{"index": 8760, "repo": "hadoop-yarn-common-3.3.6", "des": "A client library that can be used to get Timeline Entities associated with application, application attempt or containers.", "code": "Class TimelineReaderClient {\n\tstatic TimelineReaderClient createTimelineReaderClient(); // Create a new instance of Timeline Reader Client.\n\tabstract List<org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity> getApplicationAttemptEntities(org.apache.hadoop.yarn.api.records.ApplicationId appId, String fields, Map<String,String> filters, long limit, String fromId); // Gets application attempt entities.\n\tabstract org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity getApplicationAttemptEntity(org.apache.hadoop.yarn.api.records.ApplicationAttemptId appAttemptId, String fields, Map<String,String> filters); // Gets application attempt entity.\n\tabstract org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity getApplicationEntity(org.apache.hadoop.yarn.api.records.ApplicationId appId, String fields, Map<String,String> filters); // Gets application entity.\n\tabstract List<org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity> getContainerEntities(org.apache.hadoop.yarn.api.records.ApplicationId appId, String fields, Map<String,String> filters, long limit, String fromId); // Gets container entities for an application.\n\tabstract org.apache.hadoop.yarn.api.records.timelineservice.TimelineEntity getContainerEntity(org.apache.hadoop.yarn.api.records.ContainerId containerId, String fields, Map<String,String> filters); // Gets Timeline entity for the container.\n}"}
{"index": 14655, "repo": "spring-data-commons-3.1.2", "des": "Access options for getting values for property paths.", "code": "public static class AccessOptions.GetOptions extends Object {\n\tAccessOptions.GetOptions.GetNulls getNullValues();\n\tAccessOptions.GetOptions registerCollectionHandler(PersistentProperty<?> property, Function<? super Collection<?>,Object> handler); // Registers a Function to handle Collection values for the given property.\n\t<T> AccessOptions.GetOptions registerHandler(PersistentProperty<?> property, Class<T> type, Function<? super T,Object> handler); // Registers the given Function to post-process values obtained for the given PersistentProperty for the given type.\n\tAccessOptions.GetOptions registerHandler(PersistentProperty<?> property, Function<Object,Object> handler); // Registers a Function to post-process values for the given property.\n\tAccessOptions.GetOptions registerListHandler(PersistentProperty<?> property, Function<? super List<?>,Object> handler); // Registers a Function to handle List values for the given property.\n\tAccessOptions.GetOptions registerMapHandler(PersistentProperty<?> property, Function<? super Map<?,?>,Object> handler); // Registers a Function to handle Map values for the given property.\n\tAccessOptions.GetOptions registerSetHandler(PersistentProperty<?> property, Function<? super Set<?>,Object> handler); // Registers a Function to handle Set values for the given property.\n\tAccessOptions.GetOptions withNullValues(AccessOptions.GetOptions.GetNulls nullValues);\n}"}
{"index": 15973, "repo": "wicket-util-10.0.0-M1", "des": "Implements a differencing engine that works on arrays of Object.", "code": "public class Diff extends ToString {\n\tstatic String arrayToString(Object[] o); // Converts an array of Object to a string using Diff.NL as the line separator.\n\tstatic boolean compare(Object[] orig, Object[] rev); // Compares the two input sequences.\n\tprotected DiffAlgorithm defaultAlgorithm();\n\tRevision diff(Object[] rev); // compute the difference between the original and a revision.\n\tstatic Revision diff(Object[] orig, Object[] rev); // compute the difference between an original and a revision.\n\tstatic Revision diff(Object[] orig, Object[] rev, DiffAlgorithm algorithm); // compute the difference between an original and a revision.\n\tstatic Object[] editAll(Object[] text); // Edits all of the items in the input sequence.\n\tstatic Object[] randomEdit(Object[] text); // Performs random edits on the input sequence.\n\tstatic Object[] randomEdit(Object[] text, long seed); // Performs random edits on the input sequence.\n\tstatic Object[] randomSequence(int size); // Generate a random sequence of the given size.\n\tstatic Object[] randomSequence(int size, long seed); // Generate a random sequence of the given size.\n\tstatic Object[] shuffle(Object[] text); // Shuffles around the items in the input sequence.\n\tstatic Object[] shuffle(Object[] text, long seed); // Shuffles around the items in the input sequence.\n}"}
{"index": 17962, "repo": "spring-web-6.0.11", "des": "Special DataBinder to perform data binding from web request parameters to JavaBeans, including support for multipart files.", "code": "public class WebRequestDataBinder extends WebDataBinder {\n\tvoid bind(WebRequest request); // Bind the parameters of the given request to this binder's target, also binding multipart files in case of a multipart request.\n\tvoid closeNoCatch(); // Treats errors as fatal.\n}"}
{"index": 15034, "repo": "spring-vault-core-3.0.4", "des": "Value object representing a certificate consisting of the certificate and the issuer certificate.", "code": "public class Certificate extends Object {\n\tKeyStore createTrustStore(); // Create a trust store as KeyStore from this Certificate containing the certificate chain.\n\tString getCertificate();\n\tString getIssuingCaCertificate();\n\tString getSerialNumber();\n\tX509Certificate getX509Certificate(); // Retrieve the certificate as X509Certificate.\n\tX509Certificate getX509IssuerCertificate(); // Retrieve the issuing CA certificate as X509Certificate.\n\tstatic Certificate of(String serialNumber, String certificate, String issuingCaCertificate); // Create a Certificate given a private key with certificates and the serial number.\n}"}
{"index": 18100, "repo": "spring-ws-core-4.0.5", "des": "A TransportInputStream is an input stream with MIME input headers.", "code": "public abstract class TransportInputStream extends InputStream {\n\tint available();\n\tvoid close();\n\tprotected abstract InputStream createInputStream(); // Returns the input stream to read from.\n\tabstract Iterator<String> getHeaderNames(); // Returns an iteration over all the header names this stream contains.\n\tabstract Iterator<String> getHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tvoid mark(int readlimit);\n\tboolean markSupported();\n\tint read();\n\tint read(byte[] b);\n\tint read(byte[] b, int off, int len);\n\tvoid reset();\n\tlong skip(long n);\n}"}
{"index": 18454, "repo": "opencms-core-15.0", "des": "A historical version of a resource in the OpenCms VFS resource history.", "code": "Interface I_CmsHistoryResource {\n\tCmsUUID getParentId(); // Returns the structure id of the parent resource.\n\tint getPublishTag(); // Returns the publish tag of this historical resource.\n\tint getResourceVersion(); // Returns the version number of the resource part for this historical resource.\n\tint getStructureVersion(); // Returns the version number of the structure part for this historical resource.\n\tint getVersion(); // Returns the version number of this historical resource.\n}"}
{"index": 9297, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Windows secure container executor (WSCE).", "code": "Class WindowsSecureContainerExecutor {\n\tprotected org.apache.hadoop.util.Shell.CommandExecutor buildCommandExecutor(String wrapperScriptPath, String containerIdStr, String userName, org.apache.hadoop.fs.Path pidFile, org.apache.hadoop.yarn.api.records.Resource resource, File wordDir, Map<String,String> environment); // Create a new Shell.ShellCommandExecutor using the parameters.\n\tprotected void copyFile(org.apache.hadoop.fs.Path src, org.apache.hadoop.fs.Path dst, String owner); // Copy a file using the DefaultContainerExecutor.lfs FileContext.\n\tprotected void createDir(org.apache.hadoop.fs.Path dirPath, org.apache.hadoop.fs.permission.FsPermission perms, boolean createParent, String owner); // Use the DefaultContainerExecutor.lfs FileContext to create the target directory.\n\tprotected DefaultContainerExecutor.LocalWrapperScriptBuilder getLocalWrapperScriptBuilder(String containerIdStr, org.apache.hadoop.fs.Path containerWorkDir); // Create a DefaultContainerExecutor.LocalWrapperScriptBuilder for the given container ID and path that is appropriate to the current platform.\n\tprotected String[] getRunCommand(String command, String groupId, String userName, org.apache.hadoop.fs.Path pidFile, org.apache.hadoop.conf.Configuration conf); // Return a command line to execute the given command in the OS shell.\n\tprotected void killContainer(String pid, ContainerExecutor.Signal signal); // Send a specified signal to the specified pid\n\torg.apache.hadoop.fs.Path localizeClasspathJar(org.apache.hadoop.fs.Path jarPath, org.apache.hadoop.fs.Path target, String owner); // This function localizes the JAR file on-demand.\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n\tprotected void setScriptExecutable(org.apache.hadoop.fs.Path script, String owner); // Make a file executable using the DefaultContainerExecutor.lfs FileContext.\n\tvoid startLocalizer(LocalizerStartContext ctx); // Prepare the environment for containers in this application to execute.\n}"}
{"index": 12179, "repo": "jena-core-4.9.0", "des": "A map from a node to the triples that have that node as subject, predicate or object.", "code": "public interface NodeToTriplesMap extends JenaSet<Triple> {\n\tboolean containsMatch(Node index, Node n2, Node n3); // Answer true iff this map contains a triple that matches the pattern.\n\tExtendedIterator<Triple> iteratorForMatches(Node index, Node n2, Node n3); // Answer an iterator over all the triples in this map that match the pattern.\n\tStream<Triple> streamForMatches(Node index, Node n2, Node n3); // Answer a stream over all the triples in this map that match the pattern.\n}"}
{"index": 2988, "repo": "tink-1.10.0", "des": "Utility functions for elliptic curve crypto, used in ECDSA and ECDH.", "code": "Class EllipticCurvesUtil {\n\tstatic void checkPointOnCurve(ECPoint point, EllipticCurve ec); // Checks that a point is on a given elliptic curve.\n\tstatic BigInteger getModulus(EllipticCurve curve); // Returns the modulus of the field used by the curve specified in ecParams.\n\tstatic boolean isNistEcParameterSpec(ECParameterSpec spec); // Returns whether spec is a ECParameterSpec of one of the NIST curves.\n\tstatic boolean isSameEcParameterSpec(ECParameterSpec one, ECParameterSpec two); // Returns whether one is the same ECParameterSpec as two.\n\tstatic ECPoint multiplyByGenerator(BigInteger x, ECParameterSpec spec); // Calculates x times the generator of the give elliptic curve spec using the Montgomery ladder.\n}"}
{"index": 16275, "repo": "spring-data-jdbc-3.1.2", "des": "Allows the creation of instances of database dependent types, e.g.", "code": "public interface JdbcTypeFactory {\n\tArray createArray(Object[] value); // Converts the provided value in a Array instance.\n\tstatic JdbcTypeFactory unsupported(); // An implementation used in places where a proper JdbcTypeFactory can not be provided but an instance needs to be provided anyway, mostly for providing backward compatibility.\n}"}
{"index": 14295, "repo": "wicket-core-10.0.0-M1", "des": "Interface for the request logger and viewer.", "code": "public interface IRequestLogger {\n\tlong getAverageRequestTime();\n\tint getCurrentActiveRequestCount();\n\tIRequestLogger.RequestData getCurrentRequest();\n\tIRequestLogger.SessionData[] getLiveSessions();\n\tint getPeakActiveRequestCount();\n\tint getPeakSessions();\n\tList<IRequestLogger.RequestData> getRequests(); // This method returns a List of the current requests that are in mem.\n\tlong getRequestsPerMinute();\n\tint getTotalCreatedSessions();\n\tvoid logEventTarget(org.apache.wicket.request.IRequestHandler target); // Sets the target that was the event target for the current request\n\tvoid logRequestedUrl(String url); // Logs the URL that was requested by the browser.\n\tvoid logResponseTarget(org.apache.wicket.request.IRequestHandler target); // Sets the target that was the response target for the current request\n\tvoid objectCreated(Object value); // Called to monitor additions of objects in the ISessionStore\n\tvoid objectRemoved(Object value); // Called to monitor removals of objects out of the ISessionStore\n\tvoid objectUpdated(Object value); // Called to monitor updates of objects in the ISessionStore\n\tvoid performLogging(); // Perform the actual logging\n\tvoid requestTime(long timeTaken); // This method is called when the request is over.\n\tvoid sessionCreated(String id); // called when the session is created and has an id.\n\tvoid sessionDestroyed(String sessionId); // Method used to cleanup a livesession when the session was invalidated by the webcontainer\n}"}
{"index": 17016, "repo": "spring-integration-core-6.1.2", "des": "The base class for Message Endpoint implementations.", "code": "@IntegrationManagedResource public abstract class AbstractEndpoint extends IntegrationObjectSupport implements ManageableSmartLifecycle, org.springframework.beans.factory.DisposableBean {\n\tvoid destroy();\n\tprotected abstract void doStart(); // Subclasses must implement this method with the start behavior.\n\tprotected abstract void doStop(); // Subclasses must implement this method with the stop behavior.\n\tprotected void doStop(Runnable callback); // Stop the component and invoke callback.\n\tfinal int getPhase();\n\tString getRole();\n\tboolean isActive();\n\tfinal boolean isAutoStartup();\n\tfinal boolean isRunning();\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setAutoStartup(boolean autoStartup);\n\tvoid setPhase(int phase);\n\tvoid setRole(String role); // Specify the role for the endpoint.\n\tfinal void start();\n\tfinal void stop();\n\tfinal void stop(Runnable callback);\n}"}
{"index": 9598, "repo": "commons-math3-3.6.1", "des": "This is a utility class that provides computation methods related to the error functions.", "code": "Class Erf {\n\tstatic double erf(double x); // Returns the error function.\n\tstatic double erf(double x1, double x2); // Returns the difference between erf(x1) and erf(x2).\n\tstatic double erfc(double x); // Returns the complementary error function.\n\tstatic double erfcInv(double x); // Returns the inverse erfc.\n\tstatic double erfInv(double x); // Returns the inverse erf.\n}"}
{"index": 12474, "repo": "spring-boot-test-3.1.1", "des": "Options used to customize the Apache HTTP Client.", "code": "public static enum TestRestTemplate.HttpClientOption extends Enum<TestRestTemplate.HttpClientOption> {\n\tstatic TestRestTemplate.HttpClientOption valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic TestRestTemplate.HttpClientOption[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 12972, "repo": "spring-integration-file-6.1.2", "des": "Default directory scanner and base class for other directory scanners.", "code": "public class DefaultDirectoryScanner extends Object implements DirectoryScanner {\n\tprotected FileListFilter<File> getFilter();\n\tprotected FileLocker getLocker();\n\tprotected File[] listEligibleFiles(File directory); // Subclasses may refine the listing strategy by overriding this method.\n\tList<File> listFiles(File directory); // Scans the directory according to the strategy particular to this implementation and returns the selected files as a File array.\n\tvoid setFilter(FileListFilter<File> filter); // Sets a custom filter to be used by this scanner.\n\tfinal void setLocker(FileLocker locker); // Sets a custom locker to be used by this scanner.\n\tboolean tryClaim(File file); // This class takes the minimal implementation and merely delegates to the locker if set.\n}"}
{"index": 11457, "repo": "spring-context-6.0.11", "des": "Context object encapsulating last execution times and last completion time of a given task.", "code": "public interface TriggerContext {\n\tdefault Clock getClock(); // Return the clock to use for trigger calculation.\n\tInstant lastActualExecution(); // Return the last actual execution time of the task, or null if not scheduled before.\n\tdefault Date lastActualExecutionTime(); // Deprecated. as of 6.0, in favor on lastActualExecution()\n\tInstant lastCompletion(); // Return the last completion time of the task, or null if not scheduled before.\n\tdefault Date lastCompletionTime(); // Deprecated. as of 6.0, in favor on lastCompletion()\n\tInstant lastScheduledExecution(); // Return the last scheduled execution time of the task, or null if not scheduled before.\n\tdefault Date lastScheduledExecutionTime(); // Deprecated. as of 6.0, in favor on lastScheduledExecution()\n}"}
{"index": 579, "repo": "ignite-core-2.15.0", "des": "Wrapper of the classic read write lock with checkpoint features.", "code": "Class CheckpointReadWriteLock {\n\tboolean checkpointLockIsHeldByThread(); // This method works only if the assertion is enabled or it always returns true otherwise.\n\tint getReadHoldCount();\n\tboolean isWriteLockHeldByCurrentThread();\n\tvoid readLock(); // Gets the checkpoint read lock.\n\tvoid readUnlock(); // Releases the checkpoint read lock.\n\tboolean tryReadLock(long timeout, TimeUnit unit); // Gets the checkpoint read lock.\n\tvoid writeLock(); // Take the checkpoint write lock.\n\tvoid writeUnlock(); // Release the checkpoint write lock\n}"}
{"index": 5077, "repo": "commons-collections-3.2.2", "des": "Decorates another List to synchronize its behaviour for a multi-threaded environment.", "code": "Class SynchronizedList {\n\tvoid add(int index, Object object);\n\tboolean addAll(int index, Collection coll);\n\tstatic List decorate(List list); // Factory method to create a synchronized list.\n\tObject get(int index);\n\tprotected List getList(); // Gets the decorated list.\n\tint indexOf(Object object);\n\tint lastIndexOf(Object object);\n\tListIterator listIterator(); // Iterators must be manually synchronized.\n\tListIterator listIterator(int index); // Iterators must be manually synchronized.\n\tObject remove(int index);\n\tObject set(int index, Object object);\n\tList subList(int fromIndex, int toIndex);\n}"}
{"index": 7376, "repo": "mahout-math-0.13.0", "des": "Partially deprecated until unit tests are in place.", "code": "Class Gamma {\n\tstatic double beta(double alpha, double beta); // Returns the beta function of the arguments.\n\tstatic double gamma(double x); // Returns the Gamma function of the argument.\n\tstatic double incompleteBeta(double alpha, double beta, double xx); // Returns the regularized Incomplete Beta Function evaluated from zero to xx; formerly named ibeta.\n\tstatic double incompleteGamma(double alpha, double x); // Returns the Incomplete Gamma function; formerly named igamma.\n\tstatic double incompleteGammaComplement(double alpha, double x); // Returns the Complemented Incomplete Gamma function; formerly named igamc.\n\tstatic double logGamma(double x); // Returns the natural logarithm of the gamma function; formerly named lgamma.\n}"}
{"index": 11301, "repo": "spring-context-6.0.11", "des": "Adapter that takes a java.util.concurrent.Executor and exposes a Spring TaskExecutor for it.", "code": "public class ConcurrentTaskExecutor extends Object implements org.springframework.core.task.AsyncListenableTaskExecutor, SchedulingTaskExecutor {\n\tvoid execute(Runnable task);\n\tvoid execute(Runnable task, long startTimeout); // Deprecated.\n\tfinal Executor getConcurrentExecutor(); // Return the Executor that this adapter delegates to.\n\tfinal void setConcurrentExecutor(Executor executor); // Specify the Executor to delegate to.\n\tfinal void setTaskDecorator(org.springframework.core.task.TaskDecorator taskDecorator); // Specify a custom TaskDecorator to be applied to any Runnable about to be executed.\n\tFuture<?> submit(Runnable task);\n\t<T> Future<T> submit(Callable<T> task);\n\torg.springframework.util.concurrent.ListenableFuture<?> submitListenable(Runnable task);\n\t<T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(Callable<T> task);\n}"}
{"index": 15820, "repo": "camel-api-4.0.0-RC1", "des": "Strategy for a PollingConsumer when polling an Endpoint.", "code": "public interface PollingConsumerPollStrategy {\n\tboolean begin(Consumer consumer, Endpoint endpoint); // Called when poll is about to begin\n\tvoid commit(Consumer consumer, Endpoint endpoint, int polledMessages); // Called when poll is completed successfully\n\tboolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception cause); // Called when poll failed\n}"}
{"index": 9261, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Linux container runtime types for DelegatingLinuxContainerRuntime.", "code": "Enum LinuxContainerRuntimeConstants.RuntimeType {\n\tstatic LinuxContainerRuntimeConstants.RuntimeType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic LinuxContainerRuntimeConstants.RuntimeType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10551, "repo": "groovy-all-4.0.13", "des": "The JmxEventListener class is used by the builder to listen to events on the event bus.", "code": "public class JmxEventListener extends Object implements NotificationListener {\n\tstatic JmxEventListener getListener(); // Factory method that returns an instance of the listener.\n\tvoid handleNotification(Notification notification, Object handback); // This is the implemented method for NotificationListener.\n}"}
{"index": 18626, "repo": "tomcat-jspapi-10.1", "des": "Variable information for a tag in a Tag Library; This class is instantiated from the Tag Library Descriptor file (TLD) and is available only at translation time.", "code": "Class TagVariableInfo {\n\tjava.lang.String getClassName(); // The body of the <variable-class> element.\n\tboolean getDeclare(); // The body of the <declare> element.\n\tjava.lang.String getNameFromAttribute(); // The body of the <name-from-attribute> element.\n\tjava.lang.String getNameGiven(); // The body of the <name-given> element.\n\tint getScope(); // The body of the <scope> element.\n}"}
{"index": 3917, "repo": "hudi-client-0.6.0", "des": "Identifies different types of bootstrap.", "code": "Enum BootstrapMode {\n\tstatic BootstrapMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic BootstrapMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3558, "repo": "mahout-mr-0.13.0", "des": "Implementations of this interface define a notion of similarity between two users.", "code": "Interface UserSimilarity {\n\tvoid setPreferenceInferrer(PreferenceInferrer inferrer); // Attaches a PreferenceInferrer to the UserSimilarity implementation.\n\tdouble userSimilarity(long userID1, long userID2); // Returns the degree of similarity, of two users, based on the their preferences.\n}"}
{"index": 5847, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Default simple sub-cluster and rack resolver class.", "code": "Class DefaultSubClusterResolverImpl {\n\torg.apache.hadoop.conf.Configuration getConf();\n\tSubClusterId getSubClusterForNode(String nodename); // Obtain the sub-cluster that a specified node belongs to.\n\tSet<SubClusterId> getSubClustersForRack(String rackname); // Obtain the sub-clusters that have nodes on a specified rack.\n\tvoid load(); // Load the nodes to subCluster mapping from the file.\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 3843, "repo": "hbase-client-3.0.0-alpha-4", "des": "A utility class that encapsulates SASL logic for RPC client.", "code": "Class HBaseSaslRpcClient {\n\tInputStream getInputStream(); // Get a SASL wrapped InputStream.\n\tOutputStream getOutputStream(); // Get a SASL wrapped OutputStream.\n\tString getSaslQOP();\n\tvoid initCryptoCipher(org.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.CryptoCipherMeta cryptoCipherMeta, org.apache.hadoop.conf.Configuration conf);\n\tboolean saslConnect(InputStream inS, OutputStream outS); // Do client side SASL authentication with server via the given InputStream and OutputStream\n}"}
{"index": 7537, "repo": "cassandra-all-4.1.2", "des": "This class implements the Principal interface and represents a user.", "code": "Class CassandraPrincipal {\n\tboolean equals(java.lang.Object o); // Compares the specified Object with this CassPrincipal for equality.\n\tjava.lang.String getName(); // Return the username for this CassPrincipal.\n}"}
{"index": 10320, "repo": "spring-core-6.0.11", "des": "A common delegate for detecting a GraalVM native image environment.", "code": "public abstract class NativeDetector extends Object {\n\tstatic boolean inNativeImage(); // Returns true if running in a native image context (for example buildtime, runtime, or agent) expressed by setting the org.graalvm.nativeimage.imagecode system property to any value.\n\tstatic boolean inNativeImage(NativeDetector.Context... contexts); // Returns true if running in any of the specified native image context(s).\n}"}
{"index": 13832, "repo": "spring-webmvc-6.0.11", "des": "Adapter that implements the Servlet HandlerInterceptor interface and wraps an underlying WebRequestInterceptor.", "code": "public class WebRequestHandlerInterceptorAdapter extends Object implements AsyncHandlerInterceptor {\n\tvoid afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex); // Callback after completion of request processing, that is, after rendering the view.\n\tvoid afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler); // Called instead of postHandle and afterCompletion when the handler is being executed concurrently.\n\tvoid postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView); // Interception point after successful execution of a handler.\n\tboolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler); // Interception point before the execution of a handler.\n}"}
{"index": 11198, "repo": "wicket-extensions-10.0.0-M1", "des": "Wizard model that is specialized on dynamic wizards.", "code": "public class DynamicWizardModel extends AbstractWizardModel {\n\tIDynamicWizardStep getActiveStep(); // Gets the current active step the wizard should display.\n\tfinal IDynamicWizardStep getStartStep();\n\tboolean isFinishAvailable(); // Gets whether the finish button should be enabled.\n\tboolean isLastAvailable(); // Checks if the last button should be enabled.\n\tboolean isLastStep(IWizardStep step); // Gets whether the specified step is the last step in the wizard.\n\tboolean isNextAvailable(); // Gets whether the next button should be enabled.\n\tboolean isPreviousAvailable(); // Gets whether the previous button should be enabled.\n\tvoid last(); // Takes the model to the last step in the wizard.\n\tvoid next(); // Increments the model to the next step.\n\tvoid previous(); // Takes the model to the previous step.This method must only be called if IWizardModel.isPreviousAvailable() returns true.\n\tvoid reset(); // Resets the model, setting it to the first step.\n\tprotected final void setActiveStep(IDynamicWizardStep step); // Sets the active step.\n\tIterator<IWizardStep> stepIterator(); // Returns an iterator over all the steps in the model.\n}"}
{"index": 2895, "repo": "amqp-client-5.18.0", "des": "The retry of a retried topology recovery operation.", "code": "Class RetryResult {\n\tRecordedEntity getRecordedEntity(); // The entity to recover.\n\tObject getResult(); // The result of the recovery operation.\n}"}
{"index": 185, "repo": "commons-collections4-4.4", "des": "A List implementation that stores a cache of internal Node objects in an effort to reduce wasteful object creation.", "code": "Class NodeCachingLinkedList<E> {\n\tprotected void addNodeToCache(AbstractLinkedList.Node<E> node); // Adds a node to the cache, if the cache isn't full.\n\tprotected AbstractLinkedList.Node<E> createNode(E value); // Creates a new node, either by reusing one from the cache or creating a new one.\n\tprotected int getMaximumCacheSize(); // Gets the maximum size of the cache.\n\tprotected AbstractLinkedList.Node<E> getNodeFromCache(); // Gets a node from the cache.\n\tprotected boolean isCacheFull(); // Checks whether the cache is full.\n\tprotected void removeAllNodes(); // Removes all the nodes from the list, storing as many as required in the cache for reuse.\n\tprotected void removeNode(AbstractLinkedList.Node<E> node); // Removes the node from the list, storing it in the cache for reuse if the cache is not yet full.\n\tprotected void setMaximumCacheSize(int maximumCacheSize); // Sets the maximum size of the cache.\n\tprotected void shrinkCacheToMaximumSize(); // Reduce the size of the cache to the maximum, if necessary.\n}"}
{"index": 3893, "repo": "hbase-client-3.0.0-alpha-4", "des": "Used for server-side protobuf RPC service invocations.", "code": "Class ServerRpcController {\n\tvoid checkFailed(); // Throws an IOException back out if one is currently stored.\n\tString errorText();\n\tboolean failed();\n\tboolean failedOnException(); // Returns whether or not a server exception was generated in the prior RPC invocation.\n\tIOException getFailedOn(); // Returns any exception thrown during service method invocation, or null if no exception was thrown.\n\tboolean isCanceled();\n\tvoid notifyOnCancel(org.apache.hbase.thirdparty.com.google.protobuf.RpcCallback<Object> objectRpcCallback);\n\tvoid reset();\n\tvoid setFailed(String message);\n\tvoid setFailedOn(IOException ioe); // Sets an exception to be communicated back to the Service client.\n\tvoid startCancel();\n}"}
{"index": 13395, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Define the mode in which Artemis can operate.", "code": "public enum ArtemisMode extends Enum<ArtemisMode> {\n\tstatic ArtemisMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ArtemisMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 18445, "repo": "opencms-core-15.0", "des": "Layout for workplace server configuration.", "code": "Class CmsWorkplaceServerWidget {\n\tprotected void adjustServerPrefix(); // Adjustes the server prefixes according to SSL setting.\n\tprotected void adjustSSL(); // Adjustes the SSL according to server name.\n\tjava.lang.String getServer(); // Gets the server url.\n\tCmsSSLMode getSSLMode(); // Gets the SSL Mode.\n}"}
{"index": 16536, "repo": "spring-batch-infrastructure-5.0.2", "des": "Creates a fully qualified SingleItemPeekeableItemReader.", "code": "public class SingleItemPeekableItemReaderBuilder<T> extends Object {\n\tSingleItemPeekableItemReader<T> build(); // Returns a fully constructed SingleItemPeekableItemReader.\n\tSingleItemPeekableItemReaderBuilder<T> delegate(ItemReader<T> delegate); // The item reader to use as a delegate.\n}"}
{"index": 4147, "repo": "camel-core-3.0.0-RC1", "des": "The Thrift data format is used for serialization and deserialization of messages using Apache Thrift binary dataformat.", "code": "Class ThriftDataFormat {\n\tString getContentTypeFormat();\n\tObject getDefaultInstance();\n\tString getInstanceClass();\n\tvoid setContentTypeFormat(String contentTypeFormat); // Defines a content type format in which thrift message will be serialized/deserialized from(to) the Java been.\n\tvoid setDefaultInstance(Object defaultInstance);\n\tvoid setInstanceClass(String instanceClass); // Name of class to use when unarmshalling\n}"}
{"index": 11776, "repo": "bedrock-core-7.0.2", "des": "An immutable sequence of two type-safe values.", "code": "public class Pair<X,Y> extends Object implements Tuple {\n\tObject get(int index); // Obtains the value at the specified index.\n\tX getX(); // Obtains the first value of the Pair.\n\tY getY(); // Obtains the second value of the Pair.\n\tstatic <X, Y> Pair<X,Y> of(X x, Y y); // Constructs a Pair.\n\tint size(); // Obtains the number of values in the Tuple.\n}"}
{"index": 14665, "repo": "spring-data-commons-3.1.2", "des": "Annotation based RepositoryConfigurationSource.", "code": "public class AnnotationRepositoryConfigurationSource extends RepositoryConfigurationSourceSupport {\n\tOptional<String> getAttribute(String name); // Returns the value for the String attribute with the given name.\n\t<T> Optional<T> getAttribute(String name, Class<T> type); // Returns the value for the attribute with the given name and type.\n\tAnnotationAttributes getAttributes(); // Returns the AnnotationAttributes of the annotation configured.\n\tStreamable<String> getBasePackages(); // Returns the base packages the repository interfaces shall be found under.\n\tBootstrapMode getBootstrapMode(); // Defines the repository BootstrapMode to be used.\n\tAnnotationMetadata getEnableAnnotationMetadata(); // Returns the AnnotationMetadata for the @Enable annotation that triggered the configuration.\n\tStreamable<TypeFilter> getExcludeFilters(); // Return the TypeFilters to define which types to exclude when scanning for repositories.\n\tprotected Iterable<TypeFilter> getIncludeFilters(); // Return the TypeFilters to define which types to include when scanning for repositories.\n\tOptional<String> getNamedQueryLocation();\n\tOptional<Object> getQueryLookupStrategyKey(); // Returns the QueryLookupStrategy.Key to define how query methods shall be resolved.\n\tOptional<String> getRepositoryBaseClassName(); // Returns the name of the repository base class to be used or Optional.empty() if the store specific defaults shall be applied.\n\tOptional<String> getRepositoryFactoryBeanClassName(); // Returns the name of the repository factory bean class or Optional.empty() if not defined in the source.\n\tOptional<String> getRepositoryImplementationPostfix(); // Returns the configured postfix to be used for looking up custom implementation classes.\n\tString getResourceDescription(); // Returns a human readable description of the repository configuration source for error reporting purposes.\n\tObject getSource(); // Returns the actual source object that the configuration originated from.\n\tboolean shouldConsiderNestedRepositories(); // Returns whether we should consider nested repositories, i.e. repository interface definitions nested in other classes.\n\tboolean usesExplicitFilters(); // Returns whether the configuration uses explicit filtering to scan for repository types.\n}"}
{"index": 2349, "repo": "commons-geometry-euclidean-1.0", "des": "Class used to construct Bounds2D instances.", "code": "Class Bounds2D.Builder {\n\tBounds2D.Builder add(Bounds2D bounds); // Add the min and max points from the given bounds to this instance.\n\tBounds2D.Builder add(Vector2D pt); // Add a point to this instance.\n\tBounds2D.Builder addAll(Iterable<? extends Vector2D> pts); // Add a collection of points to this instance.\n\tBounds2D build(); // Create a new Bounds2D instance from the values in this builder.\n\tboolean hasBounds(); // Return true if this builder contains valid min and max coordinate values.\n}"}
{"index": 18394, "repo": "opencms-core-15.0", "des": "Relation validator entry information bean.", "code": "Class CmsRelationValidatorInfoEntry {\n\tjava.lang.String getName(); // Returns the entry Name.\n\tjava.util.List<CmsRelation> getRelations(); // Returns all the relations for this entry.\n\tjava.lang.String getResourceName(); // Returns the resource name.\n\tjava.lang.String getSiteName(); // Returns the site name.\n\tjava.lang.String getSiteRoot(); // Returns the site root.\n}"}
{"index": 4086, "repo": "camel-core-3.0.0-RC1", "des": "Converts the message body to another type.", "code": "Class ConvertBodyDefinition {\n\tString getCharset();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getShortName();\n\tString getType();\n\tClass<?> getTypeClass();\n\tvoid setCharset(String charset); // To use a specific charset when converting\n\tvoid setType(String type); // The java type to convert to\n\tvoid setTypeClass(Class<?> typeClass);\n}"}
{"index": 14299, "repo": "wicket-core-10.0.0-M1", "des": "Interface for the resource isolation policies.", "code": "@FunctionalInterface public interface IResourceIsolationPolicy {\n\tIResourceIsolationPolicy.ResourceIsolationOutcome isRequestAllowed(jakarta.servlet.http.HttpServletRequest request, IRequestablePage targetPage); // Is the given request allowed.\n\tdefault void setHeaders(jakarta.servlet.http.HttpServletResponse response); // Set possible response headers.\n}"}
{"index": 11793, "repo": "spring-kafka-3.0.9", "des": "Manages the ConsumerSeekAware.ConsumerSeekCallback s for the listener.", "code": "public abstract class AbstractConsumerSeekAware extends Object implements ConsumerSeekAware {\n\tprotected Map<ConsumerSeekAware.ConsumerSeekCallback,List<org.apache.kafka.common.TopicPartition>> getCallbacksAndTopics(); // Return the currently registered callbacks and their associated TopicPartition(s).\n\tprotected ConsumerSeekAware.ConsumerSeekCallback getSeekCallbackFor(org.apache.kafka.common.TopicPartition topicPartition); // Return the callback for the specified topic/partition.\n\tprotected Map<org.apache.kafka.common.TopicPartition,ConsumerSeekAware.ConsumerSeekCallback> getSeekCallbacks(); // The map of callbacks for all currently assigned partitions.\n\tvoid onPartitionsAssigned(Map<org.apache.kafka.common.TopicPartition,Long> assignments, ConsumerSeekAware.ConsumerSeekCallback callback); // When using group management, called when partition assignments change.\n\tvoid onPartitionsRevoked(Collection<org.apache.kafka.common.TopicPartition> partitions); // When using group management, called when partition assignments are revoked.\n\tvoid registerSeekCallback(ConsumerSeekAware.ConsumerSeekCallback callback); // Register the callback to use when seeking at some arbitrary time.\n\tvoid seekToBeginning(); // Seek all assigned partitions to the beginning.\n\tvoid seekToEnd(); // Seek all assigned partitions to the end.\n\tvoid seekToTimestamp(long time); // Seek all assigned partitions to the offset represented by the timestamp.\n\tvoid unregisterSeekCallback(); // Called when the listener consumer terminates allowing implementations to clean up state, such as thread locals.\n}"}
{"index": 12827, "repo": "spring-data-mongodb-4.1.2", "des": "Value object to represent a field and its meta-information.", "code": "protected static class QueryMapper.Field extends Object {\n\tboolean containsAssociation(); // Returns whether the field references an association in case it refers to a nested field.\n\tAssociation<MongoPersistentProperty> getAssociation();\n\tClass<?> getFieldType();\n\tString getMappedKey(); // Returns the key to be used in the mapped document eventually.\n\tMongoPersistentProperty getProperty(); // Returns the underlying MongoPersistentProperty backing the field.\n\tMongoPersistentEntity<?> getPropertyEntity(); // Returns the MongoPersistentEntity that field is conatined in.\n\tTypeInformation<?> getTypeHint();\n\tboolean isAssociation(); // Returns whether the field represents an association.\n\tboolean isIdField(); // Returns whether the current field is the id field.\n\tboolean isMap(); // Returns whether the field references a Map.\n\tQueryMapper.Field with(String name); // Returns a new QueryMapper.Field with the given name.\n}"}
{"index": 5372, "repo": "druid-processing-26.0.0", "des": "Interface to represent a class which can have overshadow relation between its instances.", "code": "Interface Overshadowable<T extends Overshadowable<T>> {\n\tdefault boolean containsRootPartition(T other);\n\tshort getAtomicUpdateGroupSize(); // Return the size of atomicUpdateGroup.\n\tint getEndRootPartitionId(); // See doc of getStartRootPartitionId().\n\tshort getMinorVersion();\n\tint getStartRootPartitionId(); // All overshadowables have root partition range.\n\tString getVersion();\n\tdefault boolean hasData();\n\tdefault boolean overshadows(T other); // Returns true if this overshadowable overshadows the other.\n}"}
{"index": 2807, "repo": "tika-parsers-1.28.5", "des": "This class is used to represent a ObjectSpaceObjectPropSet.", "code": "Class ObjectSpaceObjectPropSet {\n\tint doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the ObjectSpaceObjectPropSet from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of the ObjectSpaceObjectPropSet into a byte List.\n}"}
{"index": 1407, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents a boolean value in the PDF document.", "code": "Class COSBoolean {\n\tvoid accept(ICOSVisitor visitor); // visitor pattern double dispatch method.\n\tboolean equals(Object obj);\n\tstatic COSBoolean getBoolean(boolean value); // This will get the boolean value.\n\tstatic COSBoolean getBoolean(Boolean value); // This will get the boolean value.\n\tboolean getValue(); // This will get the value that this object wraps.\n\tBoolean getValueAsObject(); // This will get the value that this object wraps.\n\tvoid writePDF(OutputStream output); // This will write this object out to a PDF stream.\n}"}
{"index": 11574, "repo": "spring-security-oauth2-client-6.1.2", "des": "This WebFilter initiates the authorization code grant flow by redirecting the End-User's user-agent to the Authorization Server's Authorization Endpoint.", "code": "public class OAuth2AuthorizationRequestRedirectWebFilter extends Object implements org.springframework.web.server.WebFilter {\n\treactor.core.publisher.Mono<Void> filter(org.springframework.web.server.ServerWebExchange exchange, org.springframework.web.server.WebFilterChain chain);\n\tvoid setAuthorizationRedirectStrategy(org.springframework.security.web.server.ServerRedirectStrategy authorizationRedirectStrategy); // Sets the redirect strategy for Authorization Endpoint redirect URI.\n\tfinal void setAuthorizationRequestRepository(ServerAuthorizationRequestRepository<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> authorizationRequestRepository); // Sets the repository used for storing OAuth2AuthorizationRequest's.\n\tvoid setRequestCache(org.springframework.security.web.server.savedrequest.ServerRequestCache requestCache); // The request cache to use to save the request before sending a redirect.\n}"}
{"index": 4875, "repo": "hadoop-common-3.3.4", "des": "Exception indicating that configuration property cannot be changed at run time.", "code": "Class ReconfigurationException {\n\tString getNewValue(); // Get value to which property was supposed to be changed.\n\tString getOldValue(); // Get old value of property that cannot be changed.\n\tString getProperty(); // Get property that cannot be changed.\n}"}
{"index": 11579, "repo": "spring-security-oauth2-client-6.1.2", "des": "Implementations of this interface are responsible for the management of Authorized Client(s), which provide the purpose of associating an Access Token credential to a Client and Resource Owner, who is the Principal that originally granted the authorization.", "code": "public interface OAuth2AuthorizedClientService {\n\t<T extends OAuth2AuthorizedClient>T loadAuthorizedClient(String clientRegistrationId, String principalName); // Returns the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name or null if not available.\n\tvoid removeAuthorizedClient(String clientRegistrationId, String principalName); // Removes the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name.\n\tvoid saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, org.springframework.security.core.Authentication principal); // Saves the OAuth2AuthorizedClient associating it to the provided End-User Authentication (Resource Owner).\n}"}
{"index": 2405, "repo": "commons-geometry-euclidean-1.0", "des": "Class used to create high-accuracy sums of vectors.", "code": "Class Vector1D.Sum {\n\tVector1D.Sum add(Vector1D vec); // Add a vector to this instance.\n\tVector1D.Sum addScaled(double scale, Vector1D vec); // Add a scaled vector to this instance.\n\tstatic Vector1D.Sum create(); // Create a new instance with an initial value set to the zero vector.\n\tVector1D get();\n\tstatic Vector1D.Sum of(Vector1D initial); // Construct a new instance with an initial value set to the argument.\n\tstatic Vector1D.Sum of(Vector1D first, Vector1D... more); // Construct a new instance from multiple values.\n}"}
{"index": 8137, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for EndpointInterceptor instances that log a part of a WebServiceMessage.", "code": "Class AbstractLoggingInterceptor {\n\tvoid afterCompletion(MessageContext messageContext, Object endpoint, Exception ex); // Does nothing by default\n\tprotected abstract Source getSource(WebServiceMessage message); // Abstract template method that returns the Source for the given WebServiceMessage.\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Does nothing by default.\n\tboolean handleRequest(MessageContext messageContext, Object endpoint); // Logs the request message payload.\n\tboolean handleResponse(MessageContext messageContext, Object endpoint); // Logs the response message payload.\n\tprotected boolean isLogEnabled(); // Determine whether the logger field is enabled.\n\tprotected void logMessage(String message); // Logs the given string message.\n\tprotected void logMessageSource(String logMessage, Source source); // Logs the given source to the logger, using the message as a prefix.\n\tvoid setLoggerName(String loggerName); // Set the name of the logger to use.\n\tvoid setLogRequest(boolean logRequest); // Indicates whether the request should be logged.\n\tvoid setLogResponse(boolean logResponse); // Indicates whether the response should be logged.\n}"}
{"index": 1847, "repo": "hadoop-hdfs-3.3.6", "des": "Space balanced rack fault tolerant block placement policy.", "code": "Class AvailableSpaceRackFaultTolerantBlockPlacementPolicy {\n\tprotected org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor chooseDataNode(String scope, Collection<org.apache.hadoop.net.Node> excludedNode); // Choose a datanode from the given scope.\n\tprotected org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor chooseDataNode(String scope, Collection<org.apache.hadoop.net.Node> excludedNode, org.apache.hadoop.fs.StorageType type); // Choose a datanode from the given scope with specified storage type.\n\tprotected int compareDataNode(org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor a, org.apache.hadoop.hdfs.server.blockmanagement.DatanodeDescriptor b); // Compare the two data nodes.\n\tvoid initialize(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.hdfs.server.blockmanagement.FSClusterStats stats, org.apache.hadoop.net.NetworkTopology clusterMap, org.apache.hadoop.hdfs.server.blockmanagement.Host2NodesMap host2datanodeMap); // Used to setup a BlockPlacementPolicy object.\n}"}
{"index": 5021, "repo": "commons-collections-3.2.2", "des": "Provides utility methods and decorators for List instances.", "code": "Class ListUtils {\n\tstatic List fixedSizeList(List list); // Returns a fixed-sized list backed by the given list.\n\tstatic int hashCodeForList(Collection list); // Generates a hash code using the algorithm specified in List.hashCode().\n\tstatic List intersection(List list1, List list2); // Returns a new list containing all elements that are contained in both given lists.\n\tstatic boolean isEqualList(Collection list1, Collection list2); // Tests two lists for value-equality as per the equality contract in List.equals(java.lang.Object).\n\tstatic List lazyList(List list, Factory factory); // Returns a \"lazy\" list whose elements will be created on demand.\n\tstatic List predicatedList(List list, Predicate predicate); // Returns a predicated (validating) list backed by the given list.\n\tstatic List removeAll(Collection collection, Collection remove); // Removes the elements in remove from collection.\n\tstatic List retainAll(Collection collection, Collection retain); // Returns a List containing all the elements in collection that are also in retain.\n\tstatic List subtract(List list1, List list2); // Subtracts all elements in the second list from the first list, placing the results in a new list.\n\tstatic List sum(List list1, List list2); // Returns the sum of the given lists.\n\tstatic List synchronizedList(List list); // Returns a synchronized list backed by the given list.\n\tstatic List transformedList(List list, Transformer transformer); // Returns a transformed list backed by the given list.\n\tstatic List typedList(List list, Class type); // Returns a typed list backed by the given list.\n\tstatic List union(List list1, List list2); // Returns a new list containing the second list appended to the first list.\n\tstatic List unmodifiableList(List list); // Returns an unmodifiable list backed by the given list.\n}"}
{"index": 8617, "repo": "avro-1.11.2", "des": "A factory for creating and configuring Decoders.", "code": "Class DecoderFactory {\n\tBinaryDecoder binaryDecoder(byte[] bytes, BinaryDecoder reuse); // This method is shorthand for\n\tBinaryDecoder binaryDecoder(byte[] bytes, int offset, int length, BinaryDecoder reuse); // Creates or reinitializes a BinaryDecoder with the byte array provided as the source of data.\n\tBinaryDecoder binaryDecoder(InputStream in, BinaryDecoder reuse); // Creates or reinitializes a BinaryDecoder with the input stream provided as the source of data.\n\tDecoderFactory configureDecoderBufferSize(int size); // Configures this factory to use the specified buffer size when creating Decoder instances that buffer their input.\n\tBinaryDecoder directBinaryDecoder(InputStream in, BinaryDecoder reuse); // Creates or reinitializes a BinaryDecoder with the input stream provided as the source of data.\n\tstatic DecoderFactory get(); // Returns an immutable static DecoderFactory configured with default settings All mutating methods throw IllegalArgumentExceptions.\n\tint getConfiguredBufferSize(); // Returns this factory's configured preferred buffer size.\n\tJsonDecoder jsonDecoder(Schema schema, InputStream input); // Creates a JsonDecoder using the InputStream provided for reading data that conforms to the Schema provided.\n\tJsonDecoder jsonDecoder(Schema schema, String input); // Creates a JsonDecoder using the String provided for reading data that conforms to the Schema provided.\n\tResolvingDecoder resolvingDecoder(Schema writer, Schema reader, Decoder wrapped); // Creates a ResolvingDecoder wrapping the Decoder provided.\n\tValidatingDecoder validatingDecoder(Schema schema, Decoder wrapped); // Creates a ValidatingDecoder wrapping the Decoder provided.\n}"}
{"index": 597, "repo": "ignite-core-2.15.0", "des": "Utils to analyze client-related exceptions.", "code": "Class ClientExceptionsUtils {\n\tstatic boolean isAttemptToEstablishDirectConnectionWhenOnlyInverseIsAllowed(Throwable t); // Returns true if the exception that is provided is thrown because an attempt to open a direct connection was made while only inverse connections are allowed.\n\tstatic boolean isClientNodeTopologyException(Throwable t, ClusterNode node); // Returns true if the exception relates to cluster topology change that prevents a connection, AND the given node is client.\n}"}
{"index": 2126, "repo": "hive-exec-4.0.0-alpha-2", "des": "This function is not a deterministic function, and not a runtime constant.", "code": "Class GenericUDFSurrogateKey {\n\tvoid configure(MapredContext context); // Additionally setup GenericUDF with MapredContext before initializing.\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n\tvoid setWriteId(long writeId);\n}"}
{"index": 3339, "repo": "spring-social-core-1.1.6.RELEASE", "des": "Factory for creating OAuth1-based Connections.", "code": "Class OAuth1ConnectionFactory<A> {\n\tConnection<A> createConnection(ConnectionData data); // Create a OAuth1-based Connection from the connection data.\n\tConnection<A> createConnection(OAuthToken accessToken); // Create a OAuth1-based Connection from the access token response returned after completing the OAuth1 flow.\n\tprotected java.lang.String extractProviderUserId(OAuthToken accessToken); // Hook for extracting the providerUserId from the returned access token response, if it is available.\n\tOAuth1Operations getOAuthOperations();\n}"}
{"index": 12155, "repo": "jena-core-4.9.0", "des": "Implementation of the min cardinality restriction abstraction.", "code": "public class MinCardinalityRestrictionImpl extends RestrictionImpl implements MinCardinalityRestriction {\n\tint getMinCardinality(); // Answer the minimum cardinality of the restricted property.\n\tboolean hasMinCardinality(int cardinality); // Answer true if this property restriction has the given minimum cardinality.\n\tvoid removeMinCardinality(int cardinality); // Remove the statement that this restriction has the given minimum cardinality for the restricted property.\n\tvoid setMinCardinality(int cardinality); // Assert that this restriction restricts the property to have the given minimum cardinality.\n}"}
{"index": 16927, "repo": "spring-integration-ip-6.1.2", "des": "A MessageHandler implementation that maps a Message into a UDP datagram packet and sends that to the specified multicast address (224.0.0.0 to 239.255.255.255) and port.", "code": "public class MulticastSendingMessageHandler extends UnicastSendingMessageHandler {\n\tprotected void convertAndSend(org.springframework.messaging.Message<?> message);\n\tprotected DatagramSocket getSocket();\n\tvoid setLocalAddress(String localAddress); // On a multi-homed system, specifies the ip address of the network interface used to communicate.\n\tvoid setMinAcksForSuccess(int minAcksForSuccess); // If acknowledge = true; how many acks needed for success.\n\tvoid setTimeToLive(int timeToLive); // Set the underlying MulticastSocket time to live property.\n}"}
{"index": 1377, "repo": "nutch-2.4", "des": "Adds microformat rel-tags of document if found.", "code": "Class RelTagParser {\n\tParse filter(java.lang.String url, WebPage page, Parse parse, HTMLMetaTags metaTags, org.w3c.dom.DocumentFragment doc); // Adds metadata or otherwise modifies a parse, given the DOM tree of a page.\n\tConfiguration getConf(); // Get the Configuration object\n\tjava.util.Collection<WebPage.Field> getFields(); // Gets all the fields for a given WebPage Many datastores need to setup the mapreduce job by specifying the fields needed.\n\tvoid setConf(Configuration conf); // Set the Configuration object\n}"}
{"index": 3359, "repo": "hadoop-azure-3.3.6", "des": "The BlobFsOutputStream for Rest AbfsClient.", "code": "Class AbfsOutputStream {\n\tvoid close(); // Force all data in the output stream to be written to Azure storage.\n\tvoid flush(); // Flushes this output stream and forces any buffered output bytes to be written out.\n\torg.apache.hadoop.fs.statistics.IOStatistics getIOStatistics();\n\tAbfsOutputStreamStatistics getOutputStreamStatistics(); // Getter method for AbfsOutputStream statistics.\n\tString getStreamID();\n\tint getWriteOperationsSize(); // Getter to get the size of the task queue.\n\tboolean hasCapability(String capability); // Query the stream for a specific capability.\n\tboolean hasLease();\n\tvoid hflush(); // Flush out the data in client's user buffer.\n\tvoid hsync(); // Similar to posix fsync, flush out the data in client's user buffer all the way to the disk device (but the disk may have it in its cache).\n\tboolean isLeaseFreed();\n\tvoid registerListener(Listener listener1);\n\tvoid waitForPendingUploads();\n\tvoid write(byte[] data, int off, int length); // Writes length bytes from the specified byte array starting at off to this output stream.\n\tvoid write(int byteVal); // Writes the specified byte to this output stream.\n}"}
{"index": 16398, "repo": "spring-integration-http-6.1.2", "des": "MultipartFileReader implementation that does not maintain metadata from the original MultipartFile instance.", "code": "public class SimpleMultipartFileReader extends Object implements MultipartFileReader<Object> {\n\tObject readMultipartFile(org.springframework.web.multipart.MultipartFile multipartFile); // Read MultipartFile content.\n\tvoid setDefaultMultipartCharset(String defaultCharset); // Specify the default charset name to use when converting multipart file content into Strings if the multipart itself does not provide a charset.\n}"}
{"index": 639, "repo": "ignite-core-2.15.0", "des": "Everything related to file management during defragmentation process.", "code": "Class DefragmentationFileUtils {\n\tstatic void batchRenameDefragmentedCacheGroupPartitions(File workDir, IgniteLogger log); // Failure-tolerant batch rename of defragmented partition files.\n\tstatic void beforeInitPageStores(File workDir, IgniteLogger log); // Performs cleanup of work dir before initializing file page stores.\n\tstatic File defragmentationCompletionMarkerFile(File workDir); // Return defragmentation completion marker file.\n\tstatic File defragmentedIndexFile(File workDir); // Return file named index-dfrg.bin in given folder.\n\tstatic File defragmentedIndexTmpFile(File workDir); // Return file named index-dfrg.bin.tmp in given folder.\n\tstatic File defragmentedPartFile(File workDir, int partId); // Return file named part-dfrg-%d.bin in given folder.\n\tstatic File defragmentedPartMappingFile(File workDir, int partId); // Return file named part-map-%d.bin in given folder.\n\tstatic File defragmentedPartTmpFile(File workDir, int partId); // Return file named part-dfrg-%d.bin.tmp in given folder.\n\tstatic void deleteLeftovers(File workDir); // Deletes all defragmentation related file from work directory, except for completion marker.\n\tstatic void renameTempIndexFile(File workDir); // Rename temporary index defragmentation file to a finalized one.\n\tstatic void renameTempPartitionFile(File workDir, int partId); // Rename temporary partition defragmentation file to a finalized one.\n\tstatic boolean skipAlreadyDefragmentedCacheGroup(File workDir, int grpId, IgniteLogger log); // Checks whether cache group defragmentation completed or not.\n\tstatic boolean skipAlreadyDefragmentedPartition(File workDir, int grpId, int partId, IgniteLogger log); // Checks whether partition has already been defragmented or not.\n\tstatic void writeDefragmentationCompletionMarker(FileIOFactory ioFactory, File workDir, IgniteLogger log); // Creates empty completion marker file in given directory.\n}"}
{"index": 6869, "repo": "calcite-core-1.34.0", "des": "Parameter type-checking strategy for Explicit Type.", "code": "Class ExplicitOperandTypeChecker {\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks the types of all operands to an operator call.\n\tString getAllowedSignatures(SqlOperator op, String opName); // Returns a string describing the allowed formal signatures of a call, e.g.\n\tSqlOperandCountRange getOperandCountRange(); // Returns the range of operand counts allowed in a call.\n}"}
{"index": 5444, "repo": "druid-processing-26.0.0", "des": "A SingleValueDimensionVectorSelector decorator that directly exposes the underlying dictionary ids in getRowVector(), saving expression computation until lookupName(int) is called.", "code": "Class SingleStringInputDeferredEvaluationExpressionDimensionVectorSelector {\n\tint getCurrentVectorSize(); // Returns the current vector size for this cursor.\n\tint getMaxVectorSize(); // Returns the maximum vector size for this cursor.\n\tint[] getRowVector(); // Get the current vector.\n\tint getValueCardinality(); // Value cardinality is the cardinality of the different occurring values.\n\tIdLookup idLookup(); // Returns IdLookup if available for this DimensionSelector, or null.\n\tString lookupName(int id); // Returns the value for a particular dictionary id as a Java String.\n\tboolean nameLookupPossibleInAdvance(); // Returns true if it is possible to DimensionDictionarySelector.lookupName(int) by ids from 0 to DimensionDictionarySelector.getValueCardinality() before the rows with those ids are returned.\n}"}
{"index": 2725, "repo": "commons-dbcp2-2.9.0", "des": "A Driver implementation that obtains Connections from a registered ObjectPool.", "code": "Class PoolingDriver {\n\tboolean acceptsURL(String url);\n\tvoid closePool(String name); // Closes a named pool.\n\tConnection connect(String url, Properties info);\n\tObjectPool<? extends Connection> getConnectionPool(String name); // Gets the connection pool for the given name.\n\tint getMajorVersion();\n\tint getMinorVersion();\n\tLogger getParentLogger();\n\tString[] getPoolNames(); // Gets the pool names.\n\tDriverPropertyInfo[] getPropertyInfo(String url, Properties info);\n\tvoid invalidateConnection(Connection conn); // Invalidates the given connection.\n\tprotected boolean isAccessToUnderlyingConnectionAllowed(); // Returns the value of the accessToUnderlyingConnectionAllowed property.\n\tboolean jdbcCompliant();\n\tvoid registerPool(String name, ObjectPool<? extends Connection> pool); // Registers a named pool.\n}"}
{"index": 9438, "repo": "hadoop-yarn-api-3.3.6", "des": "A util to convert values in one unit to another.", "code": "Class UnitsConversionUtil {\n\tstatic int compare(String unitA, long valueA, String unitB, long valueB); // Compare a value in a given unit with a value in another unit.\n\tstatic int compareUnits(String unitA, String unitB); // Compare a unit to another unit.\n\tstatic long convert(String fromUnit, String toUnit, long fromValue); // Converts a value from one unit to another.\n}"}
{"index": 15737, "repo": "camel-api-4.0.0-RC1", "des": "A component is a factory of Endpoint objects.", "code": "public interface Component extends CamelContextAware, Service {\n\tEndpoint createEndpoint(String uri); // Attempt to resolve an endpoint for the given URI if the component is capable of handling the URI.\n\tEndpoint createEndpoint(String uri, Map<String,Object> parameters); // Attempt to resolve an endpoint for the given URI if the component is capable of handling the URI.\n\tdefault PropertyConfigurer getComponentPropertyConfigurer(); // Gets the component PropertyConfigurer.\n\tdefault String getDefaultName(); // Gets the default name of the component.\n\tdefault PropertyConfigurer getEndpointPropertyConfigurer(); // Gets the endpoint PropertyConfigurer.\n\tdefault <T extends ComponentExtension>Optional<T> getExtension(Class<T> extensionType); // Gets the extension of the given type.\n\tdefault Collection<Class<? extends ComponentExtension>> getSupportedExtensions(); // Gets a list of supported extensions.\n\tdefault boolean isAutowiredEnabled(); // Whether autowiring is enabled.\n\tstatic <T> T trySetComponent(T object, Component component); // Set the Component context if the component is an instance of ComponentAware.\n\tboolean useRawUri(); // Whether to use raw or encoded uri, when creating endpoints.\n}"}
{"index": 10145, "repo": "spring-hateoas-2.1.2", "des": "Strategy interface to discover a URI mapping and related Affordances for either a given type or method.", "code": "public interface MappingDiscoverer {\n\tList<MediaType> getConsumes(Method method); // Returns the MediaTypes supported for consumption.\n\tString getMapping(Class<?> type); // Deprecated. since 2.0, prefer getUriMapping(Class)\n\tString getMapping(Class<?> type, Method method); // Deprecated. since 2.0, use getUriMapping(Class, Method) instead\n\tString getMapping(Method method); // Deprecated. since 2.0, use getUriMapping(Method) instead\n\tString[] getParams(Method method); // Returns the statically declared request parameters.\n\tCollection<HttpMethod> getRequestMethod(Class<?> type, Method method); // Returns the HTTP verbs for the given Method invoked on the given type.\n\tdefault UriMapping getUriMapping(Class<?> type); // Returns the mapping associated with the given type.\n\tdefault UriMapping getUriMapping(Class<?> type, Method method); // Returns the mapping for the given Method invoked on the given type.\n\tdefault UriMapping getUriMapping(Method method); // Returns the mapping associated with the given Method.\n}"}
{"index": 11992, "repo": "jena-core-4.9.0", "des": "the base factory to create/return built-in schema DVs and create user-defined DVs @xerces.internal", "code": "public abstract class BaseSchemaDVFactory extends SchemaDVFactory {\n\tXSSimpleType createTypeList(String name, String targetNamespace, short finalSet, XSSimpleType itemType, XSObjectList annotations); // Create a new simple type which is derived by list from another simple type.\n\tXSSimpleType createTypeRestriction(String name, String targetNamespace, short finalSet, XSSimpleType base, XSObjectList annotations); // Create a new simple type which is derived by restriction from another simple type.\n\tXSSimpleType createTypeUnion(String name, String targetNamespace, short finalSet, XSSimpleType[] memberTypes, XSObjectList annotations); // Create a new simple type which is derived by union from a list of other simple types.\n\tXSSimpleTypeDecl newXSSimpleTypeDecl(); // Implementation internal\n\tvoid setDeclPool(XSDeclarationPool declPool);\n}"}
{"index": 9860, "repo": "commons-math3-3.6.1", "des": "Implementation of the uniform integer distribution.", "code": "Class UniformIntegerDistribution {\n\tdouble cumulativeProbability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tint getSupportLowerBound(); // Access the lower bound of the support.\n\tint getSupportUpperBound(); // Access the upper bound of the support.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tdouble probability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X = x).\n\tint sample(); // Generate a random value sampled from this distribution.\n}"}
{"index": 1730, "repo": "kafka-clients-3.5.0", "des": "Represents a filter which matches access control entries.", "code": "Class AccessControlEntryFilter {\n\tboolean equals(Object o);\n\tString findIndefiniteField(); // Returns a string describing an ANY or UNKNOWN field, or null if there is no such field.\n\tString host(); // Return the host or null.\n\tboolean isUnknown(); // Return true if there are any UNKNOWN components.\n\tboolean matches(AccessControlEntry other); // Returns true if this filter matches the given AccessControlEntry.\n\tboolean matchesAtMostOne(); // Returns true if this filter could only match one ACE -- in other words, if there are no ANY or UNKNOWN fields.\n\tAclOperation operation(); // Return the AclOperation.\n\tAclPermissionType permissionType(); // Return the AclPermissionType.\n\tString principal(); // Return the principal or null.\n}"}
{"index": 9588, "repo": "commons-math3-3.6.1", "des": "Calculates the eigen decomposition of a real matrix.", "code": "Class EigenDecomposition {\n\tRealMatrix getD(); // Gets the block diagonal matrix D of the decomposition.\n\tdouble getDeterminant(); // Computes the determinant of the matrix.\n\tRealVector getEigenvector(int i); // Gets a copy of the ith eigenvector of the original matrix.\n\tdouble getImagEigenvalue(int i); // Gets the imaginary part of the ith eigenvalue of the original matrix.\n\tdouble[] getImagEigenvalues(); // Gets a copy of the imaginary parts of the eigenvalues of the original matrix.\n\tdouble getRealEigenvalue(int i); // Returns the real part of the ith eigenvalue of the original matrix.\n\tdouble[] getRealEigenvalues(); // Gets a copy of the real parts of the eigenvalues of the original matrix.\n\tDecompositionSolver getSolver();\n\tRealMatrix getSquareRoot(); // Computes the square-root of the matrix.\n\tRealMatrix getV(); // Gets the matrix V of the decomposition.\n\tRealMatrix getVT(); // Gets the transpose of the matrix V of the decomposition.\n\tboolean hasComplexEigenvalues(); // Returns whether the calculated eigen values are complex or real.\n}"}
{"index": 10282, "repo": "spring-core-6.0.11", "des": "Resource implementation for a given InputStream.", "code": "public class InputStreamResource extends AbstractResource {\n\tboolean equals(Object obj); // This implementation compares the underlying InputStream.\n\tboolean exists(); // This implementation always returns true.\n\tString getDescription(); // This implementation returns a description that includes the passed-in description, if any.\n\tInputStream getInputStream(); // This implementation throws IllegalStateException if attempting to read the underlying stream multiple times.\n\tboolean isOpen(); // This implementation always returns true.\n}"}
{"index": 795, "repo": "ignite-core-2.15.0", "des": "This interface defines life-cycle for kernal manager.", "code": "Interface GridManager {\n\tboolean enabled();\n\tvoid onAfterSpiStart(); // This method executed after manager started SPI.\n\tvoid onBeforeSpiStart(); // This method executed before manager will start SPI.\n}"}
{"index": 12538, "repo": "spring-jdbc-6.0.11", "des": "Proxy for a target DataSource, fetching actual JDBC Connections lazily, i.e.", "code": "public class LazyConnectionDataSourceProxy extends DelegatingDataSource {\n\tvoid afterPropertiesSet();\n\tprotected void checkDefaultConnectionProperties(Connection con); // Check the default connection properties (auto-commit, transaction isolation), keeping them to be able to expose them correctly without fetching an actual JDBC Connection from the target DataSource.\n\tprotected Boolean defaultAutoCommit(); // Expose the default auto-commit value.\n\tprotected Integer defaultTransactionIsolation(); // Expose the default transaction isolation value.\n\tConnection getConnection(); // Return a Connection handle that lazily fetches an actual JDBC Connection when asked for a Statement (or PreparedStatement or CallableStatement).\n\tConnection getConnection(String username, String password); // Return a Connection handle that lazily fetches an actual JDBC Connection when asked for a Statement (or PreparedStatement or CallableStatement).\n\tvoid setDefaultAutoCommit(boolean defaultAutoCommit); // Set the default auto-commit mode to expose when no target Connection has been fetched yet (when the actual JDBC Connection default is not known yet).\n\tvoid setDefaultTransactionIsolation(int defaultTransactionIsolation); // Set the default transaction isolation level to expose when no target Connection has been fetched yet (when the actual JDBC Connection default is not known yet).\n\tvoid setDefaultTransactionIsolationName(String constantName); // Set the default transaction isolation level by the name of the corresponding constant in Connection, e.g.\n}"}
{"index": 17019, "repo": "spring-integration-core-6.1.2", "des": "Strategy interface to determine if a given header name matches.", "code": "@FunctionalInterface public static interface AbstractHeaderMapper.HeaderMatcher {\n\tdefault boolean isNegated(); // Return true if this match should be explicitly excluded from the mapping.\n\tboolean matchHeader(String headerName); // Specify if the given headerName matches.\n}"}
{"index": 17898, "repo": "spring-web-6.0.11", "des": "Filter that creates observations for HTTP exchanges.", "code": "public class ServerHttpObservationFilter extends OncePerRequestFilter {\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain); // Same contract as for doFilter, but guaranteed to be just invoked once per request within a single request thread.\n\tstatic Optional<ServerRequestObservationContext> findObservationContext(HttpServletRequest request); // Get the current observation context from the given request, if available.\n\tprotected boolean shouldNotFilterAsyncDispatch(); // The dispatcher type jakarta.servlet.DispatcherType.ASYNC means a filter can be invoked in more than one thread over the course of a single request.\n}"}
{"index": 2718, "repo": "commons-dbcp2-2.9.0", "des": "ManagedConnection is responsible for managing a database connection in a transactional environment (typically called \"Container Managed\").", "code": "Class ManagedConnection<C extends Connection> {\n\tprotected void checkOpen();\n\tvoid close(); // Closes the underlying connection, and close any Statements that were not explicitly closed.\n\tvoid commit();\n\tC getDelegate(); // Returns my underlying Connection.\n\tConnection getInnermostDelegate(); // If my underlying Connection is not a DelegatingConnection, returns it, otherwise recursively invokes this method on my delegate.\n\tTransactionContext getTransactionContext();\n\tTransactionRegistry getTransactionRegistry();\n\tboolean isAccessToUnderlyingConnectionAllowed(); // If false, getDelegate() and getInnermostDelegate() will return null.\n\tvoid rollback();\n\tvoid setAutoCommit(boolean autoCommit);\n\tvoid setReadOnly(boolean readOnly);\n\tprotected void transactionComplete(); // Completes the transaction.\n}"}
{"index": 2886, "repo": "amqp-client-5.18.0", "des": "TLS configuration for a OAuth2ClientCredentialsGrantCredentialsProvider.", "code": "Class OAuth2ClientCredentialsGrantCredentialsProvider.TlsConfiguration {\n\tOAuth2ClientCredentialsGrantCredentialsProvider.OAuth2ClientCredentialsGrantCredentialsProviderBuilder builder(); // Go back to the builder to configure non-TLS settings.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.TlsConfiguration dev(); // Set up a non-secured environment, useful for development and testing.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.TlsConfiguration hostnameVerifier(HostnameVerifier hostnameVerifier); // Set the hostname verifier.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.TlsConfiguration sslContext(SSLContext sslContext); // Set the SSLContext to use to create the SSLSocketFactory for the HttpsURLConnection.\n\tOAuth2ClientCredentialsGrantCredentialsProvider.TlsConfiguration sslSocketFactory(SSLSocketFactory sslSocketFactory); // Set the SSLSocketFactory to use in the HttpsURLConnection.\n}"}
{"index": 13566, "repo": "spring-messaging-6.0.11", "des": "Spec to declare the expected output for an RSocket request.", "code": "public static interface RSocketRequester.RetrieveSpec {\n\t<T> reactor.core.publisher.Flux<T> retrieveFlux(Class<T> dataType); // Perform an requestStream or a requestChannel exchange depending on whether the request input is single or multi-payload.\n\t<T> reactor.core.publisher.Flux<T> retrieveFlux(org.springframework.core.ParameterizedTypeReference<T> dataTypeRef); // Variant of retrieveFlux(Class) for when the dataType has to have a generic type.\n\t<T> reactor.core.publisher.Mono<T> retrieveMono(Class<T> dataType); // Perform a requestResponse exchange.\n\t<T> reactor.core.publisher.Mono<T> retrieveMono(org.springframework.core.ParameterizedTypeReference<T> dataTypeRef); // Variant of retrieveMono(Class) for when the dataType has to have a generic type.\n\treactor.core.publisher.Mono<Void> send(); // Perform a fireAndForget sending the provided data and metadata.\n}"}
{"index": 9210, "repo": "fontbox-3.0.0-beta1", "des": "This class contains some helper methods handling Type1-Fonts.", "code": "Class Type1FontUtil {\n\tstatic byte[] charstringDecrypt(byte[] buffer, int n); // Decrypt charstring.\n\tstatic byte[] charstringEncrypt(byte[] buffer, int n); // Encrypt charstring.\n\tstatic byte[] eexecDecrypt(byte[] buffer); // Decrypt eexec.\n\tstatic byte[] eexecEncrypt(byte[] buffer); // Encrypt eexec.\n\tstatic byte[] hexDecode(String string); // Converts a string representing a hex value into a byte array.\n\tstatic String hexEncode(byte[] bytes); // Converts a byte-array into a string with the corresponding hex value.\n}"}
{"index": 16366, "repo": "spring-data-jpa-3.1.2", "des": "Sort option for queries that wraps JPA meta-model Attributes for sorting.", "code": "public class JpaSort extends Sort {\n\tJpaSort and(Sort.Direction direction, jakarta.persistence.metamodel.Attribute<?,?>... attributes); // Returns a new JpaSort with the given sorting criteria added to the current one.\n\tJpaSort and(Sort.Direction direction, JpaSort.Path<?,?>... paths); // Returns a new JpaSort with the given sorting criteria added to the current one.\n\tJpaSort andUnsafe(Sort.Direction direction, String... properties); // Returns a new JpaSort with the given sorting criteria added to the current one.\n\tstatic JpaSort of(jakarta.persistence.metamodel.Attribute<?,?>... attributes); // Creates a new JpaSort for the given attributes with the default sort direction.\n\tstatic JpaSort of(Sort.Direction direction, jakarta.persistence.metamodel.Attribute<?,?>... attributes); // Creates a new JpaSort for the given direction and attributes.\n\tstatic JpaSort of(Sort.Direction direction, JpaSort.Path<?,?>... paths); // Creates a new JpaSort for the given direction and JpaSort.Paths.\n\tstatic JpaSort of(JpaSort.Path<?,?>... paths); // Creates a new JpaSort instance with the given JpaSort.Paths.\n\tstatic <A extends jakarta.persistence.metamodel.Attribute<T, S>, T, S>JpaSort.Path<T,S> path(A attribute); // Creates a new JpaSort.Path for the given Attribute.\n\tstatic <P extends jakarta.persistence.metamodel.PluralAttribute<T, ?, S>, T, S>JpaSort.Path<T,S> path(P attribute); // Creates a new JpaSort.Path for the given PluralAttribute.\n\tstatic JpaSort unsafe(String... properties); // Creates new unsafe JpaSort based on given properties.\n\tstatic JpaSort unsafe(Sort.Direction direction, String... properties); // Creates new unsafe JpaSort based on given Sort.Direction and properties.\n\tstatic JpaSort unsafe(Sort.Direction direction, List<String> properties); // Creates new unsafe JpaSort based on given Sort.Direction and properties.\n}"}
{"index": 7480, "repo": "nifi-client-dto-1.22.0", "des": "A serialized representation of this class can be placed in the entity body of a request or response to or from the API.", "code": "Class ParameterProviderConfigurationEntity {\n\tParameterProviderConfigurationDTO getComponent(); // The ParameterProviderConfigurationDTO that is being serialized.\n\tString getId(); // The id for this component.\n\tPermissionsDTO getPermissions(); // The permissions for this component.\n\tvoid setComponent(ParameterProviderConfigurationDTO component);\n\tvoid setId(String id);\n\tvoid setPermissions(PermissionsDTO permissions);\n}"}
{"index": 1920, "repo": "hadoop-hdfs-3.3.6", "des": "A PBImageDelimitedTextWriter generates a text representation of the PB fsimage, with each element separated by a delimiter string.", "code": "Class PBImageDelimitedTextWriter {\n\tvoid afterOutput(); // Method called at the end of output() phase after all the inodes with known parentPath has been printed out.\n\tprotected void buildNamespace(InputStream in, List<Long> refIdList); // Scan the INodeDirectory section to construct the namespace.\n\tprotected void checkNode(FsImageProto.INodeSection.INode p, AtomicInteger numDirs); // Checks the inode (saves if directory), and counts them.\n\tvoid close();\n\tString getEntry(String parent, FsImageProto.INodeSection.INode inode); // Get text output for the given inode.\n\tString getHeader(); // Get text output for the header line.\n\tprotected org.apache.hadoop.fs.permission.PermissionStatus getPermission(long perm);\n\tint getStoragePolicy(FsImageProto.INodeSection.XAttrFeatureProto xattrFeatureProto);\n\tvoid visit(RandomAccessFile file);\n}"}
{"index": 11628, "repo": "spring-websocket-6.0.11", "des": "An HTTP TransportHandler that uses a famous browser document.domain technique.", "code": "public class HtmlFileTransportHandler extends AbstractHttpSendingTransportHandler {\n\tboolean checkSessionType(SockJsSession session); // Check whether the type of the given session matches the transport type of this TransportHandler where session id and the transport type are extracted from the SockJS URL.\n\tStreamingSockJsSession createSession(String sessionId, WebSocketHandler handler, Map<String,Object> attributes); // Create a new SockJS session.\n\tprotected org.springframework.http.MediaType getContentType();\n\tprotected SockJsFrameFormat getFrameFormat(org.springframework.http.server.ServerHttpRequest request);\n\tTransportType getTransportType(); // Return the transport type supported by this handler.\n\tvoid handleRequestInternal(org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response, AbstractHttpSockJsSession sockJsSession);\n}"}
