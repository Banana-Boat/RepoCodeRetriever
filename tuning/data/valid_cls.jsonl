{"index": 1313, "repo": "ignite-core-2.15.0", "des": "Defines possible Visor operation on transactions.", "code": "Enum VisorTxOperation {\n\tstatic @Nullable VisorTxOperation fromOrdinal(int ord); // Efficiently gets enumerated value from its ordinal.\n\tstatic VisorTxOperation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic VisorTxOperation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4887, "repo": "hadoop-common-3.3.4", "des": "This class provides secure APIs for opening and creating files on the local disk.", "code": "Class SecureIOUtils {\n\tstatic FileOutputStream createForWrite(File f, int permissions); // Open the specified File for write access, ensuring that it does not exist.\n\tprotected static RandomAccessFile forceSecureOpenForRandomRead(File f, String mode, String expectedOwner, String expectedGroup); // Same as openForRandomRead except that it will run even if security is off.\n\tprotected static FileInputStream forceSecureOpenForRead(File f, String expectedOwner, String expectedGroup); // Same as openForRead() except that it will run even if security is off.\n\tprotected static FSDataInputStream forceSecureOpenFSDataInputStream(File file, String expectedOwner, String expectedGroup); // Same as openFSDataInputStream except that it will run even if security is off.\n\tstatic RandomAccessFile openForRandomRead(File f, String mode, String expectedOwner, String expectedGroup); // Open the given File for random read access, verifying the expected user/ group constraints if security is enabled.\n\tstatic FileInputStream openForRead(File f, String expectedOwner, String expectedGroup); // Open the given File for read access, verifying the expected user/group constraints if security is enabled.\n\tstatic FSDataInputStream openFSDataInputStream(File file, String expectedOwner, String expectedGroup); // Opens the FSDataInputStream on the requested file on local file system, verifying the expected user/group constraints if security is enabled.\n}"}
{"index": 7387, "repo": "mahout-math-0.13.0", "des": "Implements a normal distribution specified mean and standard deviation.", "code": "Class Normal {\n\tdouble cdf(double x); // Returns the cumulative distribution function.\n\tdouble nextDouble(); // Returns a random number from the distribution.\n\tdouble pdf(double x); // Returns the probability density function.\n\tvoid setRandomGenerator(Random randomGenerator); // Sets the uniform random generator internally used.\n\tvoid setState(double mean, double standardDeviation); // Sets the mean and variance.\n}"}
{"index": 4333, "repo": "beam-sdks-java-core-2.49.0", "des": "Encapsulates constructor parameters to DefaultFilenamePolicy.", "code": "Class DefaultFilenamePolicy.Params {\n\tboolean equals(@Nullable java.lang.Object o);\n\tDefaultFilenamePolicy.Params withBaseFilename(ResourceId baseFilename); // Sets the base filename.\n\tDefaultFilenamePolicy.Params withBaseFilename(ValueProvider<ResourceId> baseFilename); // Like withBaseFilename(ResourceId), but takes in a ValueProvider.\n\tDefaultFilenamePolicy.Params withShardTemplate(java.lang.String shardTemplate); // Sets the shard template.\n\tDefaultFilenamePolicy.Params withSuffix(java.lang.String suffix); // Sets the suffix.\n\tDefaultFilenamePolicy.Params withWindowedWrites(); // Specify that writes are windowed.\n}"}
{"index": 2758, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "Write table content out to map output files.", "code": "Class TsvImporterTextMapper {\n\tprotected void doSetup(org.apache.hadoop.mapreduce.Mapper.Context context); // Handles common parameter initialization that a subclass might want to leverage.\n\torg.apache.hadoop.mapreduce.Counter getBadLineCount();\n\tboolean getSkipBadLines();\n\tvoid incrementBadLineCount(int count);\n\tvoid map(org.apache.hadoop.io.LongWritable offset, org.apache.hadoop.io.Text value, org.apache.hadoop.mapreduce.Mapper.Context context); // Convert a line of TSV text into an HBase table row.\n\tprotected void setup(org.apache.hadoop.mapreduce.Mapper.Context context); // Handles initializing this class with objects specific to it (i.e., the parser).\n}"}
{"index": 1353, "repo": "nutch-2.4", "des": "This class is a heuristic link extractor for JavaScript files and code snippets.", "code": "Class JSParseFilter {\n\tParse filter(java.lang.String url, WebPage page, Parse parse, HTMLMetaTags metaTags, org.w3c.dom.DocumentFragment doc); // Scan the JavaScript looking for possible Outlink's\n\tConfiguration getConf(); // Get the Configuration object\n\tjava.util.Collection<WebPage.Field> getFields(); // Gets all the fields for a given WebPage Many datastores need to setup the mapreduce job by specifying the fields needed.\n\tParse getParse(java.lang.String url, WebPage page); // Parse a JavaScript file and extract outlinks\n\tstatic void main(java.lang.String[] args); // Main method which can be run from command line with the plugin option.\n\tvoid setConf(Configuration conf); // Set the Configuration object\n}"}
{"index": 15576, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "des": "A meter value that is used when configuring micrometer.", "code": "public final class MeterValue extends Object {\n\tDouble getValue(io.micrometer.core.instrument.Meter.Type meterType); // Return the underlying value in form suitable to apply to the given meter type.\n\tstatic MeterValue valueOf(double value); // Return a new MeterValue instance for the given double value.\n\tstatic MeterValue valueOf(String value); // Return a new MeterValue instance for the given String value.\n}"}
{"index": 713, "repo": "ignite-core-2.15.0", "des": "Return value for cases where both, value and success flag need to be returned.", "code": "Class GridCacheReturn {\n\tvoid addEntryProcessResult(GridCacheContext cctx, KeyCacheObject key, @Nullable Object key0, @Nullable Object res, @Nullable Exception err, boolean keepBinary);\n\tint cacheId();\n\tshort directType(); // Gets message type.\n\tboolean emptyResult();\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid finishUnmarshal(GridCacheContext ctx, ClassLoader ldr);\n\tboolean invokeResult();\n\tvoid invokeResult(boolean invokeRes);\n\tvoid marshalResult(GridCacheContext ctx); // Converts entry processor invokation results to cache object instances.\n\tvoid mergeEntryProcessResults(GridCacheReturn other);\n\tvoid onAckReceived(); // Method called when ack message received.\n\tvoid prepareMarshal(GridCacheContext ctx);\n\tvoid readExternal(ObjectInput in);\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tGridCacheReturn set(GridCacheContext cctx, @Nullable CacheObject cacheObj, boolean success, boolean keepBinary, @Nullable ClassLoader ldr);\n\tboolean success();\n\tGridCacheReturn success(boolean success);\n\t<V> V value();\n\tGridCacheReturn value(GridCacheContext cctx, CacheObject v, boolean keepBinary, @Nullable ClassLoader ldr);\n\tvoid writeExternal(ObjectOutput out);\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 1569, "repo": "pdfbox-3.0.0-beta1", "des": "Radio button fields contain a set of related buttons that can each be on or off.", "code": "Class PDRadioButton {\n\tList<String> getSelectedExportValues(); // This will get the selected export values.\n\tint getSelectedIndex(); // This will get the selected index.\n\tboolean isRadiosInUnison();\n\tvoid setRadiosInUnison(boolean radiosInUnison); // From the PDF Spec If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked.\n}"}
{"index": 9785, "repo": "commons-math3-3.6.1", "des": "Interface defining a visitor for matrix entries.", "code": "Interface RealMatrixChangingVisitor {\n\tdouble end(); // End visiting a matrix.\n\tvoid start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn); // Start visiting a matrix.\n\tdouble visit(int row, int column, double value); // Visit one matrix entry.\n}"}
{"index": 6062, "repo": "jackson-databind-2.15.2", "des": "Serializer class that can serialize Java objects that map to JSON Object output.", "code": "Class BeanSerializer {\n\tprotected BeanSerializerBase asArraySerializer(); // Implementation has to check whether as-array serialization is possible reliably; if (and only if) so, will construct a BeanAsArraySerializer, otherwise will return this serializer as is.\n\tstatic BeanSerializer createDummy(JavaType forType, BeanSerializerBuilder builder); // Method for constructing dummy bean serializer; one that never outputs any properties\n\tvoid serialize(Object bean, JsonGenerator gen, SerializerProvider provider); // Main serialization method that will delegate actual output to configured BeanPropertyWriter instances.\n\tJsonSerializer<Object> unwrappingSerializer(NameTransformer unwrapper); // Method that will return serializer instance that produces \"unwrapped\" serialization, if applicable for type being serialized (which is the case for some serializers that produce JSON Objects as output).\n\tprotected BeanSerializerBase withByNameInclusion(Set<String> toIgnore, Set<String> toInclude); // Mutant factory used for creating a new instance with additional set of properties to ignore or include (from properties this instance otherwise has)\n\tBeanSerializerBase withFilterId(Object filterId); // Mutant factory used for creating a new instance with different filter id (used with JsonFilter annotation)\n\tBeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter); // Mutant factory used for creating a new instance with different ObjectIdWriter.\n\tprotected BeanSerializerBase withProperties(BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties); // Mutant factory used for creating a new instance with modified set of properties.\n}"}
{"index": 15511, "repo": "spring-batch-core-5.0.2", "des": "A FactoryBean that automates the creation of a SimpleJobExplorer by using JDBC DAO implementations.", "code": "public class JobExplorerFactoryBean extends AbstractJobExplorerFactoryBean implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected ExecutionContextDao createExecutionContextDao(); // Creates an execution context instance data access object (DAO).\n\tprotected JobExecutionDao createJobExecutionDao(); // Creates a job execution data access object (DAO).\n\tprotected JobInstanceDao createJobInstanceDao(); // Creates a job instance data access object (DAO).\n\tprotected StepExecutionDao createStepExecutionDao(); // Creates a step execution data access object (DAO).\n\tvoid setCharset(Charset charset); // Sets the Charset to use when deserializing the execution context.\n\tvoid setConversionService(org.springframework.core.convert.support.ConfigurableConversionService conversionService); // Set the conversion service to use in the job explorer.\n\tvoid setDataSource(DataSource dataSource); // Sets the data source.\n\tvoid setJdbcOperations(org.springframework.jdbc.core.JdbcOperations jdbcOperations); // Public setter for the JdbcOperations.\n\tvoid setLobHandler(org.springframework.jdbc.support.lob.LobHandler lobHandler); // The lob handler to use when saving ExecutionContext instances.\n\tvoid setSerializer(ExecutionContextSerializer serializer); // A custom implementation of ExecutionContextSerializer.\n\tvoid setTablePrefix(String tablePrefix); // Sets the table prefix for all the batch metadata tables.\n}"}
{"index": 4141, "repo": "camel-core-3.0.0-RC1", "des": "Sets the exchange pattern on the message exchange.", "code": "Class SetExchangePatternDefinition {\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\torg.apache.camel.ExchangePattern getPattern();\n\tString getShortName();\n\tSetExchangePatternDefinition pattern(org.apache.camel.ExchangePattern pattern);\n\tvoid setPattern(org.apache.camel.ExchangePattern pattern); // Sets the new exchange pattern of the Exchange to be used from this point forward\n}"}
{"index": 13321, "repo": "shiro-core-2.0.0-alpha-2", "des": "A AuthenticationToken that contains an a Bearer token or API key, typically received via an HTTP Authorization header.", "code": "public class BearerToken extends Object implements HostAuthenticationToken {\n\tObject getCredentials(); // Returns the credentials submitted by the user during the authentication process that verifies the submitted account identity.\n\tString getHost(); // Returns the host name of the client from where the authentication attempt originates or if the Shiro environment cannot or chooses not to resolve the hostname to improve performance, this method returns the String representation of the client's IP address.\n\tObject getPrincipal(); // Returns the account identity submitted during the authentication process.\n\tString getToken();\n}"}
{"index": 2024, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template Decimal64ScalarArithmeticDecimal64Column.", "code": "Class Decimal64ScalarSubtractDecimal64Column {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean shouldConvertDecimal64ToDecimal(); // By default vector expressions do not handle decimal64 types and should be converted into Decimal types if its output cannot handle Decimal64.\n\tString vectorExpressionParameters();\n}"}
{"index": 8657, "repo": "avro-1.11.2", "des": "Builds a Field in the context of a SchemaBuilder.", "code": "Class SchemaBuilder.FieldBuilder<R> {\n\tSchemaBuilder.FieldBuilder<R> notValidatingDefaults(); // Skip field default value validation during completeField(Schema, JsonNode)}\n\tSchemaBuilder.FieldBuilder<R> orderAscending(); // Set this field to have ascending order.\n\tSchemaBuilder.FieldBuilder<R> orderDescending(); // Set this field to have descending order.\n\tSchemaBuilder.FieldBuilder<R> orderIgnore(); // Set this field to ignore order.\n\tprotected SchemaBuilder.FieldBuilder<R> self(); // a self-type for chaining builder subclasses.\n\tSchemaBuilder.FieldTypeBuilder<R> type(); // Final step in configuring this field, finalizing name, namespace, alias, and order.\n\tSchemaBuilder.GenericDefault<R> type(Schema type); // Final step in configuring this field, finalizing name, namespace, alias, and order.\n\tSchemaBuilder.GenericDefault<R> type(String name); // Final step in configuring this field, finalizing name, namespace, alias, and order.\n\tSchemaBuilder.GenericDefault<R> type(String name, String namespace); // Final step in configuring this field, finalizing name, namespace, alias, and order.\n\tSchemaBuilder.FieldBuilder<R> validatingDefaults(); // Validate field default value during completeField(Schema, JsonNode).\n}"}
{"index": 7919, "repo": "commons-jcs3-core-3.1", "des": "Performs default serialization and de-serialization.", "code": "Class CompressingSerializer {\n\t<T> T deSerialize(byte[] data, ClassLoader loader); // Uses default de-serialization to turn a byte array into an object.\n\t<T> byte[] serialize(T obj); // Serializes an object using default serialization.\n}"}
{"index": 18238, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Describes the environment in which the scan will occur.", "code": "Interface ScanEnvironment {\n\tjava.util.List<java.lang.String> getExplicitlyListedClassNames(); // Returns any classes which are explicitly listed as part of the \"persistence unit\".\n\tjava.util.List<java.lang.String> getExplicitlyListedMappingFiles(); // Returns the mapping files which are explicitly listed as part of the \"persistence unit\".\n\tjava.util.List<java.net.URL> getNonRootUrls(); // Returns any non-root URLs for scanning.\n\tjava.net.URL getRootUrl(); // Returns the root URL for scanning.\n}"}
{"index": 3780, "repo": "hbase-client-3.0.0-alpha-4", "des": "Provides the basics for a RpcClient implementation like configuration and Logging.", "code": "Class AbstractRpcClient<T extends org.apache.hadoop.hbase.ipc.RpcConnection> {\n\tvoid cancelConnections(ServerName sn); // Interrupt the connections to the given ip:port server.\n\tvoid close(); // Stop all threads related to this client.\n\tprotected abstract void closeInternal();\n\torg.apache.hbase.thirdparty.com.google.protobuf.BlockingRpcChannel createBlockingRpcChannel(ServerName sn, User ticket, int rpcTimeout); // Creates a \"channel\" that can be used by a blocking protobuf service.\n\tprotected abstract T createConnection(org.apache.hadoop.hbase.ipc.ConnectionId remoteId); // Not connected.\n\torg.apache.hbase.thirdparty.com.google.protobuf.RpcChannel createRpcChannel(ServerName sn, User user, int rpcTimeout); // Creates a \"channel\" that can be used by a protobuf service.\n\tprotected Codec getCodec(); // Encapsulate the ugly casting and RuntimeException conversion in private method.\n\tstatic String getDefaultCodec(org.apache.hadoop.conf.Configuration c);\n\tboolean hasCellBlockSupport(); // Return true when this client uses a Codec and so supports cell blocks.\n\tprotected boolean isTcpNoDelay();\n}"}
{"index": 17858, "repo": "spring-web-6.0.11", "des": "A \"reactive\" HTTP output message that accepts output as a Publisher.", "code": "public interface ReactiveHttpOutputMessage extends HttpMessage {\n\tvoid beforeCommit(Supplier<? extends reactor.core.publisher.Mono<Void>> action); // Register an action to apply just before the HttpOutputMessage is committed.\n\torg.springframework.core.io.buffer.DataBufferFactory bufferFactory(); // Return a DataBufferFactory that can be used to create the body.\n\tboolean isCommitted(); // Whether the HttpOutputMessage is committed.\n\treactor.core.publisher.Mono<Void> setComplete(); // Indicate that message handling is complete, allowing for any cleanup or end-of-processing tasks to be performed such as applying header changes made via HttpMessage.getHeaders() to the underlying HTTP message (if not applied already).\n\treactor.core.publisher.Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends org.springframework.core.io.buffer.DataBuffer>> body); // Use the given Publisher of Publishers to write the body of the HttpOutputMessage to the underlying HTTP layer, flushing after each Publisher<DataBuffer>.\n\treactor.core.publisher.Mono<Void> writeWith(Publisher<? extends org.springframework.core.io.buffer.DataBuffer> body); // Use the given Publisher to write the body of the message to the underlying HTTP layer.\n}"}
{"index": 8167, "repo": "spring-ws-3.0.10.RELEASE", "des": "AXIOM-specific implementation of the SoapMessage interface.", "code": "Class AxiomSoapMessage {\n\tAttachment addAttachment(String contentId, DataHandler dataHandler); // Add an attachment to the message, taking the content from a DataHandler.\n\tboolean convertToXopPackage(); // Turns this message into a XOP package.\n\tAttachment getAttachment(String contentId); // Returns the Attachment with the specified content Id.\n\tIterator<Attachment> getAttachments(); // Returns an Iterator over all Attachment objects that are part of this message.\n\torg.apache.axiom.soap.SOAPMessage getAxiomMessage(); // Return the AXIOM SOAPMessage that this AxiomSoapMessage is based on.\n\tDocument getDocument(); // Returns this message as a Document.\n\tSoapEnvelope getEnvelope(); // Returns the SoapEnvelope associated with this SoapMessage.\n\tString getSoapAction(); // Get the SOAP Action for this message, or null if not present.\n\tboolean isXopPackage(); // Indicates whether this message is a XOP package.\n\tvoid setAxiomMessage(org.apache.axiom.soap.SOAPMessage axiomMessage); // Sets the AXIOM SOAPMessage that this AxiomSoapMessage is based on.\n\tvoid setDocument(Document document); // Sets the contents of the message to the given Document.\n\tvoid setOutputFormat(org.apache.axiom.om.OMOutputFormat outputFormat); // Sets the OMOutputFormat to be used when writing the message.\n\tvoid setSoapAction(String soapAction); // Sets the SOAP Action for this message.\n\tvoid setStreamingPayload(StreamingPayload payload); // Sets the streaming payload for this message.\n\tvoid writeTo(OutputStream outputStream); // Writes the entire message to the given output stream.\n}"}
{"index": 6797, "repo": "calcite-core-1.34.0", "des": "Implementation of SqlStatisticProvider that reads and writes a cache.", "code": "Class CachingSqlStatisticProvider {\n\tboolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns, RelOptTable toTable, List<Integer> toColumns); // Returns whether a join is a foreign key; that is, whether every row in the referencing table is matched by at least one row in the referenced table.\n\tboolean isKey(RelOptTable table, List<Integer> columns); // Returns whether a collection of columns is a unique (or primary) key.\n\tdouble tableCardinality(RelOptTable table); // Returns an estimate of the number of rows in table.\n}"}
{"index": 3236, "repo": "hbase-common-3.0.0-alpha-4", "des": "Adds HBase configuration files to a Configuration.", "code": "Class HBaseConfiguration {\n\tstatic org.apache.hadoop.conf.Configuration addHbaseResources(org.apache.hadoop.conf.Configuration conf);\n\tstatic org.apache.hadoop.conf.Configuration create(); // Creates a Configuration with HBase resources\n\tstatic org.apache.hadoop.conf.Configuration create(org.apache.hadoop.conf.Configuration that); // Creates a Configuration with HBase resources\n\tstatic org.apache.hadoop.conf.Configuration createClusterConf(org.apache.hadoop.conf.Configuration baseConf, String clusterKey); // Generates a Configuration instance by applying the ZooKeeper cluster key to the base Configuration.\n\tstatic org.apache.hadoop.conf.Configuration createClusterConf(org.apache.hadoop.conf.Configuration baseConf, String clusterKey, String overridePrefix); // Generates a Configuration instance by applying property overrides prefixed by a cluster profile key to the base Configuration.\n\tstatic String getPassword(org.apache.hadoop.conf.Configuration conf, String alias, String defPass); // Get the password from the Configuration instance using the getPassword method if it exists.\n\tstatic boolean isShowConfInServlet(); // Returns whether to show HBase Configuration in servlet\n\tstatic void main(String[] args); // For debugging.\n\tstatic void merge(org.apache.hadoop.conf.Configuration destConf, org.apache.hadoop.conf.Configuration srcConf); // Merge two configurations.\n\tstatic void setWithPrefix(org.apache.hadoop.conf.Configuration conf, String prefix, Iterable<Map.Entry<String,String>> properties); // Sets all the entries in the provided Map<String, String> as properties in the given Configuration.\n\tstatic org.apache.hadoop.conf.Configuration subset(org.apache.hadoop.conf.Configuration srcConf, String prefix); // Returns a subset of the configuration properties, matching the given key prefix.\n}"}
{"index": 3207, "repo": "hbase-common-3.0.0-alpha-4", "des": "Comparator for comparing cells and has some specialized methods that allows comparing individual cell components like row, family, qualifier and timestamp.", "code": "Interface CellComparator {\n\tint compare(Cell leftCell, Cell rightCell); // Lexographically compares two cells.\n\tint compare(Cell leftCell, Cell rightCell, boolean ignoreSequenceid); // Compare cells.\n\tint compareFamilies(Cell leftCell, Cell rightCell); // Lexicographically compares the families of the two cells\n\tint compareQualifiers(Cell leftCell, Cell rightCell); // Lexicographically compares the qualifiers of the two cells\n\tdefault int compareRows(byte[] leftRow, byte[] rightRow); // Compares two row bytes\n\tdefault int compareRows(ByteBuffer row, Cell cell); // Lexicographically compare two rows\n\tint compareRows(Cell cell, byte[] bytes, int offset, int length); // Compares the row part of the cell with a simple plain byte[] like the stopRow in Scan.\n\tint compareRows(Cell leftCell, Cell rightCell); // Lexographically compares the rows of two cells.\n\tint compareTimestamps(Cell leftCell, Cell rightCell); // Compares cell's timestamps in DESCENDING order.\n\tint compareTimestamps(long leftCellts, long rightCellts); // Compares cell's timestamps in DESCENDING order.\n\tint compareWithoutRow(Cell leftCell, Cell rightCell); // Lexicographically compares the two cells excluding the row part.\n\tstatic CellComparator getInstance(); // A comparator for ordering cells in user-space tables.\n\tComparator<Cell> getSimpleComparator(); // Return a dumbed-down, fast comparator for hbase2 base-type, the ByteBufferKeyValue.\n}"}
{"index": 17727, "repo": "spring-web-6.0.11", "des": "Implementation of ResponseErrorHandler that uses HttpMessageConverters to convert HTTP error responses to RestClientExceptions.", "code": "public class ExtractingResponseErrorHandler extends DefaultResponseErrorHandler {\n\tvoid handleError(ClientHttpResponse response, HttpStatusCode statusCode); // Handle the error based on the resolved status code.\n\tprotected boolean hasError(HttpStatusCode statusCode); // Template method called from DefaultResponseErrorHandler.hasError(ClientHttpResponse).\n\tvoid setMessageConverters(List<HttpMessageConverter<?>> messageConverters); // Set the message converters to use by this extractor.\n\tvoid setSeriesMapping(Map<HttpStatus.Series,Class<? extends RestClientException>> seriesMapping); // Set the mapping from HTTP status series to RestClientException subclass.\n\tvoid setStatusMapping(Map<HttpStatusCode,Class<? extends RestClientException>> statusMapping); // Set the mapping from HTTP status code to RestClientException subclass.\n}"}
{"index": 15792, "repo": "camel-api-4.0.0-RC1", "des": "A representation of configuration options for creating and loading a KeyStore instance.", "code": "public class KeyStoreParameters extends JsseParameters {\n\tKeyStore createKeyStore(); // Creates a KeyStoreParameters instance based off of the configuration state of this instance.\n\tString getPassword();\n\tString getProvider();\n\tString getResource();\n\tString getType();\n\tvoid setKeyStore(KeyStore keyStore); // Sets the optional key store, which has higher priority then value in resource.\n\tvoid setPassword(String value); // Set the optional password for reading/opening/verifying the key store.\n\tvoid setProvider(String value); // Sets the optional provider identifier for instantiating the key store.\n\tvoid setResource(String value); // Sets the optional file path, class path resource, or URL of the resource used to load the key store.\n\tvoid setType(String value); // Sets the type of the key store to create and load.\n}"}
{"index": 13782, "repo": "spring-webmvc-6.0.11", "des": "Resolves method arguments annotated with @RequestBody and handles return values from methods annotated with @ResponseBody by reading and writing to the body of the request or response with an HttpMessageConverter.", "code": "public class RequestResponseBodyMethodProcessor extends AbstractMessageConverterMethodProcessor {\n\tprotected boolean checkRequired(org.springframework.core.MethodParameter parameter);\n\tvoid handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, org.springframework.web.method.support.ModelAndViewContainer mavContainer, org.springframework.web.context.request.NativeWebRequest webRequest);\n\tprotected <T> Object readWithMessageConverters(org.springframework.web.context.request.NativeWebRequest webRequest, org.springframework.core.MethodParameter parameter, Type paramType); // Create the method argument value of the expected parameter type by reading from the given request.\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, org.springframework.web.method.support.ModelAndViewContainer mavContainer, org.springframework.web.context.request.NativeWebRequest webRequest, org.springframework.web.bind.support.WebDataBinderFactory binderFactory); // Throws MethodArgumentNotValidException if validation fails.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType);\n}"}
{"index": 15996, "repo": "wicket-util-10.0.0-M1", "des": "Useful class for constructing readable and reusable regular expressions.", "code": "public class MetaPattern extends Object implements IClusterable {\n\tfinal Matcher matcher(CharSequence input); // Creates a matcher against a given input character sequence.\n\tfinal Matcher matcher(CharSequence input, int flags); // Creates a matcher with the given regexp compile flags.\n\tfinal Pattern pattern(); // Gets the regular expression Pattern for this MetaPattern by compiling it.\n\tfinal Pattern pattern(int flags); // Gets the regular expression Pattern for this MetaPattern by compiling it using the given flags.\n}"}
{"index": 1181, "repo": "ignite-core-2.15.0", "des": "Default snapshot restore handler for checking snapshot partitions consistency.", "code": "Class SnapshotPartitionsVerifyHandler {\n\tvoid complete(String name, Collection<SnapshotHandlerResult<Map<PartitionKeyV2,PartitionHashRecordV2>>> results); // Processing the results of the SnapshotHandler.invoke(SnapshotHandlerContext) method received from all nodes.\n\tMap<PartitionKeyV2,PartitionHashRecordV2> invoke(SnapshotHandlerContext opCtx); // Local processing of a snapshot operation.\n\tprotected boolean isPunchHoleEnabled(SnapshotHandlerContext opCtx, Set<Integer> grpIds);\n\tprotected boolean skipHash(); // Provides flag of full hash calculation.\n\tSnapshotHandlerType type(); // Snapshot handler type.\n}"}
{"index": 16811, "repo": "spring-expression-6.0.11", "des": "A basic implementation of EvaluationContext that focuses on a subset of essential SpEL features and customization options, targeting simple condition evaluation and in particular data binding scenarios.", "code": "public final class SimpleEvaluationContext extends Object implements EvaluationContext {\n\tTypedValue assignVariable(String name, Supplier<TypedValue> valueSupplier); // SimpleEvaluationContext does not support variable assignment within expressions.\n\tstatic SimpleEvaluationContext.Builder forPropertyAccessors(PropertyAccessor... accessors); // Create a SimpleEvaluationContext for the specified PropertyAccessor delegates: typically a custom PropertyAccessor specific to a use case (e.g.\n\tstatic SimpleEvaluationContext.Builder forReadOnlyDataBinding(); // Create a SimpleEvaluationContext for read-only access to public properties via DataBindingPropertyAccessor.\n\tstatic SimpleEvaluationContext.Builder forReadWriteDataBinding(); // Create a SimpleEvaluationContext for read-write access to public properties via DataBindingPropertyAccessor.\n\tBeanResolver getBeanResolver(); // SimpleEvaluationContext does not support the use of bean references.\n\tList<ConstructorResolver> getConstructorResolvers(); // Return an empty list, always, since this context does not support the use of type references.\n\tList<MethodResolver> getMethodResolvers(); // Return the specified MethodResolver delegates, if any.\n\tOperatorOverloader getOperatorOverloader(); // Return an instance of StandardOperatorOverloader.\n\tList<PropertyAccessor> getPropertyAccessors(); // Return the specified PropertyAccessor delegates, if any.\n\tTypedValue getRootObject(); // Return the specified root object, if any.\n\tTypeComparator getTypeComparator(); // Return an instance of StandardTypeComparator.\n\tTypeConverter getTypeConverter(); // The configured TypeConverter.\n\tTypeLocator getTypeLocator(); // SimpleEvaluationContext does not support use of type references.\n\tObject lookupVariable(String name); // Look up a named variable within this evaluation context.\n\tvoid setVariable(String name, Object value); // Set a named variable in this evaluation context to a specified value.\n}"}
{"index": 11915, "repo": "maven-core-4.0.0-alpha-7", "des": "Summarizes the result of a project build in the reactor.", "code": "public abstract class BuildSummary extends Object {\n\tMavenProject getProject(); // Gets the project being summarized.\n\tlong getTime(); // Gets the build time of the project in milliseconds.\n}"}
{"index": 12596, "repo": "spring-batch-integration-5.0.2", "des": "A ChannelInterceptor that turns a pollable channel into a \"pass-thru channel\": if a client calls receive() on the channel it will delegate to a MessageSource to pull the message directly from an external source.", "code": "public class MessageSourcePollerInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Asserts that mandatory properties are set.\n\tboolean preReceive(org.springframework.messaging.MessageChannel channel); // Receive from the MessageSource and send immediately to the input channel, so that the call that we are intercepting always a message to receive.\n\tvoid setChannel(org.springframework.messaging.MessageChannel channel); // Optional MessageChannel for injecting the message received from the source (defaults to the channel intercepted in preReceive(MessageChannel)).\n\tvoid setMessageSource(org.springframework.integration.core.MessageSource<?> source);\n}"}
{"index": 14165, "repo": "wicket-core-10.0.0-M1", "des": "A helper class for rendering components and pages.", "code": "public class ComponentRenderer extends Object {\n\tvoid destroy(); // Destroy this renderer.\n\tprotected org.apache.wicket.request.Request newRequest(); // Create a new request, by default a MockWebRequest.\n\tCharSequence renderComponent(Supplier<Component> component); // Collects the Html generated by rendering a component.\n\tstatic CharSequence renderComponent(Component component); // Collects the Html generated by rendering a component.\n\tCharSequence renderPage(Supplier<? extends Page> page); // Collects the html generated by rendering a page.\n\tstatic CharSequence renderPage(PageProvider pageProvider); // Collects the Html generated by the rendering a page.\n}"}
{"index": 14328, "repo": "wicket-core-10.0.0-M1", "des": "Utility class that performs common functions used by IRequestMappers.", "code": "public class MapperUtils extends Object {\n\tstatic org.apache.wicket.request.mapper.info.PageComponentInfo getPageComponentInfo(org.apache.wicket.request.Url url); // Extracts the PageComponentInfo from the URL.\n\tstatic org.apache.wicket.request.mapper.info.PageComponentInfo parsePageComponentInfoParameter(org.apache.wicket.request.Url.QueryParameter parameter); // Attempts to parse a Url.QueryParameter which may hold PageComponentInfo.\n}"}
{"index": 8982, "repo": "hbase-server-3.0.0-alpha-4", "des": "Priority function specifically for the master.", "code": "Class MasterAnnotationReadingPriorityFunction {\n\tprotected int getBasePriority(org.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.RequestHeader header, org.apache.hbase.thirdparty.com.google.protobuf.Message param); // Get the priority for a given request from the header and the param.\n\tlong getDeadline(org.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.RequestHeader header, org.apache.hbase.thirdparty.com.google.protobuf.Message param); // Returns the deadline of the specified request.\n\tprotected int normalizePriority(int priority);\n}"}
{"index": 773, "repo": "ignite-core-2.15.0", "des": "Future processing transaction enlisting and locking of entries produces by complex DML queries with reduce step.", "code": "Class GridDhtTxQueryResultsEnlistFuture {\n\tprotected UpdateSourceIterator<?> createIterator(); // Gets source to be updated iterator.\n\tboolean hasNextX(); // This method is the same as Iterator.hasNext(), but allows for failure with exception.\n\tObject nextX(); // This method is the same as Iterator.next(), but allows for failure with exception.\n\tEnlistOperation operation();\n}"}
{"index": 5596, "repo": "org.apache.karaf.main-2.4.4", "des": "This class starts OSGi with a console for development use.", "code": "Class FrameworkConsole {\n\tprotected void docommand(String cmdline); // Process the args on the command line.\n\tString getInput(); // Reads a string from standard input until user hits the Enter key.\n\tCommandProvider[] getServices(); // Return an array of service objects for all services being tracked by this ServiceTracker object.\n\tPrintWriter getWriter(); // Return the current output PrintWriter\n\tvoid run(); // Command Line Interface for OSGi.\n\tvoid shutdown(); // Stops the console so the thread can be GC'ed\n}"}
{"index": 1690, "repo": "samza-api-1.8.0", "des": "An implemented Reservoir used to store values that appear in a sliding time window.", "code": "Class SlidingTimeWindowReservoir {\n\tSnapshot getSnapshot(); // Return a Snapshot of this reservoir\n\tint size(); // Return the number of values in this reservoir\n\tvoid update(long value); // Update the reservoir with the new value\n}"}
{"index": 16200, "repo": "spring-data-cassandra-4.1.2", "des": "Cassandra specific Repository interface with reactive support.", "code": "@NoRepositoryBean public interface ReactiveCassandraRepository<T,ID> extends ReactiveCrudRepository<T,ID> {\n\treactor.core.publisher.Flux<T> findAllById(Iterable<ID> iterable);\n\treactor.core.publisher.Flux<T> findAllById(org.reactivestreams.Publisher<ID> publisher);\n\t<S extends T>reactor.core.publisher.Flux<S> insert(Iterable<S> entities); // Inserts the given entities.\n\t<S extends T>reactor.core.publisher.Flux<S> insert(org.reactivestreams.Publisher<S> entities); // Inserts the given a given entities.\n\t<S extends T>reactor.core.publisher.Mono<S> insert(S entity); // Inserts the given entity.\n}"}
{"index": 15608, "repo": "spring-security-core-6.1.2", "des": "Wraps a delegate Runnable with logic for setting up a SecurityContext before invoking the delegate Runnable and then removing the SecurityContext after the delegate has completed.", "code": "public final class DelegatingSecurityContextRunnable extends Object implements Runnable {\n\tstatic Runnable create(Runnable delegate, SecurityContext securityContext); // Factory method for creating a DelegatingSecurityContextRunnable.\n\tvoid run();\n\tvoid setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 18829, "repo": "lucene-core-9.7.0", "des": "An interface for implementations that support 2-phase commit.", "code": "Interface TwoPhaseCommit {\n\tlong commit(); // The second phase of a 2-phase commit.\n\tlong prepareCommit(); // The first stage of a 2-phase commit.\n\tvoid rollback(); // Discards any changes that have occurred since the last commit.\n}"}
{"index": 6198, "repo": "jackson-databind-2.15.2", "des": "Generic handler for types that implement JsonSerializable.", "code": "Class SerializableSerializer {\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tboolean isEmpty(SerializerProvider serializers, JsonSerializable value); // Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values).\n\tvoid serialize(JsonSerializable value, JsonGenerator gen, SerializerProvider serializers); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(JsonSerializable value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer); // Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.\n}"}
{"index": 14393, "repo": "wicket-core-10.0.0-M1", "des": "Custom ClassLoader that reverses the classloader lookups, and that is able to notify a listener when a class file is changed.", "code": "public class ReloadingClassLoader extends URLClassLoader {\n\tstatic void addLocation(URL url); // Add the location of a directory containing class files\n\tvoid destroy(); // Remove the ModificationWatcher from the current reloading class loader\n\tstatic void excludePattern(String pattern); // Exclude a pattern\n\tstatic Set<URL> getLocations(); // Returns the list of all configured locations of directories containing class files\n\tstatic List<String> getPatterns(); // Returns the list of all configured inclusion or exclusion patterns\n\tfinal URL getResource(String name); // Gets a resource from this ClassLoader.\n\tstatic void includePattern(String pattern); // Include a pattern\n\tfinal Class<?> loadClass(String name, boolean resolve); // Loads the class from this ClassLoader.\n\tvoid setListener(org.apache.wicket.util.listener.IChangeListener<Class<?>> listener); // Sets the listener that will be notified when a class changes\n\tprotected boolean tryClassHere(String name);\n}"}
{"index": 10575, "repo": "groovy-all-4.0.13", "des": "Message source backed up by one or more ResourceBundle instances for simple i18n support.", "code": "public class MessageSource extends GroovyObjectSupport {\n\tString format(String code, Object[] args); // Format a message (based on MessageFormat) using the message from the resource bundles using the given code as a pattern and the given objects as arguments.\n\tString getMessage(String code); // Get a raw message from the resource bundles using the given code.\n\tObject getProperty(String name); // Retrieves a property value.\n}"}
{"index": 1830, "repo": "nifi-web-api-0.5.0", "des": "Audits controller service creation/removal and configuration changes.", "code": "Class ControllerServiceAuditor {\n\tControllerServiceNode createControllerServiceAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint); // Audits the creation of controller service via createControllerService().\n\tprivate Map<String,String> extractConfiguredPropertyValues(ControllerServiceNode controllerService, ControllerServiceDTO controllerServiceDTO); // Extracts the values for the configured properties from the specified ControllerService.\n\tprivate Action generateAuditRecord(ControllerServiceNode controllerService, Operation operation); // Generates an audit record for the creation of a controller service.\n\tprivate Action generateAuditRecord(ControllerServiceNode controllerService, Operation operation, ActionDetails actionDetails); // Generates an audit record for the creation of a controller service.\n\tprivate void getUpdateActionsForReferencingComponents(NiFiUser user, Collection<Action> actions, Collection<String> visitedServices, Set<ConfiguredComponent> referencingComponents); // Gets the update actions for all specified referencing components.\n\tprivate boolean isDisabled(ControllerServiceNode controllerService); // Returns whether the specified controller service is disabled (or disabling).\n\tprivate PropertyDescriptor locatePropertyDescriptor(Set<PropertyDescriptor> propertyDescriptors, PropertyDescriptor specDescriptor); // Locates the actual property descriptor for the given spec property descriptor.\n\tvoid removeControllerServiceAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint, String controllerServiceId, ControllerServiceDAO controllerServiceDAO); // Audits the removal of a controller service via deleteControllerService().\n\tObject updateControllerServiceAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint, ControllerServiceDTO controllerServiceDTO, ControllerServiceDAO controllerServiceDAO); // Audits the configuration of a single controller service.\n\tObject updateControllerServiceReferenceAdvice(org.aspectj.lang.ProceedingJoinPoint proceedingJoinPoint); // Audits the update of a component referencing a controller service.\n}"}
{"index": 6394, "repo": "spring-data-solr-4.3.15", "des": "Trivial implementation of FacetAndHighlightQuery.", "code": "Class SimpleFacetAndHighlightQuery {\n\t<T extends SolrDataQuery>T addCriteria(Criteria criteria); // Add an criteria to the query.\n\tCriteria getCriteria();\n\tFacetOptions getFacetOptions();\n\tHighlightOptions getHighlightOptions();\n\tJoin getJoin();\n\tString getRequestHandler();\n\tboolean hasFacetOptions();\n\tboolean hasHighlightOptions();\n\t<T extends SolrDataQuery>T setFacetOptions(FacetOptions facetOptions); // Faceting options to apply when executing query\n\t<T extends SolrDataQuery>T setHighlightOptions(HighlightOptions highlightOptions); // Highlight options to apply when exectuing query\n\tvoid setJoin(Join join); // Set values for join {@code !\n\tvoid setRequestHandler(String requestHandler);\n}"}
{"index": 17018, "repo": "spring-integration-core-6.1.2", "des": "A message source that can limit the number of remote objects it fetches.", "code": "public abstract class AbstractFetchLimitingMessageSource<T> extends AbstractMessageSource<T> implements MessageSourceManagement {\n\tprotected Object doReceive(); // Subclasses must implement this method.\n\tprotected abstract Object doReceive(int maxFetchSizeToReceive); // Subclasses must implement this method.\n\tint getMaxFetchSize(); // Return the max fetch size.\n\tvoid setMaxFetchSize(int maxFetchSize); // Set the maximum number of objects the source should fetch if it is necessary to fetch objects.\n}"}
{"index": 811, "repo": "ignite-core-2.15.0", "des": "Enables multithreaded notification of session opened, message received and session closed events.", "code": "Class GridNioAsyncNotifyFilter {\n\tvoid onExceptionCaught(GridNioSession ses, IgniteCheckedException ex); // Invoked when exception is caught in filter processing.\n\tvoid onMessageReceived(GridNioSession ses, Object msg); // Invoked when a new messages received.\n\tGridNioFuture<Boolean> onSessionClose(GridNioSession ses); // Invoked when a session close request is performed on session.\n\tvoid onSessionClosed(GridNioSession ses); // Invoked after session get closed.\n\tvoid onSessionIdleTimeout(GridNioSession ses); // Called when session is idle for longer time that is allowed by NIO server.\n\tvoid onSessionOpened(GridNioSession ses); // Invoked when a new session was created.\n\tGridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg, boolean fut, IgniteInClosure<IgniteException> ackC); // Invoked when a write request is performed on a session.\n\tvoid onSessionWriteTimeout(GridNioSession ses); // Called when session has not empty write buffer that has not been fully flushed during max timeout allowed by NIO server.\n\tvoid stop(); // End of a filter lifecycle, invoked on server stop.\n}"}
{"index": 18277, "repo": "tomcat-api-10.1", "des": "An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.", "code": "Class LocalXAConnectionFactory {\n\tConnection createConnection(); // Create a new Connection in an implementation specific fashion.\n\tConnectionFactory getConnectionFactory();\n\tTransactionRegistry getTransactionRegistry(); // Gets the TransactionRegistry for this connection factory which contains a the XAResource for every connection created by this factory.\n}"}
{"index": 2200, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ScalarArithmeticColumn.", "code": "Class LongScalarMultiplyLongColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 6162, "repo": "jackson-databind-2.15.2", "des": "This is bit trickier to implement efficiently, while avoiding overflow problems.", "code": "Class NumberDeserializers.BigIntegerDeserializer {\n\tBigInteger deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tObject getEmptyValue(DeserializationContext ctxt); // Method called to determine value to be used for \"empty\" values (most commonly when deserializing from empty JSON Strings).\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n}"}
{"index": 2342, "repo": "commons-geometry-euclidean-1.0", "des": "Class representing a sequence of axis-angle rotations.", "code": "Class AxisAngleSequence {\n\tstatic AxisAngleSequence createAbsolute(AxisSequence axisSequence, double angle1, double angle2, double angle3); // Create a new instance with a reference frame of AxisReferenceFrame.ABSOLUTE.\n\tstatic AxisAngleSequence createRelative(AxisSequence axisSequence, double angle1, double angle2, double angle3); // Create a new instance with a reference frame of AxisReferenceFrame.RELATIVE.\n\tboolean equals(Object obj);\n\tdouble getAngle1(); // Get the angle of rotation around the first axis, in radians.\n\tdouble getAngle2(); // Get the angle of rotation around the second axis, in radians.\n\tdouble getAngle3(); // Get the angle of rotation around the third axis, in radians.\n\tdouble[] getAngles(); // Get the rotation angles as a 3-element array.\n\tAxisSequence getAxisSequence(); // Get the rotation axis sequence.\n\tAxisReferenceFrame getReferenceFrame(); // Get the axis reference frame.\n}"}
{"index": 12043, "repo": "jena-core-4.9.0", "des": "Encapsulates a class description representing a closed enumeration of individuals.", "code": "public interface EnumeratedClass extends OntClass {\n\tvoid addOneOf(Iterator<? extends Resource> individuals); // Add each individual from the given iteration to the enumeration that defines the class extension of this class.\n\tvoid addOneOf(Resource res); // Add an individual to the enumeration that defines the class extension of this class.\n\tRDFList getOneOf(); // Answer a list of individuals that defines the extension of this class.\n\tboolean hasOneOf(Resource res); // Answer true if the given individual is one of the enumerated individuals in the class extension of this class.\n\tExtendedIterator<? extends OntResource> listOneOf(); // Answer an iterator over all of the individuals that are declared to be the class extension for this class.\n\tvoid removeOneOf(Resource res); // Remove the statement that this enumeration includes res among its members.\n\tvoid setOneOf(RDFList en); // Assert that this class is exactly the enumeration of the given individuals.\n}"}
{"index": 6653, "repo": "artemis-odb-2.3.0", "des": "Maintains relationships between entities.", "code": "Class EntityLinkManager {\n\tprotected void initialize(); // Override to implement code that gets executed when systems are initialized.\n\tprotected void processSystem(); // Process the system.\n\tvoid register(Class<? extends Component> component, LinkListener listener); // Injects and associates the listener with the component.\n\tvoid register(Class<? extends Component> component, String field, LinkListener listener); // Injects and associates the listener with a specific field for a given component type.\n}"}
{"index": 6894, "repo": "calcite-core-1.34.0", "des": "An immutable list that may contain null values.", "code": "Class ImmutableNullableList<E> {\n\tstatic <E> ImmutableNullableList.Builder<E> builder(); // Returns a new builder.\n\tstatic <E> List<E> copyOf(Collection<? extends E> elements); // Returns an immutable list containing the given elements, in order.\n\tstatic <E> List<E> copyOf(E[] elements); // Returns an immutable list containing the given elements, in order.\n\tstatic <E> List<E> copyOf(Iterable<? extends E> elements); // Returns an immutable list containing the given elements, in order.\n\tE get(int index);\n\tstatic <E> List<E> of(E e1); // Creates an immutable list of 1 element.\n\tstatic <E> List<E> of(E e1, E e2); // Creates an immutable list of 2 elements.\n\tstatic <E> List<E> of(E e1, E e2, E e3); // Creates an immutable list of 3 elements.\n\tstatic <E> List<E> of(E e1, E e2, E e3, E e4); // Creates an immutable list of 4 elements.\n\tstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5); // Creates an immutable list of 5 elements.\n\tstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6); // Creates an immutable list of 6 elements.\n\tstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7); // Creates an immutable list of 7 elements.\n\tstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E... others); // Creates an immutable list of 8 or more elements.\n\tint size();\n}"}
{"index": 6118, "repo": "jackson-databind-2.15.2", "des": "Simple serializer for InetSocketAddress.", "code": "Class InetSocketAddressSerializer {\n\tvoid serialize(InetSocketAddress value, JsonGenerator jgen, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(InetSocketAddress value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer); // Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix.\n}"}
{"index": 16159, "repo": "spring-data-cassandra-4.1.2", "des": "Object to configure a CREATE TABLE specification.", "code": "public class CreateTableSpecification extends TableSpecification<CreateTableSpecification> {\n\tstatic CreateTableSpecification createTable(com.datastax.oss.driver.api.core.CqlIdentifier tableName); // Entry point into the CreateTableSpecification's fluent API given tableName to create a table.\n\tstatic CreateTableSpecification createTable(String tableName); // Entry point into the CreateTableSpecification's fluent API given tableName to create a table.\n\tboolean getIfNotExists();\n\tCreateTableSpecification ifNotExists(); // Causes the inclusion of an IF NOT EXISTS clause.\n\tCreateTableSpecification ifNotExists(boolean ifNotExists); // Toggles the inclusion of an IF NOT EXISTS clause.\n\tCreateTableSpecification with(String name, Object value, boolean escape, boolean quote); // Adds the given option by name to this table's options.\n\tCreateTableSpecification with(TableOption option); // Convenience method that calls with(option, null).\n\tCreateTableSpecification with(TableOption option, Object value); // Sets the given table option.\n}"}
{"index": 1387, "repo": "nutch-2.4", "des": "SubCollection represents a subset of index, you can define url patterns that will indicate that particular page (url) is part of SubCollection.", "code": "Class Subcollection {\n\tjava.lang.String filter(java.lang.String urlString); // Simple \"indexOf\" currentFilter for matching patterns.\n\tjava.lang.String getBlackListString(); // Returns blacklist String\n\tjava.lang.String getId();\n\tjava.lang.String getName();\n\tjava.util.ArrayList<java.lang.String> getWhiteList(); // Returns whitelist\n\tjava.lang.String getWhiteListString(); // Returns whitelist String\n\tvoid initialize(org.w3c.dom.Element collection); // Initialize Subcollection from dom element\n\tprotected void parseList(java.util.ArrayList<java.lang.String> list, java.lang.String text); // Create a list of patterns from chunk of text, patterns are separated with newline\n\tvoid setBlackList(java.lang.String list); // Set contents of blacklist from String\n\tvoid setWhiteList(java.util.ArrayList<java.lang.String> whiteList);\n\tvoid setWhiteList(java.lang.String list); // Set contents of whitelist from String\n}"}
{"index": 5006, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that returns true if the input is the same object as the one stored in this predicate.", "code": "Class IdentityPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning true if the input object is identical to the stored object.\n\tstatic Predicate getInstance(Object object); // Factory to create the identity predicate.\n\tObject getValue(); // Gets the value.\n}"}
{"index": 13039, "repo": "spring-aop-6.0.11", "des": "Metadata for an AspectJ aspect class, with an additional Spring AOP pointcut for the per clause.", "code": "public class AspectMetadata extends Object implements Serializable {\n\tAjType<?> getAjType(); // Return AspectJ reflection information.\n\tClass<?> getAspectClass(); // Return the aspect class.\n\tString getAspectName(); // Return the aspect name.\n\tPointcut getPerClausePointcut(); // Return a Spring pointcut expression for a singleton aspect.\n\tboolean isLazilyInstantiated(); // Return whether the aspect needs to be lazily instantiated.\n\tboolean isPerThisOrPerTarget(); // Return whether the aspect is defined as \"perthis\" or \"pertarget\".\n\tboolean isPerTypeWithin(); // Return whether the aspect is defined as \"pertypewithin\".\n}"}
{"index": 14318, "repo": "wicket-core-10.0.0-M1", "des": "Default implementation of ILabelProvider.", "code": "public abstract class LabeledWebMarkupContainer extends WebMarkupContainer implements ILabelProvider<String> {\n\tIModel<String> getLabel(); // The value will be made available to the validator property by means of ${label}.\n\tprotected void onDetach(); // Called to allow a component to detach resources after use.\n\tLabeledWebMarkupContainer setLabel(IModel<String> labelModel); // Provide internal setter.\n}"}
{"index": 4210, "repo": "jackson-core-2.15.2", "des": "Base class for all Jackson-produced checked exceptions.", "code": "Class JacksonException {\n\tabstract JsonLocation getLocation(); // Accessor for location information related to position within input or output (depending on operation), if available; if not available may return null.\n\tabstract String getOriginalMessage(); // Method that allows accessing the original \"message\" argument, without additional decorations (like location information) that overridden Throwable.getMessage() adds.\n\tabstract Object getProcessor(); // Method that allows accessing underlying processor that triggered this exception; typically either JsonParser or JsonGenerator for exceptions that originate from streaming API, but may be other types when thrown by databinding.\n}"}
{"index": 11148, "repo": "tribuo-core-4.3.1", "des": "Same as a RealInfo, but with an additional int id field.", "code": "public class RealIDInfo extends RealInfo implements VariableIDInfo {\n\tRealIDInfo copy(); // Returns a copy of this variable info.\n\tstatic RealIDInfo deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tboolean equals(Object o);\n\tint getID(); // The id number associated with this variable.\n\tRealIDInfo makeIDInfo(int id); // Generates a VariableIDInfo subclass which represents the same feature.\n\tRealIDInfo rename(String newName); // Rename generates a fresh VariableInfo with the new name.\n}"}
{"index": 9165, "repo": "hbase-server-3.0.0-alpha-4", "des": "Utility class that lets us keep track of the edit with it's key.", "code": "Class WAL.Entry {\n\tWALEdit getEdit(); // Gets the edit\n\tWALKeyImpl getKey(); // Gets the key\n}"}
{"index": 5720, "repo": "freemarker-2.3.32", "des": "A special case of BeanModel that adds implementation for TemplateMethodModelEx on map objects that is a shortcut for the Map.", "code": "Class MapModel {\n\tjava.lang.Object exec(java.util.List arguments); // The first argument is used as a key to call the map's get method.\n\tprotected TemplateModel invokeGenericGet(java.util.Map keyMap, java.lang.Class clazz, java.lang.String key); // Overridden to invoke the generic get method by casting to Map instead of through reflection - should yield better performance.\n\tboolean isEmpty(); // Tells whether the model is empty.\n\tprotected java.util.Set keySet(); // Helper method to support TemplateHashModelEx.\n\tint size();\n}"}
{"index": 17273, "repo": "groovy-4.0.13", "des": "A closure signature hint class is always used in conjunction with the ClosureParams annotation.", "code": "public abstract class ClosureSignatureHint extends Object {\n\tprotected ClassNode findClassNode(SourceUnit sourceUnit, CompilationUnit compilationUnit, String className); // Produces a ClassNode given a string representing the type.\n\tabstract List<ClassNode[]> getClosureSignatures(MethodNode node, SourceUnit sourceUnit, CompilationUnit compilationUnit, String[] options, ASTNode usage); // Subclasses should implement this method, which returns the list of accepted closure signatures.\n\tstatic ClassNode pickGenericType(ClassNode type, int gtIndex); // A helper method which will extract the n-th generic type from a class node.\n\tstatic ClassNode pickGenericType(MethodNode node, int parameterIndex, int gtIndex); // A helper method which will extract the n-th generic type from the n-th parameter of a method node.\n}"}
{"index": 18780, "repo": "lucene-core-9.7.0", "des": "Implementation of the DocIdSet interface on top of a BitSet.", "code": "Class BitDocIdSet {\n\tBitSet bits(); // Optionally provides a Bits interface for random access to matching documents.\n\tDocIdSetIterator iterator(); // Provides a DocIdSetIterator to access the set.\n\tlong ramBytesUsed(); // Return the memory usage of this object in bytes.\n}"}
{"index": 11954, "repo": "maven-core-4.0.0-alpha-7", "des": "Collects the output of the project builder.", "code": "public interface ProjectBuildingResult {\n\tDependencyResolutionResult getDependencyResolutionResult(); // Gets the result of the dependency resolution for the project.\n\tFile getPomFile(); // Gets the POM file from which the project was built.\n\tList<ModelProblem> getProblems(); // Gets the problems that were encountered during the project building.\n\tMavenProject getProject(); // Gets the project that was built.\n\tString getProjectId(); // Gets the identifier of the project that could not be built.\n}"}
{"index": 17946, "repo": "spring-web-6.0.11", "des": "ServletRequestBindingException subclass that indicates an unsatisfied parameter condition, as typically expressed using an @RequestMapping annotation at the @Controller type level.", "code": "public class UnsatisfiedServletRequestParameterException extends ServletRequestBindingException {\n\tfinal Map<String,String[]> getActualParams(); // Return the actual parameter Map associated with the ServletRequest.\n\tString getMessage();\n\tfinal List<String[]> getParamConditionGroups(); // Return all parameter condition groups that have been violated.\n\tfinal String[] getParamConditions(); // Return the parameter conditions that have been violated or the first group in case of multiple groups.\n}"}
{"index": 6945, "repo": "calcite-core-1.34.0", "des": "Parameter type-checking strategy type must be a literal (whether null is allowed is determined by the constructor).", "code": "Class LiteralOperandTypeChecker {\n\tboolean checkSingleOperandType(SqlCallBinding callBinding, SqlNode node, int iFormalOperand, boolean throwOnFailure); // Checks the type of a single operand against a particular ordinal position within a formal operator signature.\n\tString getAllowedSignatures(SqlOperator op, String opName); // Returns a string describing the allowed formal signatures of a call, e.g.\n}"}
{"index": 702, "repo": "ignite-core-2.15.0", "des": "Grid cache count down latch ('Ex' stands for external).", "code": "Interface GridCacheCountDownLatchEx {\n\tGridCacheInternalKey key(); // Get current count down latch key.\n\tvoid onUpdate(int cnt); // Callback to notify latch on changes.\n}"}
{"index": 18043, "repo": "spring-ws-core-4.0.5", "des": "Represents a set of Message Addressing Properties, as defined in the WS-Addressing specification.", "code": "public final class MessageAddressingProperties extends Object implements Serializable {\n\tURI getAction(); // Returns the value of the action property.\n\tEndpointReference getFaultTo(); // Returns the value of the fault endpoint property.\n\tEndpointReference getFrom(); // Returns the value of the source endpoint property.\n\tURI getMessageId(); // Returns the value of the message id property.\n\tList<Node> getReferenceParameters(); // Returns the endpoint parameters.\n\tList<Node> getReferenceProperties(); // Returns the endpoint properties.\n\tURI getRelatesTo(); // Returns the value of the relationship property.\n\tMessageAddressingProperties getReplyProperties(EndpointReference epr, URI action, URI messageId); // Creates a MessageAddressingProperties that can be used for creating a reply to the given EndpointReference.\n\tEndpointReference getReplyTo(); // Returns the value of the reply endpoint property.\n\tURI getTo(); // Returns the value of the destination property.\n}"}
{"index": 12312, "repo": "jena-core-4.9.0", "des": "Class to get the information back after content is validated.", "code": "public class ValidatedInfo extends Object implements XSValue {\n\tvoid copyFrom(XSValue o);\n\tObject getActualValue(); // The actual value.\n\tshort getActualValueType(); // The actual value built-in datatype, e.g.\n\tShortList getListValueTypes(); // In the case the actual value represents a list, i.e.\n\tXSSimpleTypeDefinition getMemberTypeDefinition(); // If the declared simple type definition is a union, return the member type actually used to validate the value.\n\tXSObjectList getMemberTypeDefinitions(); // If getTypeDefinition() returns a list type whose item type is a union type, then this method returns a list with the same length as the value list, for simple types that actually validated the corresponding item in the value.\n\tString getNormalizedValue(); // The schema normalized value.\n\tXSSimpleTypeDefinition getTypeDefinition(); // The declared simple type definition used to validate this value.\n\tstatic boolean isComparable(ValidatedInfo info1, ValidatedInfo info2); // Returns true if the two ValidatedInfo objects can be compared in the same value space.\n\tvoid reset(); // reset the state of this object\n\tString stringValue(); // Return a string representation of the value.\n}"}
{"index": 7379, "repo": "mahout-math-0.13.0", "des": "Utility methods for working with log-likelihood.", "code": "Class LogLikelihood {\n\tstatic <T> List<LogLikelihood.ScoredItem<T>> compareFrequencies(com.google.common.collect.Multiset<T> a, com.google.common.collect.Multiset<T> b, int maxReturn, double threshold); // Compares two sets of counts to see which items are interestingly over-represented in the first set.\n\tstatic double entropy(long... elements); // Calculates the unnormalized Shannon entropy.\n\tstatic double logLikelihoodRatio(long k11, long k12, long k21, long k22); // Calculates the Raw Log-likelihood ratio for two events, call them A and B.\n\tstatic double rootLogLikelihoodRatio(long k11, long k12, long k21, long k22); // Calculates the root log-likelihood ratio for two events.\n}"}
{"index": 5443, "repo": "druid-processing-26.0.0", "des": "A DimensionSelector decorator that directly exposes the underlying dictionary id in getRow(), saving expression computation until lookupName(int) is called.", "code": "Class SingleStringInputDeferredEvaluationExpressionDimensionSelector {\n\tClass classOfObject();\n\tObject getObject();\n\tIndexedInts getRow(); // Get the underlying selector IndexedInts row\n\tint getValueCardinality(); // Value cardinality is the cardinality of the different occurring values.\n\tIdLookup idLookup(); // Returns IdLookup if available for this DimensionSelector, or null.\n\tvoid inspectRuntimeShape(RuntimeShapeInspector inspector); // Implementations of this method should call inspector.visit() with all fields of this class, which meet two conditions: 1.\n\tString lookupName(int id); // Returns the value for a particular dictionary id as a Java String.\n\tValueMatcher makeValueMatcher(com.google.common.base.Predicate<String> predicate);\n\tValueMatcher makeValueMatcher(String value);\n\tboolean nameLookupPossibleInAdvance(); // Returns true if it is possible to DimensionDictionarySelector.lookupName(int) by ids from 0 to DimensionDictionarySelector.getValueCardinality() before the rows with those ids are returned.\n}"}
{"index": 18437, "repo": "opencms-core-15.0", "des": "Data holder for a base name and locale of a message bundle.", "code": "Class CmsVfsBundleManager.NameAndLocale {\n\tjava.util.Locale getLocale(); // Gets the locale.\n\tjava.lang.String getName(); // Gets the base name.\n}"}
{"index": 12354, "repo": "spring-cloud-config-server-3.1.8", "des": "A CredentialsProvider factory for Git repositories.", "code": "public class GitCredentialsProviderFactory extends Object {\n\torg.eclipse.jgit.transport.CredentialsProvider createFor(String uri, String username, String password, String passphrase); // Deprecated. in favour of createFor(String, String, String, String, boolean)\n\torg.eclipse.jgit.transport.CredentialsProvider createFor(String uri, String username, String password, String passphrase, boolean skipSslValidation); // Search for a credential provider that will handle the specified URI.\n\tboolean isAwsCodeCommitEnabled();\n\tvoid setAwsCodeCommitEnabled(boolean awsCodeCommitEnabled);\n}"}
{"index": 8527, "repo": "commons-io-2.13.0", "des": "An IOException based on a list of Throwable causes.", "code": "Class IOExceptionList {\n\tstatic void checkEmpty(List<? extends Throwable> causeList, Object message); // Throws this exception if the list is not null or empty.\n\t<T extends Throwable>T getCause(int index); // Gets the cause exception at the given index.\n\t<T extends Throwable>T getCause(int index, Class<T> clazz); // Gets the cause exception at the given index.\n\t<T extends Throwable>List<T> getCauseList(); // Gets the cause list.\n\t<T extends Throwable>List<T> getCauseList(Class<T> clazz); // Works around Throwable and Generics, may fail at runtime depending on the argument value.\n\tIterator<Throwable> iterator();\n}"}
{"index": 17707, "repo": "spring-web-6.0.11", "des": "Default implementation of the MultipartHttpServletRequest interface.", "code": "public class DefaultMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest {\n\tString getMultipartContentType(String paramOrFileName); // Determine the content type of the specified request part.\n\tHttpHeaders getMultipartHeaders(String paramOrFileName); // Return the headers for the specified part of the multipart request.\n\tprotected Map<String,String> getMultipartParameterContentTypes(); // Obtain the multipart parameter content type Map for retrieval, lazily initializing it if necessary.\n\tprotected Map<String,String[]> getMultipartParameters(); // Obtain the multipart parameter Map for retrieval, lazily initializing it if necessary.\n\tString getParameter(String name);\n\tMap<String,String[]> getParameterMap();\n\tEnumeration<String> getParameterNames();\n\tString[] getParameterValues(String name);\n\tprotected final void setMultipartParameterContentTypes(Map<String,String> multipartParameterContentTypes); // Set a Map with parameter names as keys and content type Strings as values.\n\tprotected final void setMultipartParameters(Map<String,String[]> multipartParameters); // Set a Map with parameter names as keys and String array objects as values.\n}"}
{"index": 8217, "repo": "spring-ws-3.0.10.RELEASE", "des": "Spring factory bean for an array of KeyManagers.", "code": "Class KeyManagersFactoryBean {\n\tvoid afterPropertiesSet();\n\tKeyManager[] getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setAlgorithm(String algorithm); // Sets the algorithm of the KeyManager to use.\n\tvoid setKeyStore(KeyStore keyStore); // Sets the source of key material.\n\tvoid setPassword(String password); // Sets the password to use for integrity checking.\n\tvoid setProvider(String provider); // Sets the provider of the key manager to use.\n}"}
{"index": 18521, "repo": "hibernate-core-5.6.15.Final", "des": "Contract for source information pertaining to a physical column definition specific to a particular attribute context.", "code": "Interface ColumnSource {\n\tjava.lang.String getCheckCondition(); // Obtain the specified check constraint condition\n\tjava.lang.String getComment(); // Obtain the specified SQL comment\n\tJdbcDataType getDatatype(); // The deduced (and dialect convertible) type for this column\n\tjava.lang.String getDefaultValue(); // Obtain a specified default value for the column\n\tjava.util.Set<java.lang.String> getIndexConstraintNames();\n\tjava.lang.String getName(); // Obtain the name of the column.\n\tjava.lang.String getReadFragment(); // A SQL fragment to apply to the column value on read.\n\tSizeSource getSizeSource(); // Obtain the source for the specified column size.\n\tjava.lang.String getSqlType(); // Obtain the free-hand definition of the column's type.\n\tjava.util.Set<java.lang.String> getUniqueKeyConstraintNames();\n\tjava.lang.String getWriteFragment(); // A SQL fragment to apply to the column value on write.\n\tTruthValue isNullable(); // Is this column nullable?\n\tboolean isUnique(); // Is this column unique?\n}"}
{"index": 11353, "repo": "spring-context-6.0.11", "des": "Interface to be implemented by types that determine which @Configuration class(es) should be imported based on a given selection criteria, usually one or more annotation attributes.", "code": "public interface ImportSelector {\n\tdefault Predicate<String> getExclusionFilter(); // Return a predicate for excluding classes from the import candidates, to be transitively applied to all classes found through this selector's imports.\n\tString[] selectImports(org.springframework.core.type.AnnotationMetadata importingClassMetadata); // Select and return the names of which class(es) should be imported based on the AnnotationMetadata of the importing @Configuration class.\n}"}
{"index": 1734, "repo": "kafka-clients-3.5.0", "des": "Represents whether an ACL grants or denies permissions.", "code": "Enum AclPermissionType {\n\tbyte code(); // Return the code of this permission type.\n\tstatic AclPermissionType fromCode(byte code); // Return the AclPermissionType with the provided code or `AclPermissionType.UNKNOWN` if one cannot be found.\n\tstatic AclPermissionType fromString(String str); // Parse the given string as an ACL permission.\n\tboolean isUnknown(); // Return true if this permission type is UNKNOWN.\n\tstatic AclPermissionType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AclPermissionType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8346, "repo": "spring-ws-3.0.10.RELEASE", "des": "Spring FactoryBean for XPathExpression object.", "code": "Class XPathExpressionFactoryBean {\n\tvoid afterPropertiesSet();\n\tXPathExpression getObject();\n\tClass<? extends XPathExpression> getObjectType();\n\tboolean isSingleton();\n\tvoid setExpression(String expression); // Sets the XPath expression.\n\tvoid setNamespaces(Map<String,String> namespaces); // Sets the namespaces for the expressions.\n}"}
{"index": 8065, "repo": "commons-compress-1.23.0", "des": "Helper class for compression algorithms that use the ideas of LZ77.", "code": "Class LZ77Compressor {\n\tvoid compress(byte[] data); // Feeds bytes into the compressor which in turn may emit zero or more blocks to the callback during the execution of this method.\n\tvoid compress(byte[] data, int off, int len); // Feeds bytes into the compressor which in turn may emit zero or more blocks to the callback during the execution of this method.\n\tvoid finish(); // Tells the compressor to process all remaining data and signal end of data to the callback.\n\tvoid prefill(byte[] data); // Adds some initial data to fill the window with.\n}"}
{"index": 4679, "repo": "commons-geometry-core-1.0", "des": "Class used to compute the point on the region's boundary that is closest to a target point.", "code": "Class AbstractRegionBSPTree.BoundaryProjector<P extends Point<P>,N extends AbstractRegionBSPTree.AbstractRegionNode<P,N>> {\n\tprotected P disambiguateClosestPoint(P target, P a, P b); // Method used to determine which of points a and b should be considered as the \"closest\" point to target when the points are exactly equidistant.\n\tP getProjected(); // Get the projected point on the region's boundary, or null if no point could be found.\n\tprotected boolean isPossibleClosestCut(HyperplaneSubset<P> cut, P target, double currentMinDist); // Return true if the given node cut is a possible candidate for containing the closest region boundary point to the target.\n\tBSPTreeVisitor.Result visit(N node); // Visit a node in a BSP tree.\n}"}
{"index": 2637, "repo": "mahout-core-14.1", "des": "Open hash map from byte keys to int values.", "code": "Class OpenByteIntHashMap {\n\tint adjustOrPutValue(byte key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(byte key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ByteProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ByteIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(byte key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(byte key);\n\tprotected int indexOfKey(byte key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenByteIntHashMap.MapElement> iterator();\n\tvoid keys(ByteArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ByteIntProcedure condition, ByteArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(byte key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(byte key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 3254, "repo": "hbase-common-3.0.0-alpha-4", "des": "This class is a wrapper for the implementation of com.", "code": "Class JVM {\n\tlong getFreeMemory(); // Return the physical free memory (not the JVM one, as it's not very useful as it depends on the GC), but the one from the OS as it allows a little bit more to guess if the machine is overloaded or not).\n\tstatic int getJVMSpecVersion();\n\tlong getMaxFileDescriptorCount(); // Get the number of the maximum file descriptors the system can use.\n\tint getNumberOfRunningProcess(); // Workaround to get the current number of process running.\n\tlong getOpenFileDescriptorCount(); // Get the number of opened filed descriptor for the runtime jvm.\n\tdouble getSystemLoadAverage(); // Get the system load average\n\tstatic boolean isAarch64(); // Check if the arch is aarch64;\n\tstatic boolean isAmd64(); // Check if the arch is amd64;\n\tstatic boolean isGZIPOutputStreamFinishBroken(); // Check if the finish() method of GZIPOutputStream is broken\n\tstatic boolean isLinux(); // Check if the OS is linux.\n\tstatic boolean isUnix(); // Check if the OS is unix.\n}"}
{"index": 16517, "repo": "spring-batch-infrastructure-5.0.2", "des": "Helper class for policies that need to count the number of occurrences of some event (e.g.", "code": "public class RepeatContextCounter extends Object {\n\tint getCount();\n\tfinal void increment(); // Increment by 1.\n\tfinal void increment(int delta); // Increment the counter.\n}"}
{"index": 15877, "repo": "camel-api-4.0.0-RC1", "des": "A Service which has all the lifecycle events and offers details about its current state.", "code": "public interface StatefulService extends SuspendableService, ShutdownableService {\n\tServiceStatus getStatus(); // Returns the current status\n\tboolean isRunAllowed(); // Helper methods so the service knows if it should keep running.\n\tboolean isStarted(); // Whether the service is started\n\tboolean isStarting(); // Whether the service is starting\n\tboolean isStopped(); // Whether the service is stopped\n\tboolean isStopping(); // Whether the service is stopping\n\tboolean isSuspending(); // Whether the service is suspending\n}"}
{"index": 15000, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Configurer for OpenID Connect 1.0 support.", "code": "public final class OidcConfigurer extends Object {\n\tOidcConfigurer clientRegistrationEndpoint(org.springframework.security.config.Customizer<OidcClientRegistrationEndpointConfigurer> clientRegistrationEndpointCustomizer); // Configures the OpenID Connect Dynamic Client Registration 1.0 Endpoint.\n\tprotected final org.springframework.security.config.annotation.ObjectPostProcessor<Object> getObjectPostProcessor();\n\tOidcConfigurer logoutEndpoint(org.springframework.security.config.Customizer<OidcLogoutEndpointConfigurer> logoutEndpointCustomizer); // Configures the OpenID Connect 1.0 RP-Initiated Logout Endpoint.\n\tprotected final <T> T postProcess(T object);\n\tOidcConfigurer providerConfigurationEndpoint(org.springframework.security.config.Customizer<OidcProviderConfigurationEndpointConfigurer> providerConfigurationEndpointCustomizer); // Configures the OpenID Connect 1.0 Provider Configuration Endpoint.\n\tOidcConfigurer userInfoEndpoint(org.springframework.security.config.Customizer<OidcUserInfoEndpointConfigurer> userInfoEndpointCustomizer); // Configures the OpenID Connect 1.0 UserInfo Endpoint.\n}"}
{"index": 13029, "repo": "spring-aop-6.0.11", "des": "Spring AOP advice wrapping an AspectJ after-returning advice method.", "code": "public class AspectJAfterReturningAdvice extends AbstractAspectJAdvice implements AfterReturningAdvice, AfterAdvice, Serializable {\n\tvoid afterReturning(Object returnValue, Method method, Object[] args, Object target); // Callback after a given method successfully returned.\n\tboolean isAfterAdvice(); // Return whether this is an after advice.\n\tboolean isBeforeAdvice(); // Return whether this is a before advice.\n\tvoid setReturningName(String name);\n}"}
{"index": 10006, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Base application master implementation which handles a simple life-cycle scenario of; allocate, launch, monitor.", "code": "Class AbstractProcessingAppmaster {\n\tprotected void onContainerAllocated(Container container); // Called when container has been allocated.\n\tprotected void onContainerCompleted(ContainerStatus status); // Called when container has been completed.\n\tprotected void onInit(); // Global application master instance specific ApplicationAttemptId is build during this init method.\n\tContainerLaunchContext preLaunch(Container container, ContainerLaunchContext context); // Invoked before the ContainerLaunchContext is used to launch the container.\n}"}
{"index": 461, "repo": "phoenix-core-5.1.3", "des": "Executes upsert statements on a provided PreparedStatement based on incoming RECORDS.", "code": "Class UpsertExecutor<RECORD,FIELD> {\n\tvoid close();\n\tprotected abstract org.apache.phoenix.thirdparty.com.google.common.base.Function<FIELD,Object> createConversionFunction(PDataType dataType);\n\tvoid execute(Iterable<RECORD> records); // Execute upserts for each JSON record contained in the given iterable, notifying this instance's UpsertListener for each completed upsert.\n\tprotected abstract void execute(RECORD record); // Upsert a single record.\n\tprotected void finishInit(); // Awkward protocol allows subclass constructors to finish initializing context before proceeding to record processing.\n}"}
{"index": 11721, "repo": "spring-data-neo4j-7.1.2", "des": "You need to provide an implementation of this interface in case you want to store a property of an entity as separate properties on a node.", "code": "@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentPropertyToMapConverter<K,P> {\n\tP compose(Map<K,org.neo4j.driver.Value> source, Neo4jConversionService neo4jConversionService); // Composes the object back from the map.\n\tMap<K,org.neo4j.driver.Value> decompose(P property, Neo4jConversionService neo4jConversionService); // Decomposes an object into a map.\n}"}
{"index": 2567, "repo": "exoplayer-r2.3.1", "des": "A BaseMediaChunk for chunks consisting of a single raw sample.", "code": "Class SingleSampleMediaChunk {\n\tlong bytesLoaded(); // Returns the number of bytes that have been loaded.\n\tvoid cancelLoad(); // Cancels the load.\n\tboolean isLoadCanceled(); // Returns whether the load has been canceled.\n\tboolean isLoadCompleted(); // Returns whether the chunk has been fully loaded.\n\tvoid load(); // Performs the load, returning on completion or cancellation.\n}"}
{"index": 12063, "repo": "jena-core-4.9.0", "des": "Rule engines implement the internals of forward rule inference graphs and the forward part of hybrid graphs.", "code": "public interface FRuleEngineI {\n\tvoid add(Triple t); // Add one triple to the data graph, run any rules triggered by the new data item, recursively adding any generated triples.\n\tboolean delete(Triple t); // Remove one triple to the data graph.\n\tvoid fastInit(Finder inserts); // Process all available data.\n\tlong getNRulesFired(); // Return the number of rules fired since this rule engine instance was created and initialized\n\tObject getRuleStore(); // Access the precomputed internal rule form.\n\tvoid init(boolean ignoreBrules, Finder inserts); // Process all available data.\n\tvoid setDerivationLogging(boolean recordDerivations); // Set to true to enable derivation caching\n\tvoid setRuleStore(Object ruleStore); // Set the internal rule from a precomputed state.\n\tboolean shouldTrace(); // Return true if the internal engine state means that tracing is worthwhile.\n}"}
{"index": 2642, "repo": "mahout-core-14.1", "des": "Open hash map from char keys to double values.", "code": "Class OpenCharDoubleHashMap {\n\tdouble adjustOrPutValue(char key, double newValue, double incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(char key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(double value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(CharProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(CharDoubleProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tdouble get(char key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(char key);\n\tprotected int indexOfKey(char key);\n\tprotected int indexOfValue(double value);\n\tIterator<OpenCharDoubleHashMap.MapElement> iterator();\n\tvoid keys(CharArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(CharDoubleProcedure condition, CharArrayList keyList, DoubleArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(char key, double value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(char key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(DoubleArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 13232, "repo": "spring-test-6.0.11", "des": "A builder that adds a body to the request.", "code": "public static interface MockServerHttpRequest.BodyBuilder extends MockServerHttpRequest.BaseBuilder<MockServerHttpRequest.BodyBuilder> {\n\tMockServerHttpRequest body(String body); // Set the body of the request and build it.\n\tMockServerHttpRequest body(Publisher<? extends org.springframework.core.io.buffer.DataBuffer> body); // Set the body of the request and build it.\n\tMockServerHttpRequest.BodyBuilder contentLength(long contentLength); // Set the length of the body in bytes, as specified by the Content-Length header.\n\tMockServerHttpRequest.BodyBuilder contentType(org.springframework.http.MediaType contentType); // Set the media type of the body, as specified by the Content-Type header.\n}"}
{"index": 17770, "repo": "spring-web-6.0.11", "des": "Response extractor that uses the given entity converters to convert the response into a type T.", "code": "public class HttpMessageConverterExtractor<T> extends Object implements ResponseExtractor<T> {\n\tT extractData(ClientHttpResponse response); // Extract data from the given ClientHttpResponse and return it.\n\tprotected MediaType getContentType(ClientHttpResponse response); // Determine the Content-Type of the response based on the \"Content-Type\" header or otherwise default to MediaType.APPLICATION_OCTET_STREAM.\n}"}
{"index": 12481, "repo": "spring-jdbc-6.0.11", "des": "Abstract implementation of the InterruptibleBatchPreparedStatementSetter interface, combining the check for available values and setting of those into a single callback method AbstractInterruptibleBatchPreparedStatementSetter.setValuesIfAvailable(java.sql.PreparedStatement, int).", "code": "public abstract class AbstractInterruptibleBatchPreparedStatementSetter extends Object implements InterruptibleBatchPreparedStatementSetter {\n\tint getBatchSize(); // This implementation returns Integer.MAX_VALUE.\n\tfinal boolean isBatchExhausted(int i); // This implementation return this instance's current exhaustion flag.\n\tfinal void setValues(PreparedStatement ps, int i); // This implementation calls setValuesIfAvailable(java.sql.PreparedStatement, int) and sets this instance's exhaustion flag accordingly.\n\tprotected abstract boolean setValuesIfAvailable(PreparedStatement ps, int i); // Check for available values and set them on the given PreparedStatement.\n}"}
{"index": 13721, "repo": "spring-webmvc-6.0.11", "des": "A logical conjunction (' && ') request condition that matches a request against a set of header expressions with syntax defined in RequestMapping.headers().", "code": "public final class HeadersRequestCondition extends AbstractRequestCondition<HeadersRequestCondition> {\n\tHeadersRequestCondition combine(HeadersRequestCondition other); // Returns a new instance with the union of the header expressions from \"this\" and the \"other\" instance.\n\tint compareTo(HeadersRequestCondition other, HttpServletRequest request); // Compare to another condition based on header expressions.\n\tprotected Collection<org.springframework.web.servlet.mvc.condition.HeadersRequestCondition.HeaderExpression> getContent(); // Return the discrete items a request condition is composed of.\n\tSet<NameValueExpression<String>> getExpressions(); // Return the contained request header expressions.\n\tHeadersRequestCondition getMatchingCondition(HttpServletRequest request); // Returns \"this\" instance if the request matches all expressions; or null otherwise.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n}"}
{"index": 11740, "repo": "bedrock-core-7.0.2", "des": "A Cached object is a specialized Deferred that holds a reference to (ie: caches) an object that was successfully returned by another Deferred.", "code": "public class Cached<T> extends Object implements Deferred<T> {\n\tT get(); // Attempts to obtain the underlying object.\n\tDeferred<T> getDeferred(); // Obtains the adapted Deferred.\n\tClass<T> getDeferredClass(); // Obtains the Class of the Deferred reference.\n\tT release(); // Release the currently cached object.\n}"}
{"index": 8756, "repo": "hadoop-yarn-common-3.3.6", "des": "Interface class to obtain process resource usage NOTE: This class should not be used by external users, but only by external developers to extend and include their own process-tree implementation, especially for platforms other than Linux and Windows.", "code": "Class ResourceCalculatorProcessTree {\n\tabstract boolean checkPidPgrpidForMatch(); // Verify that the tree process id is same as its process group id.\n\tfloat getCpuUsagePercent(); // Get the CPU usage by all the processes in the process-tree based on average between samples as a ratio of overall CPU cycles similar to top.\n\tlong getCumulativeCpuTime(); // Get the CPU time in millisecond used by all the processes in the process-tree since the process-tree was created\n\tabstract String getProcessTreeDump(); // Get a dump of the process-tree.\n\tstatic ResourceCalculatorProcessTree getResourceCalculatorProcessTree(String pid, Class<? extends ResourceCalculatorProcessTree> clazz, org.apache.hadoop.conf.Configuration conf); // Create the ResourceCalculatorProcessTree rooted to specified process from the class name and configure it.\n\tlong getRssMemorySize(); // Get the resident set size (rss) memory used by all the processes in the process-tree.\n\tlong getRssMemorySize(int olderThanAge); // Get the resident set size (rss) memory used by all the processes in the process-tree that are older than the passed in age.\n\tlong getVirtualMemorySize(); // Get the virtual memory used by all the processes in the process-tree.\n\tlong getVirtualMemorySize(int olderThanAge); // Get the virtual memory used by all the processes in the process-tree that are older than the passed in age.\n\tvoid initialize(); // Initialize the object.\n\tabstract void updateProcessTree(); // Update the process-tree with latest state.\n}"}
{"index": 2941, "repo": "tink-1.10.0", "des": "Streaming encryption using AES-GCM with HKDF as key derivation function.", "code": "Class AesGcmHkdfStreaming {\n\tlong expectedCiphertextSize(long plaintextSize); // Returns the expected size of the ciphertext for a given plaintext.\n\tint getCiphertextOffset();\n\tint getCiphertextOverhead();\n\tint getCiphertextSegmentSize();\n\tint getFirstSegmentOffset();\n\tint getHeaderLength();\n\tint getPlaintextSegmentSize();\n\tReadableByteChannel newDecryptingChannel(ReadableByteChannel ciphertextChannel, byte[] associatedData);\n\tInputStream newDecryptingStream(InputStream ciphertextStream, byte[] associatedData); // Returns a wrapper around ciphertextSource, such that any read-operation via the wrapper results in AEAD-decryption of the underlying ciphertext, using associatedData as associated authenticated data.\n\tWritableByteChannel newEncryptingChannel(WritableByteChannel ciphertextChannel, byte[] associatedData); // Returns a WritableByteChannel for plaintext.\n\tOutputStream newEncryptingStream(OutputStream ciphertext, byte[] associatedData); // Returns a wrapper around ciphertextDestination, such that any write-operation via the wrapper results in AEAD-encryption of the written data, using associatedData as associated authenticated data.\n\tSeekableByteChannel newSeekableDecryptingChannel(SeekableByteChannel ciphertextSource, byte[] associatedData); // Returns a SeekableByteChannel that allows to access the plaintext.\n\tcom.google.crypto.tink.subtle.AesGcmHkdfStreaming.AesGcmHkdfStreamDecrypter newStreamSegmentDecrypter();\n\tcom.google.crypto.tink.subtle.AesGcmHkdfStreaming.AesGcmHkdfStreamEncrypter newStreamSegmentEncrypter(byte[] aad);\n}"}
{"index": 14106, "repo": "wicket-core-10.0.0-M1", "des": "This listener adds Enclosures to AjaxTarget, where the child controller of the said Enclosure is already added.", "code": "public class AjaxEnclosureListener extends Object implements AjaxRequestTarget.IListener {\n\tstatic boolean isControllerOfEnclosure(Component component, Enclosure enclosure); // Check if a given component is the controlling child of a given enclosure\n\tvoid onBeforeRespond(Map<String,Component> map, AjaxRequestTarget target); // Try to find Enclosures that have their controllers added already, and add them to the target.\n}"}
{"index": 15149, "repo": "spring-data-elasticsearch-5.1.2", "des": "GeoJson representation of Point. Copied from Spring Data Mongodb, not derived from Point as this conflicts with the already existing converter for Point in GeoConverters.", "code": "public class GeoJsonPoint extends Object implements GeoJson<List<Double>> {\n\tboolean equals(Object o);\n\tList<Double> getCoordinates(); // The value of the coordinates member is always an Iterable.\n\tString getType(); // String value representing the type of the GeoJson object.\n\tdouble getX();\n\tdouble getY();\n\tstatic GeoJsonPoint of(double x, double y); // Creates GeoJsonPoint for given coordinates.\n\tstatic GeoJsonPoint of(GeoPoint geoPoint); // Creates GeoJsonPoint for given GeoPoint.\n\tstatic GeoJsonPoint of(Point point); // Creates GeoJsonPoint for given Point.\n}"}
{"index": 7551, "repo": "cassandra-all-4.1.2", "des": "The kind of clustering prefix this actually is.", "code": "Enum ClusteringPrefix.Kind {\n\tClusteringPrefix.Kind closeBoundOfBoundary(boolean reversed);\n\tstatic int compare(ClusteringPrefix.Kind k1, ClusteringPrefix.Kind k2); // Compares the 2 provided kind.\n\tClusteringPrefix.Kind invert(); // Returns the inverse of the current kind.\n\tboolean isBound();\n\tboolean isBoundary();\n\tboolean isClose(boolean reversed);\n\tboolean isEnd();\n\tboolean isOpen(boolean reversed);\n\tboolean isStart();\n\tClusteringPrefix.Kind openBoundOfBoundary(boolean reversed);\n\tstatic ClusteringPrefix.Kind valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic ClusteringPrefix.Kind[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17493, "repo": "pulsar-broker-3.0.0", "des": "Filter out unqualified Brokers, which are not entered into LoadBalancer for decision-making.", "code": "public interface BrokerFilter {\n\tMap<String,BrokerLookupData> filter(Map<String,BrokerLookupData> brokers, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit, LoadManagerContext context); // Filter out unqualified brokers based on implementation.\n\tString name(); // The broker filter name.\n}"}
{"index": 17566, "repo": "spring-ldap-core-3.1.0", "des": "Abstract superclass that may be used instead of implementing ContextMapper directly.", "code": "public abstract class AbstractContextMapper<T> extends Object implements ContextMapper<T> {\n\tprotected abstract T doMapFromContext(DirContextOperations ctx); // Map a single DirContextOperation to an object.\n\tfinal T mapFromContext(Object ctx); // Map a single LDAP Context to an object.\n}"}
{"index": 1640, "repo": "samza-api-1.8.0", "des": "Enum to denote the possible API types for a samza application.", "code": "Enum ApplicationApiType {\n\tstatic ApplicationApiType valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic ApplicationApiType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10722, "repo": "spring-tx-6.0.11", "des": "TransactionSynchronization implementation that manages a resource object bound through TransactionSynchronizationManager.", "code": "public abstract class ReactiveResourceSynchronization<O,K> extends Object implements TransactionSynchronization {\n\treactor.core.publisher.Mono<Void> afterCommit(); // Invoked after transaction commit.\n\treactor.core.publisher.Mono<Void> afterCompletion(int status); // Invoked after transaction commit/rollback.\n\treactor.core.publisher.Mono<Void> beforeCommit(boolean readOnly); // Invoked before transaction commit (before \"beforeCompletion\").\n\treactor.core.publisher.Mono<Void> beforeCompletion(); // Invoked before transaction commit/rollback.\n\tprotected reactor.core.publisher.Mono<Void> cleanupResource(O resourceHolder, K resourceKey, boolean committed); // Perform a cleanup on the given resource (which is left bound to the thread).\n\tprotected reactor.core.publisher.Mono<Void> processResourceAfterCommit(O resourceHolder); // After-commit callback for the given resource holder.\n\tprotected reactor.core.publisher.Mono<Void> releaseResource(O resourceHolder, K resourceKey); // Release the given resource (after it has been unbound from the thread).\n\treactor.core.publisher.Mono<Void> resume(); // Resume this synchronization.\n\tprotected boolean shouldReleaseAfterCompletion(O resourceHolder); // Return whether this holder's resource should be released after transaction completion (true).\n\tprotected boolean shouldReleaseBeforeCompletion(); // Return whether this holder's resource should be released before transaction completion (true) or rather after transaction completion (false).\n\tprotected boolean shouldUnbindAtCompletion(); // Return whether this holder should be unbound at completion (or should rather be left bound to the thread after the transaction).\n\treactor.core.publisher.Mono<Void> suspend(); // Suspend this synchronization.\n}"}
{"index": 5961, "repo": "commons-lang3-3.12.0", "des": "An EventListenerSupport object can be used to manage a list of event listeners of a particular type.", "code": "Class EventListenerSupport<L> {\n\tvoid addListener(L listener); // Registers an event listener.\n\tvoid addListener(L listener, boolean allowDuplicate); // Registers an event listener.\n\tstatic <T> EventListenerSupport<T> create(Class<T> listenerInterface); // Creates an EventListenerSupport object which supports the specified listener type.\n\tprotected InvocationHandler createInvocationHandler(); // Create the InvocationHandler responsible for broadcasting calls to the managed listeners.\n\tL fire(); // Returns a proxy object which can be used to call listener methods on all of the registered event listeners.\n\tL[] getListeners(); // Gets an array containing the currently registered listeners.\n\tvoid removeListener(L listener); // Unregisters an event listener.\n}"}
{"index": 6677, "repo": "artemis-odb-2.3.0", "des": "Enum used by ClassType to indicate if a class or field is annotated with Wire.", "code": "Enum WireType {\n\tstatic WireType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic WireType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13601, "repo": "spring-messaging-6.0.11", "des": "A registry of subscription by session that allows looking up subscriptions.", "code": "public interface SubscriptionRegistry {\n\torg.springframework.util.MultiValueMap<String,String> findSubscriptions(Message<?> message); // Find all subscriptions that should receive the given message.\n\tvoid registerSubscription(Message<?> subscribeMessage); // Register a subscription represented by the given message.\n\tvoid unregisterAllSubscriptions(String sessionId); // Remove all subscriptions associated with the given sessionId.\n\tvoid unregisterSubscription(Message<?> unsubscribeMessage); // Unregister a subscription.\n}"}
{"index": 13594, "repo": "spring-messaging-6.0.11", "des": "A contract for client STOMP session lifecycle events including a callback when the session is established and notifications of transport or message handling failures.", "code": "public interface StompSessionHandler extends StompFrameHandler {\n\tvoid afterConnected(StompSession session, StompHeaders connectedHeaders); // Invoked when the session is ready to use, i.e.\n\tvoid handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable exception); // Handle any exception arising while processing a STOMP frame such as a failure to convert the payload or an unhandled exception in the application StompFrameHandler.\n\tvoid handleTransportError(StompSession session, Throwable exception); // Handle a low level transport error which could be an I/O error or a failure to encode or decode a STOMP message.\n}"}
{"index": 3454, "repo": "spring-metrics-0.5.1.RELEASE", "des": "Timer intended to track of a large number of short running events.", "code": "Interface Timer {\n\tlong count(); // The number of times that record has been called since this timer was created.\n\tdefault Meter.Type getType();\n\tvoid record(long amount, java.util.concurrent.TimeUnit unit); // Updates the statistics kept by the counter with the specified amount.\n\tvoid record(java.lang.Runnable f); // Executes the runnable `f` and records the time taken.\n\t<T> T record(java.util.function.Supplier<T> f); // Executes the Supplier `f` and records the time taken.\n\t<T> T recordCallable(java.util.concurrent.Callable<T> f); // Executes the callable `f` and records the time taken.\n\tdouble totalTime(java.util.concurrent.TimeUnit unit); // The total time of all recorded events since this timer was created.\n\tdefault double totalTimeNanos(); // The total time in nanoseconds of all recorded events since this timer was created.\n\t<T> java.util.concurrent.Callable<T> wrap(java.util.concurrent.Callable<T> f); // Wrap a Callable so that it is timed when invoked.\n\tdefault java.lang.Runnable wrap(java.lang.Runnable f); // Wrap a Runnable so that it is timed when invoked.\n}"}
{"index": 1879, "repo": "hadoop-hdfs-3.3.6", "des": "This class describes a replica that has been finalized.", "code": "Class FinalizedReplica {\n\torg.apache.hadoop.hdfs.server.protocol.ReplicaRecoveryInfo createInfo();\n\tboolean equals(Object o);\n\tlong getBytesOnDisk(); // Get the number of bytes that have written to disk\n\tbyte[] getLastPartialChunkChecksum();\n\tlong getMetadataLength();\n\torg.apache.hadoop.hdfs.server.datanode.ReplicaInfo getOriginalReplica();\n\tlong getRecoveryID(); // Get the recovery id.\n\tHdfsServerConstants.ReplicaState getState(); // Get the replica state\n\tlong getVisibleLength(); // Get the number of bytes that are visible to readers\n\tvoid loadLastPartialChunkChecksum();\n\tvoid setLastPartialChunkChecksum(byte[] checksum);\n\tvoid setRecoveryID(long recoveryId); // Set the recovery id.\n}"}
{"index": 11227, "repo": "wicket-extensions-10.0.0-M1", "des": "Convenience implementation of a tree provider that can also act as a locator for a SingleSortState object.", "code": "public abstract class SortableTreeProvider<T,S> extends Object implements ISortableTreeProvider<T,S> {\n\tvoid detach();\n\tSortParam<S> getSort(); // Returns current sort state\n\tfinal ISortState<S> getSortState();\n\tvoid setSort(SortParam<S> param); // Sets the current sort state\n\tvoid setSort(S property, boolean ascending); // Sets the current sort state\n}"}
{"index": 12790, "repo": "spring-data-mongodb-4.1.2", "des": "Mapper from Example to a query Document.", "code": "public class MongoExampleMapper extends Object {\n\torg.bson.Document getMappedExample(Example<?> example); // Returns the given Example as Document holding matching values extracted from Example.getProbe().\n\torg.bson.Document getMappedExample(Example<?> example, MongoPersistentEntity<?> entity); // Returns the given Example as Document holding matching values extracted from Example.getProbe().\n}"}
{"index": 15644, "repo": "spring-security-core-6.1.2", "des": "Facade which isolates Spring Security's requirements for evaluating security expressions from the implementation of the underlying expression objects", "code": "public interface SecurityExpressionHandler<T> extends org.springframework.aop.framework.AopInfrastructureBean {\n\tdefault org.springframework.expression.EvaluationContext createEvaluationContext(Supplier<Authentication> authentication, T invocation); // Provides an evaluation context in which to evaluate security expressions for the invocation type.\n\torg.springframework.expression.EvaluationContext createEvaluationContext(Authentication authentication, T invocation); // Provides an evaluation context in which to evaluate security expressions for the invocation type.\n\torg.springframework.expression.ExpressionParser getExpressionParser();\n}"}
{"index": 16597, "repo": "spring-beans-6.0.11", "des": "AOT contribution from a BeanRegistrationAotProcessor used to register a single bean definition.", "code": "@FunctionalInterface public interface BeanRegistrationAotContribution {\n\tvoid applyTo(org.springframework.aot.generate.GenerationContext generationContext, BeanRegistrationCode beanRegistrationCode); // Apply this contribution to the given BeanRegistrationCode.\n\tdefault BeanRegistrationCodeFragments customizeBeanRegistrationCodeFragments(org.springframework.aot.generate.GenerationContext generationContext, BeanRegistrationCodeFragments codeFragments); // Customize the BeanRegistrationCodeFragments that will be used to generate the bean registration code.\n\tstatic BeanRegistrationAotContribution withCustomCodeFragments(UnaryOperator<BeanRegistrationCodeFragments> defaultCodeFragments); // Create a BeanRegistrationAotContribution that customizes the BeanRegistrationCodeFragments.\n}"}
{"index": 1337, "repo": "nutch-2.4", "des": "A collection of methods for extracting content from DOM trees.", "code": "Class DOMContentUtils {\n\tvoid getOutlinks(java.net.URL base, java.util.ArrayList<Outlink> outlinks, org.w3c.dom.Node node); // This method finds all anchors below the supplied DOM node, and creates appropriate Outlink records for each (relative to the supplied base URL), and adds them to the outlinks ArrayList.\n\tvoid getText(java.lang.StringBuffer sb, org.w3c.dom.Node node); // This is a convinience method, equivalent to getText(sb, node, false).\n\tboolean getTitle(java.lang.StringBuffer sb, org.w3c.dom.Node node); // This method takes a StringBuffer and a DOM Node, and will append the content text found beneath the first title node to the StringBuffer.\n\tvoid setConf(Configuration conf);\n}"}
{"index": 2656, "repo": "mahout-core-14.1", "des": "Open hash map from float keys to double values.", "code": "Class OpenFloatDoubleHashMap {\n\tdouble adjustOrPutValue(float key, double newValue, double incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(float key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(double value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(FloatProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(FloatDoubleProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tdouble get(float key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(float key);\n\tprotected int indexOfKey(float key);\n\tprotected int indexOfValue(double value);\n\tIterator<OpenFloatDoubleHashMap.MapElement> iterator();\n\tvoid keys(FloatArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(FloatDoubleProcedure condition, FloatArrayList keyList, DoubleArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(float key, double value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(float key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(DoubleArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 5370, "repo": "druid-processing-26.0.0", "des": "Represents an output channel for some frame processor.", "code": "Class OutputChannel {\n\tvoid convertToReadOnly(); // Removes the reference to the writableChannel and frameMemoryAllocator from the object, making it more efficient\n\tMemoryAllocator getFrameMemoryAllocator(); // Returns the memory allocator for the writable channel.\n\tint getPartitionNumber();\n\tReadableFrameChannel getReadableChannel(); // Returns the readable channel of this pair.\n\tSupplier<ReadableFrameChannel> getReadableChannelSupplier();\n\tWritableFrameChannel getWritableChannel(); // Returns the writable channel of this pair.\n\tstatic OutputChannel immediatelyReadablePair(WritableFrameChannel writableChannel, MemoryAllocator frameMemoryAllocator, ReadableFrameChannel readableChannel, int partitionNumber); // Creates an output channel pair, where the readable channel is usable before writing is complete.\n\tboolean isReadableChannelReady(); // Whether getReadableChannel() is ready to use.\n\tOutputChannel mapWritableChannel(Function<WritableFrameChannel,WritableFrameChannel> mapFn);\n\tstatic OutputChannel nil(int partitionNumber); // Create a nil output channel, representing a processor that writes nothing.\n\tstatic OutputChannel pair(WritableFrameChannel writableChannel, MemoryAllocator frameMemoryAllocator, Supplier<ReadableFrameChannel> readableChannelSupplier, int partitionNumber); // Creates an output channel pair, where the readable channel is not usable until writing is complete.\n\tOutputChannel readOnly(); // Returns a read-only version of this instance.\n\tstatic OutputChannel readOnly(ReadableFrameChannel readableChannel, int partitionNumber); // Creates a read-only output channel.\n\tstatic OutputChannel readOnly(Supplier<ReadableFrameChannel> readableChannelSupplier, int partitionNumber); // Creates a read-only output channel.\n}"}
{"index": 17600, "repo": "spring-ldap-core-3.1.0", "des": "A strategy to use when authenticating LDAP connections on creation.", "code": "public interface DirContextAuthenticationStrategy {\n\tDirContext processContextAfterCreation(DirContext ctx, String userDn, String password); // This method is responsible for post-processing the DirContext instance after it has been created.\n\tvoid setupEnvironment(Hashtable<String,Object> env, String userDn, String password); // This method is responsible for preparing the environment to be used when creating the DirContext instance.\n}"}
{"index": 3419, "repo": "nifi-api-1.22.0", "des": "Describes an event that happened to a FlowFile.", "code": "Interface ProvenanceEventRecord {\n\tString getAlternateIdentifierUri();\n\tdefault String getAttribute(String attributeName); // Returns the attribute with the given name\n\tMap<String,String> getAttributes();\n\tString getBestEventIdentifier(); // Returns the best event identifier for this event (eventId if available, descriptive identifier if not yet persisted to allow for traceability).\n\tList<String> getChildUuids();\n\tString getComponentId();\n\tString getComponentType();\n\tString getContentClaimContainer();\n\tString getContentClaimIdentifier();\n\tLong getContentClaimOffset();\n\tString getContentClaimSection();\n\tString getDetails();\n\tlong getEventDuration();\n\tlong getEventId();\n\tlong getEventTime();\n\tProvenanceEventType getEventType();\n\tlong getFileSize();\n\tlong getFlowFileEntryDate();\n\tString getFlowFileUuid();\n\tlong getLineageStartDate();\n\tList<String> getParentUuids();\n\tMap<String,String> getPreviousAttributes();\n\tString getPreviousContentClaimContainer();\n\tString getPreviousContentClaimIdentifier();\n\tLong getPreviousContentClaimOffset();\n\tString getPreviousContentClaimSection();\n\tLong getPreviousFileSize();\n\tString getRelationship();\n\tString getSourceQueueIdentifier();\n\tString getSourceSystemFlowFileIdentifier(); // Since the receiving system will usually refer to the data using a different identifier than the source system, this information is used to correlate the receive system's FlowFile with the sending system's data\n\tString getTransitUri();\n\tMap<String,String> getUpdatedAttributes();\n\tdefault boolean isRemotePortType();\n}"}
{"index": 15673, "repo": "pulsar-common-3.0.0", "des": "A collection of utilities relating to InetAddresses.", "code": "public class InetAddressUtils extends Object {\n\tstatic boolean isIPv4Address(String input); // Checks whether the parameter is a valid IPv4 address.\n\tstatic boolean isIPv4MappedIPv64Address(String input);\n\tstatic boolean isIPv6Address(String input); // Checks whether the parameter is a valid IPv6 address (including compressed).\n\tstatic boolean isIPv6HexCompressedAddress(String input); // Checks whether the parameter is a valid compressed IPv6 address.\n\tstatic boolean isIPv6StdAddress(String input); // Checks whether the parameter is a valid standard (non-compressed) IPv6 address.\n}"}
{"index": 12633, "repo": "spring-data-mongodb-4.1.2", "des": "An expression that calculates the inverse tangent of a value.", "code": "public static class ArithmeticOperators.ATan extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tstatic ArithmeticOperators.ATan atanOf(Number value); // Creates a new AggregationExpression that calculates the inverse tangent of a value.\n\tstatic ArithmeticOperators.ATan atanOf(String fieldReference); // Creates a new AggregationExpression that calculates the inverse tangent of a value.\n\tstatic ArithmeticOperators.ATan atanOf(AggregationExpression expression); // Creates a new AggregationExpression that calculates the inverse tangent of a value.\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 1325, "repo": "nutch-2.4", "des": "This class provides common methods for implementations of FetchSchedule.", "code": "Class AbstractFetchSchedule {\n\tlong calculateLastFetchTime(WebPage page); // This method return the last fetch time of the CrawlDatum\n\tvoid forceRefetch(java.lang.String url, WebPage page, boolean asap); // This method resets fetchTime, fetchInterval, modifiedTime, retriesSinceFetch and page signature, so that it forces refetching.\n\tjava.util.Set<WebPage.Field> getFields();\n\tvoid initializeSchedule(java.lang.String url, WebPage page); // Initialize fetch schedule related data.\n\tvoid setConf(Configuration conf);\n\tvoid setFetchSchedule(java.lang.String url, WebPage page, long prevFetchTime, long prevModifiedTime, long fetchTime, long modifiedTime, int state); // Sets the fetchInterval and fetchTime on a successfully fetched page.\n\tvoid setPageGoneSchedule(java.lang.String url, WebPage page, long prevFetchTime, long prevModifiedTime, long fetchTime); // This method specifies how to schedule refetching of pages marked as GONE.\n\tvoid setPageRetrySchedule(java.lang.String url, WebPage page, long prevFetchTime, long prevModifiedTime, long fetchTime); // This method adjusts the fetch schedule if fetching needs to be re-tried due to transient errors.\n\tboolean shouldFetch(java.lang.String url, WebPage page, long curTime); // This method provides information whether the page is suitable for selection in the current fetchlist.\n}"}
{"index": 16708, "repo": "spring-beans-6.0.11", "des": "Simple NamespaceHandler implementation that maps custom attributes directly through to bean properties.", "code": "public class SimplePropertyNamespaceHandler extends Object implements NamespaceHandler {\n\tBeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext); // Parse the specified Node and decorate the supplied BeanDefinitionHolder, returning the decorated definition.\n\tvoid init(); // Invoked by the DefaultBeanDefinitionDocumentReader after construction but before any custom elements are parsed.\n\tBeanDefinition parse(Element element, ParserContext parserContext); // Parse the specified Element and register any resulting BeanDefinitions with the BeanDefinitionRegistry that is embedded in the supplied ParserContext.\n}"}
{"index": 17077, "repo": "spring-integration-core-6.1.2", "des": "A ConsumerEndpointSpec implementation for a mid-flow GatewayMessageHandler.", "code": "public class GatewayEndpointSpec extends ConsumerEndpointSpec<GatewayEndpointSpec,GatewayMessageHandler> {\n\tGatewayEndpointSpec errorChannel(String errorChannel); // Set an error channel.\n\tGatewayEndpointSpec errorChannel(org.springframework.messaging.MessageChannel errorChannel); // Set an error channel.\n\tGatewayEndpointSpec replyChannel(String replyChannel); // Set a reply channel.\n\tGatewayEndpointSpec replyChannel(org.springframework.messaging.MessageChannel replyChannel); // Set a reply channel.\n\tGatewayEndpointSpec replyTimeout(Long replyTimeout); // Set a reply timeout.\n\tGatewayEndpointSpec requestTimeout(Long requestTimeout); // Set a request timeout.\n}"}
{"index": 4203, "repo": "jackson-core-2.15.2", "des": "Result object constructed by DataFormatDetector when requested to detect format of given input data.", "code": "Class DataFormatMatcher {\n\tJsonParser createParserWithMatch();\n\tInputStream getDataStream(); // Method to use for accessing input for which format detection has been done.\n\tJsonFactory getMatch(); // Accessor for JsonFactory that represents format that data matched.\n\tString getMatchedFormatName(); // Accessor for getting brief textual name of matched format if any (null if none).\n\tMatchStrength getMatchStrength(); // Method for accessing strength of the match, if any; if no match, will return MatchStrength.INCONCLUSIVE.\n\tboolean hasMatch(); // Accessor to use to see if any formats matched well enough with the input data.\n}"}
{"index": 18597, "repo": "hibernate-core-5.6.15.Final", "des": "Provides values for all options that impact the built query.", "code": "Interface QueryBuildingParameters {\n\tint getBatchSize(); // Gets the batch size.\n\tLockMode getLockMode(); // Gets the lock mode.\n\tLockOptions getLockOptions(); // Gets the lock options.\n\tLoadQueryInfluencers getQueryInfluencers(); // Provides data for options which can influence the SQL query needed to load an entity.\n}"}
{"index": 5243, "repo": "druid-processing-26.0.0", "des": "If performance of this class appears to be a bottleneck for somebody, one simple way to improve it is to split it into two different classes, one that is used when NullHandling.", "code": "Class FloatCardinalityAggregatorColumnSelectorStrategy {\n\tstatic void addFloatToCollector(HyperLogLogCollector collector, float n);\n\tvoid hashRow(BaseFloatColumnValueSelector selector, com.google.common.hash.Hasher hasher); // Retrieve the current row from dimSelector and add the row values to the hasher.\n\tvoid hashValues(BaseFloatColumnValueSelector selector, HyperLogLogCollector collector); // Retrieve the current row from dimSelector and add the row values to HyperLogLogCollector.\n}"}
{"index": 13374, "repo": "shiro-core-2.0.0-alpha-2", "des": "Interface that should be implemented by classes that can control validating sessions on a regular basis.", "code": "public interface SessionValidationScheduler {\n\tvoid disableSessionValidation(); // Disables the session validation job.\n\tvoid enableSessionValidation(); // Enables the session validation job.\n\tboolean isEnabled(); // Returns true if this Scheduler is enabled and ready to begin validation at the appropriate time, false otherwise.\n}"}
{"index": 8132, "repo": "spring-ws-3.0.10.RELEASE", "des": "Subclass of AbstractValidatingInterceptor that creates a SOAP Fault whenever the request message cannot be validated.", "code": "Class AbstractFaultCreatingValidatingInterceptor {\n\tboolean getAddValidationErrorDetail(); // Returns whether a SOAP Fault detail element should be created when a validation error occurs.\n\tQName getDetailElementName(); // Returns the fault detail element name when validation errors occur on the request.\n\tString getFaultStringOrReason(); // Sets the SOAP faultstring or Reason used when validation errors occur on the request.\n\tLocale getFaultStringOrReasonLocale(); // Returns the SOAP fault reason locale used when validation errors occur on the request.\n\tprotected boolean handleRequestValidationErrors(MessageContext messageContext, SAXParseException[] errors); // Template method that is called when the request message contains validation errors.\n\tvoid setAddValidationErrorDetail(boolean addValidationErrorDetail); // Indicates whether a SOAP Fault detail element should be created when a validation error occurs.\n\tvoid setDetailElementName(QName detailElementName); // Sets the fault detail element name when validation errors occur on the request.\n\tvoid setFaultStringOrReason(String faultStringOrReason); // Sets the SOAP faultstring or Reason used when validation errors occur on the request.\n\tvoid setFaultStringOrReasonLocale(Locale faultStringOrReasonLocale); // Sets the SOAP fault reason locale used when validation errors occur on the request.\n}"}
{"index": 2250, "repo": "hive-exec-4.0.0-alpha-2", "des": "ReduceWork represents all the information used to run a reduce task on the cluster.", "code": "Class ReduceWork {\n\tSet<Operator<?>> getAllRootOperators();\n\tOperator<? extends OperatorDesc> getAnyRootOperator();\n\tTezEdgeProperty getEdgePropRef();\n\tString getExecutionMode();\n\tTableDesc getKeyDesc();\n\tint getMaxReduceTasks();\n\tint getMinReduceTasks();\n\tboolean getNeedsTagging();\n\tInteger getNumReduceTasks(); // If the number of reducers is -1, the runtime will automatically figure it out by input data size.\n\tReduceWork.ReduceExplainVectorization getReduceExplainVectorization();\n\tOperator<?> getReducer();\n\tboolean getReduceVectorizationEnabled();\n\tMap<Integer,String> getTagToInput();\n\tList<TableDesc> getTagToValueDesc();\n\tString getVectorReduceColumnNullOrder();\n\tString getVectorReduceColumnSortOrder();\n\tString getVectorReduceEngine();\n\tboolean isAutoReduceParallelism();\n\tboolean isSlowStart();\n\tboolean isUniformDistribution();\n\tvoid replaceRoots(Map<Operator<?>,Operator<?>> replacementMap);\n\tvoid setAutoReduceParallelism(boolean isAutoReduceParallelism);\n\tvoid setEdgePropRef(TezEdgeProperty edgeProp);\n\tvoid setKeyDesc(TableDesc keyDesc); // If the plan has a reducer and correspondingly a reduce-sink, then store the TableDesc pointing to keySerializeInfo of the ReduceSink\n\tvoid setMaxReduceTasks(int maxReduceTasks);\n\tvoid setMinReduceTasks(int minReduceTasks);\n\tvoid setNeedsTagging(boolean needsTagging);\n\tvoid setNumReduceTasks(Integer numReduceTasks);\n\tvoid setReducer(Operator<?> reducer);\n\tvoid setReduceVectorizationEnabled(boolean reduceVectorizationEnabled);\n\tvoid setSlowStart(boolean isSlowStart);\n\tvoid setTagToInput(Map<Integer,String> tagToInput);\n\tvoid setTagToValueDesc(List<TableDesc> tagToValueDesc);\n\tvoid setUniformDistribution(boolean isUniformDistribution);\n\tvoid setVectorReduceColumnNullOrder(String vectorReduceColumnNullOrder);\n\tvoid setVectorReduceColumnSortOrder(String vectorReduceColumnSortOrder);\n\tvoid setVectorReduceEngine(String vectorReduceEngine);\n}"}
{"index": 18385, "repo": "opencms-core-15.0", "des": "A bean representing a set of property changes.", "code": "Class CmsPropertyChangeSet {\n\tjava.util.List<CmsPropertyModification> getChanges(); // Gets the list of property change beans.\n\tCmsUUID getTargetStructureId(); // Gets the structure id of the target resource.\n}"}
{"index": 7200, "repo": "calcite-core-1.34.0", "des": "The level of abstraction with which to display the plan.", "code": "Enum SqlExplain.Depth {\n\tstatic SqlExplain.Depth valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlExplain.Depth[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16769, "repo": "spring-security-ldap-6.1.2", "des": "A LDAP authority populator that can recursively search static nested groups.", "code": "public class NestedLdapAuthoritiesPopulator extends DefaultLdapAuthoritiesPopulator {\n\tSet<org.springframework.security.core.GrantedAuthority> getGroupMembershipRoles(String userDn, String username);\n\tvoid setAttributeNames(Set<String> attributeNames); // Sets the attribute names to retrieve for each ldap groups.\n\tvoid setMaxSearchDepth(int maxSearchDepth); // How far should a nested search go.\n}"}
{"index": 9765, "repo": "commons-math3-3.6.1", "des": "This class represents a 2D region: a set of polygons.", "code": "Class PolygonsSet {\n\tPolygonsSet buildNew(BSPTree<Euclidean2D> tree); // Build a region using the instance as a prototype.\n\tprotected void computeGeometricalProperties(); // Compute some geometrical properties.\n\tVector2D[][] getVertices(); // Get the vertices of the polygon.\n}"}
{"index": 14724, "repo": "spring-data-commons-3.1.2", "des": "Fluent interface to define and run a query along with projection and sorting and.", "code": "public interface FluentQuery<T> {\n\t<R> FluentQuery<R> as(Class<R> resultType); // Define the target type the result should be mapped to.\n\tdefault FluentQuery<T> limit(int limit); // Define the query limit.\n\tdefault FluentQuery<T> project(String... properties); // Define which properties or property paths to include in the query.\n\tFluentQuery<T> project(Collection<String> properties); // Define which properties or property paths to include in the query.\n\tFluentQuery<T> sortBy(Sort sort); // Define the sort order.\n}"}
{"index": 13859, "repo": "spring-webflux-6.0.11", "des": "Represents the headers of the HTTP response.", "code": "public static interface ClientResponse.Headers {\n\torg.springframework.http.HttpHeaders asHttpHeaders(); // Return the headers as an HttpHeaders instance.\n\tOptionalLong contentLength(); // Return the length of the body in bytes, as specified by the Content-Length header.\n\tOptional<org.springframework.http.MediaType> contentType(); // Return the media type of the body, as specified by the Content-Type header.\n\tList<String> header(String headerName); // Return the header value(s), if any, for the header of the given name.\n}"}
{"index": 13301, "repo": "shiro-core-2.0.0-alpha-2", "des": "Abstract base implementation for Shiro's concrete AuthenticationStrategy implementations.", "code": "public abstract class AbstractAuthenticationStrategy extends Object implements AuthenticationStrategy {\n\tAuthenticationInfo afterAllAttempts(AuthenticationToken token, AuthenticationInfo aggregate); // Simply returns the aggregate argument without modification.\n\tAuthenticationInfo afterAttempt(Realm realm, AuthenticationToken token, AuthenticationInfo singleRealmInfo, AuthenticationInfo aggregateInfo, Throwable t); // Base implementation that will aggregate the specified singleRealmInfo into the aggregateInfo and then returns the aggregate.\n\tAuthenticationInfo beforeAllAttempts(Collection<? extends Realm> realms, AuthenticationToken token); // Simply returns new SimpleAuthenticationInfo();, which supports aggregating account data across realms.\n\tAuthenticationInfo beforeAttempt(Realm realm, AuthenticationToken token, AuthenticationInfo aggregate); // Simply returns the aggregate method argument, without modification.\n\tprotected AuthenticationInfo merge(AuthenticationInfo info, AuthenticationInfo aggregate); // Merges the specified info argument into the aggregate argument and then returns an aggregate for continued use throughout the login process.\n}"}
{"index": 2620, "repo": "mahout-core-14.1", "des": "Partially deprecated until unit tests are in place.", "code": "Class Gamma {\n\tstatic double beta(double alpha, double beta); // Returns the beta function of the arguments.\n\tstatic double gamma(double x); // Returns the Gamma function of the argument.\n\tstatic double incompleteBeta(double alpha, double beta, double xx); // Returns the regularized Incomplete Beta Function evaluated from zero to xx; formerly named ibeta.\n\tstatic double incompleteGamma(double alpha, double x); // Returns the Incomplete Gamma function; formerly named igamma.\n\tstatic double incompleteGammaComplement(double alpha, double x); // Returns the Complemented Incomplete Gamma function; formerly named igamc.\n\tstatic double logGamma(double x); // Returns the natural logarithm of the gamma function; formerly named lgamma.\n}"}
{"index": 18162, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Extension point allowing any SQL query with named and positional parameters to be executed by Hibernate, returning managed entities, collections and simple scalar values.", "code": "Interface CustomQuery {\n\tjava.util.List<Return> getCustomQueryReturns(); // A collection of descriptors describing the JDBC result set to be expected and how to map this result set.\n\tjava.util.List<ParameterBinder> getParameterValueBinders();\n\tjava.util.Set<java.lang.String> getQuerySpaces(); // Any query spaces to apply to the query execution.\n\tjava.lang.String getSQL(); // The SQL query string to be performed.\n}"}
{"index": 2007, "repo": "hive-exec-4.0.0-alpha-2", "des": "Counter limit interface for defining counter name and its limit exceeding which action defined in trigger will get executed.", "code": "Interface CounterLimit {\n\tCounterLimit clone(); // Return cloned copy of this counter limit\n\tlong getLimit(); // Get the threshold value for the counter\n\tString getName(); // Get the name of the counter.\n}"}
{"index": 54, "repo": "spring-yarn-boot-2.5.0.RELEASE", "des": "The Enum indicating working mode for BootLocalResourcesSelector.", "code": "Enum BootLocalResourcesSelector.Mode {\n\tstatic BootLocalResourcesSelector.Mode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic BootLocalResourcesSelector.Mode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 834, "repo": "ignite-core-2.15.0", "des": "Convenience adapter for GridQueryFieldsResult.", "code": "Class GridQueryFieldsResultAdapter {\n\tGridCloseableIterator<List<?>> iterator(); // Gets iterator over queried fields.\n\tList<GridQueryFieldMetadata> metaData(); // Gets metadata for queried fields.\n}"}
{"index": 1133, "repo": "ignite-core-2.15.0", "des": "Property used for keyFieldName or valueFieldName.", "code": "Class QueryUtils.KeyOrValProperty {\n\tObject defaultValue(); // Gets the default value for this property.\n\tboolean key(); // Property ownership flag.\n\tString name();\n\tboolean notNull(); // Gets the flag restricting null value for this property.\n\tGridQueryProperty parent();\n\tint precision(); // Gets precision for this property.\n\tint scale(); // Gets scale for this property.\n\tvoid setValue(Object key, Object val, Object propVal); // Sets this property value for the given object.\n\tClass<?> type();\n\tObject value(Object key, Object val); // Gets this property value from the given object.\n}"}
{"index": 10985, "repo": "spring-data-redis-3.1.2", "des": "Basic interface serialization and deserialization of Objects to byte arrays (binary data).", "code": "public interface RedisSerializer<T> {\n\tstatic RedisSerializer<byte[]> byteArray(); // Obtain a RedisSerializer that passes thru byte[].\n\tdefault boolean canSerialize(Class<?> type);\n\tT deserialize(byte[] bytes); // Deserialize an object from the given binary data.\n\tdefault Class<?> getTargetType();\n\tstatic RedisSerializer<Object> java(); // Obtain a RedisSerializer using java serialization. Note: Ensure that your domain objects are actually serializable.\n\tstatic RedisSerializer<Object> java(ClassLoader classLoader); // Obtain a RedisSerializer using java serialization with the given ClassLoader. Note: Ensure that your domain objects are actually serializable.\n\tstatic RedisSerializer<Object> json(); // Obtain a RedisSerializer that can read and write JSON using Jackson.\n\tbyte[] serialize(T t); // Serialize the given object to binary data.\n\tstatic RedisSerializer<String> string(); // Obtain a simple String to byte[] (and back) serializer using UTF-8 as the default Charset.\n}"}
{"index": 6543, "repo": "exoplayer-core-2.9.6", "des": "A factory for MetadataDecoder instances.", "code": "Interface MetadataDecoderFactory {\n\tMetadataDecoder createDecoder(Format format); // Creates a MetadataDecoder for the given Format.\n\tboolean supportsFormat(Format format); // Returns whether the factory is able to instantiate a MetadataDecoder for the given Format.\n}"}
{"index": 7230, "repo": "calcite-core-1.34.0", "des": "Flag to indicate the explicit return type of JSON_VALUE.", "code": "Enum SqlJsonValueReturning {\n\tstatic SqlJsonValueReturning valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlJsonValueReturning[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8819, "repo": "hbase-server-3.0.0-alpha-4", "des": "Typical base class for file status filter.", "code": "Class AbstractFileStatusFilter {\n\tboolean accept(org.apache.hadoop.fs.FileStatus f); // Tests whether or not the specified filestatus should be included in a filestatus list.\n\tboolean accept(org.apache.hadoop.fs.Path p);\n\tprotected abstract boolean accept(org.apache.hadoop.fs.Path p, Boolean isDir); // Filters out a path.\n\tprotected boolean isDirectory(org.apache.hadoop.fs.FileSystem fs, Boolean isDir, org.apache.hadoop.fs.Path p);\n\tprotected boolean isFile(org.apache.hadoop.fs.FileSystem fs, Boolean isDir, org.apache.hadoop.fs.Path p);\n}"}
{"index": 7589, "repo": "cassandra-all-4.1.2", "des": "Instances of this class represent collection types, that is, lists, sets or maps.", "code": "Class DataType.CollectionType {\n\tjava.lang.String asFunctionParameterString(); // Returns a String representation of this data type suitable for inclusion as a parameter type in a function or aggregate signature.\n\tboolean equals(java.lang.Object o);\n\tjava.util.List<DataType> getTypeArguments(); // Returns the type arguments of this type.\n\tboolean isFrozen(); // Returns whether this data type is frozen.\n}"}
{"index": 1465, "repo": "pdfbox-3.0.0-beta1", "des": "Possible location of the overlaid pages: foreground or background.", "code": "Enum Overlay.Position {\n\tstatic Overlay.Position valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Overlay.Position[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5283, "repo": "druid-processing-26.0.0", "des": "Streams arrays of objects out in the binary format described by GenericIndexed The version EncodedStringDictionaryWriter.", "code": "Class GenericIndexedWriter<T> {\n\tstatic ObjectStrategy<ByteBuffer> compressedByteBuffersWriteObjectStrategy(CompressionStrategy compressionStrategy, int bufferSize, Closer closer);\n\tstatic String generateHeaderFileName(String fileNameBase);\n\tstatic String generateValueFileName(String fileNameBase, int fileNum);\n\tT get(int index);\n\tint getCardinality();\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tboolean isSorted();\n\tstatic GenericIndexedWriter<ByteBuffer> ofCompressedByteBuffers(SegmentWriteOutMedium segmentWriteOutMedium, String filenameBase, CompressionStrategy compressionStrategy, int bufferSize);\n\tvoid open();\n\tvoid setObjectsNotSorted();\n\tvoid write(T objectToWrite);\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 129, "repo": "commons-collections4-4.4", "des": "This class gathers all the commands needed to transform one objects sequence into another objects sequence.", "code": "Class EditScript<T> {\n\tvoid append(DeleteCommand<T> command); // Add a delete command to the script.\n\tvoid append(InsertCommand<T> command); // Add an insert command to the script.\n\tvoid append(KeepCommand<T> command); // Add a keep command to the script.\n\tint getLCSLength(); // Get the length of the Longest Common Subsequence (LCS).\n\tint getModifications(); // Get the number of effective modifications.\n\tvoid visit(CommandVisitor<T> visitor); // Visit the script.\n}"}
{"index": 7385, "repo": "mahout-math-0.13.0", "des": "This is a very fast, non-cryptographic hash suitable for general hash-based lookup.", "code": "Class MurmurHash {\n\tstatic int hash(byte[] data, int seed); // Hashes bytes in an array.\n\tstatic int hash(byte[] data, int offset, int length, int seed); // Hashes bytes in part of an array.\n\tstatic int hash(ByteBuffer buf, int seed); // Hashes the bytes in a buffer from the current position to the limit.\n\tstatic int hash(int data, int seed); // Hashes an int.\n\tstatic long hash64A(byte[] data, int seed);\n\tstatic long hash64A(byte[] data, int offset, int length, int seed);\n\tstatic long hash64A(ByteBuffer buf, int seed);\n}"}
{"index": 3474, "repo": "mahout-mr-0.13.0", "des": "Implementations of this interface have a printable representation and certain attributes that are common across all clustering implementations.", "code": "Interface Cluster {\n\tString asFormatString(String[] bindings); // Produce a custom, human-friendly, printable representation of the Cluster.\n\tMap<String,Object> asJson(String[] bindings); // Produce a JSON representation of the Cluster.\n\tVector getCenter(); // Get the \"center\" of the Cluster as a Vector\n\tint getId(); // Get the id of the Cluster\n\tVector getRadius(); // Get the \"radius\" of the Cluster as a Vector.\n\tboolean isConverged();\n}"}
{"index": 16082, "repo": "shiro-web-2.0.0-alpha-2", "des": "A NamedFilterList is a List of Filter instances that is uniquely identified by a name.", "code": "public interface NamedFilterList extends List<javax.servlet.Filter> {\n\tString getName(); // Returns the configuration-unique name assigned to this Filter list.\n\tjavax.servlet.FilterChain proxy(javax.servlet.FilterChain filterChain); // Returns a new FilterChain instance that will first execute this list's Filters (in list order) and end with the execution of the given filterChain instance.\n}"}
{"index": 9900, "repo": "iceberg-api-1.3.0", "des": "A scan task for deletes generated by adding delete files to the table.", "code": "Interface DeletedRowsScanTask {\n\tjava.util.List<DeleteFile> addedDeletes(); // A list of added delete files that apply to the task's data file.\n\tjava.util.List<DeleteFile> existingDeletes(); // A list of delete files that existed before and must be applied prior to determining which records are deleted by delete files in addedDeletes().\n\tdefault int filesCount(); // The number of files that will be opened by this scan task.\n\tdefault ChangelogOperation operation(); // Returns the type of changes produced by this task (i.e.\n\tdefault long sizeBytes(); // The number of bytes that should be read by this scan task.\n}"}
{"index": 12793, "repo": "spring-data-mongodb-4.1.2", "des": "The result after processing a conflict when merging schemas.", "code": "public static interface MongoJsonSchema.ConflictResolutionFunction.Resolution extends Map.Entry<String,Object> {\n\tstatic MongoJsonSchema.ConflictResolutionFunction.Resolution ofValue(String key, Object value); // Construct a resolution from a key and value.\n\tstatic MongoJsonSchema.ConflictResolutionFunction.Resolution ofValue(MongoJsonSchema.ConflictResolutionFunction.Path path, Object value); // Construct a resolution for a MongoJsonSchema.ConflictResolutionFunction.Path using the given value.\n\tdefault Object setValue(Object value);\n\tstatic MongoJsonSchema.ConflictResolutionFunction.Resolution skip(); // Obtain a MongoJsonSchema.ConflictResolutionFunction.Resolution that will skip the entry and proceed computation.\n}"}
{"index": 9495, "repo": "commons-math3-3.6.1", "des": "Chromosome represented by an immutable list of a fixed length.", "code": "Class AbstractListChromosome<T> {\n\tprotected abstract void checkValidity(List<T> chromosomeRepresentation); // Asserts that representation can represent a valid chromosome.\n\tint getLength(); // Returns the length of the chromosome.\n\tprotected List<T> getRepresentation(); // Returns the (immutable) inner representation of the chromosome.\n\tabstract AbstractListChromosome<T> newFixedLengthChromosome(List<T> chromosomeRepresentation); // Creates a new instance of the same class as this is, with a given arrayRepresentation.\n}"}
{"index": 16568, "repo": "spring-beans-6.0.11", "des": "Extension of the GenericBeanDefinition class, adding support for annotation metadata exposed through the AnnotatedBeanDefinition interface.", "code": "public class AnnotatedGenericBeanDefinition extends GenericBeanDefinition implements AnnotatedBeanDefinition {\n\tfinal org.springframework.core.type.MethodMetadata getFactoryMethodMetadata(); // Obtain metadata for this bean definition's factory method, if any.\n\tfinal org.springframework.core.type.AnnotationMetadata getMetadata(); // Obtain the annotation metadata (as well as basic class metadata) for this bean definition's bean class.\n}"}
{"index": 12235, "repo": "jena-core-4.9.0", "des": "The minimal interface to which all reasoners (or reasoner adaptors) conform.", "code": "public interface Reasoner {\n\tvoid addDescription(Model configSpec, Resource base); // Add a configuration description for this reasoner into a partial configuration specification model.\n\tInfGraph bind(Graph data); // Attach the reasoner to a set of RDF data to process.\n\tReasoner bindSchema(Graph tbox); // This is most commonly used to attach an ontology (a set of tbox axioms in description logics jargon) to a reasoner.\n\tReasoner bindSchema(Model tbox); // This is most commonly used to attach an ontology (a set of tbox axioms in description logics jargon) to a reasoner.\n\tCapabilities getGraphCapabilities(); // Return the Jena Graph Capabilties that the inference graphs generated by this reasoner are expected to conform to.\n\tModel getReasonerCapabilities(); // Return a description of the capabilities of this reasoner encoded in RDF.\n\tvoid setDerivationLogging(boolean logOn); // Switch on/off drivation logging.\n\tvoid setParameter(Property parameterUri, Object value); // Set a configuration parameter for the reasoner.\n\tboolean supportsProperty(Property property); // Determine whether the given property is recognized and treated specially by this reasoner.\n}"}
{"index": 8255, "repo": "spring-ws-3.0.10.RELEASE", "des": "Factory methods for ResponseCreator classes.", "code": "Class ResponseCreators {\n\tstatic ResponseCreator withClientOrSenderFault(String faultStringOrReason, Locale locale); // Respond with a Client (SOAP 1.1) or Sender (SOAP 1.2) fault.\n\tstatic ResponseCreator withError(String errorMessage); // Respond with an error.\n\tstatic ResponseCreator withException(IOException ioException); // Respond with an IOException.\n\tstatic ResponseCreator withException(RuntimeException ex); // Respond with an RuntimeException.\n\tstatic ResponseCreator withMustUnderstandFault(String faultStringOrReason, Locale locale); // Respond with a MustUnderstand fault.\n\tstatic ResponseCreator withPayload(org.springframework.core.io.Resource payload); // Respond with the given Resource XML as payload response.\n\tstatic ResponseCreator withPayload(Source payload); // Respond with the given Source XML as payload response.\n\tstatic ResponseCreator withServerOrReceiverFault(String faultStringOrReason, Locale locale); // Respond with a Server (SOAP 1.1) or Receiver (SOAP 1.2) fault.\n\tstatic ResponseCreator withSoapEnvelope(org.springframework.core.io.Resource soapEnvelope); // Respond with the given Resource XML as SOAP envelope response.\n\tstatic ResponseCreator withSoapEnvelope(Source soapEnvelope); // Respond with the given Source XML as SOAP envelope response.\n\tstatic ResponseCreator withVersionMismatchFault(String faultStringOrReason, Locale locale); // Respond with a VersionMismatch fault.\n}"}
{"index": 14763, "repo": "spring-data-commons-3.1.2", "des": "Abstract interface for pagination information.", "code": "public interface Pageable {\n\tPageable first(); // Returns the Pageable requesting the first page.\n\tlong getOffset(); // Returns the offset to be taken according to the underlying page and page size.\n\tint getPageNumber(); // Returns the page to be returned.\n\tint getPageSize(); // Returns the number of items to be returned.\n\tSort getSort(); // Returns the sorting parameters.\n\tdefault Sort getSortOr(Sort sort); // Returns the current Sort or the given one if the current one is unsorted.\n\tboolean hasPrevious(); // Returns whether there's a previous Pageable we can access from the current one.\n\tdefault boolean isPaged(); // Returns whether the current Pageable contains pagination information.\n\tdefault boolean isUnpaged(); // Returns whether the current Pageable does not contain pagination information.\n\tPageable next(); // Returns the Pageable requesting the next Page.\n\tstatic Pageable ofSize(int pageSize); // Creates a new Pageable for the first page (page number 0) given pageSize .\n\tPageable previousOrFirst(); // Returns the previous Pageable or the first Pageable if the current one already is the first one.\n\tdefault Optional<Pageable> toOptional(); // Returns an Optional so that it can easily be mapped on.\n\tdefault OffsetScrollPosition toScrollPosition(); // Returns an OffsetScrollPosition from this pageable if the page request is paged.\n\tstatic Pageable unpaged(); // Returns a Pageable instance representing no pagination setup.\n\tPageable withPage(int pageNumber); // Creates a new Pageable with pageNumber applied.\n}"}
{"index": 8355, "repo": "hive-common-4.0.0-alpha-2", "des": "A special subclass of Properties, designed to save memory when many identical copies of Properties would otherwise be created.", "code": "Class CopyOnFirstWriteProperties {\n\tvoid clear(); // Public API of java.util.Hashtable\n\tObject clone();\n\tObject compute(Object key, BiFunction remappingFunction);\n\tObject computeIfAbsent(Object key, Function mappingFunction);\n\tObject computeIfPresent(Object key, BiFunction remappingFunction);\n\tboolean contains(Object value);\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tEnumeration<Object> elements();\n\tSet<Map.Entry<Object,Object>> entrySet();\n\tboolean equals(Object o);\n\tvoid forEach(BiConsumer action);\n\tObject get(Object key);\n\tProperties getInterned();\n\tObject getOrDefault(Object key, Object defaultValue);\n\tString getProperty(String key); // Public API of java.util.Properties\n\tString getProperty(String key, String defaultValue);\n\tboolean isEmpty();\n\tEnumeration<Object> keys();\n\tSet<Object> keySet();\n\tvoid list(PrintStream out);\n\tvoid list(PrintWriter out);\n\tvoid load(InputStream inStream);\n\tvoid load(Reader reader);\n\tvoid loadFromXML(InputStream inStream);\n\tObject merge(Object key, Object value, BiFunction remappingFunction);\n\tEnumeration<?> propertyNames();\n\tObject put(Object key, Object value);\n\tvoid putAll(Map<? extends Object,? extends Object> t);\n\tObject putIfAbsent(Object key, Object value);\n\tObject remove(Object key);\n\tboolean remove(Object key, Object value);\n\tObject replace(Object key, Object value);\n\tboolean replace(Object key, Object oldValue, Object newValue);\n\tvoid replaceAll(BiFunction function);\n\tvoid setInterned(Properties p);\n\tObject setProperty(String key, String value);\n\tint size();\n\tvoid store(OutputStream out, String comments);\n\tvoid storeToXML(OutputStream os, String comment);\n\tvoid storeToXML(OutputStream os, String comment, String encoding);\n\tSet<String> stringPropertyNames();\n\tCollection<Object> values();\n}"}
{"index": 3690, "repo": "kafka-streams-3.5.0", "des": "CogroupedKStream is an abstraction of multiple grouped record streams of KeyValue pairs.", "code": "Interface CogroupedKStream<K,VOut> {\n\tKTable<K,VOut> aggregate(Initializer<VOut> initializer); // Aggregate the values of records in these streams by the grouped key.\n\tKTable<K,VOut> aggregate(Initializer<VOut> initializer, Materialized<K,VOut,KeyValueStore<org.apache.kafka.common.utils.Bytes,byte[]>> materialized); // Aggregate the values of records in these streams by the grouped key.\n\tKTable<K,VOut> aggregate(Initializer<VOut> initializer, Named named); // Aggregate the values of records in these streams by the grouped key.\n\tKTable<K,VOut> aggregate(Initializer<VOut> initializer, Named named, Materialized<K,VOut,KeyValueStore<org.apache.kafka.common.utils.Bytes,byte[]>> materialized); // Aggregate the values of records in these streams by the grouped key.\n\t<VIn> CogroupedKStream<K,VOut> cogroup(KGroupedStream<K,VIn> groupedStream, Aggregator<? super K,? super VIn,VOut> aggregator); // Add an already grouped KStream to this CogroupedKStream.\n\tSessionWindowedCogroupedKStream<K,VOut> windowedBy(SessionWindows windows); // Create a new SessionWindowedCogroupedKStream instance that can be used to perform session windowed aggregations.\n\tTimeWindowedCogroupedKStream<K,VOut> windowedBy(SlidingWindows windows); // Create a new TimeWindowedCogroupedKStream instance that can be used to perform sliding windowed aggregations.\n\t<W extends Window>TimeWindowedCogroupedKStream<K,VOut> windowedBy(Windows<W> windows); // Create a new TimeWindowedCogroupedKStream instance that can be used to perform windowed aggregations.\n}"}
{"index": 9111, "repo": "hbase-server-3.0.0-alpha-4", "des": "Intelligently keep track of all the files for all the snapshots.", "code": "Class SnapshotFileCache {\n\tIterable<org.apache.hadoop.fs.FileStatus> getUnreferencedFiles(List<org.apache.hadoop.fs.FileStatus> files, SnapshotManager snapshotManager); // Check to see if any of the passed file names is contained in any of the snapshots.\n\tboolean isStopped();\n\tvoid stop(String why);\n\tvoid triggerCacheRefreshForTesting(); // Trigger a cache refresh, even if its before the next cache refresh.\n}"}
{"index": 15021, "repo": "spring-vault-core-3.0.4", "des": "Builder for AppRoleAuthenticationOptions.", "code": "public static class AppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder extends Object {\n\tAppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder appRole(String appRole); // Configure a appRole.\n\tAppRoleAuthenticationOptions build(); // Build a new AppRoleAuthenticationOptions instance.\n\tAppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder path(String path); // Configure the mount path.\n\tAppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder roleId(AppRoleAuthenticationOptions.RoleId roleId); // Configure the RoleId.\n\tAppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder secretId(AppRoleAuthenticationOptions.SecretId secretId); // Configure a secretId.\n\tAppRoleAuthenticationOptions.AppRoleAuthenticationOptionsBuilder unwrappingEndpoints(UnwrappingEndpoints endpoints); // Configure the UnwrappingEndpoints to use.\n}"}
{"index": 18793, "repo": "lucene-core-9.7.0", "des": "Abstract base class for TokenFilters that may remove tokens.", "code": "Class FilteringTokenFilter {\n\tprotected abstract boolean accept(); // Override this method and return if the current input token should be returned by incrementToken().\n\tvoid end(); // This method is called by the consumer after the last token has been consumed, after TokenStream.incrementToken() returned false (using the new TokenStream API).\n\tboolean incrementToken(); // Consumers (i.e., IndexWriter) use this method to advance the stream to the next token.\n\tvoid reset(); // This method is called by a consumer before it begins consumption using TokenStream.incrementToken().\n}"}
{"index": 5644, "repo": "org.apache.karaf.main-2.4.4", "des": "An event from the Framework describing a service lifecycle change.", "code": "Class ServiceEvent {\n\tServiceReference<?> getServiceReference(); // Returns a reference to the service that had a change occur in its lifecycle.\n\tint getType(); // Returns the type of event.\n}"}
{"index": 17537, "repo": "pulsar-broker-3.0.0", "des": "A Dispatcher that'll use StreamingEntryReader to read entries from ManagedLedger.", "code": "@Unstable public interface StreamingDispatcher extends Dispatcher {\n\tvoid canReadMoreEntries(boolean withBackoff); // Notify dispatcher can issue next read request.\n\tString getName();\n\tvoid notifyConsumersEndOfTopic(); // Notify dispatcher to inform consumers reached end of topic.\n\tvoid readEntryComplete(Entry entry, PendingReadEntryRequest ctx); // Notify dispatcher issued read entry request has complete.\n}"}
{"index": 4531, "repo": "beam-sdks-java-core-2.49.0", "des": "A specification of a persistent state cell.", "code": "Interface StateSpec<StateT extends State> {\n\tStateT bind(java.lang.String id, StateBinder binder); // For internal use only; no backwards-compatibility guarantees.\n\tvoid finishSpecifying(); // For internal use only; no backwards-compatibility guarantees.\n\t<ResultT> ResultT match(StateSpec.Cases<ResultT> cases); // For internal use only; no backwards-compatibility guarantees.\n\tvoid offerCoders(Coder[] coders); // For internal use only; no backwards-compatibility guarantees.\n}"}
{"index": 7134, "repo": "calcite-core-1.34.0", "des": "The name-resolution scope of a SELECT clause.", "code": "Class SelectScope {\n\tvoid addWindowName(String winName);\n\tboolean existingWindowName(String winName);\n\t@Nullable List<SqlNode> getExpandedSelectList();\n\tSqlMonotonicity getMonotonicity(SqlNode expr); // Returns whether an expression is monotonic in this scope.\n\tSqlSelect getNode(); // Returns the root node of this scope.\n\tSqlNodeList getOrderList(); // Returns the expressions by which the rows in this scope are sorted.\n\t@Nullable SqlValidatorTable getTable();\n\t@Nullable SqlWindow lookupWindow(String name); // Finds a window with a given name.\n\tvoid setExpandedSelectList(@Nullable List<SqlNode> selectList);\n}"}
{"index": 12114, "repo": "jena-core-4.9.0", "des": "A map from keys of type K to values of type V.", "code": "public interface JenaMap<K,V> extends JenaMapSetCommon<K> {\n\tvoid compute(K key, UnaryOperator<V> valueProcessor); // Compute a value for a key.\n\tV computeIfAbsent(K key, Supplier<V> absentValueSupplier); // Compute a value for a key if the key is not present.\n\tV get(K key); // Get the value associated with the provided key.\n\tV getOrDefault(K key, V defaultValue); // Get the value associated with the provided key, or a default value if the key is not present.\n\tvoid put(K key, V value); // Put a key-value pair into the map.\n\tboolean tryPut(K key, V value); // Try to put a key-value pair into the map.\n\tExtendedIterator<V> valueIterator(); // Get an iterator over the values in the map.\n\tSpliterator<V> valueSpliterator(); // Get a spliterator over the values in the map.\n\tdefault Stream<V> valueStream(); // Get a stream over the values in the map.\n\tdefault Stream<V> valueStreamParallel(); // Get a parallel stream over the values in the map.\n}"}
{"index": 1406, "repo": "pdfbox-3.0.0-beta1", "des": "The base object that all objects in the PDF document will extend.", "code": "Class COSBase {\n\tabstract void accept(ICOSVisitor visitor); // visitor pattern double dispatch method.\n\tCOSBase getCOSObject(); // Convert this standard java object to a COS object.\n\tCOSObjectKey getKey(); // This will return the COSObjectKey of an indirect object.\n\tboolean isDirect(); // If the state is set true, the dictionary will be written direct into the called object.\n\tvoid setDirect(boolean direct); // Set the state true, if the dictionary should be written as a direct object and not indirect.\n\tvoid setKey(COSObjectKey key); // Set the COSObjectKey of an indirect object.\n}"}
{"index": 7082, "repo": "calcite-core-1.34.0", "des": "Represents a relational dataset in a RelOptSchema.", "code": "Interface RelOptTable {\n\tRelOptTable extend(List<RelDataTypeField> extendedFields); // Returns a table with the given extra fields.\n\t@Nullable List<RelCollation> getCollationList(); // Returns a description of the physical ordering (or orderings) of the rows returned from this table.\n\tList<ColumnStrategy> getColumnStrategies(); // Returns a list describing how each column is populated.\n\t@Nullable RelDistribution getDistribution(); // Returns a description of the physical distribution of the rows in this table.\n\t@Nullable org.apache.calcite.linq4j.tree.Expression getExpression(Class clazz); // Generates code for this table.\n\t@Nullable List<ImmutableBitSet> getKeys(); // Returns a list of unique keys, empty list if no key exist, the result should be consistent with isKey.\n\tList<String> getQualifiedName(); // Obtains an identifier for this table.\n\t@Nullable List<RelReferentialConstraint> getReferentialConstraints(); // Returns the referential constraints existing for this table.\n\t@Nullable RelOptSchema getRelOptSchema(); // Returns the RelOptSchema this table belongs to.\n\tdouble getRowCount(); // Returns an estimate of the number of rows in the table.\n\tRelDataType getRowType(); // Describes the type of rows returned by this table.\n\tboolean isKey(ImmutableBitSet columns); // Returns whether the given columns are a key or a superset of a unique key of this table.\n\tRelNode toRel(RelOptTable.ToRelContext context); // Converts this table into a relational expression.\n}"}
{"index": 15897, "repo": "camel-api-4.0.0-RC1", "des": "An interface to represent an object which wishes to be injected with the HealthCheck", "code": "public interface WritableHealthCheckRepository extends HealthCheckRepository {\n\tvoid addHealthCheck(HealthCheck healthCheck); // Adds a HealthCheck to the repository.\n\tvoid removeHealthCheck(HealthCheck healthCheck); // Removes a HealthCheck from the repository.\n}"}
{"index": 998, "repo": "ignite-core-2.15.0", "des": "Job stealing failover SPI needs to always be used in conjunction with JobStealingCollisionSpi SPI.", "code": "Class JobStealingFailoverSpi {\n\tClusterNode failover(FailoverContext ctx, List<ClusterNode> top); // This method is called when method ComputeTask.result(org.apache.ignite.compute.ComputeJobResult, List) returns value ComputeJobResultPolicy.FAILOVER policy indicating that the result of job execution must be failed over.\n\tprotected List<String> getConsistentAttributeNames(); // Returns back a list of attributes that should be consistent for this SPI.\n\tint getMaximumFailoverAttempts(); // See setMaximumFailoverAttempts(int).\n\tMap<String,Object> getNodeAttributes(); // This method is called before SPI starts (before method IgniteSpi.spiStart(String) is called).\n\tint getTotalFailedOverJobsCount(); // Get total number of jobs that were failed over including stolen ones.\n\tint getTotalStolenJobsCount(); // Get total number of jobs that were stolen.\n\tJobStealingFailoverSpi setMaximumFailoverAttempts(int maxFailoverAttempts); // Sets maximum number of attempts to execute a failed job on another node.\n\tJobStealingFailoverSpi setName(String name); // Sets SPI name.\n\tvoid spiStart(String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 759, "repo": "ignite-core-2.15.0", "des": "DHT atomic cache backup update response.", "code": "Class GridDhtAtomicUpdateResponse {\n\tboolean addDeploymentInfo(); // Deployment enabled flag indicates whether deployment info has to be added to this message.\n\tshort directType(); // Gets message type.\n\tIgniteCheckedException error();\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid finishUnmarshal(GridCacheSharedContext ctx, ClassLoader ldr); // This method is called after the message is deserialized and is responsible for unmarshalling state marshalled in GridCacheMessage.prepareMarshal(GridCacheSharedContext) method.\n\tlong futureId();\n\tint lookupIndex(); // Gets message lookup index.\n\tIgniteLogger messageLogger(GridCacheSharedContext ctx);\n\tvoid nearEvicted(List<KeyCacheObject> nearEvicted);\n\tvoid onError(IgniteCheckedException err); // Sets update error.\n\tint partition();\n\tvoid prepareMarshal(GridCacheSharedContext ctx); // This method is called before the whole message is serialized and is responsible for pre-marshalling state.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 14297, "repo": "wicket-core-10.0.0-M1", "des": "Attributes that are provided to resource in the IResource.respond(Attributes) method.", "code": "public static class IResource.Attributes extends Object {\n\torg.apache.wicket.request.mapper.parameter.PageParameters getParameters(); // Returns additional parameters extracted from the request.\n\torg.apache.wicket.request.Request getRequest(); // Returns current request.\n\torg.apache.wicket.request.Response getResponse(); // Returns current response.\n}"}
{"index": 7858, "repo": "cassandra-all-4.1.2", "des": "Static methods to work with partition iterators.", "code": "Class UnfilteredPartitionIterators {\n\tstatic UnfilteredPartitionIterator concat(java.util.List<UnfilteredPartitionIterator> iterators);\n\tstatic void digest(UnfilteredPartitionIterator iterator, Digest digest, int version); // Digests the the provided iterator.\n\tstatic PartitionIterator filter(UnfilteredPartitionIterator iterator, int nowInSec);\n\tstatic UnfilteredRowIterator getOnlyElement(UnfilteredPartitionIterator iter, SinglePartitionReadCommand command);\n\tstatic UnfilteredPartitionIterator loggingIterator(UnfilteredPartitionIterator iterator, java.lang.String id, boolean fullDetails); // Wraps the provided iterator so it logs the returned rows/RT for debugging purposes.\n\tstatic UnfilteredPartitionIterator merge(java.util.List<? extends UnfilteredPartitionIterator> iterators, UnfilteredPartitionIterators.MergeListener listener);\n\tstatic UnfilteredPartitionIterator mergeLazily(java.util.List<? extends UnfilteredPartitionIterator> iterators);\n\tstatic UnfilteredPartitionIterators.Serializer serializerForIntraNode();\n}"}
{"index": 11513, "repo": "spring-restdocs-core-3.0.0", "des": "RestDocumentationContext encapsulates the context in which the documentation of a RESTful API is being performed.", "code": "public interface RestDocumentationContext {\n\tFile getOutputDirectory(); // Returns the output directory to which generated snippets should be written.\n\tint getStepCount(); // Returns the current step count.\n\tClass<?> getTestClass(); // Returns the class whose tests are currently executing.\n\tString getTestMethodName(); // Returns the name of the test method that is currently executing.\n}"}
{"index": 14520, "repo": "spring-security-web-6.1.2", "des": "Processes a HTTP request's Digest authorization headers, putting the result into the SecurityContextHolder.", "code": "public class DigestAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.MessageSourceAware {\n\tvoid afterPropertiesSet();\n\tvoid doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain chain);\n\tprotected final DigestAuthenticationEntryPoint getAuthenticationEntryPoint();\n\torg.springframework.security.core.userdetails.UserCache getUserCache();\n\torg.springframework.security.core.userdetails.UserDetailsService getUserDetailsService();\n\tvoid setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,?> authenticationDetailsSource);\n\tvoid setAuthenticationEntryPoint(DigestAuthenticationEntryPoint authenticationEntryPoint);\n\tvoid setCreateAuthenticatedToken(boolean createAuthenticatedToken); // If you set this property, the Authentication object, which is created after the successful digest authentication will be marked as authenticated and filled with the authorities loaded by the UserDetailsService.\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n\tvoid setPasswordAlreadyEncoded(boolean passwordAlreadyEncoded);\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextRepository(SecurityContextRepository securityContextRepository); // Sets the SecurityContextRepository to save the SecurityContext on authentication success.\n\tvoid setUserCache(org.springframework.security.core.userdetails.UserCache userCache);\n\tvoid setUserDetailsService(org.springframework.security.core.userdetails.UserDetailsService userDetailsService);\n}"}
{"index": 14551, "repo": "spring-security-web-6.1.2", "des": "A WebFilterChainProxy.WebFilterChainDecorator that wraps the chain in before and after observations", "code": "public final class ObservationWebFilterChainDecorator extends Object implements WebFilterChainProxy.WebFilterChainDecorator {\n\torg.springframework.web.server.WebFilterChain decorate(org.springframework.web.server.WebFilterChain original); // Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\torg.springframework.web.server.WebFilterChain decorate(org.springframework.web.server.WebFilterChain original, List<org.springframework.web.server.WebFilter> filters); // Provide a new FilterChain that accounts for the provided filters as well as teh original filter chain.\n}"}
{"index": 5879, "repo": "hadoop-yarn-server-common-3.3.6", "des": "GetSubClusterPolicyConfigurationRequest is a request to the FederationPolicyStore to get the configuration of a policy for a given queue.", "code": "Class GetSubClusterPolicyConfigurationRequest {\n\tabstract String getQueue(); // Get the name of the queue for which we are requesting a policy configuration.\n\tstatic GetSubClusterPolicyConfigurationRequest newInstance(String queueName);\n\tabstract void setQueue(String queueName); // Sets the name of the queue for which we are requesting a policy configuration.\n}"}
{"index": 2636, "repo": "mahout-core-14.1", "des": "Open hash map from byte keys to float values.", "code": "Class OpenByteFloatHashMap {\n\tfloat adjustOrPutValue(byte key, float newValue, float incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(byte key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(float value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ByteProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ByteFloatProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tfloat get(byte key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(byte key);\n\tprotected int indexOfKey(byte key);\n\tprotected int indexOfValue(float value);\n\tIterator<OpenByteFloatHashMap.MapElement> iterator();\n\tvoid keys(ByteArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ByteFloatProcedure condition, ByteArrayList keyList, FloatArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(byte key, float value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(byte key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(FloatArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 11009, "repo": "spring-data-redis-3.1.2", "des": "Options for reading messages from a Redis Stream.", "code": "public class StreamReadOptions extends Object {\n\tStreamReadOptions autoAcknowledge(); // Enable auto-acknowledgement by setting the NOACK flag when reading in the context of a consumer group.\n\tStreamReadOptions block(Duration timeout); // Use a blocking read and supply the timeout after which the call will terminate if no message was read.\n\tStreamReadOptions count(long count); // Limit the number of messages returned per stream.\n\tstatic StreamReadOptions empty(); // Creates an empty StreamReadOptions instance.\n\tboolean equals(Object o);\n\tLong getBlock();\n\tLong getCount();\n\tboolean isBlocking();\n\tboolean isNoack();\n\tStreamReadOptions noack(); // Enable auto-acknowledgement by setting the NOACK flag when reading in the context of a consumer group.\n}"}
{"index": 6618, "repo": "ignite-indexing-2.15.0", "des": "Affinity of a table relative to previous joined tables.", "code": "Enum CollocationModelAffinity {\n\tstatic CollocationModelAffinity valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CollocationModelAffinity[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8352, "repo": "spring-ws-3.0.10.RELEASE", "des": "Adapter to use the XsdSchema interface with the generic DispatcherServlet.", "code": "Class XsdSchemaHandlerAdapter {\n\tvoid afterPropertiesSet();\n\tlong getLastModified(javax.servlet.http.HttpServletRequest request, Object handler);\n\tprotected Source getSchemaSource(XsdSchema schema); // Returns the Source of the given schema.\n\torg.springframework.web.servlet.ModelAndView handle(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, Object handler);\n\tvoid setSchemaLocationExpression(String schemaLocationExpression); // Sets the XPath expression used for extracting the schemaLocation attributes from the WSDL 1.1 definition.\n\tvoid setTransformSchemaLocations(boolean transformSchemaLocations); // Sets whether relative address schema locations in the WSDL are to be transformed using the request URI of the incoming HttpServletRequest.\n\tboolean supports(Object handler);\n\tprotected void transformSchemaLocations(Document definitionDocument, javax.servlet.http.HttpServletRequest request); // Transforms all schemaLocation attributes to reflect the server name given HttpServletRequest.\n}"}
{"index": 9509, "repo": "commons-math3-3.6.1", "des": "Base class for Adams-Bashforth and Adams-Moulton integrators.", "code": "Class AdamsFieldIntegrator<T extends RealFieldElement<T>> {\n\tprotected Array2DRowFieldMatrix<T> initializeHighOrderDerivatives(T h, T[] t, T[][] y, T[][] yDot); // Initialize the high order scaled derivatives at step start.\n\tabstract FieldODEStateAndDerivative<T> integrate(FieldExpandableODE<T> equations, FieldODEState<T> initialState, T finalTime); // Integrate the differential equations up to the given time.\n\tArray2DRowFieldMatrix<T> updateHighOrderDerivativesPhase1(Array2DRowFieldMatrix<T> highOrder); // Update the high order scaled derivatives for Adams integrators (phase 1).\n\tvoid updateHighOrderDerivativesPhase2(T[] start, T[] end, Array2DRowFieldMatrix<T> highOrder); // Update the high order scaled derivatives Adams integrators (phase 2).\n}"}
{"index": 2368, "repo": "commons-geometry-euclidean-1.0", "des": "Class representing intersections resulting from linecast operations in Euclidean 3D space.", "code": "Class LinecastPoint3D {\n\tboolean eq(LinecastPoint3D other, Precision.DoubleEquivalence precision); // Return true if this instance should be considered equivalent to the argument, using the given precision context for comparison.\n\tstatic void sortAndFilter(List<LinecastPoint3D> pts); // Sort the given list of linecast points by increasing abscissa value and filter to remove duplicate entries (as determined by the eq(LinecastPoint3D, Precision.DoubleEquivalence) method).\n}"}
{"index": 15385, "repo": "spring-boot-3.1.1", "des": "Interface to be implemented by application contexts that create and manage the lifecycle of an embedded WebServer.", "code": "public interface WebServerApplicationContext extends org.springframework.context.ApplicationContext {\n\tString getServerNamespace(); // Returns the namespace of the web server application context or null if no namespace has been set.\n\tstatic String getServerNamespace(org.springframework.context.ApplicationContext context); // Returns the server namespace if the specified context is a WebServerApplicationContext.\n\tWebServer getWebServer(); // Returns the WebServer that was created by the context or null if the server has not yet been created.\n\tstatic boolean hasServerNamespace(org.springframework.context.ApplicationContext context, String serverNamespace); // Returns true if the specified context is a WebServerApplicationContext with a matching server namespace.\n}"}
{"index": 13772, "repo": "spring-webmvc-6.0.11", "des": "Contract for request mapping conditions.", "code": "public interface RequestCondition<T> {\n\tT combine(T other); // Combine this condition with another such as conditions from a type-level and method-level @RequestMapping annotation.\n\tint compareTo(T other, HttpServletRequest request); // Compare this condition to another condition in the context of a specific request.\n\tT getMatchingCondition(HttpServletRequest request); // Check if the condition matches the request returning a potentially new instance created for the current request.\n}"}
{"index": 18693, "repo": "opencms-gwt-15.0", "des": "Highlighting CSS, used within the CmsHighlightingBorder widget.", "code": "Interface I_CmsLayoutBundle.I_CmsHighlightCss {\n\tjava.lang.String animated(); // Access method.\n\tjava.lang.String borderBottom(); // Access method.\n\tjava.lang.String borderLeft(); // Access method.\n\tjava.lang.String borderRight(); // Access method.\n\tjava.lang.String borderTop(); // Access method.\n\tjava.lang.String colorBlue(); // Access method.\n\tjava.lang.String colorGrey(); // Access method.\n\tjava.lang.String colorRed(); // Access method.\n\tjava.lang.String colorSolidGrey(); // Access method.\n\tjava.lang.String highlightBox(); // Access method.\n}"}
{"index": 4138, "repo": "camel-core-3.0.0-RC1", "des": "Routes a message through a series of steps that are pre-determined (the slip).", "code": "Class RoutingSlipDefinition<Type extends ProcessorDefinition<Type>> {\n\tRoutingSlipDefinition<Type> cacheSize(int cacheSize); // Sets the maximum size used by the ProducerCache which is used to cache and reuse producers when using this routing slip, when uris are reused.\n\tType end(); // Ends the current block\n\tInteger getCacheSize();\n\tBoolean getIgnoreInvalidEndpoints();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tList<ProcessorDefinition<?>> getOutputs();\n\tString getShortName();\n\tString getUriDelimiter();\n\tRoutingSlipDefinition<Type> ignoreInvalidEndpoints(); // Ignore the invalidate endpoint exception when try to create a producer with that endpoint\n\tvoid setCacheSize(Integer cacheSize);\n\tvoid setExpression(ExpressionDefinition expression); // Expression to define the routing slip, which defines which endpoints to route the message in a pipeline style.\n\tvoid setIgnoreInvalidEndpoints(Boolean ignoreInvalidEndpoints);\n\tvoid setUriDelimiter(String uriDelimiter);\n\tRoutingSlipDefinition<Type> uriDelimiter(String uriDelimiter); // Sets the uri delimiter to use\n}"}
{"index": 9982, "repo": "commons-text-1.10.0", "des": "Translates code points to their XML numeric entity escaped value.", "code": "Class NumericEntityEscaper {\n\tstatic NumericEntityEscaper above(int codePoint); // Constructs a NumericEntityEscaper above the specified value (exclusive).\n\tstatic NumericEntityEscaper below(int codePoint); // Constructs a NumericEntityEscaper below the specified value (exclusive).\n\tstatic NumericEntityEscaper between(int codePointLow, int codePointHigh); // Constructs a NumericEntityEscaper between the specified values (inclusive).\n\tstatic NumericEntityEscaper outsideOf(int codePointLow, int codePointHigh); // Constructs a NumericEntityEscaper outside of the specified values (exclusive).\n\tboolean translate(int codePoint, Writer writer); // Translates the specified code point into another.\n}"}
{"index": 3873, "repo": "hbase-client-3.0.0-alpha-4", "des": "Engine implementation type (default=JAVA).", "code": "Enum RegexStringComparator.EngineType {\n\tstatic RegexStringComparator.EngineType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RegexStringComparator.EngineType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18198, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Java class for embeddable-attributes complex type.", "code": "Class JaxbEmbeddableAttributes {\n\tjava.util.List<JaxbBasic> getBasic(); // Gets the value of the basic property.\n\tjava.util.List<JaxbElementCollection> getElementCollection(); // Gets the value of the elementCollection property.\n\tjava.util.List<JaxbEmbedded> getEmbedded(); // Gets the value of the embedded property.\n\tjava.util.List<JaxbManyToMany> getManyToMany(); // Gets the value of the manyToMany property.\n\tjava.util.List<JaxbManyToOne> getManyToOne(); // Gets the value of the manyToOne property.\n\tjava.util.List<JaxbOneToMany> getOneToMany(); // Gets the value of the oneToMany property.\n\tjava.util.List<JaxbOneToOne> getOneToOne(); // Gets the value of the oneToOne property.\n\tjava.util.List<JaxbTransient> getTransient(); // Gets the value of the transient property.\n}"}
{"index": 18583, "repo": "hibernate-core-5.6.15.Final", "des": "Extension to Manageable for things that are optionally Manageable depending on some internal state.", "code": "Interface OptionallyManageable {\n\tdefault java.lang.Object getManagementBean(); // The management bean (MBean) for this service.\n\tjava.util.List<Manageable> getRealManageables(); // Any wrapped services that are Manageable.\n}"}
{"index": 12493, "repo": "spring-jdbc-6.0.11", "des": "SqlUpdate subclass that performs batch update operations.", "code": "public class BatchSqlUpdate extends SqlUpdate {\n\tint[] flush(); // Trigger any queued update operations to be added as a final batch.\n\tint getExecutionCount(); // Return the number of already executed statements.\n\tint getQueueCount(); // Return the current number of statements or statement parameters in the queue.\n\tint[] getRowsAffected(); // Return the number of affected rows for all already executed statements.\n\tvoid reset(); // Reset the statement parameter queue, the rows affected cache, and the execution count.\n\tvoid setBatchSize(int batchSize); // Set the number of statements that will trigger an automatic intermediate flush.\n\tvoid setTrackRowsAffected(boolean trackRowsAffected); // Set whether to track the rows affected by batch updates performed by this operation object.\n\tprotected boolean supportsLobParameters(); // BatchSqlUpdate does not support BLOB or CLOB parameters.\n\tint update(Object... params); // Overridden version of update that adds the given statement parameters to the queue rather than executing them immediately.\n}"}
{"index": 17846, "repo": "spring-web-6.0.11", "des": "Structured representation of a URI path parsed via PathContainer.parsePath(String) into a sequence of PathContainer.Separator and PathContainer.PathSegment elements.", "code": "public interface PathContainer {\n\tList<PathContainer.Element> elements(); // The contained path elements, either PathContainer.Separator or PathContainer.PathSegment.\n\tstatic PathContainer parsePath(String path); // Parse the path value into a sequence of \"/\" Separator and PathSegment elements.\n\tstatic PathContainer parsePath(String path, PathContainer.Options options); // Parse the path value into a sequence of Separator and PathSegment elements.\n\tdefault PathContainer subPath(int index); // Extract a sub-path from the given offset into the elements list.\n\tdefault PathContainer subPath(int startIndex, int endIndex); // Extract a sub-path from the given start offset into the element list (inclusive) and to the end offset (exclusive).\n\tString value(); // The original path from which this instance was parsed.\n}"}
{"index": 3204, "repo": "hbase-common-3.0.0-alpha-4", "des": "The unit of storage in HBase consisting of the following fields: 1) row 2) column family 3) column qualifier 4) timestamp 5) type 6) MVCC version 7) value Uniqueness is determined by the combination of row, column family, column qualifier, timestamp, and type.", "code": "Interface Cell {\n\tbyte[] getFamilyArray(); // Contiguous bytes composed of legal HDFS filename characters which may start at any index in the containing array.\n\tbyte getFamilyLength(); // Returns Number of family bytes.\n\tint getFamilyOffset(); // Returns Array index of first family byte\n\tbyte[] getQualifierArray(); // Contiguous raw bytes that may start at any index in the containing array.\n\tint getQualifierLength(); // Returns Number of qualifier bytes.\n\tint getQualifierOffset(); // Returns Array index of first qualifier byte\n\tbyte[] getRowArray(); // Contiguous raw bytes that may start at any index in the containing array.\n\tshort getRowLength(); // Returns Number of row bytes.\n\tint getRowOffset(); // Returns Array index of first row byte\n\tint getSerializedSize(); // Returns Serialized size (defaults to include tag length if has some tags).\n\tlong getTimestamp(); // Return a long value representing time at which this cell was \"Put\" into the row.\n\tdefault Cell.Type getType(); // Returns the type of cell in a human readable format using Cell.Type.\n\tbyte[] getValueArray(); // Contiguous raw bytes that may start at any index in the containing array.\n\tint getValueLength(); // Returns Number of value bytes.\n\tint getValueOffset(); // Returns Array index of first value byte\n}"}
{"index": 13918, "repo": "spring-webflux-6.0.11", "des": "A WebSocket RequestUpgradeStrategy for Reactor Netty.", "code": "public class ReactorNettyRequestUpgradeStrategy extends Object implements RequestUpgradeStrategy {\n\tboolean getHandlePing(); // Deprecated. as of 5.2.6 in favor of getWebsocketServerSpec()\n\tint getMaxFramePayloadLength(); // Deprecated. as of 5.2.6 in favor of getWebsocketServerSpec()\n\treactor.netty.http.server.WebsocketServerSpec getWebsocketServerSpec(); // Build an instance of WebsocketServerSpec that reflects the current configuration.\n\tvoid setHandlePing(boolean handlePing); // Deprecated. as of 5.2.6 in favor of providing a supplier of WebsocketServerSpec.Builder with a constructor argument\n\tvoid setMaxFramePayloadLength(Integer maxFramePayloadLength); // Deprecated. as of 5.2.6 in favor of providing a supplier of WebsocketServerSpec.Builder with a constructor argument\n\treactor.core.publisher.Mono<Void> upgrade(org.springframework.web.server.ServerWebExchange exchange, WebSocketHandler handler, String subProtocol, Supplier<HandshakeInfo> handshakeInfoFactory); // Upgrade to a WebSocket session and handle it with the given handler.\n}"}
{"index": 17386, "repo": "groovy-4.0.13", "des": "As subclass of MetaClass, ProxyMetaClass manages calls from Groovy Objects to POJOs.", "code": "public class ProxyMetaClass extends MetaClassImpl implements AdaptingMetaClass {\n\tMetaClass getAdaptee(); // Returns the MetaClass that this adapter adapts\n\tstatic ProxyMetaClass getInstance(Class theClass); // convenience factory method for the most usual case.\n\tInterceptor getInterceptor();\n\tObject getProperty(Class aClass, Object object, String property, boolean useSuper, boolean fromInsideClass); // Interceptors the call to getProperty if a PropertyAccessInterceptor is available\n\tvoid initialize(); // Complete the initialisation process.\n\tObject invokeConstructor(Object[] arguments); // Call invokeConstructor on adaptee with logic like in MetaClass unless we have an Interceptor.\n\tObject invokeMethod(Class sender, Object object, String methodName, Object[] arguments, boolean isCallToSuper, boolean fromInsideClass); // Call invokeMethod on adaptee with logic like in MetaClass unless we have an Interceptor.\n\tObject invokeMethod(Object object, String methodName, Object[] arguments); // Call invokeMethod on adaptee with logic like in MetaClass unless we have an Interceptor.\n\tObject invokeStaticMethod(Object object, String methodName, Object[] arguments); // Call invokeStaticMethod on adaptee with logic like in MetaClass unless we have an Interceptor.\n\tvoid setAdaptee(MetaClass metaClass); // Sets the MetaClass adapted by this MetaClass\n\tvoid setInterceptor(Interceptor interceptor);\n\tvoid setProperty(Class aClass, Object object, String property, Object newValue, boolean useSuper, boolean fromInsideClass); // Interceptors the call to a property setter if a PropertyAccessInterceptor is available\n\tObject use(Closure closure); // Use the ProxyMetaClass for the given Closure.\n\tObject use(GroovyObject object, Closure closure); // Use the ProxyMetaClass for the given Closure.\n}"}
{"index": 11263, "repo": "spring-context-6.0.11", "des": "Utility class that allows for convenient registration of common BeanPostProcessor and BeanFactoryPostProcessor definitions for annotation-based configuration.", "code": "public abstract class AnnotationConfigUtils extends Object {\n\tstatic void processCommonDefinitionAnnotations(org.springframework.beans.factory.annotation.AnnotatedBeanDefinition abd);\n\tstatic void registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry registry); // Register all relevant annotation post processors in the given registry.\n\tstatic Set<org.springframework.beans.factory.config.BeanDefinitionHolder> registerAnnotationConfigProcessors(org.springframework.beans.factory.support.BeanDefinitionRegistry registry, Object source); // Register all relevant annotation post processors in the given registry.\n}"}
{"index": 4835, "repo": "hadoop-common-3.3.4", "des": "This class defines a FileStatus that includes a file's block locations.", "code": "Class LocatedFileStatus {\n\tint compareTo(FileStatus o); // Compare this FileStatus to another FileStatus\n\tboolean equals(Object o); // Compare if this object is equal to another object\n\tBlockLocation[] getBlockLocations(); // Get the file's block locations In HDFS, the returned BlockLocation will have different formats for replicated and erasure coded file.\n\tprotected void setBlockLocations(BlockLocation[] locations); // Hook for subclasses to lazily set block locations.\n}"}
{"index": 10576, "repo": "groovy-all-4.0.13", "des": "Represents the length property of an array", "code": "public class MetaArrayLengthProperty extends MetaProperty {\n\tObject getProperty(Object object); // Get this property from the given object.\n\tvoid setProperty(Object object, Object newValue); // Sets the property on the given object to the new value\n}"}
{"index": 2545, "repo": "exoplayer-r2.3.1", "des": "A view for controlling ExoPlayer instances.", "code": "Class PlaybackControlView {\n\tboolean dispatchKeyEvent(android.view.KeyEvent event);\n\tboolean dispatchMediaKeyEvent(android.view.KeyEvent event); // Called to process media key events.\n\tExoPlayer getPlayer(); // Returns the player currently being controlled by this view, or null if no player is set.\n\tint getShowTimeoutMs(); // Returns the playback controls timeout.\n\tvoid hide(); // Hides the controller.\n\tboolean isVisible(); // Returns whether the controller is currently visible.\n\tvoid onAttachedToWindow();\n\tvoid onDetachedFromWindow();\n\tvoid setFastForwardIncrementMs(int fastForwardMs); // Sets the fast forward increment in milliseconds.\n\tvoid setPlayer(ExoPlayer player); // Sets the ExoPlayer to control.\n\tvoid setRewindIncrementMs(int rewindMs); // Sets the rewind increment in milliseconds.\n\tvoid setSeekDispatcher(PlaybackControlView.SeekDispatcher seekDispatcher); // Sets the PlaybackControlView.SeekDispatcher.\n\tvoid setShowTimeoutMs(int showTimeoutMs); // Sets the playback controls timeout.\n\tvoid setVisibilityListener(PlaybackControlView.VisibilityListener listener); // Sets the PlaybackControlView.VisibilityListener.\n\tvoid show(); // Shows the playback controls.\n}"}
{"index": 11335, "repo": "spring-context-6.0.11", "des": "Strategy interface for creating ApplicationListener for methods annotated with EventListener.", "code": "public interface EventListenerFactory {\n\tApplicationListener<?> createApplicationListener(String beanName, Class<?> type, Method method); // Create an ApplicationListener for the specified method.\n\tboolean supportsMethod(Method method); // Specify if this factory supports the specified Method.\n}"}
{"index": 10361, "repo": "spring-core-6.0.11", "des": "A hint that describes the need to access a ResourceBundle.", "code": "public final class ResourceBundleHint extends Object implements ConditionalHint {\n\tboolean equals(Object o);\n\tString getBaseName(); // Return the baseName of the resource bundle.\n\tTypeReference getReachableType(); // Return the type that should be reachable for this hint to apply, or null if this hint should always been applied.\n}"}
{"index": 11803, "repo": "spring-kafka-3.0.9", "des": "Handler for the provided back off time, listener container and exception.", "code": "public interface BackOffHandler {\n\tdefault void onNextBackOff(MessageListenerContainer container, Exception exception, long nextBackOff); // Perform the next back off.\n\tdefault void onNextBackOff(MessageListenerContainer container, org.apache.kafka.common.TopicPartition partition, long nextBackOff); // Perform the next back off for a partition.\n}"}
{"index": 18684, "repo": "opencms-gwt-15.0", "des": "Common interface for enabling/disabling different types of toolbars when using the touch-only mode of the page editor.", "code": "Interface I_CmsElementToolbarContext {\n\tvoid activateToolbarContext(); // Show the toolbar.\n\tvoid deactivateToolbarContext(); // Hide the toolbar.\n}"}
{"index": 16085, "repo": "shiro-web-2.0.0-alpha-2", "des": "A FilterChainResolver that resolves FilterChains based on url path matching, as determined by a configurable PathMatcher.", "code": "public class PathMatchingFilterChainResolver extends Object implements FilterChainResolver {\n\tjavax.servlet.FilterChain getChain(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain originalChain); // Returns the filter chain that should be executed for the given request, or null if the original chain should be used.\n\tFilterChainManager getFilterChainManager();\n\torg.apache.shiro.util.PatternMatcher getPathMatcher(); // Returns the PatternMatcher used when determining if an incoming request's path matches a configured filter chain.\n\tprotected String getPathWithinApplication(javax.servlet.ServletRequest request); // Merely returns WebUtils.getPathWithinApplication(request) and can be overridden by subclasses for custom request-to-application-path resolution behavior.\n\tprotected boolean pathMatches(String pattern, String path); // Returns true if an incoming request path (the path argument) matches a configured filter chain path (the pattern argument), false otherwise.\n\tvoid setFilterChainManager(FilterChainManager filterChainManager);\n\tvoid setPathMatcher(org.apache.shiro.util.PatternMatcher pathMatcher); // Sets the PatternMatcher used when determining if an incoming request's path matches a configured filter chain.\n}"}
{"index": 8250, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.", "code": "Class ProviderBasedWsdl4jDefinition {\n\tvoid afterPropertiesSet();\n\tBindingsProvider getBindingsProvider(); // Returns the BindingsProvider for this definition.\n\tImportsProvider getImportsProvider(); // Returns the ImportsProvider for this definition.\n\tMessagesProvider getMessagesProvider(); // Returns the MessagesProvider for this definition.\n\tPortTypesProvider getPortTypesProvider(); // Returns the PortTypesProvider for this definition.\n\tServicesProvider getServicesProvider(); // Returns the ServicesProvider for this definition.\n\tString getTargetNamespace(); // Returns the target namespace for the WSDL definition.\n\tTypesProvider getTypesProvider(); // Returns the TypesProvider for this definition.\n\tvoid setBindingsProvider(BindingsProvider bindingsProvider); // Sets the BindingsProvider for this definition.\n\tvoid setImportsProvider(ImportsProvider importsProvider); // Sets the ImportsProvider for this definition.\n\tvoid setMessagesProvider(MessagesProvider messagesProvider); // Sets the MessagesProvider for this definition.\n\tvoid setPortTypesProvider(PortTypesProvider portTypesProvider); // Sets the PortTypesProvider for this definition.\n\tvoid setServicesProvider(ServicesProvider servicesProvider); // Sets the ServicesProvider for this definition.\n\tvoid setTargetNamespace(String targetNamespace); // Sets the target namespace used for this definition.\n\tvoid setTypesProvider(TypesProvider typesProvider); // Sets the TypesProvider for this definition.\n}"}
{"index": 4010, "repo": "zookeeper-3.8.2", "des": "Utility class to limit the number of concurrent syncs from a leader to observers and followers or from a follower to observers.", "code": "Class LearnerSyncThrottler {\n\tprotected void beginSync(boolean essential); // Indicates that a new sync is about to be sent.\n\tvoid endSync(); // Indicates that a sync has been completed.\n\tint getSyncInProgress();\n\tvoid setMaxConcurrentSyncs(int maxConcurrentSyncs);\n}"}
{"index": 1922, "repo": "hadoop-hdfs-3.3.6", "des": "This class represents replicas being written.", "code": "Class ReplicaBeingWritten {\n\tboolean equals(Object o);\n\tHdfsServerConstants.ReplicaState getState(); // Get the replica state\n\tlong getVisibleLength(); // Get the number of bytes that are visible to readers\n}"}
{"index": 4823, "repo": "hadoop-common-3.3.4", "des": "Utility operations convert IO Statistics sources/instances to strings, especially for robustly logging.", "code": "Class IOStatisticsLogging {\n\tstatic Object demandStringifyIOStatistics(IOStatistics statistics); // On demand stringifier of an IOStatistics instance.\n\tstatic Object demandStringifyIOStatisticsSource(IOStatisticsSource source); // On demand stringifier of an IOStatisticsSource instance.\n\tstatic String ioStatisticsSourceToString(Object source); // Extract the statistics from a source object -or \"\" if it is not an instance of IOStatistics, IOStatisticsSource or the retrieved statistics are null.\n\tstatic String ioStatisticsToPrettyString(IOStatistics statistics); // Convert IOStatistics to a string form, with all the metrics sorted and empty value stripped.\n\tstatic String ioStatisticsToString(IOStatistics statistics); // Convert IOStatistics to a string form.\n\tstatic void logIOStatisticsAtDebug(org.slf4j.Logger log, String message, Object source); // Extract any statistics from the source and log at debug, if the log is set to log at debug.\n\tstatic void logIOStatisticsAtDebug(String message, Object source); // Extract any statistics from the source and log to this class's log at debug, if the log is set to log at debug.\n\tstatic void logIOStatisticsAtLevel(org.slf4j.Logger log, String level, Object source); // A method to log IOStatistics from a source at different levels.\n}"}
{"index": 2028, "repo": "hive-exec-4.0.0-alpha-2", "des": "DirCopyTask, mainly to be used to copy External table data.", "code": "Class DirCopyTask {\n\tboolean canExecuteInParallel();\n\tint execute(); // This method is overridden in each Task.\n\tString getName();\n\tStageType getType(); // Should be overridden to return the type of the specific task among the types in StageType.\n}"}
{"index": 9701, "repo": "commons-math3-3.6.1", "des": "Parametric function where the input array contains the parameters of the logit function, ordered as follows: Lower bound Higher bound .", "code": "Class Logit.Parametric {\n\tdouble[] gradient(double x, double... param); // Computes the value of the gradient at x.\n\tdouble value(double x, double... param); // Computes the value of the logit at x.\n}"}
{"index": 7029, "repo": "calcite-core-1.34.0", "des": "Rule that reduces decimal operations (such as casts or arithmetic) into operations involving more primitive types (such as longs and doubles).", "code": "Class ReduceDecimalsRule {\n\t@Nullable Convention getOutConvention(); // Returns the convention of the result of firing this rule, null if not known.\n\tvoid onMatch(RelOptRuleCall call); // Receives notification about a rule match.\n}"}
{"index": 186, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns true if none of the predicates return true.", "code": "Class NonePredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning false if any stored predicate returns false.\n\tstatic <T> Predicate<T> nonePredicate(Collection<? extends Predicate<? super T>> predicates); // Factory to create the predicate.\n\tstatic <T> Predicate<T> nonePredicate(Predicate<? super T>... predicates); // Factory to create the predicate.\n}"}
{"index": 8365, "repo": "hive-common-4.0.0-alpha-2", "des": "This interface defines the functions needed by the walkers and dispatchers.", "code": "Interface Node {\n\tList<? extends Node> getChildren(); // Gets the vector of children nodes.\n\tString getName(); // Gets the name of the node.\n}"}
{"index": 9476, "repo": "curator-recipes-5.5.0", "des": "How to handle listeners when the latch is closed.", "code": "Enum LeaderLatch.CloseMode {\n\tstatic LeaderLatch.CloseMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic LeaderLatch.CloseMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2454, "repo": "exoplayer-r2.3.1", "des": "A bandwidth based adaptive TrackSelection, whose selected track is updated to be the one of highest quality given the current network conditions and the state of the buffer.", "code": "Class AdaptiveTrackSelection {\n\tint evaluateQueueSize(long playbackPositionUs, java.util.List<? extends MediaChunk> queue); // May be called periodically by sources that load media in discrete MediaChunks and support discarding of buffered chunks in order to re-buffer using a different selected track.\n\tint getSelectedIndex(); // Returns the index of the selected track.\n\tjava.lang.Object getSelectionData(); // Returns optional data associated with the current track selection.\n\tint getSelectionReason(); // Returns the reason for the current track selection.\n\tvoid updateSelectedTrack(long bufferedDurationUs); // Updates the selected track.\n}"}
{"index": 3386, "repo": "hadoop-azure-3.3.6", "des": "Class to manage delegation token operations by making rest call to remote service.", "code": "Class RemoteWasbDelegationTokenManager {\n\tvoid cancelDelegationToken(org.apache.hadoop.security.token.Token<?> token); // Cancel the delegation token\n\torg.apache.hadoop.security.token.Token<org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier> getDelegationToken(String renewer); // Get Delegation token\n\tlong renewDelegationToken(org.apache.hadoop.security.token.Token<?> token); // Renew the delegation token\n}"}
{"index": 17900, "repo": "spring-web-6.0.11", "des": "Builder for mutating an existing ServerHttpRequest.", "code": "public static interface ServerHttpRequest.Builder {\n\tServerHttpRequest build(); // Build a ServerHttpRequest decorator with the mutated properties.\n\tServerHttpRequest.Builder contextPath(String contextPath); // Set the contextPath to use.\n\tServerHttpRequest.Builder header(String headerName, String... headerValues); // Set or override the specified header values under the given name.\n\tServerHttpRequest.Builder headers(Consumer<HttpHeaders> headersConsumer); // Manipulate request headers.\n\tServerHttpRequest.Builder method(HttpMethod httpMethod); // Set the HTTP method to return.\n\tServerHttpRequest.Builder path(String path); // Set the path to use instead of the \"rawPath\" of the URI of the request with the following conditions: If uri is also set, the path given here overrides the path of the given URI.\n\tServerHttpRequest.Builder remoteAddress(InetSocketAddress remoteAddress); // Set the address of the remote client.\n\tServerHttpRequest.Builder sslInfo(SslInfo sslInfo); // Set the SSL session information.\n\tServerHttpRequest.Builder uri(URI uri); // Set the URI to use with the following conditions: If path is also set, it overrides the path of the URI provided here.\n}"}
{"index": 15770, "repo": "camel-api-4.0.0-RC1", "des": "Finder to find factories from the resource classpath, usually META-INF/services/org/apache/camel/.", "code": "public interface FactoryFinder {\n\tvoid clear(); // Clear the resolver state from previous scans.\n\tOptional<Class<?>> findClass(String key); // Finds the given factory class using the key to lookup.\n\tOptional<Class<?>> findOptionalClass(String key); // Finds the optional factory class using the key to lookup.\n\tString getResourcePath(); // Gets the resource classpath.\n\tOptional<Object> newInstance(String key); // Creates a new class instance using the key to lookup\n\t<T> Optional<T> newInstance(String key, Class<T> type); // Creates a new class instance using the key to lookup\n}"}
{"index": 14623, "repo": "spring-security-web-6.1.2", "des": "An implementation of the CsrfTokenRequestHandler interface that is capable of masking the value of the CsrfToken on each request and resolving the raw token value from the masked value as either a header or parameter value of the request.", "code": "public final class XorCsrfTokenRequestAttributeHandler extends CsrfTokenRequestAttributeHandler {\n\tvoid handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, Supplier<CsrfToken> deferredCsrfToken); // Handles a request using a CsrfToken.\n\tString resolveCsrfTokenValue(jakarta.servlet.http.HttpServletRequest request, CsrfToken csrfToken); // Returns the token value resolved from the provided HttpServletRequest and CsrfToken or null if not available.\n\tvoid setSecureRandom(SecureRandom secureRandom); // Specifies the SecureRandom used to generate random bytes that are used to mask the value of the CsrfToken on each request.\n}"}
{"index": 10710, "repo": "spring-tx-6.0.11", "des": "Default implementation of the ReactiveTransaction interface, used by AbstractReactiveTransactionManager.", "code": "public class GenericReactiveTransaction extends Object implements ReactiveTransaction {\n\tObject getSuspendedResources(); // Return the holder for resources that have been suspended for this transaction, if any.\n\tObject getTransaction(); // Return the underlying transaction object.\n\tboolean hasTransaction(); // Return whether there is an actual transaction active.\n\tboolean isCompleted(); // Return whether this transaction is completed, that is, whether it has already been committed or rolled back.\n\tboolean isDebug(); // Return whether the progress of this transaction is debugged.\n\tboolean isNewSynchronization(); // Return if a new transaction synchronization has been opened for this transaction.\n\tboolean isNewTransaction(); // Return whether the present transaction is new; otherwise participating in an existing transaction, or potentially not running in an actual transaction in the first place.\n\tboolean isReadOnly(); // Return if this transaction is defined as read-only transaction.\n\tboolean isRollbackOnly(); // Determine the rollback-only flag via checking this ReactiveTransactionStatus.\n\tvoid setCompleted(); // Mark this transaction as completed, that is, committed or rolled back.\n\tvoid setRollbackOnly(); // Set the transaction rollback-only.\n}"}
{"index": 1290, "repo": "ignite-core-2.15.0", "des": "Arguments for task VisorComputeCancelSessionsTask.", "code": "Class VisorComputeCancelSessionTaskArg {\n\tIgniteUuid getSessionId();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 10321, "repo": "spring-core-6.0.11", "des": "Native image context as defined in GraalVM's ImageInfo.", "code": "public static enum NativeDetector.Context extends Enum<NativeDetector.Context> {\n\tstatic NativeDetector.Context valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic NativeDetector.Context[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 12784, "repo": "spring-data-mongodb-4.1.2", "des": "Common base class for usage with both MongoClients defining common properties such as database name and exception translator.", "code": "public abstract class MongoDatabaseFactorySupport<C> extends Object implements MongoDatabaseFactory {\n\tprotected abstract void closeClient(); // Close the client instance.\n\tvoid destroy();\n\tprotected abstract com.mongodb.client.MongoDatabase doGetMongoDatabase(String dbName); // Get the actual MongoDatabase from the client.\n\tprotected String getDefaultDatabaseName();\n\tPersistenceExceptionTranslator getExceptionTranslator(); // Exposes a shared MongoExceptionTranslator.\n\tprotected C getMongoClient();\n\tcom.mongodb.client.MongoDatabase getMongoDatabase(); // Obtain a MongoDatabase from the underlying factory.\n\tcom.mongodb.client.MongoDatabase getMongoDatabase(String dbName); // Obtain a MongoDatabase instance to access the database with the given name.\n\tvoid setWriteConcern(com.mongodb.WriteConcern writeConcern); // Configures the WriteConcern to be used on the MongoDatabase instance being created.\n\tMongoDatabaseFactory withSession(com.mongodb.client.ClientSession session); // Obtain a ClientSession bound instance of MongoDatabaseFactory returning MongoDatabase instances that are aware and bound to the given session.\n}"}
{"index": 10261, "repo": "spring-core-6.0.11", "des": "Implementation of BackOff that increases the back off period for each retry attempt.", "code": "public class ExponentialBackOff extends Object implements BackOff {\n\tlong getInitialInterval(); // Return the initial interval in milliseconds.\n\tlong getMaxElapsedTime(); // Return the maximum elapsed time in milliseconds after which a call to BackOffExecution.nextBackOff() returns BackOffExecution.STOP.\n\tlong getMaxInterval(); // Return the maximum back off time.\n\tdouble getMultiplier(); // Return the value to multiply the current interval by for each retry attempt.\n\tvoid setInitialInterval(long initialInterval); // The initial interval in milliseconds.\n\tvoid setMaxElapsedTime(long maxElapsedTime); // The maximum elapsed time in milliseconds after which a call to BackOffExecution.nextBackOff() returns BackOffExecution.STOP.\n\tvoid setMaxInterval(long maxInterval); // The maximum back off time.\n\tvoid setMultiplier(double multiplier); // The value to multiply the current interval by for each retry attempt.\n\tBackOffExecution start(); // Start a new back off execution.\n}"}
{"index": 4029, "repo": "zookeeper-3.8.2", "des": "a class that implements prefix matching for components of a filesystem path.", "code": "Class PathTrie {\n\tvoid addPath(String path); // Add a path to the path trie.\n\tvoid clear(); // Clear all nodes in the trie.\n\tvoid deletePath(String path); // Delete a path from the trie.\n\tboolean existsNode(String path); // Return true if the given path exists in the trie, otherwise return false; All paths are relative to the root node.\n\tString findMaxPrefix(String path); // Return the largest prefix for the input path.\n}"}
{"index": 167, "repo": "commons-collections4-4.4", "des": "Decorates another Map to create objects in the map on demand.", "code": "Class LazyMap<K,V> {\n\tV get(Object key);\n\tstatic <K,V> LazyMap<K,V> lazyMap(Map<K,V> map, Factory<? extends V> factory); // Factory method to create a lazily instantiated map.\n\tstatic <V,K> LazyMap<K,V> lazyMap(Map<K,V> map, Transformer<? super K,? extends V> factory); // Factory method to create a lazily instantiated map.\n}"}
{"index": 11995, "repo": "jena-core-4.9.0", "des": "An implementation of the generic RuleContext interface used by the basic forward (BF) rule engine.", "code": "public class BFRuleContext extends Object implements RuleContext {\n\tvoid add(Triple t); // Add a triple to a temporary \"pending\" store, ready to be added to added to the deductions graph and the processing stack later.\n\tvoid addTriple(Triple t); // Add a triple to the stack of triples to waiting to be processed by the rule engine.\n\tboolean contains(Node s, Node p, Node o); // Return true if the triple pattern is already in either the graph or the stack.\n\tboolean contains(Triple t); // Return true if the triple is already in either the graph or the stack.\n\tClosableIterator<Triple> find(Node s, Node p, Node o); // In some formulations the context includes deductions that are not yet visible to the underlying graph but need to be checked for.\n\tvoid flushPending(); // Take all the pending triples and add them to both the given graph and to the processing stack.\n\tBindingEnvironment getEnv(); // Returns the current variable binding environment for the current rule.\n\tBindingStack getEnvStack(); // Variant of the generic getEnv interface specific to the basic forward rule system.\n\tInfGraph getGraph(); // Returns the graph.\n\tTriple getNextTriple(); // Return the next triple to be added to the graph, removing it from the stack.\n\tRule getRule(); // Returns the rule.\n\tvoid remove(Triple t); // Remove a triple from the deduction graph (and the original graph if relevant).\n\tvoid resetEnv(int newSize); // Reset the binding environment back to empty.\n\tvoid setRule(Rule rule); // Sets the rule.\n\tvoid silentAdd(Triple t); // Assert a new triple in the deduction graph, bypassing any processing machinery.\n}"}
{"index": 7191, "repo": "calcite-core-1.34.0", "des": "Implementation of SqlConformance that delegates all methods to another object.", "code": "Class SqlDelegatingConformance {\n\tboolean allowAliasUnnestItems(); // Whether directly alias array items in UNNEST.\n\tboolean allowNiladicParentheses(); // Whether to allow parentheses to be specified in calls to niladic functions and procedures (that is, functions and procedures with no parameters).\n\tboolean isBangEqualAllowed(); // Whether the bang-equal token != is allowed as an alternative to <> in the parser.\n\tboolean isFromRequired(); // Whether FROM clause is required in a SELECT statement.\n\tboolean isGroupByAlias(); // Whether to allow aliases from the SELECT clause to be used as column names in the GROUP BY clause.\n\tboolean isGroupByOrdinal(); // Whether GROUP BY 2 is interpreted to mean 'group by the 2nd column in the select list'.\n\tboolean isHavingAlias(); // Whether to allow aliases from the SELECT clause to be used as column names in the HAVING clause.\n\tboolean isInsertSubsetColumnsAllowed(); // Whether to allow INSERT (or UPSERT) with no column list but fewer values than the target table.\n\tboolean isMinusAllowed(); // Whether MINUS is allowed as an alternative to EXCEPT in the parser.\n\tboolean isSortByAlias(); // Whether 'ORDER BY x' is interpreted to mean 'sort by the select list item whose alias is x' even if there is a column called x.\n\tboolean isSortByAliasObscures(); // Whether \"empno\" is invalid in \"select empno as x from emp order by empno\" because the alias \"x\" obscures it.\n\tboolean isSortByOrdinal(); // Whether 'ORDER BY 2' is interpreted to mean 'sort by the 2nd column in the select list'.\n\tboolean isValueAllowed(); // Whether VALUE is allowed as an alternative to VALUES in the parser.\n\tSqlLibrary semantics(); // Controls the behavior of operators that are part of Standard SQL but nevertheless have different behavior in different databases.\n}"}
{"index": 13673, "repo": "spring-webmvc-6.0.11", "des": "Abstract base class for VersionStrategy implementations.", "code": "public abstract class AbstractVersionStrategy extends Object implements VersionStrategy {\n\tString addVersion(String requestPath, String version); // Add a version to the given request path.\n\tString extractVersion(String requestPath); // Extract the resource version from the request path.\n\tVersionPathStrategy getVersionPathStrategy();\n\tString removeVersion(String requestPath, String version); // Remove the version from the request path.\n}"}
{"index": 1309, "repo": "ignite-core-2.15.0", "des": "Data transfer object that contains scope, label, sampling rate and set of included scopes.", "code": "Class VisorTracingConfigurationItem {\n\tboolean equals(Object o);\n\tSet<Scope> includedScopes();\n\tString label();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tDouble samplingRate();\n\tScope scope();\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 7093, "repo": "calcite-core-1.34.0", "des": "RelTraitDef represents a class of RelTraits.", "code": "Class RelTraitDef<T extends RelTrait> {\n\tabstract boolean canConvert(RelOptPlanner planner, T fromTrait, T toTrait); // Tests whether the given RelTrait can be converted to another RelTrait.\n\tT canonize(T trait); // Takes an arbitrary RelTrait and returns the canonical representation of that RelTrait.\n\tabstract @Nullable RelNode convert(RelOptPlanner planner, RelNode rel, T toTrait, boolean allowInfiniteCostConverters); // Converts the given RelNode to the given RelTrait.\n\tvoid deregisterConverterRule(RelOptPlanner planner, ConverterRule converterRule); // Provides notification that a particular ConverterRule has been de-registered from a RelOptPlanner.\n\tabstract T getDefault(); // Returns the default member of this trait.\n\tabstract String getSimpleName(); // Returns a simple name for this RelTraitDef (for use in RelNode.explain(org.apache.calcite.rel.RelWriter)).\n\tabstract Class<T> getTraitClass(); // Returns the specific RelTrait type associated with this RelTraitDef.\n\tboolean multiple(); // Whether a relational expression may possess more than one instance of this trait simultaneously.\n\tvoid registerConverterRule(RelOptPlanner planner, ConverterRule converterRule); // Provides notification of the registration of a particular ConverterRule with a RelOptPlanner.\n}"}
{"index": 1522, "repo": "pdfbox-3.0.0-beta1", "des": "The mode to use when merging documents: OPTIMIZE_RESOURCES_MODE Optimizes resource handling such as closing documents early.", "code": "Enum PDFMergerUtility.DocumentMergeMode {\n\tstatic PDFMergerUtility.DocumentMergeMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PDFMergerUtility.DocumentMergeMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2529, "repo": "exoplayer-r2.3.1", "des": "Provides track information for each renderer.", "code": "Class MappingTrackSelector.MappedTrackInfo {\n\tint getAdaptiveSupport(int rendererIndex, int groupIndex, boolean includeCapabilitiesExceededTracks); // Returns the extent to which the renderer supports adaptation between supported tracks in a specified TrackGroup.\n\tint getAdaptiveSupport(int rendererIndex, int groupIndex, int[] trackIndices); // Returns the extent to which the renderer supports adaptation between specified tracks within a TrackGroup.\n\tint getRendererSupport(int rendererIndex); // Returns the extent to which a renderer can support playback of the tracks associated to it.\n\tint getTrackFormatSupport(int rendererIndex, int groupIndex, int trackIndex); // Returns the extent to which the format of an individual track is supported by the renderer.\n\tTrackGroupArray getTrackGroups(int rendererIndex); // Returns the array of TrackGroups associated to the renderer at a specified index.\n\tint getTrackTypeRendererSupport(int trackType); // Returns the best level of support obtained from getRendererSupport(int) for all renderers of the specified track type.\n\tTrackGroupArray getUnassociatedTrackGroups(); // Returns the TrackGroups not associated with any renderer.\n}"}
{"index": 11872, "repo": "spring-kafka-3.0.9", "des": "An event that is emitted when a container is idle if the container is configured to do so.", "code": "public class ListenerContainerIdleEvent extends KafkaEvent {\n\torg.apache.kafka.clients.consumer.Consumer<?,?> getConsumer(); // Retrieve the consumer.\n\tlong getIdleTime(); // How long the container has been idle.\n\tString getListenerId(); // The id of the listener (if @KafkaListener) or the container bean name.\n\tCollection<org.apache.kafka.common.TopicPartition> getTopicPartitions(); // The TopicPartitions the container is listening to.\n\tboolean isPaused(); // Return true if the consumer was paused at the time the idle event was published.\n}"}
{"index": 18098, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the PortTypesProvider interface that is based on suffixes.", "code": "public class SuffixBasedPortTypesProvider extends AbstractPortTypesProvider {\n\tString getFaultSuffix(); // Returns the suffix used to detect fault elements in the schema.\n\tprotected String getOperationName(javax.wsdl.Message message); // Template method that returns the name of the operation coupled to the given Message.\n\tString getRequestSuffix(); // Returns the suffix used to detect request elements in the schema.\n\tString getResponseSuffix(); // Returns the suffix used to detect response elements in the schema.\n\tprotected boolean isFaultMessage(javax.wsdl.Message message); // Indicates whether the given name name should be included as Fault message in the definition.\n\tprotected boolean isInputMessage(javax.wsdl.Message message); // Indicates whether the given name name should be included as Input message in the definition.\n\tprotected boolean isOutputMessage(javax.wsdl.Message message); // Indicates whether the given name name should be included as Output message in the definition.\n\tvoid setFaultSuffix(String faultSuffix); // Sets the suffix used to detect fault elements in the schema.\n\tvoid setRequestSuffix(String requestSuffix); // Sets the suffix used to detect request elements in the schema.\n\tvoid setResponseSuffix(String responseSuffix); // Sets the suffix used to detect response elements in the schema.\n}"}
{"index": 3889, "repo": "hbase-client-3.0.0-alpha-4", "des": "Accessor for all SaslAuthenticationProvider instances.", "code": "Class SaslClientAuthenticationProviders {\n\tstatic SaslClientAuthenticationProviders getInstance(org.apache.hadoop.conf.Configuration conf); // Returns a singleton instance of SaslClientAuthenticationProviders.\n\tint getNumRegisteredProviders(); // Returns the number of providers that have been registered.\n\tPair<SaslClientAuthenticationProvider,org.apache.hadoop.security.token.Token<? extends org.apache.hadoop.security.token.TokenIdentifier>> getSimpleProvider(); // Returns the provider and token pair for SIMPLE authentication.\n\tstatic void reset(); // Removes the cached singleton instance of SaslClientAuthenticationProviders.\n\tPair<SaslClientAuthenticationProvider,org.apache.hadoop.security.token.Token<? extends org.apache.hadoop.security.token.TokenIdentifier>> selectProvider(String clusterId, User clientUser); // Chooses the best authentication provider and corresponding token given the HBase cluster identifier and the user.\n}"}
{"index": 11666, "repo": "spring-websocket-6.0.11", "des": "Represents a WebSocket extension as defined in the RFC 6455.", "code": "public class WebSocketExtension extends Object {\n\tboolean equals(Object other);\n\tString getName(); // Return the name of the extension (never null or empty).\n\tMap<String,String> getParameters(); // Return the parameters of the extension (never null).\n\tstatic List<WebSocketExtension> parseExtensions(String extensions); // Parse the given, comma-separated string into a list of WebSocketExtension objects.\n}"}
{"index": 8591, "repo": "commons-io-2.13.0", "des": "An unsynchronized version of BufferedInputStream, not thread-safe.", "code": "Class UnsynchronizedBufferedInputStream {\n\tint available(); // Returns the number of bytes that are available before this stream will block.\n\tvoid close(); // Closes this stream.\n\tvoid mark(int readlimit); // Sets a mark position in this stream.\n\tboolean markSupported(); // Indicates whether BufferedInputStream supports the mark() and reset() methods.\n\tint read(); // Reads a single byte from this stream and returns it as an integer in the range from 0 to 255.\n\tint read(byte[] buffer, int offset, int length); // Reads at most length bytes from this stream and stores them in byte array buffer starting at offset offset.\n\tvoid reset(); // Resets this stream to the last marked location.\n\tlong skip(long amount); // Skips amount number of bytes in this stream.\n}"}
{"index": 15257, "repo": "spring-boot-3.1.1", "des": "Detects beans that initialize an SQL database.", "code": "public interface DatabaseInitializerDetector extends org.springframework.core.Ordered {\n\tSet<String> detect(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory); // Detect beans defined in the given beanFactory that initialize a DataSource.\n\tdefault void detectionComplete(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory, Set<String> dataSourceInitializerNames); // Callback indicating that all known DataSourceInitializerDetectors have been called and detection of beans that initialize a DataSource is complete.\n\tdefault int getOrder();\n}"}
{"index": 934, "repo": "ignite-core-2.15.0", "des": "Statistics store implementation to log unexpected calls.", "code": "Class IgniteStatisticsDummyStoreImpl {\n\tvoid clearAllStatistics(); // Clear statistics of any type for any objects;\n\tvoid clearLocalPartitionsStatistics(StatisticsKey key); // Clear partition statistics for specified object.\n\tvoid clearLocalPartitionsStatistics(StatisticsKey key, Collection<Integer> partIds); // Clear partitions statistics.\n\tvoid clearLocalPartitionStatistics(StatisticsKey key, int partId); // Clear partition statistics.\n\tvoid clearObsolescenceInfo(StatisticsKey key, Collection<Integer> partIds); // Remove obsolescence info for the given key and partitions (if specified).\n\tMap<StatisticsKey,Collection<ObjectPartitionStatisticsImpl>> getAllLocalPartitionsStatistics(String schema); // Get all local partition statistics.\n\tCollection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatisticsKey key); // Get local partition statistics by specified object.\n\tObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatisticsKey key, int partId); // Get partition statistics.\n\tMap<StatisticsKey,IntMap<ObjectPartitionStatisticsObsolescence>> loadAllObsolescence(); // Load all obsolescence info from store.\n\tCollection<Integer> loadLocalPartitionMap(StatisticsKey key); // Load partitions map by key.\n\tvoid replaceLocalPartitionsStatistics(StatisticsKey key, Collection<ObjectPartitionStatisticsImpl> statistics); // Replace all tables partition statistics with specified ones.\n\tvoid saveLocalPartitionStatistics(StatisticsKey key, ObjectPartitionStatisticsImpl statistics); // Save partition statistics.\n\tvoid saveObsolescenceInfo(Map<StatisticsKey,IntMap<ObjectPartitionStatisticsObsolescence>> obsolescence);\n\tvoid saveObsolescenceInfo(StatisticsKey key, int partId, ObjectPartitionStatisticsObsolescence partObs); // Save obsolescence info.\n}"}
{"index": 5398, "repo": "druid-processing-26.0.0", "des": "This class exists to \"decorate\" a rows and columns such that it pretends to exist in a new ordering.", "code": "Class RearrangedRowsAndColumns {\n\t<T> T as(Class<T> clazz); // Asks the RowsAndColumns to return itself as a concrete implementation of a specific interface.\n\tColumn findColumn(String name); // Finds a column by name.\n\tCollection<String> getColumnNames(); // The set of column names available from the RowsAndColumns\n\tint numRows(); // The number of rows in the RowsAndColumns object\n}"}
{"index": 1222, "repo": "ignite-core-2.15.0", "des": "This class allows defining system data region configuration with various parameters for Apache Ignite page memory (see DataStorageConfiguration.", "code": "Class SystemDataRegionConfiguration {\n\tlong getInitialSize(); // Initial size of a data region reserved for system cache.\n\tlong getMaxSize(); // Maximum data region size in bytes reserved for system cache.\n\tSystemDataRegionConfiguration setInitialSize(long initSize); // Sets initial size of a data region reserved for system cache.\n\tSystemDataRegionConfiguration setMaxSize(long maxSize); // Sets maximum data region size in bytes reserved for system cache.\n}"}
{"index": 8800, "repo": "graal-sdk-1.0.0-rc7", "des": "Utility class representing a pair of values.", "code": "Class Pair<L,R> {\n\tstatic <L,R> Pair<L,R> create(L left, R right); // Constructs a pair with its left value being left, and its right value being right, or returns an empty pair if both inputs are null.\n\tstatic <L,R> Pair<L,R> createLeft(L left); // Constructs a pair with its left value being left, or returns an empty pair if left is null.\n\tstatic <L,R> Pair<L,R> createRight(R right); // Constructs a pair with its right value being right, or returns an empty pair if right is null.\n\tstatic <L,R> Pair<L,R> empty(); // Returns an empty pair.\n\tboolean equals(Object obj);\n\tL getLeft(); // Returns the left value of this pair.\n\tR getRight(); // Returns the right value of this pair.\n}"}
{"index": 2267, "repo": "hive-exec-4.0.0-alpha-2", "des": "SplitGrouper is used to combine splits based on head room and locality.", "code": "Class SplitGrouper {\n\tList<org.apache.tez.dag.api.TaskLocationHint> createTaskLocationHints(org.apache.hadoop.mapred.InputSplit[] splits, boolean consistentLocations); // Create task location hints from a set of input splits\n\tcom.google.common.collect.Multimap<Integer,org.apache.hadoop.mapred.InputSplit> generateGroupedSplits(org.apache.hadoop.mapred.JobConf jobConf, org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.mapred.InputSplit[] splits, float waves, int availableSlots, org.apache.hadoop.mapred.split.SplitLocationProvider locationProvider); // Generate groups of splits, separated by schema evolution boundaries\n\tcom.google.common.collect.Multimap<Integer,org.apache.hadoop.mapred.InputSplit> generateGroupedSplits(org.apache.hadoop.mapred.JobConf jobConf, org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.mapred.InputSplit[] splits, float waves, int availableSlots, String inputName, boolean groupAcrossFiles, org.apache.hadoop.mapred.split.SplitLocationProvider locationProvider); // Generate groups of splits, separated by schema evolution boundaries OR When used from compactor, group splits based on the bucket number of the input files (in this case, splits for same logical bucket but different schema, end up in same group)\n\tcom.google.common.collect.Multimap<Integer,org.apache.hadoop.mapred.InputSplit> group(org.apache.hadoop.conf.Configuration conf, com.google.common.collect.Multimap<Integer,org.apache.hadoop.mapred.InputSplit> bucketSplitMultimap, int availableSlots, float waves, org.apache.hadoop.mapred.split.SplitLocationProvider splitLocationProvider); // group splits for each bucket separately - while evenly filling all the available slots with tasks\n}"}
{"index": 4351, "repo": "beam-sdks-java-core-2.49.0", "des": "A Coder that encodes a joda Duration as a Long using the format of VarLongCoder.", "code": "Class DurationCoder {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\torg.joda.time.ReadableDuration decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(org.joda.time.ReadableDuration value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tTypeDescriptor<org.joda.time.ReadableDuration> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tboolean isRegisterByteSizeObserverCheap(org.joda.time.ReadableDuration value); // Returns whether Coder.registerByteSizeObserver(T, org.apache.beam.sdk.util.common.ElementByteSizeObserver) cheap enough to call for every element, that is, if this Coder can calculate the byte size of the element to be coded in roughly constant time (or lazily).\n\tstatic DurationCoder of();\n\tvoid registerByteSizeObserver(org.joda.time.ReadableDuration value, ElementByteSizeObserver observer); // Notifies the ElementByteSizeObserver about the byte size of the encoded value using this Coder.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 14771, "repo": "spring-data-commons-3.1.2", "des": "Abstraction over a list of parameter value types.", "code": "public class ParameterTypes extends Object {\n\tboolean areValidFor(Method method); // Returns whether the parameter types are valid for the given Method.\n\tboolean equals(Object o);\n\tboolean exactlyMatchParametersOf(Method method); // Returns whether the current parameter types match the given Method's parameters exactly, i.e. they're equal, not only assignable.\n\tprotected Optional<ParameterTypes> getParent();\n\tprotected final Optional<ParameterTypes> getParent(TypeDescriptor tail);\n\tstatic ParameterTypes of(List<TypeDescriptor> types); // Returns the ParameterTypes for the given list of TypeDescriptors.\n\tprotected Optional<ParameterTypes> withLastVarArgs();\n}"}
{"index": 218, "repo": "commons-collections4-4.4", "des": "Decorates another SortedSet to validate that all additions match a specified predicate.", "code": "Class PredicatedSortedSet<E> {\n\tComparator<? super E> comparator();\n\tprotected SortedSet<E> decorated(); // Gets the sorted set being decorated.\n\tE first();\n\tSortedSet<E> headSet(E toElement);\n\tE last();\n\tstatic <E> PredicatedSortedSet<E> predicatedSortedSet(SortedSet<E> set, Predicate<? super E> predicate); // Factory method to create a predicated (validating) sorted set.\n\tSortedSet<E> subSet(E fromElement, E toElement);\n\tSortedSet<E> tailSet(E fromElement);\n}"}
{"index": 16026, "repo": "spring-integration-jms-6.1.2", "des": "A JmsMessageChannelSpec for subscribable AbstractJmsChannels.", "code": "public class JmsMessageChannelSpec<S extends JmsMessageChannelSpec<S,T>,T extends AbstractJmsChannel> extends JmsPollableMessageChannelSpec<S,T> {\n\tS acceptMessagesWhileStopping(boolean acceptMessagesWhileStopping);\n\tS autoStartup(boolean autoStartup);\n\tS cacheLevel(Integer cacheLevel); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n\tS concurrentConsumers(int concurrentConsumers); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer or a SimpleMessageListenerContainer.\n\tS containerType(Class<? extends org.springframework.jms.listener.AbstractMessageListenerContainer> containerType); // Configure the type of the container.\n\tS errorHandler(org.springframework.util.ErrorHandler errorHandler);\n\tS exposeListenerSession(boolean exposeListenerSession);\n\tS idleTaskExecutionLimit(int idleTaskExecutionLimit); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n\tS maxMessagesPerTask(int maxMessagesPerTask); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n\tS maxSubscribers(int maxSubscribers);\n\tS phase(int phase);\n\tS recoveryInterval(long recoveryInterval); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n\tS subscriptionShared(boolean subscriptionShared);\n\tS taskExecutor(Executor taskExecutor); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer or a SimpleMessageListenerContainer.\n\tS transactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n\tS transactionName(String transactionName); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n\tS transactionTimeout(int transactionTimeout); // Only applies if the containerType(Class) is a DefaultMessageListenerContainer.\n}"}
{"index": 8739, "repo": "hadoop-yarn-common-3.3.6", "des": "Values for the %18n dir attribute (case-insensitive).", "code": "Enum HamletSpec.Dir {\n\tstatic HamletSpec.Dir valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HamletSpec.Dir[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13043, "repo": "spring-aop-6.0.11", "des": "Helper for retrieving standard Spring Advisors from a BeanFactory, for use with auto-proxying.", "code": "public class BeanFactoryAdvisorRetrievalHelper extends Object {\n\tList<Advisor> findAdvisorBeans(); // Find all eligible Advisor beans in the current bean factory, ignoring FactoryBeans and excluding beans that are currently in creation.\n\tprotected boolean isEligibleBean(String beanName); // Determine whether the aspect bean with the given name is eligible.\n}"}
{"index": 16961, "repo": "spring-orm-6.0.11", "des": "Helper class featuring methods for JPA EntityManager handling, allowing for reuse of EntityManager instances within transactions.", "code": "public abstract class EntityManagerFactoryUtils extends Object {\n\tstatic void applyTransactionTimeout(Query query, EntityManagerFactory emf); // Apply the current transaction timeout, if any, to the given JPA Query object.\n\tstatic void closeEntityManager(EntityManager em); // Close the given JPA EntityManager, catching and logging any cleanup exceptions thrown.\n\tstatic org.springframework.dao.DataAccessException convertJpaAccessExceptionIfPossible(RuntimeException ex); // Convert the given runtime exception to an appropriate exception from the org.springframework.dao hierarchy.\n\tstatic EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?,?> properties); // Obtain a JPA EntityManager from the given factory.\n\tstatic EntityManager doGetTransactionalEntityManager(EntityManagerFactory emf, Map<?,?> properties, boolean synchronizedWithTransaction); // Obtain a JPA EntityManager from the given factory.\n\tstatic EntityManagerFactory findEntityManagerFactory(org.springframework.beans.factory.ListableBeanFactory beanFactory, String unitName); // Find an EntityManagerFactory with the given name in the given Spring application context (represented as ListableBeanFactory).\n\tstatic EntityManager getTransactionalEntityManager(EntityManagerFactory emf); // Obtain a JPA EntityManager from the given factory.\n\tstatic EntityManager getTransactionalEntityManager(EntityManagerFactory emf, Map<?,?> properties); // Obtain a JPA EntityManager from the given factory.\n}"}
{"index": 10812, "repo": "spring-boot-actuator-3.1.1", "des": "In-memory implementation of HttpExchangeRepository.", "code": "public class InMemoryHttpExchangeRepository extends Object implements HttpExchangeRepository {\n\tvoid add(HttpExchange exchange); // Adds an HttpExchange instance to the repository.\n\tList<HttpExchange> findAll(); // Find all HttpExchange instances contained in the repository.\n\tvoid setCapacity(int capacity); // Set the capacity of the in-memory repository.\n\tvoid setReverse(boolean reverse); // Flag to say that the repository lists exchanges in reverse order.\n}"}
{"index": 13588, "repo": "spring-messaging-6.0.11", "des": "An extended MessageConverter SPI with conversion hint support.", "code": "public interface SmartMessageConverter extends MessageConverter {\n\tObject fromMessage(Message<?> message, Class<?> targetClass, Object conversionHint); // A variant of MessageConverter.fromMessage(Message, Class) which takes an extra conversion context as an argument, allowing to take e.g.\n\tMessage<?> toMessage(Object payload, MessageHeaders headers, Object conversionHint); // A variant of MessageConverter.toMessage(Object, MessageHeaders) which takes an extra conversion context as an argument, allowing to take e.g.\n}"}
{"index": 1226, "repo": "ignite-core-2.15.0", "des": "Message is part of communication via discovery protocol.", "code": "Class TcpConnectionRequestDiscoveryMessage {\n\t@Nullable DiscoveryCustomMessage ackMessage(); // Called when custom message has been handled by all nodes.\n\tint connectionIndex();\n\tDiscoCache createDiscoCache(GridDiscoveryManager mgr, AffinityTopologyVersion topVer, DiscoCache discoCache); // Creates new discovery cache if message caused topology version change.\n\tIgniteUuid id();\n\tboolean isMutable();\n\tUUID receiverNodeId();\n}"}
{"index": 11499, "repo": "spring-restdocs-core-3.0.0", "des": "A Snippet that documents the body of a request.", "code": "public class RequestBodySnippet extends AbstractBodySnippet {\n\tprotected byte[] getContent(Operation operation); // Returns the content of the request or response extracted from the given operation.\n\tprotected MediaType getContentType(Operation operation); // Returns the content type of the request or response extracted from the given operation.\n}"}
{"index": 9024, "repo": "hbase-server-3.0.0-alpha-4", "des": "A SpaceViolationPolicyEnforcement implementation which disables all writes flowing into HBase.", "code": "Class NoWritesViolationPolicyEnforcement {\n\tvoid check(Mutation m); // Checks the given Mutation against this policy.\n\tvoid disable(); // Disables this policy.\n\tvoid enable(); // Enables this policy.\n\tString getPolicyName(); // Returns a logical name for the SpaceViolationPolicy that this enforcement is for.\n}"}
{"index": 1457, "repo": "pdfbox-3.0.0-beta1", "des": "Basic parser for Type 4 functions which is used to build up instruction sequences.", "code": "Class InstructionSequenceBuilder {\n\tInstructionSequence getInstructionSequence(); // Returns the instruction sequence that has been build from the syntactic elements.\n\tstatic InstructionSequence parse(CharSequence text); // Parses the given text into an instruction sequence representing a Type 4 function that can be executed.\n\tstatic int parseInt(String token); // Parses a value of type \"int\".\n\tstatic float parseReal(String token); // Parses a value of type \"real\".\n\tvoid token(CharSequence text); // Called when a token is encountered.\n}"}
{"index": 4190, "repo": "commons-geometry-spherical-1.0", "des": "BSP tree representing regions in 2D spherical space.", "code": "Class RegionBSPTree2S {\n\tIterable<GreatArc> boundaries();\n\tStream<GreatArc> boundaryStream();\n\tprotected AbstractRegionBSPTree.RegionSizeProperties<Point2S> computeRegionSizeProperties();\n\tRegionBSPTree2S copy(); // Return a deep copy of this instance.\n\tprotected RegionBSPTree2S.RegionNode2S createNode();\n\tstatic RegionBSPTree2S empty(); // Return a new, empty BSP tree.\n\tstatic RegionBSPTree2S from(Iterable<GreatArc> boundaries); // Construct a new tree from the given boundaries.\n\tstatic RegionBSPTree2S from(Iterable<GreatArc> boundaries, boolean full); // Construct a new tree from the given boundaries.\n\tstatic RegionBSPTree2S full(); // Return a new, full BSP tree.\n\tList<GreatArc> getBoundaries();\n\tList<GreatArcPath> getBoundaryPaths(); // Get the boundary of the region as a list of connected great arc paths.\n\tprotected void invalidate();\n\tPoint2S project(Point2S pt);\n\tSplit<RegionBSPTree2S> split(Hyperplane<Point2S> splitter);\n\tList<ConvexArea2S> toConvex(); // Return a list of ConvexArea2Ss representing the same region as this instance.\n\tRegionBSPTree2S toTree(); // Return the current instance.\n}"}
{"index": 14304, "repo": "wicket-core-10.0.0-M1", "des": "Supplies the Wicket application with random bytes.", "code": "public interface ISecureRandomSupplier {\n\tSecureRandom getRandom(); // Returns the actual SecureRandom being used as source.\n\tdefault String getRandomBase64(int length); // Returns a url-base64 encoded string with random content, base on length bytes.\n\tdefault byte[] getRandomBytes(int length); // Returns a byte array with random bytes of the given length.\n}"}
{"index": 18215, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Statistics pertaining to the execution of the \"natural id resolution\" query.", "code": "Interface NaturalIdStatistics {\n\tlong getExecutionAvgTime(); // The average amount of time it takes (since last Statistics clearing) for the execution of this \"natural id resolution\" query\n\tlong getExecutionCount(); // Number of times (since last Statistics clearing) the \"natural id resolution\" query has been executed\n\tlong getExecutionMaxTime(); // The maximum amount of time it takes (since last Statistics clearing) for the execution of this \"natural id resolution\" query\n\tlong getExecutionMinTime(); // The minimum amount of time it takes (since last Statistics clearing) for the execution of this \"natural id resolution\" query\n}"}
{"index": 13875, "repo": "spring-webflux-6.0.11", "des": "Static factory methods providing access to built-in implementations of ExchangeFilterFunction for basic authentication, error handling, etc.", "code": "public abstract class ExchangeFilterFunctions extends Object {\n\tstatic ExchangeFilterFunction basicAuthentication(); // Deprecated. as of Spring 5.1 in favor of using HttpHeaders.setBasicAuth(String, String) while building the request.\n\tstatic ExchangeFilterFunction basicAuthentication(String username, String password); // Return a filter that applies HTTP Basic Authentication to the request headers via HttpHeaders.setBasicAuth(String) and HttpHeaders.encodeBasicAuth(String, String, Charset).\n\tstatic ExchangeFilterFunction limitResponseSize(long maxByteCount); // Consume up to the specified number of bytes from the response body and cancel if any more data arrives.\n\tstatic ExchangeFilterFunction statusError(Predicate<org.springframework.http.HttpStatusCode> statusPredicate, Function<ClientResponse,? extends Throwable> exceptionFunction); // Return a filter that generates an error signal when the given HttpStatusCode predicate matches.\n}"}
{"index": 16152, "repo": "spring-data-cassandra-4.1.2", "des": "Object to configure a CQL column specification.", "code": "public class ColumnSpecification extends Object {\n\tColumnSpecification clustered(); // Identifies this column as a clustered key column with default ordering.\n\tColumnSpecification clustered(Ordering order); // Identifies this column as a clustered key column with the given ordering.\n\tColumnSpecification clustered(Ordering order, boolean primary); // Toggles the identification of this column as a clustered key column.\n\tPrimaryKeyType getKeyType();\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getName();\n\tOrdering getOrdering();\n\tcom.datastax.oss.driver.api.core.type.DataType getType();\n\tboolean isStatic();\n\tColumnSpecification keyType(PrimaryKeyType keyType); // Sets the column's keyType.\n\tstatic ColumnSpecification name(com.datastax.oss.driver.api.core.CqlIdentifier name); // Create a new ColumnSpecification for the given name.\n\tstatic ColumnSpecification name(String name); // Create a new ColumnSpecification for the given name.\n\tColumnSpecification ordering(Ordering ordering); // Sets the column's ordering.\n\tColumnSpecification partitioned(); // Identifies this column as a primary key column that is also part of a partition key.\n\tColumnSpecification partitioned(boolean partitioned); // Toggles the identification of this column as a primary key column that also is or is part of a partition key.\n\tColumnSpecification staticColumn(); // Identifies this column as a static column.\n\tString toCql();\n\tStringBuilder toCql(StringBuilder cql);\n\tColumnSpecification type(com.datastax.oss.driver.api.core.type.DataType type); // Sets the column's type.\n}"}
{"index": 3696, "repo": "kafka-streams-3.5.0", "des": "A processor of key-value pair records where keys are immutable.", "code": "Interface FixedKeyProcessor<KIn,VIn,VOut> {\n\tdefault void close(); // Close this processor and clean up any resources.\n\tdefault void init(FixedKeyProcessorContext<KIn,VOut> context); // Initialize this processor with the given context.\n\tvoid process(FixedKeyRecord<KIn,VIn> record); // Process the record.\n}"}
{"index": 19, "repo": "connect-api-3.5.0", "des": "Connectors manage integration of Kafka Connect with another system, either as an input that ingests data into Kafka or an output that passes data to an external system.", "code": "Class Connector {\n\tabstract org.apache.kafka.common.config.ConfigDef config(); // Define the configuration for the connector.\n\tvoid initialize(ConnectorContext ctx); // Initialize this connector, using the provided ConnectorContext to notify the runtime of input configuration changes.\n\tvoid initialize(ConnectorContext ctx, List<Map<String,String>> taskConfigs); // Initialize this connector, using the provided ConnectorContext to notify the runtime of input configuration changes and using the provided set of Task configurations.\n\tvoid reconfigure(Map<String,String> props); // Reconfigure this Connector.\n\tabstract void start(Map<String,String> props); // Start this Connector.\n\tabstract void stop(); // Stop this connector.\n\tabstract Class<? extends Task> taskClass(); // Returns the Task implementation for this Connector.\n\tabstract List<Map<String,String>> taskConfigs(int maxTasks); // Returns a set of configurations for Tasks based on the current configuration, producing at most maxTasks configurations.\n\torg.apache.kafka.common.config.Config validate(Map<String,String> connectorConfigs); // Validate the connector configuration values against configuration definitions.\n}"}
{"index": 6635, "repo": "ignite-indexing-2.15.0", "des": "SQL system view to export SystemView data.", "code": "Class SystemViewLocal<R> {\n\tboolean canGetRowCount(); // Check if the row count can be retrieved quickly.\n\tlong getRowCount(); // Gets row count for this view (or approximated row count, if real value can't be calculated quickly).\n\tlong getRowCountApproximation(); // Gets approximated row count (required to build execution plan).\n\tIterator<org.h2.result.Row> getRows(org.h2.engine.Session ses, org.h2.result.SearchRow first, org.h2.result.SearchRow last); // Gets view content.\n\tprotected Iterator<R> viewIterator(org.h2.result.SearchRow first, org.h2.result.SearchRow last); // System view iterator.\n}"}
{"index": 8422, "repo": "hadoop-aws-3.3.6", "des": "Enumeration of credential types for use in validation methods.", "code": "Enum MarshalledCredentials.CredentialTypeRequired {\n\tString getText();\n\tstatic MarshalledCredentials.CredentialTypeRequired valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic MarshalledCredentials.CredentialTypeRequired[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16492, "repo": "spring-batch-infrastructure-5.0.2", "des": "Implementation of ExceptionHandler based on an Classifier.", "code": "public class LogOrRethrowExceptionHandler extends Object implements ExceptionHandler {\n\tvoid handleException(RepeatContext context, Throwable throwable); // Classify the throwables and decide whether to rethrow based on the result.\n\tvoid setExceptionClassifier(org.springframework.classify.Classifier<Throwable,LogOrRethrowExceptionHandler.Level> exceptionClassifier); // Setter for the Classifier used by this handler.\n}"}
{"index": 1471, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a embedded go-to action that can be executed in a PDF document.", "code": "Class PDActionEmbeddedGoTo {\n\tPDDestination getDestination(); // This will get the destination to jump to.\n\tPDFileSpecification getFile(); // This will get the file in which the destination is located.\n\tOpenMode getOpenInNewWindow(); // This will specify whether to open the destination document in a new window, in the same window, or behave in accordance with the current user preference.\n\tPDTargetDirectory getTargetDirectory(); // Get the target directory.\n\tvoid setDestination(PDDestination d); // This will set the destination to jump to.\n\tvoid setFile(PDFileSpecification fs); // This will set the file in which the destination is located.\n\tvoid setOpenInNewWindow(OpenMode value); // This will specify whether to open the destination document in a new window.\n\tvoid setTargetDirectory(PDTargetDirectory targetDirectory); // Sets the target directory.\n}"}
{"index": 348, "repo": "phoenix-core-5.1.3", "des": "Default implementation used when GlobalMetrics are enabled.", "code": "Class GlobalMetricImpl {\n\tvoid change(long delta); // Change the metric by the specified amount\n\tvoid decrement(); // Decrease the value of metric by 1\n\tString getCurrentMetricState();\n\tMetricType getMetricType();\n\tlong getNumberOfSamples();\n\tlong getValue();\n\tvoid increment(); // Increase the value of metric by 1\n\tvoid reset(); // Reset the internal state.\n}"}
{"index": 14335, "repo": "wicket-core-10.0.0-M1", "des": "An IResourceStream implementation with specific extensions for markup resource streams.", "code": "public class MarkupResourceStream extends Object implements org.apache.wicket.util.resource.IResourceStream, org.apache.wicket.util.resource.IFixedLocationResourceStream {\n\tvoid close();\n\tMarkup getBaseMarkup(); // In case of markup inheritance, the base markup resource.\n\tMarkupResourceStream getBaseMarkupResourceStream(); // Get the resource stream containing the base markup (markup inheritance)\n\tfinal String getCacheKey(); // Gets cacheKey.\n\tContainerInfo getContainerInfo(); // Get the container info associated with the markup\n\tString getContentType();\n\tfinal String getDoctype(); // Gets doctype.\n\tString getEncoding(); // Gets the markup encoding.\n\tInputStream getInputStream();\n\tLocale getLocale();\n\tClass<? extends Component> getMarkupClass(); // Get the actual component class the markup is directly associated with.\n\torg.apache.wicket.util.resource.IResourceStream getResource(); // Gets the resource that contains this markup\n\tString getStyle();\n\tString getVariation();\n\tfinal String getWicketId();\n\tString getWicketNamespace(); // Get the wicket namespace valid for this specific markup\n\tboolean isHtml5();\n\tInstant lastModifiedTime();\n\torg.apache.wicket.util.lang.Bytes length();\n\tString locationAsString();\n\tvoid setBaseMarkup(Markup baseMarkup); // In case of markup inheritance, the base markup.\n\tfinal void setCacheKey(String cacheKey); // Set the cache key\n\tfinal void setDoctype(CharSequence doctype); // Sets doctype.\n\tvoid setLocale(Locale locale);\n\tvoid setStyle(String style);\n\tvoid setVariation(String variation);\n\tfinal void setWicketNamespace(String wicketNamespace); // Sets wicketNamespace.\n}"}
{"index": 14126, "repo": "wicket-core-10.0.0-M1", "des": "Automatically re-renders the component it is attached to via AJAX at a regular interval.", "code": "public class AjaxSelfUpdatingTimerBehavior extends AbstractAjaxTimerBehavior {\n\tprotected void onPostProcessTarget(AjaxRequestTarget target); // Give the subclass a chance to add something to the target, like a javascript effect call.\n\tstatic AjaxSelfUpdatingTimerBehavior onSelfUpdate(Duration interval, org.danekja.java.util.function.serializable.SerializableConsumer<AjaxRequestTarget> onTimer); // Creates an AbstractAjaxTimerBehavior based on lambda expressions\n\tprotected final void onTimer(AjaxRequestTarget target); // Listener method for the AJAX timer event.\n}"}
{"index": 18770, "repo": "lucene-facet-9.7.0", "des": "Returns 3 arrays for traversing the taxonomy: parents: parents[i] denotes the parent of category ordinal i.", "code": "Class ParallelTaxonomyArrays {\n\tabstract int[] children(); // Returns the children array, where children[i] denotes a child of category ordinal i.\n\tabstract int[] parents(); // Returns the parents array, where parents[i] denotes the parent of category ordinal i.\n\tabstract int[] siblings(); // Returns the siblings array, where siblings[i] denotes the sibling of category ordinal i.\n}"}
{"index": 12643, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $first that returns the first element in an array.", "code": "public static class ArrayOperators.First extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tstatic ArrayOperators.First first(Object array); // Returns the first element in the given array.\n\tstatic ArrayOperators.First firstOf(String fieldReference); // Returns the first element in the array pointed to by the given field reference.\n\tstatic ArrayOperators.First firstOf(AggregationExpression expression); // Returns the first element of the array computed by the given expression.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 3310, "repo": "hbase-common-3.0.0-alpha-4", "des": "Wraps an existing DataType implementation as a terminated version of itself.", "code": "Class TerminatedWrapper<T> {\n\tT decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tint encode(PositionedByteRange dst, T val); // Write instance val into buffer dst.\n\tClass<T> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(T val); // Inform consumers how long the encoded byte[] will be.\n\tOrder getOrder(); // Retrieve the sort Order imposed by this data type, or null when natural ordering is not preserved.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n\tboolean isOrderPreserving(); // Indicates whether this instance writes encoded byte[]'s which preserve the natural sort order of the unencoded value.\n\tboolean isSkippable(); // Indicates whether this instance is able to skip over it's encoded value.\n\tint skip(PositionedByteRange src); // Skip src's position forward over one encoded value.\n\tprotected int terminatorPosition(PositionedByteRange src); // Return the position at which term begins within src, or -1 if term is not found.\n}"}
{"index": 6175, "repo": "jackson-databind-2.15.2", "des": "Interface for classes that handle validation of class-name - based subtypes used with Polymorphic Deserialization: both via \"default typing\" and explicit @JsonTypeInfo when using Java Class name as Type Identifier.", "code": "Class PolymorphicTypeValidator {\n\tabstract PolymorphicTypeValidator.Validity validateBaseType(MapperConfig<?> config, JavaType baseType); // Method called when a property with polymorphic value is encountered, and a TypeResolverBuilder is needed.\n\tabstract PolymorphicTypeValidator.Validity validateSubClassName(MapperConfig<?> config, JavaType baseType, String subClassName); // Method called after intended class name for subtype has been read (and in case of minimal class name, expanded to fully-qualified class name) but before attempt is made to look up actual Class or JavaType.\n\tabstract PolymorphicTypeValidator.Validity validateSubType(MapperConfig<?> config, JavaType baseType, JavaType subType); // Method called after class name has been resolved to actual type, in cases where previous call to validateSubClassName(com.fasterxml.jackson.databind.cfg.MapperConfig<?>, com.fasterxml.jackson.databind.JavaType, java.lang.String) returned PolymorphicTypeValidator.Validity.INDETERMINATE.\n}"}
{"index": 14308, "repo": "wicket-core-10.0.0-M1", "des": "The string resource loader interface allows a strategy pattern to be applied to the loading of resource strings for an application.", "code": "public interface IStringResourceLoader {\n\tString loadStringResource(Class<?> clazz, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component class, resource key, locale and style.\n\tString loadStringResource(Component component, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component, resource key, locale and style.\n}"}
{"index": 14359, "repo": "wicket-core-10.0.0-M1", "des": "Represents a localizable static resource.", "code": "public class PackageResource extends AbstractResource implements IStaticCacheableResource {\n\tprotected boolean accept(String path); // Checks whether access is granted for this resource.\n\tprotected byte[] compressResponse(IResource.Attributes attributes, byte[] original); // Compresses the response if its is eligible and there is a configured compressor\n\tboolean equals(Object obj);\n\tstatic boolean exists(Class<?> scope, String path, Locale locale, String style, String variation); // Checks whether a resource for a given set of criteria exists.\n\tstatic boolean exists(ResourceReference.Key key); // Checks whether a resource for a given set of criteria exists.\n\tSerializable getCacheKey(); // get unique caching key for the resource stream produced by IStaticCacheableResource.getResourceStream()\n\tboolean getCompress();\n\tprotected ITextResourceCompressor getCompressor(); // Gets the IJavaScriptCompressor to be used.\n\tfinal String getName();\n\tprotected Charset getProcessingEncoding();\n\torg.apache.wicket.util.resource.IResourceStream getResourceStream(); // locate resource stream for current resource\n\tfinal Class<?> getScope(); // Gets the scoping class, used for class loading and to determine the package.\n\tfinal String getStyle(); // Gets the style.\n\tString getTextEncoding(); // get text encoding (intented for character-based resources)\n\tboolean isCachingEnabled(); // Returns true if the caching for this resource is enabled\n\tprotected AbstractResource.ResourceResponse newResourceResponse(IResource.Attributes attributes); // creates a new resource response based on the request attributes\n\tprotected byte[] processResponse(IResource.Attributes attributes, byte[] original); // Gives a chance to modify the resource going to be written in the response\n\tPackageResource readBuffered(boolean readBuffered); // If the package resource should be read buffered. WARNING - if the stream is not read buffered compressors will not work, because they require the whole content to be read into memory. (IJavaScriptCompressor, ICssCompressor, IScopeAwareTextResourceProcessor)\n\tvoid setCachingEnabled(boolean enabled); // Sets the caching for this resource to be enabled\n\tvoid setCompress(boolean compress);\n\tvoid setTextEncoding(String textEncoding); // set text encoding (intented for character-based resources)\n}"}
{"index": 938, "repo": "ignite-core-2.15.0", "des": "Contains constants for all system properties and environmental variables in Ignite.", "code": "Class IgniteSystemProperties {\n\tstatic boolean getBoolean(String name); // Gets either system property or environment variable with given name.\n\tstatic boolean getBoolean(String name, boolean dflt); // Gets either system property or environment variable with given name.\n\tstatic double getDouble(String name, double dflt); // Gets either system property or environment variable with given name.\n\tstatic <E extends Enum<E>>E getEnum(Class<E> enumCls, String name);\n\tstatic <E extends Enum<E>>E getEnum(String name, E dflt);\n\tstatic float getFloat(String name, float dflt); // Gets either system property or environment variable with given name.\n\tstatic int getInteger(String name, int dflt); // Gets either system property or environment variable with given name.\n\tstatic long getLong(String name, long dflt); // Gets either system property or environment variable with given name.\n\tstatic @Nullable String getString(String name); // Gets either system property or environment variable with given name.\n\tstatic @Nullable String getString(String name, String dflt); // Gets either system property or environment variable with given name.\n\tstatic Properties snapshot(); // Gets snapshot of system properties.\n}"}
{"index": 11937, "repo": "maven-core-4.0.0-alpha-7", "des": "Helps to provide backward-compatibility with plugins that use legacy components.", "code": "public interface LegacySupport {\n\torg.eclipse.aether.RepositorySystemSession getRepositorySession(); // Gets the currently active repository session.\n\tMavenSession getSession(); // Gets the currently active session.\n\tvoid setSession(MavenSession session); // Sets the currently active session.\n}"}
{"index": 6839, "repo": "calcite-core-1.34.0", "des": "Family of calling conventions that return results as an Enumerable.", "code": "Enum EnumerableConvention {\n\tboolean canConvertConvention(Convention toConvention); // Returns whether we should convert from this convention to toConvention.\n\t@Nullable RelNode enforce(RelNode input, RelTraitSet required); // Given an input and required traits, returns the corresponding enforcer rel nodes, like physical Sort, Exchange etc.\n\tClass getInterface();\n\tString getName();\n\tRelFactories.Struct getRelFactories(); // Return RelFactories struct for this convention.\n\tRelTraitDef getTraitDef(); // Returns the RelTraitDef that defines this RelTrait.\n\tvoid register(RelOptPlanner planner); // Registers a trait instance with the planner.\n\tboolean satisfies(RelTrait trait); // Returns whether this trait satisfies a given trait.\n\tboolean useAbstractConvertersForConversion(RelTraitSet fromTraits, RelTraitSet toTraits); // Returns whether we should convert from this trait set to the other trait set.\n\tstatic EnumerableConvention valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic EnumerableConvention[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11467, "repo": "spring-restdocs-core-3.0.0", "des": "A fluent API for building a map of attributes.", "code": "public abstract class Attributes extends Object {\n\tstatic Map<String,Object> attributes(Attributes.Attribute... attributes); // Creates a Map of the given attributes.\n\tstatic Attributes.AttributeBuilder key(String key); // Creates an attribute with the given key.\n}"}
{"index": 15096, "repo": "spring-vault-core-3.0.4", "des": "Interface that specifies a basic set of Vault operations, implemented by VaultTemplate.", "code": "public interface VaultOperations {\n\tvoid delete(String path); // Delete a path.\n\t<T> T doWithSession(RestOperationsCallback<T> sessionCallback); // Executes a Vault RestOperationsCallback.\n\t<T> T doWithVault(RestOperationsCallback<T> clientCallback); // Executes a Vault RestOperationsCallback.\n\tList<String> list(String path); // Enumerate keys from a Vault path.\n\tVaultKeyValueOperations opsForKeyValue(String path, VaultKeyValueOperationsSupport.KeyValueBackend apiVersion); // Return VaultKeyValueOperations.\n\tVaultPkiOperations opsForPki();\n\tVaultPkiOperations opsForPki(String path); // Return VaultPkiOperations if the PKI backend is mounted on a different path than pki.\n\tVaultSysOperations opsForSys();\n\tVaultTokenOperations opsForToken();\n\tVaultTransformOperations opsForTransform();\n\tVaultTransformOperations opsForTransform(String path); // Return VaultTransformOperations if the transit backend is mounted on a different path than transform.\n\tVaultTransitOperations opsForTransit();\n\tVaultTransitOperations opsForTransit(String path); // Return VaultTransitOperations if the transit backend is mounted on a different path than transit.\n\tVaultVersionedKeyValueOperations opsForVersionedKeyValue(String path); // Return VaultVersionedKeyValueOperations.\n\tVaultWrappingOperations opsForWrapping();\n\tVaultResponse read(String path); // Read from a Vault path.\n\t<T> VaultResponseSupport<T> read(String path, Class<T> responseType); // Read from a secret backend.\n\tdefault VaultResponse write(String path); // Write to a Vault path.\n\tVaultResponse write(String path, Object body); // Write to a Vault path.\n}"}
{"index": 10764, "repo": "log4j-over-slf4j-2.0.7", "des": "This class is a minimal implementation of the original org.apache.log4j.Logger class (as found in log4j 1.2) delegating all calls to a Logger instance.", "code": "public class Logger extends Category {\n\tstatic Logger getLogger(Class clazz);\n\tstatic Logger getLogger(String name);\n\tstatic Logger getLogger(String name, LoggerFactory loggerFactory);\n\tstatic Logger getRootLogger(); // Does the obvious.\n\tboolean isTraceEnabled(); // Delegates to Logger.isTraceEnabled() method of SLF4J.\n\tvoid trace(Object message); // Delegates to Logger.trace(String) method in SLF4J.\n\tvoid trace(Object message, Throwable t); // Delegates to Logger.trace(String,Throwable) method in SLF4J.\n}"}
{"index": 8909, "repo": "hbase-server-3.0.0-alpha-4", "des": "Handle the master side of taking a snapshot of an online table, regardless of snapshot type.", "code": "Class EnabledTableSnapshotHandler {\n\tprotected boolean downgradeToSharedTableLock(); // When taking snapshot, first we must acquire the exclusive table lock to confirm that there are no ongoing merge/split procedures.\n\tEnabledTableSnapshotHandler prepare(); // Event handlers should do all the necessary checks in this method (rather than in the constructor, or in process()) so that the caller, which is mostly executed in the ipc context can fail fast.\n\tprotected void snapshotRegions(List<Pair<RegionInfo,ServerName>> regions); // This method kicks off a snapshot procedure.\n}"}
{"index": 12239, "repo": "jena-core-4.9.0", "des": "A collection of RDF terms used in driving or configuring some of the builtin reasoners.", "code": "public class ReasonerVocabulary extends Object {\n\tstatic final String getJenaReasonerNS(); // Return namespace used for system level descriptive properties of any reasoner\n\tstatic final String getRBNamespace(); // Return namespace used for Rubric specific properties\n}"}
{"index": 2856, "repo": "amqp-client-5.18.0", "des": "Provider interface to refresh credentials when appropriate and perform an operation once the credentials have been renewed.", "code": "Interface CredentialsRefreshService {\n\tboolean isApproachingExpiration(Duration timeBeforeExpiration); // Provide a hint about whether credentials should be renewed now or not before attempting to connect.\n\tString register(CredentialsProvider credentialsProvider, Callable<Boolean> refreshAction); // Register a new entity that needs credentials renewal.\n\tvoid unregister(CredentialsProvider credentialsProvider, String registrationId); // Unregister the entity with the given registration ID.\n}"}
{"index": 6307, "repo": "commons-codec-1.16.0", "des": "Encodes a string into a Refined Soundex value.", "code": "Class RefinedSoundex {\n\tint difference(String s1, String s2); // Returns the number of characters in the two encoded Strings that are the same.\n\tObject encode(Object obj); // Encodes an Object using the refined soundex algorithm.\n\tString encode(String str); // Encodes a String using the refined soundex algorithm.\n\tString soundex(String str); // Retrieves the Refined Soundex code for a given String object.\n}"}
{"index": 8838, "repo": "hbase-server-3.0.0-alpha-4", "des": "Encapsulation of the environment of each coprocessor.", "code": "Class BaseEnvironment<C extends Coprocessor> {\n\tClassLoader getClassLoader();\n\torg.apache.hadoop.conf.Configuration getConfiguration();\n\tString getHBaseVersion(); // Returns the HBase release\n\tC getInstance();\n\tint getLoadSequence();\n\tint getPriority();\n\tint getVersion(); // Returns the coprocessor environment version\n\tvoid shutdown(); // Clean up the environment\n\tvoid startup(); // Initialize the environment\n}"}
{"index": 13281, "repo": "spring-test-6.0.11", "des": "Specification for customizing controller configuration equivalent to, and internally delegating to, a WebFluxConfigurer.", "code": "public static interface WebTestClient.ControllerSpec extends WebTestClient.MockServerSpec<WebTestClient.ControllerSpec> {\n\tWebTestClient.ControllerSpec argumentResolvers(Consumer<org.springframework.web.reactive.result.method.annotation.ArgumentResolverConfigurer> configurer); // Configure resolvers for custom controller method arguments.\n\tWebTestClient.ControllerSpec contentTypeResolver(Consumer<org.springframework.web.reactive.accept.RequestedContentTypeResolverBuilder> consumer); // Customize content type resolution.\n\tWebTestClient.ControllerSpec controllerAdvice(Object... controllerAdvice); // Register one or more ControllerAdvice instances to be used in tests (specified Class will be turned into instance).\n\tWebTestClient.ControllerSpec corsMappings(Consumer<org.springframework.web.reactive.config.CorsRegistry> consumer); // Configure CORS support.\n\tWebTestClient.ControllerSpec formatters(Consumer<org.springframework.format.FormatterRegistry> consumer); // Register formatters and converters to use for type conversion.\n\tWebTestClient.ControllerSpec httpMessageCodecs(Consumer<org.springframework.http.codec.ServerCodecConfigurer> configurer); // Configure custom HTTP message readers and writers or override built-in ones.\n\tWebTestClient.ControllerSpec pathMatching(Consumer<org.springframework.web.reactive.config.PathMatchConfigurer> consumer); // Configure path matching options.\n\tWebTestClient.ControllerSpec validator(org.springframework.validation.Validator validator); // Configure a global Validator.\n\tWebTestClient.ControllerSpec viewResolvers(Consumer<org.springframework.web.reactive.config.ViewResolverRegistry> consumer); // Configure view resolution.\n}"}
{"index": 12086, "repo": "jena-core-4.9.0", "des": "Shared stuff for our hashing implementations: does the base work for hashing and growth sizes.", "code": "public abstract class HashCommon<Key> extends Object {\n\tObject getItemForTestingAt(int i); // Answer the item at index i of keys.\n\tExtendedIterator<Key> keyIterator();\n\tExtendedIterator<Key> keyIterator(HashCommon.NotifyEmpty container);\n\tSpliterator<Key> keySpliterator();\n\tvoid remove(Key key); // Remove the object key from this hash's keys if it is present (if it's absent, do nothing).\n}"}
{"index": 7152, "repo": "calcite-core-1.34.0", "des": "Base class for time functions such as \"LOCALTIME\", \"LOCALTIME(n)\".", "code": "Class SqlAbstractTimeFunction {\n\tSqlMonotonicity getMonotonicity(SqlOperatorBinding call); // Returns whether a call to this operator is monotonic.\n\tSqlSyntax getSyntax(); // Returns the syntactic type of this operator, never null.\n\tRelDataType inferReturnType(SqlOperatorBinding opBinding); // Infers the return type of an invocation of this operator; only called after the number and types of operands have already been validated.\n\tboolean isDynamicFunction(); // Returns whether it is unsafe to cache query plans referencing this operator; false is assumed by default.\n}"}
{"index": 17170, "repo": "spring-integration-core-6.1.2", "des": "The MessageHandler implementation for the Scatter-Gather EIP pattern.", "code": "public class ScatterGatherHandler extends AbstractReplyProducingMessageHandler implements ManageableLifecycle {\n\tprotected void doInit();\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tprotected Object handleRequestMessage(org.springframework.messaging.Message<?> requestMessage); // Subclasses must implement this method to handle the request Message.\n\tboolean isRunning();\n\tvoid setErrorChannelName(String errorChannelName); // Specify a MessageChannel bean name for async error processing.\n\tvoid setGatherChannel(org.springframework.messaging.MessageChannel gatherChannel);\n\tvoid setGatherTimeout(long gatherTimeout);\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 18633, "repo": "opencms-gwt-15.0", "des": "The cell table which is the main widget used for the bulk alias editor.", "code": "Class CmsAliasCellTable {\n\tCmsAliasTableController getController(); // Gets the alias editor controller used by this table.\n\tCmsAliasErrorColumn getErrorColumn(); // Gets the error column.\n\tjava.util.List<org.opencms.gwt.shared.alias.CmsAliasTableRow> getLiveDataList(); // Gets the list of rows internally used by the data provider for this table.\n\tjava.util.List<org.opencms.gwt.shared.alias.CmsAliasTableRow> getSelectedRows(); // Gets the list of selected rows.\n\tcom.google.gwt.view.client.MultiSelectionModel<org.opencms.gwt.shared.alias.CmsAliasTableRow> getSelectionModel();\n}"}
{"index": 17151, "repo": "spring-integration-core-6.1.2", "des": "Message Endpoint that connects any MessageHandler implementation to a PollableChannel.", "code": "public class PollingConsumer extends AbstractPollingEndpoint implements IntegrationConsumer {\n\tprotected void doStart(); // Subclasses must implement this method with the start behavior.\n\tprotected void doStop(); // Subclasses must implement this method with the stop behavior.\n\torg.springframework.messaging.MessageHandler getHandler(); // Return the consumer's handler.\n\torg.springframework.messaging.MessageChannel getInputChannel(); // Return the input channel.\n\torg.springframework.messaging.MessageChannel getOutputChannel(); // Return the output channel (may be null).\n\tprotected Object getReceiveMessageSource();\n\tprotected String getResourceKey(); // Return the key under which the resource will be made available as an attribute on the IntegrationResourceHolder.\n\tprotected Object getResourceToBind(); // Return a resource (MessageSource etc.) to bind when using transaction synchronization.\n\tprotected void handleMessage(org.springframework.messaging.Message<?> message); // Handle a message.\n\tprotected boolean isReactive();\n\tprotected org.springframework.messaging.Message<?> receiveMessage(); // Obtain the next message (if one is available).\n\tprotected void setReceiveMessageSource(Object source);\n\tvoid setReceiveTimeout(long receiveTimeout);\n}"}
{"index": 7970, "repo": "commons-jcs3-core-3.1", "des": "Constructs a LateralCacheNoWaitFacade for the given configuration.", "code": "Class LateralTCPCacheFactory {\n\t<K,V> LateralCacheNoWaitFacade<K,V> createCache(AuxiliaryCacheAttributes iaca, ICompositeCacheManager cacheMgr, ICacheEventLogger cacheEventLogger, IElementSerializer elementSerializer); // Creates a TCP lateral.\n\t<K,V> LateralCacheNoWait<K,V> createCacheNoWait(ITCPLateralCacheAttributes lca, ICacheEventLogger cacheEventLogger, IElementSerializer elementSerializer); // Create a LateralCacheNoWait for the server configured in lca\n\tvoid dispose(); // Dispose of this factory, clean up shared resources\n\t<K,V> ICacheServiceNonLocal<K,V> getCSNLInstance(ITCPLateralCacheAttributes lca, IElementSerializer elementSerializer); // Returns an instance of the cache service.\n\tvoid initialize(); // Initialize this factory\n\tvoid monitorCache(LateralCacheNoWait<?,?> cache); // Add cache instance to monitor\n}"}
{"index": 6178, "repo": "jackson-databind-2.15.2", "des": "Container for deserializers used for instantiating \"primitive arrays\", arrays that contain non-object java primitive types.", "code": "Class PrimitiveArrayDeserializers<T> {\n\tprotected abstract T _concat(T oldValue, T newValue);\n\tprotected abstract T _constructEmpty();\n\tprotected void _failOnNull(DeserializationContext ctxt);\n\tJsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property); // Method called to see if a different (or differently configured) deserializer is needed to deserialize values of specified property.\n\tT deserialize(JsonParser p, DeserializationContext ctxt, T existing); // Alternate deserialization method (compared to the most commonly used, JsonDeserializer.deserialize(JsonParser, DeserializationContext)), which takes in initialized value instance, to be configured and/or populated by deserializer.\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Base implementation that does not assume specific type inclusion mechanism.\n\tstatic JsonDeserializer<?> forType(Class<?> rawType);\n\tAccessPattern getEmptyAccessPattern(); // This method may be called in conjunction with calls to JsonDeserializer.getEmptyValue(DeserializationContext), to check whether it needs to be called just once (static values), or each time empty value is needed.\n\tObject getEmptyValue(DeserializationContext ctxt); // Method called to determine value to be used for \"empty\" values (most commonly when deserializing from empty JSON Strings).\n\tprotected T handleNonArray(JsonParser p, DeserializationContext ctxt);\n\tprotected abstract T handleSingleElementUnwrapped(JsonParser p, DeserializationContext ctxt);\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n\tBoolean supportsUpdate(DeserializationConfig config); // Introspection method that may be called to see whether deserializer supports update of an existing value (aka \"merging\") or not.\n\tprotected abstract PrimitiveArrayDeserializers<?> withResolved(NullValueProvider nuller, Boolean unwrapSingle);\n}"}
{"index": 549, "repo": "ignite-core-2.15.0", "des": "Enum for cache metrics command operations.", "code": "Enum CacheMetricsOperation {\n\tstatic @Nullable CacheMetricsOperation of(String strRep);\n\tstatic CacheMetricsOperation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CacheMetricsOperation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18064, "repo": "spring-ws-core-4.0.5", "des": "Simple subclass of AbstractMethodEndpointMapping that maps from the local name of the request payload to methods.", "code": "public class SimpleMethodEndpointMapping extends AbstractMethodEndpointMapping<String> implements org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\tObject[] getEndpoints();\n\tprotected String getLookupKeyForMessage(MessageContext messageContext); // Returns the local part of the payload root element of the request.\n\tprotected String getLookupKeyForMethod(Method method); // Returns the name of the given method, with the prefix and suffix stripped off.\n\tString getMethodPrefix(); // Returns the method prefix.\n\tString getMethodSuffix(); // Returns the method suffix.\n\tvoid setEndpoints(Object[] endpoints); // Sets the endpoints.\n\tvoid setMethodPrefix(String methodPrefix); // Sets the method prefix.\n\tvoid setMethodSuffix(String methodSuffix); // Sets the method suffix.\n}"}
{"index": 18442, "repo": "opencms-core-15.0", "des": "A bean which represents a user having visited a page.", "code": "Class CmsVisitEntry {\n\tlong getDate(); // Returns the date.\n\tCmsUUID getStructureId(); // Returns the structure id.\n\tCmsUUID getUserId(); // Returns the user id.\n}"}
{"index": 15456, "repo": "pulsar-client-api-3.0.0", "des": "The class represents a transaction within Pulsar.", "code": "@Public @Evolving public interface Transaction {\n\tCompletableFuture<Void> abort(); // Abort the transaction.\n\tCompletableFuture<Void> commit(); // Commit the transaction.\n\tTransaction.State getState(); // Get transaction state.\n\tTxnID getTxnID(); // Get TxnID of the transaction.\n}"}
{"index": 9000, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class is for maintaining the various replication statistics for a sink and publishing them through the metrics interfaces.", "code": "Class MetricsSink {\n\tvoid applyBatch(long batchSize); // Convience method to change metrics when a batch of operations are applied.\n\tvoid applyBatch(long batchSize, long hfileSize); // Convience method to change metrics when a batch of operations are applied.\n\tlong getAgeOfLastAppliedOp(); // Get the Age of Last Applied Op\n\tlong getAppliedOps(); // Gets the total number of OPs delivered to this sink.\n\tprotected long getFailedBatches(); // Get the count of the failed bathes\n\tlong getStartTimestamp(); // Gets the time stamp from when the Sink was initialized.\n\tlong getTimestampOfLastAppliedOp(); // Get the TimestampOfLastAppliedOp.\n\tvoid incrementFailedBatches(); // Convenience method to update metrics when batch of operations has failed.\n\tlong refreshAgeOfLastAppliedOp(); // Refreshing the age makes sure the value returned is the actual one and not the one set a replication time\n\tlong setAgeOfLastAppliedOp(long timestamp); // Set the age of the last applied operation\n}"}
{"index": 17618, "repo": "spring-ldap-core-3.1.0", "des": "Helper class for building LdapName instances.", "code": "public final class LdapNameBuilder extends Object {\n\tLdapNameBuilder add(String name); // Append the LdapName represented by the specified string to the currently built LdapName.\n\tLdapNameBuilder add(String key, Object value); // Add a Rdn to the built LdapName.\n\tLdapNameBuilder add(Name name); // Append the specified name to the currently built LdapName.\n\tLdapName build(); // Build the LdapName instance.\n\tstatic LdapNameBuilder newInstance(); // Construct a new instance, starting with a blank LdapName.\n\tstatic LdapNameBuilder newInstance(String name); // Construct a new instance, starting with an LdapName constructed from the supplied string.\n\tstatic LdapNameBuilder newInstance(Name name); // Construct a new instance, starting with a copy of the supplied LdapName.\n}"}
{"index": 5778, "repo": "hive-service-4.0.0-alpha-2", "des": "HiveServer2's implementation of SAML2Client.", "code": "Class HiveSaml2Client {\n\tstatic HiveSaml2Client get(HiveConf conf);\n\tvoid setRedirect(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response); // Generates a SAML request using the HTTP-Redirect Binding.\n\tstatic void shutdown();\n\tString validate(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response); // Given a response which may contain a SAML Assertion, validates it.\n}"}
{"index": 7540, "repo": "cassandra-all-4.1.2", "des": "CassandraStreamWriter writes given section of the SSTable to given channel.", "code": "Class CassandraStreamWriter {\n\tprotected long totalSize();\n\tprotected long write(ChannelProxy proxy, DataIntegrityMetadata.ChecksumValidator validator, StreamingDataOutputPlus output, long start, int transferOffset, int toTransfer, int bufferSize); // Sequentially read bytes from the file and write them to the output stream\n\tvoid write(StreamingDataOutputPlus out); // Stream file of specified sections to given channel.\n}"}
{"index": 15636, "repo": "spring-security-core-6.1.2", "des": "This class defines a role hierarchy for use with various access checking components.", "code": "public class RoleHierarchyImpl extends Object implements RoleHierarchy {\n\tCollection<GrantedAuthority> getReachableGrantedAuthorities(Collection<? extends GrantedAuthority> authorities); // Returns an array of all reachable authorities.\n\tvoid setHierarchy(String roleHierarchyStringRepresentation); // Set the role hierarchy and pre-calculate for every role the set of all reachable roles, i.e.\n}"}
{"index": 6177, "repo": "jackson-databind-2.15.2", "des": "Definition of return values to indicate determination regarding validity.", "code": "Enum PolymorphicTypeValidator.Validity {\n\tstatic PolymorphicTypeValidator.Validity valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PolymorphicTypeValidator.Validity[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1050, "repo": "ignite-core-2.15.0", "des": "A dialect compatible with the MySQL database.", "code": "Class MySQLDialect {\n\tString escape(String ident);\n\tboolean hasMerge();\n\tString loadCacheSelectRangeQuery(String fullTblName, Collection<String> keyCols); // Construct query to get ranges bounds.\n\tString mergeQuery(String fullTblName, Collection<String> keyCols, Collection<String> uniqCols); // Construct merge query.\n}"}
{"index": 6469, "repo": "exoplayer-core-2.9.6", "des": "A base class for Chunk implementations where the data should be loaded into a byte[] before being consumed.", "code": "Class DataChunk {\n\tvoid cancelLoad(); // Cancels the load.\n\tprotected abstract void consume(byte[] data, int limit); // Called by load().\n\tbyte[] getDataHolder(); // Returns the array in which the data is held.\n\tvoid load(); // Performs the load, returning on completion or cancellation.\n}"}
{"index": 5195, "repo": "druid-processing-26.0.0", "des": "Pool that pre-generates objects up to a limit, then permits possibly-blocking \"take\" operations.", "code": "Class DefaultBlockingPool<T> {\n\tint getPoolSize();\n\tint maxSize();\n\tList<ReferenceCountingResourceHolder<T>> takeBatch(int elementNum); // Take resources from the pool, waiting if necessary until the elements of the given number become available.\n\tList<ReferenceCountingResourceHolder<T>> takeBatch(int elementNum, long timeoutMs); // Take resources from the pool, waiting up to the specified wait time if necessary for elements of the given number to become available.\n}"}
{"index": 12307, "repo": "jena-core-4.9.0", "des": "The TypeMapper provides a global registry of known datatypes.", "code": "public class TypeMapper extends Object {\n\tstatic TypeMapper getInstance(); // Return the single global instance of the TypeMapper.\n\tRDFDatatype getSafeTypeByName(String uri); // Version of getTypeByName which will treat unknown URIs as typed literals but with just the default implementation\n\tRDFDatatype getTypeByClass(Class<?> clazz); // Look up a datatype suitable for representing instances of the given Java class.\n\tRDFDatatype getTypeByName(String uri); // Lookup a known datatype.\n\tRDFDatatype getTypeByValue(Object value); // Method getTypeByValue.\n\tIterator<RDFDatatype> listTypes(); // List all the known datatypes\n\tvoid registerDatatype(RDFDatatype type); // Register a new datatype\n\tstatic void reset();\n\tstatic void setInstance(TypeMapper typeMapper);\n\tvoid unregisterDatatype(RDFDatatype type); // Remove a datatype registration.\n}"}
{"index": 5401, "repo": "druid-processing-26.0.0", "des": "The context for storing and passing data between chains of QueryRunners.", "code": "Class ResponseContext {\n\tObject add(ResponseContext.Key key, Object value); // Adds (merges) a new value associated with a key to an old value.\n\tvoid addCpuNanos(long ns);\n\tvoid addMissingSegments(List<SegmentDescriptor> descriptors);\n\tvoid addRemainingResponse(String id, int count);\n\tvoid addRowScanCount(long count);\n\tstatic ResponseContext createEmpty(); // Create an empty DefaultResponseContext instance\n\tstatic ResponseContext deserialize(String responseContext, com.fasterxml.jackson.databind.ObjectMapper objectMapper); // Deserializes a string into ResponseContext using given ObjectMapper.\n\tObject get(ResponseContext.Key key);\n\tLong getCpuNanos();\n\tprotected abstract Map<ResponseContext.Key,Object> getDelegate();\n\tString getEntityTag();\n\tList<SegmentDescriptor> getMissingSegments();\n\tConcurrentHashMap<String,Integer> getRemainingResponses();\n\tLong getRowScanCount();\n\tLong getTimeoutTime();\n\tAtomicLong getTotalBytes();\n\tList<org.joda.time.Interval> getUncoveredIntervals();\n\tvoid initialize(); // Initialize fields for a query context.\n\tvoid initializeMissingSegments();\n\tvoid initializeRemainingResponses();\n\tvoid initializeRowScanCount();\n\tvoid merge(ResponseContext responseContext); // Merges a response context into the current.\n\tObject put(ResponseContext.Key key, Object value); // Associates the specified object with the specified extension key.\n\tvoid putEntityTag(String eTag);\n\tvoid putQueryFailDeadlineMs(long deadlineMs);\n\tvoid putTimeoutTime(long time);\n\tvoid putUncoveredIntervals(List<org.joda.time.Interval> intervals, boolean overflowed);\n\tObject remove(ResponseContext.Key key);\n\tResponseContext.SerializationResult serializeWith(com.fasterxml.jackson.databind.ObjectMapper objectMapper, int maxCharsNumber); // Serializes the context given that the resulting string length is less than the provided limit.\n\tMap<String,Object> toMap();\n}"}
{"index": 15679, "repo": "pulsar-common-3.0.0", "des": "The MessageId interface provided for advanced users.", "code": "public interface MessageIdAdv extends MessageId {\n\tdefault int compareTo(MessageId o); // The default implementation of Comparable.compareTo(Object).\n\tdefault BitSet getAckSet(); // Get the BitSet that indicates which messages in the batch.\n\tdefault int getBatchIndex(); // Get the batch index.\n\tdefault int getBatchSize(); // Get the batch size.\n\tlong getEntryId(); // Get the entry ID.\n\tdefault MessageIdAdv getFirstChunkMessageId(); // Get the message ID of the first chunk if the current message ID represents the position of a chunked message.\n\tlong getLedgerId(); // Get the ledger ID.\n\tdefault int getPartitionIndex(); // Get the partition index.\n}"}
{"index": 17434, "repo": "groovy-4.0.13", "des": "A common set of Weigher and EntryWeigher implementations.", "code": "public final class Weighers extends Object {\n\tstatic <K, V> EntryWeigher<K,V> asEntryWeigher(Weigher<? super V> weigher); // An entry weigher backed by the specified weigher.\n\tstatic Weigher<byte[]> byteArray(); // A weigher where the value is a byte array and its weight is the number of bytes.\n\tstatic <E> Weigher<? super Collection<E>> collection(); // A weigher where the value is a Collection and its weight is the number of elements.\n\tstatic <K, V> EntryWeigher<K,V> entrySingleton(); // A weigher where an entry has a weight of 1.\n\tstatic <E> Weigher<? super Iterable<E>> iterable(); // A weigher where the value is a Iterable and its weight is the number of elements.\n\tstatic <E> Weigher<? super List<E>> list(); // A weigher where the value is a List and its weight is the number of elements.\n\tstatic <A, B> Weigher<? super Map<A,B>> map(); // A weigher where the value is a Map and its weight is the number of entries.\n\tstatic <E> Weigher<? super Set<E>> set(); // A weigher where the value is a Set and its weight is the number of elements.\n\tstatic <V> Weigher<V> singleton(); // A weigher where a value has a weight of 1.\n}"}
{"index": 16809, "repo": "spring-expression-6.0.11", "des": "A powerful PropertyAccessor that uses reflection to access properties for reading and possibly also for writing on a target instance.", "code": "public class ReflectivePropertyAccessor extends Object implements PropertyAccessor {\n\tboolean canRead(EvaluationContext context, Object target, String name); // Called to determine if a resolver instance is able to access a specified property on a specified target object.\n\tboolean canWrite(EvaluationContext context, Object target, String name); // Called to determine if a resolver instance is able to write to a specified property on a specified target object.\n\tPropertyAccessor createOptimalAccessor(EvaluationContext context, Object target, String name); // Attempt to create an optimized property accessor tailored for a property of a particular name on a particular class.\n\tprotected Field findField(String name, Class<?> clazz, boolean mustBeStatic); // Find a field of a certain name on a specified class.\n\tprotected Method findGetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic); // Find a getter method for the specified property.\n\tprotected Method findSetterForProperty(String propertyName, Class<?> clazz, boolean mustBeStatic); // Find a setter method for the specified property.\n\tprotected String getPropertyMethodSuffix(String propertyName); // Return the method suffix for a given property name.\n\tprotected String[] getPropertyMethodSuffixes(String propertyName); // Return the method suffixes for a given property name.\n\tClass<?>[] getSpecificTargetClasses(); // Returns null which means this is a general purpose accessor.\n\tprotected boolean isCandidateForProperty(Method method, Class<?> targetClass); // Determine whether the given Method is a candidate for property access on an instance of the given target class.\n\tTypedValue read(EvaluationContext context, Object target, String name); // Called to read a property from a specified target object.\n\tvoid write(EvaluationContext context, Object target, String name, Object newValue); // Called to write to a property on a specified target object.\n}"}
{"index": 10975, "repo": "spring-data-redis-3.1.2", "des": "Additional arguments (like count/sort/...) to be used with RedisGeoCommands.", "code": "public static class RedisGeoCommands.GeoSearchStoreCommandArgs extends Object implements RedisGeoCommands.GeoCommandArgs, Cloneable {\n\tprotected RedisGeoCommands.GeoSearchStoreCommandArgs clone();\n\tSet<RedisGeoCommands.GeoCommandArgs.GeoCommandFlag> getFlags();\n\tLong getLimit();\n\tSort.Direction getSortDirection();\n\tboolean hasAnyLimit();\n\tboolean isStoreDistance();\n\tRedisGeoCommands.GeoSearchStoreCommandArgs limit(long count); // Limit the results to the first N matching items.\n\tRedisGeoCommands.GeoSearchStoreCommandArgs limit(long count, boolean any); // Limit the results to the first N matching items.\n\tstatic RedisGeoCommands.GeoSearchStoreCommandArgs newGeoSearchStoreArgs(); // Create new RedisGeoCommands.GeoSearchStoreCommandArgs.\n\tRedisGeoCommands.GeoSearchStoreCommandArgs sort(Sort.Direction direction); // Apply a sort direction.\n\tRedisGeoCommands.GeoSearchStoreCommandArgs sortAscending(); // Sort returned items from the nearest to the furthest, relative to the center.\n\tRedisGeoCommands.GeoSearchStoreCommandArgs sortDescending(); // Sort returned items from the furthest to the nearest, relative to the center.\n\tRedisGeoCommands.GeoSearchStoreCommandArgs storeDistance(); // Sets the RedisGeoCommands.GeoRadiusCommandArgs.Flag.STOREDIST flag to also store the distance of the returned items from the specified center.\n}"}
{"index": 11278, "repo": "spring-context-6.0.11", "des": "Advisor driven by a CacheOperationSource, used to include a cache advice bean for methods that are cacheable.", "code": "public class BeanFactoryCacheOperationSourceAdvisor extends org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor {\n\torg.springframework.aop.Pointcut getPointcut();\n\tvoid setCacheOperationSource(CacheOperationSource cacheOperationSource); // Set the cache operation attribute source which is used to find cache attributes.\n\tvoid setClassFilter(org.springframework.aop.ClassFilter classFilter); // Set the ClassFilter to use for this pointcut.\n}"}
{"index": 4774, "repo": "hadoop-common-3.3.4", "des": "The DelegationTokenAuthenticatedURL is a AuthenticatedURL sub-class with built-in Hadoop Delegation Token functionality.", "code": "Class DelegationTokenAuthenticatedURL {\n\tvoid cancelDelegationToken(URL url, DelegationTokenAuthenticatedURL.Token token); // Cancels a delegation token from the server end-point.\n\tvoid cancelDelegationToken(URL url, DelegationTokenAuthenticatedURL.Token token, String doAsUser); // Cancels a delegation token from the server end-point.\n\tstatic Class<? extends DelegationTokenAuthenticator> getDefaultDelegationTokenAuthenticator(); // Returns the default DelegationTokenAuthenticator class to use when an DelegationTokenAuthenticatedURL instance is created without specifying one.\n\tToken<AbstractDelegationTokenIdentifier> getDelegationToken(URL url, DelegationTokenAuthenticatedURL.Token token, String renewer); // Requests a delegation token using the configured Authenticator for authentication.\n\tToken<AbstractDelegationTokenIdentifier> getDelegationToken(URL url, DelegationTokenAuthenticatedURL.Token token, String renewer, String doAsUser); // Requests a delegation token using the configured Authenticator for authentication.\n\tHttpURLConnection openConnection(URL url, org.apache.hadoop.security.authentication.client.AuthenticatedURL.Token token); // Returns an authenticated HttpURLConnection, it uses a Delegation Token only if the given auth token is an instance of DelegationTokenAuthenticatedURL.Token and it contains a Delegation Token, otherwise use the configured DelegationTokenAuthenticator to authenticate the connection.\n\tHttpURLConnection openConnection(URL url, DelegationTokenAuthenticatedURL.Token token); // Returns an authenticated HttpURLConnection.\n\tHttpURLConnection openConnection(URL url, DelegationTokenAuthenticatedURL.Token token, String doAs); // Returns an authenticated HttpURLConnection.\n\tlong renewDelegationToken(URL url, DelegationTokenAuthenticatedURL.Token token); // Renews a delegation token from the server end-point using the configured Authenticator for authentication.\n\tlong renewDelegationToken(URL url, DelegationTokenAuthenticatedURL.Token token, String doAsUser); // Renews a delegation token from the server end-point using the configured Authenticator for authentication.\n\tstatic void setDefaultDelegationTokenAuthenticator(Class<? extends DelegationTokenAuthenticator> authenticator); // Sets the default DelegationTokenAuthenticator class to use when an DelegationTokenAuthenticatedURL instance is created without specifying one.\n\tboolean useQueryStringForDelegationToken(); // Returns if delegation token is transmitted as a HTTP header.\n}"}
{"index": 12300, "repo": "jena-core-4.9.0", "des": "Factory class for creating blank instances of the transitive reasoner.", "code": "public class TransitiveReasonerFactory extends Object implements ReasonerFactory {\n\tReasoner create(Resource configuration); // Constructor method that builds an instance of the associated Reasoner\n\tModel getCapabilities(); // Return a description of the capabilities of this reasoner encoded in RDF.\n\tString getURI(); // Return the URI labelling this type of reasoner\n\tstatic ReasonerFactory theInstance(); // Return the single global instance of this factory\n}"}
{"index": 16191, "repo": "spring-data-cassandra-4.1.2", "des": "Utility to translate a CassandraPersistentProperty into a corresponding property from a different CassandraPersistentEntity by looking it up by name.", "code": "public class PersistentPropertyTranslator extends Object {\n\tstatic PersistentPropertyTranslator create(CassandraPersistentEntity<?> targetEntity); // Create a new PersistentPropertyTranslator.\n\tstatic PersistentPropertyTranslator create(CassandraPersistentEntity<?> targetEntity, Predicate<CassandraPersistentProperty> translationFilter); // Create a new PersistentPropertyTranslator accepting a filter predicate whether the translation should happen at all.\n\tCassandraPersistentProperty translate(CassandraPersistentProperty property); // Translate a CassandraPersistentProperty into a corresponding property from a different CassandraPersistentEntity.\n}"}
{"index": 3499, "repo": "mahout-mr-0.13.0", "des": "Like GenericUserPreferenceArray but stores preferences for one item (all item IDs the same) rather than one user.", "code": "Class GenericItemPreferenceArray {\n\tGenericItemPreferenceArray clone();\n\tboolean equals(Object other);\n\tPreference get(int i);\n\tlong[] getIDs();\n\tlong getItemID(int i);\n\tlong getUserID(int i);\n\tfloat getValue(int i);\n\tboolean hasPrefWithItemID(long itemID);\n\tboolean hasPrefWithUserID(long userID);\n\tIterator<Preference> iterator();\n\tint length();\n\tvoid set(int i, Preference pref); // Sets preference at i from information in the given Preference\n\tvoid setItemID(int i, long itemID); // Sets item ID for preference at i.\n\tvoid setUserID(int i, long userID); // Sets user ID for preference at i.\n\tvoid setValue(int i, float value); // Sets preference value for preference at i.\n\tvoid sortByItem(); // Sorts underlying array by item ID, ascending.\n\tvoid sortByUser(); // Sorts underlying array by user ID, ascending.\n\tvoid sortByValue(); // Sorts underlying array by preference value, ascending.\n\tvoid sortByValueReversed(); // Sorts underlying array by preference value, descending.\n}"}
{"index": 15722, "repo": "camel-api-4.0.0-RC1", "des": "An interface to represent an object which wishes to be injected with the CamelContext", "code": "public interface CamelContextAware {\n\tCamelContext getCamelContext(); // Get the CamelContext\n\tvoid setCamelContext(CamelContext camelContext); // Injects the CamelContext\n\tstatic <T> T trySetCamelContext(T object, CamelContext camelContext); // Set the CamelContext context if the object is an instance of CamelContextAware.\n}"}
{"index": 10038, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Domain class for keeping container register information together.", "code": "Class ContainerRegisterInfo {\n\tString getTrackUrl(); // Gets the track url.\n\tvoid setTrackUrl(String trackUrl); // Sets the track url.\n}"}
{"index": 17502, "repo": "pulsar-broker-3.0.0", "des": "Factory of InMemoryDelayedDeliveryTracker objects.", "code": "@Beta public interface DelayedDeliveryTrackerFactory extends AutoCloseable {\n\tvoid close(); // Close the factory and release all the resources.\n\tvoid initialize(PulsarService pulsarService); // Initialize the factory implementation from the broker service configuration.\n\tDelayedDeliveryTracker newTracker(PersistentDispatcherMultipleConsumers dispatcher); // Create a new tracker instance.\n}"}
{"index": 7504, "repo": "cassandra-all-4.1.2", "des": "An abstract virtual table implementation that builds the resultset on demand.", "code": "Class AbstractVirtualTable {\n\tvoid apply(PartitionUpdate update); // Applies the specified update, if supported.\n\tabstract AbstractVirtualTable.DataSet data(); // Provide a AbstractVirtualTable.DataSet that is contains all of the virtual table's data.\n\tAbstractVirtualTable.DataSet data(DecoratedKey partitionKey); // Provide a AbstractVirtualTable.DataSet that is potentially restricted to the provided partition - but is allowed to contain other partitions.\n\tTableMetadata metadata(); // Returns the view metadata.\n\tUnfilteredPartitionIterator select(DataRange dataRange, ColumnFilter columnFilter); // Selects the rows from a range of partitions.\n\tUnfilteredPartitionIterator select(DecoratedKey partitionKey, ClusteringIndexFilter clusteringIndexFilter, ColumnFilter columnFilter); // Selects the rows from a single partition.\n\tvoid truncate(); // Truncates data from the underlying source, if supported.\n}"}
{"index": 8022, "repo": "commons-compress-1.23.0", "des": "Implements the \"arj\" archive format as an InputStream.", "code": "Class ArjArchiveInputStream {\n\tboolean canReadEntryData(ArchiveEntry ae); // Whether this stream is able to read the given entry.\n\tvoid close();\n\tString getArchiveComment(); // Gets the archive's comment.\n\tString getArchiveName(); // Gets the archive's recorded name.\n\tArjArchiveEntry getNextEntry(); // Returns the next Archive Entry in this Stream.\n\tstatic boolean matches(byte[] signature, int length); // Checks if the signature matches what is expected for an arj file.\n\tint read(byte[] b, int off, int len);\n}"}
{"index": 14734, "repo": "spring-data-commons-3.1.2", "des": "Delegating PersistentPropertyAccessorFactory decorating the PersistentPropertyAccessors created with an InstantiationAwarePropertyAccessor to allow the handling of purely immutable types.", "code": "public class InstantiationAwarePropertyAccessorFactory extends Object implements PersistentPropertyAccessorFactory {\n\t<T> PersistentPropertyAccessor<T> getPropertyAccessor(PersistentEntity<?,?> entity, T bean); // Returns a PersistentPropertyAccessor for a given PersistentEntity and bean.\n\tboolean isSupported(PersistentEntity<?,?> entity); // Returns whether given PersistentEntity is supported by this PersistentPropertyAccessorFactory.\n}"}
{"index": 6527, "repo": "exoplayer-core-2.9.6", "des": "Conditionally throws errors affecting a Loader.", "code": "Interface LoaderErrorThrower {\n\tvoid maybeThrowError(); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the Loaders default minimum number of retries.\n\tvoid maybeThrowError(int minRetryCount); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the specified minimum number of retries.\n}"}
{"index": 4134, "repo": "camel-core-3.0.0-RC1", "des": "A series of rest services defined using the rest-dsl.", "code": "Class RestsDefinition {\n\tprotected RestDefinition createRest();\n\torg.apache.camel.CamelContext getCamelContext();\n\tString getLabel();\n\tList<RestDefinition> getRests(); // Returns the RESTs\n\tString getShortName();\n\tRestDefinition rest(); // Creates a rest DSL\n\tRestDefinition rest(RestDefinition rest); // Adds the RestsDefinition\n\tRestDefinition rest(String uri); // Creates a rest DSL\n\tvoid setCamelContext(org.apache.camel.CamelContext camelContext);\n\tvoid setRests(List<RestDefinition> rests); // The rest services\n}"}
{"index": 18740, "repo": "guava-32.1.1-jre", "des": "An unmodifiable element-count pair for a multiset.", "code": "Interface Multiset.Entry<E extends @Nullable java.lang.Object> {\n\tint getCount(); // Returns the count of the associated element in the underlying multiset.\n\tE getElement(); // Returns the multiset element corresponding to this entry.\n}"}
{"index": 810, "repo": "ignite-core-2.15.0", "des": "Transaction created by system implicitly on remote nodes.", "code": "Class GridNearTxRemote {\n\tvoid addActiveCache(GridCacheContext cacheCtx, boolean recovery); // Adds cache to the list of active caches in transaction.\n\tvoid addEntries(ClassLoader ldr, Iterable<IgniteTxEntry> entries); // Adds entries to started near remote tx.\n\tboolean addEntry(GridCacheContext cacheCtx, IgniteTxKey key, GridCacheOperation op, CacheObject val, @Nullable GridCacheVersion drVer, boolean skipStore, boolean keepBinary);\n\tUUID eventNodeId();\n\tCollection<IgniteTxKey> evicted();\n\tCollection<UUID> masterNodeIds();\n\tboolean near();\n\tUUID nearNodeId();\n\tGridCacheVersion nearXidVersion();\n\tGridCacheVersion ownedVersion(IgniteTxKey key); // Gets owned version for near remote transaction.\n\tvoid ownedVersions(Map<IgniteTxKey,GridCacheVersion> vers); // Adds owned versions to map.\n\tboolean remote();\n}"}
{"index": 8256, "repo": "spring-ws-3.0.10.RELEASE", "des": "Allows for setting up expectations on XPath expressions.", "code": "Interface ResponseXPathExpectations {\n\tResponseMatcher doesNotExist(); // Expects the XPath expression to not exist.\n\tResponseMatcher evaluatesTo(boolean expectedValue); // Expects the XPath expression to evaluate to the given boolean.\n\tResponseMatcher evaluatesTo(double expectedValue); // Expects the XPath expression to evaluate to the given double.\n\tResponseMatcher evaluatesTo(int expectedValue); // Expects the XPath expression to evaluate to the given integer.\n\tResponseMatcher evaluatesTo(String expectedValue); // Expects the XPath expression to evaluate to the given string.\n\tResponseMatcher exists(); // Expects the XPath expression to exist.\n}"}
{"index": 3879, "repo": "hbase-client-3.0.0-alpha-4", "des": "A configuration for the replication peer cluster.", "code": "Class ReplicationPeerConfig {\n\tlong getBandwidth();\n\tString getClusterKey();\n\tMap<String,String> getConfiguration();\n\tSet<String> getExcludeNamespaces();\n\tMap<TableName,List<String>> getExcludeTableCFsMap();\n\tSet<String> getNamespaces();\n\tMap<byte[],byte[]> getPeerData();\n\tString getRemoteWALDir();\n\tString getReplicationEndpointImpl();\n\tMap<TableName,List<String>> getTableCFsMap();\n\tboolean isSerial();\n\tboolean isSyncReplication(); // Use remote wal dir to decide whether a peer is sync replication peer\n\tboolean needToReplicate(TableName table); // Decide whether the table need replicate to the peer cluster\n\tboolean needToReplicate(TableName table, byte[] family); // Decide whether the passed family of the table need replicate to the peer cluster according to this peer config.\n\tstatic ReplicationPeerConfigBuilder newBuilder();\n\tstatic ReplicationPeerConfigBuilder newBuilder(ReplicationPeerConfig peerConfig);\n\tboolean replicateAllUserTables();\n}"}
{"index": 8551, "repo": "commons-io-2.13.0", "des": "Filters file names for a certain prefix.", "code": "Class PrefixFileFilter {\n\tboolean accept(File file); // Checks to see if the file name starts with the prefix.\n\tboolean accept(File file, String name); // Checks to see if the file name starts with the prefix.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the file name starts with the prefix.\n}"}
{"index": 12142, "repo": "jena-core-4.9.0", "des": "An iterator that consumes an underlying iterator and maps its results before delivering them; supports remove if the underlying iterator does.", "code": "public class Map1Iterator<From,To> extends NiceIterator<To> {\n\tvoid close(); // default close: don't need to do anything.\n\tvoid forEachRemaining(Consumer<? super To> action);\n\tboolean hasNext(); // default hasNext: no elements, return false.\n\tTo next(); // default next: throw an exception.\n\tvoid remove(); // default remove: we have no elements, so we can't remove any.\n}"}
{"index": 2995, "repo": "tink-1.10.0", "des": "This key manager generates new HmacKey keys and produces new instances of PrfHmacJce.", "code": "Class HmacKeyManager {\n\tTinkFipsUtil.AlgorithmFipsCompatibility fipsStatus(); // Returns the FIPS compatibility of this KeyTypeManager.\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tstatic KeyTemplate hmacSha256HalfDigestTemplate();\n\tstatic KeyTemplate hmacSha256Template();\n\tstatic KeyTemplate hmacSha512HalfDigestTemplate();\n\tstatic KeyTemplate hmacSha512Template();\n\tKeyTypeManager.KeyFactory<HmacKeyFormat,HmacKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tHmacKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(HmacKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 256, "repo": "commons-collections4-4.4", "des": "Decorates another Map to transform objects that are added.", "code": "Class TransformedSplitMap<J,K,U,V> {\n\tprotected V checkSetValue(U value); // Override to transform the value when using setValue.\n\tvoid clear();\n\tV put(J key, U value); // Note that the return type is Object, rather than V as in the Map interface.\n\tvoid putAll(Map<? extends J,? extends U> mapToCopy);\n\tstatic <J,K,U,V> TransformedSplitMap<J,K,U,V> transformingMap(Map<K,V> map, Transformer<? super J,? extends K> keyTransformer, Transformer<? super U,? extends V> valueTransformer); // Factory method to create a transforming map.\n\tprotected K transformKey(J object); // Transforms a key.\n\tprotected Map<K,V> transformMap(Map<? extends J,? extends U> map); // Transforms a map.\n\tprotected V transformValue(U object); // Transforms a value.\n}"}
{"index": 6183, "repo": "jackson-databind-2.15.2", "des": "Helper class for BeanSerializerFactory that is used to construct BeanPropertyWriter instances.", "code": "Class PropertyBuilder {\n\tprotected BeanPropertyWriter _constructPropertyWriter(BeanPropertyDefinition propDef, AnnotatedMember member, Annotations contextAnnotations, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType, boolean suppressNulls, Object suppressableValue, Class<?>[] includeInViews); // Overridable factory method for actual construction of BeanPropertyWriter; often needed if subclassing buildWriter(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer<?>, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.introspect.AnnotatedMember, boolean) method.\n\tprotected Object _throwWrapped(Exception e, String propName, Object defaultBean);\n\tprotected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping);\n\tprotected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType); // Method that will try to determine statically defined type of property being serialized, based on annotations (for overrides), and alternatively declared type (if static typing for serialization is enabled).\n\tAnnotations getClassAnnotations();\n\tprotected Object getDefaultBean();\n}"}
{"index": 17993, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for SOAP-based EndpointExceptionResolver implementations that depend on SoapFaultDefinition.", "code": "public abstract class AbstractSoapFaultDefinitionExceptionResolver extends AbstractEndpointExceptionResolver {\n\tprotected void customizeFault(Object endpoint, Exception ex, SoapFault fault); // Customize the SoapFault created by this resolver.\n\tprotected abstract SoapFaultDefinition getFaultDefinition(Object endpoint, Exception ex); // Template method that returns the SoapFaultDefinition for the given exception.\n\tprotected final boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex); // Template method for resolving exceptions that is called by AbstractEndpointExceptionResolver.resolveException(org.springframework.ws.context.MessageContext, java.lang.Object, java.lang.Exception).\n\tvoid setDefaultFault(SoapFaultDefinition defaultFault); // Set the default fault.\n}"}
{"index": 17111, "repo": "spring-integration-core-6.1.2", "des": "Message Handler that delegates to a MessageSelector.", "code": "public class MessageFilter extends AbstractReplyProducingPostProcessingMessageHandler implements DiscardingMessageHandler, ManageableLifecycle {\n\tprotected Object doHandleRequestMessage(org.springframework.messaging.Message<?> message);\n\tprotected void doInit();\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\torg.springframework.messaging.MessageChannel getDiscardChannel(); // Return the discard channel.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tboolean isRunning();\n\tObject postProcess(org.springframework.messaging.Message<?> message, Object result); // Take some further action on the result and/or message.\n\tvoid setDiscardChannel(org.springframework.messaging.MessageChannel discardChannel); // Specify a channel where rejected Messages should be sent.\n\tvoid setDiscardChannelName(String discardChannelName);\n\tvoid setDiscardWithinAdvice(boolean discardWithinAdvice); // Set to 'true' if you wish the discard processing to occur within any request handler advice applied to this filter.\n\tvoid setThrowExceptionOnRejection(boolean throwExceptionOnRejection); // Specify whether this filter should throw a MessageRejectedException when its selector does not accept a Message.\n\tprotected boolean shouldCopyRequestHeaders(); // Subclasses may override this.\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 9353, "repo": "hadoop-yarn-api-3.3.6", "des": "The response sent by the node manager to an application master when localization statuses are requested.", "code": "Class GetLocalizationStatusesResponse {\n\tabstract Map<ContainerId,SerializedException> getFailedRequests(); // Get the containerId-to-exception map in which the exception indicates error from per container for failed requests.\n\tabstract Map<ContainerId,List<LocalizationStatus>> getLocalizationStatuses(); // Get all the container localization statuses.\n\tstatic GetLocalizationStatusesResponse newInstance(Map<ContainerId,List<LocalizationStatus>> statuses, Map<ContainerId,SerializedException> failedRequests);\n\tabstract void setFailedRequests(Map<ContainerId,SerializedException> failedContainers); // Set the containerId-to-exception map in which the exception indicates error from per container for failed request.\n\tabstract void setLocalizationStatuses(Map<ContainerId,List<LocalizationStatus>> statuses); // Sets the container localization statuses.\n}"}
{"index": 17031, "repo": "spring-integration-core-6.1.2", "des": "Base class for FactoryBeans that create standard MessageHandler instances.", "code": "public abstract class AbstractStandardMessageHandlerFactoryBean extends AbstractSimpleMessageHandlerFactoryBean<org.springframework.messaging.MessageHandler> implements org.springframework.beans.factory.DisposableBean {\n\tprotected boolean canBeUsedDirect(AbstractMessageProducingHandler handler);\n\tprotected void checkForIllegalTarget(Object targetObject, String targetMethodName);\n\tprotected org.springframework.messaging.MessageHandler createDefaultHandler();\n\tprotected org.springframework.messaging.MessageHandler createExpressionEvaluatingHandler(org.springframework.expression.Expression expression);\n\tprotected org.springframework.messaging.MessageHandler createHandler();\n\tprotected <T> org.springframework.messaging.MessageHandler createMessageProcessingHandler(MessageProcessor<T> processor);\n\tprotected abstract org.springframework.messaging.MessageHandler createMethodInvokingHandler(Object targetObject, String targetMethodName); // Subclasses must implement this method to create the MessageHandler.\n\tvoid destroy();\n\tLong getSendTimeout();\n\tprotected boolean methodIsHandleMessageOrEmpty(String targetMethodName);\n\tprotected void postProcessReplyProducer(AbstractMessageProducingHandler handler);\n\tvoid setExpression(org.springframework.expression.Expression expression); // Set a SpEL expression to use.\n\tvoid setExpressionString(String expressionString); // Set a SpEL expression to use.\n\tvoid setRequiresReply(Boolean requiresReply);\n\tvoid setSendTimeout(Long sendTimeout);\n\tvoid setTargetMethodName(String targetMethodName); // Set the method name for the message handler.\n\tvoid setTargetObject(Object targetObject); // Set the target POJO for the message handler.\n}"}
{"index": 10203, "repo": "spring-core-6.0.11", "des": "Resource implementation for a given byte array.", "code": "public class ByteArrayResource extends AbstractResource {\n\tlong contentLength(); // This implementation returns the length of the underlying byte array.\n\tboolean equals(Object obj); // This implementation compares the underlying byte array.\n\tboolean exists(); // This implementation always returns true.\n\tfinal byte[] getByteArray(); // Return the underlying byte array.\n\tbyte[] getContentAsByteArray(); // Return the contents of this resource as a byte array.\n\tString getContentAsString(Charset charset); // Returns the contents of this resource as a string, using the specified charset.\n\tString getDescription(); // This implementation returns a description that includes the passed-in description, if any.\n\tInputStream getInputStream(); // This implementation returns a ByteArrayInputStream for the underlying byte array.\n}"}
{"index": 2427, "repo": "spring-session-1.3.5.RELEASE", "des": "Specifies when to write to the backing Redis instance.", "code": "Enum RedisFlushMode {\n\tstatic RedisFlushMode valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic RedisFlushMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1086, "repo": "ignite-core-2.15.0", "des": "Partition update counter maintains three entities for tracking partition update state.", "code": "Interface PartitionUpdateCounter {\n\tObject comparableState();\n\tCacheGroupContext context();\n\tPartitionUpdateCounter copy();\n\tboolean empty();\n\tGridLongList finalizeUpdateCounters(); // Flushes pending update counters closing all possible gaps.\n\tlong get(); // Get LWM.\n\t@Nullable byte[] getBytes();\n\tlong highestAppliedCounter(); // Returns highest applied update counter.\n\tvoid init(long initUpdCntr, @Nullable byte[] cntrUpdData); // Restores update counter state.\n\tIterator<long[]> iterator();\n\tlong next(); // Increment LWM by 1.\n\tlong next(long delta); // Increment LWM by delta.\n\tlong reserve(long delta); // Increment HWM by delta.\n\tlong reserved(); // Returns HWM.\n\tvoid reset(); // Reset counter internal state to zero.\n\tvoid resetInitialCounter(); // Reset the initial counter value to zero.\n\tboolean sequential();\n\tvoid update(long val); // Sets update counter to absolute value.\n\tboolean update(long start, long delta); // Applies counter update out of range.\n}"}
{"index": 3187, "repo": "hbase-common-3.0.0-alpha-4", "des": "Extends the basic SimpleByteRange implementation with position support.", "code": "Class AbstractPositionedByteRange {\n\tbyte get(); // Retrieve the next byte from this range.\n\tPositionedByteRange get(byte[] dst); // Fill dst with bytes from the range, starting from position.\n\tPositionedByteRange get(byte[] dst, int offset, int length); // Fill dst with bytes from the range, starting from the current position.\n\tPositionedByteRange get(int index, byte[] dst); // Fill dst with bytes from the range, starting from index.\n\tPositionedByteRange get(int index, byte[] dst, int offset, int length); // Fill dst with bytes from the range, starting from index.\n\tint getInt(); // Retrieve the next int value from this range.\n\tint getLimit(); // Return the current limit\n\tlong getLong(); // Retrieve the next long value from this range.\n\tint getPosition(); // The current position marker.\n\tint getRemaining(); // The number of bytes remaining between position and the end of the range.\n\tshort getShort(); // Retrieve the next short value from this range.\n\tlong getVLong(); // Retrieve the next long value, which is stored as VLong, from this range\n\tbyte peek(); // Retrieve the next byte from this range without incrementing position.\n\tPositionedByteRange set(byte[] bytes); // Reuse this ByteRange over a new byte[].\n\tPositionedByteRange set(byte[] bytes, int offset, int length); // Reuse this ByteRange over a new byte[].\n\tPositionedByteRange set(int capacity); // Reuse this ByteRange over a new byte[].\n\tPositionedByteRange setLength(int length); // Update the length of this range.\n\tPositionedByteRange setLimit(int limit); // Limits the byte range upto a specified value.\n\tPositionedByteRange setOffset(int offset); // Update the beginning of this range.\n\tPositionedByteRange setPosition(int position); // Update the position index.\n}"}
{"index": 5765, "repo": "freemarker-2.3.32", "des": "Represents a number format; used in templates for formatting and parsing with that format.", "code": "Class TemplateNumberFormat {\n\tjava.lang.Object format(TemplateNumberModel numberModel); // Formats the model to markup instead of to plain text if the result markup will be more than just plain text escaped, otherwise falls back to formatting to plain text.\n\tabstract java.lang.String formatToPlainText(TemplateNumberModel numberModel);\n\tabstract boolean isLocaleBound(); // Tells if this formatter should be re-created if the locale changes.\n\tjava.lang.Object parse(java.lang.String s); // This method is reserved for future purposes; currently it always throws ParsingNotSupportedException.\n}"}
{"index": 13793, "repo": "spring-webmvc-6.0.11", "des": "A HandlerExceptionResolver that uses the @ResponseStatus annotation to map exceptions to HTTP status codes.", "code": "public class ResponseStatusExceptionResolver extends AbstractHandlerExceptionResolver implements org.springframework.context.MessageSourceAware {\n\tprotected ModelAndView applyStatusAndReason(int statusCode, String reason, HttpServletResponse response); // Apply the resolved status code and reason to the response.\n\tprotected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex); // Actually resolve the given exception that got thrown during handler execution, returning a ModelAndView that represents a specific error page if appropriate.\n\tprotected ModelAndView resolveResponseStatus(org.springframework.web.bind.annotation.ResponseStatus responseStatus, HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex); // Template method that handles the @ResponseStatus annotation.\n\tprotected ModelAndView resolveResponseStatusException(org.springframework.web.server.ResponseStatusException ex, HttpServletRequest request, HttpServletResponse response, Object handler); // Template method that handles an ResponseStatusException.\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n}"}
{"index": 13215, "repo": "spring-test-6.0.11", "des": "Main entry point for server-side Spring MVC test support.", "code": "public final class MockMvc extends Object {\n\torg.springframework.web.servlet.DispatcherServlet getDispatcherServlet(); // Return the underlying DispatcherServlet instance that this MockMvc was initialized with.\n\tResultActions perform(RequestBuilder requestBuilder); // Perform a request and return a type that allows chaining further actions, such as asserting expectations, on the result.\n}"}
{"index": 18550, "repo": "hibernate-core-5.6.15.Final", "des": "Additional contract describing the source of an identifier mapping whose nature is simple.", "code": "Interface IdentifierSourceSimple {\n\tSingularAttributeSource getIdentifierAttributeSource(); // Obtain the source descriptor for the identifier attribute.\n\tjava.lang.String getUnsavedValue(); // Returns the \"unsaved\" entity identifier value.\n}"}
{"index": 8776, "repo": "graal-sdk-1.0.0-rc7", "des": "A pointer to a 32-bit C primitive value.", "code": "Interface CIntPointer {\n\tCIntPointer addressOf(int index); // Computes the address of the array element with the specified index, treating the pointer as an array of the C type.\n\tCIntPointer addressOf(SignedWord index); // Computes the address of the array element with the specified index, treating the pointer as an array of the C type.\n\tint read(); // Reads the value at the pointer address.\n\tint read(int index); // Reads the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tint read(SignedWord index); // Reads the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tvoid write(int value); // Writes the value at the pointer address.\n\tvoid write(int index, int value); // Writes the value of the array element with the specified index, treating the pointer as an array of the C type.\n\tvoid write(SignedWord index, int value); // Writes the value of the array element with the specified index, treating the pointer as an array of the C type.\n}"}
{"index": 2366, "repo": "commons-geometry-euclidean-1.0", "des": "Interface for objects that support linecast operations in Euclidean 3D space.", "code": "Interface Linecastable3D {\n\tdefault List<LinecastPoint3D> linecast(Line3D line); // Intersect the given line against the boundaries in this instance, returning a list of all intersections in order of increasing distance along the line.\n\tList<LinecastPoint3D> linecast(LineConvexSubset3D subset); // Intersect the given line convex subset against the boundaries in this instance, returning a list of all intersections in order of increasing distance along the line.\n\tdefault LinecastPoint3D linecastFirst(Line3D line); // Intersect the given line against the boundaries in this instance, returning the first intersection found when traveling in the direction of the line from infinity.\n\tLinecastPoint3D linecastFirst(LineConvexSubset3D subset); // Intersect the given line convex subset against the boundaries in this instance, returning the first intersection found when traveling in the direction of the line subset from its start point.\n}"}
{"index": 14668, "repo": "spring-data-commons-3.1.2", "des": "The context in which the AOT processing happens.", "code": "public interface AotContext {\n\tstatic AotContext from(BeanFactory beanFactory); // Create an AotContext backed by the given BeanFactory.\n\tConfigurableListableBeanFactory getBeanFactory(); // Returns a reference to the ConfigurableListableBeanFactory backing this AotContext.\n\tdefault ClassLoader getClassLoader(); // Returns the ClassLoader used by this AotContext to resolve types.\n\tdefault ClassLoader getRequiredClassLoader(); // Returns the required ClassLoader used by this AotContext to resolve types.\n\tdefault TypeScanner getTypeScanner(); // Returns a new TypeScanner used to scan for types that will be contributed to the AOT processing infrastructure.\n\tAotContext.IntrospectedBeanDefinition introspectBeanDefinition(String beanName); // Returns a AotContext.IntrospectedBeanDefinition to obtain further detail about the underlying bean definition.\n\tdefault AotContext.IntrospectedBeanDefinition introspectBeanDefinition(BeanReference reference); // Returns a AotContext.IntrospectedBeanDefinition to obtain further detail about the underlying bean definition.\n\tAotContext.TypeIntrospector introspectType(String typeName); // Returns a AotContext.TypeIntrospector to obtain further detail about a type given its fully-qualified type name\n\tdefault Set<Class<?>> scanPackageForTypes(Collection<Class<? extends Annotation>> identifyingAnnotations, Collection<String> packageNames); // Scans for types in the given named packages annotated with the store-specific identifying annotations.\n}"}
{"index": 1705, "repo": "samza-api-1.8.0", "des": "SystemConsumer is the interface that must be implemented by any system that wishes to integrate with Samza.", "code": "Interface SystemConsumer {\n\tjava.util.Map<SystemStreamPartition,java.util.List<IncomingMessageEnvelope>> poll(java.util.Set<SystemStreamPartition> systemStreamPartitions, long timeout); // Poll the SystemConsumer to get any available messages from the underlying system.\n\tvoid register(SystemStreamPartition systemStreamPartition, java.lang.String offset); // Register a SystemStreamPartition to this SystemConsumer.\n\tvoid start(); // Tells the SystemConsumer to connect to the underlying system, and prepare to begin serving messages when poll is invoked.\n\tvoid stop(); // Tells the SystemConsumer to close all connections, release all resource, and shut down everything.\n}"}
{"index": 8979, "repo": "hbase-server-3.0.0-alpha-4", "des": "Represents an entry in the LruBlockCache.", "code": "Class LruCachedBlock {\n\tvoid access(long accessTime); // Block has been accessed.\n\tint compareTo(LruCachedBlock that);\n\tboolean equals(Object obj);\n\tCacheable getBuffer();\n\tlong getCachedTime(); // Returns Time we were cached at in nano seconds.\n\tBlockCacheKey getCacheKey();\n\tBlockPriority getPriority();\n\tlong heapSize();\n}"}
{"index": 15969, "repo": "wicket-util-10.0.0-M1", "des": "entity resolver that tries to locate a document type definition (DTD) using a set of custom entity resolvers", "code": "public class CustomEntityResolver extends Object implements EntityResolver {\n\tstatic CustomEntityResolver getPreloaded(); // get default instances of custom entity resolver with preloaded well-known entities\n\tvoid put(CustomEntityResolver.EntityKey key, CustomEntityResolver.EntityLocator locator); // add custom entity resolver\n\tInputSource resolveEntity(String id, String url);\n}"}
{"index": 1962, "repo": "nifi-framework-api-1.22.0", "des": "Specifies the order in which FlowFiles should be sorted when performing a listing of FlowFiles via the FlowFileQueue#listFlowFiles(String, SortColumn, SortDirection) method.", "code": "Enum SortDirection {\n\tstatic SortDirection valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SortDirection[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1315, "repo": "ignite-core-2.15.0", "des": "Transform DataEntry to CdcEvent and sends it to CdcConsumer.", "code": "Class WalRecordsConsumer<K,V> {\n\tboolean alive(); // Checks that consumer still alive.\n\tCdcConsumer consumer();\n\tvoid onCacheDestroyEvents(Iterator<Integer> caches); // Handles destroy cache events.\n\tvoid onCacheEvents(Iterator<CdcCacheEvent> cacheEvts); // Handles new cache events.\n\tvoid onMappings(Iterator<TypeMapping> mappings); // Handles new mappings.\n\tboolean onRecords(Iterator<DataEntry> entries); // Handles data entries.\n\tvoid onTypes(Iterator<BinaryType> types); // Handles new binary types.\n\tvoid start(MetricRegistry cdcReg, MetricRegistry cdcConsumerReg); // Starts the consumer.\n\tvoid stop(); // Stops the consumer.\n}"}
{"index": 15353, "repo": "spring-boot-3.1.1", "des": "Event to be published after the application context is refreshed and the RSocketServer is ready.", "code": "public class RSocketServerInitializedEvent extends org.springframework.context.ApplicationEvent {\n\tRSocketServer getServer(); // Access the RSocketServer.\n\tRSocketServer getSource(); // Access the source of the event (an RSocketServer).\n}"}
{"index": 11111, "repo": "tribuo-core-4.3.1", "des": "A DataSource which can read IDX formatted data (i.e., MNIST).", "code": "public final class IDXDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T> {\n\tIDXDataSource.IDXType getDataType(); // The type of the features that were loaded in.\n\tOutputFactory<T> getOutputFactory(); // Returns the OutputFactory associated with this Output subclass.\n\tDataSourceProvenance getProvenance();\n\tIterator<Example<T>> iterator();\n\tvoid postConfig(); // Used by the OLCUT configuration system, and should not be called by external code.\n\tint size(); // The number of examples loaded.\n}"}
{"index": 1501, "repo": "pdfbox-3.0.0-beta1", "des": "CIE-based colour spaces that use a dictionary.", "code": "Class PDCIEDictionaryBasedColorSpace {\n\tprotected float[] convXYZtoRGB(float x, float y, float z);\n\tPDTristimulus getBlackPoint(); // This will return the BlackPoint tristimulus.\n\tPDTristimulus getWhitepoint(); // This will return the whitepoint tristimulus.\n\tprotected boolean isWhitePoint(); // Tests if the current point is the white point.\n\tvoid setBlackPoint(PDTristimulus blackpoint); // This will set the BlackPoint tristimulus.\n\tvoid setWhitePoint(PDTristimulus whitepoint); // This will set the whitepoint tristimulus.\n}"}
{"index": 17632, "repo": "spring-ldap-core-3.1.0", "des": "Filter that allows the user to check for the existence of a attribute.", "code": "public class PresentFilter extends AbstractFilter {\n\tStringBuffer encode(StringBuffer buff); // Encodes the filter to a StringBuffer.\n\tboolean equals(Object o); // All filters must implement equals.\n}"}
{"index": 14448, "repo": "wicket-core-10.0.0-M1", "des": "This is one of Wicket's default string resource loaders.", "code": "public class ValidatorStringResourceLoader extends ComponentStringResourceLoader {\n\tString loadStringResource(Class<?> clazz, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component class, resource key, locale and style.\n\tString loadStringResource(Component component, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component, resource key, locale and style.\n}"}
{"index": 11258, "repo": "spring-context-6.0.11", "des": "Enumeration used to determine whether JDK proxy-based or AspectJ weaving-based advice should be applied.", "code": "public enum AdviceMode extends Enum<AdviceMode> {\n\tstatic AdviceMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AdviceMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10184, "repo": "spring-core-6.0.11", "des": "Convenience base class for Resource implementations, pre-implementing typical behavior.", "code": "public abstract class AbstractResource extends Object implements Resource {\n\tlong contentLength(); // This method reads the entire InputStream to determine the content length.\n\tResource createRelative(String relativePath); // This implementation throws a FileNotFoundException, assuming that relative resources cannot be created for this resource.\n\tboolean equals(Object obj); // This implementation compares description strings.\n\tboolean exists(); // This implementation checks whether a File can be opened, falling back to whether an InputStream can be opened.\n\tFile getFile(); // This implementation throws a FileNotFoundException, assuming that the resource cannot be resolved to an absolute file path.\n\tprotected File getFileForLastModifiedCheck(); // Determine the File to use for timestamp checking.\n\tString getFilename(); // This implementation always returns null, assuming that this resource type does not have a filename.\n\tURI getURI(); // This implementation builds a URI based on the URL returned by getURL().\n\tURL getURL(); // This implementation throws a FileNotFoundException, assuming that the resource cannot be resolved to a URL.\n\tboolean isFile(); // This implementation always returns false.\n\tboolean isOpen(); // This implementation always returns false.\n\tboolean isReadable(); // This implementation always returns true for a resource that exists (revised as of 5.1).\n\tlong lastModified(); // This implementation checks the timestamp of the underlying File, if available.\n\tReadableByteChannel readableChannel(); // This implementation returns Channels.newChannel(InputStream) with the result of InputStreamSource.getInputStream().\n}"}
{"index": 8104, "repo": "commons-compress-1.23.0", "des": "Simple placeholder for all those extra fields we don't want to deal with.", "code": "Class UnrecognizedExtraField {\n\tbyte[] getCentralDirectoryData(); // Get the central data.\n\tZipShort getCentralDirectoryLength(); // Get the central data length.\n\tZipShort getHeaderId(); // Get the header id.\n\tbyte[] getLocalFileDataData(); // Get the local data.\n\tZipShort getLocalFileDataLength(); // Get the length of the local data.\n\tvoid parseFromCentralDirectoryData(byte[] data, int offset, int length); // Populate data from this array as if it was in central directory data.\n\tvoid parseFromLocalFileData(byte[] data, int offset, int length); // Populate data from this array as if it was in local file data.\n\tvoid setCentralDirectoryData(byte[] data); // Set the extra field data in central directory.\n\tvoid setHeaderId(ZipShort headerId); // Set the header id.\n\tvoid setLocalFileDataData(byte[] data); // Set the extra field data in the local file data - without Header-ID or length specifier.\n}"}
{"index": 2365, "repo": "commons-geometry-euclidean-1.0", "des": "Interface for objects that support linecast operations in Euclidean 2D space.", "code": "Interface Linecastable2D {\n\tdefault List<LinecastPoint2D> linecast(Line line); // Intersect the given line against the boundaries in this instance, returning a list of all intersections in order of increasing position along the line.\n\tList<LinecastPoint2D> linecast(LineConvexSubset subset); // Intersect the given line subset against the boundaries in this instance, returning a list of all intersections in order of increasing position along the line.\n\tdefault LinecastPoint2D linecastFirst(Line line); // Intersect the given line against the boundaries in this instance, returning the first intersection found when traveling in the direction of the line from infinity.\n\tLinecastPoint2D linecastFirst(LineConvexSubset subset); // Intersect the given line subset against the boundaries in this instance, returning the first intersection found when traveling in the direction of the line subset from its start location.\n}"}
{"index": 13889, "repo": "spring-webflux-6.0.11", "des": "Base class for HandlerMethodArgumentResolver implementations with access to a ReactiveAdapterRegistry and methods to check for method parameter support.", "code": "public abstract class HandlerMethodArgumentResolverSupport extends Object implements HandlerMethodArgumentResolver {\n\tprotected <A extends Annotation>boolean checkAnnotatedParamNoReactiveWrapper(org.springframework.core.MethodParameter parameter, Class<A> annotationType, BiPredicate<A,Class<?>> typePredicate); // Evaluate the Predicate on the method parameter type if it has the given annotation, nesting within Optional if necessary, but raise an IllegalStateException if the same matches the generic type within a reactive type wrapper.\n\tprotected boolean checkParameterType(org.springframework.core.MethodParameter parameter, Predicate<Class<?>> predicate); // Evaluate the Predicate on the method parameter type or on the generic type within a reactive type wrapper.\n\tprotected boolean checkParameterTypeNoReactiveWrapper(org.springframework.core.MethodParameter parameter, Predicate<Class<?>> predicate); // Evaluate the Predicate on the method parameter type but raise an IllegalStateException if the same matches the generic type within a reactive type wrapper.\n\torg.springframework.core.ReactiveAdapterRegistry getAdapterRegistry(); // Return the configured ReactiveAdapterRegistry.\n}"}
{"index": 18380, "repo": "opencms-core-15.0", "des": "This class is responsbile for creating and parsing links to generated PDFs.", "code": "Class CmsPdfLink {\n\tCmsResource getContent(); // Returns the content.\n\tCmsResource getFormatter(); // Gets the formatter resource.\n\tjava.lang.String getLink(); // Returns the link.\n\tjava.util.Locale getLocale(); // Returns the locale.\n}"}
{"index": 12081, "repo": "jena-core-4.9.0", "des": "A factory class for creating memory Graphs.", "code": "public class GraphMemFactory extends Object {\n\tstatic Graph createDefaultGraph(); // Answer a memory-based graph.\n\tstatic Graph createDefaultGraphSameTerm(); // Answer a memory-based graph with \"same term\" semantics This method will continue to provide the preferred general purpose \"same term\" graph.\n\tstatic Graph createDefaultGraphSameValue(); // Answer a memory-based graph with \"same value\" semantics used in Jena2, Jena3 and Jena4 for in-memory graphs.\n\tstatic Graph createGraphMem(); // This function will track the preferred general purpose graph.\n\tstatic Graph createGraphMem2(); // A graph that stores triples in memory.\n\tstatic Graph createGraphMem2Basic(); // A graph that stores triples in memory.\n\tstatic Graph createGraphMem2Roaring(); // A graph that stores triples in memory.\n\tstatic boolean dftGraphSameTerm(); // Get the default mode for in-memory for graphs : same term (true) or same value (false).\n\tstatic Graph empty(); // Immutable graph with no triples\n\tstatic void setDftGraphSameTerm(boolean value); // Set the default mode for in-memory graphs : same term (true) or same value (false).\n}"}
{"index": 11558, "repo": "spring-security-oauth2-client-6.1.2", "des": "An OAuth2AuthorizedClientService that stores Authorized Client(s) in-memory.", "code": "public final class InMemoryOAuth2AuthorizedClientService extends Object implements OAuth2AuthorizedClientService {\n\t<T extends OAuth2AuthorizedClient>T loadAuthorizedClient(String clientRegistrationId, String principalName); // Returns the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name or null if not available.\n\tvoid removeAuthorizedClient(String clientRegistrationId, String principalName); // Removes the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name.\n\tvoid saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, org.springframework.security.core.Authentication principal); // Saves the OAuth2AuthorizedClient associating it to the provided End-User Authentication (Resource Owner).\n}"}
{"index": 13801, "repo": "spring-webmvc-6.0.11", "des": "Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.", "code": "public class ScriptTemplateViewResolver extends UrlBasedViewResolver {\n\tprotected AbstractUrlBasedView instantiateView(); // Instantiate the specified view class.\n\tprotected Class<?> requiredViewClass(); // Return the required type of view for this resolver.\n}"}
{"index": 6030, "repo": "jackson-databind-2.15.2", "des": "Interface for provider (factory) for constructing AccessorNamingStrategy for given type of deserialization target.", "code": "Class AccessorNamingStrategy.Provider {\n\tabstract AccessorNamingStrategy forBuilder(MapperConfig<?> config, AnnotatedClass builderClass, BeanDescription valueTypeDesc); // Factory method for creating strategy instance for POJOs that are deserialized using Builder type: in this case eventual target (value) type is different from type of \"builder\" object that is used by databinding to accumulate state.\n\tabstract AccessorNamingStrategy forPOJO(MapperConfig<?> config, AnnotatedClass valueClass); // Factory method for creating strategy instance for a \"regular\" POJO, called if none of the other factory methods is applicable.\n\tabstract AccessorNamingStrategy forRecord(MapperConfig<?> config, AnnotatedClass recordClass); // Factory method for creating strategy instance for special java.lang.Record type (new in JDK 14).\n}"}
{"index": 3744, "repo": "kafka-streams-3.5.0", "des": "The Transformer interface is for stateful mapping of an input record to zero, one, or multiple new output records (both key and value type can be altered arbitrarily).", "code": "Interface Transformer<K,V,R> {\n\tvoid close(); // Close this transformer and clean up any resources.\n\tvoid init(ProcessorContext context); // Initialize this transformer.\n\tR transform(K key, V value); // Transform the record with the given key and value.\n}"}
{"index": 13488, "repo": "spring-messaging-6.0.11", "des": "Convenient base class for ReactorNettyCodec implementations that need to work with NIO ByteBuffers.", "code": "public abstract class AbstractNioBufferReactorNettyCodec<P> extends Object implements ReactorNettyCodec<P> {\n\tCollection<Message<P>> decode(io.netty.buffer.ByteBuf inputBuffer); // Decode the input ByteBuf into one or more Messages.\n\tprotected abstract List<Message<P>> decodeInternal(ByteBuffer nioBuffer);\n\tvoid encode(Message<P> message, io.netty.buffer.ByteBuf outputBuffer); // Encode the given Message to the output ByteBuf.\n\tprotected abstract ByteBuffer encodeInternal(Message<P> message);\n}"}
{"index": 8929, "repo": "hbase-server-3.0.0-alpha-4", "des": "A FlushPolicy that only flushes store larger a given threshold.", "code": "Class FlushAllLargeStoresPolicy {\n\tprotected void configureForRegion(HRegion region); // Upon construction, this method will be called with the region to be governed.\n\tCollection<HStore> selectStoresToFlush(); // Returns the stores need to be flushed.\n\tprotected boolean shouldFlush(HStore store);\n}"}
{"index": 2900, "repo": "amqp-client-5.18.0", "des": "A class that manages ShutdownListeners and remembers the reason for a shutdown.", "code": "Class ShutdownNotifierComponent {\n\tvoid addShutdownListener(ShutdownListener listener); // Add shutdown listener.\n\tShutdownSignalException getCloseReason(); // Get the shutdown reason object\n\tboolean isOpen(); // Determine whether the component is currently open.\n\tvoid notifyListeners(); // Protected API - notify the listeners attached to the component\n\tvoid removeShutdownListener(ShutdownListener listener); // Remove shutdown listener for the component.\n\tboolean setShutdownCauseIfOpen(ShutdownSignalException sse); // Internal: this is the means of registering shutdown.\n}"}
{"index": 5020, "repo": "commons-collections-3.2.2", "des": "Decorates another Set to ensure that the order of addition is retained and used by the iterator.", "code": "Class ListOrderedSet {\n\tvoid add(int index, Object object);\n\tboolean add(Object object);\n\tboolean addAll(Collection coll);\n\tboolean addAll(int index, Collection coll);\n\tList asList(); // Gets an unmodifiable view of the order of the Set.\n\tvoid clear();\n\tstatic ListOrderedSet decorate(List list); // Factory method to create an ordered set using the supplied list to retain order.\n\tstatic ListOrderedSet decorate(Set set); // Factory method to create an ordered set.\n\tstatic ListOrderedSet decorate(Set set, List list); // Factory method to create an ordered set specifying the list and set to use.\n\tObject get(int index);\n\tint indexOf(Object object);\n\tIterator iterator();\n\tObject remove(int index);\n\tboolean remove(Object object);\n\tboolean removeAll(Collection coll);\n\tboolean retainAll(Collection coll);\n\tObject[] toArray();\n\tObject[] toArray(Object[] a);\n}"}
{"index": 7095, "repo": "calcite-core-1.34.0", "des": "Callback for an expression to dump itself to.", "code": "Interface RelWriter {\n\tRelWriter done(RelNode node); // Writes the completed explanation.\n\tvoid explain(RelNode rel, List<Pair<String,Object>> valueList); // Prints an explanation of a node, with a list of (term, value) pairs.\n\tSqlExplainLevel getDetailLevel(); // Returns detail level at which plan should be generated.\n\tdefault RelWriter input(String term, RelNode input); // Adds an input to the explanation of the current node.\n\tRelWriter item(String term, @Nullable Object value); // Adds an attribute to the explanation of the current node.\n\tdefault RelWriter itemIf(String term, @Nullable Object value, boolean condition); // Adds an input to the explanation of the current node, if a condition holds.\n\tdefault boolean nest(); // Returns whether the writer prefers nested values.\n}"}
{"index": 10255, "repo": "spring-core-6.0.11", "des": "Holder that combines a Resource descriptor with a specific encoding or Charset to be used for reading from the resource.", "code": "public class EncodedResource extends Object implements InputStreamSource {\n\tboolean equals(Object other);\n\tfinal Charset getCharset(); // Return the Charset to use for reading from the resource, or null if none specified.\n\tString getContentAsString(); // Returns the contents of the specified resource as a string, using the specified Charset or encoding (if any).\n\tfinal String getEncoding(); // Return the encoding to use for reading from the resource, or null if none specified.\n\tInputStream getInputStream(); // Open an InputStream for the specified resource, ignoring any specified Charset or encoding.\n\tReader getReader(); // Open a java.io.Reader for the specified resource, using the specified Charset or encoding (if any).\n\tfinal Resource getResource(); // Return the Resource held by this EncodedResource.\n\tboolean requiresReader(); // Determine whether a Reader is required as opposed to an InputStream, i.e.\n}"}
{"index": 4584, "repo": "beam-sdks-java-core-2.49.0", "des": "The accumulation modes that can be used with windowing.", "code": "Enum WindowingStrategy.AccumulationMode {\n\tstatic WindowingStrategy.AccumulationMode valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic WindowingStrategy.AccumulationMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17622, "repo": "spring-ldap-core-3.1.0", "des": "Attempts to perform an LDAP operation in the authenticated context, because Active Directory might allow bind with incorrect password (specifically empty password), and later refuse operations.", "code": "public class LookupAttemptingCallback extends Object implements AuthenticatedLdapEntryContextCallback, AuthenticatedLdapEntryContextMapper<DirContextOperations> {\n\tvoid executeWithContext(DirContext ctx, LdapEntryIdentification ldapEntryIdentification); // Perform some LDAP operation on the supplied authenticated DirContext instance.\n\tDirContextOperations mapWithContext(DirContext ctx, LdapEntryIdentification ldapEntryIdentification); // Perform some LDAP operation on the supplied authenticated DirContext instance.\n}"}
{"index": 16222, "repo": "spring-data-cassandra-4.1.2", "des": "RowMapper implementation that converts a single column into a single result value per row.", "code": "public class SingleColumnRowMapper<T> extends Object implements RowMapper<T> {\n\tprotected Object convertValueToRequiredType(Object value, Class<?> requiredType); // Convert the given column value to the specified required type.\n\tprotected Object getColumnValue(com.datastax.oss.driver.api.core.cql.Row row, int index); // Retrieve a object value for the specified column, using the most appropriate value type.\n\tprotected Object getColumnValue(com.datastax.oss.driver.api.core.cql.Row row, int index, Class<?> requiredType); // Retrieve a CQL object value for the specified column.\n\tT mapRow(com.datastax.oss.driver.api.core.cql.Row row, int rowNum); // Extract a value for the single column in the current row.\n\tstatic <T> SingleColumnRowMapper<T> newInstance(Class<T> requiredType); // Static factory method to create a new SingleColumnRowMapper (with the required type specified only once).\n\tvoid setRequiredType(Class<T> requiredType); // Set the type that each result object is expected to match.\n}"}
{"index": 1653, "repo": "samza-api-1.8.0", "des": "CheckpointManagers read and write Checkpoint to some implementation-specific location.", "code": "Interface CheckpointManager {\n\tdefault void clearCheckpoints(); // Clear the checkpoints in the checkpoint stream.\n\tdefault void createResources(); // Creates checkpoint stream.\n\tCheckpoint readLastCheckpoint(TaskName taskName); // Returns the last recorded checkpoint for a specified taskName.\n\tvoid register(TaskName taskName); // Registers this manager to write checkpoints of a specific Samza stream partition.\n\tvoid start(); // Perform startup operations.\n\tvoid stop(); // Perform teardown operations for the Manager.\n\tvoid writeCheckpoint(TaskName taskName, Checkpoint checkpoint); // Writes a checkpoint based on the current state of a Samza stream partition.\n}"}
{"index": 17321, "repo": "groovy-4.0.13", "des": "Event handler registration: setup Registers closure that runs after the type checker finishes initialization finish Registers closure that runs after the type checker completes type checking beforeVisitClass Registers closure that runs before type checking a class afterVisitClass Registers closure that runs after having finished the visit of a type checked class beforeVisitMethod Registers closure that runs before type checking a method body afterVisitMethod Registers closure that runs after type checking a method body beforeMethodCall Registers closure that runs before the type checker starts type checking a method call afterMethodCall Registers closure that runs once the type checker has finished type checking a method call methodNotFound Registers closure that runs when it fails to find an appropriate method for a method call ambiguousMethods Registers closure that runs when the type checker cannot choose between several candidate methods onMethodSelection Registers closure that runs when it finds a method appropriate for a method call unresolvedVariable Registers closure that runs when the type checker finds an unresolved variable unresolvedProperty Registers closure that runs when the type checker cannot find a property on the receiver unresolvedAttribute Registers closure that runs when the type checker cannot find an attribute on the receiver incompatibleAssignment Registers closure that runs when the type checker thinks that the right-hand side of an assignment is incompatible with the left-hand side incompatibleReturnType Registers closure that runs when the type checker thinks that a return value is incompatibe with the return type Expression categorization: isAnnotationConstantExpression Determines if argument is an AnnotationConstantExpression isArgumentListExpression Determines if argument is an ArgumentListExpression isArrayExpression Determines if argument is an ArrayExpression isAttributeExpression Determines if argument is an AttributeExpression isBinaryExpression Determines if argument is a BinaryExpression isBitwiseNegationExpression Determines if argument is a BitwiseNegationExpression isBooleanExpression Determines if argument is a BooleanExpression isCastExpression Determines if argument is a CastExpression isClassExpression Determines if argument is a ClassExpression isClosureExpression Determines if argument is a ClosureExpression isConstantExpression Determines if argument is a ConstantExpression isConstructorCallExpression Determines if argument is a ConstructorCallExpression isDeclarationExpression Determines if argument is a DeclarationExpression isElvisOperatorExpression Determines if argument is an ElvisOperatorExpression isEmptyExpression Determines if argument is an EmptyExpression isFieldExpression Determines if argument is a FieldExpression isGStringExpression Determines if argument is a GStringExpression isLambdaExpression Determines if argument is a LambdaExpression isListExpression Determines if argument is a ListExpression isMapExpression Determines if argument is a MapExpression isMapEntryExpression Determines if argument is a MapEntryExpression isMethodCallExpression Determines if argument is a MethodCallExpression isMethodPointerExpression Determines if argument is a MethodPointerExpression isMethodReferenceExpression Determines if argument is a MethodReferenceExpression isNamedArgumentListExpression Determines if argument is a NamedArgumentListExpression isNotExpression Determines if argument is a NotExpression isPostfixExpression Determines if argument is a PostfixExpression isPrefixExpression Determines if argument is a PrefixExpression isPropertyExpression Determines if argument is a PropertyExpression isRangeExpression Determines if argument is a RangeExpression isSpreadExpression Determines if argument is a SpreadExpression isSpreadMapExpression Determines if argument is a SpreadMapExpression isStaticMethodCallExpression Determines if argument is a StaticMethodCallExpression isTernaryExpression Determines if argument is a TernaryExpression isTupleExpression Determines if argument is a TupleExpression isUnaryMinusExpression Determines if argument is a UnaryMinusExpression isUnaryPlusExpression Determines if argument is a UnaryPlusExpression isVariableExpression Determines if argument is a VariableExpression General utility: Delegates to AbstractTypeCheckingExtension Imports static members of ClassHelper Imports static members of StaticTypeCheckingSupport", "code": "public abstract static class GroovyTypeCheckingExtensionSupport.TypeCheckingDSL extends Script {\n\tObject getProperty(String property); // Retrieves a property value.\n\tObject invokeMethod(String name, Object args); // Invoke a method (or closure in the binding) defined.\n\tvoid setProperty(String property, Object newValue); // Sets the given property to the new value.\n}"}
{"index": 16646, "repo": "spring-beans-6.0.11", "des": "Simple factory for shared List instances.", "code": "public class ListFactoryBean extends AbstractFactoryBean<List<Object>> {\n\tprotected List<Object> createInstance(); // Template method that subclasses must override to construct the object returned by this factory.\n\tClass<List> getObjectType(); // This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n\tvoid setSourceList(List<?> sourceList); // Set the source List, typically populated via XML \"list\" elements.\n\tvoid setTargetListClass(Class<? extends List> targetListClass); // Set the class to use for the target List.\n}"}
{"index": 17106, "repo": "spring-integration-core-6.1.2", "des": "Converts to/from a Map with 2 keys ('headers' and 'payload').", "code": "public class MapMessageConverter extends Object implements org.springframework.messaging.converter.MessageConverter, org.springframework.beans.factory.BeanFactoryAware {\n\tObject fromMessage(org.springframework.messaging.Message<?> message, Class<?> clazz);\n\tprotected MessageBuilderFactory getMessageBuilderFactory();\n\tfinal void setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setFilterHeadersInToMessage(boolean filterHeadersInToMessage); // By default all headers on Map passed to toMessage(Object, MessageHeaders) will be mapped.\n\tvoid setHeaderNames(String... headerNames); // Headers to be converted in fromMessage(Message, Class).\n\torg.springframework.messaging.Message<?> toMessage(Object object, org.springframework.messaging.MessageHeaders messageHeaders);\n}"}
{"index": 4180, "repo": "commons-geometry-spherical-1.0", "des": "Class containing factory methods for constructing CutAngle instances.", "code": "Class CutAngles {\n\tstatic CutAngle createNegativeFacing(double azimuth, Precision.DoubleEquivalence precision); // Create a new instance at the given azimuth, oriented so that the plus side of the hyperplane points toward decreasing angular values.\n\tstatic CutAngle createNegativeFacing(Point1S point, Precision.DoubleEquivalence precision); // Create a new instance at the given point, oriented so that the plus side of the hyperplane points toward decreasing angular values.\n\tstatic CutAngle createPositiveFacing(double azimuth, Precision.DoubleEquivalence precision); // Create a new instance at the given azimuth, oriented so that the plus side of the hyperplane points toward increasing angular values.\n\tstatic CutAngle createPositiveFacing(Point1S point, Precision.DoubleEquivalence precision); // Create a new instance at the given point, oriented so that the plus side of the hyperplane points toward increasing angular values.\n\tstatic CutAngle fromAzimuthAndDirection(double azimuth, boolean positiveFacing, Precision.DoubleEquivalence precision); // Create a new instance from the given azimuth and direction.\n\tstatic CutAngle fromPointAndDirection(Point1S point, boolean positiveFacing, Precision.DoubleEquivalence precision); // Create a new instance from the given point and direction.\n}"}
{"index": 18560, "repo": "hibernate-core-5.6.15.Final", "des": "Thrown if Hibernate can't instantiate a class at runtime.", "code": "Class InstantiationException {\n\tjava.lang.String getMessage();\n\tjava.lang.Class getPersistentClass(); // Deprecated. Use getUninstantiatableClass() instead\n\tjava.lang.Class getUninstantiatableClass(); // Returns the Class we were attempting to instantiate.\n}"}
{"index": 9338, "repo": "hadoop-yarn-api-3.3.6", "des": "The response sent by the ResourceManager to a ApplicationMaster on it's completion.", "code": "Class FinishApplicationMasterResponse {\n\tabstract boolean getIsUnregistered(); // Get the flag which indicates that the application has successfully unregistered with the RM and the application can safely stop.\n\tstatic FinishApplicationMasterResponse newInstance(boolean isRemovedFromRMStateStore);\n\tabstract void setIsUnregistered(boolean isUnregistered); // Set the flag which indicates that the application has successfully unregistered with the RM and the application can safely stop.\n}"}
{"index": 16733, "repo": "spring-jms-6.0.11", "des": "Base class for exception thrown by the framework whenever it encounters a problem related to JMS.", "code": "public abstract class JmsException extends org.springframework.core.NestedRuntimeException {\n\tString getErrorCode(); // Convenience method to get the vendor specific error code if the root cause was an instance of JMSException.\n\tString getMessage(); // Return the detail message, including the message from the linked exception if there is one.\n}"}
{"index": 16189, "repo": "spring-data-cassandra-4.1.2", "des": "Enum for Cassandra primary key column ordering.", "code": "public enum Ordering extends Enum<Ordering> {\n\tString cql(); // Returns the CQL keyword of this Ordering.\n\tstatic Ordering valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Ordering[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 11896, "repo": "spring-kafka-3.0.9", "des": "Implementations of this interface can signal that a record about to be delivered to a message listener should be discarded instead of being delivered.", "code": "public interface RecordFilterStrategy<K,V> {\n\tboolean filter(org.apache.kafka.clients.consumer.ConsumerRecord<K,V> consumerRecord); // Return true if the record should be discarded.\n\tdefault List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> filterBatch(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> records); // Filter an entire batch of records; to filter all records, return an empty list, not null.\n}"}
{"index": 1136, "repo": "ignite-core-2.15.0", "des": "Interface to provide size, read and write operations with WAL records without any headers and meta information.", "code": "Interface RecordDataSerializer {\n\tWALRecord readRecord(WALRecord.RecordType type, ByteBufferBackedDataInput in, int size); // Reads record data of type from buffer in.\n\tint size(WALRecord record); // Calculates size of record data.\n\tvoid writeRecord(WALRecord record, ByteBuffer buf); // Writes record data to buffer buf.\n}"}
{"index": 9124, "repo": "hbase-server-3.0.0-alpha-4", "des": "A factory class for instantiating SpaceViolationPolicyEnforcement instances.", "code": "Class SpaceViolationPolicyEnforcementFactory {\n\tSpaceViolationPolicyEnforcement create(RegionServerServices rss, TableName tableName, SpaceQuotaSnapshot snapshot); // Constructs the appropriate SpaceViolationPolicyEnforcement for tables that are in violation of their space quota.\n\tSpaceViolationPolicyEnforcement createWithoutViolation(RegionServerServices rss, TableName tableName, SpaceQuotaSnapshot snapshot); // Creates the \"default\" SpaceViolationPolicyEnforcement for a table that isn't in violation.\n\tstatic SpaceViolationPolicyEnforcementFactory getInstance(); // Returns an instance of this factory.\n}"}
{"index": 17716, "repo": "spring-web-6.0.11", "des": "Intercepts concurrent request handling, where the concurrent result is obtained by waiting for a DeferredResult to be set from a thread chosen by the application (e.g.", "code": "public interface DeferredResultProcessingInterceptor {\n\tdefault <T> void afterCompletion(NativeWebRequest request, DeferredResult<T> deferredResult); // Invoked from a container thread when an async request completed for any reason including timeout and network error.\n\tdefault <T> void beforeConcurrentHandling(NativeWebRequest request, DeferredResult<T> deferredResult); // Invoked immediately before the start of concurrent handling, in the same thread that started it.\n\tdefault <T> boolean handleError(NativeWebRequest request, DeferredResult<T> deferredResult, Throwable t); // Invoked from a container thread when an error occurred while processing an async request before the DeferredResult has been set.\n\tdefault <T> boolean handleTimeout(NativeWebRequest request, DeferredResult<T> deferredResult); // Invoked from a container thread when an async request times out before the DeferredResult has been set.\n\tdefault <T> void postProcess(NativeWebRequest request, DeferredResult<T> deferredResult, Object concurrentResult); // Invoked after a DeferredResult has been set, via DeferredResult.setResult(Object) or DeferredResult.setErrorResult(Object), and is also ready to handle the concurrent result.\n\tdefault <T> void preProcess(NativeWebRequest request, DeferredResult<T> deferredResult); // Invoked immediately after the start of concurrent handling, in the same thread that started it.\n}"}
{"index": 8105, "repo": "commons-compress-1.23.0", "des": "Exception thrown when attempting to read or write data for a ZIP entry that uses ZIP features not supported by this library.", "code": "Class UnsupportedZipFeatureException {\n\tZipArchiveEntry getEntry(); // The entry using the unsupported feature.\n\tUnsupportedZipFeatureException.Feature getFeature(); // The unsupported feature that has been used.\n}"}
{"index": 4196, "repo": "jackson-core-2.15.2", "des": "Helper class that is similar to ByteArrayOutputStream in usage, but more geared to Jackson use cases internally.", "code": "Class ByteArrayBuilder {\n\tvoid append(int i);\n\tvoid appendFourBytes(int b32);\n\tvoid appendThreeBytes(int b24);\n\tvoid appendTwoBytes(int b16);\n\tvoid close();\n\tbyte[] completeAndCoalesce(int lastBlockLength); // Method that will complete \"manual\" output process, coalesce content (if necessary) and return results as a contiguous buffer.\n\tbyte[] finishCurrentSegment(); // Method called when the current segment buffer is full; will append to current contents, allocate a new segment buffer and return it\n\tvoid flush();\n\tstatic ByteArrayBuilder fromInitial(byte[] initialBlock, int length);\n\tbyte[] getCurrentSegment();\n\tint getCurrentSegmentLength();\n\tvoid release(); // Clean up method to call to release all buffers this object may be using.\n\tvoid reset();\n\tbyte[] resetAndGetFirstSegment(); // Method called when starting \"manual\" output: will clear out current state and return the first segment buffer to fill\n\tvoid setCurrentSegmentLength(int len);\n\tint size();\n\tbyte[] toByteArray(); // Method called when results are finalized and we can get the full aggregated result buffer to return to the caller\n\tvoid write(byte[] b);\n\tvoid write(byte[] b, int off, int len);\n\tvoid write(int b);\n}"}
{"index": 14515, "repo": "spring-security-web-6.1.2", "des": "Represents central information from a HttpServletRequest.", "code": "public class DefaultSavedRequest extends Object implements SavedRequest {\n\tboolean doesRequestMatch(jakarta.servlet.http.HttpServletRequest request, PortResolver portResolver); // Determines if the current request matches the DefaultSavedRequest.\n\tString getContextPath();\n\tList<jakarta.servlet.http.Cookie> getCookies();\n\tCollection<String> getHeaderNames();\n\tList<String> getHeaderValues(String name);\n\tList<Locale> getLocales();\n\tString getMethod();\n\tMap<String,String[]> getParameterMap();\n\tCollection<String> getParameterNames();\n\tString[] getParameterValues(String name);\n\tString getPathInfo();\n\tString getQueryString();\n\tString getRedirectUrl(); // Indicates the URL that the user agent used for this request.\n\tString getRequestURI();\n\tString getRequestURL();\n\tString getScheme();\n\tString getServerName();\n\tint getServerPort();\n\tString getServletPath();\n}"}
{"index": 4427, "repo": "beam-sdks-java-core-2.49.0", "des": "Manages and provides the metrics container associated with each thread.", "code": "Class MetricsEnvironment {\n\tstatic @Nullable MetricsContainer getCurrentContainer(); // Return the MetricsContainer for the current thread.\n\tstatic MetricsEnvironment.MetricsEnvironmentState getMetricsEnvironmentStateForCurrentThread(); // Returns the container holder for the current thread.\n\tstatic @Nullable MetricsContainer getProcessWideContainer(); // Return the MetricsContainer for the current process.\n\tstatic boolean isMetricsSupported(); // Indicates whether metrics reporting is supported.\n\tstatic java.io.Closeable scopedMetricsContainer(MetricsContainer container); // Set the MetricsContainer for the current thread.\n\tstatic @Nullable MetricsContainer setCurrentContainer(@Nullable MetricsContainer container); // Set the MetricsContainer for the current thread.\n\tstatic void setMetricsSupported(boolean supported); // Called by the run to indicate whether metrics reporting is supported.\n\tstatic @Nullable MetricsContainer setProcessWideContainer(@Nullable MetricsContainer container); // Set the MetricsContainer for the current process.\n}"}
{"index": 15938, "repo": "spring-rabbit-3.0.6", "des": "Bean post-processor that registers methods annotated with RabbitListener to be invoked by a AMQP message listener container created under the cover by a RabbitListenerContainerFactory according to the parameters of the annotation.", "code": "public class RabbitListenerAnnotationBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.core.Ordered, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.context.EnvironmentAware, org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterSingletonsInstantiated();\n\tprotected void assertBeanFactory();\n\tint getOrder();\n\tprotected String noBeanFoundMessage(Object target, String listenerBeanName, String requestedBeanName, Class<?> expectedClass);\n\tObject postProcessAfterInitialization(Object bean, String beanName);\n\tObject postProcessBeforeInitialization(Object bean, String beanName);\n\tprotected Collection<org.springframework.amqp.core.Declarable> processAmqpListener(RabbitListener rabbitListener, Method method, Object bean, String beanName);\n\tprotected Collection<org.springframework.amqp.core.Declarable> processListener(MethodRabbitListenerEndpoint endpoint, RabbitListener rabbitListener, Object bean, Object target, String beanName);\n\tprotected String resolveExpressionAsString(String value, String attribute);\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // Making a BeanFactory available is optional; if not set, RabbitListenerConfigurer beans won't get autodetected and an endpoint registry has to be explicitly configured.\n\tvoid setCharset(Charset charset); // Set a charset for byte[] to String method argument conversion.\n\tvoid setContainerFactoryBeanName(String containerFactoryBeanName); // Set the name of the RabbitListenerContainerFactory to use by default.\n\tvoid setEndpointRegistry(RabbitListenerEndpointRegistry endpointRegistry); // Set the RabbitListenerEndpointRegistry that will hold the created endpoint and manage the lifecycle of the related listener container.\n\tvoid setEnvironment(org.springframework.core.env.Environment environment);\n\tvoid setMessageHandlerMethodFactory(org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory messageHandlerMethodFactory); // Set the MessageHandlerMethodFactory to use to configure the message listener responsible to serve an endpoint detected by this processor.\n}"}
{"index": 15541, "repo": "spring-batch-core-5.0.2", "des": "Implementation of JobExplorer that uses the injected DAOs.", "code": "public class SimpleJobExplorer extends Object implements JobExplorer {\n\tList<JobInstance> findJobInstancesByJobName(String jobName, int start, int count); // Fetch JobInstance values in descending order of creation (and, therefore, usually of first execution) with a 'like' or wildcard criteria.\n\tSet<JobExecution> findRunningJobExecutions(String jobName); // Retrieve running job executions.\n\tJobExecution getJobExecution(Long executionId); // Retrieve a JobExecution by its ID.\n\tList<JobExecution> getJobExecutions(JobInstance jobInstance); // Retrieve job executions by their job instance.\n\tJobInstance getJobInstance(Long instanceId);\n\tJobInstance getJobInstance(String jobName, JobParameters jobParameters);\n\tlong getJobInstanceCount(String jobName); // Query the repository for the number of unique JobInstance objects associated with the supplied job name.\n\tList<JobInstance> getJobInstances(String jobName, int start, int count); // Fetch JobInstance values in descending order of creation (and, therefore, usually, of first execution).\n\tList<String> getJobNames(); // Query the repository for all unique JobInstance names (sorted alphabetically).\n\tJobExecution getLastJobExecution(JobInstance jobInstance); // Find the last JobExecution that has been created for a given JobInstance.\n\tJobInstance getLastJobInstance(String jobName); // Find the last job instance, by ID, for the given job.\n\tStepExecution getStepExecution(Long jobExecutionId, Long executionId); // Retrieve a StepExecution by its ID and parent JobExecution ID.\n}"}
{"index": 15813, "repo": "camel-api-4.0.0-RC1", "des": "A specialized AggregationRepository which also supports optimistic locking.", "code": "public interface OptimisticLockingAggregationRepository extends AggregationRepository {\n\tExchange add(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange); // Add the given Exchange under the correlation key.\n\tvoid remove(CamelContext camelContext, String key, Exchange exchange); // Removes the given Exchange when both the supplied key and Exchange are present in the repository.\n}"}
{"index": 16848, "repo": "spring-amqp-3.0.6", "des": "Classes implementing this interface can be auto-declared with the broker during context initialization by an AmqpAdmin.", "code": "public interface Declarable {\n\tdefault void addArgument(String name, Object value); // Add an argument to the declarable.\n\tCollection<?> getDeclaringAdmins(); // The collection of AmqpAdmins that should declare this object; if empty, all admins should declare.\n\tboolean isIgnoreDeclarationExceptions(); // Should ignore exceptions (such as mismatched args) when declaring.\n\tdefault Object removeArgument(String name); // Remove an argument from the declarable.\n\tvoid setAdminsThatShouldDeclare(Object... adminArgs); // The AmqpAdmins that should declare this object; default is all admins.\n\tboolean shouldDeclare(); // Whether or not this object should be automatically declared by any AmqpAdmin.\n}"}
{"index": 14143, "repo": "wicket-core-10.0.0-M1", "des": "Whereas a Panel replaces the body markup with the associated markup file, a BorderPanel assumes a that Body component renders the body markup including any number of Wicket Components.", "code": "public abstract class BorderPanel extends Panel {\n\tfinal Body getBodyContainer(); // Provide easy access to the Body component.\n\tfinal Body newBodyContainer(String id); // Create a new body container identified by id in the panel's markup\n\tprotected IMarkupSourcingStrategy newMarkupSourcingStrategy(); // If Component.getMarkupSourcingStrategy() returns null, this method will be called.\n\tfinal Body setBodyContainer(Body body); // Sets the body container\n}"}
{"index": 1375, "repo": "nutch-2.4", "des": "Allows users to do regex substitutions on all/any URLs that are encountered, which is useful for stripping session IDs from URLs.", "code": "Class RegexURLNormalizer {\n\tjava.util.HashMap<java.lang.String,java.util.List<org.apache.nutch.net.urlnormalizer.regex.RegexURLNormalizer.Rule>> getScopedRules();\n\tstatic void main(java.lang.String[] args); // Spits out patterns and substitutions that are in the configuration file.\n\tjava.lang.String normalize(java.lang.String urlString, java.lang.String scope);\n\tjava.lang.String regexNormalize(java.lang.String urlString, java.lang.String scope); // This function does the replacements by iterating through all the regex patterns.\n\tvoid setConf(Configuration conf);\n}"}
{"index": 2704, "repo": "mahout-core-14.1", "des": "If f(0, 0) = 0 we can iterate through the nonzeros in either x or y.", "code": "Class VectorBinaryAssign.AssignIterateUnionRandomInplaceUpdates {\n\tVector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tdouble estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tboolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 13856, "repo": "spring-webflux-6.0.11", "des": "Documented KeyValues for the HTTP client observations.", "code": "public enum ClientHttpObservationDocumentation extends Enum<ClientHttpObservationDocumentation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\tstatic ClientHttpObservationDocumentation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ClientHttpObservationDocumentation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10040, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Helper class tracking allocation counts.", "code": "Class DefaultAllocateCountTracker {\n\tvoid addContainers(ContainerAllocateData containerAllocateData); // Adds new count of containers into 'host', 'rack' and 'any' pending requests.\n\tvoid addContainers(int count); // Adds new count of containers into 'any' pending requests.\n\tDefaultAllocateCountTracker.AllocateCountInfo getAllocateCounts(); // Gets the allocate counts which should be used to create allocate requests.\n\tString getId();\n\tContainer processAllocatedContainer(Container container);\n\tvoid setConfiguration(Configuration configuration);\n}"}
{"index": 16319, "repo": "maven-compat-4.0.0-alpha-7", "des": "Describes a version transformation during artifact resolution - \"latest\" type", "code": "@Named(\"latest\") @Singleton public class LatestArtifactTransformation extends AbstractVersionTransformation {\n\tprotected String constructVersion(Versioning versioning, String baseVersion);\n\tvoid transformForDeployment(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository); // Take in an artifact and return the transformed artifact for distributing to remote repository.\n\tvoid transformForInstall(Artifact artifact, ArtifactRepository localRepository); // Take in an artifact and return the transformed artifact for locating in the local repository.\n\tvoid transformForResolve(Artifact artifact, RepositoryRequest request); // Take in an artifact and return the transformed artifact for locating in the remote repository.\n}"}
{"index": 12230, "repo": "jena-core-4.9.0", "des": "A full implementation of RDFS reasoning using a hybrid rule system, together with optimized subclass/subproperty closure using the transitive graph caches.", "code": "public class RDFSRuleReasoner extends GenericRuleReasoner {\n\tInfGraph bind(Graph data); // Attach the reasoner to a set of RDF data to process.\n\tReasoner bindSchema(Graph tbox); // Precompute the implications of a schema graph.\n\tCapabilities getGraphCapabilities(); // Return the Jena Graph Capabilities that the inference graphs generated by this reasoner are expected to conform to.\n\tstatic List<Rule> loadRulesLevel(String level); // Return the RDFS rule set, loading it in if necessary.\n}"}
{"index": 5870, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol buffer based implementation of GetApplicationHomeSubClusterResponse.", "code": "Class GetApplicationHomeSubClusterResponsePBImpl {\n\tboolean equals(Object other);\n\tApplicationHomeSubCluster getApplicationHomeSubCluster(); // Get the ApplicationHomeSubCluster representing the mapping of the application to it's home sub-cluster.\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.GetApplicationHomeSubClusterResponseProto getProto();\n\tvoid setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationInfo); // Set the ApplicationHomeSubCluster representing the mapping of the application to it's home sub-cluster.\n}"}
{"index": 1720, "repo": "samza-api-1.8.0", "des": "The framework-provided context for the current task.", "code": "Interface TaskContext {\n\tCallbackScheduler getCallbackScheduler(); // Gets the CallbackScheduler for this task, which can be used to schedule a callback to be executed at a future time.\n\tKeyValueStore<?,?> getStore(java.lang.String storeName); // Gets the KeyValueStore associated with storeName for this task.\n\t<K,V> ReadWriteTable<K,V> getTable(java.lang.String tableId); // Gets the ReadWriteTable corresponding to the tableId for this task.\n\tMetricsRegistry getTaskMetricsRegistry(); // Gets the MetricsRegistry for this task, which can be used to register metrics that are reported per task.\n\tTaskModel getTaskModel(); // Gets the TaskModel for this task, which contains this task's name and its SystemStreamPartitions.\n\t<K,V,U> ReadWriteUpdateTable<K,V,U> getUpdatableTable(java.lang.String tableId); // Gets the ReadWriteUpdateTable corresponding to the tableId for this task.\n\tvoid setStartingOffset(SystemStreamPartition systemStreamPartition, java.lang.String offset); // Sets the starting offset for the given SystemStreamPartition.\n}"}
{"index": 10502, "repo": "groovy-all-4.0.13", "des": "Represents an eviction strategy for the cache with limited size", "code": "public static enum EvictableCache.EvictionStrategy extends Enum<EvictableCache.EvictionStrategy> {\n\tstatic EvictableCache.EvictionStrategy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic EvictableCache.EvictionStrategy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16072, "repo": "shiro-web-2.0.0-alpha-2", "des": "A FilterChainManager manages the creation and modification of Filter chains from an available pool of Filter instances.", "code": "public interface FilterChainManager {\n\tvoid addFilter(String name, javax.servlet.Filter filter); // Adds a filter to the 'pool' of available filters that can be used when creating filter chains.\n\tvoid addFilter(String name, javax.servlet.Filter filter, boolean init); // Adds a filter to the 'pool' of available filters that can be used when creating filter chains.\n\tvoid addToChain(String chainName, String filterName); // Adds (appends) a filter to the filter chain identified by the given chainName.\n\tvoid addToChain(String chainName, String filterName, String chainSpecificFilterConfig); // Adds (appends) a filter to the filter chain identified by the given chainName.\n\tvoid createChain(String chainName, String chainDefinition); // Creates a filter chain for the given chainName with the specified chainDefinition String.\n\tvoid createDefaultChain(String chainName);\n\tNamedFilterList getChain(String chainName); // Returns the filter chain identified by the specified chainName or null if there is no chain with that name.\n\tSet<String> getChainNames(); // Returns the names of all configured chains or an empty Set if no chains have been configured.\n\tMap<String,javax.servlet.Filter> getFilters(); // Returns the pool of available Filters managed by this manager, keyed by name.\n\tboolean hasChains(); // Returns true if one or more configured chains are available, false if none are configured.\n\tjavax.servlet.FilterChain proxy(javax.servlet.FilterChain original, String chainName); // Proxies the specified original FilterChain with the named chain.\n\tvoid setGlobalFilters(List<String> globalFilterNames); // Configures the set of named filters that will match all paths.\n}"}
{"index": 1220, "repo": "ignite-core-2.15.0", "des": "Skip optimized String comparison implemented in StringInlineIndexKeyType.", "code": "Class StringNoCompareInlineIndexKeyType {\n\tint compare0(long pageAddr, int off, IndexKey key); // Compares inlined and given value.\n\tprotected StringIndexKey get0(long pageAddr, int off); // Restores value from inline.\n\tboolean inlinedFullValue(long pageAddr, int off, int maxSize); // Whether inline contains full index key.\n\tprotected int inlineSize0(StringIndexKey key); // Return inlined size for specified key.\n\tprotected int put0(long pageAddr, int off, StringIndexKey key, int maxSize); // Puts given value into inline index tree.\n}"}
{"index": 18820, "repo": "lucene-core-9.7.0", "des": "An implementation of QueryTimeout that can be used by the ExitableDirectoryReader class to time out and exit out when a query takes a long time to rewrite.", "code": "Class QueryTimeoutImpl {\n\tLong getTimeoutAt(); // Returns time at which to time out, in nanoseconds relative to the (JVM-specific) epoch for System.nanoTime(), to compare with the value returned by nanoTime().\n\tvoid reset(); // Reset the timeout value.\n\tboolean shouldExit(); // Return true if reset() has not been called and the elapsed time has exceeded the time allowed.\n}"}
{"index": 16792, "repo": "spring-expression-6.0.11", "des": "Expression language AST node that represents a method reference.", "code": "public class MethodReference extends SpelNodeImpl {\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode for this node into the supplied visitor.\n\tfinal String getName();\n\tTypedValue getValueInternal(ExpressionState state);\n\tprotected ValueRef getValueRef(ExpressionState state);\n\tboolean isCompilable(); // A method reference is compilable if it has been resolved to a reflectively accessible method and the child nodes (arguments to the method) are also compilable.\n\tString toStringAST(); // Return the string form of this AST node.\n}"}
{"index": 5376, "repo": "druid-processing-26.0.0", "des": "A PartitionChunk represents a chunk of a partitioned(sharded) space.", "code": "Interface PartitionChunk<T> {\n\tboolean abuts(PartitionChunk<T> chunk); // Determines if this PartitionChunk abuts another PartitionChunk.\n\tint getChunkNumber(); // Returns the partition chunk number of this PartitionChunk.\n\tT getObject(); // Returns the payload, generally an object that can be used to perform some action against the shard.\n\tboolean isEnd(); // Returns true if this chunk is the end of the partition.\n\tboolean isStart(); // Returns true if this chunk is the beginning of the partition.\n}"}
{"index": 4983, "repo": "commons-collections-3.2.2", "des": "Decorates another Map returning a default value if the map does not contain the requested key.", "code": "Class DefaultedMap {\n\tstatic Map decorate(Map map, Factory factory); // Factory method to create a defaulting map.\n\tstatic Map decorate(Map map, Object defaultValue); // Factory method to create a defaulting map.\n\tstatic Map decorate(Map map, Transformer factory); // Factory method to create a defaulting map.\n\tObject get(Object key);\n}"}
{"index": 10728, "repo": "spring-tx-6.0.11", "des": "Rule determining whether a given exception should cause a rollback.", "code": "public class RollbackRuleAttribute extends Object implements Serializable {\n\tboolean equals(Object other);\n\tint getDepth(Throwable exception); // Return the depth of the superclass matching, with the following semantics.\n\tString getExceptionName(); // Get the configured exception name pattern that this rule uses for matching.\n}"}
{"index": 8576, "repo": "commons-io-2.13.0", "des": "An output stream decorator that tags potential exceptions so that the stream that caused the exception can easily be identified.", "code": "Class TaggedOutputStream {\n\tprotected void handleIOException(IOException e); // Tags any IOExceptions thrown, wrapping and re-throwing.\n\tboolean isCauseOf(Exception exception); // Tests if the given exception was caused by this stream.\n\tvoid throwIfCauseOf(Exception exception); // Re-throws the original exception thrown by this stream.\n}"}
{"index": 18161, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Provides CustomEntityDirtinessStrategy.AttributeChecker with meta information about the attributes being checked.", "code": "Interface CustomEntityDirtinessStrategy.AttributeInformation {\n\tint getAttributeIndex(); // Many of Hibernate internals use arrays to define information about attributes.\n\tEntityPersister getContainingPersister(); // Get a reference to the persister for the entity containing this attribute.\n\tjava.lang.Object getCurrentValue(); // Get the current value of this attribute.\n\tjava.lang.Object getLoadedValue(); // Get the loaded value of this attribute.\n\tjava.lang.String getName(); // Get the name of this attribute.\n\tType getType(); // Get the mapping type of this attribute.\n}"}
{"index": 5602, "repo": "org.apache.karaf.main-2.4.4", "des": "A specification which depends on a generic capability.", "code": "Interface GenericSpecification {\n\tString getMatchingFilter(); // Returns a matching filter used to match with a suppliers attributes\n\tint getResolution(); // Returns the resolution type of the required capability.\n\tGenericDescription[] getSuppliers(); // Returns the suppliers of the capability.\n\tString getType(); // Returns the type of generic specification\n}"}
{"index": 14387, "repo": "wicket-core-10.0.0-M1", "des": "A choice subclass that shows choices in radio style.", "code": "public class RadioChoice<T> extends AbstractSingleSelectChoice<T> {\n\tprotected void appendOptionHtml(org.apache.wicket.util.string.AppendingStringBuffer buffer, T choice, int index, String selected); // Generates and appends html for a single choice into the provided buffer\n\tprotected org.apache.wicket.util.value.IValueMap getAdditionalAttributes(int index, T choice); // You may subclass this method to provide additional attributes to the <input ..> tag.\n\tprotected org.apache.wicket.util.value.IValueMap getAdditionalAttributesForLabel(int index, T choice); // You may subclass this method to provide additional attributes to the <label ..> tag.\n\tprotected CharSequence getDefaultChoice(String selectedValue); // Not supported - does nothing.\n\tString getPrefix();\n\tprotected String getPrefix(int index, T choice);\n\tString getSuffix();\n\tprotected String getSuffix(int index, T choice);\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tRadioChoice<T> setLabelPosition(AbstractChoice.LabelPosition labelPosition); // Sets the preferred position of the <label> for each choice\n\tfinal RadioChoice<T> setPrefix(String prefix);\n\tfinal RadioChoice<T> setSuffix(String suffix);\n}"}
{"index": 6055, "repo": "jackson-databind-2.15.2", "des": "Immutable container class used to store simple configuration settings for both serialization and deserialization.", "code": "Class BaseSettings {\n\tBaseSettings copy(); // Turns out we are not necessarily 100% stateless, alas, since ClassIntrospector typically has a cache.\n\tAccessorNamingStrategy.Provider getAccessorNaming();\n\tAnnotationIntrospector getAnnotationIntrospector();\n\tBase64Variant getBase64Variant();\n\tClassIntrospector getClassIntrospector();\n\tDateFormat getDateFormat();\n\tHandlerInstantiator getHandlerInstantiator();\n\tLocale getLocale();\n\tPolymorphicTypeValidator getPolymorphicTypeValidator();\n\tPropertyNamingStrategy getPropertyNamingStrategy();\n\tTimeZone getTimeZone();\n\tTypeFactory getTypeFactory();\n\tTypeResolverBuilder<?> getTypeResolverBuilder();\n\tboolean hasExplicitTimeZone(); // Accessor that may be called to determine whether this settings object has been explicitly configured with a TimeZone (true), or is still relying on the default settings (false).\n\tBaseSettings with(Base64Variant base64);\n\tBaseSettings with(Locale l);\n\tBaseSettings with(PolymorphicTypeValidator v);\n\tBaseSettings with(TimeZone tz); // Fluent factory for constructing a new instance that uses specified TimeZone.\n\tBaseSettings withAccessorNaming(AccessorNamingStrategy.Provider p);\n\tBaseSettings withAnnotationIntrospector(AnnotationIntrospector ai);\n\tBaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai);\n\tBaseSettings withClassIntrospector(ClassIntrospector ci);\n\tBaseSettings withDateFormat(DateFormat df);\n\tBaseSettings withHandlerInstantiator(HandlerInstantiator hi);\n\tBaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai);\n\tBaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns);\n\tBaseSettings withTypeFactory(TypeFactory tf);\n\tBaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer);\n}"}
{"index": 9827, "repo": "commons-math3-3.6.1", "des": "This class provides conversions related to spherical coordinates.", "code": "Class SphericalCoordinates {\n\tVector3D getCartesian(); // Get the Cartesian coordinates.\n\tdouble getPhi(); // Get the polar (co-latitude) angle.\n\tdouble getR(); // Get the radius.\n\tdouble getTheta(); // Get the azimuthal angle in x-y plane.\n\tdouble[] toCartesianGradient(double[] sGradient); // Convert a gradient with respect to spherical coordinates into a gradient with respect to Cartesian coordinates.\n\tdouble[][] toCartesianHessian(double[][] sHessian, double[] sGradient); // Convert a Hessian with respect to spherical coordinates into a Hessian with respect to Cartesian coordinates.\n}"}
{"index": 16126, "repo": "spring-data-cassandra-4.1.2", "des": "Simple PersistenceExceptionTranslator for Cassandra.", "code": "public class CassandraExceptionTranslator extends Object implements CqlExceptionTranslator {\n\tprotected String buildMessage(String task, String cql, RuntimeException ex); // Build a message String for the given DriverException.\n\tDataAccessException translate(String task, String cql, RuntimeException exception); // Translate the given RuntimeException into a generic DataAccessException.\n\tDataAccessException translateExceptionIfPossible(RuntimeException exception);\n}"}
{"index": 7037, "repo": "calcite-core-1.34.0", "des": "Interface for looking up methods relating to reflective visitation.", "code": "Interface ReflectiveVisitDispatcher<R extends ReflectiveVisitor,E> {\n\tboolean invokeVisitor(R visitor, E visitee, String visitMethodName); // Implements the Glossary.VISITOR_PATTERN via reflection.\n\t@Nullable Method lookupVisitMethod(Class<? extends R> visitorClass, Class<? extends E> visiteeClass, String visitMethodName); // Looks up a visit method.\n\t@Nullable Method lookupVisitMethod(Class<? extends R> visitorClass, Class<? extends E> visiteeClass, String visitMethodName, List<Class> additionalParameterTypes); // Looks up a visit method taking additional parameters beyond the overloaded visitee type.\n}"}
{"index": 10851, "repo": "spring-data-redis-3.1.2", "des": "HashMapper based on Apache Commons BeanUtils project.", "code": "public class BeanUtilsHashMapper<T> extends Object implements HashMapper<T,String,String> {\n\tT fromHash(Map<String,String> hash); // Convert a hash (map) to an object.\n\tMap<String,String> toHash(T object); // Convert an object to a map that can be used with Redis hashes.\n}"}
{"index": 1987, "repo": "hive-exec-4.0.0-alpha-2", "des": "The result of looking up a key in the multi-hash map.", "code": "Class BytesBytesMultiHashMap.Result {\n\tWriteBuffers.ByteSegmentRef first();\n\tvoid forget(); // Lets go of any references to a hash map.\n\tWriteBuffers.Position getReadPos(); // Return the thread-safe read position.\n\tboolean hasRows();\n\tboolean isSingleRow();\n\tWriteBuffers.ByteSegmentRef next();\n\tvoid set(BytesBytesMultiHashMap hashMap, long firstOffset, boolean hasList, long offsetAfterListRecordKeyLen); // Set internal values for reading the values after finding a key.\n}"}
{"index": 5875, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Response to a query with SubClusterInfo about a sub-cluster.", "code": "Class GetSubClusterInfoResponse {\n\tabstract SubClusterInfo getSubClusterInfo(); // Get the SubClusterInfo encapsulating the information about the sub-cluster.\n\tstatic GetSubClusterInfoResponse newInstance(SubClusterInfo subClusterInfo);\n\tabstract void setSubClusterInfo(SubClusterInfo subClusterInfo); // Set the SubClusterInfo encapsulating the information about the sub-cluster.\n}"}
{"index": 4883, "repo": "hadoop-common-3.3.4", "des": "Provides SaslProperties to be used for a connection.", "code": "Class SaslPropertiesResolver {\n\tMap<String,String> getClientProperties(InetAddress serverAddress); // Identify the Sasl Properties to be used for a connection with a server.\n\tMap<String,String> getClientProperties(InetAddress serverAddress, int ingressPort); // Identify the Sasl Properties to be used for a connection with a server.\n\tConfiguration getConf(); // Return the configuration used by this object.\n\tMap<String,String> getDefaultProperties(); // The default Sasl Properties read from the configuration\n\tstatic SaslPropertiesResolver getInstance(Configuration conf); // Returns an instance of SaslPropertiesResolver.\n\tMap<String,String> getServerProperties(InetAddress clientAddress); // Identify the Sasl Properties to be used for a connection with a client.\n\tMap<String,String> getServerProperties(InetAddress clientAddress, int ingressPort); // Identify the Sasl Properties to be used for a connection with a client.\n\tvoid setConf(Configuration conf); // Set the configuration to be used by this object.\n}"}
{"index": 15788, "repo": "camel-api-4.0.0-RC1", "des": "Used for defining if a given class is singleton or not.", "code": "public interface IsSingleton {\n\tboolean isSingleton(); // Whether this class supports being singleton or not.\n\tstatic boolean test(Object instance); // Test if the given instance is a singleton or not.\n}"}
{"index": 14569, "repo": "spring-security-web-6.1.2", "des": "A simple pre-authenticated filter which obtains the username from request attributes, for use with SSO systems such as Stanford WebAuth or Shibboleth.", "code": "public class RequestAttributeAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter {\n\tprotected Object getPreAuthenticatedCredentials(jakarta.servlet.http.HttpServletRequest request); // Credentials aren't usually applicable, but if a credentialsEnvironmentVariable is set, this will be read and used as the credentials value.\n\tprotected Object getPreAuthenticatedPrincipal(jakarta.servlet.http.HttpServletRequest request); // Read and returns the variable named by principalEnvironmentVariable from the request.\n\tvoid setCredentialsEnvironmentVariable(String credentialsEnvironmentVariable);\n\tvoid setExceptionIfVariableMissing(boolean exceptionIfVariableMissing); // Defines whether an exception should be raised if the principal variable is missing.\n\tvoid setPrincipalEnvironmentVariable(String principalEnvironmentVariable);\n}"}
{"index": 8759, "repo": "hadoop-yarn-common-3.3.6", "des": "A client library that can be used to post some information in terms of a number of conceptual entities.", "code": "Class TimelineClient {\n\tabstract void cancelDelegationToken(org.apache.hadoop.security.token.Token<TimelineDelegationTokenIdentifier> timelineDT); // Cancel a timeline delegation token.\n\tstatic TimelineClient createTimelineClient(); // Creates an instance of the timeline v.1.x client.\n\tabstract org.apache.hadoop.security.token.Token<TimelineDelegationTokenIdentifier> getDelegationToken(String renewer); // Get a delegation token so as to be able to talk to the timeline server in a secure way.\n\tabstract void putDomain(org.apache.hadoop.yarn.api.records.ApplicationAttemptId appAttemptId, org.apache.hadoop.yarn.api.records.timeline.TimelineDomain domain); // Send the information of a domain to the timeline server.\n\tabstract void putDomain(org.apache.hadoop.yarn.api.records.timeline.TimelineDomain domain); // Send the information of a domain to the timeline server.\n\tabstract org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse putEntities(org.apache.hadoop.yarn.api.records.ApplicationAttemptId appAttemptId, org.apache.hadoop.yarn.api.records.timeline.TimelineEntityGroupId groupId, org.apache.hadoop.yarn.api.records.timeline.TimelineEntity... entities); // Send the information of a number of conceptual entities to the timeline server.\n\tabstract org.apache.hadoop.yarn.api.records.timeline.TimelinePutResponse putEntities(org.apache.hadoop.yarn.api.records.timeline.TimelineEntity... entities); // Send the information of a number of conceptual entities to the timeline server.\n\tabstract long renewDelegationToken(org.apache.hadoop.security.token.Token<TimelineDelegationTokenIdentifier> timelineDT); // Renew a timeline delegation token.\n}"}
{"index": 18229, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Provides access to information about existing primary key for a table", "code": "Interface PrimaryKeyInformation {\n\tjava.lang.Iterable<ColumnInformation> getColumns(); // Obtain the columns making up the primary key.\n\tIdentifier getPrimaryKeyIdentifier(); // Obtain the identifier for this PK.\n}"}
{"index": 9241, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Extends the AbstractRequestInterceptor class and provides an implementation that simply forwards the AM requests to the cluster resource manager.", "code": "Class DefaultRequestInterceptor {\n\torg.apache.hadoop.yarn.api.protocolrecords.AllocateResponse allocate(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest request);\n\torg.apache.hadoop.yarn.server.api.protocolrecords.DistributedSchedulingAllocateResponse allocateForDistributedScheduling(org.apache.hadoop.yarn.server.api.protocolrecords.DistributedSchedulingAllocateRequest request); // Default implementation that invokes the distributed scheduling version of the register method.\n\torg.apache.hadoop.yarn.api.protocolrecords.FinishApplicationMasterResponse finishApplicationMaster(org.apache.hadoop.yarn.api.protocolrecords.FinishApplicationMasterRequest request);\n\tstatic org.apache.hadoop.io.Text getTokenService(org.apache.hadoop.conf.Configuration conf, String address, String defaultAddr, int defaultPort);\n\tvoid init(AMRMProxyApplicationContext appContext); // Initializes the RequestInterceptor.\n\torg.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse registerApplicationMaster(org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterRequest request);\n\torg.apache.hadoop.yarn.server.api.protocolrecords.RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterRequest request); // Default implementation that invokes the distributed scheduling version of the allocate method.\n\tvoid setNextInterceptor(RequestInterceptor next); // Sets the RequestInterceptor in the chain.\n\tvoid setRMClient(org.apache.hadoop.yarn.api.ApplicationMasterProtocol rmClient);\n}"}
{"index": 14014, "repo": "spring-retry-2.0.2", "des": "A Classifier that maps from String patterns with wildcards to a set of values of a given type.", "code": "public class PatternMatchingClassifier<T> extends Object implements Classifier<String,T> {\n\tT classify(String classifiable); // Classify the input by matching it against the patterns provided in setPatternMap(Map).\n\tvoid setPatternMap(Map<String,T> values); // A map from pattern to value\n}"}
{"index": 11704, "repo": "spring-data-neo4j-7.1.2", "des": "Base class for imperative SDN configuration using JavaConfig.", "code": "@Configuration @API(status=STABLE, since=\"6.0\") public abstract class AbstractNeo4jConfig extends Object {\n\tNeo4jBookmarkManager bookmarkManager();\n\torg.neo4j.cypherdsl.core.renderer.Configuration cypherDslConfiguration();\n\tprotected DatabaseSelectionProvider databaseSelectionProvider(); // Configures the database selection provider.\n\tabstract org.neo4j.driver.Driver driver(); // The driver to be used for interacting with Neo4j.\n\tprotected final Set<Class<?>> getInitialEntitySet(); // Scans the mapping base package for classes annotated with Node.\n\tprotected Collection<String> getMappingBasePackages(); // Returns the base packages to scan for Neo4j mapped entities at startup.\n\tNeo4jClient neo4jClient(org.neo4j.driver.Driver driver, DatabaseSelectionProvider databaseSelectionProvider); // The driver used here should be the driver resulting from driver(), which is the default.\n\tNeo4jConversions neo4jConversions();\n\tNeo4jMappingContext neo4jMappingContext(Neo4jConversions neo4JConversions); // Creates a Neo4jMappingContext equipped with entity classes scanned from the mapping base package.\n\tNeo4jOperations neo4jTemplate(Neo4jClient neo4jClient, Neo4jMappingContext mappingContext);\n\tprotected final Set<Class<?>> scanForEntities(String basePackage); // Deprecated. since 6.0.2 Use Neo4jEntityScanner instead.\n\tPlatformTransactionManager transactionManager(org.neo4j.driver.Driver driver, DatabaseSelectionProvider databaseSelectionProvider); // Provides a PlatformTransactionManager for Neo4j based on the driver resulting from driver().\n}"}
{"index": 17934, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read and write Source objects.", "code": "public class SourceHttpMessageConverter<T extends Source> extends AbstractHttpMessageConverter<T> {\n\tprotected Long getContentLength(T t, MediaType contentType); // Returns the content length for the given type.\n\tboolean isProcessExternalEntities(); // Return whether XML external entities are allowed.\n\tboolean isSupportDtd(); // Return whether DTD parsing is supported.\n\tprotected T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage); // Abstract template method that reads the actual object.\n\tvoid setProcessExternalEntities(boolean processExternalEntities); // Indicate whether external XML entities are processed when converting to a Source.\n\tvoid setSupportDtd(boolean supportDtd); // Indicate whether DTD parsing should be supported.\n\tboolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tprotected void writeInternal(T t, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 4357, "repo": "beam-sdks-java-core-2.49.0", "des": "Apache Beam provides a number of experimental features that can be enabled with this flag.", "code": "Interface ExperimentalOptions {\n\tstatic void addExperiment(ExperimentalOptions options, java.lang.String experiment); // Adds experiment to options if not already present.\n\t@Nullable java.util.List<java.lang.String> getExperiments();\n\tstatic java.lang.String getExperimentValue(PipelineOptions options, java.lang.String experiment); // Return the value for the specified experiment or null if not present.\n\tstatic boolean hasExperiment(PipelineOptions options, java.lang.String experiment); // Returns true iff the provided pipeline options has the specified experiment enabled.\n\tvoid setExperiments(@Nullable java.util.List<java.lang.String> value);\n}"}
{"index": 771, "repo": "ignite-core-2.15.0", "des": "One Phase Commit Near transaction ack request.", "code": "Class GridDhtTxOnePhaseCommitAckRequest {\n\tboolean addDeploymentInfo(); // Deployment enabled flag indicates whether deployment info has to be added to this message.\n\tboolean cacheGroupMessage();\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tint handlerId();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tCollection<GridCacheVersion> versions();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 3367, "repo": "hadoop-azure-3.3.6", "des": "This class provides convenience methods to obtain AAD tokens.", "code": "Class AzureADAuthenticator {\n\tstatic AzureADToken getTokenFromMsi(String authEndpoint, String tenantGuid, String clientId, String authority, boolean bypassCache); // Gets AAD token from the local virtual machine's VM extension.\n\tstatic AzureADToken getTokenUsingClientCreds(String authEndpoint, String clientId, String clientSecret); // gets Azure Active Directory token using the user ID and password of a service principal (that is, Web App in Azure Active Directory).\n\tstatic AzureADToken getTokenUsingRefreshToken(String authEndpoint, String clientId, String refreshToken); // Gets Azure Active Directory token using refresh token.\n\tstatic void init(AbfsConfiguration abfsConfiguration);\n}"}
{"index": 15056, "repo": "spring-vault-core-3.0.4", "des": "Version-specific endpoint implementations that use either legacy or sys/leases endpoints.", "code": "public enum LeaseEndpoints extends Enum<LeaseEndpoints> {\n\tstatic LeaseEndpoints valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic LeaseEndpoints[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 15689, "repo": "pulsar-common-3.0.0", "des": "A Rate Limiter that distributes permits at a configurable rate.", "code": "public class RateLimiter extends Object implements AutoCloseable {\n\tvoid acquire(); // Acquires the given number of permits from this RateLimiter, blocking until the request be granted.\n\tvoid acquire(long acquirePermit); // Acquires the given number of permits from this RateLimiter, blocking until the request be granted.\n\tvoid close();\n\tprotected ScheduledFuture<?> createTask();\n\tlong getAvailablePermits(); // Return available permits for this RateLimiter.\n\tlong getRate(); // Returns configured permit rate per pre-configured rate-period.\n\tlong getRateTime();\n\tTimeUnit getRateTimeUnit();\n\tboolean isClosed();\n\tvoid setRate(long permits); // Resets new rate by configuring new value for permits per configured rate-period.\n\tvoid setRate(long permits, long rateTime, TimeUnit timeUnit, Supplier<Long> permitUpdaterByte); // Resets new rate with new permits and rate-time.\n\tboolean tryAcquire(); // Acquires permits from this RateLimiter if it can be acquired immediately without delay.\n\tboolean tryAcquire(long acquirePermit); // Acquires permits from this RateLimiter if it can be acquired immediately without delay.\n}"}
{"index": 7490, "repo": "cassandra-all-4.1.2", "des": "A memtable that uses memory tracked and maybe allocated via a MemtableAllocator from a MemtablePool.", "code": "Class AbstractAllocatorMemtable {\n\tvoid addMemoryUsageTo(Memtable.MemoryUsage stats); // Add this memtable's used memory to the given usage object.\n\tstatic MemtablePool createMemtableAllocatorPoolInternal(Config.MemtableAllocationType allocationType, long heapLimit, long offHeapLimit, float memtableCleanupThreshold, MemtableCleaner cleaner);\n\tvoid discard(); // This memtable is no longer in use or required for outstanding flushes or operations.\n\tprotected abstract Memtable.Factory factory();\n\tstatic Future<java.lang.Boolean> flushLargestMemtable(); // Finds the largest memtable, as a percentage of *either* on- or off-heap memory limits, and immediately queues it for flushing.\n\tMemtableAllocator getAllocator();\n\tvoid localRangesUpdated(); // Called when the known ranges have been updated and owner.localRangeSplits() may return different values.\n\tvoid markExtraOffHeapUsed(long additionalSpace, OpOrder.Group opGroup); // Adjust the used off-heap space by the given size (e.g.\n\tvoid markExtraOnHeapUsed(long additionalSpace, OpOrder.Group opGroup); // Adjust the used on-heap space by the given size (e.g.\n\tvoid metadataUpdated(); // Called when the table's metadata is updated.\n\tvoid performSnapshot(java.lang.String snapshotName); // If the memtable needs to do some special action for snapshots (e.g.\n\tboolean shouldSwitch(ColumnFamilyStore.FlushReason reason); // Decides whether the memtable should be switched/flushed for the passed reason.\n\tvoid switchOut(OpOrder.Barrier writeBarrier, java.util.concurrent.atomic.AtomicReference<CommitLogPosition> commitLogUpperBound); // Called to tell the memtable that it is being switched out and will be flushed (or dropped) and discarded.\n}"}
{"index": 13448, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Used to create a ServerWebExchangeMatcher for static resources in commonly used locations.", "code": "public final class StaticResourceRequest extends Object {\n\tStaticResourceRequest.StaticResourceServerWebExchange at(Set<StaticResourceLocation> locations); // Returns a matcher that includes the specified Locations.\n\tStaticResourceRequest.StaticResourceServerWebExchange at(StaticResourceLocation first, StaticResourceLocation... rest); // Returns a matcher that includes the specified Locations.\n\tStaticResourceRequest.StaticResourceServerWebExchange atCommonLocations(); // Returns a matcher that includes all commonly used Locations.\n}"}
{"index": 10263, "repo": "spring-core-6.0.11", "des": "A speedy alternative to ByteArrayOutputStream.", "code": "public class FastByteArrayOutputStream extends OutputStream {\n\tvoid close();\n\tInputStream getInputStream(); // Get an InputStream to retrieve the data in this OutputStream.\n\tvoid reset(); // Reset the contents of this FastByteArrayOutputStream.\n\tvoid resize(int targetCapacity); // Resize the internal buffer size to a specified capacity.\n\tint size(); // Return the number of bytes stored in this FastByteArrayOutputStream.\n\tbyte[] toByteArray(); // Create a newly allocated byte array.\n\tbyte[] toByteArrayUnsafe(); // Convert the stream's data to a byte array and return the byte array.\n\tvoid write(byte[] data, int offset, int length);\n\tvoid write(int datum);\n\tvoid writeTo(OutputStream out); // Write the buffers content to the given OutputStream.\n}"}
{"index": 15479, "repo": "spring-batch-core-5.0.2", "des": "This incrementer uses a DataFieldMaxValueIncrementer to generate the sequence of values to use as job instance discriminator.", "code": "public class DataFieldMaxValueJobParametersIncrementer extends Object implements JobParametersIncrementer {\n\torg.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer getDataFieldMaxValueIncrementer(); // Get the incrementer.\n\tString getKey(); // Get the key.\n\tJobParameters getNext(JobParameters jobParameters); // Increments the provided parameters.\n\tvoid setDataFieldMaxValueIncrementer(org.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer dataFieldMaxValueIncrementer); // The incrementer to generate the sequence of values.\n\tvoid setKey(String key); // The name of the key to use as a job parameter.\n}"}
{"index": 15701, "repo": "camel-api-4.0.0-RC1", "des": "A strategy for aggregating two exchanges together into a single exchange.", "code": "public interface AggregationStrategy {\n\tExchange aggregate(Exchange oldExchange, Exchange newExchange); // Aggregates an old and new exchange together to create a single combined exchange\n\tdefault Exchange aggregate(Exchange oldExchange, Exchange newExchange, Exchange inputExchange); // Aggregates an old and new exchange together to create a single combined exchange.\n\tdefault boolean canPreComplete(); // Indicates if this aggregation strategy uses pre-completion mode.\n\tdefault void onCompletion(Exchange exchange); // The aggregated Exchange has completed Important: This method must not throw any exceptions.\n\tdefault void onCompletion(Exchange exchange, Exchange inputExchange); // The aggregated Exchange has completed Important: This method must not throw any exceptions.\n\tdefault void onOptimisticLockFailure(Exchange oldExchange, Exchange newExchange); // Callback when the aggregated Exchange fails to add in the OptimisticLockingAggregationRepository because of an OptimisticLockingAggregationRepository.OptimisticLockingException.\n\tdefault boolean preComplete(Exchange oldExchange, Exchange newExchange); // Determines if the aggregation should complete the current group, and start a new group, or the aggregation should continue using the current group.\n\tdefault void timeout(Exchange exchange, int index, int total, long timeout); // A timeout occurred.\n}"}
{"index": 4629, "repo": "commons-vfs2-2.9.0", "des": "Configuration settings for the HdfsFileSystem.", "code": "Class HdfsFileSystemConfigBuilder {\n\tprotected Class<? extends FileSystem> getConfigClass(); // Gets the target of this configuration.\n\torg.apache.hadoop.conf.Configuration getConfigConfiguration(FileSystemOptions opts); // Get alternate configuration object.\n\tInputStream getConfigInputStream(FileSystemOptions opts); // Get alternate configuration input stream.\n\tString[] getConfigNames(FileSystemOptions opts); // Get names of alternate configuration resources.\n\torg.apache.hadoop.fs.Path[] getConfigPaths(FileSystemOptions opts); // Get paths of alternate configuration file system files.\n\tURL[] getConfigURLs(FileSystemOptions opts); // Get URLs of alternate configurations.\n\tstatic HdfsFileSystemConfigBuilder getInstance();\n\tvoid setConfigConfiguration(FileSystemOptions opts, org.apache.hadoop.conf.Configuration configuration); // Sets the configuration object to be loaded after the defaults.\n\tvoid setConfigInputStream(FileSystemOptions opts, InputStream inputStream); // Sets the input stream of configuration file to be loaded after the defaults.\n\tvoid setConfigName(FileSystemOptions opts, String name); // Sets the name of configuration resource to be loaded after the defaults.\n\tvoid setConfigPath(FileSystemOptions opts, org.apache.hadoop.fs.Path path); // Sets the full path of configuration file to be loaded after the defaults.\n\tvoid setConfigURL(FileSystemOptions opts, URL url); // Sets the URL of configuration file to be loaded after the defaults.\n}"}
{"index": 1467, "repo": "pdfbox-3.0.0-beta1", "des": "A name object specifying the page layout shall be used when the document is opened.", "code": "Enum PageLayout {\n\tstatic PageLayout fromString(String value);\n\tString stringValue(); // Returns the string value, as used in a PDF file.\n\tstatic PageLayout valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PageLayout[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9556, "repo": "commons-math3-3.6.1", "des": "Formats a Complex number in cartesian format \"Re(c) + Im(c)i\".", "code": "Class ComplexFormat {\n\tString format(Complex c); // This method calls format(Object,StringBuffer,FieldPosition).\n\tStringBuffer format(Complex complex, StringBuffer toAppendTo, FieldPosition pos); // Formats a Complex object to produce a string.\n\tString format(Double c); // This method calls format(Object,StringBuffer,FieldPosition).\n\tStringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos); // Formats a object to produce a string.\n\tstatic Locale[] getAvailableLocales(); // Get the set of locales for which complex formats are available.\n\tString getImaginaryCharacter(); // Access the imaginaryCharacter.\n\tNumberFormat getImaginaryFormat(); // Access the imaginaryFormat.\n\tstatic ComplexFormat getInstance(); // Returns the default complex format for the current locale.\n\tstatic ComplexFormat getInstance(Locale locale); // Returns the default complex format for the given locale.\n\tstatic ComplexFormat getInstance(String imaginaryCharacter, Locale locale); // Returns the default complex format for the given locale.\n\tNumberFormat getRealFormat(); // Access the realFormat.\n\tComplex parse(String source); // Parses a string to produce a Complex object.\n\tComplex parse(String source, ParsePosition pos); // Parses a string to produce a Complex object.\n}"}
{"index": 1553, "repo": "pdfbox-3.0.0-beta1", "des": "Base class for a node in the outline of a PDF document.", "code": "Class PDOutlineNode {\n\tvoid addFirst(PDOutlineItem newChild); // Adds the given node to the top of the children list.\n\tvoid addLast(PDOutlineItem newChild); // Adds the given node to the bottom of the children list.\n\tIterable<PDOutlineItem> children();\n\tvoid closeNode(); // Close this node.\n\tPDOutlineItem getFirstChild();\n\tPDOutlineItem getLastChild();\n\tint getOpenCount(); // Get the number of open nodes or a negative number if this node is closed.\n\tboolean hasChildren();\n\tboolean isNodeOpen();\n\tvoid openNode(); // This will set this node to be open when it is shown in the viewer.\n}"}
{"index": 7067, "repo": "calcite-core-1.34.0", "des": "An environment for related relational expressions during the optimization of a query.", "code": "Class RelOptCluster {\n\tstatic RelOptCluster create(RelOptPlanner planner, RexBuilder rexBuilder); // Creates a cluster.\n\tCorrelationId createCorrel(); // Constructs a new id for a correlating variable.\n\tHintStrategyTable getHintStrategies(); // Returns the hint strategies of this cluster.\n\t@Nullable RelMetadataProvider getMetadataProvider();\n\tRelMetadataQuery getMetadataQuery(); // Returns the current RelMetadataQuery.\n\tSupplier<RelMetadataQuery> getMetadataQuerySupplier(); // Returns the supplier of RelMetadataQuery.\n\tRelOptPlanner getPlanner();\n\tRexBuilder getRexBuilder();\n\tRelDataTypeFactory getTypeFactory();\n\tvoid invalidateMetadataQuery(); // Should be called whenever the current RelMetadataQuery becomes invalid.\n\tvoid setHintStrategies(HintStrategyTable hintStrategies); // Sets up the hint propagation strategies to be used during rule planning.\n\tvoid setMetadataProvider(RelMetadataProvider metadataProvider); // Overrides the default metadata provider for this cluster.\n\tvoid setMetadataQuerySupplier(Supplier<RelMetadataQuery> mqSupplier); // Sets up the customized RelMetadataQuery instance supplier that to use during rule planning.\n\tRelTraitSet traitSet(); // Returns the default trait set for this cluster.\n\tRelTraitSet traitSetOf(RelTrait trait);\n}"}
{"index": 9663, "repo": "commons-math3-3.6.1", "des": "Interface for distributions on the integers.", "code": "Interface IntegerDistribution {\n\tdouble cumulativeProbability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble cumulativeProbability(int x0, int x1); // For a random variable X whose values are distributed according to this distribution, this method returns P(x0 < X <= x1).\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tint getSupportLowerBound(); // Access the lower bound of the support.\n\tint getSupportUpperBound(); // Access the upper bound of the support.\n\tint inverseCumulativeProbability(double p); // Computes the quantile function of this distribution.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tdouble probability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X = x).\n\tvoid reseedRandomGenerator(long seed); // Reseed the random generator used to generate samples.\n\tint sample(); // Generate a random value sampled from this distribution.\n\tint[] sample(int sampleSize); // Generate a random sample from the distribution.\n}"}
{"index": 14517, "repo": "spring-security-web-6.1.2", "des": "An interface that allows delayed access to a CsrfToken that may be generated.", "code": "public interface DeferredCsrfToken {\n\tCsrfToken get(); // Gets the CsrfToken\n\tboolean isGenerated(); // Returns true if get() refers to a generated CsrfToken or false if it already existed.\n}"}
{"index": 13224, "repo": "spring-test-6.0.11", "des": "Base specification for configuring MockMvc, and a simple facade around ConfigurableMockMvcBuilder.", "code": "public static interface MockMvcWebTestClient.MockMvcServerSpec<B extends MockMvcWebTestClient.MockMvcServerSpec<B>> {\n\t<T extends B>T alwaysExpect(ResultMatcher resultMatcher); // Define a global expectation that should always be applied to every response.\n\t<T extends B>T apply(MockMvcConfigurer configurer); // Add a MockMvcConfigurer that automates MockMvc setup.\n\tWebTestClient build(); // Shortcut to build the test client.\n\tWebTestClient.Builder configureClient(); // Proceed to configure and build the test client.\n\t<T extends B>T defaultRequest(RequestBuilder requestBuilder); // Define default request properties that should be merged into all performed requests such that input from the client request override the default properties defined here.\n\t<T extends B>T dispatcherServletCustomizer(DispatcherServletCustomizer customizer); // Allow customization of DispatcherServlet.\n\t<T extends B>T dispatchOptions(boolean dispatchOptions); // Whether to handle HTTP OPTIONS requests.\n\t<T extends B>T filter(Filter filter, String... urlPatterns); // Add a filter for specific URL patterns.\n\t<T extends B>T filters(Filter... filters); // Add a global filter.\n}"}
{"index": 15989, "repo": "wicket-util-10.0.0-M1", "des": "Allows visitors to control the visit/traversal", "code": "public interface IVisit<R> {\n\tvoid dontGoDeeper(); // Prevents the visitor from visiting any children of the object currently visited\n\tvoid stop(); // Stops the visit/traversal\n\tvoid stop(R result); // Stops the visit/traversal and returns result\n}"}
{"index": 8927, "repo": "hbase-server-3.0.0-alpha-4", "des": "The HFile has a fixed trailer which contains offsets to other variable parts of the file.", "code": "Class FixedFileTrailer {\n\tvoid expectAtLeastMajorVersion(int lowerBound);\n\tvoid expectMajorVersion(int expected);\n\tvoid expectMinorVersion(int expected);\n\tString getComparatorClassName();\n\tCompression.Algorithm getCompressionCodec();\n\tint getDataIndexCount();\n\tbyte[] getEncryptionKey();\n\tlong getEntryCount();\n\tlong getFileInfoOffset();\n\tlong getFirstDataBlockOffset();\n\tlong getLastDataBlockOffset();\n\tlong getLoadOnOpenDataOffset();\n\tint getMajorVersion(); // Returns the major version of this HFile format\n\tint getMetaIndexCount();\n\tint getMinorVersion(); // Returns the minor version of this HFile format\n\tint getNumDataIndexLevels();\n\tlong getTotalUncompressedBytes();\n\tint getTrailerSize();\n\tlong getUncompressedDataIndexSize();\n\tstatic FixedFileTrailer readFromStream(org.apache.hadoop.fs.FSDataInputStream istream, long fileSize); // Reads a file trailer from the given file.\n\tvoid setComparatorClass(Class<? extends CellComparator> klass);\n\tvoid setCompressionCodec(Compression.Algorithm compressionCodec);\n\tvoid setDataIndexCount(int dataIndexCount);\n\tvoid setEncryptionKey(byte[] keyBytes);\n\tvoid setEntryCount(long newEntryCount);\n\tvoid setFileInfoOffset(long fileInfoOffset);\n\tvoid setFirstDataBlockOffset(long firstDataBlockOffset);\n\tvoid setLastDataBlockOffset(long lastDataBlockOffset);\n\tvoid setLoadOnOpenOffset(long loadOnOpenDataOffset);\n\tvoid setMetaIndexCount(int metaIndexCount);\n\tvoid setNumDataIndexLevels(int numDataIndexLevels);\n\tvoid setTotalUncompressedBytes(long totalUncompressedBytes);\n\tvoid setUncompressedDataIndexSize(long uncompressedDataIndexSize);\n}"}
{"index": 12948, "repo": "slf4j-api-2.0.7", "des": "MarkerFactory is a utility class producing Marker instances as appropriate for the logging system currently in use.", "code": "public class MarkerFactory extends Object {\n\tstatic Marker getDetachedMarker(String name); // Create a marker which is detached (even at birth) from the MarkerFactory.\n\tstatic IMarkerFactory getIMarkerFactory(); // Return the IMarkerFactoryinstance in use.\n\tstatic Marker getMarker(String name); // Return a Marker instance as specified by the name parameter using the previously bound IMarkerFactoryinstance.\n}"}
{"index": 16108, "repo": "spring-data-cassandra-4.1.2", "des": "Convenient converter that can be used to convert a single-row-single-column, single-row-multi-column, or multi-row ResultSet into the given value of a given type.", "code": "public abstract class AbstractResultSetConverter<T> extends Object implements Converter<com.datastax.oss.driver.api.core.cql.ResultSet,T> {\n\tT convert(com.datastax.oss.driver.api.core.cql.ResultSet source);\n\tprotected T doConvertResultSet(List<Map<String,Object>> resultSet); // Converts the given result set (as a List<Map<String,Object>>) to this converter's type or throws IllegalArgumentException.\n\tprotected T doConvertSingleRow(Map<String,Object> row); // Converts the given row (as a Map<String,Object>) to this converter's type or throws IllegalArgumentException.\n\tprotected abstract T doConvertSingleValue(Object object); // Converts the given value to this converter's type or throws IllegalArgumentException.\n\tprotected T getExhaustedResultSetValue();\n\tprotected T getNullResultSetValue();\n\tprotected abstract Class<?> getType();\n}"}
{"index": 5311, "repo": "druid-processing-26.0.0", "des": "An Iterator-like interface that allows to \"skip\" some elements of the set.", "code": "Interface IntSet.IntIterator {\n\tIntSet.IntIterator clone(); // Clone the iterator\n\tboolean hasNext();\n\tint next();\n\tvoid skipAllBefore(int element); // Skips all the elements before the specified element, so that next() gives the given element or, if it does not exist, the element immediately after according to the sorting provided by this set.\n}"}
{"index": 3739, "repo": "kafka-streams-3.5.0", "des": "Enumeration that describes the response from the exception handler.", "code": "Enum StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse {\n\tstatic StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic StreamsUncaughtExceptionHandler.StreamThreadExceptionResponse[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3478, "repo": "mahout-mr-0.13.0", "des": "A ClusteringPolicy captures the semantics of assignment of points to clusters.", "code": "Interface ClusteringPolicy {\n\tVector classify(Vector data, ClusterClassifier prior); // Classify the data vector given the classifier's models\n\tvoid close(ClusterClassifier posterior); // Close the policy using the classifier's models\n\tVector select(Vector probabilities); // Return a vector of weights for each of the models given those probabilities\n\tvoid update(ClusterClassifier posterior); // Update the policy with the given classifier\n}"}
{"index": 8851, "repo": "hbase-server-3.0.0-alpha-4", "des": "Specifies methods needed to add elements to a Bloom filter and serialize the resulting Bloom filter as a sequence of bytes.", "code": "Interface BloomFilterWriter {\n\tvoid compactBloom(); // Compact the Bloom filter before writing metadata & data to disk.\n\torg.apache.hadoop.io.Writable getDataWriter(); // Get a writable interface into bloom filter data (the actual Bloom bits).\n\torg.apache.hadoop.io.Writable getMetaWriter(); // Get a writable interface into bloom filter meta data.\n\tCell getPrevCell(); // Returns the previous cell written by this writer\n}"}
{"index": 4827, "repo": "hadoop-common-3.3.4", "des": "CryptoExtension is a type of Extension that exposes methods to generate EncryptedKeys and to decrypt the same.", "code": "Interface KeyProviderCryptoExtension.CryptoExtension {\n\tKeyProvider.KeyVersion decryptEncryptedKey(KeyProviderCryptoExtension.EncryptedKeyVersion encryptedKeyVersion); // Decrypts an encrypted byte[] key material using the given key version name and initialization vector.\n\tvoid drain(String keyName); // Drains the Queue for the provided key.\n\tKeyProviderCryptoExtension.EncryptedKeyVersion generateEncryptedKey(String encryptionKeyName); // Generates a key material and encrypts it using the given key name.\n\tKeyProviderCryptoExtension.EncryptedKeyVersion reencryptEncryptedKey(KeyProviderCryptoExtension.EncryptedKeyVersion ekv); // Re-encrypts an encrypted key version, using its initialization vector and key material, but with the latest key version name of its key name in the key provider.\n\tvoid reencryptEncryptedKeys(List<KeyProviderCryptoExtension.EncryptedKeyVersion> ekvs); // Batched version of KeyProviderCryptoExtension.reencryptEncryptedKey(EncryptedKeyVersion).\n\tvoid warmUpEncryptedKeys(String... keyNames); // Calls to this method allows the underlying KeyProvider to warm-up any implementation specific caches used to store the Encrypted Keys.\n}"}
{"index": 11414, "repo": "spring-context-6.0.11", "des": "Helper class for the creation of ObjectName instances.", "code": "public final class ObjectNameManager extends Object {\n\tstatic ObjectName getInstance(Object name); // Retrieve the ObjectName instance corresponding to the supplied name.\n\tstatic ObjectName getInstance(String objectName); // Retrieve the ObjectName instance corresponding to the supplied name.\n\tstatic ObjectName getInstance(String domainName, String key, String value); // Retrieve an ObjectName instance for the specified domain and a single property with the supplied key and value.\n\tstatic ObjectName getInstance(String domainName, Hashtable<String,String> properties); // Retrieve an ObjectName instance with the specified domain name and the supplied key/name properties.\n}"}
{"index": 16344, "repo": "spring-session-core-3.1.1", "des": "Provides a way to identify a user in an agnostic way.", "code": "public interface Session {\n\tString changeSessionId(); // Changes the session id.\n\t<T> T getAttribute(String attributeName); // Gets the Object associated with the specified name or null if no Object is associated to that name.\n\tSet<String> getAttributeNames(); // Gets the attribute names that have a value associated with it.\n\tdefault <T> T getAttributeOrDefault(String name, T defaultValue); // Return the session attribute value, or a default, fallback value.\n\tInstant getCreationTime(); // Gets the time when this session was created.\n\tString getId(); // Gets a unique string that identifies the Session.\n\tInstant getLastAccessedTime(); // Gets the last time this Session was accessed.\n\tDuration getMaxInactiveInterval(); // Gets the maximum inactive interval between requests before this session will be invalidated.\n\tdefault <T> T getRequiredAttribute(String name); // Return the session attribute value or if not present raise an IllegalArgumentException.\n\tboolean isExpired(); // Returns true if the session is expired.\n\tvoid removeAttribute(String attributeName); // Removes the attribute with the provided attribute name.\n\tvoid setAttribute(String attributeName, Object attributeValue); // Sets the attribute value for the provided attribute name.\n\tvoid setLastAccessedTime(Instant lastAccessedTime); // Sets the last accessed time.\n\tvoid setMaxInactiveInterval(Duration interval); // Sets the maximum inactive interval between requests before this session will be invalidated.\n}"}
{"index": 15755, "repo": "camel-api-4.0.0-RC1", "des": "A debugger which allows tooling to attach breakpoints which is being invoked when Exchanges is being routed.", "code": "public interface Debugger extends Service, CamelContextAware {\n\tvoid activateAllBreakpoints(); // Activate all breakpoints.\n\tvoid addBreakpoint(Breakpoint breakpoint); // Add the given breakpoint\n\tvoid addBreakpoint(Breakpoint breakpoint, Condition... conditions); // Add the given breakpoint\n\tvoid addSingleStepBreakpoint(Breakpoint breakpoint); // Add the given breakpoint which will be used in single step mode\n\tvoid addSingleStepBreakpoint(Breakpoint breakpoint, Condition... conditions); // Add the given breakpoint which will be used in single step mode\n\tboolean afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken); // Callback invoked when an Exchange has been processed which allows implementators to notify breakpoints.\n\tboolean beforeProcess(Exchange exchange, Processor processor, NamedNode definition); // Callback invoked when an Exchange is about to be processed which allows implementators to notify breakpoints.\n\tList<Breakpoint> getBreakpoints(); // Gets a list of all the breakpoints\n\tboolean onEvent(Exchange exchange, CamelEvent.ExchangeEvent event); // Callback invoked when an Exchange is being processed which allows implementators to notify breakpoints.\n\tvoid removeBreakpoint(Breakpoint breakpoint); // Removes the given breakpoint\n\tboolean startSingleStepExchange(String exchangeId, Breakpoint breakpoint); // Starts the single step debug mode for the given exchange\n\tvoid stopSingleStepExchange(String exchangeId); // Stops the single step debug mode for the given exchange.\n\tvoid suspendAllBreakpoints(); // Suspends all breakpoints.\n}"}
{"index": 5383, "repo": "druid-processing-26.0.0", "des": "This TopNAlgorithm is highly specialized for processing aggregates on string columns that are ColumnCapabilities.", "code": "Class PooledTopNAlgorithm {\n\tvoid cleanup(PooledTopNAlgorithm.PooledTopNParams params);\n\tprotected void closeAggregators(BufferAggregator[] bufferAggregators);\n\tprotected int computeNewLength(int[] dimValSelector, int numProcessed, int numToProcess); // Skip invalid value, calculate length to have enough valid value to process or hit the end.\n\tprotected BufferAggregator[] makeDimValAggregateStore(PooledTopNAlgorithm.PooledTopNParams params);\n\tprotected int[] makeDimValSelector(PooledTopNAlgorithm.PooledTopNParams params, int numProcessed, int numToProcess);\n\tPooledTopNAlgorithm.PooledTopNParams makeInitParams(ColumnSelectorPlus selectorPlus, Cursor cursor);\n\tprotected long scanAndAggregate(PooledTopNAlgorithm.PooledTopNParams params, int[] positions, BufferAggregator[] theAggregators); // Returns the number of processed rows (i.\n\tprotected int[] updateDimValSelector(int[] dimValSelector, int numProcessed, int numToProcess);\n\tprotected void updateResults(PooledTopNAlgorithm.PooledTopNParams params, int[] positions, BufferAggregator[] theAggregators, TopNResultBuilder resultBuilder);\n}"}
{"index": 4392, "repo": "beam-sdks-java-core-2.49.0", "des": "a PTransform that does a combine using an aggregation built up by calls to aggregateField and aggregateFields.", "code": "Class Group.AggregateCombiner<InputT> {\n\tabstract <CombineInputT,AccumT,CombineOutputT>Group.AggregateCombiner<InputT> aggregateField(int inputFieldId, Combine.CombineFn<CombineInputT,AccumT,CombineOutputT> fn, Schema.Field outputField); // Build up an aggregation function over the input elements.\n\tabstract <CombineInputT,AccumT,CombineOutputT>Group.AggregateCombiner<InputT> aggregateField(java.lang.String inputFieldName, Combine.CombineFn<CombineInputT,AccumT,CombineOutputT> fn, Schema.Field outputField); // Build up an aggregation function over the input elements.\n\tabstract <CombineInputT,AccumT,CombineOutputT>Group.AggregateCombiner<InputT> aggregateFieldsById(java.util.List<java.lang.Integer> inputFieldIds, Combine.CombineFn<CombineInputT,AccumT,CombineOutputT> fn, Schema.Field outputField); // Build up an aggregation function over the input elements by field id.\n}"}
{"index": 18139, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Contract for providing callback access to a DatabaseStructure, typically from the Optimizer.", "code": "Interface AccessCallback {\n\tIntegralDataTypeHolder getNextValue(); // Retrieve the next value from the underlying source.\n\tjava.lang.String getTenantIdentifier(); // Obtain the tenant identifier (multi-tenancy), if one, associated with this callback.\n}"}
{"index": 6617, "repo": "ignite-indexing-2.15.0", "des": "Base class for reducer of remote index lookup results.", "code": "Class AbstractReducer {\n\tvoid addPage(ReduceResultPage page); // Offer result page for reduce.\n\tprotected abstract void addPage0(ReduceResultPage page);\n\tprotected void checkBounds(org.h2.result.Row lastEvictedRow, org.h2.result.SearchRow first, org.h2.result.SearchRow last);\n\tprotected ReduceResultPage createDummyLastPage(ReduceResultPage lastPage);\n\tvoid fail(javax.cache.CacheException e);\n\torg.h2.index.Cursor find(@Nullable org.h2.result.SearchRow first, @Nullable org.h2.result.SearchRow last); // Find a rows and create a cursor to iterate over the result.\n\tprotected abstract org.h2.index.Cursor findAllFetched(List<org.h2.result.Row> fetched, @Nullable org.h2.result.SearchRow first, @Nullable org.h2.result.SearchRow last);\n\tprotected abstract org.h2.index.Cursor findInStream(@Nullable org.h2.result.SearchRow first, @Nullable org.h2.result.SearchRow last);\n\tboolean hasSource(UUID nodeId); // Check if node with given nodeId is data source node for the index.\n\tprotected void onBlockEvict(@NotNull List<org.h2.result.Row> evictedBlock);\n\tvoid onFailure(UUID nodeId, javax.cache.CacheException e); // Fail cursor callback.\n\tprotected Iterator<org.h2.value.Value[]> pollNextIterator(org.apache.ignite.internal.processors.query.h2.twostep.AbstractReducer.Pollable<ReduceResultPage> queue, Iterator<org.h2.value.Value[]> iter);\n\tvoid setPageSize(int pageSize);\n\tvoid setSources(Map<ClusterNode,BitSet> nodesToSegmentsCnt); // Set source nodes.\n\tSet<UUID> sources();\n}"}
{"index": 2611, "repo": "mahout-core-14.1", "des": "Implementation of a conjugate gradient iterative solver for linear systems.", "code": "Class ConjugateGradientSolver {\n\tint getIterations(); // Returns the number of iterations run once the solver is complete.\n\tdouble getResidualNorm(); // Returns the norm of the residual at the completion of the solver.\n\tVector solve(VectorIterable a, Vector b); // Solves the system Ax = b with default termination criteria.\n\tVector solve(VectorIterable a, Vector b, Preconditioner precond); // Solves the system Ax = b with default termination criteria using the specified preconditioner.\n\tVector solve(VectorIterable a, Vector b, Preconditioner preconditioner, int maxIterations, double maxError); // Solves the system Ax = b, where A is a linear operator and b is a vector.\n}"}
{"index": 3003, "repo": "tink-1.10.0", "des": "Representation of the decryption function for a hybrid encryption primitive.", "code": "Class HybridPrivateKey {\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tBytes getOutputPrefix(); // Returns a Bytes instance, which is prefixed to every ciphertext.\n\tHybridParameters getParameters(); // Returns a Parameters object containing all the information about the key which is not randomly chosen.\n\tabstract HybridPublicKey getPublicKey();\n}"}
{"index": 9600, "repo": "commons-math3-3.6.1", "des": "This class implements a two-dimensional space.", "code": "Class Euclidean2D {\n\tint getDimension(); // Get the dimension of the space.\n\tstatic Euclidean2D getInstance(); // Get the unique instance.\n\tEuclidean1D getSubSpace(); // Get the n-1 dimension subspace of this space.\n}"}
{"index": 9609, "repo": "commons-math3-3.6.1", "des": "Implementation of the exponential distribution.", "code": "Class ExponentialDistribution {\n\tdouble cumulativeProbability(double x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble density(double x); // Returns the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tdouble getMean(); // Access the mean.\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tprotected double getSolverAbsoluteAccuracy(); // Returns the solver absolute accuracy for inverse cumulative computation.\n\tdouble getSupportLowerBound(); // Access the lower bound of the support.\n\tdouble getSupportUpperBound(); // Access the upper bound of the support.\n\tdouble inverseCumulativeProbability(double p); // Computes the quantile function of this distribution.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tboolean isSupportLowerBoundInclusive(); // Whether or not the lower bound of support is in the domain of the density function.\n\tboolean isSupportUpperBoundInclusive(); // Whether or not the upper bound of support is in the domain of the density function.\n\tdouble logDensity(double x); // Returns the natural logarithm of the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tdouble sample(); // Generate a random value sampled from this distribution.\n}"}
{"index": 2685, "repo": "mahout-core-14.1", "des": "Open hash map from short keys to float values.", "code": "Class OpenShortFloatHashMap {\n\tfloat adjustOrPutValue(short key, float newValue, float incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(short key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(float value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ShortProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ShortFloatProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tfloat get(short key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(short key);\n\tprotected int indexOfKey(short key);\n\tprotected int indexOfValue(float value);\n\tIterator<OpenShortFloatHashMap.MapElement> iterator();\n\tvoid keys(ShortArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ShortFloatProcedure condition, ShortArrayList keyList, FloatArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(short key, float value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(short key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(FloatArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 5799, "repo": "iceberg-core-1.3.0", "des": "A writer capable of writing data and equality deletes that may belong to different specs and partitions.", "code": "Interface EqualityDeltaWriter<T> {\n\tvoid delete(T row, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Deletes a row from the provided spec/partition.\n\tvoid deleteKey(T key, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Deletes a key from the provided spec/partition.\n\tvoid insert(T row, org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Inserts a row to the provided spec/partition.\n\tWriteResult result(); // Returns a result that contains information about written DataFiles or DeleteFiles.\n}"}
{"index": 13502, "repo": "spring-messaging-6.0.11", "des": "A default ContentTypeResolver that checks the MessageHeaders.CONTENT_TYPE header or falls back to a default value.", "code": "public class DefaultContentTypeResolver extends Object implements ContentTypeResolver {\n\torg.springframework.util.MimeType getDefaultMimeType(); // Return the default MIME type to use if no MessageHeaders.CONTENT_TYPE header is present.\n\torg.springframework.util.MimeType resolve(MessageHeaders headers); // Determine the MimeType of a message from the given MessageHeaders.\n\tvoid setDefaultMimeType(org.springframework.util.MimeType defaultMimeType); // Set the default MIME type to use when there is no MessageHeaders.CONTENT_TYPE header present.\n}"}
{"index": 3685, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableStringObjectInspector inspects a Text Object.", "code": "Class WritableStringObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tObject create(String value); // Create an object with the value.\n\tObject create(org.apache.hadoop.io.Text value); // Create an object with the value.\n\tString getPrimitiveJavaObject(Object o); // Get the String representation of the data.\n\torg.apache.hadoop.io.Text getPrimitiveWritableObject(Object o); // Return the data in an instance of primitive writable Object.\n\tObject set(Object o, String value); // Set the object with the value.\n\tObject set(Object o, org.apache.hadoop.io.Text value); // Set the object with the value.\n}"}
{"index": 13011, "repo": "spring-aop-6.0.11", "des": "Abstract base class for pooling TargetSource implementations which maintain a pool of target instances, acquiring and releasing a target object from the pool for each method invocation.", "code": "public abstract class AbstractPoolingTargetSource extends AbstractPrototypeBasedTargetSource implements PoolingConfig, org.springframework.beans.factory.DisposableBean {\n\tprotected abstract void createPool(); // Create the pool.\n\tint getMaxSize(); // Return the maximum size of the pool.\n\tDefaultIntroductionAdvisor getPoolingConfigMixin(); // Return an IntroductionAdvisor that provides a mixin exposing statistics about the pool maintained by this object.\n\tabstract Object getTarget(); // Acquire an object from the pool.\n\tabstract void releaseTarget(Object target); // Return the given object to the pool.\n\tfinal void setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // Set the owning BeanFactory.\n\tvoid setMaxSize(int maxSize); // Set the maximum size of the pool.\n}"}
{"index": 18379, "repo": "opencms-core-15.0", "des": "Notification used to send password change link to user.", "code": "Class CmsPasswordChangeNotification {\n\tprotected java.lang.String generateHtmlMsg(); // Overwrite the method to generate the message body of the notification.\n\tprotected java.lang.String getNotificationContent(); // Overwrite the method to return the path to the xmlcontent, where the subject, the header and the footer are defined.\n}"}
{"index": 14046, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "An enumeration of supported compression options for an entry in a ZIP archive.", "code": "public enum ZipCompression extends Enum<ZipCompression> {\n\tstatic ZipCompression valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ZipCompression[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 9864, "repo": "commons-math3-3.6.1", "des": "This class holds a point and the value of an objective function at this point.", "code": "Class UnivariatePointValuePair {\n\tdouble getPoint(); // Get the point.\n\tdouble getValue(); // Get the value of the objective function.\n}"}
{"index": 905, "repo": "ignite-core-2.15.0", "des": "This interface provides a rich API for working with distributed reentrant locks.", "code": "Interface IgniteLock {\n\tvoid close(); // Removes reentrant lock.\n\tint getHoldCount(); // Queries the number of holds on this lock by the current thread.\n\tIgniteCondition getOrCreateCondition(String name); // Returns a Condition instance for use with this IgniteLock instance.\n\tint getWaitQueueLength(IgniteCondition condition); // Returns an estimate of the number of threads on this node that are waiting on the given condition associated with this lock.\n\tboolean hasQueuedThread(Thread thread); // Queries whether the given thread is waiting to acquire this lock.\n\tboolean hasQueuedThreads(); // Queries whether any threads on this node are waiting to acquire this lock.\n\tboolean hasWaiters(IgniteCondition condition); // Queries whether any threads on this node are waiting on the given condition associated with this lock.\n\tboolean isBroken(); // Returns true if any node that owned the locked failed before releasing the lock.\n\tboolean isFailoverSafe(); // Returns true if this lock is safe to use after node failure.\n\tboolean isFair(); // Returns true if this lock is fair.\n\tboolean isHeldByCurrentThread(); // Queries if this lock is held by the current thread.\n\tboolean isLocked(); // Queries if this lock is held by any thread on any node.\n\tvoid lock(); // Acquires the distributed reentrant lock.\n\tvoid lockInterruptibly(); // Acquires the lock unless the current thread is interrupted.\n\tString name(); // Name of atomic reentrant lock.\n\tCondition newCondition(); // This method is not supported in IgniteLock, Any invocation of this method will result in UnsupportedOperationException.\n\tboolean removed(); // Gets status of reentrant lock.\n\tboolean tryLock(); // Acquires the lock only if it is free at the time of invocation.\n\tboolean tryLock(long timeout, TimeUnit unit); // Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been interrupted.\n\tvoid unlock(); // Releases the lock.\n}"}
{"index": 17558, "repo": "spring-security-oauth2-resource-server-6.1.2", "des": "A Nimbus implementation of OpaqueTokenIntrospector that verifies and introspects a token using the configured OAuth 2.0 Introspection Endpoint.", "code": "public class NimbusOpaqueTokenIntrospector extends Object implements OpaqueTokenIntrospector {\n\torg.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal introspect(String token); // Introspect and verify the given token, returning its attributes.\n\tvoid setRequestEntityConverter(org.springframework.core.convert.converter.Converter<String,org.springframework.http.RequestEntity<?>> requestEntityConverter); // Sets the Converter used for converting the OAuth 2.0 access token to a RequestEntity representation of the OAuth 2.0 token introspection request.\n}"}
{"index": 11155, "repo": "tribuo-core-4.3.1", "des": "A CLI for interacting with a SequenceModel.", "code": "public class SequenceModelExplorer extends Object implements com.oracle.labs.mlrg.olcut.command.CommandGroup {\n\tString featureInfo(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, String featureName); // Shows information on a particular feature.\n\torg.jline.reader.Completer[] fileCompleter(); // Completers for files.\n\tString getDescription();\n\tString getName();\n\tString loadModel(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, File path, boolean protobuf); // Loads a model.\n\tstatic void main(String[] args); // Runs the sequence model explorer.\n\tString minCount(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, int minCount); // Shows the number of features which occurred more than minCount times in the training data.\n\tString modelDescription(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci); // Shows the model description.\n\tString numFeatures(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci); // Shows the number of features in this model.\n\tString outputInfo(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci); // Shows the output information.\n\tvoid startShell(); // Start the command shell\n\tString topFeatures(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, int numFeatures); // Shows the top n features in this model.\n}"}
{"index": 18443, "repo": "opencms-core-15.0", "des": "Contains the data on which a workflow action should act (usually, a list of resources).", "code": "Class CmsWorkflowActionParams {\n\tjava.util.List<CmsUUID> getPublishIds(); // Returns the publishIds.\n\tjava.util.List<CmsUUID> getRemoveIds(); // Returns the removeIds.\n\tCmsPublishListToken getToken(); // Gets the publish list token, if it is set, else returns null.\n}"}
{"index": 12715, "repo": "spring-data-mongodb-4.1.2", "des": "Gateway to evaluation operators such as $expr.", "code": "public class EvaluationOperators extends Object {\n\tstatic EvaluationOperators.EvaluationOperatorFactory valueOf(String fieldReference); // Take the value resulting from the given fieldReference.\n\tstatic EvaluationOperators.EvaluationOperatorFactory valueOf(AggregationExpression expression); // Take the value resulting from the given AggregationExpression.\n}"}
{"index": 13401, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required to establish a connection to a Cassandra service.", "code": "public interface CassandraConnectionDetails extends ConnectionDetails {\n\tList<CassandraConnectionDetails.Node> getContactPoints(); // Cluster node addresses.\n\tString getLocalDatacenter(); // Datacenter that is considered \"local\".\n\tdefault String getPassword(); // Login password of the server.\n\tdefault String getUsername(); // Login user of the server.\n}"}
{"index": 3151, "repo": "solr-dataimporthandler-8.11.2", "des": "A set of nested maps that can resolve variables by namespaces.", "code": "Class VariableResolver {\n\tvoid addNamespace(String name, Map<String,Object> newMap);\n\tList<String> getVariables(String expr);\n\tvoid removeNamespace(String name);\n\tString replaceTokens(String template); // Given a String with place holders, replace them with the value tokens.\n\tObject resolve(String name); // Resolves a given value with a name\n\tvoid setEvaluators(Map<String,Evaluator> evaluators);\n}"}
{"index": 12690, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $dateFromString. NOTE: Requires MongoDB 3.6 or later.", "code": "public static class DateOperators.DateFromString extends DateOperators.TimezonedDateAggregationExpression {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tstatic DateOperators.DateFromString fromString(Object value); // Creates new DateOperators.DateFromString.\n\tstatic DateOperators.DateFromString fromStringOf(String fieldReference); // Creates new DateOperators.DateFromString.\n\tstatic DateOperators.DateFromString fromStringOf(AggregationExpression expression); // Creates new DateOperators.DateFromString.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n\tDateOperators.DateFromString withFormat(String format); // Optionally set the date format to use.\n\tDateOperators.DateFromString withTimezone(DateOperators.Timezone timezone); // Optionally set the DateOperators.Timezone to use.\n}"}
{"index": 580, "repo": "ignite-core-2.15.0", "des": "Checkpoint SPI provides an ability to save an intermediate job state.", "code": "Interface CheckpointSpi {\n\t@Nullable byte[] loadCheckpoint(String key); // Loads checkpoint from storage by its unique key.\n\tboolean removeCheckpoint(String key); // This method instructs the checkpoint provider to clean saved data for a given key.\n\tboolean saveCheckpoint(String key, byte[] state, long timeout, boolean overwrite); // Saves checkpoint to the storage.\n\tvoid setCheckpointListener(CheckpointListener lsnr); // Sets the checkpoint listener.\n}"}
{"index": 8418, "repo": "hadoop-aws-3.3.6", "des": "Operations which must be offered by the store for MarkerTool.", "code": "Interface MarkerToolOperations {\n\torg.apache.hadoop.fs.RemoteIterator<S3AFileStatus> listObjects(org.apache.hadoop.fs.Path path, String key); // Create an iterator over objects in S3.\n\tvoid removeKeys(List<com.amazonaws.services.s3.model.DeleteObjectsRequest.KeyVersion> keysToDelete, boolean deleteFakeDir); // Remove keys from the store.\n}"}
{"index": 2594, "repo": "zookeeper-jute-3.8.2", "des": "An implementation of interface CharStream, where the stream is assumed to contain only ASCII characters (without unicode processing).", "code": "Class SimpleCharStream {\n\tvoid adjustBeginLineColumn(int newLine, int newCol); // Method to adjust line and column numbers for the start of a token.\n\tvoid backup(int amount); // Backup a number of characters.\n\tchar BeginToken(); // Start.\n\tvoid Done(); // Reset buffer when finished.\n\tprotected void ExpandBuff(boolean wrapAround);\n\tprotected void FillBuff();\n\tint getBeginColumn(); // Get token beginning column number.\n\tint getBeginLine(); // Get token beginning line number.\n\tint getEndColumn(); // Get token end column number.\n\tint getEndLine(); // Get token end line number.\n\tString GetImage(); // Get token literal value.\n\tchar[] GetSuffix(int len); // Get the suffix.\n\tprotected int getTabSize(int i);\n\tchar readChar(); // Read a character.\n\tvoid ReInit(InputStream dstream); // Reinitialise.\n\tvoid ReInit(InputStream dstream, int startline, int startcolumn); // Reinitialise.\n\tvoid ReInit(InputStream dstream, int startline, int startcolumn, int buffersize); // Reinitialise.\n\tvoid ReInit(InputStream dstream, String encoding); // Reinitialise.\n\tvoid ReInit(InputStream dstream, String encoding, int startline, int startcolumn); // Reinitialise.\n\tvoid ReInit(InputStream dstream, String encoding, int startline, int startcolumn, int buffersize); // Reinitialise.\n\tvoid ReInit(Reader dstream); // Reinitialise.\n\tvoid ReInit(Reader dstream, int startline, int startcolumn); // Reinitialise.\n\tvoid ReInit(Reader dstream, int startline, int startcolumn, int buffersize); // Reinitialise.\n\tprotected void setTabSize(int i);\n\tprotected void UpdateLineColumn(char c);\n}"}
{"index": 13036, "repo": "spring-aop-6.0.11", "des": "AspectJPointcutAdvisor that adapts an AbstractAspectJAdvice to the PointcutAdvisor interface.", "code": "public class AspectJPointcutAdvisor extends Object implements PointcutAdvisor, org.springframework.core.Ordered {\n\tboolean equals(Object other);\n\tAdvice getAdvice(); // Return the advice part of this aspect.\n\tString getAspectName(); // Return the name of the aspect (bean) in which the advice was declared.\n\tint getOrder();\n\tPointcut getPointcut(); // Get the Pointcut that drives this advisor.\n\tvoid setOrder(int order);\n}"}
{"index": 16570, "repo": "spring-beans-6.0.11", "des": "A collection of AOT services that can be loaded from a SpringFactoriesLoader or obtained from a ListableBeanFactory.", "code": "public final class AotServices<T> extends Object implements Iterable<T> {\n\tList<T> asList(); // Return the AOT services as a List.\n\tstatic AotServices.Loader factories(); // Create a new AotServices.Loader that will obtain AOT services from \"META-INF/spring/aot.factories\".\n\tstatic AotServices.Loader factories(ClassLoader classLoader); // Create a new AotServices.Loader that will obtain AOT services from \"META-INF/spring/aot.factories\".\n\tstatic AotServices.Loader factories(org.springframework.core.io.support.SpringFactoriesLoader springFactoriesLoader); // Create a new AotServices.Loader that will obtain AOT services from the given SpringFactoriesLoader.\n\tstatic AotServices.Loader factoriesAndBeans(ListableBeanFactory beanFactory); // Create a new AotServices.Loader that will obtain AOT services from \"META-INF/spring/aot.factories\" as well as the given ListableBeanFactory.\n\tstatic AotServices.Loader factoriesAndBeans(org.springframework.core.io.support.SpringFactoriesLoader springFactoriesLoader, ListableBeanFactory beanFactory); // Create a new AotServices.Loader that will obtain AOT services from the given SpringFactoriesLoader and ListableBeanFactory.\n\tT findByBeanName(String beanName); // Find the AOT service that was loaded for the given bean name.\n\tAotServices.Source getSource(T service); // Get the source of the given service.\n\tIterator<T> iterator();\n\tStream<T> stream(); // Return a Stream of the AOT services.\n}"}
{"index": 13586, "repo": "spring-messaging-6.0.11", "des": "Represents a subscription within a user session.", "code": "public interface SimpSubscription {\n\tString getDestination(); // Return the subscription's destination.\n\tString getId(); // Return the id associated of the subscription.\n\tSimpSession getSession(); // Return the session of the subscription.\n}"}
{"index": 10962, "repo": "spring-data-redis-3.1.2", "des": "RedisConfiguration part suitable for configurations that use a specific database.", "code": "public static interface RedisConfiguration.WithDatabaseIndex {\n\tint getDatabase(); // Get the database index to use.\n\tvoid setDatabase(int dbIndex); // Set the database index to use.\n}"}
{"index": 15159, "repo": "spring-data-elasticsearch-5.1.2", "des": "Base class for a @Configuration class to set up the Elasticsearch connection using the ReactiveElasticsearchClient.", "code": "public abstract class ReactiveElasticsearchConfiguration extends ElasticsearchConfigurationSupport {\n\tabstract ClientConfiguration clientConfiguration(); // Must be implemented by deriving classes to provide the ClientConfiguration.\n\torg.elasticsearch.client.RestClient elasticsearchRestClient(ClientConfiguration clientConfiguration); // Provides the underlying low level RestClient.\n\tReactiveElasticsearchClient reactiveElasticsearchClient(org.elasticsearch.client.RestClient restClient); // Provides the ReactiveElasticsearchClient instance used.\n\tReactiveElasticsearchOperations reactiveElasticsearchOperations(ElasticsearchConverter elasticsearchConverter, ReactiveElasticsearchClient reactiveElasticsearchClient); // Creates ReactiveElasticsearchOperations.\n\tco.elastic.clients.transport.TransportOptions transportOptions();\n}"}
{"index": 18496, "repo": "poi-scratchpad-5.2.3", "des": "A pure-MAPI attribute holding RTF (compressed or not), which applies to a HMEFMessage or one of its Attachments.", "code": "Class MAPIRtfAttribute {\n\tbyte[] getData(); // Returns the raw uncompressed RTF data\n\tString getDataString(); // Returns the uncompressed RTF as a string\n\tbyte[] getRawData(); // Returns the original, compressed RTF\n}"}
{"index": 18821, "repo": "lucene-core-9.7.0", "des": "Manages reference counting for a given object.", "code": "Class RefCount<T> {\n\tvoid decRef(); // Decrements the reference counting of this object.\n\tT get();\n\tint getRefCount(); // Returns the current reference count.\n\tvoid incRef(); // Increments the reference count.\n\tprotected void release(); // Called when reference counting hits 0.\n}"}
{"index": 588, "repo": "ignite-core-2.15.0", "des": "Client cache partition awareness context.", "code": "Class ClientCacheAffinityContext {\n\tUUID affinityNode(int cacheId, int part); // Calculates affinity node for given cache and partition.\n\tUUID affinityNode(int cacheId, Object key); // Calculates affinity node for given cache and key.\n\tboolean affinityUpdateRequired(int cacheId); // Is affinity update required for given cache.\n\tprotected ClientCacheAffinityMapping currentMapping(); // Current affinity mapping.\n\torg.apache.ignite.internal.client.thin.ClientCacheAffinityContext.TopologyNodes lastTopology(); // Gets last topology information.\n\tboolean readPartitionsUpdateResponse(org.apache.ignite.internal.client.thin.PayloadInputChannel ch);\n\tvoid registerCache(String cacheName);\n\tvoid reset(org.apache.ignite.internal.client.thin.ClientCacheAffinityContext.TopologyNodes top); // Resets affinity context.\n\tvoid unregisterCache(String cacheName);\n\tboolean updateLastTopologyVersion(AffinityTopologyVersion topVer, UUID nodeId); // Update topology version if it's greater than current version and store nodes for last topology.\n\tvoid writePartitionsUpdateRequest(org.apache.ignite.internal.client.thin.PayloadOutputChannel ch);\n}"}
{"index": 7119, "repo": "calcite-core-1.34.0", "des": "Variable which references a column of a table occurrence in a relational plan.", "code": "Class RexTableInputRef {\n\t<R,P> R accept(RexBiVisitor<R,P> visitor, P arg); // Accepts a visitor with a payload, dispatching to the right overloaded RexBiVisitor.visitInputRef(RexInputRef, Object) visitXxx} method.\n\t<R> R accept(RexVisitor<R> visitor); // Accepts a visitor, dispatching to the right overloaded visitXxx method.\n\tboolean equals(@Nullable Object obj);\n\tint getIdentifier();\n\tSqlKind getKind(); // Returns the kind of node this is.\n\tList<String> getQualifiedName();\n\tRexTableInputRef.RelTableRef getTableRef();\n\tstatic RexTableInputRef of(RexTableInputRef.RelTableRef tableRef, int index, RelDataType type);\n\tstatic RexTableInputRef of(RexTableInputRef.RelTableRef tableRef, RexInputRef ref);\n}"}
{"index": 14692, "repo": "spring-data-commons-3.1.2", "des": "Central API to expose information about custom collections present for Spring Data.", "code": "public class CustomCollections extends Object {\n\tstatic Set<Class<?>> getCustomTypes(); // Returns all custom collection and map types.\n\tstatic Class<?> getMapBaseType(Class<?> type); // Returns the map base type for the given type, i.e. the one that's considered the logical map interface (Map for HashMap etc.).\n\tstatic Set<Class<?>> getPaginationReturnTypes(); // Returns all types that are allowed pagination return types.\n\tstatic Set<Function<Object,Object>> getUnwrappers(); // Returns all unwrapper functions that transform the custom collections into Java-native ones.\n\tstatic boolean isCollection(Class<?> type); // Returns whether the given type is considered a Collection type.\n\tstatic boolean isMap(Class<?> type); // Returns whether the given type is considered a Map type.\n\tstatic boolean isMapBaseType(Class<?> type); // Returns whether the given type is a map base type.\n\tstatic void registerConvertersIn(ConverterRegistry registry); // Registers all converters to transform Java-native collections into custom ones and back in the given ConverterRegistry.\n}"}
{"index": 17647, "repo": "spring-web-6.0.11", "des": "Abstract base class for most HttpMessageConverter implementations.", "code": "public abstract class AbstractHttpMessageConverter<T> extends Object implements HttpMessageConverter<T> {\n\tprotected void addDefaultHeaders(HttpHeaders headers, T t, MediaType contentType); // Add default headers to the output message.\n\tboolean canRead(Class<?> clazz, MediaType mediaType); // This implementation checks if the given class is supported, and if the supported media types include the given media type.\n\tprotected boolean canRead(MediaType mediaType); // Returns true if any of the supported media types include the given media type.\n\tboolean canWrite(Class<?> clazz, MediaType mediaType); // This implementation checks if the given class is supported, and if the supported media types include the given media type.\n\tprotected boolean canWrite(MediaType mediaType); // Returns true if the given media type includes any of the supported media types.\n\tprotected Long getContentLength(T t, MediaType contentType); // Returns the content length for the given type.\n\tCharset getDefaultCharset(); // Return the default character set, if any.\n\tprotected MediaType getDefaultContentType(T t); // Returns the default content type for the given type.\n\tList<MediaType> getSupportedMediaTypes(); // Return the list of media types supported by this converter.\n\tfinal T read(Class<? extends T> clazz, HttpInputMessage inputMessage); // This implementation simple delegates to readInternal(Class, HttpInputMessage).\n\tprotected abstract T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage); // Abstract template method that reads the actual object.\n\tvoid setDefaultCharset(Charset defaultCharset); // Set the default character set, if any.\n\tvoid setSupportedMediaTypes(List<MediaType> supportedMediaTypes); // Set the list of MediaType objects supported by this converter.\n\tprotected abstract boolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tfinal void write(T t, MediaType contentType, HttpOutputMessage outputMessage); // This implementation sets the default headers by calling addDefaultHeaders(org.springframework.http.HttpHeaders, T, org.springframework.http.MediaType), and then calls writeInternal(T, org.springframework.http.HttpOutputMessage).\n\tprotected abstract void writeInternal(T t, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 10613, "repo": "groovy-all-4.0.13", "des": "Represents a property (member variable, a getter and setter)", "code": "public class PropertyNode extends AnnotatedNode implements Variable {\n\tFieldNode getField();\n\tStatement getGetterBlock();\n\tString getGetterName();\n\tString getGetterNameOrDefault(); // If an explicit getterName has been set, return that, otherwise return the default name for the property.\n\tExpression getInitialExpression(); // expression used to initialize the variable or null of there is no initialization.\n\tint getModifiers();\n\tString getName(); // the name of the variable\n\tClassNode getOriginType(); // the type before wrapping primitives type of the variable\n\tStatement getSetterBlock();\n\tString getSetterName();\n\tString getSetterNameOrDefault();\n\tClassNode getType(); // the type of the variable\n\tboolean hasInitialExpression(); // returns true if there is an initialization expression\n\tboolean isClosureSharedVariable();\n\tboolean isDynamicTyped();\n\tboolean isInStaticContext(); // returns true if this variable is used in a static context.\n\tboolean isPrivate();\n\tboolean isPublic();\n\tboolean isStatic();\n\tvoid setClosureSharedVariable(boolean inClosure); // Deprecated. not used anymore, has no effect\n\tvoid setField(FieldNode fn);\n\tvoid setGetterBlock(Statement getterBlock);\n\tvoid setGetterName(String getterName);\n\tvoid setModifiers(int modifiers);\n\tvoid setSetterBlock(Statement setterBlock);\n\tvoid setSetterName(String setterName);\n\tvoid setType(ClassNode t);\n}"}
{"index": 9611, "repo": "commons-math3-3.6.1", "des": "Implements the Fast Fourier Transform for transformation of one-dimensional real or complex data sets.", "code": "Class FastFourierTransformer {\n\tObject mdfft(Object mdca, TransformType type); // Deprecated. see MATH-736\n\tComplex[] transform(Complex[] f, TransformType type); // Returns the (forward, inverse) transform of the specified complex data set.\n\tComplex[] transform(double[] f, TransformType type); // Returns the (forward, inverse) transform of the specified real data set.\n\tComplex[] transform(UnivariateFunction f, double min, double max, int n, TransformType type); // Returns the (forward, inverse) transform of the specified real function, sampled on the specified interval.\n\tstatic void transformInPlace(double[][] dataRI, DftNormalization normalization, TransformType type); // Computes the standard transform of the specified complex data.\n}"}
{"index": 17359, "repo": "groovy-4.0.13", "des": "Represents a Method on a Java object a little like Method except without using reflection to invoke the method", "code": "public abstract class MetaMethod extends ParameterTypes implements Cloneable {\n\tvoid checkParameters(Class[] arguments); // Checks that the given parameters are valid to call this method\n\tObject clone();\n\tObject doMethodInvoke(Object object, Object[] argumentArray); // Invokes the method this object represents.\n\tprotected static boolean equal(CachedClass[] a, Class[] b);\n\tprotected static boolean equal(CachedClass[] a, CachedClass[] b);\n\tabstract CachedClass getDeclaringClass(); // Gets the class where this method is declared\n\tString getDescriptor(); // Return a descriptor of this method based on the return type and parameters of this method.\n\tabstract int getModifiers(); // Returns the modifiers for this method\n\tString getMopName();\n\tabstract String getName(); // Returns the name of the method represented by this class\n\tabstract Class getReturnType(); // Access the return type for this method\n\tString getSignature(); // Returns the signature of this method\n\tabstract Object invoke(Object object, Object[] arguments); // Invoke this method\n\tboolean isAbstract(); // Returns whether this method is abstract.\n\tboolean isCacheable(); // Returns whether this object is cacheable\n\tboolean isDefault(); // Returns whether this method is interface-default.\n\tboolean isMethod(MetaMethod method); // Returns true if this metamethod represents the same method as the argument.\n\tfinal boolean isPrivate(); // Returns whether this method is private.\n\tfinal boolean isProtected(); // Returns whether this method is protected.\n\tfinal boolean isPublic(); // Returns whether this method is public.\n\tfinal boolean isSame(MetaMethod method);\n\tboolean isStatic(); // Returns whether this method is static.\n\tfinal RuntimeException processDoMethodInvokeException(Exception e, Object object, Object[] argumentArray); // This method is called when an exception occurs while invoking this method.\n}"}
{"index": 4082, "repo": "camel-core-3.0.0-RC1", "des": "CBOR data format is used for unmarshal a CBOR payload to POJO or to marshal POJO back to CBOR payload.", "code": "Class CBORDataFormat {\n\tBoolean getAllowJmsType();\n\tBoolean getAllowUnmarshallType();\n\tClass<?> getCollectionType();\n\tString getCollectionTypeName();\n\tString getDataFormatName();\n\tString getDisableFeatures();\n\tString getEnableFeatures();\n\tString getObjectMapper();\n\tBoolean getPrettyPrint();\n\tClass<?> getUnmarshalType();\n\tString getUnmarshalTypeName();\n\tBoolean getUseDefaultObjectMapper();\n\tBoolean getUseList();\n\tvoid setAllowJmsType(Boolean allowJmsType); // Used for JMS users to allow the JMSType header from the JMS spec to specify a FQN classname to use to unmarshal to.\n\tvoid setAllowUnmarshallType(Boolean allowUnmarshallType); // If enabled then Jackson CBOR is allowed to attempt to use the CamelCBORUnmarshalType header during the unmarshalling.\n\tvoid setCollectionType(Class<?> collectionType);\n\tvoid setCollectionTypeName(String collectionTypeName); // Refers to a custom collection type to lookup in the registry to use.\n\tvoid setDisableFeatures(String disableFeatures); // Set of features to disable on the Jackson com.fasterxml.jackson.databind.ObjectMapper.\n\tvoid setEnableFeatures(String enableFeatures); // Set of features to enable on the Jackson com.fasterxml.jackson.databind.ObjectMapper.\n\tvoid setObjectMapper(String objectMapper); // Lookup and use the existing CBOR ObjectMapper with the given id when using Jackson.\n\tvoid setPrettyPrint(Boolean prettyPrint); // To enable pretty printing output nicely formatted.\n\tvoid setUnmarshalType(Class<?> unmarshalType); // Class of the java type to use when unarmshalling\n\tvoid setUnmarshalTypeName(String unmarshalTypeName); // Class name of the java type to use when unarmshalling\n\tvoid setUseDefaultObjectMapper(Boolean useDefaultObjectMapper); // Whether to lookup and use default Jackson CBOR ObjectMapper from the registry.\n\tvoid setUseList(Boolean useList); // To unarmshal to a List of Map or a List of Pojo.\n}"}
{"index": 16958, "repo": "spring-orm-6.0.11", "des": "JpaVendorAdapter implementation for Eclipse Persistence Services (EclipseLink).", "code": "public class EclipseLinkJpaVendorAdapter extends AbstractJpaVendorAdapter {\n\tprotected String determineTargetDatabaseName(Database database); // Determine the EclipseLink target database name for the given database.\n\tClass<? extends EntityManager> getEntityManagerInterface(); // Return the vendor-specific EntityManager interface that this provider's EntityManagers will implement.\n\tEclipseLinkJpaDialect getJpaDialect(); // Return the vendor-specific JpaDialect implementation for this provider, or null if there is none.\n\tMap<String,Object> getJpaPropertyMap(); // Return a Map of vendor-specific JPA properties, typically based on settings in this JpaVendorAdapter instance.\n\tPersistenceProvider getPersistenceProvider(); // Return the vendor-specific persistence provider.\n}"}
{"index": 14848, "repo": "spring-data-commons-3.1.2", "des": "Simple wrapper class for a List of Revisions allowing to canonically access the latest revision.", "code": "public class Revisions<N extends Number & Comparable<N>,T> extends Object implements Streamable<Revision<N,T>> {\n\tList<Revision<N,T>> getContent(); // Returns the content of the Revisions instance.\n\tRevision<N,T> getLatestRevision(); // Returns the latest revision of the revisions backing the wrapper independently of the order.\n\tIterator<Revision<N,T>> iterator();\n\tstatic <N extends Number & Comparable<N>, T>Revisions<N,T> none(); // Creates a new empty Revisions instance.\n\tstatic <N extends Number & Comparable<N>, T>Revisions<N,T> of(List<? extends Revision<N,T>> revisions); // Creates a new Revisions instance for the given Revisions.\n\tRevisions<N,T> reverse(); // Reverses the current Revisions.\n}"}
{"index": 16367, "repo": "spring-data-jpa-3.1.2", "des": "Value object to abstract a collection of Attributes.", "code": "public static class JpaSort.Path<T,S> extends Object {\n\t<A extends jakarta.persistence.metamodel.Attribute<S, U>, U>JpaSort.Path<S,U> dot(A attribute); // Collects the given Attribute and returning a new JpaSort.Path pointing to the attribute type.\n\t<P extends jakarta.persistence.metamodel.PluralAttribute<S, ?, U>, U>JpaSort.Path<S,U> dot(P attribute); // Collects the given PluralAttribute and returning a new JpaSort.Path pointing to the attribute type.\n}"}
{"index": 3766, "repo": "commons-pool2-2.11.1", "des": "A simple \"struct\" encapsulating the configuration for a GenericObjectPool.", "code": "Class GenericObjectPoolConfig<T> {\n\tGenericObjectPoolConfig<T> clone();\n\tint getMaxIdle(); // Get the value for the maxIdle configuration attribute for pools created with this configuration instance.\n\tint getMaxTotal(); // Get the value for the maxTotal configuration attribute for pools created with this configuration instance.\n\tint getMinIdle(); // Get the value for the minIdle configuration attribute for pools created with this configuration instance.\n\tvoid setMaxIdle(int maxIdle); // Set the value for the maxIdle configuration attribute for pools created with this configuration instance.\n\tvoid setMaxTotal(int maxTotal); // Set the value for the maxTotal configuration attribute for pools created with this configuration instance.\n\tvoid setMinIdle(int minIdle); // Set the value for the minIdle configuration attribute for pools created with this configuration instance.\n\tprotected void toStringAppendFields(StringBuilder builder); // Used by sub-classes to include the fields defined by the sub-class in the BaseObject.toString() output.\n}"}
{"index": 3552, "repo": "mahout-mr-0.13.0", "des": "A Recommender that uses matrix factorization (a projection of users and items onto a feature space).", "code": "Class SVDRecommender {\n\tfloat estimatePreference(long userID, long itemID); // a preference is estimated by computing the dot-product of the user and item feature vectors\n\tList<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems);\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Refresh the data model and factorization.\n}"}
{"index": 15964, "repo": "wicket-util-10.0.0-M1", "des": "Byte Order Mark (BOM) representation - see BOMInputStream.", "code": "public class ByteOrderMark extends Object implements Serializable {\n\tboolean equals(Object obj); // Indicates if this BOM's bytes equals another.\n\tint get(int pos); // The byte at the specified position.\n\tbyte[] getBytes(); // Return a copy of the BOM's bytes.\n\tString getCharsetName(); // Return the name of the Charset the BOM represents.\n\tint length(); // Return the length of the BOM's bytes.\n}"}
{"index": 3546, "repo": "mahout-mr-0.13.0", "des": "Records evolutionary state and provides a mutation operation for recorded-step meta-mutation.", "code": "Class State<T extends Payload<U>,U> {\n\tint compareTo(State<T,U> other); // Natural order is to sort in descending order of score.\n\tState<T,U> copy(); // Deep copies a state, useful in mutation.\n\tboolean equals(Object o);\n\tdouble get(int i); // Returns a transformed parameter.\n\tint getId();\n\tdouble[] getMappedParams(); // Returns all the parameters in mapped form.\n\tMapping[] getMaps();\n\tdouble getOmni();\n\tdouble[] getParams();\n\tT getPayload();\n\tdouble[] getStep();\n\tdouble getValue();\n\tState<T,U> mutate(); // Clones this state with a random change in position.\n\tvoid readFields(DataInput input);\n\tvoid setId(int id);\n\tvoid setMap(int i, Mapping m); // Defines the transformation for a parameter.\n\tvoid setMaps(Iterable<Mapping> maps);\n\tvoid setMaps(Mapping[] maps);\n\tvoid setOmni(double omni);\n\tvoid setPayload(T payload);\n\tvoid setStep(double[] step);\n\tvoid setValue(double v);\n\tvoid write(DataOutput out);\n}"}
{"index": 17729, "repo": "spring-web-6.0.11", "des": "RequestAttributes adapter for a JSF FacesContext.", "code": "public class FacesRequestAttributes extends Object implements RequestAttributes {\n\tObject getAttribute(String name, int scope); // Return the value for the scoped attribute of the given name, if any.\n\tprotected Map<String,Object> getAttributeMap(int scope); // Return the JSF attribute Map for the specified scope.\n\tString[] getAttributeNames(int scope); // Retrieve the names of all attributes in the scope.\n\tprotected final ExternalContext getExternalContext(); // Return the JSF ExternalContext that this adapter operates on.\n\tprotected final FacesContext getFacesContext(); // Return the JSF FacesContext that this adapter operates on.\n\tString getSessionId(); // Return an id for the current underlying session.\n\tObject getSessionMutex(); // Expose the best available mutex for the underlying session: that is, an object to synchronize on for the underlying session.\n\tvoid registerDestructionCallback(String name, Runnable callback, int scope); // Register a callback to be executed on destruction of the specified attribute in the given scope.\n\tvoid removeAttribute(String name, int scope); // Remove the scoped attribute of the given name, if it exists.\n\tObject resolveReference(String key); // Resolve the contextual reference for the given key, if any.\n\tvoid setAttribute(String name, Object value, int scope); // Set the value for the scoped attribute of the given name, replacing an existing value (if any).\n}"}
{"index": 7256, "repo": "calcite-core-1.34.0", "des": "SqlOperatorTable defines a directory interface for enumerating and looking up SQL operators and functions.", "code": "Interface SqlOperatorTable {\n\tList<SqlOperator> getOperatorList(); // Retrieves a list of all functions and operators in this table.\n\tvoid lookupOperatorOverloads(SqlIdentifier opName, @Nullable SqlFunctionCategory category, SqlSyntax syntax, List<SqlOperator> operatorList, SqlNameMatcher nameMatcher); // Retrieves a list of operators with a given name and syntax.\n}"}
{"index": 12077, "repo": "jena-core-4.9.0", "des": "Interface for listening to graph-level update events.", "code": "public interface GraphListener {\n\tvoid notifyAddArray(Graph g, Triple[] triples); // Method called when an array of triples has been added to the graph.\n\tvoid notifyAddGraph(Graph g, Graph added); // Method called when another graph g has been used to specify the triples added to our attached graph.\n\tvoid notifyAddIterator(Graph g, Iterator<Triple> it); // Method called when an iterator [of triples] has been added to the graph\n\tvoid notifyAddList(Graph g, List<Triple> triples); // Method called when a list [of triples] has been added to the graph.\n\tvoid notifyAddTriple(Graph g, Triple t); // Method called when a single triple has been added to the graph.\n\tvoid notifyDeleteArray(Graph g, Triple[] triples); // Method called when an array of triples has been deleted from the graph.\n\tvoid notifyDeleteGraph(Graph g, Graph removed); // Method to call when another graph has been used to specify the triples deleted from our attached graph.\n\tvoid notifyDeleteIterator(Graph g, Iterator<Triple> it); // Method called when an iterator [of triples] has been deleted from the graph.\n\tvoid notifyDeleteList(Graph g, List<Triple> L); // Method called when a list [of triples] has been deleted from the graph.\n\tvoid notifyDeleteTriple(Graph g, Triple t); // Method called when a single triple has been deleted from the graph.\n\tvoid notifyEvent(Graph source, Object value); // method to call for a general event.\n}"}
{"index": 320, "repo": "phoenix-core-5.1.3", "des": "A default implementation of the Statistics tracker that helps to collect stats like min key, max key and guideposts.", "code": "Class DefaultStatisticsCollector {\n\tvoid close();\n\tvoid collectStatistics(List<org.apache.hadoop.hbase.Cell> results); // Update the current statistics based on the latest batch of key-values from the underlying scanner\n\torg.apache.hadoop.hbase.regionserver.InternalScanner createCompactionScanner(org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment env, org.apache.hadoop.hbase.regionserver.Store store, org.apache.hadoop.hbase.regionserver.InternalScanner delegate); // Wrap a compaction scanner with a scanner that will collect statistics using this instance.\n\tlong getGuidePostDepth(); // Retrieve the guide post depth during stats collection\n\tGuidePostsInfo getGuidePosts(ImmutableBytesPtr fam); // Retrieve the calculated guide post info for the given column family.\n\tlong getMaxTimeStamp(); // Returns the maximum timestamp of all cells encountered while collecting statistics.\n\tStatisticsWriter getStatisticsWriter(); // Retrieve the object that manages statistics persistence\n\tvoid init(); // Called before beginning the collection of statistics through StatisticsCollector.collectStatistics(List)\n\tvoid updateStatistics(org.apache.hadoop.hbase.regionserver.Region region, org.apache.hadoop.hbase.client.Scan scan); // Write the collected statistics for the given region over the scan provided.\n}"}
{"index": 13234, "repo": "spring-test-6.0.11", "des": "Extension of DefaultServerWebExchange for use in tests, along with MockServerHttpRequest and MockServerHttpResponse.", "code": "public final class MockServerWebExchange extends org.springframework.web.server.adapter.DefaultServerWebExchange {\n\tstatic MockServerWebExchange.Builder builder(MockServerHttpRequest request); // Create a MockServerWebExchange.Builder starting with the given mock request.\n\tstatic MockServerWebExchange.Builder builder(MockServerHttpRequest.BaseBuilder<?> requestBuilder); // Variant of builder(MockServerHttpRequest) with a mock request builder.\n\tstatic MockServerWebExchange from(MockServerHttpRequest request); // Create a MockServerWebExchange from the given mock request.\n\tstatic MockServerWebExchange from(MockServerHttpRequest.BaseBuilder<?> requestBuilder); // Variant of from(MockServerHttpRequest) with a mock request builder.\n\tMockServerHttpResponse getResponse();\n}"}
{"index": 3237, "repo": "hbase-common-3.0.0-alpha-4", "des": "These are values used with HBaseSemanticAttributes.", "code": "Enum HBaseSemanticAttributes.Operation {\n\tstatic HBaseSemanticAttributes.Operation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HBaseSemanticAttributes.Operation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18712, "repo": "opennlp-tools-2.2.0", "des": "A base ObjectStream implementation for events.", "code": "Class AbstractEventStream<T> {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tEvent read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 1348, "repo": "nutch-2.4", "des": "This class is a protocol plugin that configures an HTTP client for Basic, Digest and NTLM authentication schemes for web server as well as proxy server.", "code": "Class Http {\n\tjava.util.Collection<WebPage.Field> getFields();\n\tprotected Response getResponse(java.net.URL url, WebPage page, boolean redirect); // Fetches the url with a configured HTTP client and gets the response.\n\tstatic void main(java.lang.String[] args); // Main method.\n\tvoid setConf(Configuration conf); // Reads the configuration from the Nutch configuration files and sets the configuration.\n}"}
{"index": 1539, "repo": "pdfbox-3.0.0-beta1", "des": "A Lab colour space is a CIE-based ABC colour space with two transformation stages.", "code": "Class PDLab {\n\tPDRange getARange(); // This will get the valid range for the \"a\" component.\n\tPDRange getBRange(); // This will get the valid range for the \"b\" component.\n\tfloat[] getDefaultDecode(int bitsPerComponent); // Returns the default decode array for this color space.\n\tPDColor getInitialColor(); // Returns the initial color value for this color space.\n\tString getName(); // Returns the name of the color space.\n\tint getNumberOfComponents(); // Returns the number of components in this color space\n\tvoid setARange(PDRange range); // This will set the a range for the \"a\" component.\n\tvoid setBRange(PDRange range); // This will set the \"b\" range for this color space.\n\tBufferedImage toRawImage(WritableRaster raster); // Returns the image in this colorspace or null.\n\tfloat[] toRGB(float[] value); // Returns the RGB equivalent of the given color value.\n\tBufferedImage toRGBImage(WritableRaster raster); // Returns the (A)RGB equivalent of the given raster.\n}"}
{"index": 11059, "repo": "spring-shell-core-3.1.2", "des": "Represents the input buffer to the shell.", "code": "public interface Input {\n\tString rawText(); // Return the input as entered by the user.\n\tdefault List<String> words(); // Return the input as a list of parsed \"words\", having split the raw input according to parsing rules (for example, handling quoted portions of the readInput as a single \"word\")\n}"}
{"index": 2264, "repo": "hive-exec-4.0.0-alpha-2", "des": "A simple implementation of GenericUDAFParameterInfo.", "code": "Class SimpleGenericUDAFParameterInfo {\n\tObjectInspector[] getParameterObjectInspectors();\n\tboolean isAllColumns(); // Returns true if the UDAF invocation was done via the wildcard syntax FUNCTION(*).\n\tboolean isDistinct(); // Returns true if the UDAF invocation was qualified with DISTINCT keyword.\n\tboolean isWindowing(); // The flag to indicate if the UDAF invocation was from the windowing function call or not.\n\tboolean respectNulls();\n}"}
{"index": 7754, "repo": "cassandra-all-4.1.2", "des": "A cheaper, thread-unsafe permit container to be used for unshared limits.", "code": "Class ResourceLimits.Basic {\n\tvoid allocate(long amount); // Allocates an amount independent of permits available from this limit.\n\tlong limit();\n\tResourceLimits.Outcome release(long amount);\n\tlong remaining();\n\tlong setLimit(long newLimit); // Sets the total amount of permits represented by this ResourceLimits.Limit - the capacity If the old limit has been reached and the new limit is large enough to allow for more permits to be acquired, subsequent calls to ResourceLimits.Limit.allocate(long) or ResourceLimits.Limit.tryAllocate(long) will succeed.\n\tboolean tryAllocate(long amount); // Attempts to allocate an amount of permits from this limit.\n\tlong using();\n}"}
{"index": 1160, "repo": "ignite-core-2.15.0", "des": "Security subject representing authenticated node with a set of permissions.", "code": "Interface SecuritySubject {\n\tInetSocketAddress address(); // Gets subject connection address.\n\tdefault Certificate[] certificates(); // Gets subject client certificates, or null if SSL were not used or client certificate checking not enabled.\n\tUUID id(); // Gets subject ID.\n\tObject login(); // Login provided via subject security credentials.\n\tSecurityPermissionSet permissions(); // Authorized permission set for the subject.\n\tdefault PermissionCollection sandboxPermissions();\n\tSecuritySubjectType type(); // Gets subject type for node.\n}"}
{"index": 2537, "repo": "exoplayer-r2.3.1", "des": "Defines common MIME types and helper methods.", "code": "Class MimeTypes {\n\tstatic java.lang.String getAudioMediaMimeType(java.lang.String codecs); // Derives a audio sample mimeType from a codecs attribute.\n\tstatic java.lang.String getMediaMimeType(java.lang.String codec); // Derives a mimeType from a codec identifier, as defined in RFC 6381.\n\tstatic int getTrackType(java.lang.String mimeType); // Returns the C.TRACK_TYPE_* constant that corresponds to a specified mime type.\n\tstatic int getTrackTypeOfCodec(java.lang.String codec); // Equivalent to getTrackType(getMediaMimeType(codec)).\n\tstatic java.lang.String getVideoMediaMimeType(java.lang.String codecs); // Derives a video sample mimeType from a codecs attribute.\n\tstatic boolean isApplication(java.lang.String mimeType); // Whether the top-level type of mimeType is application.\n\tstatic boolean isAudio(java.lang.String mimeType); // Whether the top-level type of mimeType is audio.\n\tstatic boolean isText(java.lang.String mimeType); // Whether the top-level type of mimeType is text.\n\tstatic boolean isVideo(java.lang.String mimeType); // Whether the top-level type of mimeType is video.\n}"}
{"index": 10300, "repo": "spring-core-6.0.11", "des": "Fluent API for configuring the search algorithm used in the MergedAnnotations model and performing a search.", "code": "public static final class MergedAnnotations.Search extends Object {\n\tMergedAnnotations from(AnnotatedElement element); // Perform a search for merged annotations beginning with the supplied AnnotatedElement (such as a Class or Method), using the configuration in this Search instance.\n\tMergedAnnotations.Search withAnnotationFilter(AnnotationFilter annotationFilter); // Configure the AnnotationFilter to use.\n\tMergedAnnotations.Search withEnclosingClasses(Predicate<Class<?>> searchEnclosingClass); // Configure whether the search algorithm should search on enclosing classes.\n\tMergedAnnotations.Search withRepeatableContainers(RepeatableContainers repeatableContainers); // Configure the RepeatableContainers to use.\n}"}
{"index": 9022, "repo": "hbase-server-3.0.0-alpha-4", "des": "A RegionSplitRestriction implementation that does nothing.", "code": "Class NoRegionSplitRestriction {\n\tbyte[] getRestrictedSplitPoint(byte[] splitPoint); // Returns a restricted split point.\n\tvoid initialize(TableDescriptor tableDescriptor, org.apache.hadoop.conf.Configuration conf); // Initialize the RegionSplitRestriction instance\n}"}
{"index": 9168, "repo": "hbase-server-3.0.0-alpha-4", "des": "It's provided to have a way for coprocessors to observe, rewrite, or skip WALEdits as they are being written to the WAL.", "code": "Interface WALObserver {\n\tdefault void postWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx, org.apache.hadoop.fs.Path oldPath, org.apache.hadoop.fs.Path newPath); // Called after rolling the current WAL\n\tdefault void preWALRoll(ObserverContext<? extends WALCoprocessorEnvironment> ctx, org.apache.hadoop.fs.Path oldPath, org.apache.hadoop.fs.Path newPath); // Called before rolling the current WAL\n}"}
{"index": 15859, "repo": "camel-api-4.0.0-RC1", "des": "Represents a list of TLS/SSL cipher suite names.", "code": "public class SecureSocketProtocolsParameters extends Object {\n\tList<String> getSecureSocketProtocol(); // Returns a live reference to the list of secure socket protocol names.\n\tvoid setSecureSocketProtocol(List<String> secureSocketProtocol); // Sets the list of secure socket protocol names.\n}"}
{"index": 17929, "repo": "spring-web-6.0.11", "des": "Simple interface that can be injected into handler methods, allowing them to signal that their session processing is complete.", "code": "public interface SessionStatus {\n\tboolean isComplete(); // Return whether the current handler's session processing has been marked as complete.\n\tvoid setComplete(); // Mark the current handler's session processing as complete, allowing for cleanup of session attributes.\n}"}
{"index": 8568, "repo": "commons-io-2.13.0", "des": "Filters files based on size, can filter either smaller files or files equal to or larger than a given threshold.", "code": "Class SizeFileFilter {\n\tboolean accept(File file); // Checks to see if the size of the file is favorable.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the size of the file is favorable.\n\tFileVisitResult visitFile(Path file, BasicFileAttributes attrs);\n}"}
{"index": 2688, "repo": "mahout-core-14.1", "des": "Open hash map from short keys to short values.", "code": "Class OpenShortShortHashMap {\n\tshort adjustOrPutValue(short key, short newValue, short incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(short key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(short value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ShortProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ShortShortProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tshort get(short key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(short key);\n\tprotected int indexOfKey(short key);\n\tprotected int indexOfValue(short value);\n\tIterator<OpenShortShortHashMap.MapElement> iterator();\n\tvoid keys(ShortArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ShortShortProcedure condition, ShortArrayList keyList, ShortArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(short key, short value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(short key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ShortArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 7991, "repo": "commons-jcs3-core-3.1", "des": "The RemoteCacheNoWait wraps the RemoteCacheClient.", "code": "Class RemoteCacheNoWait<K,V> {\n\tvoid dispose(); // Adds a dispose request to the remote cache.\n\tvoid fixCache(ICacheServiceNonLocal<?,?> remote); // Replaces the remote cache service handle with the given handle and reset the event queue by starting up a new instance.\n\tICacheElement<K,V> get(K key); // Synchronously reads from the remote cache.\n\tAuxiliaryCacheAttributes getAuxiliaryCacheAttributes(); // This returns the generic attributes for an auxiliary cache.\n\tprotected ICacheEventQueue<K,V> getCacheEventQueue(); // This is for testing only.\n\tString getCacheName(); // Gets the cacheName attribute of the RemoteCacheNoWait object\n\tICacheType.CacheType getCacheType(); // No remote invocation.\n\tString getEventLoggingExtraInfo(); // this won't be called since we don't do ICache logging here.\n\tSet<K> getKeySet(); // Return the keys in this cache.\n\tMap<K,ICacheElement<K,V>> getMatching(String pattern); // Gets items from the cache matching the given pattern.\n\tMap<K,ICacheElement<K,V>> getMultiple(Set<K> keys); // Gets multiple items from the cache based on the given set of keys.\n\tprotected IRemoteCacheClient<K,V> getRemoteCache(); // This is temporary.\n\tint getSize(); // No remote invocation.\n\tIStats getStatistics();\n\tString getStats(); // Returns the statistics in String form.\n\tCacheStatus getStatus(); // Returns the async cache status.\n\tboolean remove(K key); // Adds a remove request to the remote cache.\n\tvoid removeAll(); // Adds a removeAll request to the remote cache.\n\tvoid resetEventQ(); // Resets the event q by first destroying the existing one and starting up new one.\n\tvoid update(ICacheElement<K,V> element); // Adds a put event to the queue.\n}"}
{"index": 15367, "repo": "spring-boot-3.1.1", "des": "A bundle of key and trust managers that can be used to establish an SSL connection.", "code": "public interface SslManagerBundle {\n\tdefault SSLContext createSslContext(String protocol); // Factory method to create a new SSLContext for the key managers and trust managers managed by this instance.\n\tstatic SslManagerBundle from(SslStoreBundle storeBundle, SslBundleKey key); // Factory method to create a new SslManagerBundle backed by the given SslBundle and SslBundleKey.\n\tKeyManagerFactory getKeyManagerFactory(); // Return the KeyManagerFactory used to establish identity.\n\tdefault KeyManager[] getKeyManagers(); // Return the KeyManager instances used to establish identity.\n\tTrustManagerFactory getTrustManagerFactory(); // Return the TrustManagerFactory used to establish trust.\n\tdefault TrustManager[] getTrustManagers(); // Return the TrustManager instances used to establish trust.\n\tstatic SslManagerBundle of(KeyManagerFactory keyManagerFactory, TrustManagerFactory trustManagerFactory); // Factory method to create a new SslManagerBundle instance.\n}"}
{"index": 13486, "repo": "spring-messaging-6.0.11", "des": "Abstract base class to resolve method arguments from a named value, e.g.", "code": "public abstract class AbstractNamedValueMethodArgumentResolver extends Object implements SyncHandlerMethodArgumentResolver {\n\tprotected abstract AbstractNamedValueMethodArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueMethodArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected abstract void handleMissingValue(String name, org.springframework.core.MethodParameter parameter, Message<?> message); // Invoked when a value is required, but resolveArgumentInternal(org.springframework.core.MethodParameter, org.springframework.messaging.Message<?>, java.lang.String) returned null and there is no default value.\n\tprotected abstract Object resolveArgumentInternal(org.springframework.core.MethodParameter parameter, Message<?> message, String name); // Resolves the given parameter type and value name into an argument value.\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, Message<?> message); // Resolve the value for the method parameter synchronously.\n}"}
{"index": 10065, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Factory bean helping to construct a command meant to start application master or a container.", "code": "Class LaunchCommandsFactoryBean {\n\tvoid afterPropertiesSet();\n\tString[] getObject();\n\tClass<String[]> getObjectType();\n\tboolean isSingleton();\n\tvoid setArguments(Properties arguments); // Sets the arguments.\n\tvoid setArgumentsList(List<String> argumentsList); // Sets the arguments as a list.\n\tvoid setBeanName(String beanName); // Sets the bean name.\n\tvoid setCommand(String command); // Sets the main command.\n\tvoid setContextFile(String contextFile); // Sets the context file.\n\tvoid setJarFile(String jarFile); // Sets the jar file name.\n\tvoid setOptions(List<String> options); // Sets the options.\n\tvoid setRunner(Class<?> runner); // Sets the runner class.\n\tvoid setRunnerClass(String runnerClass); // Sets the runner class.\n\tvoid setStderr(String stderr); // Sets the stderr.\n\tvoid setStdout(String stdout); // Sets the stdout.\n}"}
{"index": 1732, "repo": "kafka-clients-3.5.0", "des": "Delete result for each ACL binding that matched a delete filter.", "code": "Class AclDeleteResult.AclBindingDeleteResult {\n\tAclBinding aclBinding(); // Returns ACL binding that matched the delete filter.\n\tOptional<ApiException> exception(); // Returns any exception that resulted in failure to delete ACL binding.\n}"}
{"index": 8754, "repo": "hadoop-yarn-common-3.3.6", "des": "File system replace node attribute from node operation.", "code": "Class ReplaceNodeToAttributeLogOp {\n\tint getOpCode();\n\tvoid recover(InputStream is, NodeAttributesManager mgr); // Read and populate StoreOp.\n\tReplaceNodeToAttributeLogOp setAttributes(List<org.apache.hadoop.yarn.server.api.protocolrecords.NodeToAttributes> attrs);\n\tvoid write(OutputStream os, NodeAttributesManager mgr); // Write operation to persistent storage.\n}"}
{"index": 1478, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a Submit-Form action that can be executed in a PDF document.", "code": "Class PDActionSubmitForm {\n\tCOSArray getFields(); // An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry\n\tPDFileSpecification getFile(); // This will get the file in which the destination is located.\n\tint getFlags(); // A set of flags specifying various characteristics of the action\n\tvoid setFields(COSArray array);\n\tvoid setFile(PDFileSpecification fs); // This will set the file in which the destination is located.\n\tvoid setFlags(int flags);\n}"}
{"index": 1112, "repo": "ignite-core-2.15.0", "des": "Factory for @PlatformPluginConfigurationClosure with a unique id.", "code": "Interface PlatformPluginConfigurationClosureFactory {\n\tPlatformPluginConfigurationClosure create(); // Creates configuration instance.\n\tint id(); // Gets the factory id.\n}"}
{"index": 11177, "repo": "wicket-extensions-10.0.0-M1", "des": "A helper implementation of IExportableColumn.", "code": "public abstract class AbstractExportableColumn<T,S> extends AbstractColumn<T,S> implements IExportableColumn<T,S> {\n\tprotected org.apache.wicket.Component createDisplayComponent(String componentId, org.apache.wicket.model.IModel<?> dataModel); // Creates a Component which will be used to display the content of the column in this row.\n\tvoid populateItem(org.apache.wicket.markup.repeater.Item<ICellPopulator<T>> cellItem, String componentId, org.apache.wicket.model.IModel<T> rowModel); // Populated the data for this column in the row into the cellItem.\n}"}
{"index": 13991, "repo": "spring-webflux-6.0.11", "des": "Exceptions that contain actual HTTP response data.", "code": "public class WebClientResponseException extends WebClientException {\n\tstatic WebClientResponseException create(int statusCode, String statusText, org.springframework.http.HttpHeaders headers, byte[] body, Charset charset); // Create WebClientResponseException or an HTTP status specific subclass.\n\tstatic WebClientResponseException create(int statusCode, String statusText, org.springframework.http.HttpHeaders headers, byte[] body, Charset charset, org.springframework.http.HttpRequest request); // Create WebClientResponseException or an HTTP status specific subclass.\n\tstatic WebClientResponseException create(org.springframework.http.HttpStatusCode statusCode, String statusText, org.springframework.http.HttpHeaders headers, byte[] body, Charset charset, org.springframework.http.HttpRequest request); // Create WebClientResponseException or an HTTP status specific subclass.\n\torg.springframework.http.HttpHeaders getHeaders(); // Return the HTTP response headers.\n\tint getRawStatusCode(); // Deprecated. as of 6.0, in favor of getStatusCode()\n\torg.springframework.http.HttpRequest getRequest(); // Return the corresponding request.\n\t<E> E getResponseBodyAs(Class<E> targetType); // Decode the error content to the specified type.\n\t<E> E getResponseBodyAs(org.springframework.core.ParameterizedTypeReference<E> targetType); // Variant of getResponseBodyAs(Class) with ParameterizedTypeReference.\n\tbyte[] getResponseBodyAsByteArray(); // Return the response body as a byte array.\n\tString getResponseBodyAsString(); // Return the response content as a String using the charset of media type for the response, if available, or otherwise falling back on ISO-8859-1.\n\tString getResponseBodyAsString(Charset defaultCharset); // Variant of getResponseBodyAsString() that allows specifying the charset to fall back on, if a charset is not available from the media type for the response.\n\torg.springframework.http.HttpStatusCode getStatusCode(); // Return the HTTP status code value.\n\tString getStatusText(); // Return the HTTP status text.\n\tvoid setBodyDecodeFunction(Function<org.springframework.core.ResolvableType,?> decoderFunction); // Provide a function to find a decoder the given target type.\n}"}
{"index": 1546, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents a PDF Number tree.", "code": "Class PDNumberTreeNode {\n\tprotected COSObjectable convertCOSToPD(COSBase base); // Method to convert the COS value in the number tree to the PD Model object.\n\tprotected PDNumberTreeNode createChildNode(COSDictionary dic); // Create a child node object.\n\tCOSDictionary getCOSObject(); // Convert this standard java object to a COS object.\n\tList<PDNumberTreeNode> getKids(); // Return the children of this node.\n\tInteger getLowerLimit(); // Get the lowest value for a key in the number map.\n\tMap<Integer,COSObjectable> getNumbers(); // This will return a map of numbers.\n\tInteger getUpperLimit(); // Get the highest value for a key in the number map.\n\tObject getValue(Integer index); // Returns the value corresponding to an index in the number tree.\n\tvoid setKids(List<? extends PDNumberTreeNode> kids); // Set the children of this number tree.\n\tvoid setNumbers(Map<Integer,? extends COSObjectable> numbers); // Set the numbers for this node.\n}"}
{"index": 18745, "repo": "lucene-test-framework-9.7.0", "des": "An abstract TokenFilter to make it easier to build graph token filters requiring some lookahead.", "code": "Class LookaheadTokenFilter<T extends LookaheadTokenFilter.Position> {\n\tprotected void afterPosition(); // This is called when all input tokens leaving a given position have been returned.\n\tprotected void insertToken(); // Call this only from within afterPosition, to insert a new token.\n\tprotected abstract T newPosition();\n\tprotected boolean nextToken(); // Call this when you are done looking ahead; it will set the next token to return.\n\tprotected boolean peekToken(); // Returns true if there is a new token.\n\tvoid reset();\n}"}
{"index": 14363, "repo": "wicket-core-10.0.0-M1", "des": "A String resource that can be appended to.", "code": "public class PackageTextTemplate extends TextTemplate {\n\tString getString(); // Retrieves the String resource.\n\tfinal TextTemplate interpolate(Map<String,?> variables); // Interpolates a Map of variables with the content and replaces the content with the result.\n\tvoid setEncoding(String encoding);\n\tvoid setLocale(Locale locale);\n\tvoid setStyle(String style);\n\tvoid setVariation(String variation);\n}"}
{"index": 7483, "repo": "nifi-client-dto-1.22.0", "des": "The NiFi flow starting at a given Process Group.", "code": "Class ProcessGroupFlowDTO {\n\tFlowBreadcrumbEntity getBreadcrumb(); // The breadcrumb for this ProcessGroup flow.\n\tFlowDTO getFlow();\n\tString getId(); // The id for this component.\n\tDate getLastRefreshed();\n\tParameterContextReferenceEntity getParameterContext();\n\tString getParentGroupId();\n\tString getUri(); // The uri for linking to this component in this NiFi.\n\tvoid setBreadcrumb(FlowBreadcrumbEntity breadcrumb);\n\tvoid setFlow(FlowDTO flow);\n\tvoid setId(String id);\n\tvoid setLastRefreshed(Date lastRefreshed);\n\tvoid setParameterContext(ParameterContextReferenceEntity parameterContext);\n\tvoid setParentGroupId(String parentGroupId);\n\tvoid setUri(String uri);\n}"}
{"index": 16164, "repo": "spring-data-cassandra-4.1.2", "des": "Extension to WriteOptions for use with DELETE operations.", "code": "public class DeleteOptions extends WriteOptions {\n\tstatic DeleteOptions.DeleteOptionsBuilder builder(); // Create a new DeleteOptions.DeleteOptionsBuilder.\n\tstatic DeleteOptions empty(); // Create default DeleteOptions.\n\tboolean equals(Object o);\n\tFilter getIfCondition();\n\tboolean isIfExists();\n\tDeleteOptions.DeleteOptionsBuilder mutate(); // Create a new DeleteOptions.DeleteOptionsBuilder to mutate properties of this DeleteOptions.\n}"}
{"index": 6041, "repo": "jackson-databind-2.15.2", "des": "We need a custom deserializer both because ArrayBlockingQueue has no default constructor AND because it has size limit used for constructing underlying storage automatically.", "code": "Class ArrayBlockingQueueDeserializer {\n\tprotected Collection<Object> _deserializeFromArray(JsonParser p, DeserializationContext ctxt, Collection<Object> result0);\n\tprotected Collection<Object> createDefaultInstance(DeserializationContext ctxt);\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Base implementation that does not assume specific type inclusion mechanism.\n\tprotected ArrayBlockingQueueDeserializer withResolved(JsonDeserializer<?> dd, JsonDeserializer<?> vd, TypeDeserializer vtd, NullValueProvider nuller, Boolean unwrapSingle); // Fluent-factory method call to construct contextual instance.\n}"}
{"index": 14135, "repo": "wicket-core-10.0.0-M1", "des": "Encapsulates different aspects of a path.", "code": "public static final class AutoLinkResolver.PathInfo extends Object {\n\tfinal String getAnchor(); // Gets the anchor (e.g.\n\tMarkupContainer getContainer(); // Gets container.\n\tfinal String getExtension(); // Gets extension.\n\tMarkupStream getMarkupStream(); // Gets markup stream\n\tfinal org.apache.wicket.request.mapper.parameter.PageParameters getPageParameters(); // Gets pageParameters.\n\tfinal String getPath(); // Gets path.\n\tfinal String getReference(); // Gets reference.\n\tfinal boolean isAbsolute(); // Gets absolute.\n}"}
{"index": 18211, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Describes a relationship annotated with MapsId", "code": "Interface MapsIdSource {\n\tSingularAttributeSourceToOne getAssociationAttributeSource(); // The attribute source information\n\tjava.lang.String getMappedIdAttributeName(); // Obtain the MapsId.value() naming the attribute within the EmbeddedId mapped by this relationship.\n}"}
{"index": 12214, "repo": "jena-core-4.9.0", "des": "A collection of small utilities for pretty printing nodes, triples and associated things.", "code": "public class PrintUtil extends Object {\n\tstatic String expandQname(String uri); // Expand qnames to URIs.\n\tstatic void init(); // Load built in prefixes.\n\tstatic String print(Object obj); // Default print which just uses tostring\n\tstatic String print(Node node); // Return a simplified print string for a Node.\n\tstatic String print(Triple triple); // Return a simplified print string for a Triple\n\tstatic String print(RDFNode node); // Return a simplified print string for an RDFNode.\n\tstatic String print(Statement stmt); // Return a simplified print string for a statement\n\tstatic String print(TriplePattern triple); // Return a simplified print string for a TriplePattern\n\tstatic void printIndent(PrintWriter out, int indent); // Print an n-space indent to the given output stream\n\tstatic void printOut(Iterator<?> it); // Print all the Triple values from a find iterator.\n\tstatic void registerPrefix(String prefix, String namespace); // Register a new prefix/namespace mapping which will be used to shorten the print strings for resources in known namespaces.\n\tstatic void registerPrefixMap(Map<String,String> map); // Register a set of new prefix/namespace mapping which will be used to shorten the print strings for resources in known namespaces.\n\tstatic void removePrefix(String prefix); // Remove a registered prefix from the table of known short forms\n\tstatic void removePrefixMap(Map<String,String> map); // Remove a set of prefix mappings from the table of known short forms\n}"}
{"index": 9686, "repo": "commons-math3-3.6.1", "des": "A mutable builder for LeastSquaresProblems.", "code": "Class LeastSquaresBuilder {\n\tLeastSquaresProblem build(); // Construct a LeastSquaresProblem from the data in this builder.\n\tLeastSquaresBuilder checker(ConvergenceChecker<LeastSquaresProblem.Evaluation> newChecker); // Configure the convergence checker.\n\tLeastSquaresBuilder checkerPair(ConvergenceChecker<PointVectorValuePair> newChecker); // Configure the convergence checker.\n\tLeastSquaresBuilder lazyEvaluation(boolean newValue); // Configure whether evaluation will be lazy or not.\n\tLeastSquaresBuilder maxEvaluations(int newMaxEvaluations); // Configure the max evaluations.\n\tLeastSquaresBuilder maxIterations(int newMaxIterations); // Configure the max iterations.\n\tLeastSquaresBuilder model(MultivariateJacobianFunction newModel); // Configure the model function.\n\tLeastSquaresBuilder model(MultivariateVectorFunction value, MultivariateMatrixFunction jacobian); // Configure the model function.\n\tLeastSquaresBuilder parameterValidator(ParameterValidator newValidator); // Configure the validator of the model parameters.\n\tLeastSquaresBuilder start(double[] newStart); // Configure the initial guess.\n\tLeastSquaresBuilder start(RealVector newStart); // Configure the initial guess.\n\tLeastSquaresBuilder target(double[] newTarget); // Configure the observed data.\n\tLeastSquaresBuilder target(RealVector newTarget); // Configure the observed data.\n\tLeastSquaresBuilder weight(RealMatrix newWeight); // Configure the weight matrix.\n}"}
{"index": 8501, "repo": "commons-io-2.13.0", "des": "Compares two files using the default File.", "code": "Class DefaultFileComparator {\n\tint compare(File file1, File file2); // Compares the two files using the File.compareTo(File) method.\n\tFile[] sort(File... files); // Sorts an array of files.\n\tList<File> sort(List<File> files); // Sorts a List of files.\n}"}
{"index": 2409, "repo": "spring-session-1.3.5.RELEASE", "des": "Registers the DelegatingFilterProxy to use the springSessionRepositoryFilter before any other registered Filter.", "code": "Class AbstractHttpSessionApplicationInitializer {\n\tprotected void afterSessionRepositoryFilter(ServletContext servletContext); // Invoked after the springSessionRepositoryFilter is added.\n\tprotected void appendFilters(ServletContext servletContext, Filter... filters); // Inserts the provided Filters after existing Filters using default generated names, getSessionDispatcherTypes(), and isAsyncSessionSupported().\n\tprotected void beforeSessionRepositoryFilter(ServletContext servletContext); // Invoked before the springSessionRepositoryFilter is added.\n\tprotected java.lang.String getDispatcherWebApplicationContextSuffix(); // Return the <servlet-name> to use the DispatcherServlet's WebApplicationContext to find the DelegatingFilterProxy or null to use the parent ApplicationContext.\n\tprotected java.util.EnumSet<DispatcherType> getSessionDispatcherTypes(); // Get the DispatcherType for the springSessionRepositoryFilter.\n\tprotected void insertFilters(ServletContext servletContext, Filter... filters); // Inserts the provided Filters before existing Filters using default generated names, getSessionDispatcherTypes(), and isAsyncSessionSupported().\n\tprotected boolean isAsyncSessionSupported(); // Determine if the springSessionRepositoryFilter should be marked as supporting asynch.\n\tvoid onStartup(ServletContext servletContext);\n}"}
{"index": 3146, "repo": "solr-dataimporthandler-8.11.2", "des": "A mock DataSource implementation which can be used for testing.", "code": "Class MockDataSource {\n\tstatic void clearCache();\n\tvoid close(); // Cleans up resources of this DataSource after use.\n\tIterator<Map<String,Object>> getData(String query); // Get records for the given query.The return type depends on the implementation .\n\tvoid init(Context context, Properties initProps); // Initializes the DataSource with the Context and initialization properties.\n\tstatic void setIterator(String query, Iterator<Map<String,Object>> iter);\n}"}
{"index": 7508, "repo": "cassandra-all-4.1.2", "des": "Defines how rows should be grouped for creating aggregates.", "code": "Class AggregationSpecification {\n\tstatic AggregationSpecification.Factory aggregatePkPrefixFactory(ClusteringComparator comparator, int clusteringPrefixSize); // Creates a new Factory instance to create AggregationSpecification that will build aggregates based on primary key columns.\n\tstatic AggregationSpecification.Factory aggregatePkPrefixFactoryWithSelector(ClusteringComparator comparator, int clusteringPrefixSize, Selector.Factory factory);\n\tAggregationSpecification.Kind kind(); // Returns the AggregationSpecification kind.\n\tGroupMaker newGroupMaker(); // Creates a new GroupMaker instance.\n\tabstract GroupMaker newGroupMaker(GroupingState state); // Creates a new GroupMaker instance.\n}"}
{"index": 15473, "repo": "spring-batch-core-5.0.2", "des": "Listener interface for the lifecycle of a chunk.", "code": "public interface ChunkListener extends StepListener {\n\tdefault void afterChunk(ChunkContext context); // Callback after the chunk is executed, outside the transaction.\n\tdefault void afterChunkError(ChunkContext context); // Callback after a chunk has been marked for rollback.\n\tdefault void beforeChunk(ChunkContext context); // Callback before the chunk is executed, but inside the transaction.\n}"}
{"index": 9216, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "An implementation of the ResourceUtilizationTracker that equates resource utilization with the total resource allocated to the container.", "code": "Class AllocationBasedResourceUtilizationTracker {\n\tvoid addContainerResources(Container container); // Add Container's resources to the accumulated Utilization.\n\tContainersMonitor getContainersMonitor();\n\torg.apache.hadoop.yarn.api.records.ResourceUtilization getCurrentUtilization(); // Get the accumulation of totally allocated resources to a container.\n\tboolean hasResourcesAvailable(Container container); // Check if NM has resources available currently to run the container.\n\tvoid subtractContainerResource(Container container); // Subtract Container's resources to the accumulated Utilization.\n}"}
{"index": 12042, "repo": "jena-core-4.9.0", "des": "The entity state interface defines methods that must be implemented by components that store information about entity declarations, as well as by entity validator that will need to validate attributes of type entity.", "code": "public interface EntityState {\n\tboolean isEntityDeclared(String name); // Query method to check if entity with this name was declared.\n\tboolean isEntityUnparsed(String name); // Query method to check if entity is unparsed.\n}"}
{"index": 14658, "repo": "spring-data-commons-3.1.2", "des": "How to propagate setting values that cross collection and map properties.", "code": "public static enum AccessOptions.SetOptions.Propagation extends Enum<AccessOptions.SetOptions.Propagation> {\n\tstatic AccessOptions.SetOptions.Propagation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AccessOptions.SetOptions.Propagation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 12886, "repo": "spring-data-mongodb-4.1.2", "des": "Quick access to documents and RangeWindow range windows.", "code": "public static interface SetWindowFieldsOperation.Windows {\n\tstatic SetWindowFieldsOperation.DocumentWindowBuilder documents(); // Create a document window relative to the position of the current document via a fluent API.\n\tstatic SetWindowFieldsOperation.DocumentWindow documents(Object lower, Object upper); // Create a document window relative to the position of the current document.\n\tstatic SetWindowFieldsOperation.RangeWindowBuilder range(); // Create a range window based on the sort value of the current document via a fluent API.\n\tstatic SetWindowFieldsOperation.RangeWindow range(Object lower, Object upper, SetWindowFieldsOperation.WindowUnit unit); // Create a range window defined based on sort expression.\n}"}
{"index": 17418, "repo": "groovy-4.0.13", "des": "Apply a number of methods to allow convenient Date/Time manipulation,such as:", "code": "public class TimeCategory extends Object {\n\tstatic Duration getDay(Integer self);\n\tstatic Duration getDaylightSavingsOffset(BaseDuration self);\n\tstatic Duration getDaylightSavingsOffset(Date self); // Get the DST offset (if any) for the default locale and the given date.\n\tstatic Duration getDays(Integer self);\n\tstatic TimeDuration getHour(Integer self);\n\tstatic TimeDuration getHours(Integer self);\n\tstatic TimeDuration getMillisecond(Integer self);\n\tstatic TimeDuration getMilliseconds(Integer self);\n\tstatic TimeDuration getMinute(Integer self);\n\tstatic TimeDuration getMinutes(Integer self);\n\tstatic DatumDependentDuration getMonth(Integer self);\n\tstatic DatumDependentDuration getMonths(Integer self);\n\tstatic Duration getRelativeDaylightSavingsOffset(Date self, Date other); // Return a Duration representing the DST difference (if any) between two dates.\n\tstatic TimeDuration getSecond(Integer self);\n\tstatic TimeDuration getSeconds(Integer self);\n\tstatic TimeZone getTimeZone(Date self); // Deprecated.\n\tstatic Duration getWeek(Integer self);\n\tstatic Duration getWeeks(Integer self);\n\tstatic DatumDependentDuration getYear(Integer self);\n\tstatic DatumDependentDuration getYears(Integer self);\n\tstatic Date minus(Date date, BaseDuration duration);\n\tstatic TimeDuration minus(Date lhs, Date rhs); // Subtract one date from the other.\n\tstatic Date plus(Date date, BaseDuration duration);\n}"}
{"index": 7916, "repo": "commons-jcs3-core-3.1", "des": "Intercepts the requests to the underlying ICacheObserver object so that the listeners can be recorded locally for remote connection recovery purposes.", "code": "Class CacheWatchRepairable {\n\t<K,V> void addCacheListener(ICacheListener<K,V> obj); // Adds a feature to the CacheListener attribute of the CacheWatchRepairable object\n\t<K,V> void addCacheListener(String cacheName, ICacheListener<K,V> obj); // Adds a feature to the CacheListener attribute of the CacheWatchRepairable object\n\t<K,V> void removeCacheListener(ICacheListener<K,V> obj); // Unsubscribes from all caches.\n\t<K,V> void removeCacheListener(String cacheName, ICacheListener<K,V> obj); // Tell the server to release us.\n\tvoid setCacheWatch(ICacheObserver cacheWatch); // Replaces the underlying cache watch service and re-attaches all existing listeners to the new cache watch.\n}"}
{"index": 13080, "repo": "spring-aop-6.0.11", "des": "Static utility methods for composing MethodMatchers.", "code": "public abstract class MethodMatchers extends Object {\n\tstatic MethodMatcher intersection(MethodMatcher mm1, MethodMatcher mm2); // Match all methods that both of the given MethodMatchers match.\n\tstatic boolean matches(MethodMatcher mm, Method method, Class<?> targetClass, boolean hasIntroductions); // Apply the given MethodMatcher to the given Method, supporting an IntroductionAwareMethodMatcher (if applicable).\n\tstatic MethodMatcher union(MethodMatcher mm1, MethodMatcher mm2); // Match all methods that either (or both) of the given MethodMatchers matches.\n}"}
{"index": 11831, "repo": "spring-kafka-3.0.9", "des": "A AcknowledgingConsumerAwareMessageListener adapter that implements converting received ConsumerRecord using specified MessageConverter and then passes result to specified MessageListener.", "code": "public class ConvertingMessageListener<V> extends Object implements DelegatingMessageListener<MessageListener>, AcknowledgingConsumerAwareMessageListener<Object,Object> {\n\tMessageListener getDelegate(); // Return the delegate.\n\tvoid onMessage(org.apache.kafka.clients.consumer.ConsumerRecord receivedRecord, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer consumer); // Invoked with data from kafka and provides access to the Consumer.\n\tvoid setKafkaHeaderMapper(KafkaHeaderMapper headerMapper); // Set a KafkaHeaderMapper.\n\tvoid setMessageConverter(org.springframework.messaging.converter.MessageConverter messageConverter); // Set a MessageConverter.\n}"}
{"index": 7458, "repo": "mahout-math-0.13.0", "des": "Abstract class encapsulating different algorithms that perform the Vector operations assign().", "code": "Class VectorBinaryAssign {\n\tabstract Vector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tstatic Vector assignBest(Vector x, Vector y, DoubleDoubleFunction f); // This is the method that should be used when assigning.\n\tabstract double estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tstatic VectorBinaryAssign getBestOperation(Vector x, Vector y, DoubleDoubleFunction f); // The best operation is the least expensive valid one.\n\tabstract boolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 15365, "repo": "spring-boot-3.1.1", "des": "A bundle of trust material that can be used to establish an SSL connection.", "code": "public interface SslBundle {\n\tdefault SSLContext createSslContext(); // Factory method to create a new SSLContext for this bundle.\n\tSslBundleKey getKey(); // Return a reference to the key that should be used for this bundle or SslBundleKey.NONE.\n\tSslManagerBundle getManagers(); // Return the SslManagerBundle that can be used to access this bundle's key and trust managers.\n\tSslOptions getOptions(); // Return SslOptions that should be applied when establishing the SSL connection.\n\tString getProtocol(); // Return the protocol to use when establishing the connection.\n\tSslStoreBundle getStores(); // Return the SslStoreBundle that can be used to access this bundle's key and trust stores.\n\tstatic SslBundle of(SslStoreBundle stores); // Factory method to create a new SslBundle instance.\n\tstatic SslBundle of(SslStoreBundle stores, SslBundleKey key); // Factory method to create a new SslBundle instance.\n\tstatic SslBundle of(SslStoreBundle stores, SslBundleKey key, SslOptions options); // Factory method to create a new SslBundle instance.\n\tstatic SslBundle of(SslStoreBundle stores, SslBundleKey key, SslOptions options, String protocol); // Factory method to create a new SslBundle instance.\n\tstatic SslBundle of(SslStoreBundle stores, SslBundleKey key, SslOptions options, String protocol, SslManagerBundle managers); // Factory method to create a new SslBundle instance.\n}"}
{"index": 8087, "repo": "commons-compress-1.23.0", "des": "A ZIP output stream that is optimized for multi-threaded scatter/gather construction of ZIP files.", "code": "Class ScatterZipOutputStream {\n\tvoid addArchiveEntry(ZipArchiveEntryRequest zipArchiveEntryRequest); // Adds an archive entry to this scatter stream.\n\tvoid close(); // Closes this stream, freeing all resources involved in the creation of this stream.\n\tstatic ScatterZipOutputStream fileBased(File file); // Creates a ScatterZipOutputStream with default compression level that is backed by a file\n\tstatic ScatterZipOutputStream fileBased(File file, int compressionLevel); // Creates a ScatterZipOutputStream that is backed by a file\n\tstatic ScatterZipOutputStream pathBased(Path path); // Creates a ScatterZipOutputStream with default compression level that is backed by a file\n\tstatic ScatterZipOutputStream pathBased(Path path, int compressionLevel); // Creates a ScatterZipOutputStream that is backed by a file\n\tvoid writeTo(ZipArchiveOutputStream target); // Writes the contents of this scatter stream to a target archive.\n\tScatterZipOutputStream.ZipEntryWriter zipEntryWriter(); // Gets a ZIP entry writer for this scatter stream.\n}"}
{"index": 8102, "repo": "commons-compress-1.23.0", "des": "Utility class for handling time-related types and conversions.", "code": "Class TimeUtils {\n\tstatic boolean isUnixTime(FileTime time); // Tests whether a FileTime can be safely represented in the standard UNIX time.\n\tstatic boolean isUnixTime(long seconds); // Tests whether a given number of seconds (since Epoch) can be safely represented in the standard UNIX time.\n\tstatic Date ntfsTimeToDate(long ntfsTime); // Converts NTFS time (100 nanosecond units since 1 January 1601) to Java time.\n\tstatic FileTime ntfsTimeToFileTime(long ntfsTime); // Converts NTFS time (100-nanosecond units since 1 January 1601) to a FileTime.\n\tstatic Date toDate(FileTime fileTime); // Converts FileTime to a Date.\n\tstatic FileTime toFileTime(Date date); // Converts Date to a FileTime.\n\tstatic long toNtfsTime(Date date); // Converts a Date to NTFS time.\n\tstatic long toNtfsTime(FileTime fileTime); // Converts a FileTime to NTFS time (100-nanosecond units since 1 January 1601).\n\tstatic long toNtfsTime(long javaTime); // Converts Java time (milliseconds since Epoch) to NTFS time.\n\tstatic long toUnixTime(FileTime fileTime); // Converts FileTime to standard UNIX time.\n\tstatic FileTime truncateToHundredNanos(FileTime fileTime); // Truncates a FileTime to 100-nanosecond precision.\n\tstatic FileTime unixTimeToFileTime(long time); // Converts standard UNIX time (in seconds, UTC/GMT) to FileTime.\n}"}
{"index": 8284, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents the detail element in a SOAP fault.", "code": "Interface SoapFaultDetail {\n\tSoapFaultDetailElement addFaultDetailElement(QName name); // Adds a new SoapFaultDetailElement with the specified qualified name to this detail.\n\tIterator<SoapFaultDetailElement> getDetailEntries(); // Gets an iterator over all of the SoapFaultDetailElements in this detail.\n\tResult getResult(); // Returns a Result that represents the concents of the detail.\n}"}
{"index": 8127, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for asynchronous standalone, server-side transport objects.", "code": "Class AbstractAsyncStandaloneMessageReceiver {\n\tvoid afterPropertiesSet(); // Calls AbstractStandaloneMessageReceiver.activate() when the BeanFactory initializes the receiver instance.\n\tprotected org.springframework.core.task.TaskExecutor createDefaultTaskExecutor(); // Create a default TaskExecutor.\n\tprotected void execute(Runnable runnable); // Executes the given Runnable via this receiver's TaskExecutor.\n\tvoid setBeanName(String beanName);\n\tvoid setTaskExecutor(org.springframework.core.task.TaskExecutor taskExecutor); // Set the Spring TaskExecutor to use for running the listener threads.\n}"}
{"index": 6337, "repo": "mina-core-3.0.0-M2", "des": "An helper class used to manage everything related to SSL/TLS establishment and management.", "code": "Class SslHelper {\n\tvoid init(); // Initialize the SSL handshake.\n\tvoid processRead(AbstractIoSession session, ByteBuffer readBuffer); // Process a read ByteBuffer over a secured connection, or during the SSL/TLS Handshake.\n}"}
{"index": 3392, "repo": "hadoop-azure-3.3.6", "des": "The TracingContext class to correlate Store requests using unique identifiers and resources common to requests (e.", "code": "Class TracingContext {\n\tvoid constructHeader(AbfsHttpOperation httpOperation, String previousFailure); // Concatenate all identifiers separated by (:) into a string and set into X_MS_CLIENT_REQUEST_ID header of the http operation\n\tString getHeader(); // Return header representing the request associated with the tracingContext\n\tint getRetryCount();\n\tvoid setListener(Listener listener);\n\tvoid setOperation(FSOperationType operation);\n\tvoid setPrimaryRequestID();\n\tvoid setRetryCount(int retryCount);\n\tvoid setStreamID(String stream);\n\tstatic String validateClientCorrelationID(String clientCorrelationID);\n}"}
{"index": 12004, "repo": "jena-core-4.9.0", "des": "A pruned (and slightly stewed) version of Map, containing just those operations required by NodeToTriplesMaps.", "code": "public interface BunchMap {\n\tvoid clear(); // Clear this map: all entries are removed.\n\tTripleBunch get(Object key); // Answer the TripleBunch associated with key, or null if there isn't one.\n\tTripleBunch getOrSet(Object key, Function<Object,TripleBunch> setter); // Get the key and return the value found there; if nothing, calculate the value and insert.\n\tIterator<TripleBunch> iterator();\n\tExtendedIterator<Object> keyIterator(); // Answer an iterator over all the keys in this map.\n\tvoid put(Object key, TripleBunch value); // Associate key and value.\n\tvoid remove(Object key); // Remove any association for key; get on this key will now deliver null.\n\tlong size(); // The number of items in the bunch.\n\tSpliterator<TripleBunch> spliterator();\n}"}
{"index": 11903, "repo": "spring-kafka-3.0.9", "des": "A KafkaTemplate that routes messages based on the topic name.", "code": "public class RoutingKafkaTemplate extends KafkaTemplate<Object,Object> {\n\t<T> T execute(KafkaOperations.ProducerCallback<Object,Object,T> callback); // Execute some arbitrary operation(s) on the producer and return the result.\n\t<T> T executeInTransaction(KafkaOperations.OperationsCallback<Object,Object,T> callback); // Execute some arbitrary operation(s) on the operations and return the result.\n\tvoid flush(); // Flush the producer.\n\tProducerFactory<Object,Object> getProducerFactory(); // Return the producer factory used by this template.\n\tProducerFactory<Object,Object> getProducerFactory(String topic); // Return the producer factory used by this template based on the topic.\n\tMap<org.apache.kafka.common.MetricName,? extends org.apache.kafka.common.Metric> metrics(); // See Producer.metrics().\n\tvoid sendOffsetsToTransaction(Map<org.apache.kafka.common.TopicPartition,org.apache.kafka.clients.consumer.OffsetAndMetadata> offsets, org.apache.kafka.clients.consumer.ConsumerGroupMetadata groupMetadata); // When running in a transaction, send the consumer offset(s) to the transaction.\n}"}
{"index": 18269, "repo": "tomcat-api-10.1", "des": "An output stream which will retain data in memory until a specified threshold is reached, and only then commit it to disk.", "code": "Class DeferredFileOutputStream {\n\tvoid close(); // Closes underlying output stream, and mark this as closed\n\tbyte[] getData(); // Returns the data for this output stream as an array of bytes, assuming that the data has been retained in memory.\n\tFile getFile(); // Returns either the output file specified in the constructor or the temporary file created or null.\n\tprotected OutputStream getStream(); // Returns the current output stream.\n\tboolean isInMemory(); // Determines whether or not the data for this output stream has been retained in memory.\n\tprotected void thresholdReached(); // Switches the underlying output stream from a memory based stream to one that is backed by disk.\n}"}
{"index": 7881, "repo": "nifi-framework-core-api-1.22.0", "des": "A DataValve regulates the flow of FlowFiles between Process Groups.", "code": "Interface DataValve {\n\tvoid closeFlowIntoGroup(ProcessGroup destinationGroup); // Closes the valve such that data is no longer allowed to flow into the Process Group.\n\tvoid closeFlowOutOfGroup(ProcessGroup sourceGroup); // Closes the valve such that data is no longer allowed to flow out of the Process Group.\n\tDataValveDiagnostics getDiagnostics();\n\tboolean tryOpenFlowIntoGroup(ProcessGroup destinationGroup); // Attempts to open the valve such that data may flow into the given Process Group.\n\tboolean tryOpenFlowOutOfGroup(ProcessGroup sourceGroup); // Attempts to open the valve such that data may flow out of the given Process Group.\n}"}
{"index": 15579, "repo": "spring-security-core-6.1.2", "des": "An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.", "code": "public abstract class AbstractJaasAuthenticationProvider extends Object implements AuthenticationProvider, org.springframework.context.ApplicationEventPublisherAware, org.springframework.beans.factory.InitializingBean, org.springframework.context.ApplicationListener<SessionDestroyedEvent> {\n\tvoid afterPropertiesSet(); // Validates the required properties are set.\n\tAuthentication authenticate(Authentication auth); // Attempts to login the user given the Authentication objects principal and credential\n\tprotected abstract LoginContext createLoginContext(CallbackHandler handler); // Creates the LoginContext to be used for authentication.\n\tprotected org.springframework.context.ApplicationEventPublisher getApplicationEventPublisher();\n\tprotected void handleLogout(SessionDestroyedEvent event); // Handles the logout by getting the security contexts for the destroyed session and invoking LoginContext.logout() for any which contain a JaasAuthenticationToken.\n\tvoid onApplicationEvent(SessionDestroyedEvent event);\n\tprotected void publishFailureEvent(UsernamePasswordAuthenticationToken token, AuthenticationException ase); // Publishes the JaasAuthenticationFailedEvent.\n\tprotected void publishSuccessEvent(UsernamePasswordAuthenticationToken token); // Publishes the JaasAuthenticationSuccessEvent.\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n\tvoid setAuthorityGranters(AuthorityGranter[] authorityGranters); // Set the AuthorityGranters that should be consulted for role names to be granted to the Authentication.\n\tvoid setCallbackHandlers(JaasAuthenticationCallbackHandler[] callbackHandlers); // Set the JAASAuthentcationCallbackHandler array to handle callback objects generated by the LoginContext.login method.\n\tvoid setLoginContextName(String loginContextName); // Set the loginContextName, this name is used as the index to the configuration specified in the loginConfig property.\n\tvoid setLoginExceptionResolver(LoginExceptionResolver loginExceptionResolver);\n\tboolean supports(Class<?> aClass); // Returns true if this AuthenticationProvider supports the indicated Authentication object.\n}"}
{"index": 5512, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "Meta data about the current state of the mailbox.", "code": "Interface MessageManager.MetaData {\n\tlong countRecent(); // Gets the number of recent messages.\n\tMailboxACL getACL(); // Returns the ACL concerning this mailbox.\n\tMessageUid getFirstUnseen(); // Gets the UID of the first unseen message.\n\tlong getHighestModSeq(); // Return the highest mod-sequence for the mailbox.\n\tlong getMessageCount(); // Gets the number of messages that this mailbox contains.\n\tjavax.mail.Flags getPermanentFlags(); // Gets the flags which can be stored by this mailbox.\n\tList<MessageUid> getRecent(); // Gets the UIDs of recent messages if requested or an empty List otherwise.\n\tMessageUid getUidNext(); // Gets the next UID predicted.\n\tlong getUidValidity(); // Gets the UIDVALIDITY.\n\tlong getUnseenCount(); // Gets the number of unseen messages contained in this mailbox.\n\tboolean isModSeqPermanent(); // Return true if the mailbox does store the mod-sequences in a permanent way\n\tboolean isWriteable(); // Is this mailbox writable?\n}"}
{"index": 7299, "repo": "calcite-core-1.34.0", "des": "Definition of the \"TRANSLATE\" built-in SQL function that takes 3 arguments.", "code": "Class SqlTranslate3Function {\n\tString getSignatureTemplate(int operandsCount); // Returns a template describing how the operator signature is to be built.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n}"}
{"index": 10452, "repo": "groovy-all-4.0.13", "des": "Represents two expressions and an operation", "code": "public class BinaryExpression extends Expression {\n\tExpression getLeftExpression();\n\tToken getOperation();\n\tExpression getRightExpression();\n\tString getText();\n\tboolean isSafe();\n\tstatic BinaryExpression newAssignmentExpression(Variable variable, Expression rhs); // Creates an assignment expression in which the specified expression is written into the specified variable name.\n\tstatic BinaryExpression newInitializationExpression(String variable, ClassNode type, Expression rhs); // Creates variable initialization expression in which the specified expression is written into the specified variable name.\n\tvoid setLeftExpression(Expression leftExpression);\n\tvoid setRightExpression(Expression rightExpression);\n\tvoid setSafe(boolean safe);\n\tExpression transformExpression(ExpressionTransformer transformer); // Return a copy of the expression calling the transformer on any nested expressions\n\tvoid visit(GroovyCodeVisitor visitor);\n}"}
{"index": 8118, "repo": "commons-compress-1.23.0", "des": "List of known compression methods Many of these methods are currently not supported by commons compress.", "code": "Enum ZipMethod {\n\tint getCode(); // the code of the compression method.\n\tstatic ZipMethod getMethodByCode(int code); // returns the ZipMethod for the given code or null if the method is not known.\n\tstatic ZipMethod valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ZipMethod[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16543, "repo": "spring-batch-infrastructure-5.0.2", "des": "Item reader for reading XML input based on StAX.", "code": "public class StaxEventItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Ensure that all required dependencies for the ItemReader to run are provided after all properties have been set.\n\tprotected void doClose(); // Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doOpen(); // Open resources necessary to start reading input.\n\tprotected T doRead(); // Move to next fragment and map it to item.\n\tprotected boolean isFragmentRootElementName(QName name);\n\tprotected void jumpToItem(int itemIndex); // Move to the given item index.\n\tprotected boolean moveCursorToNextFragment(XMLEventReader reader); // Responsible for moving the cursor before the StartElement of the fragment root.\n\tvoid setEncoding(String encoding); // Set encoding to be used for the input file.\n\tvoid setFragmentRootElementName(String fragmentRootElementName);\n\tvoid setFragmentRootElementNames(String[] fragmentRootElementNames);\n\tvoid setResource(org.springframework.core.io.Resource resource);\n\tvoid setStrict(boolean strict); // In strict mode the reader will throw an exception on AbstractItemCountingItemStreamItemReader.open(org.springframework.batch.item.ExecutionContext) if the input resource does not exist.\n\tvoid setUnmarshaller(org.springframework.oxm.Unmarshaller unmarshaller);\n\tvoid setXmlInputFactory(XMLInputFactory xmlInputFactory); // Set the XMLInputFactory.\n}"}
{"index": 3007, "repo": "tink-1.10.0", "des": "ChaCha20Poly1305 AEAD construction, as described in RFC 8439, section 2.", "code": "Class InsecureNonceChaCha20Poly1305 {\n\tbyte[] decrypt(byte[] nonce, byte[] ciphertext, byte[] associatedData); // Decrypts ciphertext with the following format: actual_ciphertext || tag.\n\tbyte[] decrypt(ByteBuffer ciphertext, byte[] nonce, byte[] associatedData); // Decrypts ciphertext with the following format: actual_ciphertext || tag.\n\tbyte[] encrypt(byte[] nonce, byte[] plaintext, byte[] associatedData); // Encrypts plaintext with Poly1305 authentication based on associatedData.\n\tvoid encrypt(ByteBuffer output, byte[] nonce, byte[] plaintext, byte[] associatedData); // Encrypts plaintext with Poly1305 authentication based on associatedData.\n}"}
{"index": 14156, "repo": "wicket-core-10.0.0-M1", "des": "Checks an object tree during serialization for wrong state by delegating the work to the used IObjectCheckers.", "code": "public class CheckingObjectOutputStream extends ObjectOutputStream {\n\tvoid close();\n\tstatic boolean isAvailable(); // Gets whether we can execute the tests.\n\tvoid reset();\n\tprotected final String toPrettyPrintedStack(String type); // Dump with indentation.\n\tprotected final void writeObjectOverride(Object obj);\n}"}
{"index": 9391, "repo": "hadoop-yarn-api-3.3.6", "des": "This encapsulates a Rejected SchedulingRequest.", "code": "Class RejectedSchedulingRequest {\n\tabstract RejectionReason getReason(); // Get Rejection Reason.\n\tabstract SchedulingRequest getRequest(); // Get the Rejected Scheduling Request.\n\tstatic RejectedSchedulingRequest newInstance(RejectionReason reason, SchedulingRequest request); // Create new RejectedSchedulingRequest.\n\tabstract void setReason(RejectionReason reason); // Set Rejection Reason.\n\tabstract void setRequest(SchedulingRequest request); // Set the SchedulingRequest.\n}"}
{"index": 9422, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by the ApplicationMaster to the NodeManager to stop containers.", "code": "Class StopContainersRequest {\n\tabstract List<ContainerId> getContainerIds(); // Get the ContainerIds of the containers to be stopped.\n\tstatic StopContainersRequest newInstance(List<ContainerId> containerIds);\n\tabstract void setContainerIds(List<ContainerId> containerIds); // Set the ContainerIds of the containers to be stopped.\n}"}
{"index": 17373, "repo": "groovy-4.0.13", "des": "Strategy for resolving a relationship property name.", "code": "public static interface ObjectGraphBuilder.RelationNameResolver {\n\tString resolveChildRelationName(String parentName, Object parent, String childName, Object child); // Returns the mapping name of child -> parent\n\tString resolveParentRelationName(String parentName, Object parent, String childName, Object child); // Returns the mapping name of parent -> child\n}"}
{"index": 5380, "repo": "druid-processing-26.0.0", "des": "PartitionsSpec describes the secondary partitioning method for data ingestion.", "code": "Interface PartitionsSpec {\n\tString getForceGuaranteedRollupIncompatiblityReason();\n\tInteger getMaxRowsPerSegment(); // Returns the max number of rows per segment.\n\tSecondaryPartitionType getType();\n\tstatic boolean isEffectivelyNull(Integer val); // '-1' regarded as null for some historical reason.\n\tstatic boolean isEffectivelyNull(Long val); // '-1' regarded as null for some historical reason.\n\tdefault boolean isForceGuaranteedRollupCompatible();\n\tdefault boolean isForceGuaranteedRollupCompatibleType();\n\tboolean needsDeterminePartitions(boolean useForHadoopTask); // Returns true if this partitionsSpec needs to determine the number of partitions to start data ingestion.\n\tstatic Integer resolveHistoricalNullIfNeeded(Integer val);\n}"}
{"index": 7156, "repo": "calcite-core-1.34.0", "des": "Table function that returns completion hints for a given SQL statement.", "code": "Class SqlAdvisorGetHintsFunction2 {\n\tstatic org.apache.calcite.linq4j.Enumerable<SqlAdvisorHint2> getCompletionHints(SqlAdvisor advisor, String sql, int pos); // Returns completion hints for a given SQL statement.\n\tType getElementType(List<? extends Object> arguments); // Returns the row type of the table yielded by this function when applied to given arguments.\n\tCallImplementor getImplementor(); // Returns implementor that translates the function to linq4j expression.\n\tList<FunctionParameter> getParameters(); // Returns the parameters of this function.\n\tRelDataType getRowType(RelDataTypeFactory typeFactory, List<? extends Object> arguments); // Returns the record type of the table yielded by this function when applied to given arguments.\n}"}
{"index": 17381, "repo": "groovy-4.0.13", "des": "Used to provide custom property handling when getting, setting or initializing properties.", "code": "@Incubating public abstract class PropertyHandler extends Object {\n\tstatic PropertyHandler createPropertyHandler(AbstractASTTransformation xform, GroovyClassLoader loader, ClassNode cNode);\n\tStatement createPropGetter(PropertyNode pNode); // Create the getter block used when reading the property including any defensive copying.\n\tabstract Statement createPropInit(AbstractASTTransformation xform, AnnotationNode anno, ClassNode cNode, PropertyNode pNode, Parameter namedArgMap); // Create a statement that will initialize the property including any defensive copying.\n\tStatement createPropSetter(PropertyNode pNode); // Create the setter block used when setting the property.\n\tprotected boolean isValidAttribute(AbstractASTTransformation xform, AnnotationNode anno, String memberName);\n\tabstract boolean validateAttributes(AbstractASTTransformation xform, AnnotationNode anno);\n\tboolean validateProperties(AbstractASTTransformation xform, BlockStatement body, ClassNode cNode, List<PropertyNode> props);\n}"}
{"index": 11753, "repo": "bedrock-core-7.0.2", "des": "A DeferredInvoke is a Deferred that represents a request to invoke a non-void, typically non-static method on a Deferred.", "code": "public class DeferredInvoke<T> extends Object implements Deferred<T> {\n\tT get(); // Attempts to obtain the underlying object.\n\tClass<T> getDeferredClass(); // Obtains the Class of the Deferred reference.\n\tprotected Object invoke(Method method, Object object, Object... args);\n}"}
{"index": 8688, "repo": "avro-1.11.2", "des": "a ClassCastException with extra fields used to trace back the path to a bad value through an object graph.", "code": "Class TracingClassCastException {\n\tClassCastException getCause();\n\tClassCastException summarize(Schema root); // produces a user-facing exception to be thrown back out to user code\n\tvoid tracePath(PathElement step); // appends a path element to the trace.\n}"}
{"index": 18553, "repo": "hibernate-core-5.6.15.Final", "des": "Context for determining the implicit name of an entity's identifier column.", "code": "Interface ImplicitIdentifierColumnNameSource {\n\tEntityNaming getEntityNaming(); // Access the entity name information\n\tAttributePath getIdentifierAttributePath(); // Access to the AttributePath for the entity's identifier attribute.\n}"}
{"index": 15350, "repo": "spring-boot-3.1.1", "des": "UriTemplateHandler to set the root for URI that starts with '/'.", "code": "public class RootUriTemplateHandler extends Object implements org.springframework.web.util.UriTemplateHandler {\n\tstatic RootUriTemplateHandler addTo(org.springframework.web.client.RestTemplate restTemplate, String rootUri); // Add a RootUriTemplateHandler instance to the given RestTemplate.\n\tURI expand(String uriTemplate, Object... uriVariables);\n\tURI expand(String uriTemplate, Map<String,?> uriVariables);\n\tString getRootUri();\n\tRootUriTemplateHandler withHandlerWrapper(Function<org.springframework.web.util.UriTemplateHandler,org.springframework.web.util.UriTemplateHandler> wrapper); // Derives a new RootUriTemplateHandler from this one, wrapping its delegate UriTemplateHandler by applying the given wrapper.\n}"}
{"index": 8423, "repo": "hadoop-aws-3.3.6", "des": "Configures network settings when communicating with AWS services.", "code": "Class NetworkBinding {\n\tstatic void bindSSLChannelMode(org.apache.hadoop.conf.Configuration conf, com.amazonaws.ClientConfiguration awsConf); // Configures the SSLConnectionSocketFactory used by the AWS SDK.\n\tstatic String fixBucketRegion(String region); // Given an S3 bucket region as returned by a bucket location query, fix it into a form which can be used by other AWS commands.\n\tstatic void logDnsLookup(org.apache.hadoop.conf.Configuration conf); // Log the dns address associated with s3 endpoint.\n}"}
{"index": 12727, "repo": "spring-data-mongodb-4.1.2", "des": "A value object for nodes in an expression.", "code": "public class ExpressionNode extends Object implements Iterable<ExpressionNode> {\n\tprotected ExpressionNode from(SpelNode node); // Creates a new ExpressionNode from the given SpelNode.\n\tstatic ExpressionNode from(SpelNode node, ExpressionState state); // Factory method to create ExpressionNode's according to the given SpelNode and ExpressionState.\n\tExpressionNode getChild(int index); // Returns the child ExpressionNode with the given index.\n\tString getName(); // Returns the name of the ExpressionNode.\n\tObject getValue(); // Returns the value of the current node.\n\tboolean hasChildren(); // Returns whether the current node has child nodes.\n\tboolean hasfirstChildNotOfType(Class<?> type); // Returns whether the ExpressionNode has a first child node that is not of the given type.\n\tboolean isLiteral(); // Returns whether the ExpressionNode is a literal.\n\tboolean isLogicalOperator(); // Returns whether the ExpressionNode is a logical conjunction operation like &&, ||.\n\tboolean isMathematicalOperation(); // Returns whether the ExpressionNode is a mathematical operation.\n\tboolean isOfType(Class<?> type); // Returns whether the current ExpressionNode is backed by the given type.\n\tIterator<ExpressionNode> iterator();\n}"}
{"index": 8996, "repo": "hbase-server-3.0.0-alpha-4", "des": "The procedure to Merge regions in a table.", "code": "Class MergeTableRegionsProcedure {\n\tprotected boolean abort(MasterProcedureEnv env);\n\tprotected Procedure.LockState acquireLock(MasterProcedureEnv env);\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected StateMachineProcedure.Flow executeFromState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.MergeTableRegionsState state);\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.MergeTableRegionsState getInitialState();\n\tprotected ProcedureMetrics getProcedureMetrics(MasterProcedureEnv env);\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.MergeTableRegionsState getState(int stateId);\n\tprotected int getStateId(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.MergeTableRegionsState state);\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tprotected boolean holdLock(MasterProcedureEnv env);\n\tprotected boolean isRollbackSupported(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.MergeTableRegionsState state);\n\tprotected void releaseLock(MasterProcedureEnv env);\n\tprotected void rollbackState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.MergeTableRegionsState state); // To rollback MergeTableRegionsProcedure, two AssignProcedures are asynchronously submitted for each region to be merged (rollback doesn't wait on the completion of the AssignProcedures) .\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tvoid toStringClassDetails(StringBuilder sb);\n}"}
{"index": 12749, "repo": "spring-data-mongodb-4.1.2", "des": "Upload descriptor for a GridFS file upload.", "code": "public class GridFsUpload<ID> extends Object implements GridFsObject<ID,InputStream> {\n\tstatic GridFsUpload.GridFsUploadBuilder<org.bson.types.ObjectId> fromStream(InputStream stream); // Create a new instance of GridFsUpload for the given InputStream.\n\tInputStream getContent(); // The actual file content.\n\tID getFileId(); // The GridFSFile.getId() value converted into its simple java type.\n\tString getFilename(); // The filename.\n\tGridFsObject.Options getOptions(); // Additional information like file metadata (eg. contentType).\n}"}
{"index": 2293, "repo": "hive-exec-4.0.0-alpha-2", "des": "UnparseTranslator is used to \"unparse\" objects such as views when their definition is stored.", "code": "Class UnparseTranslator {\n\tvoid addCopyTranslation(ASTNode targetNode, ASTNode sourceNode); // Register a \"copy\" translation in which a node will be translated into whatever the translation turns out to be for another node (after previously registered translations have already been performed).\n\tvoid addDefaultValueTranslation(ASTNode exprNode, String defaultValue);\n\tvoid addIdentifierTranslation(ASTNode identifier); // Register a translation for an identifier.\n\tvoid addTableNameTranslation(ASTNode tableName, String currentDatabaseName); // Register a translation for an tabName.\n\tvoid clear();\n}"}
{"index": 13519, "repo": "spring-messaging-6.0.11", "des": "Strategy interface for resolving method parameters into argument values in the context of a given Message.", "code": "public interface HandlerMethodArgumentResolver {\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message); // Resolves a method parameter into an argument value from a given message.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 6411, "repo": "exoplayer-core-2.9.6", "des": "Utility methods for parsing Dolby TrueHD and (E-)AC-3 syncframes.", "code": "Class Ac3Util {\n\tstatic int findTrueHdSyncframeOffset(java.nio.ByteBuffer buffer); // Returns the offset relative to the buffer's position of the start of a TrueHD syncframe, or C.INDEX_UNSET if no syncframe was found.\n\tstatic int getAc3SyncframeAudioSampleCount(); // Returns the number of audio samples in an AC-3 syncframe.\n\tstatic Format parseAc3AnnexFFormat(ParsableByteArray data, java.lang.String trackId, java.lang.String language, DrmInitData drmInitData); // Returns the AC-3 format given data containing the AC3SpecificBox according to ETSI TS 102 366 Annex F.\n\tstatic Ac3Util.SyncFrameInfo parseAc3SyncframeInfo(ParsableBitArray data); // Returns (E-)AC-3 format information given data containing a syncframe.\n\tstatic int parseAc3SyncframeSize(byte[] data); // Returns the size in bytes of the given (E-)AC-3 syncframe.\n\tstatic Format parseEAc3AnnexFFormat(ParsableByteArray data, java.lang.String trackId, java.lang.String language, DrmInitData drmInitData); // Returns the E-AC-3 format given data containing the EC3SpecificBox according to ETSI TS 102 366 Annex F.\n\tstatic int parseEAc3SyncframeAudioSampleCount(java.nio.ByteBuffer buffer); // Reads the number of audio samples represented by the given E-AC-3 syncframe.\n\tstatic int parseTrueHdSyncframeAudioSampleCount(byte[] syncframe); // Returns the number of audio samples represented by the given TrueHD syncframe, or 0 if the buffer is not the start of a syncframe.\n\tstatic int parseTrueHdSyncframeAudioSampleCount(java.nio.ByteBuffer buffer, int offset); // Reads the number of audio samples represented by a TrueHD syncframe.\n}"}
{"index": 17856, "repo": "spring-web-6.0.11", "des": "An HttpMessageConverter that reads and writes com.google.protobuf.Messages using Google Protocol Buffers.", "code": "public class ProtobufHttpMessageConverter extends AbstractHttpMessageConverter<com.google.protobuf.Message> {\n\tprotected boolean canWrite(MediaType mediaType); // Returns true if the given media type includes any of the supported media types.\n\tprotected MediaType getDefaultContentType(com.google.protobuf.Message message); // Returns the default content type for the given type.\n\tprotected com.google.protobuf.Message readInternal(Class<? extends com.google.protobuf.Message> clazz, HttpInputMessage inputMessage); // Abstract template method that reads the actual object.\n\tprotected boolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tprotected void writeInternal(com.google.protobuf.Message message, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 1812, "repo": "kafka-clients-3.5.0", "des": "A sensor applies a continuous sequence of numerical values to a set of associated metrics.", "code": "Class Sensor {\n\tboolean add(CompoundStat stat); // Register a compound statistic with this sensor with no config override\n\tboolean add(CompoundStat stat, MetricConfig config); // Register a compound statistic with this sensor which yields multiple measurable quantities (like a histogram)\n\tboolean add(MetricName metricName, MeasurableStat stat); // Register a metric with this sensor\n\tboolean add(MetricName metricName, MeasurableStat stat, MetricConfig config); // Register a metric with this sensor\n\tvoid checkQuotas(); // Check if we have violated our quota for any metric that has a configured quota\n\tvoid checkQuotas(long timeMs);\n\tboolean hasExpired(); // Return true if the Sensor is eligible for removal due to inactivity.\n\tboolean hasMetrics(); // Return if metrics were registered with this sensor.\n\tString name(); // The name this sensor is registered with.\n\tvoid record(); // Record an occurrence, this is just short-hand for record(1.0)\n\tvoid record(double value); // Record a value with this sensor\n\tvoid record(double value, long timeMs); // Record a value at a known time.\n\tvoid record(double value, long timeMs, boolean checkQuotas); // Record a value at a known time.\n\tboolean shouldRecord();\n}"}
{"index": 350, "repo": "phoenix-core-5.1.3", "des": "Node representing the greater than operator (>) in SQL.", "code": "Class GreaterThanParseNode {\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getFilterOp(); // Return the comparison operator associated with the given comparison expression node\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getInvertFilterOp(); // Return the inverted operator for the CompareOp\n}"}
{"index": 17371, "repo": "groovy-4.0.13", "des": "Helper class for processing Groovy numeric literals.", "code": "public class Numbers extends Object {\n\tstatic boolean isDigit(char c); // Returns true if the specified character is a base-10 digit.\n\tstatic boolean isHexDigit(char c); // Returns true if the specified character is a base-16 digit.\n\tstatic boolean isNumericTypeSpecifier(char c, boolean isDecimal); // Returns true if the specified character is a valid type specifier for a numeric value.\n\tstatic boolean isOctalDigit(char c); // Returns true if the specific character is a base-8 digit.\n\tstatic Number parseDecimal(String text); // Builds a Number from the given decimal descriptor.\n\tstatic Number parseInteger(String text); // Builds a Number from the given integer descriptor.\n}"}
{"index": 6336, "repo": "mina-core-3.0.0-M2", "des": "A filter providing IoFuture for request/response protocol.", "code": "Class RequestFilter<REQUEST extends Request,RESPONSE extends Response> {\n\tvoid messageReceived(IoSession session, Object message, ReadFilterChainController controller); // Invoked when a message is received.\n\tIoFuture<RESPONSE> request(IoSession session, REQUEST request, long timeoutInMs); // Send a request message and provide a IoFuture for handling the response.\n\tvoid sessionClosed(IoSession session); // Invoked when a connection is closed.\n\tvoid sessionOpened(IoSession session); // Invoked when a connection has been opened.\n}"}
{"index": 4780, "repo": "hadoop-common-3.3.4", "des": "DtFileOperations is a collection of delegation token file operations.", "code": "Class DtFileOperations {\n\tstatic void aliasTokenFile(File tokenFile, String fileFormat, Text alias, Text service, Configuration conf); // Alias a token from a file and save back to file in the local filesystem.\n\tstatic void appendTokenFiles(ArrayList<File> tokenFiles, String fileFormat, Configuration conf); // Append tokens from list of files in local filesystem, saving to last file.\n\tstatic void doFormattedWrite(File f, String format, Credentials creds, Configuration conf); // Write out a Credentials object as a local file.\n\tstatic void getTokenFile(File tokenFile, String fileFormat, Text alias, Text service, String url, String renewer, Configuration conf); // Fetch a token from a service and save to file in the local filesystem.\n\tstatic void importTokenFile(File tokenFile, String fileFormat, Text alias, String base64, Configuration conf); // Import a token from a base64 encoding into the local filesystem.\n\tstatic void printCredentials(Credentials creds, Text alias, PrintStream out); // Print out a Credentials object.\n\tstatic void printTokenFile(File tokenFile, Text alias, Configuration conf, PrintStream out); // Print out a Credentials file from the local filesystem.\n\tstatic void removeTokenFromFile(boolean cancel, File tokenFile, String fileFormat, Text alias, Configuration conf); // Remove a token from a file in the local filesystem, matching alias.\n\tstatic void renewTokenFile(File tokenFile, String fileFormat, Text alias, Configuration conf); // Renew a token from a file in the local filesystem, matching alias.\n}"}
{"index": 4396, "repo": "beam-sdks-java-core-2.49.0", "des": "An OffsetRangeTracker for tracking a growable offset range.", "code": "Class GrowableOffsetRangeTracker {\n\tRestrictionTracker.Progress getProgress(); // A representation for the amount of known completed and known remaining work.\n\tRestrictionTracker.IsBounded isBounded(); // Return the boundedness of the current restriction.\n\tSplitResult<OffsetRange> trySplit(double fractionOfRemainder); // Splits current restriction based on fractionOfRemainder.\n}"}
{"index": 18395, "repo": "opencms-core-15.0", "des": "A bean used to store information about a container page element which was just removed.", "code": "Class CmsRemovedElementStatus {\n\tCmsCntPageData.ElementDeleteMode getElementDeleteMode(); // Gets the element delete mode.\n\tCmsListInfoBean getElementInfo(); // Gets the list info bean for the removed element.\n\tCmsUUID getStructureId(); // Gets the structure id of the removed element.\n\tboolean isDeletionCandidate(); // Returns true if the removed element is a possible candidate for deletion.\n}"}
{"index": 17522, "repo": "pulsar-broker-3.0.0", "des": "The state of the pending ack handle PendingAckHandleState.", "code": "public static enum PendingAckHandleState.State extends Enum<PendingAckHandleState.State> {\n\tstatic PendingAckHandleState.State valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic PendingAckHandleState.State[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 4009, "repo": "zookeeper-3.8.2", "des": "The learner session tracker is used by learners (followers and observers) to track zookeeper sessions which may or may not be echoed to the leader.", "code": "Class LearnerSessionTracker {\n\tvoid checkSession(long sessionId, Object owner); // Checks whether the SessionTracker is aware of this session, the session is still active, and the owner matches.\n\tboolean commitSession(long sessionId, int sessionTimeout); // Synchronized on this to avoid race condition of adding a local session after committed global session, which may cause the same session being tracked on this server and leader.\n\tlong createSession(int sessionTimeout);\n\tvoid dumpSessions(PrintWriter pwriter); // Text dump of session information, suitable for debugging.\n\tMap<Long,Set<Long>> getSessionExpiryMap(); // Returns a mapping of time to session IDs that expire at that time.\n\tSet<Long> globalSessions(); // Get a set of global session IDs\n\tboolean isGlobalSession(long sessionId);\n\tvoid removeSession(long sessionId);\n\tvoid setOwner(long sessionId, Object owner);\n\tvoid setSessionClosing(long sessionId); // Mark that the session is in the process of closing.\n\tvoid shutdown();\n\tMap<Long,Integer> snapshot();\n\tvoid start();\n\tboolean touchSession(long sessionId, int sessionTimeout);\n\tboolean trackSession(long sessionId, int sessionTimeout); // Track the session expire, not add to ZkDb.\n}"}
{"index": 17927, "repo": "spring-web-6.0.11", "des": "Manages controller-specific session attributes declared via @SessionAttributes.", "code": "public class SessionAttributesHandler extends Object {\n\tvoid cleanupAttributes(WebRequest request); // Remove \"known\" attributes from the session, i.e.\n\tboolean hasSessionAttributes(); // Whether the controller represented by this instance has declared any session attributes through an SessionAttributes annotation.\n\tboolean isHandlerSessionAttribute(String attributeName, Class<?> attributeType); // Whether the attribute name or type match the names and types specified via @SessionAttributes on the underlying controller.\n\tMap<String,Object> retrieveAttributes(WebRequest request); // Retrieve \"known\" attributes from the session, i.e.\n\tvoid storeAttributes(WebRequest request, Map<String,?> attributes); // Store a subset of the given attributes in the session.\n}"}
{"index": 12174, "repo": "jena-core-4.9.0", "des": "RDF blank nodes, ie nodes with identity but without URIs.", "code": "public class Node_Blank extends Node_Concrete {\n\tboolean equals(Object other); // Nodes only equal other Nodes that have equal labels.\n\tBlankNodeId getBlankNodeId(); // get the blank node id if the node is blank, otherwise die horribly\n\tboolean isBlank(); // Answer true iff this node is a blank node [subclasses override]\n\tObject visitWith(NodeVisitor v); // Visit a Node and dispatch on it to the appropriate method from the NodeVisitor v.\n}"}
{"index": 16709, "repo": "spring-beans-6.0.11", "des": "Interface that defines a registry for shared bean instances.", "code": "public interface SingletonBeanRegistry {\n\tboolean containsSingleton(String beanName); // Check if this registry contains a singleton instance with the given name.\n\tObject getSingleton(String beanName); // Return the (raw) singleton object registered under the given name.\n\tint getSingletonCount(); // Return the number of singleton beans registered in this registry.\n\tObject getSingletonMutex(); // Return the singleton mutex used by this registry (for external collaborators).\n\tString[] getSingletonNames(); // Return the names of singleton beans registered in this registry.\n\tvoid registerSingleton(String beanName, Object singletonObject); // Register the given existing object as singleton in the bean registry, under the given bean name.\n}"}
{"index": 10144, "repo": "spring-hateoas-2.1.2", "des": "The mode how to merge two Links instances.", "code": "public static enum Links.MergeMode extends Enum<Links.MergeMode> {\n\tstatic Links.MergeMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Links.MergeMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 3830, "repo": "hbase-client-3.0.0-alpha-4", "des": "Enum describing the durability guarantees for tables and Mutations Note that the items must be sorted in order of increasing durability.", "code": "Enum Durability {\n\tstatic Durability valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Durability[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 15466, "repo": "spring-batch-core-5.0.2", "des": "Base class for step builders that want to build a TaskletStep.", "code": "public abstract class AbstractTaskletStepBuilder<B extends AbstractTaskletStepBuilder<B>> extends StepBuilderHelper<B> {\n\tTaskletStep build(); // Build the step from the components collected by the fluent setters.\n\tprotected boolean concurrent(); // Convenience method for subclasses to determine if the step is concurrent.\n\tprotected abstract Tasklet createTasklet();\n\tB exceptionHandler(ExceptionHandler exceptionHandler); // Sets the exception handler to use in the case of tasklet failures.\n\tprotected ExceptionHandler getExceptionHandler(); // Convenience method for subclasses to access the exception handler that was injected by user.\n\tprotected RepeatOperations getStepOperations(); // Convenience method for subclasses to access the step operations that were injected by user.\n\tprotected Set<ItemStream> getStreams();\n\tprotected org.springframework.core.task.TaskExecutor getTaskExecutor();\n\tprotected int getThrottleLimit(); // Deprecated, for removal: This API element is subject to removal in a future version.\n\tprotected org.springframework.transaction.interceptor.TransactionAttribute getTransactionAttribute();\n\tprotected org.springframework.transaction.PlatformTransactionManager getTransactionManager();\n\tB listener(Object listener); // Registers objects using the annotation based listener configuration.\n\tB listener(ChunkListener listener); // Register a chunk listener.\n\tprotected void registerStepListenerAsChunkListener();\n\tB stepOperations(RepeatOperations repeatTemplate); // Sets the repeat template used for iterating the tasklet execution.\n\tB stream(ItemStream stream); // Register a stream for callbacks that manage restart data.\n\tB taskExecutor(org.springframework.core.task.TaskExecutor taskExecutor); // Provide a task executor to use when executing the tasklet.\n\tB throttleLimit(int throttleLimit); // Deprecated, for removal: This API element is subject to removal in a future version. since 5.0, scheduled for removal in 6.0.\n\tB transactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute transactionAttribute); // Sets the transaction attributes for the tasklet execution.\n\tB transactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Set the transaction manager to use for the step.\n}"}
{"index": 15640, "repo": "spring-security-core-6.1.2", "des": "An event that represents a change in SecurityContext", "code": "public class SecurityContextChangedEvent extends org.springframework.context.ApplicationEvent {\n\tSecurityContext getNewContext(); // Get the SecurityContext set on the SecurityContextHolder as of this event\n\tSecurityContext getOldContext(); // Get the SecurityContext set on the SecurityContextHolder immediately previous to this event\n\tboolean isCleared(); // Say whether the event is a context-clearing event.\n}"}
{"index": 2435, "repo": "spring-session-1.3.5.RELEASE", "des": "A RememberMeServices implementation that uses Spring Session backed HttpSession to provide remember-me service capabilities.", "code": "Class SpringSessionRememberMeServices {\n\torg.springframework.security.core.Authentication autoLogin(HttpServletRequest request, HttpServletResponse response);\n\tvoid loginFail(HttpServletRequest request, HttpServletResponse response);\n\tvoid loginSuccess(HttpServletRequest request, HttpServletResponse response, org.springframework.security.core.Authentication successfulAuthentication);\n\tvoid logout(HttpServletRequest request, HttpServletResponse response, org.springframework.security.core.Authentication authentication);\n\tprotected boolean rememberMeRequested(HttpServletRequest request, java.lang.String parameter); // Allows customization of whether a remember-me login has been requested.\n\tvoid setAlwaysRemember(boolean alwaysRemember);\n\tvoid setRememberMeParameterName(java.lang.String rememberMeParameterName); // Set the name of the parameter which should be checked for to see if a remember-me has been requested during a login request.\n\tvoid setValiditySeconds(int validitySeconds);\n}"}
{"index": 5574, "repo": "org.apache.karaf.main-2.4.4", "des": "Framework service to administer Conditional Permissions.", "code": "Interface ConditionalPermissionAdmin {\n\tConditionalPermissionInfo addConditionalPermissionInfo(ConditionInfo[] conditions, PermissionInfo[] permissions); // Deprecated. Since 1.1. Use newConditionalPermissionUpdate() instead.\n\tAccessControlContext getAccessControlContext(String[] signers); // Returns the Access Control Context that corresponds to the specified signers.\n\tConditionalPermissionInfo getConditionalPermissionInfo(String name); // Deprecated. Since 1.1. Use newConditionalPermissionUpdate() instead.\n\tEnumeration<ConditionalPermissionInfo> getConditionalPermissionInfos(); // Deprecated. Since 1.1. Use newConditionalPermissionUpdate() instead.\n\tConditionalPermissionInfo newConditionalPermissionInfo(String encodedConditionalPermissionInfo); // Creates a new ConditionalPermissionInfo from the specified encoded ConditionalPermissionInfo string suitable for insertion into a ConditionalPermissionUpdate.\n\tConditionalPermissionInfo newConditionalPermissionInfo(String name, ConditionInfo[] conditions, PermissionInfo[] permissions, String access); // Creates a new ConditionalPermissionInfo with the specified fields suitable for insertion into a ConditionalPermissionUpdate.\n\tConditionalPermissionUpdate newConditionalPermissionUpdate(); // Creates a new update for the Conditional Permission Table.\n\tConditionalPermissionInfo setConditionalPermissionInfo(String name, ConditionInfo[] conditions, PermissionInfo[] permissions); // Deprecated. Since 1.1. Use newConditionalPermissionUpdate() instead.\n}"}
{"index": 10805, "repo": "spring-boot-actuator-3.1.1", "des": "The response that finished the exchange.", "code": "public static final class HttpExchange.Response extends Object {\n\tMap<String,List<String>> getHeaders(); // Return the response headers.\n\tint getStatus(); // Return the status code of the response.\n}"}
{"index": 2212, "repo": "hive-exec-4.0.0-alpha-2", "des": "If this authorizer is used, it allows authorization api to be invoked only in embedded metastore mode.", "code": "Class MetaStoreAuthzAPIAuthorizerEmbedOnly {\n\tvoid authorize(org.apache.hadoop.hive.metastore.api.Database db, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a database object.\n\tvoid authorize(Partition part, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a hive partition object.\n\tvoid authorize(Table table, Partition part, List<String> columns, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a list of columns.\n\tvoid authorize(Table table, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a hive table object.\n\tvoid authorizeAuthorizationApiInvocation(); // Authorize metastore authorization api call.\n\tvoid authorizeDbLevelOperations(Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv, Collection<ReadEntity> inputs, Collection<WriteEntity> outputs); // Authorization user level privileges.\n\tvoid init(org.apache.hadoop.conf.Configuration conf);\n\tvoid setMetaStoreHandler(IHMSHandler handler); // Allows invoker of HiveMetaStoreAuthorizationProvider to send in a hive metastore handler that can be used to make calls to test whether or not authorizations can/will succeed.\n}"}
{"index": 1049, "repo": "ignite-core-2.15.0", "des": "Interface for objects aware theirs mvcc update version.", "code": "Interface MvccUpdateVersionAware {\n\tlong newMvccCoordinatorVersion();\n\tlong newMvccCounter();\n\tint newMvccOperationCounter();\n\tbyte newMvccTxState();\n\tdefault MvccVersion newMvccVersion();\n\tdefault void newMvccVersion(long crd, long cntr, int opCntr); // Sets new mvcc version.\n\tdefault void newMvccVersion(MvccUpdateVersionAware other); // Copies new MVCC version\n\tdefault void newMvccVersion(MvccVersion ver); // Sets new MVCC version\n}"}
{"index": 18543, "repo": "hibernate-core-5.6.15.Final", "des": "Contract for a FetchSource (aka, the thing that owns the fetched attribute).", "code": "Interface FetchSource {\n\tBidirectionalEntityReference[] getBidirectionalEntityReferences(); // Retrieve the bidirectional entity references owned by this fetch source.\n\tFetch[] getFetches(); // Retrieve the fetches owned by this fetch source.\n\tPropertyPath getPropertyPath(); // Get the property path to this fetch source\n\tjava.lang.String getQuerySpaceUid(); // Get the UID for this fetch source's query space.\n\tEntityReference resolveEntityReference(); // Resolve the \"current\" EntityReference, or null if none.\n}"}
{"index": 10765, "repo": "log4j-over-slf4j-2.0.7", "des": "A LoggerRepository is used to create and retrieve Loggers.", "code": "public interface LoggerRepository {\n\tvoid addHierarchyEventListener(HierarchyEventListener listener); // Add a HierarchyEventListener event to the repository.\n\tvoid emitNoAppenderWarning(Category cat);\n\tLogger exists(String name);\n\tvoid fireAddAppenderEvent(Category logger, Appender appender);\n\tEnumeration getCurrentCategories(); // Deprecated.\n\tEnumeration getCurrentLoggers();\n\tLogger getLogger(String name);\n\tLogger getLogger(String name, LoggerFactory factory);\n\tLogger getRootLogger();\n\tLevel getThreshold(); // Get the repository-wide threshold.\n\tboolean isDisabled(int level); // Returns whether this repository is disabled for a given level.\n\tvoid resetConfiguration();\n\tvoid setThreshold(String val); // Another form of setThreshold(Level) accepting a string parameter instead of a Level.\n\tvoid setThreshold(Level level); // Set the repository-wide threshold.\n\tvoid shutdown();\n}"}
{"index": 9960, "repo": "iceberg-api-1.3.0", "des": "A builder used to create or replace a SQL View.", "code": "Interface ViewBuilder {\n\tView create(); // Create the view.\n\tView createOrReplace(); // Create or replace the view.\n\tView replace(); // Replace the view.\n\tViewBuilder withDefaultCatalog(java.lang.String defaultCatalog); // Set the view default catalog.\n\tViewBuilder withDefaultNamespace(Namespace defaultNamespace); // Set the view default namespace.\n\tViewBuilder withDialect(java.lang.String dialect); // Set the view SQL dialect.\n\tViewBuilder withFieldAliases(java.util.List<java.lang.String> fieldAliases); // Set the view field aliases.\n\tViewBuilder withFieldComments(java.util.List<java.lang.String> fieldComments); // Set the view field comments.\n\tViewBuilder withProperties(java.util.Map<java.lang.String,java.lang.String> properties); // Add key/value properties to the view.\n\tViewBuilder withProperty(java.lang.String key, java.lang.String value); // Add a key/value property to the view.\n\tViewBuilder withQuery(java.lang.String query); // Set the view query.\n\tViewBuilder withQueryColumnNames(java.util.List<java.lang.String> queryColumnNames); // Set the view query column names.\n\tViewBuilder withSchema(Schema schema); // Set the view schema.\n}"}
{"index": 13863, "repo": "spring-webflux-6.0.11", "des": "A logical disjunction (' || ') request condition to match a request's 'Content-Type' header to a list of media type expressions.", "code": "public final class ConsumesRequestCondition extends AbstractRequestCondition<ConsumesRequestCondition> {\n\tConsumesRequestCondition combine(ConsumesRequestCondition other); // Returns the \"other\" instance if it has any expressions; returns \"this\" instance otherwise.\n\tint compareTo(ConsumesRequestCondition other, org.springframework.web.server.ServerWebExchange exchange); // Returns: 0 if the two conditions have the same number of expressions Less than 0 if \"this\" has more or more specific media type expressions Greater than 0 if \"other\" has more or more specific media type expressions\n\tSet<org.springframework.http.MediaType> getConsumableMediaTypes(); // Returns the media types for this condition excluding negated expressions.\n\tprotected Collection<org.springframework.web.reactive.result.condition.ConsumesRequestCondition.ConsumeMediaTypeExpression> getContent(); // Return the discrete items a request condition is composed of.\n\tSet<MediaTypeExpression> getExpressions(); // Return the contained MediaType expressions.\n\tConsumesRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange exchange); // Checks if any of the contained media type expressions match the given request 'Content-Type' header and returns an instance that is guaranteed to contain matching expressions only.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n\tboolean isBodyRequired(); // Return the setting for setBodyRequired(boolean).\n\tboolean isEmpty(); // Whether the condition has any media type expressions.\n\tvoid setBodyRequired(boolean bodyRequired); // Whether this condition should expect requests to have a body.\n}"}
{"index": 3287, "repo": "hbase-common-3.0.0-alpha-4", "des": "An DataType for interacting with values encoded using Bytes.", "code": "Class RawFloat {\n\tFloat decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tfloat decodeFloat(byte[] buff, int offset); // Read a float value from the buffer buff.\n\tint encode(PositionedByteRange dst, Float val); // Write instance val into buffer dst.\n\tClass<Float> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(Float val); // Inform consumers how long the encoded byte[] will be.\n\tint encodeFloat(byte[] buff, int offset, float val); // Write instance val into buffer buff.\n\tOrder getOrder(); // Retrieve the sort Order imposed by this data type, or null when natural ordering is not preserved.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n\tboolean isOrderPreserving(); // Indicates whether this instance writes encoded byte[]'s which preserve the natural sort order of the unencoded value.\n\tboolean isSkippable(); // Indicates whether this instance is able to skip over it's encoded value.\n\tint skip(PositionedByteRange src); // Skip src's position forward over one encoded value.\n}"}
{"index": 17126, "repo": "spring-integration-core-6.1.2", "des": "Strategy interface for storing and retrieving messages.", "code": "public interface MessageStore {\n\t<T> org.springframework.messaging.Message<T> addMessage(org.springframework.messaging.Message<T> message); // Put the provided Message into the MessageStore.\n\torg.springframework.messaging.Message<?> getMessage(UUID id);\n\tlong getMessageCount(); // Optional attribute giving the number of messages in the store.\n\tMessageMetadata getMessageMetadata(UUID id); // Return a MessageMetadata for the Message by provided id.\n\torg.springframework.messaging.Message<?> removeMessage(UUID id); // Remove the Message with the given id from the MessageStore, if present, and return it.\n}"}
{"index": 11480, "repo": "spring-restdocs-core-3.0.0", "des": "An enumeration of the possible types for a field in a JSON request or response payload.", "code": "public enum JsonFieldType extends Enum<JsonFieldType> {\n\tstatic JsonFieldType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic JsonFieldType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10254, "repo": "spring-core-6.0.11", "des": "Convenience methods for working with the DOM API, in particular for working with DOM Nodes and DOM Elements.", "code": "public abstract class DomUtils extends Object {\n\tstatic ContentHandler createContentHandler(Node node); // Returns a SAX ContentHandler that transforms callback calls to DOM Nodes.\n\tstatic Element getChildElementByTagName(Element ele, String childEleName); // Utility method that returns the first child element identified by its name.\n\tstatic List<Element> getChildElements(Element ele); // Retrieves all child elements of the given DOM element.\n\tstatic List<Element> getChildElementsByTagName(Element ele, String childEleName); // Retrieves all child elements of the given DOM element that match the given element name.\n\tstatic List<Element> getChildElementsByTagName(Element ele, String... childEleNames); // Retrieves all child elements of the given DOM element that match any of the given element names.\n\tstatic String getChildElementValueByTagName(Element ele, String childEleName); // Utility method that returns the first child element value identified by its name.\n\tstatic String getTextValue(Element valueEle); // Extracts the text value from the given DOM element, ignoring XML comments.\n\tstatic boolean nodeNameEquals(Node node, String desiredName); // Namespace-aware equals comparison.\n}"}
{"index": 6115, "repo": "jackson-databind-2.15.2", "des": "Helper class used for handling details of creating handler instances (things like JsonSerializers, JsonDeserializers, various type handlers) of specific types.", "code": "Class HandlerInstantiator {\n\tConverter<?,?> converterInstance(MapperConfig<?> config, Annotated annotated, Class<?> implClass); // Method called to construct a Converter instance used for specified class.\n\tabstract JsonDeserializer<?> deserializerInstance(DeserializationConfig config, Annotated annotated, Class<?> deserClass); // Method called to get an instance of deserializer of specified type.\n\tObject includeFilterInstance(SerializationConfig config, BeanPropertyDefinition forProperty, Class<?> filterClass); // Method called to construct a Filter (any Object with implementation of equals(Object) that determines if given value is to be excluded (true) or included (false)) to be used based on JsonInclude annotation (or equivalent).\n\tabstract KeyDeserializer keyDeserializerInstance(DeserializationConfig config, Annotated annotated, Class<?> keyDeserClass); // Method called to get an instance of key deserializer of specified type.\n\tPropertyNamingStrategy namingStrategyInstance(MapperConfig<?> config, Annotated annotated, Class<?> implClass); // Method called to construct a NamingStrategy instance used for specified class.\n\tObjectIdGenerator<?> objectIdGeneratorInstance(MapperConfig<?> config, Annotated annotated, Class<?> implClass); // Method called to construct a ObjectIdHandler instance of specified type.\n\tObjectIdResolver resolverIdGeneratorInstance(MapperConfig<?> config, Annotated annotated, Class<?> implClass);\n\tabstract JsonSerializer<?> serializerInstance(SerializationConfig config, Annotated annotated, Class<?> serClass); // Method called to get an instance of serializer of specified type.\n\tabstract TypeIdResolver typeIdResolverInstance(MapperConfig<?> config, Annotated annotated, Class<?> resolverClass); // Method called to get an instance of TypeIdResolver of specified type.\n\tabstract TypeResolverBuilder<?> typeResolverBuilderInstance(MapperConfig<?> config, Annotated annotated, Class<?> builderClass); // Method called to get an instance of TypeResolverBuilder of specified type.\n\tValueInstantiator valueInstantiatorInstance(MapperConfig<?> config, Annotated annotated, Class<?> resolverClass); // Method called to construct an instance of ValueInstantiator of specified type.\n\tVirtualBeanPropertyWriter virtualPropertyWriterInstance(MapperConfig<?> config, Class<?> implClass); // Method called to construct a VirtualBeanPropertyWriter instance of specified type.\n}"}
{"index": 7927, "repo": "commons-jcs3-core-3.1", "des": "Simple utility for getting the local host name.", "code": "Class HostNameUtil {\n\tstatic String getLocalHostAddress(); // Gets the address for the local machine.\n\tstatic InetAddress getLocalHostLANAddress(); // Returns an InetAddress object encapsulating what is most likely the machine's LAN IP address.\n\tstatic List<InetAddress> getLocalHostLANAddresses(); // Returns all InetAddress objects encapsulating what are most likely the machine's LAN IP addresses.\n\tstatic NetworkInterface getMulticastNetworkInterface(); // On systems with multiple network interfaces and mixed IPv6/IPv4 get a valid network interface for binding to multicast\n}"}
{"index": 14843, "repo": "spring-data-commons-3.1.2", "des": "A RepositoryPopulator using a ResourceReader to read objects from the configured Resources.", "code": "public class ResourceReaderRepositoryPopulator extends Object implements RepositoryPopulator, ApplicationEventPublisherAware {\n\tvoid populate(Repositories repositories); // Populates the given Repositories.\n\tvoid setApplicationEventPublisher(ApplicationEventPublisher publisher);\n\tvoid setResourceLocation(String location); // Configures the location of the Resources to be used to initialize the repositories.\n\tvoid setResources(Resource... resources); // Configures the Resources to be used to initialize the repositories.\n}"}
{"index": 1219, "repo": "ignite-core-2.15.0", "des": "Inline index key implementation for inlining String values.", "code": "Class StringInlineIndexKeyType {\n\tint compare0(long pageAddr, int off, IndexKey key); // Compares inlined and given value.\n\tprotected StringIndexKey get0(long pageAddr, int off); // Restores value from inline.\n\tprotected int inlineSize0(StringIndexKey key); // Return inlined size for specified key.\n\tprotected int put0(long pageAddr, int off, StringIndexKey str, int maxSize); // Puts given value into inline index tree.\n\tstatic byte[] trimUTF8(byte[] bytes, int limit); // Convert String to byte[] with size limit, according to UTF-8 encoding.\n}"}
{"index": 12725, "repo": "spring-data-mongodb-4.1.2", "des": "Value object to capture the fields exposed by an AggregationOperation.", "code": "public final class ExposedFields extends Object implements Iterable<org.springframework.data.mongodb.core.aggregation.ExposedFields.ExposedField> {\n\tExposedFields and(org.springframework.data.mongodb.core.aggregation.ExposedFields.ExposedField field); // Creates a new ExposedFields adding the given ExposedFields.ExposedField.\n\tstatic ExposedFields empty(); // Returns an empty ExposedFields instance.\n\tstatic ExposedFields from(org.springframework.data.mongodb.core.aggregation.ExposedFields.ExposedField... fields); // Creates a new ExposedFields instance from the given ExposedFields.ExposedFields.\n\torg.springframework.data.mongodb.core.aggregation.ExposedFields.ExposedField getField(String name); // Returns the field with the given name or null if no field with the given name is available.\n\tIterator<org.springframework.data.mongodb.core.aggregation.ExposedFields.ExposedField> iterator();\n\tstatic ExposedFields nonSynthetic(Fields fields); // Creates non-synthetic ExposedFields from the given Fields.\n\tstatic ExposedFields synthetic(Fields fields); // Creates synthetic ExposedFields from the given Fields.\n}"}
{"index": 13357, "repo": "shiro-core-2.0.0-alpha-2", "des": "Checks to see if a @RequiresPermissions annotation is declared, and if so, performs a permission check to see if the calling Subject is allowed continued access.", "code": "public class PermissionAnnotationHandler extends AuthorizingAnnotationHandler {\n\tvoid assertAuthorized(Annotation a); // Ensures that the calling Subject has the Annotation's specified permissions, and if not, throws an AuthorizingException indicating access is denied.\n\tprotected String[] getAnnotationValue(Annotation a); // Returns the annotation value, from which the Permission will be constructed.\n}"}
{"index": 6917, "repo": "calcite-core-1.34.0", "des": "Rule to convert a Intersect to a JdbcRules.", "code": "Class JdbcRules.JdbcIntersectRule {\n\t@Nullable RelNode convert(RelNode rel); // Converts a relational expression to the target trait(s) of this rule.\n\tstatic JdbcRules.JdbcIntersectRule create(JdbcConvention out); // Creates a JdbcIntersectRule.\n}"}
{"index": 16080, "repo": "shiro-web-2.0.0-alpha-2", "des": "A WebEnvironment that supports 'write' operations operations.", "code": "public interface MutableWebEnvironment extends WebEnvironment {\n\tvoid setFilterChainResolver(FilterChainResolver filterChainResolver); // Sets the WebEnvironment's FilterChainResolver.\n\tvoid setServletContext(javax.servlet.ServletContext servletContext); // Sets the WebEnvironment's associated ServletContext instance.\n\tvoid setShiroFilterConfiguration(ShiroFilterConfiguration filterConfiguration); // Sets the WebEnvironment's ShiroFilterConfiguration.\n\tvoid setWebSecurityManager(WebSecurityManager webSecurityManager); // Sets the WebEnvironment's WebSecurityManager.\n}"}
{"index": 17485, "repo": "spring-integration-redis-6.1.2", "des": "Specialized Redis ChannelMessageStore that uses a list to back a QueueChannel.", "code": "public class RedisChannelMessageStore extends Object implements org.springframework.integration.store.ChannelMessageStore, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.BeanClassLoaderAware {\n\torg.springframework.integration.store.MessageGroup addMessageToGroup(Object groupId, org.springframework.messaging.Message<?> message);\n\tvoid afterPropertiesSet();\n\tprotected String getBeanName();\n\tint getMessageCountForAllMessageGroups();\n\torg.springframework.integration.store.MessageGroup getMessageGroup(Object groupId);\n\tint getMessageGroupCount();\n\tprotected org.springframework.integration.store.MessageGroupFactory getMessageGroupFactory();\n\tprotected org.springframework.data.redis.core.RedisTemplate<Object,org.springframework.messaging.Message<?>> getRedisTemplate();\n\tint messageGroupSize(Object groupId);\n\torg.springframework.messaging.Message<?> pollMessageFromGroup(Object groupId);\n\tvoid removeMessageGroup(Object groupId);\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setBeanName(String name);\n\tvoid setMessageGroupFactory(org.springframework.integration.store.MessageGroupFactory messageGroupFactory); // Specify the MessageGroupFactory to create MessageGroup object where it is necessary.\n\tvoid setValueSerializer(org.springframework.data.redis.serializer.RedisSerializer<?> valueSerializer); // Use a different serializer (default JdkSerializationRedisSerializer for the Message.\n}"}
{"index": 2045, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ScalarArithmeticColumn.", "code": "Class DoubleScalarAddLongColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 7307, "repo": "calcite-core-1.34.0", "des": "Interface that defines rules within type mappings.", "code": "Interface SqlTypeMappingRule {\n\tdefault boolean canApplyFrom(SqlTypeName to, SqlTypeName from); // Returns whether it is valid to apply the defined rules from type from to type to.\n\tMap<SqlTypeName,com.google.common.collect.ImmutableSet<SqlTypeName>> getTypeMapping(); // Returns the type mappings of this rule instance.\n}"}
{"index": 940, "repo": "ignite-core-2.15.0", "des": "A time source; returns a time value representing the number of nanoseconds elapsed since some fixed but arbitrary point in time.", "code": "Class IgniteTicker {\n\tabstract long read(); // Returns the number of nanoseconds elapsed since this ticker's fixed point of reference.\n\tstatic IgniteTicker systemTicker(); // A ticker that reads the current time using System.nanoTime().\n}"}
{"index": 18184, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Contract describing source of identifier information for the entity.", "code": "Interface IdentifierSource {\n\tIdentifierGeneratorDefinition getIdentifierGeneratorDescriptor(); // Obtain the identifier generator source.\n\tEntityIdentifierNature getNature(); // Obtain the nature of this identifier source.\n}"}
{"index": 3640, "repo": "hive-serde-4.0.0-alpha-2", "des": "This enum controls how we copy primitive objects.", "code": "Enum ObjectInspectorUtils.ObjectInspectorCopyOption {\n\tstatic ObjectInspectorUtils.ObjectInspectorCopyOption valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ObjectInspectorUtils.ObjectInspectorCopyOption[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18206, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Models the logical notion of a JDBC Connection.", "code": "Interface LogicalConnection {\n\tjava.sql.Connection close(); // Closes the JdbcSession, making it inactive and forcing release of any held resources\n\tResourceRegistry getResourceRegistry(); // Provides access to the registry of JDBC resources associated with this LogicalConnection.\n\tboolean isOpen(); // Is this (logical) JDBC Connection still open/active.\n\tboolean isPhysicallyConnected(); // Is this JdbcSession currently physically connected (meaning does it currently hold a JDBC Connection)?\n}"}
{"index": 8453, "repo": "hadoop-aws-3.3.6", "des": "A token identifier which contains a set of AWS session credentials, credentials which will be valid until they expire.", "code": "Class SessionTokenIdentifier {\n\tlong getExpiryTime(); // Return the expiry time in seconds since 1970-01-01.\n\tMarshalledCredentials getMarshalledCredentials(); // Get the marshalled credentials.\n\tvoid readFields(DataInput in); // Read state.\n\tvoid write(DataOutput out); // Write state.\n}"}
{"index": 2377, "repo": "commons-geometry-euclidean-1.0", "des": "Abstract base class for Euclidean vectors with two or more dimensions.", "code": "Class MultiDimensionalEuclideanVector<V extends MultiDimensionalEuclideanVector<V>> {\n\tabstract V orthogonal(); // Get a unit vector orthogonal to the instance.\n\tabstract V orthogonal(V dir); // Get a unit vector orthogonal to the current vector and pointing in the direction of dir.\n\tabstract V project(V base); // Get the projection of the instance onto the given base vector.\n\tabstract V reject(V base); // Get the rejection of the instance from the given base vector.\n}"}
{"index": 17100, "repo": "spring-integration-core-6.1.2", "des": "Simple factory to provide JsonObjectMapper instances based on jackson-databind lib in the classpath.", "code": "public final class JsonObjectMapperProvider extends Object {\n\tstatic boolean jsonAvailable(); // Returns true if a supported JSON implementation is on the class path.\n\tstatic JsonObjectMapper<?,?> newInstance(); // Return an object mapper if available.\n}"}
{"index": 7496, "repo": "cassandra-all-4.1.2", "des": "Core logic for handling inbound message deserialization and execution (in tandem with FrameDecoder).", "code": "Class AbstractMessageHandler {\n\tprotected ResourceLimits.Outcome acquireCapacity(ResourceLimits.Limit endpointReserve, ResourceLimits.Limit globalReserve, int bytes);\n\tprotected boolean acquireCapacity(ResourceLimits.Limit endpointReserve, ResourceLimits.Limit globalReserve, int bytes, long currentTimeNanos, long expiresAtNanos); // Try to acquire permits for the inbound message.\n\tvoid channelInactive(io.netty.channel.ChannelHandlerContext ctx);\n\tvoid channelRead(io.netty.channel.ChannelHandlerContext ctx, java.lang.Object msg);\n\tprotected abstract void fatalExceptionCaught(java.lang.Throwable t);\n\tvoid handlerAdded(io.netty.channel.ChannelHandlerContext ctx);\n\tprotected abstract java.lang.String id();\n\tboolean process(FrameDecoder.Frame frame); // Frame processor that the frames should be handed off to.\n\tprotected abstract void processCorruptFrame(FrameDecoder.CorruptFrame frame);\n\tprotected abstract boolean processFirstFrameOfLargeMessage(FrameDecoder.IntactFrame frame, ResourceLimits.Limit endpointReserve, ResourceLimits.Limit globalReserve);\n\tprotected abstract boolean processOneContainedMessage(ShareableBytes bytes, ResourceLimits.Limit endpointReserve, ResourceLimits.Limit globalReserve);\n\tprotected boolean processSubsequentFrameOfLargeMessage(FrameDecoder.Frame frame);\n\tprotected boolean processUpToOneMessage(ResourceLimits.Limit endpointReserve, ResourceLimits.Limit globalReserve);\n\tvoid releaseCapacity(int bytes);\n\tprotected void releaseProcessedCapacity(int size, Message.Header header); // Invoked to release capacity for a message that has been fully, successfully processed.\n}"}
{"index": 12968, "repo": "spring-integration-file-6.1.2", "des": "A SessionFactory implementation that caches Sessions for reuse without requiring reconnection each time the Session is retrieved from the factory.", "code": "public class CachingSessionFactory<F> extends Object implements SessionFactory<F>, org.springframework.beans.factory.DisposableBean {\n\tvoid destroy(); // Remove (close) any unused sessions in the pool.\n\tSession<F> getSession(); // Get a session from the pool (or block if none available).\n\tvoid resetCache(); // Clear the cache of sessions; also any in-use sessions will be closed when returned to the cache.\n\tvoid setPoolSize(int poolSize); // Modify the target session pool size; the actual pool size will adjust up/down to this size as and when sessions are requested or retrieved.\n\tvoid setSessionWaitTimeout(long sessionWaitTimeout); // Sets the limit of how long to wait for a session to become available.\n\tvoid setTestSession(boolean testSession); // Set to true to test the session when checking one out from the cache.\n}"}
{"index": 13773, "repo": "spring-webmvc-6.0.11", "des": "A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.", "code": "public final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder> {\n\tRequestConditionHolder combine(RequestConditionHolder other); // Combine the request conditions held by the two RequestConditionHolder instances after making sure the conditions are of the same type.\n\tint compareTo(RequestConditionHolder other, HttpServletRequest request); // Compare the request conditions held by the two RequestConditionHolder instances after making sure the conditions are of the same type.\n\tRequestCondition<?> getCondition(); // Return the held request condition, or null if not holding one.\n\tprotected Collection<?> getContent(); // Return the discrete items a request condition is composed of.\n\tRequestConditionHolder getMatchingCondition(HttpServletRequest request); // Get the matching condition for the held request condition wrap it in a new RequestConditionHolder instance.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n}"}
{"index": 6691, "repo": "lucene-analyzers-common-8.11.2", "des": "Concatenates/Joins every incoming token with a separator into one output token for every path through the token stream (which is a graph).", "code": "Class ConcatenateGraphFilter {\n\tvoid close();\n\tvoid end();\n\tboolean incrementToken();\n\tvoid reset();\n\tAutomaton toAutomaton(); // Converts the tokenStream to an automaton, treating the transition labels as utf-8.\n\tAutomaton toAutomaton(boolean unicodeAware); // Converts the tokenStream to an automaton.\n}"}
{"index": 11485, "repo": "spring-restdocs-core-3.0.0", "des": "A Mustache-based TemplateEngine implemented using JMustache.", "code": "public class MustacheTemplateEngine extends Object implements TemplateEngine {\n\tTemplate compileTemplate(String name); // Compiles the template at the given path.\n\tprotected final org.springframework.restdocs.mustache.Mustache.Compiler getCompiler(); // Returns the Mustache.Compiler used to compile Mustache templates.\n\tprotected final TemplateResourceResolver getTemplateResourceResolver(); // Returns the TemplateResourceResolver used to resolve the template resources prior to compilation.\n}"}
{"index": 6012, "repo": "commons-lang3-3.12.0", "des": "A mutable triple consisting of three Object elements.", "code": "Class MutableTriple<L,M,R> {\n\tstatic <L,M,R> MutableTriple<L,M,R>[] emptyArray(); // Returns the empty array singleton that can be assigned without compiler warning.\n\tL getLeft(); // Gets the left element from this triple.\n\tM getMiddle(); // Gets the middle element from this triple.\n\tR getRight(); // Gets the right element from this triple.\n\tstatic <L,M,R> MutableTriple<L,M,R> of(L left, M middle, R right); // Obtains a mutable triple of three objects inferring the generic types.\n\tvoid setLeft(L left); // Sets the left element of the triple.\n\tvoid setMiddle(M middle); // Sets the middle element of the triple.\n\tvoid setRight(R right); // Sets the right element of the triple.\n}"}
{"index": 5851, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Implementation of DistributedSchedulingAllocateRequest.", "code": "Class DistributedSchedulingAllocateRequestPBImpl {\n\tList<org.apache.hadoop.yarn.api.records.Container> getAllocatedContainers(); // Get the list of newly allocated Container by the Distributed Scheduling component on the NodeManager.\n\torg.apache.hadoop.yarn.api.protocolrecords.AllocateRequest getAllocateRequest(); // Get the underlying AllocateRequest object.\n\torg.apache.hadoop.yarn.proto.YarnServerCommonServiceProtos.DistributedSchedulingAllocateRequestProto getProto();\n\tvoid setAllocatedContainers(List<org.apache.hadoop.yarn.api.records.Container> pContainers); // Set the list of newly allocated Container by the Distributed Scheduling component on the NodeManager.\n\tvoid setAllocateRequest(org.apache.hadoop.yarn.api.protocolrecords.AllocateRequest pAllocateRequest); // Set the underlying AllocateRequest object.\n}"}
{"index": 16524, "repo": "spring-batch-infrastructure-5.0.2", "des": "A ItemWriter wrapper for a CrudRepository from Spring Data.", "code": "public class RepositoryItemWriter<T> extends Object implements ItemWriter<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Check mandatory properties - there must be a repository.\n\tprotected void doWrite(Chunk<? extends T> items); // Performs the actual write to the repository.\n\tvoid setMethodName(String methodName); // Specifies what method on the repository to call.\n\tvoid setRepository(org.springframework.data.repository.CrudRepository<T,?> repository); // Set the CrudRepository implementation for persistence\n\tvoid write(Chunk<? extends T> chunk); // Write all items to the data store via a Spring Data repository.\n}"}
{"index": 11888, "repo": "spring-kafka-3.0.9", "des": "Support the use of MockProducer in tests.", "code": "public class MockProducerFactory<K,V> extends Object implements ProducerFactory<K,V> {\n\torg.apache.kafka.clients.producer.Producer<K,V> createNonTransactionalProducer(); // Create a non-transactional producer.\n\torg.apache.kafka.clients.producer.Producer<K,V> createProducer(); // Create a producer which will be transactional if the factory is so configured.\n\torg.apache.kafka.clients.producer.Producer<K,V> createProducer(String txIdPrefix); // Create a producer with an overridden transaction id prefix.\n\tboolean transactionCapable(); // Return true if the factory supports transactions.\n}"}
{"index": 2471, "repo": "exoplayer-r2.3.1", "des": "Defines a span of data that may or may not be cached (as indicated by isCached).", "code": "Class CacheSpan {\n\tint compareTo(CacheSpan another);\n\tboolean isHoleSpan(); // Returns whether this is a hole CacheSpan.\n\tboolean isOpenEnded(); // Returns whether this is an open-ended CacheSpan.\n}"}
{"index": 4329, "repo": "beam-sdks-java-core-2.49.0", "des": "A set of PTransforms which deduplicate input records over a time domain and threshold.", "code": "Class Deduplicate {\n\tstatic <K,V> Deduplicate.KeyedValues<K,V> keyedValues(); // Returns a deduplication transform that deduplicates keyed values using the key for up to 10 mins within the processing time domain.\n\tstatic <T> Deduplicate.Values<T> values(); // Returns a deduplication transform that deduplicates values for up to 10 mins within the processing time domain.\n\tstatic <T,IdT> Deduplicate.WithRepresentativeValues<T,IdT> withRepresentativeValueFn(SerializableFunction<T,IdT> representativeValueFn); // Returns a deduplication transform that deduplicates values using the supplied representative value for up to 10 mins within the processing time domain.\n}"}
{"index": 14057, "repo": "spring-context-support-6.0.11", "des": "CacheManager implementation backed by a JCache javax.cache.CacheManager.", "code": "public class JCacheCacheManager extends AbstractTransactionSupportingCacheManager {\n\tvoid afterPropertiesSet();\n\tjavax.cache.CacheManager getCacheManager(); // Return the backing JCache javax.cache.CacheManager.\n\tprotected org.springframework.cache.Cache getMissingCache(String name);\n\tboolean isAllowNullValues(); // Return whether this cache manager accepts and converts null values for all of its caches.\n\tprotected Collection<org.springframework.cache.Cache> loadCaches();\n\tvoid setAllowNullValues(boolean allowNullValues); // Specify whether to accept and convert null values for all caches in this cache manager.\n\tvoid setCacheManager(javax.cache.CacheManager cacheManager); // Set the backing JCache javax.cache.CacheManager.\n}"}
{"index": 7848, "repo": "cassandra-all-4.1.2", "des": "A codec that is capable of handling primitive shorts, thus avoiding the overhead of boxing and unboxing such primitives.", "code": "Class TypeCodec.PrimitiveShortCodec {\n\tjava.lang.Short deserialize(java.nio.ByteBuffer bytes, ProtocolVersion protocolVersion); // Deserialize the given ByteBuffer instance according to the CQL type handled by this codec.\n\tabstract short deserializeNoBoxing(java.nio.ByteBuffer v, ProtocolVersion protocolVersion);\n\tjava.nio.ByteBuffer serialize(java.lang.Short value, ProtocolVersion protocolVersion); // Serialize the given value according to the CQL type handled by this codec.\n\tabstract java.nio.ByteBuffer serializeNoBoxing(short v, ProtocolVersion protocolVersion);\n}"}
{"index": 2010, "repo": "hive-exec-4.0.0-alpha-2", "des": "A high-performance set implementation used to support fast set membership testing, using Cuckoo hashing.", "code": "Class CuckooSetDouble {\n\tvoid insert(double x); // Insert a single value into the set.\n\tvoid load(double[] a); // Insert all values in the input array into the set.\n\tboolean lookup(double x); // Return true if and only if the value x is present in the set.\n}"}
{"index": 3809, "repo": "hbase-client-3.0.0-alpha-4", "des": "Utility methods for obtaining authentication tokens, that do not require hbase-server.", "code": "Class ClientTokenUtil {\n\tstatic void obtainAndCacheToken(Connection conn, User user); // Obtain an authentication token for the given user and add it to the user's credentials.\n\tstatic CompletableFuture<org.apache.hadoop.security.token.Token<AuthenticationTokenIdentifier>> obtainToken(AsyncConnection conn); // Obtain and return an authentication token for the current user.\n}"}
{"index": 8944, "repo": "hbase-server-3.0.0-alpha-4", "des": "A BaseReplicationEndpoint for replication endpoints whose target cluster is an HBase cluster.", "code": "Class HBaseReplicationEndpoint {\n\tvoid abort(String why, Throwable e);\n\tprotected void chooseSinks();\n\tprotected AsyncClusterConnection createConnection(org.apache.hadoop.conf.Configuration conf);\n\tprotected void disconnect();\n\tprotected void doStart();\n\tprotected void doStop();\n\tprotected List<ServerName> fetchSlavesAddresses(); // Get the list of all the region servers from the specified peer\n\tprotected int getNumSinks();\n\tUUID getPeerUUID(); // Returns a UUID of the provided peer id.\n\tprotected HBaseReplicationEndpoint.SinkPeer getReplicationSink(); // Get a randomly-chosen replication sink to replicate to.\n\tvoid init(ReplicationEndpoint.Context context); // Initialize the replication endpoint with the given context.\n\tboolean isAborted();\n\tprotected void reportBadSink(HBaseReplicationEndpoint.SinkPeer sinkPeer); // Report a SinkPeer as being bad (i.e.\n\tprotected void reportSinkSuccess(HBaseReplicationEndpoint.SinkPeer sinkPeer); // Report that a SinkPeer successfully replicated a chunk of data.\n\tvoid start(); // Initiates service startup and returns immediately.\n\tvoid stop(); // If the service is starting or running, this initiates service shutdown and returns immediately.\n}"}
{"index": 3988, "repo": "zookeeper-3.8.2", "des": "A empty watcher implementation used in bench and unit test.", "code": "Class DumbWatcher {\n\tvoid close(ServerCnxn.DisconnectReason reason);\n\tCertificate[] getClientCertificateChain();\n\tint getInterestOps();\n\tlong getOutstandingRequests(); // The number of requests that have been submitted but not yet responded to.\n\tInetSocketAddress getRemoteSocketAddress();\n\tlong getSessionId();\n\tboolean isSecure();\n\tvoid process(WatchedEvent event);\n\tvoid sendCloseSession();\n\tint sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat, int opCode); // Serializes a ZooKeeper response and enqueues it for sending.\n\tprotected ServerStats serverStats();\n\tvoid setClientCertificateChain(Certificate[] chain);\n}"}
{"index": 9339, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by a client to the ResourceManager to get an ApplicationAttemptReport for an application attempt.", "code": "Class GetApplicationAttemptReportRequest {\n\tabstract ApplicationAttemptId getApplicationAttemptId(); // Get the ApplicationAttemptId of an application attempt.\n\tstatic GetApplicationAttemptReportRequest newInstance(ApplicationAttemptId applicationAttemptId);\n\tabstract void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId); // Set the ApplicationAttemptId of an application attempt\n}"}
{"index": 15550, "repo": "spring-batch-core-5.0.2", "des": "A context object that can be used to interrogate the current StepExecution and some of its associated properties using expressions based on bean paths.", "code": "public class StepContext extends SynchronizedAttributeAccessor {\n\tvoid close(); // Clean up the context at the end of a step execution.\n\tboolean equals(Object other); // Extend the base class method to include the step execution itself as a key (i.e.\n\tString getId();\n\tMap<String,Object> getJobExecutionContext();\n\tLong getJobInstanceId(); // Convenient accessor for current JobInstance identifier.\n\tString getJobName(); // Convenient accessor for current job name identifier.\n\tMap<String,Object> getJobParameters();\n\tStepExecution getStepExecution(); // The current StepExecution that is active in this context.\n\tMap<String,Object> getStepExecutionContext();\n\tString getStepName(); // Convenient accessor for current step name identifier.\n\tProperties getSystemProperties(); // Convenient accessor for System properties to make it easy to access them from placeholder expressions.\n\tvoid registerDestructionCallback(String name, Runnable callback); // Allow clients to register callbacks for clean up on close.\n\tObject removeAttribute(String name); // Override base class behaviour to ensure destruction callbacks are unregistered as well as the default behaviour.\n}"}
{"index": 9432, "repo": "hadoop-yarn-api-3.3.6", "des": "This class contains the information of a metric that is related to some entity.", "code": "Class TimelineMetric {\n\tvoid addValue(long timestamp, Number value);\n\tvoid addValues(Map<Long,Number> vals);\n\tstatic TimelineMetric aggregateTo(TimelineMetric incomingMetric, TimelineMetric baseAggregatedMetric); // Aggregate an incoming metric to the base aggregated metric with the given operation state in a stateless fashion.\n\tstatic TimelineMetric aggregateTo(TimelineMetric incomingMetric, TimelineMetric baseAggregatedMetric, Map<Object,Object> state); // Aggregate an incoming metric to the base aggregated metric with the given operation state.\n\tboolean equals(Object o);\n\tString getId();\n\tstatic TimelineMetric getLatestSingleValueMetric(TimelineMetric metric); // Get the latest timeline metric as single value type.\n\tTimelineMetricOperation getRealtimeAggregationOp(); // Get the real time aggregation operation of this metric.\n\tlong getSingleDataTimestamp(); // Get single data timestamp of the metric.\n\tNumber getSingleDataValue(); // Get single data value of the metric.\n\tTimelineMetric.Type getType();\n\tMap<Long,Number> getValues();\n\tTreeMap<Long,Number> getValuesJAXB();\n\tboolean isValid();\n\tvoid setId(String metricId);\n\tvoid setRealtimeAggregationOp(TimelineMetricOperation op); // Set the real time aggregation operation of this metric.\n\tvoid setType(TimelineMetric.Type metricType);\n\tvoid setValues(Map<Long,Number> vals);\n}"}
{"index": 10259, "repo": "spring-core-6.0.11", "des": "A hint that describes the need for reflection on a Method or Constructor.", "code": "public final class ExecutableHint extends MemberHint {\n\tstatic Consumer<ExecutableHint.Builder> builtWith(ExecutableMode mode); // Return a Consumer that applies the given ExecutableMode to the accepted ExecutableHint.Builder.\n\tExecutableMode getMode(); // Return the mode that applies to this hint.\n\tList<TypeReference> getParameterTypes(); // Return the parameter types of the executable.\n}"}
{"index": 8252, "repo": "spring-ws-3.0.10.RELEASE", "des": "Factory methods for RequestMatcher classes.", "code": "Class RequestMatchers {\n\tstatic RequestMatcher anything(); // Expects any request.\n\tstatic RequestMatcher connectionTo(String uri); // Expects a connection to the given URI.\n\tstatic RequestMatcher connectionTo(URI uri); // Expects a connection to the given URI.\n\tstatic RequestMatcher payload(org.springframework.core.io.Resource payload); // Expects the given Resource XML payload.\n\tstatic RequestMatcher payload(Source payload); // Expects the given Source XML payload.\n\tstatic RequestMatcher soapEnvelope(org.springframework.core.io.Resource soapEnvelope); // Expects the given Resource XML SOAP envelope.\n\tstatic RequestMatcher soapEnvelope(Source soapEnvelope); // Expects the given Source XML SOAP envelope.\n\tstatic RequestMatcher soapHeader(QName soapHeaderName); // Expects the given SOAP header in the outgoing message.\n\tstatic RequestMatcher validPayload(org.springframework.core.io.Resource schema, org.springframework.core.io.Resource... furtherSchemas); // Expects the payload to validate against the given XSD schema(s).\n\tstatic RequestXPathExpectations xpath(String xpathExpression); // Expects the given XPath expression to (not) exist or be evaluated to a value.\n\tstatic RequestXPathExpectations xpath(String xpathExpression, Map<String,String> namespaceMapping); // Expects the given XPath expression to (not) exist or be evaluated to a value.\n}"}
{"index": 16110, "repo": "spring-data-cassandra-4.1.2", "des": "Spring Configuration class used to configure a Cassandra client application CqlSession connected to a Cassandra cluster.", "code": "@Configuration public abstract class AbstractSessionConfiguration extends Object implements BeanFactoryAware {\n\tCqlSessionFactoryBean cassandraSession(); // Creates a CqlSessionFactoryBean that provides a Cassandra CqlSession.\n\tCqlTemplate cqlTemplate(); // Creates a CqlTemplate configured with getRequiredSessionFactory().\n\tprotected BeanFactory getBeanFactory(); // Returns the configured reference to the BeanFactory.\n\tprotected String getClusterName(); // Deprecated. since 3.0, use getSessionName() instead.\n\tprotected CompressionType getCompressionType(); // Returns the CompressionType.\n\tprotected String getContactPoints(); // Returns the Cassandra contact points.\n\tprotected DriverConfigLoaderBuilderConfigurer getDriverConfigLoaderBuilderConfigurer(); // Returns the DriverConfigLoaderBuilderConfigurer.\n\tprotected Resource getDriverConfigurationResource(); // Returns the Resource pointing to a driver configuration file.\n\tprotected List<CreateKeyspaceSpecification> getKeyspaceCreations(); // Returns the list of keyspace creations to be run right after initialization.\n\tprotected List<DropKeyspaceSpecification> getKeyspaceDrops(); // Returns the list of keyspace drops to be run before shutdown.\n\tprotected abstract String getKeyspaceName(); // Return the name of the keyspace to connect to.\n\tprotected String getLocalDataCenter(); // Returns the local data center name used for LoadBalancingPolicy, defaulting to datacenter1.\n\tprotected int getPort(); // Returns the Cassandra port.\n\tprotected com.datastax.oss.driver.api.core.CqlSession getRequiredSession(); // Returns the initialized CqlSession instance.\n\tprotected SessionFactory getRequiredSessionFactory(); // Returns the initialized CqlSession instance.\n\tprotected SessionBuilderConfigurer getSessionBuilderConfigurer(); // Returns the SessionBuilderConfigurer.\n\tprotected String getSessionName(); // Returns the session name.\n\tprotected List<String> getShutdownScripts(); // Deprecated. since 3.0; Declare a SessionFactoryInitializer bean instead.\n\tprotected List<String> getStartupScripts(); // Deprecated. since 3.0; Declare a SessionFactoryInitializer bean instead.\n\tprotected <T> T requireBeanOfType(Class<T> beanType); // Gets a required bean of the provided type from the BeanFactory.\n\tvoid setBeanFactory(BeanFactory beanFactory); // Configures a reference to the BeanFactory.\n}"}
{"index": 12430, "repo": "spring-data-couchbase-5.1.2", "des": "Query to use a plain JSON String to create the Query to actually execute.", "code": "public class ReactiveStringBasedCouchbaseQuery extends AbstractReactiveCouchbaseQuery {\n\tprotected Query createCountQuery(ParametersParameterAccessor accessor); // Creates a Query instance using the given ParametersParameterAccessor.\n\tprotected Query createQuery(ParametersParameterAccessor accessor); // Creates a Query instance using the given ParameterAccessor\n\tprotected boolean isLimiting(); // Return whether the query has an explicit limit set.\n}"}
{"index": 12802, "repo": "spring-data-mongodb-4.1.2", "des": "IndexResolver implementation inspecting MongoPersistentEntity for MongoPersistentEntity to be indexed.", "code": "public class MongoPersistentEntityIndexResolver extends Object implements IndexResolver {\n\tprotected MongoPersistentEntityIndexResolver.IndexDefinitionHolder createCompoundIndexDefinition(String dotPath, String collection, CompoundIndex index, MongoPersistentEntity<?> entity);\n\tprotected List<MongoPersistentEntityIndexResolver.IndexDefinitionHolder> createCompoundIndexDefinitions(String dotPath, String fallbackCollection, MongoPersistentEntity<?> entity); // Create IndexDefinition wrapped in MongoPersistentEntityIndexResolver.IndexDefinitionHolder for CompoundIndexes of a given type.\n\tprotected MongoPersistentEntityIndexResolver.IndexDefinitionHolder createGeoSpatialIndexDefinition(String dotPath, String collection, MongoPersistentProperty persistentProperty); // Creates IndexDefinition wrapped in MongoPersistentEntityIndexResolver.IndexDefinitionHolder out of GeoSpatialIndexed for MongoPersistentProperty.\n\tprotected MongoPersistentEntityIndexResolver.IndexDefinitionHolder createHashedIndexDefinition(String dotPath, String collection, MongoPersistentProperty persistentProperty); // Creates HashedIndex wrapped in MongoPersistentEntityIndexResolver.IndexDefinitionHolder out of HashIndexed for a given MongoPersistentProperty.\n\tprotected MongoPersistentEntityIndexResolver.IndexDefinitionHolder createIndexDefinition(String dotPath, String collection, MongoPersistentProperty persistentProperty); // Creates IndexDefinition wrapped in MongoPersistentEntityIndexResolver.IndexDefinitionHolder out of Indexed for a given MongoPersistentProperty.\n\tprotected MongoPersistentEntityIndexResolver.IndexDefinitionHolder createWildcardIndexDefinition(String dotPath, String collection, WildcardIndexed index, MongoPersistentEntity<?> entity);\n\tprotected EvaluationContext getEvaluationContext(); // Get the default EvaluationContext.\n\tIterable<? extends MongoPersistentEntityIndexResolver.IndexDefinitionHolder> resolveIndexFor(TypeInformation<?> typeInformation); // Find and create IndexDefinitions for properties of given TypeInformation.\n\tList<MongoPersistentEntityIndexResolver.IndexDefinitionHolder> resolveIndexForEntity(MongoPersistentEntity<?> root); // Resolve the IndexDefinitions for a given root entity by traversing MongoPersistentProperty scanning for index annotations Indexed, CompoundIndex and GeospatialIndex.\n\tvoid setEvaluationContextProvider(EvaluationContextProvider evaluationContextProvider); // Set the EvaluationContextProvider used for obtaining the EvaluationContext used to compute expressions.\n}"}
{"index": 15118, "repo": "spring-vault-core-3.0.4", "des": "Value object representing versioned secrets along Versioned.Version metadata.", "code": "public class Versioned<T> extends Object {\n\tstatic <T> Versioned<T> create(T secret); // Create a unversioned given secret.\n\tstatic <T> Versioned<T> create(T secret, Versioned.Metadata metadata); // Create a versioned secret object given secret and Versioned.Metadata.\n\tstatic <T> Versioned<T> create(T secret, Versioned.Version version); // Create a versioned secret object given secret and Versioned.Version.\n\tboolean equals(Object o);\n\tT getData();\n\tVersioned.Metadata getMetadata();\n\tT getRequiredData(); // Returns the required data for this versioned object.\n\tVersioned.Metadata getRequiredMetadata(); // Returns the required Versioned.Metadata for this versioned object.\n\tVersioned.Version getVersion();\n\tboolean hasData();\n\tboolean hasMetadata();\n\tOptional<T> toOptional(); // Convert the data element of this versioned object to an Optional.\n}"}
{"index": 571, "repo": "ignite-core-2.15.0", "des": "Represents information about secondary indexes inline size from the cluster nodes.", "code": "Class CheckIndexInlineSizesResult {\n\tvoid addResult(UUID nodeId, Map<String,Integer> indexNameToInlineSize); // Adds to result information about indexes from node.\n\tMap<UUID,Map<String,Integer>> inlineSizes();\n\tvoid merge(CheckIndexInlineSizesResult res); // Merge current result with given instance.\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 1895, "repo": "hadoop-hdfs-3.3.6", "des": "States, which a block can go through while it is under construction.", "code": "Enum HdfsServerConstants.BlockUCState {\n\tstatic HdfsServerConstants.BlockUCState valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HdfsServerConstants.BlockUCState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3238, "repo": "hbase-common-3.0.0-alpha-4", "des": "These values represent the different IO read strategies HBase may employ for accessing filesystem data.", "code": "Enum HBaseSemanticAttributes.ReadType {\n\tstatic HBaseSemanticAttributes.ReadType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HBaseSemanticAttributes.ReadType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12166, "repo": "jena-core-4.9.0", "des": "The revised and soon-to-be-core interface for sources of models, typically generated from RDF descriptions.", "code": "public interface ModelSource extends ModelGetter {\n\tModel createDefaultModel(); // Answer this ModelSource's default model.\n\tModel createFreshModel(); // Answer a Model that satisfies this ModelSource's shape.\n\tModel openModel(String name); // Answer a model.\n\tModel openModelIfPresent(String string); // Answer the model named by string in this ModelSource, if it [still] has one, or null if there isn't one.\n}"}
{"index": 10922, "repo": "spring-data-redis-3.1.2", "des": "Value object representing a single pending message containing its ID, the consumer that fetched the message and has still to acknowledge it, the time elapsed since the messages last delivery and the the total number of times delivered.", "code": "public class PendingMessage extends Object {\n\tConsumer getConsumer(); // The Consumer to acknowledge the message.\n\tString getConsumerName(); // The consumer name to acknowledge the message.\n\tDuration getElapsedTimeSinceLastDelivery(); // Get the elapsed time (with milliseconds precision) since the messages last delivery to the consumer.\n\tString getGroupName(); // Get the consumer group.\n\tRecordId getId();\n\tString getIdAsString();\n\tlong getTotalDeliveryCount(); // Get the total number of times the messages has been delivered to the consumer.\n}"}
{"index": 897, "repo": "ignite-core-2.15.0", "des": "Utility to collect suppressed errors within internal code.", "code": "Class IgniteExceptionRegistry {\n\tlong errorCount(); // Errors count.\n\tstatic IgniteExceptionRegistry get();\n\tList<IgniteExceptionRegistry.ExceptionInfo> getErrors(long order); // Gets suppressed errors.\n\tvoid onException(String msg, Throwable e); // Puts exception into queue.\n\tvoid printErrors(IgniteLogger log); // Prints errors.\n\tvoid setMaxSize(int maxSize); // Sets max size.\n}"}
{"index": 1164, "repo": "ignite-core-2.15.0", "des": "SegmentedLruPageReplacementPolicy factory.", "code": "Class SegmentedLruPageReplacementPolicyFactory {\n\tPageReplacementPolicy create(org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryImpl.Segment seg, long ptr, int pagesCnt); // Create page replacement policy.\n\tlong requiredMemory(int pagesCnt); // Calculaete amount of memory required to service pagesCnt pages.\n}"}
{"index": 7390, "repo": "mahout-math-0.13.0", "des": "Open hash map from byte keys to char values.", "code": "Class OpenByteCharHashMap {\n\tchar adjustOrPutValue(byte key, char newValue, char incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(byte key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(char value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ByteProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ByteCharProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tchar get(byte key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(byte key);\n\tprotected int indexOfKey(byte key);\n\tprotected int indexOfValue(char value);\n\tIterator<OpenByteCharHashMap.MapElement> iterator();\n\tvoid keys(ByteArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ByteCharProcedure condition, ByteArrayList keyList, CharArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(byte key, char value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(byte key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(CharArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 17942, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read and write strings.", "code": "public class StringHttpMessageConverter extends AbstractHttpMessageConverter<String> {\n\tprotected void addDefaultHeaders(HttpHeaders headers, String s, MediaType type); // Add default headers to the output message.\n\tprotected List<Charset> getAcceptedCharsets(); // Return the list of supported Charsets.\n\tprotected Long getContentLength(String str, MediaType contentType); // Returns the content length for the given type.\n\tprotected String readInternal(Class<? extends String> clazz, HttpInputMessage inputMessage); // Abstract template method that reads the actual object.\n\tvoid setWriteAcceptCharset(boolean writeAcceptCharset); // Whether the Accept-Charset header should be written to any outgoing request sourced from the value of Charset.availableCharsets().\n\tboolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tprotected void writeInternal(String str, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 8952, "repo": "hbase-server-3.0.0-alpha-4", "des": "Do different kinds of data block encoding according to column family options.", "code": "Class HFileDataBlockEncoderImpl {\n\tstatic HFileDataBlockEncoder createFromFileInfo(HFileInfo fileInfo);\n\tvoid encode(Cell cell, HFileBlockEncodingContext encodingCtx, DataOutputStream out); // Encodes a KeyValue.\n\tvoid endBlockEncoding(HFileBlockEncodingContext encodingCtx, DataOutputStream out, byte[] uncompressedBytesWithHeader, BlockType blockType); // Ends encoding for a block of KeyValues.\n\tDataBlockEncoding getDataBlockEncoding(); // Returns the data block encoding\n\tDataBlockEncoding getEffectiveEncodingInCache(boolean isCompaction);\n\tHFileBlockDecodingContext newDataBlockDecodingContext(org.apache.hadoop.conf.Configuration conf, HFileContext fileContext); // create a encoder specific decoding context for reading.\n\tHFileBlockEncodingContext newDataBlockEncodingContext(org.apache.hadoop.conf.Configuration conf, byte[] dummyHeader, HFileContext fileContext); // Create an encoder specific encoding context object for writing.\n\tvoid saveMetadata(HFile.Writer writer); // Save metadata in HFile which will be written to disk\n\tvoid startBlockEncoding(HFileBlockEncodingContext encodingCtx, DataOutputStream out); // Starts encoding for a block of KeyValues.\n\tboolean useEncodedScanner(); // Decides whether we should use a scanner over encoded blocks.\n\tboolean useEncodedScanner(boolean isCompaction);\n}"}
{"index": 17190, "repo": "spring-integration-core-6.1.2", "des": "Implementation of MessageDispatcher that will attempt to send a Message to at most one of its handlers.", "code": "public class UnicastingDispatcher extends AbstractDispatcher {\n\tfinal boolean dispatch(org.springframework.messaging.Message<?> message); // Dispatch the message.\n\tvoid setFailover(boolean failover); // Specify whether this dispatcher should failover when a single MessageHandler throws an Exception.\n\tvoid setLoadBalancingStrategy(LoadBalancingStrategy loadBalancingStrategy); // Provide a LoadBalancingStrategy for this dispatcher.\n\tvoid setMessageHandlingTaskDecorator(MessageHandlingTaskDecorator messageHandlingTaskDecorator);\n}"}
{"index": 4449, "repo": "beam-sdks-java-core-2.49.0", "des": "A PTransform that, when applied to a PCollection<InputT>, invokes a user-specified DoFn<InputT, OutputT> on all its elements, which can emit elements to any of the PTransform's output PCollections, which are bundled into a result PCollectionTuple.", "code": "Class ParDo.MultiOutput<InputT,OutputT> {\n\tPCollectionTuple expand(PCollection<? extends InputT> input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tjava.util.Map<TupleTag<?>,PValue> getAdditionalInputs(); // Returns the side inputs of this ParDo, tagged with the tag of the PCollectionView.\n\tTupleTagList getAdditionalOutputTags();\n\tDoFn<InputT,OutputT> getFn();\n\tprotected java.lang.String getKindString(); // Returns the name to use by default for this PTransform (not including the names of any enclosing PTransforms).\n\tTupleTag<OutputT> getMainOutputTag();\n\tjava.util.Map<java.lang.String,PCollectionView<?>> getSideInputs();\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tParDo.MultiOutput<InputT,OutputT> withSideInput(java.lang.String tagId, PCollectionView<?> pCollectionView); // Returns a new multi-output ParDo PTransform that's like this PTransform but with the specified additional side inputs.\n\tParDo.MultiOutput<InputT,OutputT> withSideInputs(java.lang.Iterable<? extends PCollectionView<?>> sideInputs);\n\tParDo.MultiOutput<InputT,OutputT> withSideInputs(java.util.Map<java.lang.String,PCollectionView<?>> sideInputs); // Returns a new multi-output ParDo PTransform that's like this PTransform but with the specified additional side inputs.\n\tParDo.MultiOutput<InputT,OutputT> withSideInputs(PCollectionView<?>... sideInputs); // Returns a new multi-output ParDo PTransform that's like this PTransform but with the specified additional side inputs.\n}"}
{"index": 11305, "repo": "spring-context-6.0.11", "des": "The various configuration phases where the condition could be evaluated.", "code": "public static enum ConfigurationCondition.ConfigurationPhase extends Enum<ConfigurationCondition.ConfigurationPhase> {\n\tstatic ConfigurationCondition.ConfigurationPhase valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ConfigurationCondition.ConfigurationPhase[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7995, "repo": "commons-jcs3-core-3.1", "des": "This uses an http client as the service.", "code": "Class RemoteHttpCache<K,V> {\n\tString getEventLoggingExtraInfo(); // Gets the extra info for the event log.\n\tRemoteHttpCacheAttributes getRemoteHttpCacheAttributes();\n\tprotected void handleException(Exception ex, String msg, String eventName); // Nothing right now.\n}"}
{"index": 6742, "repo": "commons-rng-simple-1.5", "des": "Uses a long value to seed a SplitMix64 RNG and create a int[] with the requested number of random values.", "code": "Class Long2IntArray {\n\tint[] convert(Long seed); // Converts seed from input type to output type.\n\tint[] convert(Long seed, int outputSize); // Converts seed from input type to output type.\n}"}
{"index": 2066, "repo": "hive-exec-4.0.0-alpha-2", "des": "The base class for building parquet supported filter predicate in primary types.", "code": "Class FilterPredicateLeafBuilder {\n\torg.apache.parquet.filter2.predicate.FilterPredicate buildPredicate(PredicateLeaf.Operator op, List<Object> literals, String columnName, TypeInfo columnType); // Build filter predicate with multiple constants\n\tabstract org.apache.parquet.filter2.predicate.FilterPredicate buildPredict(PredicateLeaf.Operator op, Object constant, String columnName, TypeInfo columnType); // Build predicate with a single constant\n}"}
{"index": 18130, "repo": "jena-querybuilder-4.9.0", "des": "An QuadHolder that manages extracts all statements from a model as quads.", "code": "public class ModelQuadHolder extends Object implements QuadHolder {\n\tExtendedIterator<Quad> getQuads(); // Get an extended iterator over the quads this holder holds.\n\tQuadHolder setValues(Map<Var,Node> values); // This implementation does nothing.\n}"}
{"index": 3826, "repo": "hbase-client-3.0.0-alpha-4", "des": "Simple RpcCallback implementation providing a Future-like BlockingRpcCallback.", "code": "Class CoprocessorRpcUtils.BlockingRpcCallback<R> {\n\tR get(); // Returns the parameter passed to run(Object) or null if a null value was passed.\n\tvoid run(R parameter); // Called on completion of the RPC call with the response object, or null in the case of an error.\n}"}
{"index": 15900, "repo": "spring-rabbit-3.0.6", "des": "Base abstract class for listener container factories.", "code": "public abstract class BaseRabbitListenerContainerFactory<C extends MessageListenerContainer> extends Object implements RabbitListenerContainerFactory<C>, org.springframework.context.ApplicationContextAware {\n\tprotected void applyCommonOverrides(RabbitListenerEndpoint endpoint, C instance);\n\tabstract C createListenerContainer(RabbitListenerEndpoint endpoint); // Create a MessageListenerContainer for the given RabbitListenerEndpoint.\n\torg.aopalliance.aop.Advice[] getAdviceChain();\n\tprotected org.springframework.context.ApplicationContext getApplicationContext();\n\tprotected Boolean getDefaultRequeueRejected(); // Return the defaultRequeueRejected.\n\tprotected Boolean getMicrometerEnabled();\n\tprotected Boolean getObservationEnabled();\n\tvoid setAdviceChain(org.aopalliance.aop.Advice... adviceChain);\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setBeforeSendReplyPostProcessors(org.springframework.amqp.core.MessagePostProcessor... postProcessors); // Set post processors that will be applied before sending replies; added to each message listener adapter.\n\tvoid setDefaultRequeueRejected(Boolean requeueRejected);\n\tvoid setMicrometerEnabled(boolean micrometerEnabled); // Set to false to disable micrometer listener timers.\n\tvoid setObservationEnabled(boolean observationEnabled); // Enable observation via micrometer; disables basic Micrometer timers enabled by setMicrometerEnabled(boolean).\n\tvoid setReplyPostProcessorProvider(Function<String,ReplyPostProcessor> replyPostProcessorProvider); // Set a function to provide a reply post processor; it will be used if there is no replyPostProcessor on the rabbit listener annotation.\n\tvoid setReplyRecoveryCallback(org.springframework.retry.RecoveryCallback<?> recoveryCallback); // Set a RecoveryCallback to invoke when retries are exhausted.\n\tvoid setRetryTemplate(org.springframework.retry.support.RetryTemplate retryTemplate); // Set a RetryTemplate to use when sending replies; added to each message listener adapter.\n}"}
{"index": 14810, "repo": "spring-data-commons-3.1.2", "des": "Converters to potentially wrap the execution of a repository method into a variety of wrapper types potentially being available on the classpath.", "code": "public abstract class QueryExecutionConverters extends Object {\n\tstatic Set<Class<?>> getAllowedPageableTypes(); // Returns the types that are supported on paginating query methods.\n\tstatic QueryExecutionConverters.ExecutionAdapter getExecutionAdapter(Class<?> returnType); // Returns the QueryExecutionConverters.ExecutionAdapter to be used for the given return type.\n\tstatic boolean isSingleValue(Class<?> type);\n\tstatic void registerConvertersIn(ConfigurableConversionService conversionService); // Registers converters for wrapper types found on the classpath.\n\tstatic boolean supports(Class<?> type); // Returns whether the given type is a supported wrapper type.\n\tstatic boolean supportsUnwrapping(Class<?> type); // Returns whether the given wrapper type supports unwrapping.\n\tstatic Object unwrap(Object source); // Unwraps the given source value in case it's one of the currently supported wrapper types detected at runtime.\n\tstatic TypeInformation<?> unwrapWrapperTypes(TypeInformation<?> type); // Recursively unwraps well known wrapper types from the given TypeInformation.\n\tstatic TypeInformation<?> unwrapWrapperTypes(TypeInformation<?> type, TypeInformation<?> reference); // Recursively unwraps well known wrapper types from the given TypeInformation but aborts at the given reference type.\n}"}
{"index": 2911, "repo": "amqp-client-5.18.0", "des": "Catch-all holder class for static helper methods.", "code": "Class Utility {\n\tstatic <E> List<E> copy(List<E> list); // Synchronizes on the list and then returns a copy of the list that is safe to iterate over.\n\tstatic <K,V> Map<K,V> copy(Map<K,V> map); // Synchronizes on the map and then returns a copy of the map that is safe to iterate over.\n\tstatic <E> Set<E> copy(Set<E> set); // Synchronizes on the set and then returns a copy of the set that is safe to iterate over.\n\tstatic <T extends Throwable & SensibleClone<T>>T fixStackTrace(T throwable);\n}"}
{"index": 3632, "repo": "hive-serde-4.0.0-alpha-2", "des": "StructObjectInspector works on struct data that is stored as a Java List or Java Array object.", "code": "Class MetadataListStructObjectInspector {\n\tstatic MetadataListStructObjectInspector getInstance(List<String> columnNames);\n\tstatic MetadataListStructObjectInspector getInstance(List<String> columnNames, List<String> columnComments);\n\tObject getStructFieldData(Object data, StructField fieldRef); // returns null for data = null.\n\tList<Object> getStructFieldsDataAsList(Object data); // returns null for data = null.\n}"}
{"index": 10735, "repo": "spring-tx-6.0.11", "des": "An ApplicationListener that is invoked according to a TransactionPhase.", "code": "public interface TransactionalApplicationListener<E extends org.springframework.context.ApplicationEvent> extends org.springframework.context.ApplicationListener<E>, org.springframework.core.Ordered {\n\tvoid addCallback(TransactionalApplicationListener.SynchronizationCallback callback); // Add a callback to be invoked on processing within transaction synchronization, i.e.\n\tstatic <T> TransactionalApplicationListener<org.springframework.context.PayloadApplicationEvent<T>> forPayload(Consumer<T> consumer); // Create a new TransactionalApplicationListener for the given payload consumer, to be applied in the default phase TransactionPhase.AFTER_COMMIT.\n\tstatic <T> TransactionalApplicationListener<org.springframework.context.PayloadApplicationEvent<T>> forPayload(TransactionPhase phase, Consumer<T> consumer); // Create a new TransactionalApplicationListener for the given payload consumer.\n\tdefault String getListenerId(); // Return an identifier for the listener to be able to refer to it individually.\n\tdefault int getOrder(); // Return the execution order within transaction synchronizations.\n\tdefault TransactionPhase getTransactionPhase(); // Return the TransactionPhase in which the listener will be invoked.\n\tvoid processEvent(E event); // Immediately process the given ApplicationEvent.\n}"}
{"index": 352, "repo": "phoenix-core-5.1.3", "des": "Client for adding cache of one side of a join to region servers.", "code": "Class HashCacheClient {\n\tServerCacheClient.ServerCache addHashCache(ScanRanges keyRanges, byte[] cacheId, ResultIterator iterator, long estimatedSize, List<Expression> onExpressions, boolean singleValueOnly, boolean usePersistentCache, PTable cacheUsingTable, Expression keyRangeRhsExpression, List<Expression> keyRangeRhsValues); // Send the results of scanning through the scanner to all region servers for regions of the table that will use the cache that intersect with the minMaxKeyRange.\n\tboolean addHashCacheToServer(byte[] startkeyOfRegion, ServerCacheClient.ServerCache cache, PTable pTable); // Should only be used to resend the hash table cache to the regionserver.\n\tServerCacheClient.ServerCache createServerCache(byte[] cacheId, QueryPlan delegate); // Creates a ServerCache object for cacheId.\n\tstatic Expression evaluateKeyExpression(Expression keyExpression, Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Evaluate the RHS key expression and wrap the result as a new Expression.\n}"}
{"index": 15207, "repo": "spring-boot-3.1.1", "des": "An enumeration of possible values for configuring the Banner.", "code": "public static enum Banner.Mode extends Enum<Banner.Mode> {\n\tstatic Banner.Mode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Banner.Mode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 1251, "repo": "ignite-core-2.15.0", "des": "Class represents ways of data handling for a file ready to be sent through an opened transmission sender session.", "code": "Enum TransmissionPolicy {\n\tstatic TransmissionPolicy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TransmissionPolicy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2859, "repo": "amqp-client-5.18.0", "des": "Default implementation of a CredentialsProvider which simply holds a static username and password.", "code": "Class DefaultCredentialsProvider {\n\tString getPassword(); // Password/secret/token to use for authentication\n\tString getUsername(); // Username to use for authentication\n}"}
{"index": 12232, "repo": "jena-core-4.9.0", "des": "The interface for visiting (ie type-dispatching) an RDF Node.", "code": "public interface RDFVisitor {\n\tObject visitBlank(Resource r, AnonId id); // Method to call when visiting a blank node r with identifier id.\n\tObject visitLiteral(Literal l); // Method to call when visiting a literal RDF node l.\n\tdefault Object visitStmt(Resource r, Statement statement); // Method to call when visiting a resource with a statement.\n\tObject visitURI(Resource r, String uri); // Method to call when visiting a URI node r with the given uri.\n}"}
{"index": 18760, "repo": "solr-core-9.3.0", "des": "No-op implementation of ClusterEventProducer.", "code": "Class NoOpProducer {\n\tSet<ClusterEvent.EventType> getSupportedEventTypes();\n\tvoid start(); // Start the operation of the component.\n\tvoid stop(); // Stop the operation of the component.\n}"}
{"index": 1210, "repo": "ignite-core-2.15.0", "des": "Difference between current and target configuration.", "code": "Class StatisticsObjectConfiguration.Diff {\n\tSet<String> dropCols(); // Statistics columns to drop.\n\tMap<String,StatisticsColumnConfiguration> updateCols(); // Statistics columns to update.\n}"}
{"index": 3677, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableBooleanObjectInspector inspects a BooleanWritable Object.", "code": "Class WritableBooleanObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tObject create(boolean value); // Create an object with the value.\n\tboolean get(Object o); // Get the boolean data.\n\tObject getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n\tObject set(Object o, boolean value); // Set the object with the value.\n}"}
{"index": 3627, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableStringObjectInspector inspects a Text Object.", "code": "Class LazyStringObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tbyte getEscapeChar();\n\tString getPrimitiveJavaObject(Object o); // Get the String representation of the data.\n\torg.apache.hadoop.io.Text getPrimitiveWritableObject(Object o); // Return the data in an instance of primitive writable Object.\n\tboolean isEscaped();\n}"}
{"index": 5239, "repo": "druid-processing-26.0.0", "des": "Helper used to write field values to row-based frames or RowKey.", "code": "Interface FieldWriter {\n\tvoid close(); // Releases resources held by this writer.\n\tlong writeTo(org.apache.datasketches.memory.WritableMemory memory, long position, long maxSize); // Writes the current selection at the given memory position.\n}"}
{"index": 7285, "repo": "calcite-core-1.34.0", "des": "Aggregate function that can be split into partial aggregates.", "code": "Interface SqlSplittableAggFunction {\n\t@Nullable AggregateCall merge(AggregateCall top, AggregateCall bottom); // Merge top and bottom aggregate calls into a single aggregate call, if they are legit to merge.\n\t@Nullable AggregateCall other(RelDataTypeFactory typeFactory, AggregateCall e); // Called to generate an aggregate for the other side of the join than the side aggregate call's arguments come from.\n\tRexNode singleton(RexBuilder rexBuilder, RelDataType inputRowType, AggregateCall aggregateCall); // Generates an expression for the value of the aggregate function when applied to a single row.\n\tAggregateCall split(AggregateCall aggregateCall, Mappings.TargetMapping mapping);\n\tAggregateCall topSplit(RexBuilder rexBuilder, SqlSplittableAggFunction.Registry<RexNode> extra, int offset, RelDataType inputRowType, AggregateCall aggregateCall, int leftSubTotal, int rightSubTotal); // Generates an aggregate call to merge sub-totals.\n}"}
{"index": 15742, "repo": "camel-api-4.0.0-RC1", "des": "This interface represents a detailed error in case when the verification fails.", "code": "public static interface ComponentVerifierExtension.VerificationError extends Serializable {\n\tstatic ComponentVerifierExtension.VerificationError.Attribute asAttribute(String attribute); // Convert a string to an ComponentVerifierExtension.VerificationError.Attribute\n\tstatic ComponentVerifierExtension.VerificationError.Code asCode(String code); // Convert a string to an ComponentVerifierExtension.VerificationError.Code\n\tComponentVerifierExtension.VerificationError.Code getCode(); // The overall error code, which can be either a ComponentVerifierExtension.VerificationError.StandardCode or a custom code.\n\tString getDescription(); // A human readable description of the error in plain english\n\tdefault Object getDetail(String attribute); // Get a single detail for a given attribute\n\tdefault Object getDetail(ComponentVerifierExtension.VerificationError.Attribute attribute); // Get a single detail for a given attribute\n\tMap<ComponentVerifierExtension.VerificationError.Attribute,Object> getDetails(); // Details about the failed verification.\n\tSet<String> getParameterKeys(); // A set of input parameter names which fails the verification.\n}"}
{"index": 9964, "repo": "commons-text-1.10.0", "des": "Commonly used implementations of CharacterPredicate.", "code": "Enum CharacterPredicates {\n\tstatic CharacterPredicates valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CharacterPredicates[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10294, "repo": "spring-core-6.0.11", "des": "Utility methods for formatting and logging messages.", "code": "public abstract class LogFormatUtils extends Object {\n\tstatic String formatValue(Object value, boolean limitLength); // Convenience variant of formatValue(Object, int, boolean) that limits the length of a log message to 100 characters and also replaces newline and control characters if limitLength is set to \"true\".\n\tstatic String formatValue(Object value, int maxLength, boolean replaceNewlinesAndControlCharacters); // Format the given value via toString(), quoting it if it is a CharSequence, truncating at the specified maxLength, and compacting it into a single line when replaceNewLines is set.\n\tstatic void traceDebug(org.apache.commons.logging.Log logger, Function<Boolean,String> messageFactory); // Use this to log a message with different levels of detail (or different messages) at TRACE vs DEBUG log levels.\n}"}
{"index": 18568, "repo": "hibernate-core-5.6.15.Final", "des": "Describes a plan for performing a load of results.", "code": "Interface LoadPlan {\n\tboolean areLazyAttributesForceFetched(); // Does this load plan indicate that lazy attributes are to be force fetched?\n\tLoadPlan.Disposition getDisposition(); // What is the disposition of this LoadPlan, in terms of its returns.\n\tQuerySpaces getQuerySpaces(); // Gets the QuerySpaces for the load plan, which contains a QuerySpace reference for each non-scalar return and for each entity, collection, and composite FetchSource.\n\tjava.util.List<? extends Return> getReturns(); // Get the returns indicated by this LoadPlan. A LoadPlan.Disposition.ENTITY_LOADER LoadPlan would have just a single Return of type EntityReturn.\n\tboolean hasAnyScalarReturns(); // Convenient form of checking getReturns() for scalar root returns.\n}"}
{"index": 9722, "repo": "commons-math3-3.6.1", "des": "Special implementation of the UnivariateOptimizer interface adding multi-start features to an existing optimizer.", "code": "Class MultiStartUnivariateOptimizer {\n\tprotected UnivariatePointValuePair doOptimize(); // Performs the bulk of the optimization algorithm.\n\tint getEvaluations(); // Gets the number of evaluations of the objective function.\n\tUnivariatePointValuePair[] getOptima(); // Gets all the optima found during the last call to optimize.\n\tUnivariatePointValuePair optimize(OptimizationData... optData); // Stores data and performs the optimization.\n}"}
{"index": 8702, "repo": "curator-client-5.5.0", "des": "Abstracts the policy to use when retrying connections.", "code": "Interface RetryPolicy {\n\tboolean allowRetry(int retryCount, long elapsedTimeMs, RetrySleeper sleeper); // Called when an operation has failed for some reason.\n\tdefault boolean allowRetry(Throwable exception); // Called when an operation has failed with a specific exception.\n}"}
{"index": 8040, "repo": "commons-compress-1.23.0", "des": "A Codec allows a sequence of bytes to be decoded into integer values (or vice versa).", "code": "Class Codec {\n\tabstract int decode(InputStream in); // Decode a sequence of bytes from the given input stream, returning the value as a long.\n\tabstract int decode(InputStream in, long last); // Decode a sequence of bytes from the given input stream, returning the value as a long.\n\tint[] decodeInts(int n, InputStream in); // Decodes a sequence of n values from in.\n\tint[] decodeInts(int n, InputStream in, int firstValue); // Decodes a sequence of n values from in.\n\tabstract byte[] encode(int value); // Encode a single value into a sequence of bytes.\n\tbyte[] encode(int[] ints); // Encode a sequence of integers into a byte array\n\tabstract byte[] encode(int value, int last); // Encode a single value into a sequence of bytes.\n}"}
{"index": 16523, "repo": "spring-batch-infrastructure-5.0.2", "des": "A builder implementation for the RepositoryItemReader.", "code": "public class RepositoryItemReaderBuilder<T> extends Object {\n\tRepositoryItemReaderBuilder<T> arguments(Object... arguments); // Arguments to be passed to the data providing method.\n\tRepositoryItemReaderBuilder<T> arguments(List<?> arguments); // Arguments to be passed to the data providing method.\n\tRepositoryItemReader<T> build(); // Builds the RepositoryItemReader.\n\tRepositoryItemReaderBuilder<T> currentItemCount(int currentItemCount); // Index for the current item.\n\tRepositoryItemReaderBuilder<T> maxItemCount(int maxItemCount); // Configure the max number of items to be read.\n\tRepositoryItemReaderBuilder<T> methodName(String methodName); // Specifies what method on the repository to call.\n\tRepositoryItemReaderBuilder<T> name(String name); // The name used to calculate the key within the ExecutionContext.\n\tRepositoryItemReaderBuilder<T> pageSize(int pageSize); // Establish the pageSize for the generated RepositoryItemReader.\n\tRepositoryItemReaderBuilder<T> repository(org.springframework.data.repository.PagingAndSortingRepository<?,?> repository); // The PagingAndSortingRepository implementation used to read input from.\n\tRepositoryItemReaderBuilder<T> saveState(boolean saveState); // Configure if the state of the ItemStreamSupport should be persisted within the ExecutionContext for restart purposes.\n\tRepositoryItemReaderBuilder<T> sorts(Map<String,org.springframework.data.domain.Sort.Direction> sorts); // Provides ordering of the results so that order is maintained between paged queries.\n}"}
{"index": 15918, "repo": "spring-rabbit-3.0.6", "des": "A ConnectionListener that will declare a single exchange when the connection is established.", "code": "public final class DeclareExchangeConnectionListener extends Object implements ConnectionListener {\n\tvoid onClose(Connection connection); // Called when a connection is closed.\n\tvoid onCreate(Connection connection); // Called when a new connection is established.\n}"}
{"index": 6375, "repo": "spring-data-solr-4.3.15", "des": "Defines a Field that can be used within Criteria.", "code": "Interface Field {\n\tstatic Field distance(String alias); // Create a Field with given alias for the calculated distance.\n\tString getName(); // Get the name of the field used in schema.xml of solr server\n\tstatic Field of(String name); // Create a Field with given name.\n\tstatic Field pivot(String... names); // Create a Field for the given names.\n}"}
{"index": 1352, "repo": "nutch-2.4", "des": "Creates and caches IndexingFilter implementing plugins.", "code": "Class IndexingFilters {\n\tNutchDocument filter(NutchDocument doc, java.lang.String url, WebPage page); // Run all defined filters.\n\tjava.util.Collection<WebPage.Field> getFields(); // Gets all the fields for a given WebPage Many datastores need to setup the mapreduce job by specifying the fields needed.\n}"}
{"index": 10110, "repo": "spring-hateoas-2.1.2", "des": "LinkDiscoverer implementation based on JSON Collection link structure.", "code": "public class CollectionJsonLinkDiscoverer extends JsonPathLinkDiscoverer {\n\tLinks findLinksWithRel(LinkRelation relation, InputStream representation); // Returns all links with the given LinkRelation found in the given InputStream representation.\n\tLinks findLinksWithRel(LinkRelation relation, String representation); // Returns all links with the given LinkRelation found in the given String representation.\n\tOptional<Link> findLinkWithRel(LinkRelation relation, InputStream representation); // Finds a single link with the given LinkRelation in the given InputStream representation.\n\tOptional<Link> findLinkWithRel(LinkRelation relation, String representation); // Finds a single link with the given LinkRelation in the given String representation.\n}"}
{"index": 5090, "repo": "commons-collections-3.2.2", "des": "Closure implementation that calls a Transformer using the input object and ignore the result.", "code": "Class TransformerClosure {\n\tvoid execute(Object input); // Executes the closure by calling the decorated transformer.\n\tstatic Closure getInstance(Transformer transformer); // Factory method that performs validation.\n\tTransformer getTransformer(); // Gets the transformer.\n}"}
{"index": 16998, "repo": "spring-data-r2dbc-3.1.2", "des": "Default ReactiveDataAccessStrategy implementation.", "code": "public class DefaultReactiveDataAccessStrategy extends Object implements ReactiveDataAccessStrategy {\n\tstatic R2dbcConverter createConverter(R2dbcDialect dialect, Collection<?> converters); // Creates a new R2dbcConverter given R2dbcDialect and custom converters.\n\tList<SqlIdentifier> getAllColumns(Class<?> entityType);\n\tParameter getBindValue(Parameter value); // Return a potentially converted Parameter for strategies that support type conversion.\n\tR2dbcConverter getConverter(); // Returns the R2dbcConverter.\n\tList<SqlIdentifier> getIdentifierColumns(Class<?> entityType);\n\tMappingContext<RelationalPersistentEntity<?>,? extends RelationalPersistentProperty> getMappingContext();\n\tOutboundRow getOutboundRow(Object object); // Returns a OutboundRow that maps column names to a Parameter value.\n\t<T> BiFunction<Row,RowMetadata,T> getRowMapper(Class<T> typeToRead); // Returns a row mapping function to map rows to T.\n\tStatementMapper getStatementMapper(); // Returns the R2dbcDialect-specific StatementMapper.\n\tSqlIdentifier getTableName(Class<?> type);\n\tPreparedOperation<?> processNamedParameters(String query, ReactiveDataAccessStrategy.NamedParameterProvider parameterProvider); // Expand named parameters and return a PreparedOperation wrapping the given bindings.\n\tString renderForGeneratedValues(SqlIdentifier identifier); // Render a SqlIdentifier in a way suitable for registering it as a generated key with a statement through Statement#returnGeneratedValues.\n\tString toSql(SqlIdentifier identifier); // Render a SqlIdentifier for SQL usage.\n}"}
{"index": 8788, "repo": "graal-sdk-1.0.0-rc7", "des": "Features allow clients to intercept the native image generation and run custom initialization code at various stages.", "code": "Interface Feature {\n\tdefault void afterAnalysis(Feature.AfterAnalysisAccess access); // Handler for initializations after analysis and before universe creation.\n\tdefault void afterCompilation(Feature.AfterCompilationAccess access); // Handler for initializations after compilation, i.e., before the native image is written.\n\tdefault void afterHeapLayout(Feature.AfterHeapLayoutAccess access); // Handler for initializations after the native image heap and code layout.\n\tdefault void afterImageWrite(Feature.AfterImageWriteAccess access); // Handler for altering the image (or shared object) that the linker command produced.\n\tdefault void afterRegistration(Feature.AfterRegistrationAccess access); // Handler for initializations after all features have been registered and all options have been parsed; but before any initializations for the static analysis have happened.\n\tdefault void beforeAnalysis(Feature.BeforeAnalysisAccess access); // Handler for initializations before the static analysis.\n\tdefault void beforeCompilation(Feature.BeforeCompilationAccess access); // Handler for initializations before compilation.\n\tdefault void beforeImageWrite(Feature.BeforeImageWriteAccess access); // Handler for altering the linker command after the native image has been built and before it is written.\n\tdefault void cleanup(); // Handler for cleanup.\n\tdefault void duringAnalysis(Feature.DuringAnalysisAccess access); // Handler for performing operations during the static analysis.\n\tdefault void duringSetup(Feature.DuringSetupAccess access); // Handler for initializations at startup time.\n\tdefault List<Class<? extends Feature>> getRequiredFeatures(); // Returns the list of features that this feature depends on.\n\tdefault boolean isInConfiguration(Feature.IsInConfigurationAccess access); // This method is called immediately after the constructor, to check whether the feature is part of the configuration or not.\n\tdefault void onAnalysisExit(Feature.OnAnalysisExitAccess access); // Handler for code that needs to run after the analysis, even if an error has occured, e.g., like reporting code.\n}"}
{"index": 5548, "repo": "org.apache.karaf.main-2.4.4", "des": "Bundle Storage interface for managing a persistent storage life cycle operation upon a bundle.", "code": "Interface BundleOperation {\n\tBundleData begin(); // Begin the operation on the bundle (install, update, uninstall).\n\tvoid commit(boolean postpone); // Commit the operation performed.\n\tvoid undo(); // Undo the change to persistent storage.\n}"}
{"index": 6013, "repo": "commons-lang3-3.12.0", "des": "Enumerates NumericEntityUnescaper options for unescaping.", "code": "Enum NumericEntityUnescaper.OPTION {\n\tstatic NumericEntityUnescaper.OPTION valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic NumericEntityUnescaper.OPTION[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16701, "repo": "spring-beans-6.0.11", "des": "FactoryBean that exposes the JDK 1.6 ServiceLoader for the configured service class.", "code": "public class ServiceLoaderFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader); // Determine the actual object to expose for the given ServiceLoader.\n\tClass<?> getObjectType(); // This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n}"}
{"index": 7716, "repo": "cassandra-all-4.1.2", "des": "Builder for PartitionUpdates This class is not thread safe, but the PartitionUpdate it produces is (since it is immutable).", "code": "Class PartitionUpdate.Builder {\n\tvoid add(RangeTombstone range);\n\tvoid add(Row row); // Adds a row to this update.\n\tvoid addPartitionDeletion(DeletionTime deletionTime);\n\tPartitionUpdate build();\n\tRegularAndStaticColumns columns();\n\tTableMetadata metadata();\n\tDecoratedKey partitionKey();\n\tDeletionTime partitionLevelDeletion();\n\tPartitionUpdate.Builder updateAllTimestamp(long newTimestamp); // Modify this update to set every timestamp for live data to newTimestamp and every deletion timestamp to newTimestamp - 1.\n}"}
{"index": 11542, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of a ReactiveOAuth2AuthorizedClientProvider for the client_credentials grant.", "code": "public final class ClientCredentialsReactiveOAuth2AuthorizedClientProvider extends Object implements ReactiveOAuth2AuthorizedClientProvider {\n\treactor.core.publisher.Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizationContext context); // Attempt to authorize (or re-authorize) the client in the provided context.\n\tvoid setAccessTokenResponseClient(ReactiveOAuth2AccessTokenResponseClient<OAuth2ClientCredentialsGrantRequest> accessTokenResponseClient); // Sets the client used when requesting an access token credential at the Token Endpoint for the client_credentials grant.\n\tvoid setClock(Clock clock); // Sets the Clock used in Instant.now(Clock) when checking the access token expiry.\n\tvoid setClockSkew(Duration clockSkew); // Sets the maximum acceptable clock skew, which is used when checking the access token expiry.\n}"}
{"index": 15412, "repo": "spring-security-crypto-6.1.2", "des": "Service interface for symmetric encryption of text strings.", "code": "public interface TextEncryptor {\n\tString decrypt(String encryptedText); // Decrypt the encrypted text string.\n\tString encrypt(String text); // Encrypt the raw text string.\n}"}
{"index": 4083, "repo": "camel-core-3.0.0-RC1", "des": "Routes messages based on a series of predicates.", "code": "Class ChoiceDefinition {\n\tvoid addOutput(ProcessorDefinition<?> output); // Adds the given definition as output to this block\n\tvoid configureChild(ProcessorDefinition<?> output); // Strategy for children to do any custom configuration\n\tProcessorDefinition<?> end(); // Ends the current block\n\tChoiceDefinition endChoice(); // Ends the current block and returns back to the choice() DSL.\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tOtherwiseDefinition getOtherwise();\n\tList<ProcessorDefinition<?>> getOutputs();\n\tString getShortName();\n\tList<WhenDefinition> getWhenClauses();\n\tChoiceDefinition otherwise(); // Sets the otherwise node\n\tvoid setId(String value); // Sets the id of this node\n\tvoid setOtherwise(OtherwiseDefinition otherwise);\n\tvoid setWhenClauses(List<WhenDefinition> whenClauses); // Sets the when clauses\n\tExpressionClause<ChoiceDefinition> when(); // Creates an expression for the when node\n\tChoiceDefinition when(org.apache.camel.Predicate predicate); // Sets the predicate for the when node\n}"}
{"index": 4618, "repo": "commons-vfs2-2.9.0", "des": "An enumerated type that represents a file's type.", "code": "Enum FileType {\n\tString getName(); // Returns the name of this type.\n\tboolean hasAttributes(); // Returns true if files of this type may have attributes.\n\tboolean hasChildren(); // Returns true if files of this type may contain other files.\n\tboolean hasContent(); // Returns true if files of this type may have data content.\n\tstatic FileType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FileType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14684, "repo": "spring-data-commons-3.1.2", "des": "TypeInformationMapper implementation that can be either set up using a MappingContext or manually set up Map of String aliases to types.", "code": "public class ConfigurableTypeInformationMapper extends Object implements TypeInformationMapper {\n\tAlias createAliasFor(TypeInformation<?> type); // Returns the alias to be used for the given TypeInformation.\n\tTypeInformation<?> resolveTypeFrom(Alias alias); // Returns the actual TypeInformation to be used for the given alias.\n}"}
{"index": 3271, "repo": "hbase-common-3.0.0-alpha-4", "des": "A float of 32-bits using a fixed-length encoding.", "code": "Class OrderedFloat32 {\n\tFloat decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tfloat decodeFloat(PositionedByteRange dst); // Read a float value from the buffer dst.\n\tint encode(PositionedByteRange dst, Float val); // Write instance val into buffer dst.\n\tClass<Float> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(Float val); // Inform consumers how long the encoded byte[] will be.\n\tint encodeFloat(PositionedByteRange dst, float val); // Write instance val into buffer buff.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n}"}
{"index": 10714, "repo": "spring-tx-6.0.11", "des": "JTA transaction object, representing a UserTransaction.", "code": "public class JtaTransactionObject extends Object implements SmartTransactionObject {\n\tvoid flush(); // This implementation triggers flush callbacks, assuming that they will flush all affected ORM sessions.\n\tfinal UserTransaction getUserTransaction(); // Return the JTA UserTransaction object for the current transaction.\n\tboolean isRollbackOnly(); // This implementation checks the UserTransaction's rollback-only flag.\n}"}
{"index": 17536, "repo": "pulsar-broker-3.0.0", "des": "Defines the information required for a service unit split(e.g.", "code": "public record Split(String serviceUnit, String sourceBroker, Map<String,Optional<String>> splitServiceUnitToDestBroker) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString serviceUnit(); // Returns the value of the serviceUnit record component.\n\tString sourceBroker(); // Returns the value of the sourceBroker record component.\n\tMap<String,Optional<String>> splitServiceUnitToDestBroker(); // Returns the value of the splitServiceUnitToDestBroker record component.\n}"}
{"index": 4675, "repo": "commons-geometry-core-1.0", "des": "Class containing the basic algorithm for merging two AbstractBSPTree instances.", "code": "Class AbstractBSPTreeMergeOperator<P extends Point<P>,N extends AbstractBSPTree.AbstractNode<P,N>> {\n\tprotected AbstractBSPTree<P,N> getOutputTree(); // Get the tree used as output for this instance.\n\tprotected abstract N mergeLeaf(N node1, N node2); // Merge a leaf node from one input with a subtree from another.\n\tprotected N outputNode(); // Create a new node in the output tree.\n\tprotected N outputSubtree(N node); // Place the subtree rooted at the given input node into the output tree.\n\tprotected void performMerge(AbstractBSPTree<P,N> input1, AbstractBSPTree<P,N> input2, AbstractBSPTree<P,N> output); // Perform a merge operation with the two input trees and store the result in the output tree.\n\tprotected void setOutputTree(AbstractBSPTree<P,N> outputTree); // Set the tree used as output for this instance.\n}"}
{"index": 4841, "repo": "hadoop-common-3.3.4", "des": "Container class which holds a list of ip/host addresses and answers membership queries.", "code": "Class MachineList {\n\tCollection<String> getCollection(); // returns the contents of the MachineList as a Collection<String> .\n\tboolean includes(InetAddress address); // Accepts an inet address and return true if address is in the list.\n\tboolean includes(String ipAddress); // Accepts an ip address and return true if ipAddress is in the list.\n}"}
{"index": 6924, "repo": "calcite-core-1.34.0", "des": "Rule that converts a values operator to JDBC.", "code": "Class JdbcRules.JdbcValuesRule {\n\t@Nullable RelNode convert(RelNode rel); // Converts a relational expression to the target trait(s) of this rule.\n\tstatic JdbcRules.JdbcValuesRule create(JdbcConvention out); // Creates a JdbcValuesRule.\n}"}
{"index": 2055, "repo": "hive-exec-4.0.0-alpha-2", "des": "ExecDriver is the central class in co-ordinating execution of any map-reduce task.", "code": "Class ExecDriver {\n\tboolean checkFatalErrors(org.apache.hadoop.mapred.Counters ctrs, StringBuilder errMsg); // Fatal errors are those errors that cannot be recovered by retries.\n\tint execute(); // Execute a query plan using Hadoop.\n\tstatic String generateCmdLine(HiveConf hconf, Context ctx); // Given a Hive Configuration object - generate a command line fragment for passing such configuration information to ExecDriver.\n\tString getExternalHandle();\n\tCollection<MapWork> getMapWork();\n\tString getName();\n\tprotected static String getResource(HiveConf conf, SessionState.ResourceType resType); // Retrieve the resources from the current session and configuration for the given type.\n\tCollection<Operator<? extends OperatorDesc>> getTopOperators();\n\tStageType getType(); // Should be overridden to return the type of the specific task among the types in StageType.\n\tboolean hasReduce();\n\tvoid initialize(QueryState queryState, QueryPlan queryPlan, TaskQueue taskQueue, Context context); // Initialization when invoked from QL.\n\tboolean isMapRedTask();\n\tboolean isTaskShutdown();\n\tvoid logPlanProgress(SessionState ss);\n\tstatic void main(String[] args);\n\tboolean mapDone();\n\tboolean mapStarted();\n\tstatic void propagateSplitSettings(org.apache.hadoop.mapred.JobConf job, MapWork work);\n\tboolean reduceDone();\n\tboolean reduceStarted();\n\tboolean requireLock();\n\tprotected void setInputAttributes(org.apache.hadoop.conf.Configuration conf); // Set hive input format, and input format file if necessary.\n\tvoid shutdown();\n}"}
{"index": 16138, "repo": "spring-data-cassandra-4.1.2", "des": "Cassandra specific PersistentProperty extension.", "code": "public interface CassandraPersistentProperty extends PersistentProperty<CassandraPersistentProperty>, ApplicationContextAware {\n\tAnnotatedType findAnnotatedType(Class<? extends Annotation> annotationType); // Find an AnnotatedType by annotationType derived from the property type.\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getColumnName(); // The name of the single column to which the property is persisted.\n\tInteger getOrdinal(); // The name of the element ordinal to which the property is persisted when the owning type is a mapped tuple.\n\tOrdering getPrimaryKeyOrdering(); // The ordering (ascending or descending) for the column.\n\tdefault com.datastax.oss.driver.api.core.CqlIdentifier getRequiredColumnName(); // The name of the single column to which the property is persisted.\n\tdefault int getRequiredOrdinal(); // The required element ordinal to which the property is persisted when the owning type is a mapped tuple.\n\tboolean hasExplicitColumnName(); // Return whether the property has an explicitly configured column name.\n\tdefault boolean hasOrdinal(); // Determines whether this CassandraPersistentProperty is persisted (mapped) to an element ordinal when the owning type is a mapped tuple.\n\tboolean isClusterKeyColumn(); // Whether the property is a cluster key column.\n\tboolean isCompositePrimaryKey(); // Whether the property is a composite primary key.\n\tdefault boolean isEmbedded();\n\tboolean isMapLike(); // Returns whether the property is a Map.\n\tboolean isPartitionKeyColumn(); // Whether the property is a partition key column.\n\tboolean isPrimaryKeyColumn(); // Whether the property is a partition key column or a cluster key column\n\tboolean isStaticColumn(); // Whether the property maps to a static column.\n\tvoid setColumnName(com.datastax.oss.driver.api.core.CqlIdentifier columnName); // If this property is mapped with a single column, set the column name to the given CqlIdentifier.\n\tdefault void setColumnName(CqlIdentifier columnName); // Deprecated. since 3.0, use setColumnName(CqlIdentifier).\n\tvoid setForceQuote(boolean forceQuote); // Deprecated. since 3.0.\n}"}
{"index": 16184, "repo": "spring-data-cassandra-4.1.2", "des": "Simple SessionFactoryLookup implementation that relies on a map for doing lookups.", "code": "public class MapSessionFactoryLookup extends Object implements SessionFactoryLookup {\n\tvoid addSessionFactory(String sessionFactoryName, SessionFactory sessionFactory); // Add the supplied SessionFactory to the map of session factories maintained by this object.\n\tMap<String,SessionFactory> getSessionFactories(); // Get the Map of session factories maintained by this object.\n\tSessionFactory getSessionFactory(String sessionFactoryName); // Implementations must implement this method to retrieve the SessionFactory identified by the given name from their backing store.\n\tvoid setSessionFactories(Map<String,SessionFactory> sessionFactories); // Set the Map of session factories; the keys are Strings, the values are actual SessionFactory instances.\n}"}
{"index": 630, "repo": "ignite-core-2.15.0", "des": "API for configuring continuous cache queries with transformer.", "code": "Class ContinuousQueryWithTransformer<K,V,T> {\n\tContinuousQueryWithTransformer.EventListener<T> getLocalListener(); // Gets local transformed event listener\n\tjavax.cache.configuration.Factory<? extends IgniteClosure<javax.cache.event.CacheEntryEvent<? extends K,? extends V>,T>> getRemoteTransformerFactory(); // Gets remote transformer factory\n\tContinuousQueryWithTransformer<K,V,T> setAutoUnsubscribe(boolean autoUnsubscribe); // Sets automatic unsubscribe flag.\n\tContinuousQueryWithTransformer<K,V,T> setInitialQuery(Query<javax.cache.Cache.Entry<K,V>> initQry); // Sets initial query.\n\tContinuousQueryWithTransformer<K,V,T> setLocal(boolean loc); // Sets whether this query should be executed on local node only.\n\tContinuousQueryWithTransformer<K,V,T> setLocalListener(ContinuousQueryWithTransformer.EventListener<T> locLsnr); // Sets local callback.\n\tContinuousQueryWithTransformer<K,V,T> setPageSize(int pageSize); // Sets optional page size, if 0, then default is used.\n\tContinuousQueryWithTransformer<K,V,T> setRemoteFilterFactory(javax.cache.configuration.Factory<? extends javax.cache.event.CacheEntryEventFilter<K,V>> rmtFilterFactory); // Sets optional key-value filter factory.\n\tContinuousQueryWithTransformer<K,V,T> setRemoteTransformerFactory(javax.cache.configuration.Factory<? extends IgniteClosure<javax.cache.event.CacheEntryEvent<? extends K,? extends V>,T>> factory); // Sets transformer factory.\n\tContinuousQueryWithTransformer<K,V,T> setTimeInterval(long timeInterval); // Sets time interval.\n}"}
{"index": 4529, "repo": "beam-sdks-java-core-2.49.0", "des": "The interface that readers of custom input sources must implement.", "code": "Class Source.Reader<T> {\n\tabstract boolean advance(); // Advances the reader to the next valid record.\n\tabstract void close(); // Closes the reader.\n\tabstract T getCurrent(); // Returns the value of the data item that was read by the last start() or advance() call.\n\tabstract Source<T> getCurrentSource(); // Returns a Source describing the same input that this Reader currently reads (including items already read).\n\tabstract org.joda.time.Instant getCurrentTimestamp(); // Returns the timestamp associated with the current data item.\n\tabstract boolean start(); // Initializes the reader and advances the reader to the first record.\n}"}
{"index": 12644, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationExpression for $indexOfArray.", "code": "public static class ArrayOperators.IndexOfArray extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tstatic ArrayOperators.IndexOfArray.IndexOfArrayBuilder arrayOf(String fieldReference); // Start creating new ArrayOperators.IndexOfArray.\n\tstatic ArrayOperators.IndexOfArray.IndexOfArrayBuilder arrayOf(Collection<?> values); // Start creating new ArrayOperators.IndexOfArray.\n\tstatic ArrayOperators.IndexOfArray.IndexOfArrayBuilder arrayOf(AggregationExpression expression); // Start creating new ArrayOperators.IndexOfArray.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n\tArrayOperators.IndexOfArray within(Range<Long> range); // Lookup within a given range.\n}"}
{"index": 1878, "repo": "hadoop-hdfs-3.3.6", "des": "Lists the types of file system operations.", "code": "Enum FileIoProvider.OPERATION {\n\tstatic FileIoProvider.OPERATION valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FileIoProvider.OPERATION[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17180, "repo": "spring-integration-core-6.1.2", "des": "User of the pool provide an implementation of this interface; called during various pool operations.", "code": "public static interface SimplePool.PoolItemCallback<T> {\n\tT createForPool(); // Called by the pool when a new instance is required to populate the pool.\n\tboolean isStale(T item); // Called by the pool when an idle item is retrieved from the pool.\n\tvoid removedFromPool(T item); // Called by the pool when an item is forcibly removed from the pool - for example when the pool size is reduced.\n}"}
{"index": 11940, "repo": "maven-core-4.0.0-alpha-7", "des": "Provides basic services to manage Maven plugins and their mojos.", "code": "public interface MavenPluginManager {\n\tvoid checkPrerequisites(PluginDescriptor pluginDescriptor); // Verifies that the specified plugin's prerequisites are met.\n\tvoid checkRequiredMavenVersion(PluginDescriptor pluginDescriptor); // Deprecated. Use checkPrerequisites(PluginDescriptor) instead.\n\t<T> T getConfiguredMojo(Class<T> mojoInterface, MavenSession session, MojoExecution mojoExecution); // Looks up the mojo for the specified mojo execution and populates its parameters from the configuration given by the mojo execution.\n\tMojoDescriptor getMojoDescriptor(Plugin plugin, String goal, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Retrieves the descriptor for the specified plugin goal from the plugin's main artifact.\n\tPluginDescriptor getPluginDescriptor(Plugin plugin, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Retrieves the descriptor for the specified plugin from its main artifact.\n\tvoid releaseMojo(Object mojo, MojoExecution mojoExecution); // Releases the specified mojo back to the container.\n\tExtensionRealmCache.CacheRecord setupExtensionsRealm(MavenProject project, Plugin plugin, org.eclipse.aether.RepositorySystemSession session); // Sets up class realm for the specified build extensions plugin.\n\tvoid setupPluginRealm(PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent, List<String> imports, org.eclipse.aether.graph.DependencyFilter filter); // Sets up the class realm for the specified plugin.\n}"}
{"index": 18462, "repo": "opencms-core-15.0", "des": "The interface a field facet configuration must implement.", "code": "Interface I_CmsSearchConfigurationFacetRange {\n\tjava.lang.String getEnd(); // Returns the value of facet.range.end for the facet.\n\tjava.lang.String getGap(); // Returns the value of facet.range.gap for the facet.\n\tboolean getHardEnd(); // Returns the value of facet.range.hardend for the facet.\n\tjava.util.Collection<I_CmsSearchConfigurationFacetRange.Other> getOther(); // Returns the values of facet.range.other for the facet.\n\tjava.lang.String getRange(); // Returns the numeric index field that is used for the facet, i.e., the value of facet.range.\n\tjava.lang.String getStart(); // Returns the value of facet.range.start for the facet.\n}"}
{"index": 915, "repo": "ignite-core-2.15.0", "des": "Iterator over supplied data for rebalancing.", "code": "Interface IgniteRebalanceIterator {\n\tboolean historical(int partId);\n\tboolean isPartitionDone(int partId);\n\tboolean isPartitionMissing(int partId);\n\tCacheDataRow peek(); // Return next element without moving iterator cursor to the next one.\n\tvoid setPartitionMissing(int partId); // Marks partition as missing.\n}"}
{"index": 5558, "repo": "org.apache.karaf.main-2.4.4", "des": "URLConnection for BundleClassLoader resources.", "code": "Class BundleURLConnection {\n\tvoid connect();\n\tint getContentLength();\n\tString getContentType();\n\tboolean getDoInput();\n\tboolean getDoOutput();\n\tURL getFileURL(); // Converts the URL to a URL that uses the file: protocol.\n\tInputStream getInputStream();\n\tlong getLastModified();\n\tURL getLocalURL(); // Converts the URL to a common local URL protocol (i.e file: or jar: protocol)\n}"}
{"index": 1224, "repo": "ignite-core-2.15.0", "des": "Utility class for quick iteration over row properties.", "code": "Interface SystemViewRowAttributeWalker<R> {\n\tint count();\n\tdefault List<String> filtrableAttributes();\n\tvoid visitAll(R row, SystemViewRowAttributeWalker.AttributeWithValueVisitor visitor); // Calls visitor for each row attribute.\n\tvoid visitAll(SystemViewRowAttributeWalker.AttributeVisitor visitor); // Calls visitor for each row attribute.\n}"}
{"index": 2933, "repo": "tink-1.10.0", "des": "The primitive implements AES counter mode with random IVs, using JCE.", "code": "Class AesCtrJceCipher {\n\tbyte[] decrypt(byte[] ciphertext); // Decrypts the ciphertext with counter mode decryption.\n\tbyte[] encrypt(byte[] plaintext); // Encrypts the plaintext with counter mode encryption using randomly generated iv.\n}"}
{"index": 3487, "repo": "mahout-mr-0.13.0", "des": "This interface is used for objects which can determine a distance metric between two points.", "code": "Interface DistanceMeasure {\n\tdouble distance(double centroidLengthSquare, Vector centroid, Vector v); // Optimized version of distance metric for sparse vectors.\n\tdouble distance(Vector v1, Vector v2); // Returns the distance metric applied to the arguments\n}"}
{"index": 154, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns true if the input is the same object as the one stored in this predicate.", "code": "Class IdentityPredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning true if the input object is identical to the stored object.\n\tT getValue(); // Gets the value.\n\tstatic <T> Predicate<T> identityPredicate(T object); // Factory to create the identity predicate.\n}"}
{"index": 12606, "repo": "maven-embedder-4.0.0-alpha-7", "des": "Use an SLF4J ILoggerFactory as a backing for a Plexus LoggerManager, ignoring Plexus logger API parts that are not classical and probably not really used.", "code": "public class Slf4jLoggerManager extends Object implements org.codehaus.plexus.logging.LoggerManager {\n\tint getActiveLoggerCount(); // Warning: ignored (always return 0).\n\torg.codehaus.plexus.logging.Logger getLoggerForComponent(String role);\n\torg.codehaus.plexus.logging.Logger getLoggerForComponent(String role, String hint); // The logger name for a component with a non-null hint is role.hint.\n\tint getThreshold(); // Warning: ignored (always return 0).\n\tvoid returnComponentLogger(String role); // Warning: ignored.\n\tvoid returnComponentLogger(String role, String hint); // Warning: ignored.\n\tvoid setThreshold(int threshold); // Warning: ignored.\n\tvoid setThresholds(int threshold); // Warning: ignored.\n}"}
{"index": 18771, "repo": "lucene-analysis-common-9.7.0", "des": "Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.", "code": "Class CommonGramsQueryFilter {\n\tboolean incrementToken(); // Output bigrams whenever possible to optimize queries.\n\tboolean isGramType(); // Convenience method to check if the current type is a gram type\n\tvoid reset();\n}"}
{"index": 8183, "repo": "spring-ws-3.0.10.RELEASE", "des": "EndpointMapping implement that adds SOAP actors or roles to a delegate endpoint.", "code": "Class DelegatingSoapEndpointMapping {\n\tvoid afterPropertiesSet();\n\tEndpointInvocationChain getEndpoint(MessageContext messageContext); // Creates a new SoapEndpointInvocationChain based on the delegate endpoint, the delegate interceptors, and set actors/roles.\n\tvoid setActorOrRole(String actorOrRole); // Sets a single SOAP actor/actorOrRole to apply to all endpoints mapped by the delegate endpoint mapping.\n\tvoid setActorsOrRoles(String[] actorsOrRoles); // Sets the array of SOAP actors/actorsOrRoles to apply to all endpoints mapped by the delegate endpoint mapping.\n\tvoid setDelegate(EndpointMapping delegate); // Sets the delegate EndpointMapping to resolve the endpoint with.\n\tvoid setUltimateReceiver(boolean ultimateReceiver); // Indicates whether this the endpoint fulfills the SOAP 1.2 Ultimate Receiver role.\n}"}
{"index": 10461, "repo": "groovy-all-4.0.13", "des": "Transforms expressions in a whole class.", "code": "public abstract class ClassCodeExpressionTransformer extends ClassCodeVisitorSupport implements ExpressionTransformer {\n\tprotected static void setSourcePosition(Expression toSet, Expression origNode); // Set the source position of toSet including its property expression if it has one.\n\tExpression transform(Expression expr); // NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tprotected void visitAnnotation(AnnotationNode node);\n\tvoid visitAssertStatement(AssertStatement stmt);\n\tvoid visitCaseStatement(CaseStatement stmt);\n\tprotected void visitConstructorOrMethod(MethodNode node, boolean isConstructor);\n\tvoid visitDoWhileLoop(DoWhileStatement stmt);\n\tvoid visitExpressionStatement(ExpressionStatement stmt);\n\tvoid visitField(FieldNode node); // Visit a FieldNode.\n\tvoid visitForLoop(ForStatement stmt);\n\tvoid visitIfElse(IfStatement stmt);\n\tvoid visitProperty(PropertyNode node); // Visit a PropertyNode.\n\tvoid visitReturnStatement(ReturnStatement stmt);\n\tvoid visitSwitch(SwitchStatement stmt);\n\tvoid visitSynchronizedStatement(SynchronizedStatement stmt);\n\tvoid visitThrowStatement(ThrowStatement stmt);\n\tvoid visitWhileLoop(WhileStatement stmt);\n}"}
{"index": 9712, "repo": "commons-math3-3.6.1", "des": "Returns the median of the available values.", "code": "Class Median {\n\tMedian withEstimationType(Percentile.EstimationType newEstimationType); // Build a new instance similar to the current one except for the estimation type.\n\tMedian withKthSelector(KthSelector newKthSelector); // Build a new instance similar to the current one except for the kthSelector instance specifically set.\n\tMedian withNaNStrategy(NaNStrategy newNaNStrategy); // Build a new instance similar to the current one except for the NaN handling strategy.\n}"}
{"index": 12861, "repo": "spring-data-mongodb-4.1.2", "des": "Encapsulates the aggregation framework $replaceRoot-operation to result in a composable replacement document.", "code": "public static class ReplaceRootOperation.ReplaceRootDocumentOperation extends ReplaceRootOperation {\n\tReplaceRootOperation.ReplaceRootDocumentOperationBuilder and(AggregationExpression aggregationExpression); // Creates a new ReplaceRootOperation.ReplaceRootDocumentOperationBuilder to define a field for the AggregationExpression.\n\tReplaceRootOperation.ReplaceRootDocumentOperationBuilder andValue(Object value); // Creates a new ReplaceRootOperation.ReplaceRootDocumentOperationBuilder to define a field for the value.\n\tReplaceRootOperation.ReplaceRootDocumentOperation andValuesOf(Object value); // Creates a new ReplaceRootOperation.ReplaceRootDocumentOperation that merges all existing replacement values with values from value.\n}"}
{"index": 11790, "repo": "bedrock-core-7.0.2", "des": "An immutable sequence of values, each potentially of a different type.", "code": "public interface Tuple {\n\tObject get(int index); // Obtains the value at the specified index.\n\tint size(); // Obtains the number of values in the Tuple.\n}"}
{"index": 8251, "repo": "spring-ws-3.0.10.RELEASE", "des": "Factory methods for RequestCreator classes.", "code": "Class RequestCreators {\n\tstatic RequestCreator withPayload(org.springframework.core.io.Resource payload); // Create a request with the given Resource XML as payload.\n\tstatic RequestCreator withPayload(Source payload); // Create a request with the given Source XML as payload.\n\tstatic RequestCreator withSoapEnvelope(org.springframework.core.io.Resource soapEnvelope); // Create a request with the given Resource XML as SOAP envelope.\n\tstatic RequestCreator withSoapEnvelope(Source soapEnvelope); // Create a request with the given Source XML as SOAP envelope.\n}"}
{"index": 4533, "repo": "beam-sdks-java-core-2.49.0", "des": "A Coder that wraps a Coder<String> and encodes/decodes values via string representations.", "code": "Class StringDelegateCoder<T> {\n\tT decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tT decode(java.io.InputStream inStream, Coder.Context context); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(T value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tvoid encode(T value, java.io.OutputStream outStream, Coder.Context context); // Encodes the given value of type T onto the given output stream in the given context.\n\tboolean equals(@Nullable java.lang.Object o);\n\tTypeDescriptor<T> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tstatic <T> StringDelegateCoder<T> of(java.lang.Class<T> clazz);\n\tstatic <T> StringDelegateCoder<T> of(java.lang.Class<T> clazz, TypeDescriptor<T> typeDescriptor);\n\tjava.lang.Object structuralValue(T value); // Returns an object with an Object.equals() method that represents structural equality on the argument.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 9327, "repo": "hadoop-yarn-api-3.3.6", "des": "ContainerStatus represents the current status of a Container.", "code": "Class ContainerStatus {\n\tResource getCapability(); // Get the Resource allocated to the container.\n\tabstract ContainerId getContainerId(); // Get the ContainerId of the container.\n\tContainerSubState getContainerSubState(); // Get Extra state information of the container (SCHEDULED, LOCALIZING etc.).\n\tabstract String getDiagnostics(); // Get diagnostic messages for failed containers.\n\tExecutionType getExecutionType(); // Get the ExecutionType of the container.\n\tabstract int getExitStatus(); // Get the exit status for the container.\n\tString getExposedPorts(); // Get exposed ports of the container.\n\tString getHost(); // Get the hostname where the container runs.\n\tList<String> getIPs(); // Get all the IP addresses with which the container run.\n\tabstract ContainerState getState(); // Get the ContainerState of the container.\n\tstatic ContainerStatus newInstance(ContainerId containerId, ContainerState containerState, String diagnostics, int exitStatus);\n\tstatic ContainerStatus newInstance(ContainerId containerId, ExecutionType executionType, ContainerState containerState, String diagnostics, int exitStatus);\n\tvoid setCapability(Resource capability);\n\tabstract void setContainerId(ContainerId containerId);\n\tvoid setContainerSubState(ContainerSubState subState); // Add Extra state information of the container (SCHEDULED, LOCALIZING etc.).\n\tabstract void setDiagnostics(String diagnostics);\n\tvoid setExecutionType(ExecutionType executionType);\n\tabstract void setExitStatus(int exitStatus);\n\tvoid setExposedPorts(String ports);\n\tvoid setHost(String host);\n\tvoid setIPs(List<String> ips);\n\tabstract void setState(ContainerState state);\n}"}
{"index": 1430, "repo": "pdfbox-3.0.0-beta1", "des": "EMC : Ends a marked-content sequence begun by BMC or BDC.", "code": "Class EndMarkedContentSequence {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> arguments); // Process the operator.\n}"}
{"index": 15078, "repo": "spring-vault-core-3.0.4", "des": "Event-based container to request secrets from Vault and renew the associated Lease.", "code": "public class SecretLeaseContainer extends SecretLeaseEventPublisher implements InitializingBean, DisposableBean {\n\tRequestedSecret addRequestedSecret(RequestedSecret requestedSecret); // Add a RequestedSecret.\n\tvoid afterPropertiesSet();\n\tvoid destroy(); // Shutdown this SecretLeaseContainer, disable lease renewal and revoke leases.\n\tprotected VaultResponseSupport<Map<String,Object>> doGetSecrets(RequestedSecret requestedSecret); // Retrieve secrets from VaultOperations.\n\tprotected Lease doRenewLease(RequestedSecret requestedSecret, Lease lease); // Renew a Lease for a RequestedSecret.\n\tprotected void doRevokeLease(RequestedSecret requestedSecret, Lease lease); // Revoke the Lease.\n\tDuration getExpiryThreshold();\n\tint getExpiryThresholdSeconds();\n\tDuration getMinRenewal();\n\tint getMinRenewalSeconds();\n\tprotected void onLeaseExpired(RequestedSecret requestedSecret, Lease lease); // Hook method called when a Lease expires.\n\tboolean renew(RequestedSecret secret); // Renew a secret.\n\tRequestedSecret requestRenewableSecret(String path); // Request a renewable secret at path.\n\tRequestedSecret requestRotatingSecret(String path); // Request a rotating secret at path.\n\tvoid rotate(RequestedSecret secret); // Rotate a secret.\n\tvoid setExpiryThreshold(Duration expiryThreshold); // Set the expiry threshold.\n\tvoid setLeaseEndpoints(LeaseEndpoints leaseEndpoints); // Set the LeaseEndpoints to delegate renewal/revocation calls to.\n\tvoid setLeaseStrategy(LeaseStrategy leaseStrategy); // Set the LeaseStrategy for lease renewal error handling.\n\tvoid setMinRenewal(Duration minRenewal); // Sets the amount Duration that is at least required before renewing a lease.\n\tvoid setTaskScheduler(TaskScheduler taskScheduler); // Sets the TaskScheduler to use for scheduling and execution of lease renewals.\n\tvoid start(); // Start the SecretLeaseContainer.\n\tvoid stop(); // Stop the SecretLeaseContainer.\n}"}
{"index": 17755, "repo": "spring-web-6.0.11", "des": "Filter that converts posted method parameters into HTTP methods, retrievable via HttpServletRequest.getMethod().", "code": "public class HiddenHttpMethodFilter extends OncePerRequestFilter {\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain); // Same contract as for doFilter, but guaranteed to be just invoked once per request within a single request thread.\n\tvoid setMethodParam(String methodParam); // Set the parameter name to look for HTTP methods.\n}"}
{"index": 15320, "repo": "spring-boot-3.1.1", "des": "A filter for excluding types from method validation.", "code": "public interface MethodValidationExcludeFilter {\n\tstatic MethodValidationExcludeFilter byAnnotation(Class<? extends Annotation> annotationType); // Factory method to create a MethodValidationExcludeFilter that excludes classes by annotation found using an inherited annotations search strategy.\n\tstatic MethodValidationExcludeFilter byAnnotation(Class<? extends Annotation> annotationType, org.springframework.core.annotation.MergedAnnotations.SearchStrategy searchStrategy); // Factory method to create a MethodValidationExcludeFilter that excludes classes by annotation found using the given search strategy.\n\tboolean isExcluded(Class<?> type); // Evaluate whether to exclude the given type from method validation.\n}"}
{"index": 18662, "repo": "opencms-gwt-15.0", "des": "Sitemap context menu remove from navigation entry.", "code": "Class CmsRemoveMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 7840, "repo": "cassandra-all-4.1.2", "des": "Base class for codecs mapping CQL tuples to Java objects.", "code": "Class TypeCodec.AbstractTupleCodec<T> {\n\tboolean accepts(DataType cqlType); // Return true if this codec is capable of deserializing the given cqlType.\n\tT deserialize(java.nio.ByteBuffer bytes, ProtocolVersion protocolVersion); // Deserialize the given ByteBuffer instance according to the CQL type handled by this codec.\n\tprotected abstract T deserializeAndSetField(java.nio.ByteBuffer input, T target, int index, ProtocolVersion protocolVersion); // Deserialize an individual field and set it on an object, as part of deserializing the whole object from a CQL tuple (see deserialize(ByteBuffer, ProtocolVersion)).\n\tjava.lang.String format(T value); // Format the given value as a valid CQL literal according to the CQL type handled by this codec.\n\tprotected abstract java.lang.String formatField(T source, int index); // Format an individual field in an object as a CQL literal, as part of formatting the whole object (see format(Object)).\n\tprotected abstract T newInstance(); // Return a new instance of T.\n\tT parse(java.lang.String value); // Parse the given CQL literal into an instance of the Java type handled by this codec.\n\tprotected abstract T parseAndSetField(java.lang.String input, T target, int index); // Parse an individual field and set it on an object, as part of parsing the whole object (see parse(String)).\n\tjava.nio.ByteBuffer serialize(T value, ProtocolVersion protocolVersion); // Serialize the given value according to the CQL type handled by this codec.\n\tprotected abstract java.nio.ByteBuffer serializeField(T source, int index, ProtocolVersion protocolVersion); // Serialize an individual field in an object, as part of serializing the whole object to a CQL tuple (see serialize(Object, ProtocolVersion)).\n}"}
{"index": 16900, "repo": "spring-security-oauth2-core-6.1.2", "des": "Core interface representing an OAuth 2.0 Token.", "code": "public interface OAuth2Token {\n\tdefault Instant getExpiresAt(); // Returns the expiration time on or after which the token MUST NOT be accepted.\n\tdefault Instant getIssuedAt(); // Returns the time at which the token was issued.\n\tString getTokenValue(); // Returns the token value.\n}"}
{"index": 16584, "repo": "spring-beans-6.0.11", "des": "Utility methods that are useful for bean definition reader implementations.", "code": "public abstract class BeanDefinitionReaderUtils extends Object {\n\tstatic AbstractBeanDefinition createBeanDefinition(String parentName, String className, ClassLoader classLoader); // Create a new GenericBeanDefinition for the given parent name and class name, eagerly loading the bean class if a ClassLoader has been specified.\n\tstatic String generateBeanName(BeanDefinition beanDefinition, BeanDefinitionRegistry registry); // Generate a bean name for the given top-level bean definition, unique within the given bean factory.\n\tstatic String generateBeanName(BeanDefinition definition, BeanDefinitionRegistry registry, boolean isInnerBean); // Generate a bean name for the given bean definition, unique within the given bean factory.\n\tstatic void registerBeanDefinition(BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry); // Register the given bean definition with the given bean factory.\n\tstatic String registerWithGeneratedName(AbstractBeanDefinition definition, BeanDefinitionRegistry registry); // Register the given bean definition with a generated name, unique within the given bean factory.\n\tstatic String uniqueBeanName(String beanName, BeanDefinitionRegistry registry); // Turn the given bean name into a unique bean name for the given bean factory, appending a unique counter as suffix if necessary.\n}"}
{"index": 14975, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An Authentication implementation for the Device Authorization Request used in the OAuth 2.0 Device Authorization Grant.", "code": "public class OAuth2DeviceAuthorizationRequestAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters.\n\tString getAuthorizationUri(); // Returns the authorization URI.\n\tObject getCredentials();\n\torg.springframework.security.oauth2.core.OAuth2DeviceCode getDeviceCode(); // Returns the device code.\n\tObject getPrincipal();\n\tSet<String> getScopes(); // Returns the requested scope(s).\n\torg.springframework.security.oauth2.core.OAuth2UserCode getUserCode(); // Returns the user code.\n}"}
{"index": 8493, "repo": "commons-io-2.13.0", "des": "Compare two files using a set of delegate file Comparator.", "code": "Class CompositeFileComparator {\n\tint compare(File file1, File file2); // Compares the two files using delegate comparators.\n\tFile[] sort(File... files); // Sorts an array of files.\n\tList<File> sort(List<File> files); // Sorts a List of files.\n}"}
{"index": 16977, "repo": "spring-orm-6.0.11", "des": "Spring web request interceptor that binds a Hibernate Session to the thread for the entire processing of the request.", "code": "public class OpenSessionInViewInterceptor extends Object implements org.springframework.web.context.request.AsyncWebRequestInterceptor {\n\tvoid afterCompletion(org.springframework.web.context.request.WebRequest request, Exception ex); // Unbind the Hibernate Session from the thread and close it.\n\tvoid afterConcurrentHandlingStarted(org.springframework.web.context.request.WebRequest request);\n\tprotected String getParticipateAttributeName(); // Return the name of the request attribute that identifies that a request is already intercepted.\n\tSessionFactory getSessionFactory(); // Return the Hibernate SessionFactory that should be used to create Hibernate Sessions.\n\tprotected Session openSession(); // Open a Session for the SessionFactory that this interceptor uses.\n\tvoid postHandle(org.springframework.web.context.request.WebRequest request, org.springframework.ui.ModelMap model);\n\tvoid preHandle(org.springframework.web.context.request.WebRequest request); // Open a new Hibernate Session according and bind it to the thread via the TransactionSynchronizationManager.\n\tvoid setSessionFactory(SessionFactory sessionFactory); // Set the Hibernate SessionFactory that should be used to create Hibernate Sessions.\n}"}
{"index": 11476, "repo": "spring-restdocs-core-3.0.0", "des": "Static factory methods for documenting a RESTful API's request and response headers.", "code": "public abstract class HeaderDocumentation extends Object {\n\tstatic HeaderDescriptor headerWithName(String name); // Creates a HeaderDescriptor that describes a header with the given name.\n\tstatic RequestHeadersSnippet requestHeaders(List<HeaderDescriptor> descriptors); // Returns a new Snippet that will document the headers of the API operation's request.\n\tstatic RequestHeadersSnippet requestHeaders(Map<String,Object> attributes, List<HeaderDescriptor> descriptors); // Returns a new Snippet that will document the headers of the API operations's request.\n\tstatic RequestHeadersSnippet requestHeaders(Map<String,Object> attributes, HeaderDescriptor... descriptors); // Returns a new Snippet that will document the headers of the API operations's request.\n\tstatic RequestHeadersSnippet requestHeaders(HeaderDescriptor... descriptors); // Returns a new Snippet that will document the headers of the API operation's request.\n\tstatic ResponseHeadersSnippet responseHeaders(List<HeaderDescriptor> descriptors); // Returns a new Snippet that will document the headers of the API operation's response.\n\tstatic ResponseHeadersSnippet responseHeaders(Map<String,Object> attributes, List<HeaderDescriptor> descriptors); // Returns a new Snippet that will document the headers of the API operations's response.\n\tstatic ResponseHeadersSnippet responseHeaders(Map<String,Object> attributes, HeaderDescriptor... descriptors); // Returns a new Snippet that will document the headers of the API operations's response.\n\tstatic ResponseHeadersSnippet responseHeaders(HeaderDescriptor... descriptors); // Returns a new Snippet that will document the headers of the API operation's response.\n}"}
{"index": 5439, "repo": "druid-processing-26.0.0", "des": "ShardSpec for range partitioning based on a single dimension.", "code": "Class SingleDimensionShardSpec {\n\t<T> PartitionChunk<T> createChunk(T obj);\n\tboolean equals(Object o);\n\tString getDimension();\n\tString getEnd();\n\tMap<String,Object> getSerializableObject(); // Returns a Map to be used for serializing objects of this class.\n\tString getStart();\n\tString getType(); // Get the type name of this ShardSpec.\n\tboolean possibleInDomain(Map<String,com.google.common.collect.RangeSet<String>> domain); // Set[:i] is the cartesian product of Set[0],...,Set[i - 1] EffectiveDomain[:i] is defined as QueryDomain[:i] INTERSECTION SegmentRange[:i] i = 1 If EffectiveDomain[:i] == {start[:i]} || EffectiveDomain == {end[:i]}: if i == index.dimensions.size: ACCEPT segment else: REPEAT with i = i + 1 else if EffectiveDomain[:i] == {}: PRUNE segment else: ACCEPT segment Example: Index on (Hour, Minute, Second).\n}"}
{"index": 2189, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticScalar.", "code": "Class LongColMultiplyDoubleScalarChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 12558, "repo": "spring-jdbc-6.0.11", "des": "Interface specifying the API for a Simple JDBC Insert implemented by SimpleJdbcInsert.", "code": "public interface SimpleJdbcInsertOperations {\n\tint execute(Map<String,?> args); // Execute the insert using the values passed in.\n\tint execute(SqlParameterSource parameterSource); // Execute the insert using the values passed in.\n\tNumber executeAndReturnKey(Map<String,?> args); // Execute the insert using the values passed in and return the generated key.\n\tNumber executeAndReturnKey(SqlParameterSource parameterSource); // Execute the insert using the values passed in and return the generated key.\n\tKeyHolder executeAndReturnKeyHolder(Map<String,?> args); // Execute the insert using the values passed in and return the generated keys.\n\tKeyHolder executeAndReturnKeyHolder(SqlParameterSource parameterSource); // Execute the insert using the values passed in and return the generated keys.\n\tint[] executeBatch(Map<String,?>... batch); // Execute a batch insert using the batch of values passed in.\n\tint[] executeBatch(SqlParameterSource... batch); // Execute a batch insert using the batch of values passed in.\n\tSimpleJdbcInsertOperations includeSynonymsForTableColumnMetaData(); // Include synonyms for the column meta-data lookups via JDBC.\n\tSimpleJdbcInsertOperations usingColumns(String... columnNames); // Specify the column names that the insert statement should be limited to use.\n\tSimpleJdbcInsertOperations usingGeneratedKeyColumns(String... columnNames); // Specify the names of any columns that have auto generated keys.\n\tSimpleJdbcInsertOperations withCatalogName(String catalogName); // Specify the catalog name, if any, to be used for the insert.\n\tSimpleJdbcInsertOperations withoutTableColumnMetaDataAccess(); // Turn off any processing of column meta-data information obtained via JDBC.\n\tSimpleJdbcInsertOperations withSchemaName(String schemaName); // Specify the schema name, if any, to be used for the insert.\n\tSimpleJdbcInsertOperations withTableName(String tableName); // Specify the table name to be used for the insert.\n}"}
{"index": 15219, "repo": "spring-boot-3.1.1", "des": "Supplier used to provide the actual instance when needed.", "code": "@FunctionalInterface public static interface BootstrapRegistry.InstanceSupplier<T> {\n\tstatic <T> BootstrapRegistry.InstanceSupplier<T> from(Supplier<T> supplier); // Factory method that can be used to create an BootstrapRegistry.InstanceSupplier from a Supplier.\n\tT get(BootstrapContext context); // Factory method used to create the instance when needed.\n\tdefault BootstrapRegistry.Scope getScope(); // Return the scope of the supplied instance.\n\tstatic <T> BootstrapRegistry.InstanceSupplier<T> of(T instance); // Factory method that can be used to create an BootstrapRegistry.InstanceSupplier for a given instance.\n\tdefault BootstrapRegistry.InstanceSupplier<T> withScope(BootstrapRegistry.Scope scope); // Return a new BootstrapRegistry.InstanceSupplier with an updated BootstrapRegistry.Scope.\n}"}
{"index": 3472, "repo": "mahout-mr-0.13.0", "des": "This class implements a \"Chebyshev distance\" metric by finding the maximum difference between each coordinate.", "code": "Class ChebyshevDistanceMeasure {\n\tvoid configure(org.apache.hadoop.conf.Configuration job);\n\tvoid createParameters(String prefix, org.apache.hadoop.conf.Configuration jobConf); // EXPERT: consumers should never have to call this method.\n\tdouble distance(double centroidLengthSquare, Vector centroid, Vector v); // Optimized version of distance metric for sparse vectors.\n\tdouble distance(Vector v1, Vector v2); // Returns the distance metric applied to the arguments\n\tCollection<Parameter<?>> getParameters();\n}"}
{"index": 4961, "repo": "commons-collections-3.2.2", "des": "Defines a collection that is bounded in size.", "code": "Interface BoundedCollection {\n\tboolean isFull(); // Returns true if this collection is full and no new elements can be added.\n\tint maxSize(); // Gets the maximum size of the collection (the bound).\n}"}
{"index": 17377, "repo": "groovy-4.0.13", "des": "Represents a parameter on a constructor or method call.", "code": "public class Parameter extends AnnotatedNode implements Variable {\n\tExpression getDefaultValue();\n\tExpression getInitialExpression(); // expression used to initialize the variable or null of there is no initialization.\n\tint getModifiers();\n\tString getName(); // the name of the variable\n\tClassNode getOriginType(); // the type before wrapping primitives type of the variable\n\tClassNode getType(); // the type of the variable\n\tboolean hasInitialExpression(); // returns true if there is an initialization expression\n\tboolean isClosureSharedVariable();\n\tboolean isDynamicTyped();\n\tboolean isInStaticContext(); // returns true if this variable is used in a static context.\n\tvoid setClosureSharedVariable(boolean inClosure);\n\tvoid setInitialExpression(Expression init);\n\tvoid setInStaticContext(boolean inStaticContext);\n\tvoid setModifiers(int modifiers);\n\tvoid setOriginType(ClassNode cn);\n\tvoid setType(ClassNode type);\n}"}
{"index": 5301, "repo": "druid-processing-26.0.0", "des": "Indexed is a fixed-size, immutable, indexed set of values which allows locating a specific index via an exact match, the semantics of which are defined by the implementation.", "code": "Interface Indexed<T> {\n\tstatic void checkIndex(int index, int size); // Checks if index is between 0 and size.\n\tstatic <T> Indexed<T> empty();\n\tT get(int index); // Get the value at specified position\n\tint indexOf(T value); // Returns the index of \"value\" in this Indexed object, or a negative number if the value is not present.\n\tdefault boolean isSorted(); // Indicates if this value set is sorted, the implication being that the contract of indexOf(T) is strenthened to return a negative number equal to (-(insertion point) - 1) when the value is not present in the set.\n\tint size(); // Number of elements in the value set\n}"}
{"index": 17237, "repo": "spring-xml-4.0.5", "des": "Factory for XmlValidator objects, being aware of JAXP 1.3 Validators, and JAXP 1.0 parsing capabilities.", "code": "public abstract class XmlValidatorFactory extends Object {\n\tstatic XmlValidator createValidator(org.springframework.core.io.Resource[] schemaResources, String schemaLanguage); // Create a XmlValidator with the given schema resources and schema language type.\n\tstatic XmlValidator createValidator(org.springframework.core.io.Resource schemaResource, String schemaLanguage); // Create a XmlValidator with the given schema resource and schema language type.\n}"}
{"index": 5515, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "Used to get specific informations about a Message without dealing with a MimeMessage instance.", "code": "Interface MessageResult {\n\tList<MessageAttachment> getAttachments();\n\tContent getBody(); // Gets the body of the message excluding headers.\n\tContent getBody(MessageResult.MimePath path); // Gets the body of the given mime part.\n\tContent getFullContent(); // Gets the full message including headers and body.\n\tContent getFullContent(MessageResult.MimePath path); // Gets the full content of the given mime part.\n\tHeaders getHeaders();\n\tMailboxId getMailboxId();\n\tMessageId getMessageId();\n\tContent getMimeBody(MessageResult.MimePath path); // Gets the body of the given mime part.\n\tMimeDescriptor getMimeDescriptor();\n\tIterator<MessageResult.Header> iterateHeaders(MessageResult.MimePath path); // Iterates the message headers for the given part in a multipart message.\n\tIterator<MessageResult.Header> iterateMimeHeaders(MessageResult.MimePath path); // Iterates the MIME headers for the given part in a multipart message.\n}"}
{"index": 3784, "repo": "hbase-client-3.0.0-alpha-4", "des": "Used to communicate with a single HBase table in batches.", "code": "Interface AsyncBufferedMutator {\n\tvoid close(); // Performs a flush() and releases any resources held.\n\tvoid flush(); // Executes all the buffered, asynchronous operations.\n\torg.apache.hadoop.conf.Configuration getConfiguration(); // Returns the Configuration object used by this instance.\n\tTableName getName(); // Gets the fully qualified table name instance of the table that this AsyncBufferedMutator writes to.\n\tdefault long getPeriodicalFlushTimeout(TimeUnit unit); // Returns the periodical flush interval, 0 means disabled.\n\tlong getWriteBufferSize(); // Returns the maximum size in bytes of the write buffer.\n\tList<CompletableFuture<Void>> mutate(List<? extends Mutation> mutations); // Send some Mutations to the table.\n\tdefault CompletableFuture<Void> mutate(Mutation mutation); // Sends a Mutation to the table.\n}"}
{"index": 8744, "repo": "hadoop-yarn-common-3.3.6", "des": "Utils for rendering aggregated logs block.", "code": "Class LogAggregationWebUtils {\n\tstatic long getLogEndIndex(HtmlBlock.Block html, String endStr); // Parse end index from html.\n\tstatic long getLogEndTime(String endStr); // Parse log end time from html.\n\tstatic long getLogStartIndex(HtmlBlock.Block html, String startStr); // Parse start index from html.\n\tstatic long getLogStartTime(String startStr); // Parse log start time from html.\n\tstatic String verifyAndGetAppOwner(HtmlBlock.Block html, String appOwner); // Verify and parse the application owner.\n\tstatic org.apache.hadoop.yarn.api.records.ContainerId verifyAndGetContainerId(HtmlBlock.Block html, String containerIdStr); // Verify and parse containerId.\n\tstatic org.apache.hadoop.yarn.api.records.NodeId verifyAndGetNodeId(HtmlBlock.Block html, String nodeIdStr); // Verify and parse NodeId.\n}"}
{"index": 1153, "repo": "ignite-core-2.15.0", "des": "Wrapper of IoPool that executes tasks in security context that was actual when task was added to pool queue.", "code": "Class SecurityAwareIoPool {\n\tExecutor executor(); // Gets the Executor for this Pool.\n\tbyte id(); // Gets the numeric identifier of the pool.\n}"}
{"index": 10780, "repo": "spring-boot-actuator-3.1.1", "des": "A HealthIndicator that checks a specific AvailabilityState of the application.", "code": "public class AvailabilityStateHealthIndicator extends AbstractHealthIndicator {\n\tprotected void doHealthCheck(Health.Builder builder); // Actual health check logic.\n\tprotected org.springframework.boot.availability.AvailabilityState getState(org.springframework.boot.availability.ApplicationAvailability applicationAvailability); // Return the current availability state.\n}"}
{"index": 2302, "repo": "hive-exec-4.0.0-alpha-2", "des": "VectorExpressionWritableFactory helper class for generating VectorExpressionWritable objects.", "code": "Class VectorExpressionWriterFactory {\n\tstatic VectorExpressionWriter genVectorExpressionWritable(ExprNodeDesc nodeDesc); // Compiles the appropriate vector expression writer based on an expression info (ExprNodeDesc)\n\tstatic VectorExpressionWriter genVectorExpressionWritable(ObjectInspector fieldObjInspector); // Compiles the appropriate vector expression writer based on an expression info (ExprNodeDesc)\n\tstatic VectorExpressionWriter genVectorExpressionWritable(VectorExpression vecExpr); // Compiles the appropriate vector expression writer based on an expression info (ExprNodeDesc)\n\tstatic VectorExpressionWriter[] genVectorStructExpressionWritables(StructObjectInspector oi); // Compiles the appropriate vector expression writers based on a struct object inspector.\n\tstatic VectorExpressionWriter[] getExpressionWriters(List<ExprNodeDesc> nodesDesc); // Helper function to create an array of writers from a list of expression descriptors.\n\tstatic VectorExpressionWriter[] getExpressionWriters(StructObjectInspector objInspector); // Returns VectorExpressionWriter objects for the fields in the given object inspector.\n\tstatic VectorExpressionWriter[] getExpressionWriters(VectorExpression[] vecExprs); // Helper function to create an array of writers from a list of expression descriptors.\n\tstatic VectorExpressionWriter[] getSettableExpressionWriters(SettableStructObjectInspector objInspector);\n\tstatic void processVectorExpressions(List<ExprNodeDesc> nodesDesc, List<String> columnNames, VectorExpressionWriterFactory.SingleOIDClosure closure); // Creates the value writers for a column vector expression list.\n\tstatic void processVectorExpressions(List<ExprNodeDesc> nodesDesc, VectorExpressionWriterFactory.ListOIDClosure closure); // Creates the value writers for a column vector expression list.\n\tstatic void processVectorInspector(StructObjectInspector structObjInspector, VectorExpressionWriterFactory.SingleOIDClosure closure); // Creates the value writers for an struct object inspector.\n}"}
{"index": 5525, "repo": "org.apache.karaf.main-2.4.4", "des": "Abstract implementation of the URLStreamHandlerService interface.", "code": "Class AbstractURLStreamHandlerService {\n\tboolean equals(URL u1, URL u2); // This method calls super.equals(URL,URL).\n\tint getDefaultPort(); // This method calls super.getDefaultPort.\n\tInetAddress getHostAddress(URL u); // This method calls super.getHostAddress.\n\tint hashCode(URL u); // This method calls super.hashCode(URL).\n\tboolean hostsEqual(URL u1, URL u2); // This method calls super.hostsEqual.\n\tabstract URLConnection openConnection(URL u);\n\tvoid parseURL(URLStreamHandlerSetter realHandler, URL u, String spec, int start, int limit); // Parse a URL using the URLStreamHandlerSetter object.\n\tboolean sameFile(URL u1, URL u2); // This method calls super.sameFile.\n\tprotected void setURL(URL u, String proto, String host, int port, String file, String ref); // Deprecated. This method is only for compatibility with handlers written for JDK 1.1.\n\tprotected void setURL(URL u, String proto, String host, int port, String auth, String user, String path, String query, String ref); // This method calls realHandler.setURL(URL,String,String,int,String,String,String,String) .\n\tString toExternalForm(URL u); // This method calls super.toExternalForm.\n}"}
{"index": 2889, "repo": "amqp-client-5.18.0", "des": "Thrown to indicate that the server does not support the wire protocol version we requested immediately after opening the TCP socket.", "code": "Class ProtocolVersionMismatchException {\n\tint getClientMajor(); // The client's AMQP specification major version.\n\tint getClientMinor(); // The client's AMQP specification minor version.\n\tVersion getClientVersion(); // The client's AMQP specification version.\n\tint getServerMajor(); // The server's AMQP specification major version.\n\tint getServerMinor(); // The server's AMQP specification minor version.\n\tVersion getServerVersion(); // The server's AMQP specification version.\n}"}
{"index": 5276, "repo": "druid-processing-26.0.0", "des": "\"Searched CASE\" function, similar to CASE WHEN boolean_expr THEN result [ELSE else_result] END in SQL.", "code": "Class Function.CaseSearchedFunc {\n\tExprEval apply(List<Expr> args, Expr.ObjectBinding bindings); // Evaluate the function, given a list of arguments and a set of bindings to provide values for IdentifierExpr.\n\tExpressionType getOutputType(Expr.InputBindingInspector inspector, List<Expr> args); // Compute the output type of this function for a given set of argument expression inputs.\n\tString name(); // Name of the function\n\tvoid validateArguments(List<Expr> args); // Validate function arguments.\n}"}
{"index": 9468, "repo": "curator-recipes-5.5.0", "des": "Used when the queue is created with a QueueBuilder.", "code": "Enum ErrorMode {\n\tstatic ErrorMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ErrorMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14198, "repo": "wicket-core-10.0.0-M1", "des": "Wicket's default implementation of an authentication strategy.", "code": "public class DefaultAuthenticationStrategy extends Object implements IAuthenticationStrategy {\n\tprotected String[] decode(String value); // This method will decode decrypted cookie value based on application needs\n\tprotected String encode(String credential, String... extraCredentials); // This method can be overridden to provide different encoding mechanism\n\tprotected CookieUtils getCookieUtils(); // Make sure you always return a valid CookieUtils\n\tprotected org.apache.wicket.util.crypt.ICrypt getCrypt();\n\tString[] load(); // If \"rememberMe\" is enabled, then load the saved credentials (e.g.\n\tvoid remove(); // When the user logs out (session invalidation), then remove username and password from the persistence store\n\tvoid save(String credential, String... extraCredentials); // If \"rememberMe\" is enabled and login was successful, then store the given credentials in the persistence store (e.g.\n}"}
{"index": 3824, "repo": "hbase-client-3.0.0-alpha-4", "des": "Lifecycle state of a given coprocessor instance.", "code": "Enum Coprocessor.State {\n\tstatic Coprocessor.State valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Coprocessor.State[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 15720, "repo": "camel-api-4.0.0-RC1", "des": "Used for custom injection when doing CamelBeanPostProcessor bean post-processing.", "code": "public interface CamelBeanPostProcessorInjector {\n\tvoid onFieldInject(Field field, Object bean, String beanName); // Field injection\n\tvoid onMethodInject(Method method, Object bean, String beanName); // Method injection\n}"}
{"index": 14927, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Base implementation for configuration settings.", "code": "public abstract class AbstractSettings extends Object implements Serializable {\n\tboolean equals(Object obj);\n\t<T> T getSetting(String name); // Returns a configuration setting.\n\tMap<String,Object> getSettings(); // Returns a Map of the configuration settings.\n}"}
{"index": 4635, "repo": "commons-vfs2-2.9.0", "des": "A file object backed by Apache HttpComponents HttpClient v5.", "code": "Class Http5FileObject<FS extends Http5FileSystem> {\n\tprotected void doDetach(); // Detaches this file object from its file resource.\n\tprotected long doGetContentSize(); // Returns the size of the file content (in bytes).\n\tprotected InputStream doGetInputStream(int bufferSize); // Creates an input stream to read the file content from.\n\tprotected long doGetLastModifiedTime(); // Returns the last modified time of this file.\n\tprotected RandomAccessContent doGetRandomAccessContent(RandomAccessMode mode); // Creates access to the file for random i/o.\n\tprotected FileType doGetType(); // Determines the type of this file.\n\tprotected boolean doIsWriteable(); // Determines if this file can be written to.\n\tprotected String[] doListChildren(); // Lists the children of this file.\n\tprotected org.apache.hc.core5.http.ClassicHttpResponse executeHttpUriRequest(org.apache.hc.client5.http.classic.methods.HttpUriRequest httpRequest); // Execute the request using the given httpRequest and return a ClassicHttpResponse from the execution.\n\tprotected FileContentInfoFactory getFileContentInfoFactory(); // Creates the FileContentInfo factory.\n\tprotected URI getInternalURI(); // Return the internal URI object mapped to this file object.\n\tprotected String getUrlCharset(); // Return URL charset string.\n}"}
{"index": 9105, "repo": "hbase-server-3.0.0-alpha-4", "des": "Base class for command lines that start up various HBase daemons.", "code": "Class ServerCommandLine {\n\tvoid doMain(String[] args); // Parse and run the given command line.\n\tprotected abstract String getUsage(); // Implementing subclasses should return a usage string to print out.\n\tstatic void logJVMInfo(); // Log information about the currently running JVM.\n\tstatic void logProcessInfo(org.apache.hadoop.conf.Configuration conf); // Logs information about the currently running JVM process including the environment variables.\n\tprotected void usage(String message); // Print usage information for this command line.\n}"}
{"index": 9404, "repo": "hadoop-yarn-api-3.3.6", "des": "ReservationSubmissionRequest captures the set of requirements the user has to create a reservation.", "code": "Class ReservationSubmissionRequest {\n\tabstract String getQueue(); // Get the name of the Plan that corresponds to the name of the QueueInfo in the scheduler to which the reservation will be submitted to.\n\tabstract ReservationDefinition getReservationDefinition(); // Get the ReservationDefinition representing the user constraints for this reservation\n\tabstract ReservationId getReservationId(); // Get the reservation id that corresponds to the reservation submission.\n\tstatic ReservationSubmissionRequest newInstance(ReservationDefinition reservationDefinition, String queueName, ReservationId reservationId);\n\tabstract void setQueue(String queueName); // Set the name of the Plan that corresponds to the name of the QueueInfo in the scheduler to which the reservation will be submitted to\n\tabstract void setReservationDefinition(ReservationDefinition reservationDefinition); // Set the ReservationDefinition representing the user constraints for this reservation\n\tabstract void setReservationId(ReservationId reservationId); // Set the reservation id that corresponds to the reservation submission.\n}"}
{"index": 1282, "repo": "ignite-core-2.15.0", "des": "Data transfer object for eviction configuration properties.", "code": "Class VisorCacheEvictionConfiguration {\n\t@Nullable String getFilter();\n\t@Nullable String getPolicy();\n\t@Nullable Integer getPolicyMaxSize();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 4338, "repo": "beam-sdks-java-core-2.49.0", "des": "Implementation of Histogram that delegates to the instance for the current context.", "code": "Class DelegatingHistogram {\n\tMetricName getName(); // The MetricName given to this metric.\n\tvoid update(double value); // Add an observation to this histogram.\n}"}
{"index": 5630, "repo": "org.apache.karaf.main-2.4.4", "des": "Permission Storage interface for managing a persistent storage of bundle permissions.", "code": "Interface PermissionStorage {\n\tString[] getConditionalPermissionInfos(); // Returns the persistent array of encoded ConditionalPermissionInfo strings\n\tString[] getLocations(); // Returns the locations that have permission data assigned to them, that is, locations for which permission data exists in persistent storage.\n\tString[] getPermissionData(String location); // Gets the permission data assigned to the specified location.\n\tvoid saveConditionalPermissionInfos(String[] infos); // Persists the array of encoded ConditionalPermissionInfo strings\n\tvoid setPermissionData(String location, String[] data); // Assigns the specified permission data to the specified location.\n}"}
{"index": 7239, "repo": "calcite-core-1.34.0", "des": "An operator describing a MATCH_RECOGNIZE specification.", "code": "Class SqlMatchRecognize.SqlMatchRecognizeOperator {\n\t<R> void acceptCall(SqlVisitor<R> visitor, SqlCall call, boolean onlyExpressions, SqlBasicVisitor.ArgHandler<R> argHandler); // Accepts a SqlVisitor, directing an SqlBasicVisitor.ArgHandler to visit an operand of a call.\n\tSqlCall createCall(@Nullable SqlLiteral functionQualifier, SqlParserPos pos, SqlNode... operands); // Creates a call to this operator with an array of operands.\n\tSqlSyntax getSyntax(); // Returns the syntactic type of this operator, never null.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n\tvoid validateCall(SqlCall call, SqlValidator validator, SqlValidatorScope scope, SqlValidatorScope operandScope); // Validates a call to this operator.\n}"}
{"index": 14726, "repo": "spring-data-commons-3.1.2", "des": "Reactive extension FluentQuery allowing to materialize results from the underlying query.", "code": "public static interface FluentQuery.ReactiveFluentQuery<T> extends FluentQuery<T> {\n\treactor.core.publisher.Flux<T> all(); // Get all matching elements.\n\t<R> FluentQuery.ReactiveFluentQuery<R> as(Class<R> resultType); // Define the target type the result should be mapped to.\n\treactor.core.publisher.Mono<Long> count(); // Get the number of matching elements.\n\treactor.core.publisher.Mono<Boolean> exists(); // Check for the presence of matching elements.\n\treactor.core.publisher.Mono<T> first(); // Get the first or no result.\n\tdefault FluentQuery.ReactiveFluentQuery<T> limit(int limit); // Define the query limit.\n\treactor.core.publisher.Mono<T> one(); // Get exactly zero or one result.\n\treactor.core.publisher.Mono<Page<T>> page(Pageable pageable); // Get a page of matching elements for Pageable.\n\tdefault FluentQuery.ReactiveFluentQuery<T> project(String... properties); // Define which properties or property paths to include in the query.\n\tFluentQuery.ReactiveFluentQuery<T> project(Collection<String> properties); // Define which properties or property paths to include in the query.\n\tdefault reactor.core.publisher.Mono<Window<T>> scroll(ScrollPosition scrollPosition); // Get all matching elements as Window to start result scrolling or resume scrolling at scrollPosition.\n\tFluentQuery.ReactiveFluentQuery<T> sortBy(Sort sort); // Define the sort order.\n}"}
{"index": 548, "repo": "ignite-core-2.15.0", "des": "This adapter designed to support stores with bulk loading from stream-like source.", "code": "Class CacheLoadOnlyStoreAdapter<K,V,I> {\n\tvoid delete(Object key);\n\tvoid deleteAll(Collection<?> keys);\n\tint getBatchQueueSize(); // Returns batch queue size.\n\tint getBatchSize(); // Returns batch size.\n\tint getThreadsCount(); // Returns number of worker threads.\n\tprotected abstract Iterator<I> inputIterator(Object... args); // Returns iterator of input records.\n\tV load(K key);\n\tMap<K,V> loadAll(Iterable<? extends K> keys);\n\tvoid loadCache(IgniteBiInClosure<K,V> c, Object... args); // Loads all values from underlying persistent storage.\n\tprotected abstract @Nullable IgniteBiTuple<K,V> parse(I rec, Object... args); // This method should transform raw data records into valid key-value pairs to be stored into cache.\n\tvoid sessionEnd(boolean commit); // Tells store to commit or rollback a transaction depending on the value of the 'commit' parameter.\n\tvoid setBatchQueueSize(int batchQueueSize); // Sets batch queue size.\n\tvoid setBatchSize(int batchSize); // Sets batch size.\n\tvoid setThreadsCount(int threadsCnt); // Sets number of worker threads.\n\tvoid write(javax.cache.Cache.Entry<? extends K,? extends V> entry);\n\tvoid writeAll(Collection<javax.cache.Cache.Entry<? extends K,? extends V>> entries);\n}"}
{"index": 18391, "repo": "opencms-core-15.0", "des": "Class to send a notification to an OpenCms user with a summary of warnings and errors occurred while publishing the project.", "code": "Class CmsPublishNotification {\n\tprotected java.lang.String generateHtmlMsg(); // Overwrite the method to generate the message body of the notification.\n\tprotected java.lang.String getNotificationContent(); // Overwrite the method to return the path to the xmlcontent, where the subject, the header and the footer are defined.\n}"}
{"index": 4677, "repo": "commons-geometry-core-1.0", "des": "Base class for hyperplane implementations.", "code": "Class AbstractHyperplane<P extends Point<P>> {\n\tHyperplaneLocation classify(P point); // Classify a point with respect to this hyperplane.\n\tboolean contains(P point); // Return true if the given point lies on the hyperplane.\n\tPrecision.DoubleEquivalence getPrecision(); // Get the precision object used to perform floating point comparisons for this instance.\n}"}
{"index": 9412, "repo": "hadoop-yarn-api-3.3.6", "des": "Enum which represents the resource type.", "code": "Enum ResourceTypes {\n\tstatic ResourceTypes valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ResourceTypes[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9713, "repo": "commons-math3-3.6.1", "des": "This class implements a powerful pseudo-random number generator developed by Makoto Matsumoto and Takuji Nishimura during 1996-1997.", "code": "Class MersenneTwister {\n\tprotected int next(int bits); // Generate next pseudorandom number.\n\tvoid setSeed(int seed); // Reinitialize the generator as if just built with the given int seed.\n\tvoid setSeed(int[] seed); // Reinitialize the generator as if just built with the given int array seed.\n\tvoid setSeed(long seed); // Reinitialize the generator as if just built with the given long seed.\n}"}
{"index": 14855, "repo": "spring-data-commons-3.1.2", "des": "Enumeration for null handling hints that can be used in Sort.Order expressions.", "code": "public static enum Sort.NullHandling extends Enum<Sort.NullHandling> {\n\tstatic Sort.NullHandling valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Sort.NullHandling[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 15865, "repo": "camel-api-4.0.0-RC1", "des": "An interface to represent an object which wishes to be injected with a ServiceFilter", "code": "public interface ServiceFilterAware {\n\tServiceFilter getServiceFilter(); // Get the ServiceFilter\n\tvoid setServiceFilter(ServiceFilter serviceFilter); // Injects the ServiceFilter\n}"}
{"index": 4945, "repo": "commons-collections-3.2.2", "des": "Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.", "code": "Class AbstractOrderedBidiMapDecorator {\n\tObject firstKey(); // Gets the first key currently in this map.\n\tprotected OrderedBidiMap getOrderedBidiMap(); // Gets the map being decorated.\n\tOrderedBidiMap inverseOrderedBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tObject lastKey(); // Gets the last key currently in this map.\n\tObject nextKey(Object key); // Gets the next key after the one specified.\n\tOrderedMapIterator orderedMapIterator(); // Obtains an OrderedMapIterator over the map.\n\tObject previousKey(Object key); // Gets the previous key before the one specified.\n}"}
{"index": 18188, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Context for determining the implicit name related to basic values.", "code": "Interface ImplicitBasicColumnNameSource {\n\tAttributePath getAttributePath(); // Access to the AttributePath for the basic value\n\tboolean isCollectionElement(); // Is the basic column the \"element column\" for a collection?\n}"}
{"index": 714, "repo": "ignite-core-2.15.0", "des": "Grid cache semaphore ('Ex' stands for external).", "code": "Interface GridCacheSemaphoreEx {\n\tGridCacheInternalKey key(); // Get current semaphore key.\n\tvoid onNodeRemoved(UUID nodeId); // Callback to notify semaphore on topology changes.\n\tvoid onUpdate(GridCacheSemaphoreState val); // Callback to notify semaphore on changes.\n\tvoid stop(); // Callback to notify local semaphore instance on node stop.\n}"}
{"index": 1041, "repo": "ignite-core-2.15.0", "des": "Listener for events of metastore lifecycle.", "code": "Interface MetastorageLifecycleListener {\n\tdefault void onReadyForRead(ReadOnlyMetastorage metastorage); // Is called when metastorage is made ready for read-only operations very early on node startup phase.\n\tdefault void onReadyForReadWrite(ReadWriteMetastorage metastorage); // Fully functional metastore capable of performing reading and writing operations.\n}"}
{"index": 12466, "repo": "spring-boot-test-3.1.1", "des": "AssertJ based JSON tester backed by Jsonb.", "code": "public class JsonbTester<T> extends AbstractJsonMarshalTester<T> {\n\tstatic void initFields(Object testInstance, jakarta.json.bind.Jsonb jsonb); // Utility method to initialize JsonbTester fields.\n\tstatic void initFields(Object testInstance, org.springframework.beans.factory.ObjectFactory<jakarta.json.bind.Jsonb> jsonb); // Utility method to initialize JsonbTester fields.\n\tprotected T readObject(Reader reader, org.springframework.core.ResolvableType type); // Read from the specified reader to create an object of the specified type.\n\tprotected String writeObject(T value, org.springframework.core.ResolvableType type); // Write the specified object to a JSON string.\n}"}
{"index": 9959, "repo": "iceberg-api-1.3.0", "des": "API for updating statistics files in a table.", "code": "Interface UpdateStatistics {\n\tUpdateStatistics removeStatistics(long snapshotId); // Remove the table's statistics file for given snapshot.\n\tUpdateStatistics setStatistics(long snapshotId, StatisticsFile statisticsFile); // Set the table's statistics file for given snapshot, replacing the previous statistics file for the snapshot if any exists.\n}"}
{"index": 3307, "repo": "hbase-common-3.0.0-alpha-4", "des": "Tags are part of cells and helps to add metadata about them.", "code": "Interface Tag {\n\tstatic byte[] cloneValue(Tag tag); // Returns tag value in a new byte array.\n\tstatic void copyValueTo(Tag tag, byte[] out, int offset); // Copies the tag's value bytes to the given byte array\n\tbyte getType(); // Returns the tag type\n\tbyte[] getValueArray(); // Return an array containing the value bytes if hasArray() returns true.\n\tstatic byte getValueAsByte(Tag tag); // Converts the value bytes of the given tag into a byte value\n\tstatic long getValueAsLong(Tag tag); // Converts the value bytes of the given tag into a long value\n\tstatic String getValueAsString(Tag tag); // Converts the value bytes of the given tag into a String value\n\tByteBuffer getValueByteBuffer(); // Returns The ByteBuffer containing the value bytes.\n\tint getValueLength(); // Returns Length of tag value within the backed buffer\n\tint getValueOffset(); // Returns Offset of tag value within the backed buffer\n\tboolean hasArray(); // Return true if the tag is backed by a byte array\n\tstatic boolean matchingValue(Tag t1, Tag t2); // Matches the value part of given tags\n}"}
{"index": 14931, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A facility for authorization server configuration settings.", "code": "public final class AuthorizationServerSettings extends AbstractSettings {\n\tstatic AuthorizationServerSettings.Builder builder(); // Constructs a new AuthorizationServerSettings.Builder with the default settings.\n\tString getAuthorizationEndpoint(); // Returns the OAuth 2.0 Authorization endpoint.\n\tString getDeviceAuthorizationEndpoint(); // Returns the OAuth 2.0 Device Authorization endpoint.\n\tString getDeviceVerificationEndpoint(); // Returns the OAuth 2.0 Device Verification endpoint.\n\tString getIssuer(); // Returns the URL of the Authorization Server's Issuer Identifier.\n\tString getJwkSetEndpoint(); // Returns the JWK Set endpoint.\n\tString getOidcClientRegistrationEndpoint(); // Returns the OpenID Connect 1.0 Client Registration endpoint.\n\tString getOidcLogoutEndpoint(); // Returns the OpenID Connect 1.0 Logout endpoint.\n\tString getOidcUserInfoEndpoint(); // Returns the OpenID Connect 1.0 UserInfo endpoint.\n\tString getTokenEndpoint(); // Returns the OAuth 2.0 Token endpoint.\n\tString getTokenIntrospectionEndpoint(); // Returns the OAuth 2.0 Token Introspection endpoint.\n\tString getTokenRevocationEndpoint(); // Returns the OAuth 2.0 Token Revocation endpoint.\n\tstatic AuthorizationServerSettings.Builder withSettings(Map<String,Object> settings); // Constructs a new AuthorizationServerSettings.Builder with the provided settings.\n}"}
{"index": 3948, "repo": "hudi-client-0.6.0", "des": "Packs incoming records to be upserted, into buckets (1 bucket = 1 RDD partition).", "code": "Class UpsertPartitioner<T extends HoodieRecordPayload<T>> {\n\tprotected static long averageBytesPerRecord(HoodieTimeline commitTimeline, HoodieWriteConfig hoodieWriteConfig); // Obtains the average record size based on records written during previous commits.\n\tBucketInfo getBucketInfo(int bucketNumber);\n\tList<InsertBucket> getInsertBuckets(String partitionPath);\n\tint getPartition(Object key);\n\tprotected List<SmallFile> getSmallFiles(String partitionPath); // Returns a list of small files in the given partition path.\n\tint numPartitions();\n}"}
{"index": 13735, "repo": "spring-webmvc-6.0.11", "des": "Helper class for preparing JSTL views, in particular for exposing a JSTL localization context.", "code": "public abstract class JstlUtils extends Object {\n\tstatic void exposeLocalizationContext(HttpServletRequest request, org.springframework.context.MessageSource messageSource); // Exposes JSTL-specific request attributes specifying locale and resource bundle for JSTL's formatting and message tags, using Spring's locale and MessageSource.\n\tstatic void exposeLocalizationContext(RequestContext requestContext); // Exposes JSTL-specific request attributes specifying locale and resource bundle for JSTL's formatting and message tags, using Spring's locale and MessageSource.\n\tstatic org.springframework.context.MessageSource getJstlAwareMessageSource(ServletContext servletContext, org.springframework.context.MessageSource messageSource); // Checks JSTL's \"jakarta.servlet.jsp.jstl.fmt.localizationContext\" context-param and creates a corresponding child message source, with the provided Spring-defined MessageSource as parent.\n}"}
{"index": 2816, "repo": "tika-parsers-1.28.5", "des": "Uses the Pooled Time Series algorithm + command line tool, to generate a numeric representation of the video suitable for similarity searches.", "code": "Class PooledTimeSeriesParser {\n\tSet<org.apache.tika.mime.MediaType> getSupportedTypes(org.apache.tika.parser.ParseContext context); // Returns the set of media types supported by this parser when used with the given parse context.\n\tvoid parse(InputStream stream, ContentHandler handler, org.apache.tika.metadata.Metadata metadata, org.apache.tika.parser.ParseContext context); // Parses a document stream into a sequence of XHTML SAX events.\n}"}
{"index": 13661, "repo": "spring-webmvc-6.0.11", "des": "A base class for resolving method argument values by reading from the body of a request with HttpMessageConverters.", "code": "public abstract class AbstractMessageConverterMethodArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver {\n\tprotected Object adaptArgumentIfNecessary(Object arg, org.springframework.core.MethodParameter parameter); // Adapt the given argument against the method parameter, if necessary.\n\tprotected org.springframework.http.server.ServletServerHttpRequest createInputMessage(org.springframework.web.context.request.NativeWebRequest webRequest); // Create a new HttpInputMessage from the given NativeWebRequest.\n\tprotected List<org.springframework.http.MediaType> getSupportedMediaTypes(Class<?> clazz); // Return the media types supported by all provided message converters sorted by specificity via MimeTypeUtils.sortBySpecificity(List).\n\tprotected boolean isBindExceptionRequired(org.springframework.web.bind.WebDataBinder binder, org.springframework.core.MethodParameter parameter); // Whether to raise a fatal bind exception on validation errors.\n\tprotected <T> Object readWithMessageConverters(org.springframework.http.HttpInputMessage inputMessage, org.springframework.core.MethodParameter parameter, Type targetType); // Create the method argument value of the expected parameter type by reading from the given HttpInputMessage.\n\tprotected <T> Object readWithMessageConverters(org.springframework.web.context.request.NativeWebRequest webRequest, org.springframework.core.MethodParameter parameter, Type paramType); // Create the method argument value of the expected parameter type by reading from the given request.\n\tprotected void validateIfApplicable(org.springframework.web.bind.WebDataBinder binder, org.springframework.core.MethodParameter parameter); // Validate the binding target if applicable.\n}"}
{"index": 4773, "repo": "hadoop-common-3.3.4", "des": "Default indicates Ordered, preferred OpenSSL, if failed to load then fall back to Default_JSSE.", "code": "Enum DelegatingSSLSocketFactory.SSLChannelMode {\n\tstatic DelegatingSSLSocketFactory.SSLChannelMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DelegatingSSLSocketFactory.SSLChannelMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7335, "repo": "calcite-core-1.34.0", "des": "Function that returns a table during execution time.", "code": "Interface TableFunction {\n\tType getElementType(List<? extends Object> arguments); // Returns the row type of the table yielded by this function when applied to given arguments.\n\tRelDataType getRowType(RelDataTypeFactory typeFactory, List<? extends Object> arguments); // Returns the record type of the table yielded by this function when applied to given arguments.\n}"}
{"index": 11880, "repo": "spring-kafka-3.0.9", "des": "A top level interface for message converters.", "code": "public interface MessageConverter {\n\tdefault void commonHeaders(Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<?,?> consumer, Map<String,Object> rawHeaders, Object theKey, Object topic, Object partition, Object offset, Object timestampType, Object timestamp); // Set up the common headers.\n\tstatic String getGroupId(); // Get the thread bound group id.\n}"}
{"index": 5208, "repo": "druid-processing-26.0.0", "des": "Processing related interface A DimensionHandler is an object that encapsulates indexing, column merging/building, and querying operations for a given dimension type (e.", "code": "Interface DimensionHandler<EncodedType extends Comparable<EncodedType>,EncodedKeyComponentType,ActualType extends Comparable<ActualType>> {\n\tString getDimensionName(); // Get the name of the column associated with this handler.\n\tDimensionSchema getDimensionSchema(ColumnCapabilities capabilities);\n\tdefault DimensionSpec getDimensionSpec(); // Create a DimensionSpec for this handler\n\tComparator<ColumnValueSelector> getEncodedValueSelectorComparator(); // Returns a comparator that knows how to compare ColumnValueSelector of the assumed dimension type, corresponding to this DimensionHandler.\n\tint getLengthOfEncodedKeyComponent(EncodedKeyComponentType dimVals); // Given an key component representing a single set of row value(s) for this dimension as an Object, return the length of the key component after appropriate type-casting.\n\tdefault DimensionSchema.MultiValueHandling getMultivalueHandling(); // Get DimensionSchema.MultiValueHandling for the column associated with this handler.\n\tDimensionIndexer<EncodedType,EncodedKeyComponentType,ActualType> makeIndexer(boolean useMaxMemoryEstimates); // Creates a new DimensionIndexer, a per-dimension object responsible for processing ingested rows in-memory, used by the IncrementalIndex.\n\tDimensionMergerV9 makeMerger(IndexSpec indexSpec, SegmentWriteOutMedium segmentWriteOutMedium, ColumnCapabilities capabilities, ProgressIndicator progress, Closer closer); // Creates a new DimensionMergerV9, a per-dimension object responsible for merging indexes/row data across segments and building the on-disk representation of a dimension.\n\tSettableColumnValueSelector makeNewSettableEncodedValueSelector(); // Creates and returns a new object of some implementation of SettableColumnValueSelector, that corresponds to the type of this DimensionHandler.\n}"}
{"index": 12055, "repo": "jena-core-4.9.0", "des": "Set which grows, if needed but never shrinks.", "code": "public abstract class FastHashSet<K> extends FastHashBase<K> implements JenaSetHashOptimized<K> {\n\tint addAndGetIndex(K value); // Add and get the index of the added element.\n\tint addAndGetIndex(K value, int hashCode); // Add and get the index of the added element.\n\tvoid addUnchecked(K key); // Add the key to the set without checking if it is already present.\n\tvoid addUnchecked(K value, int hashCode);\n\tK getKeyAt(int i); // Gets the key at the given index.\n\tboolean tryAdd(K key); // Add the key to the set if it is not already present.\n\tboolean tryAdd(K value, int hashCode);\n}"}
{"index": 18088, "repo": "spring-ws-core-4.0.5", "des": "SOAP-specific subclass of the MessageDispatcher.", "code": "public class SoapMessageDispatcher extends MessageDispatcher {\n\tprotected boolean handleRequest(EndpointInvocationChain mappedEndpoint, MessageContext messageContext); // Process the headers targeted at the actor or role fullfilled by the endpoint.\n\tvoid setMustUnderstandFaultString(String mustUnderstandFaultString); // Sets the message used for MustUnderstand fault.\n\tvoid setMustUnderstandFaultStringLocale(Locale mustUnderstandFaultStringLocale); // Sets the locale of the message used for MustUnderstand fault.\n}"}
{"index": 2305, "repo": "hive-exec-4.0.0-alpha-2", "des": "Class for handling vectorized hash map key wrappers.", "code": "Class VectorHashKeyWrapperBatch {\n\tVectorHashKeyWrapperBase allocateKeyWrapper();\n\tvoid assignRowColumn(VectorizedRowBatch batch, int batchIndex, int keyIndex, VectorHashKeyWrapperBase kw);\n\tstatic VectorHashKeyWrapperBatch compileKeyWrapperBatch(VectorExpression[] keyExpressions);\n\tstatic VectorHashKeyWrapperBatch compileKeyWrapperBatch(VectorExpression[] keyExpressions, TypeInfo[] typeInfos); // Prepares a VectorHashKeyWrapperBatch to work for a specific set of keys.\n\tvoid evaluateBatch(VectorizedRowBatch batch); // Processes a batch: Evaluates each key vector expression. Copies out each key's primitive values into the key wrappers computes the hashcode of the key wrappers\n\tvoid evaluateBatchGroupingSets(VectorizedRowBatch batch, boolean[] groupingSetsOverrideIsNulls);\n\tComparator<VectorHashKeyWrapperBase> getComparator(String columnSortOrder, String nullOrder);\n\tint getKeysFixedSize(); // Returns the compiled fixed size for the key wrappers.\n\tint getVariableSize(int batchSize);\n\tVectorHashKeyWrapperBase[] getVectorHashKeyWrappers(); // Accessor for the batch-sized array of key wrappers.\n\tObject getWritableKeyValue(VectorHashKeyWrapperBase kw, int keyIndex, VectorExpressionWriter keyOutputWriter); // Get the row-mode writable object value of a key from a key wrapper\n\tvoid setLongValue(VectorHashKeyWrapperBase kw, int keyIndex, Long value);\n}"}
{"index": 9431, "repo": "hadoop-yarn-api-3.3.6", "des": "The class that hosts a list of events that are only related to one entity.", "code": "Class TimelineEvents.EventsOfOneEntity {\n\tvoid addEvent(TimelineEvent event); // Add a single event to the existing event list\n\tvoid addEvents(List<TimelineEvent> events); // Add a list of event to the existing event list\n\tString getEntityId(); // Get the entity Id\n\tString getEntityType(); // Get the entity type\n\tList<TimelineEvent> getEvents(); // Get a list of events\n\tvoid setEntityId(String entityId); // Set the entity Id\n\tvoid setEntityType(String entityType); // Set the entity type\n\tvoid setEvents(List<TimelineEvent> events); // Set the event list to the given list of events\n}"}
{"index": 12735, "repo": "spring-data-mongodb-4.1.2", "des": "Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects.", "code": "public class GeoJsonGeometryCollection extends Object implements GeoJson<Iterable<GeoJson<?>>> {\n\tboolean equals(Object obj);\n\tIterable<GeoJson<?>> getCoordinates(); // The value of the coordinates member is always an Iterable.\n\tString getType(); // String value representing the type of the GeoJson object.\n}"}
{"index": 12115, "repo": "jena-core-4.9.0", "des": "Common interface for JenaMap and JenaSet.", "code": "public interface JenaMapSetCommon<E> {\n\tboolean anyMatch(Predicate<E> predicate); // Check whether the collection contains any element matching the predicate.\n\tvoid clear(); // Clear the collection.\n\tboolean containsKey(E key); // Check whether the collection contains a given key.\n\tboolean isEmpty();\n\tExtendedIterator<E> keyIterator(); // Get an iterator over the keys in the collection.\n\tSpliterator<E> keySpliterator(); // Get a spliterator over the keys in the collection.\n\tdefault Stream<E> keyStream(); // Get a stream over the keys in the collection.\n\tdefault Stream<E> keyStreamParallel(); // Get a parallel stream over the keys in the collection.\n\tvoid removeUnchecked(E key); // Removes a key from the collection.\n\tint size();\n\tboolean tryRemove(E key); // Tries to remove a key from the collection.\n}"}
{"index": 2863, "repo": "amqp-client-5.18.0", "des": "Encapsulates an arbitrary message - simple \"bean\" holder structure.", "code": "Class Delivery {\n\tbyte[] getBody(); // Retrieve the message body.\n\tEnvelope getEnvelope(); // Retrieve the message envelope.\n\tAMQP.BasicProperties getProperties(); // Retrieve the message properties.\n}"}
{"index": 3107, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "Estimation of memory footprint of object.", "code": "Enum JavaDataModel {\n\tstatic long alignUp(long value, long align);\n\tabstract int array();\n\tabstract int arrayList();\n\tstatic JavaDataModel get();\n\tabstract int hashMap(int entry);\n\tabstract int hashMapBase();\n\tabstract int hashMapEntry();\n\tabstract int hashSet(int entry);\n\tabstract int hashSetBase();\n\tabstract int hashSetEntry();\n\tlong lengthFor(String string);\n\tlong lengthForBooleanArrayOfSize(long length);\n\tlong lengthForByteArrayOfSize(long length);\n\tlong lengthForDateArrayOfSize(long length);\n\tlong lengthForDecimalArrayOfSize(long length);\n\tlong lengthForDoubleArrayOfSize(long length);\n\tlong lengthForIntArrayOfSize(long length);\n\tlong lengthForLongArrayOfSize(long length);\n\tlong lengthForObjectArrayOfSize(long length);\n\tlong lengthForPrimitiveArrayOfSize(int primitiveSize, long length);\n\tint lengthForRandom();\n\tint lengthForStringOfLength(int strLen);\n\tlong lengthForTimestampArrayOfSize(long length);\n\tint lengthOfDate();\n\tint lengthOfDecimal();\n\tint lengthOfTimestamp();\n\tabstract int linkedHashMap(int entry);\n\tabstract int linkedList(int entry);\n\tabstract int linkedListBase();\n\tabstract int linkedListEntry();\n\tabstract int memoryAlign();\n\tabstract int object();\n\tint primitive1();\n\tint primitive2();\n\tabstract int ref();\n\tstatic int round(int size);\n\tstatic JavaDataModel valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic JavaDataModel[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16169, "repo": "spring-data-cassandra-4.1.2", "des": "Object to configure a DROP TYPE specification.", "code": "public class DropUserTypeSpecification extends UserTypeNameSpecification {\n\tstatic DropUserTypeSpecification dropType(com.datastax.oss.driver.api.core.CqlIdentifier name); // Entry point into the DropUserTypeSpecification's fluent API given name to drop a type.\n\tstatic DropUserTypeSpecification dropType(String name); // Entry point into the DropUserTypeSpecification's fluent API given name to drop a type.\n\tboolean getIfExists();\n\tDropUserTypeSpecification ifExists(); // Enables the inclusion of anIF EXISTS clause.\n\tDropUserTypeSpecification ifExists(boolean ifExists); // Sets the inclusion of an IF EXISTS clause.\n}"}
{"index": 16537, "repo": "spring-batch-infrastructure-5.0.2", "des": "Wrapper for an item and its exception if it failed processing.", "code": "public class SkipWrapper<T> extends Object {\n\tThrowable getException(); // Public getter for the exception.\n\tT getItem(); // Public getter for the item.\n}"}
{"index": 5341, "repo": "druid-processing-26.0.0", "des": "Native I/O operations in order to minimize cache impact.", "code": "Class NativeIO {\n\tstatic void chunkedCopy(InputStream src, File dest); // Copy from an input stream to a file minimizing cache impact on the destination..\n\tstatic int getfd(FileDescriptor descriptor); // Get system file descriptor (int) from FileDescriptor object.\n\tstatic void trySkipCache(int fd, long offset, long len); // Remove pages from the file system page cache when they wont be accessed again\n}"}
{"index": 4256, "repo": "beam-sdks-java-core-2.49.0", "des": "A composite Trigger that fires when all of its sub-triggers are ready.", "code": "Class AfterAll {\n\tprotected Trigger.OnceTrigger getContinuationTrigger(java.util.List<Trigger> continuationTriggers); // Subclasses should override this to return the Trigger.getContinuationTrigger() of this Trigger.\n\torg.joda.time.Instant getWatermarkThatGuaranteesFiring(BoundedWindow window); // For internal use only; no backwards-compatibility guarantees.\n\tstatic AfterAll of(java.util.List<Trigger> triggers); // Returns an AfterAll Trigger with the given subtriggers.\n\tstatic AfterAll of(Trigger.OnceTrigger... triggers); // Returns an AfterAll Trigger with the given subtriggers.\n}"}
{"index": 6403, "repo": "spring-data-solr-4.3.15", "des": "Solr specific repository implementation.", "code": "Class SimpleSolrRepository<T,ID extends Serializable> {\n\tlong count(); // Returns the number of entities available.\n\tprotected long count(Query query);\n\tvoid delete(T entity);\n\tvoid deleteAll();\n\tvoid deleteAll(Iterable<? extends T> entities);\n\tvoid deleteById(ID id);\n\tboolean existsById(ID id);\n\tIterable<T> findAll();\n\tPage<T> findAll(Pageable pageable);\n\tIterable<T> findAll(Sort sort);\n\tIterable<T> findAllById(Iterable<ID> ids);\n\tOptional<T> findById(ID id);\n\tClass<T> getEntityClass();\n\tString getIdFieldName();\n\tSolrOperations getSolrOperations();\n\t<S extends T>S save(S entity);\n\t<S extends T>S save(S entity, Duration commitWithin); // Saves a given entity and commits withing given Duration.\n\t<S extends T>Iterable<S> saveAll(Iterable<S> entities);\n\t<S extends T>Iterable<S> saveAll(Iterable<S> entities, Duration commitWithin); // Saves all given entities and commits withing given Duration.\n}"}
{"index": 16205, "repo": "spring-data-cassandra-4.1.2", "des": "A session holds connections to a Cassandra cluster, allowing it to be queried.", "code": "public interface ReactiveSession extends Closeable {\n\tvoid close(); // Initiates a shutdown of this session instance and blocks until that shutdown completes.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(com.datastax.oss.driver.api.core.cql.Statement<?> statement); // Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query); // Executes the provided query.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query, Object... values); // Executes the provided query using the provided values.\n\treactor.core.publisher.Mono<ReactiveResultSet> execute(String query, Map<String,Object> values); // Executes the provided query using the provided named values.\n\tcom.datastax.oss.driver.api.core.context.DriverContext getContext(); // Returns a context that provides access to all the policies used by this driver instance.\n\tOptional<com.datastax.oss.driver.api.core.CqlIdentifier> getKeyspace(); // The keyspace that this session is currently connected to, or Optional.empty() if this session is not connected to any keyspace.\n\tcom.datastax.oss.driver.api.core.metadata.Metadata getMetadata(); // Returns a snapshot of the Cassandra cluster's topology and schema metadata.\n\tboolean isClosed(); // Whether this Session instance has been closed.\n\treactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.PreparedStatement> prepare(com.datastax.oss.driver.api.core.cql.SimpleStatement statement); // Prepares the provided query.\n\treactor.core.publisher.Mono<com.datastax.oss.driver.api.core.cql.PreparedStatement> prepare(String query); // Prepares the provided query string.\n}"}
{"index": 10507, "repo": "groovy-all-4.0.13", "des": "A specialized Groovy AST visitor meant to perform additional verifications upon the current AST.", "code": "public class ExtendedVerifier extends ClassCodeVisitorSupport {\n\tprotected SourceUnit getSourceUnit();\n\tprotected boolean isAnnotationCompatible(); // Deprecated.\n\tprotected void visitAnnotations(AnnotatedNode node, int target);\n\tvoid visitClass(ClassNode node); // Visit a ClassNode.\n\tvoid visitConstructor(ConstructorNode node); // Visit a ConstructorNode.\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n\tvoid visitField(FieldNode node); // Visit a FieldNode.\n\tvoid visitMethod(MethodNode node); // Visit a MethodNode.\n\tvoid visitProperty(PropertyNode node); // Visit a PropertyNode.\n}"}
{"index": 15029, "repo": "spring-vault-core-3.0.4", "des": "AWS IAM authentication using signed HTTP requests to query the current identity.", "code": "public class AwsIamAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\tstatic AuthenticationSteps createAuthenticationSteps(AwsIamAuthenticationOptions options); // Creates a AuthenticationSteps for AWS-IAM authentication given AwsIamAuthenticationOptions.\n\tprotected static AuthenticationSteps createAuthenticationSteps(AwsIamAuthenticationOptions options, software.amazon.awssdk.auth.credentials.AwsCredentials credentials, software.amazon.awssdk.regions.Region region);\n\tprotected static Map<String,String> createRequestBody(AwsIamAuthenticationOptions options); // Create the request body to perform a Vault login using the AWS-IAM authentication method.\n\tAuthenticationSteps getAuthenticationSteps(); // Get the AuthenticationSteps describing an authentication flow.\n\tVaultToken login(); // Return a VaultToken.\n}"}
{"index": 12242, "repo": "jena-core-4.9.0", "des": "A Reifier that only supports one style Standard (intercept, no conceal -- and intercept is a no-op anyway because all triples appear in the underlying graph for storing all triples).", "code": "public class ReifierStd extends Object {\n\tstatic ExtendedIterator<Node> allNodes(Graph graph); // return an iterator over all the nodes that are reifiying something in the graph\n\tstatic ExtendedIterator<Node> allNodes(Graph graph, Triple t); // return an iterator over all the nodes that are reifiying t in the graph\n\tstatic ExtendedIterator<Triple> findEither(Graph graph, Triple match, boolean showHidden); // Answer an iterator over the reification triples of this Reifier, or an empty iterator - if showHidden is false, only the exposed triples, otherwise only the concealed ones.\n\tstatic ExtendedIterator<Triple> findExposed(Graph graph, Triple match); // Answer an iterator over all the reification triples that this Reifier exposes (ie all if Standard, none otherwise) that match m.\n\tstatic Triple getTriple(Graph graph, Node n); // Answer the triple associated with the node n.\n\tstatic boolean hasTriple(Graph graph, Node node); // true iff _n_ is associated with some triple.\n\tstatic boolean hasTriple(Graph graph, Triple t);\n\tstatic Node reifyAs(Graph graph, Node node, Triple triple); // note the triple _t_ as reified using _n_ as its representing node.\n\tstatic void remove(Graph graph, Node node, Triple triple); // remove any existing binding for _n_; hasNode(n) will return false and getTriple(n) will return null.\n\tstatic void remove(Graph graph, Triple triple); // remove all bindings which map to this triple.\n}"}
{"index": 15297, "repo": "spring-boot-3.1.1", "des": "A ConfigurationPropertySource with a fully Iterable set of entries.", "code": "public interface IterableConfigurationPropertySource extends ConfigurationPropertySource, Iterable<ConfigurationPropertyName> {\n\tdefault ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name); // Returns if the source contains any descendants of the specified name.\n\tdefault IterableConfigurationPropertySource filter(Predicate<ConfigurationPropertyName> filter); // Return a filtered variant of this source, containing only names that match the given Predicate.\n\tdefault Iterator<ConfigurationPropertyName> iterator(); // Return an iterator for the names managed by this source.\n\tStream<ConfigurationPropertyName> stream(); // Returns a sequential Stream for the names managed by this source.\n\tdefault IterableConfigurationPropertySource withAliases(ConfigurationPropertyNameAliases aliases); // Return a variant of this source that supports name aliases.\n\tdefault IterableConfigurationPropertySource withPrefix(String prefix); // Return a variant of this source that supports a prefix.\n}"}
{"index": 11401, "repo": "spring-context-6.0.11", "des": "Represents how the measurement values of a ManagedMetric will change over time.", "code": "public enum MetricType extends Enum<MetricType> {\n\tstatic MetricType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic MetricType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 1992, "repo": "hive-exec-4.0.0-alpha-2", "des": "A global compressor/decompressor pool used to save and reuse (possibly native) compression/decompression codecs.", "code": "Class CodecPool {\n\tstatic org.apache.hadoop.io.compress.Compressor getCompressor(org.apache.hadoop.io.compress.CompressionCodec codec); // Get a Compressor for the given CompressionCodec from the pool or a new one.\n\tstatic org.apache.hadoop.io.compress.Decompressor getDecompressor(org.apache.hadoop.io.compress.CompressionCodec codec); // Get a Decompressor for the given CompressionCodec from the pool or a new one.\n\tstatic void returnCompressor(org.apache.hadoop.io.compress.Compressor compressor); // Return the Compressor to the pool.\n\tstatic void returnDecompressor(org.apache.hadoop.io.compress.Decompressor decompressor); // Return the Decompressor to the pool.\n}"}
{"index": 7517, "repo": "cassandra-all-4.1.2", "des": "Central location for managing the logging of client/user-initated actions (like queries, log in commands, and so on).", "code": "Class AuditLogManager {\n\tvoid authFailure(QueryState state, java.lang.Exception cause);\n\tvoid authSuccess(QueryState state);\n\tvoid batchFailure(BatchStatement.Type batchType, java.util.List<? extends CQLStatement> statements, java.util.List<java.lang.String> queries, java.util.List<java.util.List<java.nio.ByteBuffer>> values, QueryOptions options, QueryState state, java.lang.Exception cause);\n\tvoid batchSuccess(BatchStatement.Type batchType, java.util.List<? extends CQLStatement> statements, java.util.List<java.lang.String> queries, java.util.List<java.util.List<java.nio.ByteBuffer>> values, QueryOptions options, QueryState state, long queryTime, Message.Response response);\n\tvoid disableAuditLog(); // Disables AuditLog, designed to be invoked only via JMX/ Nodetool, not from anywhere else in the codepath.\n\tvoid enable(AuditLogOptions auditLogOptions); // Enables AuditLog, designed to be invoked only via JMX/ Nodetool, not from anywhere else in the codepath.\n\tvoid executeFailure(CQLStatement statement, java.lang.String query, QueryOptions options, QueryState state, java.lang.Exception cause);\n\tvoid executeSuccess(CQLStatement statement, java.lang.String query, QueryOptions options, QueryState state, long queryTime, Message.Response response);\n\tAuditLogOptions getAuditLogOptions();\n\tjavax.management.openmbean.CompositeData getAuditLogOptionsData(); // Returns the current state of Audit Log framework.\n\tIAuditLogger getLogger();\n\tvoid initialize();\n\tboolean isEnabled();\n\tvoid prepareFailure(CQLStatement stmt, java.lang.String query, QueryState state, java.lang.Exception cause);\n\tvoid prepareSuccess(CQLStatement statement, java.lang.String query, QueryState state, long queryTime, ResultMessage.Prepared response);\n\tvoid queryFailure(CQLStatement stmt, java.lang.String query, QueryOptions options, QueryState state, java.lang.Exception cause);\n\tvoid querySuccess(CQLStatement statement, java.lang.String query, QueryOptions options, QueryState state, long queryTime, Message.Response response);\n}"}
{"index": 10070, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "MasterContainerAllocatorCollectionConfigurer is an interface for DefaultMasterContainerAllocatorCollectionConfigurer which is used to configure MasterContainerAllocatorConfigurer parameters as an identified collection.", "code": "Interface MasterContainerAllocatorConfigurer.MasterContainerAllocatorCollectionConfigurer {\n\tMasterContainerAllocatorConfigurer and(); // Returns a parent MasterContainerAllocatorConfigurer configurer.\n\tMasterContainerAllocatorConfigurer.MasterContainerAllocatorCollectionConfigurer labelExpression(String labelExpression); // Specify a container label expression for ContainerAllocator.\n\tMasterContainerAllocatorConfigurer.MasterContainerAllocatorCollectionConfigurer locality(boolean locality); // Specify a locality relaxing for ContainerAllocator.\n\tMasterContainerAllocatorConfigurer.MasterContainerAllocatorCollectionConfigurer memory(int memory); // Specify a container memory for ContainerAllocator.\n\tMasterContainerAllocatorConfigurer.MasterContainerAllocatorCollectionConfigurer memory(String memory); // Specify a container memory for ContainerAllocator.\n\tMasterContainerAllocatorConfigurer.MasterContainerAllocatorCollectionConfigurer priority(Integer priority); // Specify a container priority for ContainerAllocator.\n\tMasterContainerAllocatorConfigurer.MasterContainerAllocatorCollectionConfigurer virtualCores(Integer virtualCores); // Specify a container virtual cores for ContainerAllocator.\n}"}
{"index": 14182, "repo": "wicket-core-10.0.0-M1", "des": "Checks if a credit card number is valid.", "code": "public class CreditCardValidator extends Object implements IValidator<String> {\n\tprotected IValidationError decorate(IValidationError error, IValidatable<String> validatable); // Allows subclasses to decorate reported errors\n\tfinal CreditCardValidator.CreditCard determineCardId(String creditCardNumber); // Checks if the credit card number can be determined as a valid number.\n\tfinal CreditCardValidator.CreditCard getCardId();\n\tprotected final boolean isChecksumCorrect(String creditCardNumber); // Calculates the checksum of a credit card number using the Luhn algorithm (the so-called \"mod 10\" algorithm).\n\tprotected boolean isLengthAndPrefixCorrect(String creditCardNumber); // Checks if the credit card number can be determined as a valid number.\n\tprotected CreditCardValidator.CreditCard isUnknown(String creditCardNumber); // Can be used (subclassed) to extend the test with a credit card not yet known by the validator.\n\tprotected void setCardId(CreditCardValidator.CreditCard cardId); // Allow subclasses to set the card id\n\tvoid validate(IValidatable<String> validatable); // Validates the IValidatable instance.\n}"}
{"index": 17343, "repo": "groovy-4.0.13", "des": "This is an AST Node that provides some sort of looping mechanism.", "code": "public interface LoopingStatement {\n\tStatement getLoopBlock(); // Gets the loop block.\n\tvoid setLoopBlock(Statement loopBlock); // Sets the loop block.\n}"}
{"index": 17403, "repo": "groovy-4.0.13", "des": "Provides the source text for an assertion statement and translates coordinates in the original source text to coordinates relative to the assertion's (normalized) source text.", "code": "public class SourceText extends Object {\n\tint getNormalizedColumn(int line, int column); // Returns the column in getNormalizedText() corresponding to the given line and column in the original source text.\n\tString getNormalizedText(); // Returns the assertion's source text after removing line breaks.\n}"}
{"index": 10816, "repo": "spring-boot-actuator-3.1.1", "des": "Maps an operation's response to a JMX-friendly form.", "code": "public interface JmxOperationResponseMapper {\n\tObject mapResponse(Object response); // Map the operation's response so that it can be consumed by a JMX compliant client.\n\tClass<?> mapResponseType(Class<?> responseType); // Map the response type to its JMX compliant counterpart.\n}"}
{"index": 250, "repo": "commons-collections4-4.4", "des": "Predicate implementation that transforms the given object before invoking another Predicate.", "code": "Class TransformedPredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning the result of the decorated predicate once the input has been transformed\n\tPredicate<? super T>[] getPredicates(); // Gets the predicate being decorated.\n\tTransformer<? super T,? extends T> getTransformer(); // Gets the transformer in use.\n\tstatic <T> Predicate<T> transformedPredicate(Transformer<? super T,? extends T> transformer, Predicate<? super T> predicate); // Factory to create the predicate.\n}"}
{"index": 5737, "repo": "freemarker-2.3.32", "des": "Represents the Rich Text Format output format (MIME type \"application/rtf\", name \"RTF\").", "code": "Class RTFOutputFormat {\n\tjava.lang.String escapePlainText(java.lang.String plainTextContent); // Should give the same result as MarkupOutputFormat.fromPlainTextByEscaping(String) and then MarkupOutputFormat.getMarkupString(TemplateMarkupOutputModel), but the implementation may use a more efficient solution.\n\tjava.lang.String getMimeType(); // Returns the MIME type of the output format.\n\tjava.lang.String getName(); // The short name used to refer to this format (like in the #ftl header).\n\tboolean isLegacyBuiltInBypassed(java.lang.String builtInName); // Tells if a string built-in that can't handle a TemplateMarkupOutputModel left hand operand can bypass this object as is.\n\tprotected TemplateRTFOutputModel newTemplateMarkupOutputModel(java.lang.String plainTextContent, java.lang.String markupContent); // Creates a new CommonTemplateMarkupOutputModel that's bound to this OutputFormat instance.\n\tvoid output(java.lang.String textToEsc, java.io.Writer out); // Equivalent to calling MarkupOutputFormat.fromPlainTextByEscaping(String) and then MarkupOutputFormat.output(TemplateMarkupOutputModel, Writer), but the implementation may use a more efficient solution.\n}"}
{"index": 13779, "repo": "spring-webmvc-6.0.11", "des": "A logical disjunction (' || ') request condition that matches a request against a set of RequestMethods.", "code": "public final class RequestMethodsRequestCondition extends AbstractRequestCondition<RequestMethodsRequestCondition> {\n\tRequestMethodsRequestCondition combine(RequestMethodsRequestCondition other); // Returns a new instance with a union of the HTTP request methods from \"this\" and the \"other\" instance.\n\tint compareTo(RequestMethodsRequestCondition other, HttpServletRequest request); // Returns: 0 if the two conditions contain the same number of HTTP request methods Less than 0 if \"this\" instance has an HTTP request method but \"other\" doesn't Greater than 0 \"other\" has an HTTP request method but \"this\" doesn't\n\tprotected Collection<org.springframework.web.bind.annotation.RequestMethod> getContent(); // Return the discrete items a request condition is composed of.\n\tRequestMethodsRequestCondition getMatchingCondition(HttpServletRequest request); // Check if any of the HTTP request methods match the given request and return an instance that contains the matching HTTP request method only.\n\tSet<org.springframework.web.bind.annotation.RequestMethod> getMethods(); // Returns all RequestMethods contained in this condition.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n}"}
{"index": 1367, "repo": "nutch-2.4", "des": "The PluginManifestParser parser just parse the manifest file in all plugin directories.", "code": "Class PluginManifestParser {\n\tjava.io.File getPluginFolder(java.lang.String name); // Return the named plugin folder.\n\tjava.util.Map<java.lang.String,PluginDescriptor> parsePluginFolder(java.lang.String[] pluginFolders); // Returns a list of all found plugin descriptors.\n}"}
{"index": 7072, "repo": "calcite-core-1.34.0", "des": "Records that a particular query is materialized by a particular table.", "code": "Class RelOptMaterialization {\n\tstatic RelNode toLeafJoinForm(RelNode rel); // Converts a relational expression to a form where LogicalJoins are as close to leaves as possible.\n\tstatic @Nullable RelNode tryUseStar(RelNode rel, RelOptTable starRelOptTable); // Converts a relational expression to one that uses a StarTable.\n}"}
{"index": 7607, "repo": "cassandra-all-4.1.2", "des": "Represents a duration used for Cassandra configuration.", "code": "Class DurationSpec.IntMinutesBound {\n\tint toMilliseconds(); // Returns this duration in number of milliseconds as an int\n\tint toMinutes(); // Returns this duration in number of minutes as an int\n\tint toSeconds(); // Returns this duration in number of seconds as an int\n}"}
{"index": 1314, "repo": "ignite-core-2.15.0", "des": "Class for holding only very basic WAL filters for using in FilteredWalIterator.", "code": "Class WalFilters {\n\tstatic Predicate<IgniteBiTuple<WALPointer,WALRecord>> checkpoint(); // Filtering all checkpoint records.\n\tstatic Predicate<IgniteBiTuple<WALPointer,WALRecord>> pageOwner(Set<T2<Integer,Long>> pageOwnerIds); // Filtering all records whose pageId is contained in pageOwnerIds.\n\tstatic Predicate<IgniteBiTuple<WALPointer,WALRecord>> partitionMetaStateUpdate(Set<T2<Integer,Integer>> partsMetaupdate); // Filtering all records whose partitionId is contained in partsMetaupdate.\n}"}
{"index": 16757, "repo": "spring-jms-6.0.11", "des": "A simple message converter which is able to handle TextMessages, BytesMessages, MapMessages, and ObjectMessages.", "code": "public class SimpleMessageConverter extends Object implements MessageConverter {\n\tprotected BytesMessage createMessageForByteArray(byte[] bytes, Session session); // Create a JMS BytesMessage for the given byte array.\n\tprotected MapMessage createMessageForMap(Map<?,?> map, Session session); // Create a JMS MapMessage for the given Map.\n\tprotected ObjectMessage createMessageForSerializable(Serializable object, Session session); // Create a JMS ObjectMessage for the given Serializable object.\n\tprotected TextMessage createMessageForString(String text, Session session); // Create a JMS TextMessage for the given String.\n\tprotected byte[] extractByteArrayFromMessage(BytesMessage message); // Extract a byte array from the given BytesMessage.\n\tprotected Map<String,Object> extractMapFromMessage(MapMessage message); // Extract a Map from the given MapMessage.\n\tprotected Serializable extractSerializableFromMessage(ObjectMessage message); // Extract a Serializable object from the given ObjectMessage.\n\tprotected String extractStringFromMessage(TextMessage message); // Extract a String from the given TextMessage.\n\tObject fromMessage(Message message); // This implementation converts a TextMessage back to a String, a ByteMessage back to a byte array, a MapMessage back to a Map, and an ObjectMessage back to a Serializable object.\n\tMessage toMessage(Object object, Session session); // This implementation creates a TextMessage for a String, a BytesMessage for a byte array, a MapMessage for a Map, and an ObjectMessage for a Serializable object.\n}"}
{"index": 8236, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents a Web service message with MIME attachments.", "code": "Interface MimeMessage {\n\tAttachment addAttachment(String contentId, DataHandler dataHandler); // Add an attachment to the message, taking the content from a DataHandler.\n\tAttachment addAttachment(String contentId, File file); // Add an attachment to the message, taking the content from a File.\n\tAttachment addAttachment(String contentId, org.springframework.core.io.InputStreamSource inputStreamSource, String contentType); // Add an attachment to the message, taking the content from an InputStreamSource.\n\tboolean convertToXopPackage(); // Turns this message into a XOP package.\n\tAttachment getAttachment(String contentId); // Returns the Attachment with the specified content Id.\n\tIterator<Attachment> getAttachments(); // Returns an Iterator over all Attachment objects that are part of this message.\n\tboolean isXopPackage(); // Indicates whether this message is a XOP package.\n}"}
{"index": 6006, "repo": "commons-lang3-3.12.0", "des": "Combines the monitor and visitor pattern to work with locked objects.", "code": "Class LockingVisitors {\n\tstatic <O> LockingVisitors.ReadWriteLockVisitor<O> reentrantReadWriteLockVisitor(O object); // Creates a new instance of LockingVisitors.ReadWriteLockVisitor with the given (hidden) object.\n\tstatic <O> LockingVisitors.StampedLockVisitor<O> stampedLockVisitor(O object); // Creates a new instance of LockingVisitors.StampedLockVisitor with the given (hidden) object.\n}"}
{"index": 219, "repo": "commons-collections4-4.4", "des": "Transformer implementation that calls a Predicate using the input object and then returns the result.", "code": "Class PredicateTransformer<T> {\n\tPredicate<? super T> getPredicate(); // Gets the predicate.\n\tstatic <T> Transformer<T,Boolean> predicateTransformer(Predicate<? super T> predicate); // Factory method that performs validation.\n\tBoolean transform(T input); // Transforms the input to result by calling a predicate.\n}"}
{"index": 3370, "repo": "hadoop-azure-3.3.6", "des": "Stream object that implements append for Block Blobs in WASB.", "code": "Class BlockBlobAppendStream {\n\tvoid close(); // Force all data in the output stream to be written to Azure storage.\n\tvoid flush(); // Flushes this output stream and forces any buffered output bytes to be written out.\n\tboolean hasCapability(String capability); // The Synchronization capabilities of this stream depend upon the compaction policy.\n\tvoid hflush(); // Force all data in the output stream to be written to Azure storage.\n\tvoid hsync(); // Force all data in the output stream to be written to Azure storage.\n\tvoid write(byte[] data, int offset, int length); // Writes length bytes from the specified byte array starting at offset to this output stream.\n\tvoid write(int byteVal); // Writes the specified byte to this output stream.\n}"}
{"index": 16084, "repo": "shiro-web-2.0.0-alpha-2", "des": "Base class for Filters that will process only specified paths and allow all others to pass through.", "code": "public abstract class PathMatchingFilter extends AdviceFilter implements PathConfigProcessor {\n\tprotected String getPathWithinApplication(javax.servlet.ServletRequest request); // Returns the context path within the application based on the specified request.\n\tprotected boolean isEnabled(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, String path, Object mappedValue); // Path-matching version of the parent class's OncePerRequestFilter.isEnabled(javax.servlet.ServletRequest, javax.servlet.ServletResponse) method, but additionally allows for inspection of any path-specific configuration values corresponding to the specified request.\n\tprotected boolean onPreHandle(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, Object mappedValue); // This default implementation always returns true and should be overridden by subclasses for custom logic if necessary.\n\tprotected boolean pathsMatch(String pattern, String path); // Returns true if the path matches the specified pattern string, false otherwise.\n\tprotected boolean pathsMatch(String path, javax.servlet.ServletRequest request); // Returns true if the incoming request matches the specified path pattern, false otherwise.\n\tprotected boolean preHandle(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response); // Implementation that handles path-matching behavior before a request is evaluated.\n\tjavax.servlet.Filter processPathConfig(String path, String config); // Splits any comma-delimited values that might be found in the config argument and sets the resulting String[] array on the appliedPaths internal Map.\n}"}
{"index": 17422, "repo": "groovy-4.0.13", "des": "Handles generation of code for the @TupleConstructor annotation.", "code": "public class TupleConstructorASTTransformation extends AbstractASTTransformation implements CompilationUnitAware, TransformWithPriority {\n\tstatic void addSpecialMapConstructors(int modifiers, ClassNode cNode, String message, boolean addNoArg);\n\tString getAnnotationName(); // If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tint priority();\n\tvoid setCompilationUnit(CompilationUnit unit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 5694, "repo": "freemarker-2.3.32", "des": "Adapts an Enumeration to the corresponding TemplateModel interface(s), most importantly to TemplateCollectionModel.", "code": "Class DefaultEnumerationAdapter {\n\tstatic DefaultEnumerationAdapter adapt(java.util.Enumeration<?> enumeration, ObjectWrapper wrapper); // Factory method for creating new adapter instances.\n\tjava.lang.Object getAdaptedObject(java.lang.Class<?> hint); // Retrieves the underlying object, or some other object semantically equivalent to its value narrowed by the class hint.\n\tTemplateModel getAPI(); // Returns the model that exposes the (Java) API of the value.\n\tjava.lang.Object getWrappedObject(); // Retrieves the original object wrapped by this model.\n\tTemplateModelIterator iterator(); // Retrieves a template model iterator that is used to iterate over the elements in this collection.\n}"}
{"index": 14585, "repo": "spring-security-web-6.1.2", "des": "A Spring Security-aware HttpServletRequestWrapper, which uses the SecurityContext-defined Authentication object to implement the servlet API security methods: SecurityContextHolderAwareRequestWrapper.getUserPrincipal() SecurityContextHolderAwareRequestWrapper.isUserInRole(String) HttpServletRequestWrapper.getRemoteUser().", "code": "public class SecurityContextHolderAwareRequestWrapper extends jakarta.servlet.http.HttpServletRequestWrapper {\n\tString getRemoteUser(); // Returns the principal's name, as obtained from the SecurityContextHolder.\n\tPrincipal getUserPrincipal(); // Returns the Authentication (which is a subclass of Principal), or null if unavailable.\n\tboolean isUserInRole(String role); // Simple searches for an exactly matching GrantedAuthority.getAuthority().\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 16918, "repo": "spring-integration-ip-6.1.2", "des": "Reads data in an InputStream to a byte[]; data must be prefixed by <stx> and terminated by <etx> (not included in resulting byte[]).", "code": "public class ByteArrayStxEtxSerializer extends AbstractPooledBufferByteArraySerializer {\n\tbyte[] doDeserialize(InputStream inputStream, byte[] buffer); // Reads the data in the inputStream to a byte[].\n\tvoid serialize(byte[] bytes, OutputStream outputStream); // Writes the byte[] to the stream, prefixed by an ASCII STX character and terminated with an ASCII ETX character.\n}"}
{"index": 14194, "repo": "wicket-core-10.0.0-M1", "des": "Base class for all HeaderItems that represent stylesheets.", "code": "public abstract class CssHeaderItem extends AbstractCspHeaderItem {\n\tboolean equals(Object o);\n\tstatic CssContentHeaderItem forCSS(CharSequence css, String id); // Creates a CssContentHeaderItem for the given content.\n\tstatic CssReferenceHeaderItem forReference(ResourceReference reference); // Creates a CssReferenceHeaderItem for the given reference.\n\tstatic CssReferenceHeaderItem forReference(ResourceReference reference, String media); // Creates a CssReferenceHeaderItem for the given reference.\n\tstatic CssReferenceHeaderItem forReference(ResourceReference reference, org.apache.wicket.request.mapper.parameter.PageParameters pageParameters, String media); // Creates a CssReferenceHeaderItem for the given reference.\n\tstatic CssReferenceHeaderItem forReference(ResourceReference reference, org.apache.wicket.request.mapper.parameter.PageParameters pageParameters, String media, String rel); // Creates a CssReferenceHeaderItem for the given reference.\n\tstatic CssUrlReferenceHeaderItem forUrl(String url); // Creates a CssUrlReferenceHeaderItem for the given url.\n\tstatic CssUrlReferenceHeaderItem forUrl(String url, String media); // Creates a CssUrlReferenceHeaderItem for the given url.\n\tstatic CssUrlReferenceHeaderItem forUrl(String url, String media, String rel); // Creates a CssUrlReferenceHeaderItem for the given url.\n\tString getId();\n\tCssHeaderItem setId(String markupId);\n}"}
{"index": 13885, "repo": "spring-webflux-6.0.11", "des": "Contract to abstract the details of invoking a handler of a given type.", "code": "public interface HandlerAdapter {\n\treactor.core.publisher.Mono<HandlerResult> handle(org.springframework.web.server.ServerWebExchange exchange, Object handler); // Handle the request with the given handler, previously checked via supports(Object).\n\tboolean supports(Object handler); // Whether this HandlerAdapter supports the given handler.\n}"}
{"index": 18146, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Represents the circular side of a bi-directional entity association.", "code": "Interface BidirectionalEntityReference {\n\tjava.lang.String getQuerySpaceUid(); // The query space UID returned using getQuerySpaceUid() must be the same as returned by getTargetEntityReference()\n\tEntityReference getTargetEntityReference(); // Get the targeted EntityReference\n}"}
{"index": 6215, "repo": "jackson-databind-2.15.2", "des": "Standard implementation of Converter that supports explicit type access, instead of relying type detection of generic type parameters.", "code": "Class StdConverter<IN,OUT> {\n\tprotected JavaType _findConverterType(TypeFactory tf);\n\tabstract OUT convert(IN value); // Main conversion method.\n\tJavaType getInputType(TypeFactory typeFactory); // Method that can be used to find out actual input (source) type; this usually can be determined from type parameters, but may need to be implemented differently from programmatically defined converters (which cannot change static type parameter bindings).\n\tJavaType getOutputType(TypeFactory typeFactory); // Method that can be used to find out actual output (target) type; this usually can be determined from type parameters, but may need to be implemented differently from programmatically defined converters (which cannot change static type parameter bindings).\n}"}
{"index": 7788, "repo": "cassandra-all-4.1.2", "des": "A single restriction/clause on one or multiple column.", "code": "Interface SingleRestriction {\n\tdefault MultiCBuilder appendBoundTo(MultiCBuilder builder, Bound bound, QueryOptions options); // Appends the values of the SingleRestriction for the specified bound to the specified builder.\n\tMultiCBuilder appendTo(MultiCBuilder builder, QueryOptions options); // Appends the values of this SingleRestriction to the specified builder.\n\tdefault boolean hasBound(Bound b); // Checks if the specified bound is set or not.\n\tdefault boolean isContains();\n\tdefault boolean isEQ();\n\tdefault boolean isIN();\n\tdefault boolean isInclusive(Bound b); // Checks if the specified bound is inclusive or not.\n\tdefault boolean isLIKE();\n\tdefault boolean isMultiColumn();\n\tdefault boolean isNotNull();\n\tdefault boolean isSlice();\n\tSingleRestriction mergeWith(SingleRestriction otherRestriction); // Merges this restriction with the specified one.\n}"}
{"index": 2073, "repo": "hive-exec-4.0.0-alpha-2", "des": "A constant-space heuristic to estimate the top-k contextual n-grams.", "code": "Class GenericUDAFContextNGrams.GenericUDAFContextNGramEvaluator {\n\tGenericUDAFEvaluator.AggregationBuffer getNewAggregationBuffer(); // Get a new aggregation object.\n\tObjectInspector init(GenericUDAFEvaluator.Mode m, ObjectInspector[] parameters); // Initialize the evaluator.\n\tvoid iterate(GenericUDAFEvaluator.AggregationBuffer agg, Object[] parameters); // Iterate through original data.\n\tvoid merge(GenericUDAFEvaluator.AggregationBuffer agg, Object obj); // Merge with partial aggregation result.\n\tvoid reset(GenericUDAFEvaluator.AggregationBuffer agg); // Reset the aggregation.\n\tObject terminate(GenericUDAFEvaluator.AggregationBuffer agg); // Get final aggregation result.\n\tObject terminatePartial(GenericUDAFEvaluator.AggregationBuffer agg); // Get partial aggregation result.\n}"}
{"index": 2746, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "Convert HBase tabular data into a format that is consumable by Map/Reduce.", "code": "Class TableInputFormat {\n\tstatic void addColumns(Scan scan, byte[][] columns); // Adds an array of columns specified using old format, family:qualifier.\n\tstatic void configureSplitTable(org.apache.hadoop.mapreduce.Job job, TableName tableName); // Sets split table in map-reduce job.\n\tstatic Scan createScanFromConfiguration(org.apache.hadoop.conf.Configuration conf); // Sets up a Scan instance, applying settings from the configuration property constants defined in TableInputFormat.\n\torg.apache.hadoop.conf.Configuration getConf(); // Returns the current configuration.\n\tList<org.apache.hadoop.mapreduce.InputSplit> getSplits(org.apache.hadoop.mapreduce.JobContext context); // Calculates the splits that will serve as input for the map tasks.\n\tprotected Pair<byte[][],byte[][]> getStartEndKeys();\n\tprotected void initialize(org.apache.hadoop.mapreduce.JobContext context); // Handle subclass specific set up.\n\tvoid setConf(org.apache.hadoop.conf.Configuration configuration); // Sets the configuration.\n}"}
{"index": 872, "repo": "ignite-core-2.15.0", "des": "Shallow copy that contains reference to delegate HistoryAffinityAssignment.", "code": "Class HistoryAffinityAssignmentShallowCopy {\n\tList<List<ClusterNode>> assignment();\n\tSet<Integer> backupPartitions(UUID nodeId); // Get backup partitions for specified node ID.\n\tList<ClusterNode> get(int part); // Get affinity nodes for partition.\n\tCollection<UUID> getIds(int part); // Get affinity node IDs for partition.\n\tList<List<ClusterNode>> idealAssignment();\n\tSet<ClusterNode> nodes();\n\tHistoryAffinityAssignment origin(); // In case this instance is lightweight wrapper of another instance, this method should return reference to an original one.\n\tSet<Integer> partitionPrimariesDifferentToIdeal();\n\tSet<ClusterNode> primaryPartitionNodes();\n\tSet<Integer> primaryPartitions(UUID nodeId); // Get primary partitions for specified node ID.\n\tboolean requiresHistoryCleanup(); // Should return true if instance is \"heavy\" and should be taken into account during history size management.\n\tAffinityTopologyVersion topologyVersion();\n}"}
{"index": 16599, "repo": "spring-beans-6.0.11", "des": "Interface that can be used to configure the code that will be generated to perform registration of a single bean.", "code": "public interface BeanRegistrationCode {\n\tvoid addInstancePostProcessor(org.springframework.aot.generate.MethodReference methodReference); // Add an instance post processor method call to the registration code.\n\torg.springframework.javapoet.ClassName getClassName(); // Return the name of the class being used for registrations.\n\torg.springframework.aot.generate.GeneratedMethods getMethods(); // Return a GeneratedMethods being used by the registrations code.\n}"}
{"index": 3906, "repo": "hbase-client-3.0.0-alpha-4", "des": "Represents an authorization for access for the given actions, optionally restricted to the given column family or column qualifier, over the given table.", "code": "Class TablePermission {\n\tboolean equals(Object obj);\n\tboolean equalsExceptActions(Object obj); // Check if two permission equals regardless of actions.\n\tbyte[] getFamily();\n\tString getNamespace();\n\tbyte[] getQualifier();\n\tTableName getTableName();\n\tboolean hasFamily();\n\tboolean hasQualifier();\n\tboolean implies(TableName table, byte[] family, byte[] qualifier, Permission.Action action); // Check if given action can performs on given table:family:qualifier.\n\tboolean implies(TableName table, byte[] family, Permission.Action action); // Check if given action can performs on given table:family.\n\tboolean implies(TableName table, KeyValue kv, Permission.Action action); // Checks if this permission grants access to perform the given action on the given table and key value.\n\tprotected String rawExpression();\n\tvoid readFields(DataInput in);\n\tboolean tableFieldsEqual(TablePermission tp); // Check if fields of table in table permission equals.\n\tvoid write(DataOutput out);\n}"}
{"index": 17960, "repo": "spring-web-6.0.11", "des": "Specialized DataBinder to perform data binding from URL query parameters or form data in the request data to Java objects.", "code": "public class WebExchangeDataBinder extends WebDataBinder {\n\tprotected static void addBindValue(Map<String,Object> params, String key, List<?> values);\n\treactor.core.publisher.Mono<Void> bind(ServerWebExchange exchange); // Bind query parameters, form data, or multipart form data to the binder target.\n\tstatic reactor.core.publisher.Mono<Map<String,Object>> extractValuesToBind(ServerWebExchange exchange); // Combine query params and form data for multipart form data from the body of the request into a Map<String, Object> of values to use for data binding purposes.\n\treactor.core.publisher.Mono<Map<String,Object>> getValuesToBind(ServerWebExchange exchange); // Obtain the values for data binding.\n}"}
{"index": 13957, "repo": "spring-webflux-6.0.11", "des": "Receives notifications from the logical structure of router functions.", "code": "public static interface RouterFunctions.Visitor {\n\tvoid attributes(Map<String,Object> attributes); // Receive notification of a router function with attributes.\n\tvoid endNested(RequestPredicate predicate); // Receive notification of the end of a nested router function.\n\tvoid resources(Function<ServerRequest,reactor.core.publisher.Mono<org.springframework.core.io.Resource>> lookupFunction); // Receive notification of a resource router function.\n\tvoid route(RequestPredicate predicate, HandlerFunction<?> handlerFunction); // Receive notification of a standard predicated route to a handler function.\n\tvoid startNested(RequestPredicate predicate); // Receive notification of the beginning of a nested router function.\n\tvoid unknown(RouterFunction<?> routerFunction); // Receive notification of an unknown router function.\n}"}
{"index": 17215, "repo": "spring-boot-maven-plugin-3.1.1", "des": "Base class to run a Spring Boot application.", "code": "public abstract class AbstractRunMojo extends AbstractDependencyFilterMojo {\n\tvoid execute();\n\tprotected List<File> getClassesDirectories(); // Returns the directories that contain the application's classes and resources.\n\tprotected URL[] getClassPathUrls();\n\tprotected abstract boolean isUseTestClasspath();\n\tprotected org.springframework.boot.maven.RunArguments resolveApplicationArguments(); // Resolve the application arguments to use.\n\tprotected org.springframework.boot.maven.EnvVariables resolveEnvVariables(); // Resolve the environment variables to use.\n\tprotected org.springframework.boot.maven.RunArguments resolveJvmArguments(); // Resolve the JVM arguments to use.\n\tprotected abstract void run(org.springframework.boot.maven.JavaProcessExecutor processExecutor, File workingDirectory, List<String> args, Map<String,String> environmentVariables); // Run the application.\n}"}
{"index": 13620, "repo": "spring-boot-loader-3.1.1", "des": "Interface that provides read-only random access to some underlying data.", "code": "public interface RandomAccessData {\n\tInputStream getInputStream(); // Returns an InputStream that can be used to read the underlying data.\n\tlong getSize(); // Returns the size of the data.\n\tRandomAccessData getSubsection(long offset, long length); // Returns a new RandomAccessData for a specific subsection of this data.\n\tbyte[] read(); // Reads all the data and returns it as a byte array.\n\tbyte[] read(long offset, long length); // Reads the length bytes of data starting at the given offset.\n}"}
{"index": 3314, "repo": "hbase-common-3.0.0-alpha-4", "des": "The Union family of DataTypes encode one of a fixed collection of Objects.", "code": "Class Union3<A,B,C> {\n\tC decodeC(PositionedByteRange src); // Read an instance of the third type parameter from buffer src.\n\tOrder getOrder(); // Retrieve the sort Order imposed by this data type, or null when natural ordering is not preserved.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n\tboolean isOrderPreserving(); // Indicates whether this instance writes encoded byte[]'s which preserve the natural sort order of the unencoded value.\n\tboolean isSkippable(); // Indicates whether this instance is able to skip over it's encoded value.\n}"}
{"index": 9789, "repo": "commons-math3-3.6.1", "des": "This interface defines a visitor for the entries of a vector.", "code": "Interface RealVectorChangingVisitor {\n\tdouble end(); // End visiting a vector.\n\tvoid start(int dimension, int start, int end); // Start visiting a vector.\n\tdouble visit(int index, double value); // Visit one entry of the vector.\n}"}
{"index": 15192, "repo": "spring-boot-3.1.1", "des": "Possible values to pass to AnsiOutput.setEnabled(org.springframework.boot.ansi.AnsiOutput.Enabled).", "code": "public static enum AnsiOutput.Enabled extends Enum<AnsiOutput.Enabled> {\n\tstatic AnsiOutput.Enabled valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AnsiOutput.Enabled[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 3639, "repo": "hive-serde-4.0.0-alpha-2", "des": "This enum controls how we interpret null value when compare two objects.", "code": "Enum ObjectInspectorUtils.NullValueOption {\n\tint getCmpReturnValue();\n\tstatic ObjectInspectorUtils.NullValueOption valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ObjectInspectorUtils.NullValueOption[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16928, "repo": "spring-integration-ip-6.1.2", "des": "Factory class to create TCP Serializer/Deserializers used to encode/decode messages to/from a TCP stream.", "code": "public final class TcpCodecs extends Object {\n\tstatic ByteArrayCrLfSerializer crlf(); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayCrLfSerializer crlf(int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader(int bytes); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader1(); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader1(int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader2(); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader2(int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader4(); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayLengthHeaderSerializer lengthHeader4(int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArrayLfSerializer lf(); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayLfSerializer lf(int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArrayRawSerializer raw(); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayRawSerializer raw(int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArraySingleTerminatorSerializer singleTerminator(byte terminator); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArraySingleTerminatorSerializer singleTerminator(byte terminator, int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n\tstatic ByteArrayStxEtxSerializer stxetx(); // Return a serializer with the default max message size for deserialization.\n\tstatic ByteArrayStxEtxSerializer stxetx(int maxMessageSize); // Return a serializer with the provided max message size for deserialization.\n}"}
{"index": 17225, "repo": "spring-xml-4.0.5", "des": "Implementation of XPathOperations that uses Jaxen.", "code": "public class JaxenXPathTemplate extends AbstractXPathTemplate {\n\t<T> List<T> evaluate(String expression, Source context, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\tboolean evaluateAsBoolean(String expression, Source context); // Evaluates the given expression as a boolean.\n\tdouble evaluateAsDouble(String expression, Source context); // Evaluates the given expression as a double.\n\tNode evaluateAsNode(String expression, Source context); // Evaluates the given expression as a Node.\n\tList<Node> evaluateAsNodeList(String expression, Source context); // Evaluates the given expression as a list of Node objects.\n\t<T> T evaluateAsObject(String expression, Source context, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping a single Node result to a Java object via a NodeMapper.\n\tString evaluateAsString(String expression, Source context); // Evaluates the given expression as a String.\n}"}
{"index": 7741, "repo": "cassandra-all-4.1.2", "des": "Rebufferer for reading data by a RandomAccessReader.", "code": "Interface Rebufferer {\n\tvoid closeReader(); // Called when a reader is closed.\n\tRebufferer.BufferHolder rebuffer(long position); // Rebuffer (move on or seek to) a given position, and return a buffer that can be used there.\n}"}
{"index": 2233, "repo": "hive-exec-4.0.0-alpha-2", "des": "PrivilegeScope describes a hive defined privilege's scope (global/database/table/column).", "code": "Enum PrivilegeScope {\n\tshort getMode();\n\tvoid setMode(short mode);\n\tstatic PrivilegeScope valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PrivilegeScope[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13980, "repo": "spring-webflux-6.0.11", "des": "Assist with configuring properties of a UrlBasedViewResolver.", "code": "public class UrlBasedViewResolverRegistration extends Object {\n\tprotected UrlBasedViewResolver getViewResolver();\n\tUrlBasedViewResolverRegistration prefix(String prefix); // Set the prefix that gets prepended to view names when building a URL.\n\tUrlBasedViewResolverRegistration suffix(String suffix); // Set the suffix that gets appended to view names when building a URL.\n\tUrlBasedViewResolverRegistration viewClass(Class<?> viewClass); // Set the view class that should be used to create views.\n\tUrlBasedViewResolverRegistration viewNames(String... viewNames); // Set the view names (or name patterns) that can be handled by this view resolver.\n}"}
{"index": 5414, "repo": "druid-processing-26.0.0", "des": "Represents a specific sorting or hashing key.", "code": "Class RowKey {\n\tbyte[] array(); // Get the backing array for this key (not a copy).\n\tstatic RowKey empty();\n\tboolean equals(Object o);\n\tint estimatedObjectSizeBytes(); // Estimate number of bytes taken by the key array.\n\tlong longHashCode();\n\tstatic RowKey wrap(byte[] row); // Create a key from a byte array.\n}"}
{"index": 17642, "repo": "spring-web-6.0.11", "des": "Base class for ClientHttpRequest implementations.", "code": "public abstract class AbstractClientHttpRequest extends Object implements ClientHttpRequest {\n\tprotected abstract void applyCookies(); // Add cookies from getHeaders() to the underlying request.\n\tprotected abstract void applyHeaders(); // Apply header changes from getHeaders() to the underlying request.\n\tvoid beforeCommit(Supplier<? extends reactor.core.publisher.Mono<Void>> action); // Register an action to apply just before the HttpOutputMessage is committed.\n\tprotected reactor.core.publisher.Mono<Void> doCommit(); // A variant of doCommit(Supplier) for a request without body.\n\tprotected reactor.core.publisher.Mono<Void> doCommit(Supplier<? extends Publisher<Void>> writeAction); // Apply beforeCommit actions, apply the request headers/cookies, and write the request body.\n\torg.springframework.util.MultiValueMap<String,HttpCookie> getCookies(); // Return a mutable map of request cookies to send to the server.\n\tHttpHeaders getHeaders(); // Return the headers of this message.\n\tprotected HttpHeaders initReadOnlyHeaders(); // Initialize the read-only headers after the request is committed.\n\tboolean isCommitted(); // Whether the HttpOutputMessage is committed.\n}"}
{"index": 12746, "repo": "spring-data-mongodb-4.1.2", "des": "Additional, context relevant information.", "code": "public static class GridFsObject.Options extends Object {\n\tGridFsObject.Options chunkSize(int chunkSize);\n\tGridFsObject.Options contentType(String contentType); // Set the associated content type.\n\tstatic GridFsObject.Options from(com.mongodb.client.gridfs.model.GridFSFile gridFSFile); // Static factory method to create GridFsObject.Options by extracting information from the given GridFSFile.\n\tint getChunkSize();\n\torg.bson.Document getMetadata();\n\tGridFsObject.Options metadata(org.bson.Document metadata);\n\tstatic GridFsObject.Options none(); // Static factory to create empty options.\n\tstatic GridFsObject.Options typed(String contentType); // Static factory method to create GridFsObject.Options with given content type.\n}"}
{"index": 6870, "repo": "calcite-core-1.34.0", "des": "ExplicitOperatorBinding implements SqlOperatorBinding via an underlying array of known operand types.", "code": "Class ExplicitOperatorBinding {\n\tint getOperandCount(); // Returns the number of bound operands.\n\tRelDataType getOperandType(int ordinal); // Gets the type of a bound operand.\n\tboolean isOperandNull(int ordinal, boolean allowCast); // Determines whether a bound operand is NULL.\n\tCalciteException newError(org.apache.calcite.runtime.Resources.ExInst<SqlValidatorException> e); // Wraps a validation error with context appropriate to this operator call.\n}"}
{"index": 1300, "repo": "ignite-core-2.15.0", "des": "Data transfer object for cache query configuration data.", "code": "Class VisorQueryConfiguration {\n\tList<String> getIndexedTypes();\n\tlong getLongQueryWarningTimeout();\n\tList<String> getSqlFunctionClasses();\n\tString getSqlSchema();\n\tboolean isSqlEscapeAll();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 4223, "repo": "jackson-core-2.15.2", "des": "Helper class that can be used to sequence multiple physical JsonParsers to create a single logical sequence of tokens, as a single JsonParser.", "code": "Class JsonParserSequence {\n\tprotected void addFlattenedActiveParsers(List<JsonParser> listToAddIn);\n\tvoid close(); // Closes the parser so that no further iteration or data access can be made; will also close the underlying input source if parser either owns the input source, or feature JsonParser.Feature.AUTO_CLOSE_SOURCE is enabled.\n\tint containedParsersCount(); // Method that is most useful for debugging or testing; returns actual number of underlying parsers sequence was constructed with (nor just ones remaining active)\n\tstatic JsonParserSequence createFlattened(boolean checkForExistingToken, JsonParser first, JsonParser second); // Method that will construct a sequence (possibly a sequence) that contains all given sub-parsers.\n\tJsonToken nextToken(); // Main iteration method, which will advance stream enough to determine type of the next token, if any.\n\tJsonParser skipChildren(); // Need to override, re-implement similar to how method defined in ParserMinimalBase, to keep state correct here.\n\tprotected JsonToken switchAndReturnNext();\n\tprotected boolean switchToNext(); // Method that will switch active delegate parser from the current one to the next parser in sequence, if there is another parser left: if so, the next parser will become the active delegate parser.\n}"}
{"index": 9592, "repo": "commons-math3-3.6.1", "des": "This interface defines mappers between a space and one of its sub-spaces.", "code": "Interface Embedding<S extends Space,T extends Space> {\n\tPoint<S> toSpace(Point<T> point); // Transform a sub-space point into a space point.\n\tPoint<T> toSubSpace(Point<S> point); // Transform a space point into a sub-space point.\n}"}
{"index": 1655, "repo": "samza-api-1.8.0", "des": "A checkpoint is a mapping of all the streams a job is consuming and the most recent current offset for each.", "code": "Class CheckpointV2 {\n\tboolean equals(java.lang.Object o);\n\tCheckpointId getCheckpointId(); // Gets the checkpoint id for the checkpoint\n\tjava.util.Map<SystemStreamPartition,java.lang.String> getOffsets(); // Gets a unmodifiable view of the current input SystemStreamPartition offsets.\n\tjava.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> getStateCheckpointMarkers(); // Gets the state checkpoint markers for all stores for each configured state backend.\n\tshort getVersion(); // Gets the version number of the Checkpoint\n}"}
{"index": 14921, "repo": "spring-security-test-6.1.2", "des": "Updates the WebServerExchange using {@link SecurityMockServerConfigurers#mockAuthentication(Authentication)}.", "code": "public static final class SecurityMockServerConfigurers.JwtMutator extends Object implements org.springframework.test.web.reactive.server.WebTestClientConfigurer, org.springframework.test.web.reactive.server.MockServerConfigurer {\n\tvoid afterConfigureAdded(org.springframework.test.web.reactive.server.WebTestClient.MockServerSpec<?> serverSpec);\n\tvoid afterConfigurerAdded(org.springframework.test.web.reactive.server.WebTestClient.Builder builder, org.springframework.web.server.adapter.WebHttpHandlerBuilder httpHandlerBuilder, org.springframework.http.client.reactive.ClientHttpConnector connector);\n\tSecurityMockServerConfigurers.JwtMutator authorities(Collection<org.springframework.security.core.GrantedAuthority> authorities); // Use the provided authorities in the token\n\tSecurityMockServerConfigurers.JwtMutator authorities(org.springframework.core.convert.converter.Converter<org.springframework.security.oauth2.jwt.Jwt,Collection<org.springframework.security.core.GrantedAuthority>> authoritiesConverter); // Provides the configured Jwt so that custom authorities can be derived from it\n\tSecurityMockServerConfigurers.JwtMutator authorities(org.springframework.security.core.GrantedAuthority... authorities); // Use the provided authorities in the token\n\tvoid beforeServerCreated(org.springframework.web.server.adapter.WebHttpHandlerBuilder builder);\n\tSecurityMockServerConfigurers.JwtMutator jwt(Consumer<org.springframework.security.oauth2.jwt.Jwt.Builder> jwtBuilderConsumer); // Use the given Jwt.Builder Consumer to configure the underlying Jwt This method first creates a default Jwt.Builder instance with default values for the alg, sub, and scope claims.\n\tSecurityMockServerConfigurers.JwtMutator jwt(org.springframework.security.oauth2.jwt.Jwt jwt); // Use the given Jwt\n}"}
{"index": 3959, "repo": "spring-cloud-commons-parent-1.1.9.RELEASE", "des": "DiscoveryClient used when no implementations are found on the classpath.", "code": "Class NoopDiscoveryClient {\n\tString description(); // A human readable description of the implementation, used in HealthIndicator\n\tList<ServiceInstance> getInstances(String serviceId); // Get all ServiceInstances associated with a particular serviceId\n\tServiceInstance getLocalServiceInstance();\n\tList<String> getServices();\n}"}
{"index": 6828, "repo": "calcite-core-1.34.0", "des": "Implementation of SqlValidatorCatalogReader that passes all calls to a parent catalog reader.", "code": "Class DelegatingSqlValidatorCatalogReader {\n\tList<SqlMoniker> getAllSchemaObjectNames(List<String> names); // Given fully qualified schema name, returns schema object names as specified.\n\t@Nullable RelDataType getNamedType(SqlIdentifier typeName); // Finds a user-defined type with the given name, possibly qualified.\n\tList<List<String>> getSchemaPaths(); // Returns the paths of all schemas to look in for tables.\n\t@Nullable SqlValidatorTable getTable(List<String> names); // Finds a table or schema with the given name, possibly qualified.\n\t<C> C unwrap(Class<C> aClass); // Finds an instance of an interface implemented by this object, or returns null if this object does not support that interface.\n}"}
{"index": 11967, "repo": "jena-core-4.9.0", "des": "A default implementation of capabilities, in which everything is allowed, size is accurate, and graphs may be completely empty.", "code": "public class AllCapabilities extends Object implements Capabilities {\n\tboolean addAllowed(); // Answer true iff Graph.add(org.apache.jena.graph.Triple) can be used to add at least some triples to the graph.\n\tboolean deleteAllowed(); // Answer true iff Graph.delete(org.apache.jena.graph.Triple) can be used to remove at least some triples from the graph.\n\tboolean handlesLiteralTyping(); // Answer true iff this graph compares literals for equality by value in find() operations, rather just applying RDFTerm equality.\n\tboolean sizeAccurate(); // Answer true iff Graph::size() is accurate.\n}"}
{"index": 6109, "repo": "jackson-databind-2.15.2", "des": "Helper class used for storing String serializations of Enums, to match to/from external representations.", "code": "Class EnumValues {\n\tstatic EnumValues construct(Class<Enum<?>> enumClass, SerializableString[] externalValues);\n\tstatic EnumValues construct(MapperConfig<?> config, Class<Enum<?>> enumClass, List<String> externalValues);\n\tstatic EnumValues construct(SerializationConfig config, Class<Enum<?>> enumClass); // NOTE: do NOT call this if configuration may change, and choice between toString() and name() might change dynamically.\n\tstatic EnumValues constructFromName(MapperConfig<?> config, Class<Enum<?>> enumClass);\n\tstatic EnumValues constructFromToString(MapperConfig<?> config, Class<Enum<?>> enumClass);\n\tstatic EnumValues constructUsingEnumNamingStrategy(MapperConfig<?> config, Class<Enum<?>> enumClass, EnumNamingStrategy namingStrategy); // Returns String serializations of Enum name using an instance of EnumNamingStrategy.\n\tList<Enum<?>> enums(); // Convenience accessor for getting raw Enum instances.\n\tClass<Enum<?>> getEnumClass();\n\tEnumMap<?,SerializableString> internalMap(); // Method used for serialization and introspection by core Jackson code.\n\tSerializableString serializedValueFor(Enum<?> key);\n\tCollection<SerializableString> values();\n}"}
{"index": 7531, "repo": "cassandra-all-4.1.2", "des": "Abstract the conditions and updates for a CAS operation.", "code": "Interface CASRequest {\n\tboolean appliesTo(FilteredPartition current); // Returns whether the provided CF, that represents the values fetched using the readFilter(), match the CAS conditions this object stands for.\n\tPartitionUpdate makeUpdates(FilteredPartition current, ClientState clientState, Ballot ballot); // The updates to perform of a CAS success.\n\tSinglePartitionReadCommand readCommand(int nowInSec); // The command to use to fetch the value to compare for the CAS.\n}"}
{"index": 13318, "repo": "shiro-core-2.0.0-alpha-2", "des": "AuthorizationInfo represents a single Subject's stored authorization data (roles, permissions, etc.) used during authorization (access control) checks only.", "code": "public interface AuthorizationInfo extends Serializable {\n\tCollection<Permission> getObjectPermissions(); // Returns all type-safe Permissions assigned to the corresponding Subject.\n\tCollection<String> getRoles(); // Returns the names of all roles assigned to a corresponding Subject.\n\tCollection<String> getStringPermissions(); // Returns all string-based permissions assigned to the corresponding Subject.\n}"}
{"index": 9337, "repo": "hadoop-yarn-api-3.3.6", "des": "The finalization request sent by the ApplicationMaster to inform the ResourceManager about its completion.", "code": "Class FinishApplicationMasterRequest {\n\tabstract String getDiagnostics(); // Get diagnostic information on application failure.\n\tabstract FinalApplicationStatus getFinalApplicationStatus(); // Get final state of the ApplicationMaster.\n\tabstract String getTrackingUrl(); // Get the tracking URL for the ApplicationMaster.\n\tstatic FinishApplicationMasterRequest newInstance(FinalApplicationStatus finalAppStatus, String diagnostics, String url);\n\tabstract void setDiagnostics(String diagnostics); // Set diagnostic information on application failure.\n\tabstract void setFinalApplicationStatus(FinalApplicationStatus finalState); // Set the final state of the ApplicationMaster\n\tabstract void setTrackingUrl(String url); // Set the final tracking URLfor the ApplicationMaster.\n}"}
{"index": 12498, "repo": "spring-jdbc-6.0.11", "des": "Composite DatabasePopulator that delegates to a list of given DatabasePopulator implementations, executing all scripts.", "code": "public class CompositeDatabasePopulator extends Object implements DatabasePopulator {\n\tvoid addPopulators(DatabasePopulator... populators); // Add one or more populators to the list of delegates.\n\tvoid populate(Connection connection); // Populate, initialize, or clean up the database using the provided JDBC connection.\n\tvoid setPopulators(DatabasePopulator... populators); // Specify one or more populators to delegate to.\n}"}
{"index": 10304, "repo": "spring-core-6.0.11", "des": "Simple facade for accessing class metadata, as read by an ASM ClassReader.", "code": "public interface MetadataReader {\n\tAnnotationMetadata getAnnotationMetadata(); // Read full annotation metadata for the underlying class, including metadata for annotated methods.\n\tClassMetadata getClassMetadata(); // Read basic class metadata for the underlying class.\n\tResource getResource(); // Return the resource reference for the class file.\n}"}
{"index": 4884, "repo": "hadoop-common-3.3.4", "des": "This class implements the DNSToSwitchMapping interface using a script configured via the CommonConfigurationKeysPublic.", "code": "Class ScriptBasedMapping {\n\tConfiguration getConf(); // Return the configuration used by this object.\n\tvoid setConf(Configuration conf); // Set the configuration to be used by this object.\n}"}
{"index": 9276, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Implementation to use nvidia-docker v2 as GPU docker command plugin.", "code": "Class NvidiaDockerV2CommandPlugin {\n\tDockerVolumeCommand getCleanupDockerVolumesCommand(Container container); // Cleanup volumes created for one docker container\n\tDockerVolumeCommand getCreateDockerVolumeCommand(Container container); // Create volume when needed.\n\tprotected boolean requestsGpu(Container container);\n\tvoid updateDockerRunCommand(DockerRunCommand dockerRunCommand, Container container); // Update docker run command\n}"}
{"index": 16527, "repo": "spring-batch-infrastructure-5.0.2", "des": "Implementation of ExceptionHandler that rethrows when exceptions of a given type reach a threshold.", "code": "public class RethrowOnThresholdExceptionHandler extends Object implements ExceptionHandler {\n\tvoid handleException(RepeatContext context, Throwable throwable); // Classify the throwables and decide whether to re-throw based on the result.\n\tvoid setThresholds(Map<Class<? extends Throwable>,Integer> thresholds); // A map from exception classes to a threshold value of type Integer.\n\tvoid setUseParent(boolean useParent); // Flag to indicate the exception counters should be shared between sibling contexts in a nested batch.\n}"}
{"index": 6829, "repo": "calcite-core-1.34.0", "des": "Implements SqlValidatorTable by delegating to a parent table.", "code": "Class DelegatingSqlValidatorTable {\n\tSqlAccessType getAllowedAccess(); // Returns the access type of the table.\n\tSqlMonotonicity getMonotonicity(String columnName); // Returns whether a given column is monotonic.\n\tList<String> getQualifiedName();\n\tRelDataType getRowType();\n}"}
{"index": 14294, "repo": "wicket-core-10.0.0-M1", "des": "Interface to be implemented by Components or Behaviors that listen for requests from the client browser.", "code": "public interface IRequestListener extends org.apache.wicket.util.io.IClusterable {\n\tvoid onRequest(); // Called when a request is received.\n\tdefault boolean rendersPage(); // Does invocation of this listener render the page.\n}"}
{"index": 10994, "repo": "spring-data-redis-3.1.2", "des": "Represents a data type returned from Redis, currently used to denote the expected return type of Redis scripting commands", "code": "public enum ReturnType extends Enum<ReturnType> {\n\tstatic ReturnType fromJavaType(Class<?> javaType);\n\tstatic ReturnType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ReturnType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10892, "repo": "spring-data-redis-3.1.2", "des": "IndexResolver extracts secondary index structures to be applied on a given path, PersistentProperty and value.", "code": "public interface IndexResolver {\n\tSet<IndexedData> resolveIndexesFor(String keyspace, String path, TypeInformation<?> typeInformation, Object value); // Resolves all indexes for given type information / value combination.\n\tSet<IndexedData> resolveIndexesFor(TypeInformation<?> typeInformation, Object value); // Resolves all indexes for given type information / value combination.\n}"}
{"index": 9435, "repo": "hadoop-yarn-api-3.3.6", "des": "A class that holds a list of put errors.", "code": "Class TimelineWriteResponse {\n\tvoid addError(TimelineWriteResponse.TimelineWriteError error); // Add a single TimelineWriteResponse.TimelineWriteError instance into the existing list.\n\tvoid addErrors(List<TimelineWriteResponse.TimelineWriteError> writeErrors); // Add a list of TimelineWriteResponse.TimelineWriteError instances into the existing list.\n\tList<TimelineWriteResponse.TimelineWriteError> getErrors(); // Get a list of TimelineWriteResponse.TimelineWriteError instances.\n\tvoid setErrors(List<TimelineWriteResponse.TimelineWriteError> writeErrors); // Set the list to the given list of TimelineWriteResponse.TimelineWriteError instances.\n}"}
{"index": 12273, "repo": "jena-core-4.9.0", "des": "An iterator over a sparse array, that skips null entries.", "code": "public class SparseArrayIterator<E> extends NiceIterator<E> implements Iterator<E> {\n\tvoid forEachRemaining(Consumer<? super E> action);\n\tboolean hasNext(); // Returns true if the iteration has more elements.\n\tE next(); // Returns the next element in the iteration.\n}"}
{"index": 8244, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the EndpointMapping interface to map from the qualified name of the request payload root element.", "code": "Class PayloadRootQNameEndpointMapping {\n\tprotected QName resolveQName(MessageContext messageContext); // Template method that resolves the qualified names from the given SOAP message.\n\tstatic void setTransformerFactory(TransformerFactory transformerFactory); // Override the default TransformerFactory.\n}"}
{"index": 13186, "repo": "spring-test-6.0.11", "des": "Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test method.", "code": "public static enum DirtiesContext.MethodMode extends Enum<DirtiesContext.MethodMode> {\n\tstatic DirtiesContext.MethodMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic DirtiesContext.MethodMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13413, "repo": "spring-boot-autoconfigure-3.1.1", "des": "An entity scanner that searches the classpath from an @EntityScan specified packages.", "code": "public class EntityScanner extends Object {\n\tprotected org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider createClassPathScanningCandidateComponentProvider(org.springframework.context.ApplicationContext context); // Create a ClassPathScanningCandidateComponentProvider to scan entities based on the specified ApplicationContext.\n\tfinal Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes); // Scan for entities with the specified annotations.\n}"}
{"index": 13714, "repo": "spring-webmvc-6.0.11", "des": "A HandlerExceptionResolver that delegates to a list of other HandlerExceptionResolvers.", "code": "public class HandlerExceptionResolverComposite extends Object implements HandlerExceptionResolver, org.springframework.core.Ordered {\n\tList<HandlerExceptionResolver> getExceptionResolvers(); // Return the list of exception resolvers to delegate to.\n\tint getOrder();\n\tModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex); // Resolve the exception by iterating over the list of configured exception resolvers.\n\tvoid setExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers); // Set the list of exception resolvers to delegate to.\n\tvoid setOrder(int order);\n}"}
{"index": 16775, "repo": "spring-expression-6.0.11", "des": "Represents the literal values TRUE and FALSE.", "code": "public class BooleanLiteral extends Literal {\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode for this node into the supplied visitor.\n\tBooleanTypedValue getLiteralValue();\n\tboolean isCompilable(); // Check whether a node can be compiled to bytecode.\n}"}
{"index": 16553, "repo": "spring-batch-infrastructure-5.0.2", "des": "Provides RepeatOperations support including interceptors that can be used to modify or monitor the behaviour at run time. This implementation is sufficient to be used to configure transactional behaviour for each item by making the RepeatCallback transactional, or for the whole batch by making the execute method transactional (but only then if the task executor is synchronous). This class is thread-safe if its collaborators are thread-safe (interceptors, terminationPolicy, callback).", "code": "public class TaskExecutorRepeatTemplate extends RepeatTemplate {\n\tprotected RepeatInternalState createInternalState(RepeatContext context); // Create an internal state object that is used to store data needed internally in the scope of an iteration.\n\tprotected RepeatStatus getNextResult(RepeatContext context, RepeatCallback callback, RepeatInternalState state); // Use the setTaskExecutor(TaskExecutor) to generate a result.\n\tvoid setTaskExecutor(org.springframework.core.task.TaskExecutor taskExecutor); // Setter for task executor to be used to run the individual item callbacks.\n\tvoid setThrottleLimit(int throttleLimit); // Deprecated, for removal: This API element is subject to removal in a future version. since 5.0, scheduled for removal in 6.0.\n\tprotected boolean waitForResults(RepeatInternalState state); // Wait for all the results to appear on the queue and execute the after interceptors for each one.\n}"}
{"index": 10165, "repo": "spring-hateoas-2.1.2", "des": "Find links by rel in an UBER+JSON representation.", "code": "public class UberLinkDiscoverer extends Object implements LinkDiscoverer {\n\tLinks findLinksWithRel(LinkRelation rel, InputStream representation); // Returns all links with the given LinkRelation found in the given InputStream representation.\n\tLinks findLinksWithRel(LinkRelation rel, String representation); // Returns all links with the given LinkRelation found in the given String representation.\n\tOptional<Link> findLinkWithRel(LinkRelation rel, InputStream representation); // Finds a single link with the given LinkRelation in the given InputStream representation.\n\tOptional<Link> findLinkWithRel(LinkRelation rel, String representation); // Finds a single link with the given LinkRelation in the given String representation.\n\tboolean supports(MediaType delimiter);\n}"}
{"index": 11951, "repo": "maven-core-4.0.0-alpha-7", "des": "Container for storing the request from the user to activate or deactivate certain projects and optionally fail the build if those projects do not exist.", "code": "public class ProjectActivation extends Object {\n\tvoid activateOptionalProject(String selector); // Mark a project as optional and activated.\n\tvoid activateRequiredProject(String selector); // Mark a project as required and activated.\n\tvoid addProjectActivation(String selector, boolean active, boolean optional); // Adds a project activation to the request.\n\tvoid deactivateOptionalProject(String selector); // Mark a project as optional and deactivated.\n\tvoid deactivateRequiredProject(String selector); // Mark a project as required and deactivated.\n\tList<String> getExcludedProjects(); // Deprecated. Use getRequiredInactiveProjectSelectors() and getOptionalInactiveProjectSelectors() instead.\n\tSet<String> getOptionalActiveProjectSelectors();\n\tSet<String> getOptionalInactiveProjectSelectors();\n\tSet<String> getRequiredActiveProjectSelectors();\n\tSet<String> getRequiredInactiveProjectSelectors();\n\tList<String> getSelectedProjects(); // Deprecated. Use getRequiredActiveProjectSelectors() and getOptionalActiveProjectSelectors() instead.\n\tboolean isEmpty();\n\tvoid overwriteActiveProjects(List<String> activeProjectSelectors); // Deprecated. Use activateOptionalProject(String) or activateRequiredProject(String) instead.\n\tvoid overwriteInactiveProjects(List<String> inactiveProjectSelectors); // Deprecated. Use deactivateOptionalProject(String) or deactivateRequiredProject(String) instead.\n}"}
{"index": 17971, "repo": "spring-ws-core-4.0.5", "des": "Base class for WebApplicationInitializer implementations that register a MessageDispatcherServlet configured with annotated classes, e.g.", "code": "public abstract class AbstractAnnotationConfigMessageDispatcherServletInitializer extends AbstractMessageDispatcherServletInitializer {\n\tprotected org.springframework.web.context.WebApplicationContext createRootApplicationContext();\n\tprotected org.springframework.web.context.WebApplicationContext createServletApplicationContext(); // Create a servlet application context to be provided to the MessageDispatcherServlet.\n\tprotected abstract Class<?>[] getRootConfigClasses(); // Specify @Configuration and/or @Component classes to be provided to the root application context.\n\tprotected abstract Class<?>[] getServletConfigClasses(); // Specify @Configuration and/or @Component classes to be provided to the dispatcher servlet application context.\n}"}
{"index": 15004, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A representation of an OpenID Provider Configuration Response, which is returned from an Issuer's Discovery Endpoint, and contains a set of claims about the OpenID Provider's configuration.", "code": "public final class OidcProviderConfiguration extends AbstractOAuth2AuthorizationServerMetadata implements OidcProviderMetadataClaimAccessor {\n\tstatic OidcProviderConfiguration.Builder builder(); // Constructs a new OidcProviderConfiguration.Builder with empty claims.\n\tstatic OidcProviderConfiguration.Builder withClaims(Map<String,Object> claims); // Constructs a new OidcProviderConfiguration.Builder with the provided claims.\n}"}
{"index": 15052, "repo": "spring-vault-core-3.0.4", "des": "Kubernetes implementation of ClientAuthentication.", "code": "public class KubernetesAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\tstatic AuthenticationSteps createAuthenticationSteps(KubernetesAuthenticationOptions options); // Creates a AuthenticationSteps for kubernetes authentication given KubernetesAuthenticationOptions.\n\tAuthenticationSteps getAuthenticationSteps(); // Get the AuthenticationSteps describing an authentication flow.\n\tVaultToken login(); // Return a VaultToken.\n}"}
{"index": 13913, "repo": "spring-webflux-6.0.11", "des": "Resolves method argument value of type Principal.", "code": "public class PrincipalMethodArgumentResolver extends HandlerMethodArgumentResolverSupport {\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange); // Resolve the value for the method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether this resolver supports the given method parameter.\n}"}
{"index": 3052, "repo": "tink-1.10.0", "des": "Builds a new PrfBasedKeyDerivationParameters instance.", "code": "Class PrfBasedKeyDerivationParameters.Builder {\n\tPrfBasedKeyDerivationParameters build();\n\tPrfBasedKeyDerivationParameters.Builder setDerivedKeyParameters(Parameters derivedKeyParameters); // The parameters of the keys which are in the result keyset when the user calls KeysetDeriver.deriveKeyset().\n\tPrfBasedKeyDerivationParameters.Builder setPrfParameters(PrfParameters prfParameters); // Sets the parameters of the PRF used to create randomness from the salt.\n}"}
{"index": 7510, "repo": "cassandra-all-4.1.2", "des": "The various \"states\" exchanged through Gossip.", "code": "Enum ApplicationState {\n\tstatic ApplicationState valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic ApplicationState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11769, "repo": "bedrock-core-7.0.2", "des": "An Option that can be used to specify a type of HTTP Proxy to use for HTTP connections.", "code": "public class HttpProxy extends Object implements Option {\n\tstatic HttpProxy none(); // Do not use a Proxy for HTTP connections.\n\tHttpURLConnection openConnection(URL url); // Open a connection to the specified URL using the Proxy defined by this HttpProxy.\n\tstatic HttpProxy proxy(Proxy proxy); // Use the specified Proxy for HTTP connections.\n\tstatic HttpProxy proxy(Proxy.Type type, InetSocketAddress address); // Use the proxy of the specified Proxy.Type and InetSocketAddress.\n}"}
{"index": 8746, "repo": "hadoop-yarn-common-3.3.6", "des": "A StateTransitionListener that dispatches the pre and post state transitions to multiple registered listeners.", "code": "Class MultiStateTransitionListener<OPERAND,EVENT,STATE extends Enum<STATE>> {\n\tvoid addListener(StateTransitionListener<OPERAND,EVENT,STATE> listener); // Add a listener to the list of listeners.\n\tvoid postTransition(OPERAND op, STATE beforeState, STATE afterState, EVENT processedEvent); // Post Transition Hook.\n\tvoid preTransition(OPERAND op, STATE beforeState, EVENT eventToBeProcessed); // Pre Transition Hook.\n}"}
{"index": 5102, "repo": "commons-collections-3.2.2", "des": "Decorates another Buffer to ensure it can't be altered.", "code": "Class UnmodifiableBuffer {\n\tboolean add(Object object);\n\tboolean addAll(Collection coll);\n\tvoid clear();\n\tstatic Buffer decorate(Buffer buffer); // Factory method to create an unmodifiable buffer.\n\tIterator iterator();\n\tObject remove(); // Gets and removes the next object from the buffer.\n\tboolean remove(Object object);\n\tboolean removeAll(Collection coll);\n\tboolean retainAll(Collection coll);\n}"}
{"index": 16493, "repo": "spring-batch-infrastructure-5.0.2", "des": "The MappingLdifReader is an adaptation of the FlatFileItemReader built around an LdifParser.", "code": "public class MappingLdifReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void doClose(); // Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doOpen(); // Open resources necessary to start reading input.\n\tprotected T doRead(); // Read next item from input.\n\tvoid setRecordMapper(RecordMapper<T> recordMapper); // Setter for object mapper.\n\tvoid setRecordsToSkip(int recordsToSkip); // Public setter for the number of lines to skip at the start of a file.\n\tvoid setResource(org.springframework.core.io.Resource resource);\n\tvoid setSkippedRecordsCallback(RecordCallbackHandler skippedRecordsCallback); // RecordCallbackHandler implementations can be used to take action on skipped records.\n\tvoid setStrict(boolean strict); // In strict mode the reader will throw an exception on AbstractItemCountingItemStreamItemReader.open(org.springframework.batch.item.ExecutionContext) if the input resource does not exist.\n}"}
{"index": 7582, "repo": "cassandra-all-4.1.2", "des": "Extension to DataOutput that provides for writing ByteBuffer and Memory, potentially with an efficient implementation that is zero copy or at least has reduced bounds checking overhead.", "code": "Interface DataOutputPlus {\n\tdefault boolean hasPosition(); // If the implementation supports providing a position, this method returns true, otherwise false.\n\tdefault long position(); // Returns the current position of the underlying target like a file-pointer or the position withing a buffer.\n\tvoid write(java.nio.ByteBuffer buffer);\n\tdefault void write(ReadableMemory memory, long offset, long length);\n\tdefault void writeBytes(long register, int bytes); // An efficient way to write the type bytes of a long\n\tdefault void writeUnsignedVInt(long i); // This is more efficient for storing unsigned values, both in storage and CPU burden.\n\tdefault void writeVInt(long i);\n}"}
{"index": 10590, "repo": "groovy-all-4.0.13", "des": "A simple helper class which acts as a factory of QName instances.", "code": "public class Namespace extends Object {\n\tQName get(String localName); // Returns the QName for the given localName.\n\tString getPrefix(); // Returns the prefix mapped to this namespace\n\tString getUri(); // Returns the URI of this namespace\n}"}
{"index": 4111, "repo": "camel-core-3.0.0-RC1", "des": "Intercepts messages being sent to an endpoint.", "code": "Class InterceptSendToEndpointDefinition {\n\tvoid afterPropertiesSet(); // This method is only for handling some post configuration that is needed since this is an interceptor, and we have to do a bit of magic logic to fixup to handle predicates with or without proceed/stop set as well.\n\tInterceptSendToEndpointDefinition afterUrl(String url); // After sending to the endpoint then send the message to this url which allows to process its result.\n\tString getAfterUri();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getShortName();\n\tBoolean getSkipSendToOriginalEndpoint();\n\tString getUri();\n\tboolean isAbstract(); // Whether this model is abstract or not.\n\tboolean isTopLevelOnly(); // Whether this definition can only be added as top-level directly on the route itself (such as onException,onCompletion,intercept, etc.) If trying to add a top-level only definition to a nested output would fail in the ProcessorDefinition.addOutput(ProcessorDefinition) method.\n\tvoid setAfterUri(String afterProcessor); // After sending to the endpoint then send the message to this uri which allows to process its result.\n\tvoid setSkipSendToOriginalEndpoint(Boolean skipSendToOriginalEndpoint); // If set to true then the message is not sent to the original endpoint.\n\tvoid setUri(String uri); // Intercept sending to the uri or uri pattern.\n\tInterceptSendToEndpointDefinition skipSendToOriginalEndpoint(); // Skip sending the Exchange to the original intended endpoint\n\tInterceptSendToEndpointDefinition when(org.apache.camel.Predicate predicate); // Applies this interceptor only if the given predicate is true\n}"}
{"index": 202, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns true if either of the predicates return true.", "code": "Class OrPredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning true if either predicate returns true.\n\tPredicate<? super T>[] getPredicates(); // Gets the two predicates being decorated as an array.\n\tstatic <T> Predicate<T> orPredicate(Predicate<? super T> predicate1, Predicate<? super T> predicate2); // Factory to create the predicate.\n}"}
{"index": 9602, "repo": "commons-math3-3.6.1", "des": "This class implements a simple Euler integrator for Ordinary Differential Equations.", "code": "Class EulerFieldIntegrator<T extends RealFieldElement<T>> {\n\tprotected org.apache.commons.math3.ode.nonstiff.EulerFieldStepInterpolator<T> createInterpolator(boolean forward, T[][] yDotK, FieldODEStateAndDerivative<T> globalPreviousState, FieldODEStateAndDerivative<T> globalCurrentState, FieldEquationsMapper<T> mapper); // Create an interpolator.\n\tT[][] getA(); // Get the internal weights from Butcher array (without the first empty row).\n\tT[] getB(); // Get the external weights for the high order method from Butcher array.\n\tT[] getC(); // Get the time steps from Butcher array (without the first zero).\n}"}
{"index": 10192, "repo": "spring-core-6.0.11", "des": "AnnotationAwareOrderComparator is an extension of OrderComparator that supports Spring's Ordered interface as well as the @Order and @Priority annotations, with an order value provided by an Ordered instance overriding a statically defined annotation value (if any).", "code": "public class AnnotationAwareOrderComparator extends OrderComparator {\n\tprotected Integer findOrder(Object obj); // This implementation checks for @Order or @Priority on various kinds of elements, in addition to the Ordered check in the superclass.\n\tInteger getPriority(Object obj); // This implementation retrieves an @jakarta.annotation.Priority value, allowing for additional semantics over the regular @Order annotation: typically, selecting one object over another in case of multiple matches but only one object to be returned.\n\tstatic void sort(Object[] array); // Sort the given array with a default AnnotationAwareOrderComparator.\n\tstatic void sort(List<?> list); // Sort the given list with a default AnnotationAwareOrderComparator.\n\tstatic void sortIfNecessary(Object value); // Sort the given array or List with a default AnnotationAwareOrderComparator, if necessary.\n}"}
{"index": 628, "repo": "ignite-core-2.15.0", "des": "Class is needed for map UUID to consistent id and vice versa.", "code": "Class ConsistentIdMapper {\n\tshort mapToCompactId(AffinityTopologyVersion topVer, UUID nodeId); // Maps UUID to compact ID for given baseline topology.\n\tMap<Short,Collection<Short>> mapToCompactIds(AffinityTopologyVersion topVer, @Nullable Map<UUID,Collection<UUID>> txNodes, BaselineTopology baselineTop); // Map primary -> backup node compact ID accordingly to baseline topology..\n\tUUID mapToUuid(AffinityTopologyVersion topVer, short nodeConstId); // Maps UUID to compact ID for given baseline topology.\n}"}
{"index": 15515, "repo": "spring-batch-core-5.0.2", "des": "Enumeration for JobExecutionListener meta data, which ties together the names of methods, their interfaces, annotation, and expected arguments.", "code": "public enum JobListenerMetaData extends Enum<JobListenerMetaData> implements ListenerMetaData {\n\tstatic JobListenerMetaData fromPropertyName(String propertyName); // Return the relevant meta data for the provided property name.\n\tClass<? extends Annotation> getAnnotation();\n\tClass<?> getListenerInterface();\n\tString getMethodName();\n\tClass<?>[] getParamTypes();\n\tString getPropertyName();\n\tstatic JobListenerMetaData valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic JobListenerMetaData[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 16448, "repo": "spring-batch-infrastructure-5.0.2", "des": "Implementation of SmartDataSource that is capable of keeping a single JDBC Connection which is NOT closed after each use even if Connection.close() is called.", "code": "public class ExtendedConnectionDataSourceProxy extends Object implements org.springframework.jdbc.datasource.SmartDataSource, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected Connection getCloseSuppressingConnectionProxy(Connection target); // Wrap the given Connection with a proxy that delegates every method call to it but suppresses close calls.\n\tConnection getConnection();\n\tConnection getConnection(String username, String password);\n\tint getLoginTimeout();\n\tPrintWriter getLogWriter();\n\tLogger getParentLogger(); // Added due to JDK 7 compatibility.\n\tboolean isCloseSuppressionActive(Connection connection); // Return the status of close suppression being activated for a given Connection\n\tboolean isWrapperFor(Class<?> iface); // Performs only a 'shallow' non-recursive check of self's and delegate's class to retain Java 5 compatibility.\n\tvoid setDataSource(DataSource dataSource); // Setter for the DataSource that is to be wrapped.\n\tvoid setLoginTimeout(int seconds);\n\tvoid setLogWriter(PrintWriter out);\n\tboolean shouldClose(Connection connection);\n\tvoid startCloseSuppression(Connection connection);\n\tvoid stopCloseSuppression(Connection connection);\n\t<T> T unwrap(Class<T> iface); // Returns either self or delegate (in this order) if one of them can be cast to supplied parameter class.\n}"}
{"index": 2571, "repo": "exoplayer-r2.3.1", "des": "A factory for SubtitleDecoder instances.", "code": "Interface SubtitleDecoderFactory {\n\tSubtitleDecoder createDecoder(Format format); // Creates a SubtitleDecoder for the given Format.\n\tboolean supportsFormat(Format format); // Returns whether the factory is able to instantiate a SubtitleDecoder for the given Format.\n}"}
{"index": 15504, "repo": "spring-batch-core-5.0.2", "des": "JDBC implementation of StepExecutionDao. Allows customization of the tables names used by Spring Batch for step meta data via a prefix property. Uses sequences or tables (via Spring's DataFieldMaxValueIncrementer abstraction) to create all primary keys before inserting a new row.", "code": "public class JdbcStepExecutionDao extends AbstractJdbcBatchMetadataDao implements StepExecutionDao, org.springframework.beans.factory.InitializingBean {\n\tvoid addStepExecutions(JobExecution jobExecution); // Retrieve all the StepExecution for the parent JobExecution.\n\tvoid afterPropertiesSet();\n\tlong countStepExecutions(JobInstance jobInstance, String stepName); // Counts all the StepExecution for a given step name.\n\tvoid deleteStepExecution(StepExecution stepExecution); // Delete the given step execution.\n\tStepExecution getLastStepExecution(JobInstance jobInstance, String stepName); // Retrieve the last StepExecution for a given JobInstance ordered by creation time and then id.\n\tStepExecution getStepExecution(JobExecution jobExecution, Long stepExecutionId); // Retrieve a StepExecution from its id.\n\tvoid saveStepExecution(StepExecution stepExecution); // Save a StepExecution.\n\tvoid saveStepExecutions(Collection<StepExecution> stepExecutions); // Batch insert StepExecutions\n\tvoid setExitMessageLength(int exitMessageLength); // Public setter for the exit message length in database.\n\tvoid setStepExecutionIncrementer(org.springframework.jdbc.support.incrementer.DataFieldMaxValueIncrementer stepExecutionIncrementer);\n\tvoid updateStepExecution(StepExecution stepExecution); // Update the given StepExecution Preconditions: Id must not be null.\n}"}
{"index": 9501, "repo": "commons-math3-3.6.1", "des": "Base class for probability distributions on the reals.", "code": "Class AbstractRealDistribution {\n\tdouble cumulativeProbability(double x0, double x1); // Deprecated. As of 3.1 (to be removed in 4.0). Please use probability(double,double) instead.\n\tprotected double getSolverAbsoluteAccuracy(); // Returns the solver absolute accuracy for inverse cumulative computation.\n\tdouble inverseCumulativeProbability(double p); // Computes the quantile function of this distribution.\n\tdouble logDensity(double x); // Returns the natural logarithm of the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tdouble probability(double x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X = x).\n\tdouble probability(double x0, double x1); // For a random variable X whose values are distributed according to this distribution, this method returns P(x0 < X <= x1).\n\tvoid reseedRandomGenerator(long seed); // Reseed the random generator used to generate samples.\n\tdouble sample(); // Generate a random value sampled from this distribution.\n\tdouble[] sample(int sampleSize); // Generate a random sample from the distribution.\n}"}
{"index": 4270, "repo": "beam-sdks-java-core-2.49.0", "des": "A BigDecimalCoder encodes a BigDecimal as an integer scale encoded with VarIntCoder and a BigInteger encoded using BigIntegerCoder.", "code": "Class BigDecimalCoder {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tjava.math.BigDecimal decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tjava.math.BigDecimal decode(java.io.InputStream inStream, Coder.Context context); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(java.math.BigDecimal value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tvoid encode(java.math.BigDecimal value, java.io.OutputStream outStream, Coder.Context context); // Encodes the given value of type T onto the given output stream in the given context.\n\tprotected long getEncodedElementByteSize(java.math.BigDecimal value); // Returns the size in bytes of the encoded value using this coder.\n\tboolean isRegisterByteSizeObserverCheap(java.math.BigDecimal value); // Returns whether Coder.registerByteSizeObserver(T, org.apache.beam.sdk.util.common.ElementByteSizeObserver) cheap enough to call for every element, that is, if this Coder can calculate the byte size of the element to be coded in roughly constant time (or lazily).\n\tstatic BigDecimalCoder of();\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 6342, "repo": "curator-framework-5.5.0", "des": "Represents state changes in the connection to ZK.", "code": "Enum ConnectionState {\n\tabstract boolean isConnected(); // Check if this state indicates that Curator has a connection to ZooKeeper\n\tstatic ConnectionState valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ConnectionState[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 838, "repo": "ignite-core-2.15.0", "des": "Message to communicate with Redis client.", "code": "Class GridRedisMessage {\n\tvoid append(String part); // Appends the specified part to the message.\n\tList<String> aux();\n\tString aux(int idx);\n\tList<String> auxMKeys();\n\t@Nullable String cacheName();\n\tvoid cacheName(String cacheName);\n\tUUID clientId(); // Gets client identifier from which this request comes.\n\tvoid clientId(UUID id); // Sets client identifier from which this request comes.\n\tGridRedisCommand command();\n\tUUID destinationId(); // Gets identifier of the node where this message should be processed.\n\tvoid destinationId(UUID id); // Sets identifier of the node where this message should be eventually delivered.\n\tint fullLength();\n\tByteBuffer getResponse(); // Gets the response.\n\tString key();\n\tint messageSize();\n\tlong requestId(); // This method is used to match request and response messages.\n\tvoid requestId(long reqId); // Sets request id for outgoing packets.\n\tbyte[] sessionToken(); // Gets client session token.\n\tvoid sessionToken(byte[] sesTok); // Sets client session token.\n\tvoid setResponse(ByteBuffer response); // Sets the response.\n}"}
{"index": 15362, "repo": "spring-boot-3.1.1", "des": "Listener for the SpringApplication run method.", "code": "public interface SpringApplicationRunListener {\n\tdefault void contextLoaded(org.springframework.context.ConfigurableApplicationContext context); // Called once the application context has been loaded but before it has been refreshed.\n\tdefault void contextPrepared(org.springframework.context.ConfigurableApplicationContext context); // Called once the ApplicationContext has been created and prepared, but before sources have been loaded.\n\tdefault void environmentPrepared(ConfigurableBootstrapContext bootstrapContext, org.springframework.core.env.ConfigurableEnvironment environment); // Called once the environment has been prepared, but before the ApplicationContext has been created.\n\tdefault void failed(org.springframework.context.ConfigurableApplicationContext context, Throwable exception); // Called when a failure occurs when running the application.\n\tdefault void ready(org.springframework.context.ConfigurableApplicationContext context, Duration timeTaken); // Called immediately before the run method finishes, when the application context has been refreshed and all CommandLineRunners and ApplicationRunners have been called.\n\tdefault void started(org.springframework.context.ConfigurableApplicationContext context, Duration timeTaken); // The context has been refreshed and the application has started but CommandLineRunners and ApplicationRunners have not been called.\n\tdefault void starting(ConfigurableBootstrapContext bootstrapContext); // Called immediately when the run method has first started.\n}"}
{"index": 4254, "repo": "jackson-core-2.15.2", "des": "Enumeration of values that matches enum `As` from annotation `JsonTypeInfo`: separate definition to avoid dependency between streaming core and annotations packages; also allows more flexibility in case new values needed at this level of internal API.", "code": "Enum WritableTypeId.Inclusion {\n\tboolean requiresObjectContext();\n\tstatic WritableTypeId.Inclusion valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic WritableTypeId.Inclusion[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12897, "repo": "spring-data-mongodb-4.1.2", "des": "AbstractMongoQuery implementation to run string-based aggregations using Aggregation.", "code": "public class StringBasedAggregation extends AbstractMongoQuery {\n\tprotected Query createQuery(ConvertingParameterAccessor accessor); // Creates a Query instance using the given ParameterAccessor\n\tprotected Object doExecute(MongoQueryMethod method, ResultProcessor resultProcessor, ConvertingParameterAccessor accessor, Class<?> typeToRead); // Execute the RepositoryQuery of the given method with the parameters provided by the accessor\n\tprotected boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected boolean isDeleteQuery(); // Return weather the query should delete matching documents.\n\tprotected boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected boolean isLimiting(); // Return whether the query has an explicit limit set.\n}"}
{"index": 12016, "repo": "jena-core-4.9.0", "des": "This class provides a number of static methods which interact with java.nio.charset.Charset to analyze and transform the strings identifying character encodings.", "code": "public abstract class CharEncoding extends Object {\n\tstatic CharEncoding create(String enc); // Create a new CharacterEncoding object, given a name of a character encoding identifying it.\n\tabstract boolean isIANA(); // Returns true if this charset registered at IANA.\n\tabstract boolean isInNIO(); // Returns true if this charset is supported by java.nio.charset.Charset.\n\tString name(); // Gives the canonical name for this charset.\n\tabstract String warningMessage(); // If isIANA() or isInNIO() return false, this returns a suggested warning message.\n}"}
{"index": 11260, "repo": "spring-context-6.0.11", "des": "BeanNameGenerator implementation for bean classes annotated with the @Component annotation or with another annotation that is itself annotated with @Component as a meta-annotation.", "code": "public class AnnotationBeanNameGenerator extends Object implements org.springframework.beans.factory.support.BeanNameGenerator {\n\tprotected String buildDefaultBeanName(org.springframework.beans.factory.config.BeanDefinition definition); // Derive a default bean name from the given bean definition.\n\tprotected String buildDefaultBeanName(org.springframework.beans.factory.config.BeanDefinition definition, org.springframework.beans.factory.support.BeanDefinitionRegistry registry); // Derive a default bean name from the given bean definition.\n\tprotected String determineBeanNameFromAnnotation(org.springframework.beans.factory.annotation.AnnotatedBeanDefinition annotatedDef); // Derive a bean name from one of the annotations on the class.\n\tString generateBeanName(org.springframework.beans.factory.config.BeanDefinition definition, org.springframework.beans.factory.support.BeanDefinitionRegistry registry);\n\tprotected boolean isStereotypeWithNameValue(String annotationType, Set<String> metaAnnotationTypes, Map<String,Object> attributes); // Check whether the given annotation is a stereotype that is allowed to suggest a component name through its annotation value().\n}"}
{"index": 2948, "repo": "tink-1.10.0", "des": "Describes the parameters of an AesGcmKey.", "code": "Class AesGcmParameters {\n\tstatic AesGcmParameters.Builder builder();\n\tboolean equals(Object o);\n\tint getIvSizeBytes();\n\tint getKeySizeBytes();\n\tint getTagSizeBytes();\n\tAesGcmParameters.Variant getVariant(); // Returns a variant object.\n\tboolean hasIdRequirement(); // Returns true if a key created with the parameters in this object has to have a certain ID when it is in a keyset.\n}"}
{"index": 9299, "repo": "spring-cloud-aws-context-2.2.6.RELEASE", "des": "JavaMailSender implementation that allows to send MimeMessage using the Simple E-Mail Service.", "code": "Class SimpleEmailServiceJavaMailSender {\n\tjavax.mail.internet.MimeMessage createMimeMessage();\n\tjavax.mail.internet.MimeMessage createMimeMessage(InputStream contentStream);\n\tprotected Properties getJavaMailProperties(); // Allow Map access to the JavaMail properties of this sender, with the option to add or override specific entries.\n\tprotected javax.mail.Session getSession(); // Return the JavaMail Session, lazily initializing it if hasn't been specified explicitly.\n\tvoid send(javax.mail.internet.MimeMessage... mimeMessages);\n\tvoid send(javax.mail.internet.MimeMessage mimeMessage);\n\tvoid send(org.springframework.mail.javamail.MimeMessagePreparator... mimeMessagePreparators);\n\tvoid send(org.springframework.mail.javamail.MimeMessagePreparator mimeMessagePreparator);\n\tvoid setDefaultEncoding(String defaultEncoding); // Set the default encoding to use for MimeMessages created by this instance.\n\tvoid setDefaultFileTypeMap(FileTypeMap defaultFileTypeMap); // Set the default Java Activation FileTypeMap to use for MimeMessages created by this instance.\n\tvoid setJavaMailProperties(Properties javaMailProperties); // Set JavaMail properties for the Session.\n\tvoid setSession(javax.mail.Session session); // Set the JavaMail Session, possibly pulled from JNDI.\n}"}
{"index": 7974, "repo": "commons-jcs3-core-3.1", "des": "This is a test memory manager using the jdk1.", "code": "Class LHMLRUMemoryCache<K,V> {\n\tMap<K,MemoryElementDescriptor<K,V>> createMap(); // Returns a synchronized LHMSpooler\n\tvoid dumpCacheEntries(); // Dump the cache entries from first to last for debugging.\n\tint freeElements(int numberToFree); // This can't be implemented.\n\tIStats getStatistics(); // This returns semi-structured information on the memory cache, such as the size, put count, hit count, and miss count.\n\tvoid initialize(CompositeCache<K,V> hub); // For post reflection creation initialization\n\tprotected void lockedGetElement(MemoryElementDescriptor<K,V> me); // Update control structures after get (guarded by the lock)\n\tprotected void lockedRemoveAll(); // Removes all cached items from the cache control structures.\n\tprotected void lockedRemoveElement(MemoryElementDescriptor<K,V> me); // Remove element from control structure (guarded by the lock)\n\tvoid update(ICacheElement<K,V> ce); // Puts an item to the cache.\n}"}
{"index": 4291, "repo": "beam-sdks-java-core-2.49.0", "des": "A WindowFn that windows elements into periods measured by days.", "code": "Class CalendarWindows.DaysWindows {\n\tIntervalWindow assignWindow(org.joda.time.Instant timestamp); // Returns the single window to which elements with this timestamp belong.\n\tint getNumber();\n\torg.joda.time.DateTime getStartDate();\n\torg.joda.time.DateTimeZone getTimeZone();\n\tboolean isCompatible(WindowFn<?,?> other); // Returns whether this performs the same merging as the given WindowFn.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tvoid verifyCompatibility(WindowFn<?,?> other); // Throw IncompatibleWindowException if this WindowFn does not perform the same merging as the given $WindowFn.\n\tCoder<IntervalWindow> windowCoder(); // Returns the Coder used for serializing the windows used by this windowFn.\n\tCalendarWindows.DaysWindows withStartingDay(int year, int month, int day);\n\tCalendarWindows.DaysWindows withTimeZone(org.joda.time.DateTimeZone timeZone);\n}"}
{"index": 18127, "repo": "jena-querybuilder-4.9.0", "des": "An QuadHolder that creates quads from a collection or iterator of triples.", "code": "public class CollectionQuadHolder extends Object implements QuadHolder {\n\tExtendedIterator<Quad> getQuads(); // Get an extended iterator over the quads this holder holds.\n\tQuadHolder setValues(Map<Var,Node> values); // This implementation does nothing.\n}"}
{"index": 4451, "repo": "beam-sdks-java-core-2.49.0", "des": "Partition takes a PCollection<T> and a PartitionFn, uses the PartitionFn to split the elements of the input PCollection into N partitions, and returns a PCollectionList<T> that bundles N PCollection<T>s containing the split elements.", "code": "Class Partition<T> {\n\tPCollectionList<T> expand(PCollection<T> in); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tstatic <T> Partition<T> of(int numPartitions, Partition.PartitionFn<? super T> partitionFn); // Returns a new Partition PTransform that divides its input PCollection into the given number of partitions, using the given partitioning function.\n\tstatic <T> Partition<T> of(int numPartitions, Partition.PartitionWithSideInputsFn<? super T> partitionFn, Requirements requirements); // Returns a new Partition PTransform that divides its input PCollection into the given number of partitions, using the given partitioning function.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n}"}
{"index": 9392, "repo": "hadoop-yarn-api-3.3.6", "des": "Reason for rejecting a Scheduling Request.", "code": "Enum RejectionReason {\n\tstatic RejectionReason valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RejectionReason[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7348, "repo": "calcite-core-1.34.0", "des": "Contains methods that call JDK methods that the forbidden APIs checker does not approve of.", "code": "Class Unsafe {\n\tstatic void clear(StringWriter sw); // Clears the contents of a StringWriter.\n\tstatic void notifyAll(Object o); // Calls Object.notifyAll().\n\tstatic String regexpReplace(String s, Pattern pattern, String replacement, int pos, int occurrence); // Helper for the SQL REGEXP_REPLACE function.\n\tstatic void systemExit(int status); // Calls System.exit(int).\n\tstatic void wait(Object o); // Calls Object.wait().\n}"}
{"index": 8876, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class holds all \"physical\" details necessary to run a compaction, and abstracts away the details specific to a particular compaction.", "code": "Class CompactionContext {\n\tabstract List<org.apache.hadoop.fs.Path> compact(ThroughputController throughputController, User user);\n\tvoid forceSelect(CompactionRequestImpl request); // Forces external selection to be applied for this compaction.\n\tCompactionRequestImpl getRequest();\n\tboolean hasSelection();\n\tabstract List<HStoreFile> preSelect(List<HStoreFile> filesCompacting); // Called before coprocessor preCompactSelection and should filter the candidates for coprocessor; i.e.\n\tabstract boolean select(List<HStoreFile> filesCompacting, boolean isUserCompaction, boolean mayUseOffPeak, boolean forceMajor); // Called to select files for compaction.\n}"}
{"index": 10700, "repo": "spring-tx-6.0.11", "des": "Generic base class for DAOs, defining template methods for DAO initialization.", "code": "public abstract class DaoSupport extends Object implements org.springframework.beans.factory.InitializingBean {\n\tfinal void afterPropertiesSet();\n\tprotected abstract void checkDaoConfig(); // Abstract subclasses must override this to check their configuration.\n\tprotected void initDao(); // Concrete subclasses can override this for custom initialization behavior.\n}"}
{"index": 11876, "repo": "spring-kafka-3.0.9", "des": "Service for pausing and resuming of MessageListenerContainer.", "code": "public class ListenerContainerPauseService extends Object {\n\tvoid pause(String listenerId, Duration pauseDuration); // Pause the listener by given id.\n\tvoid pause(MessageListenerContainer messageListenerContainer, Duration pauseDuration); // Pause the listener by given container instance.\n\tvoid pausePartition(MessageListenerContainer messageListenerContainer, org.apache.kafka.common.TopicPartition partition, Duration pauseDuration); // Pause consumption from a given partition for the duration.\n\tvoid resume(String listenerId); // Resume the listener container by given id.\n\tvoid resume(MessageListenerContainer messageListenerContainer); // Resume the listener container.\n}"}
{"index": 2227, "repo": "hive-exec-4.0.0-alpha-2", "des": "A RecordUpdater where the files are stored as ORC.", "code": "Class OrcRecordUpdater {\n\tvoid close(boolean abort); // Close this updater.\n\tvoid delete(long currentWriteId, Object row); // Delete a row from the table.\n\tvoid flush(); // Flush the current set of rows to the underlying file system, so that they are available to readers.\n\tlong getBufferedRowCount(); // Returns the number of rows in memory before flush().\n\torg.apache.hadoop.fs.Path getDeleteFilePath();\n\tSerDeStats getStats(); // Returns the statistics information\n\torg.apache.hadoop.fs.Path getUpdatedFilePath(); // Returns the path of the file this updater wrote to\n\tvoid insert(long currentWriteId, Object row); // Insert a new record into the table.\n\tvoid update(long currentWriteId, Object row); // Update an old record with a new set of values.\n}"}
{"index": 12514, "repo": "spring-jdbc-6.0.11", "des": "DataFieldMaxValueIncrementer that increments the maximum value of a given Derby table with the equivalent of an auto-increment column.", "code": "public class DerbyMaxValueIncrementer extends AbstractIdentityColumnMaxValueIncrementer {\n\tString getDummyName(); // Return the name of the dummy column.\n\tprotected String getIdentityStatement(); // Statement to use to obtain the current identity value.\n\tprotected String getIncrementStatement(); // Statement to use to increment the \"sequence\" value.\n\tvoid setDummyName(String dummyName); // Set the name of the dummy column.\n}"}
{"index": 7362, "repo": "mahout-math-0.13.0", "des": "Abstract base class for resizable lists holding objects or primitive data types such as int, float, etc.", "code": "Class AbstractList {\n\tprotected abstract void beforeInsertDummies(int index, int length); // Inserts length dummy elements before the specified position into the receiver.\n\tprotected static void checkRange(int index, int theSize); // Checks if the given index is in range.\n\tprotected static void checkRangeFromTo(int from, int to, int theSize); // Checks if the given range is within the contained array's bounds.\n\tvoid clear(); // Removes all elements from the receiver.\n\tboolean isEmpty();\n\tvoid mergeSort(); // Sorts the receiver into ascending order.\n\tabstract void mergeSortFromTo(int from, int to); // Sorts the receiver into ascending order.\n\tvoid quickSort(); // Sorts the receiver into ascending order.\n\tabstract void quickSortFromTo(int from, int to); // Sorts the specified range of the receiver into ascending order.\n\tvoid remove(int index); // Removes the element at the specified position from the receiver.\n\tabstract void removeFromTo(int fromIndex, int toIndex); // Removes from the receiver all elements whose index is between from, inclusive and to, inclusive.\n\tabstract void reverse(); // Reverses the elements of the receiver.\n\tvoid setSize(int newSize); // Sets the size of the receiver.\n\tabstract int size();\n\tvoid sort(); // Sorts the receiver into ascending order.\n\tvoid sortFromTo(int from, int to); // Sorts the specified range of the receiver into ascending order.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n}"}
{"index": 18119, "repo": "spring-ws-core-4.0.5", "des": "Adapter to use the WsdlDefinition interface with the generic DispatcherServlet.", "code": "public class WsdlDefinitionHandlerAdapter extends LocationTransformerObjectSupport implements org.springframework.web.servlet.HandlerAdapter, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tlong getLastModified(jakarta.servlet.http.HttpServletRequest request, Object handler);\n\torg.springframework.web.servlet.ModelAndView handle(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, Object handler);\n\tvoid setLocationExpression(String locationExpression); // Sets the XPath expression used for extracting the location attributes from the WSDL 1.1 definition.\n\tvoid setSchemaLocationExpression(String schemaLocationExpression); // Sets the XPath expression used for extracting the schemaLocation attributes from the WSDL 1.1 definition.\n\tvoid setTransformLocations(boolean transformLocations); // Sets whether relative address locations in the WSDL are to be transformed using the request URI of the incoming HttpServletRequest.\n\tvoid setTransformSchemaLocations(boolean transformSchemaLocations); // Sets whether relative address schema locations in the WSDL are to be transformed using the request URI of the incoming HttpServletRequest.\n\tboolean supports(Object handler);\n\tprotected void transformLocations(Document definitionDocument, jakarta.servlet.http.HttpServletRequest request); // Transforms all location attributes to reflect the server name given HttpServletRequest.\n\tprotected void transformSchemaLocations(Document definitionDocument, jakarta.servlet.http.HttpServletRequest request); // Transforms all schemaLocation attributes to reflect the server name given HttpServletRequest.\n}"}
{"index": 18362, "repo": "opencms-core-15.0", "des": "Class representing a JSON document for a CMS list.", "code": "Class CmsJsonDocumentList {\n\tjava.lang.Object getJson(); // Returns the JSON document.\n\tprotected boolean isLocaleAllRequest(); // Whether all locales of this XML content are requested.\n\tprotected boolean isLocalePathRequest(); // Whether one locale of this XML content is requested.\n\tprotected boolean isLocaleRequest(); // Whether a part of a locale of this XML content is requested.\n\tprotected boolean isShowFallbackLocaleRequest(); // Whether the default locale content shall be shown in the case the requested locale is not available.\n\tprotected boolean isShowWrapperRequest(); // Whether to show the wrapper with resource information.\n}"}
{"index": 13030, "repo": "spring-aop-6.0.11", "des": "Spring AOP advice wrapping an AspectJ after-throwing advice method.", "code": "public class AspectJAfterThrowingAdvice extends AbstractAspectJAdvice implements MethodInterceptor, AfterAdvice, Serializable {\n\tObject invoke(MethodInvocation mi); // Implement this method to perform extra treatments before and after the invocation.\n\tboolean isAfterAdvice(); // Return whether this is an after advice.\n\tboolean isBeforeAdvice(); // Return whether this is a before advice.\n\tvoid setThrowingName(String name);\n}"}
{"index": 1200, "repo": "ignite-core-2.15.0", "des": "A dialect compatible with the Microsoft SQL Server database.", "code": "Class SQLServerDialect {\n\tString escape(String ident);\n\tboolean hasMerge();\n\tString loadCacheSelectRangeQuery(String fullTblName, Collection<String> keyCols); // Construct query to get ranges bounds.\n\tString mergeQuery(String fullTblName, Collection<String> keyCols, Collection<String> uniqCols); // Construct merge query.\n}"}
{"index": 6932, "repo": "calcite-core-1.34.0", "des": "Planner rule that permutes the inputs to a Join.", "code": "Class JoinCommuteRule {\n\tboolean matches(RelOptRuleCall call); // Returns whether this rule could possibly match the given operands.\n\tvoid onMatch(RelOptRuleCall call); // Receives notification about a rule match.\n\tstatic @Nullable RelNode swap(Join join, boolean swapOuterJoins, RelBuilder relBuilder); // Returns a relational expression with the inputs switched round.\n}"}
{"index": 18530, "repo": "hibernate-core-5.6.15.Final", "des": "Exposes information about the database and JDBC driver that can be used in resolving the appropriate Dialect to use.", "code": "Interface DialectResolutionInfo {\n\tint getDatabaseMajorVersion(); // Obtain access to the database major version, as returned from DatabaseMetaData.getDatabaseMajorVersion() for the target database.\n\tint getDatabaseMinorVersion(); // Obtain access to the database minor version, as returned from DatabaseMetaData.getDatabaseMinorVersion() for the target database.\n\tjava.lang.String getDatabaseName(); // Obtain access to the database name, as returned from DatabaseMetaData.getDatabaseProductName() for the target database\n\tint getDriverMajorVersion(); // Obtain access to the major version of the JDBC driver, as returned from DatabaseMetaData.getDriverMajorVersion() ()} for the target database.\n\tint getDriverMinorVersion(); // Obtain access to the minor version of the JDBC driver, as returned from DatabaseMetaData.getDriverMinorVersion() for the target database.\n\tjava.lang.String getDriverName(); // Obtain access to the name of the JDBC driver, as returned from DatabaseMetaData.getDriverName() for the target database\n}"}
{"index": 11255, "repo": "spring-context-6.0.11", "des": "Abstract base class for MessageSource implementations based on resource bundle conventions, such as ResourceBundleMessageSource and ReloadableResourceBundleMessageSource.", "code": "public abstract class AbstractResourceBasedMessageSource extends AbstractMessageSource {\n\tvoid addBasenames(String... basenames); // Add the specified basenames to the existing basename configuration.\n\tSet<String> getBasenameSet(); // Return this MessageSource's basename set, containing entries in the order of registration.\n\tprotected long getCacheMillis(); // Return the number of milliseconds to cache loaded properties files.\n\tprotected String getDefaultEncoding(); // Return the default charset to use for parsing properties files, if any.\n\tprotected Locale getDefaultLocale(); // Determine a default Locale to fall back to: either a locally specified default Locale or the system Locale, or null for no fallback locale at all.\n\tprotected boolean isFallbackToSystemLocale(); // Deprecated. as of 5.2.2, in favor of getDefaultLocale()\n\tvoid setBasename(String basename); // Set a single basename, following the basic ResourceBundle convention of not specifying file extension or language codes.\n\tvoid setBasenames(String... basenames); // Set an array of basenames, each following the basic ResourceBundle convention of not specifying file extension or language codes.\n\tvoid setCacheMillis(long cacheMillis); // Set the number of milliseconds to cache loaded properties files.\n\tvoid setCacheSeconds(int cacheSeconds); // Set the number of seconds to cache loaded properties files.\n\tvoid setDefaultEncoding(String defaultEncoding); // Set the default charset to use for parsing properties files.\n\tvoid setDefaultLocale(Locale defaultLocale); // Specify a default Locale to fall back to, as an alternative to falling back to the system Locale.\n\tvoid setFallbackToSystemLocale(boolean fallbackToSystemLocale); // Set whether to fall back to the system Locale if no files for a specific Locale have been found.\n}"}
{"index": 139, "repo": "commons-collections4-4.4", "des": "Factory implementation that always throws an exception.", "code": "Class ExceptionFactory<T> {\n\tT create(); // Always throws an exception.\n\tstatic <T> Factory<T> exceptionFactory(); // Factory returning the singleton instance.\n}"}
{"index": 330, "repo": "phoenix-core-5.1.3", "des": "Node representing the equal operator in SQL.", "code": "Class EqualParseNode {\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getFilterOp(); // Return the comparison operator associated with the given comparison expression node\n\torg.apache.hadoop.hbase.filter.CompareFilter.CompareOp getInvertFilterOp(); // Return the inverted operator for the CompareOp\n}"}
{"index": 852, "repo": "ignite-core-2.15.0", "des": "This is an utility class for 'splitting' locking of some int- or long-keyed resources.", "code": "Class GridStripedLock {\n\tint concurrencyLevel(); // Gets concurrency level.\n\tLock getLock(int key); // Returns Lock object for the given key.\n\tLock getLock(long key); // Returns Lock object for the given key.\n\tLock getLock(@Nullable Object o); // Returns lock for object.\n\tvoid lock(int key); // Locks given key.\n\tvoid lock(long key); // Locks given key.\n\tvoid lock(@Nullable Object o); // Locks an object.\n\tvoid unlock(int key); // Unlocks given key.\n\tvoid unlock(long key); // Unlocks given key.\n\tvoid unlock(@Nullable Object o); // Unlocks an object.\n}"}
{"index": 14298, "repo": "wicket-core-10.0.0-M1", "des": "caching strategy for cacheable resources", "code": "public interface IResourceCachingStrategy {\n\tvoid clearCache(); // Clears any stateful information\n\tvoid decorateResponse(AbstractResource.ResourceResponse response, IStaticCacheableResource resource); // decorate resource response\n\tvoid decorateUrl(ResourceUrl url, IStaticCacheableResource resource); // add caching related information to filename + parameters\n\tvoid undecorateUrl(ResourceUrl url); // Removes caching related information from filename + parameters.\n}"}
{"index": 15110, "repo": "spring-vault-core-3.0.4", "des": "Interface that specifies operations using the transform backend.", "code": "public interface VaultTransformOperations {\n\tdefault String decode(String roleName, String ciphertext); // Decode the provided ciphertext using the named role.\n\tString decode(String roleName, String ciphertext, VaultTransformContext transformContext); // Decode the provided ciphertext using the named role.\n\tList<VaultTransformDecodeResult> decode(String roleName, List<TransformCiphertext> batchRequest); // Decode the provided batch of ciphertext using the role given and transformation in each list item.\n\tTransformPlaintext decode(String roleName, TransformCiphertext ciphertext); // Decode the provided ciphertext using the named role.\n\tdefault TransformCiphertext encode(String roleName, byte[] plaintext, VaultTransformContext transformRequest); // Encode the provided plaintext using the named role.\n\tString encode(String roleName, String plaintext); // Encode the provided plaintext using the named role.\n\tList<VaultTransformEncodeResult> encode(String roleName, List<TransformPlaintext> batchRequest); // Encode the provided batch of plaintext using the role given and transformation in each list item.\n\tTransformCiphertext encode(String roleName, TransformPlaintext plaintext); // Encode the provided plaintext using the named role.\n}"}
{"index": 18275, "repo": "tomcat-api-10.1", "des": "Class providing details about a javac compilation error.", "code": "Class JavacErrorDetail {\n\tString getErrorMessage(); // Gets the compilation error message.\n\tString getJavaFileName(); // Gets the name of the Java source file in which the compilation error occurred.\n\tint getJavaLineNumber(); // Gets the compilation error line number.\n\tint getJspBeginLineNumber(); // Gets the start line number (in the JSP file) of the JSP element responsible for the compilation error.\n\tString getJspExtract(); // Gets the extract of the JSP that corresponds to this message.\n\tString getJspFileName(); // Gets the name of the JSP file from which the Java source file was generated.\n}"}
{"index": 8843, "repo": "hbase-server-3.0.0-alpha-4", "des": "Use one of these to keep a running account of cached blocks by file.", "code": "Class BlockCacheUtil.CachedBlocksByFile {\n\tAgeSnapshot getAgeInCacheSnapshot();\n\tNavigableMap<String,NavigableSet<CachedBlock>> getCachedBlockStatsByFile();\n\tint getCount(); // Returns count of blocks in the cache\n\tint getDataCount();\n\tlong getDataSize(); // Returns Size of data.\n\tlong getSize(); // Returns size of blocks in the cache\n\tboolean isFull();\n\tboolean update(CachedBlock cb); // Returns True if full....\n}"}
{"index": 17932, "repo": "spring-web-6.0.11", "des": "ClientHttpRequestFactory implementation that uses standard JDK facilities.", "code": "public class SimpleClientHttpRequestFactory extends Object implements ClientHttpRequestFactory {\n\tClientHttpRequest createRequest(URI uri, HttpMethod httpMethod); // Create a new ClientHttpRequest for the specified URI and HTTP method.\n\tprotected HttpURLConnection openConnection(URL url, Proxy proxy); // Opens and returns a connection to the given URL.\n\tprotected void prepareConnection(HttpURLConnection connection, String httpMethod); // Template method for preparing the given HttpURLConnection.\n\tvoid setBufferRequestBody(boolean bufferRequestBody); // Indicate whether this request factory should buffer the request body internally.\n\tvoid setChunkSize(int chunkSize); // Set the number of bytes to write in each chunk when not buffering request bodies locally.\n\tvoid setConnectTimeout(int connectTimeout); // Set the underlying URLConnection's connect timeout (in milliseconds).\n\tvoid setOutputStreaming(boolean outputStreaming); // Set if the underlying URLConnection can be set to 'output streaming' mode.\n\tvoid setProxy(Proxy proxy); // Set the Proxy to use for this request factory.\n\tvoid setReadTimeout(int readTimeout); // Set the underlying URLConnection's read timeout (in milliseconds).\n}"}
{"index": 18648, "repo": "opencms-gwt-15.0", "des": "An extension of CmsTextBox that keeps information about its focus state.", "code": "Class CmsFocusAwareTextBox {\n\tstatic void initClass(); // Initializes this class.\n\tboolean isFocused(); // Returns a flag, indicating if the text box is currently focused.\n}"}
{"index": 6640, "repo": "artemis-odb-2.3.0", "des": "Manages all instances of EntitySubscription.", "code": "Class AspectSubscriptionManager {\n\tEntitySubscription get(Aspect.Builder builder); // Gets the entity subscription for the Aspect.\n\tImmutableBag<EntitySubscription> getSubscriptions(); // Gets the active list of all current entity subscriptions.\n\tprotected void processSystem(); // Process the system.\n\tprotected void setWorld(World world); // Set the world this system works on.\n}"}
{"index": 9100, "repo": "hbase-server-3.0.0-alpha-4", "des": "Keeps track of the columns for a scan if they are not explicitly specified.", "code": "Class ScanWildcardColumnTracker {\n\tvoid beforeShipped(); // The action that needs to be performed before Shipper.shipped() is performed\n\tScanQueryMatcher.MatchCode checkColumn(Cell cell, byte type); // Checks if the column is present in the list of requested columns by returning the match code instance.\n\tScanQueryMatcher.MatchCode checkVersions(Cell cell, long timestamp, byte type, boolean ignoreCount); // Keeps track of the number of versions for the columns asked for.\n\tboolean done(); // We can never know a-priori if we are done, so always return false.\n\torg.apache.hadoop.hbase.regionserver.querymatcher.ColumnCount getColumnHint(); // Used by matcher and scan/get to get a hint of the next column to seek to after checkColumn() returns SKIP.\n\tScanQueryMatcher.MatchCode getNextRowOrNextColumn(Cell cell); // Retrieve the MatchCode for the next row or column\n\tboolean isDone(long timestamp); // Give the tracker a chance to declare it's done based on only the timestamp to allow an early out.\n\tvoid reset(); // Resets the Matcher\n}"}
{"index": 14105, "repo": "wicket-core-10.0.0-M1", "des": "An behavior that collects the information to populate WebClientInfo's ClientProperties by using Ajax", "code": "public class AjaxClientInfoBehavior extends AbstractAjaxTimerBehavior {\n\tprotected WebClientInfo newWebClientInfo(RequestCycle requestCycle);\n\tprotected void onClientInfo(AjaxRequestTarget target, WebClientInfo clientInfo); // A callback method invoked when the client info is collected.\n\tstatic AjaxClientInfoBehavior onClientInfo(org.danekja.java.util.function.serializable.SerializableBiConsumer<AjaxRequestTarget,WebClientInfo> onClientInfo); // Creates an AjaxClientInfoBehavior based on lambda expressions\n\tprotected final void onTimer(AjaxRequestTarget target); // Listener method for the AJAX timer event.\n\tvoid renderHead(Component component, IHeaderResponse response); // Render to the web response whatever the component wants to contribute to the head section.\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes); // Gives a chance to the specializations to modify the attributes.\n}"}
{"index": 11571, "repo": "spring-security-oauth2-client-6.1.2", "des": "A context that holds authorization-specific state and is used by an OAuth2AuthorizedClientProvider when attempting to authorize (or re-authorize) an OAuth 2.0 Client.", "code": "public final class OAuth2AuthorizationContext extends Object {\n\t<T> T getAttribute(String name); // Returns the value of an attribute associated to the context or null if not available.\n\tMap<String,Object> getAttributes(); // Returns the attributes associated to the context.\n\tOAuth2AuthorizedClient getAuthorizedClient(); // Returns the authorized client or null if the client registration was supplied.\n\tClientRegistration getClientRegistration(); // Returns the client registration.\n\torg.springframework.security.core.Authentication getPrincipal(); // Returns the Principal (to be) associated to the authorized client.\n\tstatic OAuth2AuthorizationContext.Builder withAuthorizedClient(OAuth2AuthorizedClient authorizedClient); // Returns a new OAuth2AuthorizationContext.Builder initialized with the OAuth2AuthorizedClient.\n\tstatic OAuth2AuthorizationContext.Builder withClientRegistration(ClientRegistration clientRegistration); // Returns a new OAuth2AuthorizationContext.Builder initialized with the ClientRegistration.\n}"}
{"index": 1139, "repo": "ignite-core-2.15.0", "des": "Affinity function for partitioned cache based on Highest Random Weight algorithm.", "code": "Class RendezvousAffinityFunction {\n\tList<ClusterNode> assignPartition(int part, List<ClusterNode> nodes, int backups, @Nullable Map<UUID,Collection<ClusterNode>> neighborhoodCache); // Returns collection of nodes (primary first) for specified partition.\n\tList<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx); // Gets affinity nodes for a partition.\n\tstatic int calculateMask(int parts); // Helper method to calculates mask.\n\tstatic int calculatePartition(Object key, int mask, int parts); // Helper method to calculate partition.\n\t@Nullable IgniteBiPredicate<ClusterNode,List<ClusterNode>> getAffinityBackupFilter(); // Gets optional backup filter.\n\t@Nullable IgniteBiPredicate<ClusterNode,ClusterNode> getBackupFilter(); // Gets optional backup filter.\n\tint getPartitions(); // Gets total number of key partitions.\n\tboolean isExcludeNeighbors(); // Checks flag to exclude same-host-neighbors from being backups of each other (default is false).\n\tint partition(Object key); // Gets partition number for a given key starting from 0.\n\tint partitions(); // Gets total number of partitions available.\n\tvoid removeNode(UUID nodeId); // Removes node from affinity.\n\tvoid reset(); // Resets cache affinity to its initial state.\n\tObject resolveNodeHash(ClusterNode node); // Resolves node hash.\n\tRendezvousAffinityFunction setAffinityBackupFilter(@Nullable IgniteBiPredicate<ClusterNode,List<ClusterNode>> affinityBackupFilter); // Sets optional backup filter.\n\tRendezvousAffinityFunction setExcludeNeighbors(boolean exclNeighbors); // Sets flag to exclude same-host-neighbors from being backups of each other (default is false).\n\tRendezvousAffinityFunction setPartitions(int parts); // Sets total number of partitions.If the number of partitions is a power of two, the PowerOfTwo hashing method will be used.\n}"}
{"index": 4404, "repo": "beam-sdks-java-core-2.49.0", "des": "Encodes an IntervalWindow as a pair of its upper bound and duration.", "code": "Class IntervalWindow.IntervalWindowCoder {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tIntervalWindow decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(IntervalWindow window, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tjava.util.List<? extends Coder<?>> getCoderArguments(); // If this is a Coder for a parameterized type, returns the list of Coders being used for each of the parameters in the same order they appear within the parameterized type's type signature.\n\tboolean isRegisterByteSizeObserverCheap(IntervalWindow value); // Returns whether Coder.registerByteSizeObserver(T, org.apache.beam.sdk.util.common.ElementByteSizeObserver) cheap enough to call for every element, that is, if this Coder can calculate the byte size of the element to be coded in roughly constant time (or lazily).\n\tstatic IntervalWindow.IntervalWindowCoder of();\n\tvoid registerByteSizeObserver(IntervalWindow value, ElementByteSizeObserver observer); // Notifies the ElementByteSizeObserver about the byte size of the encoded value using this Coder.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 12295, "repo": "jena-core-4.9.0", "des": "A base for transaction handlers; provide implementations of execute* operations using the fundamental begin-commit-abort.", "code": "public abstract class TransactionHandlerBase extends Object implements TransactionHandler {\n\t<T> T calculate(Supplier<T> action); // Execute the supplier action within a transaction.\n\t<T> T calculateAlways(Supplier<T> action); // Calculate inside a transaction if transactions supported - calculate anyway if transactions not supported.\n\tvoid execute(Runnable action); // Execute the runnable action within a transaction.\n\tvoid executeAlways(Runnable action); // Execute inside a transaction if transactions supported - execute anyway if transactions not supported.\n}"}
{"index": 3610, "repo": "hive-serde-4.0.0-alpha-2", "des": "LazyBinaryUnion is serialized as follows: start TAG FIELD end bytes[] -> |-----|---------|--- .", "code": "Class LazyBinaryUnion {\n\tObject getField(); // Get the set field out of the union.\n\tObject getObject(); // If the LazyObjectBase is a primitive Object, then deserialize it and return the actual primitive Object.\n\tlong getRawDataSerializedSize(); // Returns the serialized size of the object.\n\tbyte getTag(); // Get the set field's tag\n\tvoid init(ByteArrayRef bytes, int start, int length); // Set the data for this LazyObjectBase.\n}"}
{"index": 5787, "repo": "hive-service-4.0.0-alpha-2", "des": "The object that encompasses all components of a Directory Service search query.", "code": "Class Query {\n\tstatic Query.QueryBuilder builder(); // Creates Query Builder.\n\tSearchControls getControls(); // Returns search controls.\n\tString getFilter(); // Returns search filter.\n}"}
{"index": 16667, "repo": "spring-beans-6.0.11", "des": "A variant of ObjectFactory designed specifically for injection points, allowing for programmatic optionality and lenient not-unique handling.", "code": "public interface ObjectProvider<T> extends ObjectFactory<T>, Iterable<T> {\n\tT getIfAvailable(); // Return an instance (possibly shared or independent) of the object managed by this factory.\n\tdefault T getIfAvailable(Supplier<T> defaultSupplier); // Return an instance (possibly shared or independent) of the object managed by this factory.\n\tT getIfUnique(); // Return an instance (possibly shared or independent) of the object managed by this factory.\n\tdefault T getIfUnique(Supplier<T> defaultSupplier); // Return an instance (possibly shared or independent) of the object managed by this factory.\n\tT getObject(Object... args); // Return an instance (possibly shared or independent) of the object managed by this factory.\n\tdefault void ifAvailable(Consumer<T> dependencyConsumer); // Consume an instance (possibly shared or independent) of the object managed by this factory, if available.\n\tdefault void ifUnique(Consumer<T> dependencyConsumer); // Consume an instance (possibly shared or independent) of the object managed by this factory, if unique.\n\tdefault Iterator<T> iterator(); // Return an Iterator over all matching object instances, without specific ordering guarantees (but typically in registration order).\n\tdefault Stream<T> orderedStream(); // Return a sequential Stream over all matching object instances, pre-ordered according to the factory's common order comparator.\n\tdefault Stream<T> stream(); // Return a sequential Stream over all matching object instances, without specific ordering guarantees (but typically in registration order).\n}"}
{"index": 11056, "repo": "spring-shell-core-3.1.2", "des": "Encapsulating Directive with its fields, name and value.", "code": "public record DirectiveResult(String name, String value) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString name(); // Returns the value of the name record component.\n\tstatic DirectiveResult of(String name, String value);\n\tString value(); // Returns the value of the value record component.\n}"}
{"index": 10833, "repo": "spring-boot-actuator-3.1.1", "des": "The recordable parts of an HTTP request used when creating an HttpExchange.", "code": "public interface RecordableHttpRequest {\n\tMap<String,List<String>> getHeaders(); // Returns a modifiable copy of the headers of the request.\n\tString getMethod(); // Returns the method (GET, POST, etc.) of the request.\n\tString getRemoteAddress(); // Returns the remote address from which the request was sent, if available.\n\tURI getUri(); // Returns the URI of the request.\n}"}
{"index": 14601, "repo": "spring-security-web-6.1.2", "des": "Detects that a user has been authenticated since the start of the request and, if they have, calls the configured SessionAuthenticationStrategy to perform any session-related activity such as activating session-fixation protection mechanisms or checking for multiple concurrent logins.", "code": "public class SessionManagementFilter extends org.springframework.web.filter.GenericFilterBean {\n\tvoid doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain chain);\n\tvoid setAuthenticationFailureHandler(AuthenticationFailureHandler failureHandler); // The handler which will be invoked if the AuthenticatedSessionStrategy raises a SessionAuthenticationException, indicating that the user is not allowed to be authenticated for this session (typically because they already have too many sessions open).\n\tvoid setInvalidSessionStrategy(InvalidSessionStrategy invalidSessionStrategy); // Sets the strategy which will be invoked instead of allowing the filter chain to proceed, if the user agent requests an invalid session ID.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tvoid setTrustResolver(org.springframework.security.authentication.AuthenticationTrustResolver trustResolver); // Sets the AuthenticationTrustResolver to be used.\n}"}
{"index": 17432, "repo": "groovy-4.0.13", "des": "Handles generation of code for the @Vetoable annotation, and @Bindable if also present.", "code": "public class VetoableASTTransformation extends BindableASTTransformation {\n\tprotected void addVetoableChangeSupport(ClassNode declaringClass); // Adds the necessary field and methods to support vetoable change support.\n\tprotected Statement createConstrainedStatement(PropertyNode propertyNode, Expression fieldExpression); // Creates a statement body similar to: this.fireVetoableChange(\"field\", field, field = value)\n\tprotected Statement createSetStatement(Expression fieldExpression); // Creates a statement body similar to: field = value.\n\tprotected void createSetterMethod(ClassNode declaringClass, PropertyNode propertyNode, String setterName, Statement setterBlock); // Creates a setter method with the given body.\n\tstatic boolean hasVetoableAnnotation(AnnotatedNode node); // Convenience method to see if an annotated node is @Vetoable.\n\tprotected boolean needsVetoableChangeSupport(ClassNode declaringClass, SourceUnit sourceUnit); // Snoops through the declaring class and all parents looking for a field of type VetoableChangeSupport.\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // Handles the bulk of the processing, mostly delegating to other methods.\n}"}
{"index": 9025, "repo": "hbase-server-3.0.0-alpha-4", "des": "Carries the execution state for a given invocation of an Observer coprocessor (RegionObserver, MasterObserver, or WALObserver) method.", "code": "Interface ObserverContext<E extends CoprocessorEnvironment> {\n\tvoid bypass(); // Call to indicate that the current coprocessor's return value (or parameter -- depends on the call-type) should be used in place of the value that would be obtained via normal processing; i.e.\n\tOptional<User> getCaller(); // Returns the active user for the coprocessor call.\n\tE getEnvironment();\n}"}
{"index": 3274, "repo": "hbase-common-3.0.0-alpha-4", "des": "An int of 32-bits using a fixed-length encoding.", "code": "Class OrderedInt32 {\n\tInteger decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tint decodeInt(PositionedByteRange src); // Read an int value from the buffer src.\n\tint encode(PositionedByteRange dst, Integer val); // Write instance val into buffer dst.\n\tClass<Integer> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(Integer val); // Inform consumers how long the encoded byte[] will be.\n\tint encodeInt(PositionedByteRange dst, int val); // Write instance val into buffer dst.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n}"}
{"index": 4388, "repo": "beam-sdks-java-core-2.49.0", "des": "A PTransform that produces longs starting from the given value, and either up to the given limit or until Long.", "code": "Class GenerateSequence {\n\tPCollection<java.lang.Long> expand(PBegin input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tstatic GenerateSequence from(long from); // Specifies the minimum number to generate (inclusive).\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tGenerateSequence to(long to); // Specifies the maximum number to generate (exclusive).\n\tGenerateSequence withMaxReadTime(org.joda.time.Duration maxReadTime); // Specifies to stop generating elements after the given time.\n\tGenerateSequence withRate(long numElements, org.joda.time.Duration periodLength); // Specifies to generate at most a given number of elements per a given period.\n\tGenerateSequence withTimestampFn(SerializableFunction<java.lang.Long,org.joda.time.Instant> timestampFn); // Specifies the function to use to assign timestamps to the elements.\n}"}
{"index": 3243, "repo": "hbase-common-3.0.0-alpha-4", "des": "A decoding context that is created by a reader's encoder, and is shared across all of the reader's read operations.", "code": "Interface HFileBlockDecodingContext {\n\tHFileContext getHFileContext(); // Returns HFile meta information\n\tvoid prepareDecoding(int onDiskSizeWithoutHeader, int uncompressedSizeWithoutHeader, ByteBuff blockBufferWithoutHeader, ByteBuff onDiskBlock); // Perform all actions that need to be done before the encoder's real decoding process.\n}"}
{"index": 5777, "repo": "hive-service-4.0.0-alpha-2", "des": "FetchType indicates the type of fetchResults request.", "code": "Enum FetchType {\n\tstatic FetchType getFetchType(short tFetchType);\n\tshort toTFetchType();\n\tstatic FetchType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FetchType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14038, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "Encapsulates Docker registry authentication configuration options.", "code": "public abstract static class DockerSpec.DockerRegistrySpec extends Object {\n\tabstract Property<String> getEmail(); // Returns the email address associated with the Docker registry username.\n\tabstract Property<String> getPassword(); // Returns the password to use when authenticating to the Docker registry.\n\tabstract Property<String> getToken(); // Returns the identity token to use when authenticating to the Docker registry.\n\tabstract Property<String> getUrl(); // Returns the Docker registry URL.\n\tabstract Property<String> getUsername(); // Returns the username to use when authenticating to the Docker registry.\n}"}
{"index": 3999, "repo": "zookeeper-3.8.2", "des": "This class contains constants for all the four letter commands.", "code": "Class FourLetterCommands {\n\tstatic String getCommandString(int command); // Return the string representation of the specified command code.\n\tstatic boolean isEnabled(String command); // Check if the specified command is enabled.\n\tstatic boolean isKnown(int command); // Check if the specified command code is from a known command.\n\tstatic void resetWhiteList();\n}"}
{"index": 7005, "repo": "calcite-core-1.34.0", "des": "Four states that describe whether a particular behavior or property is allowed and/or not allowed.", "code": "Enum Optionality {\n\tstatic Optionality valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Optionality[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5217, "repo": "druid-processing-26.0.0", "des": "Vectorized version of on heap 'last' aggregator for column selectors with type DOUBLE.", "code": "Class DoubleLastVectorAggregator {\n\tObject get(ByteBuffer buf, int position); // Same as BufferAggregator.get(java.nio.ByteBuffer, int).\n\tvoid initValue(ByteBuffer buf, int position); // Abstract function which needs to be overridden by subclasses to set the initial value\n}"}
{"index": 3692, "repo": "kafka-streams-3.5.0", "des": "Enumeration that describes the response from the exception handler.", "code": "Enum DeserializationExceptionHandler.DeserializationHandlerResponse {\n\tstatic DeserializationExceptionHandler.DeserializationHandlerResponse valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DeserializationExceptionHandler.DeserializationHandlerResponse[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7715, "repo": "cassandra-all-4.1.2", "des": "Index on a PARTITION_KEY column definition.", "code": "Class PartitionKeyIndex {\n\t<T> CBuilder buildIndexClusteringPrefix(java.nio.ByteBuffer partitionKey, ClusteringPrefix<T> prefix, CellPath path); // Used to construct an the clustering for an entry in the index table based on values from the base data.\n\tIndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry); // Used at search time to convert a row in the index table into a simple struct containing the values required to retrieve the corresponding row from the base table.\n\tjava.nio.ByteBuffer getIndexedValue(java.nio.ByteBuffer partitionKey, Clustering<?> clustering, CellPath path, java.nio.ByteBuffer cellValue); // Extract the value to be inserted into the index from the components of the base data\n\tboolean isStale(Row data, java.nio.ByteBuffer indexValue, int nowInSec); // Check whether a value retrieved from an index is still valid by comparing it to current row from the base table.\n}"}
{"index": 14792, "repo": "spring-data-commons-3.1.2", "des": "FieldNamingStrategy simply using the PersistentProperty's name.", "code": "public enum PropertyNameFieldNamingStrategy extends Enum<PropertyNameFieldNamingStrategy> implements FieldNamingStrategy {\n\tString getFieldName(PersistentProperty<?> property); // Returns the field name to be used for the given PersistentProperty.\n\tstatic PropertyNameFieldNamingStrategy valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic PropertyNameFieldNamingStrategy[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 16161, "repo": "spring-data-cassandra-4.1.2", "des": "Criteria definition for a ColumnName exposing a CriteriaDefinition.Predicate.", "code": "public interface CriteriaDefinition {\n\tColumnName getColumnName(); // Get the identifying key.\n\tCriteriaDefinition.Predicate getPredicate(); // Get CriteriaDefinition.Predicate.\n}"}
{"index": 9601, "repo": "commons-math3-3.6.1", "des": "This class implements a three-dimensional space.", "code": "Class Euclidean3D {\n\tint getDimension(); // Get the dimension of the space.\n\tstatic Euclidean3D getInstance(); // Get the unique instance.\n\tEuclidean2D getSubSpace(); // Get the n-1 dimension subspace of this space.\n}"}
{"index": 15344, "repo": "spring-boot-3.1.1", "des": "A source that is in the process of being mapped.", "code": "public static final class PropertyMapper.Source<T> extends Object {\n\t<R> PropertyMapper.Source<R> as(Function<T,R> adapter); // Return an adapted version of the source changed through the given adapter function.\n\t<R extends Number>PropertyMapper.Source<Integer> asInt(Function<T,R> adapter); // Return an adapted version of the source with Integer type.\n\tvoid to(Consumer<T> consumer); // Complete the mapping by passing any non-filtered value to the specified consumer.\n\t<R> R to(R instance, BiFunction<R,T,R> mapper); // Complete the mapping for any non-filtered value by applying the given function to an existing instance and returning a new one.\n\tvoid toCall(Runnable runnable); // Complete the mapping by calling the specified method when the value has not been filtered.\n\t<R> R toInstance(Function<T,R> factory); // Complete the mapping by creating a new instance from the non-filtered value.\n\tPropertyMapper.Source<T> when(Predicate<T> predicate); // Return a filtered version of the source that won't map values that don't match the given predicate.\n\tPropertyMapper.Source<T> whenEqualTo(Object object); // Return a filtered version of the source that will only map values equal to the specified object.\n\tPropertyMapper.Source<T> whenFalse(); // Return a filtered version of the source that will only map values that are false.\n\tPropertyMapper.Source<T> whenHasText(); // Return a filtered version of the source that will only map values that have a toString() containing actual text.\n\t<R extends T>PropertyMapper.Source<R> whenInstanceOf(Class<R> target); // Return a filtered version of the source that will only map values that are an instance of the given type.\n\tPropertyMapper.Source<T> whenNonNull(); // Return a filtered version of the source that won't map non-null values or suppliers that throw a NullPointerException.\n\tPropertyMapper.Source<T> whenNot(Predicate<T> predicate); // Return a filtered version of the source that won't map values that match the given predicate.\n\tPropertyMapper.Source<T> whenTrue(); // Return a filtered version of the source that will only map values that are true.\n}"}
{"index": 9050, "repo": "hbase-server-3.0.0-alpha-4", "des": "A tool that is used for manipulating and viewing favored nodes information for regions.", "code": "Class RegionPlacementMaintainer {\n\tvoid checkDifferencesWithOldPlan(Map<TableName,Integer> movesPerTable, Map<String,Map<String,Float>> regionLocalityMap, FavoredNodesPlan newPlan); // Compares two plans and check whether the locality dropped or increased (prints the information as a string) also prints the baseline locality\n\tvoid close();\n\tstatic List<ServerName> getFavoredNodeList(String favoredNodesStr);\n\tFavoredNodesPlan getNewAssignmentPlan();\n\tSnapshotOfRegionAssignmentFromMeta getRegionAssignmentSnapshot(); // Returns the new RegionAssignmentSnapshot\n\tMap<TableName,Integer> getRegionsMovement(FavoredNodesPlan newPlan); // Return how many regions will move per table since their primary RS will change\n\tstatic void main(String[] args);\n\tstatic void printAssignmentPlan(FavoredNodesPlan plan); // Print the assignment plan to the system output stream\n\tvoid printDispersionScores(TableName table, SnapshotOfRegionAssignmentFromMeta snapshot, int numRegions, FavoredNodesPlan newPlan, boolean simplePrint);\n\tvoid printLocalityAndDispersionForCurrentPlan(Map<String,Map<String,Float>> regionLocalityMap);\n\tvoid setTargetTableName(String[] tableNames);\n\tvoid updateAssignmentPlan(FavoredNodesPlan plan);\n\tvoid updateAssignmentPlanToMeta(FavoredNodesPlan plan); // Update the assignment plan into hbase:meta\n\tList<AssignmentVerificationReport> verifyRegionPlacement(boolean isDetailMode); // Verify the region placement is consistent with the assignment plan\n}"}
{"index": 5776, "repo": "hive-service-4.0.0-alpha-2", "des": "The object used for executing queries on the Directory Service.", "code": "Interface DirSearch {\n\tList<String> executeCustomQuery(String query); // Executes an arbitrary query.\n\tString findGroupDn(String group); // Finds group's distinguished name.\n\tList<String> findGroupsForUser(String userDn); // Finds groups that contain the specified user.\n\tString findUserDn(String user); // Finds user's distinguished name.\n\tboolean isUserMemberOfGroup(String user, String groupDn); // Verifies that specified user is a member of specified group.\n}"}
{"index": 18680, "repo": "opencms-gwt-15.0", "des": "Adds constants / static methods for accessing the width class breakpoints.", "code": "Class CmsWidthConstants {\n\tstatic java.lang.String largeLow(); // Lower bound for 'large'.\n\tstatic java.lang.String mediumHigh(); // Upper bound for medium.\n\tstatic java.lang.String mediumLow(); // Lower bound for 'medium'.\n\tstatic java.lang.String smallHigh(); // Upper bound for 'small'.\n}"}
{"index": 15723, "repo": "camel-api-4.0.0-RC1", "des": "To apply custom configurations to CamelContext instances.", "code": "@FunctionalInterface public interface CamelContextCustomizer extends Ordered, Comparable<CamelContextCustomizer> {\n\tdefault int compareTo(CamelContextCustomizer other);\n\tvoid configure(CamelContext camelContext); // Configure the CamelContext.\n\tdefault int getOrder(); // Gets the order.\n}"}
{"index": 14861, "repo": "spring-data-commons-3.1.2", "des": "ParameterValueProvider that can be used to front a ParameterValueProvider delegate to prefer a SpEL expression evaluation over directly resolving the parameter value with the delegate.", "code": "public class SpELExpressionParameterValueProvider<P extends PersistentProperty<P>> extends Object implements ParameterValueProvider<P> {\n\t<T> T getParameterValue(Parameter<T,P> parameter); // Returns the value to be used for the given Parameter (usually when entity instances are created).\n\tprotected <T> T potentiallyConvertSpelValue(Object object, Parameter<T,P> parameter); // Hook to allow to massage the value resulting from the Spel expression evaluation.\n}"}
{"index": 1710, "repo": "samza-api-1.8.0", "des": "A TableDescriptor can be used for specifying Samza and implementation-specific properties of a Table.", "code": "Interface TableDescriptor<K,V,D extends TableDescriptor<K,V,D>> {\n\tjava.lang.String getTableId(); // Get the id of the table\n\tjava.util.Map<java.lang.String,java.lang.String> toConfig(Config jobConfig); // Generate configuration for this table descriptor, the generated configuration should be the complete configuration for this table that can be directly included in the job configuration.\n}"}
{"index": 14058, "repo": "spring-context-support-6.0.11", "des": "FactoryBean for a JCache javax.cache.CacheManager, obtaining a pre-defined CacheManager by name through the standard JCache javax.cache.Caching class.", "code": "public class JCacheManagerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<javax.cache.CacheManager>, org.springframework.beans.factory.BeanClassLoaderAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet();\n\tvoid destroy();\n\tjavax.cache.CacheManager getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setCacheManagerProperties(Properties cacheManagerProperties); // Specify properties for the to-be-created CacheManager.\n\tvoid setCacheManagerUri(URI cacheManagerUri); // Specify the URI for the desired CacheManager.\n}"}
{"index": 6082, "repo": "jackson-databind-2.15.2", "des": "Definition of alternate handling modes of single-argument constructors that are annotated with JsonCreator but without \"mode\" definition (or explicit name for the argument): this is the case where two interpretations are possible -- \"properties\" (in which case the argument is named parameter of a JSON Object) and \"delegating (in which case the argument maps to the whole JSON value).", "code": "Enum ConstructorDetector.SingleArgConstructor {\n\tstatic ConstructorDetector.SingleArgConstructor valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ConstructorDetector.SingleArgConstructor[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2799, "repo": "tika-parsers-1.28.5", "des": "Parser to extract printable Latin1 strings from arbitrary files with pure java without running any external process.", "code": "Class Latin1StringsParser {\n\tint getMinSize(); // Returns the minimum size of a character sequence to be extracted.\n\tSet<org.apache.tika.mime.MediaType> getSupportedTypes(org.apache.tika.parser.ParseContext arg0);\n\tvoid parse(InputStream stream, ContentHandler handler, org.apache.tika.metadata.Metadata metadata, org.apache.tika.parser.ParseContext context);\n\tvoid setMinSize(int minSize); // Sets the minimum size of a character sequence to be extracted.\n}"}
{"index": 6961, "repo": "calcite-core-1.34.0", "des": "Sub-class of TableFunctionScan not targeted at any particular engine or calling convention.", "code": "Class LogicalTableFunctionScan {\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tLogicalTableFunctionScan copy(RelTraitSet traitSet, List<RelNode> inputs, RexNode rexCall, @Nullable Type elementType, RelDataType rowType, @Nullable Set<RelColumnMapping> columnMappings); // Copies this relational expression, substituting traits and inputs.\n\tstatic LogicalTableFunctionScan create(RelOptCluster cluster, List<RelNode> inputs, RexNode rexCall, @Nullable Type elementType, RelDataType rowType, @Nullable Set<RelColumnMapping> columnMappings); // Creates a LogicalTableFunctionScan.\n}"}
{"index": 15488, "repo": "spring-batch-core-5.0.2", "des": "A SkipPolicy that depends on an exception classifier to make its decision, and then delegates to the classifier result.", "code": "public class ExceptionClassifierSkipPolicy extends Object implements SkipPolicy {\n\tvoid setExceptionClassifier(org.springframework.classify.SubclassClassifier<Throwable,SkipPolicy> classifier); // The classifier that will be used to choose a delegate policy.\n\tvoid setPolicyMap(Map<Class<? extends Throwable>,SkipPolicy> policyMap); // Setter for policy map.\n\tboolean shouldSkip(Throwable t, long skipCount); // Consult the classifier and find a delegate policy, and then use that to determine the outcome.\n}"}
{"index": 13208, "repo": "spring-test-6.0.11", "des": "Mock implementation of ClientHttpRequest.", "code": "public class MockClientHttpRequest extends org.springframework.http.client.reactive.AbstractClientHttpRequest {\n\tprotected void applyCookies();\n\tprotected void applyHeaders();\n\torg.springframework.core.io.buffer.DataBufferFactory bufferFactory();\n\treactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> getBody(); // Return the request body, or an error stream if the body was never set or when setWriteHandler(java.util.function.Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>, reactor.core.publisher.Mono<java.lang.Void>>) is configured.\n\treactor.core.publisher.Mono<String> getBodyAsString(); // Aggregate response data and convert to a String using the \"Content-Type\" charset or \"UTF-8\" by default.\n\torg.springframework.http.HttpMethod getMethod();\n\t<T> T getNativeRequest();\n\tURI getURI();\n\treactor.core.publisher.Mono<Void> setComplete();\n\tvoid setWriteHandler(Function<reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer>,reactor.core.publisher.Mono<Void>> writeHandler); // Configure a custom handler for writing the request body.\n\treactor.core.publisher.Mono<Void> writeAndFlushWith(Publisher<? extends Publisher<? extends org.springframework.core.io.buffer.DataBuffer>> body);\n\treactor.core.publisher.Mono<Void> writeWith(Publisher<? extends org.springframework.core.io.buffer.DataBuffer> body);\n}"}
{"index": 17101, "repo": "spring-integration-core-6.1.2", "des": "Transformer implementation that converts a JSON string payload into an instance of the provided target Class.", "code": "public class JsonToObjectTransformer extends AbstractTransformer implements org.springframework.beans.factory.BeanClassLoaderAware {\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to provide the transformation logic.\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setValueTypeExpression(org.springframework.expression.Expression valueTypeExpression); // Configure a SpEL Expression to evaluate a ResolvableType to instantiate the payload from the incoming JSON.\n\tvoid setValueTypeExpressionString(String valueTypeExpressionString); // Configure a SpEL expression to evaluate a ResolvableType to instantiate the payload from the incoming JSON.\n}"}
{"index": 9211, "repo": "fontbox-3.0.0-beta1", "des": "A vertical metrics 'vmtx' table in a TrueType or OpenType font.", "code": "Class VerticalMetricsTable {\n\tint getAdvanceHeight(int gid); // Returns the advance height for the given GID.\n\tint getTopSideBearing(int gid); // Returns the top sidebearing for the given GID\n}"}
{"index": 7422, "repo": "mahout-math-0.13.0", "des": "Open hash map from int keys to long values.", "code": "Class OpenIntLongHashMap {\n\tlong adjustOrPutValue(int key, long newValue, long incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(int key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(long value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(IntProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(IntLongProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tlong get(int key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(int key);\n\tprotected int indexOfKey(int key);\n\tprotected int indexOfValue(long value);\n\tIterator<OpenIntLongHashMap.MapElement> iterator();\n\tvoid keys(IntArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(IntLongProcedure condition, IntArrayList keyList, LongArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(int key, long value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(int key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(LongArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 6971, "repo": "calcite-core-1.34.0", "des": "Mapping where every source has a target.", "code": "Interface Mappings.FunctionMapping {\n\tMappingType getMappingType(); // Returns the mapping type.\n\tint getSourceCount();\n\tint getTarget(int source); // Returns the target that a source maps to.\n\tint getTargetOpt(int source); // Returns the target that a source maps to, or -1 if it is not mapped.\n}"}
{"index": 11459, "repo": "spring-context-6.0.11", "des": "Utility class offering convenient methods for invoking a Validator and for rejecting empty fields.", "code": "public abstract class ValidationUtils extends Object {\n\tstatic void invokeValidator(Validator validator, Object target, Errors errors); // Invoke the given Validator for the supplied object and Errors instance.\n\tstatic void invokeValidator(Validator validator, Object target, Errors errors, Object... validationHints); // Invoke the given Validator/SmartValidator for the supplied object and Errors instance.\n\tstatic void rejectIfEmpty(Errors errors, String field, String errorCode); // Reject the given field with the given error code if the value is empty.\n\tstatic void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs); // Reject the given field with the given error code and error arguments if the value is empty.\n\tstatic void rejectIfEmpty(Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage); // Reject the given field with the given error code, error arguments and default message if the value is empty.\n\tstatic void rejectIfEmpty(Errors errors, String field, String errorCode, String defaultMessage); // Reject the given field with the given error code and default message if the value is empty.\n\tstatic void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode); // Reject the given field with the given error code if the value is empty or just contains whitespace.\n\tstatic void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode, Object[] errorArgs); // Reject the given field with the given error code and error arguments if the value is empty or just contains whitespace.\n\tstatic void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode, Object[] errorArgs, String defaultMessage); // Reject the given field with the given error code, error arguments and default message if the value is empty or just contains whitespace.\n\tstatic void rejectIfEmptyOrWhitespace(Errors errors, String field, String errorCode, String defaultMessage); // Reject the given field with the given error code and default message if the value is empty or just contains whitespace.\n}"}
{"index": 6713, "repo": "lucene-analyzers-common-8.11.2", "des": "Breaks text into sentences with a BreakIterator and allows subclasses to decompose these sentences into words.", "code": "Class SegmentingTokenizerBase {\n\tvoid end();\n\tboolean incrementToken();\n\tprotected abstract boolean incrementWord(); // Returns true if another word is available\n\tprotected boolean isSafeEnd(char ch); // For sentence tokenization, these are the unambiguous break positions.\n\tvoid reset();\n\tprotected abstract void setNextSentence(int sentenceStart, int sentenceEnd); // Provides the next input sentence for analysis\n}"}
{"index": 15067, "repo": "spring-vault-core-3.0.4", "des": "Value object representing a Vault policy associated with Policy.Rules.", "code": "public class Policy extends Object {\n\tstatic Policy empty(); // Create an empty Policy without rules.\n\tboolean equals(Object o);\n\tPolicy.Rule getRule(String path); // Lookup a Policy.Rule by its path.\n\tSet<Policy.Rule> getRules();\n\tstatic Policy of(Set<Policy.Rule> rules); // Create a Policy from one or more rules.\n\tstatic Policy of(Policy.Rule... rules); // Create a Policy from one or more rules.\n\tPolicy with(Policy.Rule rule); // Create a new Policy object containing all configured rules and add the given Policy.Rule to the new policy object.\n}"}
{"index": 1749, "repo": "kafka-clients-3.5.0", "des": "Class representing a configuration synonym of a ConfigEntry.", "code": "Class ConfigEntry.ConfigSynonym {\n\tboolean equals(Object o);\n\tString name(); // Returns the name of this configuration.\n\tConfigEntry.ConfigSource source(); // Returns the source of this configuration.\n\tString value(); // Returns the value of this configuration, which may be null if the configuration is sensitive.\n}"}
{"index": 8092, "repo": "commons-compress-1.23.0", "des": "Reads a 7z file, using SeekableByteChannel under the covers.", "code": "Class SevenZFile {\n\tvoid close(); // Closes the archive.\n\tString getDefaultName(); // Derives a default file name from the archive name - if known.\n\tIterable<SevenZArchiveEntry> getEntries(); // Returns a copy of meta-data of all archive entries.\n\tInputStream getInputStream(SevenZArchiveEntry entry); // Returns an InputStream for reading the contents of the given entry.\n\tSevenZArchiveEntry getNextEntry(); // Returns the next Archive Entry in this archive.\n\tInputStreamStatistics getStatisticsForCurrentEntry(); // Provides statistics for bytes read from the current entry.\n\tstatic boolean matches(byte[] signature, int length); // Checks if the signature matches what is expected for a 7z file.\n\tint read(); // Reads a byte of data.\n\tint read(byte[] b); // Reads data into an array of bytes.\n\tint read(byte[] b, int off, int len); // Reads data into an array of bytes.\n}"}
{"index": 5373, "repo": "druid-processing-26.0.0", "des": "ShardSpec for non-first-generation segments.", "code": "Interface OverwriteShardSpec {\n\tdefault int getNumCorePartitions(); // The core partition concept is not used with segment locking.\n\tdefault boolean sharePartitionSpace(PartialShardSpec partialShardSpec); // Returns true if this shardSpec and the given PartialShardSpec share the same partition space.\n\tdefault OverwriteShardSpec withAtomicUpdateGroupSize(int atomicUpdateGroupSize);\n\tOverwriteShardSpec withAtomicUpdateGroupSize(short atomicUpdateGroupSize);\n}"}
{"index": 5382, "repo": "druid-processing-26.0.0", "des": "Provides the ability to create \"polymorphic\" bindings where the polymorphism is actually just making a decision based on a value in Properties.", "code": "Class PolyBind {\n\tstatic <T> com.google.inject.binder.ScopedBindingBuilder createChoice(com.google.inject.Binder binder, String property, com.google.inject.Key<T> interfaceKey, com.google.inject.Key<? extends T> defaultKey); // Sets up a \"choice\" for the injector to resolve at injection time.\n\tstatic <T> com.google.inject.binder.ScopedBindingBuilder createChoiceWithDefault(com.google.inject.Binder binder, String property, com.google.inject.Key<T> interfaceKey, String defaultPropertyValue); // Sets up a \"choice\" for the injector to resolve at injection time.\n\tstatic <T> com.google.inject.multibindings.MapBinder<String,T> optionBinder(com.google.inject.Binder binder, com.google.inject.Key<T> interfaceKey); // Binds an option for a specific choice.\n}"}
{"index": 14268, "repo": "wicket-core-10.0.0-M1", "des": "<input type=\"image\"> component - like Button only with an image.", "code": "public class ImageButton extends Button implements IRequestListener {\n\tprotected IResource getImageResource();\n\tprotected ResourceReference getImageResourceReference();\n\tprotected boolean getStatelessHint(); // Returns whether the component can be stateless.\n\tprotected final void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tvoid onRequest(); // Called when a request is received.\n\tboolean rendersPage(); // Does invocation of this listener render the page.\n\tImageButton setDefaultModel(IModel<?> model); // Sets the given model.\n\tvoid setImageResource(IResource imageResource);\n\tvoid setImageResourceReference(ResourceReference resourceReference);\n\tvoid setImageResourceReference(ResourceReference resourceReference, org.apache.wicket.request.mapper.parameter.PageParameters parameters);\n}"}
{"index": 7054, "repo": "calcite-core-1.34.0", "des": "Definition of the ordering of one field of a RelNode whose output is to be sorted.", "code": "Class RelFieldCollation {\n\tstatic int compare(@Nullable Comparable c1, @Nullable Comparable c2, int nullComparison); // Utility method that compares values taking into account null direction.\n\tboolean equals(@Nullable Object o);\n\tRelFieldCollation.Direction getDirection();\n\tint getFieldIndex();\n\tRelFieldCollation shift(int offset); // Returns a copy of this RelFieldCollation with the field index shifted offset to the right.\n\tString shortString();\n\tRelFieldCollation withDirection(RelFieldCollation.Direction direction); // Creates a copy of this RelFieldCollation with a different direction.\n\tRelFieldCollation withFieldIndex(int fieldIndex); // Creates a copy of this RelFieldCollation against a different field.\n\tRelFieldCollation withNullDirection(RelFieldCollation.NullDirection nullDirection); // Creates a copy of this RelFieldCollation with a different null direction.\n}"}
{"index": 14973, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A Filter for the OAuth 2.0 Device Authorization endpoint, which handles the processing of the OAuth 2.0 Device Authorization Request.", "code": "public final class OAuth2DeviceAuthorizationEndpointFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\tvoid setAuthenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter); // Sets the AuthenticationConverter used when attempting to extract a Device Authorization Request from HttpServletRequest to an instance of OAuth2DeviceAuthorizationRequestAuthenticationToken used for authenticating the request.\n\tvoid setAuthenticationDetailsSource(org.springframework.security.authentication.AuthenticationDetailsSource<jakarta.servlet.http.HttpServletRequest,?> authenticationDetailsSource); // Sets the AuthenticationDetailsSource used for building an authentication details instance from HttpServletRequest.\n\tvoid setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler authenticationFailureHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tvoid setAuthenticationSuccessHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler authenticationSuccessHandler); // Sets the AuthenticationSuccessHandler used for handling an OAuth2DeviceAuthorizationRequestAuthenticationToken and returning the Device Authorization Response.\n\tvoid setVerificationUri(String verificationUri); // Sets the end-user verification URI on the authorization server.\n}"}
{"index": 8854, "repo": "hbase-server-3.0.0-alpha-4", "des": "Coprocessors implement this interface to observe and mediate bulk load operations.", "code": "Interface BulkLoadObserver {\n\tdefault void preCleanupBulkLoad(ObserverContext<RegionCoprocessorEnvironment> ctx); // Called as part of SecureBulkLoadEndpoint.cleanupBulkLoad() RPC call.\n\tdefault void prePrepareBulkLoad(ObserverContext<RegionCoprocessorEnvironment> ctx); // Called as part of SecureBulkLoadEndpoint.prepareBulkLoad() RPC call.\n}"}
{"index": 17527, "repo": "pulsar-broker-3.0.0", "des": "A representation of a message in a topic in its raw form (i.e.", "code": "public interface RawMessage extends AutoCloseable {\n\tvoid close();\n\tio.netty.buffer.ByteBuf getHeadersAndPayload(); // Get a ByteBuf which contains the headers and payload of the message.\n\torg.apache.pulsar.client.api.MessageId getMessageId(); // Get the message ID of this message.\n\torg.apache.pulsar.common.api.proto.MessageIdData getMessageIdData(); // Get the protobuf representation of the message ID of this message.\n\tio.netty.buffer.ByteBuf serialize(); // Serialize a raw message to a ByteBuf.\n}"}
{"index": 13127, "repo": "maven-settings-builder-4.0.0-alpha-7", "des": "The different severity levels for a problem, in decreasing order.", "code": "public static enum SettingsProblem.Severity extends Enum<SettingsProblem.Severity> {\n\tstatic SettingsProblem.Severity valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SettingsProblem.Severity[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17107, "repo": "spring-integration-core-6.1.2", "des": "Exposes channel mapping operations when the router is proxied.", "code": "public interface MappingMessageRouterManagement {\n\tMap<String,String> getChannelMappings();\n\tCollection<String> getDynamicChannelNames(); // Provide a collection of channel names to which we have routed messages where the channel was not explicitly mapped.\n\tvoid removeChannelMapping(String key); // Remove a channel mapping for the given key if present.\n\tvoid replaceChannelMappings(Properties channelMappings); // Provide mappings from channel keys to channel names.\n\tvoid setChannelMapping(String key, String channelName); // Add a channel mapping from the provided key to channel name.\n\tvoid setChannelMappings(Map<String,String> channelMappings); // Provide mappings from channel keys to channel names.\n}"}
{"index": 8424, "repo": "hadoop-aws-3.3.6", "des": "Simple No-op audit manager for use before a real audit chain is set up, and for testing.", "code": "Class NoopAuditManagerS3A {\n\tvoid activate(AuditSpanS3A span); // Span was activated.\n\tboolean checkAccess(org.apache.hadoop.fs.Path path, S3AFileStatus status, org.apache.hadoop.fs.permission.FsAction mode); // Forward to the auditor.\n\tstatic AuditSpanS3A createNewSpan(String name, String path1, String path2); // A static source of no-op spans, using the same span ID source as managed spans.\n\tList<com.amazonaws.handlers.RequestHandler2> createRequestHandlers(); // Create the request handler(s) for this audit service.\n\tAuditSpanS3A createSpan(String operation, String path1, String path2);\n\tcom.amazonaws.services.s3.transfer.internal.TransferStateChangeListener createStateChangeListener(); // Return a transfer state change callback which fixes the active span context to be that in which the state change listener was created.\n\tvoid deactivate(AuditSpanS3A span); // Span was deactivated.\n\tAuditSpanS3A getActiveAuditSpan();\n\tOperationAuditor getAuditor(); // Get the auditor; valid once initialized.\n\tString getOperationName(); // Get the name of the operation.\n\tString getSpanId(); // Return a span ID which must be unique for all spans within everywhere.\n\tprotected void serviceInit(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 11695, "repo": "spring-cloud-commons-3.1.7", "des": "Represents read operations commonly available to discovery services such as Netflix Eureka or consul.io.", "code": "public interface ReactiveDiscoveryClient extends org.springframework.core.Ordered {\n\tString description(); // A human-readable description of the implementation, used in HealthIndicator.\n\treactor.core.publisher.Flux<ServiceInstance> getInstances(String serviceId); // Gets all ServiceInstances associated with a particular serviceId.\n\tdefault int getOrder(); // Default implementation for getting order of discovery clients.\n\treactor.core.publisher.Flux<String> getServices();\n\tdefault void probe(); // Deprecated. in favour of reactiveProbe().\n\tdefault reactor.core.publisher.Mono<Void> reactiveProbe(); // Can be used to verify the client is still valid and able to make calls.\n}"}
{"index": 10350, "repo": "spring-core-6.0.11", "des": "Adapter for a Reactive Streams Publisher to and from an async/reactive type such as CompletableFuture, RxJava Observable, and others.", "code": "public class ReactiveAdapter extends Object {\n\tObject fromPublisher(Publisher<?> publisher); // Adapt from the given Reactive Streams Publisher.\n\tReactiveTypeDescriptor getDescriptor(); // Return the descriptor of the reactive type for the adapter.\n\tClass<?> getReactiveType(); // Shortcut for getDescriptor().getReactiveType().\n\tboolean isMultiValue(); // Shortcut for getDescriptor().isMultiValue().\n\tboolean isNoValue(); // Shortcut for getDescriptor().isNoValue().\n\tboolean supportsEmpty(); // Shortcut for getDescriptor().supportsEmpty().\n\t<T> Publisher<T> toPublisher(Object source); // Adapt the given instance to a Reactive Streams Publisher.\n}"}
{"index": 18587, "repo": "hibernate-core-5.6.15.Final", "des": "Represents the value currently bound to a particular (bindable) parameter.", "code": "Interface ParameterBind<T> {\n\tTemporalType getSpecifiedTemporalType(); // The temporal type that will be used to \"interpret\" Date-like values (if applicable).\n\tT getValue(); // Access the bound value\n}"}
{"index": 18087, "repo": "spring-ws-core-4.0.5", "des": "Represents an abstraction for SOAP messages, providing access to a SOAP Envelope.", "code": "public interface SoapMessage extends MimeMessage, FaultAwareWebServiceMessage {\n\tDocument getDocument(); // Returns this message as a Document.\n\tSoapEnvelope getEnvelope(); // Returns the SoapEnvelope associated with this SoapMessage.\n\tString getSoapAction(); // Get the SOAP Action for this message, or null if not present.\n\tSoapBody getSoapBody(); // Returns the SoapBody associated with this SoapMessage.\n\tSoapHeader getSoapHeader(); // Returns the SoapHeader associated with this SoapMessage.\n\tSoapVersion getVersion(); // Returns the SOAP version of this message.\n\tvoid setDocument(Document document); // Sets the contents of the message to the given Document.\n\tvoid setSoapAction(String soapAction); // Sets the SOAP Action for this message.\n}"}
{"index": 8637, "repo": "avro-1.11.2", "des": "Parser is the class that maintains the stack for parsing.", "code": "Class Parser {\n\tSymbol advance(Symbol input); // Recursively replaces the symbol at the top of the stack with its production, until the top is a terminal.\n\tint depth(); // Returns the depth of the stack.\n\tSymbol popSymbol(); // Pops and returns the top symbol from the stack.\n\tvoid processImplicitActions(); // Performs any implicit actions at the top the stack, expanding any production (other than the root) that may be encountered.\n\tvoid processTrailingImplicitActions(); // Performs any \"trailing\" implicit actions at the top the stack.\n\tvoid pushProduction(Symbol sym); // Pushes the production for the given symbol sym.\n\tvoid pushSymbol(Symbol sym); // Pushes sym on to the stack.\n\tvoid reset();\n\tSymbol topSymbol(); // Returns the top symbol from the stack.\n}"}
{"index": 16594, "repo": "spring-beans-6.0.11", "des": "Holder for a key-value style attribute that is part of a bean definition.", "code": "public class BeanMetadataAttribute extends Object implements BeanMetadataElement {\n\tboolean equals(Object other);\n\tString getName(); // Return the name of the attribute.\n\tObject getSource(); // Return the configuration source Object for this metadata element (may be null).\n\tObject getValue(); // Return the value of the attribute.\n\tvoid setSource(Object source); // Set the configuration source Object for this metadata element.\n}"}
{"index": 973, "repo": "ignite-core-2.15.0", "des": "IPC server endpoint that is capable for client connections accepting.", "code": "Interface IpcServerEndpoint {\n\tIpcEndpoint accept(); // Accepts client IPC connection.\n\tvoid close(); // Closes server IPC.\n\t@Nullable String getHost(); // Gets host endpoint is bound to.\n\tint getPort(); // Gets port endpoint is bound to.\n\tboolean isManagement(); // Indicates if this endpoint is a management endpoint.\n\tvoid start(); // Starts configured endpoint implementation.\n}"}
{"index": 1211, "repo": "ignite-core-2.15.0", "des": "Statistics for some object (index or table) in database.", "code": "Class StatisticsObjectData {\n\tMap<String,StatisticsColumnData> data();\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tStatisticsKeyMessage key();\n\tvoid onAckReceived(); // Method called when ack message received.\n\tint partId();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tlong rowsCnt();\n\tStatisticsType type();\n\tlong updCnt();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 16578, "repo": "spring-beans-6.0.11", "des": "Convenient base class for bean configurers that can perform Dependency Injection on objects (however they may be created).", "code": "public class BeanConfigurerSupport extends Object implements BeanFactoryAware, InitializingBean, DisposableBean {\n\tvoid afterPropertiesSet(); // Check that a BeanFactory has been set.\n\tvoid configureBean(Object beanInstance); // Configure the bean instance.\n\tprotected BeanWiringInfoResolver createDefaultBeanWiringInfoResolver(); // Create the default BeanWiringInfoResolver to be used if none was specified explicitly.\n\tvoid destroy(); // Release references to the BeanFactory and BeanWiringInfoResolver when the container is destroyed.\n\tvoid setBeanFactory(BeanFactory beanFactory); // Set the BeanFactory in which this aspect must configure beans.\n\tvoid setBeanWiringInfoResolver(BeanWiringInfoResolver beanWiringInfoResolver); // Set the BeanWiringInfoResolver to use.\n}"}
{"index": 15493, "repo": "spring-batch-core-5.0.2", "des": "FaultTolerant implementation of the ChunkProvider interface, that allows for skipping or retry of items that cause exceptions during reading or processing.", "code": "public class FaultTolerantChunkProvider<I> extends SimpleChunkProvider<I> {\n\tvoid postProcess(StepContribution contribution, Chunk<I> chunk);\n\tprotected I read(StepContribution contribution, Chunk<I> chunk); // Delegates to SimpleChunkProvider.doRead().\n\tvoid setMaxSkipsOnRead(int maxSkipsOnRead);\n\tvoid setRollbackClassifier(org.springframework.classify.Classifier<Throwable,Boolean> rollbackClassifier); // Classifier to determine whether exceptions have been marked as no-rollback (as opposed to skippable).\n\tvoid setSkipPolicy(SkipPolicy skipPolicy); // The policy that determines whether exceptions can be skipped on read.\n}"}
{"index": 13754, "repo": "spring-webmvc-6.0.11", "des": "Bean used to pass name-value pair parameters from a ParamTag to a ParamAware tag.", "code": "public class Param extends Object {\n\tString getName(); // Return the raw parameter name.\n\tString getValue(); // Return the raw parameter value.\n\tvoid setName(String name); // Set the raw name of the parameter.\n\tvoid setValue(String value); // Set the raw value of the parameter.\n}"}
{"index": 7794, "repo": "cassandra-all-4.1.2", "des": "Validates and fixes type issues in the serialization-header of sstables.", "code": "Class SSTableHeaderFix {\n\tstatic SSTableHeaderFix.Builder builder();\n\tvoid execute();\n\tstatic void fixNonFrozenUDTIfUpgradeFrom30();\n\tboolean hasChanges(); // Whether execute() found mismatches.\n\tboolean hasError(); // Whether execute() encountered an error.\n}"}
{"index": 5352, "repo": "druid-processing-26.0.0", "des": "Base TopNColumnAggregatesProcessor for BaseNullableColumnValueSelector.", "code": "Class NullableNumericTopNColumnAggregatesProcessor<Selector extends BaseNullableColumnValueSelector> {\n\tvoid closeAggregators(); // Closes all on heap Aggregator associated with the aggregates processor\n\tint getCardinality(Selector selector); // Get value cardinality of underlying ColumnValueSelector\n\tAggregator[][] getRowSelector(TopNQuery query, TopNParams params, StorageAdapter storageAdapter); // Used by HeapBasedTopNAlgorithm.\n\tlong scanAndAggregate(TopNQuery query, Selector selector, Cursor cursor, Aggregator[][] rowSelector); // Used by HeapBasedTopNAlgorithm.\n\tvoid updateResults(TopNResultBuilder resultBuilder); // Used by HeapBasedTopNAlgorithm.\n}"}
{"index": 10217, "repo": "spring-core-6.0.11", "des": "A ConcurrentHashMap that uses soft or weak references for both keys and values.", "code": "public class ConcurrentReferenceHashMap<K,V> extends AbstractMap<K,V> implements ConcurrentMap<K,V> {\n\tprotected static int calculateShift(int minimumValue, int maximumValue); // Calculate a shift value that can be used to create a power-of-two value between the specified maximum and minimum values.\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tprotected ConcurrentReferenceHashMap<K,V>.ReferenceManager createReferenceManager(); // Factory method that returns the ConcurrentReferenceHashMap<K,V>.ReferenceManager.\n\tSet<Map.Entry<K,V>> entrySet();\n\tV get(Object key);\n\tprotected int getHash(Object o); // Get the hash for a given object, apply an additional hash function to reduce collisions.\n\tprotected final float getLoadFactor();\n\tV getOrDefault(Object key, V defaultValue);\n\tprotected final ConcurrentReferenceHashMap.Reference<K,V> getReference(Object key, ConcurrentReferenceHashMap.Restructure restructure); // Return a ConcurrentReferenceHashMap.Reference to the ConcurrentReferenceHashMap.Entry for the specified key, or null if not found.\n\tprotected final ConcurrentReferenceHashMap<K,V>.Segment getSegment(int index);\n\tprotected final int getSegmentsSize();\n\tboolean isEmpty();\n\tvoid purgeUnreferencedEntries(); // Remove any entries that have been garbage collected and are no longer referenced.\n\tV put(K key, V value);\n\tV putIfAbsent(K key, V value);\n\tV remove(Object key);\n\tboolean remove(Object key, Object value);\n\tV replace(K key, V value);\n\tboolean replace(K key, V oldValue, V newValue);\n\tint size();\n}"}
{"index": 3000, "repo": "tink-1.10.0", "des": "Key manager that produces new instances of HpkeEncrypt primitive.", "code": "Class HpkePublicKeyManager {\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tHpkePublicKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tvoid validateKey(HpkePublicKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 8407, "repo": "hadoop-aws-3.3.6", "des": "Encryption options in a form which can serialized or marshalled as a hadoop Writeable.", "code": "Class EncryptionSecrets {\n\tboolean equals(Object o);\n\tString getEncryptionAlgorithm();\n\tString getEncryptionKey();\n\tS3AEncryptionMethods getEncryptionMethod(); // Get the encryption method.\n\tboolean hasEncryptionAlgorithm(); // Does this instance have encryption options? That is: is the algorithm non-null.\n\tboolean hasEncryptionKey(); // Does this instance have an encryption key?\n\tvoid readFields(DataInput in); // Read in from the writable stream.\n\tvoid write(DataOutput out); // Write out the encryption secrets.\n}"}
{"index": 10067, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Factory bean building ResourceLocalizers objects.", "code": "Class LocalResourcesFactoryBean {\n\tvoid afterPropertiesSet();\n\tResourceLocalizer getObject();\n\tClass<ResourceLocalizer> getObjectType();\n\tboolean isSingleton();\n\tvoid setConfiguration(Configuration configuration); // Sets Yarn configuration for this factory.\n\tvoid setCopyEntries(Collection<LocalResourcesFactoryBean.CopyEntry> copyEntries); // Sets copy entries reference for this factory.\n\tvoid setHdfsEntries(Collection<LocalResourcesFactoryBean.TransferEntry> hdfsEntries); // Sets hdfs entries reference for this factory.\n\tvoid setHdfsEntries(String id, Collection<LocalResourcesFactoryBean.TransferEntry> hdfsEntries); // Sets hdfs entries reference for this factory.\n\tvoid setRawCopyEntries(Collection<LocalResourcesFactoryBean.RawCopyEntry> rawEntries);\n\tvoid setStagingDirectory(Path stagingDirectory); // Sets the staging directory.\n\tvoid setStagingDirectory(String stagingDirectory); // Sets the staging directory.\n\tvoid setType(LocalResourceType defaultType); // Sets default LocalResourceType for entry.\n\tvoid setVisibility(LocalResourceVisibility defaultVisibility); // Sets default LocalResourceVisibility for entry.\n}"}
{"index": 6595, "repo": "exoplayer-core-2.9.6", "des": "Audio processor that outputs its input unmodified and also outputs its input to a given sink.", "code": "Class TeeAudioProcessor {\n\tboolean configure(int sampleRateHz, int channelCount, int encoding); // Configures the processor to process input audio with the specified format and returns whether to AudioProcessor.flush() it.\n\tvoid flush(); // Clears any state in preparation for receiving a new stream of input buffers.\n\tjava.nio.ByteBuffer getOutput(); // Returns a buffer containing processed output data between its position and limit.\n\tint getOutputChannelCount(); // Returns the number of audio channels in the data output by the processor.\n\tint getOutputEncoding(); // Returns the audio encoding used in the data output by the processor.\n\tint getOutputSampleRateHz(); // Returns the sample rate of audio output by the processor, in hertz.\n\tboolean isActive(); // Returns whether the processor is configured and will process input buffers.\n\tboolean isEnded(); // Returns whether this processor will return no more output from AudioProcessor.getOutput() until it has been AudioProcessor.flush()ed and more input has been queued.\n\tvoid queueEndOfStream(); // Queues an end of stream signal.\n\tvoid queueInput(java.nio.ByteBuffer buffer); // Queues audio data between the position and limit of the input buffer for processing.\n\tvoid reset(); // Resets the processor to its unconfigured state.\n}"}
{"index": 16174, "repo": "spring-data-cassandra-4.1.2", "des": "Base value object class to specify user type fields.", "code": "public class FieldSpecification extends Object {\n\tstatic FieldSpecification of(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type); // Create a new FieldSpecification given name and DataType.\n\tstatic FieldSpecification of(String name, com.datastax.oss.driver.api.core.type.DataType type); // Create a new FieldSpecification for the given name and DataType\n\tString toCql();\n\tStringBuilder toCql(StringBuilder cql);\n}"}
{"index": 13359, "repo": "shiro-core-2.0.0-alpha-2", "des": "A TextConfigurationRealm that defers all logic to the parent class, but just enables Properties based configuration in addition to the parent class's String configuration.", "code": "public class PropertiesRealm extends TextConfigurationRealm implements org.apache.shiro.lang.util.Destroyable, Runnable {\n\tprotected void afterRoleCacheSet();\n\tvoid destroy(); // Destroy reload scheduler if one exists.\n\tprotected String getName(String key, String prefix);\n\tprotected String getRolename(String key);\n\tprotected String getUsername(String key);\n\tprotected boolean isRolename(String key);\n\tprotected boolean isUsername(String key);\n\tvoid onInit(); // Will call 'processDefinitions' on startup.\n\tvoid run();\n\tvoid setReloadIntervalSeconds(int reloadIntervalSeconds); // Sets the interval in seconds at which the property file will be checked for changes and reloaded.\n\tvoid setResourcePath(String resourcePath); // Sets the path of the properties file to load user, role, and permission information from.\n\tvoid setUseXmlFormat(boolean useXmlFormat); // Determines whether or not the properties XML format should be used.\n\tprotected void startReloadThread();\n}"}
{"index": 2199, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ScalarArithmeticColumn.", "code": "Class LongScalarMultiplyDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 10785, "repo": "spring-boot-actuator-3.1.1", "des": "A ReactiveHealthContributor that is composed of other ReactiveHealthContributor instances.", "code": "public interface CompositeReactiveHealthContributor extends ReactiveHealthContributor, NamedContributors<ReactiveHealthContributor> {\n\tstatic CompositeReactiveHealthContributor fromMap(Map<String,? extends ReactiveHealthContributor> map); // Factory method that will create a CompositeReactiveHealthContributor from the specified map.\n\tstatic <V> CompositeReactiveHealthContributor fromMap(Map<String,V> map, Function<V,? extends ReactiveHealthContributor> valueAdapter); // Factory method that will create a CompositeReactiveHealthContributor from the specified map.\n}"}
{"index": 914, "repo": "ignite-core-2.15.0", "des": "This interface provides a rich API for working with distributed queues based on In-Memory Data Grid.", "code": "Interface IgniteQueue<T> {\n\tboolean add(T item);\n\tboolean addAll(Collection<? extends T> items);\n\t<R> R affinityCall(IgniteCallable<R> job); // Executes given job on collocated queue on the node where the queue is located (a.k.a. affinity co-location).\n\tvoid affinityRun(IgniteRunnable job); // Executes given job on collocated queue on the node where the queue is located (a.k.a. affinity co-location).\n\tboolean bounded(); // Returns true if this queue is bounded.\n\tint capacity(); // Gets maximum number of elements of the queue.\n\tvoid clear();\n\tvoid clear(int batchSize); // Removes all of the elements from this queue.\n\tvoid close(); // Removes this queue.\n\tboolean collocated(); // Returns true if this queue can be kept on the one node only.\n\tboolean contains(Object item);\n\tboolean containsAll(Collection<?> items);\n\tboolean isEmpty();\n\tIterator<T> iterator();\n\tString name(); // Gets queue name.\n\tboolean offer(T item);\n\tboolean offer(T item, long timeout, TimeUnit unit);\n\tT peek();\n\tT poll();\n\tT poll(long timeout, TimeUnit unit);\n\tvoid put(T item);\n\tboolean remove(Object item);\n\tboolean removeAll(Collection<?> items);\n\tboolean removed(); // Gets status of queue.\n\tboolean retainAll(Collection<?> items);\n\tint size();\n\tT take();\n\tObject[] toArray();\n\t<T> T[] toArray(T[] a);\n\t<V1> IgniteQueue<V1> withKeepBinary(); // Returns queue that will operate with binary objects.\n}"}
{"index": 2701, "repo": "mahout-core-14.1", "des": "Abstract class encapsulating different algorithms that perform the Vector operations aggregate().", "code": "Class VectorBinaryAggregate {\n\tabstract double aggregate(Vector x, Vector y, DoubleDoubleFunction fa, DoubleDoubleFunction fc); // Main method that applies fc to x and y component-wise aggregating the results with fa.\n\tstatic double aggregateBest(Vector x, Vector y, DoubleDoubleFunction fa, DoubleDoubleFunction fc); // This is the method that should be used when aggregating.\n\tabstract double estimateCost(Vector x, Vector y, DoubleDoubleFunction fa, DoubleDoubleFunction fc); // Estimates the cost of using this algorithm to compute the aggregation.\n\tstatic VectorBinaryAggregate getBestOperation(Vector x, Vector y, DoubleDoubleFunction fa, DoubleDoubleFunction fc); // The best operation is the least expensive valid one.\n\tabstract boolean isValid(Vector x, Vector y, DoubleDoubleFunction fa, DoubleDoubleFunction fc); // Returns true iff we can use this algorithm to apply fc to x and y component-wise and aggregate the result using fa.\n}"}
{"index": 966, "repo": "ignite-core-2.15.0", "des": "The simple map for primitive types base on Robin-hood hashing with backward shift.", "code": "Class IntHashMap<V> {\n\tvoid clear(); // Removes all of the mappings from this map.\n\tboolean containsKey(int key); // Returns true if the map contains the key, otherwise false.\n\tboolean containsValue(V val); // Returns true if the map contains one or more values, otherwise false.\n\tprotected int distance(int curIdx, int key); // Returns size of shift from ideal position computing via index(key).\n\t<E extends Throwable>void forEach(IntMap.EntryConsumer<V,E> act); // This method work under a read lock, be careful with long operations inside.\n\tV get(int key); // Returns value associated with the key. if the map doesn't contain the key, returns null.\n\tprotected int index(int key); // Position in entites array.\n\tboolean isEmpty(); // Returns true if this map contains no key-value mappings.\n\tint[] keys(); // Returns array of keys.\n\tV put(int key, V val); // Save the pair into the map.\n\tV putIfAbsent(int key, V val); // Does put into the map if a pair isn't present, otherwise returns stored value.\n\tV remove(int key);\n\tint size(); // Returns count of elements.\n\tCollection<V> values(); // Returns a collection of values.\n}"}
{"index": 9771, "repo": "commons-math3-3.6.1", "des": "A collection of static methods that operate on or return polynomials.", "code": "Class PolynomialsUtils {\n\tstatic PolynomialFunction createChebyshevPolynomial(int degree); // Create a Chebyshev polynomial of the first kind.\n\tstatic PolynomialFunction createHermitePolynomial(int degree); // Create a Hermite polynomial.\n\tstatic PolynomialFunction createJacobiPolynomial(int degree, int v, int w); // Create a Jacobi polynomial.\n\tstatic PolynomialFunction createLaguerrePolynomial(int degree); // Create a Laguerre polynomial.\n\tstatic PolynomialFunction createLegendrePolynomial(int degree); // Create a Legendre polynomial.\n\tstatic double[] shift(double[] coefficients, double shift); // Compute the coefficients of the polynomial \\(P_s(x)\\) whose values at point x will be the same as the those from the original polynomial \\(P(x)\\) when computed at x + shift.\n}"}
{"index": 10186, "repo": "spring-core-6.0.11", "des": "Type filter that is aware of traversing over hierarchy.", "code": "public abstract class AbstractTypeHierarchyTraversingFilter extends Object implements TypeFilter {\n\tboolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory); // Determine whether this filter matches for the class described by the given metadata.\n\tprotected boolean matchClassName(String className); // Override this to match on type name.\n\tprotected Boolean matchInterface(String interfaceName); // Override this to match on interface type name.\n\tprotected boolean matchSelf(MetadataReader metadataReader); // Override this to match self characteristics alone.\n\tprotected Boolean matchSuperClass(String superClassName); // Override this to match on supertype name.\n}"}
{"index": 4843, "repo": "hadoop-common-3.3.4", "des": "A mean statistic represented as the sum and the sample count; the mean is calculated on demand.", "code": "Class MeanStatistic {\n\tMeanStatistic add(MeanStatistic other); // Add another MeanStatistic.\n\tvoid addSample(long value); // Add a sample.\n\tvoid clear(); // Set the values to 0.\n\tMeanStatistic clone();\n\tMeanStatistic copy(); // Create a copy of this instance.\n\tboolean equals(Object o);\n\tlong getSamples(); // Get the sample count.\n\tlong getSum(); // Get the sum of samples.\n\tboolean isEmpty(); // Is a statistic empty?\n\tdouble mean(); // Get the arithmetic mean value.\n\tvoid set(MeanStatistic other); // Set the statistic to the values of another.\n\tvoid setSamples(long samples); // Set the sample count.\n\tvoid setSamplesAndSum(long sampleCount, long newSum); // Set the sum and samples.\n\tvoid setSum(long sum); // Set the sum.\n}"}
{"index": 1766, "repo": "kafka-clients-3.5.0", "des": "An implementation of ConfigProvider based on a directory of files.", "code": "Class DirectoryConfigProvider {\n\tvoid close();\n\tvoid configure(Map<String,?> configs); // Configure this class with the given key-value pairs\n\tConfigData get(String path); // Retrieves the data contained in regular files in the directory given by path.\n\tConfigData get(String path, Set<String> keys); // Retrieves the data contained in the regular files named by keys in the directory given by path.\n}"}
{"index": 10799, "repo": "spring-boot-actuator-3.1.1", "des": "An InfoContributor that exposes GitProperties.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.info.GitInfoContributor.GitInfoContributorRuntimeHints.class) public class GitInfoContributor extends InfoPropertiesInfoContributor<org.springframework.boot.info.GitProperties> {\n\tvoid contribute(Info.Builder builder); // Contributes additional details using the specified Builder.\n\tprotected void postProcessContent(Map<String,Object> content); // Post-process the content to expose.\n\tprotected org.springframework.core.env.PropertySource<?> toSimplePropertySource(); // Return a PropertySource for the SIMPLE mode.\n}"}
{"index": 5832, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Base abstract class for FederationAMRMProxyPolicy implementations, that provides common validation for reinitialization.", "code": "Class AbstractAMRMProxyPolicy {\n\tvoid notifyOfResponse(SubClusterId subClusterId, org.apache.hadoop.yarn.api.protocolrecords.AllocateResponse response); // This method should be invoked to notify the policy about responses being received.\n\tvoid validate(WeightedPolicyInfo newPolicyInfo); // Overridable validation step for the policy configuration.\n}"}
{"index": 9499, "repo": "commons-math3-3.6.1", "des": "This abstract class provides boilerplate parameters list.", "code": "Class AbstractParameterizable {\n\tvoid complainIfNotSupported(String name); // Check if a parameter is supported and throw an IllegalArgumentException if not.\n\tCollection<String> getParametersNames(); // Get the names of the supported parameters.\n\tboolean isSupported(String name); // Check if a parameter is supported.\n}"}
{"index": 8156, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for ClientInterceptor implementations that validate part of the message using a schema.", "code": "Class AbstractValidatingInterceptor {\n\tvoid afterCompletion(MessageContext messageContext, Exception ex); // Does nothing by default.\n\tvoid afterPropertiesSet();\n\tString getSchemaLanguage();\n\torg.springframework.core.io.Resource[] getSchemas(); // Returns the schema resources to use for validation.\n\tprotected abstract Source getValidationRequestSource(WebServiceMessage request); // Abstract template method that returns the part of the request message that is to be validated.\n\tprotected abstract Source getValidationResponseSource(WebServiceMessage response); // Abstract template method that returns the part of the response message that is to be validated.\n\tboolean handleFault(MessageContext messageContext); // Does nothing by default.\n\tboolean handleRequest(MessageContext messageContext); // Validates the request message in the given message context.\n\tprotected boolean handleRequestValidationErrors(MessageContext messageContext, SAXParseException[] errors); // Template method that is called when the request message contains validation errors.\n\tboolean handleResponse(MessageContext messageContext); // Validates the response message in the given message context.\n\tprotected boolean handleResponseValidationErrors(MessageContext messageContext, SAXParseException[] errors); // Template method that is called when the response message contains validation errors.\n\tvoid setSchema(org.springframework.core.io.Resource schema); // Sets the schema resource to use for validation.\n\tvoid setSchemaLanguage(String schemaLanguage); // Sets the schema language.\n\tvoid setSchemas(org.springframework.core.io.Resource... schemas); // Sets the schema resources to use for validation.\n\tvoid setValidateRequest(boolean validateRequest); // Indicates whether the request should be validated against the schema.\n\tvoid setValidateResponse(boolean validateResponse); // Indicates whether the response should be validated against the schema.\n\tvoid setXsdSchema(XsdSchema schema); // Sets the XsdSchema to use for validation.\n\tvoid setXsdSchemaCollection(XsdSchemaCollection schemaCollection); // Sets the XsdSchemaCollection to use for validation.\n}"}
{"index": 11684, "repo": "spring-cloud-commons-3.1.7", "des": "A DiscoveryClient that is composed of other discovery clients and delegates calls to each of them in order.", "code": "public class CompositeDiscoveryClient extends Object implements DiscoveryClient {\n\tString description(); // A human-readable description of the implementation, used in HealthIndicator.\n\tList<DiscoveryClient> getDiscoveryClients();\n\tList<ServiceInstance> getInstances(String serviceId); // Gets all ServiceInstances associated with a particular serviceId.\n\tList<String> getServices();\n\tvoid probe(); // Can be used to verify the client is valid and able to make calls.\n}"}
{"index": 18344, "repo": "opencms-core-15.0", "des": "Contains lock information for a container page element.", "code": "Class CmsElementLockInfo {\n\tCmsUUID getLockOwner(); // Gets the lock owner id.\n\tboolean isLocked(); // Returns true if the resource is locked.\n\tboolean isPublishLock(); // Returns true if the resource is a publish lock.\n}"}
{"index": 14619, "repo": "spring-security-web-6.1.2", "des": "Stores the SecurityContext in the WebSession.", "code": "public class WebSessionServerSecurityContextRepository extends Object implements ServerSecurityContextRepository {\n\treactor.core.publisher.Mono<org.springframework.security.core.context.SecurityContext> load(org.springframework.web.server.ServerWebExchange exchange); // Loads the SecurityContext associated with the ServerWebExchange\n\treactor.core.publisher.Mono<Void> save(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.context.SecurityContext context); // Saves the SecurityContext\n\tvoid setCacheSecurityContext(boolean cacheSecurityContext); // If set to true the result of load(ServerWebExchange) will use Mono.cache() to prevent multiple lookups.\n\tvoid setSpringSecurityContextAttrName(String springSecurityContextAttrName); // Sets the session attribute name used to save and load the SecurityContext\n}"}
{"index": 18041, "repo": "spring-ws-core-4.0.5", "des": "Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.", "code": "public class MarshallingPayloadMethodProcessor extends AbstractPayloadMethodProcessor {\n\torg.springframework.oxm.Marshaller getMarshaller(); // Returns the marshaller used for transforming objects into XML.\n\torg.springframework.oxm.Unmarshaller getUnmarshaller(); // Returns the unmarshaller used for transforming XML into objects.\n\tvoid handleReturnValue(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue); // Handles the given return value.\n\tObject resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tvoid setMarshaller(org.springframework.oxm.Marshaller marshaller); // Sets the marshaller used for transforming objects into XML.\n\tvoid setUnmarshaller(org.springframework.oxm.Unmarshaller unmarshaller); // Sets the unmarshaller used for transforming XML into objects.\n\tprotected boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n}"}
{"index": 1739, "repo": "kafka-clients-3.5.0", "des": "Runtime broker configuration metadata provided to authorizers during start up.", "code": "Interface AuthorizerServerInfo {\n\tint brokerId(); // Returns broker id.\n\tClusterResource clusterResource(); // Returns cluster metadata for the broker running this authorizer including cluster id.\n\tCollection<String> earlyStartListeners(); // Returns the configured early start listeners.\n\tCollection<Endpoint> endpoints(); // Returns endpoints for all listeners including the advertised host and port to which the listener is bound.\n\tEndpoint interBrokerEndpoint(); // Returns the inter-broker endpoint.\n}"}
{"index": 1589, "repo": "pdfbox-3.0.0-beta1", "des": "The direction of motion for the specified transition effect.", "code": "Enum PDTransitionMotion {\n\tstatic PDTransitionMotion valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PDTransitionMotion[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 71, "repo": "commons-collections4-4.4", "des": "Abstract BidiMap implemented using two maps.", "code": "Class AbstractDualBidiMap<K,V> {\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tprotected abstract BidiMap<V,K> createBidiMap(Map<V,K> normalMap, Map<K,V> reverseMap, BidiMap<K,V> inverseMap); // Creates a new instance of the subclass.\n\tprotected Iterator<Map.Entry<K,V>> createEntrySetIterator(Iterator<Map.Entry<K,V>> iterator); // Creates an entry set iterator.\n\tprotected Iterator<K> createKeySetIterator(Iterator<K> iterator); // Creates a key set iterator.\n\tprotected Iterator<V> createValuesIterator(Iterator<V> iterator); // Creates a values iterator.\n\tSet<Map.Entry<K,V>> entrySet(); // Gets an entrySet view of the map.\n\tboolean equals(Object obj);\n\tV get(Object key);\n\tK getKey(Object value); // Gets the key that is currently mapped to the specified value.\n\tBidiMap<V,K> inverseBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tboolean isEmpty();\n\tSet<K> keySet(); // Gets a keySet view of the map.\n\tMapIterator<K,V> mapIterator(); // Obtains a MapIterator over the map.\n\tV put(K key, V value); // Puts the key-value pair into the map, replacing any previous pair.\n\tvoid putAll(Map<? extends K,? extends V> map);\n\tV remove(Object key);\n\tK removeValue(Object value); // Removes the key-value pair that is currently mapped to the specified value (optional operation).\n\tint size();\n\tSet<V> values(); // Gets a values view of the map.\n}"}
{"index": 14413, "repo": "wicket-core-10.0.0-M1", "des": "Allows to register and lookup ResourceReferences per Application.", "code": "public class ResourceReferenceRegistry extends Object {\n\tfinal void clearAutoAddedEntries(); // Unregisters all auto-added Resource References\n\tprotected ResourceReference createDefaultResourceReference(ResourceReference.Key key); // Creates a default resource reference in case no registry entry and it was requested to create one.\n\tfinal int getAutoAddedCacheSize();\n\tfinal int getAutoAddedCapacity(); // Gets cache size in number of entries\n\tfinal ResourceReference getResourceReference(Class<?> scope, String name, Locale locale, String style, String variation, boolean strict, boolean createIfNotFound); // Get a resource reference matching the parameters from the registry or if not found and requested, create an default resource reference and add it to the registry.\n\tfinal ResourceReference getResourceReference(ResourceReference.Key key, boolean strict, boolean createIfNotFound); // Get a resource reference matching the parameters from the registry or if not found and requested, create an default resource reference and add it to the registry.\n\tIResourceReferenceFactory getResourceReferenceFactory();\n\tfinal int getSize();\n\tfinal boolean registerResourceReference(ResourceReference reference); // Registers the given ResourceReference.\n\tfinal void setAutoAddedCapacity(int autoAddedCapacity); // Set the cache size in number of entries\n\tvoid setResourceReferenceFactory(IResourceReferenceFactory resourceReferenceFactory); // Sets the factory to use when a ResourceReference is not previously registered and a new instance should be created\n\tfinal ResourceReference unregisterResourceReference(ResourceReference.Key key); // Unregisters a ResourceReference by its identifier.\n}"}
{"index": 8827, "repo": "hbase-server-3.0.0-alpha-4", "des": "A class to ease dealing with tables that have and do not have violation policies being enforced.", "code": "Class ActivePolicyEnforcement {\n\tMap<TableName,SpaceViolationPolicyEnforcement> getPolicies(); // Returns an unmodifiable version of the active SpaceViolationPolicyEnforcements.\n\tSpaceViolationPolicyEnforcement getPolicyEnforcement(Region r); // Returns the proper SpaceViolationPolicyEnforcement implementation for the given table.\n\tSpaceViolationPolicyEnforcement getPolicyEnforcement(TableName tableName); // Returns the proper SpaceViolationPolicyEnforcement implementation for the given table.\n}"}
{"index": 113, "repo": "commons-collections4-4.4", "des": "A ComparatorChain is a Comparator that wraps one or more Comparators in sequence.", "code": "Class ComparatorChain<E> {\n\tvoid addComparator(Comparator<E> comparator); // Add a Comparator to the end of the chain using the forward sort order\n\tvoid addComparator(Comparator<E> comparator, boolean reverse); // Add a Comparator to the end of the chain using the given sort order\n\tint compare(E o1, E o2); // Perform comparisons on the Objects as per Comparator.compare(o1,o2).\n\tboolean equals(Object object); // Returns true iff that Object is is a Comparator whose ordering is known to be equivalent to mine.\n\tboolean isLocked(); // Determine if modifications can still be made to the ComparatorChain.\n\tvoid setComparator(int index, Comparator<E> comparator); // Replace the Comparator at the given index, maintaining the existing sort order.\n\tvoid setComparator(int index, Comparator<E> comparator, boolean reverse); // Replace the Comparator at the given index in the ComparatorChain, using the given sort order\n\tvoid setForwardSort(int index); // Change the sort order at the given index in the ComparatorChain to a forward sort.\n\tvoid setReverseSort(int index); // Change the sort order at the given index in the ComparatorChain to a reverse sort.\n\tint size(); // Number of Comparators in the current ComparatorChain.\n}"}
{"index": 16685, "repo": "spring-beans-6.0.11", "des": "Property resource configurer that overrides bean property values in an application context definition.", "code": "public class PropertyOverrideConfigurer extends PropertyResourceConfigurer {\n\tprotected void applyPropertyValue(ConfigurableListableBeanFactory factory, String beanName, String property, String value); // Apply the given property value to the corresponding bean.\n\tboolean hasPropertyOverridesFor(String beanName); // Were there overrides for this bean? Only valid after processing has occurred at least once.\n\tprotected void processKey(ConfigurableListableBeanFactory factory, String key, String value); // Process the given key as 'beanName.property' entry.\n\tprotected void processProperties(ConfigurableListableBeanFactory beanFactory, Properties props); // Apply the given Properties to the given BeanFactory.\n\tvoid setBeanNameSeparator(String beanNameSeparator); // Set the separator to expect between bean name and property path.\n\tvoid setIgnoreInvalidKeys(boolean ignoreInvalidKeys); // Set whether to ignore invalid keys.\n}"}
{"index": 8543, "repo": "commons-io-2.13.0", "des": "A functional, light weight InputStream that emulates a stream of a specified size.", "code": "Class NullInputStream {\n\tint available(); // Return the number of bytes that can be read.\n\tvoid close(); // Close this input stream - resets the internal state to the initial values.\n\tlong getPosition(); // Return the current position.\n\tlong getSize(); // Return the size this InputStream emulates.\n\tvoid mark(int readlimit); // Mark the current position.\n\tboolean markSupported(); // Indicates whether mark is supported.\n\tprotected int processByte(); // Return a byte value for the read() method.\n\tprotected void processBytes(byte[] bytes, int offset, int length); // Process the bytes for the read(byte[], offset, length) method.\n\tint read(); // Read a byte.\n\tint read(byte[] bytes); // Read some bytes into the specified array.\n\tint read(byte[] bytes, int offset, int length); // Read the specified number bytes into an array.\n\tvoid reset(); // Reset the stream to the point when mark was last called.\n\tlong skip(long numberOfBytes); // Skip a specified number of bytes.\n}"}
{"index": 10698, "repo": "spring-tx-6.0.11", "des": "Implementation of PersistenceExceptionTranslator that supports chaining, allowing the addition of PersistenceExceptionTranslator instances in order.", "code": "public class ChainedPersistenceExceptionTranslator extends Object implements PersistenceExceptionTranslator {\n\tfinal void addDelegate(PersistenceExceptionTranslator pet); // Add a PersistenceExceptionTranslator to the chained delegate list.\n\tfinal PersistenceExceptionTranslator[] getDelegates(); // Return all registered PersistenceExceptionTranslator delegates (as array).\n\tDataAccessException translateExceptionIfPossible(RuntimeException ex); // Translate the given runtime exception thrown by a persistence framework to a corresponding exception from Spring's generic DataAccessException hierarchy, if possible.\n}"}
{"index": 2854, "repo": "amqp-client-5.18.0", "des": "Provides equivalent security to PLAIN but demos use of Connection.", "code": "Class CRDemoMechanism {\n\tString getName(); // The name of this mechanism (e.g.\n\tLongString handleChallenge(LongString challenge, String username, String password); // Handle one round of challenge-response\n}"}
{"index": 5138, "repo": "druid-processing-26.0.0", "des": "Serializer that produces BlockLayoutColumnarLongsSupplier.", "code": "Class BlockLayoutColumnarLongsSerializer {\n\tvoid add(long value);\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid open();\n\tint size();\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 7, "repo": "spring-cloud-aws-jdbc-2.2.6.RELEASE", "des": "Support interface used by the DataSourceFactory implementation to retrieve the necessary configuration data for every database platform.", "code": "Interface DatabasePlatformSupport {\n\tString getDatabaseUrlForDatabase(DatabaseType databaseType, String hostname, int port, String databaseName); // Constructs the database URL for the database instance.\n\tString getDriverClassNameForDatabase(DatabaseType databaseType); // Returns the fully qualified driver class name for the database platform.\n}"}
{"index": 15705, "repo": "camel-api-4.0.0-RC1", "des": "Information about the thread and exchange that are inflight.", "code": "public static interface AsyncProcessorAwaitManager.AwaitThread {\n\tThread getBlockedThread(); // The thread which is blocked waiting for other threads to signal the callback.\n\tExchange getExchange(); // The exchange being processed by the other thread.\n\tString getNodeId(); // The id of the node from the route where the exchange was processed when the thread was set to block.\n\tString getRouteId(); // The id of the route where the exchange was processed when the thread was set to block.\n\tlong getWaitDuration(); // Time in millis the thread has been blocked waiting for the signal.\n}"}
{"index": 17238, "repo": "spring-xml-4.0.5", "des": "Defines the contract for a precompiled XPath expression.", "code": "public interface XPathExpression {\n\t<T> List<T> evaluate(Node node, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping each result Node objects to a Java object via a NodeMapper.\n\tboolean evaluateAsBoolean(Node node); // Evaluates the given expression as a boolean.\n\tNode evaluateAsNode(Node node); // Evaluates the given expression as a Node.\n\tList<Node> evaluateAsNodeList(Node node); // Evaluates the given expression, and returns all Node objects that conform to it.\n\tdouble evaluateAsNumber(Node node); // Evaluates the given expression as a number (double).\n\t<T> T evaluateAsObject(Node node, NodeMapper<T> nodeMapper); // Evaluates the given expression, mapping a single Node result to a Java object via a NodeMapper.\n\tString evaluateAsString(Node node); // Evaluates the given expression as a String.\n}"}
{"index": 15754, "repo": "camel-api-4.0.0-RC1", "des": "Allows Message to store a DataType which represents the data type of the Message.", "code": "public interface DataTypeAware {\n\tDataType getDataType(); // Get the data type of the message.\n\tboolean hasDataType(); // Whether any data type has been configured\n\tvoid setBody(Object body, DataType type); // Set the message body with data type.\n\tvoid setDataType(DataType type); // Set the data type of the message.\n}"}
{"index": 15791, "repo": "camel-api-4.0.0-RC1", "des": "A representation of configuration options for creating and loading KeyManager instance(s).", "code": "public class KeyManagersParameters extends JsseParameters {\n\tKeyManager[] createKeyManagers(); // Creates KeyManagers based on this instance's configuration and the KeyStore produced by the configuration returned from getKeyStore().\n\tString getAlgorithm();\n\tString getKeyPassword();\n\tKeyStoreParameters getKeyStore();\n\tString getProvider();\n\tvoid setAlgorithm(String value); // Sets optional algorithm name for the KeyManagerFactory used to create the KeyManagers represented by this object's configuration.\n\tvoid setKeyPassword(String value); // Sets the optional password for recovering keys in the key store.\n\tvoid setKeyStore(KeyStoreParameters value); // Sets the key store configuration used to create the KeyStore that the KeyManagers produced by this object's configuration expose.\n\tvoid setProvider(String value); // Sets the optional provider identifier for the KeyManagerFactory used to create the KeyManagers represented by this object's configuration.\n}"}
{"index": 1822, "repo": "kafka-clients-3.5.0", "des": "A detailed description of a single topic in the cluster.", "code": "Class TopicDescription {\n\tSet<AclOperation> authorizedOperations(); // authorized operations for this topic, or null if this is not known.\n\tboolean equals(Object o);\n\tboolean isInternal(); // Whether the topic is internal to Kafka.\n\tString name(); // The name of the topic.\n\tList<TopicPartitionInfo> partitions(); // A list of partitions where the index represents the partition id and the element contains leadership and replica information for that partition.\n\tUuid topicId();\n}"}
{"index": 2836, "repo": "tika-parsers-1.28.5", "des": "This is an experimental, alternative extractor for docx files.", "code": "Class SXWPFWordExtractorDecorator {\n\tprotected void buildXHTML(org.apache.tika.sax.XHTMLContentHandler xhtml); // Populates the XHTMLContentHandler object received as parameter.\n\tprotected List<org.apache.poi.openxml4j.opc.PackagePart> getMainDocumentParts(); // This returns all items that might contain embedded objects: main document, headers, footers, comments, etc.\n}"}
{"index": 4484, "repo": "beam-sdks-java-core-2.49.0", "des": "Helper class for building Read transforms.", "code": "Class Read.Builder {\n\t<T> Read.Bounded<T> from(BoundedSource<T> source); // Returns a new Read.Bounded PTransform reading from the given BoundedSource.\n\t<T> Read.Unbounded<T> from(UnboundedSource<T,?> source); // Returns a new Read.Unbounded PTransform reading from the given UnboundedSource.\n}"}
{"index": 9213, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "FPGA plugin interface for vendor to implement.", "code": "Interface AbstractFpgaVendorPlugin {\n\tboolean configureIP(String ipPath, FpgaDevice device); // The vendor plugin configure an IP file to a device\n\tboolean diagnose(int timeout); // Diagnose the devices using vendor toolchain but no need to parse device information\n\tList<FpgaDevice> discover(int timeout); // Discover the vendor's FPGA devices with execution time constraint\n\tString getFpgaType(); // Since all vendor plugins share a FpgaResourceAllocator which distinguish FPGA devices by type.\n\tboolean initPlugin(org.apache.hadoop.conf.Configuration conf); // Check vendor's toolchain and required environment\n\tString retrieveIPfilePath(String id, String dstDir, Map<org.apache.hadoop.fs.Path,List<String>> localizedResources); // The vendor plugin download required IP files to a required directory.\n}"}
{"index": 182, "repo": "commons-collections4-4.4", "des": "Defines a collection that counts the number of times an object appears in the collection.", "code": "Interface MultiSet<E> {\n\tboolean add(E object); // Adds one copy of the specified object to the MultiSet.\n\tint add(E object, int occurrences); // Adds a number of occurrences of the specified object to the MultiSet.\n\tboolean containsAll(Collection<?> coll); // Returns true if the MultiSet contains at least one occurrence for each element contained in the given collection.\n\tSet<MultiSet.Entry<E>> entrySet(); // Returns a Set of all entries contained in the MultiSet.\n\tboolean equals(Object obj); // Compares this MultiSet to another object.\n\tint getCount(Object object); // Returns the number of occurrences of the given object currently in the MultiSet.\n\tIterator<E> iterator(); // Returns an Iterator over the entire set of members, including copies due to cardinality.\n\tboolean remove(Object object); // Removes one occurrence of the given object from the MultiSet.\n\tint remove(Object object, int occurrences); // Removes a number of occurrences of the specified object from the MultiSet.\n\tboolean removeAll(Collection<?> coll); // Remove all occurrences of all elements from this MultiSet represented in the given collection.\n\tboolean retainAll(Collection<?> coll); // Remove any elements of this MultiSet that are not contained in the given collection.\n\tint setCount(E object, int count); // Sets the number of occurrences of the specified object in the MultiSet to the given count.\n\tint size(); // Returns the total number of items in the MultiSet.\n\tSet<E> uniqueSet(); // Returns a Set of unique elements in the MultiSet.\n}"}
{"index": 5573, "repo": "org.apache.karaf.main-2.4.4", "des": "The interface implemented by a Condition.", "code": "Interface Condition {\n\tboolean isMutable(); // Returns whether the Condition is mutable.\n\tboolean isPostponed(); // Returns whether the evaluation must be postponed until the end of the permission check.\n\tboolean isSatisfied(); // Returns whether the Condition is satisfied.\n\tboolean isSatisfied(Condition[] conditions, Dictionary<Object,Object> context); // Returns whether the specified set of Condition objects are satisfied.\n}"}
{"index": 596, "repo": "ignite-core-2.15.0", "des": "Client connection multiplexer: manages multiple connections with a shared resource pool (worker threads, etc).", "code": "Interface ClientConnectionMultiplexer {\n\tClientConnection open(InetSocketAddress addr, ClientMessageHandler msgHnd, ClientConnectionStateHandler stateHnd); // Opens a new connection.\n\tvoid start(); // Initializes this instance.\n\tvoid stop(); // Stops this instance.\n}"}
{"index": 1798, "repo": "kafka-clients-3.5.0", "des": "Interface for reconfigurable classes that support dynamic configuration.", "code": "Interface Reconfigurable {\n\tSet<String> reconfigurableConfigs(); // Returns the names of configs that may be reconfigured.\n\tvoid reconfigure(Map<String,?> configs); // Reconfigures this instance with the given key-value pairs.\n\tvoid validateReconfiguration(Map<String,?> configs); // Validates the provided configuration.\n}"}
{"index": 14812, "repo": "spring-data-commons-3.1.2", "des": "Provides a way to access a centrally defined potentially shared EvaluationContext.", "code": "public interface QueryMethodEvaluationContextProvider {\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues); // Returns an EvaluationContext built using the given Parameters and parameter values.\n\t<T extends Parameters<?, ?>>EvaluationContext getEvaluationContext(T parameters, Object[] parameterValues, ExpressionDependencies dependencies); // Returns an EvaluationContext built using the given Parameters and parameter values.\n}"}
{"index": 12850, "repo": "spring-data-mongodb-4.1.2", "des": "A reactive RepositoryQuery to use a plain JSON String to create an aggregation pipeline to actually execute.", "code": "public class ReactiveStringBasedAggregation extends AbstractReactiveMongoQuery {\n\tprotected reactor.core.publisher.Mono<Query> createQuery(ConvertingParameterAccessor accessor); // Creates a Query instance using the given ParameterAccessor\n\tprotected org.reactivestreams.Publisher<Object> doExecute(ReactiveMongoQueryMethod method, ResultProcessor processor, ConvertingParameterAccessor accessor, Class<?> typeToRead); // Execute the RepositoryQuery of the given method with the parameters provided by the accessor\n\tprotected boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected boolean isDeleteQuery(); // Return weather the query should delete matching documents.\n\tprotected boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected boolean isLimiting(); // Return whether the query has an explicit limit set.\n}"}
{"index": 9493, "repo": "commons-math3-3.6.1", "des": "Common part shared by both FractionFormat and BigFractionFormat.", "code": "Class AbstractFormat {\n\tStringBuffer format(double value, StringBuffer buffer, FieldPosition position); // Formats a double value as a fraction and appends the result to a StringBuffer.\n\tStringBuffer format(long value, StringBuffer buffer, FieldPosition position); // Formats a long value as a fraction and appends the result to a StringBuffer.\n\tprotected static NumberFormat getDefaultNumberFormat(); // Create a default number format.\n\tprotected static NumberFormat getDefaultNumberFormat(Locale locale); // Create a default number format.\n\tNumberFormat getDenominatorFormat(); // Access the denominator format.\n\tNumberFormat getNumeratorFormat(); // Access the numerator format.\n\tprotected static void parseAndIgnoreWhitespace(String source, ParsePosition pos); // Parses source until a non-whitespace character is found.\n\tprotected static char parseNextCharacter(String source, ParsePosition pos); // Parses source until a non-whitespace character is found.\n\tvoid setDenominatorFormat(NumberFormat format); // Modify the denominator format.\n\tvoid setNumeratorFormat(NumberFormat format); // Modify the numerator format.\n}"}
{"index": 9595, "repo": "commons-math3-3.6.1", "des": "Implementation of an integer-valued EnumeratedDistribution.", "code": "Class EnumeratedIntegerDistribution {\n\tdouble cumulativeProbability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tint getSupportLowerBound(); // Access the lower bound of the support.\n\tint getSupportUpperBound(); // Access the upper bound of the support.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tdouble probability(int x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X = x).\n\tint sample(); // Generate a random value sampled from this distribution.\n}"}
{"index": 6866, "repo": "calcite-core-1.34.0", "des": "A SqlDialect implementation for the Exasol database.", "code": "Class ExasolSqlDialect {\n\t@Nullable SqlNode getCastSpec(RelDataType type); // Returns SqlNode for type in \"cast(column as type)\", which might be different between databases by type name, precision etc.\n\tprotected boolean identifierNeedsQuote(String val); // Returns whether to quote an identifier.\n\tboolean supportsAggregateFunction(SqlKind kind);\n\tboolean supportsAggregateFunctionFilter(); // Returns whether this dialect supports the use of FILTER clauses for aggregate functions.\n\tboolean supportsCharSet(); // Returns whether the dialect supports character set names as part of a data type, for instance VARCHAR(30) CHARACTER SET `ISO-8859-1`.\n\tboolean supportsNestedAggregations(); // Returns whether the dialect supports nested aggregations, for instance SELECT SUM(SUM(1)) .\n\tvoid unparseCall(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec);\n\tvoid unparseOffsetFetch(SqlWriter writer, @Nullable SqlNode offset, @Nullable SqlNode fetch); // Converts an offset and fetch into SQL.\n}"}
{"index": 12665, "repo": "spring-data-mongodb-4.1.2", "des": "Provider interface to obtain CodecRegistry from the underlying MongoDB Java driver.", "code": "@FunctionalInterface public interface CodecRegistryProvider {\n\tdefault <T> Optional<org.bson.codecs.Codec<T>> getCodecFor(Class<T> type); // Get the Codec registered for the given type or an empty Optional instead.\n\torg.bson.codecs.configuration.CodecRegistry getCodecRegistry(); // Get the underlying CodecRegistry used by the MongoDB Java driver.\n\tdefault boolean hasCodecFor(Class<?> type); // Checks if a Codec is registered for a given type.\n}"}
{"index": 17684, "repo": "spring-web-6.0.11", "des": "Exposes the values of properties configured through CodecConfigurer.defaultCodecs() that are applied to default codecs.", "code": "public static interface CodecConfigurer.DefaultCodecConfig {\n\tBoolean isEnableLoggingRequestDetails(); // Whether to log form data at DEBUG level, and headers at TRACE level.\n\tInteger maxInMemorySize(); // Get the configured limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated.\n}"}
{"index": 10570, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @MapConstructor annotation.", "code": "public class MapConstructorASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\tString getAnnotationName(); // If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tvoid setCompilationUnit(CompilationUnit unit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 8791, "repo": "graal-sdk-1.0.0-rc7", "des": "A handle for a Graal language installed in an engine.", "code": "Class Language {\n\tString getDefaultMimeType(); // Returns the default MIME type that is in use by a language.\n\tString getId(); // Gets the primary identification string of this language.\n\tString getImplementationName(); // Gets a human-readable name of the language implementation (for example, \"Graal.JS\").\n\tSet<String> getMimeTypes(); // Returns the MIME types supported by this language.\n\tString getName(); // Gets a human-readable name for the language (for example, \"JavaScript\").\n\tOptionDescriptors getOptions(); // Returns the set of options provided by this language.\n\tString getVersion(); // Gets the version information of the language in an arbitrary language-specific format.\n\tboolean isInteractive(); // Returns true if a the language is suitable for interactive evaluation of sources.\n}"}
{"index": 545, "repo": "ignite-core-2.15.0", "des": "Cache store session listener based on JDBC connection.", "code": "Class CacheJdbcStoreSessionListener {\n\tDataSource getDataSource(); // Gets data source.\n\tvoid onSessionEnd(CacheStoreSession ses, boolean commit); // On session end callback.\n\tvoid onSessionStart(CacheStoreSession ses); // On session start callback.\n\tvoid setDataSource(DataSource dataSrc); // Sets data source.\n\tvoid start(); // Starts grid component, called on grid start.\n\tvoid stop(); // Stops grid component, called on grid shutdown.\n}"}
{"index": 1427, "repo": "pdfbox-3.0.0-beta1", "des": "A resource cached based on SoftReference, retains resources until memory pressure causes them to be garbage collected.", "code": "Class DefaultResourceCache {\n\tPDColorSpace getColorSpace(COSObject indirect); // Returns the color space resource for the given indirect object, if it is in the cache.\n\tPDExtendedGraphicsState getExtGState(COSObject indirect); // Returns the extended graphics state resource for the given indirect object, if it is in the cache.\n\tPDFont getFont(COSObject indirect); // Returns the font resource for the given indirect object, if it is in the cache.\n\tPDAbstractPattern getPattern(COSObject indirect); // Returns the pattern resource for the given indirect object, if it is in the cache.\n\tPDPropertyList getProperties(COSObject indirect); // Returns the property list resource for the given indirect object, if it is in the cache.\n\tPDShading getShading(COSObject indirect); // Returns the shading resource for the given indirect object, if it is in the cache.\n\tPDXObject getXObject(COSObject indirect); // Returns the XObject resource for the given indirect object, if it is in the cache.\n\tvoid put(COSObject indirect, PDAbstractPattern pattern); // Puts the given indirect pattern resource in the cache.\n\tvoid put(COSObject indirect, PDColorSpace colorSpace); // Puts the given indirect color space resource in the cache.\n\tvoid put(COSObject indirect, PDExtendedGraphicsState extGState); // Puts the given indirect extended graphics state resource in the cache.\n\tvoid put(COSObject indirect, PDFont font); // Puts the given indirect font resource in the cache.\n\tvoid put(COSObject indirect, PDPropertyList propertyList); // Puts the given indirect property list resource in the cache.\n\tvoid put(COSObject indirect, PDShading shading); // Puts the given indirect shading resource in the cache.\n\tvoid put(COSObject indirect, PDXObject xobject); // Puts the given indirect XObject resource in the cache.\n}"}
{"index": 10891, "repo": "spring-data-redis-3.1.2", "des": "IndexedData represents a secondary index for a property path in a given keyspace.", "code": "public interface IndexedData {\n\tString getIndexName(); // Get the String representation of the index name.\n\tString getKeyspace(); // Get the associated keyspace the index resides in.\n}"}
{"index": 14178, "repo": "wicket-core-10.0.0-M1", "des": "Implementation of IConverterLocator interface, which locates converters for a given type.", "code": "public class ConverterLocator extends Object implements IConverterLocator {\n\tfinal <C> org.apache.wicket.util.convert.IConverter<C> get(Class<C> c); // Gets the type converter that is registered for class c.\n\tfinal <C> org.apache.wicket.util.convert.IConverter<C> getConverter(Class<C> type); // Converts the given value to class c.\n\tfinal org.apache.wicket.util.convert.IConverter<?> remove(Class<?> c); // Removes the type converter currently registered for class c.\n\tfinal org.apache.wicket.util.convert.IConverter<?> set(Class<?> c, org.apache.wicket.util.convert.IConverter<?> converter); // Registers a converter for use with class c.\n}"}
{"index": 2225, "repo": "hive-exec-4.0.0-alpha-2", "des": "Default processor which just merges its children.", "code": "Class OpProcFactory.DefaultPPD {\n\tprotected void logExpr(Node nd, ExprWalkerInfo ewi);\n\tprotected ExprWalkerInfo mergeChildrenPred(Node nd, OpWalkerInfo owi, Set<String> excludedAliases, boolean ignoreAliases);\n\tprotected boolean mergeWithChildrenPred(Node nd, OpWalkerInfo owi, ExprWalkerInfo ewi, Set<String> aliases); // Take current operators pushdown predicates and merges them with children's pushdown predicates.\n\tObject process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx, Object... nodeOutputs); // Generic process for all ops that don't have specific implementations.\n}"}
{"index": 15295, "repo": "spring-boot-3.1.1", "des": "Exception thrown if an invalid property is found when processing config data.", "code": "public class InvalidConfigDataPropertyException extends ConfigDataException {\n\tConfigDataResource getLocation(); // Return the ConfigDataResource of the invalid property or null if the source was not loaded from ConfigData.\n\tConfigurationProperty getProperty(); // Return source property that caused the exception.\n\tConfigurationPropertyName getReplacement(); // Return the replacement property that should be used instead or null if not replacement is available.\n}"}
{"index": 5424, "repo": "druid-processing-26.0.0", "des": "This filter is to select the rows where the dimension has the value.", "code": "Class SelectorFilter {\n\tboolean canVectorizeMatcher(ColumnInspector inspector); // Returns true if this filter can produce a vectorized matcher from its \"makeVectorMatcher\" method.\n\tboolean equals(Object o);\n\tBitmapColumnIndex getBitmapColumnIndex(ColumnIndexSelector selector); // Returns a BitmapColumnIndex if this filter supports using a bitmap index for filtering for the given input ColumnIndexSelector.\n\tString getDimension();\n\tSet<String> getRequiredColumns(); // Set of columns used by a filter.\n\tString getValue();\n\tValueMatcher makeMatcher(ColumnSelectorFactory factory); // Get a ValueMatcher that applies this filter to row values.\n\tVectorValueMatcher makeVectorMatcher(VectorColumnSelectorFactory factory); // Get a VectorValueMatcher that applies this filter to row vectors.\n\tFilter rewriteRequiredColumns(Map<String,String> columnRewrites); // Return a copy of this filter that is identical to the this filter except that it operates on different columns, based on a renaming map where the key is the column to be renamed in the filter, and the value is the new column name.\n\tboolean supportsRequiredColumnRewrite(); // Returns true is this filter is able to return a copy of this filter that is identical to this filter except that it operates on different columns, based on a renaming map.\n\tboolean supportsSelectivityEstimation(ColumnSelector columnSelector, ColumnIndexSelector indexSelector); // Indicates whether this filter supports selectivity estimation.\n}"}
{"index": 3673, "repo": "hive-serde-4.0.0-alpha-2", "des": "UnionObjectInspector works on union data that is stored as UnionObject.", "code": "Interface UnionObjectInspector {\n\tObject getField(Object o); // Return the field based on the tag associated with the Object.\n\tList<ObjectInspector> getObjectInspectors(); // Returns the array of ObjectInspectors that are for each of the tags.\n\tbyte getTag(Object o); // Return the tag of the object.\n}"}
{"index": 2589, "repo": "exoplayer-r2.3.1", "des": "A template from which URLs can be built.", "code": "Class UrlTemplate {\n\tjava.lang.String buildUri(java.lang.String representationId, int segmentNumber, int bandwidth, long time); // Constructs a Uri from the template, substituting in the provided arguments.\n\tstatic UrlTemplate compile(java.lang.String template); // Compile an instance from the provided template string.\n}"}
{"index": 108, "repo": "commons-collections4-4.4", "des": "Provides an ordered iteration over the elements contained in a collection of ordered Iterators.", "code": "Class CollatingIterator<E> {\n\tvoid addIterator(Iterator<? extends E> iterator); // Adds the given Iterator to the iterators being collated.\n\tComparator<? super E> getComparator(); // Gets the Comparator by which collatation occurs.\n\tint getIteratorIndex(); // Returns the index of the iterator that returned the last element.\n\tList<Iterator<? extends E>> getIterators(); // Gets the list of Iterators (unmodifiable).\n\tboolean hasNext(); // Returns true if any child iterator has remaining elements.\n\tE next(); // Returns the next ordered element from a child iterator.\n\tvoid remove(); // Removes the last returned element from the child iterator that produced it.\n\tvoid setComparator(Comparator<? super E> comp); // Sets the Comparator by which collation occurs.\n\tvoid setIterator(int index, Iterator<? extends E> iterator); // Sets the iterator at the given index.\n}"}
{"index": 9483, "repo": "curator-recipes-5.5.0", "des": "Manages a PersistentNode that uses CreateMode.", "code": "Class PersistentTtlNode {\n\tvoid close(); // Call when you are done with the PersistentTtlNode.\n\tbyte[] getData(); // Return the current value of our data\n\tvoid setData(byte[] data); // Set data that node should set in ZK also writes the data to the node.\n\tvoid start(); // You must call start() to initiate the persistent ttl node\n\tboolean waitForInitialCreate(long timeout, TimeUnit unit); // Block until the either initial node creation initiated by start() succeeds or the timeout elapses.\n}"}
{"index": 1416, "repo": "pdfbox-3.0.0-beta1", "des": "simple output stream with some minor features for generating \"pretty\" PDF files.", "code": "Class COSStandardOutputStream {\n\tlong getPos(); // This will get the current position in the stream.\n\tboolean isOnNewLine(); // This will tell if we are on a newline.\n\tvoid setOnNewLine(boolean newOnNewLine); // This will set a flag telling if we are on a newline.\n\tvoid write(byte[] b, int off, int len); // This will write some byte to the stream.\n\tvoid write(int b); // This will write a single byte to the stream.\n\tvoid writeCRLF(); // This will write a CRLF to the stream.\n\tvoid writeEOL(); // This will write an EOL to the stream.\n\tvoid writeLF(); // This will write a Linefeed to the stream.\n}"}
{"index": 18736, "repo": "guava-32.1.1-jre", "des": "This class provides a skeletal implementation of the Iterator interface, to make this interface easier to implement for certain types of data sources.", "code": "Class AbstractIterator<T extends @Nullable java.lang.Object> {\n\tprotected abstract T computeNext(); // Returns the next element.\n\tprotected T endOfData(); // Implementations of computeNext() must invoke this method when there are no elements left in the iteration.\n\tboolean hasNext();\n\tT next();\n\tT peek(); // Returns the next element in the iteration without advancing the iteration, according to the contract of PeekingIterator.peek().\n}"}
{"index": 17516, "repo": "pulsar-broker-3.0.0", "des": "The implement of the pending ack store by manageLedger.", "code": "public class MLPendingAckStore extends Object implements PendingAckStore {\n\tCompletableFuture<Void> appendAbortMark(org.apache.pulsar.client.api.transaction.TxnID txnID, org.apache.pulsar.common.api.proto.CommandAck.AckType ackType); // Append the pending ack abort mark to the ack persistent store.\n\tCompletableFuture<Void> appendCommitMark(org.apache.pulsar.client.api.transaction.TxnID txnID, org.apache.pulsar.common.api.proto.CommandAck.AckType ackType); // Append the pending ack commit mark to the ack persistent store.\n\tCompletableFuture<Void> appendCumulativeAck(org.apache.pulsar.client.api.transaction.TxnID txnID, PositionImpl position); // Append the cumulative pending ack operation to the ack persistent store.\n\tCompletableFuture<Void> appendIndividualAck(org.apache.pulsar.client.api.transaction.TxnID txnID, List<org.apache.commons.lang3.tuple.MutablePair<PositionImpl,Integer>> positions); // Append the individual pending ack operation to the ack persistent store.\n\tCompletableFuture<Void> closeAsync(); // Close the transaction pending ack store.\n\tCompletableFuture<ManagedLedger> getManagedLedger();\n\tstatic String getTransactionPendingAckStoreCursorName();\n\tstatic String getTransactionPendingAckStoreSuffix(String originTopicName, String subName);\n\tvoid replayAsync(PendingAckHandleImpl pendingAckHandle, ExecutorService transactionReplayExecutor); // Replay pending ack to recover the pending ack subscription pending ack state.\n}"}
{"index": 11722, "repo": "spring-data-neo4j-7.1.2", "des": "A wrapper indicating a negated value (will be used as n.property != $parameter (in case of string properties all operators and not only the equality operator are supported, such as not (n.property contains 'x').", "code": "public static record Neo4jPropertyValueTransformers.NegatedValue(Object value) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tObject value(); // Returns the value of the value record component.\n}"}
{"index": 18705, "repo": "poi-5.2.3", "des": "This handles reading and writing a stream within a POIFSFileSystem.", "code": "Class POIFSStream {\n\tvoid free(); // Frees all blocks in the stream\n\tOutputStream getOutputStream();\n\tint getStartBlock(); // What block does this stream start at? Will be POIFSConstants.END_OF_CHAIN for a new stream that hasn't been written to yet.\n\tIterator<ByteBuffer> iterator(); // Returns an iterator that'll supply one ByteBuffer per block in the stream.\n}"}
{"index": 13973, "repo": "spring-webflux-6.0.11", "des": "A WebSocket RequestUpgradeStrategy for the Jakarta WebSocket API 2.1+.", "code": "public class StandardWebSocketUpgradeStrategy extends Object implements RequestUpgradeStrategy {\n\tLong getAsyncSendTimeout();\n\tprotected ServerContainer getContainer(HttpServletRequest request);\n\tInteger getMaxBinaryMessageBufferSize();\n\tLong getMaxSessionIdleTimeout();\n\tInteger getMaxTextMessageBufferSize();\n\tvoid setAsyncSendTimeout(Long timeoutInMillis); // Exposes the underlying config option on WebSocketContainer.setAsyncSendTimeout(long).\n\tvoid setMaxBinaryMessageBufferSize(Integer bufferSize); // Exposes the underlying config option on WebSocketContainer.setDefaultMaxBinaryMessageBufferSize(int).\n\tvoid setMaxSessionIdleTimeout(Long timeoutInMillis); // Exposes the underlying config option on WebSocketContainer.setDefaultMaxSessionIdleTimeout(long).\n\tvoid setMaxTextMessageBufferSize(Integer bufferSize); // Exposes the underlying config option on WebSocketContainer.setDefaultMaxTextMessageBufferSize(int).\n\treactor.core.publisher.Mono<Void> upgrade(org.springframework.web.server.ServerWebExchange exchange, WebSocketHandler handler, String subProtocol, Supplier<HandshakeInfo> handshakeInfoFactory); // Upgrade to a WebSocket session and handle it with the given handler.\n\tprotected void upgradeHttpToWebSocket(HttpServletRequest request, HttpServletResponse response, ServerEndpointConfig endpointConfig, Map<String,String> pathParams);\n}"}
{"index": 6358, "repo": "spring-data-solr-4.3.15", "des": "Spring Data for Apache Solr base configuration using JavaConfig.", "code": "Class AbstractSolrConfiguration {\n\tprotected CustomConversions customConversions(); // CustomConversions to be applied by mapping.\n\tprotected RequestMethod defaultRequestMethod(); // Default RequestMethod to be used when sending requests via SolrClient.\n\tprotected Collection<SolrPersistentEntitySchemaCreator.Feature> schemaSupport(); // Define schema setup SolrPersistentEntitySchemaCreator.Features.\n\tabstract SolrClientFactory solrClientFactory(); // Define the SolrClientFactory to be used.\n\tSolrConverter solrConverter();\n\tprotected MappingContext solrMappingContext();\n\tSolrTemplate solrTemplate(); // SolrTemplate setup to provide SolrOperations implementation picking up solrClientFactory(), solrConverter() and defaultRequestMethod().\n}"}
{"index": 7784, "repo": "cassandra-all-4.1.2", "des": "This class returns the nodes responsible for a given key but does not respect rack awareness.", "code": "Class SimpleStrategy {\n\tEndpointsForRange calculateNaturalReplicas(Token token, TokenMetadata metadata); // Calculate the natural endpoints for the given token.\n\tReplicationFactor getReplicationFactor(); // calculate the RF based on strategy_options.\n\tvoid maybeWarnOnOptions(ClientState state);\n\tprotected static void prepareOptions(java.util.Map<java.lang.String,java.lang.String> options, java.util.Map<java.lang.String,java.lang.String> previousOptions);\n\tjava.util.Collection<java.lang.String> recognizedOptions();\n\tvoid validateOptions();\n}"}
{"index": 1588, "repo": "pdfbox-3.0.0-beta1", "des": "The direction in which the specified transition effect shall moves, expressed in degrees counterclockwise starting from a left-to-right direction.", "code": "Enum PDTransitionDirection {\n\tCOSBase getCOSBase();\n\tstatic PDTransitionDirection valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PDTransitionDirection[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13497, "repo": "spring-messaging-6.0.11", "des": "Support for CompletableFuture (and as of 4.3.7 also CompletionStage) as a return value type.", "code": "public class CompletableFutureReturnValueHandler extends AbstractAsyncReturnValueHandler {\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType); // Whether the given method return type is supported by this handler.\n\tCompletableFuture<?> toCompletableFuture(Object returnValue, org.springframework.core.MethodParameter returnType); // Adapt the asynchronous return value to a CompletableFuture.\n}"}
{"index": 17839, "repo": "spring-web-6.0.11", "des": "Filter base class that aims to guarantee a single execution per request dispatch, on any servlet container.", "code": "public abstract class OncePerRequestFilter extends GenericFilterBean {\n\tfinal void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain); // This doFilter implementation stores a request attribute for \"already filtered\", proceeding without filtering again if the attribute is already there.\n\tprotected abstract void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain); // Same contract as for doFilter, but guaranteed to be just invoked once per request within a single request thread.\n\tprotected void doFilterNestedErrorDispatch(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain); // Typically an ERROR dispatch happens after the REQUEST dispatch completes, and the filter chain starts anew.\n\tprotected String getAlreadyFilteredAttributeName(); // Return the name of the request attribute that identifies that a request is already filtered.\n\tprotected boolean isAsyncDispatch(HttpServletRequest request); // The dispatcher type jakarta.servlet.DispatcherType.ASYNC means a filter can be invoked in more than one thread over the course of a single request.\n\tprotected boolean isAsyncStarted(HttpServletRequest request); // Whether request processing is in asynchronous mode meaning that the response will not be committed after the current thread is exited.\n\tprotected boolean shouldNotFilter(HttpServletRequest request); // Can be overridden in subclasses for custom filtering control, returning true to avoid filtering of the given request.\n\tprotected boolean shouldNotFilterAsyncDispatch(); // The dispatcher type jakarta.servlet.DispatcherType.ASYNC means a filter can be invoked in more than one thread over the course of a single request.\n\tprotected boolean shouldNotFilterErrorDispatch(); // Whether to filter error dispatches such as when the servlet container processes and error mapped in web.xml.\n}"}
{"index": 4602, "repo": "commons-vfs2-2.9.0", "des": "Factory to create an instance of a Cryptor.", "code": "Class CryptorFactory {\n\tstatic Cryptor getCryptor(); // Return the Cryptor.\n\tstatic void setCryptor(Cryptor cryptor); // Allows the Cryptor class to be set programmatically.\n}"}
{"index": 14375, "repo": "wicket-core-10.0.0-M1", "des": "A Wicket panel component to draw and maintain a complete page navigator, meant to be easily added to any PageableListView.", "code": "public class PagingNavigator extends Panel {\n\tfinal IPageable getPageable(); // IPageable this navigator is linked with\n\tfinal PagingNavigation getPagingNavigation(); // Gets the pageable navigation component for configuration purposes.\n\tprotected PagingNavigation newNavigation(String id, IPageable pageable, IPagingLabelProvider labelProvider); // Create a new PagingNavigation.\n\tprotected AbstractLink newPagingNavigationIncrementLink(String id, IPageable pageable, int increment); // Create a new increment link.\n\tprotected AbstractLink newPagingNavigationLink(String id, IPageable pageable, int pageNumber); // Create a new pagenumber link.\n\tprotected void onInitialize(); // This method is meant to be used as an alternative to initialize components.\n}"}
{"index": 974, "repo": "ignite-core-2.15.0", "des": "Special discovery SPI implementation to start a single-node cluster in \"isolated\" mode.", "code": "Class IsolatedDiscoverySpi {\n\tboolean allNodesSupport(IgniteFeatures feature);\n\tvoid clientReconnect();\n\tboolean clientReconnectSupported();\n\tSerializable consistentId(); // Gets consistent ID.\n\tvoid disconnect(); // Tells discovery SPI to disconnect from topology.\n\tvoid failNode(UUID nodeId, @Nullable String warning); // Initiates failure of provided node.\n\tlong getGridStartTime(); // Gets start time of the very first node in the grid.\n\tClusterNode getLocalNode(); // Gets local node.\n\tClusterNode getNode(UUID nodeId); // Gets node by ID.\n\tCollection<ClusterNode> getRemoteNodes(); // Gets collection of remote nodes in grid or empty collection if no remote nodes found.\n\tprotected void injectResources(Ignite ignite); // Inject ignite instance.\n\tboolean isClientMode(); // Whether or not discovery is started in client mode.\n\tboolean knownNode(UUID nodeId);\n\tprotected void onContextInitialized0(IgniteSpiContext spiCtx); // Method to be called in the end of onContextInitialized method.\n\tboolean pingNode(UUID nodeId); // Pings the remote node to see if it's alive.\n\tvoid resolveCommunicationFailure(ClusterNode node, Exception err);\n\tvoid sendCustomEvent(DiscoverySpiCustomMessage msg); // Sends custom message across the ring.\n\tvoid setAuthenticator(DiscoverySpiNodeAuthenticator auth); // Sets discovery SPI node authenticator.\n\tvoid setDataExchange(DiscoverySpiDataExchange exchange); // Sets a handler for initial data exchange between Ignite nodes.\n\tvoid setInternalListener(IgniteDiscoverySpiInternalListener lsnr); // For TESTING only.\n\tvoid setListener(@Nullable DiscoverySpiListener lsnr); // Sets a listener for discovery events.\n\tvoid setMetricsProvider(DiscoveryMetricsProvider metricsProvider); // Sets discovery metrics provider.\n\tvoid setNodeAttributes(Map<String,Object> attrs, IgniteProductVersion ver); // Sets node attributes and node version which will be distributed in grid during join process.\n\tvoid simulateNodeFailure(); // For TESTING only.\n\tvoid spiStart(@Nullable String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n\tboolean supportsCommunicationFailureResolve();\n}"}
{"index": 8742, "repo": "hadoop-yarn-common-3.3.6", "des": "Use LogAggregationFileControllerFactory to get the correct LogAggregationFileController for write and read.", "code": "Class LogAggregationFileControllerFactory {\n\tLinkedList<LogAggregationFileController> getConfiguredLogAggregationFileControllerList();\n\tLogAggregationFileController getFileControllerForRead(org.apache.hadoop.yarn.api.records.ApplicationId appId, String appOwner); // Get LogAggregationFileController to read the aggregated logs for this application.\n\tLogAggregationFileController getFileControllerForWrite(); // Get LogAggregationFileController to write.\n}"}
{"index": 10143, "repo": "spring-hateoas-2.1.2", "des": "LinkRelationProvider selection context for item resource relation lookups (LinkRelationProvider.LookupContext.forItemResourceRelLookup(Class), collection resource relation lookups LinkRelationProvider.LookupContext.forCollectionResourceRelLookup(Class) or both LinkRelationProvider.LookupContext.forType(Class).", "code": "public static class LinkRelationProvider.LookupContext extends Object {\n\tboolean equals(Object o);\n\tstatic LinkRelationProvider.LookupContext forCollectionResourceRelLookup(Class<?> type); // Creates a LinkRelationProvider.LookupContext to lookup the collection resource relation for the given type.\n\tstatic LinkRelationProvider.LookupContext forItemResourceRelLookup(Class<?> type); // Creates a LinkRelationProvider.LookupContext to lookup the item resource relation for the given type.\n\tstatic LinkRelationProvider.LookupContext forType(Class<?> type); // Creates a LinkRelationProvider.LookupContext for the type in general, i.e. both item and collection relation lookups.\n\tClass<?> getType();\n\tboolean handlesType(Class<?> type); // Returns whether the lookup is executed for the given type.\n\tboolean isCollectionRelationLookup(); // Returns whether the current context includes the collection relation lookup.\n\tboolean isItemRelationLookup(); // Returns whether the current context includes the item relation lookup.\n}"}
{"index": 11345, "repo": "spring-context-6.0.11", "des": "GenericApplicationListener adapter that determines supported event types through introspecting the generically declared type of the target listener.", "code": "public class GenericApplicationListenerAdapter extends Object implements GenericApplicationListener {\n\tString getListenerId(); // Return an optional identifier for the listener.\n\tint getOrder(); // Determine this listener's order in a set of listeners for the same event.\n\tvoid onApplicationEvent(ApplicationEvent event); // Handle an application event.\n\tboolean supportsEventType(org.springframework.core.ResolvableType eventType); // Determine whether this listener actually supports the given event type.\n\tboolean supportsSourceType(Class<?> sourceType); // Determine whether this listener actually supports the given source type.\n}"}
{"index": 11693, "repo": "spring-cloud-commons-3.1.7", "des": "Enumeration for management server ports.", "code": "public static enum ManagementServerPortUtils.ManagementServerPort extends Enum<ManagementServerPortUtils.ManagementServerPort> {\n\tstatic ManagementServerPortUtils.ManagementServerPort get(org.springframework.beans.factory.BeanFactory beanFactory);\n\tstatic ManagementServerPortUtils.ManagementServerPort valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ManagementServerPortUtils.ManagementServerPort[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5302, "repo": "druid-processing-26.0.0", "des": "An interface to a table where some columns (the 'key columns') have indexes that enable fast lookups.", "code": "Interface IndexedTable {\n\tIndexedTable.Index columnIndex(int column); // Returns the index for a particular column.\n\tIndexedTable.Reader columnReader(int column); // Returns a reader for a particular column.\n\tdefault byte[] computeCacheKey(); // Computes a byte[] key for the table that can be used for computing cache keys for join operations.\n\tdefault boolean isCacheable(); // Returns whether this indexed table can be cached for the join operations\n\tSet<String> keyColumns(); // Returns the columns of this table that have indexes.\n\tdefault ColumnSelectorFactory makeColumnSelectorFactory(ReadableOffset offset, boolean descending, Closer closer); // This method allows a table to directly provide an optimized ColumnSelectorFactory for IndexedTableJoinMatcher to create selectors.\n\tint numRows(); // Returns the number of rows in this table.\n\tRowSignature rowSignature(); // Returns the signature of this table, which includes all key columns (as well as other columns that can be selected, but are not keys).\n\tString version(); // Returns the version of this table, used to compare against when loading a new version of the table\n}"}
{"index": 7383, "repo": "mahout-math-0.13.0", "des": "Provides a virtual vector that is really a row or column or diagonal of a matrix.", "code": "Class MatrixVectorView {\n\tVector clone(); // Return a copy of the recipient\n\tdouble getIteratorAdvanceCost(); // Gets an estimate of the cost (in number of operations) it takes to advance an iterator through the nonzero elements of this vector.\n\tdouble getLookupCost(); // Gets an estimate of the cost (in number of operations) it takes to lookup a random element in this vector.\n\tint getNumNondefaultElements(); // Return the number of values in the recipient\n\tdouble getQuick(int index); // Return the value at the given index, without checking bounds\n\tboolean isAddConstantTime(); // Return true iff adding a new (nonzero) element takes constant time for this vector.\n\tboolean isDense(); // true if this implementation should be considered dense -- that it explicitly represents every value\n\tboolean isSequentialAccess(); // true if this implementation should be considered to be iterable in index order in an efficient way.\n\tIterator<Vector.Element> iterateNonZero(); // Iterates over all non-zero elements.\n\tIterator<Vector.Element> iterator(); // Iterates over all elements\n\tVector like(); // Return an empty vector of the same underlying class as the receiver\n\tVector like(int cardinality); // Return a new empty vector of the same underlying class as the receiver with given cardinality\n\tprotected Matrix matrixLike(int rows, int columns); // Subclasses must override to return an appropriately sparse or dense result\n\tvoid mergeUpdates(OrderedIntDoubleMapping updates); // Used internally by assign() to update multiple indices and values at once.\n\tvoid setQuick(int index, double value); // Set the value at the given index, without checking bounds\n}"}
{"index": 987, "repo": "ignite-core-2.15.0", "des": "JDBC query descriptor used for appropriate query cancellation.", "code": "Class JdbcQueryDescriptor {\n\tGridQueryCancel cancelHook();\n\tvoid decrementUsageCount(); // Descrements usage count.\n\tvoid incrementUsageCount(); // Increments usage count.\n\tboolean isCanceled();\n\tboolean isExecutionStarted();\n\tvoid markCancelled(); // Marks descriptor as canceled.\n\tint usageCount();\n}"}
{"index": 7721, "repo": "cassandra-all-4.1.2", "des": "Determines the highest ballot we should attempt to repair.", "code": "Class PaxosStartPrepareCleanup {\n\tvoid onFailure(InetAddressAndPort from, RequestFailureReason reason); // Called when there is an exception on the remote node or timeout happens\n\tvoid onResponse(Message<PaxosCleanupHistory> msg);\n\tstatic PaxosStartPrepareCleanup prepare(TableId tableId, java.util.Collection<InetAddressAndPort> endpoints, EndpointState localEpState, java.util.Collection<Range<Token>> ranges); // We run paxos repair as part of topology changes, so we include the local endpoint state in the paxos repair prepare message to prevent racing with gossip dissemination and guarantee that every repair participant is aware of the pending ring change during repair.\n}"}
{"index": 10358, "repo": "spring-core-6.0.11", "des": "An extension of ByteArrayOutputStream that: has public ResizableByteArrayOutputStream.grow(int) and ResizableByteArrayOutputStream.resize(int) methods to get more control over the size of the internal buffer has a higher initial capacity (256) by default", "code": "public class ResizableByteArrayOutputStream extends ByteArrayOutputStream {\n\tint capacity(); // Return the current size of this stream's internal buffer.\n\tvoid grow(int additionalCapacity); // Grow the internal buffer size.\n\tvoid resize(int targetCapacity); // Resize the internal buffer size to a specified capacity.\n}"}
{"index": 16282, "repo": "spring-r2dbc-6.0.11", "des": "A bind marker represents a single bindable parameter within a query.", "code": "public interface BindMarker {\n\tvoid bind(BindTarget bindTarget, Object value); // Bind the given value to the Statement using the underlying binding strategy.\n\tvoid bindNull(BindTarget bindTarget, Class<?> valueType); // Bind a null value to the Statement using the underlying binding strategy.\n\tString getPlaceholder(); // Return the database-specific placeholder for a given substitution.\n}"}
{"index": 5560, "repo": "org.apache.karaf.main-2.4.4", "des": "A capability that has been declared from a Resource.", "code": "Interface Capability {\n\tboolean equals(Object obj); // Compares this Capability to another Capability.\n\tMap<String,Object> getAttributes(); // Returns the attributes of this capability.\n\tMap<String,String> getDirectives(); // Returns the directives of this capability.\n\tString getNamespace(); // Returns the namespace of this capability.\n\tResource getResource(); // Returns the resource declaring this capability.\n}"}
{"index": 18266, "repo": "tomcat-api-10.1", "des": "General event for notifying listeners of significant changes on a Container.", "code": "Class ContainerEvent {\n\tContainer getContainer(); // Return the Container on which this event occurred.\n\tObject getData(); // Return the event data of this event.\n\tString getType(); // Return the event type of this event.\n}"}
{"index": 5189, "repo": "druid-processing-26.0.0", "des": "A class to accumulate simple stats of some time points.", "code": "Class ConcurrentTimeCounter {\n\tvoid add(int time);\n\tstatic int count(long timeSumAndCount);\n\tInteger getAndResetMaxTime(); // Returns the max time add(int)ed since the previous call to this method or since the creation of this object, or null if no times were added.\n\tInteger getAndResetMinTime(); // Returns the min time add(int)ed since the previous call to this method or since the creation of this object, or null if no times were added.\n\tlong getTimeSumAndCountAndReset();\n\tstatic int timeSum(long timeSumAndCount);\n}"}
{"index": 13240, "repo": "spring-test-6.0.11", "des": "Encapsulates the behavior required to implement MockRestServiceServer including its public API (create expectations + verify/reset) along with an extra method for verifying actual requests.", "code": "public interface RequestExpectationManager {\n\tResponseActions expectRequest(ExpectedCount count, RequestMatcher requestMatcher); // Set up a new request expectation.\n\tvoid reset(); // Reset the internal state removing all expectations and recorded requests.\n\torg.springframework.http.client.ClientHttpResponse validateRequest(org.springframework.http.client.ClientHttpRequest request); // Validate the given actual request against the declared expectations.\n\tvoid verify(); // Verify that all expectations have been met.\n\tvoid verify(Duration timeout); // Variant of verify() that waits for up to the specified time for all expectations to be fulfilled.\n}"}
{"index": 8034, "repo": "commons-compress-1.23.0", "des": "ChangeSet collects and performs changes to an archive.", "code": "Class ChangeSet {\n\tvoid add(ArchiveEntry pEntry, InputStream pInput); // Adds a new archive entry to the archive.\n\tvoid add(ArchiveEntry pEntry, InputStream pInput, boolean replace); // Adds a new archive entry to the archive.\n\tvoid delete(String fileName); // Deletes the file with the file name from the archive.\n\tvoid deleteDir(String dirName); // Deletes the directory tree from the archive.\n}"}
{"index": 11584, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an AbstractOAuth2AuthorizationGrantRequestEntityConverter that converts the provided OAuth2PasswordGrantRequest to a RequestEntity representation of an OAuth 2.0 Access Token Request for the Resource Owner Password Credentials Grant.", "code": "public class OAuth2PasswordGrantRequestEntityConverter extends Object {\n\tfinal void addHeadersConverter(org.springframework.core.convert.converter.Converter<OAuth2PasswordGrantRequest,org.springframework.http.HttpHeaders> headersConverter); // Add (compose) the provided headersConverter to the current Converter used for converting the AbstractOAuth2AuthorizationGrantRequest instance to a HttpHeaders used in the OAuth 2.0 Access Token Request headers.\n\tfinal void addParametersConverter(org.springframework.core.convert.converter.Converter<OAuth2PasswordGrantRequest,org.springframework.util.MultiValueMap<String,String>> parametersConverter); // Add (compose) the provided parametersConverter to the current Converter used for converting the AbstractOAuth2AuthorizationGrantRequest instance to a MultiValueMap of the parameters used in the OAuth 2.0 Access Token Request body.\n\torg.springframework.http.RequestEntity<?> convert(OAuth2PasswordGrantRequest authorizationGrantRequest);\n\tprotected org.springframework.util.MultiValueMap<String,String> createParameters(OAuth2PasswordGrantRequest passwordGrantRequest);\n\tfinal void setHeadersConverter(org.springframework.core.convert.converter.Converter<OAuth2PasswordGrantRequest,org.springframework.http.HttpHeaders> headersConverter); // Sets the Converter used for converting the AbstractOAuth2AuthorizationGrantRequest instance to a HttpHeaders used in the OAuth 2.0 Access Token Request headers.\n\tfinal void setParametersConverter(org.springframework.core.convert.converter.Converter<OAuth2PasswordGrantRequest,org.springframework.util.MultiValueMap<String,String>> parametersConverter); // Sets the Converter used for converting the AbstractOAuth2AuthorizationGrantRequest instance to a MultiValueMap of the parameters used in the OAuth 2.0 Access Token Request body.\n}"}
{"index": 8465, "repo": "commons-io-2.13.0", "des": "OutputStream implementation that writes the data to an Appendable Object.", "code": "Class AppendableOutputStream<T extends Appendable> {\n\tT getAppendable(); // Return the target appendable.\n\tvoid write(int b); // Write a character to the underlying appendable.\n}"}
{"index": 16637, "repo": "spring-beans-6.0.11", "des": "Sub-interface implemented by bean factories that can be part of a hierarchy.", "code": "public interface HierarchicalBeanFactory extends BeanFactory {\n\tboolean containsLocalBean(String name); // Return whether the local bean factory contains a bean of the given name, ignoring beans defined in ancestor contexts.\n\tBeanFactory getParentBeanFactory(); // Return the parent bean factory, or null if there is none.\n}"}
{"index": 3825, "repo": "hbase-client-3.0.0-alpha-4", "des": "CoprocessorDescriptor contains the details about how to build a coprocessor.", "code": "Interface CoprocessorDescriptor {\n\tString getClassName(); // Returns the name of the class or interface represented by this object.\n\tOptional<String> getJarPath(); // Returns Path of the jar file.\n\tint getPriority(); // Returns The order to execute this coprocessor\n\tMap<String,String> getProperties(); // Returns Arbitrary key-value parameter pairs passed into the coprocessor.\n}"}
{"index": 13589, "repo": "spring-messaging-6.0.11", "des": "Contract for access to session counters.", "code": "public static interface StompBrokerRelayMessageHandler.Stats {\n\tint getTotalConnect(); // The number of CONNECT frames processed.\n\tint getTotalConnected(); // The number of CONNECTED frames processed.\n\tint getTotalDisconnect(); // The number of DISCONNECT frames processed.\n\tint getTotalHandlers(); // The number of connection handlers.\n}"}
{"index": 13266, "repo": "spring-test-6.0.11", "des": "Utility methods for working with resources within the Spring TestContext Framework.", "code": "public abstract class TestContextResourceUtils extends Object {\n\tstatic String[] convertToClasspathResourcePaths(Class<?> clazz, boolean preservePlaceholders, String... paths); // Convert the supplied paths to classpath resource paths.\n\tstatic String[] convertToClasspathResourcePaths(Class<?> clazz, String... paths); // Convert the supplied paths to classpath resource paths.\n\tstatic List<org.springframework.core.io.Resource> convertToResourceList(org.springframework.core.io.ResourceLoader resourceLoader, String... paths); // Convert the supplied paths to a list of Resource handles using the given ResourceLoader.\n\tstatic org.springframework.core.io.Resource[] convertToResources(org.springframework.core.io.ResourceLoader resourceLoader, String... paths); // Convert the supplied paths to an array of Resource handles using the given ResourceLoader.\n}"}
{"index": 2113, "repo": "hive-exec-4.0.0-alpha-2", "des": "GenericUDF Class for operation LessThan.", "code": "Class GenericUDFOPLessThan {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tGenericUDF flip(); // Some functions like comparisons may be affected by appearing order of arguments.\n\tGenericUDF negative(); // Gets the negative function of the current one.\n}"}
{"index": 10082, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Contains utility methods for rendering data to a formatted console output.", "code": "Class UiUtils {\n\tstatic String getHeaderBorder(Map<Integer,TableHeader> headers); // Renders the Table header border, based on the map of provided headers.\n\tstatic String renderMapDataAsTable(List<Map<String,Object>> data, List<String> columns); // Renders a textual representation of the list of provided Map data\n\tstatic String renderParameterInfoDataAsTable(Map<String,String> parameters); // Renders a textual representation of provided parameter map.\n\tstatic String renderParameterInfoDataAsTable(Map<String,String> parameters, boolean withHeader, int lastColumnMaxWidth);\n\tstatic String renderTextTable(Table table);\n\tstatic String renderTextTable(Table table, boolean withHeader); // Renders a textual representation of the provided Table\n}"}
{"index": 11497, "repo": "spring-restdocs-core-3.0.0", "des": "Static factory methods for creating OperationPreprocessors that can be applied to an Operation's request or response before it is documented.", "code": "public final class Preprocessors extends Object {\n\tstatic OperationPreprocessor maskLinks(); // Returns an OperationPreprocessor that will mask the href of hypermedia links in the request or response.\n\tstatic OperationPreprocessor maskLinks(String mask); // Returns an OperationPreprocessor that will mask the href of hypermedia links in the request or response.\n\tstatic HeadersModifyingOperationPreprocessor modifyHeaders(); // Returns a HeadersModifyingOperationPreprocessor that can then be configured to modify the headers of the request or response.\n\tstatic UriModifyingOperationPreprocessor modifyUris(); // Returns a UriModifyingOperationPreprocessor that will modify URIs in the request or response by changing one or more of their host, scheme, and port.\n\tstatic OperationRequestPreprocessor preprocessRequest(OperationPreprocessor... preprocessors); // Returns an OperationRequestPreprocessor that will preprocess the request by applying the given preprocessors to it.\n\tstatic OperationResponsePreprocessor preprocessResponse(OperationPreprocessor... preprocessors); // Returns an OperationResponsePreprocessor that will preprocess the response by applying the given preprocessors to it.\n\tstatic OperationPreprocessor prettyPrint(); // Returns an OperationPreprocessor that will pretty print the content of the request or response.\n\tstatic OperationPreprocessor removeHeaders(String... headerNames); // Deprecated. since 3.0.0 in favor of modifyHeaders() and HeadersModifyingOperationPreprocessor.remove(String)\n\tstatic OperationPreprocessor removeMatchingHeaders(String... headerNamePatterns); // Deprecated. since 3.0.0 in favor of modifyHeaders() and HeadersModifyingOperationPreprocessor.removeMatching(String)\n\tstatic OperationPreprocessor replacePattern(Pattern pattern, String replacement); // Returns an OperationPreprocessor that will modify the content of the request or response by replacing occurrences of the given pattern with the given replacement.\n}"}
{"index": 2273, "repo": "hive-exec-4.0.0-alpha-2", "des": "Subclasses represent a storage format for the CREATE TABLE .", "code": "Interface StorageFormatDescriptor {\n\tString getInputFormat(); // Return the name of the input format as a string\n\tSet<String> getNames(); // Return the set of names this storage format is known as.\n\tString getOutputFormat(); // Return the name of the output format as a string\n\tString getSerde(); // Return the name of the serde as a string or null\n}"}
{"index": 14444, "repo": "wicket-core-10.0.0-M1", "des": "Load properties from properties file via a Reader, which allows to provide the charset and thus the encoding can be different than ISO 8859-1.", "code": "public class UtfPropertiesFilePropertiesLoader extends Object implements IPropertiesLoader {\n\tfinal String getFileExtension();\n\tProperties loadJavaProperties(InputStream in); // Load the properties into a java.util.Properties object\n\torg.apache.wicket.util.value.ValueMap loadWicketProperties(InputStream inputStream); // Load the properties into a ValueMap.\n}"}
{"index": 17501, "repo": "pulsar-broker-3.0.0", "des": "Represent the tracker for the delayed delivery of messages for a particular subscription.", "code": "@Beta public interface DelayedDeliveryTracker extends AutoCloseable {\n\tboolean addMessage(long ledgerId, long entryId, long deliveryAt); // Add a message to the tracker.\n\tCompletableFuture<Void> clear(); // Clear all delayed messages from the tracker.\n\tvoid close(); // Close the subscription tracker and release all resources.\n\tlong getBufferMemoryUsage(); // The amount of memory used to back the delayed message index.\n\tlong getNumberOfDelayedMessages();\n\tNavigableSet<PositionImpl> getScheduledMessages(int maxMessages); // Get a set of position of messages that have already reached the delivery time.\n\tboolean hasMessageAvailable(); // Return true if there's at least a message that is scheduled to be delivered already.\n\tvoid resetTickTime(long tickTime); // Reset tick time use zk policies cache.\n\tboolean shouldPauseAllDeliveries(); // Tells whether the dispatcher should pause any message deliveries, until the DelayedDeliveryTracker has more messages available.\n}"}
{"index": 11216, "repo": "wicket-extensions-10.0.0-M1", "des": "Toolbar that displays links used to navigate the pages of the datatable as well as a message about which rows are being displayed and their total number in the data table.", "code": "public class NavigationToolbar extends AbstractToolbar {\n\tprotected org.apache.wicket.Component newNavigatorLabel(String navigatorId, DataTable<?,?> table); // Factory method used to create the navigator label.\n\tprotected org.apache.wicket.markup.html.navigation.paging.PagingNavigator newPagingNavigator(String navigatorId, DataTable<?,?> table); // Factory method used to create the paging navigator that will be used by the datatable\n\tprotected void onConfigure();\n}"}
{"index": 2323, "repo": "hive-exec-4.0.0-alpha-2", "des": "This class has methods for generating vectorized join results for outer joins.", "code": "Class VectorMapJoinOuterGenerateResultOperator {\n\tprotected void commonSetup();\n\tvoid finishOuter(VectorizedRowBatch batch, int allMatchCount, int equalKeySeriesCount, boolean atLeastOneNonMatch, boolean inputSelectedInUse, int inputLogicalSize, int spillCount, int hashMapResultCount); // Generate the outer join output results for one vectorized row batch.\n\tvoid finishOuterRepeated(VectorizedRowBatch batch, JoinUtil.JoinResult joinResult, VectorMapJoinHashMapResult hashMapResult, boolean someRowsFilteredOut, boolean inputSelectedInUse, int inputLogicalSize); // Generate the outer join output results for one vectorized row batch with a repeated key.\n\tprotected void fullOuterHashTableSetup();\n\tprotected void fullOuterIntersectHashTableSetup();\n\tprotected void generateFullOuterLongKeySmallTableNoMatches();\n\tprotected void generateFullOuterMultiKeySmallTableNoMatches();\n\tprotected void generateFullOuterSmallTableNoMatches(byte smallTablePos, MapJoinTableContainer substituteSmallTable);\n\tprotected void generateFullOuterStringKeySmallTableNoMatches();\n\tprotected void generateOuterNulls(VectorizedRowBatch batch, int[] noMatchs, int noMatchSize); // Generate the non matching outer join output results for one vectorized row batch.\n\tprotected void generateOuterNullsRepeatedAll(VectorizedRowBatch batch); // Generate the non-match outer join output results for the whole repeating vectorized row batch.\n\tprotected void outerPerBatchSetup(VectorizedRowBatch batch); // Do the per-batch setup for an outer join.\n}"}
{"index": 2764, "repo": "tika-parsers-1.28.5", "des": "The class is used to represent the number of the array.", "code": "Class ArrayNumber {\n\tint doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the number of array from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of the number of array into a byte List.\n}"}
{"index": 13603, "repo": "spring-messaging-6.0.11", "des": "A registration class for customizing the properties of ThreadPoolTaskExecutor.", "code": "public class TaskExecutorRegistration extends Object {\n\tTaskExecutorRegistration corePoolSize(int corePoolSize); // Set the core pool size of the ThreadPoolExecutor.\n\tprotected org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor getTaskExecutor();\n\tTaskExecutorRegistration keepAliveSeconds(int keepAliveSeconds); // Set the time limit for which threads may remain idle before being terminated.\n\tTaskExecutorRegistration maxPoolSize(int maxPoolSize); // Set the max pool size of the ThreadPoolExecutor.\n\tTaskExecutorRegistration queueCapacity(int queueCapacity); // Set the queue capacity for the ThreadPoolExecutor.\n}"}
{"index": 14597, "repo": "spring-security-web-6.1.2", "des": "A builder for RequestMatcherDelegatingAuthenticationManagerResolver.", "code": "public static final class ServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.Builder extends Object {\n\tServerWebExchangeDelegatingReactiveAuthenticationManagerResolver.Builder add(ServerWebExchangeMatcher matcher, org.springframework.security.authentication.ReactiveAuthenticationManager manager); // Maps a ServerWebExchangeMatcher to an ReactiveAuthenticationManager.\n\tServerWebExchangeDelegatingReactiveAuthenticationManagerResolver build(); // Creates a RequestMatcherDelegatingAuthenticationManagerResolver instance.\n}"}
{"index": 8294, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the BindingsProvider and ServicesProvider interfaces that supports SOAP 1.", "code": "Class SoapProvider {\n\tvoid addBindings(javax.wsdl.Definition definition);\n\tvoid addServices(javax.wsdl.Definition definition);\n\tvoid setCreateSoap11Binding(boolean createSoap11Binding); // Indicates whether a SOAP 1.1 binding should be created.\n\tvoid setCreateSoap12Binding(boolean createSoap12Binding); // Indicates whether a SOAP 1.2 binding should be created.\n\tvoid setLocationUri(String locationUri); // Sets the value used for the SOAP Address location attribute value.\n\tvoid setServiceName(String serviceName); // Sets the service name.\n\tvoid setSoapActions(Properties soapActions); // Sets the SOAP Actions for this binding.\n\tvoid setTransportUri(String transportUri); // Sets the value used for the binding transport attribute value.\n}"}
{"index": 2360, "repo": "commons-geometry-euclidean-1.0", "des": "Abstract base class for Euclidean vectors and points.", "code": "Class EuclideanVector<V extends EuclideanVector<V>> {\n\tabstract V directionTo(V v); // Return the unit vector representing the direction of displacement from this vector to the given vector.\n\tabstract boolean eq(V v, Precision.DoubleEquivalence precision); // Return true if the current instance and given vector are considered equal as evaluated by the given precision context.\n\tprotected double getCheckedNorm(); // Return the vector norm value, throwing an IllegalArgumentException if the value is not real (ie, NaN or infinite) or zero.\n\tboolean isZero(Precision.DoubleEquivalence precision); // Return true if the current instance is considered equal to the zero vector as evaluated by the given precision context.\n\tabstract V lerp(V v, double t); // Get a vector constructed by linearly interpolating between this vector and the given vector.\n\tabstract V vectorTo(V v); // Return the vector representing the displacement from this vector to the given vector.\n}"}
{"index": 3009, "repo": "tink-1.10.0", "des": "A KeysetReader that can read from source source cleartext or encrypted keysets in proto JSON format.", "code": "Class JsonKeysetReader {\n\tKeyset read(); // Tries to read and return a cleartext Keyset.\n\tEncryptedKeyset readEncrypted(); // Tries to read and return an EncryptedKeyset.\n\tstatic JsonKeysetReader withBytes(byte[] bytes); // Static method to create a JsonKeysetReader from a byte array.\n\tstatic JsonKeysetReader withInputStream(InputStream input); // Static method to create a JsonKeysetReader from an InputStream.\n\tstatic JsonKeysetReader withString(String input); // Static method to create a JsonKeysetReader from a string.\n\tJsonKeysetReader withUrlSafeBase64();\n}"}
{"index": 13746, "repo": "spring-webmvc-6.0.11", "des": "The <message> tag looks up a message in the scope of this page.", "code": "public class MessageTag extends HtmlEscapingAwareTag implements ArgumentAware {\n\tvoid addArgument(Object argument); // Callback hook for nested spring:argument tags to pass their value to the parent tag.\n\tint doEndTag(); // Resolves the message, escapes it if demanded, and writes it to the page (or exposes it as variable).\n\tprotected final int doStartTagInternal(); // Called by doStartTag to perform the actual work.\n\tprotected org.springframework.context.MessageSource getMessageSource(); // Use the current RequestContext's application context as MessageSource.\n\tprotected String getNoSuchMessageExceptionDescription(org.springframework.context.NoSuchMessageException ex); // Return default exception message.\n\tvoid release();\n\tprotected Object[] resolveArguments(Object arguments); // Resolve the given arguments Object into an arguments array.\n\tprotected String resolveMessage(); // Resolve the specified message into a concrete message String.\n\tvoid setArguments(Object arguments); // Set optional message arguments for this tag, as a comma-delimited String (each String argument can contain JSP EL), an Object array (used as argument array), or a single Object (used as single argument).\n\tvoid setArgumentSeparator(String argumentSeparator); // Set the separator to use for splitting an arguments String.\n\tvoid setCode(String code); // Set the message code for this tag.\n\tvoid setJavaScriptEscape(boolean javaScriptEscape); // Set JavaScript escaping for this tag, as boolean value.\n\tvoid setMessage(org.springframework.context.MessageSourceResolvable message); // Set the MessageSourceResolvable for this tag.\n\tvoid setScope(String scope); // Set the scope to export the variable to.\n\tvoid setText(String text); // Set the message text for this tag.\n\tvoid setVar(String var); // Set PageContext attribute name under which to expose a variable that contains the resolved message.\n\tprotected void writeMessage(String msg); // Write the message to the page.\n}"}
{"index": 4385, "repo": "beam-sdks-java-core-2.49.0", "des": "Flatten<T> takes multiple PCollection<T>s bundled into a PCollectionList<T> and returns a single PCollection<T> containing all the elements in all the input PCollections.", "code": "Class Flatten {\n\tstatic <T> Flatten.Iterables<T> iterables(); // Returns a PTransform that takes a PCollection<Iterable<T>> and returns a PCollection<T> containing all the elements from all the Iterables.\n\tstatic <T> Flatten.PCollections<T> pCollections(); // Returns a PTransform that flattens a PCollectionList into a PCollection containing all the elements of all the PCollections in its input.\n}"}
{"index": 17994, "repo": "spring-ws-core-4.0.5", "des": "Abstract implementation of the SoapMessage interface.", "code": "public abstract class AbstractSoapMessage extends AbstractMimeMessage implements SoapMessage {\n\tfinal QName getFaultCode(); // Returns getSoapBody().getFault().getFaultCode().\n\tfinal String getFaultReason(); // Returns getSoapBody().getFault().getFaultStringOrReason().\n\tfinal Result getPayloadResult(); // Returns getSoapBody().getPayloadResult().\n\tfinal Source getPayloadSource(); // Returns getSoapBody().getPayloadSource().\n\tfinal SoapBody getSoapBody(); // Returns getEnvelope().getBody().\n\tfinal SoapHeader getSoapHeader(); // Returns getEnvelope().getHeader().\n\tSoapVersion getVersion(); // Returns the SOAP version of this message.\n\tfinal boolean hasFault(); // Returns getSoapBody().hasFault().\n}"}
{"index": 3580, "repo": "hive-serde-4.0.0-alpha-2", "des": "ColumnarStruct is different from LazyStruct in that ColumnarStruct's field Object get parsed at its initialize time when call ColumnarStructBase.", "code": "Class ColumnarStruct {\n\tprotected LazyObjectBase createLazyObjectBase(ObjectInspector objectInspector); // create the lazy object for this field\n\tprotected int getLength(ObjectInspector objectInspector, ByteArrayRef cachedByteArrayRef, int start, int fieldLen); // Check if the object is null and return the length of the stream\n}"}
{"index": 180, "repo": "commons-collections4-4.4", "des": "A MultiKey allows multiple map keys to be merged together.", "code": "Class MultiKey<K> {\n\tboolean equals(Object other); // Compares this object to another.\n\tK getKey(int index); // Gets the key at the specified index.\n\tK[] getKeys(); // Gets a clone of the array of keys.\n\tprotected Object readResolve(); // Recalculate the hash code after deserialization.\n\tint size(); // Gets the size of the list of keys.\n}"}
{"index": 16869, "repo": "spring-amqp-3.0.6", "des": "Encapsulates a remote invocation result, holding a result value or an exception.", "code": "public class RemoteInvocationResult extends Object implements Serializable {\n\tThrowable getException(); // Return the exception thrown by an unsuccessful invocation of the target method, if any.\n\tObject getValue(); // Return the result value returned by a successful invocation of the target method, if any.\n\tboolean hasException(); // Return whether this invocation result holds an exception.\n\tboolean hasInvocationTargetException(); // Return whether this invocation result holds an InvocationTargetException, thrown by an invocation of the target method itself.\n\tObject recreate(); // Recreate the invocation result, either returning the result value in case of a successful invocation of the target method, or rethrowing the exception thrown by the target method.\n\tvoid setException(Throwable exception); // Set the exception thrown by an unsuccessful invocation of the target method, if any.\n\tvoid setValue(Object value); // Set the result value returned by a successful invocation of the target method, if any.\n}"}
{"index": 4393, "repo": "beam-sdks-java-core-2.49.0", "des": "GroupByKey<K, V> takes a PCollection<KV<K, V>>, groups the values by key and windows, and returns a PCollection<KV<K, Iterable<V>>> representing a map from each distinct key and window of the input PCollection to an Iterable over all the values associated with that key in the input per window.", "code": "Class GroupByKey<K,V> {\n\tstatic void applicableTo(PCollection<?> input);\n\tstatic <K,V> GroupByKey<K,V> create(); // Returns a GroupByKey<K, V> PTransform.\n\tPCollection<KV<K,java.lang.Iterable<V>>> expand(PCollection<KV<K,V>> input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tboolean fewKeys(); // Returns whether it groups just few keys.\n\tstatic <K,V> Coder<V> getInputValueCoder(Coder<KV<K,V>> inputCoder); // Returns the Coder of the values of the input to this transform.\n\tstatic <K,V> Coder<K> getKeyCoder(Coder<KV<K,V>> inputCoder); // Returns the Coder of the keys of the input to this transform, which is also used as the Coder of the keys of the output of this transform.\n\tstatic <K,V> KvCoder<K,java.lang.Iterable<V>> getOutputKvCoder(Coder<KV<K,V>> inputCoder); // Returns the Coder of the output of this transform.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tWindowingStrategy<?,?> updateWindowingStrategy(WindowingStrategy<?,?> inputStrategy);\n\tvoid validate(@Nullable PipelineOptions options, java.util.Map<TupleTag<?>,PCollection<?>> inputs, java.util.Map<TupleTag<?>,PCollection<?>> outputs); // Called before running the Pipeline to verify this transform, its inputs, and outputs are fully and correctly specified.\n}"}
{"index": 351, "repo": "phoenix-core-5.1.3", "des": "\"Client-side\" cache for storing GuidePostsInfo for a column family.", "code": "Class GuidePostsCacheImpl {\n\tGuidePostsInfo get(GuidePostsKey key); // Returns the PTableStats for the given tableName, using the provided valueLoader if no such mapping exists.\n\tvoid invalidate(GuidePostsKey key); // Removes the mapping for tableName if it exists.\n\tvoid invalidateAll(); // Removes all mappings from the cache.\n\tvoid put(GuidePostsKey key, GuidePostsInfo info); // Cache the given stats to the cache for the given tableName.\n}"}
{"index": 1562, "repo": "pdfbox-3.0.0-beta1", "des": "Represents the page label dictionary of a document.", "code": "Class PDPageLabels {\n\tCOSBase getCOSObject(); // Convert this standard java object to a COS object.\n\tString[] getLabelsByPageIndices(); // Returns a mapping with 0-based page indices as keys and corresponding page labels as values as an array.\n\tNavigableSet<Integer> getPageIndices(); // Get an ordered set of page indices having a page label range.\n\tMap<String,Integer> getPageIndicesByLabels(); // Returns a mapping with computed page labels as keys and corresponding 0-based page indices as values.\n\tPDPageLabelRange getPageLabelRange(int startPage); // Returns the page label range starting at the given page, or null if no such range is defined.\n\tint getPageRangeCount(); // Returns the number of page label ranges.\n\tvoid setLabelItem(int startPage, PDPageLabelRange item); // Sets the page label range beginning at the specified start page.\n}"}
{"index": 13324, "repo": "shiro-core-2.0.0-alpha-2", "des": "Static helper class for use dealing with Collections.", "code": "public class CollectionUtils extends Object {\n\tstatic <E> List<E> asList(E... elements);\n\tstatic <E> Set<E> asSet(E... elements);\n\tstatic boolean isEmpty(Collection c); // Returns true if the specified Collection is null or empty, false otherwise.\n\tstatic boolean isEmpty(Map m); // Returns true if the specified Map is null or empty, false otherwise.\n\tstatic boolean isEmpty(PrincipalCollection principals); // Deprecated. Use PrincipalCollection.isEmpty() directly.\n\tstatic int size(Collection c); // Returns the size of the specified collection or 0 if the collection is null.\n\tstatic int size(Map m); // Returns the size of the specified map or 0 if the map is null.\n}"}
{"index": 17837, "repo": "spring-web-6.0.11", "des": "An HttpMessageConverter that uses StringHttpMessageConverter for reading and writing content and a ConversionService for converting the String content to and from the target object type.", "code": "public class ObjectToStringHttpMessageConverter extends AbstractHttpMessageConverter<Object> {\n\tboolean canRead(Class<?> clazz, MediaType mediaType); // This implementation checks if the given class is supported, and if the supported media types include the given media type.\n\tboolean canWrite(Class<?> clazz, MediaType mediaType); // This implementation checks if the given class is supported, and if the supported media types include the given media type.\n\tprotected Long getContentLength(Object obj, MediaType contentType); // Returns the content length for the given type.\n\tprotected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage); // Abstract template method that reads the actual object.\n\tvoid setWriteAcceptCharset(boolean writeAcceptCharset); // Delegates to StringHttpMessageConverter.setWriteAcceptCharset(boolean).\n\tprotected boolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tprotected void writeInternal(Object obj, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 9270, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Helper class to determine hardware related characteristics such as the number of processors and the amount of memory on the node.", "code": "Class NodeManagerHardwareUtils {\n\tstatic long getContainerMemoryMB(org.apache.hadoop.conf.Configuration conf); // Function to return how much memory we should set aside for YARN containers.\n\tstatic long getContainerMemoryMB(org.apache.hadoop.yarn.util.ResourceCalculatorPlugin plugin, org.apache.hadoop.conf.Configuration conf); // Function to return how much memory we should set aside for YARN containers.\n\tstatic float getContainersCPUs(org.apache.hadoop.conf.Configuration conf); // Returns the fraction of CPUs that should be used for YARN containers.\n\tstatic float getContainersCPUs(org.apache.hadoop.yarn.util.ResourceCalculatorPlugin plugin, org.apache.hadoop.conf.Configuration conf); // Returns the fraction of CPUs that should be used for YARN containers.\n\tstatic int getNodeCpuPercentage(org.apache.hadoop.conf.Configuration conf); // Gets the percentage of physical CPU that is configured for YARN containers.\n\tstatic int getNodeCPUs(org.apache.hadoop.conf.Configuration conf); // Returns the number of CPUs on the node.\n\tstatic int getNodeCPUs(org.apache.hadoop.yarn.util.ResourceCalculatorPlugin plugin, org.apache.hadoop.conf.Configuration conf); // Returns the number of CPUs on the node.\n\tstatic org.apache.hadoop.yarn.api.records.Resource getNodeResources(org.apache.hadoop.conf.Configuration configuration); // Get the resources for the node.\n\tstatic int getVCores(org.apache.hadoop.conf.Configuration conf); // Function to return the number of vcores on the system that can be used for YARN containers.\n\tstatic int getVCores(org.apache.hadoop.yarn.util.ResourceCalculatorPlugin plugin, org.apache.hadoop.conf.Configuration conf); // Function to return the number of vcores on the system that can be used for YARN containers.\n}"}
{"index": 8384, "repo": "hadoop-aws-3.3.6", "des": "Class to track/update context information to set in threads.", "code": "Class AuditContextUpdater {\n\tvoid resetCurrentAuditContext(); // Remove job/task info from the current audit context.\n\tvoid updateCurrentAuditContext(); // Add job/task info to current audit context.\n}"}
{"index": 11981, "repo": "jena-core-4.9.0", "des": "An ArrayBunch implements TripleBunch with a linear search of a short-ish array of Triples.", "code": "public class ArrayBunch extends Object implements TripleBunch {\n\tvoid add(Triple t); // Add t to the triples in this bunch.\n\tboolean contains(Triple t); // Answer true iff this TripleBunch contains a triple .equals to t.\n\tboolean containsBySameValueAs(Triple t); // Answer true iff this TripleBunch contains a triple with .sameValueAs subject, predicate, and object.\n\tExtendedIterator<Triple> iterator(); // Answer an iterator over all the triples in this bunch.\n\tExtendedIterator<Triple> iterator(HashCommon.NotifyEmpty container); // Answer an iterator over all the triples in this bunch.\n\tvoid remove(Triple t); // Remove t from the triples in this bunch.\n\tint size(); // Answer the number of triples in this bunch.\n\tSpliterator<Triple> spliterator(); // Answer a spliterator over all the triples in this bunch.\n}"}
{"index": 5014, "repo": "commons-collections-3.2.2", "des": "Decorates another List to create objects in the list on demand.", "code": "Class LazyList {\n\tstatic List decorate(List list, Factory factory); // Factory method to create a lazily instantiating list.\n\tObject get(int index); // Decorate the get method to perform the lazy behaviour.\n\tList subList(int fromIndex, int toIndex);\n}"}
{"index": 15743, "repo": "camel-api-4.0.0-RC1", "des": "Interface defining an attribute which is a key for the detailed error messages.", "code": "public static interface ComponentVerifierExtension.VerificationError.Attribute extends Serializable {\n\tdefault String getName(); // Bean style accessor to name; This is required for framework like Jackson using bean convention for object serialization.\n\tString name(); // Name of the attribute.\n}"}
{"index": 15572, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "des": "Controls the fallback behavior when the primary property that controls whether an info contributor is enabled is not set.", "code": "public enum InfoContributorFallback extends Enum<InfoContributorFallback> {\n\tstatic InfoContributorFallback valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic InfoContributorFallback[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 3837, "repo": "hbase-client-3.0.0-alpha-4", "des": "FilterListWithAND represents an ordered list of filters which will be evaluated with an AND operator.", "code": "Class FilterListWithAND {\n\tvoid addFilterLists(List<Filter> filters);\n\tboolean equals(Object obj);\n\tboolean filterAllRemaining(); // Filters that never filter all remaining can inherit this implementation that never stops the filter early.\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRow(); // Filters that never filter by rows based on previously gathered state from Filter.filterCell(Cell) can inherit this implementation that never filters a row.\n\tboolean filterRowKey(Cell firstRowCell); // Filters a row based on the row key.\n\tprotected String formatLogFilters(List<Filter> logFilters);\n\tCell getNextCellHint(Cell currentCell); // Filters that are not sure which key must be next seeked to, can inherit this implementation that, by default, returns a null Cell.\n\tvoid reset(); // Filters that are purely stateless and do nothing in their reset() methods can inherit this null/empty implementation.\n}"}
{"index": 6480, "repo": "exoplayer-core-2.9.6", "des": "A DataSource that supports multiple URI schemes.", "code": "Class DefaultDataSource {\n\tvoid addTransferListener(TransferListener transferListener); // Adds a TransferListener to listen to data transfers.\n\tvoid close(); // Closes the source.\n\tjava.util.Map<java.lang.String,java.util.List<java.lang.String>> getResponseHeaders(); // When the source is open, returns the response headers associated with the last DataSource.open(com.google.android.exoplayer2.upstream.DataSpec) call.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to readLength bytes of data and stores them into buffer, starting at index offset.\n}"}
{"index": 16215, "repo": "spring-data-cassandra-4.1.2", "des": "Enum identifying any schema actions to take at startup.", "code": "public enum SchemaAction extends Enum<SchemaAction> {\n\tstatic SchemaAction valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SchemaAction[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 3529, "repo": "mahout-mr-0.13.0", "des": "An online Gaussian statistics accumulator based upon Knuth (who cites Welford) which is declared to be numerically-stable.", "code": "Class OnlineGaussianAccumulator {\n\tvoid compute(); // Compute the mean, variance and standard deviation\n\tdouble getAverageStd();\n\tVector getMean();\n\tdouble getN();\n\tVector getStd();\n\tVector getVariance();\n\tvoid observe(Vector x, double weight); // Observe the vector\n}"}
{"index": 9159, "repo": "hbase-server-3.0.0-alpha-4", "des": "Class to help with parsing the version info.", "code": "Class VersionInfoUtil {\n\tstatic <T1,T2,R,E extends Throwable>R callWithVersion(VersionInfoUtil.ServiceCallFunction<T1,T2,R,E> f, T1 t1, T2 t2);\n\tstatic boolean currentClientHasMinimumVersion(int major, int minor);\n\tstatic org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.VersionInfo getCurrentClientVersionInfo(); // Returns the versionInfo extracted from the current RpcCallContext\n\tstatic int getVersionNumber(org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.VersionInfo versionInfo); // Pack the full number version in a int.\n\tstatic boolean hasMinimumVersion(org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.VersionInfo versionInfo, int major, int minor);\n\tstatic String versionNumberToString(int version); // Returns the passed-in version int as a version String (e.g.\n}"}
{"index": 17999, "repo": "spring-ws-core-4.0.5", "des": "Implements the August 2004 edition of the WS-Addressing specification.", "code": "public class Addressing200408 extends AbstractAddressingVersion {\n\tvoid addAddressingHeaders(SoapMessage message, MessageAddressingProperties map); // Adds addressing SOAP headers to the given message, using the given MessageAddressingProperties.\n\tprotected final URI getAnonymous(); // Returns the anonymous URI.\n\tprotected final EndpointReference getDefaultReplyTo(EndpointReference from); // Returns the default ReplyTo EPR.\n\tprotected URI getDefaultTo(); // Returns the default To URI.\n\tprotected final String getInvalidAddressingHeaderFaultReason(); // Returns the reason of the fault that indicates that a header is invalid.\n\tprotected final QName getInvalidAddressingHeaderFaultSubcode(); // Returns the qualified name of the fault subcode that indicates that a header is invalid.\n\tprotected final String getMessageAddressingHeaderRequiredFaultReason(); // Returns the reason of the fault that indicates that a header is missing.\n\tprotected final QName getMessageAddressingHeaderRequiredFaultSubcode(); // Returns the qualified name of the fault subcode that indicates that a header is missing.\n\tprotected final String getNamespaceUri(); // Returns the WS-Addressing namespace handled by this specification.\n\tprotected final URI getNone(); // Returns the none URI, or null if the spec does not define it.\n\tboolean hasRequiredProperties(MessageAddressingProperties map); // Indicates whether the given MessageAddressingProperties has all required properties.\n\tboolean isToHeaderRequired(); // Indicates whether the wsa:To header is REQUIRED or not.\n}"}
{"index": 12523, "repo": "spring-jdbc-6.0.11", "des": "A generic implementation of the TableMetaDataProvider interface which should provide enough features for all supported databases.", "code": "public class GenericTableMetaDataProvider extends Object implements TableMetaDataProvider {\n\tString catalogNameToUse(String catalogName); // Get the catalog name formatted based on meta-data information.\n\tprotected String getDatabaseVersion(); // Provide access to version info for subclasses.\n\tprotected String getDefaultSchema(); // Provide access to default schema for subclasses.\n\tString getSimpleQueryForGetGeneratedKey(String tableName, String keyColumnName); // Get the simple query to retrieve a generated key.\n\tList<TableParameterMetaData> getTableParameterMetaData(); // Get the table parameter meta-data that is currently used.\n\tvoid initializeWithMetaData(DatabaseMetaData databaseMetaData); // Initialize using the database meta-data provided.\n\tvoid initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName); // Initialize using provided database meta-data, table and column information.\n\tboolean isGeneratedKeysColumnNameArraySupported(); // Does this database support a column name String array for retrieving generated keys: Connection.createStruct(String, Object[])?\n\tboolean isGetGeneratedKeysSimulated(); // Does this database support a simple query to retrieve the generated key when the JDBC 3.0 feature of retrieving generated keys is not supported?\n\tboolean isGetGeneratedKeysSupported(); // Does this database support the JDBC 3.0 feature of retrieving generated keys: DatabaseMetaData.supportsGetGeneratedKeys()?\n\tboolean isStoresLowerCaseIdentifiers();\n\tboolean isStoresUpperCaseIdentifiers();\n\tboolean isTableColumnMetaDataUsed(); // Are we using the meta-data for the table columns?\n\tString metaDataCatalogNameToUse(String catalogName); // Provide any modification of the catalog name passed in to match the meta-data currently used.\n\tString metaDataSchemaNameToUse(String schemaName); // Provide any modification of the schema name passed in to match the meta-data currently used.\n\tString schemaNameToUse(String schemaName); // Get the schema name formatted based on meta-data information.\n\tvoid setGeneratedKeysColumnNameArraySupported(boolean generatedKeysColumnNameArraySupported);\n\tvoid setGetGeneratedKeysSupported(boolean getGeneratedKeysSupported);\n\tvoid setStoresLowerCaseIdentifiers(boolean storesLowerCaseIdentifiers);\n\tvoid setStoresUpperCaseIdentifiers(boolean storesUpperCaseIdentifiers);\n\tString tableNameToUse(String tableName); // Get the table name formatted based on meta-data information.\n}"}
{"index": 1982, "repo": "hive-exec-4.0.0-alpha-2", "des": "Cache for storing boundaries found within a partition - used for PTF functions.", "code": "Class BoundaryCache {\n\tvoid clear();\n\tvoid evictOne(); // Removes eldest entry from the boundary cache.\n\tvoid evictThisAndAllBefore(int rowIdx);\n\tMap.Entry<Integer,Object> getMaxEntry(); // Returns entry corresponding to highest row index.\n\tboolean isComplete(); // True if the last range(s) of the partition are loaded into the cache.\n\tBoolean isFull(); // Checks if cache is full.\n\tObject put(Integer key, Object value);\n\tBoolean putIfNotFull(Integer key, Object value); // Puts new key-value pair in cache.\n\tvoid setComplete(boolean complete);\n}"}
{"index": 11176, "repo": "wicket-extensions-10.0.0-M1", "des": "An abstract helper implementation of IDataExporter.", "code": "public abstract class AbstractDataExporter extends Object implements IDataExporter {\n\tString getContentType(); // Returns the MIME content type of the export data type.\n\torg.apache.wicket.model.IModel<String> getDataFormatNameModel(); // Returns a model of the exported data format name.\n\tString getFileNameExtension(); // Returns the file name extensions for the exported data, without the \".\".\n\tAbstractDataExporter setContentType(String contentType); // Sets the MIME contentType for the data export format.\n\tAbstractDataExporter setDataFormatNameModel(org.apache.wicket.model.IModel<String> dataFormatNameModel); // Sets the data format name model.\n\tAbstractDataExporter setFileNameExtension(String fileNameExtension); // Sets the file name extension to be used in the exported file name.\n}"}
{"index": 16742, "repo": "spring-jms-6.0.11", "des": "Return type of any JMS listener method used to indicate the actual response destination alongside the response itself.", "code": "public class JmsResponse<T> extends Object {\n\tstatic <T> JmsResponse<T> forDestination(T result, Destination destination); // Create a JmsResponse targeting the specified Destination.\n\tstatic <T> JmsResponse<T> forQueue(T result, String queueName); // Create a JmsResponse targeting the queue with the specified name.\n\tstatic <T> JmsResponse<T> forTopic(T result, String topicName); // Create a JmsResponse targeting the topic with the specified name.\n\tT getResponse(); // Return the content of the response.\n\tDestination resolveDestination(DestinationResolver destinationResolver, Session session); // Resolve the Destination to use for this instance.\n}"}
{"index": 3375, "repo": "hadoop-azure-3.3.6", "des": "Provides tokens based on custom implementation, following the Adapter Design Pattern.", "code": "Class CustomTokenProviderAdapter {\n\tvoid bind(URI fsURI, org.apache.hadoop.conf.Configuration conf); // Bind to the filesystem by passing the binding call on to any custom token provider adaptee which implements BoundDTExtension.\n\tvoid close();\n\tprotected CustomTokenProviderAdaptee getCustomTokenProviderAdaptee();\n\tString getUserAgentSuffix(); // Get a suffix for the UserAgent suffix of HTTP requests, which can be used to identify the principal making ABFS requests.\n\tprotected AzureADToken refreshToken(); // the method to fetch the access token.\n}"}
{"index": 14739, "repo": "spring-data-commons-3.1.2", "des": "A ScrollPosition based on the last seen key set.", "code": "public final class KeysetScrollPosition extends Object implements ScrollPosition {\n\tKeysetScrollPosition backward(); // Returns a KeysetScrollPosition based on the same keyset and scrolling backward.\n\tboolean equals(Object o);\n\tKeysetScrollPosition forward(); // Returns a KeysetScrollPosition based on the same keyset and scrolling forward.\n\tScrollPosition.Direction getDirection();\n\tMap<String,Object> getKeys();\n\tboolean isInitial(); // Returns whether the current scroll position is the initial one.\n\tKeysetScrollPosition reverse(); // Returns a new KeysetScrollPosition with the direction reversed.\n\tboolean scrollsBackward(); // Returns whether the current KeysetScrollPosition scrolls backward.\n\tboolean scrollsForward(); // Returns whether the current KeysetScrollPosition scrolls forward.\n}"}
{"index": 283, "repo": "hadoop-yarn-client-3.3.6", "des": "The type of the event of interacting with a container.", "code": "Enum NMClientAsyncImpl.ContainerEventType {\n\tstatic NMClientAsyncImpl.ContainerEventType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic NMClientAsyncImpl.ContainerEventType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 15613, "repo": "spring-security-core-6.1.2", "des": "An AuthorizationManager which can determine if an Authentication may invoke the MethodInvocation by evaluating if the Authentication contains a specified authority from the JSR-250 security annotations.", "code": "public final class Jsr250AuthorizationManager extends Object implements AuthorizationManager<org.aopalliance.intercept.MethodInvocation> {\n\tAuthorizationDecision check(Supplier<Authentication> authentication, org.aopalliance.intercept.MethodInvocation methodInvocation); // Determine if an Authentication has access to a method by evaluating the DenyAll, PermitAll, and RolesAllowed annotations that MethodInvocation specifies.\n\tvoid setRolePrefix(String rolePrefix); // Sets the role prefix.\n}"}
{"index": 11332, "repo": "spring-context-6.0.11", "des": "Special implementation of the Errors and BindingResult interfaces, supporting registration and evaluation of binding errors on value objects.", "code": "public class DirectFieldBindingResult extends AbstractPropertyBindingResult {\n\tprotected org.springframework.beans.ConfigurablePropertyAccessor createDirectFieldAccessor(); // Create a new DirectFieldAccessor for the underlying target object.\n\tfinal org.springframework.beans.ConfigurablePropertyAccessor getPropertyAccessor(); // Returns the DirectFieldAccessor that this instance uses.\n\tfinal Object getTarget(); // Return the wrapped target object.\n}"}
{"index": 2054, "repo": "hive-exec-4.0.0-alpha-2", "des": "ETypeConverter is an easy way to set the converter for the right type.", "code": "Enum ETypeConverter {\n\tstatic org.apache.parquet.io.api.PrimitiveConverter getNewConverter(org.apache.parquet.schema.PrimitiveType type, int index, org.apache.hadoop.hive.ql.io.parquet.convert.ConverterParent parent, TypeInfo hiveTypeInfo);\n\tstatic boolean isUnsignedInteger(org.apache.parquet.schema.PrimitiveType type);\n\tstatic ETypeConverter valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ETypeConverter[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12458, "repo": "spring-integration-jmx-6.1.2", "des": "A MessageHandler implementation for invoking JMX operations based on the Message sent to its AbstractMessageHandler.handleMessage(Message) method.", "code": "public class OperationInvokingMessageHandler extends org.springframework.integration.handler.AbstractReplyProducingMessageHandler {\n\tString getComponentType();\n\torg.springframework.integration.IntegrationPatternType getIntegrationPatternType();\n\tprotected Object handleRequestMessage(org.springframework.messaging.Message<?> requestMessage);\n\tvoid setExpectReply(boolean expectReply); // Specify whether a reply Message is expected.\n\tvoid setObjectName(String objectName); // Specify a default ObjectName to use when no such header is available on the Message being handled.\n\tvoid setOperationName(String operationName); // Specify an operation name to be invoked when no such header is available on the Message being handled.\n}"}
{"index": 7814, "repo": "cassandra-all-4.1.2", "des": "Netty's DefaultPromise uses a mutex to coordinate notifiers AND waiters between the eventLoop and the other threads.", "code": "Class SyncFuture<V> {\n\tFuture<V> await(); // Wait indefinitely for this future to complete, throwing any interrupt\n\tboolean awaitUntil(long deadline); // Await until the deadline (in nanoTime), throwing any interrupt.\n\t<T> Future<T> flatMap(java.util.function.Function<? super V,? extends Future<T>> flatMapper, java.util.concurrent.Executor executor); // Support Futures.transformAsync(ListenableFuture, AsyncFunction, Executor) natively See AbstractFuture.addListener(GenericFutureListener) for ordering semantics.\n\t<T> Future<T> map(java.util.function.Function<? super V,? extends T> mapper, java.util.concurrent.Executor executor); // Support Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor) natively See AbstractFuture.addListener(GenericFutureListener) for ordering semantics.\n}"}
{"index": 5448, "repo": "druid-processing-26.0.0", "des": "Low level interface for interacting with different storage providers like S3, GCS, Azure and local file system.", "code": "Interface StorageConnector {\n\tvoid deleteFile(String path); // Delete file present at the input path.\n\tvoid deleteFiles(Iterable<String> paths); // Delete files present at the input paths.\n\tvoid deleteRecursively(String path); // Delete a directory pointed to by the path and also recursively deletes all files/directories in said directory.\n\tIterator<String> listDir(String dirName); // Returns a lazy iterator containing all the files present in the path.\n\tboolean pathExists(String path); // Check if the path exists in the underlying storage layer.\n\tInputStream read(String path); // Reads the data present at the path in the underlying storage system.\n\tInputStream readRange(String path, long from, long size); // Reads the data present for a given range at the path in the underlying storage system.\n\tOutputStream write(String path); // Open an OutputStream for writing data to the path in the underlying storage system.\n}"}
{"index": 13309, "repo": "shiro-core-2.0.0-alpha-2", "des": "Base support class for implementations that reads and processes JSR-175 annotations.", "code": "public abstract class AnnotationHandler extends Object {\n\tClass<? extends Annotation> getAnnotationClass(); // Returns the type of annotation this handler inspects and processes.\n\tprotected Subject getSubject(); // Returns the Subject associated with the currently-executing code.\n\tprotected void setAnnotationClass(Class<? extends Annotation> annotationClass); // Sets the type of annotation this handler will inspect and process.\n}"}
{"index": 8991, "repo": "hbase-server-3.0.0-alpha-4", "des": "Types of actions to be done on the pipeline upon MemStoreCompaction invocation.", "code": "Enum MemStoreCompactionStrategy.Action {\n\tstatic MemStoreCompactionStrategy.Action valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic MemStoreCompactionStrategy.Action[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4926, "repo": "hadoop-common-3.3.4", "des": "A base class for Writables that provides version checking.", "code": "Class VersionedWritable {\n\tabstract byte getVersion(); // Return the version number of the current implementation.\n\tvoid readFields(DataInput in); // Deserialize the fields of this object from in.\n\tvoid write(DataOutput out); // Serialize the fields of this object to out.\n}"}
{"index": 8803, "repo": "graal-sdk-1.0.0-rc7", "des": "A polyglot exception represents errors that contain Graal guest languages on the stack trace.", "code": "Class PolyglotException {\n\tThrowable asHostException(); // Returns the original Java host exception that caused this exception.\n\tboolean equals(Object obj);\n\tThrowable fillInStackTrace(); // Unsupported, PolyglotException instances are not writable therefore filling the stack trace has no effect for them.\n\tint getExitStatus(); // Returns the exit status if this exception indicates that the application was exited.\n\tValue getGuestObject(); // Returns an additional guest language object.\n\tString getMessage(); // Gets a user readable message for the polyglot exception.\n\tIterable<PolyglotException.StackFrame> getPolyglotStackTrace(); // Provides programmatic access to the polyglot stack trace information printed by PolyglotException.printStackTrace().\n\tSourceSection getSourceLocation(); // Gets a guest language source location of this error or null if no source location is available for this exception.\n\tStackTraceElement[] getStackTrace(); // Gets stack trace elements for Java and guest languages.\n\tboolean isCancelled(); // Returns true if the execution was cancelled.\n\tboolean isExit(); // Returns true if this exception is caused by an attempt of a guest language program to exit the application using a builtin command.\n\tboolean isGuestException(); // Returns true if this exception originates from a Graal guest language.\n\tboolean isHostException(); // Returns true if this exception originates from the Java host language.\n\tboolean isIncompleteSource(); // Returns true if this exception indicates a syntax error that is indicating that the syntax is incomplete.\n\tboolean isInternalError(); // Returns true if this exception was caused by an internal implementation error.\n\tboolean isSyntaxError(); // Returns true if this exception indicates a parser or syntax error.\n\tvoid printStackTrace(); // Prints host and guest language stack frames to the standard error output.\n\tvoid printStackTrace(PrintStream s); // Prints host and guest language stack frames to specified print stream.\n\tvoid printStackTrace(PrintWriter s); // Prints host and guest language stack frames to specified print writer.\n\tvoid setStackTrace(StackTraceElement[] stackTrace); // Unsupported, PolyglotException instances are not writable therefore setting the stack trace has no effect for them.\n}"}
{"index": 14666, "repo": "spring-data-commons-3.1.2", "des": "RepositoryMetadata implementation inspecting the given repository interface for a RepositoryDefinition annotation.", "code": "public class AnnotationRepositoryMetadata extends AbstractRepositoryMetadata {\n\tTypeInformation<?> getDomainTypeInformation(); // Returns the TypeInformationof the domain type the repository is declared to manage.\n\tSet<RepositoryFragment<?>> getFragments();\n\tTypeInformation<?> getIdTypeInformation(); // Returns the TypeInformation of the id type of the repository.\n}"}
{"index": 13068, "repo": "spring-aop-6.0.11", "des": "Interface to be implemented by Spring AOP Advisors wrapping AspectJ aspects that may have a lazy initialization strategy.", "code": "public interface InstantiationModelAwarePointcutAdvisor extends PointcutAdvisor {\n\tboolean isAdviceInstantiated(); // Return whether this advisor has already instantiated its advice.\n\tboolean isLazy(); // Return whether this advisor is lazily initializing its underlying advice.\n}"}
{"index": 12743, "repo": "spring-data-mongodb-4.1.2", "des": "Encapsulates the aggregation framework $graphLookup-operation.", "code": "public class GraphLookupOperation extends Object implements FieldsExposingAggregationOperation.InheritsFieldsAggregationOperation {\n\tstatic GraphLookupOperation.FromBuilder builder(); // Creates a new GraphLookupOperation.FromBuilder to build GraphLookupOperation.\n\tExposedFields getFields(); // Returns the fields exposed by the AggregationOperation.\n\tString getOperator(); // Return the MongoDB operator that is used for this AggregationOperation.\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n}"}
{"index": 7726, "repo": "cassandra-all-4.1.2", "des": "Provides basic, thread safe ProgressEvent notification support.", "code": "Class ProgressEventNotifierSupport {\n\tvoid addProgressListener(ProgressListener listener); // Register progress listener to this publisher.\n\tprotected void fireProgressEvent(java.lang.String tag, ProgressEvent event);\n\tvoid removeProgressListener(ProgressListener listener); // Remove progress listener from this publisher.\n}"}
{"index": 1587, "repo": "pdfbox-3.0.0-beta1", "des": "The dimension in which the specified transition effect shall occur.", "code": "Enum PDTransitionDimension {\n\tstatic PDTransitionDimension valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PDTransitionDimension[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4651, "repo": "commons-vfs2-2.9.0", "des": "A FileSelector that selects based on regular expressions.", "code": "Class PatternFileSelector {\n\tboolean includeFile(FileSelectInfo fileInfo); // Determines if a file or folder should be selected.\n\tboolean traverseDescendents(FileSelectInfo fileInfo); // Determines whether a folder should be traversed.\n}"}
{"index": 4921, "repo": "hadoop-common-3.3.4", "des": "This interface is used for implementing different Trash policies.", "code": "Class TrashPolicy {\n\tabstract void createCheckpoint(); // Create a trash checkpoint.\n\tabstract void deleteCheckpoint(); // Delete old trash checkpoint(s).\n\tabstract void deleteCheckpointsImmediately(); // Delete all checkpoints immediately, ie empty trash.\n\tabstract Path getCurrentTrashDir(); // Get the current working directory of the Trash Policy This API does not work with files deleted from encryption zone when HDFS data encryption at rest feature is enabled as rename file between encryption zones or encryption zone and non-encryption zone is not allowed.\n\tPath getCurrentTrashDir(Path path); // Get the current trash directory for path specified based on the Trash Policy\n\tabstract Runnable getEmptier(); // Return a Runnable that periodically empties the trash of all users, intended to be run by the superuser.\n\tstatic TrashPolicy getInstance(Configuration conf, FileSystem fs); // Get an instance of the configured TrashPolicy based on the value of the configuration parameter fs.trash.classname.\n\tvoid initialize(Configuration conf, FileSystem fs); // Used to setup the trash policy.\n\tabstract boolean isEnabled(); // Returns whether the Trash Policy is enabled for this filesystem.\n\tabstract boolean moveToTrash(Path path); // Move a file or directory to the current trash directory.\n}"}
{"index": 11868, "repo": "spring-kafka-3.0.9", "des": "Creates a KafkaStreamsMetrics for the KafkaStreams.", "code": "public class KafkaStreamsMicrometerListener extends Object implements StreamsBuilderFactoryBean.Listener {\n\tvoid streamsAdded(String id, org.apache.kafka.streams.KafkaStreams kafkaStreams); // A new KafkaStreams was created.\n\tvoid streamsRemoved(String id, org.apache.kafka.streams.KafkaStreams streams); // An existing KafkaStreams was removed.\n}"}
{"index": 15144, "repo": "spring-data-elasticsearch-5.1.2", "des": "Defines a GeoJsonGeometryCollection that consists of a List of GeoJson objects. Copied from Spring Data Mongodb", "code": "public class GeoJsonGeometryCollection extends Object implements GeoJson<Iterable<GeoJson<?>>> {\n\tboolean equals(Object o);\n\tIterable<GeoJson<?>> getCoordinates(); // The value of the coordinates member is always an Iterable.\n\tList<GeoJson<?>> getGeometries();\n\tString getType(); // String value representing the type of the GeoJson object.\n\tstatic GeoJsonGeometryCollection of(List<GeoJson<?>> geometries); // Creates a new GeoJsonGeometryCollection for the given GeoJson instances.\n}"}
{"index": 1246, "repo": "ignite-core-2.15.0", "des": "Transaction metrics, shared across all caches.", "code": "Interface TransactionMetrics {\n\tlong commitTime(); // Gets last time transaction was committed.\n\tMap<String,String> getAllOwnerTransactions(); // Gets a map of all transactions for which the local node is the originating node.\n\tlong getLockedKeysNumber(); // The number of keys locked on the node.\n\tMap<String,String> getLongRunningOwnerTransactions(int duration); // Gets a map of all transactions for which the local node is the originating node and which duration exceeds the given duration.\n\tlong getOwnerTransactionsNumber(); // The number of active transactions for which this node is the initiator.\n\tlong getTransactionsCommittedNumber(); // The number of transactions which were committed on the local node.\n\tlong getTransactionsHoldingLockNumber(); // The number of active transactions on the local node holding at least one key lock.\n\tlong getTransactionsRolledBackNumber(); // The number of transactions which were rolled back on the local node.\n\tlong rollbackTime(); // Gets last time transaction was rollback.\n\tint txCommits(); // Gets total number of transaction commits.\n\tint txRollbacks(); // Gets total number of transaction rollbacks.\n}"}
{"index": 6744, "repo": "commons-rng-simple-1.5", "des": "This class provides the API for creating generators of random numbers.", "code": "Enum RandomSource {\n\tRestorableUniformRandomProvider create(); // Creates a random number generator with a random seed.\n\tRestorableUniformRandomProvider create(Object seed, Object... data); // Creates a random number generator with the given seed.\n\tstatic int createInt(); // Creates a number for use as a seed.\n\tstatic int[] createIntArray(int n); // Creates an array of numbers for use as a seed.\n\tstatic long createLong(); // Creates a number for use as a seed.\n\tstatic long[] createLongArray(int n); // Creates an array of numbers for use as a seed.\n\tbyte[] createSeed(); // Creates a seed suitable for the implementing class represented by this random source.\n\tbyte[] createSeed(UniformRandomProvider rng); // Creates a seed suitable for the implementing class represented by this random source using the supplied source of randomness.\n\tboolean isJumpable(); // Checks whether the implementing class represented by this random source supports the JumpableUniformRandomProvider interface.\n\tboolean isLongJumpable(); // Checks whether the implementing class represented by this random source supports the LongJumpableUniformRandomProvider interface.\n\tboolean isNativeSeed(Object seed); // Checks whether the type of given seed is the native type of the implementation.\n\tboolean isSplittable(); // Checks whether the implementing class represented by this random source supports the SplittableUniformRandomProvider interface.\n\tstatic UniformRandomProvider unrestorable(UniformRandomProvider delegate); // Wraps the given delegate generator in a new instance that only provides access to the UniformRandomProvider methods.\n\tstatic RandomSource valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RandomSource[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18287, "repo": "tomcat-api-10.1", "des": "Allows pooled objects to make information available about when and how they were used available to the object pool.", "code": "Interface TrackedUse {\n\tlong getLastUsed(); // Deprecated. Use getLastUsedInstant() which offers the best precision.\n\tdefault Instant getLastUsedInstant(); // Gets the last Instant this object was used.\n}"}
{"index": 5422, "repo": "druid-processing-26.0.0", "des": "Utility methods useful for implementing deep storage extensions.", "code": "Class SegmentUtils {\n\tstatic Object commaSeparatedIdentifiers(Collection<DataSegment> segments); // Returns an object whose toString() returns a String with identifiers of the given segments, comma-separated.\n\tstatic int getVersionFromDir(File inDir);\n\tstatic Map<org.joda.time.Interval,List<DataSegment>> groupSegmentsByInterval(Collection<DataSegment> segments);\n\tstatic String hashIds(List<DataSegment> segments); // Hash the IDs of the given segments based on SHA-256 algorithm.\n}"}
{"index": 4069, "repo": "zookeeper-3.8.2", "des": "This class starts and runs a standalone ZooKeeperServer.", "code": "Class ZooKeeperServerMain {\n\tvoid close(); // Shutdowns properly the service, this method is not a public API.\n\tprotected void initializeAndRun(String[] args);\n\tstatic void main(String[] args);\n\tvoid runFromConfig(ServerConfig config); // Run from a ServerConfig.\n\tprotected void serverStarted();\n\tprotected void shutdown(); // Shutdown the serving instance\n}"}
{"index": 17889, "repo": "spring-web-6.0.11", "des": "Handle ResponseStatusException by setting the response status.", "code": "public class ResponseStatusExceptionHandler extends Object implements WebExceptionHandler {\n\tprotected int determineRawStatusCode(Throwable ex); // Deprecated. as of 6.0, in favor of determineStatus(Throwable)\n\tprotected HttpStatusCode determineStatus(Throwable ex); // Determine the HTTP status for the given exception.\n\treactor.core.publisher.Mono<Void> handle(ServerWebExchange exchange, Throwable ex); // Handle the given exception.\n\tvoid setWarnLogCategory(String loggerName); // Set the log category for warn logging.\n}"}
{"index": 8809, "repo": "graal-sdk-1.0.0-rc7", "des": "Contains static methods that provide access to the size of dereferenced SystemJava pointer types (i.", "code": "Class SizeOf {\n\tstatic int get(Class<? extends PointerBase> clazz); // Returns the size of the data structure pointed to by SystemJava pointer types.\n\tstatic UnsignedWord unsigned(Class<? extends PointerBase> clazz); // Returns the size cast to UnsignedWord.\n}"}
{"index": 16155, "repo": "spring-data-cassandra-4.1.2", "des": "Simple enumeration for the various compression types.", "code": "public enum CompressionType extends Enum<CompressionType> {\n\tstatic CompressionType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic CompressionType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 12210, "repo": "jena-core-4.9.0", "des": "A base class for composition graphs that are composed from zero or more sub-graphs (thus providing a basis for polyadic composition operators).", "code": "public abstract class Polyadic extends CompositionBase {\n\tvoid addGraph(Graph graph); // Add the given graph to this composition.\n\tvoid close(); // Close the graph by closing all of the sub-graphs.\n\tboolean dependsOn(Graph graph); // Answer true if this graph contains the given graph as a sub-component.\n\tGraph getBaseGraph(); // Answer the distinguished graph for the composition, which will be the graph that receives triple adds and deletes.\n\tCapabilities getCapabilities(); // Answer the capabilities of this graph; the default is an AllCapabilities object (the same one each time, not that it matters - Capabilities should be immutable).\n\tGraph getRequiredBaseGraph(); // Answer the distinguished graph for the composition, which will be the graph that receives triple adds and deletes.\n\tList<Graph> getSubGraphs(); // Answer a list of the graphs other than the updateable (base) graph\n\tTransactionHandler getTransactionHandler(); // Answer a transaction handler bound to this graph.\n\tvoid removeGraph(Graph graph); // Remove the given graph from this composition.\n\tvoid setBaseGraph(Graph graph); // Set the designated updateable graph for this composition.\n}"}
{"index": 3522, "repo": "mahout-mr-0.13.0", "des": "Implement Minkowski distance, a real-valued generalization of the integral L(n) distances: Manhattan = L1, Euclidean = L2.", "code": "Class MinkowskiDistanceMeasure {\n\tvoid configure(org.apache.hadoop.conf.Configuration jobConf);\n\tvoid createParameters(String prefix, org.apache.hadoop.conf.Configuration conf); // EXPERT: consumers should never have to call this method.\n\tdouble distance(double centroidLengthSquare, Vector centroid, Vector v); // Optimized version of distance metric for sparse vectors.\n\tdouble distance(Vector v1, Vector v2); // Math.pow is clever about integer-valued doubles\n\tdouble getExponent();\n\tCollection<Parameter<?>> getParameters();\n\tvoid setExponent(double exponent);\n}"}
{"index": 12314, "repo": "jena-core-4.9.0", "des": "Implementation of the ValidationContext interface.", "code": "public class ValidationState extends Object implements ValidationContext {\n\tvoid addId(String name);\n\tvoid addIdRef(String name);\n\tString checkIDRefID(); // return null if all IDREF values have a corresponding ID value; otherwise return the first IDREF value without a matching ID value.\n\tLocale getLocale();\n\tString getSymbol(String symbol);\n\tString getURI(String prefix);\n\tboolean isEntityDeclared(String name);\n\tboolean isEntityUnparsed(String name);\n\tboolean isIdDeclared(String name);\n\tboolean needExtraChecking();\n\tboolean needFacetChecking();\n\tboolean needToNormalize();\n\tvoid reset();\n\tvoid resetIDTables(); // The same validation state can be used to validate more than one (schema) validation roots.\n\tvoid setEntityState(EntityState state);\n\tvoid setExtraChecking(boolean newValue);\n\tvoid setFacetChecking(boolean newValue);\n\tvoid setLocale(Locale locale);\n\tvoid setNamespaceSupport(NamespaceContext namespace);\n\tvoid setNormalizationRequired(boolean newValue);\n\tvoid setSymbolTable(SymbolTable sTable);\n\tvoid setUsingNamespaces(boolean newValue);\n\tboolean useNamespaces();\n}"}
{"index": 14669, "repo": "spring-data-commons-3.1.2", "des": "Interface defining introspection methods for bean definitions.", "code": "public static interface AotContext.IntrospectedBeanDefinition {\n\tBeanDefinition getBeanDefinition(); // Gets the BeanDefinition for the given, required named bean.\n\tRootBeanDefinition getRootBeanDefinition(); // Gets the RootBeanDefinition for the given, required bean name.\n\tboolean isFactoryBean(); // Determines whether a bean identified by the given, required name is a FactoryBean.\n\tboolean isPresent(); // Determines whether a bean definition identified by the given, required name is present.\n\tClass<?> resolveType(); // Resolves the bean's defined type.\n}"}
{"index": 5861, "repo": "hadoop-yarn-server-common-3.3.6", "des": "The FederationPolicyStore provides a key-value interface to access the policies configured for the system.", "code": "Interface FederationPolicyStore {\n\tGetSubClusterPoliciesConfigurationsResponse getPoliciesConfigurations(GetSubClusterPoliciesConfigurationsRequest request); // Get a map of all queue-to-policy configurations.\n\tGetSubClusterPolicyConfigurationResponse getPolicyConfiguration(GetSubClusterPolicyConfigurationRequest request); // Get the policy configuration for a given queue.\n\tSetSubClusterPolicyConfigurationResponse setPolicyConfiguration(SetSubClusterPolicyConfigurationRequest request); // Set the policy configuration for a given queue.\n}"}
{"index": 11058, "repo": "spring-shell-core-3.1.2", "des": "Base implementation suitable for use in most environments.", "code": "public class GenericResultHandlerService extends Object implements ResultHandlerService {\n\t<T> void addResultHandler(Class<T> resultType, ResultHandler<? super T> resultHandler); // Add a plain result handler to this registry.\n\tvoid addResultHandler(GenericResultHandler handler); // Add a generic result handler this this registry.\n\tvoid addResultHandler(ResultHandler<?> resultHandler); // Add a plain result handler to this registry.\n\tvoid handle(Object source); // Handle result.\n\tvoid handle(Object result, org.springframework.core.convert.TypeDescriptor resultType); // Handle result to the specified TypeDescriptor.\n}"}
{"index": 12666, "repo": "spring-data-mongodb-4.1.2", "des": "ICU locale abstraction for usage with MongoDB Collation.", "code": "public static class Collation.CollationLocale extends Object {\n\tString asString(); // Get the string representation.\n\tstatic Collation.CollationLocale of(String language); // Create new Collation.CollationLocale for given language.\n\tCollation.CollationLocale variant(String variant); // Define language variant.\n}"}
{"index": 7618, "repo": "cassandra-all-4.1.2", "des": "Configure an executor before creating it.", "code": "Interface ExecutorBuilder<E extends java.util.concurrent.ExecutorService> {\n\tE build(); // Build the configured executor\n\tExecutorBuilder<E> withDefaultThreadGroup(); // Use the system default thread group for the threads we create.\n\tExecutorBuilder<E> withKeepAlive(); // Core threads for the executor built by this factory will never timeout (default for single threaded builders).\n\tExecutorBuilder<E> withKeepAlive(long keepAlive, java.util.concurrent.TimeUnit keepAliveUnits); // Threads for the executor built by this factory will timeout (terminate) after the specified period.\n\tExecutorBuilder<E> withQueueLimit(int queueLimit); // The executor built by this factory will limit the number of queued tasks; default is unlimited.\n\tExecutorBuilder<E> withRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler rejectedExecutionHandler); // Set the RejectedExecutionHandler for the executor built by this factory.\n\tExecutorBuilder<E> withThreadGroup(java.lang.ThreadGroup threadGroup); // Threads for the executor built by this factory will all be (transitively) members of threadGroup, but may directly reside in a child thread group.\n\tExecutorBuilder<E> withThreadPriority(int threadPriority); // Specify the priority of threads that service the executor built by this factory (default to Thread.NORM_PRIORITY)\n\tExecutorBuilder<E> withUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler uncaughtExceptionHandler); // Set the Thread.UncaughtExceptionHandler for threads that service executors built by this factory.\n}"}
{"index": 12959, "repo": "spring-integration-file-6.1.2", "des": "A FileListFilter that only passes files matched by one or more FileListFilter if a corresponding marker file is also present to indicate a file transfer is complete.", "code": "public abstract class AbstractMarkerFilePresentFileListFilter<F> extends Object implements FileListFilter<F> {\n\tstatic Function<String,String> defaultFileNameFunction(String suffix); // The default function used to create the file name for the corresponding marker file.\n\tList<F> filterFiles(F[] files); // Filters out files and returns the files that are left in a list, or an empty list when a null is passed in.\n\tprotected abstract String getFilename(F file); // Return the name of the file represented by this F.\n}"}
{"index": 17089, "repo": "spring-integration-core-6.1.2", "des": "Configures beans that implement IntegrationManagement.", "code": "public class IntegrationManagementConfigurer extends Object implements org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextClosedEvent> {\n\tvoid afterSingletonsInstantiated();\n\tvoid onApplicationEvent(org.springframework.context.event.ContextClosedEvent event);\n\tObject postProcessAfterInitialization(Object bean, String name);\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid setBeanName(String name);\n\tvoid setDefaultLoggingEnabled(boolean defaultLoggingEnabled); // Disable all logging in the normal message flow in framework components.\n\tvoid setMetricsCaptor(MetricsCaptor metricsCaptor);\n\tvoid setObservationPatterns(String... observationPatterns); // Set simple patterns for component names matching which has to be instrumented with a ObservationRegistry.\n\tvoid setObservationRegistry(io.micrometer.observation.ObservationRegistry observationRegistry); // Set an ObservationRegistry to populate to the IntegrationManagement components in the application context.\n}"}
{"index": 10379, "repo": "spring-core-6.0.11", "des": "TaskExecutor implementation that fires up a new Thread for each task, executing it asynchronously.", "code": "public class SimpleAsyncTaskExecutor extends CustomizableThreadCreator implements AsyncListenableTaskExecutor, Serializable {\n\tprotected void doExecute(Runnable task); // Template method for the actual execution of a task.\n\tvoid execute(Runnable task); // Executes the given task, within a concurrency throttle if configured (through the superclass's settings).\n\tvoid execute(Runnable task, long startTimeout); // Deprecated.\n\tfinal int getConcurrencyLimit(); // Return the maximum number of parallel accesses allowed.\n\tfinal ThreadFactory getThreadFactory(); // Return the external factory to use for creating new Threads, if any.\n\tfinal boolean isThrottleActive(); // Return whether this throttle is currently active.\n\tvoid setConcurrencyLimit(int concurrencyLimit); // Set the maximum number of parallel accesses allowed.\n\tfinal void setTaskDecorator(TaskDecorator taskDecorator); // Specify a custom TaskDecorator to be applied to any Runnable about to be executed.\n\tvoid setThreadFactory(ThreadFactory threadFactory); // Specify an external factory to use for creating new Threads, instead of relying on the local properties of this executor.\n\tFuture<?> submit(Runnable task); // Submit a Runnable task for execution, receiving a Future representing that task.\n\t<T> Future<T> submit(Callable<T> task); // Submit a Callable task for execution, receiving a Future representing that task.\n\tListenableFuture<?> submitListenable(Runnable task); // Submit a Runnable task for execution, receiving a ListenableFuture representing that task.\n\t<T> ListenableFuture<T> submitListenable(Callable<T> task); // Submit a Callable task for execution, receiving a ListenableFuture representing that task.\n}"}
{"index": 5537, "repo": "org.apache.karaf.main-2.4.4", "des": "This class is a logical abstraction for a bundle archive.", "code": "Class BundleArchive {\n\tvoid close();\n\tvoid closeAndDelete(); // This method closes any revisions and deletes the bundle archive directory.\n\tBundleArchiveRevision getCurrentRevision(); // Returns the current revision object for the archive.\n\tLong getCurrentRevisionNumber(); // Returns the current revision object for the archive.\n\tFile getDataFile(String fileName); // Returns a File object corresponding to the data file of the relative path of the specified string.\n\tlong getId(); // Returns the bundle identifier associated with this archive.\n\tlong getLastModified(); // Returns the last modification time of this archive.\n\tString getLocation(); // Returns the location string associated with this archive.\n\tint getPersistentState(); // Returns the persistent state of this archive.\n\tint getStartLevel(); // Returns the start level of this archive.\n\tboolean isRemovalPending();\n\tvoid purge(); // This method removes all old revisions associated with the archive and keeps only the current revision.\n\tvoid revise(String location, InputStream is); // This method adds a revision to the archive using the associated location and input stream.\n\tboolean rollbackRevise(); // This method undoes the previous revision to the archive; this method will remove the latest revision from the archive.\n\tvoid setLastModified(long lastModified); // Sets the the last modification time of this archive.\n\tvoid setPersistentState(int state); // Sets the persistent state of this archive.\n\tvoid setStartLevel(int level); // Sets the the start level of this archive this archive.\n}"}
{"index": 14019, "repo": "spring-retry-2.0.2", "des": "Defines the basic set of operations implemented by RetryOperations to execute operations with configurable retry behaviour.", "code": "public interface RetryOperations {\n\t<T, E extends Throwable>T execute(RetryCallback<T,E> retryCallback); // Execute the supplied RetryCallback with the configured retry semantics.\n\t<T, E extends Throwable>T execute(RetryCallback<T,E> retryCallback, RecoveryCallback<T> recoveryCallback); // Execute the supplied RetryCallback with a fallback on exhausted retry to the RecoveryCallback.\n\t<T, E extends Throwable>T execute(RetryCallback<T,E> retryCallback, RecoveryCallback<T> recoveryCallback, RetryState retryState); // A stateful retry with a recovery path.\n\t<T, E extends Throwable>T execute(RetryCallback<T,E> retryCallback, RetryState retryState); // A simple stateful retry.\n}"}
{"index": 15161, "repo": "spring-data-elasticsearch-5.1.2", "des": "FactoryBean to create ReactiveElasticsearchRepository instances.", "code": "public class ReactiveElasticsearchRepositoryFactoryBean<T extends Repository<S,ID>,S,ID> extends RepositoryFactoryBeanSupport<T,S,ID> {\n\tvoid afterPropertiesSet();\n\tprotected final RepositoryFactorySupport createRepositoryFactory();\n\tprotected RepositoryFactorySupport getFactoryInstance(ReactiveElasticsearchOperations operations); // Creates and initializes a RepositoryFactorySupport instance.\n\tprotected void setMappingContext(MappingContext<?,?> mappingContext);\n\tvoid setReactiveElasticsearchOperations(ReactiveElasticsearchOperations operations); // Configures the ReactiveElasticsearchOperations to be used.\n}"}
{"index": 16760, "repo": "spring-jms-6.0.11", "des": "Proxy for a target JMS ConnectionFactory, adding awareness of Spring-managed transactions.", "code": "public class TransactionAwareConnectionFactoryProxy extends Object implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory {\n\tConnection createConnection();\n\tConnection createConnection(String username, String password);\n\tJMSContext createContext();\n\tJMSContext createContext(int sessionMode);\n\tJMSContext createContext(String userName, String password);\n\tJMSContext createContext(String userName, String password, int sessionMode);\n\tQueueConnection createQueueConnection();\n\tQueueConnection createQueueConnection(String username, String password);\n\tTopicConnection createTopicConnection();\n\tTopicConnection createTopicConnection(String username, String password);\n\tprotected ConnectionFactory getTargetConnectionFactory(); // Return the target ConnectionFactory that this ConnectionFactory should delegate to.\n\tprotected Connection getTransactionAwareConnectionProxy(Connection target); // Wrap the given Connection with a proxy that delegates every method call to it but handles Session lookup in a transaction-aware fashion.\n\tprotected boolean isSynchedLocalTransactionAllowed(); // Return whether to allow for a local JMS transaction that is synchronized with a Spring-managed transaction.\n\tvoid setSynchedLocalTransactionAllowed(boolean synchedLocalTransactionAllowed); // Set whether to allow for a local JMS transaction that is synchronized with a Spring-managed transaction (where the main transaction might be a JDBC-based one for a specific DataSource, for example), with the JMS transaction committing right after the main transaction.\n\tfinal void setTargetConnectionFactory(ConnectionFactory targetConnectionFactory); // Set the target ConnectionFactory that this ConnectionFactory should delegate to.\n}"}
{"index": 15626, "repo": "spring-security-core-6.1.2", "des": "An AuthorizationManager which can determine if an Authentication may return the result from an invoked MethodInvocation by evaluating an expression from the PostAuthorize annotation.", "code": "public final class PostAuthorizeAuthorizationManager extends Object implements AuthorizationManager<MethodInvocationResult> {\n\tAuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocationResult mi); // Determine if an Authentication has access to the returned object by evaluating the PostAuthorize annotation that the MethodInvocation specifies.\n\tvoid setExpressionHandler(MethodSecurityExpressionHandler expressionHandler); // Use this the MethodSecurityExpressionHandler.\n}"}
{"index": 246, "repo": "commons-collections4-4.4", "des": "Decorates another List to transform objects that are added.", "code": "Class TransformedList<E> {\n\tvoid add(int index, E object);\n\tboolean addAll(int index, Collection<? extends E> coll);\n\tboolean equals(Object object);\n\tE get(int index);\n\tprotected List<E> getList(); // Gets the decorated list.\n\tint indexOf(Object object);\n\tint lastIndexOf(Object object);\n\tListIterator<E> listIterator();\n\tListIterator<E> listIterator(int i);\n\tE remove(int index);\n\tE set(int index, E object);\n\tList<E> subList(int fromIndex, int toIndex);\n\tstatic <E> TransformedList<E> transformedList(List<E> list, Transformer<? super E,? extends E> transformer); // Factory method to create a transforming list that will transform existing contents of the specified list.\n\tstatic <E> TransformedList<E> transformingList(List<E> list, Transformer<? super E,? extends E> transformer); // Factory method to create a transforming list.\n}"}
{"index": 17551, "repo": "spring-security-oauth2-resource-server-6.1.2", "des": "An AuthenticationEntryPoint implementation used to commence authentication of protected resource requests using BearerTokenAuthenticationFilter.", "code": "public final class BearerTokenAuthenticationEntryPoint extends Object implements org.springframework.security.web.AuthenticationEntryPoint {\n\tvoid commence(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException authException); // Collect error details from the provided parameters and format according to RFC 6750, specifically error, error_description, error_uri, and scope.\n\tvoid setRealmName(String realmName); // Set the default realm name to use in the bearer token error response\n}"}
{"index": 13637, "repo": "slf4j-ext-2.0.7", "des": "A poor man's profiler to measure the time elapsed performing some lengthy task.", "code": "public class Profiler extends Object implements TimeInstrument {\n\tlong elapsedTime(); // Time elapsed between start and stop, in nanoseconds.\n\tList<TimeInstrument> getCopyOfChildTimeInstruments(); // Return a copy of the child instrument list for this Profiler instance.\n\tStopWatch getCopyOfGlobalStopWatch(); // Return a copy of the global stopwatch of this Profiler instance.\n\tLogger getLogger();\n\tString getName(); // All time instruments are named entities.\n\tProfilerRegistry getProfilerRegistry();\n\torg.slf4j.profiler.TimeInstrumentStatus getStatus();\n\tvoid log(); // If the time instrument has an associated logger, then log information about this time instrument.\n\tvoid print(); // Print information about this time instrument on the console.\n\tvoid registerWith(ProfilerRegistry profilerRegistry);\n\tvoid setLogger(Logger logger);\n\tvoid start(String name); // Starts a child stop watch and stops any previously started time instruments.\n\tProfiler startNested(String name);\n\tTimeInstrument stop(); // Stop this time instrument.\n}"}
{"index": 3833, "repo": "hbase-client-3.0.0-alpha-4", "des": "This filter is used to filter based on the column family.", "code": "Class FamilyFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tstatic FamilyFilter parseFrom(byte[] pbBytes); // Parse the serialized representation of FamilyFilter\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 7813, "repo": "cassandra-all-4.1.2", "des": "StreamTransferTask sends streams for a given table.", "code": "Class StreamTransferTask {\n\tvoid abort(); // Abort the task.\n\tvoid addTransferStream(OutgoingStream stream);\n\tvoid complete(int sequenceNumber); // Received ACK for stream at sequenceNumber.\n\tOutgoingStreamMessage createMessageForRetry(int sequenceNumber);\n\tjava.util.Collection<OutgoingStreamMessage> getFileMessages();\n\tint getTotalNumberOfFiles();\n\tlong getTotalSize();\n\tjava.util.concurrent.ScheduledFuture<?> scheduleTimeout(int sequenceNumber, long time, java.util.concurrent.TimeUnit unit); // Schedule timeout task to release reference for stream sent.\n\tstatic void shutdownAndWait(long timeout, java.util.concurrent.TimeUnit units);\n\tvoid timeout(int sequenceNumber); // Received ACK for stream at sequenceNumber.\n}"}
{"index": 14579, "repo": "spring-security-web-6.1.2", "des": "A builder for RequestMatcherDelegatingAuthorizationManager.", "code": "public static final class RequestMatcherDelegatingAuthorizationManager.Builder extends Object {\n\tRequestMatcherDelegatingAuthorizationManager.Builder add(RequestMatcher matcher, org.springframework.security.authorization.AuthorizationManager<RequestAuthorizationContext> manager); // Maps a RequestMatcher to an AuthorizationManager.\n\tRequestMatcherDelegatingAuthorizationManager build(); // Creates a RequestMatcherDelegatingAuthorizationManager instance.\n\tRequestMatcherDelegatingAuthorizationManager.Builder mappings(Consumer<List<RequestMatcherEntry<org.springframework.security.authorization.AuthorizationManager<RequestAuthorizationContext>>>> mappingsConsumer); // Allows to configure the RequestMatcher to AuthorizationManager mappings.\n}"}
{"index": 11257, "repo": "spring-context-6.0.11", "des": "Convenient base class for ApplicationContext implementations, drawing configuration from XML documents containing bean definitions understood by an XmlBeanDefinitionReader.", "code": "public abstract class AbstractXmlApplicationContext extends AbstractRefreshableConfigApplicationContext {\n\tprotected org.springframework.core.io.Resource[] getConfigResources(); // Return an array of Resource objects, referring to the XML bean definition files that this context should be built with.\n\tprotected void initBeanDefinitionReader(org.springframework.beans.factory.xml.XmlBeanDefinitionReader reader); // Initialize the bean definition reader used for loading the bean definitions of this context.\n\tprotected void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory); // Loads the bean definitions via an XmlBeanDefinitionReader.\n\tprotected void loadBeanDefinitions(org.springframework.beans.factory.xml.XmlBeanDefinitionReader reader); // Load the bean definitions with the given XmlBeanDefinitionReader.\n\tvoid setValidating(boolean validating); // Set whether to use XML validation.\n}"}
{"index": 1833, "repo": "nifi-web-api-0.5.0", "des": "RESTful endpoint for managing a cluster connection.", "code": "Class NodeResource {\n\tjavax.ws.rs.core.Response deleteNode(ClientIdParameter clientId, String id); // Removes the specified from this NiFi cluster.\n\tjavax.ws.rs.core.Response getNode(ClientIdParameter clientId, String id); // Gets the contents of the specified node in this NiFi cluster.\n\tjavax.ws.rs.core.Response getNodeStatus(ClientIdParameter clientId, String id); // Gets the status for the specified node.\n\tjavax.ws.rs.core.Response getNodeSystemDiagnostics(ClientIdParameter clientId, String id); // Gets the system diagnositics for the specified node.\n\tvoid setProperties(NiFiProperties properties);\n\tvoid setServiceFacade(NiFiServiceFacade serviceFacade);\n\tjavax.ws.rs.core.Response updateNode(ClientIdParameter clientId, String id, String status, Boolean primary); // Updates the contents of the specified node in this NiFi cluster.\n\tjavax.ws.rs.core.Response updateNode(String id, NodeEntity nodeEntity); // Updates the contents of the specified node in this NiFi cluster.\n}"}
{"index": 6290, "repo": "commons-codec-1.16.0", "des": "Converts between byte arrays and strings of \"0\"s and \"1\"s.", "code": "Class BinaryCodec {\n\tbyte[] decode(byte[] ascii); // Decodes a byte array where each byte represents an ASCII '0' or '1'.\n\tObject decode(Object ascii); // Decodes a byte array where each byte represents an ASCII '0' or '1'.\n\tbyte[] encode(byte[] raw); // Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n\tObject encode(Object raw); // Converts an array of raw binary data into an array of ASCII 0 and 1 chars.\n\tstatic byte[] fromAscii(byte[] ascii); // Decodes a byte array where each byte represents an ASCII '0' or '1'.\n\tstatic byte[] fromAscii(char[] ascii); // Decodes a char array where each char represents an ASCII '0' or '1'.\n\tstatic byte[] toAsciiBytes(byte[] raw); // Converts an array of raw binary data into an array of ASCII 0 and 1 character bytes - each byte is a truncated char.\n\tstatic char[] toAsciiChars(byte[] raw); // Converts an array of raw binary data into an array of ASCII 0 and 1 characters.\n\tstatic String toAsciiString(byte[] raw); // Converts an array of raw binary data into a String of ASCII 0 and 1 characters.\n\tbyte[] toByteArray(String ascii); // Decodes a String where each char of the String represents an ASCII '0' or '1'.\n}"}
{"index": 2722, "repo": "commons-dbcp2-2.9.0", "des": "A delegating connection that, rather than closing the underlying connection, returns itself to an ObjectPool when closed.", "code": "Class PoolableConnection {\n\tvoid abort(Executor executor); // Abort my underlying Connection.\n\tvoid close(); // Returns me to my pool.\n\tCollection<String> getDisconnectionSqlCodes();\n\tString getToString(); // Expose the DelegatingConnection.toString() method via a bean getter so it can be read as a property via JMX.\n\tprotected void handleException(SQLException e); // Handles the given exception by throwing it.\n\tboolean isClosed();\n\tboolean isFastFailValidation();\n\tprotected void passivate();\n\tvoid reallyClose(); // Actually close my underlying Connection.\n\tvoid validate(String sql, int timeoutSeconds); // Validates the connection, using the following algorithm: If fastFailValidation (constructor argument) is true and this connection has previously thrown a fatal disconnection exception, a SQLException is thrown. If sql is null, the driver's #isValid(timeout) is called.\n}"}
{"index": 15921, "repo": "spring-rabbit-3.0.6", "des": "A RabbitListenerContainerFactory implementation to build a regular DirectMessageListenerContainer.", "code": "public class DirectRabbitListenerContainerFactory extends AbstractRabbitListenerContainerFactory<DirectMessageListenerContainer> {\n\tprotected DirectMessageListenerContainer createContainerInstance(); // Create an empty container instance.\n\tprotected void initializeContainer(DirectMessageListenerContainer instance, RabbitListenerEndpoint endpoint); // Further initialize the specified container.\n\tvoid setAckTimeout(Long ackTimeout); // An approximate timeout; when messagesPerAck is greater than 1, and this time elapses since the last ack, the pending acks will be sent either when the next message arrives, or a short time later if no additional messages arrive.\n\tvoid setConsumersPerQueue(Integer consumersPerQueue); // Each queue runs in its own consumer; set this property to create multiple consumers for each queue.\n\tvoid setMessagesPerAck(Integer messagesPerAck); // Set the number of messages to receive before acknowledging (success).\n\tvoid setMonitorInterval(long monitorInterval); // Set how often to run a task to check for failed consumers and idle containers.\n\tvoid setTaskScheduler(org.springframework.scheduling.TaskScheduler taskScheduler); // Set the task scheduler to use for the task that monitors idle containers and failed consumers.\n}"}
{"index": 15531, "repo": "spring-batch-core-5.0.2", "des": "Implementation of Partitioner that locates multiple resources and associates their file names with execution context keys.", "code": "public class MultiResourcePartitioner extends Object implements Partitioner {\n\tMap<String,ExecutionContext> partition(int gridSize); // Assign the filename of each of the injected resources to an ExecutionContext.\n\tvoid setKeyName(String keyName); // The name of the key for the file name in each ExecutionContext.\n\tvoid setResources(org.springframework.core.io.Resource[] resources); // The resources to assign to each partition.\n}"}
{"index": 9989, "repo": "commons-text-1.10.0", "des": "Escapes and unescapes Strings for Java, Java Script, HTML and XML.", "code": "Class StringEscapeUtils {\n\tstatic StringEscapeUtils.Builder builder(CharSequenceTranslator translator); // Get a StringEscapeUtils.Builder.\n\tstatic String escapeCsv(String input); // Returns a String value for a CSV column enclosed in double quotes, if required.\n\tstatic String escapeEcmaScript(String input); // Escapes the characters in a String using EcmaScript String rules.\n\tstatic String escapeHtml3(String input); // Escapes the characters in a String using HTML entities.\n\tstatic String escapeHtml4(String input); // Escapes the characters in a String using HTML entities.\n\tstatic String escapeJava(String input); // Escapes the characters in a String using Java String rules.\n\tstatic String escapeJson(String input); // Escapes the characters in a String using Json String rules.\n\tstatic String escapeXml10(String input); // Escapes the characters in a String using XML entities.\n\tstatic String escapeXml11(String input); // Escapes the characters in a String using XML entities.\n\tstatic String escapeXSI(String input); // Escapes the characters in a String using XSI rules.\n\tstatic String unescapeCsv(String input); // Returns a String value for an unescaped CSV column.\n\tstatic String unescapeEcmaScript(String input); // Unescapes any EcmaScript literals found in the String.\n\tstatic String unescapeHtml3(String input); // Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes.\n\tstatic String unescapeHtml4(String input); // Unescapes a string containing entity escapes to a string containing the actual Unicode characters corresponding to the escapes.\n\tstatic String unescapeJava(String input); // Unescapes any Java literals found in the String.\n\tstatic String unescapeJson(String input); // Unescapes any Json literals found in the String.\n\tstatic String unescapeXml(String input); // Unescapes a string containing XML entity escapes to a string containing the actual Unicode characters corresponding to the escapes.\n\tstatic String unescapeXSI(String input); // Unescapes the characters in a String using XSI rules.\n}"}
{"index": 45, "repo": "connect-api-3.5.0", "des": "SourceTaskContext is provided to SourceTasks to allow them to interact with the underlying runtime.", "code": "Interface SourceTaskContext {\n\tMap<String,String> configs(); // Get the Task configuration.\n\tOffsetStorageReader offsetStorageReader(); // Get the OffsetStorageReader for this SourceTask.\n\tdefault TransactionContext transactionContext(); // Get a TransactionContext that can be used to define producer transaction boundaries when exactly-once support is enabled for the connector.\n}"}
{"index": 8590, "repo": "commons-io-2.13.0", "des": "A FilterWriter that throws UncheckedIOException instead of IOException.", "code": "Class UncheckedFilterWriter {\n\tWriter append(char c); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tWriter append(CharSequence csq); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tWriter append(CharSequence csq, int start, int end); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tstatic UncheckedFilterWriter.Builder builder(); // Constructs a new UncheckedFilterWriter.Builder.\n\tvoid close(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid flush(); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid write(char[] cbuf); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid write(char[] cbuf, int off, int len); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid write(int c); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid write(String str); // Calls this method's super and rethrow IOException as UncheckedIOException.\n\tvoid write(String str, int off, int len); // Calls this method's super and rethrow IOException as UncheckedIOException.\n}"}
{"index": 17545, "repo": "pulsar-broker-3.0.0", "des": "The metadata for the transaction in the transaction buffer.", "code": "@Beta public interface TransactionMeta {\n\tCompletableFuture<TransactionMeta> abortTxn(); // Mark the transaction is aborted.\n\tCompletableFuture<Position> appendEntry(long sequenceId, Position position, int batchSize); // Add transaction entry into the transaction.\n\tlong committedAtEntryId(); // Return the committed entry id at data ledger.\n\tlong committedAtLedgerId(); // Return the committed ledger id at data ledger.\n\tCompletableFuture<TransactionMeta> committingTxn(); // Mark the transaction status is committing.\n\tCompletableFuture<TransactionMeta> commitTxn(long committedAtLedgerId, long committedAtEntryId); // Mark the transaction is committed.\n\torg.apache.pulsar.client.api.transaction.TxnID id(); // Returns the transaction id.\n\tlong lastSequenceId(); // Return the last sequence id.\n\tint numEntries(); // Return the number of entries appended to the transaction.\n\tint numMessageInTxn(); // Return messages number in one transaction.\n\tCompletableFuture<SortedMap<Long,Position>> readEntries(int num, long startSequenceId); // Read the entries from start sequence id.\n\tTxnStatus status(); // Return the status of the transaction.\n}"}
{"index": 10454, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @Bindable annotation when @Vetoable is not present.", "code": "public class BindableASTTransformation extends Object implements ASTTransformation, org.objectweb.asm.Opcodes {\n\tprotected void addPropertyChangeSupport(ClassNode declaringClass); // Adds the necessary field and methods to support property change support.\n\tprotected Statement createBindableStatement(PropertyNode propertyNode, Expression fieldExpression); // Creates a statement body similar to: this.firePropertyChange(\"field\", field, field = value)\n\tprotected void createSetterMethod(ClassNode declaringClass, PropertyNode propertyNode, String setterName, Statement setterBlock); // Creates a setter method with the given body.\n\tstatic boolean hasBindableAnnotation(AnnotatedNode node); // Convenience method to see if an annotated node is @Bindable.\n\tprotected boolean needsPropertyChangeSupport(ClassNode declaringClass, SourceUnit sourceUnit); // Snoops through the declaring class and all parents looking for methods void addPropertyChangeListener(PropertyChangeListener), void removePropertyChangeListener(PropertyChangeListener), and void firePropertyChange(String, Object, Object).\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // Handles the bulk of the processing, mostly delegating to other methods.\n}"}
{"index": 13063, "repo": "spring-aop-6.0.11", "des": "Convenient superclass when we want to force subclasses to implement MethodMatcher interface, but subclasses will want to be pointcuts.", "code": "public abstract class DynamicMethodMatcherPointcut extends DynamicMethodMatcher implements Pointcut {\n\tClassFilter getClassFilter(); // Return the ClassFilter for this pointcut.\n\tfinal MethodMatcher getMethodMatcher(); // Return the MethodMatcher for this pointcut.\n}"}
{"index": 13259, "repo": "spring-test-6.0.11", "des": "TestContextAnnotationUtils is a collection of utility methods that complements the standard support already available in AnnotationUtils and AnnotatedElementUtils, while transparently honoring @NestedTestConfiguration semantics.", "code": "public abstract class TestContextAnnotationUtils extends Object {\n\tstatic <T extends Annotation>TestContextAnnotationUtils.AnnotationDescriptor<T> findAnnotationDescriptor(Class<?> clazz, Class<T> annotationType); // Find the TestContextAnnotationUtils.AnnotationDescriptor for the supplied annotationType on the supplied Class, traversing its annotations, interfaces, superclasses, and enclosing classes if no annotation can be found on the given class itself.\n\tstatic TestContextAnnotationUtils.UntypedAnnotationDescriptor findAnnotationDescriptorForTypes(Class<?> clazz, Class<? extends Annotation>... annotationTypes); // Find the TestContextAnnotationUtils.UntypedAnnotationDescriptor for the first Class in the inheritance hierarchy of the specified clazz (including the specified clazz itself) which declares at least one of the specified annotationTypes.\n\tstatic <T extends Annotation>T findMergedAnnotation(Class<?> clazz, Class<T> annotationType); // Find the first annotation of the specified annotationType within the annotation hierarchy above the supplied class, merge that annotation's attributes with matching attributes from annotations in lower levels of the annotation hierarchy, and synthesize the result back into an annotation of the specified annotationType.\n\tstatic <T extends Annotation>Set<T> getMergedRepeatableAnnotations(Class<?> clazz, Class<T> annotationType); // Get all repeatable annotations of the specified annotationType within the annotation hierarchy above the supplied class; and for each annotation found, merge that annotation's attributes with matching attributes from annotations in lower levels of the annotation hierarchy and synthesize the results back into an annotation of the specified annotationType.\n\tstatic boolean hasAnnotation(Class<?> clazz, Class<? extends Annotation> annotationType); // Determine if an annotation of the specified annotationType is present or meta-present on the supplied Class according to the search algorithm used in findMergedAnnotation(Class, Class).\n\tstatic boolean searchEnclosingClass(Class<?> clazz); // Determine if annotations on the enclosing class of the supplied class should be searched by annotation search algorithms within the Spring TestContext Framework.\n}"}
{"index": 9121, "repo": "hbase-server-3.0.0-alpha-4", "des": "A remote procedure which is used to send verify snapshot request to region server.", "code": "Class SnapshotVerifyProcedure {\n\tprotected boolean abort(MasterProcedureEnv env);\n\tprotected void complete(MasterProcedureEnv env, Throwable error);\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected Procedure<MasterProcedureEnv>[] execute(MasterProcedureEnv env);\n\tServerName getServerName();\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tOptional<RemoteProcedureDispatcher.RemoteOperation> remoteCallBuild(MasterProcedureEnv env, ServerName serverName);\n\tprotected void rollback(MasterProcedureEnv env);\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tprotected boolean setTimeoutFailure(MasterProcedureEnv env);\n\tprotected void toStringClassDetails(StringBuilder builder);\n}"}
{"index": 14015, "repo": "spring-retry-2.0.2", "des": "Basic configuration for @Retryable processing.", "code": "@Role(2) @Component public class RetryConfiguration extends org.springframework.aop.support.AbstractPointcutAdvisor implements org.springframework.aop.IntroductionAdvisor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.SmartInitializingSingleton, org.springframework.context.annotation.ImportAware {\n\tvoid afterPropertiesSet();\n\tvoid afterSingletonsInstantiated();\n\tprotected AnnotationAwareRetryOperationsInterceptor buildAdvice();\n\tprotected org.springframework.aop.Pointcut buildPointcut(Set<Class<? extends Annotation>> retryAnnotationTypes); // Calculate a pointcut for the given retry annotation types, if any.\n\torg.aopalliance.aop.Advice getAdvice();\n\torg.springframework.aop.ClassFilter getClassFilter();\n\tClass<?>[] getInterfaces();\n\torg.springframework.aop.Pointcut getPointcut();\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // Set the BeanFactory to be used when looking up executors by qualifier.\n\tvoid setImportMetadata(org.springframework.core.type.AnnotationMetadata importMetadata);\n\tvoid validateInterfaces();\n}"}
{"index": 2627, "repo": "mahout-core-14.1", "des": "Provides a virtual vector that is really a row or column or diagonal of a matrix.", "code": "Class MatrixVectorView {\n\tVector clone(); // Return a copy of the recipient\n\tdouble getIteratorAdvanceCost(); // Gets an estimate of the cost (in number of operations) it takes to advance an iterator through the nonzero elements of this vector.\n\tdouble getLookupCost(); // Gets an estimate of the cost (in number of operations) it takes to lookup a random element in this vector.\n\tint getNumNondefaultElements(); // Return the number of values in the recipient\n\tdouble getQuick(int index); // Return the value at the given index, without checking bounds\n\tboolean isAddConstantTime(); // Return true iff adding a new (nonzero) element takes constant time for this vector.\n\tboolean isDense(); // true if this implementation should be considered dense -- that it explicitly represents every value\n\tboolean isSequentialAccess(); // true if this implementation should be considered to be iterable in index order in an efficient way.\n\tIterator<Vector.Element> iterateNonZero(); // Iterates over all non-zero elements.\n\tIterator<Vector.Element> iterator(); // Iterates over all elements\n\tVector like(); // Return an empty vector of the same underlying class as the receiver\n\tVector like(int cardinality); // Return a new empty vector of the same underlying class as the receiver with given cardinality\n\tprotected Matrix matrixLike(int rows, int columns); // Subclasses must override to return an appropriately sparse or dense result\n\tvoid mergeUpdates(OrderedIntDoubleMapping updates); // Used internally by assign() to update multiple indices and values at once.\n\tvoid setQuick(int index, double value); // Set the value at the given index, without checking bounds\n}"}
{"index": 7640, "repo": "cassandra-all-4.1.2", "des": "Simple class for constructing an EsimtatedHistogram from a set of predetermined values.", "code": "Class HistogramBuilder {\n\tvoid add(long value);\n\tEstimatedHistogram buildWithStdevRangesAroundMean(); // See buildWithStdevRangesAroundMean(int)\n\tEstimatedHistogram buildWithStdevRangesAroundMean(int maxdevs); // Calculate the min, mean, max and standard deviation of the items in the builder, and generate an EstimatedHistogram with upto maxdev stdev size ranges either side of the mean, until min/max are hit; if either min/max are not reached a further range is inserted at the relevant ends.\n}"}
{"index": 2388, "repo": "commons-geometry-euclidean-1.0", "des": "Binary space partitioning (BSP) tree representing a region in two dimensional Euclidean space.", "code": "Class RegionBSPTree2D {\n\tvoid add(ConvexArea area); // Add a convex area to this region.\n\tIterable<LineConvexSubset> boundaries();\n\tStream<LineConvexSubset> boundaryStream();\n\tprotected AbstractRegionBSPTree.RegionSizeProperties<Vector2D> computeRegionSizeProperties();\n\tRegionBSPTree2D copy(); // Return a deep copy of this instance.\n\tprotected RegionBSPTree2D.RegionNode2D createNode();\n\tstatic RegionBSPTree2D empty(); // Return a new, empty RegionBSPTree2D instance.\n\tstatic RegionBSPTree2D from(Iterable<? extends LineConvexSubset> boundaries); // Construct a new tree from the given boundaries.\n\tstatic RegionBSPTree2D from(Iterable<? extends LineConvexSubset> boundaries, boolean full); // Construct a new tree from the given boundaries.\n\tstatic RegionBSPTree2D full(); // Return a new RegionBSPTree2D instance containing the entire space.\n\tList<LineConvexSubset> getBoundaries();\n\tList<LinePath> getBoundaryPaths(); // Get the boundary of the region as a list of connected line subset paths.\n\tprotected void invalidate();\n\tList<LinecastPoint2D> linecast(LineConvexSubset subset); // Intersect the given line subset against the boundaries in this instance, returning a list of all intersections in order of increasing position along the line.\n\tLinecastPoint2D linecastFirst(LineConvexSubset subset); // Intersect the given line subset against the boundaries in this instance, returning the first intersection found when traveling in the direction of the line subset from its start location.\n\tstatic RegionBSPTree2D.PartitionedRegionBuilder2D partitionedRegionBuilder(); // Create a new RegionBSPTree2D.PartitionedRegionBuilder2D instance which can be used to build balanced BSP trees from region boundaries.\n\tVector2D project(Vector2D pt);\n\tSplit<RegionBSPTree2D> split(Hyperplane<Vector2D> splitter);\n\tList<ConvexArea> toConvex(); // Return a list of ConvexAreas representing the same region as this instance.\n\tRegionBSPTree2D toTree(); // Return the current instance.\n}"}
{"index": 667, "repo": "ignite-core-2.15.0", "des": "This class represents discovery message that is used to provide information about dynamic cache start failure.", "code": "Class DynamicCacheChangeFailureMessage {\n\t@Nullable DiscoveryCustomMessage ackMessage(); // Called when custom message has been handled by all nodes.\n\tCollection<String> cacheNames();\n\tDiscoCache createDiscoCache(GridDiscoveryManager mgr, AffinityTopologyVersion topVer, DiscoCache discoCache); // Creates new discovery cache if message caused topology version change.\n\tIgniteCheckedException error();\n\tExchangeActions exchangeActions();\n\tvoid exchangeActions(ExchangeActions exchangeActions);\n\t@Nullable GridDhtPartitionExchangeId exchangeId();\n\tIgniteUuid id();\n\tboolean isMutable();\n}"}
{"index": 5489, "repo": "druid-processing-26.0.0", "des": "The movable version of ReadableVectorOffset.", "code": "Interface VectorOffset {\n\tvoid advance(); // Advances by one batch.\n\tboolean isDone(); // Checks if iteration is \"done\", meaning the current batch of offsets is empty, and there are no more coming.\n\tvoid reset(); // Resets the object back to its original state.\n}"}
{"index": 521, "repo": "ignite-core-2.15.0", "des": "Bulk load parameters, which are parsed from SQL command and sent from server to client.", "code": "Class BulkLoadAckClientParameters {\n\tstatic boolean isValidPacketSize(int sz); // Checks if packet size value is valid.\n\t@NotNull String localFileName(); // Returns the local name of file to send.\n\tint packetSize(); // Returns the packet size.\n\tstatic String packetSizeErrorMesssage(int size); // Creates proper packet size error message if isValidPacketSize(int) check has failed.\n}"}
{"index": 15936, "repo": "spring-rabbit-3.0.6", "des": "Base class for CompletableFutures returned by AsyncRabbitTemplate.", "code": "public abstract class RabbitFuture<T> extends CompletableFuture<T> {\n\tboolean cancel(boolean mayInterruptIfRunning);\n\tCompletableFuture<Boolean> getConfirm(); // When confirms are enabled contains a CompletableFuture for the confirmation.\n\tString getNackCause(); // When confirms are enabled and a nack is received, contains the cause for the nack, if any.\n}"}
{"index": 7187, "repo": "calcite-core-1.34.0", "des": "A SQL literal representing a DATE value, such as DATE '2004-10-22'.", "code": "Class SqlDateLiteral {\n\tSqlDateLiteral clone(SqlParserPos pos); // Clones a SqlNode with a different position.\n\tRelDataType createSqlType(RelDataTypeFactory typeFactory);\n\tprotected DateString getDate(); // Converts this literal to a DateString.\n\tString toFormattedString(); // Returns e.g.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n}"}
{"index": 9296, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Update Event consumed by the ContainerScheduler.", "code": "Class UpdateContainerSchedulerEvent {\n\torg.apache.hadoop.yarn.security.ContainerTokenIdentifier getOriginalToken(); // Original Token before update.\n\torg.apache.hadoop.yarn.security.ContainerTokenIdentifier getUpdatedToken(); // Update Container Token.\n\tboolean isExecTypeUpdate(); // isExecTypeUpdate.\n\tboolean isIncrease(); // isIncrease.\n\tboolean isResourceChange(); // isResourceChange.\n}"}
{"index": 4028, "repo": "zookeeper-3.8.2", "des": "This class is a wrapper for the implementation of com.", "code": "Class OSMXBean {\n\tlong getMaxFileDescriptorCount(); // Get the number of the maximum file descriptors the system can use.\n\tlong getOpenFileDescriptorCount(); // Get the number of opened filed descriptor for the runtime jvm.\n\tboolean getUnix(); // Check if the OS is unix.\n}"}
{"index": 827, "repo": "ignite-core-2.15.0", "des": "Represents any class that needs to maintain or carry on peer deployment information.", "code": "Interface GridPeerDeployAware {\n\tClassLoader classLoader(); // Gets class loader for the class.\n\tClass<?> deployClass(); // Gets top level user class being deployed.\n}"}
{"index": 8323, "repo": "spring-ws-3.0.10.RELEASE", "des": "Convenience base class for server-side transport objects.", "code": "Class WebServiceMessageReceiverObjectSupport {\n\tvoid afterPropertiesSet();\n\tWebServiceMessageFactory getMessageFactory(); // Returns the WebServiceMessageFactory.\n\tprotected void handleConnection(WebServiceConnection connection, WebServiceMessageReceiver receiver); // Handles an incoming connection by receving a message from it, passing it to the receiver, and sending the response (if any).\n\tprotected void handleNoEndpointFoundException(NoEndpointFoundException ex, WebServiceConnection connection, WebServiceMessageReceiver receiver); // Template method for handling NoEndpointFoundExceptions.\n\tvoid setMessageFactory(WebServiceMessageFactory messageFactory); // Sets the WebServiceMessageFactory.\n}"}
{"index": 9800, "repo": "commons-math3-3.6.1", "des": "This class is a utility representing a rotation order specification for Cardan or Euler angles specification.", "code": "Class RotationOrder {\n\tVector3D getA1(); // Get the axis of the first rotation.\n\tVector3D getA2(); // Get the axis of the second rotation.\n\tVector3D getA3(); // Get the axis of the second rotation.\n}"}
{"index": 6515, "repo": "exoplayer-core-2.9.6", "des": "Parses a continuous H262 byte stream and extracts individual frames.", "code": "Class H262Reader {\n\tvoid consume(ParsableByteArray data); // Consumes (possibly partial) data from the current packet.\n\tvoid createTracks(ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the reader by providing outputs and ids for the tracks.\n\tvoid packetFinished(); // Called when a packet ends.\n\tvoid packetStarted(long pesTimeUs, int flags); // Called when a packet starts.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 10095, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Interface for YarnEnvironmentBuilder used from a SpringYarnConfigurerAdapter.", "code": "Interface YarnEnvironmentConfigurer {\n\tYarnEnvironmentConfigurer entry(String key, String value); // Specify an environment variable.\n\tYarnEnvironmentConfigurer entry(String id, String key, String value); // Specify an environment variable using an identifier.\n\tYarnEnvironmentConfigurer includeLocalSystemEnv(boolean includeLocalSystemEnv); // Specify if existing system environment variables should be included automatically.\n\tYarnEnvironmentConfigurer includeLocalSystemEnv(String id, boolean includeLocalSystemEnv); // Specify if existing system environment variables should be included automatically with an identifier.\n\tYarnEnvironmentConfigurer propertiesLocation(String... locations); // Specify properties locations.\n\tYarnEnvironmentConfigurer propertiesLocationId(String id, String[] locations); // Specify properties locations with an identifier.\n\tEnvironmentClasspathConfigurer withClasspath(); // Specify a classpath environment variable.\n\tEnvironmentClasspathConfigurer withClasspath(String id); // Specify a classpath environment variable using an identifier.\n\torg.springframework.data.hadoop.config.common.annotation.configurers.PropertiesConfigurer<YarnEnvironmentConfigurer> withProperties(); // Specify properties with a PropertiesConfigurer.\n\torg.springframework.data.hadoop.config.common.annotation.configurers.PropertiesConfigurer<YarnEnvironmentConfigurer> withProperties(String id); // Specify properties with a PropertiesConfigurer with an identifier.\n}"}
{"index": 1311, "repo": "ignite-core-2.15.0", "des": "Argument for VisorTracingConfigurationTask.", "code": "Class VisorTracingConfigurationTaskArg {\n\tVisorTracingConfigurationOperation operation();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 8336, "repo": "spring-ws-3.0.10.RELEASE", "des": "Simple processor that validates a given Source.", "code": "Interface XmlValidator {\n\tSAXParseException[] validate(Source source); // Validates the given Source, and returns an array of SAXParseExceptions as result.\n\tSAXParseException[] validate(Source source, ValidationErrorHandler errorHandler); // Validates the given Source and ValidationErrorHandler, and returns an array of SAXParseExceptions as result.\n}"}
{"index": 9591, "repo": "commons-math3-3.6.1", "des": "This class implements the common part of all embedded Runge-Kutta integrators for Ordinary Differential Equations.", "code": "Class EmbeddedRungeKuttaIntegrator {\n\tprotected abstract double estimateError(double[][] yDotK, double[] y0, double[] y1, double h); // Compute the error ratio.\n\tdouble getMaxGrowth(); // Get the maximal growth factor for stepsize control.\n\tdouble getMinReduction(); // Get the minimal reduction factor for stepsize control.\n\tabstract int getOrder(); // Get the order of the method.\n\tdouble getSafety(); // Get the safety factor for stepsize control.\n\tvoid integrate(ExpandableStatefulODE equations, double t); // Integrate a set of differential equations up to the given time.\n\tvoid setMaxGrowth(double maxGrowth); // Set the maximal growth factor for stepsize control.\n\tvoid setMinReduction(double minReduction); // Set the minimal reduction factor for stepsize control.\n\tvoid setSafety(double safety); // Set the safety factor for stepsize control.\n}"}
{"index": 4460, "repo": "beam-sdks-java-core-2.49.0", "des": "Implementation which is able to adapt a multimap materialization to a List<T>.", "code": "Class PCollectionViews.ListViewFn2<T> {\n\tjava.util.List<T> apply(Materializations.MultimapView<java.lang.Long,PCollectionViews.ValueOrMetadata<T,OffsetRange>> primitiveViewT); // A function to adapt a primitive view type to a desired view type.\n\tMaterialization<Materializations.MultimapView<java.lang.Long,PCollectionViews.ValueOrMetadata<T,OffsetRange>>> getMaterialization(); // Gets the materialization of this ViewFn.\n\tTypeDescriptor<java.util.List<T>> getTypeDescriptor(); // Return the TypeDescriptor describing the output of this fn.\n}"}
{"index": 18710, "repo": "poi-5.2.3", "des": "This exception is thrown if HPSF encounters a problem with a variant type.", "code": "Class VariantTypeException {\n\tObject getValue(); // Returns the value who's variant type caused the problem.\n\tlong getVariantType(); // Returns the offending variant type.\n}"}
{"index": 15239, "repo": "spring-boot-3.1.1", "des": "ConfigDataNotFoundException thrown when a ConfigDataResource cannot be found.", "code": "public class ConfigDataResourceNotFoundException extends ConfigDataNotFoundException {\n\tConfigDataLocation getLocation(); // Return the original location that was resolved to determine the resource.\n\tOrigin getOrigin(); // Return the source origin or null if the origin is not known.\n\tString getReferenceDescription(); // Return a description of actual referenced item that could not be found.\n\tConfigDataResource getResource(); // Return the resource that could not be found.\n\tstatic void throwIfDoesNotExist(ConfigDataResource resource, File fileToCheck); // Throw a ConfigDataNotFoundException if the specified File does not exist.\n\tstatic void throwIfDoesNotExist(ConfigDataResource resource, Path pathToCheck); // Throw a ConfigDataNotFoundException if the specified Path does not exist.\n\tstatic void throwIfDoesNotExist(ConfigDataResource resource, org.springframework.core.io.Resource resourceToCheck); // Throw a ConfigDataNotFoundException if the specified Resource does not exist.\n}"}
{"index": 15976, "repo": "wicket-util-10.0.0-M1", "des": "Default implementation of IFileCleaner that uses Apache commons-io FileCleaningTracker to track and clean the temporary created files.", "code": "public class FileCleaner extends Object implements IFileCleaner {\n\tvoid destroy(); // Call this method to stop the cleaner and to free all allocated resources by it\n\tvoid track(File file, Object marker); // Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected.\n\tvoid track(File file, Object marker, org.apache.commons.io.FileDeleteStrategy deleteStrategy); // Track the specified file, using the provided marker, deleting the file when the marker instance is garbage collected.\n}"}
{"index": 5390, "repo": "druid-processing-26.0.0", "des": "An immutable composite object of Query + extra stuff needed in QueryRunners.", "code": "Class QueryPlus<T> {\n\tQuery<T> getQuery();\n\tQueryMetrics<?> getQueryMetrics();\n\tQueryPlus<T> optimizeForSegment(PerSegmentQueryOptimizationContext optimizationContext);\n\tSequence<T> run(QuerySegmentWalker walker, ResponseContext context);\n\tQueryPlus<T> withIdentity(String identity); // Returns the same QueryPlus object with the identity replaced.\n\tQueryPlus<T> withMaxQueuedBytes(long maxQueuedBytes); // Equivalent of withQuery(getQuery().withOverriddenContext(ImmutableMap.of(MAX_QUEUED_BYTES_KEY, maxQueuedBytes))).\n\tQueryPlus<T> withoutThreadUnsafeState(); // Returns a QueryPlus object without the components which are unsafe for concurrent use from multiple threads, therefore couldn't be passed down in concurrent or async QueryRunners.\n\t<U> QueryPlus<U> withQuery(Query<U> replacementQuery); // Returns a QueryPlus object with QueryMetrics from this QueryPlus object, and the provided Query.\n\tQueryPlus<T> withQueryMetrics(QueryToolChest<T,? extends Query<T>> queryToolChest); // Returns the same QueryPlus object, if it already has QueryMetrics (getQueryMetrics() returns not null), or returns a new QueryPlus object with Query from this QueryPlus and QueryMetrics created using the given QueryToolChest, via QueryToolChest.makeMetrics(Query) method.\n\tstatic <T> QueryPlus<T> wrap(Query<T> query); // Returns the minimum bare QueryPlus object with the given query.\n}"}
{"index": 3117, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "Primary interface for SearchArgument, which are the subset of predicates that can be pushed down to the RecordReader.", "code": "Interface SearchArgument {\n\tSearchArgument.TruthValue evaluate(SearchArgument.TruthValue[] leaves); // Evaluate the entire predicate based on the values for the leaf predicates.\n\tExpressionTree getCompactExpression(); // Get the expression tree without the normalization to conjunctive normal form.\n\tExpressionTree getExpression(); // Get the expression tree normalized into conjunctive normal form.\n\tList<PredicateLeaf> getLeaves(); // Get the leaf predicates that are required to evaluate the predicate.\n}"}
{"index": 1456, "repo": "pdfbox-3.0.0-beta1", "des": "Represents an instruction sequence, a combination of values, operands and nested procedures.", "code": "Class InstructionSequence {\n\tvoid addBoolean(boolean value); // Adds a bool value.\n\tvoid addInteger(int value); // Adds an int value.\n\tvoid addName(String name); // Add a name (ex.\n\tvoid addProc(InstructionSequence child); // Adds a proc (sub-sequence of instructions).\n\tvoid addReal(float value); // Adds a real value.\n\tvoid execute(ExecutionContext context); // Executes the instruction sequence.\n}"}
{"index": 845, "repo": "ignite-core-2.15.0", "des": "This interface is responsible for: Node authentication; Thin client authentication; Providing configuration info whether global node authentication is enabled; Keeping and propagating all authenticated security subjects; Providing configuration info whether security mode is enabled at all; Handling expired sessions; Providing configuration info whether sandbox is enabled; Keeping and propagating authenticated security subject for thin clients; Keeping and propagating authenticated security contexts for nodes and thin clients; Authorizing specific operations (cache put, task execute, so on) when session security context is set.", "code": "Interface GridSecurityProcessor {\n\tdefault void alterUser(String login, char[] pwd); // Alters password of user with the specified login.\n\tSecurityContext authenticate(AuthenticationContext ctx); // Authenticates subject via underlying Authenticator.\n\tSecuritySubject authenticatedSubject(UUID subjId); // Gets authenticated node subject.\n\tCollection<SecuritySubject> authenticatedSubjects(); // Gets collection of authenticated nodes.\n\tSecurityContext authenticateNode(ClusterNode node, SecurityCredentials cred); // Authenticates grid node with it's attributes via underlying Authenticator.\n\tvoid authorize(String name, SecurityPermission perm, SecurityContext securityCtx); // Authorizes grid operation.\n\tdefault void createUser(String login, char[] pwd); // Creates user with the specified login and password.\n\tdefault void dropUser(String login); // Drops user with the specified login.\n\tboolean isGlobalNodeAuthentication(); // Gets flag indicating whether all nodes or coordinator only should run the authentication for joining node.\n\tdefault boolean isSystemType(Class<?> cls);\n\tvoid onSessionExpired(UUID subjId); // Callback invoked when subject session got expired.\n\tdefault boolean sandboxEnabled(); // If this method returns true and SecurityManager is installed, then the user-defined code will be run inside the Sandbox.\n\tdefault SecurityContext securityContext(UUID subjId); // Gets security context for authenticated nodes and thin clients.\n}"}
{"index": 14945, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An OAuth2TokenGenerator that generates a \"reference\" (opaque) OAuth2AccessToken.", "code": "public final class OAuth2AccessTokenGenerator extends Object implements OAuth2TokenGenerator<org.springframework.security.oauth2.core.OAuth2AccessToken> {\n\torg.springframework.security.oauth2.core.OAuth2AccessToken generate(OAuth2TokenContext context); // Generate an OAuth 2.0 Token using the attributes contained in the OAuth2TokenContext, or return null if the OAuth2TokenContext.getTokenType() is not supported.\n\tvoid setAccessTokenCustomizer(OAuth2TokenCustomizer<OAuth2TokenClaimsContext> accessTokenCustomizer); // Sets the OAuth2TokenCustomizer that customizes the claims for the OAuth2AccessToken.\n}"}
{"index": 5392, "repo": "druid-processing-26.0.0", "des": "An interface for query-handling entry points.", "code": "Interface QuerySegmentWalker {\n\t<T> QueryRunner<T> getQueryRunnerForIntervals(Query<T> query, Iterable<org.joda.time.Interval> intervals); // Gets the Queryable for a given interval, the Queryable returned can be any version(s) or partitionNumber(s) such that it represents the interval.\n\t<T> QueryRunner<T> getQueryRunnerForSegments(Query<T> query, Iterable<SegmentDescriptor> specs); // Gets the Queryable for a given list of SegmentDescriptors.\n}"}
{"index": 3590, "repo": "hive-serde-4.0.0-alpha-2", "des": "Enumeration that defines all on/off features for this writer.", "code": "Enum HiveJsonWriter.Feature {\n\tstatic HiveJsonWriter.Feature valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HiveJsonWriter.Feature[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17329, "repo": "groovy-4.0.13", "des": "Enum for easy differentiation between call types", "code": "public static enum IndyInterface.CallType extends Enum<IndyInterface.CallType> {\n\tstatic IndyInterface.CallType fromCallSiteName(String callSiteName);\n\tString getCallSiteName(); // Returns the name of the call site type\n\tstatic IndyInterface.CallType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic IndyInterface.CallType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4174, "repo": "commons-geometry-spherical-1.0", "des": "Internal class for connecting GreatArcs into GreatArcPaths.", "code": "Class AbstractGreatArcConnector.ConnectableGreatArc {\n\tboolean canConnectTo(AbstractGreatArcConnector.ConnectableGreatArc next);\n\tint compareTo(AbstractGreatArcConnector.ConnectableGreatArc other);\n\tboolean endPointsEq(AbstractGreatArcConnector.ConnectableGreatArc other);\n\tboolean equals(Object obj);\n\tGreatArc getArc(); // Get the arc for the instance.\n\tAbstractGreatArcConnector.ConnectableGreatArc getConnectionSearchKey();\n\tdouble getRelativeAngle(AbstractGreatArcConnector.ConnectableGreatArc other);\n\tprotected AbstractGreatArcConnector.ConnectableGreatArc getSelf();\n\tboolean hasEnd();\n\tboolean hasStart();\n\tboolean hasZeroSize(); // Return true if this instance has a size equivalent to zero.\n\tboolean shouldContinueConnectionSearch(AbstractGreatArcConnector.ConnectableGreatArc candidate, boolean ascending);\n}"}
{"index": 16908, "repo": "spring-integration-ip-6.1.2", "des": "Base class for (de)serializers that provide a mechanism to reconstruct a byte array from an arbitrary stream.", "code": "public abstract class AbstractByteArraySerializer extends Object implements org.springframework.core.serializer.Serializer<byte[]>, org.springframework.core.serializer.Deserializer<byte[]>, org.springframework.context.ApplicationEventPublisherAware {\n\tprotected void checkClosure(int bite);\n\tint getMaxMessageSize(); // The maximum supported message size for this serializer.\n\tprotected void publishEvent(Exception cause, byte[] buffer, int offset);\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n\tvoid setMaxMessageSize(int maxMessageSize); // The maximum supported message size for this serializer.\n}"}
{"index": 17459, "repo": "spring-security-config-6.1.2", "des": "Constructs an MapReactiveUserDetailsService from a resource using UserDetailsResourceFactoryBean.", "code": "public class ReactiveUserDetailsServiceResourceFactoryBean extends Object implements org.springframework.context.ResourceLoaderAware, org.springframework.beans.factory.FactoryBean<org.springframework.security.core.userdetails.MapReactiveUserDetailsService> {\n\tstatic ReactiveUserDetailsServiceResourceFactoryBean fromResource(org.springframework.core.io.Resource propertiesResource); // Create a ReactiveUserDetailsServiceResourceFactoryBean with a Resource that is a Properties file in the format defined in UserDetailsResourceFactoryBean.\n\tstatic ReactiveUserDetailsServiceResourceFactoryBean fromResourceLocation(String resourceLocation); // Create a ReactiveUserDetailsServiceResourceFactoryBean with the location of a Resource that is a Properties file in the format defined in UserDetailsResourceFactoryBean.\n\tstatic ReactiveUserDetailsServiceResourceFactoryBean fromString(String users); // Create a ReactiveUserDetailsServiceResourceFactoryBean with a String that is in the format defined in UserDetailsResourceFactoryBean.\n\torg.springframework.security.core.userdetails.MapReactiveUserDetailsService getObject();\n\tClass<?> getObjectType();\n\tvoid setResource(org.springframework.core.io.Resource resource); // Sets a Resource that is a Properties file in the format defined in UserDetailsResourceFactoryBean.\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader);\n\tvoid setResourceLocation(String resourceLocation); // Sets the location of a Resource that is a Properties file in the format defined in UserDetailsResourceFactoryBean.\n}"}
{"index": 10473, "repo": "groovy-all-4.0.13", "des": "A convenience front end for getting standard compilations done.", "code": "public class Compiler extends Object {\n\tvoid compile(File file); // Compiles a single File.\n\tvoid compile(File[] files); // Compiles a series of Files.\n\tvoid compile(String[] files); // Compiles a series of Files from file names.\n\tvoid compile(String name, String code); // Compiles a string of code.\n}"}
{"index": 2525, "repo": "exoplayer-r2.3.1", "des": "A callback to be notified of Loader events.", "code": "Interface Loader.Callback<T extends Loader.Loadable> {\n\tvoid onLoadCanceled(T loadable, long elapsedRealtimeMs, long loadDurationMs, boolean released); // Called when a load has been canceled.\n\tvoid onLoadCompleted(T loadable, long elapsedRealtimeMs, long loadDurationMs); // Called when a load has completed.\n\tint onLoadError(T loadable, long elapsedRealtimeMs, long loadDurationMs, java.io.IOException error); // Called when a load encounters an error.\n}"}
{"index": 5643, "repo": "org.apache.karaf.main-2.4.4", "des": "PermissionStorage privileged action class.", "code": "Class SecurePermissionStorage {\n\tString[] getConditionalPermissionInfos(); // Returns the persistent array of encoded ConditionalPermissionInfo strings\n\tString[] getLocations(); // Returns the locations that have permission data assigned to them, that is, locations for which permission data exists in persistent storage.\n\tString[] getPermissionData(String loc); // Gets the permission data assigned to the specified location.\n\tString[] run();\n\tvoid saveConditionalPermissionInfos(String[] updatedInfos); // Persists the array of encoded ConditionalPermissionInfo strings\n\tvoid setPermissionData(String location, String[] data); // Assigns the specified permission data to the specified location.\n}"}
{"index": 1170, "repo": "ignite-core-2.15.0", "des": "This class defines shared file system CheckpointSpi implementation for checkpoint SPI.", "code": "Class SharedFsCheckpointSpi {\n\tString getCurrentDirectoryPath(); // Gets path to the directory where all checkpoints are saved.\n\tCollection<String> getDirectoryPaths(); // Gets collection of all configured paths where checkpoints can be saved.\n\tbyte[] loadCheckpoint(String key); // Loads checkpoint from storage by its unique key.\n\tboolean removeCheckpoint(String key); // This method instructs the checkpoint provider to clean saved data for a given key.\n\tboolean saveCheckpoint(String key, byte[] state, long timeout, boolean overwrite); // Saves checkpoint to the storage.\n\tvoid setCheckpointListener(CheckpointListener lsnr); // Sets the checkpoint listener.\n\tSharedFsCheckpointSpi setDirectoryPaths(Collection<String> dirPaths); // Sets path to a shared directory where checkpoints will be stored.\n\tSharedFsCheckpointSpi setName(String name); // Sets SPI name.\n\tvoid spiStart(String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 378, "repo": "phoenix-core-5.1.3", "des": "ResultIterator that does a merge sort on the list of iterators provided, returning the rows ordered by the OrderByExpression.", "code": "Class MergeSortTopNResultIterator {\n\tprotected int compare(Tuple t1, Tuple t2);\n\tvoid explain(List<String> planSteps);\n\tvoid explain(List<String> planSteps, ExplainPlanAttributes.ExplainPlanAttributesBuilder explainPlanAttributesBuilder); // Generate ExplainPlan steps and add steps as list of Strings in planSteps argument as readable statement as well as add same generated steps in explainPlanAttributesBuilder so that we prepare ExplainPlan result as an attribute object useful to retrieve individual plan step attributes.\n\tTuple next(); // Grab the next row's worth of values.\n\tTuple peek(); // Returns the next result without advancing the iterator\n}"}
{"index": 11917, "repo": "maven-core-4.0.0-alpha-7", "des": "Describes the requirements for a new class realm.", "code": "public interface ClassRealmRequest {\n\tList<ClassRealmConstituent> getConstituents(); // Gets the constituents for the class realm.\n\tMap<String,ClassLoader> getForeignImports(); // Gets the packages/types to import from foreign realms.\n\tList<String> getImports(); // Deprecated. Use getParentImports() instead.\n\tClassLoader getParent(); // Gets the parent class realm (if any).\n\tList<String> getParentImports(); // Gets the packages/types to import from the parent realm.\n\tClassRealmRequest.RealmType getType(); // Gets the type of the class realm.\n}"}
{"index": 3115, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "Object helper for objects stored in the pool.", "code": "Interface Pool.PoolObjectHelper<T> {\n\tT create(); // Called to create an object when one cannot be provided.\n\tvoid resetBeforeOffer(T t); // Called before the object is put in the pool (regardless of whether put succeeds).\n}"}
{"index": 7373, "repo": "mahout-math-0.13.0", "des": "Provides a way to get data from a file and treat it as if it were a matrix, but avoids putting all that data onto the Java heap.", "code": "Class FileBasedMatrix {\n\tMatrix assignColumn(int column, Vector other); // Assign the other vector values to the column of the receiver\n\tMatrix assignRow(int row, Vector other); // Assign the other vector values to the row of the receiver\n\tdouble getQuick(int row, int column); // Return the value at the given indexes, without checking bounds\n\tMatrix like(); // Return an empty matrix of the same underlying class as the receiver\n\tMatrix like(int rows, int columns); // Returns an empty matrix of the same underlying class as the receiver and of the specified size.\n\tvoid setData(File f, boolean loadNow);\n\tvoid setQuick(int row, int column, double value); // Set the value at the given index, without checking bounds\n\tMatrix viewPart(int[] offset, int[] size); // Return a view into part of a matrix.\n\tstatic void writeMatrix(File f, Matrix m);\n}"}
{"index": 13042, "repo": "spring-aop-6.0.11", "des": "Utilities for auto-proxy aware components.", "code": "public abstract class AutoProxyUtils extends Object {\n\tstatic Class<?> determineTargetClass(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory, String beanName); // Determine the original target class for the specified bean, if possible, otherwise falling back to a regular getType lookup.\n\tstatic boolean shouldProxyTargetClass(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory, String beanName); // Determine whether the given bean should be proxied with its target class rather than its interfaces.\n}"}
{"index": 720, "repo": "ignite-core-2.15.0", "des": "Extended cache version which also has additional DR version.", "code": "Class GridCacheVersionEx {\n\tstatic GridCacheVersion addConflictVersion(GridCacheVersion ver, GridCacheVersion conflictVer);\n\tGridCacheVersion conflictVersion();\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tCacheEntryVersion otherClusterVersion(); // If source of the update is \"local\" cluster then null will be returned.\n\tvoid readExternal(ObjectInput in);\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tvoid writeExternal(ObjectOutput out);\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 16521, "repo": "spring-batch-infrastructure-5.0.2", "des": "Simple implementation and base class for batch templates implementing RepeatOperations.", "code": "public class RepeatTemplate extends Object implements RepeatOperations {\n\tprotected final boolean canContinue(RepeatStatus value); // Check return value from batch operation.\n\tprotected RepeatInternalState createInternalState(RepeatContext context); // Create an internal state object that is used to store data needed internally in the scope of an iteration.\n\tprotected void executeAfterInterceptors(RepeatContext context, RepeatStatus value); // Convenience method to execute after interceptors on a callback result.\n\tprotected RepeatStatus getNextResult(RepeatContext context, RepeatCallback callback, RepeatInternalState state); // Get the next completed result, possibly executing several callbacks until one finally finishes.\n\tprotected boolean isComplete(RepeatContext context); // Delegate to CompletionPolicy.\n\tprotected boolean isComplete(RepeatContext context, RepeatStatus result); // Delegate to the CompletionPolicy.\n\tRepeatStatus iterate(RepeatCallback callback); // Execute the batch callback until the completion policy decides that we are finished.\n\tvoid registerListener(RepeatListener listener); // Register an additional listener.\n\tvoid setCompletionPolicy(CompletionPolicy terminationPolicy); // Setter for policy to decide when the batch is complete.\n\tvoid setExceptionHandler(ExceptionHandler exceptionHandler); // Setter for exception handler strategy.\n\tvoid setListeners(RepeatListener[] listeners); // Set the listeners for this template, registering them for callbacks at appropriate times in the iteration.\n\tprotected RepeatContext start(); // Delegate to the CompletionPolicy.\n\tprotected void update(RepeatContext context); // Delegate to the CompletionPolicy.\n\tprotected boolean waitForResults(RepeatInternalState state); // If necessary, wait for results to come back from remote or concurrent processes.\n}"}
{"index": 8858, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class is used to manage the identifiers for CacheableDeserializer.", "code": "Class CacheableDeserializerIdManager {\n\tstatic CacheableDeserializer<Cacheable> getDeserializer(int id); // Get the cacheable deserializer registered at the given identifier Id.\n\tstatic int registerDeserializer(CacheableDeserializer<Cacheable> cd); // Register the given Cacheable -- usually an hfileblock instance, these implement the Cacheable Interface -- deserializer and generate a unique identifier id for it and return this as our result.\n\tstatic Map<Integer,String> save(); // Snapshot a map of the current identifiers to class names for reconstruction on reading out of a file.\n}"}
{"index": 18383, "repo": "opencms-core-15.0", "des": "Bean representing the configurable attributes for a preference.", "code": "Class CmsPreferenceData {\n\tjava.lang.String getDefaultValue(); // Gets the default value for the preference.\n\tjava.lang.String getName(); // Gets the name of the preference.\n\tCmsXmlContentProperty getPropertyDefinition(); // Gets the preference definition.\n\tjava.lang.String getTab(); // Gets the tab on which the preference should be displayed.\n}"}
{"index": 15165, "repo": "spring-data-elasticsearch-5.1.2", "des": "Extension to Document exposing search response related data.", "code": "public interface SearchDocument extends Document {\n\tExplanation getExplanation();\n\tMap<String,List<Object>> getFields();\n\tdefault <V> V getFieldValue(String name); // The first value of the given field.\n\tdefault Map<String,List<String>> getHighlightFields();\n\tdefault Map<String,SearchDocumentResponse> getInnerHits();\n\tList<String> getMatchedQueries();\n\tdefault NestedMetaData getNestedMetaData();\n\tdefault String getRouting();\n\tfloat getScore(); // Return the search score.\n\tdefault Object[] getSortValues();\n}"}
{"index": 7331, "repo": "calcite-core-1.34.0", "des": "Substitutes part of a tree of relational expressions with another tree.", "code": "Class SubstitutionVisitor {\n\tstatic boolean equalType(String desc0, MutableRel rel0, String desc1, MutableRel rel1, Litmus litmus); // Returns whether two relational expressions have the same row-type.\n\tstatic Pair<RexNode,List<RexNode>> explainCalc(MutableCalc calc); // Explain filtering condition and projections from MutableCalc.\n\tList<RelNode> go(RelNode replacement_); // Returns a list of all possible rels that result from substituting the matched RelNode with the replacement RelNode within the query.\n\t@Nullable RelNode go0(RelNode replacement_);\n\tprotected boolean isWeaker(MutableRel rel0, MutableRel rel); // Returns if one rel is weaker than another.\n\tstatic boolean mayBeSatisfiable(RexNode e); // Returns whether a boolean expression ever returns true.\n\tstatic MutableAggregate permute(MutableAggregate aggregate, MutableRel input, Mapping mapping);\n\tstatic @Nullable org.apache.calcite.plan.SubstitutionVisitor.Replacement replace(MutableRel query, MutableRel find, MutableRel replace); // Within a relational expression query, replaces occurrences of find with replace.\n\tstatic @Nullable RexNode splitFilter(RexSimplify simplify, RexNode condition, RexNode target); // Maps a condition onto a target.\n\tstatic @Nullable MutableRel unifyAggregates(MutableAggregate query, @Nullable RexNode targetCond, MutableAggregate target);\n}"}
{"index": 13574, "repo": "spring-messaging-6.0.11", "des": "A wrapper class for access to attributes associated with a SiMP session (e.g.", "code": "public class SimpAttributes extends Object {\n\tstatic SimpAttributes fromMessage(Message<?> message); // Extract the SiMP session attributes from the given message and wrap them in a SimpAttributes instance.\n\tObject getAttribute(String name); // Return the value for the attribute of the given name, if any.\n\tString[] getAttributeNames(); // Retrieve the names of all attributes.\n\tString getSessionId(); // Return an id for the associated session.\n\tObject getSessionMutex(); // Expose the object to synchronize on for the underlying session.\n\tboolean isSessionCompleted(); // Whether the sessionCompleted() was already invoked.\n\tvoid registerDestructionCallback(String name, Runnable callback); // Register a callback to execute on destruction of the specified attribute.\n\tvoid removeAttribute(String name); // Remove the attribute of the given name, if it exists.\n\tvoid sessionCompleted(); // Invoked when the session is completed.\n\tvoid setAttribute(String name, Object value); // Set the value with the given name replacing an existing value (if any).\n}"}
{"index": 5556, "repo": "org.apache.karaf.main-2.4.4", "des": "The BundleTracker class simplifies tracking bundles much like the ServiceTracker simplifies tracking services.", "code": "Class BundleTracker<T> {\n\tT addingBundle(Bundle bundle, BundleEvent event); // Default implementation of the BundleTrackerCustomizer.addingBundle method.\n\tvoid close(); // Close this BundleTracker.\n\tBundle[] getBundles(); // Return an array of Bundles for all bundles being tracked by this BundleTracker.\n\tT getObject(Bundle bundle); // Returns the customized object for the specified Bundle if the specified bundle is being tracked by this BundleTracker.\n\tMap<Bundle,T> getTracked(); // Return a Map with the Bundles and customized objects for all bundles being tracked by this BundleTracker.\n\tint getTrackingCount(); // Returns the tracking count for this BundleTracker.\n\tboolean isEmpty(); // Return if this BundleTracker is empty.\n\tvoid modifiedBundle(Bundle bundle, BundleEvent event, T object); // Default implementation of the BundleTrackerCustomizer.modifiedBundle method.\n\tvoid open(); // Open this BundleTracker and begin tracking bundles.\n\tvoid remove(Bundle bundle); // Remove a bundle from this BundleTracker.\n\tvoid removedBundle(Bundle bundle, BundleEvent event, T object); // Default implementation of the BundleTrackerCustomizer.removedBundle method.\n\tint size(); // Return the number of bundles being tracked by this BundleTracker.\n}"}
{"index": 3650, "repo": "hive-serde-4.0.0-alpha-2", "des": "A SettableBooleanObjectInspector can set a boolean value to an object.", "code": "Interface SettableBooleanObjectInspector {\n\tObject create(boolean value); // Create an object with the value.\n\tObject set(Object o, boolean value); // Set the object with the value.\n}"}
{"index": 17052, "repo": "spring-integration-core-6.1.2", "des": "Supports atomic updates to values in the store.", "code": "public interface ConcurrentMetadataStore extends MetadataStore {\n\tString putIfAbsent(String key, String value); // Atomically insert the key into the store.\n\tboolean replace(String key, String oldValue, String newValue); // Atomically replace the value for the key in the store if the old value matches the oldValue argument.\n}"}
{"index": 10126, "repo": "spring-hateoas-2.1.2", "des": "HAL-FORMS specific configuration extension of HalConfiguration.", "code": "public class HalFormsConfiguration extends Object {\n\tHalFormsConfiguration customize(com.fasterxml.jackson.databind.ObjectMapper mapper); // Customizes the given ObjectMapper with the registered callback.\n\tHalConfiguration getHalConfiguration(); // Returns the underlying HalConfiguration.\n\tHalFormsConfiguration withMediaType(MediaType mediaType); // Registers additional media types that are supposed to be aliases to MediaTypes.HAL_FORMS_JSON.\n\tHalFormsConfiguration withObjectMapperCustomizer(Consumer<com.fasterxml.jackson.databind.ObjectMapper> objectMapperCustomizer); // Register the given Consumer to apply additional customizations on the ObjectMapper used to render HAL documents.\n\t<T> HalFormsConfiguration withOptions(Class<T> type, String property, Function<AffordanceModel.PropertyMetadata,HalFormsOptions> creator); // Returns a new HalFormsConfiguration with the given\n\tHalFormsConfiguration withPattern(Class<?> type, String pattern); // Registers a regular expression pattern to be used for form descriptions of the given type.\n}"}
{"index": 17505, "repo": "pulsar-broker-3.0.0", "des": "This is a consumer selector based fixed hash range.", "code": "public class HashRangeAutoSplitStickyKeyConsumerSelector extends Object implements StickyKeyConsumerSelector {\n\tCompletableFuture<Void> addConsumer(Consumer consumer); // Add a new consumer.\n\tMap<Consumer,List<org.apache.pulsar.client.api.Range>> getConsumerKeyHashRanges(); // Get key hash ranges handled by each consumer.\n\tvoid removeConsumer(Consumer consumer); // Remove the consumer.\n\tConsumer select(int hash); // Select a consumer by hash.\n}"}
{"index": 10007, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Simple ProjectedGrid base implementation.", "code": "Class AbstractProjectedGrid {\n\tvoid addProjectedGridListener(ProjectedGridListener listener); // Adds a listener to be notified of projected grid events.\n\tboolean addProjection(GridProjection projection); // Adds a new grid projection.\n\tCollection<GridProjection> getProjections(); // Gets a collection of grid projections or empty collection of there are no projections defined.\n\tprotected void notifyGridProjectionAdded(GridProjection projection); // Notifies registered ProjectedGridListeners that a GridProjection has been added to a ProjectedGrid.\n\tprotected void notifyGridProjectionRemoved(GridProjection projection); // Notifies registered ProjectedGridListeners that a GridProjection has been removed from a ProjectedGrid.\n\tprotected void notifyMemberAdded(GridProjection projection, GridMember member); // Notifies registered ContainerGridGroupsListeners that a ContainerNode has been added to a ContainerGroup.\n\tprotected void notifyMemberRemoved(GridProjection projection, GridMember member); // Notifies registered ContainerGridGroupsListeners that a ContainerNode has been removed from a ContainerGroup.\n\tboolean removeProjection(GridProjection projection); // Removes a grid projection.\n}"}
{"index": 6357, "repo": "spring-data-solr-4.3.15", "des": "General purpose FacetAndHighlightQuery decorator.", "code": "Class AbstractFacetAndHighlightQueryDecorator {\n\tFacetOptions getFacetOptions();\n\tHighlightOptions getHighlightOptions();\n\tboolean hasFacetOptions();\n\tboolean hasHighlightOptions();\n\t<T extends SolrDataQuery>T setFacetOptions(FacetOptions facetOptions); // Faceting options to apply when executing query\n\t<T extends SolrDataQuery>T setHighlightOptions(HighlightOptions highlightOptions); // Highlight options to apply when exectuing query\n}"}
{"index": 15617, "repo": "spring-security-core-6.1.2", "des": "A Map based implementation of ReactiveUserDetailsService", "code": "public class MapReactiveUserDetailsService extends Object implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService {\n\treactor.core.publisher.Mono<UserDetails> findByUsername(String username); // Find the UserDetails by username.\n\treactor.core.publisher.Mono<UserDetails> updatePassword(UserDetails user, String newPassword); // Modify the specified user's password.\n}"}
{"index": 7805, "repo": "cassandra-all-4.1.2", "des": "StreamingRepairTask performs data streaming between two remote replicas, neither of which is repair coordinator.", "code": "Class StreamingRepairTask {\n\tvoid handleStreamEvent(StreamEvent event); // Callback for various streaming events.\n\tvoid onFailure(java.lang.Throwable t); // If we failed on either stream in or out, respond fail to coordinator\n\tvoid onSuccess(StreamState state); // If we succeeded on both stream in and out, respond back to coordinator\n\tvoid run();\n}"}
{"index": 18326, "repo": "opencms-core-15.0", "des": "ContextMenuOpenedOnComponentEvent is an event fired by the context menu when it's opened from a component.", "code": "Class CmsContextMenu.ContextMenuOpenedOnComponentEvent {\n\tCmsContextMenu getContextMenu(); // Returns the context menu.\n\tcom.vaadin.ui.Component getRequestSourceComponent(); // Returns the source component.\n\tint getX(); // Returns the client x position.\n\tint getY(); // Returns the client y position.\n}"}
{"index": 11087, "repo": "tribuo-core-4.3.1", "des": "Specifies the iteration order of the inner sources.", "code": "public static enum AggregateDataSource.IterationOrder extends Enum<AggregateDataSource.IterationOrder> {\n\tstatic AggregateDataSource.IterationOrder valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AggregateDataSource.IterationOrder[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5179, "repo": "druid-processing-26.0.0", "des": "Streams array of integers out in the binary format described by CompressedColumnarIntsSupplier.", "code": "Class CompressedColumnarIntsSerializer {\n\tvoid addValue(int val);\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid open();\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 17597, "repo": "spring-ldap-core-3.1.0", "des": "Used by PoolingContextSource to wrap a DirContext, delegating most methods to the underlying context.", "code": "public class DelegatingDirContext extends DelegatingContext implements DirContext, DirContextProxy {\n\tprotected void assertOpen();\n\tvoid bind(String name, Object obj, Attributes attrs);\n\tvoid bind(Name name, Object obj, Attributes attrs);\n\tvoid close();\n\tDirContext createSubcontext(String name, Attributes attrs);\n\tDirContext createSubcontext(Name name, Attributes attrs);\n\tboolean equals(Object obj);\n\tAttributes getAttributes(String name);\n\tAttributes getAttributes(String name, String[] attrIds);\n\tAttributes getAttributes(Name name);\n\tAttributes getAttributes(Name name, String[] attrIds);\n\tContext getDelegateContext();\n\tDirContext getDelegateDirContext();\n\tDirContext getInnermostDelegateDirContext(); // Recursivley inspect delegates until a non-delegating dir context is found.\n\tDirContext getSchema(String name);\n\tDirContext getSchema(Name name);\n\tDirContext getSchemaClassDefinition(String name);\n\tDirContext getSchemaClassDefinition(Name name);\n\tDirContext getTargetContext(); // Get the target DirContext of the proxy.\n\tvoid modifyAttributes(String name, int modOp, Attributes attrs);\n\tvoid modifyAttributes(String name, ModificationItem[] mods);\n\tvoid modifyAttributes(Name name, int modOp, Attributes attrs);\n\tvoid modifyAttributes(Name name, ModificationItem[] mods);\n\tvoid rebind(String name, Object obj, Attributes attrs);\n\tvoid rebind(Name name, Object obj, Attributes attrs);\n\tNamingEnumeration<SearchResult> search(String name, String filterExpr, Object[] filterArgs, SearchControls cons);\n\tNamingEnumeration<SearchResult> search(String name, String filter, SearchControls cons);\n\tNamingEnumeration<SearchResult> search(String name, Attributes matchingAttributes);\n\tNamingEnumeration<SearchResult> search(String name, Attributes matchingAttributes, String[] attributesToReturn);\n\tNamingEnumeration<SearchResult> search(Name name, String filterExpr, Object[] filterArgs, SearchControls cons);\n\tNamingEnumeration<SearchResult> search(Name name, String filter, SearchControls cons);\n\tNamingEnumeration<SearchResult> search(Name name, Attributes matchingAttributes);\n\tNamingEnumeration<SearchResult> search(Name name, Attributes matchingAttributes, String[] attributesToReturn);\n}"}
{"index": 12032, "repo": "jena-core-4.9.0", "des": "Class representing the dynamic set difference L - R of two graphs.", "code": "public class Difference extends Dyadic implements Graph {\n\tExtendedIterator<Triple> _graphBaseFind(Triple t);\n\tvoid performAdd(Triple t); // Add a triple to the difference: add it to the left operand, and remove it from the right operand.\n\tvoid performDelete(Triple t); // Remove a triple from the difference: remove it from the left operand.\n}"}
{"index": 10665, "repo": "groovy-all-4.0.13", "des": "This class contains helper methods for converting and comparing types.", "code": "public class TypeHelper extends Object {\n\tprotected static boolean argumentClassIsParameterClass(Class<?> argumentClass, Class<?> parameterClass); // Realizes an unsharp equal for the class.\n\tprotected static Class<?> getWrapperClass(Class<?> c); // Get wrapper class for a given class.\n\tprotected static boolean isBigDecCategory(Class<?> x);\n\tprotected static boolean isDoubleCategory(Class<?> x);\n\tprotected static boolean isIntCategory(Class<?> x);\n\tprotected static boolean isLongCategory(Class<?> x);\n\tprotected static MethodType replaceWithMoreSpecificType(Object[] args, MethodType callSiteType); // Replaces the types in the callSiteType parameter if more specific types given through the arguments.\n}"}
{"index": 2297, "repo": "hive-exec-4.0.0-alpha-2", "des": "This maps a batch to the aggregation buffers sets to use for each row (key).", "code": "Class VectorAggregationBufferBatch {\n\tvoid compileAggregationBatchInfo(VectorAggregateExpression[] aggregators);\n\tVectorAggregationBufferRow[] getAggregationBuffers(); // the array of aggregation buffers for the current batch.\n\tlong getAggregatorsFixedSize(); // Returns the fixed size consumed by the aggregation buffers\n\tint getDistinctBufferSetCount(); // number of distinct aggregation buffer sets (ie.\n\tboolean getHasVariableSize(); // returns True if any of the aggregators has a variable size\n\tint getVariableSize(int batchSize);\n\tvoid mapAggregationBufferSet(VectorAggregationBufferRow bufferSet, int row); // assigns the given aggregation buffer set to a given batch row (by row number).\n\tvoid startBatch(); // resets the internal aggregation buffers sets index and increments the versioning used to optimize the selection vector population.\n}"}
{"index": 13539, "repo": "spring-messaging-6.0.11", "des": "Extension of the Runnable interface with methods to obtain the MessageHandler and Message to be handled.", "code": "public interface MessageHandlingRunnable extends Runnable {\n\tMessage<?> getMessage(); // Return the Message that will be handled.\n\tMessageHandler getMessageHandler(); // Return the MessageHandler that will be used to handle the message.\n}"}
{"index": 1384, "repo": "nutch-2.4", "des": "This class uses the Jsch package to fetch content using the Sftp protocol.", "code": "Class Sftp {\n\tConfiguration getConf(); // Get the Configuration object\n\tjava.util.Collection<WebPage.Field> getFields();\n\tProtocolOutput getProtocolOutput(java.lang.String url, WebPage page);\n\tcrawlercommons.robots.BaseRobotRules getRobotRules(java.lang.String url, WebPage page); // Retrieve robot rules applicable for this url.\n\tvoid setConf(Configuration arg0); // Set the Configuration object\n}"}
{"index": 7563, "repo": "cassandra-all-4.1.2", "des": "The data for a complex column, that is it's cells and potential complex deletion time.", "code": "Class ComplexColumnData {\n\t<A> long accumulate(BiLongAccumulator<A,Cell<?>> accumulator, A arg, long initialValue);\n\tlong accumulate(LongAccumulator<Cell<?>> accumulator, long initialValue);\n\tstatic ComplexColumnData.Builder builder();\n\tint cellsCount();\n\tColumnData clone(Cloner cloner);\n\tDeletionTime complexDeletion(); // The complex deletion time of the complex column.\n\tint dataSize(); // The size of the data hold by this ColumnData.\n\tvoid digest(Digest digest); // Adds the data to the provided digest.\n\tboolean equals(java.lang.Object other);\n\tComplexColumnData filter(ColumnFilter filter, DeletionTime activeDeletion, DroppedColumn dropped, LivenessInfo rowLiveness);\n\tCell<?> getCell(CellPath path);\n\tCell<?> getCellByIndex(int idx);\n\tboolean hasInvalidDeletions(); // Validates the deletions (ttl and local deletion time) if any.\n\tjava.util.Iterator<Cell<?>> iterator();\n\tComplexColumnData markCounterLocalToBeCleared();\n\tlong maxTimestamp();\n\tComplexColumnData purge(DeletionPurger purger, int nowInSec);\n\tComplexColumnData purgeDataOlderThan(long timestamp);\n\tjava.util.Iterator<Cell<?>> reverseIterator();\n\tSearchIterator<CellPath,Cell> searchIterator();\n\t<V> ComplexColumnData transform(com.google.common.base.Function<? super Cell<?>,? extends Cell<?>> function);\n\tComplexColumnData transformAndFilter(DeletionTime newDeletion, com.google.common.base.Function<? super Cell,? extends Cell> function);\n\tComplexColumnData transformAndFilter(com.google.common.base.Function<? super Cell<?>,? extends Cell<?>> function);\n\tstatic ComplexColumnData unsafeConstruct(ColumnMetadata column, java.lang.Object[] cells, DeletionTime complexDeletion);\n\tlong unsharedHeapSize();\n\tlong unsharedHeapSizeExcludingData();\n\tComplexColumnData updateAllTimestamp(long newTimestamp); // Returns a copy of the data where all timestamps for live data have replaced by newTimestamp and all deletion timestamp by newTimestamp - 1.\n\tvoid validate(); // Validate the column data.\n\tComplexColumnData withOnlyQueriedData(ColumnFilter filter);\n}"}
{"index": 1307, "repo": "ignite-core-2.15.0", "des": "Reperesents result of VisorSystemViewTask.", "code": "Class VisorSystemViewTaskResult {\n\tList<String> attributes();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tMap<UUID,List<List<?>>> rows();\n\tList<VisorSystemViewTask.SimpleType> types();\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 12887, "repo": "spring-data-mongodb-4.1.2", "des": "The actual time unit to apply to a SetWindowFieldsOperation.Window.", "code": "public static interface SetWindowFieldsOperation.WindowUnit {\n\tstatic SetWindowFieldsOperation.WindowUnit from(ChronoUnit chronoUnit); // Converts the given chrono unit into a SetWindowFieldsOperation.WindowUnit.\n\tstatic SetWindowFieldsOperation.WindowUnit from(TimeUnit timeUnit); // Converts the given time unit into a SetWindowFieldsOperation.WindowUnit.\n\tString name();\n}"}
{"index": 7160, "repo": "calcite-core-1.34.0", "des": "Definition of the ANY_VALUE aggregate functions, returning any one of the values which go into it.", "code": "Class SqlAnyValueAggFunction {\n\tOptionality getDistinctOptionality(); // Returns whether this aggregate function allows the DISTINCT keyword.\n\tSqlAggFunction getRollup(); // Gets rollup aggregation function.\n\t<T> T unwrap(Class<T> clazz); // Finds an instance of an interface implemented by this object, or returns null if this object does not support that interface.\n}"}
{"index": 446, "repo": "phoenix-core-5.1.3", "des": "Statistics tracker that helps to collect stats like min key, max key and guideposts.", "code": "Interface StatisticsCollector {\n\tvoid collectStatistics(List<org.apache.hadoop.hbase.Cell> results); // Collect statistics for the given list of cells.\n\torg.apache.hadoop.hbase.regionserver.InternalScanner createCompactionScanner(org.apache.hadoop.hbase.coprocessor.RegionCoprocessorEnvironment env, org.apache.hadoop.hbase.regionserver.Store store, org.apache.hadoop.hbase.regionserver.InternalScanner delegate); // Wrap a compaction scanner with a scanner that will collect statistics using this instance.\n\tlong getGuidePostDepth(); // Retrieve the guide post depth during stats collection\n\tGuidePostsInfo getGuidePosts(ImmutableBytesPtr fam); // Retrieve the calculated guide post info for the given column family.\n\tlong getMaxTimeStamp(); // Returns the maximum timestamp of all cells encountered while collecting statistics.\n\tStatisticsWriter getStatisticsWriter(); // Retrieve the object that manages statistics persistence\n\tvoid init(); // Called before beginning the collection of statistics through collectStatistics(List)\n\tvoid updateStatistics(org.apache.hadoop.hbase.regionserver.Region region, org.apache.hadoop.hbase.client.Scan scan); // Write the collected statistics for the given region over the scan provided.\n}"}
{"index": 14079, "repo": "wicket-core-10.0.0-M1", "des": "The base class for Wicket's default AJAX implementation.", "code": "public abstract class AbstractDefaultAjaxBehavior extends AbstractAjaxBehavior {\n\tprotected String findIndicatorId(); // Finds the markup id of the indicator.\n\tprotected final AjaxRequestAttributes getAttributes();\n\tCharSequence getCallbackFunction(CallbackParameter... extraParameters); // Generates a javascript function that can take parameters and performs an AJAX call which includes these parameters.\n\tCharSequence getCallbackFunctionBody(CallbackParameter... extraParameters); // Generates the body the callback function.\n\tCharSequence getCallbackScript();\n\tprotected CharSequence getCallbackScript(Component component);\n\tprotected void onBind(); // Subclasses should call super.onBind()\n\tprotected Form.MethodMismatchResponse onMethodMismatch(); // This method decides whether to continue processing or to abort the Ajax request when the method is different than the AjaxRequestAttributes.getMethod()'s method.\n\tfinal void onRequest(); // Called when a request is received.\n\tprotected void postprocessConfiguration(com.github.openjson.JSONObject attributesJson, Component component); // Gives a chance to modify the JSON attributesJson that is going to be used as attributes for the Ajax call.\n\tprotected final CharSequence renderAjaxAttributes(Component component); // { u: 'editable-label?6-1.IBehaviorListener.0-text1-label', // url m: 'POST', // method name.\n\tprotected final CharSequence renderAjaxAttributes(Component component, AjaxRequestAttributes attributes);\n\tvoid renderHead(Component component, IHeaderResponse response); // Render to the web response whatever the component wants to contribute to the head section.\n\tprotected abstract void respond(AjaxRequestTarget target);\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes); // Gives a chance to the specializations to modify the attributes.\n}"}
{"index": 7706, "repo": "cassandra-all-4.1.2", "des": "A convenience class for wrapping access to MemoryMeter.", "code": "Class ObjectSizes {\n\tstatic long measure(java.lang.Object pojo);\n\tstatic long measureDeep(java.lang.Object pojo);\n\tstatic long sizeOf(java.lang.String str); // Memory a String consumes\n\tstatic long sizeOfArray(byte[] bytes); // Memory a byte array consumes\n\tstatic long sizeOfArray(int[] ints); // Memory an int array consumes\n\tstatic long sizeOfArray(long[] longs); // Memory a long array consumes\n\tstatic long sizeOfArray(java.lang.Object[] objects); // Memory a reference array consumes itself only\n\tstatic long sizeOfReferenceArray(int length); // Memory a reference array consumes\n\tstatic long sizeOnHeapExcludingData(java.nio.ByteBuffer buffer);\n\tstatic long sizeOnHeapExcludingData(java.nio.ByteBuffer[] array); // Amount of non-data heap memory consumed by the array of byte buffers.\n\tstatic long sizeOnHeapOf(java.nio.ByteBuffer buffer);\n\tstatic long sizeOnHeapOf(java.nio.ByteBuffer[] array); // Amount of heap memory consumed by the array of byte buffers.\n}"}
{"index": 3349, "repo": "spring-social-core-1.1.6.RELEASE", "des": "A ServiceProvider that uses the OAuth 2.", "code": "Interface OAuth2ServiceProvider<A> {\n\tA getApi(java.lang.String accessToken); // Returns an API interface allowing the client application to access protected resources on behalf of a user.\n\tOAuth2Operations getOAuthOperations(); // Get the service interface for carrying out the \"OAuth dance\" with this provider.\n}"}
{"index": 10279, "repo": "spring-core-6.0.11", "des": "Helper class for resolving generic types against type variables.", "code": "public final class GenericTypeResolver extends Object {\n\tstatic Map<TypeVariable,Type> getTypeVariableMap(Class<?> clazz); // Build a mapping of TypeVariable names to concrete classes for the specified Class.\n\tstatic Class<?> resolveParameterType(MethodParameter methodParameter, Class<?> implementationClass); // Deprecated. since 5.2 in favor of methodParameter.withContainingClass(implementationClass).getParameterType()\n\tstatic Class<?> resolveReturnType(Method method, Class<?> clazz); // Determine the target type for the generic return type of the given method, where formal type variables are declared on the given class.\n\tstatic Class<?> resolveReturnTypeArgument(Method method, Class<?> genericIfc); // Resolve the single type argument of the given generic interface against the given target method which is assumed to return the given interface or an implementation of it.\n\tstatic Type resolveType(Type genericType, Class<?> contextClass); // Resolve the given generic type against the given context class, substituting type variables as far as possible.\n\tstatic Class<?> resolveType(Type genericType, Map<TypeVariable,Type> map); // Resolve the specified generic type against the given TypeVariable map.\n\tstatic Class<?> resolveTypeArgument(Class<?> clazz, Class<?> genericIfc); // Resolve the single type argument of the given generic interface against the given target class which is assumed to implement the generic interface and possibly declare a concrete type for its type variable.\n\tstatic Class<?>[] resolveTypeArguments(Class<?> clazz, Class<?> genericIfc); // Resolve the type arguments of the given generic interface against the given target class which is assumed to implement the generic interface and possibly declare concrete types for its type variables.\n}"}
{"index": 8153, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract implementation of the SoapMessage interface.", "code": "Class AbstractSoapMessage {\n\tQName getFaultCode(); // Returns getSoapBody().getFault().getFaultCode().\n\tString getFaultReason(); // Returns getSoapBody().getFault().getFaultStringOrReason().\n\tResult getPayloadResult(); // Returns getSoapBody().getPayloadResult().\n\tSource getPayloadSource(); // Returns getSoapBody().getPayloadSource().\n\tSoapBody getSoapBody(); // Returns getEnvelope().getBody().\n\tSoapHeader getSoapHeader(); // Returns getEnvelope().getHeader().\n\tSoapVersion getVersion(); // Returns the SOAP version of this message.\n\tboolean hasFault(); // Returns getSoapBody().hasFault().\n}"}
{"index": 18002, "repo": "spring-ws-core-4.0.5", "des": "Represents an attachment to a MimeMessage", "code": "public interface Attachment {\n\tString getContentId(); // Returns the content identifier of the attachment.\n\tString getContentType(); // Returns the content type of the attachment.\n\tjakarta.activation.DataHandler getDataHandler(); // Returns the data handler of the attachment.\n\tInputStream getInputStream(); // Return an InputStream to read the contents of the attachment from.\n\tlong getSize(); // Returns the size of the attachment in bytes.\n}"}
{"index": 5263, "repo": "druid-processing-26.0.0", "des": "A StorageAdapter implementation based on a single Frame.", "code": "Class FrameStorageAdapter {\n\tboolean canVectorize(Filter filter, VirtualColumns virtualColumns, boolean descending); // Returns true if the provided combination of parameters can be handled by \"makeVectorCursor\".\n\tIndexed<String> getAvailableDimensions();\n\tIterable<String> getAvailableMetrics();\n\tColumnCapabilities getColumnCapabilities(String column); // Returns capabilities of a particular column, if known.\n\tint getDimensionCardinality(String column); // Returns the number of distinct values for a column, or DimensionDictionarySelector.CARDINALITY_UNKNOWN if unknown.\n\torg.joda.time.Interval getInterval();\n\torg.joda.time.DateTime getMaxIngestedEventTime();\n\torg.joda.time.DateTime getMaxTime(); // Metadata-only operation that returns an upper bound on ColumnHolder.TIME_COLUMN_NAME values for this adapter.\n\tComparable getMaxValue(String column); // Returns the minimum value of the provided column, if known through an index, dictionary, or cache.\n\tMetadata getMetadata();\n\torg.joda.time.DateTime getMinTime(); // Metadata-only operation that returns a lower bound on ColumnHolder.TIME_COLUMN_NAME values for this adapter.\n\tComparable getMinValue(String column); // Returns the minimum value of the provided column, if known through an index, dictionary, or cache.\n\tint getNumRows();\n\tRowSignature getRowSignature(); // Returns the row signature of the data available from this adapter.\n\tSequence<Cursor> makeCursors(Filter filter, org.joda.time.Interval interval, VirtualColumns virtualColumns, Granularity gran, boolean descending, QueryMetrics<?> queryMetrics); // Creates a sequence of Cursors, one for each time-granular bucket (based on the provided Granularity).\n\tVectorCursor makeVectorCursor(Filter filter, org.joda.time.Interval interval, VirtualColumns virtualColumns, boolean descending, int vectorSize, QueryMetrics<?> queryMetrics); // Creates a VectorCursor.\n}"}
{"index": 5524, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "An implementation which works with the union of the rights granted to the applicable identifiers.", "code": "Class UnionMailboxACLResolver {\n\tprotected static boolean applies(MailboxACL.MailboxACLEntryKey aclKey, MailboxACL.MailboxACLEntryKey queryKey, GroupMembershipResolver groupMembershipResolver, String resourceOwner, boolean resourceOwnerIsGroup); // Tells whether the given aclKey MailboxACL.MailboxACLEntryKey is applicable for the given queryKey.\n\tMailboxACL applyGlobalACL(MailboxACL resourceACL, boolean resourceOwnerIsGroup); // Applies global ACL to the given resourceACL.\n\tboolean hasRight(String requestUser, GroupMembershipResolver groupMembershipResolver, MailboxACL.MailboxACLRight right, MailboxACL resourceACL, String resourceOwner, boolean resourceOwnerIsGroup); // Tells whether the given user has the given right granted on the basis of the given resourceACL.\n\tboolean isReadWrite(MailboxACL.MailboxACLRights mailboxACLRights, javax.mail.Flags sharedFlags); // Maps the given mailboxACLRights to READ-WRITE and READ-ONLY response codes.\n\tMailboxACL.MailboxACLRights[] listRights(MailboxACL.MailboxACLEntryKey queryKey, GroupMembershipResolver groupMembershipResolver, String resourceOwner, boolean resourceOwnerIsGroup); // The key point of this implementation is that it resolves everything what can be resolved.\n\tMailboxACL.MailboxACLRights resolveRights(String requestUser, GroupMembershipResolver groupMembershipResolver, MailboxACL resourceACL, String resourceOwner, boolean resourceOwnerIsGroup); // Computes the rights which apply to the given user and resource.\n}"}
{"index": 5295, "repo": "druid-processing-26.0.0", "des": "An implementation of VectorGrouper backed by a growable MemoryOpenHashTable.", "code": "Class HashVectorGrouper {\n\tAggregateResult aggregateVector(org.apache.datasketches.memory.Memory keySpace, int startRow, int endRow); // Aggregate the current vector of rows from \"startRow\" to \"endRow\" using the provided keys.\n\tvoid close(); // Close the grouper and release associated resources.\n\tint getTableStart();\n\tvoid initVectorized(int maxVectorSize); // Initialize the grouper.\n\tCloseableIterator<Grouper.Entry<MemoryPointer>> iterator(); // Iterate through entry buckets.\n\tvoid reset(); // Reset the grouper to its initial state.\n}"}
{"index": 2632, "repo": "mahout-core-14.1", "des": "partially deprecated until unit tests are in place.", "code": "Class OldQRDecomposition {\n\tMatrix getQ(); // Generates and returns the (economy-sized) orthogonal factor Q.\n\tMatrix getR(); // Returns the upper triangular factor, R.\n\tboolean hasFullRank(); // Returns whether the matrix A has full rank.\n\tMatrix solve(Matrix B); // Least squares solution of A*X = B; returns X.\n}"}
{"index": 16530, "repo": "spring-batch-infrastructure-5.0.2", "des": "Policy for terminating a batch after a fixed number of operations.", "code": "public class SimpleCompletionPolicy extends DefaultResultCompletionPolicy {\n\tint getChunkSize();\n\tboolean isComplete(RepeatContext context); // Terminate if the chunk size has been reached.\n\tboolean isComplete(RepeatContext context, RepeatStatus result); // Terminate if the chunk size has been reached, or the result is null.\n\tvoid setChunkSize(int chunkSize);\n\tRepeatContext start(RepeatContext context); // Reset the counter.\n\tvoid update(RepeatContext context); // Increment the counter in the context.\n}"}
{"index": 17337, "repo": "groovy-4.0.13", "des": "A shell for compiling or running pure Java code", "code": "@Incubating public class JavaShell extends Object {\n\tClass<?> compile(String className, Iterable<String> options, String src); // Compile and return the main class\n\tClass<?> compile(String className, String src); // Compile and return the main class\n\tMap<String,Class<?>> compileAll(String className, Iterable<String> options, String src); // Compile and return all classes\n\tMap<String,Class<?>> compileAll(String className, String src); // Compile and return all classes\n\torg.apache.groovy.util.JavaShell.JavaShellClassLoader getClassLoader(); // When and only when compile(String, String) or compileAll(String, String) is invoked, returned class loader will reference the compiled classes.\n\tvoid run(String className, Iterable<String> options, String src, String... args); // Run main method\n\tvoid run(String className, String src, String... args); // Run main method\n}"}
{"index": 6003, "repo": "commons-lang3-3.12.0", "des": "An enum representing all the versions of the Java specification.", "code": "Enum JavaVersion {\n\tboolean atLeast(JavaVersion requiredVersion); // Whether this version of Java is at least the version of Java passed in.\n\tboolean atMost(JavaVersion requiredVersion); // Whether this version of Java is at most the version of Java passed in.\n\tstatic JavaVersion valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic JavaVersion[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8611, "repo": "avro-1.11.2", "des": "Interface for Avro-supported compression codecs for data files.", "code": "Class Codec {\n\tabstract ByteBuffer compress(ByteBuffer uncompressedData); // Compresses the input data\n\tprotected static int computeOffset(ByteBuffer data);\n\tabstract ByteBuffer decompress(ByteBuffer compressedData); // Decompress the data\n\tabstract boolean equals(Object other); // Codecs must implement an equals() method.\n\tabstract String getName(); // Name of the codec; written to the file's metadata.\n}"}
{"index": 6392, "repo": "spring-data-solr-4.3.15", "des": "HTTP request types supported by SolrRequest.", "code": "Enum RequestMethod {\n\tstatic RequestMethod valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RequestMethod[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13211, "repo": "spring-test-6.0.11", "des": "Mock implementation of the FilterChain interface.", "code": "public class MockFilterChain extends Object implements FilterChain {\n\tvoid doFilter(ServletRequest request, ServletResponse response); // Invoke registered Filters and/or Servlet also saving the request and response.\n\tServletRequest getRequest(); // Return the request that doFilter(jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse) has been called with.\n\tServletResponse getResponse(); // Return the response that doFilter(jakarta.servlet.ServletRequest, jakarta.servlet.ServletResponse) has been called with.\n\tvoid reset(); // Reset this MockFilterChain allowing it to be invoked again.\n}"}
{"index": 1510, "repo": "pdfbox-3.0.0-beta1", "des": "Contains additional information about the components of colour space.", "code": "Class PDDeviceNAttributes {\n\tMap<String,PDSeparation> getColorants(); // Returns a map of colorants and their associated Separation color space.\n\tCOSDictionary getCOSDictionary(); // Returns the underlying COS dictionary.\n\tPDDeviceNProcess getProcess(); // Returns the DeviceN Process Dictionary, or null if it is missing.\n\tboolean isNChannel(); // Returns true if this is an NChannel (PDF 1.6) color space.\n\tvoid setColorants(Map<String,PDColorSpace> colorants); // Sets the colorant map.\n}"}
{"index": 15641, "repo": "spring-security-core-6.1.2", "des": "Associates a given SecurityContext with the current execution thread.", "code": "public class SecurityContextHolder extends Object {\n\tstatic void clearContext(); // Explicitly clears the context value from the current thread.\n\tstatic SecurityContext createEmptyContext(); // Delegates the creation of a new, empty context to the configured strategy.\n\tstatic SecurityContext getContext(); // Obtain the current SecurityContext.\n\tstatic SecurityContextHolderStrategy getContextHolderStrategy(); // Allows retrieval of the context strategy.\n\tstatic Supplier<SecurityContext> getDeferredContext(); // Obtains a Supplier that returns the current context.\n\tstatic int getInitializeCount(); // Primarily for troubleshooting purposes, this method shows how many times the class has re-initialized its SecurityContextHolderStrategy.\n\tstatic void setContext(SecurityContext context); // Associates a new SecurityContext with the current thread of execution.\n\tstatic void setContextHolderStrategy(SecurityContextHolderStrategy strategy); // Use this SecurityContextHolderStrategy.\n\tstatic void setDeferredContext(Supplier<SecurityContext> deferredContext); // Sets a Supplier that will return the current context.\n\tstatic void setStrategyName(String strategyName); // Changes the preferred strategy.\n}"}
{"index": 17918, "repo": "spring-web-6.0.11", "des": "Adapt HttpHandler to an HttpServlet using Servlet Async support and Servlet non-blocking I/O.", "code": "public class ServletHttpHandlerAdapter extends Object implements Servlet {\n\tprotected org.springframework.http.server.reactive.ServletServerHttpRequest createRequest(HttpServletRequest request, AsyncContext context);\n\tprotected org.springframework.http.server.reactive.ServletServerHttpResponse createResponse(HttpServletResponse response, AsyncContext context, org.springframework.http.server.reactive.ServletServerHttpRequest request);\n\tvoid destroy();\n\tint getBufferSize(); // Return the configured input buffer size.\n\torg.springframework.core.io.buffer.DataBufferFactory getDataBufferFactory();\n\tServletConfig getServletConfig();\n\tString getServletInfo();\n\tString getServletPath(); // Return the Servlet path under which the Servlet is deployed by checking the Servlet registration from init(ServletConfig).\n\tvoid init(ServletConfig config);\n\tvoid service(ServletRequest request, ServletResponse response);\n\tvoid setBufferSize(int bufferSize); // Set the size of the input buffer used for reading in bytes.\n\tvoid setDataBufferFactory(org.springframework.core.io.buffer.DataBufferFactory dataBufferFactory);\n}"}
{"index": 17890, "repo": "spring-web-6.0.11", "des": "Common base class for exceptions that contain actual HTTP response data.", "code": "public class RestClientResponseException extends RestClientException {\n\tint getRawStatusCode(); // Deprecated. as of 6.0, in favor of getStatusCode()\n\t<E> E getResponseBodyAs(Class<E> targetType); // Convert the error response content to the specified type.\n\t<E> E getResponseBodyAs(org.springframework.core.ParameterizedTypeReference<E> targetType); // Variant of getResponseBodyAs(Class) with ParameterizedTypeReference.\n\tbyte[] getResponseBodyAsByteArray(); // Return the response body as a byte array.\n\tString getResponseBodyAsString(); // Return the response body converted to String.\n\tString getResponseBodyAsString(Charset fallbackCharset); // Return the response body converted to String.\n\tHttpHeaders getResponseHeaders(); // Return the HTTP response headers.\n\tHttpStatusCode getStatusCode(); // Return the HTTP status code.\n\tString getStatusText(); // Return the HTTP status text.\n\tvoid setBodyConvertFunction(Function<org.springframework.core.ResolvableType,?> bodyConvertFunction); // Provide a function to use to decode the response error content via getResponseBodyAs(Class).\n}"}
{"index": 9659, "repo": "commons-math3-3.6.1", "des": "This class implements the 5(4) Higham and Hall integrator for Ordinary Differential Equations.", "code": "Class HighamHall54FieldIntegrator<T extends RealFieldElement<T>> {\n\tprotected org.apache.commons.math3.ode.nonstiff.HighamHall54FieldStepInterpolator<T> createInterpolator(boolean forward, T[][] yDotK, FieldODEStateAndDerivative<T> globalPreviousState, FieldODEStateAndDerivative<T> globalCurrentState, FieldEquationsMapper<T> mapper); // Create an interpolator.\n\tprotected T estimateError(T[][] yDotK, T[] y0, T[] y1, T h); // Compute the error ratio.\n\tT[][] getA(); // Get the internal weights from Butcher array (without the first empty row).\n\tT[] getB(); // Get the external weights for the high order method from Butcher array.\n\tT[] getC(); // Get the time steps from Butcher array (without the first zero).\n\tint getOrder(); // Get the order of the method.\n}"}
{"index": 3907, "repo": "hbase-client-3.0.0-alpha-4", "des": "Filter that returns only cells whose timestamp (version) is in the specified list of timestamps (versions).", "code": "Class TimestampsFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRowKey(Cell cell); // Filters a row based on the row key.\n\tlong getMin(); // Gets the minimum timestamp requested by filter.\n\tCell getNextCellHint(Cell currentCell); // Pick the next cell that the scanner should seek to.\n\tList<Long> getTimestamps(); // Returns the list of timestamps\n\tstatic TimestampsFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of TimestampsFilter\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n\tprotected String toString(int maxTimestamps);\n}"}
{"index": 17200, "repo": "spring-integration-amqp-6.1.2", "des": "An AmqpPollableMessageChannelSpec for a message-driven PointToPointSubscribableAmqpChannel.", "code": "public class AmqpMessageChannelSpec<S extends AmqpMessageChannelSpec<S,T>,T extends AbstractAmqpChannel> extends AmqpPollableMessageChannelSpec<S,T> {\n\tS acknowledgeMode(org.springframework.amqp.core.AcknowledgeMode acknowledgeMode);\n\tS advice(org.aopalliance.aop.Advice... advice);\n\tS autoStartup(boolean autoStartup);\n\tS batchSize(int batchSize); // Configure the batch size.\n\tS concurrentConsumers(int concurrentConsumers);\n\tprotected T doGet();\n\tS errorHandler(org.springframework.util.ErrorHandler errorHandler);\n\tS exposeListenerChannel(boolean exposeListenerChannel);\n\tS maxSubscribers(int maxSubscribers);\n\tS phase(int phase);\n\tS prefetchCount(int prefetchCount);\n\tS receiveTimeout(long receiveTimeout);\n\tS recoveryInterval(long recoveryInterval);\n\tS shutdownTimeout(long shutdownTimeout);\n\tS taskExecutor(Executor taskExecutor); // Configure an Executor used to invoke the message listener.\n\tS transactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute transactionAttribute); // Configure a TransactionAttribute to be used with the transactionManager(PlatformTransactionManager).\n\tS transactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Configure a PlatformTransactionManager; used to synchronize the rabbit transaction with some other transaction(s).\n}"}
{"index": 10944, "repo": "spring-data-redis-3.1.2", "des": "Base class for RedisTemplate defining common properties.", "code": "public class RedisAccessor extends Object implements InitializingBean {\n\tvoid afterPropertiesSet();\n\tRedisConnectionFactory getConnectionFactory(); // Returns the factory configured to acquire connections and perform operations on the connected Redis instance.\n\tRedisConnectionFactory getRequiredConnectionFactory(); // Returns the required RedisConnectionFactory, throwing an IllegalStateException if the RedisConnectionFactory is not set.\n\tvoid setConnectionFactory(RedisConnectionFactory connectionFactory); // Sets the factory used to acquire connections and perform operations on the connected Redis instance.\n}"}
{"index": 17476, "repo": "spring-integration-xml-6.1.2", "des": "Enumeration of different types of XPath evaluation used to indicate the type of evaluation that should be carried out using a provided XPath expression.", "code": "public enum XPathEvaluationType extends Enum<XPathEvaluationType> {\n\tabstract Object evaluateXPath(org.springframework.xml.xpath.XPathExpression expression, Node node);\n\tstatic XPathEvaluationType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic XPathEvaluationType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10136, "repo": "spring-hateoas-2.1.2", "des": "Helper to easily map embedded resources and find out whether they were curied.", "code": "public static class Jackson2HalModule.EmbeddedMapper extends Object {\n\tboolean hasCuriedEmbed(Iterable<?> source); // Returns whether the given source elements will be namespaced.\n\tMap<HalLinkRelation,Object> map(Iterable<?> source); // Maps the given source elements as embedded values.\n\tHalLinkRelation map(LinkRelation source); // Maps the given HalLinkRelation using the underlying relation transformer.\n\tJackson2HalModule.EmbeddedMapper with(com.fasterxml.jackson.databind.PropertyNamingStrategy strategy); // Registers the given PropertyNamingStrategy with the current mapper to forward that strategy as relation transformer, so that LinkRelations used as key for the embedding will be transformed using the given strategy.\n}"}
{"index": 11105, "repo": "tribuo-core-4.3.1", "des": "An abstract base class for hash functions used to hash the names of features.", "code": "public abstract class Hasher extends Object implements com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<com.oracle.labs.mlrg.olcut.provenance.ConfiguredObjectProvenance>, Serializable, ProtoSerializable<org.tribuo.protos.core.HasherProto> {\n\tabstract String hash(String input); // Hashes the supplied input using the hashing function.\n\tabstract void setSalt(String salt); // The salt is transient, it must be set **to the same value as it was trained with** after the Model is deserialized.\n\tstatic boolean validateSalt(String salt); // Salt validation is currently a test to see if the string is longer than MIN_LENGTH.\n}"}
{"index": 6386, "repo": "spring-data-solr-4.3.15", "des": "Representation of a Group result page, holding one GroupResult for each grouping requested on a org.", "code": "Interface GroupPage<T> {\n\tGroupResult<T> getGroupResult(Field field); // Get a group result done for the given Field.\n\tGroupResult<T> getGroupResult(Function function); // Get a group result done for the given Function.\n\tGroupResult<T> getGroupResult(Query query); // Get a group result done for the given Query.\n\tGroupResult<T> getGroupResult(String name); // Get a group result with the given name.\n}"}
{"index": 18390, "repo": "opencms-core-15.0", "des": "A bean which can be used to reconstruct a publish list.", "code": "Class CmsPublishListToken {\n\tCmsPublishOptions getOptions(); // Gets the publish options.\n\tCmsWorkflow getWorkflow(); // Gets the selected workflow.\n}"}
{"index": 17095, "repo": "spring-integration-core-6.1.2", "des": "The Enterprise Integration Pattern categories.", "code": "public static enum IntegrationPatternType.IntegrationPatternCategory extends Enum<IntegrationPatternType.IntegrationPatternCategory> {\n\tSet<IntegrationPatternType> getPatternTypes();\n\tstatic IntegrationPatternType.IntegrationPatternCategory valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic IntegrationPatternType.IntegrationPatternCategory[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 5000, "repo": "commons-collections-3.2.2", "des": "Decorates another Map to fix the size, preventing add/remove.", "code": "Class FixedSizeMap {\n\tvoid clear();\n\tstatic Map decorate(Map map); // Factory method to create a fixed size map.\n\tSet entrySet();\n\tboolean isFull(); // Returns true if this map is full and no new elements can be added.\n\tSet keySet();\n\tint maxSize(); // Gets the maximum size of the map (the bound).\n\tObject put(Object key, Object value);\n\tvoid putAll(Map mapToCopy);\n\tObject remove(Object key);\n\tCollection values();\n}"}
{"index": 13383, "repo": "shiro-core-2.0.0-alpha-2", "des": "A SubjectDAO is responsible for persisting a Subject instance's internal state such that the Subject instance can be recreated at a later time if necessary.", "code": "public interface SubjectDAO {\n\tvoid delete(Subject subject); // Removes any persisted state for the specified Subject instance.\n\tSubject save(Subject subject); // Persists the specified Subject's state for later access.\n}"}
{"index": 7879, "repo": "cassandra-all-4.1.2", "des": "Abstract class to make writing unfiltered iterators that wrap another iterator easier.", "code": "Class WrappingUnfilteredRowIterator {\n\tvoid close();\n\tRegularAndStaticColumns columns(); // A subset of the columns for the (static and regular) rows returned by this iterator.\n\tboolean hasNext();\n\tboolean isReverseOrder(); // Whether or not the rows returned by this iterator are in reversed clustering order.\n\tTableMetadata metadata(); // The metadata for the table this iterator on.\n\tUnfiltered next();\n\tDecoratedKey partitionKey(); // The partition key of the partition this in an iterator over.\n\tDeletionTime partitionLevelDeletion(); // The partition level deletion for the partition this iterate over.\n\tRow staticRow(); // The static part corresponding to this partition (this can be an empty row but cannot be null).\n\tEncodingStats stats(); // Return \"statistics\" about what is returned by this iterator.\n}"}
{"index": 329, "repo": "phoenix-core-5.1.3", "des": "Manages a singleton instance of the environment edge.", "code": "Class EnvironmentEdgeManager {\n\tstatic long currentTimeMillis(); // Defers to the delegate and calls the EnvironmentEdge.currentTime() method.\n\tstatic EnvironmentEdge getDelegate(); // Retrieves the singleton instance of the EnvironmentEdge that is being managed.\n\tstatic void injectEdge(EnvironmentEdge edge); // Injects the given edge such that it becomes the managed entity.\n\tstatic void reset(); // Resets the managed instance to the default instance: DefaultEnvironmentEdge.\n}"}
{"index": 5996, "repo": "commons-lang3-3.12.0", "des": "A functional interface like ToLongFunction that declares a Throwable.", "code": "Interface FailableToLongFunction<T,E extends Throwable> {\n\tlong applyAsLong(T t); // Applies this function to the given arguments.\n\tstatic <T,E extends Throwable>FailableToLongFunction<T,E> nop(); // Returns The NOP singleton.\n}"}
{"index": 13213, "repo": "spring-test-6.0.11", "des": "Mock implementation of the HttpSession interface.", "code": "public class MockHttpSession extends Object implements HttpSession {\n\tvoid access();\n\tString changeSessionId(); // As of Servlet 3.1, the id of a session can be changed.\n\tvoid clearAttributes(); // Clear all of this session's attributes.\n\tvoid deserializeState(Serializable state); // Deserialize the attributes of this session from a state object created by serializeState().\n\tObject getAttribute(String name);\n\tEnumeration<String> getAttributeNames();\n\tlong getCreationTime();\n\tString getId();\n\tlong getLastAccessedTime();\n\tint getMaxInactiveInterval();\n\tServletContext getServletContext();\n\tvoid invalidate(); // Invalidates this session then unbinds any objects bound to it.\n\tboolean isInvalid();\n\tboolean isNew();\n\tvoid removeAttribute(String name);\n\tSerializable serializeState(); // Serialize the attributes of this session into an object that can be turned into a byte array with standard Java serialization.\n\tvoid setAttribute(String name, Object value);\n\tvoid setMaxInactiveInterval(int interval);\n\tvoid setNew(boolean value);\n}"}
{"index": 3360, "repo": "hadoop-azure-3.3.6", "des": "Interface for AbfsOutputStream statistics.", "code": "Interface AbfsOutputStreamStatistics {\n\tvoid bytesToUpload(long bytes); // Number of bytes to be uploaded.\n\torg.apache.hadoop.fs.statistics.IOStatistics getIOStatistics(); // Get the IOStatisticsStore instance from AbfsOutputStreamStatistics.\n\tvoid queueShrunk(); // Number of times task queue is shrunk.\n\torg.apache.hadoop.fs.statistics.DurationTracker timeSpentTaskWait(); // Time spent in waiting for tasks to be completed in the blocking queue.\n\tvoid uploadFailed(long bytes); // Records that upload is failed and the number of bytes.\n\tvoid uploadSuccessful(long bytes); // Records a successful upload and the number of bytes uploaded.\n\tvoid writeCurrentBuffer(); // Number of times buffer is written to the service after a write operation.\n}"}
{"index": 17167, "repo": "spring-integration-core-6.1.2", "des": "Resequencer specific implementation of AbstractCorrelatingMessageHandler.", "code": "public class ResequencingMessageHandler extends AbstractCorrelatingMessageHandler {\n\tprotected void afterRelease(MessageGroup messageGroup, Collection<org.springframework.messaging.Message<?>> completedMessages); // Allows you to provide additional logic that needs to be performed after the MessageGroup was released.\n\tprotected void afterRelease(MessageGroup messageGroup, Collection<org.springframework.messaging.Message<?>> completedMessages, boolean timeout); // Perform group removal if its size is equal to the sequenceSize.\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tfinal void setExpireGroupsUponTimeout(boolean expireGroupsUponTimeout); // Overridden to false for a resequencer so late messages are immediately discarded rather than waiting for the next timeout.\n\tprotected boolean shouldCopyRequestHeaders(); // Subclasses may override this.\n}"}
{"index": 11312, "repo": "spring-context-6.0.11", "des": "Formatter for JSR-354 CurrencyUnit values, from and to currency code Strings.", "code": "public class CurrencyUnitFormatter extends Object implements Formatter<javax.money.CurrencyUnit> {\n\tjavax.money.CurrencyUnit parse(String text, Locale locale); // Parse a text String to produce a T.\n\tString print(javax.money.CurrencyUnit object, Locale locale); // Print the object of type T for display.\n}"}
{"index": 9331, "repo": "hadoop-yarn-api-3.3.6", "des": "csi-adaptor is a plugin, user can provide customized implementation according to this interface.", "code": "Interface CsiAdaptorPlugin {\n\tString getDriverName(); // Returns the driver name of the csi-driver this adaptor works with.\n\tvoid init(String driverName, org.apache.hadoop.conf.Configuration conf); // A csi-adaptor implementation can init its state within this function.\n}"}
{"index": 14127, "repo": "wicket-core-10.0.0-M1", "des": "ListenerCollection for IApplicationListeners", "code": "public class ApplicationListenerCollection extends org.apache.wicket.util.listener.ListenerCollection<IApplicationListener> implements IApplicationListener {\n\tvoid onAfterInitialized(Application application); // Called after application instance has been initialized\n\tvoid onBeforeDestroyed(Application application); // Called before application instance is destroyed\n}"}
{"index": 7262, "repo": "calcite-core-1.34.0", "des": "Factory for SqlAbstractParserImpl objects.", "code": "Interface SqlParserImplFactory {\n\tdefault DdlExecutor getDdlExecutor(); // Returns a DDL executor.\n\torg.apache.calcite.sql.parser.SqlAbstractParserImpl getParser(Reader stream); // Get the underlying parser implementation.\n}"}
{"index": 10855, "repo": "spring-data-redis-3.1.2", "des": "The SET sub command used with BitFieldSubCommands.", "code": "public static class BitFieldSubCommands.BitFieldSet extends BitFieldSubCommands.AbstractBitFieldSubCommand {\n\tstatic BitFieldSubCommands.BitFieldSet create(BitFieldSubCommands.BitFieldType type, BitFieldSubCommands.Offset offset, long value); // Creates a new BitFieldSubCommands.BitFieldSet.\n\tboolean equals(Object o);\n\tString getCommand(); // The actual sub command\n\tlong getValue(); // Get the value to set.\n}"}
{"index": 9625, "repo": "commons-math3-3.6.1", "des": "Interface defining a visitor for matrix entries.", "code": "Interface FieldMatrixPreservingVisitor<T extends FieldElement<?>> {\n\tT end(); // End visiting a matrix.\n\tvoid start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn); // Start visiting a matrix.\n\tvoid visit(int row, int column, T value); // Visit one matrix entry.\n}"}
{"index": 16148, "repo": "spring-data-cassandra-4.1.2", "des": "RowMapper implementation that creates a java.util.Map for each row, representing all columns as key-value pairs: one entry for each column, with the column name as key.", "code": "public class ColumnMapRowMapper extends Object implements RowMapper<Map<String,Object>> {\n\tprotected Map<String,Object> createColumnMap(int columnCount); // Create a Map instance to be used as column map.\n\tprotected String getColumnKey(String columnName); // Determine the key to use for the given column in the column Map.\n\tprotected Object getColumnValue(com.datastax.oss.driver.api.core.cql.Row row, int index); // Retrieve a CQL object value for the specified column.\n\tMap<String,Object> mapRow(com.datastax.oss.driver.api.core.cql.Row rs, int rowNum); // Implementations must implement this method to map each row of data in the ResultSet.\n}"}
{"index": 3350, "repo": "spring-social-core-1.1.6.RELEASE", "des": "Enum encapsulating the differences between the various versions of the OAuth2 specification.", "code": "Enum OAuth2Version {\n\tabstract java.lang.String getAuthorizationHeaderValue(java.lang.String accessToken);\n\tstatic OAuth2Version valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic OAuth2Version[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2420, "repo": "spring-session-1.3.5.RELEASE", "des": "A HttpSessionStrategy that uses a header to obtain the session from.", "code": "Class HeaderHttpSessionStrategy {\n\tjava.lang.String getRequestedSessionId(HttpServletRequest request); // Obtains the requested session id from the provided HttpServletRequest.\n\tvoid onInvalidateSession(HttpServletRequest request, HttpServletResponse response); // This method is invoked when a session is invalidated and should inform a client that the session id is no longer valid.\n\tvoid onNewSession(Session session, HttpServletRequest request, HttpServletResponse response); // This method is invoked when a new session is created and should inform a client what the new session id is.\n\tvoid setHeaderName(java.lang.String headerName); // The name of the header to obtain the session id from.\n}"}
{"index": 8114, "repo": "commons-compress-1.23.0", "des": "A Thread-safe representation of a ZipArchiveEntry that is used to add entries to parallel archives.", "code": "Class ZipArchiveEntryRequest {\n\tstatic ZipArchiveEntryRequest createZipArchiveEntryRequest(ZipArchiveEntry zipArchiveEntry, InputStreamSupplier payloadSupplier); // Creates a ZipArchiveEntryRequest\n\tint getMethod(); // Gets the compression method to use\n\tInputStream getPayloadStream(); // Gets the payload that will be added to this ZIP entry\n}"}
{"index": 3379, "repo": "hadoop-azure-3.3.6", "des": "IdentityTransformerInterface defines the set of translation operations that any identity transformer implementation must provide.", "code": "Interface IdentityTransformerInterface {\n\tvoid transformAclEntriesForGetRequest(List<org.apache.hadoop.fs.permission.AclEntry> aclEntries, String localUser, String localGroup); // Perform Identity transformation when calling GetAclStatus().\n\tvoid transformAclEntriesForSetRequest(List<org.apache.hadoop.fs.permission.AclEntry> aclEntries); // Perform Identity transformation when calling setAcl(),removeAclEntries() and modifyAclEntries().\n\tString transformIdentityForGetRequest(String originalIdentity, boolean isUserName, String localIdentity); // Perform identity transformation for the Get request.\n\tString transformUserOrGroupForSetRequest(String userOrGroup); // Perform Identity transformation when setting owner on a path.\n}"}
{"index": 18407, "repo": "opencms-core-15.0", "des": "Search configuration special for field facets.", "code": "Class CmsSearchConfigurationFacetRange {\n\tjava.lang.String getEnd(); // Returns the value of facet.range.end for the facet.\n\tjava.lang.String getGap(); // Returns the value of facet.range.gap for the facet.\n\tboolean getHardEnd(); // Returns the value of facet.range.hardend for the facet.\n\tjava.util.Collection<I_CmsSearchConfigurationFacetRange.Other> getOther(); // Returns the values of facet.range.other for the facet.\n\tjava.lang.String getRange(); // Returns the numeric index field that is used for the facet, i.e., the value of facet.range.\n\tjava.lang.String getStart(); // Returns the value of facet.range.start for the facet.\n}"}
{"index": 13922, "repo": "spring-webflux-6.0.11", "des": "Context passed to ScriptTemplateView render function in order to make the application context, the locale, the template loader and the url available on scripting side.", "code": "public class RenderingContext extends Object {\n\torg.springframework.context.ApplicationContext getApplicationContext(); // Return the application context.\n\tLocale getLocale(); // Return the locale of the rendered template.\n\tFunction<String,String> getTemplateLoader(); // Return a function that takes a template path as input and returns the template content as a String.\n\tString getUrl(); // Return the URL of the rendered template.\n}"}
{"index": 2192, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ColumnArithmeticColumn.", "code": "Class LongColSubtractDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 13136, "repo": "pulsar-client-original-3.0.0", "des": "A schema implementation to deal with json data.", "code": "public class JSONSchema<T> extends AvroBaseStructSchema<T> {\n\tstatic void clearCaches(); // Clears the caches tied to the ObjectMapper instances and replaces the singleton ObjectMapper instance.\n\tSchemaInfo getBackwardsCompatibleJsonSchemaInfo(); // Implemented for backwards compatibility reasons.\n\tstatic <T> JSONSchema<T> of(Class<T> pojo);\n\tstatic <T> JSONSchema<T> of(Class<T> pojo, Map<String,String> properties);\n\tstatic <T> JSONSchema<T> of(SchemaDefinition<T> schemaDefinition);\n}"}
{"index": 10963, "repo": "spring-data-redis-3.1.2", "des": "RedisConfiguration part suitable for configurations that use native domain sockets for connecting.", "code": "public static interface RedisConfiguration.WithDomainSocket {\n\tString getSocket(); // Get the domain socket.\n\tvoid setSocket(String socket); // Set the socket.\n}"}
{"index": 14996, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An Authentication implementation used for OpenID Connect 1.0 Dynamic Client Registration (and Configuration) Endpoint.", "code": "public class OidcClientRegistrationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tString getClientId(); // Returns the client identifier.\n\tOidcClientRegistration getClientRegistration(); // Returns the client registration.\n\tObject getCredentials();\n\tObject getPrincipal();\n}"}
{"index": 17705, "repo": "spring-web-6.0.11", "des": "The default implementation of CorsProcessor, as defined by the CORS W3C recommendation.", "code": "public class DefaultCorsProcessor extends Object implements CorsProcessor {\n\tprotected List<String> checkHeaders(CorsConfiguration config, List<String> requestHeaders); // Check the headers and determine the headers for the response of a pre-flight request.\n\tprotected List<HttpMethod> checkMethods(CorsConfiguration config, HttpMethod requestMethod); // Check the HTTP method and determine the methods for the response of a pre-flight request.\n\tprotected String checkOrigin(CorsConfiguration config, String requestOrigin); // Check the origin and determine the origin for the response.\n\tprotected boolean handleInternal(ServerWebExchange exchange, CorsConfiguration config, boolean preFlightRequest); // Handle the given request.\n\tboolean process(CorsConfiguration config, ServerWebExchange exchange); // Process a request using the given CorsConfiguration.\n\tprotected void rejectRequest(ServerHttpResponse response); // Invoked when one of the CORS checks failed.\n}"}
{"index": 253, "repo": "commons-collections4-4.4", "des": "Decorates another SortedBag to transform objects that are added.", "code": "Class TransformedSortedBag<E> {\n\tComparator<? super E> comparator(); // Returns the comparator associated with this sorted set, or null if it uses its elements' natural ordering.\n\tE first(); // Returns the first (lowest) member.\n\tprotected SortedBag<E> getSortedBag(); // Gets the decorated bag.\n\tE last(); // Returns the last (highest) member.\n\tstatic <E> TransformedSortedBag<E> transformedSortedBag(SortedBag<E> bag, Transformer<? super E,? extends E> transformer); // Factory method to create a transforming sorted bag that will transform existing contents of the specified sorted bag.\n\tstatic <E> TransformedSortedBag<E> transformingSortedBag(SortedBag<E> bag, Transformer<? super E,? extends E> transformer); // Factory method to create a transforming sorted bag.\n}"}
{"index": 10278, "repo": "spring-core-6.0.11", "des": "Generic converter interface for converting between two or more types.", "code": "public interface GenericConverter {\n\tObject convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType); // Convert the source object to the targetType described by the TypeDescriptor.\n\tSet<GenericConverter.ConvertiblePair> getConvertibleTypes(); // Return the source and target types that this converter can convert between.\n}"}
{"index": 5069, "repo": "commons-collections-3.2.2", "des": "Defines a map that allows bidirectional lookup between key and values and retains both keys and values in sorted order.", "code": "Interface SortedBidiMap {\n\tBidiMap inverseBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tSortedBidiMap inverseSortedBidiMap(); // Gets a view of this map where the keys and values are reversed.\n}"}
{"index": 3749, "repo": "kafka-streams-3.5.0", "des": "The ValueTransformerWithKey interface for stateful mapping of a value to a new value (with possible new type).", "code": "Interface ValueTransformerWithKey<K,V,VR> {\n\tvoid close(); // Close this processor and clean up any resources.\n\tvoid init(ProcessorContext context); // Initialize this transformer.\n\tVR transform(K readOnlyKey, V value); // Transform the given [key and] value to a new value.\n}"}
{"index": 9280, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "List of commands that the container-executor will execute.", "code": "Enum PrivilegedOperation.RunAsUserCommand {\n\tint getValue();\n\tstatic PrivilegedOperation.RunAsUserCommand valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic PrivilegedOperation.RunAsUserCommand[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 896, "repo": "ignite-core-2.15.0", "des": "Extended Grid interface which provides some additional methods required for kernal and Visor.", "code": "Interface IgniteEx {\n\tboolean allEventsUserRecordable(int[] types); // Checks whether all provided events are user-recordable.\n\tCollection<IgniteInternalCache<?,?>> cachesx(IgnitePredicate<? super IgniteInternalCache<?,?>>... p); // Gets configured cache instance that satisfy all provided predicates including non-public caches.\n\t<K,V> @Nullable IgniteInternalCache<K,V> cachex(String name); // Gets the cache instance for the given name if one is configured or null otherwise returning even non-public caches.\n\tIgniteClusterEx cluster(); // Gets an instance of IgniteCluster interface.\n\tGridKernalContext context(); // Internal context.\n\tboolean destroyCache0(String cacheName, boolean sql); // Stops dynamically started cache.\n\tboolean eventUserRecordable(int type); // Checks if the event type is user-recordable.\n\t<K,V> IgniteBiTuple<IgniteCache<K,V>,Boolean> getOrCreateCache0(CacheConfiguration<K,V> cacheCfg, boolean sql); // Gets existing cache with the given name or creates new one with the given configuration.\n\tboolean isJmxRemoteEnabled(); // Whether or not remote JMX management is enabled for this node.\n\tboolean isRebalanceEnabled(); // Get rebalance enabled flag.\n\tboolean isRestartEnabled(); // Whether or not node restart is enabled.\n\t@Nullable String latestVersion(); // Get latest version in string form.\n\tClusterNode localNode(); // Gets local grid node.\n\tvoid rebalanceEnabled(boolean rebalanceEnabled); // Set rebalance enable flag on node.\n\t<T> IgniteSet<T> set(String name, int cacheId, boolean collocated, boolean separated); // Gets a set from cache by known cache id.\n\t<K extends GridCacheUtilityKey,V>IgniteInternalCache<K,V> utilityCache(); // Gets utility cache.\n}"}
{"index": 7324, "repo": "calcite-core-1.34.0", "des": "Policy for how to do deal with long lines.", "code": "Enum SqlWriterConfig.LineFolding {\n\tstatic SqlWriterConfig.LineFolding valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlWriterConfig.LineFolding[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16589, "repo": "spring-beans-6.0.11", "des": "The root interface for accessing a Spring bean container.", "code": "public interface BeanFactory {\n\tboolean containsBean(String name); // Does this bean factory contain a bean definition or externally registered singleton instance with the given name?\n\tString[] getAliases(String name); // Return the aliases for the given bean name, if any.\n\t<T> T getBean(Class<T> requiredType); // Return the bean instance that uniquely matches the given object type, if any.\n\t<T> T getBean(Class<T> requiredType, Object... args); // Return an instance, which may be shared or independent, of the specified bean.\n\tObject getBean(String name); // Return an instance, which may be shared or independent, of the specified bean.\n\t<T> T getBean(String name, Class<T> requiredType); // Return an instance, which may be shared or independent, of the specified bean.\n\tObject getBean(String name, Object... args); // Return an instance, which may be shared or independent, of the specified bean.\n\t<T> ObjectProvider<T> getBeanProvider(Class<T> requiredType); // Return a provider for the specified bean, allowing for lazy on-demand retrieval of instances, including availability and uniqueness options.\n\t<T> ObjectProvider<T> getBeanProvider(org.springframework.core.ResolvableType requiredType); // Return a provider for the specified bean, allowing for lazy on-demand retrieval of instances, including availability and uniqueness options.\n\tClass<?> getType(String name); // Determine the type of the bean with the given name.\n\tClass<?> getType(String name, boolean allowFactoryBeanInit); // Determine the type of the bean with the given name.\n\tboolean isPrototype(String name); // Is this bean a prototype? That is, will getBean(java.lang.String) always return independent instances?\n\tboolean isSingleton(String name); // Is this bean a shared singleton? That is, will getBean(java.lang.String) always return the same instance?\n\tboolean isTypeMatch(String name, Class<?> typeToMatch); // Check whether the bean with the given name matches the specified type.\n\tboolean isTypeMatch(String name, org.springframework.core.ResolvableType typeToMatch); // Check whether the bean with the given name matches the specified type.\n}"}
{"index": 6165, "repo": "jackson-databind-2.15.2", "des": "This is the special serializer for regular Doubles (and primitive doubles) Since this is one of \"native\" types, no type information is ever included on serialization (unlike for most scalar types other than long).", "code": "Class NumberSerializers.DoubleSerializer {\n\tvoid serialize(Object value, JsonGenerator gen, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(Object value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer); // Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix.\n}"}
{"index": 11489, "repo": "spring-restdocs-core-3.0.0", "des": "A configurer that can be used to configure the default operation preprocessors.", "code": "public abstract class OperationPreprocessorsConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT> {\n\tvoid apply(Map<String,Object> configuration, RestDocumentationContext context); // Applies the configurer to the given configuration.\n\tTYPE withRequestDefaults(OperationPreprocessor... preprocessors); // Configures the default operation request preprocessors.\n\tTYPE withResponseDefaults(OperationPreprocessor... preprocessors); // Configures the default operation response preprocessors.\n}"}
{"index": 14445, "repo": "wicket-core-10.0.0-M1", "des": "This implementation of IValidatable is meant to be used outside of Wicket.", "code": "public class Validatable<T> extends Object implements IValidatable<T> {\n\tvoid error(IValidationError error); // Reports an error against this IValidatable's value.\n\tList<IValidationError> getErrors(); // Retrieves an unmodifiable list of any errors reported against this IValidatable instance.\n\tIModel<T> getModel(); // Returns the model of the component being validated\n\tT getValue(); // Retrieves the value to be validated.\n\tboolean isValid(); // Queries the current state of this IValidatable instance.\n\tvoid setModel(IModel<T> model); // Sets model\n\tvoid setValue(T value); // Sets the value object that will be returned by getValue().\n}"}
{"index": 5313, "repo": "druid-processing-26.0.0", "des": "Represents everything about a join clause except for the left-hand datasource.", "code": "Class JoinableClause {\n\tOptional<Closeable> acquireReferences(); // This method is expected to increment a reference count and provide a Closeable that decrements the reference count when closed.\n\tboolean equals(Object o);\n\tList<String> getAvailableColumnsPrefixed(); // Returns a list of columns from the underlying Joinable.getAvailableColumns() method, with our prefix (getPrefix()) prepended.\n\tJoinConditionAnalysis getCondition(); // The join condition.\n\tJoinable getJoinable(); // The right-hand Joinable.\n\tJoinType getJoinType(); // The type of join: LEFT, RIGHT, INNER, or FULL.\n\tString getPrefix(); // The prefix to apply to all columns from the Joinable.\n\tboolean includesColumn(String columnName); // Returns whether \"columnName\" can be retrieved from the Joinable represented by this clause (i.e., whether it starts with prefix and has at least one other character beyond that).\n\tString unprefix(String columnName); // Removes our prefix from \"columnName\".\n}"}
{"index": 18701, "repo": "poi-5.2.3", "des": "Simple implementation of DocumentEntry for OPOIFS", "code": "Class DocumentNode {\n\tString getShortDescription(); // Provides a short description of the object, to be used when a POIFSViewable object has not provided its contents.\n\tint getSize(); // get the zize of the document, in bytes\n\tObject[] getViewableArray(); // Get an array of objects, some of which may implement POIFSViewable\n\tIterator<Object> getViewableIterator(); // Get an Iterator of objects, some of which may implement POIFSViewable\n\tprotected boolean isDeleteOK(); // extensions use this method to verify internal rules regarding deletion of the underlying store.\n\tboolean isDocumentEntry(); // is this a DocumentEntry?\n\tboolean preferArray(); // Give viewers a hint as to whether to call getViewableArray or getViewableIterator\n}"}
{"index": 13327, "repo": "shiro-core-2.0.0-alpha-2", "des": "Default implementation of the PasswordService interface that relies on an internal HashService, HashFormat, and HashFormatFactory to function:", "code": "public class DefaultPasswordService extends Object implements HashingPasswordService {\n\tprotected void checkHashFormatDurability();\n\tprotected org.apache.shiro.lang.util.ByteSource createByteSource(Object o);\n\tprotected org.apache.shiro.crypto.hash.HashRequest createHashRequest(org.apache.shiro.lang.util.ByteSource plaintext);\n\tString encryptPassword(Object plaintext); // Converts the specified plaintext password (usually acquired from your application's 'new user' or 'password reset' workflow) into a formatted string safe for storage.\n\torg.apache.shiro.crypto.hash.format.HashFormat getHashFormat();\n\torg.apache.shiro.crypto.hash.format.HashFormatFactory getHashFormatFactory();\n\torg.apache.shiro.crypto.hash.HashService getHashService();\n\torg.apache.shiro.crypto.hash.Hash hashPassword(Object plaintext); // Hashes the specified plaintext password using internal hashing configuration settings pertinent to password hashing.\n\tboolean passwordsMatch(Object submittedPlaintext, String saved); // Returns true if the submittedPlaintext password matches the existing saved password, false otherwise.\n\tboolean passwordsMatch(Object plaintext, org.apache.shiro.crypto.hash.Hash saved); // Returns true if the submittedPlaintext password matches the existing savedPasswordHash, false otherwise.\n\tvoid setHashFormat(org.apache.shiro.crypto.hash.format.HashFormat hashFormat);\n\tvoid setHashFormatFactory(org.apache.shiro.crypto.hash.format.HashFormatFactory hashFormatFactory);\n\tvoid setHashService(org.apache.shiro.crypto.hash.HashService hashService);\n}"}
{"index": 1602, "repo": "pdfbox-3.0.0-beta1", "des": "An XML Forms Architecture (XFA) resource.", "code": "Class PDXFAResource {\n\tbyte[] getBytes(); // Get the XFA content as byte array.\n\tCOSBase getCOSObject(); // Convert this standard java object to a COS object.\n\tDocument getDocument(); // Get the XFA content as W3C document.\n}"}
{"index": 15380, "repo": "spring-boot-3.1.1", "des": "WebServer that can be used to control an Undertow web server.", "code": "public class UndertowWebServer extends Object implements WebServer {\n\tprotected io.undertow.server.HttpHandler createHttpHandler();\n\tint getPort(); // Return the port this server is listening on.\n\tprotected String getStartLogMessage();\n\tvoid shutDownGracefully(GracefulShutdownCallback callback); // Initiates a graceful shutdown of the web server.\n\tvoid start(); // Starts the web server.\n\tvoid stop(); // Stops the web server.\n}"}
{"index": 10648, "repo": "groovy-all-4.0.13", "des": "The delegate used when invoking closures", "code": "public static class StreamingJsonBuilder.StreamingJsonDelegate extends GroovyObjectSupport {\n\tvoid call(String name, JsonOutput.JsonUnescaped json); // Writes an unescaped value.\n\tvoid call(String name, Closure value); // Writes the name and another JSON object\n\tvoid call(String name, Writable json); // Writes the given Writable as the value of the given attribute name\n\tvoid call(String name, Iterable coll, Closure c); // A collection and closure passed to a JSON builder will create a root JSON array applying the closure to each object in the collection\n\tvoid call(String name, Object value); // Writes the name and value of a JSON attribute\n\tvoid call(String name, Object... array); // Writes the name and a JSON array\n\tvoid call(String name, Object value, Closure callable); // Writes the name and value of a JSON attribute\n\tvoid call(String name, Collection coll, Closure c); // Delegates to call(String, Iterable, Closure)\n\tvoid call(String name, List<Object> list); // Writes the name and a JSON array\n\tstatic void cloneDelegateAndGetContent(Writer w, Closure c);\n\tstatic void cloneDelegateAndGetContent(Writer w, Closure c, boolean first);\n\tstatic void curryDelegateAndGetContent(Writer w, Closure c, Object o);\n\tstatic void curryDelegateAndGetContent(Writer w, Closure c, Object o, boolean first);\n\tWriter getWriter();\n\tObject invokeMethod(String name, Object args); // Invokes the given method.\n\tstatic boolean isCollectionWithClosure(Object[] args);\n\tprotected void verifyValue();\n\tprotected void writeArray(List<Object> list);\n\tstatic Object writeCollectionWithClosure(Writer writer, Collection coll, Closure closure);\n\tprotected void writeName(String name);\n\tprotected void writeValue(Object value);\n}"}
{"index": 5130, "repo": "druid-processing-26.0.0", "des": "Column merger for AutoTypeColumnIndexer to eventually produce some form of NestedCommonFormatColumn.", "code": "Class AutoTypeColumnMerger {\n\tColumnValueSelector convertSortedSegmentRowValuesToMergedRowValues(int segmentIndex, ColumnValueSelector source); // Creates a value selector, which converts values with per-segment, _sorted order_ (see DimensionIndexer.convertUnsortedValuesToSorted(org.apache.druid.segment.ColumnValueSelector)) encoding from the given selector to their equivalent representation in the merged set of rows.\n\tboolean hasOnlyNulls(); // Returns true if this dimension has no data besides nulls.\n\tColumnDescriptor makeColumnDescriptor(); // Return a ColumnDescriptor containing ColumnPartSerde objects appropriate for this DimensionMerger's value metadata, sequence of row values, and index structures.\n\tvoid processMergedRow(ColumnValueSelector selector); // Process a column value(s) (potentially multi-value) of a row from the given selector and update the DimensionMerger's internal state.\n\tvoid writeIndexes(List<IntBuffer> segmentRowNumConversions); // Internally construct any index structures relevant to this DimensionMerger.\n\tvoid writeMergedValueDictionary(List<IndexableAdapter> adapters); // Given a list of segment adapters: - Read _sorted order_ (e.\n}"}
{"index": 2059, "repo": "hive-exec-4.0.0-alpha-2", "des": "Returns evaluation result of other evaluator.", "code": "Class ExprNodeEvaluatorRef {\n\tprotected Object _evaluate(Object row, int version); // Evaluate value\n\tObjectInspector initialize(ObjectInspector rowInspector); // Initialize should be called once and only once.\n}"}
{"index": 6793, "repo": "calcite-core-1.34.0", "des": "Holder for a list of constants describing which bugs which have not been fixed.", "code": "Class Bug {\n\tstatic <T> T remark(T remark); // Use this method to flag temporary code.\n\tstatic boolean upgrade(String remark); // Use this method to flag code that should be re-visited after upgrading a component.\n}"}
{"index": 14006, "repo": "spring-retry-2.0.2", "des": "Implementation of BackOffPolicy that increases the back off period for each retry attempt in a given set up to a limit.", "code": "public class ExponentialBackOffPolicy extends Object implements SleepingBackOffPolicy<ExponentialBackOffPolicy> {\n\tvoid backOff(BackOffContext backOffContext); // Pause for the current backoff interval.\n\tprotected void cloneValues(ExponentialBackOffPolicy target);\n\tlong getInitialInterval(); // The initial period to sleep on the first backoff.\n\tprotected Supplier<Long> getInitialIntervalSupplier();\n\tlong getMaxInterval(); // The maximum interval to sleep for.\n\tprotected Supplier<Long> getMaxIntervalSupplier();\n\tdouble getMultiplier(); // The multiplier to use to generate the next backoff interval from the last.\n\tprotected Supplier<Double> getMultiplierSupplier();\n\tvoid initialIntervalSupplier(Supplier<Long> initialIntervalSupplier); // Set the initial sleep interval value.\n\tvoid maxIntervalSupplier(Supplier<Long> maxIntervalSupplier); // Setter for maximum back off period.\n\tvoid multiplierSupplier(Supplier<Double> multiplierSupplier); // Set the multiplier value.\n\tprotected ExponentialBackOffPolicy newInstance();\n\tvoid setInitialInterval(long initialInterval); // Set the initial sleep interval value.\n\tvoid setMaxInterval(long maxInterval); // Setter for maximum back off period.\n\tvoid setMultiplier(double multiplier); // Set the multiplier value.\n\tvoid setSleeper(Sleeper sleeper); // Public setter for the Sleeper strategy.\n\tBackOffContext start(RetryContext context); // Returns a new instance of BackOffContext with the configured properties.\n\tExponentialBackOffPolicy withSleeper(Sleeper sleeper); // Clone the policy and return a new policy which uses the passed sleeper.\n}"}
{"index": 15818, "repo": "camel-api-4.0.0-RC1", "des": "Represents a Polling Consumer where the caller polls for messages when it is ready.", "code": "public interface PollingConsumer extends Consumer {\n\tExchange receive(); // Waits until a message is available and then returns it.\n\tExchange receive(long timeout); // Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available.\n\tExchange receiveNoWait(); // Attempts to receive a message exchange immediately without waiting and returning null if a message exchange is not available yet.\n}"}
{"index": 906, "repo": "ignite-core-2.15.0", "des": "This interface defines basic logging functionality used throughout the system.", "code": "Interface IgniteLogger {\n\tvoid debug(String msg); // Logs out debug message.\n\tdefault void debug(@Nullable String marker, String msg); // Logs out debug message.\n\tdefault void error(String msg); // Logs out error message.\n\tdefault void error(@Nullable String marker, String msg, @Nullable Throwable e); // Logs error message with optional exception.\n\tvoid error(String msg, @Nullable Throwable e); // Logs error message with optional exception.\n\tString fileName(); // Gets name of the file being logged to if one is configured or null otherwise.\n\tIgniteLogger getLogger(Object ctgr); // Creates new logger with given category based off the current instance.\n\tvoid info(String msg); // Logs out information message.\n\tdefault void info(@Nullable String marker, String msg); // Logs out information message.\n\tboolean isDebugEnabled(); // Tests whether debug level is enabled.\n\tboolean isInfoEnabled(); // Tests whether info level is enabled.\n\tboolean isQuiet(); // Tests whether Logger is in \"Quiet mode\".\n\tboolean isTraceEnabled(); // Tests whether trace level is enabled.\n\tvoid trace(String msg); // Logs out trace message.\n\tdefault void trace(@Nullable String marker, String msg); // Logs out trace message.\n\tdefault void warning(String msg); // Logs out warning message.\n\tdefault void warning(@Nullable String marker, String msg, @Nullable Throwable e); // Logs out warning message with optional exception.\n\tvoid warning(String msg, @Nullable Throwable e); // Logs out warning message with optional exception.\n}"}
{"index": 3169, "repo": "commons-jexl3-3.3", "des": "A sandbox describes permissions on a class by explicitly allowing or forbidding access to methods and properties through \"allowlists\" and \"blocklists\".", "code": "Class JexlSandbox {\n\tJexlSandbox.Permissions allow(String clazz); // Creates a new set of permissions based on allow lists for methods and properties for a given class.\n\tJexlSandbox.Permissions block(String clazz); // Creates a new set of permissions based on block lists for methods and properties for a given class.\n\tJexlSandbox copy();\n\tString execute(Class<?> clazz, String name); // Gets the execute permission value for a given method of a class.\n\tJexlSandbox.Permissions get(Class<?> clazz); // Get the permissions associated to a class.\n\tJexlSandbox.Permissions get(String clazz); // Gets the set of permissions associated to a class.\n\tJexlSandbox.Permissions permissions(String clazz, boolean readFlag, boolean writeFlag, boolean executeFlag); // Creates the set of permissions for a given class.\n\tJexlSandbox.Permissions permissions(String clazz, boolean inhf, boolean readf, boolean writef, boolean execf); // Creates the set of permissions for a given class.\n\tString read(Class<?> clazz, String name); // Gets the read permission value for a given property of a class.\n\tString write(Class<?> clazz, String name); // Gets the write permission value for a given property of a class.\n}"}
{"index": 4846, "repo": "hadoop-common-3.3.4", "des": "An immutable snapshot of metrics with a timestamp.", "code": "Interface MetricsRecord {\n\tString context();\n\tString description();\n\tIterable<AbstractMetric> metrics(); // Get the metrics of the record\n\tString name();\n\tCollection<MetricsTag> tags(); // Get the tags of the record Note: returning a collection instead of iterable as we need to use tags as keys (hence Collection#hashCode etc.) in maps\n\tlong timestamp(); // Get the timestamp of the metrics\n}"}
{"index": 11700, "repo": "spring-cloud-commons-3.1.7", "des": "Implemented by classes which use a load balancer to choose a server to send a request to.", "code": "public interface ServiceInstanceChooser {\n\tServiceInstance choose(String serviceId); // Chooses a ServiceInstance from the LoadBalancer for the specified service.\n\t<T> ServiceInstance choose(String serviceId, Request<T> request); // Chooses a ServiceInstance from the LoadBalancer for the specified service and LoadBalancer request.\n}"}
{"index": 12778, "repo": "spring-data-mongodb-4.1.2", "des": "Convenient factory for configuring MongoDB.", "code": "public class MongoClientFactoryBean extends AbstractFactoryBean<com.mongodb.client.MongoClient> implements PersistenceExceptionTranslator {\n\tprotected com.mongodb.MongoClientSettings computeClientSetting(); // Create MongoClientSettings based on configuration and priority (lower is better).\n\tprotected com.mongodb.client.MongoClient createInstance();\n\tprotected void destroyInstance(com.mongodb.client.MongoClient instance);\n\tClass<? extends com.mongodb.client.MongoClient> getObjectType();\n\tvoid setConnectionString(com.mongodb.ConnectionString connectionString);\n\tvoid setCredential(com.mongodb.MongoCredential[] credential); // Set the list of credentials to be used when creating MongoClient.\n\tvoid setExceptionTranslator(PersistenceExceptionTranslator exceptionTranslator); // Configures the PersistenceExceptionTranslator to use.\n\tvoid setHost(String host); // Configures the host to connect to.\n\tvoid setMongoClientSettings(com.mongodb.MongoClientSettings mongoClientOptions); // Set the MongoClientSettings to be used when creating MongoClient.\n\tvoid setPort(int port); // Configures the port to connect to.\n\tvoid setReplicaSet(String replicaSet);\n\tDataAccessException translateExceptionIfPossible(RuntimeException ex);\n}"}
{"index": 8572, "repo": "commons-io-2.13.0", "des": "DataInput for systems relying on little endian data formats.", "code": "Class SwappedDataInputStream {\n\tboolean readBoolean(); // Return readByte() != 0\n\tbyte readByte(); // Invokes the delegate's read() method.\n\tchar readChar(); // Reads a character delegating to readShort().\n\tdouble readDouble(); // Delegates to EndianUtils.readSwappedDouble(InputStream).\n\tfloat readFloat(); // Delegates to EndianUtils.readSwappedFloat(InputStream).\n\tvoid readFully(byte[] data); // Invokes the delegate's read(byte[] data, int, int) method.\n\tvoid readFully(byte[] data, int offset, int length); // Invokes the delegate's read(byte[] data, int, int) method.\n\tint readInt(); // Delegates to EndianUtils.readSwappedInteger(InputStream).\n\tString readLine(); // Not currently supported - throws UnsupportedOperationException.\n\tlong readLong(); // Delegates to EndianUtils.readSwappedLong(InputStream).\n\tshort readShort(); // Delegates to EndianUtils.readSwappedShort(InputStream).\n\tint readUnsignedByte(); // Invokes the delegate's read() method.\n\tint readUnsignedShort(); // Delegates to EndianUtils.readSwappedUnsignedShort(InputStream).\n\tString readUTF(); // Not currently supported - throws UnsupportedOperationException.\n\tint skipBytes(int count); // Invokes the delegate's skip(int) method.\n}"}
{"index": 1783, "repo": "kafka-clients-3.5.0", "des": "A metric tracked for monitoring purposes.", "code": "Interface Metric {\n\tMetricName metricName(); // A name for this metric\n\tObject metricValue(); // The value of the metric, which may be measurable or a non-measurable gauge\n}"}
{"index": 13133, "repo": "pulsar-client-original-3.0.0", "des": "A container that hold the list ConsumerInterceptor and wraps calls to the chain of custom interceptors.", "code": "public class ConsumerInterceptors<T> extends Object implements Closeable {\n\tMessage<T> beforeConsume(Consumer<T> consumer, Message<T> message); // This is called just before the message is returned by Consumer.receive(), MessageListener.received(Consumer, Message) or the CompletableFuture returned by Consumer.receiveAsync() completes.\n\tvoid close();\n\tvoid onAcknowledge(Consumer<T> consumer, MessageId messageId, Throwable exception); // This is called when acknowledge request return from the broker.\n\tvoid onAcknowledgeCumulative(Consumer<T> consumer, MessageId messageId, Throwable exception); // This is called when acknowledge cumulative request return from the broker.\n\tvoid onAckTimeoutSend(Consumer<T> consumer, Set<MessageId> messageIds); // This is called when a redelivery from an acknowledge timeout occurs.\n\tvoid onNegativeAcksSend(Consumer<T> consumer, Set<MessageId> messageIds); // This is called when a redelivery from a negative acknowledge occurs.\n\tvoid onPartitionsChange(String topicName, int partitions);\n}"}
{"index": 479, "repo": "ignite-core-2.15.0", "des": "Leaf page to store index rows with inlined keys.", "code": "Class AbstractInlineLeafIO {\n\tIndexRow getLookupRow(BPlusTree<IndexRow,?> tree, long pageAddr, int idx); // Get lookup row.\n\tint inlineSize();\n\tlong link(long pageAddr, int idx);\n\tstatic void register(); // Register IOs for every available inlineSize for MVCC and not.\n\tvoid store(long dstPageAddr, int dstIdx, BPlusIO<IndexRow> srcIo, long srcPageAddr, int srcIdx); // Store row info from the given source.\n\tvoid storeByOffset(long pageAddr, int off, IndexRow row); // Store the needed info about the row in the page.\n\tstatic IOVersions<? extends BPlusLeafIO<IndexRow>> versions(int payload, boolean mvccEnabled);\n}"}
{"index": 1669, "repo": "samza-api-1.8.0", "des": "A serializer for UTF-8 encoded JSON strings.", "code": "Class JsonSerdeV2<T> {\n\tT fromBytes(byte[] bytes); // Deserializes given serialized object from an array of bytes to its original form.\n\tstatic <T> JsonSerdeV2<T> of(java.lang.Class<T> clazz);\n\tbyte[] toBytes(T obj); // Serializes given object to an array of bytes.\n}"}
{"index": 6397, "repo": "spring-data-solr-4.3.15", "des": "Represents a group holding the group value and all beans belonging to the group.", "code": "Class SimpleGroupEntry<T> {\n\tString getGroupValue(); // Group name, the value on which the results were grouped by.\n\tPage<T> getResult(); // Results for the current group.\n}"}
{"index": 4088, "repo": "camel-core-3.0.0-RC1", "des": "To use a custom data format implementation that does not come out of the box from Apache Camel.", "code": "Class CustomDataFormat {\n\tString getRef(); // Reference to the custom DataFormat to lookup from the Camel registry.\n\tvoid setRef(String ref); // Reference to the custom DataFormat to lookup from the Camel registry.\n}"}
{"index": 16625, "repo": "spring-beans-6.0.11", "des": "Bean factory post processor that logs a warning for @Deprecated beans.", "code": "public class DeprecatedBeanWarner extends Object implements BeanFactoryPostProcessor {\n\tprotected boolean isLogEnabled(); // Determine whether the logger field is enabled.\n\tprotected void logDeprecatedBean(String beanName, Class<?> beanType, BeanDefinition beanDefinition); // Logs a warning for a bean annotated with @Deprecated.\n\tvoid postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory); // Modify the application context's internal bean factory after its standard initialization.\n\tvoid setLoggerName(String loggerName); // Set the name of the logger to use.\n\tprotected void writeToLog(String message); // Actually write to the underlying log.\n}"}
{"index": 15091, "repo": "spring-vault-core-3.0.4", "des": "Value object that defines Vault connection coordinates.", "code": "public class VaultEndpoint extends Object implements Serializable {\n\tstatic VaultEndpoint create(String host, int port); // Create a secure VaultEndpoint given a host and port using https.\n\tURI createUri(String path); // Build the Vault URI based on the given path.\n\tString createUriString(String path); // Build the Vault URI string based on the given path.\n\tboolean equals(Object o);\n\tstatic VaultEndpoint from(URI uri); // Create a VaultEndpoint given a URI.\n\tString getHost();\n\tString getPath();\n\tint getPort();\n\tString getScheme();\n\tvoid setHost(String host); // Sets the hostname.\n\tvoid setPath(String path);\n\tvoid setPort(int port);\n\tvoid setScheme(String scheme);\n}"}
{"index": 6512, "repo": "exoplayer-core-2.9.6", "des": "This class serves multiple purposes: Queues the rotation metadata extracted from camera motion track.", "code": "Class FrameRotationQueue {\n\tboolean pollRotationMatrix(float[] matrix, long timestampUs); // Copies the rotation matrix with the greatest timestamp which is less than or equal to the given timestamp to matrix.\n\tvoid reset(); // Removes all of the rotations and forces rotations to be recentered.\n\tvoid setRotation(long timestampUs, float[] angleAxis); // Sets a rotation for a given timestamp.\n}"}
{"index": 13992, "repo": "spring-webflux-6.0.11", "des": "Defines callback methods to customize the configuration for WebFlux applications enabled via @EnableWebFlux.", "code": "public interface WebFluxConfigurer {\n\tdefault void addCorsMappings(CorsRegistry registry); // Configure \"global\" cross-origin request processing.\n\tdefault void addFormatters(org.springframework.format.FormatterRegistry registry); // Add custom Converters and Formatters for performing type conversion and formatting of annotated controller method arguments.\n\tdefault void addResourceHandlers(ResourceHandlerRegistry registry); // Add resource handlers for serving static resources.\n\tdefault void configureArgumentResolvers(ArgumentResolverConfigurer configurer); // Configure resolvers for custom @RequestMapping method arguments.\n\tdefault void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder); // Configure how the content type requested for the response is resolved when handling requests with annotated controllers.\n\tdefault void configureHttpMessageCodecs(org.springframework.http.codec.ServerCodecConfigurer configurer); // Configure the HTTP message readers and writers for reading from the request body and for writing to the response body in annotated controllers and functional endpoints.\n\tdefault void configurePathMatching(PathMatchConfigurer configurer); // Configure path matching options.\n\tdefault void configureViewResolvers(ViewResolverRegistry registry); // Configure view resolution for rendering responses with a view and a model, where the view is typically an HTML template but could also be based on an HTTP message writer (e.g.\n\tdefault org.springframework.validation.MessageCodesResolver getMessageCodesResolver(); // Provide a custom MessageCodesResolver to use for data binding in annotated controller method arguments instead of the one created by default in DataBinder.\n\tdefault org.springframework.validation.Validator getValidator(); // Provide a custom Validator.\n\tdefault WebSocketService getWebSocketService(); // Provide the WebSocketService to create WebSocketHandlerAdapter with.\n}"}
{"index": 11869, "repo": "spring-kafka-3.0.9", "des": "Spring for Apache Kafka Observation for KafkaTemplate.", "code": "public enum KafkaTemplateObservation extends Enum<KafkaTemplateObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\tstatic KafkaTemplateObservation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic KafkaTemplateObservation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 1559, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a destination to a page at a y location and the width is magnified to just fit on the screen.", "code": "Class PDPageFitRectangleDestination {\n\tint getBottom(); // Get the bottom y coordinate.\n\tint getLeft(); // Get the left x coordinate.\n\tint getRight(); // Get the right x coordinate.\n\tint getTop(); // Get the top y coordinate.\n\tvoid setBottom(int y); // Set the bottom y-coordinate, a value of -1 implies that the current y-coordinate will be used.\n\tvoid setLeft(int x); // Set the left x-coordinate, a value of -1 implies that the current x-coordinate will be used.\n\tvoid setRight(int x); // Set the right x-coordinate, a value of -1 implies that the current x-coordinate will be used.\n\tvoid setTop(int y); // Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used.\n}"}
{"index": 5763, "repo": "freemarker-2.3.32", "des": "A sequence that wraps a List of TemplateModel-s.", "code": "Class TemplateModelListSequence {\n\tTemplateModel get(int index); // Retrieves the i-th template model in this sequence.\n\tjava.lang.Object getWrappedObject(); // Returns the original List of TemplateModel-s, so it's not a fully unwrapped value.\n\tint size();\n}"}
{"index": 5292, "repo": "druid-processing-26.0.0", "des": "Possibly-stateful object responsible for serde and comparison of keys.", "code": "Interface Grouper.KeySerde<T> {\n\tGrouper.BufferComparator bufferComparator(); // Return an object that knows how to compare two serialized keys.\n\tGrouper.BufferComparator bufferComparatorWithAggregators(AggregatorFactory[] aggregatorFactories, int[] aggregatorOffsets); // When pushing down limits, it may also be necessary to compare aggregated values along with the key using the bufferComparator.\n\tT createKey(); // Create a reusable key that can be passed to readFromByteBuffer(T, java.nio.ByteBuffer, int).\n\tList<String> getDictionary(); // Return the dictionary of this KeySerde.\n\tClass<T> keyClazz(); // Class of the keys.\n\tint keySize(); // Size of the keys returned by toByteBuffer(Object) (which must be a fixed size)\n\tvoid readFromByteBuffer(T key, ByteBuffer buffer, int position); // Deserialize a key from a buffer.\n\tvoid reset(); // Reset the keySerde to its initial state.\n\tByteBuffer toByteBuffer(T key); // Serialize a key.\n}"}
{"index": 17503, "repo": "pulsar-broker-3.0.0", "des": "Find the appropriate broker for service unit (e.g.", "code": "public interface ExtensibleLoadManager extends Closeable {\n\tCompletableFuture<Optional<BrokerLookupData>> assign(Optional<org.apache.pulsar.common.naming.ServiceUnitId> topic, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit); // The incoming service unit (e.g.\n\tCompletableFuture<Boolean> checkOwnershipAsync(Optional<org.apache.pulsar.common.naming.ServiceUnitId> topic, org.apache.pulsar.common.naming.ServiceUnitId serviceUnit); // Check the incoming service unit is owned by the current broker.\n\tvoid close(); // Close the load manager.\n\tvoid initialize(PulsarService pulsar); // Initialize this load manager using the given pulsar service.\n\tvoid start(); // Start the extensible load manager.\n}"}
{"index": 4265, "repo": "beam-sdks-java-core-2.49.0", "des": "PTransform for estimating the number of distinct values associated with each key in a PCollection of KVs.", "code": "Class ApproximateUnique.PerKey<K,V> {\n\tPCollection<KV<K,java.lang.Long>> expand(PCollection<KV<K,V>> input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n}"}
{"index": 12700, "repo": "spring-data-mongodb-4.1.2", "des": "Default implementation of MongoTypeMapper allowing configuration of the key to lookup and store type information in Document.", "code": "public class DefaultMongoTypeMapper extends DefaultTypeMapper<org.bson.conversions.Bson> implements MongoTypeMapper {\n\tprotected TypeInformation<?> getFallbackTypeFor(org.bson.conversions.Bson source);\n\tClass<?> getWriteTargetTypeFor(Class<?> source); // Compute the target type for a given source considering CustomConversions.\n\tboolean isTypeKey(String key); // Returns whether the given key is the type key.\n\tvoid writeTypeRestrictions(org.bson.Document result, Set<Class<?>> restrictedTypes); // Writes type restrictions to the given Document.\n}"}
{"index": 18796, "repo": "lucene-core-9.7.0", "des": "Filter a Scorable, intercepting methods and optionally changing their return values The default implementation simply passes all calls to its delegate, with the exception of Scorable.", "code": "Class FilterScorable {\n\tint docID(); // Returns the doc ID that is currently being scored.\n\tCollection<Scorable.ChildScorable> getChildren(); // Returns child sub-scorers positioned on the current document\n\tfloat score(); // Returns the score of the current document matching the query.\n}"}
{"index": 16427, "repo": "spring-batch-infrastructure-5.0.2", "des": "Very simple base class for CompletionPolicy implementations.", "code": "public class CompletionPolicySupport extends Object implements CompletionPolicy {\n\tboolean isComplete(RepeatContext context); // Always true.\n\tboolean isComplete(RepeatContext context, RepeatStatus result); // If exit status is not continuable return true, otherwise delegate to isComplete(RepeatContext).\n\tRepeatContext start(RepeatContext context); // Build a new RepeatContextSupport and return it.\n\tvoid update(RepeatContext context); // Increment the context so the counter is up to date.\n}"}
{"index": 7161, "repo": "calcite-core-1.34.0", "des": "The AS operator associates an expression with an alias.", "code": "Class SqlAsOperator {\n\t<R> void acceptCall(SqlVisitor<R> visitor, SqlCall call, boolean onlyExpressions, SqlBasicVisitor.ArgHandler<R> argHandler); // Accepts a SqlVisitor, directing an SqlBasicVisitor.ArgHandler to visit an operand of a call.\n\tRelDataType deriveType(SqlValidator validator, SqlValidatorScope scope, SqlCall call); // Derives the type of a call to this operator.\n\tSqlMonotonicity getMonotonicity(SqlOperatorBinding call); // Returns whether a call to this operator is monotonic.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n\tvoid validateCall(SqlCall call, SqlValidator validator, SqlValidatorScope scope, SqlValidatorScope operandScope); // Validates a call to this operator.\n}"}
{"index": 9477, "repo": "curator-recipes-5.5.0", "des": "A LeaderLatchListener can be used to be notified asynchronously about when the state of the LeaderLatch has changed.", "code": "Interface LeaderLatchListener {\n\tvoid isLeader(); // This is called when the LeaderLatch's state goes from hasLeadership = false to hasLeadership = true.\n\tvoid notLeader(); // This is called when the LeaderLatch's state goes from hasLeadership = true to hasLeadership = false.\n}"}
{"index": 6727, "repo": "ratis-common-2.5.1", "des": "This class is a partial implementation of Condition.", "code": "Class AwaitForSignal {\n\tvoid await(); // The same as Condition.await()\n\tboolean await(long time, TimeUnit unit); // The same as Condition.await(long, TimeUnit)\n\tvoid signal(); // The same as Condition.signal()\n}"}
{"index": 7514, "repo": "cassandra-all-4.1.2", "des": "A DataOutputStreamPlus that writes ASYNCHRONOUSLY to a Netty Channel.", "code": "Class AsyncStreamingOutputPlus {\n\tvoid discard(); // Discard any buffered data, and the buffers that contain it.\n\tprotected void doFlush(int count);\n\tlong position(); // Returns the current position of the underlying target like a file-pointer or the position withing a buffer.\n\tlong writeFileToChannel(java.nio.channels.FileChannel file, StreamingDataOutputPlus.RateLimiter limiter); // Writes all data in file channel to stream: * For zero-copy-streaming, 1MiB at a time, with at most 2MiB in flight at once.\n\tint writeToChannel(StreamingDataOutputPlus.Write write, StreamingDataOutputPlus.RateLimiter limiter); // Provide a lambda that can request a buffer of suitable size, then fill the buffer and have that buffer written and flushed to the underlying channel, without having to handle buffer allocation, lifetime or cleanup, including in case of exceptions.\n}"}
{"index": 16930, "repo": "spring-integration-ip-6.1.2", "des": "Base class for TcpConnectionInterceptors; passes all method calls through to the underlying TcpConnection.", "code": "public abstract class TcpConnectionInterceptorSupport extends TcpConnectionSupport implements TcpConnectionInterceptor {\n\tvoid addNewConnection(TcpConnection connection); // When we are using sockets owned by a TcpListener, this method is called each time a new connection is made.\n\tvoid close(); // Close this connection.\n\tString getConnectionFactoryName();\n\tString getConnectionId();\n\torg.springframework.core.serializer.Deserializer<?> getDeserializer();\n\tObject getDeserializerStateKey();\n\tString getHostAddress();\n\tString getHostName();\n\tTcpListener getListener();\n\tObject getPayload(); // Uses the deserializer to obtain the message payload from the connection's input stream.\n\tint getPort();\n\tTcpSender getSender();\n\tList<TcpSender> getSenders(); // Return the list of senders.\n\torg.springframework.core.serializer.Serializer<?> getSerializer();\n\tSocketInfo getSocketInfo(); // Provides getters for Socket properties.\n\tSSLSession getSslSession();\n\tTcpConnectionSupport getTheConnection(); // Return the underlying connection (or next interceptor).\n\tprotected boolean hasRealSender();\n\tlong incrementAndGetConnectionSequence();\n\tboolean isOpen();\n\tboolean isServer();\n\tboolean onMessage(org.springframework.messaging.Message<?> message); // Called by a TCPConnection when a new message arrives.\n\tvoid registerListener(TcpListener listener); // Set the listener that will receive incoming Messages.\n\tvoid registerSender(TcpSender sender); // Register a sender.\n\tvoid registerSenders(List<TcpSender> sendersToRegister); // Register the senders.\n\tvoid removeDeadConnection(TcpConnection connection); // When we are using sockets owned by a TcpListener, this method is called each time a connection is closed.\n\tvoid run();\n\tvoid send(org.springframework.messaging.Message<?> message); // Converts and sends the message.\n\tvoid setDeserializer(org.springframework.core.serializer.Deserializer<?> deserializer);\n\tvoid setMapper(TcpMessageMapper mapper);\n\tvoid setSerializer(org.springframework.core.serializer.Serializer<?> serializer);\n\tvoid setTheConnection(TcpConnectionSupport theConnection); // Set the underlying connection (or next interceptor).\n}"}
{"index": 3777, "repo": "hbase-client-3.0.0-alpha-4", "des": "Interface to support the aborting of a given server or client.", "code": "Interface Abortable {\n\tdefault void abort(String why); // It just call another abort method and the Throwable parameter is null.\n\tvoid abort(String why, Throwable e); // Abort the server or client.\n\tboolean isAborted(); // Check if the server or client was aborted.\n}"}
{"index": 13391, "repo": "shiro-core-2.0.0-alpha-2", "des": "PermissionResolver implementation that returns a new WildcardPermission based on the input string.", "code": "public class WildcardPermissionResolver extends Object implements PermissionResolver {\n\tboolean isCaseSensitive(); // Return true if this resolver produces case sensitive permissions.\n\tPermission resolvePermission(String permissionString); // Returns a new WildcardPermission instance constructed based on the specified permissionString.\n\tvoid setCaseSensitive(boolean state); // Set the case sensitivity of the resolved Wildcard permissions.\n}"}
{"index": 7764, "repo": "cassandra-all-4.1.2", "des": "Determines a single output value based on any number of input values.", "code": "Interface ScalarFunction {\n\tjava.nio.ByteBuffer execute(ProtocolVersion protocolVersion, java.util.List<java.nio.ByteBuffer> parameters); // Applies this function to the specified parameter.\n\tboolean isCalledOnNullInput();\n\tdefault boolean isMonotonic(); // Checks if the function is monotonic.\n\tdefault ScalarFunction partialApplication(ProtocolVersion protocolVersion, java.util.List<java.nio.ByteBuffer> partialParameters); // Does a partial application of the function.\n}"}
{"index": 13921, "repo": "spring-webflux-6.0.11", "des": "Extends Rendering.Builder with extra options for redirect scenarios.", "code": "public static interface Rendering.RedirectBuilder extends Rendering.Builder<Rendering.RedirectBuilder> {\n\tRendering.RedirectBuilder contextRelative(boolean contextRelative); // Whether to the provided redirect URL should be prepended with the application context path (if any).\n\tRendering.RedirectBuilder propagateQuery(boolean propagate); // Whether to append the query string of the current URL to the target redirect URL or not.\n}"}
{"index": 4415, "repo": "beam-sdks-java-core-2.49.0", "des": "A Coder for Maps that encodes them according to provided coders for keys and values.", "code": "Class MapCoder<K,V> {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tjava.util.Map<K,V> decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tjava.util.Map<K,V> decode(java.io.InputStream inStream, Coder.Context context); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(java.util.Map<K,V> map, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tvoid encode(java.util.Map<K,V> map, java.io.OutputStream outStream, Coder.Context context); // Encodes the given value of type T onto the given output stream in the given context.\n\tjava.util.List<? extends Coder<?>> getCoderArguments(); // If this is a Coder for a parameterized type, returns the list of Coders being used for each of the parameters in the same order they appear within the parameterized type's type signature.\n\tTypeDescriptor<java.util.Map<K,V>> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tCoder<K> getKeyCoder();\n\tCoder<V> getValueCoder();\n\tstatic <K,V> MapCoder<K,V> of(Coder<K> keyCoder, Coder<V> valueCoder); // Produces a MapCoder with the given keyCoder and valueCoder.\n\tvoid registerByteSizeObserver(java.util.Map<K,V> map, ElementByteSizeObserver observer); // Notifies the ElementByteSizeObserver about the byte size of the encoded value using this Coder.\n\tjava.lang.Object structuralValue(java.util.Map<K,V> value); // Returns an object with an Object.equals() method that represents structural equality on the argument.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 11097, "repo": "tribuo-core-4.3.1", "des": "A metric that can be calculated for the specified output type.", "code": "public interface EvaluationMetric<T extends Output<T>,C extends MetricContext<T>> {\n\tdouble compute(C context); // Compute the result of this metric from the input context.\n\tC createContext(Model<T> model, List<Prediction<T>> predictions); // Creates the context this metric uses to compute it's value.\n\tdefault C createContext(Model<T> model, Dataset<T> dataset); // Creates the metric context used to compute this metric's value, generating Predictions for each Example in the supplied dataset.\n\tdefault MetricID<T> getID(); // The metric ID, a combination of the metric target and metric name.\n\tString getName(); // The name of this metric.\n\tMetricTarget<T> getTarget(); // The target for this metric instance.\n}"}
{"index": 1039, "repo": "ignite-core-2.15.0", "des": "Meta page stores meta data about InlineIndexTree.", "code": "Class MetaPageInfo {\n\tboolean flagsSupported();\n\tboolean inlineObjectHash();\n\tboolean inlineObjectSupported();\n\tint inlineSize();\n\tstatic MetaPageInfo read(long metaPageId, int grpId, PageMemory pageMemory); // Reads meta page info from page memory.\n\tboolean useUnwrappedPk();\n\tvoid write(long metaPageId, int grpId, PageMemory pageMemory); // Writes meta page info into page memory.\n}"}
{"index": 13462, "repo": "spring-integration-ws-6.1.2", "des": "Factory class for web service components.", "code": "public final class Ws extends Object {\n\tstatic MarshallingWsInboundGatewaySpec marshallingInboundGateway(); // Create an instance.\n\tstatic MarshallingWsInboundGatewaySpec marshallingInboundGateway(org.springframework.oxm.Marshaller marshaller); // Create an instance with the provided Marshaller (which must also implement Unmarshaller).\n\tstatic MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec marshallingOutboundGateway(); // Create an instance with a default WebServiceTemplate.\n\tstatic MarshallingWsOutboundGatewaySpec marshallingOutboundGateway(org.springframework.ws.client.core.WebServiceTemplate template); // Create an instance with the provided WebServiceTemplate.\n\tstatic SimpleWsInboundGatewaySpec simpleInboundGateway(); // Create an instance.\n\tstatic SimpleWsOutboundGatewaySpec.SimpleWsOutboundGatewayNoTemplateSpec simpleOutboundGateway(); // Create an instance.\n\tstatic SimpleWsOutboundGatewaySpec simpleOutboundGateway(org.springframework.ws.client.core.WebServiceTemplate template); // Create an instance with the provided WebServiceTemplate.\n}"}
{"index": 15745, "repo": "camel-api-4.0.0-RC1", "des": "A consumer of message exchanges from an Endpoint.", "code": "public interface Consumer extends Service, EndpointAware {\n\tExchange createExchange(boolean autoRelease); // Creates an Exchange that was consumed.\n\tdefault AsyncCallback defaultConsumerCallback(Exchange exchange, boolean autoRelease); // The default callback to use with the consumer when calling the processor using asynchronous routing.\n\tProcessor getProcessor(); // The processor that will process the Exchange that was consumed.\n\tvoid releaseExchange(Exchange exchange, boolean autoRelease); // Releases the Exchange when its completed processing and no longer needed.\n}"}
{"index": 1148, "repo": "ignite-core-2.15.0", "des": "Class for accumulation of record types and number of indexed records in index tree.", "code": "Class SchemaIndexCacheStat {\n\tvoid accumulate(SchemaIndexCacheStat stat); // Adds statistics from stat to the current statistics.\n\tvoid add(int scanned); // Adds to number of scanned keys given scanned.\n\tvoid addType(QueryTypeDescriptorImpl type); // Adds type to indexed types.\n\tint scannedKeys();\n\tCollection<String> typeNames();\n\tCollection<QueryTypeDescriptorImpl> types();\n}"}
{"index": 2641, "repo": "mahout-core-14.1", "des": "Open hash map from char keys to char values.", "code": "Class OpenCharCharHashMap {\n\tchar adjustOrPutValue(char key, char newValue, char incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(char key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(char value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(CharProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(CharCharProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tchar get(char key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(char key);\n\tprotected int indexOfKey(char key);\n\tprotected int indexOfValue(char value);\n\tIterator<OpenCharCharHashMap.MapElement> iterator();\n\tvoid keys(CharArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(CharCharProcedure condition, CharArrayList keyList, CharArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(char key, char value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(char key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(CharArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 4089, "repo": "camel-core-3.0.0-RC1", "des": "Represents a DataFormatTransformer which leverages DataFormat to perform transformation.", "code": "Class DataFormatTransformerDefinition {\n\tDataFormatDefinition getDataFormatType();\n\tString getRef();\n\tvoid setDataFormatType(DataFormatDefinition dataFormatType); // The data format to be used\n\tvoid setRef(String ref); // Set the reference of the DataFormat.\n}"}
{"index": 14542, "repo": "spring-security-web-6.1.2", "des": "Used by the ExceptionTranslationFilter to commence a form login authentication via the UsernamePasswordAuthenticationFilter.", "code": "public class LoginUrlAuthenticationEntryPoint extends Object implements AuthenticationEntryPoint, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected String buildHttpsRedirectUrlForRequest(jakarta.servlet.http.HttpServletRequest request); // Builds a URL to redirect the supplied request to HTTPS.\n\tprotected String buildRedirectUrlToLoginPage(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException authException);\n\tvoid commence(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException authException); // Performs the redirect (or forward) to the login form URL.\n\tprotected String determineUrlToUseForThisRequest(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException exception); // Allows subclasses to modify the login form URL that should be applicable for a given request.\n\tString getLoginFormUrl();\n\tprotected PortMapper getPortMapper();\n\tprotected PortResolver getPortResolver();\n\tprotected boolean isForceHttps();\n\tprotected boolean isUseForward();\n\tvoid setForceHttps(boolean forceHttps); // Set to true to force login form access to be via https.\n\tvoid setPortMapper(PortMapper portMapper);\n\tvoid setPortResolver(PortResolver portResolver);\n\tvoid setUseForward(boolean useForward); // Tells if we are to do a forward to the loginFormUrl using the RequestDispatcher, instead of a 302 redirect.\n}"}
{"index": 15103, "repo": "spring-vault-core-3.0.4", "des": "Request for a signature creation request.", "code": "public class VaultSignRequest extends Object {\n\tstatic VaultSignRequest.VaultSignRequestBuilder builder();\n\tstatic VaultSignRequest create(Plaintext input); // Create a new VaultSignRequest given Plaintext.\n\tString getAlgorithm(); // Deprecated. since 2.4, use getSignatureAlgorithm() instead.\n\tString getHashAlgorithm();\n\tPlaintext getPlaintext();\n\tString getSignatureAlgorithm();\n}"}
{"index": 5923, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protobuf based implementation of SubClusterPolicyConfiguration.", "code": "Class SubClusterPolicyConfigurationPBImpl {\n\tboolean equals(Object other);\n\tByteBuffer getParams(); // Get the policy parameters.\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.SubClusterPolicyConfigurationProto getProto();\n\tString getQueue(); // Get the name of the queue for which we are configuring a policy.\n\tString getType(); // Get the type of the policy.\n\tvoid setParams(ByteBuffer policyParams); // Set the policy parameters.\n\tvoid setQueue(String queueName); // Sets the name of the queue for which we are configuring a policy.\n\tvoid setType(String policyType); // Sets the type of the policy.\n}"}
{"index": 12594, "repo": "spring-batch-integration-5.0.2", "des": "A ChunkHandler based on a ChunkProcessor.", "code": "@MessageEndpoint public class ChunkProcessorChunkHandler<S> extends Object implements ChunkHandler<S>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tChunkResponse handleChunk(ChunkRequest<S> chunkRequest); // Handle the chunk, processing all the items and returning a response summarising the result.\n\tvoid setChunkProcessor(ChunkProcessor<S> chunkProcessor); // Public setter for the ChunkProcessor.\n}"}
{"index": 15586, "repo": "spring-security-core-6.1.2", "des": "Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method.", "code": "public interface Authentication extends Principal, Serializable {\n\tCollection<? extends GrantedAuthority> getAuthorities(); // Set by an AuthenticationManager to indicate the authorities that the principal has been granted.\n\tObject getCredentials(); // The credentials that prove the principal is correct.\n\tObject getDetails(); // Stores additional details about the authentication request.\n\tObject getPrincipal(); // The identity of the principal being authenticated.\n\tboolean isAuthenticated(); // Used to indicate to AbstractSecurityInterceptor whether it should present the authentication token to the AuthenticationManager.\n\tvoid setAuthenticated(boolean isAuthenticated); // See isAuthenticated() for a full description.\n}"}
{"index": 564, "repo": "ignite-core-2.15.0", "des": "Wrapper over StripedExecutor, that groups submitted tasks by cache group and partition.", "code": "Class CacheStripedExecutor {\n\tvoid awaitApplyComplete(); // Awaits while all submitted tasks completed.\n\tboolean error();\n\tStripedExecutor executor();\n\tvoid onError(IgniteCheckedException e);\n\tvoid submit(Runnable task, int grpId, int partId); // Submit task to striped executor.\n}"}
{"index": 12124, "repo": "jena-core-4.9.0", "des": "Test if the two argument lists contain the same semantic elements.", "code": "public class ListEqual extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 15522, "repo": "spring-batch-core-5.0.2", "des": "A BeanPostProcessor that registers Job beans with a JobRegistry.", "code": "public class JobRegistryBeanPostProcessor extends Object implements org.springframework.beans.factory.config.BeanPostProcessor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet(); // Make sure the registry is set before use.\n\tvoid destroy(); // Unregister all the Job instances that were registered by this post processor.\n\tprotected String getGroupName(org.springframework.beans.factory.config.BeanDefinition beanDefinition, Job job); // Determine a group name for the job to be registered.\n\tObject postProcessAfterInitialization(Object bean, String beanName); // If the bean is an instance of Job, then register it.\n\tObject postProcessBeforeInitialization(Object bean, String beanName); // Do nothing.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setGroupName(String groupName); // The group name for jobs registered by this component.\n\tvoid setJobRegistry(JobRegistry jobRegistry); // Injection setter for JobRegistry.\n}"}
{"index": 7308, "repo": "calcite-core-1.34.0", "des": "This class defines some utilities to build type mapping matrix which would then use to construct the SqlTypeMappingRule rules.", "code": "Class SqlTypeMappingRules {\n\tstatic SqlTypeMappingRules.Builder builder(); // Returns a SqlTypeMappingRules.Builder to build the type mappings.\n\tstatic SqlTypeMappingRule instance(boolean coerce); // Returns the SqlTypeMappingRule instance based on the specified coerce to indicate whether to return as a type coercion rule.\n}"}
{"index": 5545, "repo": "org.apache.karaf.main-2.4.4", "des": "The BundleFile API is used by Adaptors to read resources out of an installed Bundle in the Framework.", "code": "Class BundleFile {\n\tabstract void close(); // Closes the BundleFile.\n\tabstract boolean containsDir(String dir); // Determines if any BundleEntries exist in the given directory path.\n\tstatic String fixTrailingSlash(String path, BundleEntry entry);\n\tFile getBaseFile(); // Returns the base file for this BundleFile\n\tabstract BundleEntry getEntry(String path); // Locates a file name in this bundle and returns a BundleEntry object\n\tabstract Enumeration<String> getEntryPaths(String path); // Allows to access the entries of the bundle.\n\tabstract File getFile(String path, boolean nativeCode); // Returns a File for the bundle entry specified by the path.\n\tURL getResourceURL(String path, BaseData hostData, int index); // Returns a URL to access the contents of the entry specified by the path\n\tURL getResourceURL(String path, long hostBundleID); // Deprecated. use getResourceURL(String, BaseData, int)\n\tURL getResourceURL(String path, long hostBundleID, int index); // Deprecated. use getResourceURL(String, BaseData, int)\n\tabstract void open(); // Opens the BundleFiles.\n\tstatic void setPermissions(File file); // Attempts to set the permissions of the file in a system dependent way.\n}"}
{"index": 2937, "repo": "tink-1.10.0", "des": "This key manager generates new AesEaxKey keys and produces new instances of AesEaxJce.", "code": "Class AesEaxKeyManager {\n\tstatic KeyTemplate aes128EaxTemplate();\n\tstatic KeyTemplate aes256EaxTemplate();\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<AesEaxKeyFormat,AesEaxKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tAesEaxKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic KeyTemplate rawAes128EaxTemplate();\n\tstatic KeyTemplate rawAes256EaxTemplate();\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(AesEaxKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 18256, "repo": "tika-core-2.8.0", "des": "SAX content handler that updates a language detector based on all the received character content.", "code": "Class LanguageHandler {\n\tLanguageDetector getDetector(); // Returns the language detector used by this content handler.\n\tLanguageResult getLanguage(); // Returns the detected language based on text handled thus far.\n}"}
{"index": 13761, "repo": "spring-webmvc-6.0.11", "des": "A logical disjunction (' || ') request condition that matches a request against a set of URL path patterns.", "code": "public class PatternsRequestCondition extends AbstractRequestCondition<PatternsRequestCondition> {\n\tPatternsRequestCondition combine(PatternsRequestCondition other); // Combine the patterns of the current and of the other instances as follows: If only one instance has patterns, use those.\n\tint compareTo(PatternsRequestCondition other, HttpServletRequest request); // Compare the two conditions based on the URL patterns they contain.\n\tprotected Collection<String> getContent(); // Return the discrete items a request condition is composed of.\n\tSet<String> getDirectPaths(); // Return the mapping paths that are not patterns.\n\tPatternsRequestCondition getMatchingCondition(HttpServletRequest request); // Checks if any of the patterns match the given request and returns an instance that is guaranteed to contain matching patterns, sorted via PathMatcher.getPatternComparator(String).\n\tList<String> getMatchingPatterns(String lookupPath); // Find the patterns matching the given lookup path.\n\tSet<String> getPatterns();\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n\tboolean isEmptyPathMapping(); // Whether the condition is the \"\" (empty path) mapping.\n}"}
{"index": 6516, "repo": "exoplayer-core-2.9.6", "des": "Parses a continuous H264 byte stream and extracts individual frames.", "code": "Class H264Reader {\n\tvoid consume(ParsableByteArray data); // Consumes (possibly partial) data from the current packet.\n\tvoid createTracks(ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the reader by providing outputs and ids for the tracks.\n\tvoid packetFinished(); // Called when a packet ends.\n\tvoid packetStarted(long pesTimeUs, int flags); // Called when a packet starts.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 9048, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class encapsulates the details of the RegionNormalizer subsystem.", "code": "Class RegionNormalizerManager {\n\tvoid deregisterChildren(ConfigurationManager manager);\n\tlong getMergePlanCount(); // Return the number of times a MergeNormalizationPlan has been submitted.\n\tScheduledChore getRegionNormalizerChore();\n\tlong getSkippedCount(NormalizationPlan.PlanType type); // Retrieve a count of the number of times plans of type type were submitted but skipped.\n\tlong getSplitPlanCount(); // Return the number of times a SplitNormalizationPlan has been submitted.\n\tboolean isNormalizerOn(); // Return true if region normalizer is on, false otherwise\n\tboolean normalizeRegions(List<TableName> tables, boolean isHighPriority); // Submit tables for normalization.\n\tvoid onConfigurationChange(org.apache.hadoop.conf.Configuration conf);\n\tvoid planSkipped(NormalizationPlan.PlanType type); // Call-back for the case where plan couldn't be executed due to constraint violation, such as namespace quota.\n\tvoid registerChildren(ConfigurationManager manager);\n\tvoid setNormalizerOn(boolean normalizerOn); // Set region normalizer on/off\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 6238, "repo": "jackson-databind-2.15.2", "des": "Simple deserializer that will call configured type deserializer, passing in configured data deserializer, and exposing it all as a simple deserializer.", "code": "Class TypeWrappedDeserializer {\n\tObject deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tObject deserialize(JsonParser p, DeserializationContext ctxt, Object intoValue); // Alternate deserialization method (compared to the most commonly used, JsonDeserializer.deserialize(JsonParser, DeserializationContext)), which takes in initialized value instance, to be configured and/or populated by deserializer.\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Deserialization called when type being deserialized is defined to contain additional type identifier, to allow for correctly instantiating correct subtype.\n\tJsonDeserializer<?> getDelegatee(); // Accessor that can be used to determine if this deserializer uses another deserializer for actual deserialization, by delegating calls.\n\tObject getEmptyValue(DeserializationContext ctxt); // Method called to determine value to be used for \"empty\" values (most commonly when deserializing from empty JSON Strings).\n\tCollection<Object> getKnownPropertyNames(); // Method that will either return null to indicate that type being deserializers has no concept of properties; or a collection of identifiers for which toString will give external property name.\n\tObject getNullValue(DeserializationContext ctxt); // Method that can be called to determine value to be used for representing null values (values deserialized when JSON token is JsonToken.VALUE_NULL).\n\tClass<?> handledType(); // Method for accessing concrete physical type of values this deserializer produces.\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n\tBoolean supportsUpdate(DeserializationConfig config); // Introspection method that may be called to see whether deserializer supports update of an existing value (aka \"merging\") or not.\n}"}
{"index": 16974, "repo": "spring-orm-6.0.11", "des": "Servlet Filter that binds a JPA EntityManager to the thread for the entire processing of the request.", "code": "public class OpenEntityManagerInViewFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected EntityManager createEntityManager(EntityManagerFactory emf); // Create a JPA EntityManager to be bound to a request.\n\tprotected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain);\n\tprotected String getEntityManagerFactoryBeanName(); // Return the bean name of the EntityManagerFactory to fetch from Spring's root application context.\n\tprotected String getPersistenceUnitName(); // Return the name of the persistence unit to access the EntityManagerFactory for, if any.\n\tprotected EntityManagerFactory lookupEntityManagerFactory(); // Look up the EntityManagerFactory that this filter should use.\n\tprotected EntityManagerFactory lookupEntityManagerFactory(HttpServletRequest request); // Look up the EntityManagerFactory that this filter should use, taking the current HTTP request as argument.\n\tvoid setEntityManagerFactoryBeanName(String entityManagerFactoryBeanName); // Set the bean name of the EntityManagerFactory to fetch from Spring's root application context.\n\tvoid setPersistenceUnitName(String persistenceUnitName); // Set the name of the persistence unit to access the EntityManagerFactory for.\n\tprotected boolean shouldNotFilterAsyncDispatch(); // Returns \"false\" so that the filter may re-bind the opened EntityManager to each asynchronously dispatched thread and postpone closing it until the very last asynchronous dispatch.\n\tprotected boolean shouldNotFilterErrorDispatch(); // Returns \"false\" so that the filter may provide an EntityManager to each error dispatches.\n}"}
{"index": 9915, "repo": "iceberg-api-1.3.0", "des": "A Histogram implementation with reservoir sampling.", "code": "Class FixedReservoirHistogram {\n\tint count(); // Return the number of observations.\n\tHistogram.Statistics statistics();\n\tvoid update(long value); // Update the histogram with a new value observed.\n}"}
{"index": 8718, "repo": "hadoop-yarn-common-3.3.6", "des": "File system Add Node to attribute mapping.", "code": "Class AddNodeToAttributeLogOp {\n\tint getOpCode();\n\tvoid recover(InputStream is, NodeAttributesManager mgr); // Read and populate StoreOp.\n\tAddNodeToAttributeLogOp setAttributes(List<org.apache.hadoop.yarn.server.api.protocolrecords.NodeToAttributes> attributesList);\n\tvoid write(OutputStream os, NodeAttributesManager mgr); // Write operation to persistent storage.\n}"}
{"index": 6756, "repo": "hbase-backup-3.0.0-alpha-4", "des": "A tool to split HFiles into new region boundaries as a MapReduce job.", "code": "Class MapReduceHFileSplitterJob {\n\torg.apache.hadoop.mapreduce.Job createSubmittableJob(String[] args); // Sets up the actual job.\n\tstatic void main(String[] args); // Main entry point.\n\tint run(String[] args);\n}"}
{"index": 15237, "repo": "spring-boot-3.1.1", "des": "Context provided to ConfigDataLocationResolver methods.", "code": "public interface ConfigDataLocationResolverContext {\n\tBinder getBinder(); // Provides access to a binder that can be used to obtain previously contributed values.\n\tConfigurableBootstrapContext getBootstrapContext(); // Provides access to the ConfigurableBootstrapContext shared across all EnvironmentPostProcessors.\n\tConfigDataResource getParent(); // Provides access to the parent ConfigDataResource that triggered the resolve or null if there is no available parent.\n}"}
{"index": 13708, "repo": "spring-webmvc-6.0.11", "des": "View using the FreeMarker template engine.", "code": "public class FreeMarkerView extends AbstractTemplateView {\n\tprotected FreeMarkerConfig autodetectConfiguration(); // Autodetect a FreeMarkerConfig object via the ApplicationContext.\n\tprotected freemarker.template.SimpleHash buildTemplateModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Build a FreeMarker template model for the given model Map.\n\tboolean checkResource(Locale locale); // Check that the FreeMarker template used for this view exists and is valid.\n\tprotected void doRender(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Render the FreeMarker view to the given response, using the given model map which contains the complete template model to use.\n\tprotected void exposeHelpers(Map<String,Object> model, HttpServletRequest request); // Expose helpers unique to each rendering operation.\n\tprotected freemarker.template.Configuration getConfiguration(); // Return the FreeMarker configuration used by this view.\n\tprotected String getEncoding(); // Return the encoding for the FreeMarker template.\n\tprotected freemarker.template.ObjectWrapper getObjectWrapper(); // Return the configured FreeMarker ObjectWrapper, or the default wrapper if none specified.\n\tprotected freemarker.template.Template getTemplate(String name, Locale locale); // Retrieve the FreeMarker template specified by the given name, using the encoding specified by the \"encoding\" bean property.\n\tprotected freemarker.template.Template getTemplate(Locale locale); // Retrieve the FreeMarker template for the given locale, to be rendering by this view.\n\tprotected void initServletContext(ServletContext servletContext); // Invoked on startup.\n\tprotected freemarker.template.Configuration obtainConfiguration(); // Obtain the FreeMarker configuration for actual use.\n\tprotected void processTemplate(freemarker.template.Template template, freemarker.template.SimpleHash model, HttpServletResponse response); // Process the FreeMarker template to the servlet response.\n\tprotected void renderMergedTemplateModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Process the model map by merging it with the FreeMarker template.\n\tvoid setConfiguration(freemarker.template.Configuration configuration); // Set the FreeMarker Configuration to be used by this view.\n\tvoid setEncoding(String encoding); // Set the encoding of the FreeMarker template file.\n}"}
{"index": 14941, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A JDBC implementation of a RegisteredClientRepository that uses a JdbcOperations for RegisteredClient persistence.", "code": "public class JdbcRegisteredClientRepository extends Object implements RegisteredClientRepository {\n\tRegisteredClient findByClientId(String clientId); // Returns the registered client identified by the provided clientId, or null if not found.\n\tRegisteredClient findById(String id); // Returns the registered client identified by the provided id, or null if not found.\n\tprotected final org.springframework.jdbc.core.JdbcOperations getJdbcOperations();\n\tprotected final Function<RegisteredClient,List<org.springframework.jdbc.core.SqlParameterValue>> getRegisteredClientParametersMapper();\n\tprotected final org.springframework.jdbc.core.RowMapper<RegisteredClient> getRegisteredClientRowMapper();\n\tvoid save(RegisteredClient registeredClient); // Saves the registered client.\n\tfinal void setRegisteredClientParametersMapper(Function<RegisteredClient,List<org.springframework.jdbc.core.SqlParameterValue>> registeredClientParametersMapper); // Sets the Function used for mapping RegisteredClient to a List of SqlParameterValue.\n\tfinal void setRegisteredClientRowMapper(org.springframework.jdbc.core.RowMapper<RegisteredClient> registeredClientRowMapper); // Sets the RowMapper used for mapping the current row in java.sql.ResultSet to RegisteredClient.\n}"}
{"index": 16335, "repo": "spring-session-core-3.1.1", "des": "Extends a basic SessionRepository to allow finding sessions by the specified index name and index value.", "code": "public interface FindByIndexNameSessionRepository<S extends Session> extends SessionRepository<S> {\n\tMap<String,S> findByIndexNameAndIndexValue(String indexName, String indexValue); // Find a Map of the session id to the Session of all sessions that contain the specified index name index value.\n\tdefault Map<String,S> findByPrincipalName(String principalName); // Find a Map of the session id to the Session of all sessions that contain the index with the name PRINCIPAL_NAME_INDEX_NAME and the specified principal name.\n}"}
{"index": 9748, "repo": "commons-math3-3.6.1", "des": "Sparse matrix implementation based on an open addressed map.", "code": "Class OpenMapRealMatrix {\n\tOpenMapRealMatrix add(OpenMapRealMatrix m); // Compute the sum of this matrix and m.\n\tvoid addToEntry(int row, int column, double increment); // Adds (in place) the specified value to the specified entry of this matrix.\n\tOpenMapRealMatrix copy(); // Returns a (deep) copy of this.\n\tOpenMapRealMatrix createMatrix(int rowDimension, int columnDimension); // Create a new RealMatrix of the same type as the instance with the supplied row and column dimensions.\n\tint getColumnDimension(); // Returns the number of columns of this matrix.\n\tdouble getEntry(int row, int column); // Get the entry in the specified row and column.\n\tint getRowDimension(); // Returns the number of rows of this matrix.\n\tOpenMapRealMatrix multiply(OpenMapRealMatrix m); // Postmultiply this matrix by m.\n\tRealMatrix multiply(RealMatrix m); // Returns the result of postmultiplying this by m.\n\tvoid multiplyEntry(int row, int column, double factor); // Multiplies (in place) the specified entry of this matrix by the specified value.\n\tvoid setEntry(int row, int column, double value); // Set the entry in the specified row and column.\n\tOpenMapRealMatrix subtract(OpenMapRealMatrix m); // Subtract m from this matrix.\n\tOpenMapRealMatrix subtract(RealMatrix m); // Returns this minus m.\n}"}
{"index": 15668, "repo": "pulsar-common-3.0.0", "des": "Domain types differentiated by Mozilla Public Suffix List.", "code": "public enum DomainType extends Enum<DomainType> {\n\tstatic DomainType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic DomainType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 6073, "repo": "jackson-databind-2.15.2", "des": "Also: default bean access will not do much good with Class.", "code": "Class ClassSerializer {\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tvoid serialize(Class<?> value, JsonGenerator g, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n}"}
{"index": 17159, "repo": "spring-integration-core-6.1.2", "des": "An AbstractEndpoint implementation for Reactive Streams subscription into an input channel and reactive consumption of messages from that channel.", "code": "public class ReactiveStreamsConsumer extends AbstractEndpoint implements IntegrationConsumer {\n\tprotected void doStart(); // Subclasses must implement this method with the start behavior.\n\tprotected void doStop(); // Subclasses must implement this method with the stop behavior.\n\torg.springframework.messaging.MessageHandler getHandler(); // Return the consumer's handler.\n\torg.springframework.messaging.MessageChannel getInputChannel(); // Return the input channel.\n\torg.springframework.messaging.MessageChannel getOutputChannel(); // Return the output channel (may be null).\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid setErrorHandler(org.springframework.util.ErrorHandler errorHandler);\n\tvoid setReactiveCustomizer(Function<? super reactor.core.publisher.Flux<org.springframework.messaging.Message<?>>,? extends org.reactivestreams.Publisher<org.springframework.messaging.Message<?>>> reactiveCustomizer);\n}"}
{"index": 3606, "repo": "hive-serde-4.0.0-alpha-2", "des": "LazyBinaryArray is serialized as follows: start A b b b b b b end bytes[] -> |--------|---|---|---|---| .", "code": "Class LazyBinaryArray {\n\tList<Object> getList(); // Returns the List of actual primitive objects.\n\tObject getListElementObject(int index); // Returns the actual primitive object at the index position inside the array represented by this LazyBinaryObject.\n\tint getListLength(); // Returns the array size.\n\tvoid init(ByteArrayRef bytes, int start, int length); // Set the row data for this LazyBinaryArray.\n}"}
{"index": 10122, "repo": "spring-hateoas-2.1.2", "des": "Hypermedia representation types supported.", "code": "public static enum EnableHypermediaSupport.HypermediaType extends Enum<EnableHypermediaSupport.HypermediaType> {\n\tString getLocalPackageName();\n\tMediaType getMediaType();\n\tstatic EnableHypermediaSupport.HypermediaType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic EnableHypermediaSupport.HypermediaType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14761, "repo": "spring-data-commons-3.1.2", "des": "A ScrollPosition based on the offsets within query results.", "code": "public final class OffsetScrollPosition extends Object implements ScrollPosition {\n\tOffsetScrollPosition advanceBy(long delta); // Returns a new OffsetScrollPosition that has been advanced by the given value.\n\tboolean equals(Object o);\n\tlong getOffset(); // The zero or positive offset.\n\tboolean isInitial(); // Returns whether the current scroll position is the initial one.\n\tstatic IntFunction<OffsetScrollPosition> positionFunction(long startOffset); // Returns the position function to calculate.\n}"}
{"index": 18621, "repo": "poi-ooxml-5.2.3", "des": "This class is a wrapper around the CTXmlColumnPr (Open Office XML Part 4: chapter 3.5.1.7)", "code": "Class XSSFXmlColumnPr {\n\tString getLocalXPath(); // If the XPath is, for example, /Node1/Node2/Node3 and /Node1/Node2 is the common XPath for the table, the local XPath is /Node3\n\tlong getMapId();\n\tXSSFTableColumn getTableColumn(); // Get the column for which these XML column properties are set.\n\tString getXmlDataType();\n\tString getXPath();\n}"}
{"index": 10818, "repo": "spring-boot-actuator-3.1.1", "des": "A MappingDescriptionProvider provides a List of mapping descriptions through implementation-specific introspection of an application context.", "code": "public interface MappingDescriptionProvider {\n\tObject describeMappings(org.springframework.context.ApplicationContext context); // Produce the descriptions of the mappings identified by this provider in the given context.\n\tString getMappingName(); // Returns the name of the mappings described by this provider.\n}"}
{"index": 9717, "repo": "commons-math3-3.6.1", "des": "Class for representing mixture model distributions.", "code": "Class MixtureMultivariateRealDistribution<T extends MultivariateRealDistribution> {\n\tdouble density(double[] values); // Returns the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tList<Pair<Double,T>> getComponents(); // Gets the distributions that make up the mixture model.\n\tvoid reseedRandomGenerator(long seed); // Reseeds the random generator used to generate samples.\n\tdouble[] sample(); // Generates a random value vector sampled from this distribution.\n}"}
{"index": 4097, "repo": "camel-core-3.0.0-RC1", "des": "Base class for builders of error handling.", "code": "Class ErrorHandlerBuilderSupport {\n\tstatic void addExceptionPolicy(org.apache.camel.processor.errorhandler.ErrorHandlerSupport handlerSupport, org.apache.camel.spi.RouteContext routeContext, OnExceptionDefinition exceptionType);\n\tprotected void cloneBuilder(ErrorHandlerBuilderSupport other);\n\tvoid configure(org.apache.camel.spi.RouteContext routeContext, org.apache.camel.processor.ErrorHandler handler); // Configures the other error handler based on this error handler.\n\tprotected static List<Class<? extends Throwable>> createExceptionClasses(OnExceptionDefinition exceptionType, org.apache.camel.spi.ClassResolver resolver);\n\tErrorHandlerBuilderSupport exceptionPolicyStrategy(org.apache.camel.processor.errorhandler.ExceptionPolicyStrategy exceptionPolicyStrategy); // Sets the exception policy to use\n\torg.apache.camel.processor.errorhandler.ExceptionPolicyStrategy getExceptionPolicyStrategy(); // Gets the exception policy strategy\n\tvoid setExceptionPolicyStrategy(org.apache.camel.processor.errorhandler.ExceptionPolicyStrategy exceptionPolicyStrategy); // Sets the exception policy strategy to use for resolving the OnExceptionDefinition to use for a given thrown exception\n\tprotected static org.apache.camel.processor.errorhandler.ExceptionPolicy toExceptionPolicy(OnExceptionDefinition exceptionType, org.apache.camel.spi.RouteContext routeContext);\n}"}
{"index": 11961, "repo": "maven-core-4.0.0-alpha-7", "des": "Component for use by the maven-toolchains-plugin only.", "code": "public interface ToolchainManagerPrivate {\n\tToolchainPrivate[] getToolchainsForType(String type, MavenSession context); // Retrieves every toolchains of given type available in user settings.\n\tvoid storeToolchainToBuildContext(ToolchainPrivate toolchain, MavenSession context); // Stores the toolchain into build context for later use by toolchain-aware plugins.\n}"}
{"index": 9265, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "The NetworkTagMapping JsonManager implementation.", "code": "Class NetworkTagMappingJsonManager {\n\tString getNetworkTagHexID(Container container); // Get networkTagHexID for the given container.\n\tNetworkTagMappingJsonManager.NetworkTagMapping getNetworkTagMapping();\n\tvoid initialize(org.apache.hadoop.conf.Configuration conf); // Initialize the networkTagMapping manager.\n}"}
{"index": 12537, "repo": "spring-jdbc-6.0.11", "des": "Interface for retrieving keys, typically used for auto-generated keys as potentially returned by JDBC insert statements.", "code": "public interface KeyHolder {\n\tNumber getKey(); // Retrieve the first item from the first map, assuming that there is just one item and just one map, and that the item is a number.\n\t<T> T getKeyAs(Class<T> keyType); // Retrieve the first item from the first map, assuming that there is just one item and just one map, and that the item is an instance of specified type.\n\tList<Map<String,Object>> getKeyList(); // Return a reference to the List that contains the keys.\n\tMap<String,Object> getKeys(); // Retrieve the first map of keys.\n}"}
{"index": 3095, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "BloomKFilter is variation of BloomFilter.", "code": "Class BloomKFilter {\n\tvoid add(byte[] val);\n\tvoid addByte(byte val);\n\tvoid addBytes(byte[] val);\n\tvoid addBytes(byte[] val, int offset, int length);\n\tvoid addDouble(double val);\n\tvoid addFloat(float val);\n\tvoid addInt(int val);\n\tvoid addLong(long val);\n\tvoid addString(String val);\n\tstatic BloomKFilter deserialize(InputStream in); // Deserialize a bloom filter Read a byte stream, which was written by serialize(OutputStream, BloomKFilter) into a BloomKFilter\n\tlong[] getBitSet();\n\tint getBitSize();\n\tstatic byte[] getInitialBytes(long expectedEntries);\n\tlong getNumBits();\n\tint getNumHashFunctions();\n\tvoid merge(BloomKFilter that); // Merge the specified bloom filter with current bloom filter.\n\tstatic void mergeBloomFilterBytes(byte[] bf1Bytes, int bf1Start, int bf1Length, byte[] bf2Bytes, int bf2Start, int bf2Length);\n\tstatic void mergeBloomFilterBytes(byte[] bf1Bytes, int bf1Start, int bf1Length, byte[] bf2Bytes, int bf2Start, int bf2Length, int mergeStart, int mergeEnd); // Merges BloomKFilter bf2 into bf1.\n\tvoid reset();\n\tstatic void serialize(OutputStream out, BloomKFilter bloomFilter); // Serialize a bloom filter: Serialized BloomKFilter format: 1 byte for the number of hash functions.\n\tlong sizeInBytes();\n\tboolean test(byte[] val);\n\tboolean testByte(byte val);\n\tboolean testBytes(byte[] val);\n\tboolean testBytes(byte[] val, int offset, int length);\n\tboolean testDouble(double val);\n\tboolean testFloat(float val);\n\tboolean testInt(int val);\n\tboolean testLong(long val);\n\tboolean testString(String val);\n}"}
{"index": 1413, "repo": "pdfbox-3.0.0-beta1", "des": "Object representing the physical reference to an indirect pdf object.", "code": "Class COSObjectKey {\n\tint compareTo(COSObjectKey other);\n\tstatic long computeInternalHash(long num, int gen); // Calculate the internal hash value for the given object number and generation number.\n\tboolean equals(Object obj);\n\tint getGeneration(); // This will get the object generation number.\n\tlong getNumber(); // This will get the object number.\n\tint getStreamIndex(); // The index within a compressed object stream.\n}"}
{"index": 10600, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @NullCheck annotation.", "code": "public class NullCheckASTTransformation extends AbstractASTTransformation {\n\tstatic boolean hasIncludeGenerated(ClassNode cNode);\n\tstatic ThrowStatement makeThrowStmt(String variableName);\n\tstatic void markAsProcessed(MethodNode mn); // Mark a method as already processed.\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 356, "repo": "phoenix-core-5.1.3", "des": "IndexScrutiny MapReduce output table DDL and methods to get queries against the output tables.", "code": "Class IndexScrutinyTableOutput {\n\tstatic String constructOutputTableUpsert(List<String> sourceDynamicCols, List<String> targetDynamicCols, Connection connection); // Gets the parameterized upsert sql to the output table Used by the scrutiny MR job to write its results\n\tstatic String getSqlQueryAllInvalidRows(Connection conn, SourceTargetColumnNames columnNames, long scrutinyTimeMillis); // Get the sql to store as INVALID_ROWS_QUERY_ALL in the output metadata table\n\tstatic String getSqlQueryBadCoveredColVal(Connection conn, SourceTargetColumnNames columnNames, long scrutinyTimeMillis); // Get the sql to store as INVALID_ROWS_QUERY_BAD_COVERED_COL_VAL in the output metadata table\n\tstatic String getSqlQueryBeyondMaxLookback(Connection conn, SourceTargetColumnNames columnNames, long scrutinyTimeMillis);\n\tstatic String getSqlQueryMissingTargetRows(Connection conn, SourceTargetColumnNames columnNames, long scrutinyTimeMillis); // Get the sql to store as INVALID_ROWS_QUERY_MISSING_TARGET in the output metadata table\n\tstatic ResultSet queryAllLatestMetadata(Connection conn, String qSourceTableName, String qTargetTableName);\n\tstatic ResultSet queryAllMetadata(Connection conn, String qSourceTableName, String qTargetTableName, long scrutinyTimeMillis); // Query the metadata table for all columns\n\tstatic ResultSet queryMetadata(Connection conn, List<String> selectCols, String qSourceTableName, String qTargetTableName, long scrutinyTimeMillis); // Query the metadata table for the given columns\n\tstatic void writeJobResults(Connection conn, String[] cmdLineArgs, List<org.apache.hadoop.mapreduce.Job> completedJobs); // Writes the results of the given jobs to the metadata table\n}"}
{"index": 15333, "repo": "spring-boot-3.1.1", "des": "An interface that may be implemented by an object that can lookup Origin information from a given key.", "code": "@FunctionalInterface public interface OriginLookup<K> {\n\tstatic <K> Origin getOrigin(Object source, K key); // Attempt to look up the origin from the given source.\n\tOrigin getOrigin(K key); // Return the origin of the given key or null if the origin cannot be determined.\n\tdefault String getPrefix(); // Return the implicit prefix that is applied when performing a lookup or null if no prefix is used.\n\tdefault boolean isImmutable(); // Return true if this lookup is immutable and has contents that will never change.\n}"}
{"index": 6371, "repo": "spring-data-solr-4.3.15", "des": "Implementation of dist(power, pointA, pointB).", "code": "Class DistanceFunction {\n\tstatic DistanceFunction.Builder euclideanDistance(); // creates new DistanceFunction.Builder for Euclidean Distance DistanceFunction.Power.EUCLIDEAN_DISTANCE\n\tString getOperation(); // solr readable representation of function\n\tstatic DistanceFunction.Builder infiniteNormDistance(); // creates new DistanceFunction.Builder for Infinite norm distance - maximum value in the vector DistanceFunction.Power.INFINITE_NORM\n\tstatic DistanceFunction.Builder manhattanDistance(); // creates new DistanceFunction.Builder for Manhattan (taxicab) Distance DistanceFunction.Power.MANHATTAN_DISTANCE\n\tstatic DistanceFunction.Builder sparsenessDistance(); // creates new DistanceFunction.Builder for sparseness distance DistanceFunction.Power.SPARSENESS_CALCULATION\n}"}
{"index": 1027, "repo": "ignite-core-2.15.0", "des": "Enum representing possible types of collection items.", "code": "Enum MessageCollectionItemType {\n\tstatic @Nullable MessageCollectionItemType fromOrdinal(int ord); // Efficiently gets enumerated value from its ordinal.\n\tstatic MessageCollectionItemType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic MessageCollectionItemType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8863, "repo": "hbase-server-3.0.0-alpha-4", "des": "A chunk of memory out of which allocations are sliced.", "code": "Class Chunk {\n\tint alloc(int size); // Try to allocate size bytes from the chunk.\n\tvoid init(); // Actually claim the memory for this chunk.\n}"}
{"index": 1119, "repo": "ignite-core-2.15.0", "des": "Contains attributes of tx visited during deadlock detection.", "code": "Class ProbedTx {\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tint lockCounter();\n\tGridCacheVersion nearXidVersion();\n\tUUID nodeId();\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tlong startTime();\n\tProbedTx withStartTime(long updStartTime); // Creates a copy of this instance with modified transaction start time.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n\tGridCacheVersion xidVersion();\n}"}
{"index": 15136, "repo": "spring-data-elasticsearch-5.1.2", "des": "Base class for a @Configuration class to set up the Elasticsearch connection using the Elasticsearch Client.", "code": "public abstract class ElasticsearchConfiguration extends ElasticsearchConfigurationSupport {\n\tabstract ClientConfiguration clientConfiguration(); // Must be implemented by deriving classes to provide the ClientConfiguration.\n\tco.elastic.clients.elasticsearch.ElasticsearchClient elasticsearchClient(org.elasticsearch.client.RestClient restClient); // Provides the ElasticsearchClient to be used.\n\tElasticsearchOperations elasticsearchOperations(ElasticsearchConverter elasticsearchConverter, co.elastic.clients.elasticsearch.ElasticsearchClient elasticsearchClient); // Creates a ElasticsearchOperations implementation using an ElasticsearchClient.\n\torg.elasticsearch.client.RestClient elasticsearchRestClient(ClientConfiguration clientConfiguration); // Provides the underlying low level RestClient.\n\tco.elastic.clients.transport.TransportOptions transportOptions();\n}"}
{"index": 3992, "repo": "zookeeper-3.8.2", "des": "ExpiryQueue tracks elements in time sorted fixed duration buckets.", "code": "Class ExpiryQueue<E> {\n\tvoid dump(PrintWriter pwriter);\n\tMap<Long,Set<E>> getExpiryMap(); // Returns an unmodifiable view of the expiration time -> elements mapping.\n\tlong getWaitTime();\n\tSet<E> poll(); // Remove the next expired set of elements from expireMap.\n\tLong remove(E elem); // Removes element from the queue.\n\tLong update(E elem, int timeout); // Adds or updates expiration time for element in queue, rounding the timeout to the expiry interval bucketed used by this queue.\n}"}
{"index": 10659, "repo": "groovy-all-4.0.13", "des": "Apply a number of methods to allow convenient Date/Time manipulation,such as:", "code": "public class TimeCategory extends Object {\n\tstatic Duration getDay(Integer self);\n\tstatic Duration getDaylightSavingsOffset(BaseDuration self);\n\tstatic Duration getDaylightSavingsOffset(Date self); // Get the DST offset (if any) for the default locale and the given date.\n\tstatic Duration getDays(Integer self);\n\tstatic TimeDuration getHour(Integer self);\n\tstatic TimeDuration getHours(Integer self);\n\tstatic TimeDuration getMillisecond(Integer self);\n\tstatic TimeDuration getMilliseconds(Integer self);\n\tstatic TimeDuration getMinute(Integer self);\n\tstatic TimeDuration getMinutes(Integer self);\n\tstatic DatumDependentDuration getMonth(Integer self);\n\tstatic DatumDependentDuration getMonths(Integer self);\n\tstatic Duration getRelativeDaylightSavingsOffset(Date self, Date other); // Return a Duration representing the DST difference (if any) between two dates.\n\tstatic TimeDuration getSecond(Integer self);\n\tstatic TimeDuration getSeconds(Integer self);\n\tstatic TimeZone getTimeZone(Date self); // Deprecated.\n\tstatic Duration getWeek(Integer self);\n\tstatic Duration getWeeks(Integer self);\n\tstatic DatumDependentDuration getYear(Integer self);\n\tstatic DatumDependentDuration getYears(Integer self);\n\tstatic Date minus(Date date, BaseDuration duration);\n\tstatic TimeDuration minus(Date lhs, Date rhs); // Subtract one date from the other.\n\tstatic Date plus(Date date, BaseDuration duration);\n}"}
{"index": 15548, "repo": "spring-batch-core-5.0.2", "des": "Value object representing a potential transition from one State to another.", "code": "public final class StateTransition extends Object {\n\tstatic StateTransition createEndStateTransition(State state); // Create a new end state StateTransition specification.\n\tstatic StateTransition createEndStateTransition(State state, String pattern); // Create a new end state StateTransition specification.\n\tstatic StateTransition createStateTransition(State state, String next); // Create a new state StateTransition specification with a wildcard pattern that matches all outcomes.\n\tstatic StateTransition createStateTransition(State state, String pattern, String next); // Create a new StateTransition specification from one State to another (by name).\n\tString getNext(); // Public getter for the next State name.\n\tString getPattern();\n\tState getState(); // Public getter for the State.\n\tboolean isEnd(); // Check for a special next State signalling the end of a job.\n\tboolean matches(String status); // Check if the provided status matches the pattern, signalling that the next State should be executed.\n\tstatic StateTransition switchOriginAndDestination(StateTransition stateTransition, State state, String next); // Convenience method to switch the origin and destination of a transition, creating a new instance.\n}"}
{"index": 495, "repo": "ignite-core-2.15.0", "des": "Implementation of IgnitePredicate<ClusterNode> based on user attributes.", "code": "Class AttributeNodeFilter {\n\tboolean apply(ClusterNode node); // Predicate body.\n\tMap<String,Object> getAttrs(); // Gets attributes.\n}"}
{"index": 5709, "repo": "freemarker-2.3.32", "des": "Represents the HTML output format (MIME type \"text/html\", name \"HTML\").", "code": "Class HTMLOutputFormat {\n\tjava.lang.String escapePlainText(java.lang.String plainTextContent); // Should give the same result as MarkupOutputFormat.fromPlainTextByEscaping(String) and then MarkupOutputFormat.getMarkupString(TemplateMarkupOutputModel), but the implementation may use a more efficient solution.\n\tjava.lang.String getMimeType(); // Returns the MIME type of the output format.\n\tjava.lang.String getName(); // The short name used to refer to this format (like in the #ftl header).\n\tboolean isLegacyBuiltInBypassed(java.lang.String builtInName); // Tells if a string built-in that can't handle a TemplateMarkupOutputModel left hand operand can bypass this object as is.\n\tprotected TemplateHTMLOutputModel newTemplateMarkupOutputModel(java.lang.String plainTextContent, java.lang.String markupContent); // Creates a new CommonTemplateMarkupOutputModel that's bound to this OutputFormat instance.\n\tvoid output(java.lang.String textToEsc, java.io.Writer out); // Equivalent to calling MarkupOutputFormat.fromPlainTextByEscaping(String) and then MarkupOutputFormat.output(TemplateMarkupOutputModel, Writer), but the implementation may use a more efficient solution.\n}"}
{"index": 10704, "repo": "spring-tx-6.0.11", "des": "Default implementation of the TransactionStatus interface, used by AbstractPlatformTransactionManager.", "code": "public class DefaultTransactionStatus extends AbstractTransactionStatus {\n\tvoid flush(); // Delegate the flushing to the transaction object, provided that the latter implements the SmartTransactionObject interface.\n\tprotected SavepointManager getSavepointManager(); // This implementation exposes the SavepointManager interface of the underlying transaction object, if any.\n\tObject getSuspendedResources(); // Return the holder for resources that have been suspended for this transaction, if any.\n\tObject getTransaction(); // Return the underlying transaction object.\n\tboolean hasTransaction(); // Return whether there is an actual transaction active.\n\tboolean isDebug(); // Return whether the progress of this transaction is debugged.\n\tboolean isGlobalRollbackOnly(); // Determine the rollback-only flag via checking the transaction object, provided that the latter implements the SmartTransactionObject interface.\n\tboolean isNewSynchronization(); // Return if a new transaction synchronization has been opened for this transaction.\n\tboolean isNewTransaction(); // Return whether the present transaction is new; otherwise participating in an existing transaction, or potentially not running in an actual transaction in the first place.\n\tboolean isReadOnly(); // Return if this transaction is defined as read-only transaction.\n\tboolean isTransactionSavepointManager(); // Return whether the underlying transaction implements the SavepointManager interface and therefore supports savepoints.\n}"}
{"index": 13041, "repo": "spring-aop-6.0.11", "des": "AOP Alliance MethodInterceptor that processes method invocations asynchronously, using a given AsyncTaskExecutor.", "code": "public class AsyncExecutionInterceptor extends AsyncExecutionAspectSupport implements MethodInterceptor, org.springframework.core.Ordered {\n\tprotected Executor getDefaultExecutor(org.springframework.beans.factory.BeanFactory beanFactory); // This implementation searches for a unique TaskExecutor bean in the context, or for an Executor bean named \"taskExecutor\" otherwise.\n\tprotected String getExecutorQualifier(Method method); // Get the qualifier for a specific executor to use when executing the given method.\n\tint getOrder();\n\tObject invoke(MethodInvocation invocation); // Intercept the given method invocation, submit the actual calling of the method to the correct task executor and return immediately to the caller.\n}"}
{"index": 15303, "repo": "spring-boot-3.1.1", "des": "The various scopes under which a serializer/deserializer can be registered.", "code": "public static enum JsonComponent.Scope extends Enum<JsonComponent.Scope> {\n\tstatic JsonComponent.Scope valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic JsonComponent.Scope[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 874, "repo": "ignite-core-2.15.0", "des": "A probabilistic set of hashed long elements.", "code": "Class HLL {\n\tvoid addRaw(long rawValue); // Adds rawValue directly to the HLL.\n\tlong cardinality(); // Computes the cardinality of the HLL.\n\tvoid clear(); // Clears the HLL.\n\tHLL clone(); // Create a deep copy of this HLL.\n\tstatic HLL fromBytes(byte[] bytes); // Deserializes the HLL (in toBytes(ISchemaVersion) format) serialized into bytes.\n\tHLLType getType();\n\tbyte[] toBytes(); // Serializes the HLL to an array of bytes in correspondence with the format of the default schema version, SerializationUtil.DEFAULT_SCHEMA_VERSION.\n\tbyte[] toBytes(ISchemaVersion schemaVersion); // Serializes the HLL to an array of bytes in correspondence with the format of the specified schema version.\n\tvoid union(HLL other); // Computes the union of HLLs and stores the result in this instance.\n}"}
{"index": 16453, "repo": "spring-batch-infrastructure-5.0.2", "des": "Restartable ItemReader that reads lines from input FlatFileItemReader.setResource(Resource).", "code": "public class FlatFileItemReader<T> extends AbstractItemCountingItemStreamItemReader<T> implements ResourceAwareItemReaderItemStream<T>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void doClose(); // Close the resources opened in AbstractItemCountingItemStreamItemReader.doOpen().\n\tprotected void doOpen(); // Open resources necessary to start reading input.\n\tprotected T doRead(); // Read next item from input.\n\tprotected boolean isComment(String line);\n\tprotected void jumpToItem(int itemIndex); // Move to the given item index.\n\tvoid setBufferedReaderFactory(BufferedReaderFactory bufferedReaderFactory); // Factory for the BufferedReader that will be used to extract lines from the file.\n\tvoid setComments(String[] comments); // Setter for comment prefixes.\n\tvoid setEncoding(String encoding); // Setter for the encoding for this input source.\n\tvoid setLineMapper(LineMapper<T> lineMapper); // Setter for line mapper.\n\tvoid setLinesToSkip(int linesToSkip); // Public setter for the number of lines to skip at the start of a file.\n\tvoid setRecordSeparatorPolicy(RecordSeparatorPolicy recordSeparatorPolicy); // Public setter for the recordSeparatorPolicy.\n\tvoid setResource(org.springframework.core.io.Resource resource); // Public setter for the input resource.\n\tvoid setSkippedLinesCallback(LineCallbackHandler skippedLinesCallback);\n\tvoid setStrict(boolean strict); // In strict mode the reader will throw an exception on AbstractItemCountingItemStreamItemReader.open(org.springframework.batch.item.ExecutionContext) if the input resource does not exist.\n}"}
{"index": 14366, "repo": "wicket-core-10.0.0-M1", "des": "Extension of PageProvider that is also capable of providing a Component belonging to the page.", "code": "public class PageAndComponentProvider extends PageProvider implements IPageAndComponentProvider {\n\tIRequestableComponent getComponent(); // Returns component on specified page with given path.\n\tString getComponentPath(); // Returns the page relative component path.\n}"}
{"index": 10295, "repo": "spring-core-6.0.11", "des": "A simple log message type for use with Commons Logging, allowing for convenient lazy resolution of a given Supplier instance (typically bound to a lambda expression) or a printf-style format string (String.format(java.lang.String, java.lang.Object...)) in its LogMessage.toString().", "code": "public abstract class LogMessage extends Object implements CharSequence {\n\tchar charAt(int index);\n\tstatic LogMessage format(String format, Object arg1); // Build a lazily formatted message from the given format string and argument.\n\tstatic LogMessage format(String format, Object... args); // Build a lazily formatted message from the given format string and varargs.\n\tstatic LogMessage format(String format, Object arg1, Object arg2); // Build a lazily formatted message from the given format string and arguments.\n\tstatic LogMessage format(String format, Object arg1, Object arg2, Object arg3); // Build a lazily formatted message from the given format string and arguments.\n\tstatic LogMessage format(String format, Object arg1, Object arg2, Object arg3, Object arg4); // Build a lazily formatted message from the given format string and arguments.\n\tint length();\n\tstatic LogMessage of(Supplier<? extends CharSequence> supplier); // Build a lazily resolving message from the given supplier.\n\tCharSequence subSequence(int start, int end);\n}"}
{"index": 10109, "repo": "spring-hateoas-2.1.2", "des": "Simples LinkBuilder implementation possible.", "code": "public class BasicLinkBuilder extends LinkBuilderSupport<BasicLinkBuilder> {\n\tprotected BasicLinkBuilder createNewInstance(UriComponents components, List<Affordance> affordances); // Creates a new instance of the sub-class.\n\tprotected BasicLinkBuilder getThis(); // Returns the current concrete instance.\n\tstatic BasicLinkBuilder linkToCurrentMapping(); // Creates a new BasicLinkBuilder to link to the current servlet mapping.\n}"}
{"index": 2253, "repo": "hive-exec-4.0.0-alpha-2", "des": "Re-Executes a query only adding an extra overlay.", "code": "Class ReExecutionOverlayPlugin {\n\tvoid initialize(Driver driver); // Called when the Driver is being initialized The plugin may add hooks/etc to tap into the system.\n\tvoid prepareToReExecute(); // The plugin should prepare for the re-compilation of the query.\n\tboolean shouldReExecute(int executionNum); // The query have failed, does this plugin advises to re-execute it again?\n\tboolean shouldReExecuteAfterCompile(int executionNum, PlanMapper pm1, PlanMapper pm2); // The query has failed; and have been recompiled - does this plugin advises to re-execute it again?\n}"}
{"index": 2259, "repo": "hive-exec-4.0.0-alpha-2", "des": "Thread-safe singleton factory for RootAllocator.", "code": "Enum RootAllocatorFactory {\n\torg.apache.arrow.memory.RootAllocator getOrCreateRootAllocator(long arrowAllocatorLimit);\n\torg.apache.arrow.memory.RootAllocator getRootAllocator(org.apache.hadoop.conf.Configuration conf);\n\tstatic RootAllocatorFactory valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RootAllocatorFactory[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13970, "repo": "spring-webflux-6.0.11", "des": "Implementation of the HandlerMapping interface to map from URLs to request handler beans.", "code": "public class SimpleUrlHandlerMapping extends AbstractUrlHandlerMapping {\n\tMap<String,?> getUrlMap(); // Allow Map access to the URL path mappings, with the option to add or override specific entries.\n\tvoid initApplicationContext(); // Calls the registerHandlers(java.util.Map<java.lang.String, java.lang.Object>) method in addition to the superclass's initialization.\n\tprotected void registerHandlers(Map<String,Object> urlMap); // Register all handlers specified in the URL map for the corresponding paths.\n\tvoid setMappings(Properties mappings); // Map URL paths to handler bean names.\n\tvoid setUrlMap(Map<String,?> urlMap); // Set a Map with URL paths as keys and handler beans (or handler bean names) as values.\n}"}
{"index": 2202, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ScalarArithmeticColumn.", "code": "Class LongScalarSubtractLongColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 7060, "repo": "calcite-core-1.34.0", "des": "Default implementations of the BuiltInMetadata.", "code": "Class RelMdMemory {\n\t@Nullable Double cumulativeMemoryWithinPhase(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Memory.cumulativeMemoryWithinPhase(), invoked using reflection.\n\t@Nullable Double cumulativeMemoryWithinPhaseSplit(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Memory.cumulativeMemoryWithinPhaseSplit(), invoked using reflection.\n\tMetadataDef<BuiltInMetadata.Memory> getDef();\n\t@Nullable Double memory(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Memory.memory(), invoked using reflection.\n}"}
{"index": 7735, "repo": "cassandra-all-4.1.2", "des": "Assists in streaming ranges to this node.", "code": "Class RangeStreamer {\n\tvoid addRanges(java.lang.String keyspaceName, ReplicaCollection<?> replicas); // Add ranges to be streamed for given keyspace.\n\tvoid addSourceFilter(RangeStreamer.SourceFilter filter);\n\tstatic EndpointsByReplica calculateRangesToFetchWithPreferredEndpoints(java.util.function.BiFunction<InetAddressAndPort,EndpointsForRange,EndpointsForRange> snitchGetSortedListByProximity, AbstractReplicationStrategy strat, ReplicaCollection<?> fetchRanges, boolean useStrictConsistency, TokenMetadata tmdBefore, TokenMetadata tmdAfter, java.lang.String keyspace, java.util.Collection<RangeStreamer.SourceFilter> sourceFilters); // Get a map of all ranges and the source that will be cleaned up once this bootstrapped node is added for the given ranges.\n\tstatic com.google.common.collect.Multimap<InetAddressAndPort,RangeStreamer.FetchReplica> convertPreferredEndpointsToWorkMap(EndpointsByReplica preferredEndpoints); // The preferred endpoint list is the wrong format because it is keyed by Replica (this node) rather than the source endpoint we will fetch from which streaming wants.\n\tStreamResultFuture fetchAsync();\n}"}
{"index": 4015, "repo": "zookeeper-3.8.2", "des": "A MetricsContext is like a namespace for metrics.", "code": "Interface MetricsContext {\n\tMetricsContext getContext(String name); // Returns a sub context.\n\tCounter getCounter(String name); // Returns a counter.\n\tCounterSet getCounterSet(String name); // Returns the CounterSet identified by the given name Null name is not allowed\n\tSummary getSummary(String name, MetricsContext.DetailLevel detailLevel); // Returns a summary.\n\tSummarySet getSummarySet(String name, MetricsContext.DetailLevel detailLevel); // Returns a set of summaries.\n\tvoid registerGauge(String name, Gauge gauge); // Registers an user provided Gauge which will be called by the MetricsProvider in order to sample an integer value.\n\tvoid registerGaugeSet(String name, GaugeSet gaugeSet); // Registers a user provided GaugeSet which will be called by the MetricsProvider in order to sample number values.\n\tvoid unregisterGauge(String name); // Unregisters the user provided Gauge bound to the given name.\n\tvoid unregisterGaugeSet(String name); // Unregisters the user provided GaugeSet bound to the given name.\n}"}
{"index": 11038, "repo": "spring-shell-core-3.1.2", "des": "Interface representing an exit code in a command.", "code": "public interface CommandExitCode {\n\tList<Function<Throwable,Integer>> getMappingFunctions(); // Gets a function mappings from exceptions to exit codes.\n\tstatic CommandExitCode of(); // Gets an instance of a default CommandExitCode.\n\tstatic CommandExitCode of(List<Function<Throwable,Integer>> functions); // Gets an instance of a default CommandExitCode.\n}"}
{"index": 11687, "repo": "spring-cloud-commons-3.1.7", "des": "Factory class used to customize the retry functionality throughout Spring Cloud.", "code": "public interface LoadBalancedRetryFactory {\n\tdefault org.springframework.retry.backoff.BackOffPolicy createBackOffPolicy(String service); // Creates a BackOffPolicy for a given service.\n\tdefault org.springframework.retry.RetryListener[] createRetryListeners(String service); // Creates an array of RetryListeners for a given service.\n\tdefault LoadBalancedRetryPolicy createRetryPolicy(String service, ServiceInstanceChooser serviceInstanceChooser); // Creates a LoadBalancedRetryPolicy.\n}"}
{"index": 10784, "repo": "spring-boot-actuator-3.1.1", "des": "A HealthContributor that is composed of other HealthContributor instances.", "code": "public interface CompositeHealthContributor extends HealthContributor, NamedContributors<HealthContributor> {\n\tstatic CompositeHealthContributor fromMap(Map<String,? extends HealthContributor> map); // Factory method that will create a CompositeHealthContributor from the specified map.\n\tstatic <V> CompositeHealthContributor fromMap(Map<String,V> map, Function<V,? extends HealthContributor> valueAdapter); // Factory method that will create a CompositeHealthContributor from the specified map.\n}"}
{"index": 17284, "repo": "groovy-4.0.13", "des": "An option specifying which Java reference type should be used to refer to a key and/or value.", "code": "public static enum ConcurrentReferenceHashMap.ReferenceType extends Enum<ConcurrentReferenceHashMap.ReferenceType> {\n\tstatic ConcurrentReferenceHashMap.ReferenceType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ConcurrentReferenceHashMap.ReferenceType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 393, "repo": "phoenix-core-5.1.3", "des": "This utility class was partially copied from Salesforce's internationalization utility library (com.", "code": "Enum OracleUpperTable {\n\tstatic OracleUpperTable forLinguisticSort(String sort);\n\tLocale getLocale();\n\tString getSql(String expr);\n\tString getSqlFormatString();\n\tString toUpperCase(String value);\n\tstatic OracleUpperTable valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic OracleUpperTable[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16696, "repo": "spring-beans-6.0.11", "des": "Immutable placeholder class used for a property value object when it's a reference to another bean name in the factory, to be resolved at runtime.", "code": "public class RuntimeBeanNameReference extends Object implements BeanReference {\n\tboolean equals(Object other);\n\tString getBeanName(); // Return the target bean name that this reference points to (never null).\n\tObject getSource(); // Return the configuration source Object for this metadata element (may be null).\n\tvoid setSource(Object source); // Set the configuration source Object for this metadata element.\n}"}
{"index": 17725, "repo": "spring-web-6.0.11", "des": "WebHandler decorator that invokes one or more WebExceptionHandlers after the delegate WebHandler.", "code": "public class ExceptionHandlingWebHandler extends WebHandlerDecorator {\n\tList<WebExceptionHandler> getExceptionHandlers(); // Return a read-only list of the configured exception handlers.\n\treactor.core.publisher.Mono<Void> handle(ServerWebExchange exchange); // Handle the web server exchange.\n}"}
{"index": 9440, "repo": "hadoop-yarn-api-3.3.6", "des": "The response sent by the ResourceManager to the client on update the application priority.", "code": "Class UpdateApplicationPriorityResponse {\n\tabstract Priority getApplicationPriority(); // Get the Priority of the application to be set.\n\tstatic UpdateApplicationPriorityResponse newInstance(Priority priority);\n\tabstract void setApplicationPriority(Priority priority); // Set the Priority of the application.\n}"}
{"index": 4011, "repo": "zookeeper-3.8.2", "des": "Parent class for all ZooKeeperServers for Learners.", "code": "Class LearnerZooKeeperServer {\n\tvoid createSessionTracker();\n\tabstract Learner getLearner(); // Abstract method to return the learner associated with this server.\n\tlong getServerId(); // Returns the id of the associated QuorumPeer, which will do for a unique id of this server.\n\tprotected Map<Long,Integer> getTouchSnapshot(); // Returns the current state of the session tracker.\n\tprotected void registerJMX();\n\tvoid registerJMX(ZooKeeperServerBean serverBean, LocalPeerBean localPeerBean);\n\tprotected void revalidateSession(ServerCnxn cnxn, long sessionId, int sessionTimeout);\n\tvoid shutdown();\n\tprotected void unregisterJMX();\n\tprotected void unregisterJMX(Learner peer);\n}"}
{"index": 8870, "repo": "hbase-server-3.0.0-alpha-4", "des": "Class to publish the cluster status to the client.", "code": "Class ClusterStatusPublisher {\n\tprotected void chore();\n\tprotected void cleanup();\n\tprotected List<ServerName> generateDeadServersListToSend(); // Create the dead server to send.\n\tprotected List<Pair<ServerName,Long>> getDeadServers(long since); // Get the servers which died since a given timestamp.\n}"}
{"index": 17855, "repo": "spring-web-6.0.11", "des": "A Decoder that reads Messages using Google Protocol Buffers.", "code": "public class ProtobufDecoder extends ProtobufCodecSupport implements org.springframework.core.codec.Decoder<com.google.protobuf.Message> {\n\tboolean canDecode(org.springframework.core.ResolvableType elementType, org.springframework.util.MimeType mimeType);\n\treactor.core.publisher.Flux<com.google.protobuf.Message> decode(Publisher<org.springframework.core.io.buffer.DataBuffer> inputStream, org.springframework.core.ResolvableType elementType, org.springframework.util.MimeType mimeType, Map<String,Object> hints);\n\tcom.google.protobuf.Message decode(org.springframework.core.io.buffer.DataBuffer dataBuffer, org.springframework.core.ResolvableType targetType, org.springframework.util.MimeType mimeType, Map<String,Object> hints);\n\treactor.core.publisher.Mono<com.google.protobuf.Message> decodeToMono(Publisher<org.springframework.core.io.buffer.DataBuffer> inputStream, org.springframework.core.ResolvableType elementType, org.springframework.util.MimeType mimeType, Map<String,Object> hints);\n\tList<org.springframework.util.MimeType> getDecodableMimeTypes();\n\tint getMaxMessageSize(); // Return the configured message size limit.\n\tvoid setMaxMessageSize(int maxMessageSize); // The max size allowed per message.\n}"}
{"index": 2282, "repo": "hive-exec-4.0.0-alpha-2", "des": "TaskLogProcessor reads the logs from failed task attempts and tries to figure out what the cause of the error was using various heuristics.", "code": "Class TaskLogProcessor {\n\tvoid addTaskAttemptLogUrl(String url); // Adds a task log URL for the heuristics to read through.\n\tList<ErrorAndSolution> getErrors(); // Processes the provided task logs using the known error heuristics to get the matching errors.\n\tList<List<String>> getStackTraces(); // Processes the provided task logs to extract stack traces.\n}"}
{"index": 10620, "repo": "groovy-all-4.0.13", "des": "An interface for things that can supply (and potentially resupply) a Reader on a source stream.", "code": "public interface ReaderSource extends HasCleanup {\n\tboolean canReopenSource(); // Returns true if the source can be restarted (ie.\n\tvoid cleanup(); // Cleans up any cached resources used by getLine().\n\tString getLine(int lineNumber, Janitor janitor); // Returns a line from the source, or null, if unavailable.\n\tReader getReader(); // Returns a new Reader on the underlying source object.\n\tURI getURI(); // Returns a URI for this source.\n}"}
{"index": 18195, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Provides access to information about existing index in the database", "code": "Interface IndexInformation {\n\tjava.util.List<ColumnInformation> getIndexedColumns(); // Obtain the columns indexed under this index.\n\tIdentifier getIndexIdentifier(); // Obtain the identifier for this index.\n}"}
{"index": 3321, "repo": "hbase-common-3.0.0-alpha-4", "des": "Utility methods for reading, and building the ZooKeeper configuration.", "code": "Class ZKConfig {\n\tstatic String buildZKQuorumServerString(String[] serverHosts, String clientPort); // Build the ZK quorum server string with \"server:clientport\" list, separated by ','\n\tstatic String getClientZKQuorumServersString(org.apache.hadoop.conf.Configuration conf); // Get the client ZK Quorum servers string\n\tstatic String getZKQuorumServersString(org.apache.hadoop.conf.Configuration conf); // Return the ZK Quorum servers string given the specified configuration.\n\tstatic String getZooKeeperClusterKey(org.apache.hadoop.conf.Configuration conf); // Get the key to the ZK ensemble for this configuration without adding a name at the end\n\tstatic String getZooKeeperClusterKey(org.apache.hadoop.conf.Configuration conf, String name); // Get the key to the ZK ensemble for this configuration and append a name at the end\n\tstatic Properties makeZKProps(org.apache.hadoop.conf.Configuration conf); // Make a Properties object holding ZooKeeper config.\n\tstatic String standardizeZKQuorumServerString(String quorumStringInput, String clientPort); // Standardize the ZK quorum string: make it a \"server:clientport\" list, separated by ','\n\tstatic ZKConfig.ZKClusterKey transformClusterKey(String key); // Separate the given key into the three configurations it should contain: hbase.zookeeper.quorum, hbase.zookeeper.client.port and zookeeper.znode.parent\n\tstatic void validateClusterKey(String key); // Verifies that the given key matches the expected format for a ZooKeeper cluster key.\n}"}
{"index": 13006, "repo": "spring-aop-6.0.11", "des": "Abstract BeanFactory-based PointcutAdvisor that allows for any Advice to be configured as reference to an Advice bean in a BeanFactory.", "code": "public abstract class AbstractBeanFactoryPointcutAdvisor extends AbstractPointcutAdvisor implements org.springframework.beans.factory.BeanFactoryAware {\n\tAdvice getAdvice(); // Return the advice part of this aspect.\n\tString getAdviceBeanName(); // Return the name of the advice bean that this advisor refers to, if any.\n\tvoid setAdvice(Advice advice); // Specify a particular instance of the target advice directly, avoiding lazy resolution in getAdvice().\n\tvoid setAdviceBeanName(String adviceBeanName); // Specify the name of the advice bean that this advisor should refer to.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n}"}
{"index": 17064, "repo": "spring-integration-core-6.1.2", "des": "A Message Router that resolves the target MessageChannel for messages whose payload is a Throwable.", "code": "public class ErrorMessageExceptionTypeRouter extends AbstractMappingMessageRouter {\n\tprotected List<Object> getChannelKeys(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to return the channel keys.\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid removeChannelMapping(String key); // Remove a channel mapping for the given key if present.\n\tvoid replaceChannelMappings(Properties channelMappings); // Convenience method allowing conversion of a list of mappings in a control-bus message.\n\tvoid setChannelMapping(String key, String channelName); // Add a channel mapping from the provided key to channel name.\n\tvoid setChannelMappings(Map<String,String> channelMappings); // Provide mappings from channel keys to channel names.\n}"}
{"index": 7196, "repo": "calcite-core-1.34.0", "des": "Whether this JDBC driver needs you to pass a Calendar object to methods such as ResultSet.", "code": "Enum SqlDialect.CalendarPolicy {\n\tstatic SqlDialect.CalendarPolicy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlDialect.CalendarPolicy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11158, "repo": "tribuo-core-4.3.1", "des": "Operations understood by this Transformation.", "code": "public static enum SimpleTransform.Operation extends Enum<SimpleTransform.Operation> {\n\tstatic SimpleTransform.Operation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SimpleTransform.Operation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 15271, "repo": "spring-boot-3.1.1", "des": "Enumeration of filter dispatcher types, identical to DispatcherType and used in configuration as the servlet API may not be present.", "code": "public enum DispatcherType extends Enum<DispatcherType> {\n\tstatic DispatcherType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic DispatcherType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 1900, "repo": "hadoop-hdfs-3.3.6", "des": "Information used for updating the blocksMap when deleting files.", "code": "Class INode.BlocksMapUpdateInfo {\n\tvoid addDeleteBlock(org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo toDelete); // Add a to-be-deleted block into the toDeleteList\n\tvoid addUpdateReplicationFactor(org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo block, short targetRepl);\n\tvoid clear(); // Clear toDeleteList\n\tList<org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo> getToDeleteList();\n\tList<INode.BlocksMapUpdateInfo.UpdatedReplicationInfo> toUpdateReplicationInfo();\n}"}
{"index": 5131, "repo": "druid-processing-26.0.0", "des": "Base class for many (although not all) ColumnValueSelector<ExprEval>.", "code": "Class BaseExpressionColumnValueSelector {\n\tClass<ExprEval> classOfObject();\n\tprotected abstract ExprEval<?> eval(); // Implementations override this.\n\tdouble getDouble();\n\tfloat getFloat();\n\tlong getLong();\n\tExprEval<?> getObject();\n\tvoid inspectRuntimeShape(RuntimeShapeInspector inspector); // Implementations of this method should call inspector.visit() with all fields of this class, which meet two conditions: 1.\n\tboolean isNull(); // Returns true if the primitive long, double, or float value returned by this selector should be treated as null.\n}"}
{"index": 10487, "repo": "groovy-all-4.0.13", "des": "A ClassNode kind representing the classes coming from *.class files decompiled using ASM.", "code": "public class DecompiledClassNode extends ClassNode {\n\tList<AnnotationNode> getAnnotations();\n\tList<AnnotationNode> getAnnotations(ClassNode type);\n\tlong getCompilationTimeStamp();\n\tList<ConstructorNode> getDeclaredConstructors();\n\tFieldNode getDeclaredField(String name); // Finds a field matching the given name in this class.\n\tList<MethodNode> getDeclaredMethods(String name); // This method returns a list of all methods of the given name defined in the current class\n\tList<FieldNode> getFields();\n\tGenericsType[] getGenericsTypes();\n\tClassNode[] getInterfaces();\n\tList<MethodNode> getMethods();\n\tList<RecordComponentNode> getRecordComponents(); // Gets the record components of record type.\n\tClass getTypeClass(); // Returns the concrete class this classnode relates to.\n\tClassNode[] getUnresolvedInterfaces(boolean useRedirect);\n\tClassNode getUnresolvedSuperClass(boolean useRedirect);\n\tboolean isParameterized();\n\tboolean isResolved();\n\tboolean isSealed();\n\tboolean isUsingGenerics();\n\tvoid setGenericsPlaceHolder(boolean b);\n\tString setName(String name);\n\tvoid setRedirect(ClassNode cn); // Sets this instance as proxy for the given ClassNode.\n\tvoid setUsingGenerics(boolean b);\n}"}
{"index": 16916, "repo": "spring-integration-ip-6.1.2", "des": "Reads data in an InputStream to a byte[]; data must be preceded by a binary length (network byte order, not included in resulting byte[]).", "code": "public class ByteArrayLengthHeaderSerializer extends AbstractByteArraySerializer {\n\tbyte[] deserialize(InputStream inputStream); // Read the header from the stream and then reads the provided length from the stream and returns the data in a byte[].\n\tByteArrayLengthHeaderSerializer inclusive(); // Include the length of the header in addition to the payload.\n\tprotected boolean isInclusive(); // Return true if the length header value includes its own length.\n\tprotected int read(InputStream inputStream, byte[] buffer, boolean header); // Read data from the socket and puts the data in buffer.\n\tprotected int readHeader(InputStream inputStream); // Read the header and returns the length of the data part.\n\tvoid serialize(byte[] bytes, OutputStream outputStream); // Write the byte[] to the output stream, preceded by a 4 byte length in network byte order (big endian).\n\tvoid setInclusive(boolean inclusive); // Set to true to set the length header to include the length of the header in addition to the payload.\n\tprotected void writeHeader(OutputStream outputStream, int length); // Write the header, according to the header format.\n}"}
{"index": 12698, "repo": "spring-data-mongodb-4.1.2", "des": "Default implementation of IndexOperations.", "code": "public class DefaultIndexOperations extends Object implements IndexOperations {\n\tvoid alterIndex(String name, IndexOptions options); // Drops an index from this collection.\n\tvoid dropAllIndexes(); // Drops all indices from this collection.\n\tvoid dropIndex(String name); // Drops an index from this collection.\n\tString ensureIndex(IndexDefinition indexDefinition); // Ensure that an index for the provided IndexDefinition exists for the collection indicated by the entity class.\n\t<T> T execute(CollectionCallback<T> callback);\n\tList<IndexInfo> getIndexInfo(); // Returns the index information on the collection.\n}"}
{"index": 4565, "repo": "beam-sdks-java-core-2.49.0", "des": "A LogicalType representing a variable-length string with specified maximum length.", "code": "Class VariableString {\n\tint getMaxLength();\n\t@Nullable java.lang.String getName();\n\tstatic VariableString of(int maxStringLength); // Return an instance of VariableString with specified max string length.\n\tstatic VariableString of(@Nullable java.lang.String name, int maxStringLength); // Return an instance of VariableString with specified max string length.\n\tjava.lang.String toInputType(java.lang.String base); // Convert the Java type used by the base Schema.FieldType to the input type.\n}"}
{"index": 13325, "repo": "shiro-core-2.0.0-alpha-2", "des": "Simple/default Environment implementation that stores Shiro objects as key-value pairs in a Map instance.", "code": "public class DefaultEnvironment extends Object implements NamedObjectEnvironment, org.apache.shiro.lang.util.Destroyable {\n\tvoid destroy();\n\t<T> T getObject(String name, Class<T> requiredType); // Returns the object in Shiro's environment with the specified name and type or null if no object with that name was found.\n\tMap<String,Object> getObjects(); // Returns the live (modifiable) internal objects collection.\n\tSecurityManager getSecurityManager(); // Returns the application's SecurityManager instance accessible in the backing map using the securityManagerName property as the lookup key.\n\tString getSecurityManagerName(); // Returns the name of the SecurityManager instance in the backing map.\n\tprotected SecurityManager lookupSecurityManager(); // Looks up the SecurityManager instance in the backing map without performing any non-null guarantees.\n\tvoid setObject(String name, Object instance);\n\tvoid setSecurityManager(SecurityManager securityManager);\n\tvoid setSecurityManagerName(String securityManagerName); // Sets the name of the SecurityManager instance in the backing map.\n}"}
{"index": 11239, "repo": "wicket-extensions-10.0.0-M1", "des": "Model mapping ZonedDateTime to a LocalDateTime in ZonedToLocalDateTimeModel.getClientTimeZone().", "code": "public class ZonedToLocalDateTimeModel extends Object implements org.apache.wicket.model.IModel<LocalDateTime> {\n\tvoid detach();\n\tprotected ZoneId getClientTimeZone(); // What is the ZoneId of the client.\n\tLocalDateTime getObject();\n\tprotected ZoneId getTargetTimeZone(); // What is the ZoneId of created ZonedDateTime objects.\n\tvoid setObject(LocalDateTime dateTime);\n}"}
{"index": 7827, "repo": "cassandra-all-4.1.2", "des": "Function that rounds a date down to the closest multiple of a duration.", "code": "Class TimeFcts.FloorDateFunction {\n\tprotected java.nio.ByteBuffer fromTimeInMillis(long timeInMillis); // Serializes the specified time.\n\tstatic TimeFcts.FloorDateFunction newInstance();\n\tstatic TimeFcts.FloorDateFunction newInstanceWithStartTimeArgument();\n\tprotected java.lang.Long toStartingTimeInMillis(java.nio.ByteBuffer bytes); // Deserializes the specified starting time.\n\tprotected java.lang.Long toTimeInMillis(java.nio.ByteBuffer bytes); // Deserializes the specified input time.\n\tprotected void validateDuration(Duration duration); // Validates that the duration has the correct precision.\n}"}
{"index": 318, "repo": "phoenix-core-5.1.3", "des": "Collection of utility methods for setting up bulk import jobs.", "code": "Class CsvBulkImportUtil {\n\tstatic void configurePreUpsertProcessor(org.apache.hadoop.conf.Configuration conf, Class<? extends ImportPreUpsertKeyValueProcessor> processorClass); // Configure an ImportPreUpsertKeyValueProcessor for a CSV bulk import job.\n\tstatic org.apache.hadoop.fs.Path getOutputPath(org.apache.hadoop.fs.Path outputdir, String tableName);\n\tstatic void initCsvImportJob(org.apache.hadoop.conf.Configuration conf, char fieldDelimiter, Character quoteChar, Character escapeChar, String arrayDelimiter, String binaryEncoding); // Configure a job configuration for a bulk CSV import.\n}"}
{"index": 6026, "repo": "jackson-databind-2.15.2", "des": "Deserializer only used for abstract types used as placeholders during polymorphic type handling deserialization.", "code": "Class AbstractDeserializer {\n\tprotected Object _deserializeFromObjectId(JsonParser p, DeserializationContext ctxt); // Method called in cases where it looks like we got an Object Id to parse and use as a reference.\n\tprotected Object _deserializeIfNatural(JsonParser p, DeserializationContext ctxt);\n\tstatic AbstractDeserializer constructForNonPOJO(BeanDescription beanDesc); // Factory method used when constructing instances for non-POJO types, like Maps.\n\tJsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property); // Method called to see if a different (or differently configured) deserializer is needed to deserialize values of specified property.\n\tObject deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Deserialization called when type being deserialized is defined to contain additional type identifier, to allow for correctly instantiating correct subtype.\n\tSettableBeanProperty findBackReference(String logicalName); // Method called by BeanDeserializer to resolve back reference part of managed references.\n\tObjectIdReader getObjectIdReader(); // Overridden to return true for those instances that are handling value for which Object Identity handling is enabled (either via value type or referring property).\n\tClass<?> handledType(); // Method for accessing concrete physical type of values this deserializer produces.\n\tboolean isCachable(); // Method called to see if deserializer instance is cachable and usable for other properties of same type (type for which instance was created).\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n\tBoolean supportsUpdate(DeserializationConfig config); // Introspection method that may be called to see whether deserializer supports update of an existing value (aka \"merging\") or not.\n}"}
{"index": 7599, "repo": "cassandra-all-4.1.2", "des": "Base class for internally emitted events used for diagnostics and testing.", "code": "Class DiagnosticEvent {\n\tabstract java.lang.Enum<?> getType(); // Returns event type discriminator.\n\tabstract java.util.Map<java.lang.String,java.io.Serializable> toMap(); // Returns map of key-value pairs containing relevant event details.\n}"}
{"index": 6045, "repo": "jackson-databind-2.15.2", "des": "Type deserializer used with JsonTypeInfo.", "code": "Class AsArrayTypeDeserializer {\n\tprotected Object _deserialize(JsonParser p, DeserializationContext ctxt); // Method that handles type information wrapper, locates actual subtype deserializer to use, and calls it to do actual deserialization.\n\tprotected String _locateTypeId(JsonParser p, DeserializationContext ctxt);\n\tprotected boolean _usesExternalId();\n\tObject deserializeTypedFromAny(JsonParser jp, DeserializationContext ctxt); // Method called to let this type deserializer handle deserialization of \"typed\" object, when value itself may have been serialized using any kind of JSON value (Array, Object, scalar).\n\tObject deserializeTypedFromArray(JsonParser jp, DeserializationContext ctxt); // Method called when actual object is serialized as JSON Array.\n\tObject deserializeTypedFromObject(JsonParser jp, DeserializationContext ctxt); // Method called when actual object is serialized as JSON Object\n\tObject deserializeTypedFromScalar(JsonParser jp, DeserializationContext ctxt); // Method called to let this type deserializer handle deserialization of \"typed\" object, when value itself is serialized as a scalar JSON value (something other than Array or Object), regardless of Java type.\n\tTypeDeserializer forProperty(BeanProperty prop); // Method called to create contextual version, to be used for values of given property.\n\tJsonTypeInfo.As getTypeInclusion(); // Accessor for type information inclusion method that deserializer uses; indicates how type information is (expected to be) embedded in JSON input.\n}"}
{"index": 891, "repo": "ignite-core-2.15.0", "des": "Implementation of IgniteClusterMXBean interface.", "code": "Class IgniteClusterMXBeanImpl {\n\tUUID getId(); // Gets cluster ID.\n\tString getTag(); // Gets current cluster tag.\n\tvoid tag(String newTag); // Changes cluster tag to provided value.\n}"}
{"index": 6775, "repo": "calcite-core-1.34.0", "des": "BasicSqlType represents a standard atomic SQL type (excluding interval types).", "code": "Class BasicSqlType {\n\tprotected static void checkPrecScale(SqlTypeName typeName, boolean precisionSpecified, boolean scaleSpecified); // Throws if typeName does not allow the given combination of precision and scale.\n\tprotected void generateTypeString(StringBuilder sb, boolean withDetail); // Generates a string representation of this type.\n\t@Nullable Charset getCharset(); // Gets this type's character set, or null if this type cannot carry a character set or has no character set defined.\n\t@Nullable SqlCollation getCollation(); // Gets this type's collation, or null if this type cannot carry a collation or has no collation defined.\n\t@Nullable Object getLimit(boolean sign, SqlTypeName.Limit limit, boolean beyond); // Returns a value which is a limit for this type.\n\tint getPrecision(); // Gets the JDBC-defined precision for values of this type.\n\tint getScale(); // Gets the scale of this type.\n}"}
{"index": 912, "repo": "ignite-core-2.15.0", "des": "Convenient predicate subclass that allows for thrown grid exception.", "code": "Class IgnitePredicate2X<E1,E2> {\n\tboolean apply(E1 e1, E2 e2); // Predicate body.\n\tabstract boolean applyx(E1 e1, E2 e2); // Predicate body that can throw IgniteCheckedException.\n}"}
{"index": 15655, "repo": "spring-security-core-6.1.2", "des": "An Authentication implementation that is designed for use whilst unit testing.", "code": "public class TestingAuthenticationToken extends AbstractAuthenticationToken {\n\tObject getCredentials(); // The credentials that prove the principal is correct.\n\tObject getPrincipal(); // The identity of the principal being authenticated.\n}"}
{"index": 1526, "repo": "pdfbox-3.0.0-beta1", "des": "Prints a PDF document using its original paper size.", "code": "Class PDFPageable {\n\tint getNumberOfPages();\n\tPageFormat getPageFormat(int pageIndex); // Returns the actual physical size of the pages in the PDF file.\n\tPrintable getPrintable(int i);\n\tRenderingHints getRenderingHints(); // Get the rendering hints.\n\tboolean isSubsamplingAllowed(); // Value indicating if the renderer is allowed to subsample images before drawing, according to image dimensions and requested scale.\n\tvoid setRenderingHints(RenderingHints renderingHints); // Set the rendering hints.\n\tvoid setSubsamplingAllowed(boolean subsamplingAllowed); // Sets a value instructing the renderer whether it is allowed to subsample images before drawing.\n}"}
{"index": 10163, "repo": "spring-hateoas-2.1.2", "des": "SPI that exposes HttpMessageConverters and LinkDiscoverers to be used by default by Traverson.", "code": "public interface TraversonDefaults {\n\tList<HttpMessageConverter<?>> getHttpMessageConverters(Collection<MediaType> mediaTypes); // Returns the HttpMessageConverter instances to be registered for the given MediaTypes.\n\tList<LinkDiscoverer> getLinkDiscoverers(Collection<MediaType> mediaTypes); // Returns the LinkDiscoverers to be registered by default for the given MediaTypes.\n}"}
{"index": 9568, "repo": "commons-math3-3.6.1", "des": "This enumeration defines the various types of normalizations that can be applied to discrete cosine transforms (DCT).", "code": "Enum DctNormalization {\n\tstatic DctNormalization valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DctNormalization[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9086, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class maintains mean and variation for any sequence of input provided to it.", "code": "Class RollingStatCalculator {\n\tdouble getDeviation(); // Returns deviation of the data values that are in the current list of data values\n\tdouble getMean(); // Returns mean of the data values that are in the current list of data values\n\tvoid insertDataValue(long data); // Inserts given data value to array of data values to be considered for statistics calculation\n}"}
{"index": 5587, "repo": "org.apache.karaf.main-2.4.4", "des": "Special startup class for the Eclipse Platform.", "code": "Class EclipseStarter {\n\tprotected static String getSysPath();\n\tstatic BundleContext getSystemBundleContext(); // Returns the context of the system bundle.\n\tstatic boolean isRunning(); // Returns true if the platform is already running, false otherwise.\n\tstatic void main(String[] args); // This is the main to start osgi.\n\tstatic Object run(Object argument); // Runs the application for which the platform was started.\n\tstatic Object run(String[] args, Runnable endSplashHandler); // Launches the platform and runs a single application.\n\tstatic void setInitialProperties(Map<String,String> initialProperties); // Sets the initial properties for the platform.\n\tstatic void shutdown(); // Shuts down the Platform.\n\tstatic BundleContext startup(String[] args, Runnable endSplashHandler); // Starts the platform and sets it up to run a single application.\n}"}
{"index": 11971, "repo": "jena-core-4.9.0", "des": "Implementation of the allValuesFrom restriction abstraction.", "code": "public class AllValuesFromRestrictionImpl extends RestrictionImpl implements AllValuesFromRestriction {\n\tResource getAllValuesFrom(); // Answer the resource characterising the constraint on all values of the restricted property.\n\tboolean hasAllValuesFrom(Resource cls); // Answer true if this property restriction has the given class as the class to which all values of the restricted property must belong.\n\tvoid removeAllValuesFrom(Resource cls); // Remove the statement that this restriction has all values from the given class among the values for the restricted property.\n\tvoid setAllValuesFrom(Resource cls); // Assert that this restriction restricts the property to have all values be members of the given class.\n}"}
{"index": 10935, "repo": "spring-data-redis-3.1.2", "des": "ReactiveRedisConnection.Command for GETEX.", "code": "public static class ReactiveStringCommands.GetExCommand extends ReactiveRedisConnection.KeyCommand {\n\tExpiration getExpiration(); // Get the Expiration to apply.\n\tstatic ReactiveStringCommands.GetExCommand key(ByteBuffer key); // Creates a new ReactiveStringCommands.GetExCommand given a key.\n\tReactiveStringCommands.GetExCommand withExpiration(Expiration expiration); // Applies Expiration.\n}"}
{"index": 4430, "repo": "beam-sdks-java-core-2.49.0", "des": "Keep track of the moving minimum/maximum/sum of sampled long values.", "code": "Class MovingFunction {\n\tvoid add(long nowMsSinceEpoch, long value); // Add value at nowMsSinceEpoch.\n\tlong get(long nowMsSinceEpoch); // Return the minimum/maximum/sum of all retained values within samplePeriodMs of nowMsSinceEpoch.\n\tboolean isSignificant(); // Is the current result 'significant'? Ie is it drawn from enough buckets or from enough samples?\n}"}
{"index": 8861, "repo": "hbase-server-3.0.0-alpha-4", "des": "HBase Canary Tool for \"canary monitoring\" of a running HBase cluster.", "code": "Class CanaryTool {\n\tint checkRegions(String[] targets); // Run Canary in Region mode.\n\tint checkRegionServers(String[] targets); // Runs Canary in Region server mode.\n\tint checkZooKeeper(); // Runs Canary in Zookeeper mode.\n\torg.apache.hadoop.conf.Configuration getConf();\n\tMap<String,String> getReadFailures();\n\tMap<String,String> getWriteFailures();\n\tstatic void main(String[] args);\n\tint run(String[] args);\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 6700, "repo": "lucene-analyzers-common-8.11.2", "des": "TokenFilterFactory that creates instances of HunspellStemFilter.", "code": "Class HunspellStemFilterFactory {\n\tTokenStream create(TokenStream tokenStream); // Transform the specified input TokenStream\n\tvoid inform(ResourceLoader loader); // Initializes this component with the provided ResourceLoader (used for loading classes, files, etc).\n}"}
{"index": 9554, "repo": "commons-math3-3.6.1", "des": "Utility to create combinations (n, k) of k elements in a set of n elements.", "code": "Class Combinations {\n\tComparator<int[]> comparator(); // Defines a lexicographic ordering of combinations.\n\tint getK(); // Gets the number of elements in each combination.\n\tint getN(); // Gets the size of the set from which combinations are drawn.\n\tIterator<int[]> iterator();\n}"}
{"index": 14278, "repo": "wicket-core-10.0.0-M1", "des": "represents a countable amount of items that can be paginated.", "code": "public interface IPageableItems extends IPageable {\n\tlong getItemCount(); // Gets the total number of items this object has.\n\tlong getItemsPerPage(); // maximum number of visible items per page\n\tvoid setItemsPerPage(long itemsPerPage); // set the maximum number of visible items per page\n}"}
{"index": 14119, "repo": "wicket-core-10.0.0-M1", "des": "An incremental Ajaxian link to a page of a PageableListView.", "code": "public class AjaxPagingNavigationIncrementLink extends PagingNavigationIncrementLink<Void> implements IAjaxLink {\n\tprotected AjaxPagingNavigationBehavior newAjaxPagingNavigationBehavior(IPageable pageable, String event);\n\tvoid onClick(); // Fallback event listener, will redisplay the current page.\n\tvoid onClick(AjaxRequestTarget target); // Performs the actual action of this component, performing a non-ajax fallback when there was no AjaxRequestTarget available.\n\tprotected void onComponentTag(ComponentTag tag); // Handles this link's tag.\n\tprotected void onInitialize(); // This method is meant to be used as an alternative to initialize components.\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes);\n}"}
{"index": 5174, "repo": "druid-processing-26.0.0", "des": "ComplexMetrics houses a mapping of serde names to affiliated ComplexMetricSerde objects.", "code": "Class ComplexMetrics {\n\tstatic ComplexMetricSerde getSerdeForType(String type);\n\tstatic void registerSerde(String type, ComplexMetricSerde serde); // Register a serde name -> ComplexMetricSerde mapping.\n\tstatic void unregisterSerde(String type); // Unregister a serde name -> ComplexMetricSerde mapping.\n}"}
{"index": 10993, "repo": "spring-data-redis-3.1.2", "des": "RemoveIndexedData represents a removed index entry from a secondary index for a property path in a given keyspace.", "code": "public class RemoveIndexedData extends Object implements IndexedData {\n\tString getIndexName(); // Get the String representation of the index name.\n\tString getKeyspace(); // Get the associated keyspace the index resides in.\n}"}
{"index": 8813, "repo": "graal-sdk-1.0.0-rc7", "des": "Unmodifiable memory efficient map data structure.", "code": "Interface UnmodifiableEconomicMap<K,V> {\n\tboolean containsKey(K key); // Returns true if this map contains a mapping for key.\n\tV get(K key); // Returns the value to which key is mapped, or null if this map contains no mapping for key.\n\tdefault V get(K key, V defaultValue); // Returns the value to which key is mapped, or defaultValue if this map contains no mapping for key.\n\tUnmodifiableMapCursor<K,V> getEntries(); // Returns a UnmodifiableMapCursor view of the mappings contained in this map.\n\tIterable<K> getKeys(); // Returns a Iterable view of the keys contained in this map.\n\tIterable<V> getValues(); // Returns a Iterable view of the values contained in this map.\n\tboolean isEmpty(); // Returns true if this map contains no key-value mappings.\n\tint size(); // Returns the number of key-value mappings in this map.\n}"}
{"index": 9259, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Enumeration of the modes the JavaSandboxLinuxContainerRuntime can use.", "code": "Enum JavaSandboxLinuxContainerRuntime.SandboxMode {\n\tstatic JavaSandboxLinuxContainerRuntime.SandboxMode get(String mode);\n\tstatic JavaSandboxLinuxContainerRuntime.SandboxMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic JavaSandboxLinuxContainerRuntime.SandboxMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6195, "repo": "jackson-databind-2.15.2", "des": "Base implementation for values of ReferenceType.", "code": "Class ReferenceTypeSerializer<T> {\n\tprotected abstract Object _getReferenced(T value);\n\tprotected abstract Object _getReferencedIfPresent(T value);\n\tprotected abstract boolean _isValuePresent(T value); // Method called to see if there is a value present or not.\n\tprotected boolean _useStatic(SerializerProvider provider, BeanProperty property, JavaType referredType);\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tJsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property); // Method called to see if a different (or differently configured) serializer is needed to serialize values of specified property.\n\tJavaType getReferredType();\n\tboolean isEmpty(SerializerProvider provider, T value); // Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values).\n\tboolean isUnwrappingSerializer(); // Accessor for checking whether this serializer is an \"unwrapping\" serializer; this is necessary to know since it may also require caller to suppress writing of the leading property name.\n\tvoid serialize(T ref, JsonGenerator g, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(T ref, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer); // Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.\n\tJsonSerializer<T> unwrappingSerializer(NameTransformer transformer); // Method that will return serializer instance that produces \"unwrapped\" serialization, if applicable for type being serialized (which is the case for some serializers that produce JSON Objects as output).\n\tabstract ReferenceTypeSerializer<T> withContentInclusion(Object suppressableValue, boolean suppressNulls); // Mutant factory method called to create a differently constructed instance, specifically with different exclusion rules for contained value.\n\tprotected abstract ReferenceTypeSerializer<T> withResolved(BeanProperty prop, TypeSerializer vts, JsonSerializer<?> valueSer, NameTransformer unwrapper); // Mutant factory method called when changes are needed; should construct newly configured instance with new values as indicated.\n}"}
{"index": 17672, "repo": "spring-web-6.0.11", "des": "A builder for creating \"Cache-Control\" HTTP response headers.", "code": "public class CacheControl extends Object {\n\tCacheControl cachePrivate(); // Add a \"private\" directive.\n\tCacheControl cachePublic(); // Add a \"public\" directive.\n\tstatic CacheControl empty(); // Return an empty directive.\n\tString getHeaderValue(); // Return the \"Cache-Control\" header value, if any.\n\tCacheControl immutable(); // Add an \"immutable\" directive.\n\tstatic CacheControl maxAge(long maxAge, TimeUnit unit); // Add a \"max-age=\" directive.\n\tstatic CacheControl maxAge(Duration maxAge); // Add a \"max-age=\" directive.\n\tCacheControl mustRevalidate(); // Add a \"must-revalidate\" directive.\n\tstatic CacheControl noCache(); // Add a \"no-cache\" directive.\n\tstatic CacheControl noStore(); // Add a \"no-store\" directive.\n\tCacheControl noTransform(); // Add a \"no-transform\" directive.\n\tCacheControl proxyRevalidate(); // Add a \"proxy-revalidate\" directive.\n\tCacheControl sMaxAge(long sMaxAge, TimeUnit unit); // Add an \"s-maxage\" directive.\n\tCacheControl sMaxAge(Duration sMaxAge); // Add an \"s-maxage\" directive.\n\tCacheControl staleIfError(long staleIfError, TimeUnit unit); // Add a \"stale-if-error\" directive.\n\tCacheControl staleIfError(Duration staleIfError); // Add a \"stale-if-error\" directive.\n\tCacheControl staleWhileRevalidate(long staleWhileRevalidate, TimeUnit unit); // Add a \"stale-while-revalidate\" directive.\n\tCacheControl staleWhileRevalidate(Duration staleWhileRevalidate); // Add a \"stale-while-revalidate\" directive.\n}"}
{"index": 1026, "repo": "ignite-core-2.15.0", "des": "Base class for all communication messages.", "code": "Interface Message {\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 9345, "repo": "hadoop-yarn-api-3.3.6", "des": "The response sent by the ResourceManager to a client requesting a node attributes in cluster.", "code": "Class GetClusterNodeAttributesResponse {\n\tabstract Set<NodeAttributeInfo> getNodeAttributes(); // Get node attributes from the response.\n\tstatic GetClusterNodeAttributesResponse newInstance(Set<NodeAttributeInfo> attributes); // Create instance of GetClusterNodeAttributesResponse.\n\tabstract void setNodeAttributes(Set<NodeAttributeInfo> attributes); // Set node attributes to the response.\n}"}
{"index": 13836, "repo": "spring-webflux-6.0.11", "des": "Abstract base class for filename suffix based VersionStrategy implementations, e.g.", "code": "public abstract class AbstractFileNameVersionStrategy extends Object implements VersionStrategy {\n\tString addVersion(String requestPath, String version); // Add a version to the given request path.\n\tString extractVersion(String requestPath); // Extract the resource version from the request path.\n\tString removeVersion(String requestPath, String version); // Remove the version from the request path.\n}"}
{"index": 1436, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a Polyline FDF annotation.", "code": "Class FDFAnnotationPolyline {\n\tString getEndPointEndingStyle(); // This will retrieve the line ending style for the end point, possible values shown in the LE_ constants section.\n\tColor getInteriorColor(); // This will retrieve the interior color of the line endings defined in the LE entry.\n\tString getStartPointEndingStyle(); // This will retrieve the line ending style for the start point, possible values shown in the LE_ constants section.\n\tfloat[] getVertices(); // This will get the coordinates of the the vertices.\n\tvoid setEndPointEndingStyle(String style); // This will set the line ending style for the end point, see the LE_ constants for the possible values.\n\tvoid setInteriorColor(Color color); // This will set interior color of the line endings defined in the LE entry.\n\tvoid setStartPointEndingStyle(String style); // This will set the line ending style for the start point, see the LE_ constants for the possible values.\n\tvoid setVertices(float[] vertices); // This will set the coordinates of the the vertices.\n}"}
{"index": 8971, "repo": "hbase-server-3.0.0-alpha-4", "des": "A RegionSplitRestriction implementation that groups rows by a prefix of the row-key.", "code": "Class KeyPrefixRegionSplitRestriction {\n\tbyte[] getRestrictedSplitPoint(byte[] splitPoint); // Returns a restricted split point.\n\tvoid initialize(TableDescriptor tableDescriptor, org.apache.hadoop.conf.Configuration conf); // Initialize the RegionSplitRestriction instance\n}"}
{"index": 7053, "repo": "calcite-core-1.34.0", "des": "Registry of Enum classes that can be serialized to JSON.", "code": "Class RelEnumTypes {\n\tstatic String fromEnum(Enum enumValue); // Converts an enum into its name.\n\tstatic @Nullable Object fromEnum(@Nullable Object value); // Converts a literal into a value that can be serialized to JSON.\n}"}
{"index": 2783, "repo": "tika-parsers-1.28.5", "des": "Enumeration for types of cTAKES (UIMA) CAS serializer supported by cTAKES.", "code": "Enum CTAKESSerializer {\n\tString getClassName();\n\tstatic CTAKESSerializer valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CTAKESSerializer[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3148, "repo": "solr-dataimporthandler-8.11.2", "des": "An implementation of EntityProcessor which fetches values from a separate Solr implementation using the SolrJ client library.", "code": "Class SolrEntityProcessor {\n\tprotected void buildIterator(); // The following method changes the rowIterator mutable field.\n\tvoid destroy(); // Invoked for each entity at the very end of the import to do any needed cleanup tasks.\n\tprotected void firstInit(Context context); // first time init call.\n\tprotected org.apache.http.client.HttpClient getHttpClient(); // Factory method that returns a HttpClient instance used for interfacing with a source Solr service.\n\tprotected void nextPage();\n\tMap<String,Object> nextRow(); // For a simple implementation, this is the only method that the sub-class should implement.\n}"}
{"index": 7155, "repo": "calcite-core-1.34.0", "des": "Table function that returns completion hints for a given SQL statement.", "code": "Class SqlAdvisorGetHintsFunction {\n\tstatic org.apache.calcite.linq4j.Enumerable<SqlAdvisorHint> getCompletionHints(SqlAdvisor advisor, String sql, int pos); // Returns completion hints for a given SQL statement.\n\tType getElementType(List<? extends Object> arguments); // Returns the row type of the table yielded by this function when applied to given arguments.\n\tCallImplementor getImplementor(); // Returns implementor that translates the function to linq4j expression.\n\tList<FunctionParameter> getParameters(); // Returns the parameters of this function.\n\tRelDataType getRowType(RelDataTypeFactory typeFactory, List<? extends Object> arguments); // Returns the record type of the table yielded by this function when applied to given arguments.\n}"}
{"index": 14794, "repo": "spring-data-commons-3.1.2", "des": "Exception being thrown when creating PropertyPath instances.", "code": "public class PropertyReferenceException extends RuntimeException {\n\tPropertyPath getBaseProperty(); // Returns the PropertyPath which could be resolved so far.\n\tString getMessage();\n\tString getPropertyName(); // Returns the name of the property not found.\n\tTypeInformation<?> getType(); // Returns the type the property could not be found on.\n\tboolean hasDeeperResolutionDepthThan(PropertyReferenceException exception); // Returns whether the given PropertyReferenceException has a deeper resolution depth (i.e. a longer path of already resolved properties) than the current exception.\n}"}
{"index": 15182, "repo": "spring-boot-3.1.1", "des": "Abstract base class for most FailureAnalyzer implementations.", "code": "public abstract class AbstractFailureAnalyzer<T extends Throwable> extends Object implements FailureAnalyzer {\n\tFailureAnalysis analyze(Throwable failure); // Returns an analysis of the given failure, or null if no analysis was possible.\n\tprotected abstract FailureAnalysis analyze(Throwable rootFailure, T cause); // Returns an analysis of the given rootFailure, or null if no analysis was possible.\n\tprotected final <E extends Throwable>E findCause(Throwable failure, Class<E> type);\n\tprotected Class<? extends T> getCauseType(); // Return the cause type being handled by the analyzer.\n}"}
{"index": 3230, "repo": "hbase-common-3.0.0-alpha-4", "des": "Extension to Cell with server side required functions.", "code": "Interface ExtendedCell {\n\tdefault ExtendedCell deepClone(); // Does a deep copy of the contents to a new memory area and returns it as a new cell.\n\tdefault int getChunkId(); // Extracts the id of the backing bytebuffer of this cell if it was obtained from fixed sized chunks as in case of MemstoreLAB\n\tlong getSequenceId(); // A region-specific unique monotonically increasing sequence ID given to each Cell.\n\tdefault int getSerializedSize(); // Returns Serialized size (defaults to include tag length).\n\tdefault int getSerializedSize(boolean withTags); // KeyValue format <4 bytes keylength> <4 bytes valuelength> <2 bytes rowlength> <row> <1 byte columnfamilylength> <columnfamily> <columnqualifier> <8 bytes timestamp> <1 byte keytype> <value> <2 bytes tagslength> <tags>\n\tbyte[] getTagsArray(); // Contiguous raw bytes representing tags that may start at any index in the containing array.\n\tint getTagsLength(); // HBase internally uses 2 bytes to store tags length in Cell.\n\tint getTagsOffset(); // Returns the first offset where the tags start in the Cell\n\tbyte getTypeByte(); // Returns The byte representation of the KeyValue.TYPE of this cell: one of Put, Delete, etc\n\tvoid setSequenceId(long seqId); // Sets with the given seqId.\n\tvoid setTimestamp(byte[] ts); // Sets with the given timestamp.\n\tvoid setTimestamp(long ts); // Sets with the given timestamp.\n\tdefault void write(ByteBuffer buf, int offset); // Write this Cell into the given buf's offset in a KeyValue format.\n\tdefault int write(OutputStream out, boolean withTags); // Write this cell to an OutputStream in a KeyValue format.\n}"}
{"index": 1825, "repo": "kafka-clients-3.5.0", "des": "We are converting the byte array to String before deserializing to UUID.", "code": "Class UUIDDeserializer {\n\tvoid configure(Map<String,?> configs, boolean isKey); // Configure this class.\n\tUUID deserialize(String topic, byte[] data); // Deserialize a record value from a byte array into a value or object.\n}"}
{"index": 7890, "repo": "nifi-framework-core-api-1.22.0", "des": "A ReportingTaskProvider is responsible for providing management of, and access to, Reporting Tasks.", "code": "Interface ReportingTaskProvider {\n\tReportingTaskNode createReportingTask(String type, String id, BundleCoordinate bundleCoordinate, boolean firstTimeAdded); // Creates a new instance of a reporting task\n\tvoid disableReportingTask(ReportingTaskNode reportingTask); // Disables the ability to schedul the reporting task to run\n\tvoid enableReportingTask(ReportingTaskNode reportingTask); // Enables the reporting task to be scheduled to run\n\tSet<ReportingTaskNode> getAllReportingTasks();\n\tExtensionManager getExtensionManager();\n\tReportingTaskNode getReportingTaskNode(String identifier);\n\tvoid removeReportingTask(ReportingTaskNode reportingTask); // Removes the given reporting task from the flow\n\tvoid startReportingTask(ReportingTaskNode reportingTask); // Begins scheduling the reporting task to run and invokes appropriate lifecycle methods\n\tvoid stopReportingTask(ReportingTaskNode reportingTask); // Stops scheduling the reporting task to run and invokes appropriate lifecycle methods\n}"}
{"index": 7182, "repo": "calcite-core-1.34.0", "des": "Parse tree for CREATE FOREIGN SCHEMA statement.", "code": "Class SqlCreateForeignSchema {\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tList<Pair<SqlIdentifier,SqlNode>> options(); // Returns options as a list of (name, value) pairs.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n}"}
{"index": 6486, "repo": "exoplayer-core-2.9.6", "des": "A MediaSourceEventListener allowing selective overrides.", "code": "Class DefaultMediaSourceEventListener {\n\tvoid onDownstreamFormatChanged(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId, MediaSourceEventListener.MediaLoadData mediaLoadData); // Called when a downstream format change occurs (i.e.\n\tvoid onLoadCanceled(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData); // Called when a load is canceled.\n\tvoid onLoadCompleted(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData); // Called when a load ends.\n\tvoid onLoadError(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData, java.io.IOException error, boolean wasCanceled); // Called when a load error occurs.\n\tvoid onLoadStarted(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId, MediaSourceEventListener.LoadEventInfo loadEventInfo, MediaSourceEventListener.MediaLoadData mediaLoadData); // Called when a load begins.\n\tvoid onMediaPeriodCreated(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId); // Called when a media period is created by the media source.\n\tvoid onMediaPeriodReleased(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId); // Called when a media period is released by the media source.\n\tvoid onReadingStarted(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId); // Called when a media period is first being read from.\n\tvoid onUpstreamDiscarded(int windowIndex, MediaSource.MediaPeriodId mediaPeriodId, MediaSourceEventListener.MediaLoadData mediaLoadData); // Called when data is removed from the back of a media buffer, typically so that it can be re-buffered in a different format.\n}"}
{"index": 9315, "repo": "hadoop-yarn-api-3.3.6", "des": "An Interface that can retrieve local directories to read from or write to.", "code": "Interface AuxiliaryLocalPathHandler {\n\tIterable<org.apache.hadoop.fs.Path> getAllLocalPathsForRead(String path); // Get all paths from the local FS for reading for a given Auxiliary Service.\n\torg.apache.hadoop.fs.Path getLocalPathForRead(String path); // Get a path from the local FS for reading for a given Auxiliary Service.\n\torg.apache.hadoop.fs.Path getLocalPathForWrite(String path); // Get a path from the local FS for writing for a given Auxiliary Service.\n\torg.apache.hadoop.fs.Path getLocalPathForWrite(String path, long size); // Get a path from the local FS for writing a file of an estimated size for a given Auxiliary Service.\n}"}
{"index": 10443, "repo": "groovy-all-4.0.13", "des": "A common base class of AST helper methods which can be shared across the classic and new parsers", "code": "public class ASTHelper extends Object {\n\tprotected void addImport(ClassNode type, String name, String aliasName);\n\tprotected void addImport(ClassNode type, String name, String aliasName, List<AnnotationNode> annotations);\n\tprotected void addStarImport(String importPackage);\n\tprotected void addStarImport(String importPackage, List<AnnotationNode> annotations);\n\tprotected void addStaticImport(ClassNode type, String name, String alias);\n\tprotected void addStaticImport(ClassNode type, String name, String alias, List<AnnotationNode> annotations);\n\tprotected void addStaticStarImport(ClassNode type, String importClass);\n\tprotected void addStaticStarImport(ClassNode type, String importClass, List<AnnotationNode> annotations);\n\tprotected String dot(String base); // A synonym for dot( base, \"\" ).\n\tstatic String dot(String base, String name);\n\tClassLoader getClassLoader(); // Returns our class loader (as supplied on construction).\n\tSourceUnit getController();\n\tString getPackageName();\n\tprotected void makeModule();\n\tvoid setClassLoader(ClassLoader classLoader);\n\tvoid setController(SourceUnit controller);\n\tPackageNode setPackage(String packageName, List<AnnotationNode> annotations);\n\tvoid setPackageName(String packageName);\n}"}
{"index": 11008, "repo": "spring-data-redis-3.1.2", "des": "Value object representing a Stream Id with its offset.", "code": "public final class StreamOffset<K> extends Object {\n\tstatic <K> StreamOffset<K> create(K stream, ReadOffset readOffset); // Create a StreamOffset given key and ReadOffset.\n\tboolean equals(Object o);\n\tstatic <K> StreamOffset<K> from(Record<K,?> reference); // Create a StreamOffset from the given record id as reference to create the ReadOffset.from(String).\n\tstatic <K> StreamOffset<K> fromStart(K stream); // Create a StreamOffset given stream starting at ReadOffset#from(\"0-0\").\n\tK getKey();\n\tReadOffset getOffset();\n\tstatic <K> StreamOffset<K> latest(K stream); // Create a StreamOffset given key starting at ReadOffset.latest().\n}"}
{"index": 6306, "repo": "commons-codec-1.16.0", "des": "Codec for the Quoted-Printable section of RFC 1521.", "code": "Class QuotedPrintableCodec {\n\tbyte[] decode(byte[] bytes); // Decodes an array of quoted-printable characters into an array of original bytes.\n\tObject decode(Object obj); // Decodes a quoted-printable object into its original form.\n\tString decode(String sourceStr); // Decodes a quoted-printable string into its original form using the default string Charset.\n\tString decode(String sourceStr, Charset sourceCharset); // Decodes a quoted-printable string into its original form using the specified string Charset.\n\tString decode(String sourceStr, String sourceCharset); // Decodes a quoted-printable string into its original form using the specified string Charset.\n\tstatic byte[] decodeQuotedPrintable(byte[] bytes); // Decodes an array quoted-printable characters into an array of original bytes.\n\tbyte[] encode(byte[] bytes); // Encodes an array of bytes into an array of quoted-printable 7-bit characters.\n\tObject encode(Object obj); // Encodes an object into its quoted-printable safe form.\n\tString encode(String sourceStr); // Encodes a string into its quoted-printable form using the default string Charset.\n\tString encode(String sourceStr, Charset sourceCharset); // Encodes a string into its quoted-printable form using the specified Charset.\n\tString encode(String sourceStr, String sourceCharset); // Encodes a string into its quoted-printable form using the specified Charset.\n\tstatic byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes); // Encodes an array of bytes into an array of quoted-printable 7-bit characters.\n\tstatic byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes, boolean strict); // Encodes an array of bytes into an array of quoted-printable 7-bit characters.\n\tCharset getCharset(); // Gets the default Charset name used for string decoding and encoding.\n\tString getDefaultCharset(); // Gets the default Charset name used for string decoding and encoding.\n}"}
{"index": 15634, "repo": "spring-security-core-6.1.2", "des": "Allows getting and setting the Spring SecurityContext into a Context.", "code": "public final class ReactiveSecurityContextHolder extends Object {\n\tstatic Function<reactor.util.context.Context,reactor.util.context.Context> clearContext(); // Clears the Mono<SecurityContext> from Reactor Context\n\tstatic reactor.core.publisher.Mono<SecurityContext> getContext(); // Gets the Mono<SecurityContext> from Reactor Context\n\tstatic reactor.util.context.Context withAuthentication(Authentication authentication); // A shortcut for withSecurityContext(Mono)\n\tstatic reactor.util.context.Context withSecurityContext(reactor.core.publisher.Mono<? extends SecurityContext> securityContext); // Creates a Reactor Context that contains the Mono<SecurityContext> that can be merged into another Context\n}"}
{"index": 16681, "repo": "spring-beans-6.0.11", "des": "PropertyComparator performs a comparison of two beans, evaluating the specified bean property via a BeanWrapper.", "code": "public class PropertyComparator<T> extends Object implements Comparator<T> {\n\tint compare(T o1, T o2);\n\tfinal SortDefinition getSortDefinition(); // Return the SortDefinition that this comparator uses.\n\tstatic void sort(Object[] source, SortDefinition sortDefinition); // Sort the given source according to the given sort definition.\n\tstatic void sort(List<?> source, SortDefinition sortDefinition); // Sort the given List according to the given sort definition.\n}"}
{"index": 7009, "repo": "calcite-core-1.34.0", "des": "Path from a root schema to a particular object (schema, table, function).", "code": "Interface Path {\n\tList<String> names(); // Returns the names of this path, not including the name of the root.\n\tPath parent(); // Returns the parent path, or null if the path is empty.\n\tList<Schema> schemas(); // Returns the schemas of this path.\n}"}
{"index": 18719, "repo": "opennlp-tools-2.2.0", "des": "An ObjectStream implementation that works on a Collection of CollectionObjectStream as source for elements.", "code": "Class CollectionObjectStream<E> {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tE read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 18121, "repo": "spring-ws-core-4.0.5", "des": "Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.", "code": "public class XmlRootElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor {\n\tprotected void handleReturnValueInternal(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue);\n\tObject resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tprotected boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n}"}
{"index": 15240, "repo": "spring-boot-3.1.1", "des": "ConfigDataLocationResolver for config tree locations.", "code": "public class ConfigTreeConfigDataLocationResolver extends Object implements ConfigDataLocationResolver<ConfigTreeConfigDataResource> {\n\tboolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location); // Returns if the specified location address can be resolved by this resolver.\n\tList<ConfigTreeConfigDataResource> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location); // Resolve a ConfigDataLocation into one or more ConfigDataResource instances.\n}"}
{"index": 10719, "repo": "spring-tx-6.0.11", "des": "AOP Alliance MethodInterceptor that provides persistence exception translation based on a given PersistenceExceptionTranslator.", "code": "public class PersistenceExceptionTranslationInterceptor extends Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected PersistenceExceptionTranslator detectPersistenceExceptionTranslators(org.springframework.beans.factory.ListableBeanFactory bf); // Detect all PersistenceExceptionTranslators in the given BeanFactory.\n\tObject invoke(org.aopalliance.intercept.MethodInvocation mi);\n\tvoid setAlwaysTranslate(boolean alwaysTranslate); // Specify whether to always translate the exception (\"true\"), or whether throw the raw exception when declared, i.e.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setPersistenceExceptionTranslator(PersistenceExceptionTranslator pet); // Specify the PersistenceExceptionTranslator to use.\n}"}
{"index": 12145, "repo": "jena-core-4.9.0", "des": "An instance of this class has ranges captured in matching.", "code": "public class Match extends Object implements Cloneable {\n\tObject clone();\n\tint getBeginning(int index); // Return a start position in the target text matched to specified regular expression group.\n\tString getCapturedText(int index); // Return an substring of the target text matched to specified regular expression group.\n\tint getEnd(int index); // Return an end position in the target text matched to specified regular expression group.\n\tint getNumberOfGroups(); // Return the number of regular expression groups.\n}"}
{"index": 11578, "repo": "spring-security-oauth2-client-6.1.2", "des": "Implementations of this interface are responsible for the persistence of Authorized Client(s) between requests.", "code": "public interface OAuth2AuthorizedClientRepository {\n\t<T extends OAuth2AuthorizedClient>T loadAuthorizedClient(String clientRegistrationId, org.springframework.security.core.Authentication principal, jakarta.servlet.http.HttpServletRequest request); // Returns the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User Authentication (Resource Owner) or null if not available.\n\tvoid removeAuthorizedClient(String clientRegistrationId, org.springframework.security.core.Authentication principal, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Removes the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User Authentication (Resource Owner).\n\tvoid saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, org.springframework.security.core.Authentication principal, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Saves the OAuth2AuthorizedClient associating it to the provided End-User Authentication (Resource Owner).\n}"}
{"index": 2696, "repo": "mahout-core-14.1", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface ShortComparator {\n\tint compare(short o1, short o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 29, "repo": "connect-api-3.5.0", "des": "A date representing a calendar day with no time of day or timezone.", "code": "Class Date {\n\tstatic SchemaBuilder builder(); // Returns a SchemaBuilder for a Date.\n\tstatic int fromLogical(Schema schema, Date value); // Convert a value from its logical format (Date) to its encoded format (int).\n\tstatic Date toLogical(Schema schema, int value); // Convert a value from its encoded format (int) to its logical format (Date).\n}"}
{"index": 9278, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "This class is a ContainerRuntime implementation that uses the native container-executor binary via a PrivilegedOperationExecutor instance to launch processes inside OCI-compliant containers.", "code": "Class OCIContainerRuntime {\n\tprotected boolean allowHostPidNamespace(Container container); // Return whether the YARN container is allowed to run using the host's PID namespace for the OCI-compliant container.\n\tprotected boolean allowPrivilegedContainerExecution(Container container); // Return whether the YARN container is allowed to run in a privileged OCI-compliant container.\n\tstatic String formatOciEnvKey(String runtimeTypeUpper, String envKeySuffix);\n\tMap<String,org.apache.hadoop.yarn.api.CsiAdaptorProtocol> getCsiClients();\n\tprotected String[] getGroupIdInfo(String userName);\n\tprotected String getUserIdInfo(String userName);\n\tvoid initialize(org.apache.hadoop.conf.Configuration conf, Context nmContext); // Initialize the runtime.\n\tprotected void initiateCsiClients(org.apache.hadoop.conf.Configuration config); // Initiate CSI clients to talk to the CSI adaptors on this node and cache the clients for easier fetch.\n\tprotected boolean isContainerRequestedAsPrivileged(Container container); // This function only returns whether a privileged container was requested, not whether the container was or will be launched as privileged.\n\tstatic boolean isOCICompliantContainerRequested(org.apache.hadoop.conf.Configuration daemonConf, Map<String,String> env);\n\tprotected String mountReadOnlyPath(String mount, Map<org.apache.hadoop.fs.Path,List<String>> localizedResources);\n\tvoid prepareContainer(ContainerRuntimeContext ctx); // Prepare a container to be ready for launch.\n\tprotected void validateContainerNetworkType(String network);\n\tprotected void validateContainerRuntimeType(String runtime);\n\tprotected static void validateHostname(String hostname);\n}"}
{"index": 5308, "repo": "druid-processing-26.0.0", "des": "This is a clone of InputStreamResponseHandler except that it retains HTTP status/response object in the response holder result.", "code": "Class InputStreamFullResponseHandler {\n\tClientResponse<InputStreamFullResponseHolder> done(ClientResponse<InputStreamFullResponseHolder> clientResponse); // Called after the final handleResponse() or handleChunk() call, signifying that no more data will arrive.\n\tvoid exceptionCaught(ClientResponse<InputStreamFullResponseHolder> clientResponse, Throwable e);\n\tClientResponse<InputStreamFullResponseHolder> handleChunk(ClientResponse<InputStreamFullResponseHolder> clientResponse, org.jboss.netty.handler.codec.http.HttpChunk chunk, long chunkNum); // Called for chunked responses, indicating another HttpChunk has arrived.\n\tClientResponse<InputStreamFullResponseHolder> handleResponse(org.jboss.netty.handler.codec.http.HttpResponse response, HttpResponseHandler.TrafficCop trafficCop); // Handles the initial HttpResponse object that comes back from Netty.\n}"}
{"index": 4727, "repo": "hadoop-common-3.3.4", "des": "This the base class for Ganglia sink classes using metrics2.", "code": "Class AbstractGangliaSink {\n\tprotected void emitToGangliaHosts(); // Sends Ganglia Metrics to the configured hosts\n\tvoid flush(); // Flush any buffered metrics\n\tprotected org.apache.hadoop.metrics2.sink.ganglia.GangliaConf getGangliaConfForMetric(String metricName); // Lookup GangliaConf from cache.\n\tprotected String getHostName();\n\tvoid init(org.apache.commons.configuration2.SubsetConfiguration conf); // Initialize the plugin\n\tprotected boolean isSupportSparseMetrics();\n\tprotected void xdr_int(int i); // Puts an integer into the buffer as 4 bytes, big-endian.\n\tprotected void xdr_string(String s); // Puts a string into the buffer by first writing the size of the string as an int, followed by the bytes of the string, padded if necessary to a multiple of 4.\n}"}
{"index": 8755, "repo": "hadoop-yarn-common-3.3.6", "des": "Plugin to calculate resource information on the system.", "code": "Class ResourceCalculatorPlugin {\n\tlong getAvailablePhysicalMemorySize(); // Obtain the total size of the available physical memory present in the system.\n\tlong getAvailableVirtualMemorySize(); // Obtain the total size of the available virtual memory present in the system.\n\tstatic ResourceCalculatorPlugin getContainersMonitorPlugin(org.apache.hadoop.conf.Configuration conf); // Create the ResourceCalculatorPlugin for the containers monitor in the Node Manager and configure it.\n\tlong getCpuFrequency(); // Obtain the CPU frequency of on the system.\n\tfloat getCpuUsagePercentage(); // Obtain the CPU usage % of the machine.\n\tlong getCumulativeCpuTime(); // Obtain the cumulative CPU time since the system is on.\n\tlong getNetworkBytesRead(); // Obtain the aggregated number of bytes read over the network.\n\tlong getNetworkBytesWritten(); // Obtain the aggregated number of bytes written to the network.\n\tstatic ResourceCalculatorPlugin getNodeResourceMonitorPlugin(org.apache.hadoop.conf.Configuration conf); // Create the ResourceCalculatorPlugin for the node resource monitor in the Node Manager and configure it.\n\tint getNumCores(); // Obtain total number of physical cores present on the system.\n\tint getNumProcessors(); // Obtain the total number of logical processors present on the system.\n\tfloat getNumVCoresUsed(); // Obtain the number of VCores used.\n\tlong getPhysicalMemorySize(); // Obtain the total size of the physical memory present in the system.\n\tstatic ResourceCalculatorPlugin getResourceCalculatorPlugin(Class<? extends ResourceCalculatorPlugin> clazz, org.apache.hadoop.conf.Configuration conf); // Create the ResourceCalculatorPlugin from the class name and configure it.\n\tlong getStorageBytesRead(); // Obtain the aggregated number of bytes read from disks.\n\tlong getStorageBytesWritten(); // Obtain the aggregated number of bytes written to disks.\n\tlong getVirtualMemorySize(); // Obtain the total size of the virtual memory present in the system.\n}"}
{"index": 135, "repo": "commons-collections4-4.4", "des": "Provides utility methods for Enumeration instances.", "code": "Class EnumerationUtils {\n\tstatic <T> T get(Enumeration<T> e, int index); // Returns the index-th value in the Enumeration, throwing IndexOutOfBoundsException if there is no such element.\n\tstatic <E> List<E> toList(Enumeration<? extends E> enumeration); // Creates a list based on an enumeration.\n\tstatic List<String> toList(StringTokenizer stringTokenizer); // Override toList(Enumeration) for StringTokenizer as it implements Enumeration<Object> for the sake of backward compatibility.\n}"}
{"index": 15949, "repo": "spring-rabbit-3.0.6", "des": "A RabbitListenerEndpoint simply providing the MessageListener to invoke to process an incoming message for this endpoint.", "code": "public class SimpleRabbitListenerEndpoint extends AbstractRabbitListenerEndpoint {\n\tprotected org.springframework.amqp.core.MessageListener createMessageListener(MessageListenerContainer container); // Create a MessageListener that is able to serve this endpoint for the specified container.\n\tprotected StringBuilder getEndpointDescription();\n\torg.springframework.amqp.core.MessageListener getMessageListener();\n\tvoid setMessageListener(org.springframework.amqp.core.MessageListener messageListener); // Set the MessageListener to invoke when a message matching the endpoint is received.\n}"}
{"index": 3437, "repo": "preflight-3.0.0-beta1", "des": "Validation class for the LineAnnotation.", "code": "Class LineAnnotationValidator {\n\tprotected boolean checkIColors(); // Return true if the IC field is present in the Annotation dictionary and if the RGB profile is used in the DestOutputProfile of the OutputIntent dictionary.\n\tprotected boolean checkSpecificMandatoryFields(); // Override this method to check the presence of specific fields\n\tboolean validate(); // In addition of the AnnotationValidator.validate() method, this method executes the checkIColors method.\n}"}
{"index": 784, "repo": "ignite-core-2.15.0", "des": "Minimal list API to work with primitive ints.", "code": "Class GridIntList {\n\tvoid add(int x); // Add element to this array.\n\tvoid addAll(GridIntList l);\n\tstatic GridIntList addAll(@Nullable GridIntList to, GridIntList from);\n\tint[] array();\n\tstatic GridIntList asList(int... vals);\n\tvoid clear(); // Clears the list.\n\tboolean contains(int l);\n\tboolean containsAll(GridIntList l);\n\tGridIntList copy();\n\tGridIntList copyWithout(GridIntList l); // Returns (possibly reordered) copy of this list, excluding all elements of given list.\n\tshort directType(); // Gets message type.\n\tboolean distinct();\n\tboolean equals(Object o);\n\tbyte fieldsCount(); // Gets fields count.\n\tint get(int i);\n\tboolean isEmpty();\n\tGridIntIterator iterator();\n\tint last(); // Gets the last element.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tvoid pop(int cnt); // Removes given number of elements from the end.\n\tvoid readExternal(ObjectInput in);\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tstatic @Nullable GridIntList readFrom(DataInput in);\n\tint remove(); // Removes and returns the last element of the list.\n\tint removeIndex(int i); // Removes element by given index.\n\tint removeValue(int startIdx, int val); // Removes value from this list.\n\tint replaceValue(int startIdx, int oldVal, int newVal); // Removes value from this list.\n\tint size();\n\tGridIntList sort(); // Sorts this list.\n\tvoid truncate(int size, boolean last);\n\tvoid writeExternal(ObjectOutput out);\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n\tstatic void writeTo(DataOutput out, @Nullable GridIntList list);\n}"}
{"index": 643, "repo": "ignite-core-2.15.0", "des": "Simple adapter for DeploymentResource interface.", "code": "Class DeploymentResourceAdapter {\n\tboolean equals(Object obj);\n\tClassLoader getClassLoader(); // Gets resource class loader.\n\tString getName(); // Gets resource name, either class name or alias name, such as alias specified by ComputeTaskName annotation.\n\tClass<?> getResourceClass(); // Gets resource class.\n}"}
{"index": 4668, "repo": "commons-vfs2-2.9.0", "des": "This interface is used to manage the lifecycle of all VFS components.", "code": "Interface VfsComponent {\n\tvoid close(); // Closes the component.\n\tvoid init(); // Initializes the component.\n\tvoid setContext(VfsComponentContext context); // Sets the context for the component.\n\tvoid setLogger(org.apache.commons.logging.Log logger); // Sets the Logger to use for the component.\n}"}
{"index": 40, "repo": "connect-api-3.5.0", "des": "Context passed to SinkTasks, allowing them to access utilities in the Kafka Connect runtime.", "code": "Interface SinkTaskContext {\n\tSet<org.apache.kafka.common.TopicPartition> assignment(); // Get the current set of assigned TopicPartitions for this task.\n\tMap<String,String> configs(); // Get the Task configuration.\n\tdefault ErrantRecordReporter errantRecordReporter(); // Get the reporter to which the sink task can report problematic or failed records passed to the SinkTask.put(java.util.Collection) method.\n\tvoid offset(Map<org.apache.kafka.common.TopicPartition,Long> offsets); // Reset the consumer offsets for the given topic partitions.\n\tvoid offset(org.apache.kafka.common.TopicPartition tp, long offset); // Reset the consumer offsets for the given topic partition.\n\tvoid pause(org.apache.kafka.common.TopicPartition... partitions); // Pause consumption of messages from the specified TopicPartitions.\n\tvoid requestCommit(); // Request an offset commit.\n\tvoid resume(org.apache.kafka.common.TopicPartition... partitions); // Resume consumption of messages from previously paused TopicPartitions.\n\tvoid timeout(long timeoutMs); // Set the timeout in milliseconds.\n}"}
{"index": 3158, "repo": "commons-jexl3-3.3", "des": "Manages variables which can be referenced in a JEXL expression.", "code": "Interface JexlContext {\n\tObject get(String name); // Gets the value of a variable.\n\tboolean has(String name); // Checks whether a variable is defined in this context.\n\tvoid set(String name, Object value); // Sets the value of a variable.\n}"}
{"index": 11597, "repo": "spring-security-oauth2-client-6.1.2", "des": "Implementations of this interface are responsible for the management of Authorized Client(s), which provide the purpose of associating an Access Token credential to a Client and Resource Owner, who is the Principal that originally granted the authorization.", "code": "public interface ReactiveOAuth2AuthorizedClientService {\n\t<T extends OAuth2AuthorizedClient>reactor.core.publisher.Mono<T> loadAuthorizedClient(String clientRegistrationId, String principalName); // Returns the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name or null if not available.\n\treactor.core.publisher.Mono<Void> removeAuthorizedClient(String clientRegistrationId, String principalName); // Removes the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User's Principal name.\n\treactor.core.publisher.Mono<Void> saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, org.springframework.security.core.Authentication principal); // Saves the OAuth2AuthorizedClient associating it to the provided End-User Authentication (Resource Owner).\n}"}
{"index": 6090, "repo": "jackson-databind-2.15.2", "des": "Intermediate base class for all databind level processing problems, as distinct from stream-level problems or I/O issues below.", "code": "Class DatabindException {\n\tabstract void prependPath(Object referrer, int index); // Method called to prepend a reference information in front of current path\n\tabstract void prependPath(Object referrer, String fieldName); // Method called to prepend a reference information in front of current path\n}"}
{"index": 9710, "repo": "commons-math3-3.6.1", "des": "Computes the arithmetic mean of a set of values.", "code": "Class Mean {\n\tvoid clear(); // Clears the internal state of the Statistic\n\tMean copy(); // Returns a copy of the statistic with the same internal state.\n\tstatic void copy(Mean source, Mean dest); // Copies source to dest.\n\tdouble evaluate(double[] values, double[] weights); // Returns the weighted arithmetic mean of the entries in the input array.\n\tdouble evaluate(double[] values, double[] weights, int begin, int length); // Returns the weighted arithmetic mean of the entries in the specified portion of the input array, or Double.NaN if the designated subarray is empty.\n\tdouble evaluate(double[] values, int begin, int length); // Returns the arithmetic mean of the entries in the specified portion of the input array, or Double.NaN if the designated subarray is empty.\n\tlong getN(); // Returns the number of values that have been added.\n\tdouble getResult(); // Returns the current value of the Statistic.\n\tvoid increment(double d); // Updates the internal state of the statistic to reflect the addition of the new value.\n}"}
{"index": 3480, "repo": "mahout-mr-0.13.0", "des": "Post processes the output of clustering algorithms and groups them into respective clusters.", "code": "Class ClusterOutputPostProcessorDriver {\n\tstatic void main(String[] args);\n\tstatic void run(org.apache.hadoop.fs.Path input, org.apache.hadoop.fs.Path output, boolean runSequential); // Post processes the output of clustering algorithms and groups them into respective clusters.\n\tint run(String[] args); // CLI to run clustering post processor.\n}"}
{"index": 17034, "repo": "spring-integration-core-6.1.2", "des": "Utility methods for acting on AcknowledgmentCallback headers.", "code": "public final class AckUtils extends Object {\n\tstatic void accept(AcknowledgmentCallback ackCallback); // ACCEPT the associated message if the callback is not null.\n\tstatic void autoAck(AcknowledgmentCallback ackCallback); // ACCEPT an AcknowledgmentCallback if it's not null, supports auto ack and is not already ack'd.\n\tstatic void autoNack(AcknowledgmentCallback ackCallback); // REJECT an AcknowledgmentCallback if it's not null, supports auto ack and is not already ack'd.\n\tstatic void reject(AcknowledgmentCallback ackCallback); // REJECT the associated message if the callback is not null.\n\tstatic void requeue(AcknowledgmentCallback ackCallback); // REQUEUE the associated message if the callback is not null.\n}"}
{"index": 6963, "repo": "calcite-core-1.34.0", "des": "A LogicalTableScan reads all the rows from a RelOptTable.", "code": "Class LogicalTableScan {\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tstatic LogicalTableScan create(RelOptCluster cluster, RelOptTable relOptTable, List<RelHint> hints); // Creates a LogicalTableScan.\n\tRelNode withHints(List<RelHint> hintList); // Returns a new relational expression with the specified hints hintList.\n}"}
{"index": 6159, "repo": "jackson-databind-2.15.2", "des": "This is a simple dummy serializer that will just output literal JSON null value whenever serialization is requested.", "code": "Class NullSerializer {\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tvoid serialize(Object value, JsonGenerator gen, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(Object value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer); // Although this method should rarely get called, for convenience we should override it, and handle it same way as \"natural\" types: by serializing exactly as is, without type decorations.\n}"}
{"index": 10127, "repo": "spring-hateoas-2.1.2", "des": "Representation of HAL-FORMS options attribute.", "code": "public interface HalFormsOptions {\n\tLong getMaxItems(); // Returns the maximum number of items to be selected.\n\tLong getMinItems(); // Returns the minimum number of items to be selected.\n\tString getPromptField(); // The field to look up the prompt from.\n\tObject getSelectedValue();\n\tString getValueField(); // The field to use as the value to be sent.\n\tstatic HalFormsOptions.Inline inline(Collection<? extends Object> values); // Creates a new HalFormsOptions.Inline options representation listing the given collection of values.\n\tstatic <T> HalFormsOptions.Inline inline(T... values); // Creates a new HalFormsOptions.Inline options representation listing the given values.\n\tstatic HalFormsOptions.Remote remote(String href); // Creates a new HalFormsOptions.Remote options representation using the given href.\n\tstatic HalFormsOptions.Remote remote(Link link); // Creates a new HalFormsOptions.Remote options representation using the given Link.\n}"}
{"index": 3516, "repo": "mahout-mr-0.13.0", "des": "Counter to track why a particlar entry was skipped.", "code": "Enum LLRReducer.Skipped {\n\tstatic LLRReducer.Skipped valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic LLRReducer.Skipped[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4666, "repo": "commons-vfs2-2.9.0", "des": "A file provider backed by Java's URL API.", "code": "Class UrlFileProvider {\n\tFileObject findFile(FileObject baseFile, String fileUri, FileSystemOptions fileSystemOptions); // Locates a file object, by absolute URI.\n\tCollection<Capability> getCapabilities(); // Gets the file system capabilities.\n\tFileSystemConfigBuilder getConfigBuilder(); // Returns the FileSystemConfigBuidler.\n}"}
{"index": 9787, "repo": "commons-math3-3.6.1", "des": "Interface defining a visitor for matrix entries.", "code": "Interface RealMatrixPreservingVisitor {\n\tdouble end(); // End visiting a matrix.\n\tvoid start(int rows, int columns, int startRow, int endRow, int startColumn, int endColumn); // Start visiting a matrix.\n\tvoid visit(int row, int column, double value); // Visit one matrix entry.\n}"}
{"index": 10399, "repo": "spring-core-6.0.11", "des": "Simple utility methods for dealing with streams.", "code": "public abstract class StreamUtils extends Object {\n\tstatic void copy(byte[] in, OutputStream out); // Copy the contents of the given byte array to the given OutputStream.\n\tstatic int copy(InputStream in, OutputStream out); // Copy the contents of the given InputStream to the given OutputStream.\n\tstatic void copy(String in, Charset charset, OutputStream out); // Copy the contents of the given String to the given OutputStream.\n\tstatic long copyRange(InputStream in, OutputStream out, long start, long end); // Copy a range of content of the given InputStream to the given OutputStream.\n\tstatic byte[] copyToByteArray(InputStream in); // Copy the contents of the given InputStream into a new byte array.\n\tstatic String copyToString(ByteArrayOutputStream baos, Charset charset); // Copy the contents of the given ByteArrayOutputStream into a String.\n\tstatic String copyToString(InputStream in, Charset charset); // Copy the contents of the given InputStream into a String.\n\tstatic int drain(InputStream in); // Drain the remaining content of the given InputStream.\n\tstatic InputStream emptyInput(); // Deprecated. as of 6.0 in favor of InputStream.nullInputStream()\n\tstatic InputStream nonClosing(InputStream in); // Return a variant of the given InputStream where calling close() has no effect.\n\tstatic OutputStream nonClosing(OutputStream out); // Return a variant of the given OutputStream where calling close() has no effect.\n}"}
{"index": 18499, "repo": "hibernate-core-5.6.15.Final", "des": "Common support for optimizer implementations.", "code": "Class AbstractOptimizer {\n\tint getIncrementSize(); // Retrieves the defined increment size.\n\tjava.lang.Class getReturnClass(); // Getter for property 'returnClass'.\n}"}
{"index": 8672, "repo": "avro-1.11.2", "des": "Identifies the type of a schema compatibility result.", "code": "Enum SchemaCompatibility.SchemaCompatibilityType {\n\tstatic SchemaCompatibility.SchemaCompatibilityType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SchemaCompatibility.SchemaCompatibilityType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1185, "repo": "ignite-core-2.15.0", "des": "Server that receives data from TCP socket, converts it to key-value pairs using StreamTupleExtractor and streams into IgniteDataStreamer instance.", "code": "Class SocketStreamer<T,K,V> {\n\tvoid setAddr(InetAddress addr); // Sets server address.\n\tvoid setConverter(SocketMessageConverter<T> converter); // Sets message converter.\n\tvoid setDelimiter(byte[] delim); // Sets message delimiter.\n\tvoid setDirectMode(boolean directMode); // Sets direct mode flag.\n\tvoid setPort(int port); // Sets port number.\n\tvoid setThreads(int threads); // Sets threadds amount.\n\tvoid start(); // Starts streamer.\n\tvoid stop(); // Stops streamer.\n}"}
{"index": 17037, "repo": "spring-integration-core-6.1.2", "des": "A CorrelationHandlerSpec for an AggregatingMessageHandler.", "code": "public class AggregatorSpec extends CorrelationHandlerSpec<AggregatorSpec,AggregatingMessageHandler> {\n\tAggregatorSpec expireGroupsUponCompletion(boolean expireGroupsUponCompletion);\n\tMap<Object,String> getComponentsToRegister();\n\tAggregatorSpec headersFunction(Function<MessageGroup,Map<String,Object>> headersFunction); // Configure a Function to merge and compute headers for reply based on the completed MessageGroup.\n\tAggregatorSpec outputExpression(String expression); // An expression to determine the output message from the released group.\n\tAggregatorSpec outputProcessor(MessageGroupProcessor outputProcessor); // A processor to determine the output message from the released group.\n\tAggregatorSpec processor(Object target); // Configure the handler with MethodInvokingCorrelationStrategy and MethodInvokingReleaseStrategy using the target object which should have methods annotated appropriately for each function.\n\tAggregatorSpec processor(Object target, String methodName); // Configure the handler with MethodInvokingCorrelationStrategy and MethodInvokingReleaseStrategy using the target object which should have methods annotated appropriately for each function.\n}"}
{"index": 1788, "repo": "kafka-clients-3.5.0", "des": "OAuthBearerLoginCallbackHandler is an AuthenticateCallbackHandler that accepts OAuthBearerTokenCallback and SaslExtensionsCallback callbacks to perform the steps to request a JWT from an OAuth/OIDC provider using the clientcredentials.", "code": "Class OAuthBearerLoginCallbackHandler {\n\tvoid close(); // Closes this instance.\n\tvoid configure(Map<String,?> configs, String saslMechanism, List<AppConfigurationEntry> jaasConfigEntries); // Configures this callback handler for the specified SASL mechanism.\n\tvoid handle(Callback[] callbacks);\n\tvoid init(org.apache.kafka.common.security.oauthbearer.internals.secured.AccessTokenRetriever accessTokenRetriever, org.apache.kafka.common.security.oauthbearer.internals.secured.AccessTokenValidator accessTokenValidator);\n}"}
{"index": 14776, "repo": "spring-data-commons-3.1.2", "des": "IsNewStrategy that invokes Persistable.isNew() on the given object.", "code": "public enum PersistableIsNewStrategy extends Enum<PersistableIsNewStrategy> implements IsNewStrategy {\n\tboolean isNew(Object entity); // Returns whether the given entity is new, i.e. has never been persisted before or not.\n\tstatic PersistableIsNewStrategy valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic PersistableIsNewStrategy[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 5932, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Server Builder utilities to construct various objects.", "code": "Class YarnServerBuilderUtils {\n\tstatic Map<org.apache.hadoop.yarn.api.records.ApplicationId,ByteBuffer> convertFromProtoFormat(Collection<org.apache.hadoop.yarn.proto.YarnServerCommonServiceProtos.SystemCredentialsForAppsProto> systemCredentials); // Convert Collection of SystemCredentialsForAppsProto proto objects to a Map of ApplicationId to ByteBuffer.\n\tstatic List<org.apache.hadoop.yarn.proto.YarnServerCommonServiceProtos.SystemCredentialsForAppsProto> convertToProtoFormat(Map<org.apache.hadoop.yarn.api.records.ApplicationId,ByteBuffer> systemCredentialsForApps); // Convert Map of Application Id to ByteBuffer to Collection of SystemCredentialsForAppsProto proto objects.\n\tstatic NodeHeartbeatResponse newNodeHeartbeatResponse(int responseId, NodeAction action, List<org.apache.hadoop.yarn.api.records.ContainerId> containersToCleanUp, List<org.apache.hadoop.yarn.api.records.ApplicationId> applicationsToCleanUp, MasterKey containerTokenMasterKey, MasterKey nmTokenMasterKey, long nextHeartbeatInterval);\n\tstatic NodeHeartbeatResponse newNodeHeartbeatResponse(NodeAction action, String diagnosticsMessage);\n\tstatic org.apache.hadoop.yarn.proto.YarnServerCommonServiceProtos.SystemCredentialsForAppsProto newSystemCredentialsForAppsProto(org.apache.hadoop.yarn.api.records.ApplicationId applicationId, ByteBuffer credentials); // Build SystemCredentialsForAppsProto objects.\n}"}
{"index": 14147, "repo": "wicket-core-10.0.0-M1", "des": "Locating resources can take a significant amount of time, especially since there are often several CSS, JavaScript and image resources on any given page.", "code": "public class CachingResourceStreamLocator extends Object implements IResourceStreamLocator {\n\tvoid clearCache(); // Clears the resource cache.\n\torg.apache.wicket.util.resource.IResourceStream locate(Class<?> clazz, String path); // Locate a resource, given a path and class.\n\torg.apache.wicket.util.resource.IResourceStream locate(Class<?> scope, String path, String style, String variation, Locale locale, String extension, boolean strict); // Locate a resource by combining the given path, style, variation, locale and extension parameters.\n\tIResourceNameIterator newResourceNameIterator(String path, Locale locale, String style, String variation, String extension, boolean strict); // Markup resources and Properties files both need to iterate over different combinations of locale, style, etc..\n}"}
{"index": 14466, "repo": "spring-security-messaging-6.1.2", "des": "A builder for MessageMatcherDelegatingAuthorizationManager.", "code": "public static final class MessageMatcherDelegatingAuthorizationManager.Builder extends Object {\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint anyMessage(); // Maps any Message to a security expression.\n\torg.springframework.security.authorization.AuthorizationManager<org.springframework.messaging.Message<?>> build();\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint matchers(MessageMatcher<?>... matchers); // Maps a List of MessageMatcher instances to a security expression.\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint nullDestMatcher(); // Maps any Message that has a null SimpMessageHeaderAccessor destination header (i.e.\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint simpDestMatchers(String... patterns); // Maps a List of SimpDestinationMessageMatcher instances without regard to the SimpMessageType.\n\tMessageMatcherDelegatingAuthorizationManager.Builder simpDestPathMatcher(Supplier<org.springframework.util.PathMatcher> pathMatcher); // The PathMatcher to be used with the simpDestMatchers(String...).\n\tMessageMatcherDelegatingAuthorizationManager.Builder simpDestPathMatcher(org.springframework.util.PathMatcher pathMatcher); // The PathMatcher to be used with the simpDestMatchers(String...).\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint simpMessageDestMatchers(String... patterns); // Maps a List of SimpDestinationMessageMatcher instances that match on SimpMessageType.MESSAGE.\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint simpSubscribeDestMatchers(String... patterns); // Maps a List of SimpDestinationMessageMatcher instances that match on SimpMessageType.SUBSCRIBE.\n\tMessageMatcherDelegatingAuthorizationManager.Builder.Constraint simpTypeMatchers(org.springframework.messaging.simp.SimpMessageType... typesToMatch); // Maps a List of SimpDestinationMessageMatcher instances.\n}"}
{"index": 6780, "repo": "calcite-core-1.34.0", "des": "Implementation of Filter in bindable convention.", "code": "Class Bindables.BindableFilter {\n\torg.apache.calcite.linq4j.Enumerable<Object[]> bind(DataContext dataContext); // Executes this statement and returns an enumerable which will yield rows.\n\tBindables.BindableFilter copy(RelTraitSet traitSet, RelNode input, RexNode condition);\n\tstatic Bindables.BindableFilter create(RelNode input, RexNode condition); // Creates a BindableFilter.\n\tClass<Object[]> getElementType(); // Gets the type of the element(s) that are returned in this collection.\n\tNode implement(InterpretableRel.InterpreterImplementor implementor); // Creates an interpreter node to implement this relational expression.\n}"}
{"index": 17147, "repo": "spring-integration-core-6.1.2", "des": "Endpoints implementing this interface can be paused/resumed.", "code": "public interface Pausable extends ManageableLifecycle {\n\tdefault boolean isPaused(); // Check if the endpoint is paused.\n\tvoid pause(); // Pause the endpoint.\n\tvoid resume(); // Resume the endpoint if paused.\n}"}
{"index": 16235, "repo": "spring-data-cassandra-4.1.2", "des": "Builder to remove a single element/multiple elements from a collection associated with a ColumnName.", "code": "public static interface Update.RemoveFromBuilder {\n\tUpdate value(Object value); // Remove all entries matching value from a set, list or map (map key).\n\tUpdate values(Iterable<? extends Object> values); // Remove all entries matching values from a set, list or map (map key).\n\tdefault Update values(Object... values); // Remove all entries matching values from a set, list or map (map key).\n}"}
{"index": 14979, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A ClaimAccessor for the \"claims\" that may be contained in an OAuth2TokenClaimsSet.", "code": "public interface OAuth2TokenClaimAccessor extends org.springframework.security.oauth2.core.ClaimAccessor {\n\tdefault List<String> getAudience(); // Returns the Audience (aud) claim which identifies the recipient(s) that the OAuth 2.0 Token is intended for.\n\tdefault Instant getExpiresAt(); // Returns the Expiration time (exp) claim which identifies the expiration time on or after which the OAuth 2.0 Token MUST NOT be accepted for processing.\n\tdefault String getId(); // Returns the ID (jti) claim which provides a unique identifier for the OAuth 2.0 Token.\n\tdefault Instant getIssuedAt(); // Returns the Issued at (iat) claim which identifies the time at which the OAuth 2.0 Token was issued.\n\tdefault URL getIssuer(); // Returns the Issuer (iss) claim which identifies the principal that issued the OAuth 2.0 Token.\n\tdefault Instant getNotBefore(); // Returns the Not Before (nbf) claim which identifies the time before which the OAuth 2.0 Token MUST NOT be accepted for processing.\n\tdefault String getSubject(); // Returns the Subject (sub) claim which identifies the principal that is the subject of the OAuth 2.0 Token.\n}"}
{"index": 9094, "repo": "hbase-server-3.0.0-alpha-4", "des": "Encapsulates the server-side logic to authenticate a client over SASL.", "code": "Interface SaslServerAuthenticationProvider {\n\tAttemptingUserProvidingSaslServer createServer(org.apache.hadoop.security.token.SecretManager<org.apache.hadoop.security.token.TokenIdentifier> secretManager, Map<String,String> saslProps); // Creates the SaslServer to accept incoming SASL authentication requests.\n\torg.apache.hadoop.security.UserGroupInformation getAuthorizedUgi(String authzId, org.apache.hadoop.security.token.SecretManager<org.apache.hadoop.security.token.TokenIdentifier> secretManager);\n\tdefault void init(org.apache.hadoop.conf.Configuration conf); // Allows implementations to initialize themselves, prior to creating a server.\n\tboolean supportsProtocolAuthentication();\n}"}
{"index": 7676, "repo": "cassandra-all-4.1.2", "des": "LocalSyncTask performs streaming between local(coordinator) node and remote replica.", "code": "Class LocalSyncTask {\n\tvoid abort();\n\tvoid handleStreamEvent(StreamEvent event); // Callback for various streaming events.\n\tboolean isLocal();\n\tvoid onFailure(java.lang.Throwable t);\n\tvoid onSuccess(StreamState result);\n\tprotected void startSync(); // Starts sending/receiving our list of differences to/from the remote endpoint: creates a callback that will be called out of band once the streams complete.\n}"}
{"index": 9490, "repo": "commons-math3-3.6.1", "des": "Base class that contains common code for fitting parametric univariate real functions y = f(pi;x), where x is the independent variable and the pi are the parameters.", "code": "Class AbstractCurveFitter {\n\tdouble[] fit(Collection<WeightedObservedPoint> points); // Fits a curve.\n\tprotected LeastSquaresOptimizer getOptimizer(); // Creates an optimizer set up to fit the appropriate curve.\n\tprotected abstract LeastSquaresProblem getProblem(Collection<WeightedObservedPoint> points); // Creates a least squares problem corresponding to the appropriate curve.\n}"}
{"index": 3994, "repo": "zookeeper-3.8.2", "des": "Instances of this class can be used to watch a directory for file changes.", "code": "Class FileChangeWatcher {\n\tFileChangeWatcher.State getState(); // Returns the current FileChangeWatcher.State.\n\tvoid start(); // Tells the background thread to start.\n\tvoid stop(); // Tells the background thread to stop.\n}"}
{"index": 4659, "repo": "commons-vfs2-2.9.0", "des": "An Ant task that writes the details of a file to Ant's log.", "code": "Class ShowFileTask {\n\tvoid execute(); // Executes the task.\n\tvoid setFile(String url); // The URL of the file to display.\n\tvoid setRecursive(boolean recursive); // Recursively shows the descendants of the file.\n\tvoid setShowContent(boolean showContent); // Shows the content.\n}"}
{"index": 13826, "repo": "spring-webmvc-6.0.11", "des": "Assist with the registration of a single view controller.", "code": "public class ViewControllerRegistration extends Object {\n\tprotected String getUrlPath();\n\tprotected ParameterizableViewController getViewController();\n\tprotected void setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tViewControllerRegistration setStatusCode(org.springframework.http.HttpStatusCode statusCode); // Set the status code to set on the response.\n\tvoid setViewName(String viewName); // Set the view name to return.\n}"}
{"index": 3571, "repo": "hive-serde-4.0.0-alpha-2", "des": "This abstract class is the superclass of all classes that can serialize and de-serialize Hadoop Writable objects.", "code": "Class AbstractSerDe {\n\tObject deserialize(org.apache.hadoop.io.Writable blob); // Deserialize an object out of a Writable blob.\n\tList<String> getColumnComments();\n\tList<String> getColumnNames();\n\tList<TypeInfo> getColumnTypes();\n\tOptional<org.apache.hadoop.conf.Configuration> getConfiguration();\n\tList<String> getPartitionColumnComments();\n\tList<String> getPartitionColumnNames();\n\tList<TypeInfo> getPartitionColumnTypes();\n\tSerDeStats getSerDeStats(); // Returns statistics collected when serializing.\n\tabstract Class<? extends org.apache.hadoop.io.Writable> getSerializedClass(); // Returns the Writable class that would be returned by the serialize method.\n\tvoid initialize(org.apache.hadoop.conf.Configuration configuration, Properties tableProperties, Properties partitionProperties); // Initialize the SerDe.\n\tprotected List<String> parseColumnComments(String key);\n\tprotected List<String> parseColumnNames();\n\tprotected List<String> parseColumnNames(String key);\n\tprotected List<TypeInfo> parseColumnTypes();\n\tprotected List<TypeInfo> parseColumnTypes(String key);\n\torg.apache.hadoop.io.Writable serialize(Object obj, ObjectInspector objInspector); // Serialize an object by navigating inside the Object with the ObjectInspector.\n\tboolean shouldStoreFieldsInMetastore(Map<String,String> tableParams);\n}"}
{"index": 14577, "repo": "spring-security-web-6.1.2", "des": "A builder for RequestMatcherDelegatingAuthenticationManagerResolver.", "code": "public static final class RequestMatcherDelegatingAuthenticationManagerResolver.Builder extends Object {\n\tRequestMatcherDelegatingAuthenticationManagerResolver.Builder add(RequestMatcher matcher, org.springframework.security.authentication.AuthenticationManager manager); // Maps a RequestMatcher to an AuthorizationManager.\n\tRequestMatcherDelegatingAuthenticationManagerResolver build(); // Creates a RequestMatcherDelegatingAuthenticationManagerResolver instance.\n}"}
{"index": 12095, "repo": "jena-core-4.9.0", "des": "Interface defining a generic factory interface for generating enhanced nodes from normal graph nodes.", "code": "public abstract class Implementation extends Object {\n\tabstract boolean canWrap(Node node, EnhGraph eg); // true iff wrapping (node, eg) would succeed.\n\tabstract EnhNode wrap(Node node, EnhGraph eg); // Create a new EnhNode wrapping a Node in the context of an EnhGraph\n}"}
{"index": 16063, "repo": "shiro-web-2.0.0-alpha-2", "des": "Remembers a Subject's identity by saving the Subject's principals to a Cookie for later retrieval.", "code": "public class CookieRememberMeManager extends org.apache.shiro.mgt.AbstractRememberMeManager {\n\tprotected void forgetIdentity(org.apache.shiro.subject.Subject subject); // Removes the 'rememberMe' cookie from the associated WebSubject's request/response pair.\n\tvoid forgetIdentity(org.apache.shiro.subject.SubjectContext subjectContext); // Removes the 'rememberMe' cookie from the associated WebSubjectContext's request/response pair.\n\tCookie getCookie(); // Returns the cookie 'template' that will be used to set all attributes of outgoing rememberMe cookies created by this RememberMeManager.\n\tprotected byte[] getRememberedSerializedIdentity(org.apache.shiro.subject.SubjectContext subjectContext); // Returns a previously serialized identity byte array or null if the byte array could not be acquired.\n\tprotected void rememberSerializedIdentity(org.apache.shiro.subject.Subject subject, byte[] serialized); // Base64-encodes the specified serialized byte array and sets that base64-encoded String as the cookie value.\n\tvoid setCookie(Cookie cookie); // Sets the cookie 'template' that will be used to set all attributes of outgoing rememberMe cookies created by this RememberMeManager.\n}"}
{"index": 16944, "repo": "spring-integration-ip-6.1.2", "des": "A MessageHandlerSpec for TcpOutboundGateways.", "code": "public class TcpOutboundGatewaySpec extends org.springframework.integration.dsl.MessageHandlerSpec<TcpOutboundGatewaySpec,TcpOutboundGateway> implements org.springframework.integration.dsl.ComponentsRegistration {\n\tTcpOutboundGatewaySpec async(boolean async); // Set to true to release the sending thread and receive the reply asynchronously.\n\tTcpOutboundGatewaySpec closeStreamAfterSend(boolean closeStreamAfterSend); // Set to true to close the connection output stream after sending without closing the connection.\n\tMap<Object,String> getComponentsToRegister();\n\tTcpOutboundGatewaySpec remoteTimeout(long remoteTimeout);\n\t<P> TcpOutboundGatewaySpec remoteTimeout(Function<org.springframework.messaging.Message<P>,?> remoteTimeoutFunction); // Configure a Function that will be invoked at runtime to determine the destination to which a message will be sent.\n\tTcpOutboundGatewaySpec unsolicitedMessageChannel(org.springframework.messaging.MessageChannel channel); // Set the unsolicited message channel.\n\tTcpOutboundGatewaySpec unsolicitedMessageChannelName(String channelName); // Set the unsolicited message channel name.\n\tTcpOutboundGatewaySpec unsolictedMessageChannelName(String channelName); // Deprecated, for removal: This API element is subject to removal in a future version. in favor of unsolicitedMessageChannelName(String) due to the typo in method name.\n\tTcpOutboundGatewaySpec unsolictedMessageChannelName(org.springframework.messaging.MessageChannel channel); // Deprecated, for removal: This API element is subject to removal in a future version. in favor of unsolicitedMessageChannel(MessageChannel) due to the typo in method name.\n}"}
{"index": 13144, "repo": "plc4j-spi-0.10.0", "des": "Base class for implementing connections.", "code": "public abstract class AbstractPlcConnection extends Object implements PlcConnection, PlcConnectionMetadata, PlcReader, PlcWriter, PlcSubscriber, PlcBrowser {\n\tCompletableFuture<PlcBrowseResponse> browse(PlcBrowseRequest browseRequest); // Reads a requested value from a PLC.\n\tPlcBrowseRequest.Builder browseRequestBuilder();\n\tboolean canBrowse();\n\tboolean canRead();\n\tboolean canSubscribe();\n\tboolean canWrite();\n\tprotected PlcAuthentication getAuthentication();\n\tPlcConnectionMetadata getMetadata();\n\tPlcFieldHandler getPlcFieldHandler();\n\tPlcValueHandler getPlcValueHandler();\n\tCompletableFuture<Void> ping();\n\tCompletableFuture<PlcReadResponse> read(PlcReadRequest readRequest); // Reads a requested value from a PLC.\n\tPlcReadRequest.Builder readRequestBuilder();\n\tPlcConsumerRegistration register(Consumer<PlcSubscriptionEvent> consumer, Collection<PlcSubscriptionHandle> handles);\n\tvoid setProtocol(Plc4xProtocolBase<?> protocol);\n\tCompletableFuture<PlcSubscriptionResponse> subscribe(PlcSubscriptionRequest subscriptionRequest); // Subscribes to fields on the PLC.\n\tPlcSubscriptionRequest.Builder subscriptionRequestBuilder();\n\tvoid unregister(PlcConsumerRegistration registration);\n\tCompletableFuture<PlcUnsubscriptionResponse> unsubscribe(PlcUnsubscriptionRequest unsubscriptionRequest); // Unsubscribes from fields on the PLC.\n\tPlcUnsubscriptionRequest.Builder unsubscriptionRequestBuilder();\n\tCompletableFuture<PlcWriteResponse> write(PlcWriteRequest writeRequest); // Writes a given value to a PLC.\n\tPlcWriteRequest.Builder writeRequestBuilder();\n}"}
{"index": 9630, "repo": "commons-math3-3.6.1", "des": "This interface represents an interpolator over the last step during an ODE integration.", "code": "Interface FieldStepInterpolator<T extends RealFieldElement<T>> {\n\tFieldODEStateAndDerivative<T> getCurrentState(); // Get the state at current grid point time.\n\tFieldODEStateAndDerivative<T> getInterpolatedState(T time); // Get the state at interpolated time.\n\tFieldODEStateAndDerivative<T> getPreviousState(); // Get the state at previous grid point time.\n\tboolean isForward(); // Check if the natural integration direction is forward.\n}"}
{"index": 12019, "repo": "jena-core-4.9.0", "des": "A simple graph implementation that wraps a collection of triples.", "code": "public class CollectionGraph extends GraphBase {\n\tCapabilities getCapabilities(); // Answer the capabilities of this graph; the default is an AllCapabilities object (the same one each time, not that it matters - Capabilities should be immutable).\n\tvoid performAdd(Triple t); // Add a triple to the triple store.\n\tvoid performDelete(Triple t); // Remove a triple from the triple store.\n}"}
{"index": 12163, "repo": "jena-core-4.9.0", "des": "A ModelMaker contains a collection of named models, methods for creating new models [both named and anonymous] and opening previously-named models, removing models, and accessing a single \"default\" Model for this Maker.", "code": "public interface ModelMaker extends ModelSource {\n\tvoid close(); // Close the factory - no more requests need be honoured, and any clean-up can be done.\n\tModel createModel(String name); // Create a Model with the given name if no such model exists.\n\tModel createModel(String name, boolean strict); // Create a new Model associated with the given name.\n\tGraphMaker getGraphMaker(); // Answer a GraphMaker that makes graphs the same way this ModelMaker makes models.\n\tboolean hasModel(String name); // return true iff the factory has a Model with the given name\n\tExtendedIterator<String> listModels(); // Answer an [extended] iterator where each element is the name of a model in the maker, and the complete sequence exhausts the set of names.\n\tModel openModel(String name, boolean strict); // Find an existing Model that this factory knows about under the given name.\n\tvoid removeModel(String name); // Remove the association between the name and the Model.\n}"}
{"index": 9491, "repo": "commons-math3-3.6.1", "des": "An implementation of LeastSquaresProblem.", "code": "Class AbstractEvaluation {\n\tdouble getCost(); // Get the cost.\n\tRealMatrix getCovariances(double threshold); // Get the covariance matrix of the optimized parameters.\n\tdouble getRMS(); // Get the normalized cost.\n\tRealVector getSigma(double covarianceSingularityThreshold); // Get an estimate of the standard deviation of the parameters.\n}"}
{"index": 1034, "repo": "ignite-core-2.15.0", "des": "MetadataRemoveProposedMessage and MetadataRemoveAcceptedMessage messages make a basis for discovery-based protocol for manage metadata describing objects in binary format stored in Ignite caches.", "code": "Class MetadataRemoveProposedMessage {\n\t@Nullable DiscoveryCustomMessage ackMessage(); // Called when custom message has been handled by all nodes.\n\t@Nullable DiscoCache createDiscoCache(GridDiscoveryManager mgr, AffinityTopologyVersion topVer, DiscoCache discoCache); // Creates new discovery cache if message caused topology version change.\n\tIgniteUuid id();\n\tboolean isMutable();\n\tboolean isOnCoordinator();\n\tvoid setOnCoordinator(boolean onCoordinator);\n\tint typeId();\n}"}
{"index": 14909, "repo": "spring-batch-test-5.0.2", "des": "A TestExecutionListener that sets up job-scope context for dependency injection into unit tests.", "code": "public class JobScopeTestExecutionListener extends Object implements org.springframework.test.context.TestExecutionListener {\n\tvoid afterTestMethod(org.springframework.test.context.TestContext testContext);\n\tvoid beforeTestMethod(org.springframework.test.context.TestContext testContext);\n\tprotected JobExecution getJobExecution(org.springframework.test.context.TestContext testContext); // Discover a JobExecution as a field in the test case or create one if none is available.\n\tvoid prepareTestInstance(org.springframework.test.context.TestContext testContext); // Set up a JobExecution as a test context attribute.\n}"}
{"index": 12315, "repo": "jena-core-4.9.0", "des": "Data structure used to report the results of validation or consistency checking operations.", "code": "public interface ValidityReport {\n\tIterator<ValidityReport.Report> getReports(); // Return an iterator over the separate ValidityReport.Report records.\n\tboolean isClean(); // Returns true if the model is both valid (logically consistent) and no warnings were generated.\n\tboolean isValid(); // Returns true if no logical inconsistencies were detected.\n}"}
{"index": 14323, "repo": "wicket-core-10.0.0-M1", "des": "Request handler that invokes an IRequestListener on component or behavior and renders page afterwards.", "code": "public class ListenerRequestHandler extends Object implements IPageRequestHandler, IComponentRequestHandler, org.apache.wicket.request.ILoggableRequestHandler {\n\tvoid detach(org.apache.wicket.request.IRequestCycle requestCycle);\n\tInteger getBehaviorIndex(); // Index of target behavior or null if component is the target.\n\tIRequestableComponent getComponent(); // Returns the component instance.\n\tfinal String getComponentPath(); // Returns the page relative path to the component instance.\n\tListenerLogData getLogData();\n\tIRequestablePage getPage(); // Returns the page.\n\tClass<? extends IRequestablePage> getPageClass(); // Returns the page class\n\tInteger getPageId(); // Returns the page id.\n\torg.apache.wicket.request.mapper.parameter.PageParameters getPageParameters();\n\tfinal Integer getRenderCount(); // Returns the number of times this page has been rendered.\n\tboolean includeRenderCount();\n\tfinal boolean isPageInstanceCreated(); // Checks if the page instance is already created or if it will be created when IPageRequestHandler.getPage() is called\n\tvoid respond(org.apache.wicket.request.IRequestCycle requestCycle);\n}"}
{"index": 3162, "repo": "commons-jexl3-3.3", "des": "Helper class to carry information such as a url/file name, line and column for debugging information reporting.", "code": "Class JexlInfo {\n\tJexlInfo at(int l, int c); // Creates info reusing the name.\n\tJexlInfo detach();\n\tstatic JexlInfo from(JexlScript script); // Gets the info from a script.\n\tint getColumn(); // Gets the column number.\n\tJexlInfo.Detail getDetail();\n\tint getLine(); // Gets the line number.\n\tString getName(); // Gets the file/script/url name.\n}"}
{"index": 10917, "repo": "spring-data-redis-3.1.2", "des": "A Record within the stream mapped to a single object.", "code": "public interface ObjectRecord<S,V> extends Record<S,V> {\n\tstatic <S, V> ObjectRecord<S,V> create(S stream, V value); // Creates a new ObjectRecord associated with the stream key and value.\n\tdefault <HK, HV> MapRecord<S,HK,HV> toMapRecord(HashMapper<? super V,HK,HV> mapper); // Apply the given HashMapper to the backing value to create a new MapRecord.\n\tObjectRecord<S,V> withId(RecordId id); // Create a new instance of Record with the given RecordId.\n\t<SK> ObjectRecord<SK,V> withStreamKey(SK key); // Create a new instance of Record with the given key to store the record at.\n}"}
{"index": 1306, "repo": "ignite-core-2.15.0", "des": "Represents lightweight type descriptors.", "code": "Enum VisorSystemViewTask.SimpleType {\n\tstatic VisorSystemViewTask.SimpleType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic VisorSystemViewTask.SimpleType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4225, "repo": "jackson-core-2.15.2", "des": "Intermediate base class for all problems encountered when processing (parsing, generating) JSON content that are not pure I/O problems.", "code": "Class JsonProcessingException {\n\tvoid clearLocation(); // Method that allows to remove context information from this exception's message.\n\tJsonLocation getLocation(); // Accessor for location information related to position within input or output (depending on operation), if available; if not available may return null.\n\tString getMessage(); // Default implementation overridden so that we can add location information\n\tprotected String getMessageSuffix(); // Accessor that sub-classes can override to append additional information right after the main message, but before source location information.\n\tString getOriginalMessage(); // Method that allows accessing the original \"message\" argument, without additional decorations (like location information) that overridden getMessage() adds.\n\tObject getProcessor(); // Method that allows accessing underlying processor that triggered this exception; typically either JsonParser or JsonGenerator for exceptions that originate from streaming API.\n}"}
{"index": 7225, "repo": "calcite-core-1.34.0", "des": "Categorizing Json exists error behaviors.", "code": "Enum SqlJsonExistsErrorBehavior {\n\tstatic SqlJsonExistsErrorBehavior valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlJsonExistsErrorBehavior[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3155, "repo": "commons-jexl3-3.3", "des": "Helper interface used when creating a map literal.", "code": "Interface JexlArithmetic.MapBuilder {\n\tObject create(); // Creates the actual \"map\" instance.\n\tvoid put(Object key, Object value); // Adds a new entry to the map.\n}"}
{"index": 12176, "repo": "jena-core-4.9.0", "des": "RDF triples as RDF terms for RDF-star embedded triples.", "code": "public class Node_Triple extends Node {\n\tboolean equals(Object obj); // Nodes only equal other Nodes that have equal labels.\n\tTriple getTriple(); // Get the triple for a triple term (embedded triple), otherwise die horribly\n\tboolean isConcrete(); // Answer true iff this node is concrete, ie not variable, ie URI, blank, or literal.\n\tboolean isNodeTriple(); // Answer true iff this node is an \"triple node\" (RDF-star)\n\tString toString(PrefixMapping pm, boolean quoting); // Answer a human readable representation of this Node, quoting literals if specified, and compressing URIs using the prefix mapping supplied.\n\tObject visitWith(NodeVisitor v); // Visit a Node and dispatch on it to the appropriate method from the NodeVisitor v.\n}"}
{"index": 15994, "repo": "wicket-util-10.0.0-M1", "des": "Interpolates variables into a String from a Map.", "code": "public class MapVariableInterpolator extends VariableInterpolator {\n\tprotected String getValue(String variableName); // Retrieves a value for a variable name during interpolation.\n\tstatic String interpolate(String string, Map<?,?> variables); // Interpolates a String with the arguments defined in the given Map.\n\tfinal void setVariables(Map<?,?> variables); // Sets the Map of variables.\n}"}
{"index": 16112, "repo": "spring-data-cassandra-4.1.2", "des": "Value object representing a specification to alter a column.", "code": "public class AlterColumnSpecification extends ColumnTypeChangeSpecification {\n\tstatic AlterColumnSpecification alterColumn(com.datastax.oss.driver.api.core.CqlIdentifier name, com.datastax.oss.driver.api.core.type.DataType type); // Entry point into the AlterColumnSpecification's fluent API given name and DataType to alter a column.\n\tstatic AlterColumnSpecification alterColumn(String name, com.datastax.oss.driver.api.core.type.DataType type); // Entry point into the AlterColumnSpecification's fluent API given name and DataType to alter a column.\n}"}
{"index": 10983, "repo": "spring-data-redis-3.1.2", "des": "A script to be executed using the Redis scripting support available as of version 2.6", "code": "public interface RedisScript<T> {\n\tClass<T> getResultType();\n\tString getScriptAsString();\n\tString getSha1();\n\tstatic <T> RedisScript<T> of(String script); // Creates new RedisScript from script as String.\n\tstatic <T> RedisScript<T> of(String script, Class<T> resultType); // Creates new RedisScript from script as String.\n\tstatic <T> RedisScript<T> of(Resource resource); // Creates new RedisScript (with throw away result) from the given Resource.\n\tstatic <T> RedisScript<T> of(Resource resource, Class<T> resultType); // Creates new RedisScript from Resource.\n\tdefault boolean returnsRawValue();\n}"}
{"index": 18171, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Configuration for a named region for caching domain data.", "code": "Interface DomainDataRegionConfig {\n\tjava.util.List<CollectionDataCachingConfig> getCollectionCaching(); // Retrieve the list of all collection data to be stored in this region\n\tjava.util.List<EntityDataCachingConfig> getEntityCaching(); // Retrieve the list of all entity data to be stored in this region\n\tjava.util.List<NaturalIdDataCachingConfig> getNaturalIdCaching(); // Retrieve the list of all natural-id data to be stored in this region\n\tjava.lang.String getRegionName(); // Retrieve the unqualified name of this region.\n}"}
{"index": 11630, "repo": "spring-websocket-6.0.11", "des": "A Jackson 2.x codec for encoding and decoding SockJS messages.", "code": "public class Jackson2SockJsMessageCodec extends AbstractSockJsMessageCodec {\n\tprotected char[] applyJsonQuoting(String content); // Apply standard JSON string quoting (see json.org).\n\tString[] decode(String content); // Decode the given SockJS message frame.\n\tString[] decodeInputStream(InputStream content); // Decode the given SockJS message frame.\n}"}
{"index": 7704, "repo": "cassandra-all-4.1.2", "des": "Bypasses the read repair path for short read protection and testing.", "code": "Class NoopReadRepair<E extends Endpoints<E>,P extends ReplicaPlan.ForRead<E,P>> {\n\tvoid awaitReads(); // Block on the reads (or timeout) sent out in ReadRepair.startRepair(org.apache.cassandra.service.reads.DigestResolver<E, P>, java.util.function.Consumer<org.apache.cassandra.db.partitions.PartitionIterator>)\n\tvoid awaitWrites(); // Block on any mutations (or timeout) we sent out to repair replicas in ReadRepair.repairPartition(org.apache.cassandra.db.DecoratedKey, java.util.Map<org.apache.cassandra.locator.Replica, org.apache.cassandra.db.Mutation>, org.apache.cassandra.locator.ReplicaPlan.ForWrite)\n\tUnfilteredPartitionIterators.MergeListener getMergeListener(P replicas); // Used by DataResolver to generate corrections as the partition iterator is consumed\n\tvoid maybeSendAdditionalReads(); // if it looks like we might not receive data requests from everyone in time, send additional requests to additional replicas not contacted in the initial full data read.\n\tvoid maybeSendAdditionalWrites(); // If it looks like we might not receive acks for all the repair mutations we sent out, combine all the unacked mutations and send them to the minority of nodes not involved in the read repair data read / write cycle.\n\tvoid repairPartition(DecoratedKey partitionKey, java.util.Map<Replica,Mutation> mutations, ReplicaPlan.ForWrite writePlan); // Repairs a partition _after_ receiving data responses.\n\tvoid startRepair(DigestResolver<E,P> digestResolver, java.util.function.Consumer<PartitionIterator> resultConsumer); // Called when the digests from the initial read don't match.\n}"}
{"index": 4055, "repo": "zookeeper-3.8.2", "des": "Enumeration of types of events that may occur on the ZooKeeper.", "code": "Enum Watcher.Event.EventType {\n\tstatic Watcher.Event.EventType fromInt(int intValue);\n\tint getIntValue();\n\tstatic Watcher.Event.EventType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Watcher.Event.EventType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12779, "repo": "spring-data-mongodb-4.1.2", "des": "Base class for Spring Data MongoDB to be extended for JavaConfiguration usage.", "code": "public abstract class MongoConfigurationSupport extends Object {\n\tprotected boolean abbreviateFieldNames(); // Configures whether to abbreviate field names for domain objects by configuring a CamelCaseAbbreviatingFieldNamingStrategy on the MongoMappingContext instance created.\n\tprotected boolean autoIndexCreation(); // Configure whether to automatically create indices for domain types by deriving the IndexDefinition from the entity or not.\n\tprotected void configureClientSettings(com.mongodb.MongoClientSettings.Builder builder); // Configure MongoClientSettings via its MongoClientSettings.Builder API.\n\tprotected void configureConverters(MongoCustomConversions.MongoConverterConfigurationAdapter converterConfigurationAdapter); // Configuration hook for MongoCustomConversions creation.\n\tMongoCustomConversions customConversions(); // Register custom Converters in a CustomConversions object if required.\n\tprotected FieldNamingStrategy fieldNamingStrategy(); // Configures a FieldNamingStrategy on the MongoMappingContext instance created.\n\tprotected abstract String getDatabaseName(); // Return the name of the database to connect to.\n\tprotected Set<Class<?>> getInitialEntitySet(); // Scans the mapping base package for classes annotated with Document.\n\tprotected Collection<String> getMappingBasePackages(); // Returns the base packages to scan for MongoDB mapped entities at startup.\n\tprotected com.mongodb.MongoClientSettings mongoClientSettings(); // Return the MongoClientSettings used to create the actual MongoClient.\n\tMongoManagedTypes mongoManagedTypes();\n\tMongoMappingContext mongoMappingContext(MongoCustomConversions customConversions, MongoManagedTypes mongoManagedTypes); // Creates a MongoMappingContext equipped with entity classes scanned from the mapping base package.\n\tprotected Set<Class<?>> scanForEntities(String basePackage); // Scans the given base package for entities, i.e.\n}"}
{"index": 16408, "repo": "spring-batch-infrastructure-5.0.2", "des": "Abstract class handling common concerns of various LineTokenizer implementations such as dealing with names and actual construction of FieldSet", "code": "public abstract class AbstractLineTokenizer extends Object implements LineTokenizer {\n\tprotected abstract List<String> doTokenize(String line);\n\tboolean hasNames();\n\tprotected boolean isStrict(); // Provides access to the strict flag for subclasses if needed.\n\tvoid setFieldSetFactory(FieldSetFactory fieldSetFactory); // Factory for FieldSet instances.\n\tvoid setNames(String... names); // Setter for column names.\n\tvoid setStrict(boolean strict); // Public setter for the strict flag.\n\tFieldSet tokenize(String line); // Yields the tokens resulting from the splitting of the supplied line.\n}"}
{"index": 3591, "repo": "hive-serde-4.0.0-alpha-2", "des": "The set of fields this struct contains, along with convenience methods for finding and manipulating them.", "code": "Enum InnerStruct._Fields {\n\tstatic InnerStruct._Fields findByName(String name); // Find the _Fields constant that matches name, or null if its not found.\n\tstatic InnerStruct._Fields findByThriftId(int fieldId); // Find the _Fields constant that matches fieldId, or null if its not found.\n\tstatic InnerStruct._Fields findByThriftIdOrThrow(int fieldId); // Find the _Fields constant that matches fieldId, throwing an exception if it is not found.\n\tString getFieldName();\n\tshort getThriftFieldId();\n\tstatic InnerStruct._Fields valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic InnerStruct._Fields[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11495, "repo": "spring-restdocs-core-3.0.0", "des": "A Snippet that documents the path parameters supported by a RESTful resource.", "code": "public class PathParametersSnippet extends AbstractParametersSnippet {\n\tfinal PathParametersSnippet and(List<ParameterDescriptor> additionalDescriptors); // Returns a new PathParametersSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tfinal PathParametersSnippet and(ParameterDescriptor... additionalDescriptors); // Returns a new PathParametersSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tprotected Map<String,Object> createModel(Operation operation); // Create the model that should be used during template rendering to document the given operation.\n\tprotected Set<String> extractActualParameters(Operation operation); // Extracts the names of the parameters that were present in the given operation.\n\tprotected void verificationFailed(Set<String> undocumentedParameters, Set<String> missingParameters); // Called when the documented parameters do not match the actual parameters.\n}"}
{"index": 13276, "repo": "spring-test-6.0.11", "des": "WebDelegatingSmartContextLoader is a concrete implementation of AbstractDelegatingSmartContextLoader that delegates to a GenericXmlWebContextLoader (or a GenericGroovyXmlWebContextLoader if Groovy is present on the classpath) and an AnnotationConfigWebContextLoader.", "code": "public class WebDelegatingSmartContextLoader extends AbstractDelegatingSmartContextLoader {\n\tprotected SmartContextLoader getAnnotationConfigLoader(); // Get the delegate SmartContextLoader that supports annotated classes.\n\tprotected SmartContextLoader getXmlLoader(); // Get the delegate SmartContextLoader that supports XML configuration files and/or Groovy scripts.\n}"}
{"index": 3960, "repo": "spring-cloud-commons-parent-1.1.9.RELEASE", "des": "A REST resource that can be discovered and can be either gone or available.", "code": "Interface RemoteResource {\n\torg.springframework.hateoas.Link getLink(); // Returns the Link to the resource in case it is available or null in case it's gone, i.e.\n\tvoid verifyOrDiscover(); // Discovers the the resource in case it hasn't been yet or became unavailable.\n}"}
{"index": 10457, "repo": "groovy-all-4.0.13", "des": "Base class for creating arbitrary nested trees of objects or events.", "code": "public abstract class BuilderSupport extends GroovyObjectSupport {\n\tprotected abstract Object createNode(Object name);\n\tprotected abstract Object createNode(Object name, Object value);\n\tprotected abstract Object createNode(Object name, Map attributes);\n\tprotected abstract Object createNode(Object name, Map attributes, Object value);\n\tprotected Object doInvokeMethod(String methodName, Object name, Object args);\n\tprotected Object getCurrent();\n\tprotected Object getName(String methodName); // A hook to allow names to be converted into some other object such as a QName in XML or ObjectName in JMX.\n\tObject invokeMethod(String methodName); // Convenience method when no arguments are required.\n\tObject invokeMethod(String methodName, Object args); // Invokes the given method.\n\tprotected void nodeCompleted(Object parent, Object node); // A hook to allow nodes to be processed once they have had all of their children applied.\n\tprotected Object postNodeCompletion(Object parent, Object node); // A hook to allow nodes to be processed once they have had all of their children applied and allows the actual node object that represents the Markup element to be changed.\n\tprotected void setClosureDelegate(Closure closure, Object node); // A strategy method to allow derived builders to use builder-trees and switch in different kinds of builders.\n\tprotected void setCurrent(Object current);\n\tprotected abstract void setParent(Object parent, Object child);\n}"}
{"index": 11720, "repo": "spring-data-neo4j-7.1.2", "des": "A PersistentProperty interface with additional methods for metadata related to Neo4j.", "code": "@API(status=STABLE, since=\"6.0\") public interface Neo4jPersistentProperty extends PersistentProperty<Neo4jPersistentProperty>, GraphPropertyDescription {\n\tdefault String computePrefixWithDelimiter(); // Computes a prefix to be used on multiple properties on a node when this persistent property is annotated with @CompositeProperty.\n\tNeo4jPersistentPropertyConverter<?> getOptionalConverter();\n\tdefault boolean isDynamicAssociation(); // Dynamic associations are associations to non-simple types stored in a map with a key type of java.lang.String or enum.\n\tdefault boolean isDynamicLabels();\n\tdefault boolean isDynamicOneToManyAssociation(); // Dynamic one-to-many associations are associations to non-simple types stored in a map with a key type of java.lang.String and values of java.util.Collection.\n\tboolean isEntityWithRelationshipProperties();\n\tdefault boolean isReadOnly();\n}"}
{"index": 18786, "repo": "lucene-core-9.7.0", "des": "Contains statistics for a collection (field).", "code": "Class CollectionStatistics {\n\tlong docCount(); // The total number of documents that have at least one term for this field.\n\tString field(); // The field's name.\n\tlong maxDoc(); // The total number of documents, regardless of whether they all contain values for this field.\n\tlong sumDocFreq(); // The total number of posting list entries for this field.\n\tlong sumTotalTermFreq(); // The total number of tokens for this field.\n}"}
{"index": 11276, "repo": "spring-context-6.0.11", "des": "Bean post-processor that automatically applies asynchronous invocation behavior to any bean that carries the Async annotation at class or method-level by adding a corresponding AsyncAnnotationAdvisor to the exposed proxy (either an existing AOP proxy or a newly generated proxy that implements all the target's interfaces).", "code": "public class AsyncAnnotationBeanPostProcessor extends org.springframework.aop.framework.autoproxy.AbstractBeanFactoryAwareAdvisingPostProcessor {\n\tvoid configure(Supplier<Executor> executor, Supplier<org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler> exceptionHandler); // Configure this post-processor with the given executor and exception handler suppliers, applying the corresponding default if a supplier is not resolvable.\n\tvoid setAsyncAnnotationType(Class<? extends Annotation> asyncAnnotationType); // Set the 'async' annotation type to be detected at either class or method level.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setExceptionHandler(org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler exceptionHandler); // Set the AsyncUncaughtExceptionHandler to use to handle uncaught exceptions thrown by asynchronous method executions.\n\tvoid setExecutor(Executor executor); // Set the Executor to use when invoking methods asynchronously.\n}"}
{"index": 716, "repo": "ignite-core-2.15.0", "des": "Eagerly removes expired entries from cache when CacheConfiguration.", "code": "Class GridCacheTtlManager {\n\tboolean eagerTtlEnabled();\n\tboolean expire(int amount); // Processes specified amount of expired entries.\n\tboolean hasPendingEntries();\n\tvoid hasPendingEntries(boolean update); // Updates the flag hasPendingEntries with the given value.\n\tprotected void onKernalStop0(boolean cancel);\n\tlong pendingSize();\n\tvoid printMemoryStats(); // Prints memory statistics (sizes of internal data structures, etc.).\n\tprotected void start0();\n\tvoid unregister(); // Unregister this TTL manager of cache from periodical check on expired entries.\n}"}
{"index": 3397, "repo": "hadoop-azure-3.3.6", "des": "Interface for Managing the Delegation tokens.", "code": "Interface WasbDelegationTokenManager {\n\tvoid cancelDelegationToken(org.apache.hadoop.security.token.Token<?> token); // Cancel the delegation token\n\torg.apache.hadoop.security.token.Token<org.apache.hadoop.security.token.delegation.web.DelegationTokenIdentifier> getDelegationToken(String renewer); // Get Delegation token\n\tlong renewDelegationToken(org.apache.hadoop.security.token.Token<?> token); // Renew the delegation token\n}"}
{"index": 7407, "repo": "mahout-math-0.13.0", "des": "Open hash map from double keys to int values.", "code": "Class OpenDoubleIntHashMap {\n\tint adjustOrPutValue(double key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(double key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(DoubleProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(DoubleIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(double key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(double key);\n\tprotected int indexOfKey(double key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenDoubleIntHashMap.MapElement> iterator();\n\tvoid keys(DoubleArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(DoubleIntProcedure condition, DoubleArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(double key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(double key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 12234, "repo": "jena-core-4.9.0", "des": "Writes out RDF in the abbreviated syntax, for human consumption not only machine readable.", "code": "public class RDFXML_Abbrev extends BaseXMLWriter implements RDFErrorHandler {\n\tvoid error(Exception e); // report an error\n\tvoid fatalError(Exception e); // report a catastrophic error.\n\tvoid warning(Exception e); // report a warning\n}"}
{"index": 13809, "repo": "spring-webmvc-6.0.11", "des": "A Servlet-specific ModelAttributeMethodProcessor that applies data binding through a WebDataBinder of type ServletRequestDataBinder.", "code": "public class ServletModelAttributeMethodProcessor extends org.springframework.web.method.annotation.ModelAttributeMethodProcessor {\n\tprotected void bindRequestParameters(org.springframework.web.bind.WebDataBinder binder, org.springframework.web.context.request.NativeWebRequest request); // This implementation downcasts WebDataBinder to ServletRequestDataBinder before binding.\n\tprotected final Object createAttribute(String attributeName, org.springframework.core.MethodParameter parameter, org.springframework.web.bind.support.WebDataBinderFactory binderFactory, org.springframework.web.context.request.NativeWebRequest request); // Instantiate the model attribute from a URI template variable or from a request parameter if the name matches to the model attribute name and if there is an appropriate type conversion strategy.\n\tprotected Object createAttributeFromRequestValue(String sourceValue, String attributeName, org.springframework.core.MethodParameter parameter, org.springframework.web.bind.support.WebDataBinderFactory binderFactory, org.springframework.web.context.request.NativeWebRequest request); // Create a model attribute from a String request value (e.g.\n\tprotected String getRequestValueForAttribute(String attributeName, org.springframework.web.context.request.NativeWebRequest request); // Obtain a value from the request that may be used to instantiate the model attribute through type conversion from String to the target type.\n\tprotected final Map<String,String> getUriTemplateVariables(org.springframework.web.context.request.NativeWebRequest request);\n\tObject resolveConstructorArgument(String paramName, Class<?> paramType, org.springframework.web.context.request.NativeWebRequest request);\n}"}
{"index": 1025, "repo": "ignite-core-2.15.0", "des": "Management bean for MemoryEventStorageSpi.", "code": "Interface MemoryEventStorageSpiMBean {\n\tvoid clearAll(); // Removes all events from the event queue.\n\tlong getExpireAgeMs(); // Gets event time-to-live value.\n\tlong getExpireCount(); // Gets maximum event queue size.\n\tlong getQueueSize(); // Gets current queue size of the event queue.\n}"}
{"index": 18600, "repo": "hibernate-core-5.6.15.Final", "des": "Represent a simple scalar return within a query result.", "code": "Interface ScalarReturn {\n\tjava.lang.String getName(); // Gets the name of the scalar return.\n\tType getType(); // Gets the type of the scalar return.\n}"}
{"index": 4077, "repo": "camel-core-3.0.0-RC1", "des": "The BeanIO data format is used for working with flat payloads (such as CSV, delimited, or fixed length formats).", "code": "Class BeanioDataFormat {\n\tString getBeanReaderErrorHandlerType();\n\tString getEncoding();\n\tBoolean getIgnoreInvalidRecords();\n\tBoolean getIgnoreUnexpectedRecords();\n\tBoolean getIgnoreUnidentifiedRecords();\n\tString getMapping();\n\tString getStreamName();\n\tBoolean getUnmarshalSingleObject();\n\tvoid setBeanReaderErrorHandlerType(String beanReaderErrorHandlerType); // To use a custom org.apache.camel.dataformat.beanio.BeanIOErrorHandler as error handler while parsing.\n\tvoid setEncoding(String encoding); // The charset to use.\n\tvoid setIgnoreInvalidRecords(Boolean ignoreInvalidRecords); // Whether to ignore invalid records.\n\tvoid setIgnoreUnexpectedRecords(Boolean ignoreUnexpectedRecords); // Whether to ignore unexpected records.\n\tvoid setIgnoreUnidentifiedRecords(Boolean ignoreUnidentifiedRecords); // Whether to ignore unidentified records.\n\tvoid setMapping(String mapping); // The BeanIO mapping file.\n\tvoid setStreamName(String streamName); // The name of the stream to use.\n\tvoid setUnmarshalSingleObject(Boolean unmarshalSingleObject); // This options controls whether to unmarshal as a list of objects or as a single object only.\n}"}
{"index": 8272, "repo": "spring-ws-3.0.10.RELEASE", "des": "Subinterface of SoapFault that exposes SOAP 1.", "code": "Interface Soap12Fault {\n\tvoid addFaultSubcode(QName subcode); // Adds a fault subcode this fault.\n\tString getFaultNode(); // Returns the fault node.\n\tString getFaultReasonText(Locale locale); // Returns the reason associated with the given language.\n\tIterator<QName> getFaultSubcodes(); // Returns an iteration over the fault subcodes.\n\tvoid setFaultNode(String uri); // Sets the fault node.\n\tvoid setFaultReasonText(Locale locale, String text); // Sets the specified fault reason text.\n}"}
{"index": 4960, "repo": "commons-collections-3.2.2", "des": "Decorates another Buffer to ensure a fixed maximum size.", "code": "Class BoundedBuffer {\n\tboolean add(Object o);\n\tboolean addAll(Collection c);\n\tstatic BoundedBuffer decorate(Buffer buffer, int maximumSize); // Factory method to create a bounded buffer.\n\tstatic BoundedBuffer decorate(Buffer buffer, int maximumSize, long timeout); // Factory method to create a bounded buffer that blocks for a maximum amount of time.\n\tboolean isFull(); // Returns true if this collection is full and no new elements can be added.\n\tIterator iterator(); // Iterators must be manually synchronized.\n\tint maxSize(); // Gets the maximum size of the collection (the bound).\n\tObject remove(); // Gets and removes the next object from the buffer.\n}"}
{"index": 2493, "repo": "exoplayer-r2.3.1", "des": "Maintains decoder event counts, for debugging purposes only.", "code": "Class DecoderCounters {\n\tvoid ensureUpdated(); // Should be called to ensure counter values are made visible across threads.\n\tvoid merge(DecoderCounters other); // Merges the counts from other into this instance.\n}"}
{"index": 14976, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An Authentication implementation for the Device Verification Request (submission of the user code) used in the OAuth 2.0 Device Authorization Grant.", "code": "public class OAuth2DeviceVerificationAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tMap<String,Object> getAdditionalParameters(); // Returns the additional parameters.\n\tString getClientId(); // Returns the client identifier.\n\tObject getCredentials();\n\tObject getPrincipal();\n\tString getUserCode(); // Returns the user code.\n}"}
{"index": 14069, "repo": "spring-context-support-6.0.11", "des": "Subclass of Quartz's SimpleThreadPool that implements Spring's TaskExecutor interface and listens to Spring lifecycle callbacks.", "code": "public class SimpleThreadPoolTaskExecutor extends SimpleThreadPool implements org.springframework.core.task.AsyncListenableTaskExecutor, org.springframework.scheduling.SchedulingTaskExecutor, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet();\n\tvoid destroy();\n\tvoid execute(Runnable task);\n\tvoid execute(Runnable task, long startTimeout); // Deprecated.\n\tvoid setWaitForJobsToCompleteOnShutdown(boolean waitForJobsToCompleteOnShutdown); // Set whether to wait for running jobs to complete on shutdown.\n\tFuture<?> submit(Runnable task);\n\t<T> Future<T> submit(Callable<T> task);\n\torg.springframework.util.concurrent.ListenableFuture<?> submitListenable(Runnable task);\n\t<T> org.springframework.util.concurrent.ListenableFuture<T> submitListenable(Callable<T> task);\n}"}
{"index": 9212, "repo": "fontbox-3.0.0-beta1", "des": "Windows Glyph List 4 (WGL4) names for Mac glyphs.", "code": "Class WGL4Names {\n\tstatic String[] getAllNames(); // Returns a new array with all glyph names.\n\tstatic Integer getGlyphIndex(String name); // Returns the index of the glyph with the given name.\n\tstatic String getGlyphName(int index); // Returns the name of the glyph at the given index.\n}"}
{"index": 14740, "repo": "spring-data-commons-3.1.2", "des": "Value object representing defaulting masks used for Kotlin methods applying parameter defaulting.", "code": "public class KotlinDefaultMask extends Object {\n\tvoid forEach(IntConsumer maskCallback); // Callback method to notify IntConsumer for each defaulting mask.\n\tstatic KotlinDefaultMask from(kotlin.reflect.KFunction<?> function, Predicate<kotlin.reflect.KParameter> isPresent); // Creates defaulting mask(s) used to invoke Kotlin default methods that conditionally apply parameter values.\n\tint[] getDefaulting();\n\tstatic int getMaskCount(int arguments); // Return the number of defaulting masks required to represent the number of arguments.\n}"}
{"index": 7485, "repo": "nifi-client-dto-1.22.0", "des": "Details for a processor within this NiFi.", "code": "Class ProcessorDTO {\n\tBundleDTO getBundle(); // The details of the artifact that bundled this processor type.\n\tProcessorConfigDTO getConfig(); // The configuration details for this processor.\n\tBoolean getDeprecated();\n\tString getDescription();\n\tBoolean getExtensionMissing();\n\tString getInputRequirement();\n\tBoolean getMultipleVersionsAvailable();\n\tString getName(); // The name of this processor.\n\tBoolean getPersistsState();\n\tList<RelationshipDTO> getRelationships(); // Gets the available relationships that this processor currently supports.\n\tBoolean getRestricted();\n\tString getState();\n\tMap<String,String> getStyle();\n\tBoolean getSupportsBatching();\n\tBoolean getSupportsEventDriven();\n\tBoolean getSupportsParallelProcessing();\n\tBoolean getSupportsSensitiveDynamicProperties();\n\tString getType(); // The type of this processor.\n\tCollection<String> getValidationErrors(); // Gets the validation errors from this processor.\n\tString getValidationStatus();\n\tBoolean isExecutionNodeRestricted();\n\tvoid setBundle(BundleDTO bundle);\n\tvoid setConfig(ProcessorConfigDTO config);\n\tvoid setDeprecated(Boolean deprecated);\n\tvoid setDescription(String description);\n\tvoid setExecutionNodeRestricted(Boolean executionNodeRestricted);\n\tvoid setExtensionMissing(Boolean extensionMissing);\n\tvoid setInputRequirement(String inputRequirement);\n\tvoid setMultipleVersionsAvailable(Boolean multipleVersionsAvailable);\n\tvoid setName(String name);\n\tvoid setPersistsState(Boolean persistsState);\n\tvoid setRelationships(List<RelationshipDTO> relationships);\n\tvoid setRestricted(Boolean restricted);\n\tvoid setState(String state);\n\tvoid setStyle(Map<String,String> style);\n\tvoid setSupportsBatching(Boolean supportsBatching);\n\tvoid setSupportsEventDriven(Boolean supportsEventDriven);\n\tvoid setSupportsParallelProcessing(Boolean supportsParallelProcessing);\n\tvoid setSupportsSensitiveDynamicProperties(Boolean supportsSensitiveDynamicProperties);\n\tvoid setType(String type);\n\tvoid setValidationErrors(Collection<String> validationErrors);\n\tvoid setValidationStatus(String validationStatus);\n}"}
{"index": 6419, "repo": "exoplayer-core-2.9.6", "des": "Factory for creating MediaSources to play ad media.", "code": "Interface AdsMediaSource.MediaSourceFactory {\n\tMediaSource createMediaSource(android.net.Uri uri); // Creates a new MediaSource for loading the ad media with the specified uri.\n\tint[] getSupportedTypes(); // Returns the content types supported by media sources created by this factory.\n}"}
{"index": 14449, "repo": "wicket-core-10.0.0-M1", "des": "A video media component to display videos.", "code": "public class Video extends MediaComponent {\n\tInteger getHeight(); // Gets the height of the video area\n\tResourceReference getPoster(); // The image to be displayed if the video isn't available\n\torg.apache.wicket.request.mapper.parameter.PageParameters getPosterPageParameters(); // Gets the posters page parameters\n\tInteger getWidth(); // Gets the width of the video area\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tvoid setHeight(Integer height); // Sets the height of the video area\n\tvoid setPoster(ResourceReference poster); // Sets the image to be displayed if the video isn't available\n\tvoid setPoster(ResourceReference poster, org.apache.wicket.request.mapper.parameter.PageParameters posterPageParameters); // Sets the image to be displayed if the video isn't available\n\tvoid setPosterPageParameters(org.apache.wicket.request.mapper.parameter.PageParameters posterPageParameters); // Sets the posters page parameters\n\tvoid setWidth(Integer width); // Sets the width of the video area\n}"}
{"index": 3198, "repo": "hbase-common-3.0.0-alpha-4", "des": "Not thread safe! Please note that the reads will cause position movement on wrapped ByteBuffer.", "code": "Class ByteBufferInputStream {\n\tint available();\n\tint read(); // Reads the next byte of data from this input stream.\n\tint read(byte[] b, int off, int len); // Reads up to next len bytes of data from buffer into passed array(starting from given offset).\n\tlong skip(long n); // Skips n bytes of input from this input stream.\n}"}
{"index": 631, "repo": "ignite-core-2.15.0", "des": "Represents Data Entry (key, value) pair update operation in WAL log.", "code": "Class DataEntry {\n\tint cacheId();\n\tlong expireTime();\n\tbyte flags(); // Entry flags.\n\tstatic byte flags(boolean primary);\n\tstatic byte flags(boolean primary, boolean preload, boolean fromStore);\n\tKeyCacheObject key();\n\tGridCacheVersion nearXidVersion();\n\tGridCacheOperation op();\n\tlong partitionCounter();\n\tDataEntry partitionCounter(long partCnt); // Sets partition update counter to entry.\n\tint partitionId();\n\tCacheObject value();\n\tGridCacheVersion writeVersion();\n}"}
{"index": 4881, "repo": "hadoop-common-3.3.4", "des": "This class is a metrics sink that uses FileSystem to write the metrics logs.", "code": "Class RollingFileSystemSink {\n\tvoid close();\n\tvoid flush(); // Flush any buffered metrics\n\tprotected long getRollInterval(); // Extract the roll interval from the configuration and return it in milliseconds.\n\tvoid init(org.apache.commons.configuration2.SubsetConfiguration metrics2Properties); // Initialize the plugin\n\tvoid putMetrics(MetricsRecord record); // Put a metrics record in the sink\n\tprotected void setInitialFlushTime(Date now); // Set the nextFlush variable to the initial flush time.\n\tprotected void updateFlushTime(Date now); // Update the nextFlush variable to the next flush time.\n}"}
{"index": 15363, "repo": "spring-boot-3.1.1", "des": "Interface that can be used to add or remove code that should run when the JVM is shutdown.", "code": "public interface SpringApplicationShutdownHandlers {\n\tvoid add(Runnable action); // Add an action to the handlers that will be run when the JVM exits.\n\tvoid remove(Runnable action); // Remove a previously added an action so that it no longer runs when the JVM exits.\n}"}
{"index": 13110, "repo": "spring-aop-6.0.11", "des": "Spring AOP ClassFilter implementation using AspectJ type matching.", "code": "public class TypePatternClassFilter extends Object implements ClassFilter {\n\tboolean equals(Object obj);\n\tString getTypePattern(); // Return the AspectJ type pattern to match.\n\tboolean matches(Class<?> clazz); // Should the pointcut apply to the given interface or target class?\n\tvoid setTypePattern(String typePattern); // Set the AspectJ type pattern to match.\n}"}
{"index": 13830, "repo": "spring-webmvc-6.0.11", "des": "Assist with the configuration of a chain of ViewResolver instances.", "code": "public class ViewResolverRegistry extends Object {\n\tvoid beanName(); // Register a bean name view resolver that interprets view names as the names of View beans.\n\tvoid enableContentNegotiation(boolean useNotAcceptableStatus, View... defaultViews); // Enable use of a ContentNegotiatingViewResolver to front all other configured view resolvers and select among all selected Views based on media types requested by the client (e.g.\n\tvoid enableContentNegotiation(View... defaultViews); // Enable use of a ContentNegotiatingViewResolver to front all other configured view resolvers and select among all selected Views based on media types requested by the client (e.g.\n\tUrlBasedViewResolverRegistration freeMarker(); // Register a FreeMarker view resolver with an empty default view name prefix and a default suffix of \".ftl\".\n\tprotected int getOrder();\n\tprotected List<ViewResolver> getViewResolvers();\n\tUrlBasedViewResolverRegistration groovy(); // Register a Groovy markup view resolver with an empty default view name prefix and a default suffix of \".tpl\".\n\tboolean hasRegistrations(); // Whether any view resolvers have been registered.\n\tUrlBasedViewResolverRegistration jsp(); // Register JSP view resolver using a default view name prefix of \"/WEB-INF/\" and a default suffix of \".jsp\".\n\tUrlBasedViewResolverRegistration jsp(String prefix, String suffix); // Register JSP view resolver with the specified prefix and suffix.\n\tvoid order(int order); // ViewResolver's registered through this registry are encapsulated in an instance of ViewResolverComposite and follow the order of registration.\n\tUrlBasedViewResolverRegistration scriptTemplate(); // Register a script template view resolver with an empty default view name prefix and suffix.\n\tvoid viewResolver(ViewResolver viewResolver); // Register a ViewResolver bean instance.\n}"}
{"index": 8145, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for the MonitoringStrategy interface.", "code": "Class AbstractMonitoringStrategy {\n\tprotected void deleteMessages(javax.mail.Folder folder, javax.mail.Message[] messages); // Deletes the given messages from the given folder.\n\tprotected void fetchMessages(javax.mail.Folder folder, javax.mail.Message[] messages); // Fetches the specified messages from the specified folder.\n\tint getFolderOpenMode(); // Returns the folder open mode to be used by this strategy.\n\tjavax.mail.Message[] monitor(javax.mail.Folder folder); // Monitors the given folder, and returns any new messages when they arrive.\n\tprotected javax.mail.Message[] searchForNewMessages(javax.mail.Folder folder); // Retrieves new messages from the given folder.\n\tvoid setDeleteMessages(boolean deleteMessages); // Sets whether messages should be marked as DELETED after they have been read.\n\tprotected abstract void waitForNewMessages(javax.mail.Folder folder); // Template method that blocks until new messages arrive in the given folder.\n}"}
{"index": 17863, "repo": "spring-web-6.0.11", "des": "Abstraction for accessing attribute objects associated with a request.", "code": "public interface RequestAttributes {\n\tObject getAttribute(String name, int scope); // Return the value for the scoped attribute of the given name, if any.\n\tString[] getAttributeNames(int scope); // Retrieve the names of all attributes in the scope.\n\tString getSessionId(); // Return an id for the current underlying session.\n\tObject getSessionMutex(); // Expose the best available mutex for the underlying session: that is, an object to synchronize on for the underlying session.\n\tvoid registerDestructionCallback(String name, Runnable callback, int scope); // Register a callback to be executed on destruction of the specified attribute in the given scope.\n\tvoid removeAttribute(String name, int scope); // Remove the scoped attribute of the given name, if it exists.\n\tObject resolveReference(String key); // Resolve the contextual reference for the given key, if any.\n\tvoid setAttribute(String name, Object value, int scope); // Set the value for the scoped attribute of the given name, replacing an existing value (if any).\n}"}
{"index": 3065, "repo": "tink-1.10.0", "des": "Provides secure randomness using SecureRandom.", "code": "Class Random {\n\tstatic byte[] randBytes(int size); // Returns a random byte array of size size.\n\tstatic int randInt(); // Returns a random int.\n\tstatic int randInt(int max); // Returns a random int between 0 and max-1.\n}"}
{"index": 1986, "repo": "hive-exec-4.0.0-alpha-2", "des": "The source of keys and values to put into hashtable; avoids byte copying.", "code": "Interface BytesBytesMultiHashMap.KvSource {\n\tbyte updateStateByte(Byte previousValue); // Provide updated value for state byte for a key.\n\tvoid writeKey(ByteStream.RandomAccessOutput dest); // Write key into output.\n\tvoid writeValue(ByteStream.RandomAccessOutput dest); // Write value into output.\n}"}
{"index": 18289, "repo": "tomcat-api-10.1", "des": "XAConnectionFactory is an extension of ConnectionFactory used to create connections in a transaction managed environment.", "code": "Interface XAConnectionFactory {\n\tConnection createConnection(); // Create a new Connection in an implementation specific fashion.\n\tTransactionRegistry getTransactionRegistry(); // Gets the TransactionRegistry for this connection factory which contains a the XAResource for every connection created by this factory.\n}"}
{"index": 7836, "repo": "cassandra-all-4.1.2", "des": "Static helper methods and classes for tuples.", "code": "Class Tuples {\n\tstatic boolean checkIfTupleType(AbstractType<?> tuple);\n\tstatic ColumnSpecification componentSpecOf(ColumnSpecification column, int component);\n\tstatic <T> AbstractType<?> getExactTupleTypeIfKnown(java.util.List<T> items, java.util.function.Function<T,AbstractType<?>> mapper); // Returns the exact TupleType from the items if it can be known.\n\tstatic TupleType getTupleType(AbstractType<?> tuple);\n\tstatic AssignmentTestable.TestResult testTupleAssignment(ColumnSpecification receiver, java.util.List<? extends AssignmentTestable> elements); // Tests that the tuple with the specified elements can be assigned to the specified column.\n\tstatic <T> java.lang.String tupleToString(java.lang.Iterable<T> items, java.util.function.Function<T,java.lang.String> mapper); // Create a String representation of the tuple from the specified items associated to the tuples elements.\n\tstatic java.lang.String tupleToString(java.util.List<?> elements); // Create a String representation of the tuple containing the specified elements.\n\tstatic void validateTupleAssignableTo(ColumnSpecification receiver, java.util.List<? extends AssignmentTestable> elements); // Checks if the tuple with the specified elements can be assigned to the specified column.\n}"}
{"index": 16588, "repo": "spring-beans-6.0.11", "des": "Visitor class for traversing BeanDefinition objects, in particular the property values and constructor argument values contained in them, resolving bean metadata values.", "code": "public class BeanDefinitionVisitor extends Object {\n\tprotected String resolveStringValue(String strVal); // Resolve the given String value, for example parsing placeholders.\n\tprotected Object resolveValue(Object value);\n\tprotected void visitArray(Object[] arrayVal);\n\tprotected void visitBeanClassName(BeanDefinition beanDefinition);\n\tvoid visitBeanDefinition(BeanDefinition beanDefinition); // Traverse the given BeanDefinition object and the MutablePropertyValues and ConstructorArgumentValues contained in them.\n\tprotected void visitFactoryBeanName(BeanDefinition beanDefinition);\n\tprotected void visitFactoryMethodName(BeanDefinition beanDefinition);\n\tprotected void visitGenericArgumentValues(List<ConstructorArgumentValues.ValueHolder> gas);\n\tprotected void visitIndexedArgumentValues(Map<Integer,ConstructorArgumentValues.ValueHolder> ias);\n\tprotected void visitList(List listVal);\n\tprotected void visitMap(Map<?,?> mapVal);\n\tprotected void visitParentName(BeanDefinition beanDefinition);\n\tprotected void visitPropertyValues(MutablePropertyValues pvs);\n\tprotected void visitScope(BeanDefinition beanDefinition);\n\tprotected void visitSet(Set setVal);\n}"}
{"index": 760, "repo": "ignite-core-2.15.0", "des": "Thread pool for requesting partitions from other nodes and populating local cache.", "code": "Class GridDhtPartitionDemander {\n\tvoid handleSupplyMessage(UUID nodeId, GridDhtPartitionSupplyMessage supplyMsg); // Handles supply message from nodeId with specified topicId.\n\tprotected void ownPartition(GridDhtPartitionDemander.RebalanceFuture fut, int p, UUID nodeId, GridDhtPartitionSupplyMessage supplyMsg); // Owns the partition recursively.\n\tvoid registerSupplyMessage(UUID nodeId, GridDhtPartitionSupplyMessage supplyMsg, Runnable r); // Enqueues supply message.\n}"}
{"index": 13119, "repo": "maven-settings-builder-4.0.0-alpha-7", "des": "Handles deserialization of settings from the default textual format.", "code": "@Named @Singleton public class DefaultSettingsReader extends Object implements SettingsReader {\n\tSettings read(File input, Map<String,?> options); // Reads the settings from the specified file.\n\tSettings read(InputStream input, Map<String,?> options); // Reads the settings from the specified byte stream.\n\tSettings read(Reader input, Map<String,?> options); // Reads the settings from the specified character reader.\n}"}
{"index": 3915, "repo": "hudi-client-0.6.0", "des": "Abstract Write Client providing functionality for performing commit, index updates and rollback Reused for regular write operations like upsert/insert/bulk-insert.", "code": "Class AbstractHoodieWriteClient<T extends HoodieRecordPayload> {\n\tvoid close(); // Releases any resources used by the client.\n\tboolean commit(String instantTime, org.apache.spark.api.java.JavaRDD<WriteStatus> writeStatuses); // Commit changes performed at the given instantTime marker.\n\tboolean commit(String instantTime, org.apache.spark.api.java.JavaRDD<WriteStatus> writeStatuses, Option<Map<String,String>> extraMetadata); // Commit changes performed at the given instantTime marker.\n\tboolean commitStats(String instantTime, List<HoodieWriteStat> stats, Option<Map<String,String>> extraMetadata);\n\tprotected void finalizeWrite(HoodieTable<T> table, String instantTime, List<HoodieWriteStat> stats); // Finalize Write operation.\n\tHoodieIndex<T> getIndex();\n\tHoodieMetrics getMetrics();\n\tWriteOperationType getOperationType();\n\tprotected HoodieTable getTableAndInitCtx(WriteOperationType operationType, String instantTime); // Get HoodieTable and init Timer.Context.\n\tprotected abstract void postCommit(HoodieTable<?> table, HoodieCommitMetadata metadata, String instantTime, Option<Map<String,String>> extraMetadata); // Post Commit Hook.\n\tvoid setOperationType(WriteOperationType operationType);\n}"}
{"index": 7246, "repo": "calcite-core-1.34.0", "des": "SqlNewOperator represents an SQL new specification such as NEW UDT(1, 2).", "code": "Class SqlNewOperator {\n\tboolean requiresDecimalExpansion(); // Method to check if call requires expansion when it has decimal operands.\n\tSqlNode rewriteCall(SqlValidator validator, SqlCall call); // Rewrites a call to this operator.\n}"}
{"index": 9636, "repo": "commons-math3-3.6.1", "des": "This interface represents a first order differential equations set.", "code": "Interface FirstOrderDifferentialEquations {\n\tvoid computeDerivatives(double t, double[] y, double[] yDot); // Get the current time derivative of the state vector.\n\tint getDimension(); // Get the dimension of the problem.\n}"}
{"index": 17299, "repo": "groovy-4.0.13", "des": "Allow easy integration from Groovy into Java through convenience methods.", "code": "public class Eval extends Object {\n\tstatic Object me(String expression); // Evaluates the specified String expression and returns the result.\n\tstatic Object me(String symbol, Object object, String expression); // Evaluates the specified String expression and makes the parameter available inside the script, returning the result.\n\tstatic Object x(Object x, String expression); // Evaluates the specified String expression and makes the parameter available inside the script bound to a variable named 'x', returning the result.\n\tstatic Object xy(Object x, Object y, String expression); // Evaluates the specified String expression and makes the first two parameters available inside the script bound to variables named 'x' and 'y' respectively, returning the result.\n\tstatic Object xyz(Object x, Object y, Object z, String expression); // Evaluates the specified String expression and makes the first three parameters available inside the script bound to variables named 'x', 'y', and 'z' respectively, returning the result.\n}"}
{"index": 6533, "repo": "exoplayer-core-2.9.6", "des": "Provides mapped track information for each renderer.", "code": "Class MappingTrackSelector.MappedTrackInfo {\n\tint getAdaptiveSupport(int rendererIndex, int groupIndex, boolean includeCapabilitiesExceededTracks); // Returns the extent to which a renderer supports adaptation between supported tracks in a specified TrackGroup.\n\tint getAdaptiveSupport(int rendererIndex, int groupIndex, int[] trackIndices); // Returns the extent to which a renderer supports adaptation between specified tracks within a TrackGroup.\n\tint getRendererCount(); // Returns the number of renderers.\n\tint getRendererSupport(int rendererIndex); // Returns the extent to which a renderer can play the tracks that are mapped to it.\n\tint getRendererType(int rendererIndex); // Returns the track type that the renderer at a given index handles.\n\tTrackGroupArray getTrackGroups(int rendererIndex); // Returns the TrackGroups mapped to the renderer at the specified index.\n\tint getTrackSupport(int rendererIndex, int groupIndex, int trackIndex); // Returns the extent to which an individual track is supported by the renderer.\n\tint getTypeSupport(int trackType); // Returns the extent to which tracks of a specified type are supported.\n\tTrackGroupArray getUnmappedTrackGroups(); // Returns TrackGroups not mapped to any renderer.\n}"}
{"index": 4022, "repo": "zookeeper-3.8.2", "des": "a simple wrapper to ConcurrentHashMap that recalculates a digest after each mutation.", "code": "Class NodeHashMapImpl {\n\tvoid clear(); // Clear all the items stored inside this map.\n\tSet<Map.Entry<String,DataNode>> entrySet(); // Return all the entries inside this map.\n\tDataNode get(String path); // Return the data node associated with the path.\n\tlong getDigest(); // Return the digest value.\n\tvoid postChange(String path, DataNode node); // Called after making the changes on the node, which will update the digest.\n\tvoid preChange(String path, DataNode node); // Called before we made the change on the node, which will clear the digest associated with it.\n\tDataNode put(String path, DataNode node); // Add the node into the map and update the digest with the new node.\n\tDataNode putWithoutDigest(String path, DataNode node); // Add the node into the map without update the digest.\n\tDataNode remove(String path); // Remove the path from the internal nodes map.\n\tint size(); // Return the size of the nodes stored in this map.\n}"}
{"index": 7214, "repo": "calcite-core-1.34.0", "des": "A SqlInsert is a node of a parse tree which represents an INSERT statement.", "code": "Class SqlInsert {\n\tSqlKind getKind(); // Returns the type of node this is, or SqlKind.OTHER if it's nothing special.\n\t@Nullable SqlNode getModifierNode(SqlInsertKeyword modifier);\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\tSqlNode getSource(); // Returns the source expression for the data to be inserted.\n\t@Nullable SqlNodeList getTargetColumnList(); // Returns the list of target column names, or null for all columns in the target table.\n\tSqlNode getTargetTable(); // Return the identifier for the target table of the insertion.\n\tboolean isUpsert(); // Returns whether this is an UPSERT statement.\n\tvoid setOperand(int i, @Nullable SqlNode operand); // Changes the value of an operand.\n\tvoid setSource(SqlSelect source);\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n\tvoid validate(SqlValidator validator, SqlValidatorScope scope); // Validates this call.\n}"}
{"index": 17039, "repo": "spring-integration-core-6.1.2", "des": "A message handler that suspends the thread until a message with corresponding correlation is passed into the trigger method or the timeout occurs.", "code": "public class BarrierMessageHandler extends AbstractReplyProducingMessageHandler implements MessageTriggerAction, DiscardingMessageHandler {\n\tprotected Object buildResult(Object key, org.springframework.messaging.Message<?> requestMessage, org.springframework.messaging.Message<?> releaseMessage); // Override to change the default mechanism by which the inbound and release messages are returned as a result.\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\torg.springframework.messaging.MessageChannel getDiscardChannel(); // Return the discard channel.\n\tIntegrationPatternType getIntegrationPatternType(); // Return a pattern type this component implements.\n\tprotected Object handleRequestMessage(org.springframework.messaging.Message<?> requestMessage); // Subclasses must implement this method to handle the request Message.\n\tvoid setDiscardChannel(org.springframework.messaging.MessageChannel discardChannel); // Set the channel to which late arriving trigger messages are sent.\n\tvoid setDiscardChannelName(String discardChannelName); // Set the name of the channel to which late arriving trigger messages are sent.\n\tvoid trigger(org.springframework.messaging.Message<?> message); // Take some action based on the message.\n}"}
{"index": 7076, "repo": "calcite-core-1.34.0", "des": "A RelOptRule transforms an expression into another.", "code": "Class RelOptRule {\n\tstatic RelNode convert(RelNode rel, @Nullable RelTrait toTrait); // Converts one trait of a relational expression, if it does not already have that trait.\n\tstatic RelNode convert(RelNode rel, RelTraitSet toTraits); // Converts a relation expression to a given set of traits, if it does not already have those traits.\n\tprotected static List<RelNode> convertList(List<RelNode> rels, RelTrait trait); // Converts a list of relational expressions.\n\tboolean equals(@Nullable Object obj);\n\tprotected boolean equals(RelOptRule that); // Returns whether this rule is equal to another rule.\n\tRelOptRuleOperand getOperand(); // Returns the root operand of this rule.\n\tList<RelOptRuleOperand> getOperands(); // Returns a flattened list of operands of this rule.\n\t@Nullable Convention getOutConvention(); // Returns the convention of the result of firing this rule, null if not known.\n\t@Nullable RelTrait getOutTrait(); // Returns the trait which will be modified as a result of firing this rule, or null if the rule is not a converter rule.\n\tboolean matches(RelOptRuleCall call); // Returns whether this rule could possibly match the given operands.\n\tabstract void onMatch(RelOptRuleCall call); // Receives notification about a rule match.\n}"}
{"index": 14002, "repo": "spring-retry-2.0.2", "des": "A policy, that is based on BinaryExceptionClassifier.", "code": "public class BinaryExceptionClassifierRetryPolicy extends Object implements RetryPolicy {\n\tboolean canRetry(RetryContext context);\n\tvoid close(RetryContext status);\n\tBinaryExceptionClassifier getExceptionClassifier();\n\tRetryContext open(RetryContext parent); // Acquire resources needed for the retry operation.\n\tvoid registerThrowable(RetryContext context, Throwable throwable); // Called once per retry attempt, after the callback fails.\n}"}
{"index": 4992, "repo": "commons-collections-3.2.2", "des": "Transformer implementation that always throws an exception.", "code": "Class ExceptionTransformer {\n\tstatic Transformer getInstance(); // Factory returning the singleton instance.\n\tObject transform(Object input); // Transforms the input to result by cloning it.\n}"}
{"index": 9737, "repo": "commons-math3-3.6.1", "des": "Neural network with the topology of a one-dimensional line.", "code": "Class NeuronString {\n\tdouble[] getFeatures(int i); // Retrieves the features set from the neuron at location i in the map.\n\tNetwork getNetwork(); // Retrieves the underlying network.\n\tint getSize(); // Gets the number of neurons.\n}"}
{"index": 6074, "repo": "jackson-databind-2.15.2", "des": "Simple helper class used to keep track of 'call stack' for classes being referenced (as well as unbound variables).", "code": "Class ClassStack {\n\tvoid addSelfReference(ResolvedRecursiveType ref); // Method called to indicate that there is a self-reference from deeper down in stack pointing into type this stack frame represents.\n\tClassStack child(Class<?> cls);\n\tClassStack find(Class<?> cls);\n\tvoid resolveSelfReferences(JavaType resolved); // Method called when type that this stack frame represents is fully resolved, allowing self-references to be completed (if there are any)\n}"}
{"index": 4818, "repo": "hadoop-common-3.3.4", "des": "A Filesystem that reads from HTTP endpoint.", "code": "Class HttpFileSystem {\n\tFSDataOutputStream append(Path path, int i, Progressable progressable); // Append to an existing file (optional operation).\n\tFSDataOutputStream create(Path path, FsPermission fsPermission, boolean b, int i, short i1, long l, Progressable progressable); // Create an FSDataOutputStream at the indicated Path with write-progress reporting.\n\tboolean delete(Path path, boolean b); // Delete a file.\n\tFileStatus getFileStatus(Path path); // Return a file status object that represents the path.\n\tString getScheme(); // Return the protocol scheme for this FileSystem.\n\tURI getUri(); // Returns a URI which identifies this FileSystem.\n\tPath getWorkingDirectory(); // Get the current working directory for the given FileSystem\n\tboolean hasPathCapability(Path path, String capability); // Declare that this filesystem connector is always read only.\n\tvoid initialize(URI name, Configuration conf); // Initialize a FileSystem.\n\tFileStatus[] listStatus(Path path); // List the statuses of the files/directories in the given path if the path is a directory.\n\tboolean mkdirs(Path path, FsPermission fsPermission); // Make the given file and all non-existent parents into directories.\n\tFSDataInputStream open(Path path, int bufferSize); // Opens an FSDataInputStream at the indicated Path.\n\tboolean rename(Path path, Path path1); // Renames Path src to Path dst.\n\tvoid setWorkingDirectory(Path path); // Set the current working directory for the given FileSystem.\n}"}
{"index": 1740, "repo": "kafka-clients-3.5.0", "des": "Quota callback interface for brokers that enables customization of client quota computation.", "code": "Interface ClientQuotaCallback {\n\tvoid close(); // Closes this instance.\n\tDouble quotaLimit(ClientQuotaType quotaType, Map<String,String> metricTags); // Returns the quota limit associated with the provided metric tags.\n\tMap<String,String> quotaMetricTags(ClientQuotaType quotaType, KafkaPrincipal principal, String clientId); // Quota callback invoked to determine the quota metric tags to be applied for a request.\n\tboolean quotaResetRequired(ClientQuotaType quotaType); // Returns true if any of the existing quota configs may have been updated since the last call to this method for the provided quota type.\n\tvoid removeQuota(ClientQuotaType quotaType, ClientQuotaEntity quotaEntity); // Quota configuration removal callback that is invoked when quota configuration for an entity is removed in the quorum.\n\tboolean updateClusterMetadata(Cluster cluster); // Metadata update callback that is invoked whenever UpdateMetadata request is received from the controller.\n\tvoid updateQuota(ClientQuotaType quotaType, ClientQuotaEntity quotaEntity, double newValue); // Quota configuration update callback that is invoked when quota configuration for an entity is updated in the quorum.\n}"}
{"index": 3841, "repo": "hbase-client-3.0.0-alpha-4", "des": "Optionally carries Cells across the proxy/service interface down into ipc.", "code": "Interface HBaseRpcController {\n\tint getCallTimeout();\n\tIOException getFailed(); // Return the failed exception, null if not failed.\n\tint getPriority(); // Returns The priority of this request\n\tdefault RegionInfo getRegionInfo(); // Returns Target Region's RegionInfo or null if not available or pertinent.\n\tboolean hasCallTimeout();\n\tdefault boolean hasRegionInfo(); // Returns True if this Controller is carrying the RPC target Region's RegionInfo.\n\tvoid notifyOnCancel(org.apache.hbase.thirdparty.com.google.protobuf.RpcCallback<Object> callback); // A little different from the basic RpcController: You can register multiple callbacks to an HBaseRpcController. The callback will not be called if the rpc call is finished without any cancellation. You can call me at client side also.\n\tvoid notifyOnCancel(org.apache.hbase.thirdparty.com.google.protobuf.RpcCallback<Object> callback, HBaseRpcController.CancellationCallback action); // If not cancelled, add the callback to cancellation callback list.\n\tvoid setCallTimeout(int callTimeout);\n\tvoid setCellScanner(CellScanner cellScanner); // Only used to send cells to rpc server, the returned cells should be set by setDone(CellScanner).\n\tvoid setDone(CellScanner cellScanner); // IMPORTANT: always call this method if the call finished without any exception to tell the HBaseRpcController that we are done.\n\tvoid setFailed(IOException e); // Set failed with an exception to pass on.\n\tvoid setPriority(int priority); // Set the priority for this operation.\n\tvoid setPriority(TableName tn); // Set the priority for this operation.\n}"}
{"index": 1695, "repo": "samza-api-1.8.0", "des": "A SystemAdmin implementation should implement this abstraction to support Startpoint.", "code": "Interface StartpointVisitor<IN,OUT> {\n\tdefault OUT visit(IN input, StartpointOldest startpointOldest); // Performs a sequence of operations using IN and StartpointOldest and returns the result of the execution.\n\tdefault OUT visit(IN input, StartpointSpecific startpointSpecific); // Performs a sequence of operations using IN and StartpointSpecific and returns the result of the execution.\n\tdefault OUT visit(IN input, StartpointTimestamp startpointTimestamp); // Performs a sequence of operations using IN and StartpointTimestamp and returns the result of the execution.\n\tdefault OUT visit(IN input, StartpointUpcoming startpointUpcoming); // Performs a sequence of operations using IN and StartpointUpcoming and returns the result of the execution.\n}"}
{"index": 17352, "repo": "groovy-4.0.13", "des": "Represents a property on a bean which may have a getter and/or a setter", "code": "public class MetaBeanProperty extends MetaProperty {\n\tCachedField getField(); // Gets the field of this property\n\tMetaMethod getGetter(); // Get the getter method.\n\tint getModifiers(); // Gets the visibility modifiers for the property as defined by the getter and setter methods.\n\tObject getProperty(Object object); // Get the property of the given object.\n\tMetaMethod getSetter(); // Get the setter method.\n\tvoid setField(CachedField field); // Sets the field of this property\n\tvoid setProperty(Object object, Object newValue); // Set the property on the given object to the new value.\n}"}
{"index": 2496, "repo": "exoplayer-r2.3.1", "des": "A DataSource that supports multiple URI schemes.", "code": "Class DefaultDataSource {\n\tvoid close(); // Closes the source.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to length bytes of data and stores them into buffer, starting at index offset.\n}"}
{"index": 9356, "repo": "hadoop-yarn-api-3.3.6", "des": "The request from clients to get nodes to attributes mapping in the cluster from the ResourceManager.", "code": "Class GetNodesToAttributesRequest {\n\tabstract Set<String> getHostNames(); // Get hostnames for which mapping is required.\n\tstatic GetNodesToAttributesRequest newInstance(Set<String> hostNames);\n\tabstract void setHostNames(Set<String> hostnames); // Set hostnames for which mapping is required.\n}"}
{"index": 2657, "repo": "mahout-core-14.1", "des": "Open hash map from float keys to float values.", "code": "Class OpenFloatFloatHashMap {\n\tfloat adjustOrPutValue(float key, float newValue, float incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(float key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(float value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(FloatProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(FloatFloatProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tfloat get(float key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(float key);\n\tprotected int indexOfKey(float key);\n\tprotected int indexOfValue(float value);\n\tIterator<OpenFloatFloatHashMap.MapElement> iterator();\n\tvoid keys(FloatArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(FloatFloatProcedure condition, FloatArrayList keyList, FloatArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(float key, float value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(float key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(FloatArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 18111, "repo": "spring-ws-core-4.0.5", "des": "Defines the methods for classes capable of sending and receiving WebServiceMessage instances across a transport.", "code": "public interface WebServiceMessageSender {\n\tWebServiceConnection createConnection(URI uri); // Create a new WebServiceConnection to the specified URI.\n\tboolean supports(URI uri); // Does this WebServiceMessageSender support the supplied URI?\n}"}
{"index": 18623, "repo": "tomcat-jspapi-10.1", "des": "Information for a function in a Tag Library.", "code": "Class FunctionInfo {\n\tjava.lang.String getFunctionClass(); // The class of the function.\n\tjava.lang.String getFunctionSignature(); // The signature of the function.\n\tjava.lang.String getName(); // The name of the function.\n}"}
{"index": 5310, "repo": "druid-processing-26.0.0", "des": "InputEntityReader that parses bytes into some intermediate rows first, and then into InputRows.", "code": "Class IntermediateRowParsingReader<T> {\n\tprotected CloseableIterator<T> intermediateRowIterator(); // Creates an iterator of intermediate rows.\n\tprotected CloseableIteratorWithMetadata<T> intermediateRowIteratorWithMetadata(); // Same as intermediateRowIterator, but it also contains the metadata such as the line number to generate more informative ParseException.\n\tprotected abstract List<InputRow> parseInputRows(T intermediateRow); // Parses the given intermediate row into a list of InputRows.\n\tCloseableIterator<InputRow> read();\n\tCloseableIterator<InputRowListPlusRawValues> sample();\n\tprotected InputEntity source();\n\tprotected abstract List<Map<String,Object>> toMap(T intermediateRow); // Converts the given intermediate row into a Map.\n}"}
{"index": 13450, "repo": "spring-boot-autoconfigure-3.1.1", "des": "The request matcher used to match against resource Locations.", "code": "public static final class StaticResourceRequest.StaticResourceRequestMatcher extends org.springframework.boot.security.servlet.ApplicationContextRequestMatcher<DispatcherServletPath> {\n\tStaticResourceRequest.StaticResourceRequestMatcher excluding(Set<StaticResourceLocation> locations); // Return a new StaticResourceRequest.StaticResourceRequestMatcher based on this one but excluding the specified locations.\n\tStaticResourceRequest.StaticResourceRequestMatcher excluding(StaticResourceLocation first, StaticResourceLocation... rest); // Return a new StaticResourceRequest.StaticResourceRequestMatcher based on this one but excluding the specified locations.\n\tprotected boolean ignoreApplicationContext(org.springframework.web.context.WebApplicationContext applicationContext);\n\tprotected void initialized(Supplier<DispatcherServletPath> dispatcherServletPath);\n\tprotected boolean matches(jakarta.servlet.http.HttpServletRequest request, Supplier<DispatcherServletPath> context);\n}"}
{"index": 3888, "repo": "hbase-client-3.0.0-alpha-4", "des": "Encapsulation of client-side logic to authenticate to HBase via some means over SASL.", "code": "Interface SaslClientAuthenticationProvider {\n\tdefault boolean canRetry(); // Returns true if the implementation is capable of performing some action which may allow a failed authentication to become a successful authentication.\n\tSaslClient createClient(org.apache.hadoop.conf.Configuration conf, InetAddress serverAddr, SecurityInfo securityInfo, org.apache.hadoop.security.token.Token<? extends org.apache.hadoop.security.token.TokenIdentifier> token, boolean fallbackAllowed, Map<String,String> saslProps); // Creates the SASL client instance for this auth'n method.\n\tdefault org.apache.hadoop.security.UserGroupInformation getRealUser(User ugi); // Returns the \"real\" user, the user who has the credentials being authenticated by the remote service, in the form of an UserGroupInformation object.\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.RPCProtos.UserInformation getUserInfo(User user); // Constructs a RPCProtos.UserInformation from the given UserGroupInformation\n\tdefault void relogin(); // Executes any necessary logic to re-login the client.\n}"}
{"index": 877, "repo": "ignite-core-2.15.0", "des": "Encapsulates result of VerifyBackupPartitionsDumpTask.", "code": "Class IdleVerifyDumpResult {\n\tMap<PartitionKeyV2,List<PartitionHashRecordV2>> clusterHashes();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 16240, "repo": "spring-data-cassandra-4.1.2", "des": "Cassandra Write Options are an extension to QueryOptions for write operations.", "code": "public class WriteOptions extends QueryOptions {\n\tstatic WriteOptions.WriteOptionsBuilder builder(); // Create a new WriteOptions.WriteOptionsBuilder.\n\tstatic WriteOptions empty(); // Create default WriteOptions.\n\tboolean equals(Object o);\n\tLong getTimestamp();\n\tDuration getTtl();\n\tWriteOptions.WriteOptionsBuilder mutate(); // Create a new WriteOptions.WriteOptionsBuilder to mutate properties of this WriteOptions.\n}"}
{"index": 1997, "repo": "hive-exec-4.0.0-alpha-2", "des": "ColumnStatsAutoGatherContext: This is passed to the compiler when set hive.", "code": "Class ColumnStatsAutoGatherContext {\n\tstatic boolean canRunAutogatherStats(Operator curr);\n\tBaseSemanticAnalyzer.AnalyzeRewriteContext getAnalyzeRewrite();\n\tString getCompleteName();\n\tList<LoadFileDesc> getLoadFileWork();\n\tvoid insertAnalyzePipeline(); // Generate the statement of analyze table [tablename] compute statistics for columns In non-partitioned table case, it will generate TS-SEL-GBY-RS-GBY-SEL-FS operator In static-partitioned table case, it will generate TS-FIL(partitionKey)-SEL-GBY(partitionKey)-RS-GBY-SEL-FS operator In dynamic-partitioned table case, it will generate TS-SEL-GBY(partitionKey)-RS-GBY-SEL-FS operator However, we do not need to specify the partition-spec because (1) the data is going to be inserted to that specific partition (2) we can compose the static/dynamic partition using a select operator in replaceSelectOperatorProcess.\n\tvoid insertTableValuesAnalyzePipeline(); // Generate the statement of SELECT compute_stats(col1) compute_stats(col2),..., similar to the one generated from ANALYZE TABLE t1 COMPUTE STATISTICS FOR COLUMNS, but t1 is replaced by a TABLE(VALUES(cast(null as int),cast(null as string))) AS t1(col1,col2).\n\tboolean isInsertInto();\n\tvoid setAnalyzeRewrite(BaseSemanticAnalyzer.AnalyzeRewriteContext analyzeRewrite);\n}"}
{"index": 17222, "repo": "spring-xml-4.0.5", "des": "Abstract base class for implementations of XPathOperations.", "code": "public abstract class AbstractXPathTemplate extends TransformerObjectSupport implements XPathOperations {\n\tfinal void evaluate(String expression, Source context, NodeCallbackHandler callbackHandler); // Evaluates the given expression, handling the result Node objects on a per-node basis with a NodeCallbackHandler.\n\tMap<String,String> getNamespaces(); // Returns namespaces used in the XPath expression.\n\tprotected Element getRootElement(Source source); // Returns the root element of the given source.\n\tvoid setNamespaces(Map<String,String> namespaces); // Sets namespaces used in the XPath expression.\n}"}
{"index": 18512, "repo": "hibernate-core-5.6.15.Final", "des": "Second level cache statistics of a specific region", "code": "Interface CacheRegionStatistics {\n\tlong getElementCountInMemory(); // The number of elements currently in memory within the cache provider.\n\tlong getElementCountOnDisk(); // The number of elements currently stored to disk within the cache provider.\n\tlong getHitCount(); // The number of successful cache look-ups against the region since the last Statistics clearing\n\tlong getMissCount(); // The number of unsuccessful cache look-ups against the region since the last Statistics clearing\n\tlong getPutCount(); // The number of cache puts into the region since the last Statistics clearing\n\tjava.lang.String getRegionName();\n\tlong getSizeInMemory(); // The size that the in-memory elements take up within the cache provider.\n}"}
{"index": 13808, "repo": "spring-webmvc-6.0.11", "des": "Extends InvocableHandlerMethod with the ability to handle return values through a registered HandlerMethodReturnValueHandler and also supports setting the response status based on a method-level @ResponseStatus annotation.", "code": "public class ServletInvocableHandlerMethod extends org.springframework.web.method.support.InvocableHandlerMethod {\n\tvoid invokeAndHandle(org.springframework.web.context.request.ServletWebRequest webRequest, org.springframework.web.method.support.ModelAndViewContainer mavContainer, Object... providedArgs); // Invoke the method and handle the return value through one of the configured HandlerMethodReturnValueHandlers.\n\tvoid setHandlerMethodReturnValueHandlers(org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite returnValueHandlers); // Register HandlerMethodReturnValueHandler instances to use to handle return values.\n}"}
{"index": 9607, "repo": "commons-math3-3.6.1", "des": "Class that contains the actual implementation of the functionality mandated by the ExceptionContext interface.", "code": "Class ExceptionContext {\n\tvoid addMessage(Localizable pattern, Object... arguments); // Adds a message.\n\tSet<String> getKeys(); // Gets all the keys stored in the exception\n\tString getLocalizedMessage(); // Gets the message in the default locale.\n\tString getMessage(); // Gets the default message.\n\tString getMessage(Locale locale); // Gets the message in a specified locale.\n\tString getMessage(Locale locale, String separator); // Gets the message in a specified locale.\n\tThrowable getThrowable(); // Get a reference to the exception to which the context relates.\n\tObject getValue(String key); // Gets the value associated to the given context key.\n\tvoid setValue(String key, Object value); // Sets the context (key, value) pair.\n}"}
{"index": 6736, "repo": "ratis-common-2.5.1", "des": "A collection of RetryPolicy implementations.", "code": "Interface RetryPolicies {\n\tstatic RetryPolicy noRetry(); // No retry.\n\tstatic RetryPolicy retryForeverNoSleep(); // For any requests, keep retrying forever with no sleep between attempts.\n\tstatic RetryPolicies.RetryForeverWithSleep retryForeverWithSleep(TimeDuration sleepTime); // For any requests, keep retrying forever with a fixed sleep time between attempts.\n\tstatic RetryPolicies.RetryLimited retryUpToMaximumCountWithFixedSleep(int maxAttempts, TimeDuration sleepTime); // For any requests, keep retrying a limited number of attempts with a fixed sleep time between attempts.\n}"}
{"index": 13067, "repo": "spring-aop-6.0.11", "des": "TargetSource implementation that caches a local target object, but allows the target to be swapped while the application is running.", "code": "public class HotSwappableTargetSource extends Object implements TargetSource, Serializable {\n\tboolean equals(Object other); // Two HotSwappableTargetSources are equal if the current target objects are equal.\n\tObject getTarget(); // Return a target instance.\n\tClass<?> getTargetClass(); // Return the type of the current target object.\n\tfinal boolean isStatic(); // Will all calls to TargetSource.getTarget() return the same object?\n\tvoid releaseTarget(Object target); // Release the given target object obtained from the TargetSource.getTarget() method, if any.\n\tObject swap(Object newTarget); // Swap the target, returning the old target object.\n}"}
{"index": 14998, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A Filter that processes OpenID Connect 1.0 Dynamic Client Registration (and Client Read) Requests.", "code": "public final class OidcClientRegistrationEndpointFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\tvoid setAuthenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter); // Sets the AuthenticationConverter used when attempting to extract a Client Registration Request from HttpServletRequest to an instance of OidcClientRegistrationAuthenticationToken used for authenticating the request.\n\tvoid setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler authenticationFailureHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tvoid setAuthenticationSuccessHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler authenticationSuccessHandler); // Sets the AuthenticationSuccessHandler used for handling an OidcClientRegistrationAuthenticationToken and returning the Client Registration Response.\n}"}
{"index": 13733, "repo": "spring-webmvc-6.0.11", "des": "A ResponseBodyAdvice implementation that adds support for Jackson's @JsonView annotation declared on a Spring MVC @RequestMapping or @ExceptionHandler method.", "code": "public class JsonViewResponseBodyAdvice extends AbstractMappingJacksonResponseBodyAdvice {\n\tprotected void beforeBodyWriteInternal(org.springframework.http.converter.json.MappingJacksonValue bodyContainer, org.springframework.http.MediaType contentType, org.springframework.core.MethodParameter returnType, org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response); // Invoked only if the converter type is MappingJackson2HttpMessageConverter.\n\tboolean supports(org.springframework.core.MethodParameter returnType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> converterType); // Whether this component supports the given controller method return type and the selected HttpMessageConverter type.\n}"}
{"index": 13982, "repo": "spring-webflux-6.0.11", "des": "A strategy to determine the version of a static resource and to apply and/or extract it from the URL path.", "code": "public interface VersionStrategy {\n\tString addVersion(String requestPath, String version); // Add a version to the given request path.\n\tString extractVersion(String requestPath); // Extract the resource version from the request path.\n\treactor.core.publisher.Mono<String> getResourceVersion(org.springframework.core.io.Resource resource); // Determine the version for the given resource.\n\tString removeVersion(String requestPath, String version); // Remove the version from the request path.\n}"}
{"index": 11840, "repo": "spring-kafka-3.0.9", "des": "A Serializer that delegates to other serializers based on a topic pattern.", "code": "public class DelegatingByTopicSerializer extends DelegatingByTopicSerialization<org.apache.kafka.common.serialization.Serializer<?>> implements org.apache.kafka.common.serialization.Serializer<Object> {\n\tvoid configure(Map<String,?> configs, boolean isKey);\n\tprotected org.apache.kafka.common.serialization.Serializer<?> configureDelegate(Map<String,?> configs, boolean isKey, org.apache.kafka.common.serialization.Serializer<?> delegate); // Configure the delegate.\n\tprotected boolean isInstance(Object instance); // Return true if this object is an instance of T.\n\tbyte[] serialize(String topic, Object data);\n\tbyte[] serialize(String topic, org.apache.kafka.common.header.Headers headers, Object data);\n}"}
{"index": 11807, "repo": "spring-kafka-3.0.9", "des": "An exception thrown by user code to inform the framework which record in a batch has failed.", "code": "public class BatchListenerFailedException extends KafkaException {\n\tint getIndex(); // Return the index in the batch of the failed record.\n\tString getMessage();\n\torg.apache.kafka.clients.consumer.ConsumerRecord<?,?> getRecord(); // Return the failed record.\n}"}
{"index": 3193, "repo": "hbase-common-3.0.0-alpha-4", "des": "This is a stream that will only supply bytes from its delegate up to a certain limit.", "code": "Class BoundedDelegatingInputStream {\n\tint available();\n\tint read(); // Call the delegate's read() method if the current position is less than the limit.\n\tint read(byte[] b, int off, int len); // Call the delegate's read(byte[], int, int) method if the current position is less than the limit.\n\tvoid setDelegate(InputStream in, long limit);\n\tlong skip(long len); // Call the delegate's skip(long) method.\n}"}
{"index": 2695, "repo": "mahout-core-14.1", "des": "Implements vector that only stores non-zero doubles as a pair of parallel arrays (OrderedIntDoubleMapping), one int[], one double[].", "code": "Class SequentialAccessSparseVector {\n\tSequentialAccessSparseVector clone(); // Return a copy of the recipient\n\tdouble getIteratorAdvanceCost(); // Gets an estimate of the cost (in number of operations) it takes to advance an iterator through the nonzero elements of this vector.\n\tdouble getLookupCost(); // Gets an estimate of the cost (in number of operations) it takes to lookup a random element in this vector.\n\tint getNumNondefaultElements(); // Return the number of values in the recipient which are not the default value.\n\tint getNumNonZeroElements(); // Return the number of non zero elements in the vector.\n\tdouble getQuick(int index); // Warning! This takes O(log n) time as it does a binary search behind the scenes! Only use it when STRICTLY necessary.\n\tvoid incrementQuick(int index, double increment); // Increment the value at the given index by the given value.\n\tboolean isAddConstantTime(); // Return true iff adding a new (nonzero) element takes constant time for this vector.\n\tboolean isDense(); // true if this implementation should be considered dense -- that it explicitly represents every value\n\tboolean isSequentialAccess(); // true if this implementation should be considered to be iterable in index order in an efficient way.\n\tIterator<Vector.Element> iterateNonZero(); // Iterates over all non-zero elements.\n\tIterator<Vector.Element> iterator(); // Iterates over all elements\n\tSequentialAccessSparseVector like(); // Return an empty vector of the same underlying class as the receiver\n\tVector like(int cardinality); // Return a new empty vector of the same underlying class as the receiver with given cardinality\n\tprotected Matrix matrixLike(int rows, int columns); // Subclasses must override to return an appropriately sparse or dense result\n\tvoid mergeUpdates(OrderedIntDoubleMapping updates); // Merge a set of (index, value) pairs into the vector.\n\tvoid setQuick(int index, double value); // Warning! This takes O(log n) time as it does a binary search behind the scenes! Only use it when STRICTLY necessary.\n}"}
{"index": 8725, "repo": "hadoop-yarn-common-3.3.6", "des": "Enumeration of various aggregation type of a container log.", "code": "Enum ContainerLogAggregationType {\n\tstatic ContainerLogAggregationType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ContainerLogAggregationType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 9847, "repo": "commons-math3-3.6.1", "des": "Returns the sum of the squares of the available values.", "code": "Class SumOfSquares {\n\tvoid clear(); // Clears the internal state of the Statistic\n\tSumOfSquares copy(); // Returns a copy of the statistic with the same internal state.\n\tstatic void copy(SumOfSquares source, SumOfSquares dest); // Copies source to dest.\n\tdouble evaluate(double[] values, int begin, int length); // Returns the sum of the squares of the entries in the specified portion of the input array, or Double.NaN if the designated subarray is empty.\n\tlong getN(); // Returns the number of values that have been added.\n\tdouble getResult(); // Returns the current value of the Statistic.\n\tvoid increment(double d); // Updates the internal state of the statistic to reflect the addition of the new value.\n}"}
{"index": 5347, "repo": "druid-processing-26.0.0", "des": "A \"having\" spec that always evaluates to false.", "code": "Class NeverHavingSpec {\n\tboolean eval(ResultRow row); // Evaluates if a given row satisfies the having spec.\n\tbyte[] getCacheKey(); // Get a byte array used as a cache key.\n\tvoid setQuery(GroupByQuery query); // Informs this HavingSpec that rows passed to \"eval\" will originate from a particular groupBy query.\n}"}
{"index": 13643, "repo": "spring-webmvc-6.0.11", "des": "Abstract superclass for Atom Feed views, using the ROME package.", "code": "public abstract class AbstractAtomFeedView extends AbstractFeedView<com.rometools.rome.feed.atom.Feed> {\n\tprotected final void buildFeedEntries(Map<String,Object> model, com.rometools.rome.feed.atom.Feed feed, HttpServletRequest request, HttpServletResponse response); // Invokes buildFeedEntries(Map, HttpServletRequest, HttpServletResponse) to get a list of feed entries.\n\tprotected abstract List<com.rometools.rome.feed.atom.Entry> buildFeedEntries(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Subclasses must implement this method to build feed entries, given the model.\n\tprotected com.rometools.rome.feed.atom.Feed newFeed(); // Create a new Feed instance to hold the entries.\n\tvoid setFeedType(String feedType); // Set the Rome feed type to use.\n}"}
{"index": 63, "repo": "spring-yarn-boot-2.5.0.RELEASE", "des": "Generic Spring Yarn Boot application handling reporting.", "code": "Class YarnInfoApplication {\n\tprotected String getInstalledReport(ApplicationContext context); // Build the report for installed applications.\n\tprotected String getSubmittedReport(org.springframework.yarn.client.YarnClient client, boolean verbose, String type, Map<String,String> headers); // Build the report for submitted applications.\n\tprotected YarnInfoApplication getThis(); // Gets the instance of this defined by a sub-class.\n\tString run(); // Run a SpringApplication build by a SpringApplicationBuilder using an empty args.\n\tString run(String... args); // Run a SpringApplication build by a SpringApplicationBuilder.\n}"}
{"index": 14249, "repo": "wicket-core-10.0.0-M1", "des": "Default implementation of the IHeaderResponse interface.", "code": "public abstract class HeaderResponse extends Object implements IHeaderResponse {\n\tvoid close(); // Mark Header rendering is completed and subsequent usage will be ignored.\n\tprotected abstract org.apache.wicket.request.Response getRealResponse(); // Once the HeaderResponse is closed, no output may be written to it anymore.\n\tfinal org.apache.wicket.request.Response getResponse(); // Returns the response that can be used to write arbitrary text to the head section.\n\tboolean isClosed();\n\tprotected void markItemRendered(HeaderItem item);\n\tvoid markRendered(Object object); // Marks the given object as rendered.\n\tvoid render(HeaderItem item); // Renders the given HeaderItem to the response if none of its tokens has been rendered before.\n\tprotected boolean wasItemRendered(HeaderItem item);\n\tboolean wasRendered(Object object); // Returns whether the given object has been marked as rendered.\n}"}
{"index": 4859, "repo": "hadoop-common-3.3.4", "des": "A polymorphic Writable that writes an instance with it's class name.", "code": "Class ObjectWritable {\n\tObject get(); // Return the instance, or null if none.\n\tConfiguration getConf(); // Return the configuration used by this object.\n\tClass getDeclaredClass(); // Return the class this is meant to be.\n\tstatic Class<?> loadClass(Configuration conf, String className); // Find and load the class with given name className by first finding it in the specified conf.\n\tvoid readFields(DataInput in); // Deserialize the fields of this object from in.\n\tstatic Object readObject(DataInput in, Configuration conf); // Read a Writable, String, primitive type, or an array of the preceding.\n\tstatic Object readObject(DataInput in, ObjectWritable objectWritable, Configuration conf); // Read a Writable, String, primitive type, or an array of the preceding.\n\tvoid set(Object instance); // Reset the instance.\n\tvoid setConf(Configuration conf); // Set the configuration to be used by this object.\n\tvoid write(DataOutput out); // Serialize the fields of this object to out.\n\tstatic void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf); // Write a Writable, String, primitive type, or an array of the preceding.\n\tstatic void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays); // Write a Writable, String, primitive type, or an array of the preceding.\n}"}
{"index": 18343, "repo": "opencms-core-15.0", "des": "Action element for edit provider includes.", "code": "Class CmsEditProviderActionElement {\n\tjava.lang.String export(); // Returns the serialized data for the core provider wrapped in a script tag.\n\tjava.lang.String exportAll(); // Returns the serialized data for the core provider.\n}"}
{"index": 8155, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for standalone, server-side transport objects.", "code": "Class AbstractStandaloneMessageReceiver {\n\tvoid activate(); // Initialize this server.\n\tvoid afterPropertiesSet(); // Calls activate() when the BeanFactory initializes the receiver instance.\n\tvoid destroy(); // Calls shutdown() when the BeanFactory destroys the receiver instance.\n\tboolean isActive(); // Return whether this server is currently active, that is, whether it has been set up but not shut down yet.\n\tboolean isRunning(); // Return whether this server is currently running, that is, whether it has been started and not stopped yet.\n\tprotected abstract void onActivate(); // Template method invoked when activate() is invoked.\n\tprotected abstract void onShutdown(); // Template method invoked when shutdown() is invoked.\n\tprotected abstract void onStart(); // Template method invoked when start() is invoked.\n\tprotected abstract void onStop(); // Template method invoked when stop() is invoked.\n\tvoid setAutoStartup(boolean autoStartup); // Set whether to automatically start the receiver after initialization.\n\tvoid shutdown(); // Shut down this server.\n\tvoid start(); // Start this server.\n\tvoid stop(); // Stop this server.\n}"}
{"index": 382, "repo": "phoenix-core-5.1.3", "des": "Implementation for tracking PhoenixTTLRegionObserver metrics.", "code": "Class MetricsPhoenixTTLSourceImpl {\n\tlong getDeleteExpiredRequestCount(); // Report the number of requests to mask TTL expired rows.\n\tlong getMaskExpiredRequestCount(); // Report the number of requests to mask TTL expired rows.\n\tvoid incrementDeleteExpiredRequestCount(); // Keeps track of the number of requests to delete TTL expired rows.\n\tvoid incrementMaskExpiredRequestCount(); // Keeps track of the number of requests to mask TTL expired rows.\n}"}
{"index": 8005, "repo": "commons-jcs3-core-3.1", "des": "A JCS IMemoryCache that has SoftReference to all its values.", "code": "Class SoftReferenceMemoryCache<K,V> {\n\tConcurrentMap<K,MemoryElementDescriptor<K,V>> createMap(); // Children must implement this method.\n\tint freeElements(int numberToFree); // This can't be implemented.\n\tSet<K> getKeySet(); // Get an Array of the keys for all elements in the memory cache\n\tint getSize(); // Returns the current cache size.\n\tIStats getStatistics(); // Returns the historical and statistical data for a region's memory cache.\n\tvoid initialize(CompositeCache<K,V> hub); // For post reflection creation initialization\n\tprotected void lockedGetElement(MemoryElementDescriptor<K,V> me); // Update control structures after get (guarded by the lock)\n\tprotected void lockedRemoveAll(); // Removes all cached items from the cache control structures.\n\tprotected void lockedRemoveElement(MemoryElementDescriptor<K,V> me); // Remove element from control structure (guarded by the lock)\n\tvoid update(ICacheElement<K,V> ce); // Puts an item to the cache.\n}"}
{"index": 15727, "repo": "camel-api-4.0.0-RC1", "des": "An advice (before and after) to execute cross cutting functionality in the Camel routing engine.", "code": "public interface CamelInternalProcessorAdvice<T> {\n\tvoid after(Exchange exchange, T data); // Callback executed after processing a step in the route.\n\tT before(Exchange exchange); // Callback executed before processing a step in the route.\n\tdefault boolean hasState(); // Whether this advice has state or not.\n}"}
{"index": 6286, "repo": "commons-codec-1.16.0", "des": "Abstract superclass for Base-N input streams.", "code": "Class BaseNCodecInputStream {\n\tint available();\n\tboolean isStrictDecoding(); // Returns true if decoding behavior is strict.\n\tvoid mark(int readLimit); // Marks the current position in this input stream.\n\tboolean markSupported();\n\tint read(); // Reads one byte from this input stream.\n\tint read(byte[] array, int offset, int len); // Attempts to read len bytes into the specified b array starting at offset from this InputStream.\n\tvoid reset(); // Repositions this stream to the position at the time the mark method was last called on this input stream.\n\tlong skip(long n);\n}"}
{"index": 5782, "repo": "hive-service-4.0.0-alpha-2", "des": "An exception that provides information on a Hive access error or other errors.", "code": "Class HiveSQLException {\n\tTStatus toTStatus(); // Converts current object to a TStatus object.\n\tstatic TStatus toTStatus(Exception e); // Converts the specified Exception object into a TStatus object.\n}"}
{"index": 14226, "repo": "wicket-core-10.0.0-M1", "des": "OnChangeAjaxBehavior that streams back to server properties of the selected file(s) (at client side), before uploading it (them).", "code": "public abstract class FilesSelectedBehavior extends OnChangeAjaxBehavior {\n\tprotected void onBind(); // Subclasses should call super.onBind()\n\tprotected abstract void onSelected(AjaxRequestTarget target, List<FileDescription> fileDescriptions); // Called when a file, at client side is selected.\n\tstatic FilesSelectedBehavior onSelected(org.danekja.java.util.function.serializable.SerializableBiConsumer<AjaxRequestTarget,List<FileDescription>> select); // Creates an FilesSelectedBehavior based on lambda expressions\n\tprotected void onUpdate(AjaxRequestTarget target); // Listener invoked on the ajax request.\n\tvoid renderHead(Component component, IHeaderResponse response); // Render to the web response whatever the component wants to contribute to the head section.\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes); // Gives a chance to the specializations to modify the attributes.\n}"}
{"index": 13636, "repo": "slf4j-ext-2.0.7", "des": "Builder provides a flexible way of configuring some of many options on the parent class instead of providing many constructors.", "code": "public static class LogTransformer.Builder extends Object {\n\tLogTransformer.Builder addEntryExit(boolean b); // Should each method log entry (with parameters) and exit (with parameters and return value)?\n\tLogTransformer build(); // Build and return the LogTransformer corresponding to the options set in this Builder.\n\tLogTransformer.Builder ignore(String[] strings);\n\tLogTransformer.Builder level(String level);\n\tLogTransformer.Builder verbose(boolean b); // Should LogTransformer be verbose in what it does? This currently list the names of the classes being processed.\n}"}
{"index": 225, "repo": "commons-collections4-4.4", "des": "Iterates backwards through a List, starting with the last element and continuing to the first.", "code": "Class ReverseListIterator<E> {\n\tvoid add(E obj); // Adds a new element to the list between the next and previous elements.\n\tboolean hasNext(); // Checks whether there is another element.\n\tboolean hasPrevious(); // Checks whether there is a previous element.\n\tE next(); // Gets the next element.\n\tint nextIndex(); // Gets the index of the next element.\n\tE previous(); // Gets the previous element.\n\tint previousIndex(); // Gets the index of the previous element.\n\tvoid remove(); // Removes the last returned element.\n\tvoid reset(); // Resets the iterator back to the start (which is the end of the list as this is a reversed iterator)\n\tvoid set(E obj); // Replaces the last returned element.\n}"}
{"index": 10920, "repo": "spring-data-redis-3.1.2", "des": "IndexResolver implementation considering properties annotated with Indexed or paths set up in IndexConfiguration.", "code": "public class PathIndexResolver extends Object implements IndexResolver {\n\tprotected Set<IndexedData> resolveIndex(String keyspace, String propertyPath, PersistentProperty<?> property, Object value);\n\tSet<IndexedData> resolveIndexesFor(String keyspace, String path, TypeInformation<?> typeInformation, Object value); // Resolves all indexes for given type information / value combination.\n\tSet<IndexedData> resolveIndexesFor(TypeInformation<?> typeInformation, Object value); // Resolves all indexes for given type information / value combination.\n}"}
{"index": 819, "repo": "ignite-core-2.15.0", "des": "Listener passed in to the GridNioServer that will be notified on client events.", "code": "Interface GridNioServerListener<T> {\n\tvoid onConnected(GridNioSession ses); // This method is called whenever a new client is connected and session is created.\n\tvoid onDisconnected(GridNioSession ses, @Nullable Exception e); // This method is called whenever client is disconnected due to correct connection close or due to IOException during network operations.\n\tvoid onFailure(FailureType failureType, Throwable failure); // Called when critical failure occurs in server implementation.\n\tvoid onMessage(GridNioSession ses, T msg); // This method is called whenever a GridNioParser returns non-null value.\n\tvoid onMessageSent(GridNioSession ses, T msg); // Handle message sent.\n\tvoid onSessionIdleTimeout(GridNioSession ses); // Called when session did not receive any activity within timeout interval.\n\tvoid onSessionWriteTimeout(GridNioSession ses); // Called when session has non-empty write queue and server did not send any data within timeout interval.\n}"}
{"index": 11340, "repo": "spring-context-6.0.11", "des": "Enumeration of the type filters that may be used in conjunction with @ComponentScan.", "code": "public enum FilterType extends Enum<FilterType> {\n\tstatic FilterType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic FilterType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 17805, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read and write JSON using Jackson 2.x's ObjectMapper.", "code": "public class MappingJackson2HttpMessageConverter extends AbstractJackson2HttpMessageConverter {\n\tprotected List<MediaType> getMediaTypesForProblemDetail(); // Return the supported media type(s) for ProblemDetail.\n\tvoid setJsonPrefix(String jsonPrefix); // Specify a custom prefix to use for this view's JSON output.\n\tvoid setPrefixJson(boolean prefixJson); // Indicate whether the JSON output by this view should be prefixed with \")]}', \".\n\tprotected void writePrefix(JsonGenerator generator, Object object); // Write a prefix before the main content.\n}"}
{"index": 8216, "repo": "spring-ws-3.0.10.RELEASE", "des": "Collection of utility methods to work with JMS transports.", "code": "Class JmsTransportUtils {\n\tstatic void addHeader(javax.jms.Message message, String name, String value); // Adds the given header to the specified message.\n\tstatic int getDeliveryMode(URI uri); // Returns the delivery mode of the given URI.\n\tstatic String getDestinationName(URI uri); // Returns the destination name of the given URI.\n\tstatic Iterator<String> getHeaderNames(javax.jms.Message message); // Returns an iterator over all header names in the given message.\n\tstatic Iterator<String> getHeaders(javax.jms.Message message, String name); // Returns an iterator over all the header values of the given message and header name.\n\tstatic int getMessageType(URI uri); // Returns the message type of the given URI.\n\tstatic int getPriority(URI uri); // Returns the priority of the given URI.\n\tstatic String getReplyToName(URI uri); // Returns the reply-to name of the given URI.\n\tstatic long getTimeToLive(URI uri); // Returns the lifetime, in milliseconds, of the given URI.\n\tstatic String headerToJmsProperty(String headerName); // Converts the given transport header to a JMS property name.\n\tstatic String jmsPropertyToHeader(String propertyName); // Converts the given JMS property name to a transport header name.\n\tstatic URI toUri(javax.jms.Destination destination); // Converts the given JMS destination into a jms URI.\n}"}
{"index": 6594, "repo": "exoplayer-core-2.9.6", "des": "Base class for SubtitleDecoder output buffers.", "code": "Class SubtitleOutputBuffer {\n\tvoid clear(); // Clears the buffer.\n\tjava.util.List<Cue> getCues(long timeUs); // Retrieve the cues that should be displayed at a given time.\n\tlong getEventTime(int index); // Returns the event time at a specified index.\n\tint getEventTimeCount(); // Returns the number of event times, where events are defined as points in time at which the cues returned by Subtitle.getCues(long) changes.\n\tint getNextEventTimeIndex(long timeUs); // Returns the index of the first event that occurs after a given time (exclusive).\n\tabstract void release(); // Releases the output buffer for reuse.\n\tvoid setContent(long timeUs, Subtitle subtitle, long subsampleOffsetUs); // Sets the content of the output buffer, consisting of a Subtitle and associated metadata.\n}"}
{"index": 2220, "repo": "hive-exec-4.0.0-alpha-2", "des": "A generic, re-usable histogram class that supports partial aggregations.", "code": "Class NumericHistogram {\n\tvoid add(double v); // Adds a new data point to the histogram approximation.\n\tvoid allocate(int num_bins); // Sets the number of histogram bins to use for approximating data.\n\torg.apache.hadoop.hive.ql.udf.generic.NumericHistogram.Coord getBin(int b); // Returns a particular histogram bin.\n\tint getNumBins();\n\tint getUsedBins(); // Returns the number of bins currently being used by the histogram.\n\tboolean isReady(); // Returns true if this histogram object has been initialized by calling merge() or allocate().\n\tint lengthFor(JavaDataModel model);\n\tvoid merge(List other, DoubleObjectInspector doi); // Takes a serialized histogram created by the serialize() method and merges it with the current histogram object.\n\tdouble quantile(double q); // Gets an approximate quantile value from the current histogram.\n\tvoid reset(); // Resets a histogram object to its initial state.\n\tArrayList<DoubleWritable> serialize(); // In preparation for a Hive merge() call, serializes the current histogram object into an ArrayList of DoubleWritable objects.\n}"}
{"index": 1535, "repo": "pdfbox-3.0.0-beta1", "des": "A gamma array, or collection of three floating point parameters used for color operations.", "code": "Class PDGamma {\n\tfloat getB(); // Returns the b value of the tristimulus.\n\tCOSArray getCOSArray(); // Convert this standard java object to a COS object.\n\tCOSBase getCOSObject(); // Convert this standard java object to a COS object.\n\tfloat getG(); // Returns the g value of the tristimulus.\n\tfloat getR(); // Returns the r value of the tristimulus.\n\tvoid setB(float b); // Sets the b value of the tristimulus.\n\tvoid setG(float g); // Sets the g value of the tristimulus.\n\tvoid setR(float r); // Sets the r value of the tristimulus.\n}"}
{"index": 17183, "repo": "spring-integration-core-6.1.2", "des": "A Channel Adapter implementation for connecting a MessageSource to a MessageChannel.", "code": "public class SourcePollingChannelAdapter extends AbstractPollingEndpoint implements TrackableComponent {\n\tprotected void doStart(); // Subclasses must implement this method with the start behavior.\n\tprotected void doStop(); // Subclasses must implement this method with the stop behavior.\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tMessageSource<?> getMessageSource(); // Return this endpoint's source.\n\torg.springframework.messaging.MessageChannel getOutputChannel();\n\tprotected Object getReceiveMessageSource();\n\tprotected String getResourceKey(); // Return the key under which the resource will be made available as an attribute on the IntegrationResourceHolder.\n\tprotected Object getResourceToBind(); // Return a resource (MessageSource etc.) to bind when using transaction synchronization.\n\tprotected void handleMessage(org.springframework.messaging.Message<?> messageArg); // Handle a message.\n\tprotected boolean isReactive();\n\tprotected void onInit(); // Subclasses may implement this for initialization logic.\n\tprotected org.springframework.messaging.Message<?> receiveMessage(); // Obtain the next message (if one is available).\n\tvoid setOutputChannel(org.springframework.messaging.MessageChannel outputChannel); // Specify the MessageChannel where Messages should be sent.\n\tvoid setOutputChannelName(String outputChannelName);\n\tprotected final void setReceiveMessageSource(Object source);\n\tvoid setSendTimeout(long sendTimeout); // Specify the maximum time to wait for a Message to be sent to the output channel.\n\tvoid setShouldTrack(boolean shouldTrack); // Specify whether this component should be tracked in the Message History.\n\tvoid setSource(MessageSource<?> source); // Specify the source to be polled for Messages.\n}"}
{"index": 6316, "repo": "mina-core-3.0.0-M2", "des": "Implementation for the socket session configuration.", "code": "Class DefaultTcpSessionConfig {\n\tInteger getSoLinger(); // Please note that enabling SO_LINGER in Java NIO can result in platform-dependent behavior and unexpected blocking of I/O thread.\n\tSSLContext getSslContext();\n\tBoolean isKeepAlive();\n\tBoolean isOobInline();\n\tboolean isSecured(); // Tells if the session provides some encryption (SSL/TLS)\n\tBoolean isTcpNoDelay();\n\tvoid setKeepAlive(boolean keepAlive);\n\tvoid setOobInline(boolean oobInline);\n\tvoid setSoLinger(int soLinger); // Please note that enabling SO_LINGER in Java NIO can result in platform-dependent behavior and unexpected blocking of I/O thread.\n\tvoid setSslContext(SSLContext sslContext); // Inject a SSLContex valid for the session.\n\tvoid setTcpNoDelay(boolean tcpNoDelay);\n}"}
{"index": 8618, "repo": "avro-1.11.2", "des": "Implements DEFLATE (RFC1951) compression and decompression.", "code": "Class DeflateCodec {\n\tByteBuffer compress(ByteBuffer data); // Compresses the input data\n\tByteBuffer decompress(ByteBuffer data); // Decompress the data\n\tboolean equals(Object obj); // Codecs must implement an equals() method.\n\tString getName(); // Name of the codec; written to the file's metadata.\n}"}
{"index": 2793, "repo": "tika-parsers-1.28.5", "des": "Represents a comments in ID3 (especially ID3 v2), where are made up of several parts.", "code": "Class ID3Tags.ID3Comment {\n\tString getDescription(); // Gets the description, if present\n\tString getLanguage(); // Gets the language, if present\n\tString getText(); // Gets the text, if present\n}"}
{"index": 15311, "repo": "spring-boot-3.1.1", "des": "The result of a callback which may be a value, null or absent entirely if the callback wasn't suitable.", "code": "public static final class LambdaSafe.InvocationResult<R> extends Object {\n\tR get(); // Return the result of the invocation or null if the callback wasn't suitable.\n\tR get(R fallback); // Return the result of the invocation or the given fallback if the callback wasn't suitable.\n\tboolean hasResult(); // Return true if a result in present.\n\tstatic <R> LambdaSafe.InvocationResult<R> noResult(); // Return an LambdaSafe.InvocationResult instance representing no result.\n\tstatic <R> LambdaSafe.InvocationResult<R> of(R value); // Create a new LambdaSafe.InvocationResult instance with the specified value.\n}"}
{"index": 15809, "repo": "camel-api-4.0.0-RC1", "des": "Implementations support navigating a graph where you can traverse forward and each next returns a List of outputs of type T that can contain 0..n nodes.", "code": "public interface Navigate<T> {\n\tboolean hasNext(); // Are there more outputs?\n\tList<T> next(); // Next group of outputs\n}"}
{"index": 12338, "repo": "jena-core-4.9.0", "des": "This interface represents the Model Group schema component.", "code": "public interface XSModelGroup extends XSTerm {\n\tXSAnnotation getAnnotation(); // An annotation if it exists, otherwise null.\n\tXSObjectList getAnnotations(); // A sequence of [annotations] or an empty XSObjectList.\n\tshort getCompositor(); // [compositor]: one of all, choice or sequence.\n\tXSObjectList getParticles(); // A list of [particles] if it exists, otherwise an empty XSObjectList.\n}"}
{"index": 10988, "repo": "spring-data-redis-3.1.2", "des": "Configuration class used for setting up RedisConnection via RedisConnectionFactory using connecting to a single node Redis installation.", "code": "public class RedisStandaloneConfiguration extends Object implements RedisConfiguration, RedisConfiguration.WithHostAndPort, RedisConfiguration.WithPassword, RedisConfiguration.WithDatabaseIndex {\n\tboolean equals(Object o);\n\tint getDatabase(); // Get the database index to use.\n\tString getHostName();\n\tRedisPassword getPassword(); // Get the RedisPassword to use when connecting.\n\tint getPort(); // Get the Redis server port.\n\tString getUsername(); // Get the username to use when connecting.\n\tvoid setDatabase(int index); // Set the database index to use.\n\tvoid setHostName(String hostName); // Set the Redis server hostname\n\tvoid setPassword(RedisPassword password); // Create and set a RedisPassword for given String.\n\tvoid setPort(int port); // Set the Redis server port.\n\tvoid setUsername(String username); // Create and set a username with the given String.\n}"}
{"index": 12605, "repo": "maven-embedder-4.0.0-alpha-7", "des": "Adapt an SLF4J logger to a Plexus logger, ignoring Plexus logger API parts that are not classical and probably not really used.", "code": "public class Slf4jLogger extends Object implements org.codehaus.plexus.logging.Logger {\n\tvoid debug(String message);\n\tvoid debug(String message, Throwable throwable);\n\tvoid error(String message);\n\tvoid error(String message, Throwable throwable);\n\tvoid fatalError(String message);\n\tvoid fatalError(String message, Throwable throwable);\n\torg.codehaus.plexus.logging.Logger getChildLogger(String name); // Warning: ignored (always return null).\n\tString getName();\n\tint getThreshold(); // Warning: ignored (always return 0 == Logger.LEVEL_DEBUG).\n\tvoid info(String message);\n\tvoid info(String message, Throwable throwable);\n\tboolean isDebugEnabled();\n\tboolean isErrorEnabled();\n\tboolean isFatalErrorEnabled();\n\tboolean isInfoEnabled();\n\tboolean isWarnEnabled();\n\tvoid setThreshold(int threshold); // Warning: ignored.\n\tvoid warn(String message);\n\tvoid warn(String message, Throwable throwable);\n}"}
{"index": 15752, "repo": "camel-api-4.0.0-RC1", "des": "To apply custom configurations to DataFormat instances.", "code": "@FunctionalInterface public interface DataFormatCustomizer extends Ordered {\n\tstatic DataFormatCustomizer.Builder<DataFormat> builder(); // Create a generic DataFormatCustomizer.Builder.\n\tstatic <T extends DataFormat>DataFormatCustomizer.Builder<T> builder(Class<T> type); // Create a typed DataFormatCustomizer.Builder that can process a concrete data format type instance.\n\tvoid configure(String name, DataFormat target); // Customize the specified DataFormat.\n\tstatic <T extends DataFormat>DataFormatCustomizer forType(Class<T> type, org.apache.camel.util.function.ThrowingConsumer<T,Exception> consumer); // Create a DataFormatCustomizer that can process a concrete data format type instance.\n\tdefault int getOrder(); // Gets the order.\n\tdefault boolean isEnabled(String name, DataFormat target); // Checks whether this customizer should be applied to the given DataFormat.\n}"}
{"index": 16996, "repo": "spring-data-r2dbc-3.1.2", "des": "Base class for reactive RepositoryQuery implementations for R2DBC.", "code": "public abstract class AbstractR2dbcQuery extends Object implements RepositoryQuery {\n\tprotected abstract reactor.core.publisher.Mono<PreparedOperation<?>> createQuery(RelationalParameterAccessor accessor); // Creates a BindableQuery instance using the given ParameterAccessor\n\tObject execute(Object[] parameters);\n\tR2dbcQueryMethod getQueryMethod();\n\tprotected abstract boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected abstract boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected abstract boolean isModifyingQuery(); // Returns whether this query is a modifying one.\n}"}
{"index": 15874, "repo": "camel-api-4.0.0-RC1", "des": "Recording state of steps during startup to capture execution time, and being able to emit events to diagnostic tools such as Java Flight Recorder.", "code": "public interface StartupStep {\n\tvoid endStep(); // Ends the step.\n\tlong getBeginTime(); // Gets the begin time (optional).\n\tString getDescription(); // Description of the step\n\tint getId(); // The id of the step\n\tint getLevel(); // The step level (sub step of previous steps)\n\tString getName(); // Name of the step\n\tint getParentId(); // The id of the parent step\n\tString getType(); // The source class type of the step\n}"}
{"index": 18789, "repo": "lucene-core-9.7.0", "des": "This exception is thrown when Lucene detects an inconsistency in the index.", "code": "Class CorruptIndexException {\n\tString getOriginalMessage(); // Returns the original exception message without the corrupted file description.\n\tString getResourceDescription(); // Returns a description of the file that was corrupted\n}"}
{"index": 5197, "repo": "druid-processing-26.0.0", "des": "A BufferAggregator that delegates everything.", "code": "Class DelegatingBufferAggregator {\n\tvoid aggregate(ByteBuffer buf, int position); // Aggregates metric values into the given aggregate byte representation Implementations of this method must read in the aggregate value from the buffer at the given position, aggregate the next element of data and write the updated aggregate value back into the buffer.\n\tvoid close(); // Release any resources used by the aggregator\n\tObject get(ByteBuffer buf, int position); // Returns the intermediate object representation of the given aggregate.\n\tdouble getDouble(ByteBuffer buf, int position); // Returns the double representation of the given aggregate byte array Converts the given byte buffer representation into the intermediate aggregate value.\n\tfloat getFloat(ByteBuffer buf, int position); // Returns the float representation of the given aggregate byte array Converts the given byte buffer representation into the intermediate aggregate value.\n\tlong getLong(ByteBuffer buf, int position); // Returns the long representation of the given aggregate byte array Converts the given byte buffer representation into the intermediate aggregate value.\n\tvoid init(ByteBuffer buf, int position); // Initializes the buffer location Implementations of this method must initialize the byte buffer at the given position Implementations must not change the position, limit or mark of the given buffer This method must not exceed the number of bytes returned by AggregatorFactory.getMaxIntermediateSizeWithNulls() in the corresponding AggregatorFactory\n\tvoid inspectRuntimeShape(RuntimeShapeInspector inspector); // Implementations of this method should call inspector.visit() with all fields of this class, which meet two conditions: 1.\n\tboolean isNull(ByteBuffer buf, int position); // returns true if aggregator's output type is primitive long/double/float and aggregated value is null, but when aggregated output type is Object, this method always returns false, and users are advised to check nullability for the object returned by BufferAggregator.get(ByteBuffer, int) method.\n\tvoid relocate(int oldPosition, int newPosition, ByteBuffer oldBuffer, ByteBuffer newBuffer); // Relocates any cached objects.\n}"}
{"index": 9344, "repo": "hadoop-yarn-api-3.3.6", "des": "The request from clients to get node to attribute value mapping for all or given set of Node AttributeKey's in the cluster from the ResourceManager.", "code": "Class GetAttributesToNodesRequest {\n\tabstract Set<NodeAttributeKey> getNodeAttributes(); // Get node attributeKeys for which mapping of hostname to attribute value is required.\n\tstatic GetAttributesToNodesRequest newInstance();\n\tstatic GetAttributesToNodesRequest newInstance(Set<NodeAttributeKey> attributes);\n\tabstract void setNodeAttributes(Set<NodeAttributeKey> attributes); // Set node attributeKeys for which the mapping of hostname to attribute value is required.\n}"}
{"index": 3309, "repo": "hbase-common-3.0.0-alpha-4", "des": "Context that holds the dictionary for Tag compression and doing the compress/uncompress.", "code": "Class TagCompressionContext {\n\tvoid clear();\n\tvoid compressTags(OutputStream out, byte[] in, int offset, int length); // Compress tags one by one and writes to the OutputStream.\n\tvoid compressTags(OutputStream out, ByteBuffer in, int offset, int length); // Compress tags one by one and writes to the OutputStream.\n\tint uncompressTags(ByteBuff src, byte[] dest, int offset, int length); // Uncompress tags from the input ByteBuffer and writes to the destination array.\n\tvoid uncompressTags(InputStream src, byte[] dest, int offset, int length); // Uncompress tags from the InputStream and writes to the destination array.\n\tvoid uncompressTags(InputStream src, ByteBuffer dest, int length); // Uncompress tags from the InputStream and writes to the destination buffer.\n}"}
{"index": 6347, "repo": "curator-framework-5.5.0", "des": "Holds the result of one transactional operation.", "code": "Class CuratorTransactionResult {\n\tint getError(); // Returns the operation generated error or 0 i.e.\n\tString getForPath(); // Returns the path that was passed to the operation when added\n\tString getResultPath(); // Returns the operation generated path or null.\n\torg.apache.zookeeper.data.Stat getResultStat(); // Returns the operation generated stat or null.\n\tOperationType getType(); // Returns the operation type\n\tstatic com.google.common.base.Predicate<CuratorTransactionResult> ofTypeAndPath(OperationType type, String forPath); // Utility that can be passed to Google Guava to find a particular result.\n}"}
{"index": 5094, "repo": "commons-collections-3.2.2", "des": "Red-Black tree-based implementation of BidiMap where all objects added implement the Comparable interface.", "code": "Class TreeBidiMap {\n\tvoid clear(); // Removes all mappings from this map.\n\tboolean containsKey(Object key); // Checks whether this map contains the a mapping for the specified key.\n\tboolean containsValue(Object value); // Checks whether this map contains the a mapping for the specified value.\n\tSet entrySet(); // Returns a set view of the entries contained in this map in key order.\n\tboolean equals(Object obj); // Compares for equals as per the API.\n\tObject firstKey(); // Gets the first (lowest) key currently in this map.\n\tObject get(Object key); // Gets the value to which this map maps the specified key.\n\tObject getKey(Object value); // Returns the key to which this map maps the specified value.\n\tBidiMap inverseBidiMap(); // Gets the inverse map for comparison.\n\tOrderedBidiMap inverseOrderedBidiMap(); // Gets the inverse map for comparison.\n\tboolean isEmpty(); // Checks whether the map is empty or not.\n\tSet keySet(); // Returns a set view of the keys contained in this map in key order.\n\tObject lastKey(); // Gets the last (highest) key currently in this map.\n\tMapIterator mapIterator(); // Gets an iterator over the map entries.\n\tObject nextKey(Object key); // Gets the next key after the one specified.\n\tOrderedMapIterator orderedMapIterator(); // Gets an ordered iterator over the map entries.\n\tObject previousKey(Object key); // Gets the previous key before the one specified.\n\tObject put(Object key, Object value); // Puts the key-value pair into the map, replacing any previous pair.\n\tvoid putAll(Map map); // Puts all the mappings from the specified map into this map.\n\tObject remove(Object key); // Removes the mapping for this key from this map if present.\n\tObject removeValue(Object value); // Removes the mapping for this value from this map if present.\n\tint size(); // Returns the number of key-value mappings in this map.\n\tCollection values(); // Returns a set view of the values contained in this map in key order.\n}"}
{"index": 9082, "repo": "hbase-server-3.0.0-alpha-4", "des": "Describe the set of operations needed to update hbase:meta after restore.", "code": "Class RestoreSnapshotHelper.RestoreMetaChanges {\n\tMap<String,Pair<String,String>> getParentToChildrenPairMap(); // Returns the map of parent-children_pair.\n\tList<RegionInfo> getRegionsToAdd(); // Returns the list of new regions added during the on-disk restore.\n\tList<RegionInfo> getRegionsToRemove(); // Returns the list of regions removed during the on-disk restore.\n\tList<RegionInfo> getRegionsToRestore(); // Returns the list of 'restored regions' during the on-disk restore.\n\tTableDescriptor getTableDescriptor();\n\tboolean hasRegionsToAdd(); // Returns true if there're new regions\n\tboolean hasRegionsToRemove(); // Returns true if there're regions to remove\n\tboolean hasRegionsToRestore(); // Returns true if there're regions to restore\n\tvoid updateMetaParentRegions(Connection connection, List<RegionInfo> regionInfos);\n}"}
{"index": 12820, "repo": "spring-data-mongodb-4.1.2", "des": "RepositoryQuery implementation for Mongo.", "code": "public class PartTreeMongoQuery extends AbstractMongoQuery {\n\tprotected Query createCountQuery(ConvertingParameterAccessor accessor); // Creates a Query instance using the given ConvertingParameterAccessor.\n\tprotected Query createQuery(ConvertingParameterAccessor accessor); // Creates a Query instance using the given ParameterAccessor\n\tPartTree getTree(); // Return the PartTree backing the query.\n\tprotected boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected boolean isDeleteQuery(); // Return weather the query should delete matching documents.\n\tprotected boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected boolean isLimiting(); // Return whether the query has an explicit limit set.\n}"}
{"index": 4152, "repo": "camel-core-3.0.0-RC1", "des": "Transforms the message body based on an expression.", "code": "Class TransformDefinition {\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getShortName();\n\tvoid setExpression(ExpressionDefinition expression); // Expression to return the transformed message body (the new message body to use)\n}"}
{"index": 7354, "repo": "calcite-core-1.34.0", "des": "VolcanoRuleCall implements the RelOptRuleCall interface for VolcanoPlanner.", "code": "Class VolcanoRuleCall {\n\tprotected void onMatch(); // Called when all operands have matched.\n\tvoid transformTo(RelNode rel, Map<RelNode,RelNode> equiv, RelHintsPropagator handler); // Registers that a rule has produced an equivalent relational expression.\n}"}
{"index": 2851, "repo": "amqp-client-5.18.0", "des": "Interface for application callback objects to receive notifications and messages from a queue by subscription.", "code": "Interface Consumer {\n\tvoid handleCancel(String consumerTag); // Called when the consumer is cancelled for reasons other than by a call to Channel.basicCancel(java.lang.String).\n\tvoid handleCancelOk(String consumerTag); // Called when the consumer is cancelled by a call to Channel.basicCancel(java.lang.String).\n\tvoid handleConsumeOk(String consumerTag); // Called when the consumer is registered by a call to any of the Channel.basicConsume(java.lang.String, com.rabbitmq.client.Consumer) methods.\n\tvoid handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body); // Called when a basic.deliver is received for this consumer.\n\tvoid handleRecoverOk(String consumerTag); // Called when a basic.recover-ok is received in reply to a basic.recover.\n\tvoid handleShutdownSignal(String consumerTag, ShutdownSignalException sig); // Called when either the channel or the underlying connection has been shut down.\n}"}
{"index": 9330, "repo": "hadoop-yarn-api-3.3.6", "des": "The response sent by the NodeManager to the ApplicationMaster when asked to update container resource.", "code": "Class ContainerUpdateResponse {\n\tabstract Map<ContainerId,SerializedException> getFailedRequests(); // Get the containerId-to-exception map in which the exception indicates error from each container for failed requests.\n\tabstract List<ContainerId> getSuccessfullyUpdatedContainers(); // Get the list of containerIds of containers whose resource have been successfully update.\n\tstatic ContainerUpdateResponse newInstance(List<ContainerId> successfullyUpdatedContainers, Map<ContainerId,SerializedException> failedRequests);\n\tabstract void setFailedRequests(Map<ContainerId,SerializedException> failedRequests); // Set the containerId-to-exception map in which the exception indicates error from each container for failed requests.\n\tabstract void setSuccessfullyUpdatedContainers(List<ContainerId> succeedUpdatedContainers); // Set the list of containerIds of containers whose resource have been successfully updated.\n}"}
{"index": 2418, "repo": "spring-session-1.3.5.RELEASE", "des": "Specifies when to write to the backing Hazelcast instance.", "code": "Enum HazelcastFlushMode {\n\tstatic HazelcastFlushMode valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic HazelcastFlushMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4709, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "SitePreferenceRepository implementation that stores user preference in a Cookie.", "code": "Class CookieSitePreferenceRepository {\n\tSitePreference loadSitePreference(javax.servlet.http.HttpServletRequest request); // Load the user's site preference.\n\tvoid saveSitePreference(SitePreference preference, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response); // Save the user's site preference.\n}"}
{"index": 4710, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "A model for the user agent or device that submitted the current request.", "code": "Interface Device {\n\tDevicePlatform getDevicePlatform();\n\tboolean isMobile(); // True if this device is a mobile device such as an Apple iPhone or an Nexus One Android.\n\tboolean isNormal(); // True if this device is not a mobile or tablet device.\n\tboolean isTablet(); // True if this device is a tablet device such as an Apple iPad or a Motorola Xoom.\n}"}
{"index": 8888, "repo": "hbase-server-3.0.0-alpha-4", "des": "Utilities for storing more complex collection types in Configuration instances.", "code": "Class ConfigurationUtil {\n\tstatic List<Map.Entry<String,String>> getKeyValues(org.apache.hadoop.conf.Configuration conf, String key); // Retrieve a list of key value pairs from configuration, stored under the provided key\n\tstatic List<Map.Entry<String,String>> getKeyValues(org.apache.hadoop.conf.Configuration conf, String key, char delimiter); // Retrieve a list of key value pairs from configuration, stored under the provided key\n\tstatic void setKeyValues(org.apache.hadoop.conf.Configuration conf, String key, Collection<Map.Entry<String,String>> keyValues); // Store a collection of Map.Entry's in conf, with each entry separated by ',' and key values delimited by KVP_DELIMITER\n\tstatic void setKeyValues(org.apache.hadoop.conf.Configuration conf, String key, Collection<Map.Entry<String,String>> keyValues, char delimiter); // Store a collection of Map.Entry's in conf, with each entry separated by ',' and key values delimited by delimiter.\n}"}
{"index": 16000, "repo": "wicket-util-10.0.0-M1", "des": "Due to legal reasons in some countries the JRE is shipped without a security provider.", "code": "public class NoCrypt extends Object implements ICrypt {\n\tfinal String decryptUrlSafe(String text); // Decrypts a string into a string.\n\tfinal String encryptUrlSafe(String plainText); // Encrypt a string into a string\n}"}
{"index": 32, "repo": "connect-api-3.5.0", "des": "A field in a Struct, consisting of a field name, index, and Schema for the field value.", "code": "Class Field {\n\tboolean equals(Object o);\n\tint index(); // Get the index of this field within the struct.\n\tString name(); // Get the name of this field.\n\tSchema schema(); // Get the schema of this field\n}"}
{"index": 8599, "repo": "commons-io-2.13.0", "des": "Builds a new WriterOutputStream instance.", "code": "Class WriterOutputStream.Builder {\n\tWriterOutputStream get(); // Constructs a new instance.\n\tWriterOutputStream.Builder setCharset(Charset charset); // Sets the Charset.\n\tWriterOutputStream.Builder setCharset(String charset); // Sets the Charset.\n\tWriterOutputStream.Builder setCharsetDecoder(CharsetDecoder charsetDecoder); // Sets the charset decoder.\n\tWriterOutputStream.Builder setWriteImmediately(boolean writeImmediately); // Sets whether the output buffer will be flushed after each write operation (true), i.e.\n}"}
{"index": 14157, "repo": "wicket-core-10.0.0-M1", "des": "This a header render strategy implements a child->parent->root sequence, which is inverse to how it was until Wicket 1.5.", "code": "public class ChildFirstHeaderRenderStrategy extends AbstractHeaderRenderStrategy {\n\tprotected void renderChildHeaders(HtmlHeaderContainer headerContainer, Component rootComponent); // Render the child hierarchy headers.\n\tvoid renderHeader(HtmlHeaderContainer headerContainer, HtmlHeaderContainer.HeaderStreamState headerStreamState, Component rootComponent); // Implements the render strategy\n}"}
{"index": 10453, "repo": "groovy-all-4.0.13", "des": "Base class for writing primitive typed operations", "code": "public abstract class BinaryExpressionWriter extends Object {\n\tboolean arrayGet(int operation, boolean simulate);\n\tboolean arraySet(boolean simulate);\n\tprotected abstract void doubleTwoOperands(org.objectweb.asm.MethodVisitor mv);\n\tprotected MethodCaller getArrayGetCaller();\n\tprotected ClassNode getArrayGetResultType();\n\tprotected MethodCaller getArraySetCaller();\n\tprotected abstract int getBitwiseOperationBytecode(int type);\n\tprotected abstract int getCompareCode();\n\tWriterController getController(); // return writer controller\n\tprotected abstract ClassNode getDevisionOpResultType();\n\tprotected abstract ClassNode getNormalOpResultType();\n\tprotected abstract int getShiftOperationBytecode(int type);\n\tprotected abstract int getStandardOperationBytecode(int type);\n\tprotected abstract void removeTwoOperands(org.objectweb.asm.MethodVisitor mv);\n\tvoid setArraySetAndGet(MethodCaller arraySet, MethodCaller arrayGet);\n\tprotected boolean supportsDivision();\n\tboolean write(int operation, boolean simulate);\n\tprotected boolean writeBitwiseOp(int type, boolean simulate); // writes some the bitwise operations.\n\tprotected boolean writeDivision(boolean simulate);\n\tprotected abstract void writeMinusMinus(org.objectweb.asm.MethodVisitor mv);\n\tprotected abstract void writePlusPlus(org.objectweb.asm.MethodVisitor mv);\n\tboolean writePostOrPrefixMethod(int operation, boolean simulate);\n\tprotected boolean writeShiftOp(int type, boolean simulate); // Write shifting operations.\n\tprotected boolean writeSpaceship(int type, boolean simulate);\n\tprotected boolean writeStdCompare(int type, boolean simulate); // writes some int standard operations for compares\n\tprotected boolean writeStdOperators(int type, boolean simulate);\n}"}
{"index": 16610, "repo": "spring-beans-6.0.11", "des": "Interface that describes the logical view of a set of BeanDefinitions and BeanReferences as presented in some configuration context.", "code": "public interface ComponentDefinition extends BeanMetadataElement {\n\tBeanDefinition[] getBeanDefinitions(); // Return the BeanDefinitions that were registered to form this ComponentDefinition.\n\tBeanReference[] getBeanReferences(); // Return the set of BeanReferences that are considered to be important to this ComponentDefinition.\n\tString getDescription(); // Return a friendly description of the described component.\n\tBeanDefinition[] getInnerBeanDefinitions(); // Return the BeanDefinitions that represent all relevant inner beans within this component.\n\tString getName(); // Get the user-visible name of this ComponentDefinition.\n}"}
{"index": 12720, "repo": "spring-data-mongodb-4.1.2", "des": "Trigger find execution by calling one of the terminating methods.", "code": "public static interface ExecutableFindOperation.TerminatingFind<T> {\n\tList<T> all(); // Get all matching elements.\n\tlong count(); // Get the number of matching elements.\n\tboolean exists(); // Check for the presence of matching elements.\n\tdefault Optional<T> first(); // Get the first or no result.\n\tT firstValue(); // Get the first or no result.\n\tdefault Optional<T> one(); // Get exactly zero or one result.\n\tT oneValue(); // Get exactly zero or one result.\n\tWindow<T> scroll(ScrollPosition scrollPosition); // Return a window of elements either starting or resuming at ScrollPosition.\n\tStream<T> stream(); // Stream all matching elements.\n}"}
{"index": 1214, "repo": "ignite-core-2.15.0", "des": "Handler will try to stop node if tryStop value is true.", "code": "Class StopNodeOrHaltFailureHandler {\n\tprotected boolean handle(Ignite ignite, FailureContext failureCtx); // Actual failure handling.\n\tlong timeout(); // Get stop node timeout.\n\tboolean tryStop(); // Get try stop.\n}"}
{"index": 12708, "repo": "spring-data-mongodb-4.1.2", "des": "Shift applies an expression to a document in a specified position relative to the current document.", "code": "public static class DocumentOperators.Shift extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tDocumentOperators.Shift by(int shiftBy); // Shift the document position relative to the current.\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tDocumentOperators.Shift defaultTo(Object value); // Define the default value if the target document is out of range.\n\tDocumentOperators.Shift defaultToValueOf(AggregationExpression expression); // Define the expression to evaluate if the target document is out of range.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\tstatic DocumentOperators.Shift shift(String fieldReference); // Specifies the field to evaluate and return.\n\tstatic DocumentOperators.Shift shift(AggregationExpression expression); // Specifies the expression to evaluate and return.\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 886, "repo": "ignite-core-2.15.0", "des": "Implementation of public API future for cache.", "code": "Class IgniteCacheFutureImpl<V> {\n\t<T> IgniteFuture<T> chain(IgniteClosure<? super IgniteFuture<V>,T> doneCb); // Make a chained future to convert result of this future (when complete) into a new format.\n\t<T> IgniteFuture<T> chainAsync(IgniteClosure<? super IgniteFuture<V>,T> doneCb, Executor exec); // Make a chained future to convert result of this future (when complete) into a new format.\n\tprotected RuntimeException convertException(IgniteCheckedException e); // Convert internal exception to public exception.\n}"}
{"index": 9952, "repo": "iceberg-api-1.3.0", "des": "A builder used to create valid sort orders.", "code": "Class SortOrder.Builder {\n\tSortOrder.Builder asc(Term term, NullOrder nullOrder); // Add an expression term to the sort, ascending with the given null order.\n\tSortOrder build();\n\tSortOrder.Builder caseSensitive(boolean sortCaseSensitive); // Set case sensitivity of sort column name resolution.\n\tSortOrder.Builder desc(Term term, NullOrder nullOrder); // Add an expression term to the sort, ascending with the given null order.\n\tSortOrder.Builder sortBy(java.lang.String name, SortDirection direction, NullOrder nullOrder);\n\tSortOrder.Builder sortBy(Term term, SortDirection direction, NullOrder nullOrder);\n\tSortOrder.Builder withOrderId(int newOrderId);\n}"}
{"index": 13176, "repo": "spring-test-6.0.11", "des": "Default implementation of the BootstrapContext interface.", "code": "public class DefaultBootstrapContext extends Object implements BootstrapContext {\n\tCacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate(); // Get the CacheAwareContextLoaderDelegate to use for transparent interaction with the ContextCache.\n\tClass<?> getTestClass(); // Get the test class for this bootstrap context.\n}"}
{"index": 17388, "repo": "groovy-4.0.13", "des": "A Range represents the list of discrete items between some starting (or from) value and working up towards some ending (or to) value.", "code": "public interface Range<T extends Comparable> extends List<T> {\n\tboolean containsWithinBounds(Object o); // Indicates whether an object is greater than or equal to the from value for the range and less than or equal to the to value.\n\tT getFrom(); // The lower value in the range.\n\tT getTo(); // The upper value in the range.\n\tString inspect();\n\tboolean isReverse(); // Indicates whether this is a reverse range which iterates backwards starting from the to value and ending on the from value\n\tList<T> step(int step); // Forms a list by stepping through the range by the indicated interval.\n\tvoid step(int step, Closure closure); // Steps through the range, calling a closure for each item.\n}"}
{"index": 5225, "repo": "druid-processing-26.0.0", "des": "Serializer that produces EntireLayoutColumnarFloatsSupplier.", "code": "Class EntireLayoutColumnarFloatsSerializer {\n\tvoid add(float value);\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid open();\n\tint size();\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 16147, "repo": "spring-data-cassandra-4.1.2", "des": "PropertyValueProvider for CassandraPersistentProperty.", "code": "public interface CassandraValueProvider extends PropertyValueProvider<CassandraPersistentProperty> {\n\tObject getSource(); // Returns whether the underlying source.\n\tboolean hasProperty(CassandraPersistentProperty property); // Returns whether the underlying source contains a data source for the given CassandraPersistentProperty.\n}"}
{"index": 4201, "repo": "jackson-core-2.15.2", "des": "Abstraction that encloses information about content being processed -- input source or output target, streaming or not -- for the purpose of including pertinent information in location (see JsonLocation) objections, most commonly to be printed out as part of Exception messages.", "code": "Class ContentReference {\n\tprotected int _append(StringBuilder sb, String content);\n\tprotected boolean _appendEscaped(StringBuilder sb, int ctrlChar);\n\tprotected String _truncate(byte[] b, int[] offsets, int maxSnippetLen);\n\tprotected String _truncate(char[] cs, int[] offsets, int maxSnippetLen);\n\tprotected String _truncate(CharSequence cs, int[] offsets, int maxSnippetLen);\n\tprotected void _truncateOffsets(int[] offsets, int actualLength);\n\tStringBuilder appendSourceDescription(StringBuilder sb); // Method for appending a \"source description\" when content represented by this reference is read.\n\tString buildSourceDescription(); // Method for constructing a \"source description\" when content represented by this reference is read.\n\tstatic ContentReference construct(boolean isContentTextual, Object rawContent);\n\tstatic ContentReference construct(boolean isContentTextual, Object rawContent, int offset, int length);\n\tint contentLength();\n\tint contentOffset();\n\tboolean equals(Object other);\n\tObject getRawContent();\n\tboolean hasTextualContent();\n\tprotected int maxContentSnippetLength(); // Internal accessor, overridable, used for checking length (in units in which content is counted, either bytes or chars) to use for truncation (so as not to include full content for humongous sources or targets)\n\tstatic ContentReference rawReference(boolean isContentTextual, Object rawContent); // Factory method for legacy code to use for constructing instances to content about which only minimal amount of information is available.\n\tstatic ContentReference rawReference(Object rawContent);\n\tprotected Object readResolve();\n\tstatic ContentReference unknown(); // Accessor for getting a placeholder for cases where actual content is not known (or is not something that system wants to expose).\n}"}
{"index": 2100, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generic UDF for string function INSTR(str,substr[,pos[,occurrence]]).", "code": "Class GenericUDFInstr {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 8793, "repo": "graal-sdk-1.0.0-rc7", "des": "Low-level handler for log messages of native images.", "code": "Interface LogHandler {\n\tvoid fatalError(); // Exit the VM because a fatal, non-recoverable error situation has been detected.\n\tvoid flush(); // Flush the log to its destination.\n\tvoid log(CCharPointer bytes, UnsignedWord length); // Write raw bytes to the log.\n}"}
{"index": 7125, "repo": "calcite-core-1.34.0", "des": "Default implementation of RexVisitor, which visits each node but does nothing while it's there.", "code": "Class RexVisitorImpl<R> {\n\tstatic boolean visitArrayAnd(RexVisitor<Boolean> visitor, List<RexNode> exprs); // Visits an array of expressions, returning the logical 'and' of their results.\n\tstatic boolean visitArrayOr(RexVisitor<Boolean> visitor, List<RexNode> exprs); // Visits an array of expressions, returning the logical 'or' of their results.\n\tR visitCall(RexCall call);\n\tR visitCorrelVariable(RexCorrelVariable correlVariable);\n\tR visitDynamicParam(RexDynamicParam dynamicParam);\n\tR visitFieldAccess(RexFieldAccess fieldAccess);\n\tR visitInputRef(RexInputRef inputRef);\n\tR visitLiteral(RexLiteral literal);\n\tR visitLocalRef(RexLocalRef localRef);\n\tR visitOver(RexOver over);\n\tR visitPatternFieldRef(RexPatternFieldRef fieldRef);\n\tR visitRangeRef(RexRangeRef rangeRef);\n\tR visitSubQuery(RexSubQuery subQuery);\n\tR visitTableInputRef(RexTableInputRef ref);\n}"}
{"index": 14423, "repo": "wicket-core-10.0.0-M1", "des": "A very simple authorization strategy that takes a supertype (a base class or tagging interface) and performs a simple authorization check by calling the abstract method isAuthorized() whenever a Page class that extends or implements the supertype is about to be instantiated.", "code": "public abstract class SimplePageAuthorizationStrategy extends AbstractPageAuthorizationStrategy {\n\tprotected abstract boolean isAuthorized(); // Gets whether the current user/session is authorized to instantiate a page class which extends or implements the supertype (base class or tagging interface) passed to the constructor.\n\tprotected <T extends Page>boolean isPageAuthorized(Class<T> pageClass); // Whether to page may be created.\n}"}
{"index": 17496, "repo": "pulsar-broker-3.0.0", "des": "Contains all the data that is maintained locally on each broker.", "code": "public class BrokerLoadData extends Object {\n\tvoid clear();\n\tList<org.apache.pulsar.common.stats.Metrics> toMetrics(String advertisedBrokerAddress);\n\tString toString(ServiceConfiguration conf);\n\tvoid update(BrokerLoadData other); // Using another BrokerLoadData, update this.\n\tvoid update(org.apache.pulsar.policies.data.loadbalancer.SystemResourceUsage usage, double msgThroughputIn, double msgThroughputOut, double msgRateIn, double msgRateOut, int bundleCount, int topics, ServiceConfiguration conf); // Using the system resource usage from the Pulsar client, update this BrokerLoadData.\n}"}
{"index": 16855, "repo": "spring-amqp-3.0.6", "des": "A post processor that uses a InflaterInputStream to decompress the message body.", "code": "public class InflaterPostProcessor extends AbstractDecompressingPostProcessor {\n\tprotected InputStream getDecompressorStream(InputStream zipped); // Get the stream.\n\tprotected String getEncoding(); // Get the encoding.\n}"}
{"index": 6841, "repo": "calcite-core-1.34.0", "des": "Implementation of Filter in enumerable calling convention.", "code": "Class EnumerableFilter {\n\tEnumerableFilter copy(RelTraitSet traitSet, RelNode input, RexNode condition);\n\tstatic EnumerableFilter create(RelNode input, RexNode condition); // Creates an EnumerableFilter.\n\t@Nullable Pair<RelTraitSet,List<RelTraitSet>> deriveTraits(RelTraitSet childTraits, int childId); // Derive traitset from child node, returns a pair of traits after traits derivation.\n\tEnumerableRel.Result implement(EnumerableRelImplementor implementor, EnumerableRel.Prefer pref); // Creates a plan for this expression according to a calling convention.\n\t@Nullable Pair<RelTraitSet,List<RelTraitSet>> passThroughTraits(RelTraitSet required); // Pass required traitset from parent node to child nodes, returns a pair of traits after traits is passed down.\n}"}
{"index": 4834, "repo": "hadoop-common-3.3.4", "des": "Implement the FileSystem API for the checksumed local filesystem.", "code": "Class LocalFileSystem {\n\tvoid copyFromLocalFile(boolean delSrc, Path src, Path dst); // The src file is on the local disk.\n\tvoid copyToLocalFile(boolean delSrc, Path src, Path dst); // The src file is under FS, and the dst is on the local disk.\n\tvoid createSymlink(Path target, Path link, boolean createParent); // See FileContext.createSymlink(Path, Path, boolean).\n\tFileStatus getFileLinkStatus(Path f); // See FileContext.getFileLinkStatus(Path).\n\tPath getLinkTarget(Path f); // See FileContext.getLinkTarget(Path).\n\tFileSystem getRaw();\n\tString getScheme(); // Return the protocol scheme for the FileSystem.\n\tvoid initialize(URI name, Configuration conf); // Called after a new FileSystem instance is constructed.\n\tFile pathToFile(Path path); // Convert a path to a File.\n\tboolean reportChecksumFailure(Path p, FSDataInputStream in, long inPos, FSDataInputStream sums, long sumsPos); // Moves files to a bad file directory on the same device, so that their storage will not be reused.\n\tboolean supportsSymlinks(); // See AbstractFileSystem.supportsSymlinks().\n}"}
{"index": 14762, "repo": "spring-data-commons-3.1.2", "des": "A page is a sublist of a list of objects.", "code": "public interface Page<T> extends Slice<T> {\n\tstatic <T> Page<T> empty(); // Creates a new empty Page.\n\tstatic <T> Page<T> empty(Pageable pageable); // Creates a new empty Page for the given Pageable.\n\tlong getTotalElements(); // Returns the total amount of elements.\n\tint getTotalPages(); // Returns the number of total pages.\n\t<U> Page<U> map(Function<? super T,? extends U> converter); // Returns a new Page with the content of the current one mapped by the given Function.\n}"}
{"index": 10550, "repo": "groovy-all-4.0.13", "des": "This is the management interface for JmxEventEmitter.", "code": "public interface JmxEventEmitterMBean {\n\tString getEvent(); // Getter - returns event thrown by emitter.\n\tlong send(Object data); // Method called to dispatch event on event bus.\n\tvoid setEvent(String event); // Setter - sets event thrown by Emitter.\n}"}
{"index": 15133, "repo": "spring-data-elasticsearch-5.1.2", "des": "Record defining a docvalue_field to be used in a query.", "code": "public record DocValueField(String field, String format) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString field(); // Returns the value of the field record component.\n\tString format(); // Returns the value of the format record component.\n}"}
{"index": 16954, "repo": "spring-orm-6.0.11", "des": "Abstract JpaVendorAdapter implementation that defines common properties, to be translated into vendor-specific JPA properties by concrete subclasses.", "code": "public abstract class AbstractJpaVendorAdapter extends Object implements JpaVendorAdapter {\n\tprotected Database getDatabase(); // Return the target database to operate on.\n\tprotected String getDatabasePlatform(); // Return the name of the target database to operate on.\n\tClass<? extends EntityManagerFactory> getEntityManagerFactoryInterface(); // Return the vendor-specific EntityManagerFactory interface that the EntityManagerFactory proxy is supposed to implement.\n\tClass<? extends EntityManager> getEntityManagerInterface(); // Return the vendor-specific EntityManager interface that this provider's EntityManagers will implement.\n\tJpaDialect getJpaDialect(); // Return the vendor-specific JpaDialect implementation for this provider, or null if there is none.\n\tMap<String,?> getJpaPropertyMap(); // Return a Map of vendor-specific JPA properties, typically based on settings in this JpaVendorAdapter instance.\n\tMap<String,?> getJpaPropertyMap(PersistenceUnitInfo pui); // Return a Map of vendor-specific JPA properties for the given persistence unit, typically based on settings in this JpaVendorAdapter instance.\n\tString getPersistenceProviderRootPackage(); // Return the name of the persistence provider's root package (e.g.\n\tprotected boolean isGenerateDdl(); // Return whether to generate DDL after the EntityManagerFactory has been initialized creating/updating all relevant tables.\n\tprotected boolean isShowSql(); // Return whether to show SQL in the log (or in the console).\n\tvoid postProcessEntityManager(EntityManager em); // Optional callback for post-processing the native EntityManager before active use.\n\tvoid postProcessEntityManagerFactory(EntityManagerFactory emf); // Optional callback for post-processing the native EntityManagerFactory before active use.\n\tvoid setDatabase(Database database); // Specify the target database to operate on, as a value of the Database enum: DB2, DERBY, H2, HANA, HSQL, INFORMIX, MYSQL, ORACLE, POSTGRESQL, SQL_SERVER, SYBASE\n\tvoid setDatabasePlatform(String databasePlatform); // Specify the name of the target database to operate on.\n\tvoid setGenerateDdl(boolean generateDdl); // Set whether to generate DDL after the EntityManagerFactory has been initialized, creating/updating all relevant tables.\n\tvoid setShowSql(boolean showSql); // Set whether to show SQL in the log (or in the console).\n}"}
{"index": 10462, "repo": "groovy-all-4.0.13", "des": "Checks that a class satisfies various conditions including: Incorrect class or method access modifiers No abstract methods appear in a non-abstract class Existence and correct visibility for inherited members Invalid attempts to override final members", "code": "public class ClassCompletionVerifier extends ClassCodeVisitorSupport {\n\tClassNode getClassNode();\n\tprotected SourceUnit getSourceUnit();\n\tvoid visitBinaryExpression(BinaryExpression expression);\n\tvoid visitCatchStatement(CatchStatement cs);\n\tvoid visitClass(ClassNode node); // Visit a ClassNode.\n\tvoid visitConstantExpression(ConstantExpression expression);\n\tvoid visitConstructor(ConstructorNode node); // Visit a ConstructorNode.\n\tvoid visitDeclarationExpression(DeclarationExpression expression);\n\tvoid visitField(FieldNode node); // Visit a FieldNode.\n\tvoid visitGStringExpression(GStringExpression expression);\n\tvoid visitMethod(MethodNode node); // Visit a MethodNode.\n\tvoid visitMethodCallExpression(MethodCallExpression mce);\n\tvoid visitProperty(PropertyNode node); // Visit a PropertyNode.\n}"}
{"index": 951, "repo": "ignite-core-2.15.0", "des": "Indexing SPI allows user to index cache content.", "code": "Interface IndexingSpi {\n\tIterator<javax.cache.Cache.Entry<?,?>> query(@Nullable String cacheName, Collection<Object> params, @Nullable IndexingQueryFilter filters); // Executes query.\n\tvoid remove(@Nullable String cacheName, Object key); // Removes index entry by key.\n\tvoid store(@Nullable String cacheName, Object key, Object val, long expirationTime); // Updates index.\n}"}
{"index": 4337, "repo": "beam-sdks-java-core-2.49.0", "des": "Implementation of Distribution that delegates to the instance for the current context.", "code": "Class DelegatingDistribution {\n\tMetricName getName(); // The MetricName given to this metric.\n\tvoid update(long value); // Add an observation to this distribution.\n\tvoid update(long sum, long count, long min, long max);\n}"}
{"index": 80, "repo": "commons-collections4-4.4", "des": "Provides basic behaviour for decorating a map iterator with extra functionality.", "code": "Class AbstractMapIteratorDecorator<K,V> {\n\tK getKey(); // Gets the current key, which is the key returned by the last call to next().\n\tprotected MapIterator<K,V> getMapIterator(); // Gets the iterator being decorated.\n\tV getValue(); // Gets the current value, which is the value associated with the last key returned by next().\n\tboolean hasNext(); // Checks to see if there are more entries still to be iterated.\n\tK next(); // Gets the next key from the Map.\n\tvoid remove(); // Removes the last returned key from the underlying Map (optional operation).\n\tV setValue(V obj); // Sets the value associated with the current key (optional operation).\n}"}
{"index": 7559, "repo": "cassandra-all-4.1.2", "des": "ColumnFilter sub-class for queries with selected columns.", "code": "Class ColumnFilter.SelectionColumnFilter {\n\tboolean allFetchedColumnsAreQueried(); // Whether _fetched_ == _queried_ for this filter, and so if the isQueried() methods can return false for some column/cell.\n\tboolean equals(java.lang.Object other);\n\tboolean fetchedCellIsQueried(ColumnMetadata column, CellPath path); // Whether the provided complex cell (identified by its column and path), which is assumed to be _fetched_ by this filter, is also _queried_ by the user.\n\tboolean fetchedColumnIsQueried(ColumnMetadata column); // Whether the provided complex cell (identified by its column and path), which is assumed to be _fetched_ by this filter, is also _queried_ by the user.\n\tRegularAndStaticColumns fetchedColumns(); // The columns that needs to be fetched internally for this filter.\n\tboolean fetches(ColumnMetadata column); // Whether the provided column is fetched by this filter.\n\tboolean fetchesAllColumns(boolean isStatic); // Whether all the (regular or static) columns are fetched by this filter.\n\tstatic ColumnFilter.SelectionColumnFilter newInstance(org.apache.cassandra.db.filter.ColumnFilter.FetchingStrategy fetchingStrategy, TableMetadata metadata, RegularAndStaticColumns queried, com.google.common.collect.SortedSetMultimap<ColumnIdentifier,ColumnSubselection> subSelections);\n\tColumnFilter.Tester newTester(ColumnMetadata column); // Creates a new Tester to efficiently test the inclusion of cells of complex column column.\n\tRegularAndStaticColumns queriedColumns(); // The columns actually queried by the user.\n\tprotected com.google.common.collect.SortedSetMultimap<ColumnIdentifier,ColumnSubselection> subSelections(); // Returns the sub-selections or null if there are none.\n\tjava.lang.String toCQLString(); // Returns the CQL string corresponding to this ColumnFilter.\n}"}
{"index": 1297, "repo": "ignite-core-2.15.0", "des": "Performance statistics operation options.", "code": "Enum VisorPerformanceStatisticsOperation {\n\tstatic @Nullable VisorPerformanceStatisticsOperation fromOrdinal(int ord); // Efficiently gets enumerated value from its ordinal.\n\tstatic VisorPerformanceStatisticsOperation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic VisorPerformanceStatisticsOperation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17757, "repo": "spring-web-6.0.11", "des": "Base class for RestTemplate and other HTTP accessing gateway helpers, defining common properties such as the ClientHttpRequestFactory to operate on.", "code": "public abstract class HttpAccessor extends Object {\n\tprotected ClientHttpRequest createRequest(URI url, HttpMethod method); // Create a new ClientHttpRequest via this template's ClientHttpRequestFactory.\n\tList<ClientHttpRequestInitializer> getClientHttpRequestInitializers(); // Get the request initializers that this accessor uses.\n\tClientHttpRequestFactory getRequestFactory(); // Return the request factory that this accessor uses for obtaining client request handles.\n\tvoid setClientHttpRequestInitializers(List<ClientHttpRequestInitializer> clientHttpRequestInitializers); // Set the request initializers that this accessor should use.\n\tvoid setRequestFactory(ClientHttpRequestFactory requestFactory); // Set the request factory that this accessor uses for obtaining client request handles.\n}"}
{"index": 15884, "repo": "camel-api-4.0.0-RC1", "des": "Provides a hook for custom Processor or Component instances to respond to completed or failed processing of an Exchange rather like Spring's TransactionSynchronization", "code": "public interface Synchronization {\n\tdefault SynchronizationRouteAware getRouteSynchronization(); // Get an optional SynchronizationRouteAware for this synchronization\n\tvoid onComplete(Exchange exchange); // Called when the processing of the message exchange is complete\n\tvoid onFailure(Exchange exchange); // Called when the processing of the message exchange has failed for some reason.\n}"}
{"index": 14797, "repo": "spring-data-commons-3.1.2", "des": "PropertyValueConverter provides a symmetric way of converting certain properties from domain to store-specific values.", "code": "public interface PropertyValueConverter<DV,SV,C extends ValueConversionContext<? extends PersistentProperty<?>>> {\n\tDV read(SV value, C context); // Convert the given store specific value into it's domain value representation.\n\tdefault DV readNull(C context); // Convert the given null value from the store into its domain value representation.\n\tSV write(DV value, C context); // Convert the given domain-specific value into it's native store representation.\n\tdefault SV writeNull(C context); // Convert the given null value from the domain model into it's native store representation.\n}"}
{"index": 3978, "repo": "zookeeper-3.8.2", "des": "This MBean represents a client connection.", "code": "Interface ConnectionMXBean {\n\tlong getAvgLatency(); // Average latency in ms\n\tString[] getEphemeralNodes();\n\tString getLastCxid(); // Last cxid of this connection\n\tlong getLastLatency(); // Latency of last response to client on this connection in ms\n\tString getLastOperation(); // Last operation performed by this connection\n\tString getLastResponseTime(); // Last time server sent a response to client on this connection\n\tString getLastZxid(); // Last zxid of this connection\n\tlong getMaxLatency(); // Max latency in ms\n\tlong getMinLatency(); // Min latency in ms\n\tlong getOutstandingRequests();\n\tlong getPacketsReceived();\n\tlong getPacketsSent();\n\tString getSessionId();\n\tint getSessionTimeout();\n\tString getSourceIP();\n\tString getStartedTime();\n\tvoid resetCounters(); // Reset counters\n\tvoid terminateConnection(); // Terminate thei client connection.\n\tvoid terminateSession(); // Terminate this client session.\n}"}
{"index": 3659, "repo": "hive-serde-4.0.0-alpha-2", "des": "StandardMapObjectInspector works on map data that is stored as a Java Map object.", "code": "Class StandardMapObjectInspector {\n\tObject clear(Object map); // Clear the map.\n\tObject create(); // Create an empty map.\n\tObjectInspector.Category getCategory(); // An ObjectInspector must inherit from one of the following interfaces if getCategory() returns: PRIMITIVE: PrimitiveObjectInspector LIST: ListObjectInspector MAP: MapObjectInspector STRUCT: StructObjectInspector.\n\tMap<?,?> getMap(Object data); // returns null for data = null.\n\tObjectInspector getMapKeyObjectInspector();\n\tint getMapSize(Object data); // returns -1 for NULL map.\n\tObject getMapValueElement(Object data, Object key);\n\tObjectInspector getMapValueObjectInspector();\n\tString getTypeName(); // Returns the name of the data type that is inspected by this ObjectInspector.\n\tObject put(Object map, Object key, Object value); // Add a key-value pair to the map.\n\tObject remove(Object map, Object key); // Remove a key-value pair from the map.\n}"}
{"index": 5488, "repo": "druid-processing-26.0.0", "des": "Implementation class for ReadableVectorMatch.", "code": "Class VectorMatch {\n\tVectorMatch addAll(ReadableVectorMatch other, VectorMatch scratch); // Adds all rows from \"other\" to this object, using \"scratch\" as scratch space if needed.\n\tstatic ReadableVectorMatch allFalse(); // Creates a match that matches nothing.\n\tstatic ReadableVectorMatch allTrue(int numRows); // Creates a match that matches everything up to \"numRows\".\n\tvoid copyFrom(ReadableVectorMatch other); // Copies \"other\" into this object, and returns a reference to this object.\n\tint[] getSelection(); // Returns an array of indexes into the current batch.\n\tint getSelectionSize(); // Returns the number of valid values in the array from \"getSelection\".\n\tboolean isAllFalse(); // Checks if this match has accepted *nothing*.\n\tboolean isAllTrue(int vectorSize); // Checks if this match has accepted every row in the vector.\n\tboolean isValid(ReadableVectorMatch mask); // Checks if this match is valid (increasing row numbers, no out-of-range row numbers).\n\tVectorMatch removeAll(ReadableVectorMatch other); // Removes all rows from this object that occur in \"other\", in place, and returns a reference to this object.\n\tVectorMatch setSelectionSize(int newSelectionSize); // Sets the valid selectionSize, and returns a reference to this object.\n\tstatic VectorMatch wrap(int[] selection); // Creates a new match object with selectionSize = 0, and the provided array as a backing array.\n}"}
{"index": 4954, "repo": "commons-collections-3.2.2", "des": "An implementation of the Stack API that is based on an ArrayList instead of a Vector, so it is not synchronized to protect against multi-threaded access.", "code": "Class ArrayStack {\n\tboolean empty(); // Return true if this stack is currently empty.\n\tObject get(); // Returns the element on the top of the stack.\n\tObject peek(); // Returns the top item off of this stack without removing it.\n\tObject peek(int n); // Returns the n'th item down (zero-relative) from the top of this stack without removing it.\n\tObject pop(); // Pops the top item off of this stack and return it.\n\tObject push(Object item); // Pushes a new item onto the top of this stack.\n\tObject remove(); // Removes the element on the top of the stack.\n\tint search(Object object); // Returns the one-based position of the distance from the top that the specified object exists on this stack, where the top-most element is considered to be at distance 1.\n}"}
{"index": 16935, "repo": "spring-integration-ip-6.1.2", "des": "A TcpConnection that uses and underlying Socket.", "code": "public class TcpNetConnection extends TcpConnectionSupport implements org.springframework.scheduling.SchedulingAwareRunnable {\n\tvoid close(); // Closes this connection.\n\tObject getDeserializerStateKey();\n\tObject getPayload(); // Uses the deserializer to obtain the message payload from the connection's input stream.\n\tint getPort();\n\tSSLSession getSslSession();\n\tprotected boolean handleReadException(Exception exception);\n\tprotected InputStream inputStream(); // Subclasses can override this, for example to wrap the input stream.\n\tboolean isLongLived();\n\tboolean isOpen();\n\tvoid run(); // If there is no listener, this method exits.\n\tvoid send(org.springframework.messaging.Message<?> message); // Converts and sends the message.\n\tvoid shutdownInput(); // Set the socket's input stream to end of stream.\n\tvoid shutdownOutput(); // Disable the socket's output stream.\n}"}
{"index": 1592, "repo": "pdfbox-3.0.0-beta1", "des": "This is the implementation of an URI dictionary.", "code": "Class PDURIDictionary {\n\tString getBase(); // This will get the base URI to be used in resolving relative URI references.\n\tCOSDictionary getCOSObject(); // Returns the corresponding dictionary.\n\tvoid setBase(String base); // This will set the base URI to be used in resolving relative URI references.\n}"}
{"index": 7062, "repo": "calcite-core-1.34.0", "des": "Utility to infer Predicates that are applicable above a RelNode.", "code": "Class RelMdPredicates {\n\tMetadataDef<BuiltInMetadata.Predicates> getDef();\n\tRelOptPredicateList getPredicates(Aggregate agg, RelMetadataQuery mq); // Infers predicates for an Aggregate.\n\tRelOptPredicateList getPredicates(Correlate correlate, RelMetadataQuery mq); // Infers predicates for a correlate node.\n\tRelOptPredicateList getPredicates(Exchange exchange, RelMetadataQuery mq); // Infers predicates for an Exchange.\n\tRelOptPredicateList getPredicates(Filter filter, RelMetadataQuery mq); // Add the Filter condition to the pulledPredicates list from the input.\n\tRelOptPredicateList getPredicates(Intersect intersect, RelMetadataQuery mq); // Infers predicates for a Intersect.\n\tRelOptPredicateList getPredicates(Join join, RelMetadataQuery mq); // Infers predicates for a Join (including SemiJoin).\n\tRelOptPredicateList getPredicates(Minus minus, RelMetadataQuery mq); // Infers predicates for a Minus.\n\tRelOptPredicateList getPredicates(Project project, RelMetadataQuery mq); // Infers predicates for a project.\n\tRelOptPredicateList getPredicates(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Predicates.getPredicates(), invoked using reflection.\n\tRelOptPredicateList getPredicates(RelSubset r, RelMetadataQuery mq); // Returns the BuiltInMetadata.Predicates.getPredicates() statistic.\n\tRelOptPredicateList getPredicates(Sort sort, RelMetadataQuery mq); // Infers predicates for a Sort.\n\tRelOptPredicateList getPredicates(TableModify tableModify, RelMetadataQuery mq); // Infers predicates for a TableModify.\n\tRelOptPredicateList getPredicates(TableScan scan, RelMetadataQuery mq); // Infers predicates for a table scan.\n\tRelOptPredicateList getPredicates(Union union, RelMetadataQuery mq); // Infers predicates for a Union.\n}"}
{"index": 8697, "repo": "curator-client-5.5.0", "des": "Abstraction that provides the ZooKeeper connection string.", "code": "Interface EnsembleProvider {\n\tvoid close(); // Curator will call this method when CuratorZookeeperClient.close() is called\n\tString getConnectionString(); // Return the current connection string to use.\n\tvoid setConnectionString(String connectionString); // A new connection string event was received\n\tvoid start(); // Curator will call this method when CuratorZookeeperClient.start() is called\n\tboolean updateServerListEnabled(); // Return true if this ensemble provider supports ZooKeeper.updateServerList(String)\n}"}
{"index": 16989, "repo": "groovy-xml-4.0.13", "des": "Lazy evaluated representation of a GPath expression returning no children.", "code": "public class NoChildren extends GPathResult {\n\tprotected void appendNode(Object newValue); // NOP\n\tboolean asBoolean(); // Returns false.\n\tvoid build(groovy.lang.GroovyObject builder); // NOP\n\tIterator childNodes(); // Returns an empty Iterator.\n\tGPathResult find(groovy.lang.Closure closure); // Returns this.\n\tGPathResult findAll(groovy.lang.Closure closure); // Returns this.\n\tIterator iterator(); // Returns an empty Iterator.\n\tIterator nodeIterator(); // Returns an empty iterator.\n\tGPathResult parents(); // Throws a GroovyRuntimeException, because it is not implemented yet.\n\tprotected void replaceBody(Object newValue); // NOP\n\tprotected void replaceNode(groovy.lang.Closure newValue); // NOP\n\tint size(); // Returns 0.\n\tString text(); // Returns an empty String.\n\tWriter writeTo(Writer out); // Does not write any output, just returns the writer.\n}"}
{"index": 9875, "repo": "commons-math3-3.6.1", "des": "Returns the covariance matrix of the available vectors.", "code": "Class VectorialCovariance {\n\tvoid clear(); // Clears the internal state of the Statistic\n\tboolean equals(Object obj);\n\tlong getN(); // Get the number of vectors in the sample.\n\tRealMatrix getResult(); // Get the covariance matrix.\n\tvoid increment(double[] v); // Add a new vector to the sample.\n}"}
{"index": 17361, "repo": "groovy-4.0.13", "des": "Utility class for working with MethodNodes", "code": "public class MethodNodeUtils extends Object {\n\tstatic BlockStatement getCodeAsBlock(MethodNode mNode); // Gets the code for a method (or constructor) as a block.\n\tstatic String getPropertyName(MethodNode mNode); // For a method node potentially representing a property, returns the name of the property.\n\tstatic boolean isGetterCandidate(MethodNode mNode); // Determines if given method is a getter candidate.\n\tstatic String methodDescriptor(MethodNode mNode); // Return the method node's descriptor which includes its return type, name and parameter types without generics.\n\tstatic String methodDescriptor(MethodNode mNode, boolean pretty); // Return the method node's descriptor which includes its return type, name and parameter types without generics.\n\tstatic String methodDescriptorWithoutReturnType(MethodNode mNode); // Return the method node's descriptor including its name and parameter types without generics.\n}"}
{"index": 10478, "repo": "groovy-all-4.0.13", "des": "ConcurrentReaderHashMap collision list entry.", "code": "protected static class ConcurrentReaderHashMap.Entry extends Object implements Map.Entry {\n\tboolean equals(Object o);\n\tObject getKey();\n\tObject getValue(); // Get the value.\n\tObject setValue(Object value); // Set the value of this entry (Note: In an entrySet or entrySet.iterator), unless the set or iterator is used under synchronization of the table as a whole (or you can otherwise guarantee lack of concurrent modification), setValue is not strictly guaranteed to actually replace the value field obtained via the get operation of the underlying hash table in multithreaded applications.\n}"}
{"index": 6340, "repo": "mina-core-3.0.0-M2", "des": "The write request created by the IoSession.", "code": "Interface WriteRequest {\n\tIoFuture<Void> getFuture(); // The future to be completed on a write success\n\tObject getMessage(); // Get the message stored for this request.\n\tObject getOriginalMessage(); // Gets the original message, as written by the handler, before passing through the filter chain.\n\tvoid setFuture(IoFuture<Void> future); // Store the future into the request\n\tvoid setMessage(Object message); // Store the encoded message\n}"}
{"index": 17953, "repo": "spring-web-6.0.11", "des": "CorsConfigurationSource that uses URL patterns to select the CorsConfiguration for a request.", "code": "public class UrlBasedCorsConfigurationSource extends Object implements CorsConfigurationSource {\n\tCorsConfiguration getCorsConfiguration(ServerWebExchange exchange); // Return a CorsConfiguration based on the incoming request.\n\tvoid registerCorsConfiguration(String path, CorsConfiguration config); // Register a CorsConfiguration for the specified path pattern.\n\tvoid setCorsConfigurations(Map<String,CorsConfiguration> configMap); // Set CORS configuration based on URL patterns.\n}"}
{"index": 18603, "repo": "hibernate-core-5.6.15.Final", "des": "Access to information about existing sequences.", "code": "Interface SequenceInformation {\n\tdefault int getIncrementSize(); // Deprecated. use getIncrementValue() instead.\n\tjava.lang.Long getIncrementValue(); // Retrieve the extracted increment value defined for the sequence.\n\tjava.lang.Long getMaxValue(); // Retrieve the extracted maximum value defined for the sequence.\n\tjava.lang.Long getMinValue(); // Retrieve the extracted minimum value defined for the sequence.\n\tQualifiedSequenceName getSequenceName(); // The qualified sequence name.\n\tjava.lang.Long getStartValue(); // Retrieve the extracted start value defined for the sequence.\n}"}
{"index": 9014, "repo": "hbase-server-3.0.0-alpha-4", "des": "Filter a WAL Entry by the peer config according to the table and family which it belongs to.", "code": "Class NamespaceTableCfWALEntryFilter {\n\tWAL.Entry filter(WAL.Entry entry); // Applies the filter, possibly returning a different Entry instance.\n\tCell filterCell(WAL.Entry entry, Cell cell); // Applies the filter, possibly returning a different Cell instance.\n}"}
{"index": 2562, "repo": "exoplayer-r2.3.1", "des": "Decodes and renders audio using a SimpleDecoder.", "code": "Class SimpleDecoderAudioRenderer {\n\tprotected abstract SimpleDecoder<DecoderInputBuffer,? extends SimpleOutputBuffer,? extends AudioDecoderException> createDecoder(Format format, ExoMediaCrypto mediaCrypto); // Creates a decoder for the given format.\n\tMediaClock getMediaClock(); // If the renderer advances its own playback position then this method returns a corresponding MediaClock.\n\tprotected Format getOutputFormat(); // Returns the format of audio buffers output by the decoder.\n\tlong getPositionUs(); // Returns the current media position in microseconds.\n\tvoid handleMessage(int messageType, java.lang.Object message); // Handles a message delivered to the component.\n\tboolean isEnded(); // Whether the renderer is ready for the ExoPlayer instance to transition to ExoPlayer.STATE_ENDED.\n\tboolean isReady(); // Whether the renderer is able to immediately render media from the current position.\n\tprotected void onAudioSessionId(int audioSessionId); // Called when the audio session id becomes known.\n\tprotected void onAudioTrackPositionDiscontinuity();\n\tprotected void onAudioTrackUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs);\n\tprotected void onDisabled(); // Called when the renderer is disabled.\n\tprotected void onEnabled(boolean joining); // Called when the renderer is enabled.\n\tprotected void onPositionReset(long positionUs, boolean joining); // Called when the position is reset.\n\tprotected void onStarted(); // Called when the renderer is started.\n\tprotected void onStopped(); // Called when the renderer is stopped.\n\tvoid render(long positionUs, long elapsedRealtimeUs); // Incrementally renders the SampleStream.\n\tint supportsFormat(Format format); // Returns the extent to which the Renderer supports a given format.\n\tprotected abstract int supportsFormatInternal(Format format); // Returns the RendererCapabilities.FORMAT_SUPPORT_MASK component of the return value for supportsFormat(Format).\n}"}
{"index": 8898, "repo": "hbase-server-3.0.0-alpha-4", "des": "Class to hold dead servers list and utility querying dead server list.", "code": "Class DeadServer {\n\tSet<ServerName> copyServerNames();\n\tDate getTimeOfDeath(ServerName deadServerName); // Get the time when a server died\n\tboolean isDeadServer(ServerName serverName);\n\tboolean removeDeadServer(ServerName deadServerName); // Called from rpc by operator cleaning up deadserver list.\n\tint size();\n}"}
{"index": 7140, "repo": "calcite-core-1.34.0", "des": "Relational expression that returns the contents of a relation expression as it was at a given time in the past.", "code": "Class Snapshot {\n\tRelNode accept(RexShuttle shuttle); // Accepts a visit from a shuttle.\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tabstract Snapshot copy(RelTraitSet traitSet, RelNode input, RexNode period);\n\tRelWriter explainTerms(RelWriter pw); // Describes the inputs and attributes of this relational expression.\n\tcom.google.common.collect.ImmutableList<RelHint> getHints(); // Returns the hints of this relational expressions as an immutable list.\n\tRexNode getPeriod();\n\tboolean isValid(Litmus litmus, @Nullable RelNode.Context context); // Returns whether this relational expression is valid.\n}"}
{"index": 2976, "repo": "tink-1.10.0", "des": "Represents a key for computing ECDSA signatures.", "code": "Class EcdsaPrivateKey {\n\tstatic EcdsaPrivateKey.Builder builder();\n\tboolean equalsKey(Key o); // Returns true if the key is guaranteed to be equal to other.\n\tEcdsaParameters getParameters(); // Returns the parameters of this key.\n\tSecretBigInteger getPrivateValue();\n\tEcdsaPublicKey getPublicKey(); // Returns the SignaturePublicKey, which contains the verify function of the digital signature primitive.\n}"}
{"index": 8061, "repo": "commons-compress-1.23.0", "des": "An IcTuple is the set of information that describes an inner class.", "code": "Class IcTuple {\n\tboolean equals(Object object);\n\tString getC();\n\tString getC2();\n\tint getF();\n\tString getN();\n\tint getTupleIndex();\n\tString[] innerBreakAtDollar(String className); // Break the receiver into components at $ boundaries.\n\tboolean isAnonymous();\n\tboolean isMember();\n\tboolean nestedExplicitFlagSet(); // Answer true if the receiver's bit 16 is set (indicating that explicit outer class and name fields are set).\n\tboolean nullSafeEquals(String stringOne, String stringTwo);\n\tint outerClassIndex();\n\tString outerClassString(); // Answer the outer class name for the receiver.\n\tboolean outerIsAnonymous();\n\tboolean predicted(); // Answer true if the receiver is predicted; answer false if the receiver is specified explicitly in the outer and name fields.\n\tString simpleClassName(); // Answer the inner class name for the receiver.\n\tint simpleClassNameIndex();\n\tint thisClassIndex();\n\tString thisClassString(); // Answer the full name of the inner class represented by this tuple (including its outer component)\n}"}
{"index": 11765, "repo": "bedrock-core-7.0.2", "des": "Evaluates Java Expression Language expressions.", "code": "@Internal public class ExpressionEvaluator extends Object {\n\tvoid defineVariable(Variable variable); // Defines a new Variable for the ExpressionEvaluator.\n\tvoid defineVariable(String name, Object value); // Defines a new Variable for the ExpressionEvaluator.\n\t<T> T evaluate(String expression, Class<T> asClass); // Evaluate the specified expression, resolving any Java Expression Language expressions where appropriate using the Variables defined by the ExpressionEvaluator, returning the result cast/coerced into the specified type.\n}"}
{"index": 11983, "repo": "jena-core-4.9.0", "des": "An Assembler creates objects from their RDF descriptions.", "code": "public interface Assembler {\n\tObject open(Assembler a, Resource root); // Answer open( a, root, Mode.DEFAULT ).\n\tObject open(Assembler a, Resource root, Mode mode); // The core operation: answer a new object constructed according to the object description hanging from root, using the assembler a for any sub-objects.\n\tObject open(Resource root); // Answer open( this, root, Mode.DEFAULT ).\n\tModel openModel(Resource root); // Answer (Model) open( this, root, Mode.DEFAULT ), unless the result cannot be or is not a Model, in which case throw an exception.\n\tModel openModel(Resource root, Mode mode); // Answer (Model) open( this, root, mode ), unless the result cannot be or is not a Model, in which case throw an exception.\n}"}
{"index": 17580, "repo": "spring-ldap-core-3.1.0", "des": "Base class for compensating transaction resource holders.", "code": "public abstract class CompensatingTransactionHolderSupport extends org.springframework.transaction.support.ResourceHolderSupport {\n\tvoid clear();\n\tprotected abstract Object getTransactedResource(); // Get the actual transacted resource.\n\tCompensatingTransactionOperationManager getTransactionOperationManager(); // Get the CompensatingTransactionOperationManager to handle the data for the current transaction.\n\tvoid setTransactionOperationManager(CompensatingTransactionOperationManager transactionOperationManager); // Set the CompensatingTransactionOperationManager.\n}"}
{"index": 13798, "repo": "spring-webmvc-6.0.11", "des": "Interface to be implemented by objects that configure and manage a JSR-223 ScriptEngine for automatic lookup in a web environment.", "code": "public interface ScriptTemplateConfig {\n\tCharset getCharset(); // Return the charset used to read script and template files.\n\tString getContentType(); // Return the content type to use for the response.\n\tScriptEngine getEngine(); // Return the ScriptEngine to use by the views.\n\tString getEngineName(); // Return the engine name that will be used to instantiate the ScriptEngine.\n\tSupplier<ScriptEngine> getEngineSupplier(); // Return the engine supplier that will be used to instantiate the ScriptEngine.\n\tString getRenderFunction(); // Return the render function name (optional).\n\tString getRenderObject(); // Return the object where the render function belongs (optional).\n\tString getResourceLoaderPath(); // Return the resource loader path(s) via a Spring resource location.\n\tString[] getScripts(); // Return the scripts to be loaded by the script engine (library or user provided).\n\tBoolean isSharedEngine(); // Return whether to use a shared engine for all threads or whether to create thread-local engine instances for each thread.\n}"}
{"index": 13310, "repo": "shiro-core-2.0.0-alpha-2", "des": "MethodInterceptor that inspects a specific annotation on the method invocation before continuing its execution.", "code": "public abstract class AnnotationMethodInterceptor extends MethodInterceptorSupport {\n\tprotected Annotation getAnnotation(MethodInvocation mi); // Returns the Annotation that this interceptor will process for the specified method invocation.\n\tAnnotationHandler getHandler(); // Returns the AnnotationHandler used to perform authorization behavior based on an annotation discovered at runtime.\n\tAnnotationResolver getResolver(); // Returns the AnnotationResolver to use to acquire annotations from intercepted methods at runtime.\n\tvoid setHandler(AnnotationHandler handler); // Sets the AnnotationHandler used to perform authorization behavior based on an annotation discovered at runtime.\n\tvoid setResolver(AnnotationResolver resolver); // Returns the AnnotationResolver to use to acquire annotations from intercepted methods at runtime.\n\tboolean supports(MethodInvocation mi); // Returns true if this interceptor supports, that is, should inspect, the specified MethodInvocation, false otherwise.\n}"}
{"index": 11427, "repo": "spring-context-6.0.11", "des": "Enumerates the various scoped-proxy options.", "code": "public enum ScopedProxyMode extends Enum<ScopedProxyMode> {\n\tstatic ScopedProxyMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ScopedProxyMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7189, "repo": "calcite-core-1.34.0", "des": "Operator that adds an INTERVAL to a DATETIME.", "code": "Class SqlDatetimePlusOperator {\n\tSqlMonotonicity getMonotonicity(SqlOperatorBinding call); // Returns whether a call to this operator is monotonic.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n}"}
{"index": 10629, "repo": "groovy-all-4.0.13", "des": "The tool to simulate running script files via groovy command", "code": "public class ScriptRunner extends Object {\n\tstatic void runScript(File path); // Run the script file specified by the file path\n\tstatic void runScript(String cp); // Run the script file specified by the classpath\n}"}
{"index": 4824, "repo": "hadoop-common-3.3.4", "des": "Snapshot of statistics from a different source.", "code": "Class IOStatisticsSnapshot {\n\tboolean aggregate(IOStatistics source); // Aggregate the current statistics with the source reference passed in.\n\tvoid clear(); // Clear all the maps.\n\tMap<String,Long> counters(); // Map of counters.\n\tMap<String,Long> gauges(); // Map of gauges.\n\tMap<String,Long> maximums(); // Map of maximums.\n\tMap<String,MeanStatistic> meanStatistics(); // Map of meanStatistics.\n\tMap<String,Long> minimums(); // Map of minimums.\n\tstatic List<Class> requiredSerializationClasses(); // What classes are needed to deserialize this class? Needed to securely unmarshall this from untrusted sources.\n\tstatic org.apache.hadoop.util.JsonSerialization<IOStatisticsSnapshot> serializer(); // Get a JSON serializer for this class.\n\tvoid snapshot(IOStatistics source); // Take a snapshot.\n}"}
{"index": 751, "repo": "ignite-core-2.15.0", "des": "This class provided the same logic as ConcurrentSkipListSet.", "code": "Class GridConcurrentSkipListSet<E> {\n\tboolean add(E e);\n\tE ceiling(E e);\n\tvoid clear();\n\tGridConcurrentSkipListSet<E> clone();\n\tComparator<? super E> comparator();\n\tboolean contains(Object o);\n\tIterator<E> descendingIterator();\n\tNavigableSet<E> descendingSet();\n\tboolean equals(Object o);\n\tE first();\n\tE firstx(); // Same as first(), but returns null if set is empty.\n\tE floor(E e);\n\tNavigableSet<E> headSet(E toElement);\n\tNavigableSet<E> headSet(E toElement, boolean inclusive);\n\tE higher(E e);\n\tboolean isEmpty();\n\tIterator<E> iterator();\n\tE last();\n\tE lastx(); // Same as last(), but returns null if set is empty.\n\tE lower(E e);\n\tE pollFirst();\n\tE pollLast();\n\tboolean remove(Object o);\n\tboolean removeAll(Collection<?> c);\n\tint size();\n\tNavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive);\n\tNavigableSet<E> subSet(E fromElement, E toElement);\n\tNavigableSet<E> tailSet(E fromElement);\n\tNavigableSet<E> tailSet(E fromElement, boolean inclusive);\n}"}
{"index": 12038, "repo": "jena-core-4.9.0", "des": "Base class for the two-operand composition operations; has two graphs L and R", "code": "public abstract class Dyadic extends CompositionBase {\n\tvoid close(); // Close this graph.\n\tboolean dependsOn(Graph other); // Generic dependsOn, true iff it depends on either of the subgraphs.\n\tGraph getL(); // Answer the left (first) operand of this Dyadic.\n\tGraph getR(); // Answer the right (second) operand of this Dyadic.\n\tUnion union(Graph X);\n}"}
{"index": 5634, "repo": "org.apache.karaf.main-2.4.4", "des": "ReliableFile class used by ReliableFileInputStream and ReliableOutputStream.", "code": "Class ReliableFile {\n\tstatic void cleanupGenerations(File base); // Delete any old excess generations of a given reliable file.\n\tstatic boolean delete(File deleteFile); // Delete the specified reliable file on the underlying file system.\n\tstatic boolean exists(File file); // Answers a boolean indicating whether or not the specified reliable file exists on the underlying file system.\n\tstatic void fileUpdated(File file); // Inform ReliableFile that a file has been updated outside of ReliableFile.\n\tstatic String[] getBaseFiles(File directory); // Get a list of ReliableFile base names in a given directory.\n\tlong lastModified(); // Returns the time that this ReliableFile was last modified.\n\tstatic long lastModified(File file); // Returns the time that the reliable file was last modified.\n\tstatic int lastModifiedVersion(File file); // Returns the a version number of a reliable managed file.\n}"}
{"index": 11448, "repo": "spring-context-6.0.11", "des": "ScriptFactory implementation based on the JSR-223 script engine abstraction (as included in Java).", "code": "public class StandardScriptFactory extends Object implements ScriptFactory, org.springframework.beans.factory.BeanClassLoaderAware {\n\tprotected Object adaptToInterfaces(Object script, ScriptSource scriptSource, Class<?>... actualInterfaces);\n\tprotected Object evaluateScript(ScriptSource scriptSource);\n\tObject getScriptedObject(ScriptSource scriptSource, Class<?>... actualInterfaces); // Load and parse the script via JSR-223's ScriptEngine.\n\tClass<?> getScriptedObjectType(ScriptSource scriptSource); // Determine the type of the scripted Java object.\n\tClass<?>[] getScriptInterfaces(); // Return the business interfaces that the script is supposed to implement.\n\tString getScriptSourceLocator(); // Return a locator that points to the source of the script.\n\tboolean requiresConfigInterface(); // Return whether the script requires a config interface to be generated for it.\n\tboolean requiresScriptedObjectRefresh(ScriptSource scriptSource); // Determine whether a refresh is required (e.g.\n\tprotected ScriptEngine retrieveScriptEngine(ScriptSource scriptSource);\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n}"}
{"index": 10642, "repo": "groovy-all-4.0.13", "des": "Some expressions use symbols as aliases to method calls (<<, +=, ...).", "code": "public class StaticCompilationTransformer extends ClassCodeExpressionTransformer {\n\tClassNode getClassNode();\n\tprotected SourceUnit getSourceUnit();\n\tStaticTypesTypeChooser getTypeChooser();\n\tExpression transform(Expression expr); // NOTE: This method does not visit Expressions within Closures, for performance and historical reasons.\n\tvoid visitClass(ClassNode node); // Visit a ClassNode.\n\tvoid visitClassCodeContainer(Statement code);\n\tprotected void visitConstructorOrMethod(MethodNode node, boolean isConstructor);\n}"}
{"index": 14398, "repo": "wicket-core-10.0.0-M1", "des": "Caches the results of a delegating IResourceVersion instance for the lifetime of the current http request.", "code": "public class RequestCycleCachedResourceVersion extends Object implements IResourceVersion {\n\tString getVersion(IStaticCacheableResource resource); // get unique string identifying the version of the resource\n\tPattern getVersionPattern(); // a pattern that matches returned versions\n}"}
{"index": 9363, "repo": "hadoop-yarn-api-3.3.6", "des": "LightWeightResource extends Resource to handle base resources such as memory and CPU.", "code": "Class LightWeightResource {\n\tint compareTo(Resource other);\n\tboolean equals(Object obj);\n\tint getMemory(); // This method is DEPRECATED: Use Resource.getMemorySize() instead Get memory of the resource.\n\tlong getMemorySize(); // Get memory of the resource.\n\tint getVirtualCores(); // Get number of virtual cpu cores of the resource.\n\tvoid setMemory(int memory); // Set memory of the resource.\n\tvoid setMemorySize(long memory); // Set memory of the resource.\n\tvoid setVirtualCores(int vcores); // Set number of virtual cpu cores of the resource.\n}"}
{"index": 5042, "repo": "commons-collections-3.2.2", "des": "Implements a ListIterator over an array of objects.", "code": "Class ObjectArrayListIterator {\n\tvoid add(Object obj); // This iterator does not support modification of its backing array's size, and so will always throw an UnsupportedOperationException when this method is invoked.\n\tboolean hasPrevious(); // Returns true if there are previous elements to return from the array.\n\tObject next(); // Gets the next element from the array.\n\tint nextIndex(); // Gets the next index to be retrieved.\n\tObject previous(); // Gets the previous element from the array.\n\tint previousIndex(); // Gets the index of the item to be retrieved if previous() is called.\n\tvoid reset(); // Resets the iterator back to the start index.\n\tvoid set(Object obj); // Sets the element under the cursor.\n}"}
{"index": 17166, "repo": "spring-integration-core-6.1.2", "des": "Request/Reply strategy interface for mapping MessageHeaders to and from other types of objects.", "code": "public interface RequestReplyHeaderMapper<T> {\n\tvoid fromHeadersToReply(org.springframework.messaging.MessageHeaders headers, T target); // Map from the given MessageHeaders to the specified reply target.\n\tvoid fromHeadersToRequest(org.springframework.messaging.MessageHeaders headers, T target); // Map from the given MessageHeaders to the specified request target.\n\tMap<String,Object> toHeadersFromReply(T source); // Map from the given reply object to abstracted MessageHeaders.\n\tMap<String,Object> toHeadersFromRequest(T source); // Map from the given request object to abstracted MessageHeaders.\n}"}
{"index": 12888, "repo": "spring-data-mongodb-4.1.2", "des": "Value object representing an entities Shard Key used to distribute documents across a sharded MongoDB cluster.", "code": "public class ShardKey extends Object {\n\torg.bson.Document getDocument(); // Get the raw MongoDB representation of the ShardKey.\n\tCollection<String> getPropertyNames();\n\tstatic ShardKey hash(String... propertyNames); // Create a new ShardingStrategy.RANGE shard key.\n\tstatic ShardKey immutable(ShardKey shardKey); // Turn the given ShardKey into an immutable one.\n\tboolean isImmutable();\n\tboolean isSharded(); // Return whether the shard key represents a sharded key.\n\tstatic ShardKey none(); // ShardKey indicating no shard key has been defined.\n\tstatic ShardKey range(String... propertyNames); // Create a new ShardingStrategy.RANGE shard key.\n\tint size();\n}"}
{"index": 1678, "repo": "samza-api-1.8.0", "des": "A MetricsRegistry allows its users to create new Metrics and have those metrics wired to specific metrics systems, such as JMX, provided by MetricsReporters.", "code": "Interface MetricsRegistry {\n\tCounter newCounter(java.lang.String group, Counter counter); // Register existing Counter with this registry\n\tCounter newCounter(java.lang.String group, java.lang.String name); // Create and register a new Counter\n\t<T> Gauge<T> newGauge(java.lang.String group, Gauge<T> value); // Register an existing Gauge\n\t<T> Gauge<T> newGauge(java.lang.String group, java.lang.String name, T value); // Create and register a new Gauge\n\tTimer newTimer(java.lang.String group, java.lang.String name); // Create and Register a new Timer\n\tTimer newTimer(java.lang.String group, Timer timer); // Register existing Timer with this registry\n}"}
{"index": 440, "repo": "phoenix-core-5.1.3", "des": "Expression used to create a single cell containing all the column values for a column family.", "code": "Class SingleCellConstructorExpression {\n\t<T> T accept(ExpressionVisitor<T> visitor); // Means of traversing expression tree through visitor.\n\tSingleCellConstructorExpression clone(List<Expression> children);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tvoid readFields(DataInput input);\n\tboolean requiresFinalEvaluation(); // Determines if an evaluate is required after partial evaluation is run.\n\tvoid write(DataOutput output);\n}"}
{"index": 2939, "repo": "tink-1.10.0", "des": "only allowing tag size in bytes = 16 Protobuf type google.", "code": "Class AesEaxParams.Builder {\n\tAesEaxParams.Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value);\n\tAesEaxParams build();\n\tAesEaxParams buildPartial();\n\tAesEaxParams.Builder clear();\n\tAesEaxParams.Builder clearField(com.google.protobuf.Descriptors.FieldDescriptor field);\n\tAesEaxParams.Builder clearIvSize(); // possible value is 12 or 16 bytes.\n\tAesEaxParams.Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof);\n\tAesEaxParams.Builder clone();\n\tAesEaxParams getDefaultInstanceForType();\n\tstatic com.google.protobuf.Descriptors.Descriptor getDescriptor();\n\tcom.google.protobuf.Descriptors.Descriptor getDescriptorForType();\n\tint getIvSize(); // possible value is 12 or 16 bytes.\n\tprotected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable();\n\tboolean isInitialized();\n\tAesEaxParams.Builder mergeFrom(AesEaxParams other);\n\tAesEaxParams.Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry);\n\tAesEaxParams.Builder mergeFrom(com.google.protobuf.Message other);\n\tAesEaxParams.Builder mergeUnknownFields(com.google.protobuf.UnknownFieldSet unknownFields);\n\tAesEaxParams.Builder setField(com.google.protobuf.Descriptors.FieldDescriptor field, Object value);\n\tAesEaxParams.Builder setIvSize(int value); // possible value is 12 or 16 bytes.\n\tAesEaxParams.Builder setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field, int index, Object value);\n\tAesEaxParams.Builder setUnknownFields(com.google.protobuf.UnknownFieldSet unknownFields);\n}"}
{"index": 17574, "repo": "spring-ldap-core-3.1.0", "des": "Implementations of this interface are capable of providing a base LDAP path.", "code": "public interface BaseLdapPathSource {\n\tLdapName getBaseLdapName(); // Get the base LDAP path as a LdapName.\n\tDistinguishedName getBaseLdapPath(); // Deprecated. DistinguishedName and associated classes and methods are deprecated as of 2.0.\n\tString getBaseLdapPathAsString(); // Get the base LDAP path as a String.\n}"}
{"index": 14837, "repo": "spring-data-commons-3.1.2", "des": "Value object representing a repository fragment.", "code": "public interface RepositoryFragment<T> {\n\tdefault Optional<T> getImplementation();\n\tClass<?> getSignatureContributor();\n\tdefault boolean hasMethod(Method method); // Attempt to find the Method by name and exact parameters.\n\tstatic <T> RepositoryFragment<T> implemented(Class<T> interfaceClass, T implementation); // Create an implemented RepositoryFragment from a interfaceClass backed by the implementation object.\n\tstatic <T> RepositoryFragment<T> implemented(T implementation); // Create an implemented RepositoryFragment backed by the implementation object.\n\tdefault Stream<Method> methods();\n\tstatic <T> RepositoryFragment<T> structural(Class<T> interfaceOrImplementation); // Create a structural RepositoryFragment given interfaceOrImplementation.\n\tRepositoryFragment<T> withImplementation(T implementation); // Implement a structural RepositoryFragment given its implementation object.\n}"}
{"index": 2914, "repo": "amqp-client-5.18.0", "des": "A clone of LinkedBlockingQueue with the addition of a setCapacity(int) method, allowing us to change the capacity of the queue while it is in use.", "code": "Class VariableLinkedBlockingQueue<E> {\n\tvoid clear();\n\tint drainTo(Collection<? super E> c);\n\tint drainTo(Collection<? super E> c, int maxElements);\n\tIterator<E> iterator(); // Returns an iterator over the elements in this queue in proper sequence.\n\tboolean offer(E o); // Inserts the specified element at the tail of this queue if possible, returning immediately if this queue is full.\n\tboolean offer(E o, long timeout, TimeUnit unit); // Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available.\n\tE peek();\n\tE poll();\n\tE poll(long timeout, TimeUnit unit);\n\tvoid put(E o); // Adds the specified element to the tail of this queue, waiting if necessary for space to become available.\n\tint remainingCapacity(); // Returns the number of elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.\n\tboolean remove(Object o);\n\tvoid setCapacity(int capacity); // Set a new capacity for the queue.\n\tint size(); // Returns the number of elements in this queue.\n\tE take();\n\tObject[] toArray();\n\t<T> T[] toArray(T[] a);\n}"}
{"index": 1568, "repo": "pdfbox-3.0.0-beta1", "des": "A pushbutton is a purely interactive control that responds immediately to user input without retaining a permanent value.", "code": "Class PDPushButton {\n\tString getDefaultValue(); // Returns the default value, if any.\n\tList<String> getExportValues(); // This will get the (optional) export values.\n\tSet<String> getOnValues(); // Get the values to set individual buttons within a group to the on state.\n\tString getValue(); // Returns the selected value.\n\tString getValueAsString(); // Returns a string representation of the \"V\" entry, or an empty string.\n\tvoid setExportValues(List<String> values); // This will set the export values.\n}"}
{"index": 13250, "repo": "spring-test-6.0.11", "des": "Enumeration of modes that dictate whether SQL scripts should be executed within a transaction and what the transaction propagation behavior should be.", "code": "public static enum SqlConfig.TransactionMode extends Enum<SqlConfig.TransactionMode> {\n\tstatic SqlConfig.TransactionMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic SqlConfig.TransactionMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 8765, "repo": "hadoop-yarn-common-3.3.6", "des": "A simpler two column layout implementation with a header, a navigation bar on the left, content on the right, and a footer.", "code": "Class TwoColumnLayout {\n\tprotected Class<? extends SubView> content();\n\tprotected Class<? extends SubView> footer();\n\tprotected Class<? extends SubView> header();\n\tprotected Class<? extends SubView> nav();\n\tprotected void postHead(Hamlet.HTML<HtmlPage.__> html); // Do what needs to be done after the header is rendered.\n\tprotected void preHead(Hamlet.HTML<HtmlPage.__> html); // Do what needs to be done before the header is rendered.\n\tprotected void render(Hamlet.HTML<HtmlPage.__> html); // Render the the HTML page.\n\tprotected void setTableStyles(Hamlet.HTML<HtmlPage.__> html, String tableId, String... innerStyles); // Sets up a table to be a consistent style.\n}"}
{"index": 9332, "repo": "hadoop-yarn-api-3.3.6", "des": "CSI adaptor delegates all the calls from YARN to a CSI driver.", "code": "Interface CsiAdaptorProtocol {\n\tGetPluginInfoResponse getPluginInfo(GetPluginInfoRequest request); // Get plugin info from the CSI driver.\n\tNodePublishVolumeResponse nodePublishVolume(NodePublishVolumeRequest request); // Publish the volume on a node manager, the volume will be mounted to the local file system and become visible for clients.\n\tNodeUnpublishVolumeResponse nodeUnpublishVolume(NodeUnpublishVolumeRequest request); // This is a reverse operation of nodePublishVolume(NodePublishVolumeRequest), it un-mounts the volume from given node.\n\tValidateVolumeCapabilitiesResponse validateVolumeCapacity(ValidateVolumeCapabilitiesRequest request); // Validate if the volume capacity can be satisfied on the underneath storage system.\n}"}
{"index": 15306, "repo": "spring-boot-3.1.1", "des": "Parser that can read JSON formatted strings into Maps or Lists.", "code": "public interface JsonParser {\n\tList<Object> parseList(String json); // Parse the specified JSON string into a List.\n\tMap<String,Object> parseMap(String json); // Parse the specified JSON string into a Map.\n}"}
{"index": 9064, "repo": "hbase-server-3.0.0-alpha-4", "des": "An interface for concurrently storing and updating the size of a Region.", "code": "Interface RegionSizeStore {\n\tvoid clear(); // Removes all entries from the store.\n\tRegionSize getRegionSize(RegionInfo regionInfo); // Returns the size for the give region if one exists.\n\tvoid incrementRegionSize(RegionInfo regionInfo, long delta); // Atomically alter the size of a region.\n\tboolean isEmpty(); // Returns if the store is empty.\n\tvoid put(RegionInfo regionInfo, long size); // Atomically sets the given size for a region.\n\tRegionSize remove(RegionInfo regionInfo); // Removes the mapping for the given key, returning the value if one exists in the store.\n\tint size(); // Returns the number of entries in the store.\n}"}
{"index": 5505, "repo": "apache-james-mailbox-api-3.0.0-RC1", "des": "Stores an Access Control List (ACL) applicable to a mailbox.", "code": "Interface MailboxACL {\n\tMailboxACL apply(MailboxACL.MailboxACLCommand aclUpdate); // Apply the given ACL update on current ACL and return the result as a new ACL.\n\tMailboxACL except(MailboxACL.MailboxACLEntryKey key, MailboxACL.MailboxACLRights toRemove);\n\tMailboxACL except(MailboxACL toRemove); // Performs the set theoretic operation of relative complement of toRemove MailboxACL in this MailboxACL.\n\tMap<MailboxACL.MailboxACLEntryKey,MailboxACL.MailboxACLRights> getEntries(); // Map of entries.\n\tMailboxACL replace(MailboxACL.MailboxACLEntryKey key, MailboxACL.MailboxACLRights toAdd); // Replaces the entry corresponding to the given key with toAddlink MailboxACLRights}.\n\tMailboxACL union(MailboxACL.MailboxACLEntryKey key, MailboxACL.MailboxACLRights toAdd);\n\tMailboxACL union(MailboxACL toAdd); // Performs the set theoretic operation of union of this MailboxACL and toAdd MailboxACL.\n}"}
{"index": 18677, "repo": "opencms-gwt-15.0", "des": "The save button holding all related methods.", "code": "Class CmsToolbarSaveButton {\n\tvoid onToolbarActivate(); // Method executed when the button is activated.\n\tvoid onToolbarDeactivate(); // Method executed when the button is deactivated.\n}"}
{"index": 14779, "repo": "spring-data-commons-3.1.2", "des": "Domain service to allow accessing and setting PersistentPropertys of an entity.", "code": "public interface PersistentPropertyAccessor<T> {\n\tT getBean(); // Returns the underlying bean.\n\tObject getProperty(PersistentProperty<?> property); // Returns the value of the given PersistentProperty of the underlying bean instance.\n\tvoid setProperty(PersistentProperty<?> property, Object value); // Sets the given PersistentProperty to the given value.\n}"}
{"index": 4889, "repo": "hadoop-common-3.3.4", "des": "The compression type used to compress key/value pairs in the SequenceFile.", "code": "Enum SequenceFile.CompressionType {\n\tstatic SequenceFile.CompressionType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SequenceFile.CompressionType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1272, "repo": "ignite-core-2.15.0", "des": "Inline index key implementation for inlining UUID values.", "code": "Class UuidInlineIndexKeyType {\n\tint compare0(long pageAddr, int off, IndexKey key); // Compares inlined and given value.\n\tprotected UuidIndexKey get0(long pageAddr, int off); // Restores value from inline.\n\tprotected int inlineSize0(UuidIndexKey val); // Return inlined size for specified key.\n\tprotected int put0(long pageAddr, int off, UuidIndexKey key, int maxSize); // Puts given value into inline index tree.\n}"}
{"index": 12740, "repo": "spring-data-mongodb-4.1.2", "des": "Represents a geoNear aggregation operation.", "code": "public class GeoNearOperation extends Object implements AggregationOperation {\n\tString getOperator(); // Return the MongoDB operator that is used for this AggregationOperation.\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationOperation into a Document by using the given AggregationOperationContext.\n\tList<org.bson.Document> toPipelineStages(AggregationOperationContext context); // Turns the AggregationOperation into list of stages by using the given AggregationOperationContext.\n\tGeoNearOperation useIndex(String key); // Optionally specify the geospatial index to use via the field to use in the calculation.\n}"}
{"index": 1851, "repo": "hadoop-hdfs-3.3.6", "des": "ClusterConnector interface hides all specifics about how we communicate to the HDFS cluster.", "code": "Interface ClusterConnector {\n\tString getConnectorInfo(); // Returns info about the connector.\n\tList<DiskBalancerDataNode> getNodes(); // getNodes function returns a list of DiskBalancerDataNodes.\n}"}
{"index": 12766, "repo": "spring-data-mongodb-4.1.2", "des": "Conversion context holding references to simple MappingMongoConverter.DefaultConversionContext.ValueConverter and MappingMongoConverter.DefaultConversionContext.ContainerValueConverter.", "code": "protected static class MappingMongoConverter.DefaultConversionContext extends Object implements MappingMongoConverter.ConversionContext {\n\t<S> S convert(Object source, TypeInformation<? extends S> typeHint, MappingMongoConverter.ConversionContext context); // Converts a source object into target.\n\tCustomConversions getCustomConversions();\n\torg.springframework.data.mongodb.core.convert.ObjectPath getPath();\n\tMongoConverter getSourceConverter();\n\tMappingMongoConverter.ConversionContext withPath(org.springframework.data.mongodb.core.convert.ObjectPath currentPath); // Create a new MappingMongoConverter.ConversionContext with currentPath applied.\n}"}
{"index": 18191, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Context for determining the implicit name of a \"join column\" (think JoinColumn).", "code": "Interface ImplicitJoinColumnNameSource {\n\tAttributePath getAttributePath(); // Access to the name of the attribute that defines the association.\n\tEntityNaming getEntityNaming(); // Access to entity naming information.\n\tImplicitJoinColumnNameSource.Nature getNature();\n\tIdentifier getReferencedColumnName(); // Access the name of the column that is the target of the FK being described\n\tIdentifier getReferencedTableName(); // Access the name of the table that is the target of the FK being described\n}"}
{"index": 9941, "repo": "iceberg-api-1.3.0", "des": "A description of a position delete file group, when it was processed, and within which partition.", "code": "Interface RewritePositionDeleteFiles.FileGroupInfo {\n\tint globalIndex(); // Returns which position delete file group this is out of the total set of file groups for this rewrite\n\tStructLike partition(); // Returns which partition this position delete file group contains files from.\n\tint partitionIndex(); // Returns which position delete file group this is out of the set of file groups for this partition\n}"}
{"index": 4719, "repo": "spring-mobile-device-1.1.5.RELEASE", "des": "A strategy for storing a user's site preference.", "code": "Interface SitePreferenceRepository {\n\tSitePreference loadSitePreference(javax.servlet.http.HttpServletRequest request); // Load the user's site preference.\n\tvoid saveSitePreference(SitePreference preference, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response); // Save the user's site preference.\n}"}
{"index": 4239, "repo": "jackson-core-2.15.2", "des": "Interface for objects that implement pretty printer functionality, such as indentation.", "code": "Interface PrettyPrinter {\n\tvoid beforeArrayValues(JsonGenerator gen); // Method called after array start marker has been output, and right before the first value is to be output.\n\tvoid beforeObjectEntries(JsonGenerator gen); // Method called after object start marker has been output, and right before the field name of the first entry is to be output.\n\tvoid writeArrayValueSeparator(JsonGenerator gen); // Method called after an array value has been completely output, and before another value is to be output.\n\tvoid writeEndArray(JsonGenerator gen, int nrOfValues); // Method called after an Array value has been completely output (minus closing bracket).\n\tvoid writeEndObject(JsonGenerator gen, int nrOfEntries); // Method called after an Object value has been completely output (minus closing curly bracket).\n\tvoid writeObjectEntrySeparator(JsonGenerator gen); // Method called after an Object entry (field:value) has been completely output, and before another value is to be output.\n\tvoid writeObjectFieldValueSeparator(JsonGenerator gen); // Method called after an object field has been output, but before the value is output.\n\tvoid writeRootValueSeparator(JsonGenerator gen); // Method called after a root-level value has been completely output, and before another value is to be output.\n\tvoid writeStartArray(JsonGenerator gen); // Method called when an Array value is to be output, before any member/child values are output.\n\tvoid writeStartObject(JsonGenerator gen); // Method called when an Object value is to be output, before any fields are output.\n}"}
{"index": 4373, "repo": "beam-sdks-java-core-2.49.0", "des": "General-purpose transforms for working with files: listing files (matching), reading and writing.", "code": "Class FileIO {\n\tstatic FileIO.Match match(); // Matches a filepattern using FileSystems.match(java.util.List<java.lang.String>) and produces a collection of matched resources (both files and directories) as MatchResult.Metadata.\n\tstatic FileIO.MatchAll matchAll(); // Like match(), but matches each filepattern in a collection of filepatterns.\n\tstatic FileIO.ReadMatches readMatches(); // Converts each result of match() or matchAll() to a FileIO.ReadableFile which can be used to read the contents of each file, optionally decompressing it.\n\tstatic <InputT> FileIO.Write<java.lang.Void,InputT> write(); // Writes elements to files using a FileIO.Sink.\n\tstatic <DestT,InputT>FileIO.Write<DestT,InputT> writeDynamic(); // Writes elements to files using a FileIO.Sink and grouping the elements using \"dynamic destinations\".\n}"}
{"index": 4113, "repo": "camel-core-3.0.0-RC1", "des": "Represents the concrete Json libraries Camel supports.", "code": "Enum JsonLibrary {\n\tstatic JsonLibrary valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic JsonLibrary[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1787, "repo": "kafka-clients-3.5.0", "des": "A Callback for use by the SaslServer implementation when it needs to validate the SASL extensions for the OAUTHBEARER mechanism Callback handlers should use the valid(String) method to communicate valid extensions back to the SASL server.", "code": "Class OAuthBearerExtensionsValidatorCallback {\n\tvoid error(String invalidExtensionName, String errorMessage); // Set the error value for a specific extension key-value pair if validation has failed\n\tMap<String,String> ignoredExtensions();\n\tSaslExtensions inputExtensions();\n\tMap<String,String> invalidExtensions();\n\tOAuthBearerToken token();\n\tvoid valid(String extensionName); // Validates a specific extension in the original inputExtensions map\n\tMap<String,String> validatedExtensions();\n}"}
{"index": 14228, "repo": "wicket-core-10.0.0-M1", "des": "Gets the actual path for a specific file system.", "code": "public interface FileSystemPathService {\n\tPath getPath(URI uri, Map<String,String> env); // Gets the actual path for a specific file system to work on\n\tboolean isResponsible(URI uri); // Checks if the file system path service is responsible to handle the given URI\n}"}
{"index": 5143, "repo": "druid-processing-26.0.0", "des": "See BuildingShardSpec for how this class is used.", "code": "Class BuildingHashBasedNumberedShardSpec {\n\tHashBasedNumberedShardSpec convert(int numCorePartitions);\n\t<T> PartitionChunk<T> createChunk(T obj);\n\tboolean equals(Object o);\n\tint getBucketId();\n\tint getNumBuckets();\n\tList<String> getPartitionDimensions();\n\tHashPartitionFunction getPartitionFunction();\n\tint getPartitionNum(); // Returns the partition ID of this segment.\n\tString getType(); // Get the type name of this ShardSpec.\n}"}
{"index": 8515, "repo": "commons-io-2.13.0", "des": "A runnable that spawns a monitoring thread triggering any registered FileAlterationObserver at a specified interval.", "code": "Class FileAlterationMonitor {\n\tvoid addObserver(FileAlterationObserver observer); // Adds a file system observer to this monitor.\n\tlong getInterval(); // Returns the interval.\n\tIterable<FileAlterationObserver> getObservers(); // Returns the set of FileAlterationObserver registered with this monitor.\n\tvoid removeObserver(FileAlterationObserver observer); // Removes a file system observer from this monitor.\n\tvoid run(); // Runs this monitor.\n\tvoid setThreadFactory(ThreadFactory threadFactory); // Sets the thread factory.\n\tvoid start(); // Starts monitoring.\n\tvoid stop(); // Stops monitoring.\n\tvoid stop(long stopInterval); // Stops monitoring.\n}"}
{"index": 1777, "repo": "kafka-clients-3.5.0", "des": "Serializer/Deserializer interface for KafkaPrincipal for the purpose of inter-broker forwarding.", "code": "Interface KafkaPrincipalSerde {\n\tKafkaPrincipal deserialize(byte[] bytes); // Deserialize a KafkaPrincipal from byte array.\n\tbyte[] serialize(KafkaPrincipal principal); // Serialize a KafkaPrincipal into byte array.\n}"}
{"index": 2436, "repo": "calcite-linq4j-1.34.0", "des": "Helper methods concerning BlockStatements.", "code": "Class Blocks {\n\tstatic BlockStatement create(Statement statement, BlockStatement block); // Prepends a statement to a block.\n\tstatic Expression simple(BlockStatement block); // Converts a simple \"{ return expr; }\" block into \"expr\"; otherwise throws.\n\tstatic BlockStatement toBlock(Node body);\n\tstatic BlockStatement toFunctionBlock(Node body);\n}"}
{"index": 12750, "repo": "spring-data-mongodb-4.1.2", "des": "Builder to create GridFsUpload in a fluent way.", "code": "public static class GridFsUpload.GridFsUploadBuilder<T> extends Object {\n\tGridFsUpload<T> build();\n\tGridFsUpload.GridFsUploadBuilder<T> chunkSize(int chunkSize); // Set the upload chunk size in bytes.\n\tGridFsUpload.GridFsUploadBuilder<T> content(InputStream stream); // Define the content of the file to upload.\n\tGridFsUpload.GridFsUploadBuilder<T> content(Supplier<InputStream> stream); // Define the content of the file to upload.\n\tGridFsUpload.GridFsUploadBuilder<T> contentType(String contentType); // Set the content type.\n\tGridFsUpload.GridFsUploadBuilder<T> filename(String filename); // Set the filename.\n\tGridFsUpload.GridFsUploadBuilder<T> gridFsFile(com.mongodb.client.gridfs.model.GridFSFile gridFSFile); // Set id, filename, metadata and chunk size from given file.\n\t<T1> GridFsUpload.GridFsUploadBuilder<T1> id(T1 id); // Set the id to use.\n\tGridFsUpload.GridFsUploadBuilder<T> metadata(org.bson.Document metadata); // Set the file metadata.\n\tGridFsUpload.GridFsUploadBuilder<T> options(GridFsObject.Options options); // Set additional file information.\n}"}
{"index": 15841, "repo": "camel-api-4.0.0-RC1", "des": "Basic configuration holder for resume strategies", "code": "public abstract class ResumeStrategyConfiguration extends Object {\n\tCacheable.FillPolicy getCacheFillPolicy(); // Gets the Cacheable.FillPolicy for the cache used in the strategy\n\tResumeCache<?> getResumeCache();\n\tabstract String resumeStrategyService(); // Allows the implementation to provide custom strategy service factories.\n\tvoid setCacheFillPolicy(Cacheable.FillPolicy cacheFillPolicy); // Sets the Cacheable.FillPolicy for the cache used in the strategy\n\tvoid setResumeCache(ResumeCache<?> resumeCache);\n}"}
{"index": 12616, "repo": "spring-data-mongodb-4.1.2", "des": "AccumulatorOperators.ExpMovingAvg calculates the exponential moving average of numeric values.", "code": "public static class AccumulatorOperators.ExpMovingAvg extends Object {\n\tAccumulatorOperators.ExpMovingAvg alpha(double exponentialDecayValue); // Define the exponential decay value.\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tstatic AccumulatorOperators.ExpMovingAvg expMovingAvgOf(String fieldReference); // Create a new AccumulatorOperators.ExpMovingAvg by defining the field holding the value to be used as input.\n\tstatic AccumulatorOperators.ExpMovingAvg expMovingAvgOf(AggregationExpression expression); // Create a new AccumulatorOperators.ExpMovingAvg by defining the expression to compute the value to be used as input.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tAccumulatorOperators.ExpMovingAvg n(int numberOfHistoricalDocuments); // Define the number of historical documents with significant mathematical weight.\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 6051, "repo": "jackson-databind-2.15.2", "des": "Type serializer that preferably embeds type information as an additional JSON Object property, if possible (when resulting serialization would use JSON Object).", "code": "Class AsPropertyTypeSerializer {\n\tAsPropertyTypeSerializer forProperty(BeanProperty prop); // Method called to create contextual version, to be used for values of given property.\n\tString getPropertyName(); // Name of property that contains type information, if property-based inclusion is used.\n\tJsonTypeInfo.As getTypeInclusion(); // Accessor for type information inclusion method that serializer uses; indicates how type information is embedded in resulting JSON.\n}"}
{"index": 15167, "repo": "spring-data-elasticsearch-5.1.2", "des": "A container for seq_no and primary_term values.", "code": "public record SeqNoPrimaryTerm(long sequenceNumber, long primaryTerm) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tlong primaryTerm(); // Returns the value of the primaryTerm record component.\n\tlong sequenceNumber(); // Returns the value of the sequenceNumber record component.\n}"}
{"index": 12658, "repo": "spring-data-mongodb-4.1.2", "des": "Encapsulates BucketOperationSupport.Outputs.", "code": "protected static class BucketOperationSupport.Outputs extends Object implements AggregationExpression {\n\tprotected BucketOperationSupport.Outputs and(BucketOperationSupport.Output output); // Create a new BucketOperationSupport.Outputs that contains the new BucketOperationSupport.Output.\n\tprotected ExposedFields asExposedFields();\n\tprotected boolean isEmpty();\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n}"}
{"index": 4940, "repo": "commons-collections-3.2.2", "des": "Base Iterator that iterates in link order.", "code": "Class AbstractLinkedMap.LinkIterator {\n\tprotected AbstractLinkedMap.LinkEntry currentEntry();\n\tboolean hasNext();\n\tboolean hasPrevious(); // Checks to see if there is a previous element that can be iterated to.\n\tprotected AbstractLinkedMap.LinkEntry nextEntry();\n\tprotected AbstractLinkedMap.LinkEntry previousEntry();\n\tvoid remove();\n\tvoid reset(); // Resets the iterator back to the position at which the iterator was created.\n}"}
{"index": 12029, "repo": "jena-core-4.9.0", "des": "Default implementation of the interface that defines a closed enumeration of concrete values for the range of a property.", "code": "public class DataRangeImpl extends OntResourceImpl implements DataRange {\n\tvoid addOneOf(Iterator<Literal> literals); // Add each literal from the given iteration to the enumeration that defines the permissible values of this datarange.\n\tvoid addOneOf(Literal lit); // Add a literal to the enumeration that defines the permissible values of this class.\n\tRDFList getOneOf(); // Answer a list of literals that defines the extension of this datarange.\n\tboolean hasOneOf(Literal lit); // Answer true if the given literal is one of the enumerated literals that are the permissible values of this datarange.\n\tExtendedIterator<Literal> listOneOf(); // Answer an iterator over all of the literals that are declared to be the permissible values for this class.\n\tvoid removeOneOf(Literal lit); // Remove the statement that this enumeration includes lit among its members.\n\tvoid setOneOf(RDFList en); // Assert that this data range is exactly the enumeration of the given individuals.\n}"}
{"index": 160, "repo": "commons-collections4-4.4", "des": "Transformer implementation that creates a new object instance by reflection.", "code": "Class InstantiateTransformer<T> {\n\tstatic <T> Transformer<Class<? extends T>,T> instantiateTransformer(); // Get a typed no-arg instance.\n\tstatic <T> Transformer<Class<? extends T>,T> instantiateTransformer(Class<?>[] paramTypes, Object[] args); // Transformer method that performs validation.\n\tT transform(Class<? extends T> input); // Transforms the input Class object to a result by instantiation.\n}"}
{"index": 5683, "repo": "freemarker-2.3.32", "des": "A TemplateLoader that can load templates from the \"classpath\".", "code": "Class ClassTemplateLoader {\n\tjava.lang.String getBasePackagePath(); // See the similar parameter of ClassTemplateLoader(ClassLoader, String); note that this is a normalized version of what was actually passed to the constructor.\n\tjava.lang.ClassLoader getClassLoader(); // See the similar parameter of ClassTemplateLoader(ClassLoader, String); null when other mechanism is used to load the resources.\n\tjava.lang.Class getResourceLoaderClass(); // See the similar parameter of ClassTemplateLoader(Class, String); null when other mechanism is used to load the resources.\n\tprotected java.net.URL getURL(java.lang.String name); // Given a template name (plus potential locale decorations) retrieves an URL that points the template source.\n}"}
{"index": 2339, "repo": "commons-geometry-euclidean-1.0", "des": "Abstract base class representing an n-sphere, which is a generalization of the ordinary 3 dimensional sphere to arbitrary dimensions.", "code": "Class AbstractNSphere<V extends EuclideanVector<V>> {\n\tRegionLocation classify(V pt);\n\tboolean equals(Object obj);\n\tprotected <L extends Embedding<V,Vector1D>>V firstIntersection(L line, ToDoubleBiFunction<L,V> abscissaFn, ToDoubleBiFunction<L,V> distanceFn); // Internal method to compute the first intersection between a line and this instance.\n\tV getCenter(); // Get the center point of the n-sphere.\n\tV getCentroid();\n\tPrecision.DoubleEquivalence getPrecision(); // Get the precision object used to perform floating point comparisons for this instance.\n\tdouble getRadius(); // Get the radius of the n-sphere.\n\tprotected <L extends Embedding<V,Vector1D>>List<V> intersections(L line, ToDoubleBiFunction<L,V> abscissaFn, ToDoubleBiFunction<L,V> distanceFn); // Internal method to compute the intersections between a line and this instance.\n\tboolean isEmpty();\n\tboolean isFull();\n\tprotected V project(V pt, V defaultVector); // Project the given point to the boundary of the n-sphere.\n}"}
{"index": 16258, "repo": "maven-model-builder-4.0.0-alpha-7", "des": "Checks the model for missing or invalid values.", "code": "public interface ModelValidator {\n\tvoid validateEffectiveModel(Model model, ModelBuildingRequest request, ModelProblemCollector problems); // Checks the specified (effective) model for missing or invalid values.\n\tdefault void validateFileModel(Model model, ModelBuildingRequest request, ModelProblemCollector problems); // Checks the specified file model for missing or invalid values.\n\tvoid validateRawModel(Model model, ModelBuildingRequest request, ModelProblemCollector problems); // Checks the specified (raw) model for missing or invalid values.\n}"}
{"index": 13891, "repo": "spring-webflux-6.0.11", "des": "Process the HandlerResult, usually returned by a HandlerAdapter.", "code": "public interface HandlerResultHandler {\n\treactor.core.publisher.Mono<Void> handleResult(org.springframework.web.server.ServerWebExchange exchange, HandlerResult result); // Process the given result modifying response headers and/or writing data to the response.\n\tboolean supports(HandlerResult result); // Whether this handler supports the given HandlerResult.\n}"}
{"index": 10018, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Interface for appmaster to resource manager communication.", "code": "Interface AppmasterRmOperations {\n\tAllocateResponse allocate(AllocateRequest request); // Allocate container.\n\tFinishApplicationMasterResponse finish(FinishApplicationMasterRequest request); // Finish the application master.\n\tRegisterApplicationMasterResponse registerApplicationMaster(String host, Integer rpcPort, String trackUrl); // Register application master.\n}"}
{"index": 15671, "repo": "pulsar-common-3.0.0", "des": "This a builder like class for providing a fluent API for graceful shutdown Executors are added with the GracefulExecutorServicesShutdown.shutdown(ExecutorService...) method.", "code": "public class GracefulExecutorServicesShutdown extends Object {\n\tCompletableFuture<Void> handle(); // Starts the handler for polling frequently for the completed termination of enlisted executors.\n\tstatic GracefulExecutorServicesShutdown initiate(); // Initiates a new shutdown for one or many ExecutorServices.\n\tGracefulExecutorServicesShutdown shutdown(ExecutorService... executorServices); // Calls ExecutorService.shutdown() and enlists the executor as part of the shutdown handling.\n\tGracefulExecutorServicesShutdown terminationTimeout(Duration terminationTimeout); // Sets the timeout for waiting for executors to complete in forceful termination.\n\tGracefulExecutorServicesShutdown timeout(Duration timeout); // Sets the timeout for graceful shutdown.\n}"}
{"index": 18594, "repo": "hibernate-core-5.6.15.Final", "des": "Describes access to a particular persistent property in terms of getting and setting values.", "code": "Interface PropertyAccess {\n\tGetter getGetter(); // Obtain the delegate for getting values for the described persistent property\n\tPropertyAccessStrategy getPropertyAccessStrategy(); // Access to the PropertyAccessStrategy that created this PropertyAccess\n\tSetter getSetter(); // Obtain the delegate for setting values for the described persistent property\n}"}
{"index": 14378, "repo": "wicket-core-10.0.0-M1", "des": "Validates an IValidatable by matching the value against a regular expression pattern.", "code": "public class PatternValidator extends Object implements IValidator<String> {\n\tprotected IValidationError decorate(IValidationError error, IValidatable<String> validatable); // Allows subclasses to decorate reported errors\n\tfinal Pattern getPattern(); // Gets the regexp pattern.\n\tPatternValidator setReverse(boolean reverse); // If set to true then input that matches the pattern is considered invalid.\n\tvoid validate(IValidatable<String> validatable); // Checks a value against this PatternValidator's Pattern.\n}"}
{"index": 9619, "repo": "commons-math3-3.6.1", "des": "This class handles the state for one event handler during integration steps.", "code": "Class FieldEventState<T extends RealFieldElement<T>> {\n\tboolean evaluateStep(FieldStepInterpolator<T> interpolator); // Evaluate the impact of the proposed step on the event handler.\n\tT getConvergence(); // Get the convergence threshold for event localization.\n\tFieldEventHandler<T> getEventHandler(); // Get the underlying event handler.\n\tT getEventTime(); // Get the occurrence time of the event triggered in the current step.\n\tdouble getMaxCheckInterval(); // Get the maximal time interval between events handler checks.\n\tint getMaxIterationCount(); // Get the upper limit in the iteration count for event localization.\n\tvoid reinitializeBegin(FieldStepInterpolator<T> interpolator); // Reinitialize the beginning of the step.\n\tFieldODEState<T> reset(FieldODEStateAndDerivative<T> state); // Let the event handler reset the state if it wants.\n\tvoid stepAccepted(FieldODEStateAndDerivative<T> state); // Acknowledge the fact the step has been accepted by the integrator.\n\tboolean stop(); // Check if the integration should be stopped at the end of the current step.\n}"}
{"index": 17349, "repo": "groovy-4.0.13", "des": "Represents a memoize cache with its essential methods", "code": "public interface MemoizeCache<K,V> {\n\tvoid cleanUpNullReferences(); // Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tV get(K key); // Gets a value from the cache\n\tdefault V getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider); // Try to get the value from cache.\n\tV put(K key, V value); // Associates the specified value with the specified key in the cache.\n}"}
{"index": 18598, "repo": "hibernate-core-5.6.15.Final", "des": "Specialized CacheEntry for storing direct references to entity instances.", "code": "Class ReferenceCacheEntryImpl {\n\tjava.io.Serializable[] getDisassembledState(); // Get the underlying disassembled state todo : this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble an EntityEntry based on this state for return.\n\tjava.lang.Object getReference(); // Provides access to the stored reference.\n\tjava.lang.String getSubclass(); // Hibernate stores all entries pertaining to a given entity hierarchy in a single region.\n\tEntityPersister getSubclassPersister();\n\tjava.lang.Object getVersion(); // Retrieves the version (optimistic locking) associated with this cache entry.\n\tboolean isReferenceEntry(); // Does this entry represent a direct entity reference (rather than disassembled state)?\n}"}
{"index": 5028, "repo": "commons-collections-3.2.2", "des": "A MultiKey allows multiple map keys to be merged together.", "code": "Class MultiKey {\n\tboolean equals(Object other); // Compares this object to another.\n\tObject getKey(int index); // Gets the key at the specified index.\n\tObject[] getKeys(); // Gets a clone of the array of keys.\n\tint size(); // Gets the size of the list of keys.\n}"}
{"index": 5982, "repo": "commons-lang3-3.12.0", "des": "A functional interface like LongFunction that declares a Throwable.", "code": "Interface FailableLongFunction<R,E extends Throwable> {\n\tR apply(long input); // Applies this function.\n\tstatic <R,E extends Throwable>FailableLongFunction<R,E> nop(); // Returns The NOP singleton.\n}"}
{"index": 11973, "repo": "jena-core-4.9.0", "des": "A URI or blank node reported to a StatementHandler.", "code": "public interface AResource {\n\tString getAnonymousID(); // A string distinguishing this anonymous resource, from other anonymous resources.\n\tString getURI(); // The URI reference for this resource, if any.\n\tObject getUserData(); // The user data allows the RDF application to store one Object with each blank node during parsing.\n\tboolean hasNodeID(); // True, if this is an anonymous resource with an explicit rdf:nodeID.\n\tboolean isAnonymous(); // True if this resource does not have an associated URI.\n\tvoid setUserData(Object d); // The user data allows the RDF application to store one Object with each blank node during parsing.\n}"}
{"index": 9797, "repo": "commons-math3-3.6.1", "des": "A helper class for the computation and caching of the n-th roots of unity.", "code": "Class RootsOfUnity {\n\tvoid computeRoots(int n); // Computes the n-th roots of unity.\n\tdouble getImaginary(int k); // Get the imaginary part of the k-th n-th root of unity.\n\tint getNumberOfRoots(); // Returns the number of roots of unity currently stored.\n\tdouble getReal(int k); // Get the real part of the k-th n-th root of unity.\n\tboolean isCounterClockWise(); // Returns true if computeRoots(int) was called with a positive value of its argument n.\n}"}
{"index": 1759, "repo": "kafka-clients-3.5.0", "des": "A key/value pair to be received from Kafka.", "code": "Class ConsumerRecord<K,V> {\n\tHeaders headers(); // The headers (never null)\n\tK key(); // The key (or null if no key is specified)\n\tOptional<Integer> leaderEpoch(); // Get the leader epoch for the record if available\n\tlong offset(); // The position of this record in the corresponding Kafka partition.\n\tint partition(); // The partition from which this record is received\n\tint serializedKeySize(); // The size of the serialized, uncompressed key in bytes.\n\tint serializedValueSize(); // The size of the serialized, uncompressed value in bytes.\n\tlong timestamp(); // The timestamp of this record\n\torg.apache.kafka.common.record.TimestampType timestampType(); // The timestamp type of this record\n\tString topic(); // The topic this record is received from (never null)\n\tV value(); // The value\n}"}
{"index": 7212, "repo": "calcite-core-1.34.0", "des": "Context for translating a RexNode expression (within a RelNode) into a SqlNode expression (within a SQL parse tree).", "code": "Class SqlImplementor.Context {\n\tabstract SqlNode field(int ordinal);\n\tList<SqlNode> fieldList();\n\tprotected SqlImplementor.Context getAliasContext(RexCorrelVariable variable);\n\tabstract SqlImplementor implementor();\n\tSqlNode orderField(int ordinal); // Creates a reference to a field to be used in an ORDER BY clause.\n\tprotected RexCall reverseCall(RexCall call); // Reverses the order of a call, while preserving semantics, if it improves readability.\n\tSqlNode toSql(AggregateCall aggCall); // Converts a call to an aggregate function to an expression.\n\tSqlNode toSql(RelFieldCollation collation); // Converts a collation to an ORDER BY item.\n\tSqlNode toSql(@Nullable RexProgram program, RexNode rex); // Converts an expression from RexNode to SqlNode format.\n\tSqlNode toSql(RexWindowBound rexWindowBound); // Converts an expression from RexWindowBound to SqlNode format.\n\tList<SqlNode> toSql(Window.Group group, com.google.common.collect.ImmutableList<RexLiteral> constants, int inputFieldCount);\n}"}
{"index": 14501, "repo": "spring-security-web-6.1.2", "des": "Inserts Cross-Origin-Resource-Policy header", "code": "public final class CrossOriginResourcePolicyHeaderWriter extends Object implements HeaderWriter {\n\tvoid setPolicy(CrossOriginResourcePolicyHeaderWriter.CrossOriginResourcePolicy resourcePolicy); // Sets the CrossOriginResourcePolicyHeaderWriter.CrossOriginResourcePolicy value to be used in the Cross-Origin-Resource-Policy header\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Create a Header instance.\n}"}
{"index": 128, "repo": "commons-collections4-4.4", "des": "Abstract base class for all commands used to transform an objects sequence into another one.", "code": "Class EditCommand<T> {\n\tabstract void accept(CommandVisitor<T> visitor); // Accept a visitor.\n\tprotected T getObject(); // Returns the object associated with this command.\n}"}
{"index": 12130, "repo": "jena-core-4.9.0", "des": "Lock implementation using a Multiple Reader, Single Writer policy.", "code": "public class LockMRSW extends Object implements Lock {\n\tfinal void enterCriticalSection(boolean readLockRequested); // Application controlled locking - enter a critical section.\n\tfinal void leaveCriticalSection(); // Application controlled locking - leave a critical section.\n}"}
{"index": 468, "repo": "spring-cloud-core-1.2.9.RELEASE", "des": "Base class to simplify creation of ServiceConnectorCreators.", "code": "Class AbstractServiceConnectorCreator<SC,SI extends ServiceInfo> {\n\tjava.lang.Class<SC> getServiceConnectorType(); // Get the type of connector created (such as DataSource)\n\tjava.lang.Class<SI> getServiceInfoType(); // Get the service info type this creator can work with (such as MysqlServiceInfo)\n}"}
{"index": 5135, "repo": "druid-processing-26.0.0", "des": "An OutputChannelFactory that generates BlockingQueueFrameChannel.", "code": "Class BlockingQueueOutputChannelFactory {\n\tOutputChannel openChannel(int partitionNumber); // Create a channel pair tagged with a particular partition number.\n\tOutputChannel openNilChannel(int partitionNumber); // Create a non-writable, always-empty channel pair tagged with a particular partition number.\n\tPartitionedOutputChannel openPartitionedChannel(String name, boolean deleteAfterRead); // Create a channel pair tagged with a particular name and a flag to delete the channel data after its read.\n}"}
{"index": 8178, "repo": "spring-ws-3.0.10.RELEASE", "des": "Default implementation of the MessagesProvider.", "code": "Class DefaultMessagesProvider {\n\tvoid addMessages(javax.wsdl.Definition definition);\n\tprotected String getElementName(Element element); // Returns the name attribute of the given element.\n\tprotected boolean isMessageElement(Element element); // Indicates whether the given element should be includes as Message in the definition.\n\tprotected void populateMessage(javax.wsdl.Definition definition, javax.wsdl.Message message, QName elementName); // Called after the Message has been created.\n\tprotected void populatePart(javax.wsdl.Definition definition, javax.wsdl.Part part, QName elementName); // Called after the Part has been created.\n}"}
{"index": 10817, "repo": "spring-boot-actuator-3.1.1", "des": "Details for a link in a HAL-formatted response.", "code": "public class Link extends Object {\n\tString getHref(); // Returns the href of the link.\n\tboolean isTemplated(); // Returns whether the href is templated.\n}"}
{"index": 13280, "repo": "spring-test-6.0.11", "des": "Spec for expectations on the response body decoded to a single Object.", "code": "public static interface WebTestClient.BodySpec<B,S extends WebTestClient.BodySpec<B,S>> {\n\t<T extends S>T consumeWith(Consumer<EntityExchangeResult<B>> consumer); // Assert the exchange result with the given Consumer.\n\t<T extends S>T isEqualTo(B expected); // Assert the extracted body is equal to the given value.\n\tEntityExchangeResult<B> returnResult(); // Exit the chained API and return an ExchangeResult with the decoded response content.\n\t<T extends S>T value(Consumer<B> consumer); // Assert the extracted body with a Consumer.\n\t<T extends S, R>T value(Function<B,R> bodyMapper, Matcher<? super R> matcher); // Transform the extracted the body with a function, e.g.\n\t<T extends S>T value(Matcher<? super B> matcher); // Assert the extracted body with a Matcher.\n}"}
{"index": 2830, "repo": "tika-parsers-1.28.5", "des": "An 8-bit header for a compound object would indicate the end of a stream object.", "code": "Class StreamObjectHeaderEnd8bit {\n\tprotected int doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the StreamObjectHeaderEnd8bit basic object from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of StreamObjectHeaderEnd8bit basic object into a byte List.\n\tbyte toByte(); // This method is used to get the byte value of the 8bit stream object header End.\n}"}
{"index": 7106, "repo": "calcite-core-1.34.0", "des": "Implementor for the LAG windowed aggregate function.", "code": "Class RexImpTable.LagImplementor {\n\tList<Type> getStateType(AggContext info); // Returns the types of the intermediate variables used by the aggregate implementation.\n\tvoid implementAdd(AggContext info, AggAddContext add); // Updates intermediate values to account for the newly added value.\n\tvoid implementReset(AggContext info, AggResetContext reset); // Implements reset of the intermediate variables to the initial state.\n\torg.apache.calcite.linq4j.tree.Expression implementResult(AggContext info, AggResultContext result); // Calculates the resulting value based on the intermediate variables.\n\tboolean needCacheWhenFrameIntact();\n}"}
{"index": 14168, "repo": "wicket-core-10.0.0-M1", "des": "Used to apply several ICssCompressor to the CSS compression. Usage:", "code": "public class CompositeCssCompressor extends Object implements IScopeAwareTextResourceProcessor, ICssCompressor {\n\tCompositeCssCompressor add(ICssCompressor compressor); // Adds a ICssCompressor to the list of delegates.\n\tString compress(String original); // Remove comments and white spaces from the text resource\n\tString process(String input, Class<?> scope, String name); // Compresses the given original content in the order of compressors.\n}"}
{"index": 17936, "repo": "spring-web-6.0.11", "des": "Spring MultipartHttpServletRequest adapter, wrapping a Servlet HttpServletRequest and its Part objects.", "code": "public class StandardMultipartHttpServletRequest extends AbstractMultipartHttpServletRequest {\n\tString getMultipartContentType(String paramOrFileName); // Determine the content type of the specified request part.\n\tHttpHeaders getMultipartHeaders(String paramOrFileName); // Return the headers for the specified part of the multipart request.\n\tMap<String,String[]> getParameterMap();\n\tEnumeration<String> getParameterNames();\n\tprotected void handleParseFailure(Throwable ex);\n\tprotected void initializeMultipart(); // Lazily initialize the multipart request, if possible.\n}"}
{"index": 216, "repo": "commons-collections4-4.4", "des": "Decorates another SortedBag to validate that additions match a specified predicate.", "code": "Class PredicatedSortedBag<E> {\n\tComparator<? super E> comparator(); // Returns the comparator associated with this sorted set, or null if it uses its elements' natural ordering.\n\tprotected SortedBag<E> decorated(); // Gets the decorated sorted bag.\n\tE first(); // Returns the first (lowest) member.\n\tE last(); // Returns the last (highest) member.\n\tstatic <E> PredicatedSortedBag<E> predicatedSortedBag(SortedBag<E> bag, Predicate<? super E> predicate); // Factory method to create a predicated (validating) bag.\n}"}
{"index": 2756, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "A table split corresponds to a key range (low, high) and an optional scanner.", "code": "Class TableSplit {\n\tint compareTo(TableSplit split); // Compares this split against the given one.\n\tboolean equals(Object o);\n\tString getEncodedRegionName(); // Returns the region's encoded name.\n\tbyte[] getEndRow(); // Returns the end row.\n\tlong getLength(); // Returns the length of the split.\n\tString[] getLocations(); // Returns the region's location as an array.\n\tString getRegionLocation(); // Returns the region location.\n\tScan getScan(); // Returns a Scan object from the stored string representation.\n\tString getScanAsString(); // Returns a scan string\n\tbyte[] getStartRow(); // Returns the start row.\n\tTableName getTable(); // Returns the table name.\n\tbyte[] getTableName(); // Returns the table name converted to a byte array.\n\tvoid readFields(DataInput in); // Reads the values of each field.\n\tvoid write(DataOutput out); // Writes the field values to the output.\n}"}
{"index": 6360, "repo": "spring-data-solr-4.3.15", "des": "Cursor provides a lazy loading abstraction for fetching documents.", "code": "Interface Cursor<T> {\n\tSerializable getCursorMark(); // Get the current set cursorMark\n\tlong getPosition();\n\tboolean isClosed();\n\tboolean isOpen();\n\tCursor<T> open(); // Opens the cursor.\n}"}
{"index": 8714, "repo": "accumulo-client-mapreduce-2.0.0-alpha-1", "des": "Hadoop partitioner that uses ranges based on row keys, and optionally sub-bins based on hashing.", "code": "Class KeyRangePartitioner {\n\torg.apache.hadoop.conf.Configuration getConf();\n\tint getPartition(Key key, org.apache.hadoop.io.Writable value, int numPartitions);\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n\tstatic void setNumSubBins(org.apache.hadoop.mapreduce.Job job, int num); // Sets the number of random sub-bins per range\n\tstatic void setSplitFile(org.apache.hadoop.mapreduce.Job job, String file); // Sets the hdfs file name to use, containing a newline separated list of Base64 encoded split points that represent ranges for partitioning\n}"}
{"index": 1270, "repo": "ignite-core-2.15.0", "des": "Message indicating that user operation is finished locally on the node.", "code": "Class UserManagementOperationFinishedMessage {\n\tshort directType(); // Gets message type.\n\tString errorMessage();\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tIgniteUuid operationId();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean success();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 15796, "repo": "camel-api-4.0.0-RC1", "des": "An entity that can point to a given line number from a source Resource such as YAML and XML DSL parsers.", "code": "public interface LineNumberAware {\n\tint getLineNumber(); // The line number of this entity.\n\tString getLocation(); // The location of the entity.\n\tvoid setLineNumber(int lineNumber); // Sets the line number of this entity.\n\tvoid setLocation(String location); // Sets the location of the entity (source file name, i.e.\n\tstatic <T> T trySetLineNumberAware(T object, LineNumberAware source); // Set the LineNumberAware if the object is an instance of LineNumberAware.\n}"}
{"index": 9977, "repo": "commons-text-1.10.0", "des": "Translates code points to their Unicode escaped value suitable for Java source.", "code": "Class JavaUnicodeEscaper {\n\tstatic JavaUnicodeEscaper above(int codePoint); // Constructs a JavaUnicodeEscaper above the specified value (exclusive).\n\tstatic JavaUnicodeEscaper below(int codePoint); // Constructs a JavaUnicodeEscaper below the specified value (exclusive).\n\tstatic JavaUnicodeEscaper between(int codePointLow, int codePointHigh); // Constructs a JavaUnicodeEscaper between the specified values (inclusive).\n\tstatic JavaUnicodeEscaper outsideOf(int codePointLow, int codePointHigh); // Constructs a JavaUnicodeEscaper outside of the specified values (exclusive).\n\tprotected String toUtf16Escape(int codePoint); // Converts the given code point to a hex string of the form \"\\\\uXXXX\\\\uXXXX\".\n}"}
{"index": 1893, "repo": "hadoop-hdfs-3.3.6", "des": "Greedy Planner is a simple planner that computes the largest possible move at any point of time given a volumeSet.", "code": "Class GreedyPlanner {\n\tvoid balanceVolumeSet(DiskBalancerDataNode node, DiskBalancerVolumeSet vSet, NodePlan plan); // Computes Steps to make a DiskBalancerVolumeSet Balanced.\n\tNodePlan plan(DiskBalancerDataNode node); // Computes a node plan for the given node.\n}"}
{"index": 17520, "repo": "pulsar-broker-3.0.0", "des": "Listener for NamespaceBundle ownership changes.", "code": "public interface NamespaceBundleOwnershipListener extends Predicate<NamespaceBundle> {\n\tvoid onLoad(NamespaceBundle bundle); // Will be call after a NamespaceBundle owned by broker.\n\tvoid unLoad(NamespaceBundle bundle); // Will be call after a NamespaceBundle unloaded from broker.\n}"}
{"index": 15188, "repo": "spring-boot-3.1.1", "des": "GenericWebApplicationContextthat accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.", "code": "public class AnnotationConfigServletWebApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry {\n\tprotected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\tprotected void prepareRefresh();\n\tfinal void register(Class<?>... annotatedClasses); // Register one or more annotated classes to be processed.\n\t<T> void registerBean(String beanName, Class<T> beanClass, Supplier<T> supplier, org.springframework.beans.factory.config.BeanDefinitionCustomizer... customizers);\n\tfinal void scan(String... basePackages); // Perform a scan within the specified base packages.\n\tvoid setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator); // Provide a custom BeanNameGenerator for use with AnnotatedBeanDefinitionReader and/or ClassPathBeanDefinitionScanner, if any.\n\tvoid setEnvironment(org.springframework.core.env.ConfigurableEnvironment environment);\n\tvoid setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver scopeMetadataResolver); // Set the ScopeMetadataResolver to use for detected bean classes.\n}"}
{"index": 14325, "repo": "wicket-core-10.0.0-M1", "des": "THIS CLASS IS INTENDED FOR INTERNAL USE IN IMPLEMENTING LOCALE SENSITIVE COMPONENTS THAT USE IMAGE RESOURCES AND SHOULD NOT BE USED DIRECTLY BY END-USERS.", "code": "public final class LocalizedImageResource extends Object implements org.apache.wicket.util.io.IClusterable {\n\tfinal void bind(); // Binds this resource if it is shared\n\tfinal IResource getResource(); // return the resource\n\tfinal ResourceReference getResourceReference(); // return the resource\n\tfinal boolean isStateless();\n\tfinal void onResourceRequested(org.apache.wicket.request.mapper.parameter.PageParameters parameters);\n\tfinal void setResource(IResource resource);\n\tfinal void setResourceReference(ResourceReference resourceReference);\n\tfinal void setResourceReference(ResourceReference resourceReference, org.apache.wicket.request.mapper.parameter.PageParameters resourceParameters);\n\tfinal void setSrcAttribute(ComponentTag tag);\n}"}
{"index": 11392, "repo": "spring-context-6.0.11", "des": "Helper class for easy access to messages from a MessageSource, providing various overloaded getMessage methods.", "code": "public class MessageSourceAccessor extends Object {\n\tprotected Locale getDefaultLocale(); // Return the default locale to use if no explicit locale has been given.\n\tString getMessage(String code); // Retrieve the message for the given code and the default Locale.\n\tString getMessage(String code, Object[] args); // Retrieve the message for the given code and the default Locale.\n\tString getMessage(String code, Object[] args, String defaultMessage); // Retrieve the message for the given code and the default Locale.\n\tString getMessage(String code, Object[] args, String defaultMessage, Locale locale); // Retrieve the message for the given code and the given Locale.\n\tString getMessage(String code, Object[] args, Locale locale); // Retrieve the message for the given code and the given Locale.\n\tString getMessage(String code, String defaultMessage); // Retrieve the message for the given code and the default Locale.\n\tString getMessage(String code, String defaultMessage, Locale locale); // Retrieve the message for the given code and the given Locale.\n\tString getMessage(String code, Locale locale); // Retrieve the message for the given code and the given Locale.\n\tString getMessage(MessageSourceResolvable resolvable); // Retrieve the given MessageSourceResolvable (e.g.\n\tString getMessage(MessageSourceResolvable resolvable, Locale locale); // Retrieve the given MessageSourceResolvable (e.g.\n}"}
{"index": 7479, "repo": "nifi-client-dto-1.22.0", "des": "A serialized representation of this class can be placed in the entity body of a request or response to or from the API.", "code": "Class ParameterContextReferenceEntity {\n\tParameterContextReferenceDTO getComponent(); // The ParameterContextReferenceDTO that is being serialized.\n\tString getId(); // The id for this component.\n\tPermissionsDTO getPermissions(); // The permissions for this component.\n\tvoid setComponent(ParameterContextReferenceDTO component);\n\tvoid setId(String id);\n\tvoid setPermissions(PermissionsDTO permissions);\n}"}
{"index": 9376, "repo": "hadoop-yarn-api-3.3.6", "des": "Class that represents a composite constraint that comprises a list of timed placement constraints (see PlacementConstraint.", "code": "Class PlacementConstraint.DelayedOr {\n\t<T> T accept(PlacementConstraint.Visitor<T> visitor); // Visitor pattern.\n\tList<PlacementConstraint.TimedPlacementConstraint> getChildren(); // Get the children of this composite constraint.\n}"}
{"index": 2698, "repo": "mahout-core-14.1", "des": "sparse matrix with general element values whose rows are accessible quickly.", "code": "Class SparseRowMatrix {\n\tMatrix assign(Matrix other, DoubleDoubleFunction function); // Apply the function to each element of the receiver and the corresponding element of the other argument\n\tMatrix assignColumn(int column, Vector other); // Assign the other vector values to the column of the receiver\n\tMatrix assignRow(int row, Vector other); // Assign the other vector values to the row of the receiver\n\tMatrix clone(); // Return a copy of the recipient\n\tMatrixFlavor getFlavor(); // Get matrix structural flavor (operations performance hints).\n\tint[] getNumNondefaultElements(); // Return the number of values in the recipient\n\tdouble getQuick(int row, int column); // Return the value at the given indexes, without checking bounds\n\tMatrix like(); // Return an empty matrix of the same underlying class as the receiver\n\tMatrix like(int rows, int columns); // Returns an empty matrix of the same underlying class as the receiver and of the specified size.\n\tvoid setQuick(int row, int column, double value); // Set the value at the given index, without checking bounds\n\tMatrix times(Matrix other); // Return a new matrix containing the product of the recipient and the argument\n\tMatrix transpose(); // Return a new matrix that is the transpose of the receiver\n\tMatrix viewPart(int[] offset, int[] size); // Return a view into part of a matrix.\n\tVector viewRow(int row); // Returns a view of a row.\n}"}
{"index": 16021, "repo": "spring-integration-jms-6.1.2", "des": "A base IntegrationComponentSpec for JmsDestinationAccessors.", "code": "public abstract class JmsDestinationAccessorSpec<S extends JmsDestinationAccessorSpec<S,A>,A extends org.springframework.jms.support.destination.JmsDestinationAccessor> extends org.springframework.integration.dsl.IntegrationComponentSpec<S,A> {\n\tprotected S connectionFactory(jakarta.jms.ConnectionFactory connectionFactory);\n\tS destinationResolver(org.springframework.jms.support.destination.DestinationResolver destinationResolver); // A DestinationResolver to use.\n\tS id(String id);\n\tS pubSubDomain(boolean pubSubDomain); // A pubSubDomain flag.\n\tS sessionAcknowledgeMode(int sessionAcknowledgeMode); // A session acknowledgement mode.\n\tS sessionAcknowledgeModeName(String constantName); // A session acknowledgement mode name.\n\tS sessionTransacted(boolean sessionTransacted); // A session transaction mode.\n}"}
{"index": 15940, "repo": "spring-rabbit-3.0.6", "des": "Spring Rabbit Observation for listeners.", "code": "public enum RabbitListenerObservation extends Enum<RabbitListenerObservation> implements io.micrometer.observation.docs.ObservationDocumentation {\n\tstatic RabbitListenerObservation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic RabbitListenerObservation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 18155, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Represents a return which names a collection role; it is used in defining a custom query for loading an entity's collection in non-fetching scenarios (i.e., loading the collection itself as the \"root\" of the result).", "code": "Class CollectionReturn {\n\tCollectionAliases getCollectionAliases();\n\tEntityAliases getElementEntityAliases();\n\tjava.lang.String getOwnerEntityName(); // Returns the class owning the collection.\n\tjava.lang.String getOwnerProperty(); // Returns the name of the property representing the collection from the getOwnerEntityName().\n}"}
{"index": 11022, "repo": "spring-boot-configuration-processor-3.1.1", "des": "Parses a JSON (RFC 4627) encoded string into the corresponding object.", "code": "public class JSONTokener extends Object {\n\tvoid back();\n\tstatic int dehexchar(char hex);\n\tboolean more();\n\tchar next();\n\tchar next(char c);\n\tString next(int length);\n\tchar nextClean();\n\tString nextString(char quote); // Returns the string up to but not including quote, unescaping any character escape sequences encountered along the way.\n\tString nextTo(char excluded);\n\tString nextTo(String excluded);\n\tObject nextValue(); // Returns the next value from the input.\n\tvoid skipPast(String thru);\n\tchar skipTo(char to);\n\tJSONException syntaxError(String message); // Returns an exception containing the given message plus the current position and the entire input string.\n}"}
{"index": 7228, "repo": "calcite-core-1.34.0", "des": "How json query function handle array result.", "code": "Enum SqlJsonQueryWrapperBehavior {\n\tstatic SqlJsonQueryWrapperBehavior valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlJsonQueryWrapperBehavior[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14900, "repo": "spring-data-keyvalue-3.1.2", "des": "KeyValueEvent before inserting an object by with a given key.", "code": "public static class KeyValueEvent.BeforeInsertEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\tT getPayload(); // Get the value of the element the KeyValueEvent refers to.\n\tObject getSource();\n\tClass<? extends T> getType(); // Get the type of the element the KeyValueEvent refers to.\n}"}
{"index": 10560, "repo": "groovy-all-4.0.13", "des": "A LazyInitializable is an object that can be initialized lazily.", "code": "public interface LazyInitializable {\n\tvoid doInit(); // do initialization\n\tboolean isInitialized(); // Check if the object is initialized.\n\tdefault void lazyInit();\n\tvoid setInitialized(boolean initialized); // Mark the object initialized.\n}"}
{"index": 9157, "repo": "hbase-server-3.0.0-alpha-4", "des": "The procedure for updating the config for a replication peer.", "code": "Class UpdatePeerConfigProcedure {\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected boolean enablePeerBeforeFinish(); // The implementation class should override this method if the procedure may enter the serial related states.\n\tprotected ReplicationPeerConfig getNewPeerConfig();\n\tprotected ReplicationPeerConfig getOldPeerConfig();\n\tPeerProcedureInterface.PeerOperationType getPeerOperationType();\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.PeerModificationState nextStateAfterRefresh(); // Implementation class can override this method.\n\tprotected void postPeerModification(MasterProcedureEnv env); // Called before we finish the procedure.\n\tprotected void prePeerModification(MasterProcedureEnv env); // Called before we start the actual processing.\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tprotected void updateLastPushedSequenceIdForSerialPeer(MasterProcedureEnv env);\n\tprotected void updatePeerStorage(MasterProcedureEnv env);\n}"}
{"index": 5192, "repo": "druid-processing-26.0.0", "des": "DataSegmentArchiver knows how to archive segments.", "code": "Interface DataSegmentArchiver {\n\tDataSegment archive(DataSegment segment); // Perform an archive task on the segment and return the resulting segment or null if there was no action needed.\n\tDataSegment restore(DataSegment segment); // Perform the restore from an archived segment and return the resulting segment or null if there was no action\n}"}
{"index": 13683, "repo": "spring-webmvc-6.0.11", "des": "Simple adapter to expose the bind status of a field or object.", "code": "public class BindStatus extends Object {\n\tPropertyEditor findEditor(Class<?> valueClass); // Find a PropertyEditor for the given value class, associated with the property that this bound status is currently bound to.\n\tObject getActualValue(); // Return the actual value of the field, i.e.\n\tString getDisplayValue(); // Return a suitable display value for the field, i.e.\n\tPropertyEditor getEditor(); // Return the PropertyEditor for the property that this bind status is currently bound to.\n\tString getErrorCode(); // Return the first error codes for the field or object, if any.\n\tString[] getErrorCodes(); // Return the error codes for the field or object, if any.\n\tString getErrorMessage(); // Return the first error message for the field or object, if any.\n\tString[] getErrorMessages(); // Return the resolved error messages for the field or object, if any.\n\tString getErrorMessagesAsString(String delimiter); // Return an error message string, concatenating all messages separated by the given delimiter.\n\torg.springframework.validation.Errors getErrors(); // Return the Errors instance (typically a BindingResult) that this bind status is currently associated with.\n\tString getExpression(); // Return a bind expression that can be used in HTML forms as input name for the respective field, or null if not field-specific.\n\tString getPath(); // Return the bean and property path for which values and errors will be resolved (e.g.\n\tObject getValue(); // Return the current value of the field, i.e.\n\tClass<?> getValueType(); // Get the 'Class' type of the field.\n\tboolean isError(); // Return if this status represents a field or object error.\n}"}
{"index": 4117, "repo": "camel-core-3.0.0-RC1", "des": "Marshals data into a specified format for transmission over a transport or component.", "code": "Class MarshalDefinition {\n\tprotected String description();\n\tDataFormatDefinition getDataFormatType();\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getShortName();\n\tvoid setDataFormatType(DataFormatDefinition dataFormatType); // The data format to be used\n}"}
{"index": 1273, "repo": "ignite-core-2.15.0", "des": "Issue when checking size of cache and index.", "code": "Class ValidateIndexesCheckSizeIssue {\n\tThrowable error(); // Return error.\n\tlong indexSize(); // Return index size.\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 9127, "repo": "hbase-server-3.0.0-alpha-4", "des": "Create SplitWALProcedure for each WAL which need to split.", "code": "Class SplitWALManager {\n\tServerName acquireSplitWALWorker(Procedure<?> procedure); // Acquire a split WAL worker\n\tvoid addUsedSplitWALWorker(ServerName worker); // When master restart, there will be a new splitWorkerAssigner.\n\tvoid archive(String wal); // Archive processed WAL\n\tvoid deleteWALDir(ServerName serverName);\n\tList<org.apache.hadoop.fs.FileStatus> getWALsToSplit(ServerName serverName, boolean splitMeta);\n\tboolean isSplitWALFinished(String walPath);\n\tvoid releaseSplitWALWorker(ServerName worker, MasterProcedureScheduler scheduler); // After the worker finished the split WAL task, it will release the worker, and wake up all the suspend procedures in the ProcedureEvent\n\tList<Procedure> splitWALs(ServerName crashedServer, boolean splitMeta);\n}"}
{"index": 81, "repo": "commons-collections4-4.4", "des": "Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.", "code": "Class AbstractMapMultiSet<E> {\n\tint add(E object, int occurrences); // Adds a number of occurrences of the specified object to the MultiSet.\n\tvoid clear(); // Clears the multiset by clearing the underlying map.\n\tboolean contains(Object object); // Determines if the multiset contains the given element by checking if the underlying map contains the element as a key.\n\tprotected Iterator<MultiSet.Entry<E>> createEntrySetIterator(); // Creates an entry set iterator.\n\tprotected Iterator<E> createUniqueSetIterator(); // Creates a unique set iterator.\n\tprotected void doReadObject(ObjectInputStream in); // Read the multiset in using a custom routine.\n\tprotected void doWriteObject(ObjectOutputStream out); // Write the multiset out using a custom routine.\n\tboolean equals(Object object); // Compares this MultiSet to another object.\n\tint getCount(Object object); // Returns the number of occurrence of the given element in this multiset by looking up its count in the underlying map.\n\tprotected Map<E,AbstractMapMultiSet.MutableInteger> getMap(); // Utility method for implementations to access the map that backs this multiset.\n\tboolean isEmpty(); // Returns true if the underlying map is empty.\n\tIterator<E> iterator(); // Gets an iterator over the multiset elements.\n\tint remove(Object object, int occurrences); // Removes a number of occurrences of the specified object from the MultiSet.\n\tprotected void setMap(Map<E,AbstractMapMultiSet.MutableInteger> map); // Sets the map being wrapped.\n\tint size(); // Returns the number of elements in this multiset.\n\tObject[] toArray(); // Returns an array of all of this multiset's elements.\n\t<T> T[] toArray(T[] array); // Returns an array of all of this multiset's elements.\n\tprotected int uniqueElements(); // Returns the number of unique elements in this multiset.\n}"}
{"index": 1145, "repo": "ignite-core-2.15.0", "des": "Scanner handler which provide ability to do some handling on each record during iteration.", "code": "Interface ScannerHandler {\n\tdefault ScannerHandler andThen(ScannerHandler then); // Execute 'then' handler after 'this'.\n\tdefault void finish(); // Method which called after all iteration would be finished.\n\tvoid handle(IgniteBiTuple<WALPointer,WALRecord> record); // Handling one more record during iteration over WAL.\n\tstatic String toStringRecord(WALRecord walRecord); // Make string from given wal record.\n}"}
{"index": 5753, "repo": "freemarker-2.3.32", "des": "\"collection\" template language data type: Adds size/emptiness querybility to TemplateCollectionModel.", "code": "Interface TemplateCollectionModelEx {\n\tboolean isEmpty(); // Returns if the collection contains any elements.\n\tint size(); // Returns the number items in this collection, or Integer.MAX_VALUE, if there are more than Integer.MAX_VALUE items.\n}"}
{"index": 13884, "repo": "spring-webflux-6.0.11", "des": "A ViewResolver for resolving FreeMarkerView instances, i.e.", "code": "public class FreeMarkerViewResolver extends UrlBasedViewResolver {\n\tprotected AbstractUrlBasedView instantiateView(); // Instantiate the specified view class.\n\tprotected Class<?> requiredViewClass(); // Requires FreeMarkerView.\n}"}
{"index": 17884, "repo": "spring-web-6.0.11", "des": "Extension of HttpEntity that adds an HttpStatusCode status code.", "code": "public class ResponseEntity<T> extends HttpEntity<T> {\n\tstatic ResponseEntity.BodyBuilder accepted(); // Create a builder with an ACCEPTED status.\n\tstatic ResponseEntity.BodyBuilder badRequest(); // Create a builder with a BAD_REQUEST status.\n\tstatic ResponseEntity.BodyBuilder created(URI location); // Create a new builder with a CREATED status and a location header set to the given URI.\n\tboolean equals(Object other);\n\tHttpStatusCode getStatusCode(); // Return the HTTP status code of the response.\n\tint getStatusCodeValue(); // Deprecated. as of 6.0, in favor of getStatusCode(); scheduled for removal in 7.0\n\tstatic ResponseEntity.BodyBuilder internalServerError(); // Create a builder with an INTERNAL_SERVER_ERROR status.\n\tstatic ResponseEntity.HeadersBuilder<?> noContent(); // Create a builder with a NO_CONTENT status.\n\tstatic ResponseEntity.HeadersBuilder<?> notFound(); // Create a builder with a NOT_FOUND status.\n\tstatic <T> ResponseEntity<T> of(Optional<T> body); // A shortcut for creating a ResponseEntity with the given body and the OK status, or an empty body and a NOT FOUND status in case of an Optional.empty() parameter.\n\tstatic ResponseEntity.HeadersBuilder<?> of(ProblemDetail body); // Create a new ResponseEntity.HeadersBuilder with its status set to ProblemDetail.getStatus() and its body is set to ProblemDetail.\n\tstatic <T> ResponseEntity<T> ofNullable(T body); // A shortcut for creating a ResponseEntity with the given body and the OK status, or an empty body and a NOT FOUND status in case of a null parameter.\n\tstatic ResponseEntity.BodyBuilder ok(); // Create a builder with the status set to OK.\n\tstatic <T> ResponseEntity<T> ok(T body); // A shortcut for creating a ResponseEntity with the given body and the status set to OK.\n\tstatic ResponseEntity.BodyBuilder status(int status); // Create a builder with the given status.\n\tstatic ResponseEntity.BodyBuilder status(HttpStatusCode status); // Create a builder with the given status.\n\tstatic ResponseEntity.BodyBuilder unprocessableEntity(); // Create a builder with an UNPROCESSABLE_ENTITY status.\n}"}
{"index": 8833, "repo": "hbase-server-3.0.0-alpha-4", "des": "An asynchronous implementation of FSWAL.", "code": "Class AsyncFSWAL {\n\tprotected long append(RegionInfo hri, WALKeyImpl key, WALEdit edits, boolean inMemstore); // Append a set of edits to the WAL.\n\tprotected WALProvider.AsyncWriter createAsyncWriter(org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path path);\n\tprotected WALProvider.AsyncWriter createWriterInstance(org.apache.hadoop.fs.Path path);\n\tprotected void doAppend(WALProvider.AsyncWriter writer, org.apache.hadoop.hbase.regionserver.wal.FSWALEntry entry);\n\tprotected boolean doCheckLogLowReplication();\n\tprotected void doReplaceWriter(org.apache.hadoop.fs.Path oldPath, org.apache.hadoop.fs.Path newPath, WALProvider.AsyncWriter nextWriter); // Notice that you need to clear the AbstractFSWAL.rollRequested flag in this method, as the new writer will begin to work before returning from this method.\n\tprotected void doShutdown();\n\tprotected void doSync(boolean forceSync);\n\tprotected void doSync(long txid, boolean forceSync);\n\tprotected boolean markerEditOnly();\n}"}
{"index": 16904, "repo": "spring-security-oauth2-core-6.1.2", "des": "A representation of a user Principal that is registered with an OpenID Connect 1.0 Provider.", "code": "public interface OidcUser extends OAuth2User, IdTokenClaimAccessor {\n\tMap<String,Object> getClaims(); // Returns the claims about the user.\n\tOidcIdToken getIdToken(); // Returns the ID Token containing claims about the user.\n\tOidcUserInfo getUserInfo(); // Returns the UserInfo containing claims about the user.\n}"}
{"index": 7572, "repo": "cassandra-all-4.1.2", "des": "The possible states of a ConsistentSession.", "code": "Enum ConsistentSession.State {\n\tboolean canTransitionTo(ConsistentSession.State state);\n\tstatic ConsistentSession.State valueOf(int ordinal);\n\tstatic ConsistentSession.State valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic ConsistentSession.State[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11131, "repo": "tribuo-core-4.3.1", "des": "This class creates a pruned dataset in which low frequency features that occur less than the provided minimum cardinality have been removed.", "code": "public class MinimumCardinalityDataset<T extends Output<T>> extends ImmutableDataset<T> {\n\tstatic MinimumCardinalityDataset<?> deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tint getMinCardinality(); // The minimum cardinality threshold for the features.\n\tint getNumExamplesRemoved(); // The number of examples removed due to a lack of features.\n\tDatasetProvenance getProvenance();\n\tSet<String> getRemoved(); // The feature names that were removed.\n\torg.tribuo.protos.core.DatasetProto serialize(); // Serializes this object to a protobuf.\n}"}
{"index": 4725, "repo": "hadoop-common-3.3.4", "des": "Interface for the result of aborts; allows subclasses to extend (IOStatistics etc) or for future enhancements if ever needed.", "code": "Interface Abortable.AbortableResult {\n\tboolean alreadyClosed(); // Was the stream already closed/aborted?\n\tIOException anyCleanupException(); // Any exception caught during cleanup operations, exceptions whose raising/catching does not change the semantics of the abort.\n}"}
{"index": 18617, "repo": "hibernate-core-5.6.15.Final", "des": "Can be used to bind query parameter values.", "code": "Class TypedParameterValue {\n\tType getType(); // The specific Hibernate type to use to bind the value.\n\tjava.lang.Object getValue(); // The value to bind\n}"}
{"index": 4568, "repo": "beam-sdks-java-core-2.49.0", "des": "Transforms for creating PCollectionViews from PCollections (to read them as side inputs).", "code": "Class View {\n\tstatic <T> View.AsIterable<T> asIterable(); // Returns a View.AsIterable transform that takes a PCollection as input and produces a PCollectionView mapping each window to an Iterable of the values in that window.\n\tstatic <T> View.AsList<T> asList(); // Returns a View.AsList transform that takes a PCollection and returns a PCollectionView mapping each window to a List containing all of the elements in the window.\n\tstatic <K,V> View.AsMap<K,V> asMap(); // Returns a View.AsMap transform that takes a PCollection<KV<K, V>> as input and produces a PCollectionView mapping each window to a Map<K, V>.\n\tstatic <K,V> View.AsMultimap<K,V> asMultimap(); // Returns a View.AsMultimap transform that takes a PCollection<KV<K, V>> as input and produces a PCollectionView mapping each window to its contents as a Map<K, Iterable<V>> for use as a side input.\n\tstatic <T> View.AsSingleton<T> asSingleton(); // Returns a View.AsSingleton transform that takes a PCollection with a single value per window as input and produces a PCollectionView that returns the value in the main input window when read as a side input.\n}"}
{"index": 839, "repo": "ignite-core-2.15.0", "des": "Parser to decode/encode Redis protocol (RESP) requests.", "code": "Class GridRedisProtocolParser {\n\tstatic boolean ensureArrayStart(ByteBuffer buf); // Checks first byte is ARRAY.\n\tstatic ByteBuffer nil(); // Creates Nil response.\n\tstatic ByteBuffer oKString();\n\tstatic String readBulkStr(ByteBuffer buf); // Reads a bulk string.\n\tstatic int readInt(ByteBuffer buf); // Counts elements in buffer.\n\tstatic ByteBuffer toArray(Collection<Object> vals); // Converts a resultant collection response to an array.\n\tstatic ByteBuffer toArray(Map<Object,Object> vals); // Converts a resultant map response to an array.\n\tstatic ByteBuffer toBulkString(Object val); // Converts a resultant object to a bulk string.\n\tstatic ByteBuffer toGenericError(String errMsg); // Creates a generic error response.\n\tstatic ByteBuffer toInteger(int integer); // Converts an integer result to a RESP integer.\n\tstatic ByteBuffer toInteger(String integer); // Converts an integer result to a RESP integer.\n\tstatic ByteBuffer toOrderedArray(Map<Object,Object> vals, List<?> origin); // Converts a resultant map response to an array, the order of elements in the resulting array is defined by the order of elements in the origin collection.\n\tstatic ByteBuffer toSimpleString(byte[] b); // Creates a simple string data as a ByteBuffer.\n\tstatic ByteBuffer toSimpleString(String val); // Converts a simple string data to a ByteBuffer.\n\tstatic ByteBuffer toTypeError(String errMsg); // Creates an error response on operation against the wrong data type.\n}"}
{"index": 15595, "repo": "spring-security-core-6.1.2", "des": "Ordering of Spring Security's authorization Advisors", "code": "public enum AuthorizationInterceptorsOrder extends Enum<AuthorizationInterceptorsOrder> {\n\tint getOrder();\n\tstatic AuthorizationInterceptorsOrder valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AuthorizationInterceptorsOrder[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 18501, "repo": "hibernate-core-5.6.15.Final", "des": "The base class for identifier generators that use a UUID algorithm.", "code": "Class AbstractUUIDGenerator {\n\tprotected short getCount(); // Unique in a millisecond for this JVM instance (unless there are > Short.MAX_VALUE instances created in a millisecond)\n\tprotected short getHiTime(); // Unique down to millisecond\n\tprotected int getIP(); // Unique in a local network\n\tprotected int getJVM(); // Unique across JVMs on this machine (unless they load this class in the same quarter second - very unlikely)\n\tprotected int getLoTime();\n}"}
{"index": 8205, "repo": "spring-ws-3.0.10.RELEASE", "des": "WebServiceMessageSender implementation that uses standard J2SE facilities to execute POST requests, without support for HTTP authentication or advanced configuration options.", "code": "Class HttpUrlConnectionMessageSender {\n\tWebServiceConnection createConnection(URI uri); // Create a new WebServiceConnection to the specified URI.\n\tprotected void prepareConnection(HttpURLConnection connection); // Template method for preparing the given HttpURLConnection.\n\tvoid setConnectionTimeout(Duration connectTimeout); // Sets the timeout until a connection is established.\n\tvoid setReadTimeout(Duration readTimeout); // Set the socket read timeout.\n}"}
{"index": 5148, "repo": "druid-processing-26.0.0", "des": "CacheKeyBuilder is a tool for easily generating cache keys of Cacheable objects.", "code": "Class CacheKeyBuilder {\n\tCacheKeyBuilder appendBoolean(boolean input);\n\tCacheKeyBuilder appendByte(byte input);\n\tCacheKeyBuilder appendByteArray(byte[] input);\n\tCacheKeyBuilder appendCacheable(Cacheable input);\n\tCacheKeyBuilder appendCacheables(Collection<? extends Cacheable> input); // Add a collection of Cacheables to the cache key.\n\tCacheKeyBuilder appendCacheablesIgnoringOrder(Collection<? extends Cacheable> input); // Add a collection of Cacheables to the cache key.\n\tCacheKeyBuilder appendDouble(double input);\n\tCacheKeyBuilder appendDoubleArray(double[] input);\n\tCacheKeyBuilder appendFloat(float input);\n\tCacheKeyBuilder appendFloatArray(float[] input);\n\tCacheKeyBuilder appendInt(int input);\n\tCacheKeyBuilder appendLong(long input);\n\tCacheKeyBuilder appendString(String input);\n\tCacheKeyBuilder appendStrings(Collection<String> input); // Add a collection of strings to the cache key.\n\tCacheKeyBuilder appendStringsIgnoringOrder(Collection<String> input); // Add a collection of strings to the cache key.\n\tbyte[] build();\n}"}
{"index": 17654, "repo": "spring-web-6.0.11", "des": "Abstract base class for Processor implementations that bridge between event-listener write APIs and Reactive Streams.", "code": "public abstract class AbstractListenerWriteProcessor<T> extends Object implements Processor<T,Void> {\n\tvoid cancel(); // Cancel the upstream \"write\" Publisher only, for example due to Servlet container error/completion notifications.\n\tprotected void dataReceived(T data); // Template method invoked after a data item to write is received via Subscriber.onNext(Object).\n\tprotected abstract void discardData(T data); // Invoked after any error (either from the upstream write Publisher, or from I/O operations to the underlying server) and cancellation to discard in-flight data that was in the process of being written when the error took place.\n\tString getLogPrefix(); // Get the configured log prefix.\n\tprotected abstract boolean isDataEmpty(T data); // Whether the given data item has any content to write.\n\tprotected abstract boolean isWritePossible(); // Whether writing is possible.\n\tfinal void onComplete(); // Completion signal from the upstream, write Publisher.\n\tfinal void onError(Throwable ex); // Error signal from the upstream, write Publisher.\n\tfinal void onNext(T data);\n\tfinal void onSubscribe(Subscription subscription);\n\tfinal void onWritePossible(); // Invoked when writing is possible, either in the same thread after a check via isWritePossible(), or as a callback from the underlying container.\n\tfinal void subscribe(Subscriber<? super Void> subscriber);\n\tprotected abstract boolean write(T data); // Write the given item.\n\tprotected void writingComplete(); // Invoked after onComplete or onError notification.\n\tprotected void writingFailed(Throwable ex); // Invoked when an I/O error occurs during a write.\n\tprotected void writingPaused(); // Deprecated. originally introduced for Undertow to stop write notifications when no data is available, but deprecated as of 5.0.6 since constant switching on every requested item causes a significant slowdown.\n}"}
{"index": 12438, "repo": "drill-common-1.21.1", "des": "Defines possible actions on the file and performs the necessary action", "code": "public enum ActionOnFile extends Enum<ActionOnFile> {\n\tabstract void action(URL url); // Action which should be performed on the file\n\tstatic ActionOnFile valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ActionOnFile[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13928, "repo": "spring-webflux-6.0.11", "des": "A holder for a RequestCondition useful when the type of the request condition is not known ahead of time, e.g.", "code": "public final class RequestConditionHolder extends AbstractRequestCondition<RequestConditionHolder> {\n\tRequestConditionHolder combine(RequestConditionHolder other); // Combine the request conditions held by the two RequestConditionHolder instances after making sure the conditions are of the same type.\n\tint compareTo(RequestConditionHolder other, org.springframework.web.server.ServerWebExchange exchange); // Compare the request conditions held by the two RequestConditionHolder instances after making sure the conditions are of the same type.\n\tRequestCondition<?> getCondition(); // Return the held request condition, or null if not holding one.\n\tprotected Collection<?> getContent(); // Return the discrete items a request condition is composed of.\n\tRequestConditionHolder getMatchingCondition(org.springframework.web.server.ServerWebExchange exchange); // Get the matching condition for the held request condition wrap it in a new RequestConditionHolder instance.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n}"}
{"index": 10777, "repo": "spring-boot-actuator-3.1.1", "des": "API versions supported for the actuator API.", "code": "public enum ApiVersion extends Enum<ApiVersion> implements Producible<ApiVersion> {\n\torg.springframework.util.MimeType getProducedMimeType(); // Mime type that can be produced.\n\tstatic ApiVersion valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ApiVersion[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 4042, "repo": "zookeeper-3.8.2", "des": "This is the basic interface that ZooKeeperServer uses to track sessions.", "code": "Interface SessionTracker {\n\tvoid checkGlobalSession(long sessionId, Object owner); // Strictly check that a given session is a global session or not\n\tvoid checkSession(long sessionId, Object owner); // Checks whether the SessionTracker is aware of this session, the session is still active, and the owner matches.\n\tboolean commitSession(long id, int to); // Add the session to the local session map or global one in zkDB.\n\tlong createSession(int sessionTimeout);\n\tvoid dumpSessions(PrintWriter pwriter); // Text dump of session information, suitable for debugging.\n\tlong getLocalSessionCount(); // If this session tracker supports local sessions, return how many.\n\tMap<Long,Set<Long>> getSessionExpiryMap(); // Returns a mapping of time to session IDs that expire at that time.\n\tSet<Long> globalSessions(); // Get a set of global session IDs\n\tboolean isLocalSessionsEnabled();\n\tboolean isTrackingSession(long sessionId);\n\tSet<Long> localSessions(); // Get a set of local session IDs\n\tvoid removeSession(long sessionId);\n\tvoid setOwner(long id, Object owner);\n\tvoid setSessionClosing(long sessionId); // Mark that the session is in the process of closing.\n\tvoid shutdown();\n\tboolean touchSession(long sessionId, int sessionTimeout);\n\tboolean trackSession(long id, int to); // Track the session expire, not add to ZkDb.\n}"}
{"index": 13688, "repo": "spring-webmvc-6.0.11", "des": "The <checkboxes> tag renders multiple HTML 'input' tags with type 'checkbox'.", "code": "public class CheckboxesTag extends AbstractMultiCheckedElementTag {\n\tprotected String getInputType(); // Return the type of the HTML input element to generate: \"checkbox\" or \"radio\".\n\tprotected int writeTagContent(TagWriter tagWriter); // Renders the 'input type=\"radio\"' element with the configured AbstractMultiCheckedElementTag.setItems(Object) values.\n}"}
{"index": 3044, "repo": "tink-1.10.0", "des": "Interface for Message Authentication Codes (MAC).", "code": "Interface Mac {\n\tbyte[] computeMac(byte[] data); // Computes message authentication code (MAC) for data.\n\tvoid verifyMac(byte[] mac, byte[] data); // Verifies whether mac is a correct authentication code (MAC) for data.\n}"}
{"index": 10159, "repo": "spring-hateoas-2.1.2", "des": "The cardinality of the TemplateVariable.", "code": "public static enum TemplateVariable.Cardinality extends Enum<TemplateVariable.Cardinality> {\n\tstatic TemplateVariable.Cardinality valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic TemplateVariable.Cardinality[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 11520, "repo": "spring-restdocs-core-3.0.0", "des": "An OperationPreprocessor that modifies URIs in the request and in the response by changing one or more of their host, scheme, and port.", "code": "public class UriModifyingOperationPreprocessor extends Object implements OperationPreprocessor {\n\tUriModifyingOperationPreprocessor host(String host); // Modifies the URI to use the given host.\n\tUriModifyingOperationPreprocessor port(int port); // Modifies the URI to use the given port.\n\tOperationRequest preprocess(OperationRequest request); // Processes the given request.\n\tOperationResponse preprocess(OperationResponse response); // Processes the given response.\n\tUriModifyingOperationPreprocessor removePort(); // Removes the port from the URI.\n\tUriModifyingOperationPreprocessor scheme(String scheme); // Modifies the URI to use the given scheme.\n}"}
{"index": 7211, "repo": "calcite-core-1.34.0", "des": "An implementation of SqlMoniker that encapsulates the normalized name information of a SqlIdentifier.", "code": "Class SqlIdentifierMoniker {\n\tList<String> getFullyQualifiedNames(); // Returns the array of component names.\n\tSqlMonikerType getType(); // Returns the type of object referred to by this moniker.\n\tString id();\n\tSqlIdentifier toIdentifier(); // Creates a SqlIdentifier containing the fully-qualified name.\n}"}
{"index": 4066, "repo": "zookeeper-3.8.2", "des": "This is the main class for ZooKeeperAdmin client library.", "code": "Class ZooKeeperAdmin {\n\tvoid reconfigure(List<String> joiningServers, List<String> leavingServers, List<String> newMembers, long fromConfig, AsyncCallback.DataCallback cb, Object ctx); // Convenience wrapper around asynchronous reconfig that takes Lists of strings instead of comma-separated servers.\n\tbyte[] reconfigure(List<String> joiningServers, List<String> leavingServers, List<String> newMembers, long fromConfig, Stat stat); // Convenience wrapper around reconfig that takes Lists of strings instead of comma-separated servers.\n\tvoid reconfigure(String joiningServers, String leavingServers, String newMembers, long fromConfig, AsyncCallback.DataCallback cb, Object ctx); // The Asynchronous version of reconfig.\n\tbyte[] reconfigure(String joiningServers, String leavingServers, String newMembers, long fromConfig, Stat stat); // Reconfigure - add/remove servers.\n}"}
{"index": 5375, "repo": "druid-processing-26.0.0", "des": "This interface is used in the segment allocation protocol when it is coordinated by the Overlord; when appending segments to an existing datasource (either streaming ingestion or batch append) or any case when segment lock is used.", "code": "Interface PartialShardSpec {\n\tShardSpec complete(com.fasterxml.jackson.databind.ObjectMapper objectMapper, int partitionId, int numCorePartitions); // Creates a new ShardSpec with given partitionId and numCorePartitions.\n\tClass<? extends ShardSpec> getShardSpecClass(); // Returns the class of the shardSpec created by this factory.\n\tdefault boolean useNonRootGenerationPartitionSpace(); // Returns true if this partialShardSpec needs a partitionId of a non-root generation.\n}"}
{"index": 8147, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on Sources.", "code": "Class AbstractPayloadSourceMethodProcessor {\n\tprotected abstract Source createResponsePayload(org.springframework.core.MethodParameter returnType, Object returnValue); // Creates a response payload for the given return value.\n\tvoid handleReturnValue(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue); // Handles the given return value.\n\tObject resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tprotected abstract Object resolveRequestPayloadArgument(org.springframework.core.MethodParameter parameter, Source requestPayload); // Resolves the given parameter, annotated with RequestPayload, into a method argument.\n}"}
{"index": 9074, "repo": "hbase-server-3.0.0-alpha-4", "des": "ReplicationEndpoint is a plugin which implements replication to other HBase clusters, or other systems.", "code": "Interface ReplicationEndpoint {\n\tvoid awaitRunning(); // Waits for the ReplicationEndpoint to be up and running.\n\tvoid awaitRunning(long timeout, TimeUnit unit); // Waits for the ReplicationEndpoint to to be up and running for no more than the given time.\n\tvoid awaitTerminated(); // Waits for the ReplicationEndpoint to reach the terminated (internal) state.\n\tvoid awaitTerminated(long timeout, TimeUnit unit); // Waits for the ReplicationEndpoint to reach a terminal state for no more than the given time.\n\tboolean canReplicateToSameCluster(); // Whether or not, the replication endpoint can replicate to it's source cluster with the same UUID\n\tThrowable failureCause(); // Returns the Throwable that caused this service to fail.\n\tUUID getPeerUUID(); // Returns a UUID of the provided peer id.\n\tWALEntryFilter getWALEntryfilter(); // Returns a WALEntryFilter to use for filtering out WALEntries from the log.\n\tvoid init(ReplicationEndpoint.Context context); // Initialize the replication endpoint with the given context.\n\tboolean isRunning(); // Returns true if this service is RUNNING.\n\tboolean isStarting(); // Returns Return true is this service is STARTING (but not yet RUNNING).\n\tboolean replicate(ReplicationEndpoint.ReplicateContext replicateContext); // Replicate the given set of entries (in the context) to the other cluster.\n\tvoid start(); // Initiates service startup and returns immediately.\n\tvoid stop(); // If the service is starting or running, this initiates service shutdown and returns immediately.\n}"}
{"index": 11080, "repo": "spring-shell-core-3.1.2", "des": "Base class defining a settings for styles.", "code": "public abstract class StyleSettings extends Object {\n\tstatic StyleSettings defaults(); // Creates an instance of a default settings.\n\tstatic StyleSettings dump();\n\tString highlight();\n\tString itemDisabled();\n\tString itemEnabled();\n\tString itemSelected();\n\tString itemSelector();\n\tString itemUnselected();\n\tString listKey();\n\tString listLevelError();\n\tString listLevelInfo();\n\tString listLevelWarn();\n\tString listValue();\n\tString resolveTag(String tag); // Resolve a theme setting from a given tag.\n\tstatic String[] tags(); // Gets all tags.\n\tString title();\n\tString value();\n}"}
{"index": 17713, "repo": "spring-web-6.0.11", "des": "Enum to represent multiple URI encoding strategies.", "code": "public static enum DefaultUriBuilderFactory.EncodingMode extends Enum<DefaultUriBuilderFactory.EncodingMode> {\n\tstatic DefaultUriBuilderFactory.EncodingMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic DefaultUriBuilderFactory.EncodingMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 11553, "repo": "spring-security-oauth2-client-6.1.2", "des": "The default implementation of an OAuth2AccessTokenResponseClient for the refresh_token grant.", "code": "public final class DefaultRefreshTokenTokenResponseClient extends Object implements OAuth2AccessTokenResponseClient<OAuth2RefreshTokenGrantRequest> {\n\torg.springframework.security.oauth2.core.endpoint.OAuth2AccessTokenResponse getTokenResponse(OAuth2RefreshTokenGrantRequest refreshTokenGrantRequest); // Exchanges the authorization grant credential, provided in the authorization grant request, for an access token credential at the Authorization Server's Token Endpoint.\n\tvoid setRequestEntityConverter(org.springframework.core.convert.converter.Converter<OAuth2RefreshTokenGrantRequest,org.springframework.http.RequestEntity<?>> requestEntityConverter); // Sets the Converter used for converting the OAuth2RefreshTokenGrantRequest to a RequestEntity representation of the OAuth 2.0 Access Token Request.\n\tvoid setRestOperations(org.springframework.web.client.RestOperations restOperations); // Sets the RestOperations used when requesting the OAuth 2.0 Access Token Response.\n}"}
{"index": 10541, "repo": "groovy-all-4.0.13", "des": "Implementers of this interface can be registered in the ProxyMetaClass for notifications about method calls for objects managed by the ProxyMetaClass.", "code": "public interface Interceptor {\n\tObject afterInvoke(Object object, String methodName, Object[] arguments, Object result); // This code is executed after the method is optionally called.\n\tObject beforeInvoke(Object object, String methodName, Object[] arguments); // This code is executed before the method is optionally called.\n\tboolean doInvoke();\n}"}
{"index": 2324, "repo": "hive-exec-4.0.0-alpha-2", "des": "This is the vector PTF evaluator base class.", "code": "Class VectorPTFEvaluatorBase {\n\tboolean canRunOptimizedCalculation(int rowNum, Range range); // Whether the evaluator can calculate the result for a given range.\n\tvoid doLastBatchWork();\n\tabstract void evaluateGroupBatch(VectorizedRowBatch batch);\n\tvoid evaluateInputExpr(VectorizedRowBatch batch);\n\tObject getGroupResult();\n\tboolean getNullsLast();\n\tint getOutputColumnNum();\n\tabstract ColumnVector.Type getResultColumnVectorType();\n\tboolean isCacheableForRange(); // Whether the results calculated by this evaluator are eligible for caching by PTFValueCache.\n\tboolean isGroupResultNull();\n\tvoid mapCustomColumns(int[] bufferedColumnMap); // VectorPTFGroupBatches class works on a subset of columns, which are mapped by an array of changed indices.\n\tvoid onPartitionEnd(); // There might be some cleanup operations for evaluators that should not be taken care of after every row (resetEvaluator), but rather on partition-level.\n\tvoid onResultCalculated(Object result, Range range); // This method is called by VectorPTFGroupBatches once the calculation is finished for a given row/range, but before the next calculation is invoked.\n\tabstract void resetEvaluator();\n\tObject runOnRange(int rowNum, Range range, VectorPTFGroupBatches batches);\n\tvoid setNullsLast(boolean nullsLast);\n\tabstract boolean streamsResult();\n}"}
{"index": 13282, "repo": "spring-test-6.0.11", "des": "Spec for expectations on the response body decoded to a List.", "code": "public static interface WebTestClient.ListBodySpec<E> extends WebTestClient.BodySpec<List<E>,WebTestClient.ListBodySpec<E>> {\n\tWebTestClient.ListBodySpec<E> contains(E... elements); // Assert the extracted list of values contains the given elements.\n\tWebTestClient.ListBodySpec<E> doesNotContain(E... elements); // Assert the extracted list of values doesn't contain the given elements.\n\tWebTestClient.ListBodySpec<E> hasSize(int size); // Assert the extracted list of values is of the given size.\n}"}
{"index": 7488, "repo": "nifi-client-dto-1.22.0", "des": "Resource that supports access/authorization policies.", "code": "Class ResourceDTO {\n\tString getIdentifier(); // The identifier of the resource.\n\tString getName(); // The name of the resource.\n\tvoid setIdentifier(String identifier);\n\tvoid setName(String name);\n}"}
{"index": 4706, "repo": "commons-geometry-core-1.0", "des": "Interface representing a vector in a vector space or displacement vectors in an affine space.", "code": "Interface Vector<V extends Vector<V>> {\n\tV add(double factor, V v); // Add a scaled vector to the instance.\n\tV add(V v); // Add a vector to the instance.\n\tdouble angle(V v); // Compute the angular separation between two vectors in radians.\n\tdouble distance(V v); // Compute the distance between the instance and another vector.\n\tdouble distanceSq(V v); // Compute the square of the distance between the instance and another vector.\n\tdouble dot(V v); // Compute the dot-product of the instance and another vector.\n\tV getZero(); // Get the zero (null) vector of the space.\n\tV multiply(double a); // Multiply the instance by a scalar.\n\tV negate(); // Get the negation of the instance.\n\tdouble norm(); // Get the L2 norm (commonly known as the Euclidean norm) for the vector.\n\tV normalize(); // Get a normalized vector aligned with the instance.\n\tV normalizeOrNull(); // Attempt to compute a normalized vector aligned with the instance, returning null if such a vector cannot be computed.\n\tdouble normSq(); // Get the square of the L2 norm (also known as the Euclidean norm) for the vector.\n\tV subtract(double factor, V v); // Subtract a scaled vector from the instance.\n\tV subtract(V v); // Subtract a vector from the instance.\n\tV withNorm(double norm); // Returns a vector with the same direction but with the given norm.\n}"}
{"index": 7906, "repo": "commons-jcs3-core-3.1", "des": "Configuration util for auxiliary caches.", "code": "Class AuxiliaryCacheConfigurator {\n\tstatic ICacheEventLogger parseCacheEventLogger(Properties props, String auxPrefix); // Parses the event logger config, if there is any for the auxiliary.\n\tstatic IElementSerializer parseElementSerializer(Properties props, String auxPrefix); // Parses the element config, if there is any for the auxiliary.\n}"}
{"index": 6789, "repo": "calcite-core-1.34.0", "des": "Implementation of Union in bindable calling convention.", "code": "Class Bindables.BindableUnion {\n\torg.apache.calcite.linq4j.Enumerable<Object[]> bind(DataContext dataContext); // Executes this statement and returns an enumerable which will yield rows.\n\tBindables.BindableUnion copy(RelTraitSet traitSet, List<RelNode> inputs, boolean all);\n\tClass<Object[]> getElementType(); // Gets the type of the element(s) that are returned in this collection.\n\tNode implement(InterpretableRel.InterpreterImplementor implementor); // Creates an interpreter node to implement this relational expression.\n}"}
{"index": 16535, "repo": "spring-batch-infrastructure-5.0.2", "des": "A PeekableItemReader that allows the user to peek one item ahead.", "code": "public class SingleItemPeekableItemReader<T> extends Object implements ItemStreamReader<T>, PeekableItemReader<T> {\n\tvoid close(); // If the delegate is an ItemStream, just pass the call on, otherwise reset the peek cache.\n\tvoid open(ExecutionContext executionContext); // If the delegate is an ItemStream, just pass the call on, otherwise reset the peek cache.\n\tT peek(); // Peek at the next item, ensuring that if the delegate is an ItemStream the state is stored for the next call to update(ExecutionContext).\n\tT read(); // Get the next item from the delegate (whether or not it has already been peeked at).\n\tvoid setDelegate(ItemReader<T> delegate); // The item reader to use as a delegate.\n\tvoid update(ExecutionContext executionContext); // If there is a cached peek, then retrieve the execution context state from that point.\n}"}
{"index": 11605, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an ServerAuthorizationRequestRepository that stores OAuth2AuthorizationRequest in the WebSession.", "code": "public final class WebSessionOAuth2ServerAuthorizationRequestRepository extends Object implements ServerAuthorizationRequestRepository<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> {\n\treactor.core.publisher.Mono<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> loadAuthorizationRequest(org.springframework.web.server.ServerWebExchange exchange); // Returns the OAuth2AuthorizationRequest associated to the provided HttpServletRequest or null if not available.\n\treactor.core.publisher.Mono<org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest> removeAuthorizationRequest(org.springframework.web.server.ServerWebExchange exchange); // Removes and returns the OAuth2AuthorizationRequest associated to the provided HttpServletRequest or if not available returns null.\n\treactor.core.publisher.Mono<Void> saveAuthorizationRequest(org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest authorizationRequest, org.springframework.web.server.ServerWebExchange exchange); // Persists the OAuth2AuthorizationRequest associating it to the provided HttpServletRequest and/or HttpServletResponse.\n}"}
{"index": 9837, "repo": "commons-math3-3.6.1", "des": "This class represents a sub-hyperplane for Circle.", "code": "Class SubCircle {\n\tprotected AbstractSubHyperplane<Sphere2D,Sphere1D> buildNew(Hyperplane<Sphere2D> hyperplane, Region<Sphere1D> remainingRegion); // Build a sub-hyperplane from an hyperplane and a region.\n\tSubHyperplane.SplitSubHyperplane<Sphere2D> split(Hyperplane<Sphere2D> hyperplane); // Split the instance in two parts by an hyperplane.\n}"}
{"index": 12503, "repo": "spring-jdbc-6.0.11", "des": "Registry for custom SQLExceptionTranslator instances associated with specific databases allowing for overriding translation based on values contained in the configuration file named \"sql-error-codes.xml\".", "code": "public final class CustomSQLExceptionTranslatorRegistry extends Object {\n\tSQLExceptionTranslator findTranslatorForDatabase(String dbName); // Find a custom translator for the specified database.\n\tstatic CustomSQLExceptionTranslatorRegistry getInstance(); // Return the singleton instance.\n\tvoid registerTranslator(String dbName, SQLExceptionTranslator translator); // Register a new custom translator for the specified database name.\n}"}
{"index": 6946, "repo": "calcite-core-1.34.0", "des": "Callback to be called when a test for validity succeeds or fails.", "code": "Interface Litmus {\n\tdefault boolean check(boolean condition, @Nullable String message, Object... args); // Checks a condition.\n\tboolean fail(@Nullable String message, Object... args); // Called when test fails.\n\tdefault boolean succeed(); // Called when test succeeds.\n\tdefault Litmus withMessageArgs(@Nullable String message, Object... args); // Creates a Litmus that, if it fails, will use the given arguments.\n}"}
{"index": 1292, "repo": "ignite-core-2.15.0", "des": "Result of job work which is sent between nodes.", "code": "Class VisorFindAndDeleteGarbageInPersistenceJobResult {\n\tMap<Integer,Map<Integer,Long>> checkResult();\n\tboolean hasGarbage();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 11926, "repo": "maven-core-4.0.0-alpha-7", "des": "Assists in resolving the dependencies of a plugin.", "code": "@Named @Singleton public class DefaultPluginDependenciesResolver extends Object implements PluginDependenciesResolver {\n\torg.eclipse.aether.artifact.Artifact resolve(Plugin plugin, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Resolves the main artifact of the specified plugin.\n\torg.eclipse.aether.graph.DependencyNode resolve(Plugin plugin, org.eclipse.aether.artifact.Artifact pluginArtifact, org.eclipse.aether.graph.DependencyFilter dependencyFilter, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session); // Resolves the runtime dependencies of the specified plugin.\n\torg.eclipse.aether.graph.DependencyNode resolveCoreExtension(Plugin plugin, org.eclipse.aether.graph.DependencyFilter dependencyFilter, List<org.eclipse.aether.repository.RemoteRepository> repositories, org.eclipse.aether.RepositorySystemSession session);\n}"}
{"index": 5393, "repo": "druid-processing-26.0.0", "des": "Channel backed by a byte stream that is continuously streamed in using addChunk(byte[]).", "code": "Class ReadableByteChunksFrameChannel {\n\tcom.google.common.util.concurrent.ListenableFuture<?> addChunk(byte[] chunk); // Adds a chunk of bytes.\n\tboolean canRead(); // Returns whether this channel has a frame or error condition currently available.\n\tvoid close(); // Releases any resources associated with this readable channel.\n\tstatic ReadableByteChunksFrameChannel create(String id, boolean framesOnly); // Create a channel that aims to limit its memory footprint to one frame.\n\tvoid doneWriting(); // Call method when caller is done adding chunks.\n\tlong getBytesAdded();\n\tString getId();\n\tboolean isErrorOrFinished();\n\tboolean isFinished(); // Returns whether this channel is finished.\n\tFrame read(); // Returns the next available frame from this channel.\n\tcom.google.common.util.concurrent.ListenableFuture<?> readabilityFuture(); // Returns a future that will resolve when either ReadableFrameChannel.isFinished() or ReadableFrameChannel.canRead() would return true.\n\tvoid setError(Throwable t); // Clears the channel and replaces it with the given error.\n}"}
{"index": 1381, "repo": "nutch-2.4", "des": "A contract defining behavior of scoring plugins.", "code": "Interface ScoringFilter {\n\tvoid distributeScoreToOutlinks(java.lang.String fromUrl, WebPage page, java.util.Collection<ScoreDatum> scoreData, int allCount); // Distribute score value from the current page to all its outlinked pages.\n\tfloat generatorSortValue(java.lang.String url, WebPage page, float initSort); // This method prepares a sort value for the purpose of sorting and selecting top N scoring pages during fetchlist generation.\n\tfloat indexerScore(java.lang.String url, NutchDocument doc, WebPage page, float initScore); // This method calculates a Lucene document boost.\n\tvoid initialScore(java.lang.String url, WebPage page); // Set an initial score for newly discovered pages.\n\tvoid injectedScore(java.lang.String url, WebPage page); // Set an initial score for newly injected pages.\n\tvoid updateScore(java.lang.String url, WebPage page, java.util.List<ScoreDatum> inlinkedScoreData); // This method calculates a new score during table update, based on the values contributed by inlinked pages.\n}"}
{"index": 12011, "repo": "jena-core-4.9.0", "des": "A property restriction that requires the named property to have have exactly the given number of values for a given instance to be a member of the class defined by the restriction.", "code": "public interface CardinalityRestriction extends Restriction {\n\tint getCardinality(); // Answer the cardinality of the restricted property.\n\tboolean hasCardinality(int cardinality); // Answer true if this property restriction has the given cardinality.\n\tvoid removeCardinality(int cardinality); // Remove the statement that this restriction has the given cardinality for the restricted property.\n\tvoid setCardinality(int cardinality); // Assert that this restriction restricts the property to have the given cardinality.\n}"}
{"index": 3192, "repo": "hbase-common-3.0.0-alpha-4", "des": "Helper class that allows to create and manipulate an AVL Tree.", "code": "Class AvlUtil.AvlTree {\n\tstatic <TNode extends AvlUtil.AvlNode>TNode get(TNode root, Object key, AvlUtil.AvlKeyComparator<TNode> keyComparator); // Return the node that matches the specified key or null in case of node not found.\n\tstatic <TNode extends AvlUtil.AvlNode>TNode getFirst(TNode root); // Return the first node of the tree.\n\tstatic <TNode extends AvlUtil.AvlNode>TNode getLast(TNode root); // Return the last node of the tree.\n\tstatic <TNode extends AvlUtil.AvlNode>TNode insert(TNode root, Object key, AvlUtil.AvlKeyComparator<TNode> keyComparator, AvlUtil.AvlInsertOrReplace<TNode> insertOrReplace); // Insert a node into the tree.\n\tstatic <TNode extends AvlUtil.AvlNode>TNode insert(TNode root, TNode node); // Insert a node into the tree.\n\tstatic <TNode extends AvlUtil.AvlNode>TNode remove(TNode root, Object key, AvlUtil.AvlKeyComparator<TNode> keyComparator); // Removes the node matching the specified key from the tree\n\tstatic <TNode extends AvlUtil.AvlNode>TNode remove(TNode root, Object key, AvlUtil.AvlKeyComparator<TNode> keyComparator, AtomicBoolean removed); // Removes the node matching the specified key from the tree\n\tstatic <TNode extends AvlUtil.AvlNode>void visit(TNode root, AvlUtil.AvlNodeVisitor<TNode> visitor); // Visit each node of the tree\n}"}
{"index": 14547, "repo": "spring-security-web-6.1.2", "des": "An implementation of ServerRequestCache that does nothing.", "code": "public final class NoOpServerRequestCache extends Object implements ServerRequestCache {\n\tstatic NoOpServerRequestCache getInstance();\n\treactor.core.publisher.Mono<URI> getRedirectUri(org.springframework.web.server.ServerWebExchange exchange); // Get the URI that can be redirected to trigger the saved request to be used\n\treactor.core.publisher.Mono<org.springframework.http.server.reactive.ServerHttpRequest> removeMatchingRequest(org.springframework.web.server.ServerWebExchange exchange); // If the provided ServerWebExchange matches the saved ServerHttpRequest gets the saved ServerHttpRequest\n\treactor.core.publisher.Mono<Void> saveRequest(org.springframework.web.server.ServerWebExchange exchange); // Save the ServerHttpRequest\n}"}
{"index": 7274, "repo": "calcite-core-1.34.0", "des": "SQL parse tree node to represent SET and RESET statements, optionally preceded by ALTER SYSTEM or ALTER SESSION.", "code": "Class SqlSetOption {\n\tSqlKind getKind(); // Returns the type of node this is, or SqlKind.OTHER if it's nothing special.\n\tSqlIdentifier getName();\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\t@Nullable SqlNode getValue();\n\tvoid setName(SqlIdentifier name);\n\tvoid setOperand(int i, @Nullable SqlNode operand); // Changes the value of an operand.\n\tvoid setValue(SqlNode value);\n\tprotected void unparseAlterOperation(SqlWriter writer, int leftPrec, int rightPrec);\n\tvoid validate(SqlValidator validator, SqlValidatorScope scope); // Validates this call.\n}"}
{"index": 17072, "repo": "spring-integration-core-6.1.2", "des": "Utility class with static methods for helping with evaluation of SpEL expressions.", "code": "public final class ExpressionUtils extends Object {\n\tstatic org.springframework.expression.spel.support.SimpleEvaluationContext createSimpleEvaluationContext(); // Used to create a context with no BeanFactory, usually in tests.\n\tstatic org.springframework.expression.spel.support.SimpleEvaluationContext createSimpleEvaluationContext(org.springframework.beans.factory.BeanFactory beanFactory); // Obtains the context from the beanFactory if not null; emits a warning if the beanFactory is null.\n\tstatic org.springframework.expression.spel.support.StandardEvaluationContext createStandardEvaluationContext(); // Used to create a context with no BeanFactory, usually in tests.\n\tstatic org.springframework.expression.spel.support.StandardEvaluationContext createStandardEvaluationContext(org.springframework.beans.factory.BeanFactory beanFactory); // Obtains the context from the beanFactory if not null; emits a warning if the beanFactory is null.\n\tstatic File expressionToFile(org.springframework.expression.Expression expression, org.springframework.expression.EvaluationContext evaluationContext, org.springframework.messaging.Message<?> message, String propertyName); // Evaluate an expression and return a File object; the expression can evaluate to a String or File.\n\tstatic org.springframework.expression.Expression intExpression(String expression); // Return a ValueExpression for a simple literal, otherwise a SpelExpression.\n\tstatic org.springframework.expression.Expression longExpression(String expression); // Return a ValueExpression for a simple literal, otherwise a SpelExpression.\n}"}
{"index": 6431, "repo": "exoplayer-core-2.9.6", "des": "Interface to allow AudioFocusManager to give commands to a player.", "code": "Interface AudioFocusManager.PlayerControl {\n\tvoid executePlayerCommand(int playerCommand); // Called when a command must be executed on the player.\n\tvoid setVolumeMultiplier(float volumeMultiplier); // Called when the volume multiplier on the player should be changed.\n}"}
{"index": 2063, "repo": "hive-exec-4.0.0-alpha-2", "des": "Expression processor factory for partition pruning.", "code": "Class ExprProcFactory {\n\tstatic ExprNodeDesc genPruner(String tabAlias, ExprNodeDesc pred); // Generates the partition pruner for the expression tree.\n\tstatic SemanticNodeProcessor getColumnProcessor(); // Instantiate column processor.\n}"}
{"index": 10043, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Default ContainerAssign implementation using Objects as assigned data.", "code": "Class DefaultContainerAssign {\n\tvoid assign(ContainerId containerId, Object data); // Assign data with container.\n\tContainerId getAssignedContainer(Object data); // Gets the assigned container.\n\tObject getAssignedData(ContainerId containerId); // Gets the assigned data.\n}"}
{"index": 10108, "repo": "spring-hateoas-2.1.2", "des": "MappingDiscoverer implementation that inspects mappings from a particular annotation.", "code": "public class AnnotationMappingDiscoverer extends Object implements MappingDiscoverer {\n\tList<MediaType> getConsumes(Method method); // Returns the MediaTypes supported for consumption.\n\tString getMapping(Class<?> type); // Returns the mapping associated with the given type.\n\tString getMapping(Class<?> type, Method method); // Returns the mapping for the given Method invoked on the given type.\n\tString getMapping(Method method); // Returns the mapping associated with the given Method.\n\tString[] getParams(Method method); // Returns the statically declared request parameters.\n\tCollection<HttpMethod> getRequestMethod(Class<?> type, Method method); // Extract RequestMapping's list of RequestMethods into an array of Strings.\n}"}
{"index": 7123, "repo": "calcite-core-1.34.0", "des": "Visitor that tells whether a node matching a particular description exists in a tree.", "code": "Class RexUtil.RexFinder {\n\tboolean anyContain(Iterable<? extends RexNode> nodes); // Returns whether any of the given expressions contain what this RexFinder seeks.\n\tboolean contains(RexNode node); // Returns whether the given expression contains what this RexFinder seeks.\n\tboolean inFilter(Filter filter); // Returns whether a Filter contains the kind of expression we seek.\n\tboolean inJoin(Join join); // Returns whether a Join contains kind of expression we seek.\n\tboolean inProject(Project project); // Returns whether a Project contains the kind of expression we seek.\n}"}
{"index": 8246, "repo": "spring-ws-3.0.10.RELEASE", "des": "Client-side interceptor that validates the contents of WebServiceMessages using a schema.", "code": "Class PayloadValidatingInterceptor {\n\tprotected Source getValidationRequestSource(WebServiceMessage request); // Returns the part of the request message that is to be validated.\n\tprotected Source getValidationResponseSource(WebServiceMessage response); // Returns the part of the response message that is to be validated.\n}"}
{"index": 14361, "repo": "wicket-core-10.0.0-M1", "des": "This is a ResourceReference that knows how to find and serve resources located in the Java package (i.e.", "code": "public class PackageResourceReference extends ResourceReference {\n\tprotected String getMinifiedName();\n\tPackageResource getResource(); // Returns the resource.\n\tResourceReference.UrlAttributes getUrlAttributes(); // Allows to specify which locale, style and variation values will the generated URL for this resource reference have.\n\tPackageResourceReference readBuffered(boolean readBuffered); // If the package resource should be read buffered. WARNING - if the stream is not read buffered compressors will not work, because they require the whole content to be read into memory. (IJavaScriptCompressor, ICssCompressor, IScopeAwareTextResourceProcessor)\n\tprotected final void removeCompressFlagIfUnnecessary(PackageResource resource); // Method allowing to remove the compress flag if the resource has been detected as a minified one (i.e.\n}"}
{"index": 16665, "repo": "spring-beans-6.0.11", "des": "Exception thrown when a BeanFactory is asked for a bean instance for which multiple matching candidates have been found when only one matching bean was expected.", "code": "public class NoUniqueBeanDefinitionException extends NoSuchBeanDefinitionException {\n\tCollection<String> getBeanNamesFound(); // Return the names of all beans found when only one matching bean was expected.\n\tint getNumberOfBeansFound(); // Return the number of beans found when only one matching bean was expected.\n}"}
{"index": 4572, "repo": "beam-sdks-java-core-2.49.0", "des": "Given a \"poll function\" that produces a potentially growing set of outputs for an input, this transform simultaneously continuously watches the growth of output sets of all inputs, until a per-input termination condition is reached.", "code": "Class Watch {\n\tstatic <InputT,OutputT,KeyT>Watch.Growth<InputT,OutputT,KeyT> growthOf(Contextful<Watch.Growth.PollFn<InputT,OutputT>> pollFn, SerializableFunction<OutputT,KeyT> outputKeyFn); // Watches the growth of the given poll function, using the given \"key function\" to deduplicate outputs.\n\tstatic <InputT,OutputT>Watch.Growth<InputT,OutputT,OutputT> growthOf(Watch.Growth.PollFn<InputT,OutputT> pollFn); // Watches the growth of the given poll function.\n\tstatic <InputT,OutputT>Watch.Growth<InputT,OutputT,OutputT> growthOf(Watch.Growth.PollFn<InputT,OutputT> pollFn, Requirements requirements); // Watches the growth of the given poll function.\n}"}
{"index": 14221, "repo": "wicket-core-10.0.0-M1", "des": "Postpone calling IFeedback.beforeRender() after other components.", "code": "public class FeedbackDelay extends Object implements Serializable, AutoCloseable {\n\tvoid beforeRender(); // Prepares all postponed feedbacks for render.\n\tvoid close(); // Close any delays.\n\tstatic Optional<FeedbackDelay> get(RequestCycle cycle); // Get the current delay.\n\tFeedbackDelay postpone(IFeedback feedback); // Postpone Component.beforeRender() on the given feedback.\n}"}
{"index": 862, "repo": "ignite-core-2.15.0", "des": "Convenience class representing mutable tuple of a single value.", "code": "Class GridTuple<V> {\n\tObject clone();\n\tboolean equals(Object obj);\n\tV get(); // Gets value.\n\tIterator<V> iterator();\n\tvoid readExternal(ObjectInput in);\n\tvoid set(V val); // Sets value.\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 12619, "repo": "spring-data-mongodb-4.1.2", "des": "Represents one single operation in an aggregation pipeline.", "code": "public interface AggregationOperation {\n\tdefault String getOperator(); // Return the MongoDB operator that is used for this AggregationOperation.\n\torg.bson.Document toDocument(AggregationOperationContext context); // Deprecated. since 2.2 in favor of toPipelineStages(AggregationOperationContext).\n\tdefault List<org.bson.Document> toPipelineStages(AggregationOperationContext context); // Turns the AggregationOperation into list of stages by using the given AggregationOperationContext.\n}"}
{"index": 13440, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Type of Spring Data repositories to enable.", "code": "public enum RepositoryType extends Enum<RepositoryType> {\n\tstatic RepositoryType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic RepositoryType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 11300, "repo": "spring-context-6.0.11", "des": "Implementation of the Model interface based on a ConcurrentHashMap for use in concurrent scenarios.", "code": "public class ConcurrentModel extends ConcurrentHashMap<String,Object> implements Model {\n\tConcurrentModel addAllAttributes(Collection<?> attributeValues); // Copy all attributes in the supplied Collection into this Map, using attribute name generation for each element.\n\tConcurrentModel addAllAttributes(Map<String,?> attributes); // Copy all attributes in the supplied Map into this Map.\n\tConcurrentModel addAttribute(Object attributeValue); // Add the supplied attribute to this Map using a generated name.\n\tConcurrentModel addAttribute(String attributeName, Object attributeValue); // Add the supplied attribute under the supplied name.\n\tMap<String,Object> asMap(); // Return the current set of model attributes as a Map.\n\tboolean containsAttribute(String attributeName); // Does this model contain an attribute of the given name?\n\tObject getAttribute(String attributeName); // Return the attribute value for the given name, if any.\n\tConcurrentModel mergeAttributes(Map<String,?> attributes); // Copy all attributes in the supplied Map into this Map, with existing objects of the same name taking precedence (i.e.\n\tObject put(String key, Object value);\n\tvoid putAll(Map<? extends String,?> map);\n}"}
{"index": 1620, "repo": "pdfbox-3.0.0-beta1", "des": "CS: Set color space for stroking operations.", "code": "Class SetStrokingColorSpace {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> arguments); // Process the operator.\n}"}
{"index": 6088, "repo": "jackson-databind-2.15.2", "des": "Combo-deserializer that supports deserialization of somewhat optional javax.", "code": "Class CoreXMLDeserializers.Std {\n\tprotected Object _deserialize(String value, DeserializationContext ctxt); // Main method from trying to deserialize actual value from non-empty String.\n\tprotected XMLGregorianCalendar _gregorianFromDate(DeserializationContext ctxt, Date d);\n\tObject deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n}"}
{"index": 18419, "repo": "opencms-core-15.0", "des": "This class represents the result of a 'merge sub-sitemap' operation.", "code": "Class CmsSitemapMergeInfo {\n\tCmsClientSitemapEntry getMergedEntry(); // Returns the entry to be merged back into the parent sitemap.\n\tlong getTimestamp(); // The timestamp of the last modification of the parent sitemap.\n}"}
{"index": 17198, "repo": "spring-integration-amqp-6.1.2", "des": "Defines the payload type when the listener container is configured with consumerBatchEnabled.", "code": "public static enum AmqpInboundChannelAdapter.BatchMode extends Enum<AmqpInboundChannelAdapter.BatchMode> {\n\tstatic AmqpInboundChannelAdapter.BatchMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AmqpInboundChannelAdapter.BatchMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13154, "repo": "spring-test-6.0.11", "des": "Abstract implementation of the TestContextBootstrapper interface which provides most of the behavior required by a bootstrapper.", "code": "public abstract class AbstractTestContextBootstrapper extends Object implements TestContextBootstrapper {\n\tfinal MergedContextConfiguration buildMergedContextConfiguration(); // Build the merged context configuration for the test class in the BootstrapContext associated with this bootstrapper.\n\tTestContext buildTestContext(); // Build a new DefaultTestContext using the test class in the BootstrapContext associated with this bootstrapper and by delegating to buildMergedContextConfiguration() and getCacheAwareContextLoaderDelegate().\n\tBootstrapContext getBootstrapContext(); // Get the BootstrapContext associated with this bootstrapper.\n\tprotected CacheAwareContextLoaderDelegate getCacheAwareContextLoaderDelegate(); // Get the CacheAwareContextLoaderDelegate to use for transparent interaction with the ContextCache.\n\tprotected List<ContextCustomizerFactory> getContextCustomizerFactories(); // Get the ContextCustomizerFactory instances for this bootstrapper.\n\tprotected abstract Class<? extends ContextLoader> getDefaultContextLoaderClass(Class<?> testClass); // Determine the default ContextLoader class to use for the supplied test class.\n\tprotected List<TestExecutionListener> getDefaultTestExecutionListeners(); // Get the default TestExecutionListeners for this bootstrapper.\n\tfinal List<TestExecutionListener> getTestExecutionListeners(); // Get a list of newly instantiated TestExecutionListeners for the test class in the BootstrapContext associated with this bootstrapper.\n\tprotected MergedContextConfiguration processMergedContextConfiguration(MergedContextConfiguration mergedConfig); // Process the supplied, newly instantiated MergedContextConfiguration instance.\n\tprotected ContextLoader resolveContextLoader(Class<?> testClass, List<ContextConfigurationAttributes> configAttributesList); // Resolve the ContextLoader class to use for the supplied list of ContextConfigurationAttributes and then instantiate and return that ContextLoader.\n\tprotected Class<? extends ContextLoader> resolveExplicitContextLoaderClass(List<ContextConfigurationAttributes> configAttributesList); // Resolve the ContextLoader class to use for the supplied list of ContextConfigurationAttributes.\n\tvoid setBootstrapContext(BootstrapContext bootstrapContext); // Set the BootstrapContext to be used by this bootstrapper.\n}"}
{"index": 7941, "repo": "commons-jcs3-core-3.1", "des": "Defines the behavior for cache element serializers.", "code": "Interface IElementSerializer {\n\t<T> T deSerialize(byte[] bytes, ClassLoader loader); // Turns a byte array into an object.\n\tdefault <T> T deSerializeFrom(AsynchronousByteChannel ic, int readTimeoutMs, ClassLoader loader); // Convenience method to read serialized object from an asynchronous channel.\n\tdefault <T> T deSerializeFrom(InputStream is, ClassLoader loader); // Convenience method to read serialized object from a stream.\n\tdefault <T> T deSerializeFrom(ReadableByteChannel ic, ClassLoader loader); // Convenience method to read serialized object from a channel.\n\t<T> byte[] serialize(T obj); // Turns an object into a byte array.\n\tdefault <T> int serializeTo(T obj, AsynchronousByteChannel oc, int writeTimeoutMs); // Convenience method to write serialized object into an asynchronous channel.\n\tdefault <T> int serializeTo(T obj, OutputStream os); // Convenience method to write serialized object into a stream.\n\tdefault <T> int serializeTo(T obj, WritableByteChannel oc); // Convenience method to write serialized object into a channel.\n}"}
{"index": 11248, "repo": "spring-context-6.0.11", "des": "Base class for all JMX metadata classes.", "code": "public abstract class AbstractJmxAttribute extends Object {\n\tint getCurrencyTimeLimit(); // Return a currency time limit for this attribute.\n\tString getDescription(); // Return a description for this attribute.\n\tvoid setCurrencyTimeLimit(int currencyTimeLimit); // Set a currency time limit for this attribute.\n\tvoid setDescription(String description); // Set a description for this attribute.\n}"}
{"index": 12696, "repo": "spring-data-mongodb-4.1.2", "des": "Used to resolve associations annotated with DBRef.", "code": "public interface DbRefResolver extends ReferenceResolver {\n\tList<org.bson.Document> bulkFetch(List<com.mongodb.DBRef> dbRefs); // Loads a given List of DBRefs from the datasource in one batch.\n\tdefault com.mongodb.DBRef createDbRef(DBRef annotation, MongoPersistentEntity<?> entity, Object id); // Creates a DBRef instance for the given DBRef annotation, MongoPersistentEntity and id.\n\torg.bson.Document fetch(com.mongodb.DBRef dbRef); // Actually loads the DBRef from the datasource.\n\tObject resolveDbRef(MongoPersistentProperty property, com.mongodb.DBRef dbref, DbRefResolverCallback callback, DbRefProxyHandler proxyHandler); // Resolves the given DBRef into an object of the given MongoPersistentProperty's type.\n}"}
{"index": 4469, "repo": "beam-sdks-java-core-2.49.0", "des": "Control enum for indicating whether or not a traversal should process the contents of a composite transform or not.", "code": "Enum Pipeline.PipelineVisitor.CompositeBehavior {\n\tstatic Pipeline.PipelineVisitor.CompositeBehavior valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic Pipeline.PipelineVisitor.CompositeBehavior[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13197, "repo": "spring-test-6.0.11", "des": "Concrete implementation of AbstractGenericContextLoader that reads bean definitions from Groovy scripts and XML configuration files.", "code": "public class GenericGroovyXmlContextLoader extends GenericXmlContextLoader {\n\tprotected String getResourceSuffix(); // GenericGroovyXmlContextLoader supports both Groovy and XML resource types for detection of defaults.\n\tprotected String[] getResourceSuffixes(); // Returns \"-context.xml\" and \"Context.groovy\" in order to support detection of a default XML config file or Groovy script.\n\tprotected void loadBeanDefinitions(org.springframework.context.support.GenericApplicationContext context, MergedContextConfiguration mergedConfig); // Load bean definitions into the supplied context from the locations in the supplied MergedContextConfiguration using a GroovyBeanDefinitionReader.\n}"}
{"index": 3693, "repo": "kafka-streams-3.5.0", "des": "This interface controls the strategy that can be used to control how we emit results in a processor.", "code": "Interface EmitStrategy {\n\tstatic EmitStrategy onWindowClose(); // This strategy indicates that the aggregated result for a window will only be emitted when the window closes instead of when there's an update to the window.\n\tstatic EmitStrategy onWindowUpdate(); // This strategy indicates that the aggregated result for a window will be emitted every time when there's an update to the window instead of when the window closes.\n\tEmitStrategy.StrategyType type(); // Returns the strategy type\n}"}
{"index": 14925, "repo": "spring-security-test-6.1.2", "des": "A utility class for testing spring security", "code": "public abstract class WebTestUtils extends Object {\n\tstatic org.springframework.security.web.csrf.CsrfTokenRepository getCsrfTokenRepository(jakarta.servlet.http.HttpServletRequest request); // Gets the CsrfTokenRepository for the specified HttpServletRequest.\n\tstatic org.springframework.security.web.csrf.CsrfTokenRequestHandler getCsrfTokenRequestHandler(jakarta.servlet.http.HttpServletRequest request); // Gets the CsrfTokenRequestHandler for the specified HttpServletRequest.\n\tstatic org.springframework.security.web.context.SecurityContextRepository getSecurityContextRepository(jakarta.servlet.http.HttpServletRequest request); // Gets the SecurityContextRepository for the specified HttpServletRequest.\n\tstatic void setCsrfTokenRepository(jakarta.servlet.http.HttpServletRequest request, org.springframework.security.web.csrf.CsrfTokenRepository repository); // Sets the CsrfTokenRepository for the specified HttpServletRequest.\n\tstatic void setSecurityContextRepository(jakarta.servlet.http.HttpServletRequest request, org.springframework.security.web.context.SecurityContextRepository securityContextRepository); // Sets the SecurityContextRepository for the specified HttpServletRequest.\n}"}
{"index": 12943, "repo": "slf4j-api-2.0.7", "des": "Provides minimal default implementations for LegacyAbstractLogger.isTraceEnabled(Marker), LegacyAbstractLogger.isDebugEnabled(Marker) and other similar methods.", "code": "public abstract class LegacyAbstractLogger extends AbstractLogger {\n\tboolean isDebugEnabled(Marker marker); // Similar to Logger.isDebugEnabled() method except that the marker data is also taken into account.\n\tboolean isErrorEnabled(Marker marker); // Similar to Logger.isErrorEnabled() method except that the marker data is also taken into consideration.\n\tboolean isInfoEnabled(Marker marker); // Similar to Logger.isInfoEnabled() method except that the marker data is also taken into consideration.\n\tboolean isTraceEnabled(Marker marker); // Similar to Logger.isTraceEnabled() method except that the marker data is also taken into account.\n\tboolean isWarnEnabled(Marker marker); // Similar to Logger.isWarnEnabled() method except that the marker data is also taken into consideration.\n}"}
{"index": 14543, "repo": "spring-security-web-6.1.2", "des": "If the request matches, logs an authenticated user out by delegating to a ServerLogoutHandler.", "code": "public class LogoutWebFilter extends Object implements org.springframework.web.server.WebFilter {\n\treactor.core.publisher.Mono<Void> filter(org.springframework.web.server.ServerWebExchange exchange, org.springframework.web.server.WebFilterChain chain);\n\tvoid setLogoutHandler(ServerLogoutHandler logoutHandler); // Sets the ServerLogoutHandler.\n\tvoid setLogoutSuccessHandler(ServerLogoutSuccessHandler logoutSuccessHandler); // Sets the ServerLogoutSuccessHandler.\n\tvoid setRequiresLogoutMatcher(ServerWebExchangeMatcher requiresLogoutMatcher);\n}"}
{"index": 5491, "repo": "druid-processing-26.0.0", "des": "Vectorized selector for primitive columns.", "code": "Interface VectorValueSelector {\n\tdouble[] getDoubleVector(); // Get the current vector, casting to doubles as necessary.\n\tfloat[] getFloatVector(); // Get the current vector, casting to floats as necessary.\n\tlong[] getLongVector(); // Get the current vector, casting to longs as necessary.\n\tboolean[] getNullVector(); // Gets a vector of booleans signifying which rows are null and which are not (true for null).\n}"}
{"index": 16689, "repo": "spring-beans-6.0.11", "des": "Holder containing one or more PropertyValue objects, typically comprising one update for a specific target bean.", "code": "public interface PropertyValues extends Iterable<PropertyValue> {\n\tPropertyValues changesSince(PropertyValues old); // Return the changes since the previous PropertyValues.\n\tboolean contains(String propertyName); // Is there a property value (or other processing entry) for this property?\n\tPropertyValue getPropertyValue(String propertyName); // Return the property value with the given name, if any.\n\tPropertyValue[] getPropertyValues(); // Return an array of the PropertyValue objects held in this object.\n\tboolean isEmpty(); // Does this holder not contain any PropertyValue objects at all?\n\tdefault Iterator<PropertyValue> iterator(); // Return an Iterator over the property values.\n\tdefault Spliterator<PropertyValue> spliterator(); // Return a Spliterator over the property values.\n\tdefault Stream<PropertyValue> stream(); // Return a sequential Stream containing the property values.\n}"}
{"index": 15567, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "des": "Authorization exceptions thrown to limit access to the endpoints.", "code": "public class CloudFoundryAuthorizationException extends RuntimeException {\n\tCloudFoundryAuthorizationException.Reason getReason(); // Return the reason why the authorization exception was thrown.\n\torg.springframework.http.HttpStatus getStatusCode(); // Return the status code that should be returned to the client.\n}"}
{"index": 5613, "repo": "org.apache.karaf.main-2.4.4", "des": "A Location represents a URL which may have a default value, may be read only, may or may not have a current value and may be cascaded on to a parent location.", "code": "Interface Location {\n\tboolean allowsDefault(); // Returns true if this location allows a default value to be assigned and false otherwise.\n\tLocation createLocation(Location parent, URL defaultValue, boolean readonly); // Constructs a new location.\n\tURL getDataArea(String path); // Returns a URL to the specified path within this location.\n\tURL getDefault(); // Returns the default value of this location if any.\n\tLocation getParentLocation(); // Returns the parent of this location or null if none is available.\n\tURL getURL(); // Returns the actual URL of this location.\n\tboolean isLocked(); // Returns true if this location is locked and false otherwise.\n\tboolean isReadOnly(); // Returns true if this location represents a read only location and false otherwise.\n\tboolean isSet(); // Returns true if this location has a value and false otherwise.\n\tboolean lock(); // Attempts to lock this location with a canonical locking mechanism and return true if the lock could be acquired.\n\tvoid release(); // Releases the lock on this location.\n\tboolean set(URL value, boolean lock); // Sets and optionally locks the location's value to the given URL.\n\tboolean set(URL value, boolean lock, String lockFilePath); // Sets and optionally locks the location's value to the given URL using the given lock file.\n\tboolean setURL(URL value, boolean lock); // Deprecated. use set(URL, boolean) instead.\n}"}
{"index": 8532, "repo": "commons-io-2.13.0", "des": "Represents a function that accepts three arguments and produces a result.", "code": "Interface IOTriFunction<T,U,V,R> {\n\tdefault <W> IOTriFunction<T,U,V,W> andThen(IOFunction<? super R,? extends W> after); // Creates a composed function that first applies this function to its input, and then applies the after function to the result.\n\tR apply(T t, U u, V v); // Applies this function to the given arguments.\n}"}
{"index": 10052, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Default implementation of ResourceLocalizer which is only capable of re-using files already in HDFS and preparing correct parameters for created LocalResource entries.", "code": "Class DefaultResourceLocalizer {\n\tboolean AddRawContent(String key, byte[] value); // Adds a content into a to be written entries.\n\tprotected void doFileCopy(FileSystem fs); // Do file copy.\n\tprotected Map<String,LocalResource> doFileTransfer(FileSystem fs); // Do file transfer.\n\tvoid setRawFileContents(Map<String,byte[]> rawFileContents); // Sets the raw file contents.\n}"}
{"index": 18656, "repo": "opencms-gwt-15.0", "des": "Sitemap context menu create gallery entry.", "code": "Class CmsOpenGalleryMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 6094, "repo": "jackson-databind-2.15.2", "des": "Simple deserializer for handling Date values.", "code": "Class DateDeserializers.DateDeserializer {\n\tDate deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tObject getEmptyValue(DeserializationContext ctxt); // Method called to determine value to be used for \"empty\" values (most commonly when deserializing from empty JSON Strings).\n\tprotected DateDeserializers.DateDeserializer withDateFormat(DateFormat df, String formatString);\n}"}
{"index": 3698, "repo": "kafka-streams-3.5.0", "des": "A data class representing an incoming record with fixed key for processing in a FixedKeyProcessor or a record to forward to downstream processors via FixedKeyProcessorContext.", "code": "Class FixedKeyRecord<K,V> {\n\tboolean equals(Object o);\n\torg.apache.kafka.common.header.Headers headers(); // The headers of the record.\n\tK key(); // The key of the record.\n\tlong timestamp(); // The timestamp of the record.\n\tV value(); // The value of the record.\n\tFixedKeyRecord<K,V> withHeaders(org.apache.kafka.common.header.Headers headers); // A convenient way to produce a new record if you only need to change the headers.\n\tFixedKeyRecord<K,V> withTimestamp(long timestamp); // A convenient way to produce a new record if you only need to change the timestamp.\n\t<NewV> FixedKeyRecord<K,NewV> withValue(NewV value); // A convenient way to produce a new record if you only need to change the value.\n}"}
{"index": 3651, "repo": "hive-serde-4.0.0-alpha-2", "des": "A SettableByteObjectInspector can set a byte value to an object.", "code": "Interface SettableByteObjectInspector {\n\tObject create(byte value); // Create an object with the value.\n\tObject set(Object o, byte value); // Set the object with the value.\n}"}
{"index": 15499, "repo": "spring-batch-core-5.0.2", "des": "A Step implementation that delegates to a Flow.", "code": "public class FlowStep extends AbstractStep {\n\tvoid afterPropertiesSet(); // Ensure that the flow is set.\n\tprotected void doExecute(StepExecution stepExecution); // Delegate to the flow provided for the execution of the step.\n\tvoid setFlow(Flow flow); // Public setter for the flow.\n}"}
{"index": 10926, "repo": "spring-data-redis-3.1.2", "des": "HRANDFIELD ReactiveRedisConnection.Command.", "code": "public static class ReactiveHashCommands.HRandFieldCommand extends ReactiveRedisConnection.KeyCommand {\n\tReactiveHashCommands.HRandFieldCommand count(long count); // Applies the count.\n\tlong getCount();\n\tstatic ReactiveHashCommands.HRandFieldCommand key(ByteBuffer key); // Applies the hash key.\n}"}
{"index": 6338, "repo": "mina-core-3.0.0-M2", "des": "A IoSessionConfig for socket based sessions.", "code": "Interface TcpSessionConfig {\n\tInteger getSoLinger(); // Please note that enabling SO_LINGER in Java NIO can result in platform-dependent behavior and unexpected blocking of I/O thread.\n\tSSLContext getSslContext();\n\tBoolean isKeepAlive();\n\tBoolean isOobInline();\n\tboolean isSecured(); // Tells if the session provides some encryption (SSL/TLS)\n\tBoolean isTcpNoDelay();\n\tvoid setKeepAlive(boolean keepAlive);\n\tvoid setOobInline(boolean oobInline);\n\tvoid setSoLinger(int soLinger); // Please note that enabling SO_LINGER in Java NIO can result in platform-dependent behavior and unexpected blocking of I/O thread.\n\tvoid setSslContext(SSLContext sslContext);\n\tvoid setTcpNoDelay(boolean tcpNoDelay);\n}"}
{"index": 5622, "repo": "org.apache.karaf.main-2.4.4", "des": "This class represents a native code description.", "code": "Interface NativeCodeDescription {\n\tint compareTo(NativeCodeDescription other); // Native code descriptions are sorted with the following preferences: The minimum version of the os version ranges The language\n\tFilter getFilter(); // Returns the selection filter used to select the native code.\n\tString[] getLanguages(); // Returns the languages supported by the native code.\n\tString[] getNativePaths(); // Returns the paths to the native code libraries.\n\tString[] getOSNames(); // Returns the operating system names supported by the native code.\n\tVersionRange[] getOSVersions(); // Returns the operating system version ranges supported by the native code.\n\tString[] getProcessors(); // Returns the processors supported by the native code.\n\tboolean hasInvalidNativePaths(); // Indicates if this native code description has invalid native code paths.\n}"}
{"index": 4170, "repo": "camel-core-3.0.0-RC1", "des": "YAML is a data format to marshal and unmarshal Java objects to and from YAML.", "code": "Class YAMLDataFormat {\n\tClassLoader getClassLoader();\n\tString getConstructor();\n\tString getDumperOptions();\n\tYAMLLibrary getLibrary();\n\tString getRepresenter();\n\tString getResolver();\n\tList<YAMLTypeFilterDefinition> getTypeFilters();\n\tClass<?> getUnmarshalType();\n\tString getUnmarshalTypeName();\n\tboolean isAllowAnyType();\n\tboolean isPrettyFlow();\n\tboolean isUseApplicationContextClassLoader();\n\tvoid setAllowAnyType(boolean allowAnyType); // Allow any class to be un-marshaled\n\tvoid setClassLoader(ClassLoader classLoader); // Set a custom classloader\n\tvoid setConstructor(String constructor); // BaseConstructor to construct incoming documents.\n\tvoid setDumperOptions(String dumperOptions); // DumperOptions to configure outgoing objects.\n\tvoid setLibrary(YAMLLibrary library); // Which yaml library to use.\n\tvoid setPrettyFlow(boolean prettyFlow); // Force the emitter to produce a pretty YAML document when using the flow style.\n\tvoid setRepresenter(String representer); // Representer to emit outgoing objects.\n\tvoid setResolver(String resolver); // Resolver to detect implicit type\n\tvoid setTypeFilters(List<YAMLTypeFilterDefinition> typeFilters); // Set the types SnakeYAML is allowed to un-marshall\n\tvoid setUnmarshalType(Class<?> type); // Class of the object to be created\n\tvoid setUnmarshalTypeName(String unmarshalTypeName); // Class name of the java type to use when unarmshalling\n\tvoid setUseApplicationContextClassLoader(boolean useApplicationContextClassLoader); // Use ApplicationContextClassLoader as custom ClassLoader\n}"}
{"index": 3966, "repo": "zookeeper-3.8.2", "des": "This incremental hash is used to keep track of the hash of the data tree to that we can quickly validate that things are in sync.", "code": "Class AdHash {\n\tAdHash addDigest(long digest); // Add new digest to the hash value maintained in this class.\n\tvoid clear();\n\tboolean equals(Object other);\n\tlong getHash(); // Return the long value of the hash.\n\tAdHash removeDigest(long digest); // Remove the digest from the hash value.\n}"}
{"index": 5266, "repo": "druid-processing-26.0.0", "des": "Utility methods used by FrameWriter implementations.", "code": "Class FrameWriterUtils {\n\tstatic void copyByteBufferToMemory(ByteBuffer src, org.apache.datasketches.memory.WritableMemory dst, long dstPosition, int len, boolean allowNullBytes); // Copies \"len\" bytes from src.position() to \"dstPosition\" in \"memory\".\n\tstatic Set<String> findDisallowedFieldNames(RowSignature signature); // Checks the provided signature for any disallowed field names.\n\tstatic List<ByteBuffer> getUtf8ByteBuffersFromStringArraySelector(ColumnValueSelector selector); // Retrieves UTF-8 byte buffers from a ColumnValueSelector, which is expected to be the kind of selector you get for an ARRAY<STRING> column.\n\tstatic List<ByteBuffer> getUtf8ByteBuffersFromStringSelector(DimensionSelector selector, boolean multiValue); // Retrieves UTF-8 byte buffers from a DimensionSelector, which is expected to be the kind of selector you get for an STRING column.\n\tstatic void verifySortColumns(List<KeyColumn> keyColumns, RowSignature signature); // Verifies whether the provided sortColumns are all sortable, and are a prefix of the signature.\n\tstatic long writeFrameHeader(org.apache.datasketches.memory.WritableMemory memory, long startPosition, FrameType frameType, long totalSize, int numRows, int numRegions, boolean permuted); // Writes a frame header to a memory locations.\n}"}
{"index": 17428, "repo": "groovy-4.0.13", "des": "interface to mark a AstNode as Variable.", "code": "public interface Variable {\n\tExpression getInitialExpression(); // expression used to initialize the variable or null of there is no initialization.\n\tint getModifiers();\n\tString getName(); // the name of the variable\n\tClassNode getOriginType(); // the type before wrapping primitives type of the variable\n\tClassNode getType(); // the type of the variable\n\tboolean hasInitialExpression(); // returns true if there is an initialization expression\n\tboolean isClosureSharedVariable();\n\tboolean isDynamicTyped();\n\tboolean isInStaticContext(); // returns true if this variable is used in a static context.\n\tvoid setClosureSharedVariable(boolean inClosure);\n}"}
{"index": 14464, "repo": "spring-security-messaging-6.1.2", "des": "Authorizes Message resources using the provided AuthorizationManager", "code": "public final class AuthorizationChannelInterceptor extends Object implements org.springframework.messaging.support.ChannelInterceptor {\n\torg.springframework.messaging.Message<?> preSend(org.springframework.messaging.Message<?> message, org.springframework.messaging.MessageChannel channel);\n\tvoid setAuthorizationEventPublisher(org.springframework.security.authorization.AuthorizationEventPublisher eventPublisher); // Use this AuthorizationEventPublisher to publish the AuthorizationManager result.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 12673, "repo": "spring-data-mongodb-4.1.2", "des": "Gateway to conditional expressions that evaluate their argument expressions as booleans to a value.", "code": "public class ConditionalOperators extends Object {\n\tstatic ConditionalOperators.IfNull.ThenBuilder ifNull(String fieldReference); // Creates new AggregationExpression that evaluates an expression and returns the value of the expression if the expression evaluates to a non-null value.\n\tstatic ConditionalOperators.IfNull.ThenBuilder ifNull(AggregationExpression expression); // Creates new AggregationExpression that evaluates an expression and returns the value of the expression if the expression evaluates to a non-null value.\n\tstatic ConditionalOperators.Switch switchCases(List<ConditionalOperators.Switch.CaseOperator> conditions); // Creates new AggregationExpression that evaluates a series of ConditionalOperators.Switch.CaseOperator expressions.\n\tstatic ConditionalOperators.Switch switchCases(ConditionalOperators.Switch.CaseOperator... conditions); // Creates new AggregationExpression that evaluates a series of ConditionalOperators.Switch.CaseOperator expressions.\n\tstatic ConditionalOperators.ConditionalOperatorFactory when(String fieldReference); // Take the field referenced by given fieldReference.\n\tstatic ConditionalOperators.ConditionalOperatorFactory when(AggregationExpression expression); // Take the value resulting from the given expression.\n\tstatic ConditionalOperators.ConditionalOperatorFactory when(CriteriaDefinition criteriaDefinition); // Take the value resulting from the given criteriaDefinition.\n}"}
{"index": 17355, "repo": "groovy-4.0.13", "des": "A MetaClassRegistry is an object that is responsible for managing a cache of MetaClass instances.", "code": "public interface MetaClassRegistry {\n\tvoid addMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener); // Adds a metaclass change listener for constant metaclasses\n\tvoid addNonRemovableMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener); // Adds a metaclass change listener for constant metaclasses.\n\tMetaClass getMetaClass(Class theClass); // The main function of the registry If a metaclass exists then return it otherwise create one, put it in the registry and return it\n\tMetaClassRegistry.MetaClassCreationHandle getMetaClassCreationHandler(); // Retrieves the MetaClassCreationHandle that is responsible for constructing MetaClass instances\n\tMetaClassRegistryChangeEventListener[] getMetaClassRegistryChangeEventListeners(); // Returns all registered class change listener for constant metaclasses.\n\tIterator iterator(); // Gets a snapshot of the current constant metaclasses and returns it as Iterator.\n\tvoid removeMetaClass(Class theClass); // Removes a cached MetaClass from the registry\n\tvoid removeMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener); // Removes a metaclass change listener for constant metaclasses\n\tvoid setMetaClass(Class theClass, MetaClass theMetaClass); // Adds a metaclass to the registry for the given class\n\tvoid setMetaClassCreationHandle(MetaClassRegistry.MetaClassCreationHandle handle); // Sets the MetaClassCreationHandle instance that is responsible for constructing instances\n}"}
{"index": 15596, "repo": "spring-security-core-6.1.2", "des": "An Authorization manager which can determine if an Authentication has access to a specific object.", "code": "@FunctionalInterface public interface AuthorizationManager<T> {\n\tAuthorizationDecision check(Supplier<Authentication> authentication, T object); // Determines if access is granted for a specific authentication and object.\n\tdefault void verify(Supplier<Authentication> authentication, T object); // Determines if access should be granted for a specific authentication and object.\n}"}
{"index": 11671, "repo": "spring-websocket-6.0.11", "des": "A message that can be handled or sent on a WebSocket connection.", "code": "public interface WebSocketMessage<T> {\n\tT getPayload(); // Return the message payload (never null).\n\tint getPayloadLength(); // Return the number of bytes contained in the message.\n\tboolean isLast(); // When partial message support is available and requested via WebSocketHandler.supportsPartialMessages(), this method returns true if the current message is the last part of the complete WebSocket message sent by the client.\n}"}
{"index": 8917, "repo": "hbase-server-3.0.0-alpha-4", "des": "Balanced queue executor with a fastpath.", "code": "Class FastPathBalancedQueueRpcExecutor {\n\tboolean dispatch(CallRunner callTask); // Add the request to the executor queue\n\tprotected RpcHandler getHandler(String name, double handlerFailureThreshhold, int handlerCount, BlockingQueue<CallRunner> q, AtomicInteger activeHandlerCount, AtomicInteger failedHandlerCount, Abortable abortable); // Override if providing alternate Handler implementation.\n}"}
{"index": 5278, "repo": "druid-processing-26.0.0", "des": "Base class for a single variable input Function implementation.", "code": "Class Function.UnivariateFunction {\n\tExprEval apply(List<Expr> args, Expr.ObjectBinding bindings); // Evaluate the function, given a list of arguments and a set of bindings to provide values for IdentifierExpr.\n\tprotected abstract ExprEval eval(ExprEval param);\n\tvoid validateArguments(List<Expr> args); // Validate function arguments.\n}"}
{"index": 5454, "repo": "druid-processing-26.0.0", "des": "Base type for a VectorObjectSelector for a dictionary encoded ColumnType.", "code": "Class StringDictionaryEncodedColumn.StringVectorObjectSelector {\n\tint getCurrentVectorSize(); // Returns the current vector size for this cursor.\n\tint getMaxVectorSize(); // Returns the maximum vector size for this cursor.\n\tObject[] getObjectVector(); // Get the current vector.\n\tabstract String lookupName(int id);\n}"}
{"index": 7588, "repo": "cassandra-all-4.1.2", "des": "Represents a data storage quantity used for Cassandra configuration.", "code": "Class DataStorageSpec.IntMebibytesBound {\n\tint toBytes(); // Returns the amount of data storage in bytes as an int\n\tlong toBytesInLong(); // Returns the amount of data storage in bytes as long\n\tint toKibibytes(); // Returns the amount of data storage in kibibytes as an int\n\tint toMebibytes(); // Returns the amount of data storage in mebibytes as an int\n}"}
{"index": 16294, "repo": "spring-r2dbc-6.0.11", "des": "Strategy used to populate, initialize, or clean up a database.", "code": "@FunctionalInterface public interface DatabasePopulator {\n\treactor.core.publisher.Mono<Void> populate(Connection connection); // Populate, initialize, or clean up the database using the provided R2DBC Connection.\n\tdefault reactor.core.publisher.Mono<Void> populate(ConnectionFactory connectionFactory); // Execute the given DatabasePopulator against the given ConnectionFactory.\n}"}
{"index": 9798, "repo": "commons-math3-3.6.1", "des": "This class implements rotations in a three-dimensional space.", "code": "Class Rotation {\n\tvoid applyInverseTo(double[] in, double[] out); // Apply the inverse of the rotation to a vector stored in an array.\n\tRotation applyInverseTo(Rotation r); // Apply the inverse of the instance to another rotation.\n\tVector3D applyInverseTo(Vector3D u); // Apply the inverse of the rotation to a vector.\n\tvoid applyTo(double[] in, double[] out); // Apply the rotation to a vector stored in an array.\n\tRotation applyTo(Rotation r); // Apply the instance to another rotation.\n\tVector3D applyTo(Vector3D u); // Apply the rotation to a vector.\n\tRotation compose(Rotation r, RotationConvention convention); // Compose the instance with another rotation.\n\tRotation composeInverse(Rotation r, RotationConvention convention); // Compose the inverse of the instance with another rotation.\n\tstatic double distance(Rotation r1, Rotation r2); // Compute the distance between two rotations.\n\tdouble getAngle(); // Get the angle of the rotation.\n\tdouble[] getAngles(RotationOrder order); // Deprecated. as of 3.6, replaced with getAngles(RotationOrder, RotationConvention)\n\tdouble[] getAngles(RotationOrder order, RotationConvention convention); // Get the Cardan or Euler angles corresponding to the instance.\n\tVector3D getAxis(); // Deprecated. as of 3.6, replaced with getAxis(RotationConvention)\n\tVector3D getAxis(RotationConvention convention); // Get the normalized axis of the rotation.\n\tdouble[][] getMatrix(); // Get the 3X3 matrix corresponding to the instance\n\tdouble getQ0(); // Get the scalar coordinate of the quaternion.\n\tdouble getQ1(); // Get the first coordinate of the vectorial part of the quaternion.\n\tdouble getQ2(); // Get the second coordinate of the vectorial part of the quaternion.\n\tdouble getQ3(); // Get the third coordinate of the vectorial part of the quaternion.\n\tRotation revert(); // Revert a rotation.\n}"}
{"index": 11063, "repo": "spring-shell-core-3.1.2", "des": "Encapsulating ParserMessage with position and inserts.", "code": "public record MessageResult(ParserMessage parserMessage, int position, Object[] inserts) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString getMessage(); // Gets a formatted message using position and inserts.\n\tObject[] inserts(); // Returns the value of the inserts record component.\n\tstatic MessageResult of(ParserMessage parserMessage, int position, Object... inserts); // Constructs MessageResult with parser message, position and inserts.\n\tParserMessage parserMessage(); // Returns the value of the parserMessage record component.\n\tint position(); // Returns the value of the position record component.\n}"}
{"index": 2527, "repo": "exoplayer-r2.3.1", "des": "Conditionally throws errors affecting a Loader.", "code": "Interface LoaderErrorThrower {\n\tvoid maybeThrowError(); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the Loaders default minimum number of retries.\n\tvoid maybeThrowError(int minRetryCount); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the specified minimum number of retries.\n}"}
{"index": 14683, "repo": "spring-data-commons-3.1.2", "des": "A CloseableIterator serves as a bridging data structure for the underlying data store specific results that can be wrapped in a Java 8 java.util.stream.Stream.", "code": "public interface CloseableIterator<T> extends Iterator<T>, Closeable {\n\tvoid close();\n\tdefault Spliterator<T> spliterator(); // Create a Spliterator over the elements provided by this Iterator.\n\tdefault Stream<T> stream(); // Return a sequential Stream with this Iterator as its source.\n}"}
{"index": 16850, "repo": "spring-amqp-3.0.6", "des": "A post processor that uses a DeflaterOutputStream to compress the message body.", "code": "public class DeflaterPostProcessor extends AbstractDeflaterPostProcessor {\n\tprotected OutputStream getCompressorStream(OutputStream zipped); // Get the stream.\n\tprotected String getEncoding(); // Get the encoding.\n}"}
{"index": 840, "repo": "ignite-core-2.15.0", "des": "Reflection field and method cache for classes.", "code": "Class GridReflectionCache {\n\tList<Field> fields(Class<?> cls); // Gets fields.\n\t@Nullable Field firstField(Class<?> cls); // Gets first field in the class list of fields.\n\t@Nullable Object firstFieldValue(Object o); // Gets field value for object.\n\t@Nullable Method firstMethod(Class<?> cls); // Gets first method in the class list of methods.\n\t@Nullable Object firstMethodValue(Object o); // Gets method return value for object.\n\tList<Method> methods(Class<?> cls); // Gets methods.\n\tvoid readExternal(ObjectInput in);\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 15143, "repo": "spring-data-elasticsearch-5.1.2", "des": "Interface definition for structures defined in GeoJSON format. copied from Spring Data Mongodb", "code": "public interface GeoJson<T extends Iterable<?>> {\n\tT getCoordinates(); // The value of the coordinates member is always an Iterable.\n\tString getType(); // String value representing the type of the GeoJson object.\n\tstatic GeoJson<?> of(String json);\n\tdefault String toJson();\n}"}
{"index": 2676, "repo": "mahout-core-14.1", "des": "Open hash map from Object keys to char values.", "code": "Class OpenObjectCharHashMap<T> {\n\tchar adjustOrPutValue(T key, char newValue, char incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(T key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(char value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ObjectProcedure<T> procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ObjectCharProcedure<T> procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tchar get(T key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(T key);\n\tprotected int indexOfKey(T key);\n\tprotected int indexOfValue(char value);\n\tvoid keys(List<T> list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ObjectCharProcedure<T> condition, List<T> keyList, CharArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(T key, char value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(T key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(CharArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 1208, "repo": "ignite-core-2.15.0", "des": "Key, describing the object of statistics.", "code": "Class StatisticsKeyMessage {\n\tList<String> colNames();\n\tshort directType(); // Gets message type.\n\tboolean equals(Object o);\n\tbyte fieldsCount(); // Gets fields count.\n\tString obj();\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tString schema();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 14560, "repo": "spring-security-web-6.1.2", "des": "Authentication implementation for pre-authenticated authentication.", "code": "public class PreAuthenticatedAuthenticationToken extends org.springframework.security.authentication.AbstractAuthenticationToken {\n\tObject getCredentials(); // Get the credentials\n\tObject getPrincipal(); // Get the principal\n}"}
{"index": 7944, "repo": "commons-jcs3-core-3.1", "des": "Listens for lateral cache event notification.", "code": "Interface ILateralCacheListener<K,V> {\n\tvoid dispose(); // Dispose this listener\n\tICompositeCacheManager getCacheManager();\n\tvoid init(); // Initialize this listener\n\tvoid setCacheManager(ICompositeCacheManager cacheMgr);\n}"}
{"index": 18753, "repo": "solr-core-9.3.0", "des": "The interface that is implemented by a request handler to support the V2 end point.", "code": "Interface ApiSupport {\n\tCollection<Api> getApis(); // Returns any (non-JAX-RS annotated) APIs associated with this request handler.\n\tdefault Collection<Class<? extends JerseyResource>> getJerseyResources(); // Returns any JAX-RS annotated v2 APIs associated with this request handler.\n\tdefault Boolean registerV1(); // Whether this should be made available at the regular legacy path\n\tdefault Boolean registerV2(); // Whether this request handler must be made available at the /v2/ path\n}"}
{"index": 11042, "repo": "spring-shell-core-3.1.2", "des": "Interface representing an option in a command.", "code": "public interface CommandOption {\n\tint getArityMax(); // Gets a maximum arity.\n\tint getArityMin(); // Gets a minimum arity.\n\tCompletionResolver getCompletion(); // Gets a completion function.\n\tString getDefaultValue(); // Gets a default value of an option.\n\tString getDescription(); // Gets a description of an option.\n\tString getLabel(); // Gets a label.\n\tString[] getLongNames(); // Gets a long names of an option.\n\tString[] getLongNamesModified(); // Gets a modified long names of an option.\n\tint getPosition(); // Gets a positional value.\n\tCharacter[] getShortNames(); // Gets a short names of an option.\n\torg.springframework.core.ResolvableType getType(); // Gets a ResolvableType of an option.\n\tboolean isRequired(); // Gets a flag if option is required.\n\tstatic CommandOption of(String[] longNames, Character[] shortNames, String description); // Gets an instance of a default CommandOption.\n\tstatic CommandOption of(String[] longNames, Character[] shortNames, String description, org.springframework.core.ResolvableType type); // Gets an instance of a default CommandOption.\n\tstatic CommandOption of(String[] longNames, String[] longNamesModified, Character[] shortNames, String description, org.springframework.core.ResolvableType type, boolean required, String defaultValue, Integer position, Integer arityMin, Integer arityMax, String label, CompletionResolver completion); // Gets an instance of a default CommandOption.\n}"}
{"index": 12534, "repo": "spring-jdbc-6.0.11", "des": "Convenient base class for JDBC-aware transaction objects.", "code": "public abstract class JdbcTransactionObjectSupport extends Object implements org.springframework.transaction.SavepointManager, org.springframework.transaction.support.SmartTransactionObject {\n\tObject createSavepoint(); // This implementation creates a JDBC 3.0 Savepoint and returns it.\n\tvoid flush();\n\tConnectionHolder getConnectionHolder(); // Return the ConnectionHolder for this transaction object.\n\tprotected ConnectionHolder getConnectionHolderForSavepoint();\n\tInteger getPreviousIsolationLevel(); // Return the retained previous isolation level, if any.\n\tboolean hasConnectionHolder(); // Check whether this transaction object has a ConnectionHolder.\n\tboolean isReadOnly(); // Return the read-only status of this transaction.\n\tboolean isSavepointAllowed(); // Return whether savepoints are allowed within this transaction.\n\tvoid releaseSavepoint(Object savepoint); // This implementation releases the given JDBC 3.0 Savepoint.\n\tvoid rollbackToSavepoint(Object savepoint); // This implementation rolls back to the given JDBC 3.0 Savepoint.\n\tvoid setConnectionHolder(ConnectionHolder connectionHolder); // Set the ConnectionHolder for this transaction object.\n\tvoid setPreviousIsolationLevel(Integer previousIsolationLevel); // Set the previous isolation level to retain, if any.\n\tvoid setReadOnly(boolean readOnly); // Set the read-only status of this transaction.\n\tvoid setSavepointAllowed(boolean savepointAllowed); // Set whether savepoints are allowed within this transaction.\n}"}
{"index": 7539, "repo": "cassandra-all-4.1.2", "des": "Implements the streaming interface for the native cassandra storage engine.", "code": "Class CassandraStreamManager {\n\tjava.util.Collection<OutgoingStream> createOutgoingStreams(StreamSession session, RangesAtEndpoint replicas, TimeUUID pendingRepair, PreviewKind previewKind); // Returns a collection of OutgoingStreams that contains the data selected by the given replicas, pendingRepair, and preview.\n\tStreamReceiver createStreamReceiver(StreamSession session, int totalStreams); // Creates a StreamReceiver for the given session, expecting the given number of streams\n\tIncomingStream prepareIncomingStream(StreamSession session, StreamMessageHeader header); // Creates an IncomingStream for the given header\n}"}
{"index": 9150, "repo": "hbase-server-3.0.0-alpha-4", "des": "Simple time based limiter that checks the quota Throttle.", "code": "Class TimeBasedLimiter {\n\tvoid checkQuota(long writeReqs, long estimateWriteSize, long readReqs, long estimateReadSize, long estimateWriteCapacityUnit, long estimateReadCapacityUnit); // Checks if it is possible to execute the specified operation.\n\tvoid consumeRead(long size, long capacityUnit); // Removes or add back some read amount to the quota.\n\tvoid consumeWrite(long size, long capacityUnit); // Removes or add back some write amount to the quota.\n\tlong getReadAvailable(); // Returns the number of bytes available to read to avoid exceeding the quota\n\tlong getWriteAvailable(); // Returns the number of bytes available to write to avoid exceeding the quota\n\tvoid grabQuota(long writeReqs, long writeSize, long readReqs, long readSize, long writeCapacityUnit, long readCapacityUnit); // Removes the specified write and read amount from the quota.\n\tboolean isBypass(); // Returns true if the limiter is a noop\n\tvoid update(TimeBasedLimiter other);\n}"}
{"index": 12496, "repo": "spring-jdbc-6.0.11", "des": "Holder of meta-data for a specific parameter that is used for call processing.", "code": "public class CallParameterMetaData extends Object {\n\tString getParameterName(); // Return the parameter name.\n\tint getParameterType(); // Return the parameter type.\n\tint getSqlType(); // Return the parameter SQL type.\n\tString getTypeName(); // Return the parameter type name.\n\tboolean isFunction(); // Return whether this parameter is declared in a function.\n\tboolean isNullable(); // Return whether the parameter is nullable.\n\tboolean isReturnParameter(); // Determine whether the declared parameter qualifies as a 'return' parameter for our purposes: type DatabaseMetaData.procedureColumnReturn or DatabaseMetaData.procedureColumnResult, or in case of a function, DatabaseMetaData.functionReturn.\n}"}
{"index": 8476, "repo": "commons-io-2.13.0", "des": "This filter accepts Files that can be read.", "code": "Class CanReadFileFilter {\n\tboolean accept(File file); // Checks to see if the file can be read.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the file can be read.\n}"}
{"index": 1780, "repo": "kafka-clients-3.5.0", "des": "A description of a log directory on a particular broker.", "code": "Class LogDirDescription {\n\tApiException error(); // Returns `ApiException` if the log directory is offline or an error occurred, otherwise returns null.\n\tMap<TopicPartition,ReplicaInfo> replicaInfos(); // A map from topic partition to replica information for that partition in this log directory.\n\tOptionalLong totalBytes(); // The total size of the volume this log directory is on or empty if the broker did not return a value.\n\tOptionalLong usableBytes(); // The usable size on the volume this log directory is on or empty if the broker did not return a value.\n}"}
{"index": 14644, "repo": "spring-cloud-stream-4.0.0", "des": "Represents a ProducerDestination that provides the information about the destination that is physically provisioned through ProvisioningProvider.provisionProducerDestination(String, ProducerProperties).", "code": "public interface ProducerDestination {\n\tString getName(); // Provides the destination name.\n\tString getNameForPartition(int partition); // Provides the destination name for a given partition.\n}"}
{"index": 17420, "repo": "groovy-4.0.13", "des": "A type checking extension that will take care of handling errors which are specific to traits.", "code": "public class TraitTypeCheckingExtension extends AbstractTypeCheckingExtension {\n\tList<MethodNode> handleMissingMethod(ClassNode receiver, String name, ArgumentListExpression argumentList, ClassNode[] argumentTypes, MethodCall call); // This method is called by the type checker when a method call cannot be resolved.\n\tvoid setup(); // Subclasses should implement this method whenever they need to perform special checks before the type checker starts working.\n}"}
{"index": 17495, "repo": "pulsar-broker-3.0.0", "des": "Util class to search and load BrokerInterceptors.", "code": "public class BrokerInterceptorUtils extends Object {\n\tBrokerInterceptorDefinition getBrokerInterceptorDefinition(String narPath, String narExtractionDirectory); // Retrieve the broker interceptor definition from the provided handler nar package.\n\tBrokerInterceptorDefinitions searchForInterceptors(String interceptorsDirectory, String narExtractionDirectory); // Search and load the available broker interceptors.\n}"}
{"index": 14187, "repo": "wicket-core-10.0.0-M1", "des": "A request mapper that encrypts URLs generated by another mapper.", "code": "public class CryptoMapper extends Object implements org.apache.wicket.request.mapper.IRequestMapperDelegate {\n\tprotected org.apache.wicket.request.Url decryptEntireUrl(org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl); // Decrypts an entire URL, which was previously encrypted by encryptEntireUrl(org.apache.wicket.request.Url).\n\tprotected org.apache.wicket.request.Url decryptRequestListenerParameter(org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl); // Decrypts a URL which may contain an encrypted PageComponentInfo query parameter.\n\tprotected org.apache.wicket.request.Url decryptUrl(org.apache.wicket.request.Request request, org.apache.wicket.request.Url encryptedUrl); // Decrypts a Url.\n\tprotected org.apache.wicket.request.Url encryptEntireUrl(org.apache.wicket.request.Url url); // Encrypts an entire URL, segments and query parameters.\n\tprotected org.apache.wicket.request.Url encryptRequestListenerParameter(org.apache.wicket.request.Url url); // Encrypts the PageComponentInfo query parameter in the URL, if any is found.\n\tprotected org.apache.wicket.request.Url encryptUrl(org.apache.wicket.request.Url url); // Encrypts a URL.\n\tint getCompatibilityScore(org.apache.wicket.request.Request request);\n\tprotected IMapperContext getContext(); // Returns the applications IMapperContext.\n\tprotected final org.apache.wicket.util.crypt.ICrypt getCrypt();\n\tfinal org.apache.wicket.request.IRequestMapper getDelegateMapper();\n\tboolean getMarkEncryptedUrls(); // Whether or not to mark encrypted URLs as encrypted.\n\torg.apache.wicket.request.Url mapHandler(org.apache.wicket.request.IRequestHandler requestHandler);\n\torg.apache.wicket.request.IRequestHandler mapRequest(org.apache.wicket.request.Request request);\n\tCryptoMapper setMarkEncryptedUrls(boolean markEncryptedUrls); // Sets whether or not to mark encrypted URLs as encrypted.\n}"}
{"index": 14954, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A representation of an OAuth 2.0 \"consent\" to an Authorization request, which holds state related to the set of authorities granted to a client by the resource owner.", "code": "public final class OAuth2AuthorizationConsent extends Object implements Serializable {\n\tboolean equals(Object obj);\n\tstatic OAuth2AuthorizationConsent.Builder from(OAuth2AuthorizationConsent authorizationConsent); // Returns a new OAuth2AuthorizationConsent.Builder, initialized with the values from the provided OAuth2AuthorizationConsent.\n\tSet<org.springframework.security.core.GrantedAuthority> getAuthorities(); // Returns the authorities granted to the client by the principal.\n\tString getPrincipalName(); // Returns the Principal name of the resource owner (or client).\n\tString getRegisteredClientId(); // Returns the identifier for the registered client.\n\tSet<String> getScopes(); // Convenience method for obtaining the scopes granted to the client by the principal, extracted from the authorities.\n\tstatic OAuth2AuthorizationConsent.Builder withId(String registeredClientId, String principalName); // Returns a new OAuth2AuthorizationConsent.Builder, initialized with the given registeredClientId and Principal name.\n}"}
{"index": 11477, "repo": "spring-restdocs-core-3.0.0", "des": "An OperationPreprocessor that modifies a request or response by adding, setting, or removing headers.", "code": "public class HeadersModifyingOperationPreprocessor extends Object implements OperationPreprocessor {\n\tHeadersModifyingOperationPreprocessor add(String name, String value); // Adds a header with the given name and value.\n\tOperationRequest preprocess(OperationRequest request); // Processes the given request.\n\tOperationResponse preprocess(OperationResponse response); // Processes the given response.\n\tHeadersModifyingOperationPreprocessor remove(String name); // Removes the header with the given name.\n\tHeadersModifyingOperationPreprocessor remove(String name, String value); // Removes the given value from the header with the given name.\n\tHeadersModifyingOperationPreprocessor removeMatching(String namePattern); // Remove headers that match the given namePattern regular expression.\n\tHeadersModifyingOperationPreprocessor set(String name, String... values); // Sets the header with the given name to have the given values.\n}"}
{"index": 1370, "repo": "nutch-2.4", "des": "A nested container representing data captured from web server responses.", "code": "Class ProtocolStatus {\n\tjava.lang.Object get(int field$);\n\tjava.util.List<java.lang.CharSequence> getArgs(); // Gets the value of the 'args' field.\n\tjava.lang.Integer getCode(); // Gets the value of the 'code' field.\n\tint getFieldsCount(); // Gets the total field count.\n\tjava.lang.Long getLastModified(); // Gets the value of the 'lastModified' field.\n\torg.apache.avro.Schema getSchema();\n\tProtocolStatus.Tombstone getTombstone();\n\tboolean isArgsDirty(); // Checks the dirty status of the 'args' field.\n\tboolean isCodeDirty(); // Checks the dirty status of the 'code' field.\n\tboolean isLastModifiedDirty(); // Checks the dirty status of the 'lastModified' field.\n\tboolean isSuccess(); // A convenience method which returns a successful ProtocolStatus.\n\tstatic ProtocolStatus.Builder newBuilder(); // Creates a new ProtocolStatus RecordBuilder\n\tstatic ProtocolStatus.Builder newBuilder(ProtocolStatus.Builder other); // Creates a new ProtocolStatus RecordBuilder by copying an existing Builder\n\tstatic ProtocolStatus.Builder newBuilder(ProtocolStatus other); // Creates a new ProtocolStatus RecordBuilder by copying an existing ProtocolStatus instance\n\tProtocolStatus newInstance();\n\tvoid put(int field$, java.lang.Object value);\n\tvoid readExternal(java.io.ObjectInput in); // Reads AVRO data bean from input stream in it s AVRO Binary encoding format to Java object format.\n\tvoid setArgs(java.util.List<java.lang.CharSequence> value); // Sets the value of the 'args' field.\n\tvoid setCode(java.lang.Integer value); // Sets the value of the 'code' field.\n\tvoid setLastModified(java.lang.Long value); // Sets the value of the 'lastModified' field.\n\tvoid writeExternal(java.io.ObjectOutput out); // Writes AVRO data bean to output stream in the form of AVRO Binary encoding format.\n}"}
{"index": 1725, "repo": "samza-api-1.8.0", "des": "The helper interface restores task state.", "code": "Interface TaskRestoreManager {\n\tvoid close(); // Closes all initiated resources include storage engines\n\tvoid init(Checkpoint checkpoint); // Initialize state resources such as store directories.\n\tjava.util.concurrent.CompletableFuture<java.lang.Void> restore(); // Restore state from checkpoints, state snapshots and changelogs.\n}"}
{"index": 17859, "repo": "spring-web-6.0.11", "des": "Factory to manage Reactor Netty resources, i.e.", "code": "public class ReactorNetty2ResourceFactory extends Object implements org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid addGlobalResourcesConsumer(Consumer<reactor.netty5.http.HttpResources> consumer); // Add a Consumer for configuring the global Reactor Netty resources on startup.\n\tvoid afterPropertiesSet();\n\tvoid destroy();\n\treactor.netty5.resources.ConnectionProvider getConnectionProvider(); // Return the configured ConnectionProvider.\n\treactor.netty5.resources.LoopResources getLoopResources(); // Return the configured LoopResources.\n\tboolean isUseGlobalResources(); // Whether this factory exposes the global HttpResources holder.\n\tvoid setConnectionProvider(reactor.netty5.resources.ConnectionProvider connectionProvider); // Use this when you want to provide an externally managed ConnectionProvider instance.\n\tvoid setConnectionProviderSupplier(Supplier<reactor.netty5.resources.ConnectionProvider> supplier); // Use this when you don't want to participate in global resources and you want to customize the creation of the managed ConnectionProvider.\n\tvoid setLoopResources(reactor.netty5.resources.LoopResources loopResources); // Use this option when you want to provide an externally managed LoopResources instance.\n\tvoid setLoopResourcesSupplier(Supplier<reactor.netty5.resources.LoopResources> supplier); // Use this when you don't want to participate in global resources and you want to customize the creation of the managed LoopResources.\n\tvoid setShutdownQuietPeriod(Duration shutdownQuietPeriod); // Configure the amount of time we'll wait before shutting down resources.\n\tvoid setShutdownTimeout(Duration shutdownTimeout); // Configure the maximum amount of time to wait until the disposal of the underlying resources regardless if a task was submitted during the shutdownQuietPeriod.\n\tvoid setUseGlobalResources(boolean useGlobalResources); // Whether to use global Reactor Netty resources via HttpResources.\n}"}
{"index": 7334, "repo": "calcite-core-1.34.0", "des": "Input table has either row semantics or set semantics.", "code": "Enum TableCharacteristic.Semantics {\n\tstatic TableCharacteristic.Semantics valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TableCharacteristic.Semantics[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18037, "repo": "spring-ws-core-4.0.5", "des": "Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.", "code": "public class JaxbElementPayloadMethodProcessor extends AbstractJaxb2PayloadMethodProcessor {\n\tprotected void handleReturnValueInternal(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue);\n\tjakarta.xml.bind.JAXBElement<?> resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tprotected boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n}"}
{"index": 28, "repo": "connect-api-3.5.0", "des": "The type of Converter and HeaderConverter.", "code": "Enum ConverterType {\n\tString getName();\n\tstatic ConverterType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ConverterType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n\tstatic ConverterType withName(String name); // Find the ConverterType with the given name, using a case-insensitive match.\n}"}
{"index": 18657, "repo": "opencms-gwt-15.0", "des": "Sitemap context menu goto parent sitemap entry.", "code": "Class CmsParentSitemapMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 6532, "repo": "exoplayer-core-2.9.6", "des": "Base class for TrackSelectors that first establish a mapping between TrackGroups and Renderers, and then from that mapping create a TrackSelection for each renderer.", "code": "Class MappingTrackSelector {\n\tMappingTrackSelector.MappedTrackInfo getCurrentMappedTrackInfo(); // Returns the mapping information for the currently active track selection, or null if no selection is currently active.\n\tvoid onSelectionActivated(java.lang.Object info); // Called by the player when a TrackSelectorResult previously generated by TrackSelector.selectTracks(RendererCapabilities[], TrackGroupArray) is activated.\n\tprotected abstract android.util.Pair<RendererConfiguration[],TrackSelection[]> selectTracks(MappingTrackSelector.MappedTrackInfo mappedTrackInfo, int[][][] rendererFormatSupports, int[] rendererMixedMimeTypeAdaptationSupport); // Given mapped track information, returns a track selection and configuration for each renderer.\n\tTrackSelectorResult selectTracks(RendererCapabilities[] rendererCapabilities, TrackGroupArray trackGroups); // Called by the player to perform a track selection.\n}"}
{"index": 4171, "repo": "camel-core-3.0.0-RC1", "des": "Represents the concrete Yaml libraries Camel supports.", "code": "Enum YAMLLibrary {\n\tstatic YAMLLibrary valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic YAMLLibrary[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4236, "repo": "jackson-core-2.15.2", "des": "Non-blocking parser implementation for JSON content that takes its input via byte[] passed.", "code": "Class NonBlockingJsonParser {\n\tvoid feedInput(byte[] buf, int start, int end); // Method that can be called to feed more data, if (and only if) NonBlockingInputFeeder.needMoreInput() returns true.\n\tprotected byte getByteFromBuffer(int ptr);\n\tprotected byte getNextSignedByteFromBuffer();\n\tprotected int getNextUnsignedByteFromBuffer();\n\tByteArrayFeeder getNonBlockingInputFeeder(); // Method that will either return a feeder instance (if parser uses non-blocking, aka asynchronous access); or null for parsers that use blocking I/O.\n\tint releaseBuffered(OutputStream out); // Method that can be called to push back any content that has been read but not consumed by the parser.\n}"}
{"index": 11313, "repo": "spring-context-6.0.11", "des": "Configurable bean class that exposes a specific JSR-303 Validator through its original interface as well as through the Spring Validator interface.", "code": "public class CustomValidatorBean extends SpringValidatorAdapter implements Validator, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tvoid setMessageInterpolator(MessageInterpolator messageInterpolator); // Specify a custom MessageInterpolator to use for this Validator.\n\tvoid setTraversableResolver(TraversableResolver traversableResolver); // Specify a custom TraversableResolver to use for this Validator.\n\tvoid setValidatorFactory(ValidatorFactory validatorFactory); // Set the ValidatorFactory to obtain the target Validator from.\n}"}
{"index": 7023, "repo": "calcite-core-1.34.0", "des": "Planner rule that, given a Project node that merely returns its input, converts the node into its child.", "code": "Class ProjectRemoveRule {\n\tboolean autoPruneOld(); // Whether the planner should automatically prune old node when there is at least 1 equivalent rel generated by the rule.\n\tstatic boolean isTrivial(Project project);\n\tvoid onMatch(RelOptRuleCall call); // Receives notification about a rule match.\n\tstatic RelNode strip(Project project); // Returns the child of a project if the project is trivial, otherwise the project itself.\n}"}
{"index": 6859, "repo": "calcite-core-1.34.0", "des": "Implementation of TableModify in enumerable calling convention.", "code": "Class EnumerableTableModify {\n\tRelNode copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tEnumerableRel.Result implement(EnumerableRelImplementor implementor, EnumerableRel.Prefer pref); // Creates a plan for this expression according to a calling convention.\n}"}
{"index": 11529, "repo": "spring-cloud-task-core-3.0.3", "des": "Provides a strategy interface for providing configuration customization to the task system.", "code": "public interface TaskConfigurer {\n\tDataSource getTaskDataSource(); // Retrieves the DataSource that will be used for task operations.\n\tTaskExplorer getTaskExplorer(); // Create a TaskExplorer for the task.\n\tTaskRepository getTaskRepository(); // Create a TaskRepository for the Task.\n\torg.springframework.transaction.PlatformTransactionManager getTransactionManager(); // Create a PlatformTransactionManager for use with the TaskRepository.\n}"}
{"index": 15346, "repo": "spring-boot-3.1.1", "des": "An InitializingBean that initializes a database represented by an R2DBC ConnectionFactory.", "code": "public class R2dbcScriptDatabaseInitializer extends AbstractScriptDatabaseInitializer {\n\tprotected boolean isEmbeddedDatabase(); // Returns whether the database that is to be initialized is embedded.\n\tprotected void runScripts(AbstractScriptDatabaseInitializer.Scripts scripts); // Initialize the database by running the given scripts.\n}"}
{"index": 9419, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by the ApplicationMaster to the NodeManager to start a container.", "code": "Class StartContainerRequest {\n\tabstract ContainerLaunchContext getContainerLaunchContext(); // Get the ContainerLaunchContext for the container to be started by the NodeManager.\n\tabstract Token getContainerToken(); // Get the container token to be used for authorization during starting container.\n\tstatic StartContainerRequest newInstance(ContainerLaunchContext context, Token container);\n\tabstract void setContainerLaunchContext(ContainerLaunchContext context); // Set the ContainerLaunchContext for the container to be started by the NodeManager\n\tabstract void setContainerToken(Token container);\n}"}
{"index": 8004, "repo": "commons-jcs3-core-3.1", "des": "Calls delete expired on the disk caches.", "code": "Class ShrinkerThread {\n\tvoid addDiskCacheToShrinkList(JDBCDiskCache<?,?> diskCache); // Adds a JDBC disk cache to the set of disk cache to shrink.\n\tlong getPauseBetweenRegionCallsMillis(); // How long should we wait between calls to deleteExpired when we are iterating through the list of regions.\n\tvoid run(); // Calls deleteExpired on each item in the set.\n\tvoid setPauseBetweenRegionCallsMillis(long pauseBetweenRegionCallsMillis); // How long should we wait between calls to deleteExpired when we are iterating through the list of regions.\n}"}
{"index": 14889, "repo": "spring-security-acl-6.1.2", "des": "Simple implementation of ObjectIdentity.", "code": "public class ObjectIdentityImpl extends Object implements ObjectIdentity {\n\tboolean equals(Object obj); // Important so caching operates properly.\n\tSerializable getIdentifier(); // Obtains the actual identifier.\n\tString getType(); // Obtains the \"type\" metadata for the domain object.\n}"}
{"index": 9794, "repo": "commons-math3-3.6.1", "des": "Enumerate for the location of a point with respect to the region.", "code": "Enum Region.Location {\n\tstatic Region.Location valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Region.Location[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13655, "repo": "spring-webmvc-6.0.11", "des": "Convenient superclass for many html tags that render content using the databinding features of the AbstractHtmlElementTag.", "code": "public abstract class AbstractHtmlElementBodyTag extends AbstractHtmlElementTag implements BodyTag {\n\tint doEndTag(); // If rendering, flush any buffered BodyContent or, if no BodyContent is supplied, render the default content.\n\tvoid doFinally(); // Clean up any attributes and stored resources.\n\tvoid doInitBody();\n\tprotected void exposeAttributes(); // Called during writeTagContent(org.springframework.web.servlet.tags.form.TagWriter) allowing subclasses to add any attributes to the PageContext as needed.\n\tprotected void flushBufferedBodyContent(BodyContent bodyContent); // The user customised the output of the error messages - flush the buffered content into the main JspWriter.\n\tprotected void onWriteTagContent(); // Called at the start of writeTagContent(org.springframework.web.servlet.tags.form.TagWriter) allowing subclasses to perform any precondition checks or setup tasks that might be necessary.\n\tprotected void removeAttributes(); // Called by doFinally() allowing subclasses to remove any attributes from the PageContext as needed.\n\tprotected abstract void renderDefaultContent(TagWriter tagWriter);\n\tprotected void renderFromBodyContent(BodyContent bodyContent, TagWriter tagWriter); // Render the tag contents based on the supplied BodyContent.\n\tvoid setBodyContent(BodyContent bodyContent);\n\tprotected boolean shouldRender(); // Should rendering of this tag proceed at all.\n\tprotected int writeTagContent(TagWriter tagWriter); // Subclasses should implement this method to perform tag content rendering.\n}"}
{"index": 5848, "repo": "hadoop-yarn-server-common-3.3.6", "des": "The request to Federation state store to delete the mapping of home subcluster of a submitted application.", "code": "Class DeleteApplicationHomeSubClusterRequest {\n\tabstract org.apache.hadoop.yarn.api.records.ApplicationId getApplicationId(); // Get the identifier of the ApplicationId to be removed from Federation state store .\n\tstatic DeleteApplicationHomeSubClusterRequest newInstance(org.apache.hadoop.yarn.api.records.ApplicationId applicationId);\n\tabstract void setApplicationId(org.apache.hadoop.yarn.api.records.ApplicationId applicationId); // Set the identifier of the ApplicationId to be removed from Federation state store .\n}"}
{"index": 2640, "repo": "mahout-core-14.1", "des": "Open hash map from char keys to byte values.", "code": "Class OpenCharByteHashMap {\n\tbyte adjustOrPutValue(char key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(char key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(CharProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(CharByteProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(char key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(char key);\n\tprotected int indexOfKey(char key);\n\tprotected int indexOfValue(byte value);\n\tIterator<OpenCharByteHashMap.MapElement> iterator();\n\tvoid keys(CharArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(CharByteProcedure condition, CharArrayList keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(char key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(char key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 10189, "repo": "spring-core-6.0.11", "des": "Access visibility types as determined by the modifiers on a Member or ResolvableType.", "code": "public static enum AccessControl.Visibility extends Enum<AccessControl.Visibility> {\n\tstatic AccessControl.Visibility valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic AccessControl.Visibility[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13607, "repo": "spring-messaging-6.0.11", "des": "A contract for establishing TCP connections.", "code": "public interface TcpOperations<P> {\n\tdefault org.springframework.util.concurrent.ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler); // Deprecated. as of 6.0, in favor of connectAsync(TcpConnectionHandler)\n\tdefault org.springframework.util.concurrent.ListenableFuture<Void> connect(TcpConnectionHandler<P> connectionHandler, ReconnectStrategy reconnectStrategy); // Deprecated. as of 6.0, in favor of connectAsync(TcpConnectionHandler, ReconnectStrategy)\n\tCompletableFuture<Void> connectAsync(TcpConnectionHandler<P> connectionHandler); // Open a new connection.\n\tCompletableFuture<Void> connectAsync(TcpConnectionHandler<P> connectionHandler, ReconnectStrategy reconnectStrategy); // Open a new connection and a strategy for reconnecting if the connection fails.\n\tdefault org.springframework.util.concurrent.ListenableFuture<Void> shutdown(); // Deprecated. as of 6.0, in favor of shutdownAsync()\n\tCompletableFuture<Void> shutdownAsync(); // Shut down and close any open connections.\n}"}
{"index": 8901, "repo": "hbase-server-3.0.0-alpha-4", "des": "Default StoreEngine creates the default compactor, policy, and store file manager, or their derivatives.", "code": "Class DefaultStoreEngine {\n\tCompactionContext createCompaction(); // Creates an instance of a compaction context specific to this engine.\n\tprotected void createCompactionPolicy(org.apache.hadoop.conf.Configuration conf, HStore store);\n\tprotected void createCompactor(org.apache.hadoop.conf.Configuration conf, HStore store);\n\tprotected void createComponents(org.apache.hadoop.conf.Configuration conf, HStore store, CellComparator kvComparator); // Create the StoreEngine's components.\n\tprotected void createStoreFlusher(org.apache.hadoop.conf.Configuration conf, HStore store);\n\tboolean needsCompaction(List<HStoreFile> filesCompacting);\n}"}
{"index": 6645, "repo": "artemis-odb-2.3.0", "des": "Enum used to cache class type according to their usage in Artemis.", "code": "Enum ClassType {\n\tstatic ClassType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ClassType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14591, "repo": "spring-security-web-6.1.2", "des": "An API to allow changing the method in which the expected CsrfToken is associated to the ServerWebExchange.", "code": "public interface ServerCsrfTokenRepository {\n\treactor.core.publisher.Mono<CsrfToken> generateToken(org.springframework.web.server.ServerWebExchange exchange); // Generates a CsrfToken\n\treactor.core.publisher.Mono<CsrfToken> loadToken(org.springframework.web.server.ServerWebExchange exchange); // Loads the expected CsrfToken from the ServerWebExchange\n\treactor.core.publisher.Mono<Void> saveToken(org.springframework.web.server.ServerWebExchange exchange, CsrfToken token); // Saves the CsrfToken using the ServerWebExchange.\n}"}
{"index": 17163, "repo": "spring-integration-core-6.1.2", "des": "ExpressionSource implementation that accesses resource bundles using specified basenames.", "code": "public class ReloadableResourceBundleExpressionSource extends Object implements ExpressionSource, org.springframework.context.ResourceLoaderAware {\n\tvoid clearCache(); // Clear the resource bundle cache.\n\torg.springframework.expression.Expression getExpression(String key, Locale locale); // Resolves the given key in the retrieved bundle files to an Expression.\n\tvoid setBasename(String basename); // Set a single basename, following the basic ResourceBundle convention of not specifying file extension or language codes, but referring to a Spring resource location: e.g.\n\tvoid setBasenames(String[] basenames); // Set an array of basenames, each following the basic ResourceBundle convention of not specifying file extension or language codes, but referring to a Spring resource location: e.g.\n\tvoid setCacheSeconds(int cacheSeconds); // Set the number of seconds to cache loaded properties files.\n\tvoid setDefaultEncoding(String defaultEncoding); // Set the default charset to use for parsing properties files.\n\tvoid setFallbackToSystemLocale(boolean fallbackToSystemLocale); // Set whether to fall back to the system Locale if no files for a specific Locale have been found.\n\tvoid setFileEncodings(Properties fileEncodings); // Set per-file charsets to use for parsing properties files.\n\tvoid setPropertiesPersister(org.springframework.util.PropertiesPersister propertiesPersister); // Set the PropertiesPersister to use for parsing properties files.\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader); // Set the ResourceLoader to use for loading bundle properties files.\n}"}
{"index": 2619, "repo": "mahout-core-14.1", "des": "A comparison function which imposes a total ordering on some collection of elements.", "code": "Interface FloatComparator {\n\tint compare(float o1, float o2); // Compares its two arguments for order.\n\tboolean equals(Object obj); // Indicates whether some other object is \"equal to\" this Comparator.\n}"}
{"index": 15247, "repo": "spring-boot-3.1.1", "des": "A single configuration property obtained from a ConfigurationPropertySource consisting of a name, value and optional origin.", "code": "public final class ConfigurationProperty extends Object implements OriginProvider, Comparable<ConfigurationProperty> {\n\tint compareTo(ConfigurationProperty other);\n\tboolean equals(Object obj);\n\tConfigurationPropertyName getName(); // Return the name of the configuration property.\n\tOrigin getOrigin(); // Return the source origin or null if the origin is not known.\n\tConfigurationPropertySource getSource(); // Return the ConfigurationPropertySource that provided the property or null if the source is unknown.\n\tObject getValue(); // Return the value of the configuration property.\n}"}
{"index": 13399, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Basic global error @Controller, rendering ErrorAttributes.", "code": "@Controller @RequestMapping(\"${server.error.path:${error.path:/error}}\") public class BasicErrorController extends AbstractErrorController {\n\torg.springframework.http.ResponseEntity<Map<String,Object>> error(jakarta.servlet.http.HttpServletRequest request);\n\torg.springframework.web.servlet.ModelAndView errorHtml(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response);\n\tprotected org.springframework.boot.web.error.ErrorAttributeOptions getErrorAttributeOptions(jakarta.servlet.http.HttpServletRequest request, org.springframework.http.MediaType mediaType);\n\tprotected ErrorProperties getErrorProperties(); // Provide access to the error properties.\n\tprotected boolean isIncludeBindingErrors(jakarta.servlet.http.HttpServletRequest request, org.springframework.http.MediaType produces); // Determine if the errors attribute should be included.\n\tprotected boolean isIncludeMessage(jakarta.servlet.http.HttpServletRequest request, org.springframework.http.MediaType produces); // Determine if the message attribute should be included.\n\tprotected boolean isIncludeStackTrace(jakarta.servlet.http.HttpServletRequest request, org.springframework.http.MediaType produces); // Determine if the stacktrace attribute should be included.\n\torg.springframework.http.ResponseEntity<String> mediaTypeNotAcceptable(jakarta.servlet.http.HttpServletRequest request);\n}"}
{"index": 4561, "repo": "beam-sdks-java-core-2.49.0", "des": "Values<V> takes a PCollection of KV<K, V>s and returns a PCollection<V> of the values.", "code": "Class Values<V> {\n\tstatic <V> Values<V> create(); // Returns a Values<V> PTransform.\n\tPCollection<V> expand(PCollection<? extends KV<?,V>> in); // Override this method to specify how this PTransform should be expanded on the given InputT.\n}"}
{"index": 7451, "repo": "mahout-math-0.13.0", "des": "Implements vector that only stores non-zero doubles as a pair of parallel arrays (OrderedIntDoubleMapping), one int[], one double[].", "code": "Class SequentialAccessSparseVector {\n\tSequentialAccessSparseVector clone(); // Return a copy of the recipient\n\tdouble getIteratorAdvanceCost(); // Gets an estimate of the cost (in number of operations) it takes to advance an iterator through the nonzero elements of this vector.\n\tdouble getLookupCost(); // Gets an estimate of the cost (in number of operations) it takes to lookup a random element in this vector.\n\tint getNumNondefaultElements(); // Return the number of values in the recipient which are not the default value.\n\tint getNumNonZeroElements(); // Return the number of non zero elements in the vector.\n\tdouble getQuick(int index); // Warning! This takes O(log n) time as it does a binary search behind the scenes! Only use it when STRICTLY necessary.\n\tvoid incrementQuick(int index, double increment); // Increment the value at the given index by the given value.\n\tboolean isAddConstantTime(); // Return true iff adding a new (nonzero) element takes constant time for this vector.\n\tboolean isDense(); // true if this implementation should be considered dense -- that it explicitly represents every value\n\tboolean isSequentialAccess(); // true if this implementation should be considered to be iterable in index order in an efficient way.\n\tIterator<Vector.Element> iterateNonZero(); // Iterates over all non-zero elements.\n\tIterator<Vector.Element> iterator(); // Iterates over all elements\n\tSequentialAccessSparseVector like(); // Return an empty vector of the same underlying class as the receiver\n\tVector like(int cardinality); // Return a new empty vector of the same underlying class as the receiver with given cardinality\n\tprotected Matrix matrixLike(int rows, int columns); // Subclasses must override to return an appropriately sparse or dense result\n\tvoid mergeUpdates(OrderedIntDoubleMapping updates); // Merge a set of (index, value) pairs into the vector.\n\tvoid setQuick(int index, double value); // Warning! This takes O(log n) time as it does a binary search behind the scenes! Only use it when STRICTLY necessary.\n}"}
{"index": 6462, "repo": "exoplayer-core-2.9.6", "des": "A SequenceableLoader that encapsulates multiple other SequenceableLoaders.", "code": "Class CompositeSequenceableLoader {\n\tboolean continueLoading(long positionUs); // Attempts to continue loading.\n\tlong getBufferedPositionUs(); // Returns an estimate of the position up to which data is buffered.\n\tlong getNextLoadPositionUs(); // Returns the next load time, or C.TIME_END_OF_SOURCE if loading has finished.\n\tvoid reevaluateBuffer(long positionUs); // Re-evaluates the buffer given the playback position.\n}"}
{"index": 11996, "repo": "jena-core-4.9.0", "des": "Interface through which the current bound values of variables can be found.", "code": "public interface BindingEnvironment {\n\tboolean bind(Node var, Node value); // Bind a variable in the current environment to the given value.\n\tNode getGroundVersion(Node node); // Return the most ground version of the node.\n\tTriple instantiate(TriplePattern pattern); // Instantiate a triple pattern against the current environment.\n}"}
{"index": 6420, "repo": "exoplayer-core-2.9.6", "des": "Extracts data from AAC bit streams with ADTS framing.", "code": "Class AdtsExtractor {\n\tvoid init(ExtractorOutput output); // Initializes the extractor with an ExtractorOutput.\n\tint read(ExtractorInput input, PositionHolder seekPosition); // Extracts data read from a provided ExtractorInput.\n\tvoid release(); // Releases all kept resources.\n\tvoid seek(long position, long timeUs); // Notifies the extractor that a seek has occurred.\n\tboolean sniff(ExtractorInput input); // Returns whether this extractor can extract samples from the ExtractorInput, which must provide data from the start of the stream.\n}"}
{"index": 11978, "repo": "jena-core-4.9.0", "des": "The interface to set the various handlers on ARP.", "code": "public class ARPHandlers extends Object {\n\tstatic ARPHandlers createNewHandlers(); // Internal use only\n\tErrorHandler getErrorHandler(); // Gets the current error handler.\n\tExtendedHandler getExtendedHandler(); // Gets the current extended handler.\n\tNamespaceHandler getNamespaceHandler(); // Gets the current namespace handler.\n\tStatementHandler getStatementHandler(); // Gets the current statement handler.\n\tErrorHandler setErrorHandler(ErrorHandler eh); // Sets the error handler, for both XML and RDF parse errors.\n\tExtendedHandler setExtendedHandler(ExtendedHandler sh); // Sets the ExtendedHandler that provides the callback mechanism for bnodes as they leave scope, and for the start and end of rdf:RDF elements.\n\tNamespaceHandler setNamespaceHandler(NamespaceHandler sh); // Sets the NamespaceHandler that provides the callback mechanism for XML namespace declarations.\n\tStatementHandler setStatementHandler(StatementHandler sh); // Sets the StatementHandler that provides the callback mechanism for each triple in the file.\n}"}
{"index": 16559, "repo": "spring-beans-6.0.11", "des": "Abstract base class for bean definition readers which implement the BeanDefinitionReader interface.", "code": "public abstract class AbstractBeanDefinitionReader extends Object implements BeanDefinitionReader, org.springframework.core.env.EnvironmentCapable {\n\tClassLoader getBeanClassLoader(); // Return the class loader to use for bean classes.\n\tBeanNameGenerator getBeanNameGenerator(); // Return the BeanNameGenerator to use for anonymous beans (without explicit bean name specified).\n\torg.springframework.core.env.Environment getEnvironment();\n\tfinal BeanDefinitionRegistry getRegistry(); // Return the bean factory to register the bean definitions with.\n\torg.springframework.core.io.ResourceLoader getResourceLoader(); // Return the ResourceLoader to use for resource locations.\n\tint loadBeanDefinitions(String location); // Load bean definitions from the specified resource location.\n\tint loadBeanDefinitions(String... locations); // Load bean definitions from the specified resource locations.\n\tint loadBeanDefinitions(String location, Set<org.springframework.core.io.Resource> actualResources); // Load bean definitions from the specified resource location.\n\tint loadBeanDefinitions(org.springframework.core.io.Resource... resources); // Load bean definitions from the specified resources.\n\tvoid setBeanClassLoader(ClassLoader beanClassLoader); // Set the ClassLoader to use for bean classes.\n\tvoid setBeanNameGenerator(BeanNameGenerator beanNameGenerator); // Set the BeanNameGenerator to use for anonymous beans (without explicit bean name specified).\n\tvoid setEnvironment(org.springframework.core.env.Environment environment); // Set the Environment to use when reading bean definitions.\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader); // Set the ResourceLoader to use for resource locations.\n}"}
{"index": 11863, "repo": "spring-kafka-3.0.9", "des": "An error handler which is called when a @KafkaListener method throws an exception.", "code": "@FunctionalInterface public interface KafkaListenerErrorHandler {\n\tObject handleError(org.springframework.messaging.Message<?> message, ListenerExecutionFailedException exception); // Handle the error.\n\tdefault Object handleError(org.springframework.messaging.Message<?> message, ListenerExecutionFailedException exception, org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Handle the error.\n\tdefault Object handleError(org.springframework.messaging.Message<?> message, ListenerExecutionFailedException exception, org.apache.kafka.clients.consumer.Consumer<?,?> consumer, Acknowledgment ack); // Handle the error.\n}"}
{"index": 18099, "repo": "spring-ws-core-4.0.5", "des": "Simple holder class that associates a TransportContext instance with the current thread.", "code": "public abstract class TransportContextHolder extends Object {\n\tstatic TransportContext getTransportContext(); // Return the TransportContext associated with the current thread, if any.\n\tstatic void setTransportContext(TransportContext transportContext); // Associate the given TransportContext with the current thread.\n}"}
{"index": 6689, "repo": "lucene-analyzers-common-8.11.2", "des": "Simple ResourceLoader that uses ClassLoader.", "code": "Class ClasspathResourceLoader {\n\t<T> Class<? extends T> findClass(String cname, Class<T> expectedType); // Finds class of the name and expected type\n\t<T> T newInstance(String cname, Class<T> expectedType); // Creates an instance of the name and expected type\n\tInputStream openResource(String resource); // Opens a named resource\n}"}
{"index": 10664, "repo": "groovy-all-4.0.13", "des": "This enumeration can be used whenever it is preferred to annotate a class as TypeChecked in general, but where only one or more methods are \"dynamic\".", "code": "public enum TypeCheckingMode extends Enum<TypeCheckingMode> {\n\tstatic TypeCheckingMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TypeCheckingMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4779, "repo": "hadoop-common-3.3.4", "des": "DtFetcher is an interface which permits the abstraction and separation of delegation token fetch implementaions across different packages and compilation units.", "code": "Interface DtFetcher {\n\tToken<?> addDelegationTokens(Configuration conf, Credentials creds, String renewer, String url); // Add any number of delegation tokens to Credentials object and return a token instance that is appropriate for aliasing, or null if none.\n\tText getServiceName(); // Return a key used to identify the object/service implementation.\n\tboolean isTokenRequired(); // Used to allow the service API to indicate whether a token is required.\n}"}
{"index": 9529, "repo": "commons-math3-3.6.1", "des": "This class provides computation methods related to Bessel functions of the first kind.", "code": "Class BesselJ {\n\tstatic BesselJ.BesselJResult rjBesl(double x, double alpha, int nb); // Calculates Bessel functions \\(J_{n+alpha}(x)\\) for non-negative argument x, and non-negative order n + alpha.\n\tdouble value(double x); // Returns the value of the constructed Bessel function of the first kind, for the passed argument.\n\tstatic double value(double order, double x); // Returns the first Bessel function, \\(J_{order}(x)\\).\n}"}
{"index": 2056, "repo": "hive-exec-4.0.0-alpha-2", "des": "Trigger with query level scope that contains a name, trigger expression violating which defined action will be executed.", "code": "Class ExecutionTrigger {\n\tboolean apply(long current); // Based on current value, returns true if trigger is applied else false.\n\tTrigger clone(); // Return cloned copy of this trigger\n\tboolean equals(Object other);\n\tstatic ExecutionTrigger fromWMTrigger(org.apache.hadoop.hive.metastore.api.WMTrigger trigger);\n\tAction getAction(); // Return the action that will get executed when trigger expression evaluates to true\n\tExpression getExpression(); // Get trigger expression\n\tString getName(); // Return the name of the trigger\n\tString getViolationMsg(); // Get error message set during trigger violation.\n\tvoid setViolationMsg(String violationMsg); // Set trigger violation message.\n}"}
{"index": 15562, "repo": "spring-batch-core-5.0.2", "des": "Central convenience class for framework use in managing the scope context.", "code": "public abstract class SynchronizationManagerSupport<E,C> extends Object {\n\tvoid close(); // Method for unregistering the current context - should always and only be used by in conjunction with a matching register(Object) to ensure that getContext() always returns the correct value.\n\tprotected abstract void close(C context);\n\tprotected abstract C createNewContext(E execution);\n\tC getContext(); // Getter for the current context if there is one, otherwise returns null.\n\tStack<E> getCurrent();\n\tvoid increment();\n\tC register(E execution); // Register a context with the current thread - always put a matching close() call in a finally block to ensure that the correct context is available in the enclosing block.\n\tvoid release(); // A convenient \"deep\" close operation.\n}"}
{"index": 14273, "repo": "wicket-core-10.0.0-M1", "des": "Component that includes/ renders the import result of an URL, much like JSP include.", "code": "public class Include extends WebComponent implements IGenericComponent<String,Include> {\n\tCharset getCharset();\n\tprotected String importAsString(); // Imports the contents of the url of the model object.\n\tvoid onComponentTagBody(MarkupStream markupStream, ComponentTag openTag); // Processes the body.\n}"}
{"index": 13239, "repo": "spring-test-6.0.11", "des": "An extension of ResponseActions that also implements RequestMatcher and ResponseCreator", "code": "public interface RequestExpectation extends ResponseActions, RequestMatcher, ResponseCreator {\n\tboolean hasRemainingCount(); // Whether there is a remaining count of invocations for this expectation.\n\tvoid incrementAndValidate(); // Increase the matched request count and check we haven't passed the max count.\n\tboolean isSatisfied(); // Whether the requirements for this request expectation have been met.\n}"}
{"index": 2575, "repo": "exoplayer-r2.3.1", "des": "Holds information about a period in a Timeline.", "code": "Class Timeline.Period {\n\tlong getDurationMs(); // Returns the duration of the period in milliseconds, or C.TIME_UNSET if unknown.\n\tlong getDurationUs(); // Returns the duration of this period in microseconds, or C.TIME_UNSET if unknown.\n\tlong getPositionInWindowMs(); // Returns the position of the start of this period relative to the start of the window to which it belongs, in milliseconds.\n\tlong getPositionInWindowUs(); // Returns the position of the start of this period relative to the start of the window to which it belongs, in microseconds.\n\tTimeline.Period set(java.lang.Object id, java.lang.Object uid, int windowIndex, long durationUs, long positionInWindowUs); // Sets the data held by this period.\n}"}
{"index": 7079, "repo": "calcite-core-1.34.0", "des": "Policy by which operands will be matched by relational expressions with any number of children.", "code": "Enum RelOptRuleOperandChildPolicy {\n\tstatic RelOptRuleOperandChildPolicy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic RelOptRuleOperandChildPolicy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 2266, "repo": "hive-exec-4.0.0-alpha-2", "des": "Specifies the mode of copy when using Snapshots for replication.", "code": "Enum SnapshotUtils.SnapshotCopyMode {\n\tstatic SnapshotUtils.SnapshotCopyMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SnapshotUtils.SnapshotCopyMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14914, "repo": "spring-security-test-6.1.2", "des": "Contains Spring Security related MockMvc RequestBuilders.", "code": "public final class SecurityMockMvcRequestBuilders extends Object {\n\tstatic SecurityMockMvcRequestBuilders.FormLoginRequestBuilder formLogin(); // Creates a request (including any necessary CsrfToken) that will submit a form based login to POST \"/login\".\n\tstatic SecurityMockMvcRequestBuilders.FormLoginRequestBuilder formLogin(String loginProcessingUrl); // Creates a request (including any necessary CsrfToken) that will submit a form based login to POST loginProcessingUrl.\n\tstatic SecurityMockMvcRequestBuilders.LogoutRequestBuilder logout(); // Creates a logout request.\n\tstatic SecurityMockMvcRequestBuilders.LogoutRequestBuilder logout(String logoutUrl); // Creates a logout request (including any necessary CsrfToken) to the specified logoutUrl\n}"}
{"index": 6161, "repo": "jackson-databind-2.15.2", "des": "Helper interface implemented by classes that are to be used as null providers during deserialization.", "code": "Interface NullValueProvider {\n\tdefault Object getAbsentValue(DeserializationContext ctxt); // Method called to determine placeholder value to be used for cases where no value was obtained from input but we must pass a value nonetheless: the common case is that of Creator methods requiring passing a value for every parameter.\n\tAccessPattern getNullAccessPattern(); // Accessor that may be used to determine if and when provider must be called to access null replacement value.\n\tObject getNullValue(DeserializationContext ctxt); // Method called to possibly convert incoming `null` token (read via underlying streaming input source) into other value of type accessor supports.\n}"}
{"index": 942, "repo": "ignite-core-2.15.0", "des": "Isolated logic to process cache messages.", "code": "Class IgniteTxHandler {\n\tvoid applyPartitionsUpdatesCounters(Iterable<PartitionUpdateCountersMessage> counters); // Applies partition counter updates for transactions.\n\tvoid applyPartitionsUpdatesCounters(Iterable<PartitionUpdateCountersMessage> counters, boolean rollback, boolean rollbackOnPrimary); // Applies partition counter updates for transactions.\n\t@Nullable List<PartitionUpdateCountersMessage> filterUpdateCountersForBackupNode(IgniteInternalTx tx, ClusterNode node);\n\tprotected void finish(GridDistributedTxRemoteAdapter tx, GridDhtTxPrepareRequest req); // Finish for one-phase distributed tx.\n\t@Nullable IgniteInternalFuture<IgniteInternalTx> finish(UUID nodeId, @Nullable GridNearTxLocal locTx, GridNearTxFinishRequest req);\n\tprotected void finish(UUID nodeId, IgniteTxRemoteEx tx, GridDhtTxFinishRequest req);\n\tIgniteInternalFuture<IgniteInternalTx> finishColocatedLocal(boolean commit, GridNearTxLocal tx);\n\tvoid mvccEnlistBatch(GridDhtTxRemote tx, GridCacheContext ctx, EnlistOperation op, List<KeyCacheObject> keys, List<Message> vals, MvccSnapshot snapshot, IgniteUuid futId, int batchNum); // Writes updated values on the backup node.\n\tIgniteInternalFuture<GridNearTxPrepareResponse> prepareColocatedTx(GridNearTxLocal locTx, GridNearTxPrepareRequest req); // Prepares local colocated tx.\n\tIgniteInternalFuture<GridNearTxPrepareResponse> prepareNearTxLocal(GridNearTxLocal originTx, GridNearTxPrepareRequest req);\n\tprotected void processCheckPreparedTxResponse(UUID nodeId, GridCacheTxRecoveryResponse res);\n}"}
{"index": 9867, "repo": "commons-math3-3.6.1", "des": "A interface for functions that compute a vector of values and can compute their derivatives (Jacobian).", "code": "Interface ValueAndJacobianFunction {\n\tRealMatrix computeJacobian(double[] params); // Compute the Jacobian.\n\tRealVector computeValue(double[] params); // Compute the value.\n}"}
{"index": 4808, "repo": "hadoop-common-3.3.4", "des": "Base class for the HDFS and MR implementations of tools which fetch and display the groups that users belong to.", "code": "Class GetGroupsBase {\n\tprotected abstract InetSocketAddress getProtocolAddress(Configuration conf); // Must be overridden by subclasses to get the address where the GetUserMappingsProtocol implementation is running.\n\tprotected org.apache.hadoop.tools.GetUserMappingsProtocol getUgmProtocol(); // Get a client of the GetUserMappingsProtocol.\n\tint run(String[] args); // Get the groups for the users given and print formatted output to the PrintStream configured earlier.\n}"}
{"index": 9275, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Implementation to use nvidia-docker v1 as GPU docker command plugin.", "code": "Class NvidiaDockerV1CommandPlugin {\n\tDockerVolumeCommand getCleanupDockerVolumesCommand(Container container); // Cleanup volumes created for one docker container\n\tDockerVolumeCommand getCreateDockerVolumeCommand(Container container); // Create volume when needed.\n\tprotected boolean requestsGpu(Container container);\n\tvoid updateDockerRunCommand(DockerRunCommand dockerRunCommand, Container container); // Update docker run command\n}"}
{"index": 13664, "repo": "spring-webmvc-6.0.11", "des": "Abstract superclass for PDF views that operate on an existing document with an AcroForm.", "code": "public abstract class AbstractPdfStamperView extends AbstractUrlBasedView {\n\tprotected boolean generatesDownloadContent(); // Return whether this view generates download content (typically binary content like PDF or Excel files).\n\tprotected abstract void mergePdfDocument(Map<String,Object> model, com.lowagie.text.pdf.PdfStamper stamper, HttpServletRequest request, HttpServletResponse response); // Subclasses must implement this method to merge the PDF form with the given model data.\n\tprotected com.lowagie.text.pdf.PdfReader readPdfResource(); // Read the raw PDF resource into an iText PdfReader.\n\tprotected final void renderMergedOutputModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Subclasses must implement this method to actually render the view.\n}"}
{"index": 91, "repo": "commons-collections4-4.4", "des": "Provides a base decorator that enables additional functionality to be added to a Map via decoration.", "code": "Class AbstractSortedMapDecorator<K,V> {\n\tComparator<? super K> comparator();\n\tprotected SortedMap<K,V> decorated(); // Gets the map being decorated.\n\tK firstKey(); // Gets the first key currently in this map.\n\tSortedMap<K,V> headMap(K toKey);\n\tK lastKey(); // Gets the last key currently in this map.\n\tOrderedMapIterator<K,V> mapIterator(); // Obtains a MapIterator over the map.\n\tK nextKey(K key); // Gets the next key after the one specified.\n\tK previousKey(K key); // Gets the previous key before the one specified.\n\tSortedMap<K,V> subMap(K fromKey, K toKey);\n\tSortedMap<K,V> tailMap(K fromKey);\n}"}
{"index": 6496, "repo": "exoplayer-core-2.9.6", "des": "Parses DVB subtitle data and extracts individual frames.", "code": "Class DvbSubtitleReader {\n\tvoid consume(ParsableByteArray data); // Consumes (possibly partial) data from the current packet.\n\tvoid createTracks(ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator idGenerator); // Initializes the reader by providing outputs and ids for the tracks.\n\tvoid packetFinished(); // Called when a packet ends.\n\tvoid packetStarted(long pesTimeUs, int flags); // Called when a packet starts.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 16197, "repo": "spring-data-cassandra-4.1.2", "des": "Extension of QueryMapper.Field to be backed with mapping metadata.", "code": "protected static class QueryMapper.MetadataBackedField extends QueryMapper.Field {\n\tColumnName getMappedKey(); // Returns the key to be used in the mapped document eventually.\n\tOptional<CassandraPersistentProperty> getProperty(); // Returns the underlying CassandraPersistentProperty backing the field.\n\tQueryMapper.MetadataBackedField with(ColumnName name); // Returns a new QueryMapper.Field with the given name.\n}"}
{"index": 4895, "repo": "hadoop-common-3.3.4", "des": "This class contains a set of methods to work with services, especially to walk them through their lifecycle.", "code": "Class ServiceOperations {\n\tstatic void stop(Service service); // Stop a service.\n\tstatic Exception stopQuietly(org.slf4j.Logger log, Service service); // Stop a service; if it is null do nothing.\n\tstatic Exception stopQuietly(org.apache.commons.logging.Log log, Service service); // Stop a service; if it is null do nothing.\n\tstatic Exception stopQuietly(Service service); // Stop a service; if it is null do nothing.\n}"}
{"index": 1221, "repo": "ignite-core-2.15.0", "des": "The PipelineBlock which appends its input to a user-supplied list.", "code": "Class StrListAppenderBlock {\n\tvoid accept(String[] elements, boolean isLastPortion); // Accepts a portion of input.\n\tvoid output(List<List<Object>> output); // Sets the output list.\n}"}
{"index": 2116, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generic UDF for printf function printf(String format, Obj.", "code": "Class GenericUDFPrintf {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 17905, "repo": "spring-web-6.0.11", "des": "Representation for a Server-Sent Event for use with Spring's reactive Web support.", "code": "public final class ServerSentEvent<T> extends Object {\n\tstatic <T> ServerSentEvent.Builder<T> builder(); // Return a builder for a SseEvent.\n\tstatic <T> ServerSentEvent.Builder<T> builder(T data); // Return a builder for a SseEvent, populated with the given data.\n\tString comment(); // Return the comment of this event, if available.\n\tT data(); // Return the data field of this event, if available.\n\tString event(); // Return the event field of this event, if available.\n\tString id(); // Return the id field of this event, if available.\n\tDuration retry(); // Return the retry field of this event, if available.\n}"}
{"index": 11596, "repo": "spring-security-oauth2-client-6.1.2", "des": "A builder that builds a DelegatingReactiveOAuth2AuthorizedClientProvider composed of one or more ReactiveOAuth2AuthorizedClientProvider(s) that implement specific authorization grants.", "code": "public final class ReactiveOAuth2AuthorizedClientProviderBuilder extends Object {\n\tReactiveOAuth2AuthorizedClientProviderBuilder authorizationCode(); // Configures support for the authorization_code grant.\n\tReactiveOAuth2AuthorizedClientProvider build(); // Builds an instance of DelegatingReactiveOAuth2AuthorizedClientProvider composed of one or more ReactiveOAuth2AuthorizedClientProvider(s).\n\tstatic ReactiveOAuth2AuthorizedClientProviderBuilder builder(); // Returns a new ReactiveOAuth2AuthorizedClientProviderBuilder for configuring the supported authorization grant(s).\n\tReactiveOAuth2AuthorizedClientProviderBuilder clientCredentials(); // Configures support for the client_credentials grant.\n\tReactiveOAuth2AuthorizedClientProviderBuilder clientCredentials(Consumer<ReactiveOAuth2AuthorizedClientProviderBuilder.ClientCredentialsGrantBuilder> builderConsumer); // Configures support for the client_credentials grant.\n\tReactiveOAuth2AuthorizedClientProviderBuilder password(); // Deprecated. The latest OAuth 2.0 Security Best Current Practice disallows the use of the Resource Owner Password Credentials grant.\n\tReactiveOAuth2AuthorizedClientProviderBuilder password(Consumer<ReactiveOAuth2AuthorizedClientProviderBuilder.PasswordGrantBuilder> builderConsumer); // Deprecated. The latest OAuth 2.0 Security Best Current Practice disallows the use of the Resource Owner Password Credentials grant.\n\tReactiveOAuth2AuthorizedClientProviderBuilder provider(ReactiveOAuth2AuthorizedClientProvider provider); // Configures a ReactiveOAuth2AuthorizedClientProvider to be composed with the DelegatingReactiveOAuth2AuthorizedClientProvider.\n\tReactiveOAuth2AuthorizedClientProviderBuilder refreshToken(); // Configures support for the refresh_token grant.\n\tReactiveOAuth2AuthorizedClientProviderBuilder refreshToken(Consumer<ReactiveOAuth2AuthorizedClientProviderBuilder.RefreshTokenGrantBuilder> builderConsumer); // Configures support for the refresh_token grant.\n}"}
{"index": 13865, "repo": "spring-webflux-6.0.11", "des": "No-op resolver for method arguments of type Continuation.", "code": "public class ContinuationHandlerMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, BindingContext bindingContext, org.springframework.web.server.ServerWebExchange exchange); // Resolve the value for the method parameter.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether this resolver supports the given method parameter.\n}"}
{"index": 14852, "repo": "spring-data-commons-3.1.2", "des": "A registry of property specific value convertes that may be used to convert only specific properties/values of an object.", "code": "public class SimplePropertyValueConverterRegistry<P extends PersistentProperty<P>> extends Object implements ValueConverterRegistry<P> {\n\tboolean containsConverterFor(Class<?> type, String path); // Check if a converter is registered for the given type, path combination.\n\t<S, T> PropertyValueConverter<S,T,? extends ValueConversionContext<P>> getConverter(Class<?> type, String path); // Obtain the PropertyValueConverter registered for the given type, path combination or null if none defined.\n\tboolean isEmpty(); // Check if converters are registered.\n\tvoid registerConverter(Class<?> type, String path, PropertyValueConverter<?,?,? extends ValueConversionContext<P>> converter); // Register the PropertyValueConverter for the property of the given type.\n\tvoid registerConverterIfAbsent(Class<?> type, String path, PropertyValueConverter<?,?,? extends ValueConversionContext<P>> converter); // Register the PropertyValueConverter for the property of the given type if none had been registered before.\n\tint size();\n}"}
{"index": 3227, "repo": "hbase-common-3.0.0-alpha-4", "des": "Manages a singleton instance of the environment edge.", "code": "Class EnvironmentEdgeManager {\n\tstatic long currentTime(); // Defers to the delegate and calls the EnvironmentEdge.currentTime() method.\n\tstatic EnvironmentEdge getDelegate(); // Retrieves the singleton instance of the EnvironmentEdge that is being managed.\n\tstatic void injectEdge(EnvironmentEdge edge); // Injects the given edge such that it becomes the managed entity.\n\tstatic void reset(); // Resets the managed instance to the default instance: DefaultEnvironmentEdge.\n}"}
{"index": 10322, "repo": "spring-core-6.0.11", "des": "Handy class for wrapping checked Exceptions with a root cause.", "code": "public abstract class NestedCheckedException extends Exception {\n\tboolean contains(Class<?> exType); // Check whether this exception contains an exception of the given type: either it is of the given class itself or it contains a nested cause of the given type.\n\tThrowable getMostSpecificCause(); // Retrieve the most specific cause of this exception, that is, either the innermost cause (root cause) or this exception itself.\n\tThrowable getRootCause(); // Retrieve the innermost cause of this exception, if any.\n}"}
{"index": 9058, "repo": "hbase-server-3.0.0-alpha-4", "des": "Defines coprocessor hooks for interacting with operations on the HRegionServer process.", "code": "Interface RegionServerObserver {\n\tdefault void postClearCompactionQueues(ObserverContext<RegionServerCoprocessorEnvironment> ctx); // This will be called after clearing compaction queues\n\tdefault ReplicationEndpoint postCreateReplicationEndPoint(ObserverContext<RegionServerCoprocessorEnvironment> ctx, ReplicationEndpoint endpoint); // This will be called after the replication endpoint is instantiated.\n\tdefault void postExecuteProcedures(ObserverContext<RegionServerCoprocessorEnvironment> ctx); // This will be called after executing procedures\n\tdefault void postReplicationSinkBatchMutate(ObserverContext<RegionServerCoprocessorEnvironment> ctx, org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.WALEntry walEntry, Mutation mutation); // This will be called after replication sink mutations are executed on the sink table as part of batch call.\n\tdefault void postRollWALWriterRequest(ObserverContext<RegionServerCoprocessorEnvironment> ctx); // This will be called after executing user request to roll a region server WAL.\n\tdefault void preClearCompactionQueues(ObserverContext<RegionServerCoprocessorEnvironment> ctx); // This will be called before clearing compaction queues\n\tdefault void preExecuteProcedures(ObserverContext<RegionServerCoprocessorEnvironment> ctx); // This will be called before executing procedures\n\tdefault void preReplicationSinkBatchMutate(ObserverContext<RegionServerCoprocessorEnvironment> ctx, org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos.WALEntry walEntry, Mutation mutation); // This will be called before replication sink mutations are executed on the sink table as part of batch call.\n\tdefault void preRollWALWriterRequest(ObserverContext<RegionServerCoprocessorEnvironment> ctx); // This will be called before executing user request to roll a region server WAL.\n\tdefault void preStopRegionServer(ObserverContext<RegionServerCoprocessorEnvironment> ctx); // Called before stopping region server.\n}"}
{"index": 13094, "repo": "spring-aop-6.0.11", "des": "Convenient class for regexp method pointcuts that hold an Advice, making them an Advisor.", "code": "public class RegexpMethodPointcutAdvisor extends AbstractGenericPointcutAdvisor {\n\tprotected AbstractRegexpMethodPointcut createPointcut(); // Create the actual pointcut: By default, a JdkRegexpMethodPointcut will be used.\n\tPointcut getPointcut(); // Initialize the singleton Pointcut held within this Advisor.\n\tvoid setPattern(String pattern); // Set the regular expression defining methods to match.\n\tvoid setPatterns(String... patterns); // Set the regular expressions defining methods to match.\n}"}
{"index": 7466, "repo": "mahout-math-0.13.0", "des": "If f(0, y) = 0, the zeros in x don't matter and we can simply iterate through the nonzeros of x.", "code": "Class VectorBinaryAssign.AssignNonzerosIterateThisLookupThat {\n\tVector assign(Vector x, Vector y, DoubleDoubleFunction f); // Main method that applies f to x and y component-wise assigning the results to x.\n\tdouble estimateCost(Vector x, Vector y, DoubleDoubleFunction f); // Estimates the cost of using this algorithm to compute the assignment.\n\tboolean isValid(Vector x, Vector y, DoubleDoubleFunction f); // Returns true iff we can use this algorithm to apply f to x and y component-wise and assign the result to x.\n}"}
{"index": 3782, "repo": "hbase-client-3.0.0-alpha-4", "des": "Used to suspend or stop a scan, or get a scan cursor if available.", "code": "Interface AdvancedScanResultConsumer.ScanController {\n\tOptional<Cursor> cursor(); // Get the scan cursor if available.\n\tAdvancedScanResultConsumer.ScanResumer suspend(); // Suspend the scan.\n\tvoid terminate(); // Terminate the scan.\n}"}
{"index": 7862, "repo": "cassandra-all-4.1.2", "des": "An unfiltered row iterator with a lower bound retrieved from either the global sstable statistics or the row index lower bounds (if available in the cache).", "code": "Class UnfilteredRowIteratorWithLowerBound {\n\tRegularAndStaticColumns columns(); // A subset of the columns for the (static and regular) rows returned by this iterator.\n\tprotected Unfiltered computeNext();\n\tprotected UnfilteredRowIterator initializeIterator();\n\tboolean isReverseOrder(); // Whether or not the rows returned by this iterator are in reversed clustering order.\n\tUnfiltered lowerBound();\n\tTableMetadata metadata(); // The metadata for the table this iterator on.\n\tDeletionTime partitionLevelDeletion(); // The partition level deletion for the partition this iterate over.\n\tRow staticRow(); // The static part corresponding to this partition (this can be an empty row but cannot be null).\n\tEncodingStats stats(); // Return \"statistics\" about what is returned by this iterator.\n}"}
{"index": 6666, "repo": "artemis-odb-2.3.0", "des": "A system that processes entities at a interval in milliseconds.", "code": "Class IntervalEntitySystem {\n\tprotected boolean checkProcessing(); // Does the system desire processing.\n\tprotected float getIntervalDelta(); // Gets the actual delta since this system was last processed.\n\tprotected float getTimeDelta();\n}"}
{"index": 265, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns true the first time an object is passed into the predicate.", "code": "Class UniquePredicate<T> {\n\tboolean evaluate(T object); // Evaluates the predicate returning true if the input object hasn't been received yet.\n\tstatic <T> Predicate<T> uniquePredicate(); // Factory to create the predicate.\n}"}
{"index": 2472, "repo": "exoplayer-r2.3.1", "des": "A SubtitleDecoder for CEA-608 (also known as \"line 21 captions\" and \"EIA-608\").", "code": "Class Cea608Decoder {\n\tprotected Subtitle createSubtitle(); // Creates a Subtitle from the available data.\n\tprotected void decode(SubtitleInputBuffer inputBuffer); // Filters and processes the raw data, providing Subtitles via createSubtitle() when sufficient data has been processed.\n\tSubtitleInputBuffer dequeueInputBuffer(); // Dequeues the next input buffer to be filled and queued to the decoder.\n\tSubtitleOutputBuffer dequeueOutputBuffer(); // Dequeues the next output buffer from the decoder.\n\tvoid flush(); // Flushes the decoder.\n\tjava.lang.String getName(); // Returns the name of the decoder.\n\tprotected boolean isNewSubtitleDataAvailable(); // Returns whether there is data available to create a new Subtitle.\n\tvoid queueInputBuffer(SubtitleInputBuffer inputBuffer); // Queues an input buffer to the decoder.\n\tvoid release(); // Releases the decoder.\n\tprotected void releaseOutputBuffer(SubtitleOutputBuffer outputBuffer);\n\tvoid setPositionUs(long positionUs); // Informs the decoder of the current playback position.\n}"}
{"index": 8959, "repo": "hbase-server-3.0.0-alpha-4", "des": "Objects from this class are created when flushing to describe all the different states that that method ends up in.", "code": "Class HRegion.FlushResultImpl {\n\tHRegion.FlushResult.Result getResult(); // Returns the detailed result code\n\tboolean isCompactionNeeded(); // Convenience method, the equivalent of checking if result is FLUSHED_COMPACTION_NEEDED.\n\tboolean isFlushSucceeded(); // Convenience method, the equivalent of checking if result is FLUSHED_NO_COMPACTION_NEEDED or FLUSHED_NO_COMPACTION_NEEDED.\n}"}
{"index": 17481, "repo": "spring-cloud-openfeign-core-3.1.8", "des": "Enumeration of pool concurrency policies.", "code": "public static enum FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy extends Enum<FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy> {\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FeignHttpClientProperties.Hc5Properties.PoolConcurrencyPolicy[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18536, "repo": "hibernate-core-5.6.15.Final", "des": "Models the source-agnostic view of an entity hierarchy.", "code": "Interface EntityHierarchySource {\n\tCaching getCaching(); // Obtain the caching configuration for this entity.\n\tDiscriminatorSource getDiscriminatorSource(); // Obtain the source information about the discriminator attribute for single table inheritance\n\tEntityMode getEntityMode(); // Obtain the entity mode for this entity.\n\tInheritanceType getHierarchyInheritanceType(); // The inheritance type/strategy for the hierarchy.\n\tIdentifierSource getIdentifierSource(); // Obtain source information about this entity's identifier.\n\tMultiTenancySource getMultiTenancySource(); // Obtain the source information about the multi-tenancy discriminator for this entity\n\tCaching getNaturalIdCaching(); // Obtain the natural id caching configuration for this entity.\n\tOptimisticLockStyle getOptimisticLockStyle(); // Obtain the optimistic locking style for this entity.\n\tEntitySource getRoot(); // Obtain the hierarchy's root type source.\n\tjava.lang.String getRowId(); // Obtain the row-id name for this entity\n\tVersionAttributeSource getVersionAttributeSource(); // Obtain the source information about the attribute used for optimistic locking.\n\tjava.lang.String getWhere(); // Obtain the specified extra where condition to be applied to this entity.\n\tboolean isExplicitPolymorphism(); // Should explicit polymorphism (querying) be applied to this entity?\n\tboolean isMutable(); // Is this root entity mutable?\n}"}
{"index": 15187, "repo": "spring-boot-3.1.1", "des": "ReactiveWebServerApplicationContext that accepts annotated classes as input - in particular @Configuration-annotated classes, but also plain @Component classes and JSR-330 compliant classes using javax.inject annotations.", "code": "public class AnnotationConfigReactiveWebServerApplicationContext extends ReactiveWebServerApplicationContext implements org.springframework.context.annotation.AnnotationConfigRegistry {\n\tprotected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\tprotected void prepareRefresh();\n\tfinal void register(Class<?>... annotatedClasses); // Register one or more annotated classes to be processed.\n\tfinal void scan(String... basePackages); // Perform a scan within the specified base packages.\n\tvoid setBeanNameGenerator(org.springframework.beans.factory.support.BeanNameGenerator beanNameGenerator); // Provide a custom BeanNameGenerator for use with AnnotatedBeanDefinitionReader and/or ClassPathBeanDefinitionScanner, if any.\n\tvoid setEnvironment(org.springframework.core.env.ConfigurableEnvironment environment);\n\tvoid setScopeMetadataResolver(org.springframework.context.annotation.ScopeMetadataResolver scopeMetadataResolver); // Set the ScopeMetadataResolver to use for detected bean classes.\n}"}
{"index": 12668, "repo": "spring-data-mongodb-4.1.2", "des": "Primary-strength Collation.ICUComparisonLevel.", "code": "public static class Collation.PrimaryICUComparisonLevel extends Object {\n\tCollation.ComparisonLevel excludeCase(); // Exclude case comparison.\n\tOptional<Collation.CaseFirst> getCaseFirst();\n\tOptional<Boolean> getCaseLevel();\n\tint getLevel();\n\tCollation.ComparisonLevel includeCase(); // Include case comparison.\n}"}
{"index": 4353, "repo": "beam-sdks-java-core-2.49.0", "des": "An abstract class used for iterables that notify observers about size in bytes of their elements, as they are being iterated over.", "code": "Class ElementByteSizeObservableIterable<V,InputT extends ElementByteSizeObservableIterator<V>> {\n\tvoid addObserver(java.util.Observer observer); // Sets the observer, which will observe the iterator returned in the next call to iterator() method.\n\tprotected abstract InputT createIterator(); // Derived classes override this method to return an iterator for this iterable.\n\tInputT iterator(); // Returns a new iterator for this iterable.\n}"}
{"index": 2878, "repo": "amqp-client-5.18.0", "des": "Public interface to objects representing an AMQP 0-9-1 method.", "code": "Interface Method {\n\tint protocolClassId(); // Retrieve the protocol class ID\n\tint protocolMethodId(); // Retrieve the protocol method ID\n\tString protocolMethodName(); // Retrieve the method name\n}"}
{"index": 3352, "repo": "spring-social-core-1.1.6.RELEASE", "des": "Builds up a URI from individual URI components.", "code": "Class URIBuilder {\n\tjava.net.URI build(); // Builds the URI\n\tstatic URIBuilder fromUri(java.lang.String baseUri); // Creates a URIBuilder with a base URI string as the starting point\n\tstatic URIBuilder fromUri(java.net.URI baseUri); // Creates a URIBuilder with a base URI string as the starting point\n\tURIBuilder queryParam(java.lang.String name, java.lang.String value); // Adds a query parameter to the URI\n\tURIBuilder queryParams(org.springframework.util.MultiValueMap<java.lang.String,java.lang.String> params); // Adds a query parameters to the URI\n}"}
{"index": 2761, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "A tool to replay WAL files as a M/R job.", "code": "Class WALPlayer {\n\torg.apache.hadoop.mapreduce.Job createSubmittableJob(String[] args); // Sets up the actual job.\n\tstatic void main(String[] args); // Main entry point.\n\tint run(String[] args);\n}"}
{"index": 8358, "repo": "hive-common-4.0.0-alpha-2", "des": "Enum to represent a level of backward compatibility support.", "code": "Enum HiveCompat.CompatLevel {\n\tstatic HiveCompat.CompatLevel valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HiveCompat.CompatLevel[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12833, "repo": "spring-data-mongodb-4.1.2", "des": "Upload descriptor for a GridFS file upload.", "code": "public class ReactiveGridFsUpload<ID> extends Object implements GridFsObject<ID,org.reactivestreams.Publisher<DataBuffer>> {\n\tstatic ReactiveGridFsUpload.ReactiveGridFsUploadBuilder<org.bson.types.ObjectId> fromPublisher(org.reactivestreams.Publisher<DataBuffer> source); // Create a new instance of ReactiveGridFsUpload for the given Publisher.\n\torg.reactivestreams.Publisher<DataBuffer> getContent(); // The actual file content.\n\tID getFileId(); // The GridFSFile.getId() value converted into its simple java type.\n\tString getFilename(); // The filename.\n\tGridFsObject.Options getOptions(); // Additional information like file metadata (eg. contentType).\n}"}
{"index": 14562, "repo": "spring-security-web-6.1.2", "des": "Performs a redirect to a specified location.", "code": "public class RedirectServerAuthenticationEntryPoint extends Object implements ServerAuthenticationEntryPoint {\n\treactor.core.publisher.Mono<Void> commence(org.springframework.web.server.ServerWebExchange exchange, org.springframework.security.core.AuthenticationException ex); // Initiates the authentication flow\n\tvoid setRedirectStrategy(ServerRedirectStrategy redirectStrategy); // Sets the RedirectStrategy to use.\n\tvoid setRequestCache(ServerRequestCache requestCache); // The request cache to use to save the request before sending a redirect.\n}"}
{"index": 7516, "repo": "cassandra-all-4.1.2", "des": "wrapper to expose audit events as DiagnosticEvents.", "code": "Class AuditEvent {\n\tAuditLogEntry getEntry();\n\tjava.lang.String getSource();\n\tjava.lang.Enum<?> getType(); // Returns event type discriminator.\n\tjava.util.Map<java.lang.String,java.io.Serializable> toMap(); // Returns map of key-value pairs containing relevant event details.\n}"}
{"index": 5477, "repo": "druid-processing-26.0.0", "des": "The data source for representing an unnest operation.", "code": "Class UnnestDataSource {\n\tstatic UnnestDataSource create(DataSource base, VirtualColumn virtualColumn, DimFilter unnestFilter);\n\tFunction<SegmentReference,SegmentReference> createSegmentMapFunction(Query query, AtomicLong cpuTimeAccumulator); // Returns a segment function on to how to segment should be modified.\n\tboolean equals(Object o);\n\tDataSourceAnalysis getAnalysis(); // Get the analysis for a data source\n\tDataSource getBase();\n\tbyte[] getCacheKey(); // Compute a cache key prefix for a data source.\n\tList<DataSource> getChildren(); // Returns datasources that this datasource depends on.\n\tSet<String> getTableNames(); // Returns the names of all table datasources involved in this query.\n\tDimFilter getUnnestFilter();\n\tVirtualColumn getVirtualColumn();\n\tboolean isCacheable(boolean isBroker); // Returns true if queries on this dataSource are cacheable at both the result level and per-segment level.\n\tboolean isConcrete(); // Returns true if this datasource represents concrete data that can be scanned via a Segment adapter of some kind.\n\tboolean isGlobal(); // Returns true if all servers have a full copy of this datasource.\n\tDataSource withChildren(List<DataSource> children); // Return a new DataSource, identical to this one, with different children.\n\tDataSource withUpdatedDataSource(DataSource newSource); // Returns an updated datasource based on the specified new source.\n}"}
{"index": 3544, "repo": "mahout-mr-0.13.0", "des": "Like PearsonCorrelationSimilarity, but compares relative ranking of preference values instead of preference values themselves.", "code": "Class SpearmanCorrelationSimilarity {\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n\tvoid setPreferenceInferrer(PreferenceInferrer inferrer); // Attaches a PreferenceInferrer to the UserSimilarity implementation.\n\tdouble userSimilarity(long userID1, long userID2); // Returns the degree of similarity, of two users, based on the their preferences.\n}"}
{"index": 17782, "repo": "spring-web-6.0.11", "des": "Represents an HTTP response status code.", "code": "public sealed interface HttpStatusCode extends Serializable permits HttpStatus (not exhaustive) {\n\tboolean is1xxInformational(); // Whether this status code is in the Informational class (1xx).\n\tboolean is2xxSuccessful(); // Whether this status code is in the Successful class (2xx).\n\tboolean is3xxRedirection(); // Whether this status code is in the Redirection class (3xx).\n\tboolean is4xxClientError(); // Whether this status code is in the Client Error class (4xx).\n\tboolean is5xxServerError(); // Whether this status code is in the Server Error class (5xx).\n\tboolean isError(); // Whether this status code is in the Client or Server Error class\n\tdefault boolean isSameCodeAs(HttpStatusCode other); // Whether this HttpStatusCode shares the same integer value as the other status code.\n\tint value(); // Return the integer value of this status code.\n\tstatic HttpStatusCode valueOf(int code); // Return an HttpStatusCode object for the given integer value.\n}"}
{"index": 75, "repo": "commons-collections4-4.4", "des": "Abstract implementation of the ListValuedMap interface to simplify the creation of subclass implementations.", "code": "Class AbstractListValuedMap<K,V> {\n\tprotected abstract List<V> createCollection(); // Creates a new value collection using the provided factory.\n\tList<V> get(K key); // Gets the list of values associated with the specified key.\n\tprotected Map<K,List<V>> getMap(); // Gets the map being wrapped.\n\tList<V> remove(Object key); // Removes all values associated with the specified key.\n}"}
{"index": 15943, "repo": "spring-rabbit-3.0.6", "des": "MessageRecoverer implementation that republishes recovered messages to a specified exchange with the exception stack trace stored in the message header x-exception.", "code": "public class RepublishMessageRecoverer extends Object implements MessageRecoverer {\n\tprotected Map<? extends String,?> additionalHeaders(org.springframework.amqp.core.Message message, Throwable cause); // Subclasses can override this method to add more headers to the republished message.\n\tprotected void doSend(String exchange, String routingKey, org.springframework.amqp.core.Message message); // Send the message.\n\tRepublishMessageRecoverer errorRoutingKeyPrefix(String errorRoutingKeyPrefix); // Apply a prefix to the outbound routing key, which will be prefixed to the original message routing key (if no explicit routing key was provided in the constructor; ignored otherwise.\n\tRepublishMessageRecoverer frameMaxHeadroom(int headroom); // Set the amount by which the negotiated frame_max is to be reduced when considering truncating the stack trace header.\n\tprotected org.springframework.amqp.core.MessageDeliveryMode getDeliveryMode();\n\tprotected String getErrorRoutingKeyPrefix();\n\tprotected String getStackTraceAsString(Throwable cause); // Create a String representation of the stack trace.\n\tprotected String prefixedOriginalRoutingKey(org.springframework.amqp.core.Message message); // The default behavior of this method is to append the received routing key to the routingKeyPrefix.\n\tvoid recover(org.springframework.amqp.core.Message message, Throwable cause); // Callback for message that was consumed but failed all retry attempts.\n\tvoid setDeliveryMode(org.springframework.amqp.core.MessageDeliveryMode deliveryMode); // Specify a MessageDeliveryMode to set into the message to republish if the message doesn't have it already.\n\tvoid setErrorRoutingKeyPrefix(String errorRoutingKeyPrefix);\n}"}
{"index": 15844, "repo": "camel-api-4.0.0-RC1", "des": "A route configurations builder is capable of building route configurations using the builder and model classes.", "code": "public interface RouteConfigurationsBuilder {\n\tvoid addRouteConfigurationsToCamelContext(CamelContext context); // Adds the route configurations from this builder to the CamelContext.\n\tvoid updateRouteConfigurationsToCamelContext(CamelContext context); // Adds or updates the route configurations from this builder to the CamelContext.\n}"}
{"index": 3956, "repo": "spring-cloud-commons-parent-1.1.9.RELEASE", "des": "DiscoveryClient represents operations commonly available to Discovery service such as Netflix Eureka or consul.", "code": "Interface DiscoveryClient {\n\tString description(); // A human readable description of the implementation, used in HealthIndicator\n\tList<ServiceInstance> getInstances(String serviceId); // Get all ServiceInstances associated with a particular serviceId\n\tServiceInstance getLocalServiceInstance();\n\tList<String> getServices();\n}"}
{"index": 6908, "repo": "calcite-core-1.34.0", "des": "Implementation of the RelMetadataProvider interface that generates a class that dispatches to the underlying providers.", "code": "Class JaninoRelMetadataProvider {\n\tstatic void clearStaticCache();\n\tboolean equals(@Nullable Object obj);\n\t<MH extends MetadataHandler<?>>MH handler(Class<MH> handlerClass); // Provide a handler for the requested metadata class.\n\tList<MetadataHandler<?>> handlers(Class<? extends MetadataHandler<?>> handlerClass); // Retrieves a list of MetadataHandler for implements a particular MetadataHandler.class.\n\tstatic JaninoRelMetadataProvider of(RelMetadataProvider provider); // Creates a JaninoRelMetadataProvider.\n\t<H extends MetadataHandler<?>>H revise(Class<H> handlerClass); // Revise the handler for a given kind of metadata.\n}"}
{"index": 522, "repo": "ignite-core-2.15.0", "des": "A special FieldsQueryCursor subclass that is used as a sentinel to transfer data from bulk load (COPY) command to the JDBC or other client-facing driver: the bulk load batch processor and parameters to send to the client.", "code": "Class BulkLoadContextCursor {\n\tBulkLoadProcessor bulkLoadProcessor(); // Returns a bulk load context.\n\tBulkLoadAckClientParameters clientParams(); // Returns the bulk load parameters to send to the client.\n\tvoid close(); // Closes all resources related to this cursor.\n\tList<List<?>> getAll(); // Gets all query results and stores them in the collection.\n\tint getColumnsCount(); // Gets number of columns in a row.\n\tString getFieldName(int idx); // Gets field name.\n\t@NotNull Iterator<List<?>> iterator();\n}"}
{"index": 17787, "repo": "spring-web-6.0.11", "des": "Extension of HandlerMethod that invokes the underlying method with argument values resolved from the current HTTP request through a list of HandlerMethodArgumentResolver.", "code": "public class InvocableHandlerMethod extends HandlerMethod {\n\tprotected Object doInvoke(Object... args); // Invoke the handler method with the given argument values.\n\tprotected Object[] getMethodArgumentValues(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs); // Get the method argument values for the current request, checking the provided argument values and falling back to the configured argument resolvers.\n\tObject invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs); // Invoke the method after resolving its argument values in the context of the given request.\n\tprotected Object invokeSuspendingFunction(Method method, Object target, Object[] args); // Invoke the given Kotlin coroutine suspended function.\n\tvoid setDataBinderFactory(WebDataBinderFactory dataBinderFactory); // Set the WebDataBinderFactory to be passed to argument resolvers allowing them to create a WebDataBinder for data binding and type conversion purposes.\n\tvoid setHandlerMethodArgumentResolvers(HandlerMethodArgumentResolverComposite argumentResolvers); // Set HandlerMethodArgumentResolvers to use for resolving method argument values.\n\tvoid setParameterNameDiscoverer(org.springframework.core.ParameterNameDiscoverer parameterNameDiscoverer); // Set the ParameterNameDiscoverer for resolving parameter names when needed (e.g.\n}"}
{"index": 7498, "repo": "cassandra-all-4.1.2", "des": "An endpoint snitch tells Cassandra information about network topology that it can use to route requests more efficiently.", "code": "Class AbstractNetworkTopologySnitch {\n\tint compareEndpoints(InetAddressAndPort address, Replica r1, Replica r2); // compares two endpoints in relation to the target endpoint, returning as Comparator.compare would\n\tabstract java.lang.String getDatacenter(InetAddressAndPort endpoint); // Return the data center for which an endpoint resides in\n\tabstract java.lang.String getRack(InetAddressAndPort endpoint); // Return the rack for which an endpoint resides in\n}"}
{"index": 18476, "repo": "opencms-core-15.0", "des": "Provides access to a I_CmsXmlDocument document that was previously loaded by a parent tag.", "code": "Interface I_CmsXmlContentContainer {\n\tI_CmsXmlDocument getXmlDocument(); // Returns the currently loaded OpenCms XML content document.\n\tjava.lang.String getXmlDocumentElement(); // Returns the currently selected element name in the loaded XML content document.\n\tjava.util.Locale getXmlDocumentLocale(); // Returns the currently selected locale used for acessing the content in the loaded XML content document.\n}"}
{"index": 6327, "repo": "mina-core-3.0.0-M2", "des": "A network server bound to a local address.", "code": "Interface IoServer {\n\tvoid bind(int port); // Binds the server to the specified port.\n\tvoid bind(SocketAddress localAddress); // Binds to the specified local addresses and start to accept incoming connections.\n\tSocketAddress getBoundAddress(); // Returns the local addresses which are bound currently.\n\tvoid unbind(); // Unbinds from the local addresses that this service is bound to and stops to accept incoming connections.\n}"}
{"index": 3518, "repo": "mahout-mr-0.13.0", "des": "This class implements a \"manhattan distance\" metric by summing the absolute values of the difference between each coordinate.", "code": "Class ManhattanDistanceMeasure {\n\tvoid configure(org.apache.hadoop.conf.Configuration job);\n\tvoid createParameters(String prefix, org.apache.hadoop.conf.Configuration jobConf); // EXPERT: consumers should never have to call this method.\n\tstatic double distance(double[] p1, double[] p2);\n\tdouble distance(double centroidLengthSquare, Vector centroid, Vector v); // Optimized version of distance metric for sparse vectors.\n\tdouble distance(Vector v1, Vector v2); // Returns the distance metric applied to the arguments\n\tCollection<Parameter<?>> getParameters();\n}"}
{"index": 4941, "repo": "commons-collections-3.2.2", "des": "Abstract implementation of the Bag interface to simplify the creation of subclass implementations.", "code": "Class AbstractMapBag {\n\tboolean add(Object object); // Adds a new element to the bag, incrementing its count in the underlying map.\n\tboolean add(Object object, int nCopies); // Adds a new element to the bag, incrementing its count in the map.\n\tboolean addAll(Collection coll); // Invokes add(Object) for each element in the given collection.\n\tvoid clear(); // Clears the bag by clearing the underlying map.\n\tboolean contains(Object object); // Determines if the bag contains the given element by checking if the underlying map contains the element as a key.\n\tboolean containsAll(Collection coll); // Determines if the bag contains the given elements.\n\tprotected void doReadObject(Map map, ObjectInputStream in); // Read the map in using a custom routine.\n\tprotected void doWriteObject(ObjectOutputStream out); // Write the map out using a custom routine.\n\tboolean equals(Object object); // Compares this Bag to another.\n\tint getCount(Object object); // Returns the number of occurrence of the given element in this bag by looking up its count in the underlying map.\n\tprotected Map getMap(); // Utility method for implementations to access the map that backs this bag.\n\tboolean isEmpty(); // Returns true if the underlying map is empty.\n\tIterator iterator(); // Gets an iterator over the bag elements.\n\tboolean remove(Object object); // Removes all copies of the specified object from the bag.\n\tboolean remove(Object object, int nCopies); // Removes a specified number of copies of an object from the bag.\n\tboolean removeAll(Collection coll); // Removes objects from the bag according to their count in the specified collection.\n\tboolean retainAll(Collection coll); // Remove any members of the bag that are not in the given bag, respecting cardinality.\n\tint size(); // Returns the number of elements in this bag.\n\tObject[] toArray(); // Returns an array of all of this bag's elements.\n\tObject[] toArray(Object[] array); // Returns an array of all of this bag's elements.\n\tSet uniqueSet(); // Returns an unmodifiable view of the underlying map's key set.\n}"}
{"index": 3069, "repo": "tink-1.10.0", "des": "Represents a public key for the RSA SSA PKCS1 signature primitive.", "code": "Class RsaSsaPkcs1PublicKey {\n\tstatic RsaSsaPkcs1PublicKey.Builder builder();\n\tboolean equalsKey(Key o); // Returns true if the key is guaranteed to be equal to other.\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tBigInteger getModulus(); // Returns the underlying key bytes.\n\tBytes getOutputPrefix(); // Returns a Bytes instance which is prefixed to every signature.\n\tRsaSsaPkcs1Parameters getParameters(); // Returns the parameters of this key.\n}"}
{"index": 14442, "repo": "wicket-core-10.0.0-M1", "des": "The track tag is used to provide subtitles, captions, descriptions, chapters, metadata to a video media component", "code": "public class Track extends WebMarkupContainer {\n\tTrack.Kind getKind(); // Gets the kind of the track belongs to the media component\n\tString getLabel(); // The label for this track\n\torg.apache.wicket.request.mapper.parameter.PageParameters getPageParameters(); // Gets the page parameter applied to the URL of the track\n\tLocale getSrclang(); // Gets the src lang\n\tboolean isDefaultTrack(); // If the track is the default track\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tvoid setDefaultTrack(Boolean defaultTrack); // Sets if this track is the default track\n\tvoid setKind(Track.Kind kind); // Sets the kind of the track belongs to the media component SUBTITLES: Transcription or translation of the dialogue, suitable for when the sound is available but not understood (e.g.\n\tvoid setLabel(String label); // Sets the label for this track\n\tvoid setPageParameters(org.apache.wicket.request.mapper.parameter.PageParameters pageParameters); // Sets the page parameter applied to the URL of the track\n\tvoid setSrclang(Locale srclang); // Sets the src lang\n}"}
{"index": 16840, "repo": "spring-amqp-3.0.6", "des": "Base class for post processors based on Deflater.", "code": "public abstract class AbstractDeflaterPostProcessor extends AbstractCompressingPostProcessor {\n\tint getLevel(); // Get the deflater compression level.\n\tvoid setLevel(int level); // Set the deflater compression level.\n}"}
{"index": 7719, "repo": "cassandra-all-4.1.2", "des": "PATRICIA Trie Practical Algorithm to Retrieve Information Coded in Alphanumeric A PATRICIA Trie is a compressed Trie.", "code": "Class PatriciaTrie<K,V> {\n\tvoid clear();\n\tjava.util.Comparator<? super K> comparator();\n\tboolean containsKey(java.lang.Object k);\n\tjava.util.Set<java.util.Map.Entry<K,V>> entrySet();\n\tK firstKey();\n\tV get(java.lang.Object k);\n\tjava.util.SortedMap<K,V> headMap(K toKey);\n\tjava.util.Set<K> keySet();\n\tK lastKey();\n\tjava.util.SortedMap<K,V> prefixMap(K prefix); // Returns a view of this Trie of all elements that are prefixed by the given key.\n\tV put(K key, V value);\n\tV remove(java.lang.Object k);\n\tjava.util.Map.Entry<K,V> select(K key); // Returns the Map.Entry whose key is closest in a bitwise XOR metric to the given key.\n\tjava.util.Map.Entry<K,V> select(K key, Cursor<? super K,? super V> cursor); // Iterates through the Trie, starting with the entry whose bitwise value is closest in an XOR metric to the given key.\n\tK selectKey(K key); // Returns the key that is closest in a bitwise XOR metric to the provided key.\n\tV selectValue(K key); // Returns the value whose key is closest in a bitwise XOR metric to the provided key.\n\tint size();\n\tjava.util.SortedMap<K,V> subMap(K fromKey, K toKey);\n\tjava.util.SortedMap<K,V> tailMap(K fromKey);\n\tjava.util.Map.Entry<K,V> traverse(Cursor<? super K,? super V> cursor); // Traverses the Trie in lexicographical order.\n\tjava.util.Collection<V> values();\n}"}
{"index": 14504, "repo": "spring-security-web-6.1.2", "des": "Applies CSRF protection using a synchronizer token pattern.", "code": "public final class CsrfFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\tvoid setAccessDeniedHandler(AccessDeniedHandler accessDeniedHandler); // Specifies a AccessDeniedHandler that should be used when CSRF protection fails.\n\tvoid setRequestHandler(CsrfTokenRequestHandler requestHandler); // Specifies a CsrfTokenRequestHandler that is used to make the CsrfToken available as a request attribute.\n\tvoid setRequireCsrfProtectionMatcher(RequestMatcher requireCsrfProtectionMatcher); // Specifies a RequestMatcher that is used to determine if CSRF protection should be applied.\n\tprotected boolean shouldNotFilter(jakarta.servlet.http.HttpServletRequest request);\n\tstatic void skipRequest(jakarta.servlet.http.HttpServletRequest request);\n}"}
{"index": 8382, "repo": "hadoop-aws-3.3.6", "des": "An S3A Delegation Token Identifier: contains the information needed to talk to S3A.", "code": "Class AbstractS3ATokenIdentifier {\n\tstatic String createDefaultOriginMessage(); // Create the default origin text message with local hostname and timestamp.\n\tboolean equals(Object o); // Equality check is on superclass and UUID only.\n\tString getBucket();\n\tlong getCreated();\n\tEncryptionSecrets getEncryptionSecrets(); // Get the encryption secrets.\n\tlong getExpiryTime(); // Return the expiry time in seconds since 1970-01-01.\n\tString getOrigin();\n\tURI getUri();\n\tString getUuid(); // Get the UUID of this token identifier.\n\tvoid readFields(DataInput in); // Read state.\n\tvoid setOrigin(String origin);\n\tvoid validate(); // Validate the token by looking at its fields.\n\tvoid write(DataOutput out); // Write state.\n}"}
{"index": 8146, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for MethodArgumentResolver and MethodReturnValueHandler implementations based on RequestPayload and ResponsePayload annotations.", "code": "Class AbstractPayloadMethodProcessor {\n\tprotected ByteArrayInputStream convertToByteArrayInputStream(Source source); // Converts the given source to a byte array input stream.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter is supported by this resolver.\n\tprotected abstract boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected abstract boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type is supported by this handler.\n}"}
{"index": 6684, "repo": "lucene-analyzers-common-8.11.2", "des": "This class implements a simple byte vector with access to the underlying array.", "code": "Class ByteVector {\n\tint alloc(int size); // This is to implement memory allocation in the array.\n\tint capacity(); // returns current capacity of array\n\tbyte get(int index);\n\tbyte[] getArray();\n\tint length(); // return number of items in array\n\tvoid put(int index, byte val);\n\tvoid trimToSize();\n}"}
{"index": 17497, "repo": "pulsar-broker-3.0.0", "des": "Defines the information required to broker lookup.", "code": "public record BrokerLookupData(String webServiceUrl, String webServiceUrlTls, String pulsarServiceUrl, String pulsarServiceUrlTls, Map<String,org.apache.pulsar.policies.data.loadbalancer.AdvertisedListener> advertisedListeners, Map<String,String> protocols, boolean persistentTopicsEnabled, boolean nonPersistentTopicsEnabled, String loadManagerClassName, long startTimestamp, String brokerVersion) extends Record implements org.apache.pulsar.policies.data.loadbalancer.ServiceLookupData {\n\tMap<String,org.apache.pulsar.policies.data.loadbalancer.AdvertisedListener> advertisedListeners(); // Returns the value of the advertisedListeners record component.\n\tString brokerVersion(); // Returns the value of the brokerVersion record component.\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString getLoadManagerClassName();\n\tOptional<String> getProtocol(String protocol);\n\tMap<String,String> getProtocols();\n\tString getPulsarServiceUrl();\n\tString getPulsarServiceUrlTls();\n\tlong getStartTimestamp();\n\tString getWebServiceUrl();\n\tString getWebServiceUrlTls();\n\tString loadManagerClassName(); // Returns the value of the loadManagerClassName record component.\n\tboolean nonPersistentTopicsEnabled(); // Returns the value of the nonPersistentTopicsEnabled record component.\n\tboolean persistentTopicsEnabled(); // Returns the value of the persistentTopicsEnabled record component.\n\tMap<String,String> protocols(); // Returns the value of the protocols record component.\n\tString pulsarServiceUrl(); // Returns the value of the pulsarServiceUrl record component.\n\tString pulsarServiceUrlTls(); // Returns the value of the pulsarServiceUrlTls record component.\n\tlong startTimestamp(); // Returns the value of the startTimestamp record component.\n\tLookupResult toLookupResult();\n\tNamespaceEphemeralData toNamespaceEphemeralData();\n\tString webServiceUrl(); // Returns the value of the webServiceUrl record component.\n\tString webServiceUrlTls(); // Returns the value of the webServiceUrlTls record component.\n}"}
{"index": 12132, "repo": "jena-core-4.9.0", "des": "Reasoner implementation which augments or transforms an RDF graph according to a set of rules.", "code": "public class LPBackwardRuleReasoner extends Object implements Reasoner {\n\tvoid addDescription(Model configSpec, Resource base); // Add a configuration description for this reasoner into a partial configuration specification model.\n\tInfGraph bind(Graph data); // Attach the reasoner to a set of RDF data to process.\n\tReasoner bindSchema(Graph tbox); // Precompute the implications of a schema graph.\n\tReasoner bindSchema(Model tbox); // Precompute the implications of a schema Model.\n\tCapabilities getGraphCapabilities(); // Return the Jena Graph Capabilties that the inference graphs generated by this reasoner are expected to conform to.\n\tModel getReasonerCapabilities(); // Return a description of the capabilities of this reasoner encoded in RDF.\n\tList<Rule> getRules(); // Return the this of Rules used by this reasoner\n\tvoid setDerivationLogging(boolean logOn); // Switch on/off derivation logging.\n\tvoid setParameter(Property parameter, Object value); // Set a configuration paramter for the reasoner.\n\tvoid setTraceOn(boolean state); // Set the state of the trace flag.\n\tboolean supportsProperty(Property property); // Determine whether the given property is recognized and treated specially by this reasoner.\n\tvoid tablePredicate(Node predicate); // Register an RDF predicate as one whose presence in a goal should force the goal to be tabled.\n}"}
{"index": 12267, "repo": "jena-core-4.9.0", "des": "The ShortList is an immutable ordered collection of unsigned short.", "code": "public interface ShortList extends List {\n\tboolean contains(short item); // Checks if the unsigned short item is a member of this list.\n\tint getLength(); // The number of unsigned shorts in the list.\n\tshort item(int index); // Returns the indexth item in the collection.\n}"}
{"index": 18360, "repo": "opencms-core-15.0", "des": "DataSource implementation that may be filled with content from an InputStream.", "code": "Class CmsInputStreamDataSource {\n\tjava.lang.String getContentType();\n\tjava.io.InputStream getInputStream(); // Retunrs the underlying input stream of this data source.\n\tjava.lang.String getName();\n\tjava.io.OutputStream getOutputStream(); // Don't use this method, VFS resources can't be written using this datasource class.\n}"}
{"index": 12549, "repo": "spring-jdbc-6.0.11", "des": "Oracle-specific implementation of the TableMetaDataProvider.", "code": "public class OracleTableMetaDataProvider extends GenericTableMetaDataProvider {\n\tprotected String getDefaultSchema(); // Provide access to default schema for subclasses.\n\tvoid initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName); // Initialize using provided database meta-data, table and column information.\n}"}
{"index": 9632, "repo": "commons-math3-3.6.1", "des": "This interface defines a visitor for the entries of a vector.", "code": "Interface FieldVectorChangingVisitor<T extends FieldElement<?>> {\n\tT end(); // End visiting a vector.\n\tvoid start(int dimension, int start, int end); // Start visiting a vector.\n\tT visit(int index, T value); // Visit one entry of the vector.\n}"}
{"index": 3371, "repo": "hadoop-azure-3.3.6", "des": "An optional extension for custom extensions, so as to support tighter integration.", "code": "Interface BoundDTExtension {\n\tvoid bind(URI fsURI, org.apache.hadoop.conf.Configuration conf); // Bind the extension to the specific instance of ABFS.\n\tdefault String getCanonicalServiceName(); // Get the canonical service name, which will be returned by FileSystem.getCanonicalServiceName() and so used to map the issued DT in credentials, including credential files collected for job submission.\n\tdefault String getUserAgentSuffix(); // Get a suffix for the UserAgent suffix of HTTP requests, which can be used to identify the principal making ABFS requests.\n}"}
{"index": 10918, "repo": "spring-data-redis-3.1.2", "des": "Serializer adapter on top of Spring's O/X Mapping.", "code": "public class OxmSerializer extends Object implements InitializingBean, RedisSerializer<Object> {\n\tvoid afterPropertiesSet();\n\tObject deserialize(byte[] bytes); // Deserialize an object from the given binary data.\n\tbyte[] serialize(Object t); // Serialize the given object to binary data.\n\tvoid setMarshaller(Marshaller marshaller);\n\tvoid setUnmarshaller(Unmarshaller unmarshaller);\n}"}
{"index": 11986, "repo": "jena-core-4.9.0", "des": "This interface collects together those operations that the backchaining engine needs to invoke in the parent InfGraph.", "code": "public interface BackwardRuleInfGraphI extends SilentAddI, InfGraph {\n\tExtendedIterator<Triple> findDataMatches(TriplePattern pattern); // Match a pattern just against the stored data (raw data, schema, axioms) but no backchaining derivation.\n\tNode getTemp(Node instance, Node prop, Node pclass); // Retrieve or create a bNode representing an inferred property value.\n\tint getVersion(); // Return a version stamp for this graph which can be used to fast-fail concurrent modification exceptions.\n\tvoid logDerivation(Triple t, Derivation derivation); // Logger a derivation record against the given triple.\n\tboolean processBuiltin(ClauseEntry clause, Rule rule, BindingEnvironment env); // Process a call to a builtin predicate\n}"}
{"index": 5797, "repo": "iceberg-core-1.3.0", "des": "A counter to be used to count deletes as they are applied.", "code": "Class DeleteCounter {\n\tlong get(); // Return the current value of the counter.\n\tvoid increment(); // Increment the counter by one.\n}"}
{"index": 3420, "repo": "nifi-api-1.22.0", "des": "This Repository houses Provenance Events.", "code": "Interface ProvenanceEventRepository {\n\tvoid close(); // Closes the repository, freeing any resources\n\tProvenanceEventBuilder eventBuilder(); // Returns a ProvenanceEventBuilder that is capable of building ProvenanceEventRecords\n\tProvenanceEventRecord getEvent(long id); // Retrieves the Provenance Event with the given ID.\n\tList<ProvenanceEventRecord> getEvents(long firstRecordId, int maxRecords); // Returns a List of all ProvenanceEventRecords in the repository starting with the given ID.\n\tLong getMaxEventId();\n\tvoid registerEvent(ProvenanceEventRecord event); // Adds the given event to the repository and returns a new event for which the event id has been populated.\n\tvoid registerEvents(Iterable<ProvenanceEventRecord> events); // Adds the given events to the repository.\n}"}
{"index": 13704, "repo": "spring-webmvc-6.0.11", "des": "LocaleResolver implementation that always returns a fixed default locale and optionally time zone.", "code": "public class FixedLocaleResolver extends AbstractLocaleContextResolver {\n\tLocale resolveLocale(HttpServletRequest request); // Default implementation of LocaleResolver.resolveLocale(HttpServletRequest) that delegates to LocaleContextResolver.resolveLocaleContext(HttpServletRequest), falling back to ServletRequest.getLocale() if necessary.\n\torg.springframework.context.i18n.LocaleContext resolveLocaleContext(HttpServletRequest request); // Resolve the current locale context via the given request.\n\tvoid setLocaleContext(HttpServletRequest request, HttpServletResponse response, org.springframework.context.i18n.LocaleContext localeContext); // Set the current locale context to the given one, potentially including a locale with associated time zone information.\n}"}
{"index": 16514, "repo": "spring-batch-infrastructure-5.0.2", "des": "An implementation of LineAggregator that concatenates a collection of items of a common type with the system line separator.", "code": "public class RecursiveCollectionLineAggregator<T> extends Object implements LineAggregator<Collection<T>> {\n\tString aggregate(Collection<T> items); // Create a string from the value provided.\n\tvoid setDelegate(LineAggregator<T> delegate); // Public setter for the LineAggregator to use on single items, that are not Strings.\n}"}
{"index": 4617, "repo": "commons-vfs2-2.9.0", "des": "A file system, made up of a hierarchy of files.", "code": "Interface FileSystem {\n\tvoid addJunction(String junctionPoint, FileObject targetFile); // Adds a junction to this file system.\n\tvoid addListener(FileObject file, FileListener listener); // Adds a listener on a file in this file system.\n\tObject getAttribute(String attrName); // Gets the value of an attribute of the file system.\n\tFileSystemManager getFileSystemManager(); // Returns a reference to the FileSytemManager.\n\tFileSystemOptions getFileSystemOptions(); // Returns the FileSystemOptions used to instantiate this file system.\n\tdouble getLastModTimeAccuracy(); // Returns the accuracy of the last modification time in milliseconds.\n\tFileObject getParentLayer(); // Returns the parent layer if this is a layered file system.\n\tFileObject getRoot(); // Returns the root file of this file system.\n\tFileName getRootName(); // Returns the name of the root file of this file system.\n\tString getRootURI(); // The root URI passed as a file system option or obtained from the rootName.\n\tboolean hasCapability(Capability capability); // Determines if this file system has a particular capability.\n\tvoid removeJunction(String junctionPoint); // Removes a junction from this file system.\n\tvoid removeListener(FileObject file, FileListener listener); // Removes a listener from a file in this file system.\n\tFile replicateFile(FileObject file, FileSelector selector); // Creates a temporary local copy of a file and its descendants.\n\tFileObject resolveFile(FileName name); // Finds a file in this file system.\n\tFileObject resolveFile(String name); // Finds a file in this file system.\n\tvoid setAttribute(String attrName, Object value); // Sets the value of an attribute of the file's content.\n}"}
{"index": 11734, "repo": "spring-data-neo4j-7.1.2", "des": "Enumeration of the direction a relationship can take.", "code": "public static enum Relationship.Direction extends Enum<Relationship.Direction> {\n\tRelationship.Direction opposite();\n\tstatic Relationship.Direction valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Relationship.Direction[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 1886, "repo": "hadoop-hdfs-3.3.6", "des": "Saving snapshot related information to protobuf based FSImage.", "code": "Class FSImageFormatPBSnapshot.Saver {\n\tlong getNumImageErrors(); // Number of non-fatal errors detected while writing the SnapshotDiff and INodeReference sections.\n\tvoid serializeINodeReferenceSection(OutputStream out); // This can only be called after serializing both INode_Dir and SnapshotDiff\n\tvoid serializeSnapshotDiffSection(OutputStream out); // save all the snapshot diff to fsimage\n\tvoid serializeSnapshotSection(OutputStream out); // save all the snapshottable directories and snapshots to fsimage\n}"}
{"index": 15710, "repo": "camel-api-4.0.0-RC1", "des": "A consumer of a batch of message exchanges from an Endpoint", "code": "public interface BatchConsumer extends Consumer {\n\tboolean isBatchAllowed(); // Whether processing the batch is still allowed.\n\tint processBatch(Queue<Object> exchanges); // Processes the list of Exchange objects in a batch.\n\tvoid setMaxMessagesPerPoll(int maxMessagesPerPoll); // Sets a maximum number of messages as a limit to poll at each polling.\n}"}
{"index": 12305, "repo": "jena-core-4.9.0", "des": "TripleStore - interface for bulk storage of triples used in composed graphs.", "code": "public interface TripleStore {\n\tvoid add(Triple t); // Add a triple to this triple store.\n\tvoid clear(); // Clear this store, ie remove all triples from it.\n\tvoid close(); // Destroy this triple store - discard the indexes.\n\tboolean contains(Triple t); // Answer true iff this triple store contains the (concrete) triple t.\n\tboolean containsMatch(Triple t); // Answer true iff this triple store contains the triple match t.\n\tvoid delete(Triple t); // Remove a triple from this triple store.\n\tExtendedIterator<Triple> find(Triple t); // Answer an ExtendedIterator returning all the triples from this store that match the pattern m = (S, P, O).\n\tboolean isEmpty(); // Answer true iff this triple store is empty.\n\tExtendedIterator<Node> listObjects(); // Answer an setwise iterator over all the objects of triples in this store.\n\tExtendedIterator<Node> listPredicates(); // Answer an iterator over all the predicates of triples in this store.\n\tExtendedIterator<Node> listSubjects(); // Answer an setwise iterator over all the subjects of triples in this store.\n\tint size(); // Answer the size (number of triples) of this triple store.\n\tStream<Triple> stream(Node sm, Node pm, Node om); // Answer an ExtendedIterator returning all the triples from this store that match the pattern m = (S, P, O).\n}"}
{"index": 3760, "repo": "commons-pool2-2.11.1", "des": "Strategy for obtaining and printing the current call stack.", "code": "Interface CallStack {\n\tvoid clear(); // Clears the current stack trace snapshot.\n\tvoid fillInStackTrace(); // Takes a snapshot of the current call stack.\n\tboolean printStackTrace(PrintWriter writer); // Prints the current stack trace if available to a PrintWriter.\n}"}
{"index": 2532, "repo": "exoplayer-r2.3.1", "des": "Information about a MediaCodec for a given mime type.", "code": "Class MediaCodecInfo {\n\tandroid.graphics.Point alignVideoSizeV21(int width, int height); // Returns the smallest video size greater than or equal to a specified size that also satisfies the MediaCodec's width and height alignment requirements.\n\tandroid.media.MediaCodecInfo.CodecProfileLevel[] getProfileLevels(); // The profile levels supported by the decoder.\n\tboolean isAudioChannelCountSupportedV21(int channelCount); // Whether the decoder supports audio with a given channel count.\n\tboolean isAudioSampleRateSupportedV21(int sampleRate); // Whether the decoder supports audio with a given sample rate.\n\tboolean isCodecSupported(java.lang.String codec); // Whether the decoder supports the given codec.\n\tboolean isVideoSizeAndRateSupportedV21(int width, int height, double frameRate); // Whether the decoder supports video with a given width, height and frame rate.\n\tstatic MediaCodecInfo newInstance(java.lang.String name, java.lang.String mimeType, android.media.MediaCodecInfo.CodecCapabilities capabilities); // Creates an instance.\n\tstatic MediaCodecInfo newPassthroughInstance(java.lang.String name); // Creates an instance representing an audio passthrough decoder.\n}"}
{"index": 9823, "repo": "commons-math3-3.6.1", "des": "This interface represents a generic space, with affine and vectorial counterparts.", "code": "Interface Space {\n\tint getDimension(); // Get the dimension of the space.\n\tSpace getSubSpace(); // Get the n-1 dimension subspace of this space.\n}"}
{"index": 15340, "repo": "spring-boot-3.1.1", "des": "A PortInUseException is thrown when a web server fails to start due to a port already being in use.", "code": "public class PortInUseException extends WebServerException {\n\tint getPort(); // Returns the port that was in use.\n\tstatic <E extends Exception>void ifCausedBy(Exception ex, Class<E> causedBy, Consumer<E> action); // Perform an action if the given exception was caused by a specific exception type.\n\tstatic void ifPortBindingException(Exception ex, Consumer<BindException> action); // Perform an action if the given exception was caused by a \"port in use\" BindException.\n\tstatic void throwIfPortBindingException(Exception ex, IntSupplier port); // Throw a PortInUseException if the given exception was caused by a \"port in use\" BindException.\n}"}
{"index": 15612, "repo": "spring-security-core-6.1.2", "des": "An AuthenticationProvider implementation that retrieves user details from a JAAS login configuration.", "code": "public class JaasAuthenticationProvider extends AbstractJaasAuthenticationProvider {\n\tvoid afterPropertiesSet(); // Validates the required properties are set.\n\tprotected void configureJaas(org.springframework.core.io.Resource loginConfig); // Hook method for configuring Jaas.\n\tprotected LoginContext createLoginContext(CallbackHandler handler); // Creates the LoginContext to be used for authentication.\n\torg.springframework.core.io.Resource getLoginConfig();\n\tprotected void publishFailureEvent(UsernamePasswordAuthenticationToken token, AuthenticationException ase); // Publishes the JaasAuthenticationFailedEvent.\n\tvoid setLoginConfig(org.springframework.core.io.Resource loginConfig); // Set the JAAS login configuration file.\n\tvoid setRefreshConfigurationOnStartup(boolean refresh); // If set, a call to Configuration#refresh() will be made by #configureJaas(Resource) method.\n}"}
{"index": 10302, "repo": "spring-core-6.0.11", "des": "Strategy interface used to select between two MergedAnnotation instances.", "code": "@FunctionalInterface public interface MergedAnnotationSelector<A extends Annotation> {\n\tdefault boolean isBestCandidate(MergedAnnotation<A> annotation); // Determine if the existing annotation is known to be the best candidate and any subsequent selections may be skipped.\n\tMergedAnnotation<A> select(MergedAnnotation<A> existing, MergedAnnotation<A> candidate); // Select the annotation that should be used.\n}"}
{"index": 17467, "repo": "spring-security-config-6.1.2", "des": "Base class for populating an AuthenticationManagerBuilder with a UserDetailsManager.", "code": "public class UserDetailsManagerConfigurer<B extends ProviderManagerBuilder<B>,C extends UserDetailsManagerConfigurer<B,C>> extends UserDetailsServiceConfigurer<B,C,org.springframework.security.provisioning.UserDetailsManager> {\n\tprotected void initUserDetailsService(); // Populates the users that have been added.\n\tfinal UserDetailsManagerConfigurer<B,C>.UserDetailsBuilder withUser(String username); // Allows adding a user to the UserDetailsManager that is being created.\n\tfinal C withUser(org.springframework.security.core.userdetails.User.UserBuilder userBuilder); // Allows adding a user to the UserDetailsManager that is being created.\n\tfinal C withUser(org.springframework.security.core.userdetails.UserDetails userDetails); // Allows adding a user to the UserDetailsManager that is being created.\n}"}
{"index": 11274, "repo": "spring-context-6.0.11", "des": "Post-processor that registers AspectJ's ClassPreProcessorAgentAdapter with the Spring application context's default LoadTimeWeaver.", "code": "public class AspectJWeavingEnabler extends Object implements org.springframework.beans.factory.config.BeanFactoryPostProcessor, org.springframework.beans.factory.BeanClassLoaderAware, LoadTimeWeaverAware, org.springframework.core.Ordered {\n\tstatic void enableAspectJWeaving(LoadTimeWeaver weaverToUse, ClassLoader beanClassLoader); // Enable AspectJ weaving with the given LoadTimeWeaver.\n\tint getOrder();\n\tvoid postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory);\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setLoadTimeWeaver(LoadTimeWeaver loadTimeWeaver); // Set the LoadTimeWeaver of this object's containing ApplicationContext.\n}"}
{"index": 6301, "repo": "commons-codec-1.16.0", "des": "Implementation of the MurmurHash2 32-bit and 64-bit hash functions.", "code": "Class MurmurHash2 {\n\tstatic int hash32(byte[] data, int length); // Generates a 32-bit hash from byte array with the given length and a default seed value.\n\tstatic int hash32(byte[] data, int length, int seed); // Generates a 32-bit hash from byte array with the given length and seed.\n\tstatic int hash32(String text); // Generates a 32-bit hash from a string with a default seed.\n\tstatic int hash32(String text, int from, int length); // Generates a 32-bit hash from a substring with a default seed value.\n\tstatic long hash64(byte[] data, int length); // Generates a 64-bit hash from byte array with given length and a default seed value.\n\tstatic long hash64(byte[] data, int length, int seed); // Generates a 64-bit hash from byte array of the given length and seed.\n\tstatic long hash64(String text); // Generates a 64-bit hash from a string with a default seed.\n\tstatic long hash64(String text, int from, int length); // Generates a 64-bit hash from a substring with a default seed value.\n}"}
{"index": 310, "repo": "phoenix-core-5.1.3", "des": "ColumnInfo used to store Column Name and its associated PDataType.", "code": "Class ColumnInfo {\n\tstatic ColumnInfo create(String columnName, int sqlType, Integer maxLength, Integer scale);\n\tboolean equals(Object o);\n\tstatic ColumnInfo fromString(String stringRepresentation); // Instantiate a ColumnInfo from a string representation created by the toString() method.\n\tString getColumnName();\n\tString getDisplayName(); // Returns the column name without the associated Column Family.\n\tInteger getMaxLength();\n\tPDataType getPDataType();\n\tInteger getPrecision();\n\tInteger getScale();\n\tint getSqlType();\n\tString toTypeString();\n}"}
{"index": 4701, "repo": "commons-geometry-core-1.0", "des": "Interface representing a geometric element with a size.", "code": "Interface Sized {\n\tdouble getSize(); // Get the size of the instance.\n\tdefault boolean isFinite(); // Return true if the size of the instance is finite.\n\tdefault boolean isInfinite(); // Return true if the size of the instance is infinite.\n}"}
{"index": 7199, "repo": "calcite-core-1.34.0", "des": "A SqlExplain is a node of a parse tree which represents an EXPLAIN PLAN statement.", "code": "Class SqlExplain {\n\tSqlExplain.Depth getDepth(); // Returns the level of abstraction at which this plan should be displayed.\n\tSqlExplainLevel getDetailLevel(); // Return the detail level to be generated.\n\tint getDynamicParamCount(); // Returns the number of dynamic parameters in the statement.\n\tSqlNode getExplicandum(); // Returns the underlying SQL statement to be explained.\n\tSqlExplainFormat getFormat(); // Returns the desired output format.\n\tSqlKind getKind(); // Returns the type of node this is, or SqlKind.OTHER if it's nothing special.\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\tboolean isJson(); // Returns whether result is to be in JSON format.\n\tvoid setOperand(int i, @Nullable SqlNode operand); // Changes the value of an operand.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n\tboolean withImplementation(); // Returns whether physical plan implementation should be returned.\n\tboolean withType(); // Returns whether type should be returned.\n}"}
{"index": 8011, "repo": "commons-compress-1.23.0", "des": "Encapsulates code common to LZ77 decompressors.", "code": "Class AbstractLZ77CompressorInputStream {\n\tint available();\n\tvoid close();\n\tlong getCompressedCount();\n\tint getSize(); // Get the uncompressed size of the stream\n\tprotected boolean hasMoreDataInBlock(); // Is there still data remaining inside the current block?\n\tvoid prefill(byte[] data); // Adds some initial data to fill the window with.\n\tint read();\n\tprotected int readBackReference(byte[] b, int off, int len); // Reads data from the current back-reference.\n\tprotected int readLiteral(byte[] b, int off, int len); // Reads data from the current literal block.\n\tprotected int readOneByte(); // Reads a single byte from the real input stream and ensures the data is accounted for.\n\tprotected void startBackReference(int offset, long length); // Used by subclasses to signal the next block contains a back-reference with the given coordinates.\n\tprotected void startLiteral(long length); // Used by subclasses to signal the next block contains the given amount of literal data.\n}"}
{"index": 18721, "repo": "opennlp-tools-2.2.0", "des": "An import stream which can parse the CONLL03 data.", "code": "Class Conll03NameSampleStream {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tNameSample read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 7866, "repo": "cassandra-all-4.1.2", "des": "Compares UUIDs using the following criteria: - if count of supplied bytes is less than 16, compare counts - compare UUID version fields - nil UUID is always lesser - compare timestamps if both are time-based - compare lexically, unsigned msb-to-lsb comparison.", "code": "Class UUIDType {\n\tCQL3Type asCQL3Type();\n\t<VL,VR> int compareCustom(VL left, ValueAccessor<VL> accessorL, VR right, ValueAccessor<VR> accessorR); // Implement IFF ComparisonType is CUSTOM Compares the byte representation of two instances of this class, for types where this cannot be done by simple in-order comparison of the unsigned bytes Standard Java compare semantics\n\tTerm fromJSONObject(java.lang.Object parsed); // Given a parsed JSON string, return a byte representation of the object.\n\tjava.nio.ByteBuffer fromString(java.lang.String source); // get a byte representation of the given string.\n\tTypeSerializer<java.util.UUID> getSerializer();\n\tboolean isEmptyValueMeaningless(); // Returns true for types where empty should be handled like null like Int32Type.\n\tboolean isValueCompatibleWithInternal(AbstractType<?> otherType); // Needed to handle ReversedType in value-compatibility checks.\n\tint valueLengthIfFixed(); // The length of values for this type if all values are of fixed length, -1 otherwise.\n}"}
{"index": 17477, "repo": "spring-integration-xml-6.1.2", "des": "Message Splitter that uses an XPathExpression to split a Document, File or String payload into a NodeList.", "code": "public class XPathMessageSplitter extends org.springframework.integration.splitter.AbstractMessageSplitter {\n\tprotected void doInit();\n\tString getComponentType();\n\tprotected int obtainSizeIfPossible(Iterator<?> iterator);\n\tvoid setCreateDocuments(boolean createDocuments);\n\tvoid setDocumentBuilder(DocumentBuilderFactory documentBuilderFactory);\n\tvoid setIterator(boolean iterator); // The iterator mode: true (default) to return an Iterator for splitting payload, false to return a List.\n\tvoid setOutputProperties(Properties outputProperties); // A set of output properties that will be used to override any of the same properties in affect for the transformation.\n\tvoid setXmlPayloadConverter(XmlPayloadConverter xmlPayloadConverter);\n\tprotected Object splitMessage(org.springframework.messaging.Message<?> message);\n}"}
{"index": 16248, "repo": "maven-model-builder-4.0.0-alpha-7", "des": "Determines profile activation based on the version of the current Java runtime.", "code": "@Named(\"jdk-version\") @Singleton public class JdkVersionProfileActivator extends Object implements ProfileActivator {\n\tboolean isActive(Profile profile, ProfileActivationContext context, ModelProblemCollector problems); // Determines whether the specified profile is active in the given activator context.\n\tstatic boolean isJavaVersionCompatible(String requiredJdkRange, String currentJavaVersion);\n\tboolean presentInConfig(Profile profile, ProfileActivationContext context, ModelProblemCollector problems); // Determines whether specified activation method is present in configuration or not.\n}"}
{"index": 9769, "repo": "commons-math3-3.6.1", "des": "Implements the representation of a real polynomial function in Newton Form.", "code": "Class PolynomialFunctionNewtonForm {\n\tprotected void computeCoefficients(); // Calculate the normal polynomial coefficients given the Newton form.\n\tint degree(); // Returns the degree of the polynomial.\n\tstatic double evaluate(double[] a, double[] c, double z); // Evaluate the Newton polynomial using nested multiplication.\n\tdouble[] getCenters(); // Returns a copy of the centers array.\n\tdouble[] getCoefficients(); // Returns a copy of the coefficients array.\n\tdouble[] getNewtonCoefficients(); // Returns a copy of coefficients in Newton form formula.\n\tDerivativeStructure value(DerivativeStructure t); // Simple mathematical function.\n\tdouble value(double z); // Calculate the function value at the given point.\n\tprotected static void verifyInputArray(double[] a, double[] c); // Verifies that the input arrays are valid.\n}"}
{"index": 2574, "repo": "exoplayer-r2.3.1", "des": "A representation of media currently available for playback.", "code": "Class Timeline {\n\tabstract int getIndexOfPeriod(java.lang.Object uid); // Returns the index of the period identified by its unique id, or C.INDEX_UNSET if the period is not in the timeline.\n\tTimeline.Period getPeriod(int periodIndex, Timeline.Period period); // Populates a Timeline.Period with data for the period at the specified index.\n\tabstract Timeline.Period getPeriod(int periodIndex, Timeline.Period period, boolean setIds); // Populates a Timeline.Period with data for the period at the specified index.\n\tabstract int getPeriodCount(); // Returns the number of periods in the timeline.\n\tTimeline.Window getWindow(int windowIndex, Timeline.Window window); // Populates a Timeline.Window with data for the window at the specified index.\n\tTimeline.Window getWindow(int windowIndex, Timeline.Window window, boolean setIds); // Populates a Timeline.Window with data for the window at the specified index.\n\tabstract Timeline.Window getWindow(int windowIndex, Timeline.Window window, boolean setIds, long defaultPositionProjectionUs); // Populates a Timeline.Window with data for the window at the specified index.\n\tabstract int getWindowCount(); // Returns the number of windows in the timeline.\n\tboolean isEmpty(); // Returns whether the timeline is empty.\n}"}
{"index": 4397, "repo": "beam-sdks-java-core-2.49.0", "des": "A WindowFn that leaves all associations between elements and windows unchanged.", "code": "Class IdentityWindowFn<T> {\n\tboolean assignsToOneWindow(); // Returns true if this WindowFn always assigns an element to exactly one window.\n\tjava.util.Collection<BoundedWindow> assignWindows(WindowFn.AssignContext c); // Given a timestamp and element, returns the set of windows into which it should be placed.\n\tWindowMappingFn<BoundedWindow> getDefaultWindowMappingFn(); // Returns the default WindowMappingFn to use to map main input windows to side input windows.\n\tboolean isCompatible(WindowFn<?,?> other); // Returns whether this performs the same merging as the given WindowFn.\n\tvoid verifyCompatibility(WindowFn<?,?> other); // Throw IncompatibleWindowException if this WindowFn does not perform the same merging as the given $WindowFn.\n\tCoder<BoundedWindow> windowCoder(); // Returns the Coder used for serializing the windows used by this windowFn.\n}"}
{"index": 2160, "repo": "hive-exec-4.0.0-alpha-2", "des": "Relational expression representing a scan of a HiveDB collection.", "code": "Class HiveTableScan {\n\torg.apache.calcite.rel.RelNode accept(org.apache.calcite.rel.RelShuttle shuttle);\n\tHiveTableScan copy(org.apache.calcite.rel.type.RelDataType newRowtype); // Copy TableScan operator with a new Row Schema.\n\torg.apache.calcite.rel.RelNode copy(org.apache.calcite.plan.RelTraitSet traitSet, List<org.apache.calcite.rel.RelNode> inputs);\n\tHiveTableScan copyIncludingTable(org.apache.calcite.rel.type.RelDataType newRowtype); // Copy TableScan operator with a new Row Schema.\n\tdouble estimateRowCount(org.apache.calcite.rel.metadata.RelMetadataQuery mq);\n\torg.apache.calcite.rel.RelWriter explainTerms(org.apache.calcite.rel.RelWriter pw);\n\tList<ColStatistics> getColStat(List<Integer> projIndxLst);\n\tString getConcatQbIDAlias();\n\tList<Integer> getNeededColIndxsFrmReloptHT();\n\tSet<Integer> getPartOrVirtualCols();\n\torg.apache.calcite.rel.type.RelDataType getPrunedRowType();\n\tString getTableAlias();\n\tHiveTableScan.HiveTableScanTrait getTableScanTrait();\n\tSet<Integer> getVirtualCols();\n\tvoid implement(HiveRelNode.Implementor implementor);\n\tboolean isInsideView();\n\torg.apache.calcite.rel.RelNode project(org.apache.calcite.util.ImmutableBitSet fieldsUsed, Set<org.apache.calcite.rel.type.RelDataTypeField> extraFields, org.apache.calcite.tools.RelBuilder relBuilder);\n\tvoid register(org.apache.calcite.plan.RelOptPlanner planner);\n\tHiveTableScan setTableScanTrait(HiveTableScan.HiveTableScanTrait tableScanTrait);\n}"}
{"index": 2533, "repo": "exoplayer-r2.3.1", "des": "A utility class for querying the available codecs.", "code": "Class MediaCodecUtil {\n\tstatic android.util.Pair<java.lang.Integer,java.lang.Integer> getCodecProfileAndLevel(java.lang.String codec); // Returns profile and level (as defined by MediaCodecInfo.CodecProfileLevel) corresponding to the given codec description string (as defined by RFC 6381).\n\tstatic MediaCodecInfo getDecoderInfo(java.lang.String mimeType, boolean secure); // Returns information about the preferred decoder for a given mime type.\n\tstatic java.util.List<MediaCodecInfo> getDecoderInfos(java.lang.String mimeType, boolean secure); // Returns all MediaCodecInfos for the given mime type, in the order given by MediaCodecList.\n\tstatic MediaCodecInfo getPassthroughDecoderInfo(); // Returns information about a decoder suitable for audio passthrough.\n\tstatic int maxH264DecodableFrameSize(); // Returns the maximum frame size supported by the default H264 decoder.\n\tstatic void warmDecoderInfoCache(java.lang.String mimeType, boolean secure); // Optional call to warm the codec cache for a given mime type.\n}"}
{"index": 6977, "repo": "calcite-core-1.34.0", "des": "Describes the type of a mapping, from the most general MULTI_FUNCTION (every element in the source and target domain can participate in many mappings) to the most restricted BIJECTION (every element in the source and target domain must be paired with precisely one element in the other domain).", "code": "Enum MappingType {\n\tMappingType inverse();\n\tboolean isA(MappingType mappingType); // Returns whether this mapping type is (possibly a weaker form of) a given mapping type.\n\tboolean isBijection(); // A mapping is a bijection if it is a surjection and it is an injection.\n\tboolean isFunction(); // A mapping is a total function if every source has precisely one target.\n\tboolean isInjection(); // A mapping is an injection if it is a function and no target has more than one source.\n\tboolean isMandatorySource(); // Constraint that every target has at least one source.\n\tboolean isMandatoryTarget(); // Constraint that every source has at least one target.\n\tboolean isPartialFunction(); // A mapping is a partial function if every source has at most one target.\n\tboolean isSingleSource(); // Constraint that every target has at most one source.\n\tboolean isSingleTarget(); // Constraint that every source has at most one target.\n\tboolean isSurjection(); // A mapping is a surjection if it is a function and every target has at least one source.\n\tstatic MappingType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic MappingType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1612, "repo": "pdfbox-3.0.0-beta1", "des": "sc,scn,SC,SCN: Sets the color to use for stroking or non-stroking operations.", "code": "Class SetColor {\n\tprotected abstract PDColor getColor(); // Returns either the stroking or non-stroking color value.\n\tprotected abstract PDColorSpace getColorSpace(); // Returns either the stroking or non-stroking color space.\n\tvoid process(Operator operator, List<COSBase> arguments); // Process the operator.\n\tprotected abstract void setColor(PDColor color); // Sets either the stroking or non-stroking color value.\n}"}
{"index": 15381, "repo": "spring-boot-3.1.1", "des": "BindHandler to apply Validators to bound results.", "code": "public class ValidationBindHandler extends AbstractBindHandler {\n\tObject onFailure(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Exception error); // Called when binding fails for any reason (including failures from BindHandler.onSuccess(org.springframework.boot.context.properties.source.ConfigurationPropertyName, org.springframework.boot.context.properties.bind.Bindable<?>, org.springframework.boot.context.properties.bind.BindContext, java.lang.Object) or BindHandler.onCreate(org.springframework.boot.context.properties.source.ConfigurationPropertyName, org.springframework.boot.context.properties.bind.Bindable<?>, org.springframework.boot.context.properties.bind.BindContext, java.lang.Object) calls).\n\tvoid onFinish(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result); // Called when binding finishes with either bound or unbound result.\n\t<T> Bindable<T> onStart(ConfigurationPropertyName name, Bindable<T> target, BindContext context); // Called when binding of an element starts but before any result has been determined.\n\tObject onSuccess(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result); // Called when binding of an element ends with a successful result.\n}"}
{"index": 6436, "repo": "exoplayer-core-2.9.6", "des": "Base DataSource implementation to keep a list of TransferListeners.", "code": "Class BaseDataSource {\n\tvoid addTransferListener(TransferListener transferListener); // Adds a TransferListener to listen to data transfers.\n\tprotected void bytesTransferred(int bytesTransferred); // Notifies listeners that bytes were transferred.\n\tprotected void transferEnded(); // Notifies listeners that a transfer ended.\n\tprotected void transferInitializing(DataSpec dataSpec); // Notifies listeners that data transfer for the specified DataSpec is being initialized.\n\tprotected void transferStarted(DataSpec dataSpec); // Notifies listeners that data transfer for the specified DataSpec started.\n}"}
{"index": 7427, "repo": "mahout-math-0.13.0", "des": "Open hash map from long keys to float values.", "code": "Class OpenLongFloatHashMap {\n\tfloat adjustOrPutValue(long key, float newValue, float incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(long key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(float value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(LongProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(LongFloatProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tfloat get(long key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(long key);\n\tprotected int indexOfKey(long key);\n\tprotected int indexOfValue(float value);\n\tIterator<OpenLongFloatHashMap.MapElement> iterator();\n\tvoid keys(LongArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(LongFloatProcedure condition, LongArrayList keyList, FloatArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(long key, float value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(long key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(FloatArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 18569, "repo": "hibernate-core-5.6.15.Final", "des": "Models the logical notion of a JDBC Connection.", "code": "Interface LogicalConnection {\n\tjava.sql.Connection close(); // Closes the JdbcSession, making it inactive and forcing release of any held resources\n\tResourceRegistry getResourceRegistry(); // Provides access to the registry of JDBC resources associated with this LogicalConnection.\n\tboolean isOpen(); // Is this (logical) JDBC Connection still open/active.\n\tboolean isPhysicallyConnected(); // Is this JdbcSession currently physically connected (meaning does it currently hold a JDBC Connection)?\n}"}
{"index": 7388, "repo": "mahout-math-0.13.0", "des": "partially deprecated until unit tests are in place.", "code": "Class OldQRDecomposition {\n\tMatrix getQ(); // Generates and returns the (economy-sized) orthogonal factor Q.\n\tMatrix getR(); // Returns the upper triangular factor, R.\n\tboolean hasFullRank(); // Returns whether the matrix A has full rank.\n\tMatrix solve(Matrix B); // Least squares solution of A*X = B; returns X.\n}"}
{"index": 10721, "repo": "spring-tx-6.0.11", "des": "Enumeration that represents transaction propagation behaviors for use with the Transactional annotation, corresponding to the TransactionDefinition interface.", "code": "public enum Propagation extends Enum<Propagation> {\n\tint value();\n\tstatic Propagation valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Propagation[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10465, "repo": "groovy-all-4.0.13", "des": "This class is used as a pluggable way to resolve class names.", "code": "public class ClassNodeResolver extends Object {\n\tvoid cacheClass(String name, ClassNode res); // caches a ClassNode\n\tClassNodeResolver.LookupResult findClassNode(String name, CompilationUnit compilationUnit); // Extension point for custom lookup logic of finding ClassNodes.\n\tClassNode getFromClassCache(String name); // returns whatever is stored in the class cache for the given name\n\tClassNodeResolver.LookupResult resolveName(String name, CompilationUnit compilationUnit); // Resolves the name of a class to a SourceUnit or ClassNode.\n}"}
{"index": 16643, "repo": "spring-beans-6.0.11", "des": "Subinterface of BeanPostProcessor that adds a before-instantiation callback, and a callback after instantiation but before explicit properties are set or autowiring occurs.", "code": "public interface InstantiationAwareBeanPostProcessor extends BeanPostProcessor {\n\tdefault boolean postProcessAfterInstantiation(Object bean, String beanName); // Perform operations after the bean has been instantiated, via a constructor or factory method, but before Spring property population (from explicit properties or autowiring) occurs.\n\tdefault Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName); // Apply this BeanPostProcessor before the target bean gets instantiated.\n\tdefault PropertyValues postProcessProperties(PropertyValues pvs, Object bean, String beanName); // Post-process the given property values before the factory applies them to the given bean.\n}"}
{"index": 9417, "repo": "hadoop-yarn-api-3.3.6", "des": "Enumeration of various signal container commands.", "code": "Enum SignalContainerCommand {\n\tstatic SignalContainerCommand valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SignalContainerCommand[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13681, "repo": "spring-webmvc-6.0.11", "des": "A simple implementation of ViewResolver that interprets a view name as a bean name in the current application context, i.e.", "code": "public class BeanNameViewResolver extends org.springframework.web.context.support.WebApplicationObjectSupport implements ViewResolver, org.springframework.core.Ordered {\n\tint getOrder();\n\tView resolveViewName(String viewName, Locale locale); // Resolve the given view by name.\n\tvoid setOrder(int order); // Specify the order value for this ViewResolver bean.\n}"}
{"index": 17454, "repo": "spring-security-config-6.1.2", "des": "Defines the RequestMatcher types supported by the namespace.", "code": "public enum MatcherType extends Enum<MatcherType> {\n\torg.springframework.beans.factory.config.BeanDefinition createMatcher(org.springframework.beans.factory.xml.ParserContext pc, String path, String method);\n\torg.springframework.beans.factory.config.BeanDefinition createMatcher(org.springframework.beans.factory.xml.ParserContext pc, String path, String method, String servletPath);\n\tstatic MatcherType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic MatcherType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 17182, "repo": "spring-integration-core-6.1.2", "des": "Bulk start/stop SmartLifecycle in a particular role in phase order.", "code": "public class SmartLifecycleRoleController extends Object implements org.springframework.context.ApplicationListener<AbstractLeaderEvent>, org.springframework.context.ApplicationContextAware {\n\tvoid addLifecyclesToRole(String role, List<String> lifecycleBeanNames); // Add a SmartLifecycle beans to the role using their names.\n\tfinal void addLifecycleToRole(String role, String lifecycleBeanName); // Add a SmartLifecycle bean to the role using its name.\n\tfinal void addLifecycleToRole(String role, org.springframework.context.SmartLifecycle lifecycle); // Add a SmartLifecycle to the role.\n\tboolean allEndpointsRunning(String role); // Return true if all endpoints in the role are running.\n\tMap<String,Boolean> getEndpointsRunningStatus(String role); // Return the running status of each endpoint in the role.\n\tCollection<String> getRoles(); // Return a collection of the roles currently managed by this controller.\n\tboolean noEndpointsRunning(String role); // Return true if none of the endpoints in the role are running or if there are no endpoints in the role.\n\tvoid onApplicationEvent(AbstractLeaderEvent event);\n\tboolean removeLifecycle(org.springframework.context.SmartLifecycle lifecycle); // Remove the provided SmartLifecycle from all the roles, for example when a SmartLifecycle bean is destroyed.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid startLifecyclesInRole(String role); // Start all registered SmartLifecycles in the role.\n\tvoid stopLifecyclesInRole(String role); // Stop all registered SmartLifecycles in the role.\n}"}
{"index": 4583, "repo": "beam-sdks-java-core-2.49.0", "des": "The argument to the Window transform used to assign elements into windows and to determine how windows are merged.", "code": "Class WindowFn<T,W extends BoundedWindow> {\n\tboolean assignsToOneWindow(); // Returns true if this WindowFn always assigns an element to exactly one window.\n\tabstract java.util.Collection<W> assignWindows(WindowFn.AssignContext c); // Given a timestamp and element, returns the set of windows into which it should be placed.\n\tabstract WindowMappingFn<W> getDefaultWindowMappingFn(); // Returns the default WindowMappingFn to use to map main input windows to side input windows.\n\tTypeDescriptor<W> getWindowTypeDescriptor(); // Returns a TypeDescriptor capturing what is known statically about the window type of this WindowFn instance's most-derived class.\n\tboolean isNonMerging(); // Returns true if this WindowFn never needs to merge any windows.\n\tabstract void mergeWindows(WindowFn.MergeContext c); // Does whatever merging of windows is necessary.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tvoid verifyCompatibility(WindowFn<?,?> other); // Throw IncompatibleWindowException if this WindowFn does not perform the same merging as the given $WindowFn.\n\tabstract Coder<W> windowCoder(); // Returns the Coder used for serializing the windows used by this windowFn.\n}"}
{"index": 11735, "repo": "spring-data-neo4j-7.1.2", "des": "Contains the descriptions of all nodes, their properties and relationships known to SDN.", "code": "@API(status=INTERNAL, since=\"6.0\") public interface Schema {\n\tNeo4jEntityConverter getEntityConverter();\n\t<T extends IdGenerator<?>>Optional<T> getIdGenerator(String reference);\n\tNodeDescription<?> getNodeDescription(Class<?> underlyingClass); // Retrieves a node's description by its underlying class.\n\tNodeDescription<?> getNodeDescription(String primaryLabel); // Retrieves a node's description by its primary label.\n\t<T extends IdGenerator<?>>T getOrCreateIdGeneratorOfType(Class<T> idGeneratorType); // Creates or retrieves an instance of the given id generator class.\n\tdefault <T> Function<T,Map<String,Object>> getRequiredBinderFunctionFor(Class<T> sourceClass);\n\tdefault <T> BiFunction<org.neo4j.driver.types.TypeSystem,org.neo4j.driver.types.MapAccessor,T> getRequiredMappingFunctionFor(Class<T> targetClass); // Retrieves a schema based mapping function for the targetClass.\n\tdefault NodeDescription<?> getRequiredNodeDescription(Class<?> underlyingClass);\n\tdefault NodeDescription<?> getRequiredNodeDescription(String primaryLabel);\n}"}
{"index": 9008, "repo": "hbase-server-3.0.0-alpha-4", "des": "This procedure is used to change the store file tracker implementation.", "code": "Class ModifyStoreFileTrackerProcedure {\n\tprotected abstract org.apache.hadoop.conf.Configuration createConf(org.apache.hadoop.conf.Configuration conf, TableDescriptor current);\n\tprotected abstract TableDescriptor createFinishTableDescriptor(TableDescriptor current);\n\tprotected abstract TableDescriptor createMigrationTableDescriptor(org.apache.hadoop.conf.Configuration conf, TableDescriptor current);\n\tprotected abstract TableDescriptor createRestoreTableDescriptor(TableDescriptor current, String restoreSFT);\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected StateMachineProcedure.Flow executeFromState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyStoreFileTrackerState state);\n\tprotected void finish(BiConsumer<String,String> setValue, Consumer<String> removeValue);\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyStoreFileTrackerState getInitialState();\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyStoreFileTrackerState getState(int stateId);\n\tprotected int getStateId(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyStoreFileTrackerState state);\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tprotected boolean isRollbackSupported(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyStoreFileTrackerState state);\n\tprotected void migrate(org.apache.hadoop.conf.Configuration conf, BiConsumer<String,String> setValue);\n\tprotected abstract void preCheck(TableDescriptor current);\n\tprotected void rollbackState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.ModifyStoreFileTrackerState state);\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n}"}
{"index": 1977, "repo": "hive-exec-4.0.0-alpha-2", "des": "AppMasterEventOperator sends any rows it receives to the Tez AM.", "code": "Class AppMasterEventOperator {\n\tvoid closeOp(boolean abort); // Operator specific close routine.\n\tString getName();\n\tstatic String getOperatorName();\n\tOperatorType getType(); // Return the type of the specific operator among the types in OperatorType.\n\tprotected void initDataBuffer(boolean skipPruning);\n\tvoid initializeOp(org.apache.hadoop.conf.Configuration hconf); // Operator specific initialization.\n\tvoid process(Object row, int tag); // Process the row.\n}"}
{"index": 5877, "repo": "hadoop-yarn-server-common-3.3.6", "des": "GetSubClusterPolicyConfigurationResponse contains the answer from the FederationPolicyStore to a request to get all the policies configured in the system via a SubClusterPolicyConfiguration.", "code": "Class GetSubClusterPoliciesConfigurationsResponse {\n\tabstract List<SubClusterPolicyConfiguration> getPoliciesConfigs(); // Get all the policies configured in the system.\n\tstatic GetSubClusterPoliciesConfigurationsResponse newInstance(List<SubClusterPolicyConfiguration> policyConfigurations);\n\tabstract void setPoliciesConfigs(List<SubClusterPolicyConfiguration> policyConfigurations); // Sets all the policies configured in the system.\n}"}
{"index": 10121, "repo": "spring-hateoas-2.1.2", "des": "Interface to mark objects that are aware of the rel they'd like to be exposed under.", "code": "public class EmbeddedWrappers extends Object {\n\tEmbeddedWrapper emptyCollectionOf(Class<?> type); // Creates an EmbeddedWrapper for an empty Collection with the given element type.\n\tEmbeddedWrapper wrap(Object source); // Creates a new EmbeddedWrapper that\n\tEmbeddedWrapper wrap(Object source, LinkRelation rel); // Creates a new EmbeddedWrapper with the given rel.\n}"}
{"index": 12261, "repo": "jena-core-4.9.0", "des": "Allows connecting an arbitrary source of SAX events with ARP.", "code": "public class SAX2RDF extends SAX2RDFImpl implements ARPConfig {\n\tstatic SAX2RDF create(String base); // Factory method to create a new SAX2RDF.\n\tstatic SAX2RDF create(String base, String lang); // Factory method to create a new SAX2RDF.\n\tARPHandlers getHandlers(); // The handlers used for processing ARP events.\n\tARPOptions getOptions(); // The options used during parsing.\n\tstatic void installHandlers(XMLReader rdr, XMLHandler sax2rdf); // Initializes an XMLReader to use the SAX2RDF object as its handler for all events, and to use namespaces and namespace prefixes.\n\tvoid setHandlersWith(ARPHandlers handlers); // Copys handlers used for processing ARP events.\n\tvoid setOptionsWith(ARPOptions opts); // Copies the options from the argument to be used by this instance.\n\tvoid startPrefixMapping(String prefix, String uri); // Begin the scope of a prefix-URI Namespace mapping.\n}"}
{"index": 3088, "repo": "tink-1.10.0", "des": "TinkKey represents how Tink views individual keys.", "code": "Interface TinkKey {\n\tKeyTemplate getKeyTemplate(); // A TinkKey should know the KeyTemplate from which it was generated, which in turn specifies the cryptographic algorithm in which the TinkKey should be used.\n\tboolean hasSecret(); // Returns true if the key contains secret key material, and false otherwise.\n}"}
{"index": 15505, "repo": "spring-batch-core-5.0.2", "des": "Convenience for building jobs of various kinds.", "code": "public class JobBuilder extends JobBuilderHelper<JobBuilder> {\n\tJobFlowBuilder flow(Step step); // Create a new job builder that will execute a step or sequence of steps.\n\tJobFlowBuilder start(Flow flow); // Create a new job builder that will execute a flow.\n\tSimpleJobBuilder start(Step step); // Create a new job builder that will execute a step or sequence of steps.\n}"}
{"index": 17293, "repo": "groovy-4.0.13", "des": "Intended mode to use when generating constructors to emulate default parameter values when using the TupleConstructor annotation.", "code": "public enum DefaultsMode extends Enum<DefaultsMode> {\n\tstatic DefaultsMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DefaultsMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1520, "repo": "pdfbox-3.0.0-beta1", "des": "This is an stream engine to extract the marked content of a pdf.", "code": "Class PDFMarkedContentExtractor {\n\tvoid beginMarkedContentSequence(COSName tag, COSDictionary properties); // Called when a marked content group begins\n\tprotected float computeFontHeight(PDFont font); // Compute the font height.\n\tvoid endMarkedContentSequence(); // Called when a marked content group ends\n\tList<PDMarkedContent> getMarkedContents();\n\tboolean isSuppressDuplicateOverlappingText();\n\tvoid processPage(PDPage page); // This will initialize and process the contents of the stream.\n\tprotected void processTextPosition(TextPosition text); // This will process a TextPosition object and add the text to the list of characters on a page.\n\tvoid setSuppressDuplicateOverlappingText(boolean suppressDuplicateOverlappingText); // By default the class will attempt to remove text that overlaps each other.\n\tprotected void showGlyph(Matrix textRenderingMatrix, PDFont font, int code, Vector displacement); // Called when a glyph is to be processed.\n\tvoid xobject(PDXObject xobject);\n}"}
{"index": 14034, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "A custom War task that produces a Spring Boot executable war.", "code": "@DisableCachingByDefault(because=\"Not worth caching\") public abstract class BootWar extends War implements BootArchive {\n\tvoid copy();\n\tprotected org.gradle.api.internal.file.copy.CopyAction createCopyAction();\n\tLaunchScriptConfiguration getLaunchScript(); // Returns the LaunchScriptConfiguration that will control the script that is prepended to the archive.\n\tLayeredSpec getLayered(); // Returns the spec that describes the layers in a layered jar.\n\tFileCollection getProvidedClasspath(); // Returns the provided classpath, the contents of which will be included in the WEB-INF/lib-provided directory of the war.\n\tprotected boolean isLibrary(FileCopyDetails details); // Return if the FileCopyDetails are for a library.\n\tvoid launchScript(); // Configures the archive to have a prepended launch script.\n\tvoid launchScript(Action<LaunchScriptConfiguration> action); // Configures the archive to have a prepended launch script, customizing its configuration using the given action.\n\tvoid layered(Action<LayeredSpec> action); // Configures the war's layering using the given action.\n\tvoid providedClasspath(Object... classpath); // Adds files to the provided classpath to include in the WEB-INF/lib-provided directory of the war.\n\tvoid requiresUnpack(String... patterns); // Adds Ant-style patterns that identify files that must be unpacked from the archive when it is launched.\n\tvoid requiresUnpack(Spec<FileTreeElement> spec); // Adds a spec that identifies files that must be unpacked from the archive when it is launched.\n\tvoid resolvedArtifacts(Provider<Set<ResolvedArtifactResult>> resolvedArtifacts); // Registers the given lazily provided resolvedArtifacts.\n\tprotected ZipCompression resolveZipCompression(FileCopyDetails details); // Return the ZipCompression that should be used when adding the file represented by the given details to the jar.\n\tvoid setProvidedClasspath(Object classpath); // Sets the provided classpath to include in the WEB-INF/lib-provided directory of the war.\n\tvoid setProvidedClasspath(FileCollection classpath); // Sets the provided classpath to include in the WEB-INF/lib-provided directory of the war.\n}"}
{"index": 1543, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a destination to a page by referencing it with a name.", "code": "Class PDNamedDestination {\n\tCOSBase getCOSObject(); // Convert this standard java object to a COS object.\n\tString getNamedDestination(); // This will get the name of the destination.\n\tvoid setNamedDestination(String dest); // Set the named destination.\n}"}
{"index": 2102, "repo": "hive-exec-4.0.0-alpha-2", "des": "Parses a json string representation into a Hive struct.", "code": "Class GenericUDFJsonRead {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n}"}
{"index": 12577, "repo": "spring-jdbc-6.0.11", "des": "Reusable operation object representing an SQL update.", "code": "public class SqlUpdate extends SqlOperation {\n\tprotected void checkRowsAffected(int rowsAffected); // Check the given number of affected rows against the specified maximum number or required number.\n\tvoid setMaxRowsAffected(int maxRowsAffected); // Set the maximum number of rows that may be affected by this update.\n\tvoid setRequiredRowsAffected(int requiredRowsAffected); // Set the exact number of rows that must be affected by this update.\n\tint update(); // Convenience method to execute an update with no parameters.\n\tint update(int p1); // Convenient method to execute an update given one int arg.\n\tint update(int p1, int p2); // Convenient method to execute an update given two int args.\n\tint update(long p1); // Convenient method to execute an update given one long arg.\n\tint update(long p1, long p2); // Convenient method to execute an update given two long args.\n\tint update(Object... params); // Generic method to execute the update given parameters.\n\tint update(Object[] params, KeyHolder generatedKeyHolder); // Method to execute the update given arguments and retrieve the generated keys using a KeyHolder.\n\tint update(String p); // Convenient method to execute an update given one String arg.\n\tint update(String p1, String p2); // Convenient method to execute an update given two String args.\n\tint updateByNamedParam(Map<String,?> paramMap); // Generic method to execute the update given named parameters.\n\tint updateByNamedParam(Map<String,?> paramMap, KeyHolder generatedKeyHolder); // Method to execute the update given arguments and retrieve the generated keys using a KeyHolder.\n}"}
{"index": 8500, "repo": "commons-io-2.13.0", "des": "Counts files, directories, and sizes, as a visit proceeds.", "code": "Class CountingPathVisitor {\n\tboolean equals(Object obj);\n\tCounters.PathCounters getPathCounters(); // Gets the visitation counts.\n\tFileVisitResult postVisitDirectory(Path dir, IOException exc);\n\tFileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attributes);\n\tprotected void updateDirCounter(Path dir, IOException exc); // Updates the counter for visiting the given directory.\n\tprotected void updateFileCounters(Path file, BasicFileAttributes attributes); // Updates the counters for visiting the given file.\n\tFileVisitResult visitFile(Path file, BasicFileAttributes attributes);\n\tstatic CountingPathVisitor withBigIntegerCounters(); // Creates a new instance configured with a BigInteger Counters.PathCounters.\n\tstatic CountingPathVisitor withLongCounters(); // Creates a new instance configured with a long Counters.PathCounters.\n}"}
{"index": 8964, "repo": "hbase-server-3.0.0-alpha-4", "des": "Computes the HDFSBlockDistribution for a file based on the underlying located blocks for an HdfsDataInputStream reading that file.", "code": "Class InputStreamBlockDistribution {\n\tHDFSBlocksDistribution getHDFSBlockDistribution(); // Get the HDFSBlocksDistribution derived from the StoreFile input stream, re-computing if cache is expired.\n\tstatic boolean isEnabled(org.apache.hadoop.conf.Configuration conf); // True if we should derive StoreFile HDFSBlockDistribution from the underlying input stream\n}"}
{"index": 18494, "repo": "poi-scratchpad-5.2.3", "des": "Base of all chunks, which hold data, flags etc", "code": "Class Chunk {\n\tbyte[] _getContents();\n\tChunkFactory.CommandDefinition[] getCommandDefinitions(); // Gets the command definitions, which define and describe much of the data held by the chunk.\n\tChunk.Command[] getCommands();\n\tChunkHeader getHeader();\n\tString getName(); // Get the name of the chunk, as found from the CommandDefinitions\n\tint getOnDiskSize(); // Returns the size of the chunk, including any headers, trailers and separators.\n\tChunkSeparator getSeparator(); // Gets the separator between this chunk and the next, if it exists\n\tChunkTrailer getTrailer(); // Gets the trailer for this chunk, if it exists\n}"}
{"index": 10859, "repo": "spring-data-redis-3.1.2", "des": "Represents a geospatial bounding box defined by width and height.", "code": "public class BoundingBox extends Object implements Shape {\n\tboolean equals(Object o);\n\tDistance getHeight(); // Returns the height of this bounding box.\n\tDistance getWidth(); // Returns the width of this bounding box.\n}"}
{"index": 10872, "repo": "spring-data-redis-3.1.2", "des": "ClusterNodeResourceProvider provides access to low level client api to directly execute operations against a Redis instance.", "code": "public interface ClusterNodeResourceProvider {\n\t<S> S getResourceForSpecificNode(RedisClusterNode node); // Get the client resource for the given node.\n\tvoid returnResourceForSpecificNode(RedisClusterNode node, Object resource); // Return the resource object for the given node.\n}"}
{"index": 1856, "repo": "hadoop-hdfs-3.3.6", "des": "Enums for features that change the layout version.", "code": "Enum DataNodeLayoutVersion.Feature {\n\tLayoutVersion.FeatureInfo getInfo();\n\tstatic DataNodeLayoutVersion.Feature valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DataNodeLayoutVersion.Feature[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12360, "repo": "spring-boot-cli-3.1.1", "des": "Command that initializes a project using Spring initializr.", "code": "public class InitCommand extends OptionParsingCommand {\n\tCollection<HelpExample> getExamples(); // Return some examples for the command.\n\tString getUsageHelp(); // Returns usage help for the command.\n}"}
{"index": 3446, "repo": "preflight-3.0.0-beta1", "des": "This class validates XObject with the Form subtype.", "code": "Class XObjFormValidator {\n\tprotected void checkGroup(); // A Form XObject may contain a Group object (Key =\" Group\").\n\tprotected void checkMandatoryFields(); // This method checks if required fields are present.\n\tprotected void checkPS(); // Check if there are no PS entry in the Form XObject dictionary\n\tprotected void checkSubtype2Value();\n\tvoid validate(); // Process the validation of the XObject.\n\tprotected void validateXObjectContent(); // An Form XObject is a ContentStream.\n\tprotected void validateXObjectResources();\n}"}
{"index": 10074, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Listener for grid container group events.", "code": "Interface ProjectedGridListener {\n\tvoid memberAdded(GridProjection projection, GridMember member); // Invoked when a member is added into a projection.\n\tvoid memberRemoved(GridProjection projection, GridMember member); // Invoked when a member is removed from a projection.\n\tvoid projectionAdded(GridProjection projection); // Invoked when a new projection is added.\n\tvoid projectionRemoved(GridProjection projection); // Invoked when projection is removed.\n}"}
{"index": 10677, "repo": "groovy-all-4.0.13", "des": "A common set of Weigher and EntryWeigher implementations.", "code": "public final class Weighers extends Object {\n\tstatic <K, V> EntryWeigher<K,V> asEntryWeigher(Weigher<? super V> weigher); // An entry weigher backed by the specified weigher.\n\tstatic Weigher<byte[]> byteArray(); // A weigher where the value is a byte array and its weight is the number of bytes.\n\tstatic <E> Weigher<? super Collection<E>> collection(); // A weigher where the value is a Collection and its weight is the number of elements.\n\tstatic <K, V> EntryWeigher<K,V> entrySingleton(); // A weigher where an entry has a weight of 1.\n\tstatic <E> Weigher<? super Iterable<E>> iterable(); // A weigher where the value is a Iterable and its weight is the number of elements.\n\tstatic <E> Weigher<? super List<E>> list(); // A weigher where the value is a List and its weight is the number of elements.\n\tstatic <A, B> Weigher<? super Map<A,B>> map(); // A weigher where the value is a Map and its weight is the number of entries.\n\tstatic <E> Weigher<? super Set<E>> set(); // A weigher where the value is a Set and its weight is the number of elements.\n\tstatic <V> Weigher<V> singleton(); // A weigher where a value has a weight of 1.\n}"}
{"index": 17544, "repo": "pulsar-broker-3.0.0", "des": "A simple implementation of TransactionEntry.", "code": "public class TransactionEntryImpl extends Object implements TransactionEntry {\n\tvoid close(); // Close the entry to release the resource that it holds.\n\tlong committedAtEntryId(); // The entry id that the transaction is committed to.\n\tlong committedAtLedgerId(); // The ledger id that the transaction is committed to.\n\tbyte[] getData();\n\tbyte[] getDataAndRelease();\n\tio.netty.buffer.ByteBuf getDataBuffer();\n\tEntry getEntry(); // Returns the entry saved in the TransactionBuffer.\n\tlong getEntryId();\n\tlong getLedgerId();\n\tint getLength();\n\tPosition getPosition();\n\tint getStartBatchIndex();\n\tint numMessageInTxn();\n\tboolean release();\n\tlong sequenceId(); // The sequence id of this entry in this transaction.\n\tvoid setStartBatchIndex(int startBatchIndex);\n\torg.apache.pulsar.client.api.transaction.TxnID txnId(); // The transaction id that the entry is appended to.\n}"}
{"index": 13817, "repo": "spring-webmvc-6.0.11", "des": "A specialization of ResponseBodyEmitter for sending Server-Sent Events.", "code": "public class SseEmitter extends ResponseBodyEmitter {\n\tstatic SseEmitter.SseEventBuilder event();\n\tprotected void extendResponse(org.springframework.http.server.ServerHttpResponse outputMessage); // Invoked after the response is updated with the status code and headers, if the ResponseBodyEmitter is wrapped in a ResponseEntity, but before the response is committed, i.e.\n\tvoid send(Object object); // Send the object formatted as a single SSE \"data\" line.\n\tvoid send(Object object, org.springframework.http.MediaType mediaType); // Send the object formatted as a single SSE \"data\" line.\n\tvoid send(SseEmitter.SseEventBuilder builder); // Send an SSE event prepared with the given builder.\n}"}
{"index": 2999, "repo": "tink-1.10.0", "des": "Representation of the encryption function for an HPKE hybrid encryption primitive.", "code": "Class HpkePublicKey {\n\tstatic HpkePublicKey create(HpkeParameters parameters, Bytes publicKeyBytes, Integer idRequirement); // Creates a new HPKE public key.\n\tboolean equalsKey(Key o); // Returns true if the key is guaranteed to be equal to other.\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tBytes getOutputPrefix(); // Returns a Bytes instance, which is prefixed to every ciphertext.\n\tHpkeParameters getParameters(); // Returns a Parameters object containing all the information about the key which is not randomly chosen.\n\tBytes getPublicKeyBytes();\n}"}
{"index": 632, "repo": "ignite-core-2.15.0", "des": "This interface provides calculated metrics for data region.", "code": "Interface DataRegionMetricsProvider {\n\tlong emptyDataPages(); // Calculates empty data pages count for region.\n\tlong partiallyFilledPagesFreeSpace(); // Calculates free space of partially filled pages for this data region.\n}"}
{"index": 15267, "repo": "spring-boot-3.1.1", "des": "Default SslBundleRegistry implementation.", "code": "public class DefaultSslBundleRegistry extends Object implements SslBundleRegistry, SslBundles {\n\tSslBundle getBundle(String name); // Return an SslBundle with the provided name.\n\tvoid registerBundle(String name, SslBundle bundle); // Register a named SslBundle.\n}"}
{"index": 14699, "repo": "spring-data-commons-3.1.2", "des": "Useful base class to implement custom EntityInformations and delegate execution of standard methods from EntityInformation to a special implementation.", "code": "public class DelegatingEntityInformation<T,ID> extends Object implements EntityInformation<T,ID> {\n\tID getId(T entity); // Returns the id of the given entity or null if none can be obtained.\n\tClass<ID> getIdType(); // Returns the type of the id of the entity.\n\tClass<T> getJavaType(); // Returns the actual domain class type.\n\tboolean isNew(T entity); // Returns whether the given entity is considered to be new.\n}"}
{"index": 14274, "repo": "wicket-core-10.0.0-M1", "des": "This is one of Wicket's default string resource loaders.", "code": "public class InitializerStringResourceLoader extends ComponentStringResourceLoader {\n\tString loadStringResource(Class<?> clazz, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component class, resource key, locale and style.\n\tString loadStringResource(Component component, String key, Locale locale, String style, String variation); // Get the string resource for the given combination of component, resource key, locale and style.\n}"}
{"index": 7992, "repo": "commons-jcs3-core-3.1", "des": "Used to provide access to multiple services under nowait protection.", "code": "Class RemoteCacheNoWaitFacade<K,V> {\n\tprotected void connectAndRestore(); // The thread tries to establish a connection with a failover server, if any are defined.\n\tprotected void failover(RemoteCacheNoWait<K,V> rcnw); // Begin the failover process if this is a local cache.\n}"}
{"index": 15097, "repo": "spring-vault-core-3.0.4", "des": "Interface that specifies PKI backend-related operations.", "code": "public interface VaultPkiOperations {\n\tInputStream getCrl(VaultPkiOperations.Encoding encoding); // Retrieves the current CRL in raw form.\n\tVaultCertificateResponse issueCertificate(String roleName, VaultCertificateRequest certificateRequest); // Requests a certificate bundle (private key and certificate) from Vault's PKI backend given a roleName and VaultCertificateRequest.\n\tvoid revoke(String serialNumber); // Revokes a certificate using its serial number.\n\tVaultSignCertificateRequestResponse signCertificateRequest(String roleName, String csr, VaultCertificateRequest certificateRequest); // Signs a CSR using Vault's PKI backend given a roleName, csr and VaultCertificateRequest.\n}"}
{"index": 8802, "repo": "graal-sdk-1.0.0-rc7", "des": "Marker interface for all word types that have the semantic of a pointer (but not necessarily all the memory access methods defined in Pointer).", "code": "Interface PointerBase {\n\tboolean isNonNull(); // Returns true if this pointer is not the null pointer.\n\tboolean isNull(); // Returns true if this pointer is the null pointer.\n}"}
{"index": 13949, "repo": "spring-webflux-6.0.11", "des": "A contract for invoking a chain of ResourceTransformers where each resolver is given a reference to the chain allowing it to delegate when necessary.", "code": "public interface ResourceTransformerChain {\n\tResourceResolverChain getResolverChain(); // Return the ResourceResolverChain that was used to resolve the Resource being transformed.\n\treactor.core.publisher.Mono<org.springframework.core.io.Resource> transform(org.springframework.web.server.ServerWebExchange exchange, org.springframework.core.io.Resource resource); // Transform the given resource.\n}"}
{"index": 2235, "repo": "hive-exec-4.0.0-alpha-2", "des": "Expression processor factory for pruning.", "code": "Class PrunerExpressionOperatorFactory {\n\tstatic SemanticNodeProcessor getDefaultExprProcessor(); // Instantiate default expression processor.\n\tstatic SemanticNodeProcessor getFieldProcessor(); // Instantiate field processor.\n\tstatic SemanticNodeProcessor getGenericFuncProcessor(); // Instantiate generic function processor.\n}"}
{"index": 14491, "repo": "spring-security-web-6.1.2", "des": "Provides support for Content Security Policy (CSP) Level 2.", "code": "public final class ContentSecurityPolicyHeaderWriter extends Object implements HeaderWriter {\n\tvoid setPolicyDirectives(String policyDirectives); // Sets the security policy directive(s) to be used in the response header.\n\tvoid setReportOnly(boolean reportOnly); // If true, includes the Content-Security-Policy-Report-Only header in the response, otherwise, defaults to the Content-Security-Policy header.\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Create a Header instance.\n}"}
{"index": 15065, "repo": "spring-vault-core-3.0.4", "des": "Represents a PEM object that is internally decoded to a DER object.", "code": "public class PemObject extends Object {\n\tstatic PemObject fromKey(String content); // Create a PemObject from PEM content that is enclosed with -BEGIN PRIVATE KEY- and -END PRIVATE KEY-.\n\tX509Certificate getCertificate(); // Retrieve a X509Certificate.\n\tList<X509Certificate> getCertificates(); // Retrieve one or more X509Certificates.\n\tRSAPrivateCrtKeySpec getRSAPrivateKeySpec(); // Retrieve a RSAPrivateCrtKeySpec.\n\tRSAPublicKeySpec getRSAPublicKeySpec(); // Retrieve a RSAPrivateCrtKeySpec.\n\tboolean isCertificate();\n\tstatic boolean isPemEncoded(String content); // Check whether the content is PEM-encoded.\n\tboolean isPrivateKey();\n\tboolean isPublicKey();\n\tstatic List<PemObject> parse(String content); // Create one or more PemObjects from PEM content.\n\tstatic PemObject parseFirst(String content); // Create a PemObject from PEM content that is enclosed with -BEGIN PRIVATE KEY- or -BEGIN PUBLIC KEY-.\n}"}
{"index": 1960, "repo": "nifi-framework-api-1.22.0", "des": "Responsible for managing all ResourceClaims that are used in the application.", "code": "Interface ResourceClaimManager {\n\tint decrementClaimantCount(ResourceClaim claim); // Decreases by 1 the count of how many FlowFiles hold a claim to a particular piece of FlowFile content and returns the new count\n\tvoid drainDestructableClaims(Collection<ResourceClaim> destination, int maxElements); // Drains up to maxElements Content Claims from the internal queue of destructable content claims to the given destination so that they can be destroyed.\n\tvoid drainDestructableClaims(Collection<ResourceClaim> destination, int maxElements, long timeout, TimeUnit unit); // Drains up to maxElements Content Claims from the internal queue of destructable content claims to the given destination so that they can be destroyed.\n\tvoid freeze(ResourceClaim claim); // Freezes the Resource Claim so that it can no longer be written to\n\tint getClaimantCount(ResourceClaim claim);\n\tResourceClaim getResourceClaim(String container, String section, String id); // Returns the Resource Claim with the given id, container, and section, if one exists, null otherwise\n\tint incrementClaimantCount(ResourceClaim claim); // Increases by 1 the count of how many FlowFiles hold a claim to a particular piece of FlowFile content and returns the new count\n\tint incrementClaimantCount(ResourceClaim claim, boolean newClaim); // Increases by 1 the count of how many FlowFiles hold a claim to a particular piece of FlowFile content and returns the new count.\n\tboolean isDestructable(ResourceClaim claim); // Indicates whether or not the given Resource Claim is awaiting destruction\n\tvoid markDestructable(ResourceClaim claim); // Indicates that the given ResourceClaim can now be destroyed by the appropriate Content Repository.\n\tResourceClaim newResourceClaim(String container, String section, String id, boolean lossTolerant, boolean writable); // Creates a new Resource Claim with the given id, container, section, and loss tolerance.\n\tvoid purge(); // Clears the manager's memory of any and all ResourceClaims that it knows about\n}"}
{"index": 14870, "repo": "spring-data-commons-3.1.2", "des": "Interface to abstract the mapping from a type alias to the actual type.", "code": "public interface TypeInformationMapper {\n\tAlias createAliasFor(TypeInformation<?> type); // Returns the alias to be used for the given TypeInformation.\n\tTypeInformation<?> resolveTypeFrom(Alias alias); // Returns the actual TypeInformation to be used for the given alias.\n}"}
{"index": 17640, "repo": "spring-ldap-core-3.1.0", "des": "A CompensatingTransactionOperationExecutor to manage an unbind operation.", "code": "public class UnbindOperationExecutor extends Object implements CompensatingTransactionOperationExecutor {\n\tvoid commit(); // Commit the operation.\n\tvoid performOperation(); // Perform the operation.\n\tvoid rollback(); // Rollback the operation, restoring state of the target as it was before the operation was performed using the information supplied on creation of this instance.\n}"}
{"index": 14374, "repo": "wicket-core-10.0.0-M1", "des": "An incremental link to a page of a PageableListView.", "code": "public class PagingNavigationIncrementLink<T> extends Link<T> {\n\tfinal long getPageNumber(); // Determines the next page number for the pageable component.\n\tboolean isFirst();\n\tboolean isLast();\n\tboolean linksTo(Page page); // Returns true if the page link links to the given page.\n\tvoid onClick(); // Called when a link is clicked.\n}"}
{"index": 159, "repo": "commons-collections4-4.4", "des": "Factory implementation that creates a new object instance by reflection.", "code": "Class InstantiateFactory<T> {\n\tT create(); // Creates an object using the stored constructor.\n\tstatic <T> Factory<T> instantiateFactory(Class<T> classToInstantiate, Class<?>[] paramTypes, Object[] args); // Factory method that performs validation.\n}"}
{"index": 9803, "repo": "commons-math3-3.6.1", "des": "This class implements the common part of all fixed step Runge-Kutta integrators for Ordinary Differential Equations.", "code": "Class RungeKuttaIntegrator {\n\tvoid integrate(ExpandableStatefulODE equations, double t); // Integrate a set of differential equations up to the given time.\n\tdouble[] singleStep(FirstOrderDifferentialEquations equations, double t0, double[] y0, double t); // Fast computation of a single step of ODE integration.\n}"}
{"index": 17419, "repo": "groovy-4.0.13", "des": "A collection of utility methods used to deal with traits.", "code": "public abstract class Traits extends Object {\n\tstatic LinkedHashSet<ClassNode> collectAllInterfacesReverseOrder(ClassNode cNode, LinkedHashSet<ClassNode> interfaces); // Collects all interfaces of a class node, but reverses the order of the declaration of direct interfaces of this class node.\n\tstatic LinkedHashSet<ClassNode> collectSelfTypes(ClassNode receiver, LinkedHashSet<ClassNode> selfTypes); // Collects all the self types that a type should extend or implement, given the traits is implements.\n\tstatic LinkedHashSet<ClassNode> collectSelfTypes(ClassNode receiver, LinkedHashSet<ClassNode> selfTypes, boolean checkInterfaces, boolean checkSuperClass); // Collects all the self types that a type should extend or implement, given the traits is implements.\n\tstatic String[] decomposeSuperCallName(String methodName); // Returns the trait and method names derived from super-trait name scheme or null if the method name doesn't correspond to a trait method.\n\tstatic ClassNode findFieldHelper(ClassNode trait);\n\tstatic ClassNode findHelper(ClassNode trait);\n\tstatic ClassNode findStaticFieldHelper(ClassNode trait);\n\tstatic List<ClassNode> findTraits(ClassNode cNode); // Find all traits associated with the given type.\n\tstatic <T> T getAsType(Object self, Class<T> clazz); // Converts a class implementing some trait into a target class.\n\tstatic Method getBridgeMethodTarget(Method someMethod); // Reflection API to find the method corresponding to the default implementation of a trait, given a bridge method.\n\tstatic boolean hasDefaultImplementation(Method method); // Indicates whether a method in a trait interface has a default implementation.\n\tstatic boolean hasDefaultImplementation(MethodNode method); // Indicates whether a method in a trait interface has a default implementation.\n\tstatic boolean isAnnotatedWithTrait(ClassNode cNode); // Returns true if the specified class node is annotated with the Trait interface.\n\tstatic boolean isBridgeMethod(Method someMethod); // Reflection API to indicate whether some method is a bridge method to the default implementation of a trait.\n\tstatic boolean isTrait(Class<?> clazz); // Returns true if the specified class is a trait.\n\tstatic boolean isTrait(ClassNode cNode); // Returns true if the specified class node is a trait.\n}"}
{"index": 15825, "repo": "camel-api-4.0.0-RC1", "des": "A factory to create Processor based on the definition.", "code": "public interface ProcessorFactory {\n\tProcessor createChildProcessor(Route route, NamedNode definition, boolean mandatory); // Creates the child processor.\n\tProcessor createProcessor(CamelContext camelContext, String definitionName, Object[] args); // Creates a processor by the name of the definition.\n\tProcessor createProcessor(Route route, NamedNode definition); // Creates the processor.\n}"}
{"index": 18723, "repo": "opennlp-tools-2.2.0", "des": "The CrossValidationPartitioner.TrainingSampleStream which iterates over all training elements.", "code": "Class CrossValidationPartitioner.TrainingSampleStream<E> {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tObjectStream<E> getTestSampleStream(); // Retrieves the ObjectStream over the test/evaluations elements and poisons this CrossValidationPartitioner.TrainingSampleStream.\n\tE read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Resets the training sample.\n}"}
{"index": 6991, "repo": "calcite-core-1.34.0", "des": "MultisetSqlType represents a standard SQL2003 multiset type.", "code": "Class MultisetSqlType {\n\tprotected void generateTypeString(StringBuilder sb, boolean withDetail); // Generates a string representation of this type.\n\tRelDataType getComponentType(); // Gets the component type if this type is a collection, otherwise null.\n\tRelDataTypeFamily getFamily(); // Gets a canonical object representing the family of this type.\n\tRelDataTypePrecedenceList getPrecedenceList(); // Returns the precedence list for this type.\n}"}
{"index": 6589, "repo": "exoplayer-core-2.9.6", "des": "An AudioProcessor that uses the Sonic library to modify audio speed/pitch/sample rate.", "code": "Class SonicAudioProcessor {\n\tboolean configure(int sampleRateHz, int channelCount, int encoding); // Configures the processor to process input audio with the specified format and returns whether to AudioProcessor.flush() it.\n\tvoid flush(); // Clears any state in preparation for receiving a new stream of input buffers.\n\tjava.nio.ByteBuffer getOutput(); // Returns a buffer containing processed output data between its position and limit.\n\tint getOutputChannelCount(); // Returns the number of audio channels in the data output by the processor.\n\tint getOutputEncoding(); // Returns the audio encoding used in the data output by the processor.\n\tint getOutputSampleRateHz(); // Returns the sample rate of audio output by the processor, in hertz.\n\tboolean isActive(); // Returns whether the processor is configured and will process input buffers.\n\tboolean isEnded(); // Returns whether this processor will return no more output from AudioProcessor.getOutput() until it has been AudioProcessor.flush()ed and more input has been queued.\n\tvoid queueEndOfStream(); // Queues an end of stream signal.\n\tvoid queueInput(java.nio.ByteBuffer inputBuffer); // Queues audio data between the position and limit of the input buffer for processing.\n\tvoid reset(); // Resets the processor to its unconfigured state.\n\tlong scaleDurationForSpeedup(long duration); // Returns the specified duration scaled to take into account the speedup factor of this instance, in the same units as duration.\n\tvoid setOutputSampleRateHz(int sampleRateHz); // Sets the sample rate for output audio, in hertz.\n\tfloat setPitch(float pitch); // Sets the playback pitch.\n\tfloat setSpeed(float speed); // Sets the playback speed.\n}"}
{"index": 18733, "repo": "opennlp-tools-2.2.0", "des": "Class for real-valued events as an event stream.", "code": "Class RealBasicEventStream {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tEvent read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 158, "repo": "commons-collections4-4.4", "des": "Predicate implementation that returns true if the input is an instanceof the type stored in this predicate.", "code": "Class InstanceofPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning true if the input object is of the correct type.\n\tClass<?> getType(); // Gets the type to compare to.\n\tstatic Predicate<Object> instanceOfPredicate(Class<?> type); // Factory to create the identity predicate.\n}"}
{"index": 6675, "repo": "artemis-odb-2.3.0", "des": "Use this class together with PlayerManager.", "code": "Class TeamManager {\n\tImmutableBag<String> getPlayers(String team); // Get all players on a team.\n\tString getTeam(String player); // The the name of the team the given player is in.\n\tprotected void initialize(); // Override to implement code that gets executed when systems are initialized.\n\tvoid removeFromTeam(String player); // Remove a player from his team.\n\tvoid setTeam(String player, String team); // Set the player's team.\n}"}
{"index": 690, "repo": "ignite-core-2.15.0", "des": "Convenient predicate subclass that allows for thrown grid exception.", "code": "Class GridAbsPredicateX {\n\tboolean apply(); // Predicate body.\n\tabstract boolean applyx(); // Predicate body that can throw IgniteCheckedException.\n}"}
{"index": 8192, "repo": "spring-ws-3.0.10.RELEASE", "des": "Default implementation of the EndpointInterceptor interface, for simplified implementation of pre-only/post-only interceptors.", "code": "Class EndpointInterceptorAdapter {\n\tvoid afterCompletion(MessageContext messageContext, Object endpoint, Exception ex); // Does nothing by default.\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Returns true.\n\tboolean handleRequest(MessageContext messageContext, Object endpoint); // Returns true.\n\tboolean handleResponse(MessageContext messageContext, Object endpoint); // Returns true.\n\tboolean understands(Element header); // Returns false.\n}"}
{"index": 10325, "repo": "spring-core-6.0.11", "des": "Implementation of the DataBufferFactory interface based on a Netty 5 BufferAllocator.", "code": "public class Netty5DataBufferFactory extends Object implements DataBufferFactory {\n\tNetty5DataBuffer allocateBuffer(); // Deprecated.\n\tNetty5DataBuffer allocateBuffer(int initialCapacity); // Allocate a data buffer of the given initial capacity.\n\tio.netty5.buffer.BufferAllocator getBufferAllocator(); // Return the BufferAllocator used by this factory.\n\tboolean isDirect(); // Indicates whether this factory allocates direct buffers (i.e.\n\tDataBuffer join(List<? extends DataBuffer> dataBuffers); // Return a new DataBuffer composed of the dataBuffers elements joined together.\n\tstatic io.netty5.buffer.Buffer toBuffer(DataBuffer buffer); // Return the given Netty DataBuffer as a Buffer.\n\tNetty5DataBuffer wrap(byte[] bytes); // Wrap the given byte array in a DataBuffer.\n\tNetty5DataBuffer wrap(io.netty5.buffer.Buffer buffer); // Wrap the given Netty Buffer in a Netty5DataBuffer.\n\tNetty5DataBuffer wrap(ByteBuffer byteBuffer); // Wrap the given ByteBuffer in a DataBuffer.\n}"}
{"index": 15783, "repo": "camel-api-4.0.0-RC1", "des": "A repository which tracks in flight Exchanges.", "code": "public interface InflightRepository extends StaticService {\n\tvoid add(Exchange exchange); // Adds the exchange to the inflight registry to the total counter\n\tvoid add(Exchange exchange, String routeId); // Adds the exchange to the inflight registry associated to the given route\n\tvoid addRoute(String routeId); // Adds the route from the in flight registry.\n\tCollection<InflightRepository.InflightExchange> browse(); // A read-only browser of the InflightRepository.InflightExchanges that are currently inflight.\n\tCollection<InflightRepository.InflightExchange> browse(int limit, boolean sortByLongestDuration); // A read-only browser of the InflightRepository.InflightExchanges that are currently inflight.\n\tCollection<InflightRepository.InflightExchange> browse(String fromRouteId); // A read-only browser of the InflightRepository.InflightExchanges that are currently inflight that started from the given route.\n\tCollection<InflightRepository.InflightExchange> browse(String fromRouteId, int limit, boolean sortByLongestDuration); // A read-only browser of the InflightRepository.InflightExchanges that are currently inflight that started from the given route.\n\tboolean isInflightBrowseEnabled(); // Whether the inflight repository should allow browsing each inflight exchange.\n\tInflightRepository.InflightExchange oldest(String fromRouteId); // Gets the oldest InflightRepository.InflightExchange that are currently inflight that started from the given route.\n\tvoid remove(Exchange exchange); // Removes the exchange from the inflight registry to the total counter\n\tvoid remove(Exchange exchange, String routeId); // Removes the exchange from the inflight registry removing association to the given route\n\tvoid removeRoute(String routeId); // Removes the route from the in flight registry.\n\tvoid setInflightBrowseEnabled(boolean inflightBrowseEnabled); // Whether the inflight repository should allow browsing each inflight exchange.\n\tint size(); // Current size of inflight exchanges.\n\tint size(String routeId); // Current size of inflight exchanges which are from the given route.\n}"}
{"index": 18027, "repo": "spring-ws-core-4.0.5", "des": "Interface to define access to header information for certain WebServiceConnection implementations.", "code": "public interface HeadersAwareReceiverWebServiceConnection {\n\tvoid addResponseHeader(String name, String value); // Adds a response header with the given name and value.\n\tIterator<String> getRequestHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getRequestHeaders(String name); // Returns an iteration over all the string values of the specified header.\n}"}
{"index": 12082, "repo": "jena-core-4.9.0", "des": "A version of Graph that enforces term equality even if the base graph uses value-indexing.", "code": "public class GraphPlain extends WrappedGraph {\n\tboolean contains(Node s, Node p, Node o); // Answer true iff the graph contains a triple matching (s, p, o).\n\tboolean contains(Triple t); // Answer true iff the graph contains a triple that t matches; t may be fluid.\n\tExtendedIterator<Triple> find(Node subj, Node pred, Node obj); // Returns an iterator over Triples matching a pattern.\n\tExtendedIterator<Triple> find(Triple m); // Returns an iterator over all the Triples that match the triple pattern.\n\tCapabilities getCapabilities(); // returns this Graph's capabilities\n\tstatic Graph plain(); // Return a graph that only has term-equality.\n\tstatic Graph plain(Graph base); // Return a graph that only has term-equality and storage in the base graph.\n\tvoid remove(Node s, Node p, Node o); // Remove all triples that match by find(s, p, o)\n}"}
{"index": 18251, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Describes the target(s) of schema create, drop and migrate actions.", "code": "Interface TargetDescriptor {\n\tScriptTargetOutput getScriptTargetOutput(); // If getTargetTypes() includes scripts, return a representation of the script file to write to.\n\tjava.util.EnumSet<TargetType> getTargetTypes(); // The target type described here.\n}"}
{"index": 7601, "repo": "cassandra-all-4.1.2", "des": "Provides JMX enabled attributes and operations implemented by DiagnosticEventService.", "code": "Interface DiagnosticEventServiceMBean {\n\tvoid disableDiagnostics(); // Kill switch for disabling all events immediately, without restarting the node.\n\tvoid disableEventPersistence(java.lang.String eventClazz); // Stop storing events.\n\tvoid enableEventPersistence(java.lang.String eventClazz); // Start storing events to make them available via readEvents(String, Long, int).\n\tboolean isDiagnosticsEnabled();\n\tjava.util.SortedMap<java.lang.Long,java.util.Map<java.lang.String,java.io.Serializable>> readEvents(java.lang.String eventClazz, java.lang.Long lastKey, int limit); // Retrieved all events of specified type starting with provided key.\n}"}
{"index": 9245, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "A must interface for vendor plugin to implement.", "code": "Interface DevicePlugin {\n\tSet<Device> getDevices(); // Called when update node resource.\n\tDeviceRegisterRequest getRegisterRequestInfo(); // Called first when device plugin framework wants to register.\n\tDeviceRuntimeSpec onDevicesAllocated(Set<Device> allocatedDevices, YarnRuntimeType yarnRuntime); // Asking how these devices should be prepared/used before/when container launch.\n\tvoid onDevicesReleased(Set<Device> releasedDevices); // Called after device released.\n}"}
{"index": 10853, "repo": "spring-data-redis-3.1.2", "des": "The GET sub command used with BitFieldSubCommands.", "code": "public static class BitFieldSubCommands.BitFieldGet extends BitFieldSubCommands.AbstractBitFieldSubCommand {\n\tstatic BitFieldSubCommands.BitFieldGet create(BitFieldSubCommands.BitFieldType type, BitFieldSubCommands.Offset offset); // Creates a new BitFieldSubCommands.BitFieldGet.\n\tString getCommand(); // The actual sub command\n}"}
{"index": 1408, "repo": "pdfbox-3.0.0-beta1", "des": "This is a Map that will automatically sync the contents to a COSDictionary.", "code": "Class COSDictionaryMap<K,V> {\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tstatic COSDictionary convert(Map<String,?> someMap); // This will take a map<java.lang.String,org.apache.pdfbox.pdmodel.COSObjectable> and convert it into a COSDictionary.\n\tstatic COSDictionaryMap<String,Object> convertBasicTypesToMap(COSDictionary map); // This will take a COS dictionary and convert it into COSDictionaryMap.\n\tSet<Map.Entry<K,V>> entrySet();\n\tboolean equals(Object o);\n\tV get(Object key);\n\tboolean isEmpty();\n\tSet<K> keySet();\n\tV put(K key, V value);\n\tvoid putAll(Map<? extends K,? extends V> t);\n\tV remove(Object key);\n\tint size();\n\tCollection<V> values();\n}"}
{"index": 8298, "repo": "spring-ws-3.0.10.RELEASE", "des": "Callback handler that validates a certificate using an Spring Security AuthenticationManager.", "code": "Class SpringCertificateValidationCallbackHandler {\n\tvoid afterPropertiesSet();\n\tprotected void handleInternal(Callback callback); // Handles CertificateValidationCallbacks, and throws an UnsupportedCallbackException for others\n\tvoid setAuthenticationManager(org.springframework.security.authentication.AuthenticationManager authenticationManager); // Sets the Spring Security authentication manager.\n\tvoid setIgnoreFailure(boolean ignoreFailure);\n}"}
{"index": 15510, "repo": "spring-batch-core-5.0.2", "des": "Entry point for browsing the executions of running or historical jobs and steps.", "code": "public interface JobExplorer {\n\tList<JobInstance> findJobInstancesByJobName(String jobName, int start, int count); // Fetch JobInstance values in descending order of creation (and, therefore, usually of first execution) with a 'like' or wildcard criteria.\n\tSet<JobExecution> findRunningJobExecutions(String jobName); // Retrieve running job executions.\n\tJobExecution getJobExecution(Long executionId); // Retrieve a JobExecution by its ID.\n\tList<JobExecution> getJobExecutions(JobInstance jobInstance); // Retrieve job executions by their job instance.\n\tJobInstance getJobInstance(Long instanceId);\n\tdefault JobInstance getJobInstance(String jobName, JobParameters jobParameters);\n\tlong getJobInstanceCount(String jobName); // Query the repository for the number of unique JobInstance objects associated with the supplied job name.\n\tList<JobInstance> getJobInstances(String jobName, int start, int count); // Fetch JobInstance values in descending order of creation (and, therefore, usually, of first execution).\n\tList<String> getJobNames(); // Query the repository for all unique JobInstance names (sorted alphabetically).\n\tdefault JobExecution getLastJobExecution(JobInstance jobInstance); // Find the last JobExecution that has been created for a given JobInstance.\n\tdefault JobInstance getLastJobInstance(String jobName); // Find the last job instance, by ID, for the given job.\n\tStepExecution getStepExecution(Long jobExecutionId, Long stepExecutionId); // Retrieve a StepExecution by its ID and parent JobExecution ID.\n}"}
{"index": 435, "repo": "phoenix-core-5.1.3", "des": "Server-side implementation of ServerCachingProtocol.", "code": "Class ServerCachingEndpointImpl {\n\tvoid addServerCache(com.google.protobuf.RpcController controller, ServerCachingProtos.AddServerCacheRequest request, com.google.protobuf.RpcCallback<ServerCachingProtos.AddServerCacheResponse> done); // rpc addServerCache(.AddServerCacheRequest) returns (.AddServerCacheResponse);\n\tIterable<com.google.protobuf.Service> getServices();\n\tvoid removeServerCache(com.google.protobuf.RpcController controller, ServerCachingProtos.RemoveServerCacheRequest request, com.google.protobuf.RpcCallback<ServerCachingProtos.RemoveServerCacheResponse> done); // rpc removeServerCache(.RemoveServerCacheRequest) returns (.RemoveServerCacheResponse);\n\tvoid start(org.apache.hadoop.hbase.CoprocessorEnvironment env);\n\tvoid stop(org.apache.hadoop.hbase.CoprocessorEnvironment arg0);\n}"}
{"index": 2483, "repo": "exoplayer-r2.3.1", "des": "A SequenceableLoader that encapsulates multiple other SequenceableLoaders.", "code": "Class CompositeSequenceableLoader {\n\tboolean continueLoading(long positionUs); // Attempts to continue loading.\n\tlong getNextLoadPositionUs(); // Returns the next load time, or C.TIME_END_OF_SOURCE if loading has finished.\n}"}
{"index": 15457, "repo": "pulsar-client-api-3.0.0", "des": "The transaction buffer client to commit and abort transactions on topics or subscription.", "code": "@Private @Evolving public interface TransactionBufferClient {\n\tCompletableFuture<TxnID> abortTxnOnSubscription(String topic, String subscription, long txnIdMostBits, long txnIdLeastBits, long lowWaterMark); // Abort the transaction associated with the topic subscription.\n\tCompletableFuture<TxnID> abortTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, long lowWaterMark); // Abort the transaction associated with the topic.\n\tvoid close();\n\tCompletableFuture<TxnID> commitTxnOnSubscription(String topic, String subscription, long txnIdMostBits, long txnIdLeastBits, long lowWaterMark); // Commit the transaction associated with the topic subscription.\n\tCompletableFuture<TxnID> commitTxnOnTopic(String topic, long txnIdMostBits, long txnIdLeastBits, long lowWaterMark); // Commit the transaction associated with the topic.\n\tint getAvailableRequestCredits();\n\tint getPendingRequestsCount();\n}"}
{"index": 3483, "repo": "mahout-mr-0.13.0", "des": "Continuous values are stored in fixed randomized location in the feature vector.", "code": "Class ContinuousValueEncoder {\n\tvoid addToVector(byte[] originalForm, double weight, Vector data); // Adds a value to a vector.\n\tString asString(String originalForm); // Converts a value into a form that would help a human understand the internals of how the value is being interpreted.\n\tprotected int getSeed();\n\tprotected double getWeight(byte[] originalForm, double w);\n}"}
{"index": 8634, "repo": "avro-1.11.2", "des": "Deserializes a single datum from a ByteBuffer, byte array, or InputStream.", "code": "Interface MessageDecoder<D> {\n\tD decode(byte[] encoded); // Deserialize a single datum from a byte array.\n\tD decode(byte[] encoded, D reuse); // Deserialize a single datum from a byte array.\n\tD decode(ByteBuffer encoded); // Deserialize a single datum from a ByteBuffer.\n\tD decode(ByteBuffer encoded, D reuse); // Deserialize a single datum from a ByteBuffer.\n\tD decode(InputStream stream); // Deserialize a single datum from an InputStream.\n\tD decode(InputStream stream, D reuse); // Deserialize a single datum from an InputStream.\n}"}
{"index": 1031, "repo": "ignite-core-2.15.0", "des": "Represents information about cluster metadata.", "code": "Class MetadataListResult {\n\tCollection<BinaryMetadata> metadata();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 5010, "repo": "commons-collections-3.2.2", "des": "Transformer implementation that creates a new object instance by reflection.", "code": "Class InstantiateTransformer {\n\tstatic Transformer getInstance(Class[] paramTypes, Object[] args); // Transformer method that performs validation.\n\tObject transform(Object input); // Transforms the input Class object to a result by instantiation.\n}"}
{"index": 1434, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a FreeText FDF annotation.", "code": "Class FDFAnnotationFreeText {\n\tfloat[] getCallout(); // This will get the coordinates of the callout line.\n\tString getDefaultAppearance(); // Get the default appearance string.\n\tString getDefaultStyle(); // Get the default style string.\n\tPDRectangle getFringe(); // This will get the fringe.\n\tString getJustification(); // This will get the form of quadding (justification) of the annotation text.\n\tString getLineEndingStyle(); // This will retrieve the line ending style.\n\tString getRotation(); // This will get the clockwise rotation in degrees.\n\tvoid setCallout(float[] callout); // This will set the coordinates of the callout line.\n\tvoid setDefaultAppearance(String appearance); // Set the default appearance string.\n\tvoid setDefaultStyle(String style); // Set the default style string.\n\tvoid setFringe(PDRectangle fringe); // This will set the fringe rectangle.\n\tvoid setJustification(String justification); // This will set the form of quadding (justification) of the annotation text.\n\tvoid setLineEndingStyle(String style); // This will set the line ending style.\n\tvoid setRotation(int rotation); // This will set the clockwise rotation in degrees.\n}"}
{"index": 8995, "repo": "hbase-server-3.0.0-alpha-4", "des": "MemStoreSnapshot is a Context Object to hold details of the snapshot taken on a MemStore.", "code": "Class MemStoreSnapshot {\n\tint getCellsCount(); // Returns Number of Cells in this snapshot.\n\tlong getDataSize();\n\tlong getId(); // Returns snapshot's identifier.\n\tMemStoreSize getMemStoreSize();\n\tList<KeyValueScanner> getScanners(); // Create new SnapshotSegmentScanners for iterating over the snapshot.\n\tTimeRangeTracker getTimeRangeTracker(); // Returns TimeRangeTracker for all the Cells in the snapshot.\n\tboolean isTagsPresent(); // Returns true if tags are present in this snapshot\n}"}
{"index": 8546, "repo": "commons-io-2.13.0", "des": "Abstracts observer callback for ObservableInputStreams.", "code": "Class ObservableInputStream.Observer {\n\tvoid closed(); // Called to indicate that the ObservableInputStream has been closed.\n\tvoid data(byte[] buffer, int offset, int length); // Called to indicate that InputStream.read(byte[]), or InputStream.read(byte[], int, int) have been called, and are about to invoke data.\n\tvoid data(int value); // Called to indicate, that InputStream.read() has been invoked on the ObservableInputStream, and will return a value.\n\tvoid error(IOException exception); // Called to indicate that an error occurred on the underlying stream.\n\tvoid finished(); // Called to indicate that EOF has been seen on the underlying stream.\n}"}
{"index": 16253, "repo": "maven-model-builder-4.0.0-alpha-7", "des": "Signals a failure to parse the POM due to invalid syntax (e.g.", "code": "public class ModelParseException extends IOException {\n\tint getColumnNumber(); // Gets the one-based index of the column containing the error.\n\tint getLineNumber(); // Gets the one-based index of the line containing the error.\n}"}
{"index": 7500, "repo": "cassandra-all-4.1.2", "des": "A collection like class for Replica objects.", "code": "Class AbstractReplicaCollection<C extends AbstractReplicaCollection<C>> {\n\tboolean anyMatch(java.util.function.Predicate<? super Replica> test);\n\t<T> java.util.List<T> asList(java.util.function.Function<Replica,T> view);\n\tstatic <C extends ReplicaCollection<C>,B extends ReplicaCollection.Builder<C>>java.util.stream.Collector<Replica,B,C> collector(java.util.Set<java.util.stream.Collector.Characteristics> characteristics, java.util.function.Supplier<B> supplier);\n\tint count(java.util.function.Predicate<? super Replica> test); // see ReplicaCollection.count(Predicate)\n\tboolean equals(java.lang.Object o); // It's not clear whether AbstractReplicaCollection should implement the order sensitive equals of List or the order oblivious equals of Set.\n\tC filter(java.util.function.Predicate<? super Replica> predicate); // see ReplicaCollection.filter(Predicate)\n\tC filter(java.util.function.Predicate<? super Replica> predicate, int limit); // see ReplicaCollection.filter(Predicate, int)\n\tjava.lang.Iterable<Replica> filterLazily(java.util.function.Predicate<? super Replica> predicate); // see ReplicaCollection.filterLazily(Predicate)\n\tjava.lang.Iterable<Replica> filterLazily(java.util.function.Predicate<? super Replica> predicate, int limit); // see ReplicaCollection.filterLazily(Predicate,int)\n\tvoid forEach(java.util.function.Consumer<? super Replica> forEach);\n\tReplica get(int i);\n\tboolean isEmpty();\n\tjava.util.Iterator<Replica> iterator();\n\tabstract ReplicaCollection.Builder<C> newBuilder(int initialCapacity);\n\tint size();\n\tabstract C snapshot();\n\tC sorted(java.util.Comparator<? super Replica> comparator); // see ReplicaCollection.sorted(Comparator)\n\tjava.util.stream.Stream<Replica> stream();\n\tC subList(int start, int end); // see ReplicaCollection.subList(int, int)\n}"}
{"index": 7659, "repo": "cassandra-all-4.1.2", "des": "The interface at the core of Cassandra authorization.", "code": "Interface IResource {\n\tjava.util.Set<Permission> applicablePermissions(); // Returns the set of Permissions that may be applied to this resource Certain permissions are not applicable to particular types of resources.\n\tboolean exists();\n\tjava.lang.String getName();\n\tIResource getParent(); // Gets next resource in the hierarchy.\n\tboolean hasParent(); // Indicates whether or not this resource has a parent in the hierarchy.\n}"}
{"index": 14801, "repo": "spring-data-commons-3.1.2", "des": "Proxy type detection utilities, extensible via ProxyUtils.ProxyDetector registered via Spring factories.", "code": "public abstract class ProxyUtils extends Object {\n\tstatic Class<?> getUserClass(Class<?> type); // Returns the user class for the given type.\n\tstatic Class<?> getUserClass(Object source); // Returns the user class for the given source object.\n}"}
{"index": 18078, "repo": "spring-ws-core-4.0.5", "des": "SOAP-specific EndpointInterceptor that logs the complete request and response envelope of SoapMessage messages.", "code": "public class SoapEnvelopeLoggingInterceptor extends AbstractLoggingInterceptor implements SoapEndpointInterceptor {\n\tprotected Source getSource(WebServiceMessage message); // Abstract template method that returns the Source for the given WebServiceMessage.\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Does nothing by default.\n\tvoid setLogFault(boolean logFault); // Indicates whether a SOAP Fault should be logged.\n\tboolean understands(SoapHeaderElement header); // Given a SoapHeaderElement, return whether or not this SoapEndpointInterceptor understands it.\n}"}
{"index": 3878, "repo": "hbase-client-3.0.0-alpha-4", "des": "A RemoteException with some extra information.", "code": "Class RemoteWithExtrasException {\n\tString getHostname(); // Returns null if not set\n\tint getPort(); // Returns -1 if not set\n\tboolean isDoNotRetry(); // Returns True if origin exception was a do not retry type.\n\tboolean isServerOverloaded(); // Returns True if the server was considered overloaded when the exception was thrown.\n\tIOException unwrapRemoteException();\n}"}
{"index": 6299, "repo": "commons-codec-1.16.0", "des": "The libc crypt() \"$1$\" and Apache \"$apr1$\" MD5-based hash algorithm.", "code": "Class Md5Crypt {\n\tstatic String apr1Crypt(byte[] keyBytes); // See apr1Crypt(byte[], String) for details.\n\tstatic String apr1Crypt(byte[] keyBytes, Random random); // See apr1Crypt(byte[], String) for details.\n\tstatic String apr1Crypt(byte[] keyBytes, String salt); // See apr1Crypt(String, String) for details.\n\tstatic String apr1Crypt(String keyBytes); // See apr1Crypt(String, String) for details.\n\tstatic String apr1Crypt(String keyBytes, String salt); // Generates an Apache htpasswd compatible \"$apr1$\" MD5 based hash value.\n\tstatic String md5Crypt(byte[] keyBytes); // Generates a libc6 crypt() compatible \"$1$\" hash value.\n\tstatic String md5Crypt(byte[] keyBytes, Random random); // Generates a libc6 crypt() compatible \"$1$\" hash value.\n\tstatic String md5Crypt(byte[] keyBytes, String salt); // Generates a libc crypt() compatible \"$1$\" MD5 based hash value.\n\tstatic String md5Crypt(byte[] keyBytes, String salt, String prefix); // Generates a libc6 crypt() \"$1$\" or Apache htpasswd \"$apr1$\" hash value.\n\tstatic String md5Crypt(byte[] keyBytes, String salt, String prefix, Random random); // Generates a libc6 crypt() \"$1$\" or Apache htpasswd \"$apr1$\" hash value.\n}"}
{"index": 2804, "repo": "tika-parsers-1.28.5", "des": "This class offers an implementation of NERecogniser based on ne_chunk() module of NLTK.", "code": "Class NLTKNERecogniser {\n\tSet<String> getEntityTypes(); // Gets set of entity types recognised by this recogniser\n\tboolean isAvailable(); // checks if this Named Entity recogniser is available for service\n\tMap<String,Set<String>> recognise(String text); // recognises names of entities in the text\n}"}
{"index": 15468, "repo": "spring-batch-core-5.0.2", "des": "Loads and unloads Jobs when the application context is created and destroyed.", "code": "public class AutomaticJobRegistrar extends Object implements org.springframework.core.Ordered, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.beans.factory.InitializingBean {\n\tvoid addApplicationContextFactory(ApplicationContextFactory applicationContextFactory); // Add a single ApplicationContextFactory to the set that is used to load contexts and jobs.\n\tvoid afterPropertiesSet();\n\tint getOrder();\n\tint getPhase();\n\tboolean isAutoStartup();\n\tboolean isRunning(); // Check whether this component has been started.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext); // The enclosing application context, which you can use to check whether events come from the expected source.\n\tvoid setApplicationContextFactories(ApplicationContextFactory[] applicationContextFactories); // Add an array of ApplicationContextFactory instances to the set that is used to load contexts and jobs.\n\tvoid setAutoStartup(boolean autoStartup);\n\tvoid setJobLoader(JobLoader jobLoader); // The job loader that is used to load and manage jobs.\n\tvoid setOrder(int order); // The order in which to start up and shutdown.\n\tvoid setPhase(int phase);\n\tvoid start(); // Take all the contexts from the factories provided and pass them to the JobLoader.\n\tvoid stop(); // Delegates to JobLoader.clear().\n\tvoid stop(Runnable callback);\n}"}
{"index": 11121, "repo": "tribuo-core-4.3.1", "des": "A DataSource which can read LibSVM formatted data.", "code": "public final class LibSVMDataSource<T extends Output<T>> extends Object implements ConfigurableDataSource<T> {\n\tint getMaxFeatureID(); // Gets the maximum feature ID found.\n\tOutputFactory<T> getOutputFactory(); // Returns the OutputFactory associated with this Output subclass.\n\tDataSourceProvenance getProvenance();\n\tboolean isZeroIndexed(); // Returns true if this dataset is zero indexed, false otherwise (i.e., it starts from 1).\n\tIterator<Example<T>> iterator();\n\tvoid postConfig(); // Used by the OLCUT configuration system, and should not be called by external code.\n\tint size(); // The number of examples.\n\tstatic <T extends Output<T>>void writeLibSVMFormat(Dataset<T> dataset, PrintStream out, boolean zeroIndexed, Function<T,Number> transformationFunc); // Writes out a dataset in LibSVM format.\n}"}
{"index": 786, "repo": "ignite-core-2.15.0", "des": "Defines \"rich\" iterator interface that is also acts like lambda function and iterable.", "code": "Interface GridIterator<T> {\n\tboolean hasNextX(); // This method is the same as Iterator.hasNext(), but allows for failure with exception.\n\tT nextX(); // This method is the same as Iterator.next(), but allows for failure with exception.\n\tvoid removeX(); // This method is the same as Iterator.remove(), but allows for failure with exception.\n}"}
{"index": 3498, "repo": "mahout-mr-0.13.0", "des": "A simple Recommender which uses a given DataModel and ItemSimilarity to produce recommendations.", "code": "Class GenericItemBasedRecommender {\n\tprotected float doEstimatePreference(long userID, PreferenceArray preferencesFromUser, long itemID);\n\tfloat estimatePreference(long userID, long itemID);\n\tprotected static MostSimilarItemsCandidateItemsStrategy getDefaultMostSimilarItemsCandidateItemsStrategy();\n\tItemSimilarity getSimilarity();\n\tList<RecommendedItem> mostSimilarItems(long[] itemIDs, int howMany);\n\tList<RecommendedItem> mostSimilarItems(long[] itemIDs, int howMany, boolean excludeItemIfNotSimilarToAll);\n\tList<RecommendedItem> mostSimilarItems(long[] itemIDs, int howMany, Rescorer<LongPair> rescorer);\n\tList<RecommendedItem> mostSimilarItems(long[] itemIDs, int howMany, Rescorer<LongPair> rescorer, boolean excludeItemIfNotSimilarToAll);\n\tList<RecommendedItem> mostSimilarItems(long itemID, int howMany);\n\tList<RecommendedItem> mostSimilarItems(long itemID, int howMany, Rescorer<LongPair> rescorer);\n\tList<RecommendedItem> recommend(long userID, int howMany, IDRescorer rescorer, boolean includeKnownItems);\n\tList<RecommendedItem> recommendedBecause(long userID, long itemID, int howMany); // Lists the items that were most influential in recommending a given item to a given user.\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n}"}
{"index": 3572, "repo": "hive-serde-4.0.0-alpha-2", "des": "Lazy objectinspector for avro serialization.", "code": "Class AvroLazyObjectInspector {\n\tObject getStructFieldData(Object data, StructField f); // returns null for data = null.\n\tList<Object> getStructFieldsDataAsList(Object data); // returns null for data = null.\n\tvoid setReaderSchema(org.apache.avro.Schema readerSchema); // Set the reader schema for the AvroLazyObjectInspector to the given schema\n\tvoid setSchemaRetriever(AvroSchemaRetriever schemaRetriever); // Set the AvroSchemaRetriever for the AvroLazyObjectInspector to the given class\n}"}
{"index": 12098, "repo": "jena-core-4.9.0", "des": "Extends the Graph interface to give additional means to query an inferred graph.", "code": "public interface InfGraph extends Graph {\n\tExtendedIterator<Triple> find(Node subject, Node property, Node object, Graph param); // An extension of the Graph.find interface which allows the caller to encode complex expressions in RDF and then refer to those expressions within the query triple.\n\tGraph getDeductionsGraph(); // Returns a derivations graph.\n\tIterator<Derivation> getDerivation(Triple triple); // Return the derivation of the given triple (which is the result of some previous find operation).\n\tNode getGlobalProperty(Node property); // Test a global boolean property of the graph.\n\tGraph getRawGraph(); // Return the raw RDF data Graph being processed (i.e.\n\tReasoner getReasoner(); // Return the Reasoner which is being used to answer queries to this graph.\n\tvoid prepare(); // Perform any initial processing and caching.\n\tvoid rebind(); // Cause the inference graph to reconsult the underlying graph to take into account changes.\n\tvoid rebind(Graph data); // Replace the underlying data graph for this inference graph and start any inferences over again.\n\tvoid reset(); // Reset any internal caches.\n\tvoid setDerivationLogging(boolean logOn); // Switch on/off derivation logging\n\tboolean testGlobalProperty(Node property); // A convenience version of getGlobalProperty which can only return a boolean result.\n\tValidityReport validate(); // Test the consistency of the bound data.\n}"}
{"index": 11179, "repo": "wicket-extensions-10.0.0-M1", "des": "Abstract wizard model that provides an implementation for handling wizard model listeners and provides base implementations of many methods.", "code": "public abstract class AbstractWizardModel extends Object implements IWizardModel {\n\tfinal void addListener(IWizardModelListener listener); // Adds a wizard model listener.\n\tvoid cancel(); // This implementation just fires a cancel event.\n\tvoid finish(); // This implementation just fires a finish event.\n\tprotected final void fireActiveStepChanged(IWizardStep step); // Notify listeners that the active step has changed.\n\tprotected final void fireWizardCancelled(); // Notify listeners that the wizard is finished.\n\tprotected final void fireWizardFinished(); // Notify listeners that the wizard is finished.\n\tboolean isCancelVisible(); // Gets whether cancel functionality is available.\n\tboolean isLastVisible(); // Checks if the last button should be displayed.\n\tfinal void removeListener(IWizardModelListener listener); // Removes a wizard model listener.\n\tvoid setCancelVisible(boolean cancelVisible); // Sets whether cancel functionality is available.\n\tvoid setLastVisible(boolean lastVisible); // Configures if the last button should be displayed.\n}"}
{"index": 7080, "repo": "calcite-core-1.34.0", "des": "RelOptSamplingParameters represents the parameters necessary to produce a sample of a relation.", "code": "Class RelOptSamplingParameters {\n\tint getRepeatableSeed(); // If isRepeatable() returns true, this method returns a user-specified seed value.\n\tfloat getSamplingPercentage(); // Returns the sampling percentage.\n\tboolean isBernoulli(); // Indicates whether Bernoulli or system sampling should be performed.\n\tboolean isRepeatable(); // Indicates whether the sample results should be repeatable.\n}"}
{"index": 488, "repo": "ignite-core-2.15.0", "des": "Cache key affinity which maps keys to nodes.", "code": "Interface AffinityFunction {\n\tList<List<ClusterNode>> assignPartitions(AffinityFunctionContext affCtx); // Gets affinity nodes for a partition.\n\tint partition(Object key); // Gets partition number for a given key starting from 0.\n\tint partitions(); // Gets total number of partitions available.\n\tvoid removeNode(UUID nodeId); // Removes node from affinity.\n\tvoid reset(); // Resets cache affinity to its initial state.\n}"}
{"index": 1793, "repo": "kafka-clients-3.5.0", "des": "This class allows to specify the desired offsets when using KafkaAdminClient.", "code": "Class OffsetSpec {\n\tstatic OffsetSpec earliest(); // Used to retrieve the earliest offset of a partition\n\tstatic OffsetSpec forTimestamp(long timestamp); // Used to retrieve the earliest offset whose timestamp is greater than or equal to the given timestamp in the corresponding partition\n\tstatic OffsetSpec latest(); // Used to retrieve the latest offset of a partition\n\tstatic OffsetSpec maxTimestamp(); // Used to retrieve the offset with the largest timestamp of a partition as message timestamps can be specified client side this may not match the log end offset returned by LatestSpec\n}"}
{"index": 5357, "repo": "druid-processing-26.0.0", "des": "Base type for buffer based 'any' aggregator for primitive numeric column selectors.", "code": "Class NumericAnyBufferAggregator<TSelector extends BaseNullableColumnValueSelector> {\n\tvoid aggregate(ByteBuffer buf, int position); // Aggregates metric values into the given aggregate byte representation Implementations of this method must read in the aggregate value from the buffer at the given position, aggregate the next element of data and write the updated aggregate value back into the buffer.\n\tvoid close(); // Release any resources used by the aggregator\n\tvoid init(ByteBuffer buf, int position); // Initializes the buffer location Implementations of this method must initialize the byte buffer at the given position Implementations must not change the position, limit or mark of the given buffer This method must not exceed the number of bytes returned by AggregatorFactory.getMaxIntermediateSizeWithNulls() in the corresponding AggregatorFactory\n\tvoid inspectRuntimeShape(RuntimeShapeInspector inspector); // Implementations of this method should call inspector.visit() with all fields of this class, which meet two conditions: 1.\n}"}
{"index": 18177, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "An additional contract for parameters which originate from parameters explicitly encountered in the source statement (HQL or native-SQL).", "code": "Interface ExplicitParameterSpecification {\n\tint getSourceColumn(); // Retrieves the column number (within the getSourceLine()) where this parameter occurs.\n\tint getSourceLine(); // Retrieves the line number on which this parameter occurs in the source query.\n}"}
{"index": 17996, "repo": "spring-ws-core-4.0.5", "des": "Abstract base class for WebServiceConnection implementations.", "code": "public abstract class AbstractWebServiceConnection extends Object implements WebServiceConnection {\n\tfinal void close(); // Closes this connection.\n\tprotected abstract TransportInputStream createTransportInputStream(); // Returns a TransportInputStream.\n\tprotected abstract TransportOutputStream createTransportOutputStream(); // Returns a TransportOutputStream for the given message.\n\tprotected void onClose(); // Template method invoked from close().\n\tprotected void onReceiveAfterRead(WebServiceMessage message); // Called when the given message has been read from the TransportInputStream.\n\tprotected void onReceiveBeforeRead(); // Called before a message has been read from the TransportInputStream.\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n\tprotected void onSendBeforeWrite(WebServiceMessage message); // Called before the given message has been written to the TransportOutputStream.\n\tfinal WebServiceMessage receive(WebServiceMessageFactory messageFactory); // Receives a message using the given WebServiceMessageFactory.\n\tfinal void send(WebServiceMessage message); // Sends the given message using this connection.\n}"}
{"index": 14330, "repo": "wicket-core-10.0.0-M1", "des": "This is Wicket's default IMarkupCache implementation.", "code": "public class MarkupCache extends Object implements IMarkupCache {\n\tvoid clear(); // Clear markup cache and force reload of all markup data\n\tstatic IMarkupCache get(); // A convenient helper to get the markup cache registered with the application.\n\tfinal Markup getMarkup(MarkupContainer container, Class<?> clazz, boolean enforceReload); // Gets any (immutable) markup resource for the container or any of its parent classes (markup inheritance)\n\tfinal MarkupCache.ICache<String,Markup> getMarkupCache(); // Get a unmodifiable map which contains the cached data.\n\tIMarkupCacheKeyProvider getMarkupCacheKeyProvider(MarkupContainer container); // Get the markup cache key provider to be used\n\tprotected Markup getMarkupFromCache(String cacheKey, MarkupContainer container); // Wicket's default implementation just uses the cacheKey to retrieve the markup from the cache.\n\tprotected <K, V> MarkupCache.ICache<K,V> newCacheImplementation(); // Allows you to change the map implementation which will hold the cache data.\n\tprotected Markup onMarkupNotFound(String cacheKey, MarkupContainer container, Markup markup); // Will be called if the markup was not in the cache yet and could not be found either.\n\tprotected Markup putIntoCache(String locationString, MarkupContainer container, Markup markup); // Put the markup into the cache if cacheKey is not null and the cache does not yet contain the cacheKey.\n\tfinal IMarkupFragment removeMarkup(String cacheKey); // Note that this method will be called from a \"cleanup\" thread which might not have a thread local application.\n\tvoid shutdown(); // Will be called by the application while shutting down.\n\tfinal int size();\n}"}
{"index": 15080, "repo": "spring-vault-core-3.0.4", "des": "Value object representing the result of a Signature validation.", "code": "public class SignatureValidation extends Object {\n\tboolean equals(Object o);\n\tstatic SignatureValidation invalid(); // Factory method to create a SignatureValidation object representing a failed signature validation.\n\tboolean isValid();\n\tstatic SignatureValidation valid(); // Factory method to create a SignatureValidation object representing a successfully validated signature.\n}"}
{"index": 1714, "repo": "samza-api-1.8.0", "des": "Function interface for providing rate limiting credits for each table record.", "code": "Interface TableRateLimiter.CreditFunction<K,V> {\n\tdefault int getCredits(int opId, java.lang.Object... args); // Get the number of credits required for the opId and associated args.\n\tint getCredits(K key, V value, java.lang.Object... args); // Get the number of credits required for the key and value pair.\n}"}
{"index": 8974, "repo": "hbase-server-3.0.0-alpha-4", "des": "This class creates a single process HBase cluster.", "code": "Class LocalHBaseCluster {\n\tJVMClusterUtil.MasterThread addMaster();\n\tJVMClusterUtil.MasterThread addMaster(org.apache.hadoop.conf.Configuration c, int index);\n\tJVMClusterUtil.MasterThread addMaster(org.apache.hadoop.conf.Configuration c, int index, User user);\n\tJVMClusterUtil.RegionServerThread addRegionServer();\n\tJVMClusterUtil.RegionServerThread addRegionServer(org.apache.hadoop.conf.Configuration config, int index);\n\tJVMClusterUtil.RegionServerThread addRegionServer(org.apache.hadoop.conf.Configuration config, int index, User user);\n\tHMaster getActiveMaster(); // Gets the current active master, if available.\n\torg.apache.hadoop.conf.Configuration getConfiguration(); // Returns the Configuration used by this LocalHBaseCluster\n\tList<JVMClusterUtil.MasterThread> getLiveMasters();\n\tList<JVMClusterUtil.RegionServerThread> getLiveRegionServers();\n\tHMaster getMaster(int serverNumber); // Returns the HMaster thread\n\tList<JVMClusterUtil.MasterThread> getMasters(); // Returns Read-only list of master threads.\n\tHRegionServer getRegionServer(int serverNumber); // Returns region server\n\tList<JVMClusterUtil.RegionServerThread> getRegionServers(); // Returns Read-only list of region server threads.\n\tstatic boolean isLocal(org.apache.hadoop.conf.Configuration c);\n\tvoid join(); // Wait for Mini HBase Cluster to shut down.\n\tstatic void main(String[] args); // Test things basically work.\n\tvoid shutdown(); // Shut down the mini HBase cluster\n\tvoid startup(); // Start the cluster.\n\tString waitOnMaster(int serverNumber); // Wait for the specified master to stop.\n\tString waitOnMaster(JVMClusterUtil.MasterThread masterThread); // Wait for the specified master to stop.\n\tString waitOnRegionServer(int serverNumber); // Wait for the specified region server to stop.\n\tString waitOnRegionServer(JVMClusterUtil.RegionServerThread rst); // Wait for the specified region server to stop.\n}"}
{"index": 16569, "repo": "spring-beans-6.0.11", "des": "BeanWiringInfoResolver that uses the Configurable annotation to identify which classes need autowiring.", "code": "public class AnnotationBeanWiringInfoResolver extends Object implements BeanWiringInfoResolver {\n\tprotected BeanWiringInfo buildWiringInfo(Object beanInstance, Configurable annotation); // Build the BeanWiringInfo for the given Configurable annotation.\n\tprotected String getDefaultBeanName(Object beanInstance); // Determine the default bean name for the specified bean instance.\n\tBeanWiringInfo resolveWiringInfo(Object beanInstance); // Resolve the BeanWiringInfo for the given bean instance.\n}"}
{"index": 16346, "repo": "spring-session-core-3.1.1", "des": "Switches the HttpSession implementation to be backed by a Session.", "code": "@Order(-2147483598) public class SessionRepositoryFilter<S extends Session> extends Object {\n\tvoid destroy();\n\tfinal void doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain filterChain); // This doFilter implementation stores a request attribute for \"already filtered\", proceeding without filtering again if the attribute is already there.\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain); // Same contract as for doFilter, but guaranteed to be just invoked once per request within a single request thread.\n\tprotected void doFilterNestedErrorDispatch(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain); // Typically an ERROR dispatch happens after the REQUEST dispatch completes, and the filter chain starts anew.\n\tprotected String getAlreadyFilteredAttributeName(); // Return the name of the request attribute that identifies that a request is already filtered.\n\tvoid init(jakarta.servlet.FilterConfig config);\n\tvoid setHttpSessionIdResolver(HttpSessionIdResolver httpSessionIdResolver); // Sets the HttpSessionIdResolver to be used.\n}"}
{"index": 2348, "repo": "commons-geometry-euclidean-1.0", "des": "Class containing minimum and maximum points defining a 2D axis-aligned bounding box.", "code": "Class Bounds2D {\n\tstatic Bounds2D.Builder builder(); // Construct a new Bounds2D.Builder instance for creating bounds.\n\tboolean contains(Vector2D pt); // Return true if the given point is strictly within or on the boundary of the bounding box.\n\tboolean contains(Vector2D pt, Precision.DoubleEquivalence precision); // Return true if the given point is within or on the boundary of the bounding box, using the given precision context for floating point comparisons.\n\tboolean equals(Object obj);\n\tstatic Bounds2D from(Iterable<Vector2D> points); // Construct a new instance from the given points.\n\tstatic Bounds2D from(Vector2D first, Vector2D... more); // Construct a new instance from the given points.\n\tboolean hasSize(Precision.DoubleEquivalence precision); // Return true if the bounding box has non-zero size along each coordinate axis, as evaluated by the given precision context.\n\tBounds2D intersection(Bounds2D other); // Return the intersection of this bounding box and the argument, or null if no intersection exists.\n\tboolean intersects(Bounds2D other); // Return true if any point on the interior or boundary of this instance is also considered to be on the interior or boundary of the argument.\n\tParallelogram toRegion(Precision.DoubleEquivalence precision); // Return a hyperplane-bounded region containing the same points as this instance.\n}"}
{"index": 12842, "repo": "spring-data-mongodb-4.1.2", "des": "Mongo specific Repository interface with reactive support.", "code": "@NoRepositoryBean public interface ReactiveMongoRepository<T,ID> extends ReactiveCrudRepository<T,ID>, ReactiveSortingRepository<T,ID>, ReactiveQueryByExampleExecutor<T> {\n\t<S extends T>reactor.core.publisher.Flux<S> findAll(Example<S> example); // Returns all entities matching the given Example.\n\t<S extends T>reactor.core.publisher.Flux<S> findAll(Example<S> example, Sort sort); // Returns all entities matching the given Example applying the given Sort.\n\t<S extends T>reactor.core.publisher.Flux<S> insert(Iterable<S> entities); // Inserts the given entities.\n\t<S extends T>reactor.core.publisher.Flux<S> insert(org.reactivestreams.Publisher<S> entities); // Inserts the given entities.\n\t<S extends T>reactor.core.publisher.Mono<S> insert(S entity); // Inserts the given entity.\n}"}
{"index": 9814, "repo": "commons-math3-3.6.1", "des": "Enumerate representing the location of an element with respect to an hyperplane of a space.", "code": "Enum Side {\n\tstatic Side valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Side[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 12822, "repo": "spring-data-mongodb-4.1.2", "des": "AggregationOperationContext implementation prefixing non-command keys on root level with the given prefix.", "code": "public class PrefixingDelegatingAggregationOperationContext extends Object implements AggregationOperationContext {\n\torg.bson.codecs.configuration.CodecRegistry getCodecRegistry(); // Get the underlying CodecRegistry used by the MongoDB Java driver.\n\tFields getFields(Class<?> type); // Returns the Fields exposed by the type.\n\torg.bson.Document getMappedObject(org.bson.Document document); // Returns the mapped Document, potentially converting the source considering mapping metadata etc.\n\torg.bson.Document getMappedObject(org.bson.Document document, Class<?> type); // Returns the mapped Document, potentially converting the source considering mapping metadata for the given type.\n\tExposedFields.FieldReference getReference(String name); // Returns the ExposedFields.FieldReference for the field with the given name.\n\tExposedFields.FieldReference getReference(Field field); // Returns a ExposedFields.FieldReference for the given field.\n}"}
{"index": 18072, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the EndpointMapping interface to map from SOAPAction headers to endpoint beans.", "code": "public class SoapActionEndpointMapping extends AbstractMapBasedEndpointMapping implements SoapEndpointMapping {\n\tprotected final EndpointInvocationChain createEndpointInvocationChain(MessageContext messageContext, Object endpoint, EndpointInterceptor[] interceptors); // Creates a new SoapEndpointInvocationChain based on the given endpoint, and the set interceptors, and actors/roles.\n\tprotected String getLookupKeyForMessage(MessageContext messageContext); // Returns the endpoint key for the given message context.\n\tfinal void setActorOrRole(String actorOrRole); // Sets a single SOAP actor/actorOrRole to apply to all endpoints mapped by the delegate endpoint mapping.\n\tfinal void setActorsOrRoles(String[] actorsOrRoles); // Sets the array of SOAP actors/actorsOrRoles to apply to all endpoints mapped by the delegate endpoint mapping.\n\tfinal void setUltimateReceiver(boolean ultimateReceiver); // Indicates whether this the endpoint fulfills the SOAP 1.2 Ultimate Receiver role.\n\tprotected boolean validateLookupKey(String key); // Validates the given endpoint key.\n}"}
{"index": 8270, "repo": "spring-ws-3.0.10.RELEASE", "des": "Subinterface of SoapBody that exposes SOAP 1.", "code": "Interface Soap11Body {\n\tSoap11Fault addClientOrSenderFault(String faultStringOrReason, Locale locale); // Adds a Client/Sender fault to the body.\n\tSoap11Fault addFault(QName faultCode, String faultString, Locale faultStringLocale); // Adds a SOAP 1.1 Fault to the body with a localized message.\n\tSoap11Fault addMustUnderstandFault(String faultStringOrReason, Locale locale); // Adds a MustUnderstand fault to the body.\n\tSoap11Fault addServerOrReceiverFault(String faultStringOrReason, Locale locale); // Adds a Server/Receiver fault to the body.\n\tSoap11Fault addVersionMismatchFault(String faultStringOrReason, Locale locale); // Adds a VersionMismatch fault to the body.\n\tSoap11Fault getFault(); // Returns the SoapFault of this body.\n}"}
{"index": 17484, "repo": "spring-integration-redis-6.1.2", "des": "A MessageProducerSupport for reading messages from a Redis Stream and publishing them into the provided output channel.", "code": "public class ReactiveRedisStreamMessageProducer extends org.springframework.integration.endpoint.MessageProducerSupport {\n\tprotected void doStart();\n\tString getComponentType();\n\tprotected void onInit();\n\tvoid setAutoAck(boolean autoAck); // Set whether or not acknowledge message read in the Consumer Group.\n\tvoid setBatchSize(int recordsPerPoll); // Configure a batch size for the COUNT option during reading.\n\tvoid setConsumerGroup(String consumerGroup); // Set the name of the Consumer Group.\n\tvoid setConsumerName(String consumerName); // Set the name of the consumer.\n\tvoid setCreateConsumerGroup(boolean createConsumerGroup); // Create the Consumer Group if and only if it does not exist.\n\tvoid setExtractPayload(boolean extractPayload); // Configure this channel adapter to extract or not value from the Record.\n\tvoid setObjectMapper(org.springframework.data.redis.hash.HashMapper<?,?,?> hashMapper); // Configure a hash mapper.\n\tvoid setOnErrorResume(Function<? super Throwable,? extends org.reactivestreams.Publisher<Void>> resumeFunction); // Configure a resume Function to resume the main sequence when polling the stream fails.\n\tvoid setPollTimeout(Duration pollTimeout); // Configure a poll timeout for the BLOCK option during reading.\n\tvoid setReadOffset(org.springframework.data.redis.connection.stream.ReadOffset readOffset); // Define the offset from which we want to read message.\n\tvoid setSerializer(org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair<?> pair); // Configure a key, hash key and hash value serializer.\n\tvoid setStreamReceiverOptions(org.springframework.data.redis.stream.StreamReceiver.StreamReceiverOptions<String,?> streamReceiverOptions); // Set ReactiveStreamOperations used to customize the StreamReceiver.\n\tvoid setTargetType(Class<?> targetType); // Configure a hash target type.\n}"}
{"index": 3682, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableIntObjectInspector inspects a IntWritable Object.", "code": "Class WritableIntObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tObject create(int value); // Create an object with the value.\n\tint get(Object o); // Get the int data.\n\tObject getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n\tObject set(Object o, int value); // Set the object with the value.\n}"}
{"index": 11367, "repo": "spring-context-6.0.11", "des": "Helper class that simplifies JNDI operations.", "code": "public class JndiTemplate extends Object {\n\tvoid bind(String name, Object object); // Bind the given object to the current JNDI context, using the given name.\n\tprotected Context createInitialContext(); // Create a new JNDI initial context.\n\t<T> T execute(JndiCallback<T> contextCallback); // Execute the given JNDI context callback implementation.\n\tContext getContext(); // Obtain a JNDI context corresponding to this template's configuration.\n\tProperties getEnvironment(); // Return the environment for the JNDI InitialContext, if any.\n\tObject lookup(String name); // Look up the object with the given name in the current JNDI context.\n\t<T> T lookup(String name, Class<T> requiredType); // Look up the object with the given name in the current JNDI context.\n\tvoid rebind(String name, Object object); // Rebind the given object to the current JNDI context, using the given name.\n\tvoid releaseContext(Context ctx); // Release a JNDI context as obtained from getContext().\n\tvoid setEnvironment(Properties environment); // Set the environment for the JNDI InitialContext.\n\tvoid unbind(String name); // Remove the binding for the given name from the current JNDI context.\n}"}
{"index": 13170, "repo": "spring-test-6.0.11", "des": "A CacheAwareContextLoaderDelegate is responsible for loading and closing application contexts, interacting transparently with a ContextCache behind the scenes.", "code": "public interface CacheAwareContextLoaderDelegate {\n\tvoid closeContext(MergedContextConfiguration mergedContextConfiguration, DirtiesContext.HierarchyMode hierarchyMode); // Remove the application context for the supplied MergedContextConfiguration from the ContextCache and close it if it is an instance of ConfigurableApplicationContext.\n\tdefault boolean isContextLoaded(MergedContextConfiguration mergedContextConfiguration); // Determine if the application context for the supplied MergedContextConfiguration has been loaded (i.e., is present in the ContextCache).\n\torg.springframework.context.ApplicationContext loadContext(MergedContextConfiguration mergedContextConfiguration); // Load the application context for the supplied MergedContextConfiguration by delegating to the ContextLoader configured in the given MergedContextConfiguration.\n}"}
{"index": 10881, "repo": "spring-data-redis-3.1.2", "des": "Expiration holds a value with its associated TimeUnit.", "code": "public class Expiration extends Object {\n\tstatic Expiration from(long expirationTime, TimeUnit timeUnit); // Creates new Expiration with the provided TimeUnit.\n\tstatic Expiration from(Duration duration); // Creates new Expiration with the provided Duration.\n\tlong getConverted(TimeUnit targetTimeUnit); // Get the expiration time converted into the desired targetTimeUnit.\n\tlong getExpirationTime(); // Get the expiration time.\n\tlong getExpirationTimeInMilliseconds(); // Get the expiration time converted into TimeUnit.MILLISECONDS.\n\tlong getExpirationTimeInSeconds(); // Get the expiration time converted into TimeUnit.SECONDS.\n\tTimeUnit getTimeUnit(); // Get the time unit for the expiration time.\n\tboolean isKeepTtl();\n\tboolean isPersistent();\n\tboolean isUnixTimestamp();\n\tstatic Expiration keepTtl(); // Obtain an Expiration that indicates to keep the existing one.\n\tstatic Expiration milliseconds(long expirationTime); // Creates new Expiration with TimeUnit.MILLISECONDS.\n\tstatic Expiration persistent(); // Creates new persistent Expiration.\n\tstatic Expiration seconds(long expirationTime); // Creates new Expiration with TimeUnit.SECONDS.\n\tstatic Expiration unixTimestamp(long unixTimestamp, TimeUnit timeUnit); // Creates new Expiration with the given unix timestamp and TimeUnit.\n}"}
{"index": 14280, "repo": "wicket-core-10.0.0-M1", "des": "Context of a IManageablePage when it is stored in an IPageStore, decoupling it from request cycle and session.", "code": "public interface IPageContext {\n\t<T> T getRequestData(MetaDataKey<T> key, Supplier<T> defaultValue); // Get data from the current request cycle.\n\t<T extends Serializable>T getSessionAttribute(String key, Supplier<T> defaultValue); // Get an attribute from the session.\n\t<T extends Serializable>T getSessionData(MetaDataKey<T> key, Supplier<T> defaultValue); // Get metadata from the session.\n\tString getSessionId(boolean bind); // Get the identifier of the session.\n}"}
{"index": 18058, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the Wsdl11Definition that uses a provider-based mechanism to populate a WSDL4J Definition.", "code": "public class ProviderBasedWsdl4jDefinition extends Wsdl4jDefinition implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tBindingsProvider getBindingsProvider(); // Returns the BindingsProvider for this definition.\n\tImportsProvider getImportsProvider(); // Returns the ImportsProvider for this definition.\n\tMessagesProvider getMessagesProvider(); // Returns the MessagesProvider for this definition.\n\tPortTypesProvider getPortTypesProvider(); // Returns the PortTypesProvider for this definition.\n\tServicesProvider getServicesProvider(); // Returns the ServicesProvider for this definition.\n\tString getTargetNamespace(); // Returns the target namespace for the WSDL definition.\n\tTypesProvider getTypesProvider(); // Returns the TypesProvider for this definition.\n\tvoid setBindingsProvider(BindingsProvider bindingsProvider); // Sets the BindingsProvider for this definition.\n\tvoid setImportsProvider(ImportsProvider importsProvider); // Sets the ImportsProvider for this definition.\n\tvoid setMessagesProvider(MessagesProvider messagesProvider); // Sets the MessagesProvider for this definition.\n\tvoid setPortTypesProvider(PortTypesProvider portTypesProvider); // Sets the PortTypesProvider for this definition.\n\tvoid setServicesProvider(ServicesProvider servicesProvider); // Sets the ServicesProvider for this definition.\n\tvoid setTargetNamespace(String targetNamespace); // Sets the target namespace used for this definition.\n\tvoid setTypesProvider(TypesProvider typesProvider); // Sets the TypesProvider for this definition.\n}"}
{"index": 14808, "repo": "spring-data-commons-3.1.2", "des": "Builder assembling Predicate out of PropertyValues.", "code": "public class QuerydslPredicateBuilder extends Object {\n\tcom.querydsl.core.types.Predicate getPredicate(TypeInformation<?> type, MultiValueMap<String,?> values, QuerydslBindings bindings); // Creates a Querydsl Predicate for the given values, QuerydslBindings on the given TypeInformation.\n\tstatic boolean isEmpty(com.querydsl.core.types.Predicate predicate); // Returns whether the given Predicate represents an empty predicate instance.\n}"}
{"index": 9239, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "This class is a ContainerRuntime implementation that uses the native container-executor binary via a PrivilegedOperationExecutor instance to launch processes using the standard process model.", "code": "Class DefaultLinuxContainerRuntime {\n\torg.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair execContainer(ContainerExecContext ctx); // Run a program in container.\n\tString getExposedPorts(Container container); // Return the exposed ports of the container.\n\tString[] getIpAndHost(Container container); // Return the host and ip of the container.\n\tvoid initialize(org.apache.hadoop.conf.Configuration conf, Context nmContext); // Initialize the runtime.\n\tboolean isRuntimeRequested(Map<String,String> env); // Return whether the given environment variables indicate that the operation is requesting this runtime.\n\tvoid launchContainer(ContainerRuntimeContext ctx); // Launch a container.\n\tvoid prepareContainer(ContainerRuntimeContext ctx); // Prepare a container to be ready for launch.\n\tvoid reapContainer(ContainerRuntimeContext ctx); // Perform any container cleanup that may be required.\n\tvoid relaunchContainer(ContainerRuntimeContext ctx); // Relaunch a container.\n\tvoid signalContainer(ContainerRuntimeContext ctx); // Signal a container.\n}"}
{"index": 11447, "repo": "spring-context-6.0.11", "des": "javax.script (JSR-223) based implementation of Spring's ScriptEvaluator strategy interface.", "code": "public class StandardScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware {\n\tObject evaluate(ScriptSource script); // Evaluate the given script.\n\tObject evaluate(ScriptSource script, Map<String,Object> argumentBindings); // Evaluate the given script with the given arguments.\n\tprotected ScriptEngine getScriptEngine(ScriptSource script); // Obtain the JSR-223 ScriptEngine to use for the given script.\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setEngineName(String engineName); // Set the name of the script engine for evaluating the scripts (e.g.\n\tvoid setGlobalBindings(Map<String,Object> globalBindings); // Set the globally scoped bindings on the underlying script engine manager, shared by all scripts, as an alternative to script argument bindings.\n\tvoid setLanguage(String language); // Set the name of the language meant for evaluating the scripts (e.g.\n}"}
{"index": 4785, "repo": "hadoop-common-3.3.4", "des": "Implements a dynamic Bloom filter, as defined in the INFOCOM 2006 paper.", "code": "Class DynamicBloomFilter {\n\tvoid add(org.apache.hadoop.util.bloom.Key key); // Adds a key to this filter.\n\tvoid and(org.apache.hadoop.util.bloom.Filter filter); // Peforms a logical AND between this filter and a specified filter.\n\tboolean membershipTest(org.apache.hadoop.util.bloom.Key key); // Determines wether a specified key belongs to this filter.\n\tvoid not(); // Performs a logical NOT on this filter.\n\tvoid or(org.apache.hadoop.util.bloom.Filter filter); // Peforms a logical OR between this filter and a specified filter.\n\tvoid readFields(DataInput in); // Deserialize the fields of this object from in.\n\tvoid write(DataOutput out); // Serialize the fields of this object to out.\n\tvoid xor(org.apache.hadoop.util.bloom.Filter filter); // Peforms a logical XOR between this filter and a specified filter.\n}"}
{"index": 1316, "repo": "ignite-core-2.15.0", "des": "WAL state ack message (sent from participant node to coordinator).", "code": "Class WalStateAckMessage {\n\tboolean affNode();\n\tboolean changed();\n\tshort directType(); // Gets message type.\n\t@Nullable String errorMessage();\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tUUID operationId();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tUUID senderNodeId();\n\tvoid senderNodeId(UUID sndNodeId);\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 9774, "repo": "commons-math3-3.6.1", "des": "Defines the process dynamics model for the use with a KalmanFilter.", "code": "Interface ProcessModel {\n\tRealMatrix getControlMatrix(); // Returns the control matrix.\n\tRealMatrix getInitialErrorCovariance(); // Returns the initial error covariance matrix.\n\tRealVector getInitialStateEstimate(); // Returns the initial state estimation vector.\n\tRealMatrix getProcessNoise(); // Returns the process noise matrix.\n\tRealMatrix getStateTransitionMatrix(); // Returns the state transition matrix.\n}"}
{"index": 11801, "repo": "spring-kafka-3.0.9", "des": "Invoked by a listener container with remaining, unprocessed, records (including the failed record).", "code": "@FunctionalInterface public interface AfterRollbackProcessor<K,V> {\n\tdefault void clearThreadState(); // Optional method to clear thread state; will be called just before a consumer thread terminates.\n\tdefault boolean isProcessInTransaction(); // Return true to invoke process(List, Consumer, MessageListenerContainer, Exception, boolean, ContainerProperties.EOSMode) in a new transaction.\n\tvoid process(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> records, org.apache.kafka.clients.consumer.Consumer<K,V> consumer, MessageListenerContainer container, Exception exception, boolean recoverable, ContainerProperties.EOSMode eosMode); // Process the remaining records.\n}"}
{"index": 13961, "repo": "spring-webflux-6.0.11", "des": "Convenience subclass of UrlBasedViewResolver that supports ScriptTemplateView and custom subclasses of it.", "code": "public class ScriptTemplateViewResolver extends UrlBasedViewResolver {\n\tprotected AbstractUrlBasedView instantiateView(); // Instantiate the specified view class.\n\tprotected Class<?> requiredViewClass(); // Return the required type of view for this resolver.\n}"}
{"index": 18055, "repo": "spring-ws-core-4.0.5", "des": "Interceptor that transforms the payload of WebServiceMessages using XSLT stylesheet.", "code": "public class PayloadTransformingInterceptor extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointInterceptor, org.springframework.beans.factory.InitializingBean {\n\tvoid afterCompletion(MessageContext messageContext, Object endpoint, Exception ex); // Does nothing by default.\n\tvoid afterPropertiesSet();\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Does nothing by default.\n\tboolean handleRequest(MessageContext messageContext, Object endpoint); // Transforms the request message in the given message context using a provided stylesheet.\n\tboolean handleResponse(MessageContext messageContext, Object endpoint); // Transforms the response message in the given message context using a stylesheet.\n\tvoid setRequestXslt(org.springframework.core.io.Resource requestXslt); // Sets the XSLT stylesheet to use for transforming incoming request.\n\tvoid setResponseXslt(org.springframework.core.io.Resource responseXslt); // Sets the XSLT stylesheet to use for transforming outgoing responses.\n}"}
{"index": 11588, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an AuthenticationProvider for the OpenID Connect Core 1.0 Authorization Code Grant Flow.", "code": "public class OidcAuthorizationCodeAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider {\n\torg.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication authentication);\n\tfinal void setAuthoritiesMapper(org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper authoritiesMapper); // Sets the GrantedAuthoritiesMapper used for mapping OAuth2AuthenticatedPrincipal.getAuthorities()} to a new set of authorities which will be associated to the OAuth2LoginAuthenticationToken.\n\tfinal void setJwtDecoderFactory(org.springframework.security.oauth2.jwt.JwtDecoderFactory<ClientRegistration> jwtDecoderFactory); // Sets the JwtDecoderFactory used for OidcIdToken signature verification.\n\tboolean supports(Class<?> authentication);\n}"}
{"index": 9988, "repo": "commons-text-1.10.0", "des": "This stores a SimilarityScore implementation and a CharSequence \"left\" string.", "code": "Class SimilarityScoreFrom<R> {\n\tR apply(CharSequence right); // This compares \"left\" field against the \"right\" parameter using the \"similarity score\" implementation.\n\tCharSequence getLeft(); // Gets the left parameter.\n\tSimilarityScore<R> getSimilarityScore(); // Gets the edit distance.\n}"}
{"index": 12999, "repo": "spring-integration-file-6.1.2", "des": "A MessageProducerSpec for file tailing adapters.", "code": "public class TailAdapterSpec extends org.springframework.integration.dsl.MessageProducerSpec<TailAdapterSpec,FileTailingMessageProducerSupport> {\n\tTailAdapterSpec autoStartup(boolean autoStartup);\n\tTailAdapterSpec delay(long delay); // The delay between checks of the file for new content in milliseconds.\n\tprotected FileTailingMessageProducerSupport doGet();\n\tTailAdapterSpec enableStatusReader(boolean enableStatusReader); // This field control the stderr events.\n\tTailAdapterSpec end(boolean end); // If true, tail from the end of the file, otherwise include all lines from the beginning.\n\tTailAdapterSpec errorChannel(String errorChannel);\n\tTailAdapterSpec errorChannel(org.springframework.messaging.MessageChannel errorChannel);\n\tTailAdapterSpec errorMessageStrategy(org.springframework.integration.support.ErrorMessageStrategy errorMessageStrategy);\n\tprotected TailAdapterSpec file(File file);\n\tTailAdapterSpec fileDelay(long fileDelay); // The delay in milliseconds between attempts to tail a non-existent file, or between attempts to execute a process if it fails for any reason.\n\tTailAdapterSpec id(String id);\n\tTailAdapterSpec idleEventInterval(long idleEventInterval); // Specify the idle interval before start sending idle events.\n\tTailAdapterSpec nativeOptions(String nativeOptions); // Specify the options string for native tail command.\n\tTailAdapterSpec outputChannel(String outputChannel);\n\tTailAdapterSpec outputChannel(org.springframework.messaging.MessageChannel outputChannel);\n\tTailAdapterSpec phase(int phase);\n\tTailAdapterSpec reopen(boolean reopen); // If true, close and reopen the file between reading chunks.\n\tTailAdapterSpec sendTimeout(long sendTimeout);\n\tTailAdapterSpec shouldTrack(boolean shouldTrack);\n\tTailAdapterSpec taskExecutor(org.springframework.core.task.TaskExecutor taskExecutor); // Configure a task executor.\n\tTailAdapterSpec taskScheduler(org.springframework.scheduling.TaskScheduler taskScheduler); // Set a task scheduler - defaults to the integration 'taskScheduler'.\n}"}
{"index": 2926, "repo": "tink-1.10.0", "des": "This key manager generates new AesCtrHmacAeadKey keys and produces new instances of EncryptThenAuthenticate.", "code": "Class AesCtrHmacAeadKeyManager {\n\tstatic KeyTemplate aes128CtrHmacSha256Template();\n\tstatic KeyTemplate aes256CtrHmacSha256Template();\n\tTinkFipsUtil.AlgorithmFipsCompatibility fipsStatus(); // Returns the FIPS compatibility of this KeyTypeManager.\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<AesCtrHmacAeadKeyFormat,AesCtrHmacAeadKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tAesCtrHmacAeadKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(AesCtrHmacAeadKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 2730, "repo": "commons-dbcp2-2.9.0", "des": "TransactionRegistry tracks Connections and XAResources in a transacted environment for a single XAConnectionFactory.", "code": "Class TransactionRegistry {\n\tTransactionContext getActiveTransactionContext(); // Gets the active TransactionContext or null if not Transaction is active.\n\tXAResource getXAResource(Connection connection); // Gets the XAResource registered for the connection.\n\tvoid registerConnection(Connection connection, XAResource xaResource); // Registers the association between a Connection and a XAResource.\n\tvoid unregisterConnection(Connection connection); // Unregisters a destroyed connection from TransactionRegistry.\n}"}
{"index": 11145, "repo": "tribuo-core-4.3.1", "des": "An interface associated with a specific Output, which can generate the appropriate Output subclass, and OutputInfo subclass.", "code": "public interface OutputFactory<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.config.Configurable, ProtoSerializable<org.tribuo.protos.core.OutputFactoryProto>, com.oracle.labs.mlrg.olcut.provenance.Provenancable<OutputFactoryProvenance>, Serializable {\n\tImmutableOutputInfo<T> constructInfoForExternalModel(Map<T,Integer> mapping); // Creates an ImmutableOutputInfo from the supplied mapping.\n\tstatic OutputFactory<?> deserialize(org.tribuo.protos.core.OutputFactoryProto proto); // Deserializes a OutputFactoryProto into a OutputFactory subclass.\n\tMutableOutputInfo<T> generateInfo(); // Generates the appropriate MutableOutputInfo so the output values can be tracked by a Dataset or other aggregate.\n\t<V> T generateOutput(V label); // Parses the V and generates the appropriate Output value.\n\tdefault <V> List<T> generateOutputs(List<V> inputs); // Generate a list of outputs from the supplied list of inputs.\n\tEvaluator<T,? extends Evaluation<T>> getEvaluator(); // Gets an Evaluator suitable for measuring performance of predictions for the Output subclass.\n\tdefault Class<T> getTypeWitness(); // Gets the output class that this factory supports.\n\tT getUnknownOutput(); // Returns the singleton unknown output of type T which can be used for prediction time examples.\n\tstatic <T extends Output<T>>void validateMapping(Map<T,Integer> mapping); // Validates that the mapping can be used as an output info, i.e.\n}"}
{"index": 14424, "repo": "wicket-core-10.0.0-M1", "des": "A component which displays localizable image resources within a picture tag.", "code": "public class Source extends Image {\n\tfinal CrossOrigin getCrossOrigin(); // Unsupported for source tag\n\tString getMedia(); // Gets the media attribute information\n\tprotected void onComponentTag(ComponentTag tag); // Processes the component tag.\n\tvoid setCrossOrigin(CrossOrigin crossorigin); // Unsupported for source tag\n\tvoid setMedia(String media); // Sets the media attribute information\n}"}
{"index": 10047, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Default implementation of GridProjection.", "code": "Class DefaultGridProjection {\n\tboolean acceptMember(GridMember member); // Asks a projection if it accepted a member.\n\tSatisfyStateData getSatisfyState(); // Gets the satisfy state.\n\tvoid setLocality(boolean locality);\n}"}
{"index": 18619, "repo": "poi-ooxml-5.2.3", "des": "Interface for the signature policy service.", "code": "Interface SignaturePolicyService {\n\tString getSignaturePolicyDescription(); // Gives back the short description of the signature policy or null if a description is not available.\n\tbyte[] getSignaturePolicyDocument(); // Gives back the signature policy document.\n\tString getSignaturePolicyDownloadUrl(); // Gives back the download URL where the signature policy document can be found.\n\tString getSignaturePolicyIdentifier(); // Gives back the signature policy identifier URI.\n}"}
{"index": 871, "repo": "ignite-core-2.15.0", "des": "Heap-space optimized version of calculated affinity assignment.", "code": "Class HistoryAffinityAssignmentImpl {\n\tList<List<ClusterNode>> assignment();\n\tSet<Integer> backupPartitions(UUID nodeId); // Get backup partitions for specified node ID.\n\tboolean equals(Object o);\n\tList<ClusterNode> get(int part); // Get affinity nodes for partition.\n\tCollection<UUID> getIds(int part); // Get affinity node IDs for partition.\n\tList<List<ClusterNode>> idealAssignment();\n\tSet<ClusterNode> nodes();\n\tHistoryAffinityAssignment origin(); // In case this instance is lightweight wrapper of another instance, this method should return reference to an original one.\n\tSet<Integer> partitionPrimariesDifferentToIdeal();\n\tSet<ClusterNode> primaryPartitionNodes();\n\tSet<Integer> primaryPartitions(UUID nodeId); // Get primary partitions for specified node ID.\n\tboolean requiresHistoryCleanup(); // Should return true if instance is \"heavy\" and should be taken into account during history size management.\n\tAffinityTopologyVersion topologyVersion();\n}"}
{"index": 18541, "repo": "hibernate-core-5.6.15.Final", "des": "Information extracted from DatabaseMetaData regarding what the JDBC driver reports as being supported or not.", "code": "Interface ExtractedDatabaseMetaData {\n\tboolean doesDataDefinitionCauseTransactionCommit(); // Did the driver report to DDL statements performed within a transaction performing an implicit commit of the transaction.\n\tjava.lang.String getConnectionCatalogName(); // Retrieve the name of the catalog in effect when we connected to the database.\n\tjava.lang.String getConnectionSchemaName(); // Retrieve the name of the schema in effect when we connected to the database.\n\tJdbcEnvironment getJdbcEnvironment(); // Obtain the JDBC Environment from which this metadata came.\n\tdefault java.util.List<SequenceInformation> getSequenceInformationList(); // Retrieve the list of SequenceInformation objects which describe the underlying database sequences.\n\tSQLStateType getSqlStateType(); // Retrieve the type of codes the driver says it uses for SQLState.\n\tboolean supportsBatchUpdates(); // Did the driver report to supporting batched updates?\n\tboolean supportsDataDefinitionInTransaction(); // Did the driver report to support performing DDL within transactions?\n\tboolean supportsGetGeneratedKeys(); // Did the driver report to supporting retrieval of generated keys?\n\tboolean supportsNamedParameters(); // Does the driver report supporting named parameters?\n\tboolean supportsRefCursors(); // Does the driver report supporting REF_CURSORs?\n\tboolean supportsScrollableResults(); // Did the driver report to supporting scrollable result sets?\n}"}
{"index": 1969, "repo": "hive-exec-4.0.0-alpha-2", "des": "Fast file merge operator for ORC and RCfile.", "code": "Class AbstractFileMergeOperator<T extends FileMergeDesc> {\n\tprotected void addIncompatibleFile(org.apache.hadoop.fs.Path path);\n\tprotected void checkPartitionsMatch(org.apache.hadoop.fs.Path inputPath); // Validates that each input path belongs to the same partition since each mapper merges the input to a single output directory\n\tvoid closeOp(boolean abort); // Operator specific close routine.\n\tprotected void fixTmpPath(org.apache.hadoop.fs.Path path);\n\tprotected void fixTmpPath(org.apache.hadoop.fs.Path inputPath, int depthDiff); // Fixes tmpPath to point to the correct partition.\n\tString getName();\n\tstatic String getOperatorName();\n\tprotected org.apache.hadoop.fs.Path getOutPath();\n\tprotected org.apache.hadoop.fs.Path getOutPath(int bucketId);\n\tvoid initializeOp(org.apache.hadoop.conf.Configuration hconf); // Operator specific initialization.\n\tvoid jobCloseOp(org.apache.hadoop.conf.Configuration hconf, boolean success);\n}"}
{"index": 11969, "repo": "jena-core-4.9.0", "des": "Implementation of the abstraction of axioms that denote the single name assumption.", "code": "public class AllDifferentImpl extends OntResourceImpl implements AllDifferent {\n\tvoid addDistinctMember(Resource res); // Add the given individual to the list of distinct members of this AllDifferent declaration.\n\tvoid addDistinctMembers(Iterator<? extends Resource> individuals); // Add the given individuals to the list of distinct members of this AllDifferent declaration.\n\tRDFList getDistinctMembers(); // Answer the list of distinct members for this AllDifferent declaration.\n\tboolean hasDistinctMember(Resource res); // Answer true if this AllDifferent declaration includes res as one of the distinct individuals.\n\tExtendedIterator<? extends OntResource> listDistinctMembers(); // Answer an iterator over all of the individuals that are declared to be distinct by this AllDifferent declaration.\n\tvoid removeDistinctMember(Resource res); // Remove the given resource from the list of distinct individuals.\n\tvoid setDistinctMembers(RDFList members); // Assert that the list of distinct individuals in this AllDifferent declaration is the given list.\n}"}
{"index": 14036, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "The properties that are written into the build-info.properties file.", "code": "public abstract class BuildInfoProperties extends Object implements Serializable {\n\tabstract MapProperty<String,Object> getAdditional(); // Returns the additional properties that will be included.\n\tabstract Property<String> getArtifact(); // Returns the build.artifact property.\n\tabstract Property<String> getGroup(); // Returns the build.group property.\n\tabstract Property<String> getName(); // Returns the build.name property.\n\tabstract Property<String> getTime(); // Returns the build.time property.\n\tabstract Property<String> getVersion(); // Returns the build.version property.\n}"}
{"index": 2082, "repo": "hive-exec-4.0.0-alpha-2", "des": "The base type for sum operator evaluator.", "code": "Class GenericUDAFSum.GenericUDAFSumEvaluator<ResultType extends org.apache.hadoop.io.Writable> {\n\tprotected boolean isEligibleValue(org.apache.hadoop.hive.ql.udf.generic.GenericUDAFSum.GenericUDAFSumEvaluator.SumAgg agg, Object input); // Check if the input object is eligible to contribute to the sum.\n\tboolean isWindowingDistinct();\n\tvoid setSumDistinct(boolean sumDistinct);\n\tvoid setWindowing(boolean isWindowing);\n\tObject terminatePartial(GenericUDAFEvaluator.AggregationBuffer agg); // Get partial aggregation result.\n}"}
{"index": 8682, "repo": "avro-1.11.2", "des": "Implements Snappy compression and decompression.", "code": "Class SnappyCodec {\n\tByteBuffer compress(ByteBuffer in); // Compresses the input data\n\tByteBuffer decompress(ByteBuffer in); // Decompress the data\n\tboolean equals(Object obj); // Codecs must implement an equals() method.\n\tString getName(); // Name of the codec; written to the file's metadata.\n}"}
{"index": 13534, "repo": "spring-messaging-6.0.11", "des": "A generic message representation with headers and body.", "code": "public interface Message<T> {\n\tMessageHeaders getHeaders(); // Return message headers for the message (never null but may be empty).\n\tT getPayload(); // Return the message payload.\n}"}
{"index": 5024, "repo": "commons-collections-3.2.2", "des": "A Map implementation with a fixed maximum size which removes the least recently used entry if an entry is added when full.", "code": "Class LRUMap {\n\tprotected void addMapping(int hashIndex, int hashCode, Object key, Object value); // Adds a new key-value mapping into this map.\n\tObject clone(); // Clones the map without cloning the keys or values.\n\tprotected void doReadObject(ObjectInputStream in); // Reads the data necessary for put() to work in the superclass.\n\tprotected void doWriteObject(ObjectOutputStream out); // Writes the data necessary for put() to work in deserialization.\n\tObject get(Object key); // Gets the value mapped to the key specified.\n\tboolean isFull(); // Returns true if this map is full and no new mappings can be added.\n\tboolean isScanUntilRemovable(); // Whether this LRUMap will scan until a removable entry is found when the map is full.\n\tint maxSize(); // Gets the maximum size of the map (the bound).\n\tprotected void moveToMRU(AbstractLinkedMap.LinkEntry entry); // Moves an entry to the MRU position at the end of the list.\n\tprotected boolean removeLRU(AbstractLinkedMap.LinkEntry entry); // Subclass method to control removal of the least recently used entry from the map.\n\tprotected void reuseMapping(AbstractLinkedMap.LinkEntry entry, int hashIndex, int hashCode, Object key, Object value); // Reuses an entry by removing it and moving it to a new place in the map.\n\tprotected void updateEntry(AbstractHashedMap.HashEntry entry, Object newValue); // Updates an existing key-value mapping.\n}"}
{"index": 13106, "repo": "spring-aop-6.0.11", "des": "Convenient base class for Advisors that are also static pointcuts.", "code": "public abstract class StaticMethodMatcherPointcutAdvisor extends StaticMethodMatcherPointcut implements PointcutAdvisor, org.springframework.core.Ordered, Serializable {\n\tAdvice getAdvice(); // Return the advice part of this aspect.\n\tint getOrder();\n\tPointcut getPointcut(); // Get the Pointcut that drives this advisor.\n\tvoid setAdvice(Advice advice);\n\tvoid setOrder(int order);\n}"}
{"index": 14995, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "An AuthenticationProvider implementation for OpenID Connect 1.0 Dynamic Client Registration Endpoint.", "code": "public final class OidcClientRegistrationAuthenticationProvider extends Object implements org.springframework.security.authentication.AuthenticationProvider {\n\torg.springframework.security.core.Authentication authenticate(org.springframework.security.core.Authentication authentication);\n\tvoid setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder passwordEncoder); // Sets the PasswordEncoder used to encode the client secret.\n\tvoid setRegisteredClientConverter(org.springframework.core.convert.converter.Converter<OidcClientRegistration,RegisteredClient> registeredClientConverter); // Sets the Converter used for converting an OidcClientRegistration to a RegisteredClient.\n\tboolean supports(Class<?> authentication);\n}"}
{"index": 14647, "repo": "spring-cloud-stream-4.0.0", "des": "Basic contract for StreamBridge operations.", "code": "public interface StreamOperations {\n\tboolean send(String bindingName, Object data); // Sends 'data' to an output binding specified by 'bindingName' argument while using default content type to deal with output type conversion (if necessary).\n\tboolean send(String bindingName, Object data, org.springframework.util.MimeType outputContentType); // Sends 'data' to an output binding specified by 'bindingName' argument while using the content type specified by the 'outputContentType' argument to deal with output type conversion (if necessary).\n\tboolean send(String bindingName, String binderName, Object data); // Sends 'data' to an output binding specified by 'bindingName' argument while using the content type specified by the 'outputContentType' argument to deal with output type conversion (if necessary).\n\tboolean send(String bindingName, String binderName, Object data, org.springframework.util.MimeType outputContentType); // Sends 'data' to an output binding specified by 'bindingName' argument while using the content type specified by the 'outputContentType' argument to deal with output type conversion (if necessary).\n}"}
{"index": 9140, "repo": "hbase-server-3.0.0-alpha-4", "des": "Get, remove and modify table descriptors.", "code": "Interface TableDescriptors {\n\tdefault void close();\n\tdefault boolean exists(TableName tableName); // Test whether a given table exists, i.e, has a table descriptor.\n\tTableDescriptor get(TableName tableName); // Returns TableDescriptor for tablename\n\tMap<String,TableDescriptor> getAll(); // Get Map of all TableDescriptors.\n\tMap<String,TableDescriptor> getByNamespace(String name); // Get Map of all NamespaceDescriptors for a given namespace.\n\tTableDescriptor remove(TableName tablename); // Returns Instance of table descriptor or null if none found.\n\tdefault void update(TableDescriptor htd); // Add or update descriptor.\n\tvoid update(TableDescriptor htd, boolean cacheOnly); // Add or update descriptor\n}"}
{"index": 15920, "repo": "spring-rabbit-3.0.6", "des": "Encapsulates an arbitrary message - simple \"bean\" holder structure.", "code": "public class Delivery extends Object {\n\tbyte[] getBody(); // Retrieve the message body.\n\tString getConsumerTag(); // Retrieve the consumer tag.\n\tcom.rabbitmq.client.Envelope getEnvelope(); // Retrieve the message envelope.\n\tcom.rabbitmq.client.AMQP.BasicProperties getProperties(); // Retrieve the message properties.\n\tString getQueue(); // Retrieve the queue.\n}"}
{"index": 752, "repo": "ignite-core-2.15.0", "des": "Verifies that first bytes received in accepted (incoming) NIO session are equal to IgniteUtils.", "code": "Class GridConnectionBytesVerifyFilter {\n\tvoid onExceptionCaught(GridNioSession ses, IgniteCheckedException ex); // Invoked when exception is caught in filter processing.\n\tvoid onMessageReceived(GridNioSession ses, Object msg); // Invoked when a new messages received.\n\tGridNioFuture<Boolean> onSessionClose(GridNioSession ses); // Invoked when a session close request is performed on session.\n\tvoid onSessionClosed(GridNioSession ses); // Invoked after session get closed.\n\tvoid onSessionIdleTimeout(GridNioSession ses); // Called when session is idle for longer time that is allowed by NIO server.\n\tvoid onSessionOpened(GridNioSession ses); // Invoked when a new session was created.\n\tGridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg, boolean fut, IgniteInClosure<IgniteException> ackC); // Invoked when a write request is performed on a session.\n\tvoid onSessionWriteTimeout(GridNioSession ses); // Called when session has not empty write buffer that has not been fully flushed during max timeout allowed by NIO server.\n}"}
{"index": 3491, "repo": "mahout-mr-0.13.0", "des": "An implementation of a \"similarity\" based on the Euclidean \"distance\" between two users X and Y.", "code": "Class EuclideanDistanceSimilarity {\n\tdouble[] itemSimilarities(long itemID1, long[] itemID2s); // A bulk-get version of ItemSimilarity.itemSimilarity(long, long).\n\tdouble itemSimilarity(long itemID1, long itemID2); // Returns the degree of similarity, of two items, based on the preferences that users have expressed for the items.\n\tvoid refresh(Collection<Refreshable> alreadyRefreshed); // Triggers \"refresh\" -- whatever that means -- of the implementation.\n\tvoid setPreferenceInferrer(PreferenceInferrer inferrer); // Attaches a PreferenceInferrer to the UserSimilarity implementation.\n\tdouble userSimilarity(long userID1, long userID2); // Returns the degree of similarity, of two users, based on the their preferences.\n}"}
{"index": 17746, "repo": "spring-web-6.0.11", "des": "A FactoryBean for creating a Google Gson 2.x Gson instance.", "code": "public class GsonFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<com.google.gson.Gson>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tcom.google.gson.Gson getObject(); // Return the created Gson instance.\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setBase64EncodeByteArrays(boolean base64EncodeByteArrays); // Whether to Base64-encode byte[] properties when reading and writing JSON.\n\tvoid setDateFormatPattern(String dateFormatPattern); // Define the date/time format with a SimpleDateFormat-style pattern.\n\tvoid setDisableHtmlEscaping(boolean disableHtmlEscaping); // Whether to use the GsonBuilder.disableHtmlEscaping() when writing JSON.\n\tvoid setPrettyPrinting(boolean prettyPrinting); // Whether to use the GsonBuilder.setPrettyPrinting() when writing JSON.\n\tvoid setSerializeNulls(boolean serializeNulls); // Whether to use the GsonBuilder.serializeNulls() option when writing JSON.\n}"}
{"index": 2223, "repo": "hive-exec-4.0.0-alpha-2", "des": "OperationLog wraps the actual operation log file, and provides interface for accessing, reading, writing, and removing the file.", "code": "Class OperationLog {\n\tvoid close(); // Close this OperationLog when operation is closed.\n\tstatic OperationLog.LoggingLevel getLoggingLevel(String mode);\n\tOperationLog.LoggingLevel getOpLoggingLevel();\n\tList<String> readOperationLog(boolean isFetchFirst, long maxRows); // Read operation execution logs from log file\n}"}
{"index": 4964, "repo": "commons-collections-3.2.2", "des": "Provides utility methods and decorators for Buffer instances.", "code": "Class BufferUtils {\n\tstatic Buffer blockingBuffer(Buffer buffer); // Returns a synchronized buffer backed by the given buffer that will block on Buffer.get() and Buffer.remove() operations.\n\tstatic Buffer blockingBuffer(Buffer buffer, long timeoutMillis); // Returns a synchronized buffer backed by the given buffer that will block on Buffer.get() and Buffer.remove() operations until timeout expires.\n\tstatic Buffer boundedBuffer(Buffer buffer, int maximumSize); // Returns a synchronized buffer backed by the given buffer that will block on Collection.add(Object) and Collection.addAll(java.util.Collection) until enough object(s) are removed from the buffer to allow the object(s) to be added and still maintain the maximum size.\n\tstatic Buffer boundedBuffer(Buffer buffer, int maximumSize, long timeoutMillis); // Returns a synchronized buffer backed by the given buffer that will block on Collection.add(Object) and Collection.addAll(java.util.Collection) until enough object(s) are removed from the buffer to allow the object(s) to be added and still maintain the maximum size or the timeout expires.\n\tstatic Buffer predicatedBuffer(Buffer buffer, Predicate predicate); // Returns a predicated (validating) buffer backed by the given buffer.\n\tstatic Buffer synchronizedBuffer(Buffer buffer); // Returns a synchronized buffer backed by the given buffer.\n\tstatic Buffer transformedBuffer(Buffer buffer, Transformer transformer); // Returns a transformed buffer backed by the given buffer.\n\tstatic Buffer typedBuffer(Buffer buffer, Class type); // Returns a typed buffer backed by the given buffer.\n\tstatic Buffer unmodifiableBuffer(Buffer buffer); // Returns an unmodifiable buffer backed by the given buffer.\n}"}
{"index": 16858, "repo": "spring-amqp-3.0.6", "des": "Chained utility methods to simplify some Java repetitive code.", "code": "public final class JavaUtils extends Object {\n\t<T1, T2> JavaUtils acceptIfCondition(boolean condition, T1 t1, T2 t2, BiConsumer<T1,T2> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the condition is true.\n\t<T> JavaUtils acceptIfCondition(boolean condition, T value, Consumer<T> consumer); // Invoke Consumer.accept(Object) with the value if the condition is true.\n\tJavaUtils acceptIfHasText(String value, Consumer<String> consumer); // Invoke Consumer.accept(Object) with the value if it is not null or empty.\n\t<T> JavaUtils acceptIfHasText(T t1, String value, BiConsumer<T,String> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the value argument is not null or empty.\n\t<T1, T2> JavaUtils acceptIfNotNull(T1 t1, T2 t2, BiConsumer<T1,T2> consumer); // Invoke BiConsumer.accept(Object, Object) with the arguments if the t2 argument is not null.\n\t<T> JavaUtils acceptIfNotNull(T value, Consumer<T> consumer); // Invoke Consumer.accept(Object) with the value if it is not null.\n}"}
{"index": 46, "repo": "connect-api-3.5.0", "des": "Converter and HeaderConverter implementation that only supports serializing to strings.", "code": "Class StringConverter {\n\tvoid close();\n\torg.apache.kafka.common.config.ConfigDef config(); // Configuration specification for this converter.\n\tvoid configure(Map<String,?> configs);\n\tvoid configure(Map<String,?> configs, boolean isKey); // Configure this class.\n\tbyte[] fromConnectData(String topic, Schema schema, Object value); // Convert a Kafka Connect data object to a native object for serialization.\n\tbyte[] fromConnectHeader(String topic, String headerKey, Schema schema, Object value); // Convert the Header's value into its byte array representation.\n\tSchemaAndValue toConnectData(String topic, byte[] value); // Convert a native object to a Kafka Connect data object for deserialization.\n\tSchemaAndValue toConnectHeader(String topic, String headerKey, byte[] value); // Convert the header name and byte array value into a Header object.\n}"}
{"index": 18377, "repo": "opencms-core-15.0", "des": "The basic class for the content notification feature in OpenCms.", "code": "Class CmsNotificationCandidates {\n\tprotected java.util.Collection<CmsContentNotification> getContentNotifications(); // Returns a collection of CmsContentNotifications, one for each responsible that receives a notification.\n\tjava.lang.String notifyResponsibles(); // Sends all notifications to the responsible users.\n}"}
{"index": 9716, "repo": "commons-math3-3.6.1", "des": "Returns the minimum of the available values.", "code": "Class Min {\n\tvoid clear(); // Clears the internal state of the Statistic\n\tMin copy(); // Returns a copy of the statistic with the same internal state.\n\tstatic void copy(Min source, Min dest); // Copies source to dest.\n\tdouble evaluate(double[] values, int begin, int length); // Returns the minimum of the entries in the specified portion of the input array, or Double.NaN if the designated subarray is empty.\n\tlong getN(); // Returns the number of values that have been added.\n\tdouble getResult(); // Returns the current value of the Statistic.\n\tvoid increment(double d); // Updates the internal state of the statistic to reflect the addition of the new value.\n}"}
{"index": 12216, "repo": "jena-core-4.9.0", "des": "Provides a means to map between the URI's that represent ontology languages and their language profiles.", "code": "public class ProfileRegistry extends Object {\n\tstatic ProfileRegistry getInstance(); // Answer the singleton instance\n\tProfile getProfile(String uri); // Answer the language profile for the given language URI, or null if not known.\n\tvoid registerProfile(String uri, Profile profile); // Add a language profile with the given URI key\n}"}
{"index": 16510, "repo": "spring-batch-infrastructure-5.0.2", "des": "Interface defining the functionality to be provided for generating paging queries for use with Paging Item Readers.", "code": "public interface PagingQueryProvider {\n\tString generateFirstPageQuery(int pageSize); // Generate the query that will provide the first page, limited by the page size.\n\tString generateRemainingPagesQuery(int pageSize); // Generate the query that will provide the first page, limited by the page size.\n\tint getParameterCount(); // The number of parameters that are declared in the query\n\tString getSortKeyPlaceHolder(String keyName); // Returns either a String to be used as the named placeholder for a sort key value (based on the column name) or a ? for unnamed parameters.\n\tMap<String,Order> getSortKeys(); // The sort keys.\n\tMap<String,Order> getSortKeysWithoutAliases(); // The sort key (unique single column name) without alias.\n\tvoid init(DataSource dataSource); // Initialize the query provider using the provided DataSource if necessary.\n\tboolean isUsingNamedParameters(); // Indicate whether the generated queries use named parameter syntax.\n}"}
{"index": 9804, "repo": "commons-math3-3.6.1", "des": "This class represents a point on the 1-sphere.", "code": "Class S1Point {\n\tdouble distance(Point<Sphere1D> point); // Compute the distance between the instance and another point.\n\tstatic double distance(S1Point p1, S1Point p2); // Compute the distance (angular separation) between two points.\n\tboolean equals(Object other); // Test for the equality of two points on the 2-sphere.\n\tdouble getAlpha(); // Get the azimuthal angle \\( \\alpha \\).\n\tSpace getSpace(); // Get the space to which the point belongs.\n\tVector2D getVector(); // Get the corresponding normalized vector in the 2D euclidean space.\n\tboolean isNaN(); // Returns true if any coordinate of this point is NaN; false otherwise\n}"}
{"index": 9268, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Interface which will be responsible for fetching node descriptors, a node descriptor could be a NodeLabel or a NodeAttribute.", "code": "Interface NodeDescriptorsProvider<T> {\n\tSet<T> getDescriptors(); // Provides the descriptors.\n\tvoid setDescriptors(Set<T> descriptors); // Sets a set of descriptors to the provider.\n}"}
{"index": 6142, "repo": "jackson-databind-2.15.2", "des": "Basic serializer that can take JSON \"Object\" structure and construct a Map instance, with typed contents.", "code": "Class MapEntryDeserializer {\n\tJsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property); // Method called to finalize setup of this deserializer, when it is known for which property deserializer is needed for.\n\tMap.Entry<Object,Object> deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tMap.Entry<Object,Object> deserialize(JsonParser p, DeserializationContext ctxt, Map.Entry<Object,Object> result); // Alternate deserialization method (compared to the most commonly used, JsonDeserializer.deserialize(JsonParser, DeserializationContext)), which takes in initialized value instance, to be configured and/or populated by deserializer.\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Base implementation that does not assume specific type inclusion mechanism.\n\tJsonDeserializer<Object> getContentDeserializer(); // Accesor for deserializer use for deserializing content values.\n\tJavaType getContentType(); // Accessor for declared type of contained value elements; either exact type, or one of its supertypes.\n\tLogicalType logicalType(); // Method for accessing logical type of values this deserializer produces.\n\tprotected MapEntryDeserializer withResolved(KeyDeserializer keyDeser, TypeDeserializer valueTypeDeser, JsonDeserializer<?> valueDeser); // Fluent factory method used to create a copy with slightly different settings.\n}"}
{"index": 17155, "repo": "spring-integration-core-6.1.2", "des": "Simple implementation of a message channel.", "code": "public class QueueChannel extends AbstractPollableChannel implements QueueChannelOperations {\n\tList<org.springframework.messaging.Message<?>> clear(); // Remove all Messages from this channel.\n\tvoid destroy();\n\tprotected org.springframework.messaging.Message<?> doReceive(long timeout); // Subclasses must implement this method.\n\tprotected boolean doSend(org.springframework.messaging.Message<?> message, long timeout); // Subclasses must implement this method.\n\tint getQueueSize(); // Obtain the current number of queued Messages in this channel.\n\tint getRemainingCapacity(); // Obtain the remaining capacity of this channel.\n\tList<org.springframework.messaging.Message<?>> purge(MessageSelector selector); // Remove any Messages that are not accepted by the provided selector.\n\tvoid registerMetricsCaptor(MetricsCaptor metricsCaptor); // Inject a MetricsCaptor.\n}"}
{"index": 429, "repo": "phoenix-core-5.1.3", "des": "Implementation of the RTrim(<string>) build-in function.", "code": "Class RTrimFunction {\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tint getKeyFormationTraversalIndex(); // Determines whether or not a function may be used to form the start/stop key of a scan When OrderPreserving is YES, in order to make order-by optimization valid, it should return 0.\n\tInteger getMaxLength();\n\tString getName();\n\tSortOrder getSortOrder();\n\tKeyPart newKeyPart(KeyPart childPart); // Manufactures a KeyPart used to construct the KeyRange given a constant and a comparison operator.\n\tFunctionExpression.OrderPreserving preservesOrder(); // Determines whether or not the result of the function invocation will be ordered in the same way as the input to the function.\n}"}
{"index": 16328, "repo": "maven-plugin-api-4.0.0-alpha-7", "des": "Abstract class to provide most of the infrastructure required to implement a Mojo except for the execute method. The implementation should have a Mojo annotation with the name of the goal:", "code": "public abstract class AbstractMojo extends Object implements Mojo, ContextEnabled {\n\tLog getLog(); // Deprecated. Use SLF4J directly\n\tMap getPluginContext();\n\tvoid setLog(Log log); // Deprecated. Use SLF4J directly\n\tvoid setPluginContext(Map pluginContext); // Set a new shared context Map to a mojo before executing it.\n}"}
{"index": 14758, "repo": "spring-data-commons-3.1.2", "des": "Utility methods to introspect nullability rules declared in packages, classes and methods.", "code": "public abstract class NullableUtils extends Object {\n\tstatic boolean isExplicitNullable(MethodParameter methodParameter); // Determine whether a MethodParameter is explicitly annotated to be considered nullable.\n\tstatic boolean isNonNull(Class<?> type, ElementType elementType); // Determine whether ElementType in the scope of type requires non-null values.\n\tstatic boolean isNonNull(AnnotatedElement element, ElementType elementType); // Determine whether ElementType in the scope of AnnotatedElement requires non-null values.\n\tstatic boolean isNonNull(Method method, ElementType elementType); // Determine whether ElementType in the scope of Method requires non-null values.\n}"}
{"index": 8644, "repo": "avro-1.11.2", "des": "DatumWriter for existing classes via Java reflection.", "code": "Class ReflectDatumWriter<T> {\n\tprotected void write(Schema schema, Object datum, Encoder out); // Called to write data.\n\tprotected void writeArray(Schema schema, Object datum, Encoder out); // Called to write a array.\n\tprotected void writeBytes(Object datum, Encoder out); // Called to write a bytes.\n\tprotected void writeField(Object record, Schema.Field f, Encoder out, Object state); // Called to write a single field of a record.\n}"}
{"index": 7777, "repo": "cassandra-all-4.1.2", "des": "Adds buffering, mark, and fsyncing to OutputStream.", "code": "Class SequentialWriter {\n\tjava.lang.Throwable abort(java.lang.Throwable accumulate);\n\tvoid close();\n\tjava.lang.Throwable commit(java.lang.Throwable accumulate);\n\tprotected long current();\n\tprotected void doFlush(int count);\n\tvoid finish();\n\tprotected void flushData(); // Override this method instead of overriding flush()\n\tlong getEstimatedOnDiskBytesWritten();\n\tlong getLastFlushOffset();\n\tlong getOnDiskFilePointer(); // Returns the current file pointer of the underlying on-disk file.\n\tjava.lang.String getPath();\n\tboolean hasPosition(); // If the implementation supports providing a position, this method returns true, otherwise false.\n\tboolean isOpen();\n\tlong length();\n\tDataPosition mark();\n\tlong position(); // Returns the current position of the underlying target like a file-pointer or the position withing a buffer.\n\tvoid prepareToCommit();\n\tvoid resetAndTruncate(DataPosition mark); // Drops all buffered data that's past the limits of our new file mark + buffer capacity, or syncs and truncates the underlying file to the marked position\n\tprotected void resetBuffer();\n\tvoid setPostFlushListener(java.lang.Runnable runPostFlush);\n\tvoid skipBytes(int numBytes);\n\tvoid sync(); // Synchronize file contents with disk.\n\tprotected void syncDataOnlyInternal();\n\tprotected void syncInternal();\n\tvoid truncate(long toSize);\n\tprotected SequentialWriter.TransactionalProxy txnProxy();\n\tint writeDirectlyToChannel(java.nio.ByteBuffer buf);\n}"}
{"index": 11468, "repo": "spring-restdocs-core-3.0.0", "des": "Static factory methods for documenting a RESTful API as if it were being driven using a command-line utility such as curl or HTTPie.", "code": "public abstract class CliDocumentation extends Object {\n\tstatic Snippet curlRequest(); // Returns a new Snippet that will document the curl request for the API operation.\n\tstatic Snippet curlRequest(Map<String,Object> attributes); // Returns a new Snippet that will document the curl request for the API operation.\n\tstatic Snippet curlRequest(Map<String,Object> attributes, CommandFormatter commandFormatter); // Returns a new Snippet that will document the curl request for the API operation.\n\tstatic Snippet curlRequest(CommandFormatter commandFormatter); // Returns a new Snippet that will document the curl request for the API operation.\n\tstatic Snippet httpieRequest(); // Returns a new Snippet that will document the HTTPie request for the API operation.\n\tstatic Snippet httpieRequest(Map<String,Object> attributes); // Returns a new Snippet that will document the HTTPie request for the API operation.\n\tstatic Snippet httpieRequest(Map<String,Object> attributes, CommandFormatter commandFormatter); // Returns a new Snippet that will document the HTTPie request for the API operation.\n\tstatic Snippet httpieRequest(CommandFormatter commandFormatter); // Returns a new Snippet that will document the HTTPie request for the API operation.\n\tstatic CommandFormatter multiLineFormat(); // Creates a new CommandFormatter that produces multi-line output.\n\tstatic CommandFormatter singleLineFormat(); // Creates a new CommandFormatter that produces single-line output.\n}"}
{"index": 5741, "repo": "freemarker-2.3.32", "des": "Model used by BeansWrapper when simpleMapWrapper mode is enabled.", "code": "Class SimpleMapModel {\n\tjava.lang.Object exec(java.util.List args); // Executes the method call.\n\tTemplateModel get(java.lang.String key); // Gets a TemplateModel from the hash.\n\tjava.lang.Object getAdaptedObject(java.lang.Class hint); // Retrieves the underlying object, or some other object semantically equivalent to its value narrowed by the class hint.\n\tTemplateModel getAPI(); // Returns the model that exposes the (Java) API of the value.\n\tjava.lang.Object getWrappedObject(); // Retrieves the original object wrapped by this model.\n\tboolean isEmpty();\n\tTemplateCollectionModel keys();\n\tTemplateHashModelEx2.KeyValuePairIterator keyValuePairIterator();\n\tint size();\n\tTemplateCollectionModel values();\n}"}
{"index": 12945, "repo": "slf4j-api-2.0.7", "des": "The LoggerFactory is a utility class producing Loggers for various logging APIs, most notably for log4j, logback and JDK 1.4 logging.", "code": "public final class LoggerFactory extends Object {\n\tstatic ILoggerFactory getILoggerFactory(); // Return the ILoggerFactory instance in use.\n\tstatic Logger getLogger(Class<?> clazz); // Return a logger named corresponding to the class passed as parameter, using the statically bound ILoggerFactory instance.\n\tstatic Logger getLogger(String name); // Return a logger named according to the name parameter using the statically bound ILoggerFactory instance.\n}"}
{"index": 13724, "repo": "spring-webmvc-6.0.11", "des": "Superclass for tags that output content that might get HTML-escaped.", "code": "public abstract class HtmlEscapingAwareTag extends RequestContextAwareTag {\n\tprotected String htmlEscape(String content); // HTML-encodes the given String, only if the \"htmlEscape\" setting is enabled.\n\tprotected boolean isDefaultHtmlEscape(); // Return the applicable default HTML escape setting for this tag.\n\tprotected boolean isHtmlEscape(); // Return the HTML escaping setting for this tag, or the default setting if not overridden.\n\tprotected boolean isResponseEncodedHtmlEscape(); // Return the applicable default for the use of response encoding with HTML escaping for this tag.\n\tvoid setHtmlEscape(boolean htmlEscape); // Set HTML escaping for this tag, as boolean value.\n}"}
{"index": 5027, "repo": "commons-collections-3.2.2", "des": "Transformer implementation that returns the value held in a specified map using the input parameter as a key.", "code": "Class MapTransformer {\n\tstatic Transformer getInstance(Map map); // Factory to create the transformer.\n\tMap getMap(); // Gets the map to lookup in.\n\tObject transform(Object input); // Transforms the input to result by looking it up in a Map.\n}"}
{"index": 4752, "repo": "hadoop-common-3.3.4", "des": "A closeable object that maintains a reference count.", "code": "Class CloseableReferenceCount {\n\tint getReferenceCount(); // Get the current reference count.\n\tboolean isOpen(); // Return true if the status is currently open.\n\tvoid reference(); // Increment the reference count.\n\tint setClosed(); // Mark the status as closed.\n\tboolean unreference(); // Decrement the reference count.\n\tvoid unreferenceCheckClosed(); // Decrement the reference count, checking to make sure that the CloseableReferenceCount is not closed.\n}"}
{"index": 6960, "repo": "calcite-core-1.34.0", "des": "Sub-class of Sort not targeted at any particular engine or calling convention.", "code": "Class LogicalSort {\n\tRelNode accept(RelShuttle shuttle); // Accepts a visit from a shuttle.\n\tSort copy(RelTraitSet traitSet, RelNode newInput, RelCollation newCollation, @Nullable RexNode offset, @Nullable RexNode fetch);\n\tstatic LogicalSort create(RelNode input, RelCollation collation, @Nullable RexNode offset, @Nullable RexNode fetch); // Creates a LogicalSort.\n\tRelNode withHints(List<RelHint> hintList); // Returns a new relational expression with the specified hints hintList.\n}"}
{"index": 9904, "repo": "iceberg-api-1.3.0", "des": "The action result that contains a summary of the execution.", "code": "Interface DeleteReachableFiles.Result {\n\tlong deletedDataFilesCount(); // Returns the number of deleted data files.\n\tlong deletedEqualityDeleteFilesCount(); // Returns the number of deleted equality delete files.\n\tlong deletedManifestListsCount(); // Returns the number of deleted manifest lists.\n\tlong deletedManifestsCount(); // Returns the number of deleted manifests.\n\tlong deletedOtherFilesCount(); // Returns the number of deleted metadata json, version hint files.\n\tlong deletedPositionDeleteFilesCount(); // Returns the number of deleted position delete files.\n}"}
{"index": 2884, "repo": "amqp-client-5.18.0", "des": "Contract to exchange frame between application threads and NIO thread.", "code": "Interface NioQueue {\n\tboolean isEmpty(); // Returns true if the queue contains no element.\n\tboolean offer(WriteRequest writeRequest); // Enqueue a frame, block if the queue is full.\n\tWriteRequest poll(); // Retrieves and removes the head of this queue, or returns null if this queue is empty.\n\tint size(); // Get the current size of the queue.\n}"}
{"index": 10519, "repo": "groovy-all-4.0.13", "des": "A GroovyObject facade for an underlying MBean which acts like a normal groovy object but which is actually implemented via an underlying JMX MBean.", "code": "public class GroovyMBean extends GroovyObjectSupport {\n\tprotected String createOperationKey(String operation, int params); // Construct a simple key based on the method name and the number of parameters\n\tprotected String[] createSignature(MBeanOperationInfo info);\n\tString describeAttribute(String attributeName); // Description of the specified attribute name.\n\tprotected String describeAttribute(MBeanAttributeInfo attr); // Description of the specified attribute name.\n\tList<String> describeOperation(String operationName); // Get the description of the specified operation.\n\tprotected String describeOperation(MBeanOperationInfo operation); // Description of the operation.\n\tObject getProperty(String property); // Retrieves a property value.\n\tMBeanInfo info();\n\tObject invokeMethod(String method, Object arguments); // Invokes the given method.\n\tCollection<String> listAttributeDescriptions(); // List of string representations of all the attributes on the MBean.\n\tCollection<String> listAttributeNames(); // List of the names of each of the attributes on the MBean\n\tList<String> listAttributeValues(); // The values of each of the attributes on the MBean\n\tCollection<String> listOperationDescriptions(); // Description of all the operations available on the MBean.\n\tCollection<String> listOperationNames(); // Names of all the operations available on the MBean.\n\tObjectName name();\n\tMBeanServerConnection server();\n\tvoid setProperty(String property, Object value); // Sets the given property to the new value.\n}"}
{"index": 708, "repo": "ignite-core-2.15.0", "des": "Message related to particular cache group.", "code": "Class GridCacheGroupIdMessage {\n\tboolean cacheGroupMessage();\n\tbyte fieldsCount(); // Gets fields count.\n\tint groupId();\n\tint handlerId();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 12869, "repo": "spring-data-mongodb-4.1.2", "des": "AbstractAggregationExpression to return the top element according to the specified order.", "code": "public static class SelectionOperators.Top extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod(); // In case a limit value (n) is present $topN is used instead of $top.\n\tprotected boolean isArgumentMap();\n\tSelectionOperators.Top limit(int numberOfResults); // Limits the number of returned elements to the given value.\n\tSelectionOperators.Top limit(AggregationExpression expression); // Limits the number of returned elements to the value defined by the given expression.\n\tSelectionOperators.Top output(String... fieldNames); // Define fields included in the output for each element.\n\tSelectionOperators.Top output(AggregationExpression... out); // Define expressions building the value included in the output for each element.\n\tSelectionOperators.Top output(Fields out); // Define result ordering.\n\tprotected Map<String,Object> remove(String key);\n\tSelectionOperators.Top sortBy(Sort sort); // Define result ordering.\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tstatic SelectionOperators.Top top();\n\tstatic SelectionOperators.Top top(int numberOfResults);\n\tprotected List<Object> values();\n}"}
{"index": 1840, "repo": "nifi-web-api-0.5.0", "des": "Facade over accessing different types of NiFi components.", "code": "Interface StandardNiFiWebConfigurationContext.ComponentFacade {\n\tComponentDetails getComponentDetails(NiFiWebRequestContext requestContext); // Gets the component details using the specified request context.\n\tComponentDetails setAnnotationData(NiFiWebConfigurationRequestContext requestContext, String annotationData); // Sets the annotation data using the specified request context.\n}"}
{"index": 10099, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Base implementation for accessing yarn components over protocol buffer rpc system.", "code": "Class YarnRpcAccessor<P> {\n\tvoid afterPropertiesSet();\n\tprotected P createProxy(); // Creates the proxy.\n\tvoid destroy();\n\t<T,S extends P> T execute(YarnRpcCallback<T,S> action); // Execute given action callback on the rpc proxy.\n\tConfiguration getConfiguration(); // Gets the Yarn configuration.\n\tP getProxy(); // Gets the proxy handled by this accessor.\n\tprotected abstract InetSocketAddress getRpcAddress(Configuration configuration); // Gets the InetSocketAddress where this accessor should connect.\n\tprotected UserGroupInformation getUser(); // Gets the user used to create the proxy.\n}"}
{"index": 7295, "repo": "calcite-core-1.34.0", "des": "A SqlTableRef is a node of a parse tree which represents a table reference.", "code": "Class SqlTableRef {\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n}"}
{"index": 4680, "repo": "commons-geometry-core-1.0", "des": "Class containing the primary size-related properties of a region.", "code": "Class AbstractRegionBSPTree.RegionSizeProperties<P extends Point<P>> {\n\tP getCentroid(); // Get the centroid of the region.\n\tdouble getSize(); // Get the size of the region.\n}"}
{"index": 13722, "repo": "spring-webmvc-6.0.11", "des": "The <hidden> tag renders an HTML 'input' tag with type 'hidden' using the bound value.", "code": "public class HiddenInputTag extends AbstractHtmlElementTag {\n\tboolean isDisabled(); // Get the value of the 'disabled' attribute.\n\tprotected boolean isValidDynamicAttribute(String localName, Object value); // Flags \"type\" as an illegal dynamic attribute.\n\tvoid setDisabled(boolean disabled); // Set the value of the 'disabled' attribute.\n\tprotected int writeTagContent(TagWriter tagWriter); // Writes the HTML 'input' tag to the supplied TagWriter including the databound value.\n}"}
{"index": 7150, "repo": "calcite-core-1.34.0", "des": "A SQL literal representing a DATE, TIME or TIMESTAMP value.", "code": "Class SqlAbstractDateTimeLiteral {\n\tRelDataType createSqlType(RelDataTypeFactory typeFactory);\n\tint getPrec();\n\tprotected TimestampString getTimestamp(); // Converts this literal to a TimestampString.\n\tabstract String toFormattedString(); // Returns e.g.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n}"}
{"index": 14503, "repo": "spring-security-web-6.1.2", "des": "CsrfAuthenticationStrategy is in charge of removing the CsrfToken upon authenticating.", "code": "public final class CsrfAuthenticationStrategy extends Object implements SessionAuthenticationStrategy {\n\tvoid onAuthentication(org.springframework.security.core.Authentication authentication, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Performs Http session-related functionality when a new authentication occurs.\n\tvoid setRequestHandler(CsrfTokenRequestHandler requestHandler); // Specify a CsrfTokenRequestHandler to use for making the CsrfToken available as a request attribute.\n}"}
{"index": 14827, "repo": "spring-data-commons-3.1.2", "des": "Spring Data specific reflection utility methods and classes.", "code": "public final class ReflectionUtils extends Object {\n\tstatic <T> T createInstanceIfPresent(String classname, T defaultInstance); // Creates an instance of the class with the given fully qualified name or returns the given default instance if the class cannot be loaded or instantiated.\n\tstatic Optional<Constructor<?>> findConstructor(Class<?> type, Object... constructorArguments); // Finds a constructor on the given type that matches the given constructor arguments.\n\tstatic Field findField(Class<?> type, ReflectionUtils.DescribedFieldFilter filter); // Finds the field matching the given ReflectionUtils.DescribedFieldFilter.\n\tstatic Field findField(Class<?> type, ReflectionUtils.DescribedFieldFilter filter, boolean enforceUniqueness); // Finds the field matching the given ReflectionUtils.DescribedFieldFilter.\n\tstatic Field findField(Class<?> type, ReflectionUtils.FieldFilter filter); // Finds the first field on the given class matching the given ReflectionUtils.FieldFilter.\n\tstatic Field findRequiredField(Class<?> type, String name); // Finds the field of the given name on the given type.\n\tstatic Method findRequiredMethod(Class<?> type, String name, Class<?>... parameterTypes); // Returns the method with the given name of the given class and parameter types.\n\tstatic Optional<Method> getMethod(Class<?> type, String name, ResolvableType... parameterTypes); // Returns the Method with the given name and parameters declared on the given type, if available.\n\tstatic Object getPrimitiveDefault(Class<?> type); // Get default value for a primitive type.\n\tstatic boolean isNullable(MethodParameter parameter); // Returns whether the given MethodParameter is nullable.\n\tstatic boolean isVoid(Class<?> type); // Check whether the given type represents a void type such as void, Void or Kotlin Unit.\n\tstatic Class<?> loadIfPresent(String name, ClassLoader classLoader); // Loads the class with the given name using the given ClassLoader.\n\tstatic Stream<Class<?>> returnTypeAndParameters(Method method); // Returns a Stream of the return and parameters types of the given Method.\n\tstatic void setField(Field field, Object target, Object value); // Sets the given field on the given object to the given value.\n}"}
{"index": 3024, "repo": "tink-1.10.0", "des": "KeyStatusType is metadata associated to a key which is only meaningful when the key is part of a Keyset.", "code": "Enum KeyHandle.KeyStatusType {\n\tstatic KeyHandle.KeyStatusType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic KeyHandle.KeyStatusType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11224, "repo": "wicket-extensions-10.0.0-M1", "des": "Implementation of ISortState that can keep track of sort information for a single property.", "code": "public class SingleSortState<T> extends Object implements ISortState<T>, org.apache.wicket.util.io.IClusterable {\n\tSortOrder getPropertySortOrder(T property); // Gets the sort order of a property\n\tSortParam<T> getSort();\n\tvoid setPropertySortOrder(T property, SortOrder order); // Sets sort order of the property\n\tvoid setSort(SortParam<T> param); // Sets the current sort state\n}"}
{"index": 4162, "repo": "camel-core-3.0.0-RC1", "des": "A Java DSL which is used to build a Validator and register into CamelContext.", "code": "Class ValidatorBuilder {\n\tvoid configure(org.apache.camel.CamelContext camelContext); // Configures a new Validator according to the configurations built on this builder and register it into the given CamelContext.\n\tValidatorBuilder type(Class<?> type); // Set the data type using Java class.\n\tValidatorBuilder type(String type); // Set the data type name.\n\tValidatorBuilder withBean(String ref); // Set the Java Bean name to be used for custom Validator.\n\tValidatorBuilder withExpression(org.apache.camel.Expression expression); // Set the Expression to be used for the predicate Validator.\n\tValidatorBuilder withExpression(org.apache.camel.Predicate predicate); // Set the Predicate to be used for the predicate Validator.\n\tValidatorBuilder withJava(Class<? extends org.apache.camel.spi.Validator> clazz); // Set the Java Class represents a custom Validator implementation class.\n\tValidatorBuilder withUri(String uri); // Set the URI to be used for the endpoint Validator.\n}"}
{"index": 1898, "repo": "hadoop-hdfs-3.3.6", "des": "This class manages the include and exclude files for HDFS.", "code": "Class HostFileManager {\n\torg.apache.hadoop.conf.Configuration getConf();\n\tHostSet getExcludes(); // Return all datanodes that should be in decommissioned state.\n\tHostSet getIncludes(); // Return all the datanodes that are allowed to connect to the namenode.\n\tlong getMaintenanceExpirationTimeInMS(org.apache.hadoop.hdfs.protocol.DatanodeID dn); // Get the maintenance expiration time in milli seconds.\n\tString getUpgradeDomain(org.apache.hadoop.hdfs.protocol.DatanodeID dn); // Get the upgrade domain of a datanode.\n\tboolean isExcluded(org.apache.hadoop.hdfs.protocol.DatanodeID dn); // Check if a datanode needs to be decommissioned.\n\tboolean isIncluded(org.apache.hadoop.hdfs.protocol.DatanodeID dn); // Check if a datanode is allowed to connect the namenode.\n\tvoid refresh(); // Reload the configuration.\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 7505, "repo": "cassandra-all-4.1.2", "des": "A simple append-only collection supporting an unbounded number of concurrent readers/writers, but a bounded number of items.", "code": "Class Accumulator<E> {\n\tvoid add(E item); // Adds an item to the collection.\n\tint capacity();\n\tvoid clearUnsafe(int i); // Removes element at the speficied index from this accumulator.\n\tE get(int i);\n\tboolean isEmpty();\n\tint size();\n\tjava.util.Collection<E> snapshot();\n}"}
{"index": 15427, "repo": "pulsar-client-api-3.0.0", "des": "Encoding types of supported KeyValueSchema for Pulsar messages.", "code": "@Public @Stable public enum KeyValueEncodingType extends Enum<KeyValueEncodingType> {\n\tstatic KeyValueEncodingType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic KeyValueEncodingType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 11143, "repo": "tribuo-core-4.3.1", "des": "An interface which denotes this Model can be exported as an ONNX model.", "code": "public interface ONNXExportable {\n\tstatic <M extends com.oracle.labs.mlrg.olcut.provenance.Provenancable<ModelProvenance>>ai.onnx.proto.OnnxMl.ModelProto buildModel(ONNXContext onnxContext, String domain, long modelVersion, M model); // Creates an ONNX model protobuf for the supplied context.\n\tai.onnx.proto.OnnxMl.ModelProto exportONNXModel(String domain, long modelVersion); // Exports this Model as an ONNX protobuf.\n\tdefault void saveONNXModel(String domain, long modelVersion, Path outputPath); // Exports this Model as an ONNX file.\n\tdefault String serializeProvenance(ModelProvenance provenance); // Serializes the model provenance to a String.\n\tONNXNode writeONNXGraph(ONNXRef<?> input); // Writes this Model into OnnxMl.GraphProto.Builder inside the input's ONNXContext.\n}"}
{"index": 11516, "repo": "spring-restdocs-core-3.0.0", "des": "A configurer that can be used to configure the generated documentation snippets.", "code": "public abstract class SnippetConfigurer<PARENT,TYPE> extends AbstractNestedConfigurer<PARENT> {\n\tvoid apply(Map<String,Object> configuration, RestDocumentationContext context); // Applies the configurer to the given configuration.\n\tTYPE withAdditionalDefaults(Snippet... additionalDefaultSnippets); // Configures additional documentation snippets that will be produced by default.\n\tTYPE withDefaults(Snippet... defaultSnippets); // Configures the documentation snippets that will be produced by default.\n\tTYPE withEncoding(String encoding); // Configures any documentation snippets to be written using the given encoding.\n\tTYPE withTemplateFormat(TemplateFormat format); // Configures the format of the documentation snippet templates.\n}"}
{"index": 17677, "repo": "spring-web-6.0.11", "des": "Represents a client-side reactive HTTP request.", "code": "public interface ClientHttpRequest extends ReactiveHttpOutputMessage {\n\torg.springframework.util.MultiValueMap<String,HttpCookie> getCookies(); // Return a mutable map of request cookies to send to the server.\n\tHttpMethod getMethod(); // Return the HTTP method of the request.\n\t<T> T getNativeRequest(); // Return the request from the underlying HTTP library.\n\tURI getURI(); // Return the URI of the request.\n}"}
{"index": 11728, "repo": "spring-data-neo4j-7.1.2", "des": "This is the reactive version of a the DatabaseSelectionProvider and it works in the same way but uses reactive return types containing the target database name.", "code": "@API(status=STABLE, since=\"6.0\") @FunctionalInterface public interface ReactiveDatabaseSelectionProvider {\n\tstatic ReactiveDatabaseSelectionProvider createStaticDatabaseSelectionProvider(String databaseName); // Creates a statically configured database selection provider always selecting the database with the given name databaseName.\n\treactor.core.publisher.Mono<DatabaseSelection> getDatabaseSelection();\n\tstatic ReactiveDatabaseSelectionProvider getDefaultSelectionProvider(); // A database selector always selecting the default database.\n}"}
{"index": 2631, "repo": "mahout-core-14.1", "des": "Implements a normal distribution specified mean and standard deviation.", "code": "Class Normal {\n\tdouble cdf(double x); // Returns the cumulative distribution function.\n\tdouble nextDouble(); // Returns a random number from the distribution.\n\tdouble pdf(double x); // Returns the probability density function.\n\tvoid setRandomGenerator(Random randomGenerator); // Sets the uniform random generator internally used.\n\tvoid setState(double mean, double standardDeviation); // Sets the mean and variance.\n}"}
{"index": 9382, "repo": "hadoop-yarn-api-3.3.6", "des": "Represents a timed placement constraint that has to be satisfied within a time window.", "code": "Class PlacementConstraint.TimedPlacementConstraint {\n\t<T> T accept(PlacementConstraint.Visitor<T> visitor); // Visitor pattern.\n\tboolean equals(Object o);\n\tPlacementConstraint.AbstractConstraint getConstraint(); // Get the constraint that has to be satisfied within the time window.\n\tPlacementConstraint.TimedPlacementConstraint.DelayUnit getDelayUnit(); // The unit of the scheduling delay.\n\tlong getSchedulingDelay(); // Get the scheduling delay value that determines the time window within which the constraint has to be satisfied.\n\tvoid setConstraint(PlacementConstraint.AbstractConstraint constraint); // Sets the constraint that has to be satisfied within the time window.\n}"}
{"index": 7746, "repo": "cassandra-all-4.1.2", "des": "Index on a REGULAR column definition on a composite type.", "code": "Class RegularColumnIndex {\n\t<T> CBuilder buildIndexClusteringPrefix(java.nio.ByteBuffer partitionKey, ClusteringPrefix<T> prefix, CellPath path); // Used to construct an the clustering for an entry in the index table based on values from the base data.\n\tIndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry); // Used at search time to convert a row in the index table into a simple struct containing the values required to retrieve the corresponding row from the base table.\n\tjava.nio.ByteBuffer getIndexedValue(java.nio.ByteBuffer partitionKey, Clustering<?> clustering, CellPath path, java.nio.ByteBuffer cellValue); // Extract the value to be inserted into the index from the components of the base data\n\tboolean isStale(Row data, java.nio.ByteBuffer indexValue, int nowInSec); // Check whether a value retrieved from an index is still valid by comparing it to current row from the base table.\n}"}
{"index": 11204, "repo": "wicket-extensions-10.0.0-M1", "des": "Bread crumbs provide a means to track certain history of client actions.", "code": "public interface IBreadCrumbModel extends org.apache.wicket.util.io.IClusterable {\n\tvoid addListener(IBreadCrumbModelListener listener); // Adds a bread crumb model listener.\n\tList<IBreadCrumbParticipant> allBreadCrumbParticipants(); // Lists the bread crumb participants in this model.\n\tIBreadCrumbParticipant getActive(); // Gets the currently active participant, if any.\n\tvoid removeListener(IBreadCrumbModelListener listener); // Removes a bread crumb model listener.\n\tvoid setActive(IBreadCrumbParticipant breadCrumbParticipant); // Sets the bread crumb as the active one.\n}"}
{"index": 7288, "repo": "calcite-core-1.34.0", "des": "Estimates row counts for tables and columns, and whether combinations of columns form primary/unique and foreign keys.", "code": "Interface SqlStatisticProvider {\n\tboolean isForeignKey(RelOptTable fromTable, List<Integer> fromColumns, RelOptTable toTable, List<Integer> toColumns); // Returns whether a join is a foreign key; that is, whether every row in the referencing table is matched by at least one row in the referenced table.\n\tboolean isKey(RelOptTable table, List<Integer> columns); // Returns whether a collection of columns is a unique (or primary) key.\n\tdouble tableCardinality(RelOptTable table); // Returns an estimate of the number of rows in table.\n}"}
{"index": 13389, "repo": "shiro-core-2.0.0-alpha-2", "des": "A simple username/password authentication token to support the most widely-used authentication mechanism.", "code": "public class UsernamePasswordToken extends Object implements HostAuthenticationToken, RememberMeAuthenticationToken {\n\tvoid clear(); // Clears out (nulls) the username, password, rememberMe, and inetAddress.\n\tObject getCredentials(); // Returns the password char array.\n\tString getHost(); // Returns the host name or IP string from where the authentication attempt occurs.\n\tchar[] getPassword(); // Returns the password submitted during an authentication attempt as a character array.\n\tObject getPrincipal(); // Simply returns getUsername().\n\tString getUsername(); // Returns the username submitted during an authentication attempt.\n\tboolean isRememberMe(); // Returns true if the submitting user wishes their identity (principal(s)) to be remembered across sessions, false otherwise.\n\tvoid setHost(String host); // Sets the host name or IP string from where the authentication attempt occurs.\n\tvoid setPassword(char[] password); // Sets the password for submission during an authentication attempt.\n\tvoid setRememberMe(boolean rememberMe); // Sets if the submitting user wishes their identity (principal(s)) to be remembered across sessions.\n\tvoid setUsername(String username); // Sets the username for submission during an authentication attempt.\n}"}
{"index": 10152, "repo": "spring-hateoas-2.1.2", "des": "Reactive variant of RepresentationModelAssembler combined with SimpleRepresentationModelAssembler.", "code": "public interface ReactiveRepresentationModelAssembler<T,D extends RepresentationModel<?>> {\n\tdefault reactor.core.publisher.Mono<CollectionModel<D>> toCollectionModel(reactor.core.publisher.Flux<? extends T> entities, ServerWebExchange exchange); // Converts an Iterable or Ts into an Iterable of RepresentationModel and wraps them in a CollectionModel instance.\n\treactor.core.publisher.Mono<D> toModel(T entity, ServerWebExchange exchange); // Converts the given entity into a D, which extends RepresentationModel.\n}"}
{"index": 8389, "repo": "hadoop-aws-3.3.6", "des": "This is the interface which an integration source must implement for the integration.", "code": "Interface BondedS3AStatisticsContext.S3AFSStatisticsSource {\n\torg.apache.hadoop.fs.FileSystem.Statistics getInstanceStatistics(); // Get the statistics of the FS instance, shared across all threads.\n\tS3AInstrumentation getInstrumentation(); // Get the S3A Instrumentation.\n}"}
{"index": 9385, "repo": "hadoop-yarn-api-3.3.6", "des": "The priority assigned to a ResourceRequest or Application or Container allocation.", "code": "Class Priority {\n\tint compareTo(Priority other);\n\tboolean equals(Object obj);\n\tabstract int getPriority(); // Get the assigned priority\n\tstatic Priority newInstance(int p);\n\tabstract void setPriority(int priority); // Set the assigned priority\n}"}
{"index": 13685, "repo": "spring-webmvc-6.0.11", "des": "The <button> tag renders a form field label in an HTML 'button' tag.", "code": "public class ButtonTag extends AbstractHtmlElementTag {\n\tint doEndTag(); // Closes the 'button' block tag.\n\tprotected String getDefaultValue(); // Return the default value.\n\tString getName(); // Set the value of the 'name' attribute.\n\tprotected String getType(); // Get the value of the 'type' attribute.\n\tString getValue(); // Get the value of the 'value' attribute.\n\tboolean isDisabled(); // Get the value of the 'disabled' attribute.\n\tvoid setDisabled(boolean disabled); // Set the value of the 'disabled' attribute.\n\tvoid setName(String name); // Get the value of the 'name' attribute.\n\tvoid setValue(String value); // Set the value of the 'value' attribute.\n\tprotected int writeTagContent(TagWriter tagWriter); // Subclasses should implement this method to perform tag content rendering.\n\tprotected void writeValue(TagWriter tagWriter); // Writes the 'value' attribute to the supplied TagWriter.\n}"}
{"index": 8273, "repo": "spring-ws-3.0.10.RELEASE", "des": "Subinterface of SoapHeader that exposes SOAP 1.", "code": "Interface Soap12Header {\n\tSoapHeaderElement addNotUnderstoodHeaderElement(QName headerName); // Adds a new NotUnderstood SoapHeaderElement this header.\n\tSoapHeaderElement addUpgradeHeaderElement(String[] supportedSoapUris); // Adds a new Upgrade SoapHeaderElement this header.\n\tIterator<SoapHeaderElement> examineHeaderElementsToProcess(String[] roles, boolean isUltimateReceiver); // Returns an Iterator over all the header elements that should be processed for the given roles.\n}"}
{"index": 15565, "repo": "spring-batch-core-5.0.2", "des": "Simple implementation of executing the step as a call to a Tasklet, possibly repeated, and each call surrounded by a transaction.", "code": "public class TaskletStep extends AbstractStep {\n\tvoid afterPropertiesSet();\n\tprotected void close(ExecutionContext ctx); // Extension point for subclasses to provide callbacks to their collaborators at the end of a step (right at the end of the finally block), to close or release resources.\n\tprotected Semaphore createSemaphore(); // Extension point mainly for test purposes so that the behaviour of the lock can be manipulated to simulate various pathologies.\n\tprotected void doExecute(StepExecution stepExecution); // Process the step and update its context so that progress can be monitored by the caller.\n\tTasklet getTasklet(); // retrieve the tasklet - helper method for JobOperator\n\tprotected void open(ExecutionContext ctx); // Extension point for subclasses to provide callbacks to their collaborators at the beginning of a step, to open or acquire resources.\n\tvoid registerChunkListener(ChunkListener listener); // Register a chunk listener for callbacks at the appropriate stages in a step execution.\n\tvoid registerStream(ItemStream stream); // Register a single ItemStream for callbacks to the stream interface.\n\tvoid setChunkListeners(ChunkListener[] listeners); // Register each of the objects as listeners.\n\tvoid setInterruptionPolicy(StepInterruptionPolicy interruptionPolicy); // Setter for the StepInterruptionPolicy.\n\tvoid setStepOperations(RepeatOperations stepOperations); // The RepeatOperations to use for the outer loop of the batch processing.\n\tvoid setStreams(ItemStream[] streams); // Register each of the streams for callbacks at the appropriate time in the step.\n\tvoid setTasklet(Tasklet tasklet); // Public setter for the Tasklet.\n\tvoid setTransactionAttribute(org.springframework.transaction.interceptor.TransactionAttribute transactionAttribute); // Public setter for the TransactionAttribute.\n\tvoid setTransactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Public setter for the PlatformTransactionManager.\n}"}
{"index": 8695, "repo": "curator-client-5.5.0", "des": "Decoration on an ScheduledExecutorService that tracks created futures and provides a method to close futures created via this class.", "code": "Class CloseableScheduledExecutorService {\n\tFuture<?> schedule(Runnable task, long delay, TimeUnit unit); // Creates and executes a one-shot action that becomes enabled after the given delay.\n\tFuture<?> scheduleWithFixedDelay(Runnable task, long initialDelay, long delay, TimeUnit unit); // Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next.\n}"}
{"index": 84, "repo": "commons-collections4-4.4", "des": "Provides a base decorator that enables additional functionality to be added to an OrderedBidiMap via decoration.", "code": "Class AbstractOrderedBidiMapDecorator<K,V> {\n\tprotected OrderedBidiMap<K,V> decorated(); // Gets the map being decorated.\n\tK firstKey(); // Gets the first key currently in this map.\n\tOrderedBidiMap<V,K> inverseBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tK lastKey(); // Gets the last key currently in this map.\n\tOrderedMapIterator<K,V> mapIterator(); // Obtains a MapIterator over the map.\n\tK nextKey(K key); // Gets the next key after the one specified.\n\tK previousKey(K key); // Gets the previous key before the one specified.\n}"}
{"index": 5273, "repo": "druid-processing-26.0.0", "des": "Base scaffolding for functions which accept 2 array arguments and combine them in some way.", "code": "Class Function.ArraysMergeFunction {\n\tSet<Expr> getArrayInputs(List<Expr> args); // Given a list of arguments to this Function, get the set of arguments that must evaluate to an array value\n\tExpressionType getOutputType(Expr.InputBindingInspector inspector, List<Expr> args); // Compute the output type of this function for a given set of argument expression inputs.\n\tboolean hasArrayOutput(); // Returns true if function produces an array.\n}"}
{"index": 18145, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Contract for a container of AttributeSource references.", "code": "Interface AttributeSourceContainer {\n\tjava.util.List<AttributeSource> attributeSources(); // Obtain this container's attribute sources.\n\tAttributePath getAttributePathBase();\n\tAttributeRole getAttributeRoleBase();\n\tLocalMetadataBuildingContext getLocalMetadataBuildingContext(); // Obtain the local binding context associated with this container.\n}"}
{"index": 14747, "repo": "spring-data-commons-3.1.2", "des": "BeanRegistrationAotProcessor handling module ManagedTypes instances.", "code": "public class ManagedTypesBeanRegistrationAotProcessor extends Object implements BeanRegistrationAotProcessor {\n\tprotected BeanRegistrationAotContribution contribute(AotContext aotContext, ManagedTypes managedTypes, RegisteredBean registeredBean); // Hook to provide a customized flavor of BeanRegistrationAotContribution.\n\tprotected void contributeType(ResolvableType type, GenerationContext generationContext); // Hook to contribute configuration for a given type.\n\tString getModuleIdentifier();\n\tprotected boolean isMatch(Class<?> beanType, String beanName);\n\tprotected boolean matchesByType(Class<?> beanType);\n\tprotected boolean matchesPrefix(String beanName);\n\tBeanRegistrationAotContribution processAheadOfTime(RegisteredBean registeredBean);\n\tvoid setModuleIdentifier(String moduleIdentifier);\n}"}
{"index": 11319, "repo": "spring-context-6.0.11", "des": "Configures the JSR-310 java.time formatting system for use with Spring.", "code": "public class DateTimeFormatterRegistrar extends Object implements FormatterRegistrar {\n\tvoid registerFormatters(FormatterRegistry registry); // Register Formatters and Converters with a FormattingConversionService through a FormatterRegistry SPI.\n\tvoid setDateFormatter(DateTimeFormatter formatter); // Set the formatter that will be used for objects representing date values.\n\tvoid setDateStyle(FormatStyle dateStyle); // Set the default format style of LocalDate objects.\n\tvoid setDateTimeFormatter(DateTimeFormatter formatter); // Set the formatter that will be used for objects representing date and time values.\n\tvoid setDateTimeStyle(FormatStyle dateTimeStyle); // Set the default format style of LocalDateTime objects.\n\tvoid setTimeFormatter(DateTimeFormatter formatter); // Set the formatter that will be used for objects representing time values.\n\tvoid setTimeStyle(FormatStyle timeStyle); // Set the default format style of LocalTime objects.\n\tvoid setUseIsoFormat(boolean useIsoFormat); // Set whether standard ISO formatting should be applied to all date/time types.\n}"}
{"index": 1169, "repo": "ignite-core-2.15.0", "des": "Batch of service single node deployment result.", "code": "Class ServiceSingleNodeDeploymentResultBatch {\n\tServiceDeploymentProcessId deploymentId();\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tMap<IgniteUuid,ServiceSingleNodeDeploymentResult> results();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 8405, "repo": "hadoop-aws-3.3.6", "des": "Special statistics context, all of whose context operations are no-ops.", "code": "Class EmptyS3AStatisticsContext {\n\tvoid addValueToQuantiles(Statistic op, long value); // Add a value to a quantiles statistic.\n\tS3AMultipartUploaderStatistics createMultipartUploaderStatistics(); // Creaet a multipart statistics collector.\n\tvoid decrementGauge(Statistic op, long count); // Decrement a specific gauge.\n\tvoid incrementCounter(Statistic op, long count); // Increment a specific counter.\n\tvoid incrementGauge(Statistic op, long count); // Increment a specific gauge.\n\tCommitterStatistics newCommitterStatistics(); // Create a new instance of the committer statistics.\n\tDelegationTokenStatistics newDelegationTokenStatistics(); // Create a delegation token statistics instance.\n\tS3AInputStreamStatistics newInputStreamStatistics(); // Create a stream input statistics instance.\n\tBlockOutputStreamStatistics newOutputStreamStatistics(); // Create a stream output statistics instance.\n\tStatisticsFromAwsSdk newStatisticsFromAwsSdk(); // Create a StatisticsFromAwsSdk instance.\n\tvoid recordDuration(Statistic op, boolean success, Duration duration); // Record a duration.\n}"}
{"index": 6987, "repo": "calcite-core-1.34.0", "des": "MulticastRelOptListener implements the RelOptListener interface by forwarding events on to a collection of other listeners.", "code": "Class MulticastRelOptListener {\n\tvoid addListener(RelOptListener listener); // Adds a listener which will receive multicast events.\n\tvoid relChosen(RelOptListener.RelChosenEvent event); // Notifies this listener that a relational expression has been chosen as part of the final implementation of the query plan.\n\tvoid relDiscarded(RelOptListener.RelDiscardedEvent event); // Notifies this listener that a relational expression is no longer of interest to the planner.\n\tvoid relEquivalenceFound(RelOptListener.RelEquivalenceEvent event); // Notifies this listener that a relational expression has been registered with a particular equivalence class after an equivalence has been either detected or asserted.\n\tvoid ruleAttempted(RelOptListener.RuleAttemptedEvent event); // Notifies this listener that an optimizer rule is being applied to a particular relational expression.\n\tvoid ruleProductionSucceeded(RelOptListener.RuleProductionEvent event); // Notifies this listener that an optimizer rule has been successfully applied to a particular relational expression, resulting in a new equivalent expression (relEquivalenceFound will also be called unless the new expression is identical to an existing one).\n}"}
{"index": 3214, "repo": "hbase-common-3.0.0-alpha-4", "des": "Utility methods for dealing with Collections, including treating null collections as empty.", "code": "Class ConcurrentMapUtils {\n\tstatic <K,V> V computeIfAbsent(ConcurrentMap<K,V> map, K key, Supplier<V> supplier); // In HBASE-16648 we found that ConcurrentHashMap.get is much faster than computeIfAbsent if the value already exists.\n\tstatic <K,V> V computeIfAbsent(ConcurrentMap<K,V> map, K key, Supplier<V> supplier, Runnable actionIfAbsent);\n\tstatic <K,V> V computeIfAbsentEx(ConcurrentMap<K,V> map, K key, ConcurrentMapUtils.IOExceptionSupplier<V> supplier); // In HBASE-16648 we found that ConcurrentHashMap.get is much faster than computeIfAbsent if the value already exists.\n}"}
{"index": 2197, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ScalarArithmeticColumn.", "code": "Class LongScalarAddDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 13894, "repo": "spring-webflux-6.0.11", "des": "A mutable builder for a HandlerStrategies.", "code": "public static interface HandlerStrategies.Builder {\n\tHandlerStrategies build(); // Builds the HandlerStrategies.\n\tHandlerStrategies.Builder codecs(Consumer<org.springframework.http.codec.ServerCodecConfigurer> consumer); // Customize the list of server-side HTTP message readers and writers.\n\tHandlerStrategies.Builder exceptionHandler(org.springframework.web.server.WebExceptionHandler exceptionHandler); // Add the given exception handler to this builder.\n\tHandlerStrategies.Builder localeContextResolver(org.springframework.web.server.i18n.LocaleContextResolver localeContextResolver); // Add the given locale context resolver to this builder.\n\tHandlerStrategies.Builder viewResolver(ViewResolver viewResolver); // Add the given view resolver to this builder.\n\tHandlerStrategies.Builder webFilter(org.springframework.web.server.WebFilter filter); // Add the given web filter to this builder.\n}"}
{"index": 9853, "repo": "commons-math3-3.6.1", "des": "This interface represents an inversible affine transform in a space.", "code": "Interface Transform<S extends Space,T extends Space> {\n\tHyperplane<S> apply(Hyperplane<S> hyperplane); // Transform an hyperplane of a space.\n\tPoint<S> apply(Point<S> point); // Transform a point of a space.\n\tSubHyperplane<T> apply(SubHyperplane<T> sub, Hyperplane<S> original, Hyperplane<S> transformed); // Transform a sub-hyperplane embedded in an hyperplane.\n}"}
{"index": 3624, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableShortObjectInspector inspects a ShortWritable Object.", "code": "Class LazyShortObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tshort get(Object o); // Get the short data.\n\tObject getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n}"}
{"index": 12426, "repo": "spring-data-couchbase-5.1.2", "des": "Terminating operations invoking the actual execution.", "code": "public static interface ReactiveRangeScanOperation.TerminatingRangeScan<T> {\n\treactor.core.publisher.Flux<T> rangeScan(String lower, String upper); // Finds a list of documents based on the given IDs.\n\treactor.core.publisher.Flux<String> rangeScanIds(String lower, String upper); // Finds a list of documents based on the given IDs.\n\treactor.core.publisher.Flux<T> sampleScan(Long limit, Long... seed); // Finds a list of documents based on the given IDs.\n\treactor.core.publisher.Flux<String> sampleScanIds(Long limit, Long... seed); // Finds a list of documents based on the given IDs.\n}"}
{"index": 17569, "repo": "spring-ldap-core-3.1.0", "des": "Abstract superclass for DirContextAuthenticationStrategy implementations that apply TLS security to the connections.", "code": "public abstract class AbstractTlsDirContextAuthenticationStrategy extends Object implements DirContextAuthenticationStrategy {\n\tprotected abstract void applyAuthentication(LdapContext ctx, String userDn, String password); // Apply the actual authentication to the specified LdapContext .\n\tfinal DirContext processContextAfterCreation(DirContext ctx, String userDn, String password); // This method is responsible for post-processing the DirContext instance after it has been created.\n\tvoid setHostnameVerifier(HostnameVerifier hostnameVerifier); // Set the optional HostnameVerifier to use for verifying incoming certificates.\n\tvoid setShutdownTlsGracefully(boolean shutdownTlsGracefully); // Specify whether the TLS should be shut down gracefully before the target context is closed.\n\tvoid setSslSocketFactory(SSLSocketFactory sslSocketFactory); // Sets the optional SSL socket factory used for startTLS negotiation.\n\tfinal void setupEnvironment(Hashtable<String,Object> env, String userDn, String password); // This method is responsible for preparing the environment to be used when creating the DirContext instance.\n}"}
{"index": 2797, "repo": "tika-parsers-1.28.5", "des": "Uses the Metadata Extractor library to read EXIF and IPTC image metadata and map to Tika fields.", "code": "Class ImageMetadataExtractor {\n\tprotected void handle(Iterator<com.drew.metadata.Directory> directories); // Copies extracted tags to tika metadata using registered handlers.\n\tprotected void handle(com.drew.metadata.Metadata metadataExtractor); // Copies extracted tags to tika metadata using registered handlers.\n\tvoid parseHeif(InputStream is);\n\tvoid parseJpeg(File file);\n\tvoid parseRawExif(byte[] exifData);\n\tvoid parseRawExif(InputStream stream, int length, boolean needsExifHeader);\n\tvoid parseRawXMP(byte[] xmpData);\n\tvoid parseTiff(File file);\n\tvoid parseWebP(File file);\n}"}
{"index": 7985, "repo": "commons-jcs3-core-3.1", "des": "This class is based on the log4j class org.", "code": "Class PropertySetter {\n\tprotected Object convertArg(String val, Class<?> type); // Convert val a String parameter to an object of a given type.\n\tprotected PropertyDescriptor getPropertyDescriptor(String name); // Gets the propertyDescriptor attribute of the PropertySetter object\n\tprotected void introspect(); // Uses JavaBeans Introspectorto compute setters of object to be configured.\n\tstatic void setProperties(Object obj, Properties properties, String prefix); // Set the properties of an object passed as a parameter in one go.\n\tvoid setProperties(Properties properties, String prefix); // Set the properties for the object that match the prefix passed as parameter.\n\tvoid setProperty(PropertyDescriptor prop, String name, String value); // Set the named property given a PropertyDescriptor.\n\tvoid setProperty(String name, String value); // Set a property on this PropertySetter's Object.\n}"}
{"index": 8844, "repo": "hbase-server-3.0.0-alpha-4", "des": "Allows for defining different compression rate predicates on its implementing classes.", "code": "Interface BlockCompressedSizePredicator {\n\tboolean shouldFinishBlock(int uncompressed); // Decides if the block should be finished based on the comparison of its uncompressed size against an adjusted size based on a predicated compression factor.\n\tvoid updateLatestBlockSizes(HFileContext context, int uncompressed, int compressed); // Updates the predicator with both compressed and uncompressed sizes of latest block written.\n}"}
{"index": 4650, "repo": "commons-vfs2-2.9.0", "des": "A FileFilter providing conditional OR logic across a list of file filters.", "code": "Class OrFileFilter {\n\tboolean accept(FileSelectInfo fileSelectInfo); // Determines if a file or folder should be selected.\n\tvoid addFileFilter(FileFilter fileFilter); // Adds the specified file filter to the list of file filters at the end of the list.\n\tList<FileFilter> getFileFilters(); // Returns this conditional file filter's list of file filters.\n\tboolean removeFileFilter(FileFilter fileFilter); // Removes the specified file filter.\n\tvoid setFileFilters(List<FileFilter> fileFilters); // Sets the list of file filters, replacing any previously configured file filters on this filter.\n}"}
{"index": 5885, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Response to a query with list of SubClusterInfo about all sub-clusters that are currently participating in Federation.", "code": "Class GetSubClustersInfoResponse {\n\tabstract List<SubClusterInfo> getSubClusters(); // Get the list of SubClusterInfo representing the information about all sub-clusters that are currently participating in Federation.\n\tstatic GetSubClustersInfoResponse newInstance(List<SubClusterInfo> subClusters);\n\tabstract void setSubClusters(List<SubClusterInfo> subClusters); // Set the list of SubClusterInfo representing the information about all sub-clusters that are currently participating in Federation.\n}"}
{"index": 4249, "repo": "jackson-core-2.15.2", "des": "Token writer (generator) features not-specific to any particular format backend.", "code": "Enum StreamWriteFeature {\n\tstatic int collectDefaults(); // Method that calculates bit set (flags) of all features that are enabled by default.\n\tboolean enabledByDefault(); // Accessor for checking whether this feature is enabled by default.\n\tboolean enabledIn(int flags); // Convenience method for checking whether feature is enabled in given bitmask.\n\tint getMask(); // Returns bit mask for this feature instance; must be a single bit, that is of form 1 << N.\n\tJsonGenerator.Feature mappedFeature();\n\tstatic StreamWriteFeature valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic StreamWriteFeature[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8578, "repo": "commons-io-2.13.0", "des": "A writer decorator that tags potential exceptions so that the reader that caused the exception can easily be identified.", "code": "Class TaggedWriter {\n\tprotected void handleIOException(IOException e); // Tags any IOExceptions thrown, wrapping and re-throwing.\n\tboolean isCauseOf(Exception exception); // Tests if the given exception was caused by this writer.\n\tvoid throwIfCauseOf(Exception exception); // Re-throws the original exception thrown by this writer.\n}"}
{"index": 12237, "repo": "jena-core-4.9.0", "des": "The ReasonerFactoryAssembler constructs a ReasonerFactory from the description.", "code": "public class ReasonerFactoryAssembler extends AssemblerBase implements Assembler {\n\tstatic ReasonerFactory getReasonerFactoryByURL(Resource root, Resource reasonerURL); // Answer a ReasonerFactory which delivers reasoners with the given URL reasonerURL.\n\tObject open(Assembler a, Resource root, Mode irrelevant); // The core operation: answer a new object constructed according to the object description hanging from root, using the assembler a for any sub-objects.\n}"}
{"index": 4233, "repo": "jackson-core-2.15.2", "des": "PrettyPrinter implementation that adds no indentation, just implements everything necessary for value output to work as expected, and provide simpler extension points to allow for creating simple custom implementations that add specific decoration or overrides.", "code": "Class MinimalPrettyPrinter {\n\tvoid beforeArrayValues(JsonGenerator g); // Method called after array start marker has been output, and right before the first value is to be output.\n\tvoid beforeObjectEntries(JsonGenerator g); // Method called after object start marker has been output, and right before the field name of the first entry is to be output.\n\tvoid setRootValueSeparator(String sep);\n\tMinimalPrettyPrinter setSeparators(Separators separators);\n\tvoid writeArrayValueSeparator(JsonGenerator g); // Method called after an array value has been completely output, and before another value is to be output.\n\tvoid writeEndArray(JsonGenerator g, int nrOfValues); // Method called after an Array value has been completely output (minus closing bracket).\n\tvoid writeEndObject(JsonGenerator g, int nrOfEntries); // Method called after an Object value has been completely output (minus closing curly bracket).\n\tvoid writeObjectEntrySeparator(JsonGenerator g); // Method called after an object entry (field:value) has been completely output, and before another value is to be output.\n\tvoid writeObjectFieldValueSeparator(JsonGenerator g); // Method called after an object field has been output, but before the value is output.\n\tvoid writeRootValueSeparator(JsonGenerator g); // Method called after a root-level value has been completely output, and before another value is to be output.\n\tvoid writeStartArray(JsonGenerator g); // Method called when an Array value is to be output, before any member/child values are output.\n\tvoid writeStartObject(JsonGenerator g); // Method called when an Object value is to be output, before any fields are output.\n}"}
{"index": 6856, "repo": "calcite-core-1.34.0", "des": "Implementation of Sort in enumerable calling convention.", "code": "Class EnumerableSort {\n\tEnumerableSort copy(RelTraitSet traitSet, RelNode newInput, RelCollation newCollation, @Nullable RexNode offset, @Nullable RexNode fetch);\n\tstatic EnumerableSort create(RelNode child, RelCollation collation, @Nullable RexNode offset, @Nullable RexNode fetch); // Creates an EnumerableSort.\n\tEnumerableRel.Result implement(EnumerableRelImplementor implementor, EnumerableRel.Prefer pref); // Creates a plan for this expression according to a calling convention.\n}"}
{"index": 2813, "repo": "tika-parsers-1.28.5", "des": "Interface implemented by all Tika OOXML extractors.", "code": "Interface OOXMLExtractor {\n\torg.apache.poi.ooxml.POIXMLDocument getDocument(); // Returns the opened document.\n\tMetadataExtractor getMetadataExtractor(); // POIXMLTextExtractor.getMetadataTextExtractor() not yet supported for OOXML by POI.\n\tvoid getXHTML(ContentHandler handler, org.apache.tika.metadata.Metadata metadata, org.apache.tika.parser.ParseContext context); // Parses the document into a sequence of XHTML SAX events sent to the given content handler.\n}"}
{"index": 4931, "repo": "hadoop-common-3.3.4", "des": "A serializable object which implements a simple, efficient, serialization protocol, based on DataInput and DataOutput.", "code": "Interface Writable {\n\tvoid readFields(DataInput in); // Deserialize the fields of this object from in.\n\tvoid write(DataOutput out); // Serialize the fields of this object to out.\n}"}
{"index": 4494, "repo": "beam-sdks-java-core-2.49.0", "des": "Manages access to the restriction and keeps track of its claimed part for a splittable DoFn.", "code": "Class RestrictionTracker<RestrictionT,PositionT> {\n\tabstract void checkDone(); // Checks whether the restriction has been fully processed.\n\tabstract RestrictionT currentRestriction(); // Returns a restriction accurately describing the full range of work the current DoFn.ProcessElement call will do, including already completed work.\n\tabstract RestrictionTracker.IsBounded isBounded(); // Return the boundedness of the current restriction.\n\tabstract boolean tryClaim(PositionT position); // Attempts to claim the block of work in the current restriction identified by the given position.\n\tabstract @Nullable SplitResult<RestrictionT> trySplit(double fractionOfRemainder); // Splits current restriction based on fractionOfRemainder.\n}"}
{"index": 11102, "repo": "tribuo-core-4.3.1", "des": "An interface for feature selection algorithms.", "code": "public interface FeatureSelector<T extends Output<T>> extends com.oracle.labs.mlrg.olcut.config.Configurable, com.oracle.labs.mlrg.olcut.provenance.Provenancable<FeatureSelectorProvenance> {\n\tboolean isOrdered(); // Does this feature selection algorithm return an ordered feature set?\n\tSelectedFeatureSet select(Dataset<T> dataset); // Selects features according to this selection algorithm from the specified dataset.\n}"}
{"index": 12542, "repo": "spring-jdbc-6.0.11", "des": "Reusable query in which concrete subclasses must implement the abstract mapRow(ResultSet, int) method to convert each row of the JDBC ResultSet into an object.", "code": "public abstract class MappingSqlQuery<T> extends MappingSqlQueryWithParameters<T> {\n\tprotected abstract T mapRow(ResultSet rs, int rowNum); // Subclasses must implement this method to convert each row of the ResultSet into an object of the result type.\n\tprotected final T mapRow(ResultSet rs, int rowNum, Object[] parameters, Map<?,?> context); // This method is implemented to invoke the simpler mapRow template method, ignoring parameters.\n}"}
{"index": 17144, "repo": "spring-integration-core-6.1.2", "des": "A MessagingException thrown when a non-transactional operation is performing multiple updates from a single message, e.g.", "code": "public class PartialSuccessException extends org.springframework.messaging.MessagingException {\n\tCollection<?> getDerivedInput(); // See PartialSuccessException(Message, String, Throwable, Collection, Collection).\n\t<T> Collection<T> getDerivedInput(Class<T> clazz); // Convenience version of getDerivedInput() to avoid casting.\n\tCollection<?> getPartialResults(); // See PartialSuccessException(Message, String, Throwable, Collection, Collection).\n\t<T> Collection<T> getPartialResults(Class<T> clazz); // Convenience version of getPartialResults() to avoid casting.\n}"}
{"index": 13, "repo": "spring-cloud-aws-jdbc-2.2.6.RELEASE", "des": "Subclass of RetryOperationsInterceptor that checks that there is no transaction available while starting a retryable operation.", "code": "Class RdbmsRetryOperationsInterceptor {\n\tObject invoke(org.aopalliance.intercept.MethodInvocation invocation); // Checks that there is no retry operation open before delegating to the method RetryOperationsInterceptor.invoke(org.aopalliance.intercept.MethodInvocation) method.\n\tprotected boolean isRetryContextOperationActive(); // Returns whenever there is already a proxy running inside this thread execution.\n}"}
{"index": 16872, "repo": "spring-amqp-3.0.6", "des": "Implementation of MessageConverter that can work with Strings or native objects of any kind via the Serializer and Deserializer abstractions in Spring.", "code": "public class SerializerMessageConverter extends AllowedListDeserializingMessageConverter {\n\tprotected Message createMessage(Object object, MessageProperties messageProperties); // Creates an AMQP Message from the provided Object.\n\tObject fromMessage(Message message); // Converts from a AMQP Message to an Object.\n\tvoid setDefaultCharset(String defaultCharset); // Specify the default charset to use when converting to or from text-based Message body content.\n\tvoid setDeserializer(org.springframework.core.serializer.Deserializer<Object> deserializer); // The deserializer to use for converting from message body to Java object.\n\tvoid setIgnoreContentType(boolean ignoreContentType); // Flag to signal that the content type should be ignored and the deserializer used irrespective if it is a text message.\n\tvoid setSerializer(org.springframework.core.serializer.Serializer<Object> serializer); // The serializer to use for converting Java objects to message bodies.\n}"}
{"index": 16440, "repo": "spring-batch-infrastructure-5.0.2", "des": "Default implementation of FieldSetFactory with no special knowledge of the FieldSet required.", "code": "public class DefaultFieldSetFactory extends Object implements FieldSetFactory {\n\tFieldSet create(String[] values); // Create a FieldSet with anonymous tokens.\n\tFieldSet create(String[] values, String[] names); // Create a FieldSet with named tokens.\n\tvoid setDateFormat(DateFormat dateFormat); // The DateFormat to use for parsing numbers.\n\tvoid setNumberFormat(NumberFormat numberFormat); // The NumberFormat to use for parsing numbers.\n}"}
{"index": 5956, "repo": "commons-lang3-3.12.0", "des": "Default implementation of the context storing the label-value pairs for contexted exceptions.", "code": "Class DefaultExceptionContext {\n\tDefaultExceptionContext addContextValue(String label, Object value); // Adds a contextual label-value pair into this context.\n\tList<Pair<String,Object>> getContextEntries(); // Retrieves the full list of label-value pairs defined in the contextual data.\n\tSet<String> getContextLabels(); // Retrieves the full set of labels defined in the contextual data.\n\tList<Object> getContextValues(String label); // Retrieves all the contextual data values associated with the label.\n\tObject getFirstContextValue(String label); // Retrieves the first available contextual data value associated with the label.\n\tString getFormattedExceptionMessage(String baseMessage); // Builds the message containing the contextual information.\n\tDefaultExceptionContext setContextValue(String label, Object value); // Sets a contextual label-value pair into this context.\n}"}
{"index": 6320, "repo": "mina-core-3.0.0-M2", "des": "Utility for checking detecting idle sessions.", "code": "Interface IdleChecker {\n\tvoid destroy(); // Stop the idle checker.\n\tint processIdleSession(long time); // Find idle session, to be called for each select() call.\n\tvoid sessionRead(AbstractIoSession session, long time); // Inform the IdleCheker a session have a read event\n\tvoid sessionWritten(AbstractIoSession session, long time); // Inform the IdleCheker a session have a write event\n\tvoid start(); // Start the idle checker inner threads\n}"}
{"index": 16862, "repo": "spring-amqp-3.0.6", "des": "Enumeration for the message delivery mode.", "code": "public enum MessageDeliveryMode extends Enum<MessageDeliveryMode> {\n\tstatic MessageDeliveryMode fromInt(int modeAsNumber);\n\tstatic int toInt(MessageDeliveryMode mode);\n\tstatic MessageDeliveryMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic MessageDeliveryMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13100, "repo": "spring-aop-6.0.11", "des": "Simple AOP Alliance MethodInterceptor that can be introduced in a chain to display verbose trace information about intercepted method invocations, with method entry and method exit info.", "code": "public class SimpleTraceInterceptor extends AbstractTraceInterceptor {\n\tprotected String getInvocationDescription(MethodInvocation invocation); // Return a description for the given method invocation.\n\tprotected Object invokeUnderTrace(MethodInvocation invocation, org.apache.commons.logging.Log logger); // Subclasses must override this method to perform any tracing around the supplied MethodInvocation.\n}"}
{"index": 16272, "repo": "spring-data-jdbc-3.1.2", "des": "Default ArrayColumns implementation for dialects that do not support array-typed columns.", "code": "public static enum JdbcArrayColumns.Unsupported extends Enum<JdbcArrayColumns.Unsupported> implements JdbcArrayColumns {\n\tString getArrayTypeName(SQLType jdbcType); // The appropriate SQL type as a String which should be used to represent the given SQLType in an Array.\n\tboolean isSupported();\n\tstatic JdbcArrayColumns.Unsupported valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic JdbcArrayColumns.Unsupported[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 12233, "repo": "jena-core-4.9.0", "des": "RDFWriterI is an interface to RDF serializers.", "code": "public interface RDFWriterI {\n\tRDFErrorHandler setErrorHandler(RDFErrorHandler errHandler); // Set an error handler.\n\tObject setProperty(String propName, Object propValue); // Set a property to control the behaviour of this writer.\n\tvoid write(Model model, OutputStream out, String base); // Serialize Model model to OutputStream out.\n\tvoid write(Model model, Writer out, String base); // Caution: Serialize Model model to Writer out.\n}"}
{"index": 3821, "repo": "hbase-client-3.0.0-alpha-4", "des": "Registry for meta information needed for connection setup to a HBase cluster.", "code": "Interface ConnectionRegistry {\n\tvoid close(); // Closes this instance and releases any system resources associated with it\n\tCompletableFuture<ServerName> getActiveMaster(); // Get the address of active HMaster.\n\tCompletableFuture<String> getClusterId(); // Should only be called once.\n\tString getConnectionString(); // Return the connection string associated with this registry instance.\n\tCompletableFuture<RegionLocations> getMetaRegionLocations(); // Get the location of meta region(s).\n}"}
{"index": 2315, "repo": "hive-exec-4.0.0-alpha-2", "des": "A hash multi-set result that can read the set membership count for the key.", "code": "Class VectorMapJoinFastBytesHashMultiSetStore.HashMultiSetResult {\n\tboolean equalKey(byte[] keyBytes, int keyStart, int keyLength); // Compare a key with the key positioned with the setKey method.\n\tvoid setContains(); // Mark the key matched with equalKey as a match and read the set membership count, if necessary.\n\tvoid setKey(VectorMapJoinFastBytesHashMultiSetStore multiSetStore, long refWord); // Setup for reading the key of an entry with the equalKey method.\n}"}
{"index": 16720, "repo": "spring-jms-6.0.11", "des": "SingleConnectionFactory subclass that adds Session caching as well as MessageProducer and MessageConsumer caching.", "code": "public class CachingConnectionFactory extends SingleConnectionFactory {\n\tint getCachedSessionCount(); // Return a current session count, indicating the number of sessions currently cached by this connection factory.\n\tprotected Session getCachedSessionProxy(Session target, Deque<Session> sessionList); // Wrap the given Session with a proxy that delegates every method call to it but adapts close calls.\n\tprotected Session getSession(Connection con, Integer mode); // Checks for a cached Session for the given mode.\n\tint getSessionCacheSize(); // Return the desired size for the JMS Session cache (per JMS Session type).\n\tboolean isCacheConsumers(); // Return whether to cache JMS MessageConsumers per JMS Session instance.\n\tboolean isCacheProducers(); // Return whether to cache JMS MessageProducers per JMS Session instance.\n\tvoid resetConnection(); // Resets the Session cache as well.\n\tvoid setCacheConsumers(boolean cacheConsumers); // Specify whether to cache JMS MessageConsumers per JMS Session instance (more specifically: one MessageConsumer per Destination, selector String and Session).\n\tvoid setCacheProducers(boolean cacheProducers); // Specify whether to cache JMS MessageProducers per JMS Session instance (more specifically: one MessageProducer per Destination and Session).\n\tvoid setSessionCacheSize(int sessionCacheSize); // Specify the desired size for the JMS Session cache (per JMS Session type).\n}"}
{"index": 13633, "repo": "slf4j-ext-2.0.7", "des": "Helper methods for Javassist functionality.", "code": "public class JavassistHelper extends Object {\n\tstatic String getSignature(javassist.CtBehavior method); // Return javassist source snippet which lists all the parameters and their values.\n\tstatic String returnValue(javassist.CtBehavior method); // Create a javassist source snippet which either is empty (for anything which does not return a value) or an explanatory text around the $_ javassist return value variable.\n}"}
{"index": 8096, "repo": "commons-compress-1.23.0", "des": "Combines a SevenZMethod with configuration options for the method.", "code": "Class SevenZMethodConfiguration {\n\tboolean equals(Object obj);\n\tSevenZMethod getMethod(); // The specified method.\n\tObject getOptions(); // The specified options.\n}"}
{"index": 10505, "repo": "groovy-all-4.0.13", "des": "A handle for the MetaClassRegistry that changes all classes loaded into the Grails VM to use ExpandoMetaClass instances", "code": "public class ExpandoMetaClassCreationHandle extends MetaClassRegistry.MetaClassCreationHandle {\n\tprotected MetaClass createNormalMetaClass(Class theClass, MetaClassRegistry registry);\n\tstatic void disable();\n\tstatic void enable(); // Enables the ExpandoMetaClassCreationHandle with the registry ExpandoMetaClassCreationHandle.enable();\n\tboolean hasModifiedMetaClass(ExpandoMetaClass emc);\n\tvoid registerModifiedMetaClass(ExpandoMetaClass emc); // Registers a modified ExpandoMetaClass with the creation handle\n}"}
{"index": 17664, "repo": "spring-web-6.0.11", "des": "Abstract base class for Atom and RSS Feed message converters, using the ROME tools project.", "code": "public abstract class AbstractWireFeedHttpMessageConverter<T extends com.rometools.rome.feed.WireFeed> extends AbstractHttpMessageConverter<T> {\n\tprotected T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage); // Abstract template method that reads the actual object.\n\tprotected void writeInternal(T wireFeed, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 3289, "repo": "hbase-common-3.0.0-alpha-4", "des": "An DataType for interacting with values encoded using Bytes.", "code": "Class RawLong {\n\tLong decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tlong decodeLong(byte[] buff, int offset); // Read a long value from the buffer buff.\n\tint encode(PositionedByteRange dst, Long val); // Write instance val into buffer dst.\n\tClass<Long> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(Long val); // Inform consumers how long the encoded byte[] will be.\n\tint encodeLong(byte[] buff, int offset, long val); // Write instance val into buffer buff.\n\tOrder getOrder(); // Retrieve the sort Order imposed by this data type, or null when natural ordering is not preserved.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n\tboolean isOrderPreserving(); // Indicates whether this instance writes encoded byte[]'s which preserve the natural sort order of the unencoded value.\n\tboolean isSkippable(); // Indicates whether this instance is able to skip over it's encoded value.\n\tint skip(PositionedByteRange src); // Skip src's position forward over one encoded value.\n}"}
{"index": 13679, "repo": "spring-webmvc-6.0.11", "des": "Asynchronous subtype of ServerResponse that exposes the future response.", "code": "public interface AsyncServerResponse extends ServerResponse {\n\tServerResponse block(); // Blocks indefinitely until the future response is obtained.\n\tstatic AsyncServerResponse create(Object asyncResponse); // Create a AsyncServerResponse with the given asynchronous response.\n\tstatic AsyncServerResponse create(Object asyncResponse, Duration timeout); // Create a (built) response with the given asynchronous response.\n}"}
{"index": 10793, "repo": "spring-boot-actuator-3.1.1", "des": "A MappingDescriptionProvider that introspects the HandlerMappings that are known to one or more DispatcherServlets.", "code": "@ImportRuntimeHints(org.springframework.boot.actuate.web.mappings.servlet.DispatcherServletsMappingDescriptionProvider.DispatcherServletsMappingDescriptionProviderRuntimeHints.class) public class DispatcherServletsMappingDescriptionProvider extends Object implements MappingDescriptionProvider {\n\tMap<String,List<DispatcherServletMappingDescription>> describeMappings(org.springframework.context.ApplicationContext context); // Produce the descriptions of the mappings identified by this provider in the given context.\n\tString getMappingName(); // Returns the name of the mappings described by this provider.\n}"}
{"index": 7020, "repo": "calcite-core-1.34.0", "des": "A SqlDialect implementation for the Presto database.", "code": "Class PrestoSqlDialect {\n\t@Nullable SqlNode emulateNullDirection(SqlNode node, boolean nullsFirst, boolean desc); // Returns the SqlNode for emulating the null direction for the given field or null if no emulation needs to be done.\n\tSqlDialect.CalendarPolicy getCalendarPolicy();\n\t@Nullable SqlNode getCastSpec(RelDataType type); // Returns SqlNode for type in \"cast(column as type)\", which might be different between databases by type name, precision etc.\n\tboolean requiresAliasForFromItems(); // Whether a sub-query in the FROM clause must have an alias.\n\tboolean supportsAggregateFunction(SqlKind kind);\n\tboolean supportsApproxCountDistinct(); // Returns whether this dialect supports APPROX_COUNT_DISTINCT functions.\n\tboolean supportsCharSet(); // Returns whether the dialect supports character set names as part of a data type, for instance VARCHAR(30) CHARACTER SET `ISO-8859-1`.\n\tboolean supportsGroupByWithCube(); // Returns whether this dialect supports \"WITH CUBE\" in \"GROUP BY\" clause.\n\tboolean supportsGroupByWithRollup(); // Returns whether this dialect supports \"WITH ROLLUP\" in the \"GROUP BY\" clause.\n\tboolean supportsNestedAggregations(); // Returns whether the dialect supports nested aggregations, for instance SELECT SUM(SUM(1)) .\n\tvoid unparseCall(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec);\n\tvoid unparseOffsetFetch(SqlWriter writer, @Nullable SqlNode offset, @Nullable SqlNode fetch); // Converts an offset and fetch into SQL.\n\tvoid unparseSqlIntervalQualifier(SqlWriter writer, SqlIntervalQualifier qualifier, RelDataTypeSystem typeSystem); // Converts an interval qualifier to a SQL string.\n}"}
{"index": 13480, "repo": "spring-messaging-6.0.11", "des": "Base class for a return value handler that encodes return values to Flux<DataBuffer> through the configured Encoders.", "code": "public abstract class AbstractEncoderMethodReturnValueHandler extends Object implements HandlerMethodReturnValueHandler {\n\torg.springframework.core.ReactiveAdapterRegistry getAdapterRegistry(); // The configured adapter registry.\n\tList<org.springframework.core.codec.Encoder<?>> getEncoders(); // The configured encoders.\n\tprotected abstract reactor.core.publisher.Mono<Void> handleEncodedContent(reactor.core.publisher.Flux<org.springframework.core.io.buffer.DataBuffer> encodedContent, org.springframework.core.MethodParameter returnType, Message<?> message); // Subclasses implement this method to handle encoded values in some way such as creating and sending messages.\n\tprotected abstract reactor.core.publisher.Mono<Void> handleNoContent(org.springframework.core.MethodParameter returnType, Message<?> message); // Invoked for a null return value, which could mean a void method or method returning an async type parameterized by void.\n\treactor.core.publisher.Mono<Void> handleReturnValue(Object returnValue, org.springframework.core.MethodParameter returnType, Message<?> message); // Handle the given return value.\n\tboolean supportsReturnType(org.springframework.core.MethodParameter returnType); // Whether the given method return type is supported by this handler.\n}"}
{"index": 3866, "repo": "hbase-client-3.0.0-alpha-4", "des": "Used to perform Put operations for a single row.", "code": "Class Put {\n\tPut add(Cell cell); // Add the specified KeyValue to this Put operation.\n\tPut addColumn(byte[] family, byte[] qualifier, byte[] value); // Add the specified column and value to this Put operation.\n\tPut addColumn(byte[] family, byte[] qualifier, long ts, byte[] value); // Add the specified column and value, with the specified timestamp as its version to this Put operation.\n\tPut addColumn(byte[] family, ByteBuffer qualifier, long ts, ByteBuffer value); // Add the specified column and value, with the specified timestamp as its version to this Put operation.\n\tCellBuilder getCellBuilder(CellBuilderType type); // get a CellBuilder instance that already has relevant Type and Row set.\n\tPut setACL(Map<String,Permission> perms); // Set the ACL for this operation.\n\tPut setACL(String user, Permission perms); // Set the ACL for this operation.\n\tPut setAttribute(String name, byte[] value); // Sets an attribute.\n\tPut setCellVisibility(CellVisibility expression); // Sets the visibility expression associated with cells in this Mutation.\n\tPut setClusterIds(List<UUID> clusterIds); // Marks that the clusters with the given clusterIds have consumed the mutation\n\tPut setDurability(Durability d); // Set the durability for this mutation\n\tPut setId(String id); // This method allows you to set an identifier on an operation.\n\tPut setPriority(int priority);\n\tPut setTimestamp(long timestamp); // Set the timestamp of the delete.\n\tPut setTTL(long ttl); // Set the TTL desired for the result of the mutation, in milliseconds.\n}"}
{"index": 10888, "repo": "spring-data-redis-3.1.2", "des": "Core mapping contract between Java types and Redis hashes/maps.", "code": "public interface HashMapper<T,K,V> {\n\tT fromHash(Map<K,V> hash); // Convert a hash (map) to an object.\n\tMap<K,V> toHash(T object); // Convert an object to a map that can be used with Redis hashes.\n}"}
{"index": 13375, "repo": "shiro-core-2.0.0-alpha-2", "des": "A simple implementation of the Realm interface that uses a set of configured user accounts and roles to support authentication and authorization.", "code": "public class SimpleAccountRealm extends AuthorizingRealm {\n\tboolean accountExists(String username);\n\tprotected void add(SimpleAccount account);\n\tprotected void add(SimpleRole role);\n\tvoid addAccount(String username, String password);\n\tvoid addAccount(String username, String password, String... roles);\n\tvoid addRole(String name);\n\tprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token); // Retrieves authentication data from an implementation-specific datasource (RDBMS, LDAP, etc.) for the given authentication token.\n\tprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals); // Retrieves the AuthorizationInfo for the given principals from the underlying data store.\n\tprotected SimpleRole getRole(String rolename);\n\tprotected SimpleAccount getUser(String username);\n\tprotected String getUsername(SimpleAccount account);\n\tprotected String getUsername(PrincipalCollection principals);\n\tboolean roleExists(String name);\n\tprotected static Set<String> toSet(String delimited, String delimiter);\n}"}
{"index": 14509, "repo": "spring-security-web-6.1.2", "des": "Allows resolving the SecurityContext using the CurrentSecurityContext annotation.", "code": "public final class CurrentSecurityContextArgumentResolver extends Object implements org.springframework.web.method.support.HandlerMethodArgumentResolver {\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, org.springframework.web.method.support.ModelAndViewContainer mavContainer, org.springframework.web.context.request.NativeWebRequest webRequest, org.springframework.web.bind.support.WebDataBinderFactory binderFactory);\n\tvoid setBeanResolver(org.springframework.expression.BeanResolver beanResolver); // Set the BeanResolver to be used on the expressions\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}"}
{"index": 10123, "repo": "spring-hateoas-2.1.2", "des": "Accessor to links pointing to controllers backing an entity type.", "code": "public interface EntityLinks extends org.springframework.plugin.core.Plugin<Class<?>> {\n\tdefault <T> TypedEntityLinks.ExtendedTypedEntityLinks<T> forType(Class<T> type, Function<T,Object> extractor); // Creates a TypedEntityLinks instance using the given type and identifier extractor function.\n\tdefault <T> TypedEntityLinks<T> forType(Function<T,?> extractor); // Creates a TypedEntityLinks instance using the given identifier extractor function.\n\tLinkBuilder linkFor(Class<?> type); // Returns a LinkBuilder able to create links to the controller managing the given entity type.\n\tLinkBuilder linkFor(Class<?> type, Object... parameters); // Returns a LinkBuilder able to create links to the controller managing the given entity type, unfolding the given parameters into the URI template the backing controller is mapped to.\n\tLinkBuilder linkForItemResource(Class<?> type, Object id); // Returns a LinkBuilder able to create links to the controller managing the given entity type and id.\n\tdefault <T> LinkBuilder linkForItemResource(T entity, Function<T,Object> identifierExtractor); // Returns a LinkBuilder able to create links to the controller managing the given entity type and identifier extractor.\n\tLink linkToCollectionResource(Class<?> type); // Creates a Link pointing to the collection resource of the given type.\n\tLink linkToItemResource(Class<?> type, Object id); // Creates a Link pointing to item resource backing the given entity type and id.\n\tdefault <T> Link linkToItemResource(T entity, Function<T,Object> identifierExtractor); // Creates a Link pointing to item resource backing the given entity and identifier extractor.\n}"}
{"index": 327, "repo": "phoenix-core-5.1.3", "des": "Client side Aggregator which will aggregate data and find distinct values with number of occurrences for each.", "code": "Class DistinctValueWithCountClientAggregator {\n\tvoid aggregate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Incrementally aggregate the value with the current row\n\tprotected int getBufferLength();\n\tPDataType getDataType();\n\tprotected abstract PDataType getResultDataType();\n\tprotected Map<Object,Integer> getSortedValueVsCount(boolean ascending, PDataType type);\n\tprotected void initBuffer();\n\tboolean isNullable();\n\tvoid reset(); // Resets the state of a expression back to its initial state and enables the expession to be evaluated incrementally (which occurs during filter evaluation where we see one key value at a time; it's possible to evaluate immediately rather than wait until all key values have been seen).\n}"}
{"index": 6155, "repo": "jackson-databind-2.15.2", "des": "Bogus deserializer that will simply skip all content there is to map and returns Java null reference.", "code": "Class NullifyingDeserializer {\n\tObject deserialize(JsonParser p, DeserializationContext ctxt); // Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles.\n\tObject deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer); // Base implementation that does not assume specific type inclusion mechanism.\n\tBoolean supportsUpdate(DeserializationConfig config); // Introspection method that may be called to see whether deserializer supports update of an existing value (aka \"merging\") or not.\n}"}
{"index": 6659, "repo": "artemis-odb-2.3.0", "des": "FieldHandler provides dependency-values to an Injector by sequentially iterating over a list of registered FieldResolver.", "code": "Class FieldHandler {\n\tvoid addFieldResolver(FieldResolver fieldResolver); // Adds a FieldResolver to this handler.\n\tBag<FieldResolver> getFieldResolvers();\n\tvoid initialize(World world, Map<String,Object> injectables); // During World construction, after systems and managers have been created, initialize(World, Map) will be called for each registered FieldResolver\n\tObject resolve(Object target, Class<?> fieldType, Field field); // Returns the first non-null value provided by FieldResolver.resolve(Object, Class, Field), or null if no resolver returned a valid value.\n}"}
{"index": 15338, "repo": "spring-boot-3.1.1", "des": "Details for an individual trust or key store in a PemSslStoreBundle.", "code": "public record PemSslStoreDetails(String type, String certificate, String privateKey, String privateKeyPassword) extends Record {\n\tString certificate(); // Returns the value of the certificate record component.\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tstatic PemSslStoreDetails forCertificate(String certificate); // Factory method to create a new PemSslStoreDetails instance for the given certificate.\n\tString privateKey(); // Returns the value of the privateKey record component.\n\tString privateKeyPassword(); // Returns the value of the privateKeyPassword record component.\n\tString type(); // Returns the value of the type record component.\n\tPemSslStoreDetails withPrivateKey(String privateKey); // Return a new PemSslStoreDetails instance with a new private key.\n\tPemSslStoreDetails withPrivateKeyPassword(String password); // Return a new PemSslStoreDetails instance with a new private key password.\n}"}
{"index": 1846, "repo": "hadoop-hdfs-3.3.6", "des": "Class to pack an AclEntry into an integer.", "code": "Enum AclEntryStatusFormat {\n\tint getLength();\n\tstatic int[] toInt(List<org.apache.hadoop.fs.permission.AclEntry> aclEntries);\n\tstatic AclEntryStatusFormat valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AclEntryStatusFormat[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18324, "repo": "opencms-core-15.0", "des": "Bean containing the 'context' of the edited container page for use in RPC calls.", "code": "Class CmsContainerPageRpcContext {\n\tCmsUUID getPageStructureId(); // Returns the pageStructureId.\n\tjava.lang.String getTemplateContext(); // Returns the templateContext.\n}"}
{"index": 16129, "repo": "spring-data-cassandra-4.1.2", "des": "Simple singleton to convert Longs to their LocalTime representation.", "code": "@ReadingConverter public static enum CassandraJsr310Converters.MillisOfDayToLocalTimeConverter extends Enum<CassandraJsr310Converters.MillisOfDayToLocalTimeConverter> implements Converter<Long,LocalTime> {\n\tLocalTime convert(Long source);\n\tstatic CassandraJsr310Converters.MillisOfDayToLocalTimeConverter valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic CassandraJsr310Converters.MillisOfDayToLocalTimeConverter[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13854, "repo": "spring-webflux-6.0.11", "des": "A ResourceResolver that resolves resources from a Cache or otherwise delegates to the resolver chain and caches the result.", "code": "public class CachingResourceResolver extends AbstractResourceResolver {\n\tprotected String computeKey(org.springframework.web.server.ServerWebExchange exchange, String requestPath);\n\torg.springframework.cache.Cache getCache(); // Return the configured Cache.\n\tList<String> getContentCodings(); // Return a read-only list with the supported content codings.\n\tprotected reactor.core.publisher.Mono<org.springframework.core.io.Resource> resolveResourceInternal(org.springframework.web.server.ServerWebExchange exchange, String requestPath, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n\tprotected reactor.core.publisher.Mono<String> resolveUrlPathInternal(String resourceUrlPath, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n\tvoid setContentCodings(List<String> codings); // Configure the supported content codings from the \"Accept-Encoding\" header for which to cache resource variations.\n}"}
{"index": 11026, "repo": "spring-shell-core-3.1.2", "des": "Base implementation of a AbstractSelectorComponent.SelectorComponentContext.", "code": "protected static class AbstractSelectorComponent.BaseSelectorComponentContext<T,I extends Nameable & Matchable & Itemable<T>,C extends AbstractSelectorComponent.SelectorComponentContext<T,I,C>> extends BaseComponentContext<C> implements AbstractSelectorComponent.SelectorComponentContext<T,I,C> {\n\tInteger getCursorRow(); // Gets a cursor row.\n\tString getInput(); // Gets an input.\n\tList<I> getItems(); // Gets an items.\n\tList<AbstractSelectorComponent.ItemState<I>> getItemStates(); // Gets an item states\n\tList<AbstractSelectorComponent.ItemState<I>> getItemStateView(); // Gets an item state view.\n\tString getName(); // Gets a name.\n\tList<I> getResultItems(); // Gets a result items.\n\tboolean isResult(); // Return if there is a result.\n\tvoid setCursorRow(Integer cursorRow); // Sets a cursor row.\n\tvoid setInput(String input); // Sets an input.\n\tvoid setItems(List<I> items); // Sets an items.\n\tvoid setItemStates(List<AbstractSelectorComponent.ItemState<I>> itemStates); // Sets an item states.\n\tvoid setItemStateView(List<AbstractSelectorComponent.ItemState<I>> itemStateView); // Sets an item state view\n\tvoid setName(String name); // Sets a name\n\tvoid setResultItems(List<I> resultItems); // Sets a result items.\n\tMap<String,Object> toTemplateModel(); // Gets context values as a map.\n}"}
{"index": 12799, "repo": "spring-data-mongodb-4.1.2", "des": "Custom extension of Parameters discovering additional", "code": "public class MongoParameters extends Parameters<MongoParameters,org.springframework.data.mongodb.repository.query.MongoParameters.MongoParameter> {\n\tprotected MongoParameters createFrom(List<org.springframework.data.mongodb.repository.query.MongoParameters.MongoParameter> parameters);\n\tprotected org.springframework.data.mongodb.repository.query.MongoParameters.MongoParameter createParameter(MethodParameter parameter);\n\tint getCollationParameterIndex(); // Returns the index of the Collation parameter or -1 if not present.\n\tint getDistanceRangeIndex();\n\tint getFullTextParameterIndex(); // Returns the index of the parameter to be used as a textquery param\n\tint getMaxDistanceIndex(); // Returns the index of the Distance parameter to be used for max distance in geo queries.\n\tint getNearIndex(); // Returns the index of the parameter to be used to start a geo-near query from.\n\tint getRangeIndex();\n\tint getUpdateIndex(); // Returns the index of the UpdateDefinition parameter or -1 if not present.\n\tboolean hasFullTextParameter();\n}"}
{"index": 13184, "repo": "spring-test-6.0.11", "des": "Defines modes which determine how @DirtiesContext is interpreted when used to annotate a test class.", "code": "public static enum DirtiesContext.ClassMode extends Enum<DirtiesContext.ClassMode> {\n\tstatic DirtiesContext.ClassMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic DirtiesContext.ClassMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 132, "repo": "commons-collections4-4.4", "des": "Implements a MapIterator using a Map entrySet.", "code": "Class EntrySetMapIterator<K,V> {\n\tK getKey(); // Gets the current key, which is the key returned by the last call to next().\n\tV getValue(); // Gets the current value, which is the value associated with the last key returned by next().\n\tboolean hasNext(); // Checks to see if there are more entries still to be iterated.\n\tK next(); // Gets the next key from the Map.\n\tvoid remove(); // Removes the last returned key from the underlying Map.\n\tvoid reset(); // Resets the state of the iterator.\n\tV setValue(V value); // Sets the value associated with the current key.\n}"}
{"index": 5895, "repo": "hadoop-yarn-server-common-3.3.6", "des": "The NodeManager is instructed to perform the given action.", "code": "Enum NodeAction {\n\tstatic NodeAction valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic NodeAction[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7340, "repo": "calcite-core-1.34.0", "des": "Enumeration of supported modification operations.", "code": "Enum TableModify.Operation {\n\tstatic TableModify.Operation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TableModify.Operation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8052, "repo": "commons-compress-1.23.0", "des": "\"enum\" for the possible actions to take if the extra field cannot be parsed.", "code": "Class ExtraFieldUtils.UnparseableExtraField {\n\tint getKey(); // Key of the action to take.\n\tZipExtraField onUnparseableExtraField(byte[] data, int off, int len, boolean local, int claimedLength); // Decides what to do with extra field data that doesn't follow the recommended pattern.\n}"}
{"index": 10022, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Template implementation for ClientRmOperations wrapping communication using ApplicationClientProtocol.", "code": "Class ClientRmTemplate {\n\tApplicationReport getApplicationReport(ApplicationId applicationId); // Gets a report of the application.\n\tToken getDelegationToken(String renewer); // Gets the resource manager delegation token.\n\tGetNewApplicationResponse getNewApplication(); // Requests a new application from a resource manager.\n\tprotected InetSocketAddress getRpcAddress(Configuration config); // Gets the InetSocketAddress where this accessor should connect.\n\tKillApplicationResponse killApplication(ApplicationId applicationId); // Requests ResourceManager to abort submitted application.\n\tList<ApplicationReport> listApplications(); // Gets a list of ApplicationReports from a resource manager.\n\tList<ApplicationReport> listApplications(EnumSet<YarnApplicationState> states, Set<String> types); // Gets a list of ApplicationReports from a resource manager.\n\tSubmitApplicationResponse submitApplication(ApplicationSubmissionContext appSubContext); // Submits a new application into resource manager.\n}"}
{"index": 9923, "repo": "iceberg-api-1.3.0", "des": "Summarizes the values of one partition field stored in a manifest file.", "code": "Interface ManifestFile.PartitionFieldSummary {\n\tdefault java.lang.Boolean containsNaN(); // Returns true if at least one data file in the manifest has a NaN value for the field.\n\tboolean containsNull(); // Returns true if at least one data file in the manifest has a null value for the field.\n\tManifestFile.PartitionFieldSummary copy(); // Copies this summary.\n\tstatic Types.StructType getType();\n\tjava.nio.ByteBuffer lowerBound(); // Returns a ByteBuffer that contains a serialized bound lower than all values of the field.\n\tjava.nio.ByteBuffer upperBound(); // Returns a ByteBuffer that contains a serialized bound higher than all values of the field.\n}"}
{"index": 13516, "repo": "spring-messaging-6.0.11", "des": "A messaging template that resolves destinations names to MessageChannel's to send and receive messages from.", "code": "public class GenericMessagingTemplate extends AbstractDestinationResolvingMessagingTemplate<MessageChannel> implements org.springframework.beans.factory.BeanFactoryAware {\n\tprotected final Message<?> doReceive(MessageChannel channel); // Actually receive a message from the given destination.\n\tprotected final Message<?> doReceive(MessageChannel channel, long timeout);\n\tprotected final void doSend(MessageChannel channel, Message<?> message);\n\tprotected final void doSend(MessageChannel channel, Message<?> message, long timeout);\n\tprotected final Message<?> doSendAndReceive(MessageChannel channel, Message<?> requestMessage);\n\tlong getReceiveTimeout(); // Return the configured receive operation timeout value.\n\tString getReceiveTimeoutHeader(); // Return the configured receive-timeout header.\n\tlong getSendTimeout(); // Return the configured default send operation timeout value.\n\tString getSendTimeoutHeader(); // Return the configured send-timeout header.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setReceiveTimeout(long receiveTimeout); // Configure the default timeout value to use for receive operations.\n\tvoid setReceiveTimeoutHeader(String receiveTimeoutHeader); // Set the name of the header used to determine the send timeout (if present).\n\tvoid setSendTimeout(long sendTimeout); // Configure the default timeout value to use for send operations.\n\tvoid setSendTimeoutHeader(String sendTimeoutHeader); // Set the name of the header used to determine the send timeout (if present).\n\tvoid setThrowExceptionOnLateReply(boolean throwExceptionOnLateReply); // Whether the thread sending a reply should have an exception raised if the receiving thread isn't going to receive the reply either because it timed out, or because it already received a reply, or because it got an exception while sending the request message.\n}"}
{"index": 517, "repo": "ignite-core-2.15.0", "des": "Defines configuration properties for a specific binary type.", "code": "Class BinaryTypeConfiguration {\n\t@Nullable Map<String,Integer> getEnumValues();\n\tBinaryIdMapper getIdMapper(); // Gets ID mapper.\n\tBinaryNameMapper getNameMapper(); // Gets name mapper.\n\tBinarySerializer getSerializer(); // Gets serializer.\n\tString getTypeName(); // Gets type name.\n\tboolean isEnum(); // Gets whether this is enum type.\n\tBinaryTypeConfiguration setEnum(boolean isEnum); // Sets whether this is enum type.\n\tBinaryTypeConfiguration setEnumValues(@Nullable Map<String,Integer> values); // Set enum ordinal to names mapping.\n\tBinaryTypeConfiguration setIdMapper(BinaryIdMapper idMapper); // Sets ID mapper.\n\tBinaryTypeConfiguration setNameMapper(BinaryNameMapper nameMapper); // Sets name mapper.\n\tBinaryTypeConfiguration setSerializer(BinarySerializer serializer); // Sets serializer.\n\tBinaryTypeConfiguration setTypeName(String typeName); // Sets type name.\n}"}
{"index": 9394, "repo": "hadoop-yarn-api-3.3.6", "des": "ReservationACL enumerates the various ACLs for reservations.", "code": "Enum ReservationACL {\n\tstatic ReservationACL valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ReservationACL[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3972, "repo": "zookeeper-3.8.2", "des": "Thread safe FIFO CircularBuffer implementation.", "code": "Class CircularBuffer<T> {\n\tboolean isEmpty();\n\tboolean isFull();\n\tT peek();\n\tvoid reset();\n\tint size();\n\tT take(); // Reads from the buffer in a FIFO manner.\n\tvoid write(T element); // Puts elements in the next available index in the array.\n}"}
{"index": 1581, "repo": "pdfbox-3.0.0-beta1", "des": "A PDStream represents a stream in a PDF document.", "code": "Class PDStream {\n\tCOSInputStream createInputStream(); // This will get a stream that can be read from.\n\tCOSInputStream createInputStream(DecodeOptions options);\n\tInputStream createInputStream(List<String> stopFilters); // This will get a stream with some filters applied but not others.\n\tOutputStream createOutputStream(); // This will get a stream that can be written to.\n\tOutputStream createOutputStream(COSName filter); // This will get a stream that can be written to, with the given filter.\n\tCOSStream getCOSObject(); // Get the cos stream associated with this object.\n\tint getDecodedStreamLength(); // Get the decoded stream length.\n\tList<Object> getDecodeParms(); // Get the list of decode parameters.\n\tPDFileSpecification getFile(); // This will get the file specification for this stream.\n\tList<Object> getFileDecodeParams(); // Get the list of decode parameters.\n\tList<String> getFileFilters(); // This will get the list of filters that are associated with this stream.\n\tList<COSName> getFilters(); // This will get the list of filters that are associated with this stream.\n\tint getLength(); // This will get the length of the filtered/compressed stream.\n\tPDMetadata getMetadata(); // Get the metadata that is part of the document catalog.\n\tvoid setDecodedStreamLength(int decodedStreamLength); // Set the decoded stream length.\n\tvoid setDecodeParms(List<?> decodeParams); // This will set the list of decode parameters.\n\tvoid setFile(PDFileSpecification f); // Set the file specification.\n\tvoid setFileDecodeParams(List<?> decodeParams); // This will set the list of decode params.\n\tvoid setFileFilters(List<String> filters); // This will set the filters that are part of this stream.\n\tvoid setFilters(List<COSName> filters); // This will set the filters that are part of this stream.\n\tvoid setMetadata(PDMetadata meta); // Set the metadata for this object.\n\tbyte[] toByteArray(); // This will copy the stream into a byte array.\n}"}
{"index": 12359, "repo": "spring-boot-cli-3.1.1", "des": "Internal Command used for 'help' requests.", "code": "public class HelpCommand extends AbstractCommand {\n\tString getHelp(); // Gets full help text for the command, e.g.\n\tCollection<OptionHelp> getOptionsHelp(); // Returns help for each supported option.\n\tString getUsageHelp(); // Returns usage help for the command.\n\tExitStatus run(String... args); // Run the command.\n}"}
{"index": 17300, "repo": "groovy-4.0.13", "des": "Represents an evictable memoize cache with its essential methods", "code": "public interface EvictableCache<K,V> extends MemoizeCache<K,V>, Map<K,V> {\n\tdefault void clear(); // Clear the cache\n\tMap<K,V> clearAll(); // Clear the cache\n\tboolean containsKey(Object key); // Determines if the cache contains an entry for the specified key.\n\tSet<K> keys(); // Get all keys associated to cached values\n\tV remove(Object key); // Remove the cached value by the key\n\tint size(); // Get the size of the cache\n\tCollection<V> values(); // Get all cached values\n}"}
{"index": 15643, "repo": "spring-security-core-6.1.2", "des": "An implementation of LoginModule that uses a Spring Security SecurityContext to provide authentication.", "code": "public class SecurityContextLoginModule extends Object implements LoginModule {\n\tboolean abort(); // Abort the authentication process by forgetting the Spring Security Authentication.\n\tboolean commit(); // Authenticate the Subject (phase two) by adding the Spring Security Authentication to the Subject's principals.\n\tvoid initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options); // Initialize this LoginModule.\n\tboolean login(); // Authenticate the Subject (phase one) by extracting the Spring Security Authentication from the current SecurityContext.\n\tboolean logout(); // Log out the Subject.\n\tvoid setSecurityContextHolderStrategy(SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 7264, "repo": "calcite-core-1.34.0", "des": "Parse tree node that represents a PIVOT applied to a table reference (or sub-query).", "code": "Class SqlPivot {\n\tvoid forEachAgg(BiConsumer<String,SqlNode> consumer); // Returns the aggregate list as (alias, call) pairs.\n\tvoid forEachNameValues(BiConsumer<String,SqlNodeList> consumer); // Returns the value list as (alias, node list) pairs.\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\tvoid setOperand(int i, @Nullable SqlNode operand); // Changes the value of an operand.\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n\tSet<String> usedColumnNames(); // Returns the set of columns that are referenced as an argument to an aggregate function or in a column in the FOR clause.\n}"}
{"index": 14987, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Configurer for the OAuth 2.0 Token Introspection Endpoint.", "code": "public final class OAuth2TokenIntrospectionEndpointConfigurer extends Object {\n\tOAuth2TokenIntrospectionEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider); // Adds an AuthenticationProvider used for authenticating a type of OAuth2TokenIntrospectionAuthenticationToken.\n\tOAuth2TokenIntrospectionEndpointConfigurer authenticationProviders(Consumer<List<org.springframework.security.authentication.AuthenticationProvider>> authenticationProvidersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationProvider's allowing the ability to add, remove, or customize a specific AuthenticationProvider.\n\tOAuth2TokenIntrospectionEndpointConfigurer errorResponseHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler errorResponseHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tprotected final org.springframework.security.config.annotation.ObjectPostProcessor<Object> getObjectPostProcessor();\n\tOAuth2TokenIntrospectionEndpointConfigurer introspectionRequestConverter(org.springframework.security.web.authentication.AuthenticationConverter introspectionRequestConverter); // Adds an AuthenticationConverter used when attempting to extract an Introspection Request from HttpServletRequest to an instance of OAuth2TokenIntrospectionAuthenticationToken used for authenticating the request.\n\tOAuth2TokenIntrospectionEndpointConfigurer introspectionRequestConverters(Consumer<List<org.springframework.security.web.authentication.AuthenticationConverter>> introspectionRequestConvertersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationConverter's allowing the ability to add, remove, or customize a specific AuthenticationConverter.\n\tOAuth2TokenIntrospectionEndpointConfigurer introspectionResponseHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler introspectionResponseHandler); // Sets the AuthenticationSuccessHandler used for handling an OAuth2TokenIntrospectionAuthenticationToken.\n\tprotected final <T> T postProcess(T object);\n}"}
{"index": 11236, "repo": "wicket-extensions-10.0.0-M1", "des": "Base class for buttons that work with the wizard component.", "code": "public abstract class WizardButton extends org.apache.wicket.markup.html.form.Button {\n\tprotected final IWizard getWizard(); // Gets the IWizard.\n\tprotected final IWizardModel getWizardModel(); // Gets the wizard model.\n\tprotected abstract void onClick(); // Called when this button is clicked.\n\tfinal void onSubmit();\n}"}
{"index": 16391, "repo": "spring-integration-http-6.1.2", "des": "The BaseHttpInboundEndpointSpec implementation for the HttpRequestHandlingController.", "code": "public class HttpControllerEndpointSpec extends BaseHttpInboundEndpointSpec<HttpControllerEndpointSpec,HttpRequestHandlingController> {\n\tHttpControllerEndpointSpec errorCode(String errorCode); // The error code to use to signal an error in the message handling.\n\tHttpControllerEndpointSpec errorsKey(String errorsKey); // The key used to expose Errors in the core, in the case that message handling fails.\n\tHttpControllerEndpointSpec replyKey(String replyKey); // Specify the key to be used when adding the reply Message or payload to the core map (will be payload only unless the value of BaseHttpInboundEndpoint.setExtractReplyPayload(boolean) is false).\n}"}
{"index": 8575, "repo": "commons-io-2.13.0", "des": "An IOException decorator that adds a serializable tag to the wrapped exception.", "code": "Class TaggedIOException {\n\tIOException getCause(); // Returns the wrapped exception.\n\tSerializable getTag(); // Returns the serializable tag object.\n\tstatic boolean isTaggedWith(Throwable throwable, Object tag); // Checks whether the given throwable is tagged with the given tag.\n\tstatic void throwCauseIfTaggedWith(Throwable throwable, Object tag); // Throws the original IOException if the given throwable is a TaggedIOException decorator the given tag.\n}"}
{"index": 18637, "repo": "opencms-gwt-15.0", "des": "A menu entry widget for selecting choices for complex choice values.", "code": "Class CmsChoiceMenuEntryWidget {\n\tCmsAttributeChoiceWidget getAttributeChoiceWidget(); // Gets the root choice menu.\n\tCmsChoiceMenuEntryBean getEntryBean(); // Gets the menu entry bean.\n\tcom.google.gwt.user.client.rpc.AsyncCallback<CmsChoiceMenuEntryBean> getSelectHandler(); // Gets the select handler.\n\tCmsChoiceSubmenu getSubmenu(); // Gets the submenu to which this entry belongs (or null if it belongs to a root menu).\n}"}
{"index": 1876, "repo": "hadoop-hdfs-3.3.6", "des": "The difference of an INodeFile between two snapshots.", "code": "Class FileDiff {\n\tint compareTo(Integer that); // Compare diffs with snapshot ID.\n\tvoid destroyAndCollectSnapshotBlocks(INode.BlocksMapUpdateInfo collectedBlocks);\n\torg.apache.hadoop.hdfs.server.blockmanagement.BlockInfo[] getBlocks();\n\tlong getFileSize();\n\tint getSnapshotId();\n\tvoid setBlocks(org.apache.hadoop.hdfs.server.blockmanagement.BlockInfo[] blocks); // Copy block references into the snapshot up to the current fileSize.\n}"}
{"index": 7270, "repo": "calcite-core-1.34.0", "des": "Refinement to SqlShuttle which maintains a stack of scopes.", "code": "Class SqlScopedShuttle {\n\tprotected SqlValidatorScope getScope(); // Returns the current scope.\n\t@Nullable SqlNode visit(SqlCall call); // Visits a call to a SqlOperator.\n\tprotected @Nullable SqlNode visitScoped(SqlCall call); // Visits an operator call.\n}"}
{"index": 11715, "repo": "spring-data-neo4j-7.1.2", "des": "Responsible for storing, updating and retrieving the bookmarks of Neo4j's transaction.", "code": "@API(status=STABLE, since=\"6.1.1\") public sealed interface Neo4jBookmarkManager {\n\tstatic Neo4jBookmarkManager create(); // Returns the default bookmark manager.\n\tstatic Neo4jBookmarkManager create(Supplier<Set<org.neo4j.driver.Bookmark>> bookmarksSupplier); // Use this factory method to add supplier of initial \"seeding\" bookmarks to the transaction managers\n\tstatic Neo4jBookmarkManager createReactive();\n\tstatic Neo4jBookmarkManager createReactive(Supplier<Set<org.neo4j.driver.Bookmark>> bookmarksSupplier); // Use this factory method to add supplier of initial \"seeding\" bookmarks to the transaction managers\n\tCollection<org.neo4j.driver.Bookmark> getBookmarks(); // No need to introspect this collection ever.\n\tstatic Neo4jBookmarkManager noop(); // Use this bookmark manager at your own risk, it will effectively disable any bookmark management by dropping all bookmarks and never supplying any.\n\tdefault void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher); // A hook for bookmark managers supporting events.\n\tvoid updateBookmarks(Collection<org.neo4j.driver.Bookmark> usedBookmarks, Collection<org.neo4j.driver.Bookmark> newBookmarks); // Refreshes the bookmark manager with the newBookmarks new bookmarks received after the last transaction committed.\n}"}
{"index": 13510, "repo": "spring-messaging-6.0.11", "des": "Extends MessageSendingOperations and adds operations for sending messages to a destination specified as a (resolvable) String name.", "code": "public interface DestinationResolvingMessageSendingOperations<D> extends MessageSendingOperations<D> {\n\t<T> void convertAndSend(String destinationName, T payload); // Resolve the given destination name to a destination, convert the payload Object to serialized form, possibly using a MessageConverter, wrap it as a message and send it to the resolved destination.\n\t<T> void convertAndSend(String destinationName, T payload, Map<String,Object> headers); // Resolve the given destination name to a destination, convert the payload Object to serialized form, possibly using a MessageConverter, wrap it as a message with the given headers and send it to the resolved destination.\n\t<T> void convertAndSend(String destinationName, T payload, Map<String,Object> headers, MessagePostProcessor postProcessor); // Resolve the given destination name to a destination, convert the payload Object to serialized form, possibly using a MessageConverter, wrap it as a message with the given headers, apply the given post processor, and send the resulting message to the resolved destination.\n\t<T> void convertAndSend(String destinationName, T payload, MessagePostProcessor postProcessor); // Resolve the given destination name to a destination, convert the payload Object to serialized form, possibly using a MessageConverter, wrap it as a message, apply the given post processor, and send the resulting message to the resolved destination.\n\tvoid send(String destinationName, Message<?> message); // Resolve the given destination name to a destination and send a message to it.\n}"}
{"index": 3277, "repo": "hbase-common-3.0.0-alpha-4", "des": "An Number of arbitrary precision and variable-length encoding.", "code": "Class OrderedNumeric {\n\tNumber decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tdouble decodeDouble(PositionedByteRange src); // Read a double value from the buffer src.\n\tlong decodeLong(PositionedByteRange src); // Read a long value from the buffer src.\n\tint encode(PositionedByteRange dst, Number val); // Write instance val into buffer dst.\n\tClass<Number> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(Number val); // Inform consumers how long the encoded byte[] will be.\n\tint encodeDouble(PositionedByteRange dst, double val); // Write instance val into buffer dst.\n\tint encodeLong(PositionedByteRange dst, long val); // Write instance val into buffer dst.\n}"}
{"index": 8372, "repo": "commons-email-1.5", "des": "Creates a DataSource based on an class path.", "code": "Class DataSourceClassPathResolver {\n\tString getClassPathBase();\n\tDataSource resolve(String resourceLocation); // Resolves the given resource location to a DataSource.\n\tDataSource resolve(String resourceLocation, boolean isLenient); // Resolves the given resource location to a DataSource.\n}"}
{"index": 5721, "repo": "freemarker-2.3.32", "des": "Superclass of OutputFormat-s that represent a \"markup\" format, which is any format where certain character sequences have special meaning, and thus may need escaping.", "code": "Class MarkupOutputFormat<MO extends TemplateMarkupOutputModel> {\n\tabstract MO concat(MO mo1, MO mo2); // Returns a TemplateMarkupOutputModel that contains the content of both TemplateMarkupOutputModel objects concatenated.\n\tabstract java.lang.String escapePlainText(java.lang.String plainTextContent); // Should give the same result as fromPlainTextByEscaping(String) and then getMarkupString(TemplateMarkupOutputModel), but the implementation may use a more efficient solution.\n\tabstract MO fromMarkup(java.lang.String markupText); // Wraps a String that's already markup to TemplateMarkupOutputModel interface, to indicate its format.\n\tabstract MO fromPlainTextByEscaping(java.lang.String textToEsc); // Converts a String that's assumed to be plain text to TemplateMarkupOutputModel, by escaping any special characters in the plain text.\n\tabstract java.lang.String getMarkupString(MO mo); // Returns the content as markup text; never null.\n\tabstract java.lang.String getSourcePlainText(MO mo); // If this TemplateMarkupOutputModel was created with fromPlainTextByEscaping(String), it returns the original plain text, otherwise it returns null.\n\tabstract boolean isAutoEscapedByDefault(); // Tells if by default auto-escaping should be on for this format.\n\tabstract boolean isEmpty(MO mo); // Returns if the markup is empty (0 length).\n\tabstract boolean isLegacyBuiltInBypassed(java.lang.String builtInName); // Tells if a string built-in that can't handle a TemplateMarkupOutputModel left hand operand can bypass this object as is.\n\tabstract void output(MO mo, java.io.Writer out); // Prints the parameter model to the output.\n\tabstract void output(java.lang.String textToEsc, java.io.Writer out); // Equivalent to calling fromPlainTextByEscaping(String) and then output(TemplateMarkupOutputModel, Writer), but the implementation may use a more efficient solution.\n\t<MO2 extends TemplateMarkupOutputModel<MO2>>void outputForeign(MO2 mo, java.io.Writer out); // Outputs a value from a foreign output format; only used if OutputFormat.isOutputFormatMixingAllowed() return true.\n}"}
{"index": 3389, "repo": "hadoop-azure-3.3.6", "des": "An implementation of the StorageInterface for SAS Key mode.", "code": "Class SecureStorageInterfaceImpl {\n\tvoid createBlobClient(com.microsoft.azure.storage.CloudStorageAccount account); // Creates a new Blob service client.\n\tvoid createBlobClient(URI baseUri); // Creates an instance of the CloudBlobClient class using the specified Blob service endpoint.\n\tvoid createBlobClient(URI baseUri, com.microsoft.azure.storage.StorageCredentials credentials); // Creates an instance of the CloudBlobClient class using the specified Blob service endpoint and account credentials.\n\tStorageInterface.CloudBlobContainerWrapper getContainerReference(String name); // Returns a reference to a StorageInterface.CloudBlobContainerWrapper object that represents the cloud blob container for the specified address.\n\tcom.microsoft.azure.storage.StorageCredentials getCredentials(); // Returns the credentials for the Blob service, as configured for the storage account.\n\tvoid setRetryPolicyFactory(com.microsoft.azure.storage.RetryPolicyFactory retryPolicyFactory); // Sets the RetryPolicyFactory object to use when making service requests.\n\tvoid setStorageAccountName(String storageAccount);\n\tvoid setTimeoutInMs(int timeoutInMs); // Sets the timeout to use when making requests to the storage service.\n}"}
{"index": 16788, "repo": "spring-expression-6.0.11", "des": "An Indexer can index into some proceeding structure to access a particular piece of it.", "code": "public class Indexer extends SpelNodeImpl {\n\tvoid generateCode(org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode for this node into the supplied visitor.\n\tTypedValue getValueInternal(ExpressionState state);\n\tprotected ValueRef getValueRef(ExpressionState state);\n\tboolean isCompilable(); // Check whether a node can be compiled to bytecode.\n\tboolean isWritable(ExpressionState expressionState); // Determine if this expression node will support a setValue() call.\n\tTypedValue setValueInternal(ExpressionState state, Supplier<TypedValue> valueSupplier); // Evaluate the expression to a node and then set the new value created by the specified Supplier on that node.\n\tString toStringAST(); // Return the string form of this AST node.\n}"}
{"index": 5207, "repo": "druid-processing-26.0.0", "des": "Interface containing dictionary-related methods common to DimensionSelector, SingleValueDimensionVectorSelector, and MultiValueDimensionVectorSelector.", "code": "Interface DimensionDictionarySelector {\n\tint getValueCardinality(); // Value cardinality is the cardinality of the different occurring values.\n\tIdLookup idLookup(); // Returns IdLookup if available for this DimensionSelector, or null.\n\tString lookupName(int id); // Returns the value for a particular dictionary id as a Java String.\n\tdefault ByteBuffer lookupNameUtf8(int id); // Returns the value for a particular dictionary id as UTF-8 bytes.\n\tboolean nameLookupPossibleInAdvance(); // Returns true if it is possible to lookupName(int) by ids from 0 to getValueCardinality() before the rows with those ids are returned.\n\tdefault boolean supportsLookupNameUtf8(); // Returns whether this selector supports lookupNameUtf8(int).\n}"}
{"index": 16842, "repo": "spring-amqp-3.0.6", "des": "Convenient base class for MessageConverter implementations.", "code": "public abstract class AbstractMessageConverter extends Object implements MessageConverter {\n\tprotected abstract Message createMessage(Object object, MessageProperties messageProperties); // Crate a message from the payload object and message properties provided.\n\tprotected Message createMessage(Object object, MessageProperties messageProperties, Type genericType); // Crate a message from the payload object and message properties provided.\n\tprotected boolean isCreateMessageIds(); // Flag to indicate that new messages should have unique identifiers added to their properties before sending.\n\tvoid setCreateMessageIds(boolean createMessageIds); // Flag to indicate that new messages should have unique identifiers added to their properties before sending.\n\tfinal Message toMessage(Object object, MessageProperties messageProperties); // Convert a Java object to a Message.\n\tfinal Message toMessage(Object object, MessageProperties messagePropertiesArg, Type genericType); // Convert a Java object to a Message.\n}"}
{"index": 9868, "repo": "commons-math3-3.6.1", "des": "Generates values for use in simulation applications.", "code": "Class ValueServer {\n\tvoid closeReplayFile(); // Closes valuesFileURL after use in REPLAY_MODE.\n\tvoid computeDistribution(); // Computes the empirical distribution using values from the file in valuesFileURL, using the default number of bins.\n\tvoid computeDistribution(int binCount); // Computes the empirical distribution using values from the file in valuesFileURL and binCount bins.\n\tvoid fill(double[] values); // Fills the input array with values generated using getNext() repeatedly.\n\tdouble[] fill(int length); // Returns an array of length length with values generated using getNext() repeatedly.\n\tEmpiricalDistribution getEmpiricalDistribution(); // Returns the EmpiricalDistribution used when operating in 0.\n\tint getMode(); // Returns the data generation mode.\n\tdouble getMu(); // Returns the mean used when operating in GAUSSIAN_MODE, EXPONENTIAL_MODE or UNIFORM_MODE.\n\tdouble getNext(); // Returns the next generated value, generated according to the mode value (see MODE constants).\n\tdouble getSigma(); // Returns the standard deviation used when operating in GAUSSIAN_MODE.\n\tURL getValuesFileURL(); // Returns the URL for the file used to build the empirical distribution when using DIGEST_MODE.\n\tvoid reSeed(long seed); // Reseeds the random data generator.\n\tvoid resetReplayFile(); // Resets REPLAY_MODE file pointer to the beginning of the valuesFileURL.\n\tvoid setMode(int mode); // Sets the data generation mode.\n\tvoid setMu(double mu); // Sets the mean used in data generation.\n\tvoid setSigma(double sigma); // Sets the standard deviation used in GAUSSIAN_MODE.\n\tvoid setValuesFileURL(String url); // Sets the values file URL using a string URL representation.\n\tvoid setValuesFileURL(URL url); // Sets the the values file URL.\n}"}
{"index": 2628, "repo": "mahout-core-14.1", "des": "Only for performance tuning of compute intensive linear algebraic computations.", "code": "Class Mult {\n\tdouble apply(double a); // Returns the result of the function evaluation.\n\tstatic Mult div(double constant); // a / constant.\n\tdouble getMultiplicator();\n\tstatic Mult mult(double constant); // a * constant.\n\tvoid setMultiplicator(double multiplicator);\n}"}
{"index": 15895, "repo": "camel-api-4.0.0-RC1", "des": "Base configuration for access to Vaults.", "code": "public class VaultConfiguration extends Object {\n\tAwsVaultConfiguration aws(); // AWS Vault Configuration\n\tAzureVaultConfiguration azure(); // Azure Vault Configuration\n\tGcpVaultConfiguration gcp(); // GCP Vault Configuration\n\tAwsVaultConfiguration getAwsVaultConfiguration();\n\tAzureVaultConfiguration getAzureVaultConfiguration();\n\tGcpVaultConfiguration getGcpVaultConfiguration();\n\tHashicorpVaultConfiguration getHashicorpVaultConfiguration();\n\tHashicorpVaultConfiguration hashicorp(); // Hashicorp Vault Configuration\n\tvoid setAwsVaultConfiguration(AwsVaultConfiguration aws);\n\tvoid setAzureVaultConfiguration(AzureVaultConfiguration azure);\n\tvoid setGcpVaultConfiguration(GcpVaultConfiguration gcp);\n\tvoid setHashicorpVaultConfiguration(HashicorpVaultConfiguration hashicorp);\n}"}
{"index": 9066, "repo": "hbase-server-3.0.0-alpha-4", "des": "This is a generic region split calculator.", "code": "Class RegionSplitCalculator<R extends KeyRange> {\n\tboolean add(R range); // Adds an edge to the split calculator\n\torg.apache.hbase.thirdparty.com.google.common.collect.Multimap<byte[],R> calcCoverage(); // Generates a coverage multimap from split key to Regions that start with the split key.\n\tstatic <R extends KeyRange>List<R> findBigRanges(Collection<R> bigOverlap, int count); // Find specified number of top ranges in a big overlap group.\n\tTreeSet<byte[]> getSplits();\n\torg.apache.hbase.thirdparty.com.google.common.collect.Multimap<byte[],R> getStarts();\n}"}
{"index": 18685, "repo": "opencms-gwt-15.0", "des": "CSS resource for the CmsFloatDecoratedPanel class.", "code": "Interface I_CmsFloatDecoratedPanelCss {\n\tjava.lang.String decorationBox(); // CSS class accessor.\n\tjava.lang.String decorationBoxSmall(); // CSS class accessor.\n\tjava.lang.String floatBox(); // CSS class accessor.\n\tjava.lang.String floatDecoratedPanel(); // CSS class accessor.\n\tjava.lang.String primary(); // CSS class accessor.\n}"}
{"index": 10748, "repo": "spring-tx-6.0.11", "des": "Common representation of the current state of a transaction.", "code": "public interface TransactionExecution {\n\tboolean isCompleted(); // Return whether this transaction is completed, that is, whether it has already been committed or rolled back.\n\tboolean isNewTransaction(); // Return whether the present transaction is new; otherwise participating in an existing transaction, or potentially not running in an actual transaction in the first place.\n\tboolean isRollbackOnly(); // Return whether the transaction has been marked as rollback-only (either by the application or by the transaction infrastructure).\n\tvoid setRollbackOnly(); // Set the transaction rollback-only.\n}"}
{"index": 18207, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Generalized contract for a \"ManagedBean\" as seen by Hibernate", "code": "Interface ManagedBean<T> {\n\tjava.lang.Class<T> getBeanClass(); // The bean Java type\n\tT getBeanInstance(); // The bean reference\n}"}
{"index": 15744, "repo": "camel-api-4.0.0-RC1", "des": "A condition to define when a given Exchange matches when is being routed.", "code": "public interface Condition {\n\tboolean matchEvent(Exchange exchange, CamelEvent.ExchangeEvent event); // Does the condition match\n\tboolean matchProcess(Exchange exchange, Processor processor, NamedNode definition); // Does the condition match\n}"}
{"index": 981, "repo": "ignite-core-2.15.0", "des": "Jdbc thin partiton result that contains partition mappings.", "code": "Class JdbcCachePartitionsResult {\n\tList<JdbcThinPartitionAwarenessMappingGroup> getMappings();\n\tvoid readBinary(BinaryReaderExImpl reader, JdbcProtocolContext protoCtx); // Reads fields from provided reader.\n\tvoid writeBinary(BinaryWriterExImpl writer, JdbcProtocolContext protoCtx); // Writes fields to provided writer.\n}"}
{"index": 5120, "repo": "druid-processing-26.0.0", "des": "Base class for \"map\" functions, which are a class of ApplyFunction which take a lambda function that is mapped to the values of an ApplyFunction.", "code": "Class ApplyFunction.BaseMapFunction {\n\tExpressionType getOutputType(Expr.InputBindingInspector inspector, org.apache.druid.math.expr.LambdaExpr expr, List<Expr> args); // Compute the output type of this function for a given lambda and the argument expressions which will be applied as its inputs.\n\tboolean hasArrayOutput(org.apache.druid.math.expr.LambdaExpr lambdaExpr); // Returns true if apply function produces an array output.\n}"}
{"index": 13676, "repo": "spring-webmvc-6.0.11", "des": "Convenient superclass for Excel document views in traditional XLS format.", "code": "public abstract class AbstractXlsView extends AbstractView {\n\tprotected abstract void buildExcelDocument(Map<String,Object> model, org.apache.poi.ss.usermodel.Workbook workbook, HttpServletRequest request, HttpServletResponse response); // Application-provided subclasses must implement this method to populate the Excel workbook document, given the model.\n\tprotected org.apache.poi.ss.usermodel.Workbook createWorkbook(Map<String,Object> model, HttpServletRequest request); // Template method for creating the POI Workbook instance.\n\tprotected boolean generatesDownloadContent(); // Return whether this view generates download content (typically binary content like PDF or Excel files).\n\tprotected final void renderMergedOutputModel(Map<String,Object> model, HttpServletRequest request, HttpServletResponse response); // Renders the Excel view, given the specified model.\n\tprotected void renderWorkbook(org.apache.poi.ss.usermodel.Workbook workbook, HttpServletResponse response); // The actual render step: taking the POI Workbook and rendering it to the given response.\n}"}
{"index": 7345, "repo": "calcite-core-1.34.0", "des": "UnionEliminatorRule checks to see if its possible to optimize a Union call by eliminating the Union operator altogether in the case the call consists of only one input.", "code": "Class UnionEliminatorRule {\n\tboolean autoPruneOld(); // Whether the planner should automatically prune old node when there is at least 1 equivalent rel generated by the rule.\n\tboolean matches(RelOptRuleCall call); // Returns whether this rule could possibly match the given operands.\n\tvoid onMatch(RelOptRuleCall call); // Receives notification about a rule match.\n}"}
{"index": 14567, "repo": "spring-security-web-6.1.2", "des": "Detects if there is no Authentication object in the SecurityContext, and populates the context with a remember-me authentication token if a RememberMeServices implementation so requests.", "code": "public class RememberMeAuthenticationFilter extends org.springframework.web.filter.GenericFilterBean implements org.springframework.context.ApplicationEventPublisherAware {\n\tvoid afterPropertiesSet();\n\tvoid doFilter(jakarta.servlet.ServletRequest request, jakarta.servlet.ServletResponse response, jakarta.servlet.FilterChain chain);\n\tRememberMeServices getRememberMeServices();\n\tprotected void onSuccessfulAuthentication(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authResult); // Called if a remember-me token is presented and successfully authenticated by the RememberMeServices autoLogin method and the AuthenticationManager.\n\tprotected void onUnsuccessfulAuthentication(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException failed); // Called if the AuthenticationManager rejects the authentication object returned from the RememberMeServices autoLogin method.\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher eventPublisher);\n\tvoid setAuthenticationSuccessHandler(AuthenticationSuccessHandler successHandler); // Allows control over the destination a remembered user is sent to when they are successfully authenticated.\n\tvoid setSecurityContextHolderStrategy(org.springframework.security.core.context.SecurityContextHolderStrategy securityContextHolderStrategy); // Sets the SecurityContextHolderStrategy to use.\n\tvoid setSecurityContextRepository(SecurityContextRepository securityContextRepository); // Sets the SecurityContextRepository to save the SecurityContext on authentication success.\n}"}
{"index": 16602, "repo": "spring-beans-6.0.11", "des": "Interface that can be used to configure the code that will be generated to register beans.", "code": "public interface BeanRegistrationsCode {\n\torg.springframework.javapoet.ClassName getClassName(); // Return the name of the class being used for registrations.\n\torg.springframework.aot.generate.GeneratedMethods getMethods(); // Return a GeneratedMethods being used by the registrations code.\n}"}
{"index": 6468, "repo": "exoplayer-core-2.9.6", "des": "Defines multiple mutations on metadata value which are applied atomically.", "code": "Class ContentMetadataMutations {\n\tjava.util.Map<java.lang.String,java.lang.Object> getEditedValues(); // Returns a map of metadata name, value pairs to be set.\n\tjava.util.List<java.lang.String> getRemovedValues(); // Returns a list of names of metadata values to be removed.\n\tContentMetadataMutations remove(java.lang.String name); // Adds a mutation to remove a metadata value.\n\tContentMetadataMutations set(java.lang.String name, byte[] value); // Adds a mutation to set a metadata value.\n\tContentMetadataMutations set(java.lang.String name, long value); // Adds a mutation to set a metadata value.\n\tContentMetadataMutations set(java.lang.String name, java.lang.String value); // Adds a mutation to set a metadata value.\n}"}
{"index": 460, "repo": "phoenix-core-5.1.3", "des": "The states of the processing a page of index rows.", "code": "Enum UncoveredIndexRegionScanner.State {\n\tstatic UncoveredIndexRegionScanner.State valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic UncoveredIndexRegionScanner.State[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16781, "repo": "spring-expression-6.0.11", "des": "Expressions are executed in an evaluation context.", "code": "public interface EvaluationContext {\n\tdefault TypedValue assignVariable(String name, Supplier<TypedValue> valueSupplier); // Assign the value created by the specified Supplier to a named variable within this evaluation context.\n\tBeanResolver getBeanResolver(); // Return a bean resolver that can look up beans by name.\n\tList<ConstructorResolver> getConstructorResolvers(); // Return a list of resolvers that will be asked in turn to locate a constructor.\n\tList<MethodResolver> getMethodResolvers(); // Return a list of resolvers that will be asked in turn to locate a method.\n\tOperatorOverloader getOperatorOverloader(); // Return an operator overloader that may support mathematical operations between more than the standard set of types.\n\tList<PropertyAccessor> getPropertyAccessors(); // Return a list of accessors that will be asked in turn to read/write a property.\n\tTypedValue getRootObject(); // Return the default root context object against which unqualified properties/methods/etc should be resolved.\n\tTypeComparator getTypeComparator(); // Return a type comparator for comparing pairs of objects for equality.\n\tTypeConverter getTypeConverter(); // Return a type converter that can convert (or coerce) a value from one type to another.\n\tTypeLocator getTypeLocator(); // Return a type locator that can be used to find types, either by short or fully qualified name.\n\tObject lookupVariable(String name); // Look up a named variable within this evaluation context.\n\tvoid setVariable(String name, Object value); // Set a named variable in this evaluation context to a specified value.\n}"}
{"index": 8711, "repo": "accumulo-client-mapreduce-2.0.0-alpha-1", "des": "Configuration keys for AccumuloConfiguration.", "code": "Enum FileOutputConfigurator.Opts {\n\tstatic FileOutputConfigurator.Opts valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FileOutputConfigurator.Opts[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1621, "repo": "pdfbox-3.0.0-beta1", "des": "K: Set the stroking colour space to DeviceCMYK and set the colour to use for stroking operations.", "code": "Class SetStrokingDeviceCMYKColor {\n\tString getName(); // Returns the name of this operator, e.g.\n\tvoid process(Operator operator, List<COSBase> arguments); // Process the operator.\n}"}
{"index": 11641, "repo": "spring-websocket-6.0.11", "des": "Event raised when the session of a WebSocket client using a Simple Messaging Protocol (e.g.", "code": "public class SessionDisconnectEvent extends AbstractSubProtocolEvent {\n\tCloseStatus getCloseStatus(); // Return the status with which the session was closed.\n\tString getSessionId(); // Return the session id.\n}"}
{"index": 656, "repo": "ignite-core-2.15.0", "des": "Distributed enum implementation for storing into meta storage.", "code": "Class DistributedEnumProperty<T extends Enum> {\n\tvoid addListener(DistributePropertyListener<? super T> listener);\n\tT get();\n\tString getName();\n\tT getOrDefault(T dfltVal);\n\tvoid localUpdate(Serializable newVal); // Update only local value without updating remote cluster.\n\tvoid onAttached(); // This property have been attached to processor.\n\tvoid onReadyForUpdate(@NotNull PropertyUpdateClosure updater); // On this property ready to be update on cluster wide.\n\tT parse(String str);\n\tboolean propagate(T newVal); // Change value across whole cluster.\n\tGridFutureAdapter<?> propagateAsync(T newVal); // Change value across whole cluster.\n\tGridFutureAdapter<?> propagateAsync(T expectedVal, T newVal); // Change value across whole cluster.\n}"}
{"index": 15534, "repo": "spring-batch-core-5.0.2", "des": "A JobFactory that keeps a reference to a Job.", "code": "public class ReferenceJobFactory extends Object implements JobFactory {\n\tfinal Job createJob(); // Return the instance that was passed in on initialization.\n\tString getJobName(); // Return the name of the instance that was passed in on initialization.\n}"}
{"index": 12353, "repo": "spring-cloud-config-server-3.1.8", "des": "Provides a jgit CredentialsProvider implementation that can provide the appropriate credentials to connect to an AWS CodeCommit repository.", "code": "public class AwsCodeCommitCredentialProvider extends org.eclipse.jgit.transport.CredentialsProvider {\n\tprotected static String calculateCodeCommitPassword(org.eclipse.jgit.transport.URIish uri, String awsSecretKey); // Calculate the AWS CodeCommit password for the provided URI and AWS secret key.\n\tstatic boolean canHandle(String uri);\n\tboolean get(org.eclipse.jgit.transport.URIish uri, org.eclipse.jgit.transport.CredentialItem... items); // Get the username and password to use for the given uri.\n\tcom.amazonaws.auth.AWSCredentialsProvider getAwsCredentialProvider();\n\tString getPassword();\n\tString getUsername();\n\tboolean isInteractive(); // This credentials provider cannot run interactively.\n\tvoid reset(org.eclipse.jgit.transport.URIish uri); // Throw out cached data and force retrieval of AWS credentials.\n\tvoid setAwsCredentialProvider(com.amazonaws.auth.AWSCredentialsProvider awsCredentialProvider);\n\tvoid setPassword(String password);\n\tvoid setUsername(String username);\n\tboolean supports(org.eclipse.jgit.transport.CredentialItem... items); // We support username and password credential items only.\n}"}
{"index": 10011, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "An ApplicationDescriptor is a descriptor for an application meant to be installed into HDFS and later run from there.", "code": "Class ApplicationDescriptor {\n\tString getDirectory(); // Gets the application directory.\n\tString getName(); // Gets the application name.\n\tvoid setDirectory(String directory); // Sets the application directory.\n\tvoid setName(String name); // Sets the application name.\n}"}
{"index": 9329, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by Application Master to the Node Manager to change the resource quota of a container.", "code": "Class ContainerUpdateRequest {\n\tabstract List<Token> getContainersToUpdate(); // Get a list of container tokens to be used for authorization during container resource update.\n\tstatic ContainerUpdateRequest newInstance(List<Token> containersToIncrease);\n\tabstract void setContainersToUpdate(List<Token> containersToUpdate); // Set container tokens to be used during container resource increase.\n}"}
{"index": 8435, "repo": "hadoop-aws-3.3.6", "des": "Operations, statements and policies covering the operations needed to work with S3.", "code": "Class RolePolicies {\n\tstatic List<RoleModel.Statement> allowS3Operations(String bucket, boolean write); // From an S3 bucket name, build an ARN to refer to it.\n\tstatic String bucketObjectsToArn(String bucket); // From an S3 bucket name, build an ARN to refer to all objects in it.\n\tstatic String bucketToArn(String bucket); // From an S3 bucket name, build an ARN to refer to it.\n}"}
{"index": 7343, "repo": "calcite-core-1.34.0", "des": "Thread-local variable that returns a handle that can be closed.", "code": "Class TryThreadLocal<T> {\n\tT get();\n\tprotected T initialValue();\n\tvoid letIn(T t, Runnable runnable); // Performs an action with this ThreadLocal set to a particular value in this thread, and restores the previous value afterwards.\n\t<R> R letIn(T t, Supplier<R> supplier); // Calls a Supplier with this ThreadLocal set to a particular value, in this thread, and restores the previous value afterwards.\n\tstatic <T> TryThreadLocal<T> of(T initialValue); // Creates a TryThreadLocal.\n\tTryThreadLocal.Memo push(T value); // Assigns the value as value for the current thread.\n\tprotected void restoreTo(T previous); // Sets the value back to a previous value.\n}"}
{"index": 8313, "repo": "spring-ws-3.0.10.RELEASE", "des": "Callback interface invoked on each sort of Source.", "code": "Interface TraxUtils.SourceCallback {\n\tvoid domSource(Node node); // Perform an operation on the node contained in a DOMSource.\n\tvoid saxSource(XMLReader reader, InputSource inputSource); // Perform an operation on the XMLReader and InputSource contained in a SAXSource.\n\tvoid source(String systemId); // Perform an operation on the system identifier contained in any Source.\n\tvoid staxSource(XMLEventReader eventReader); // Perform an operation on the XMLEventReader contained in a JAXP 1.4 StAXSource or Spring StaxSource.\n\tvoid staxSource(XMLStreamReader streamReader); // Perform an operation on the XMLStreamReader contained in a JAXP 1.4 StAXSource or Spring StaxSource.\n\tvoid streamSource(InputStream inputStream); // Perform an operation on the InputStream contained in a StreamSource.\n\tvoid streamSource(Reader reader); // Perform an operation on the Reader contained in a StreamSource.\n}"}
{"index": 10233, "repo": "spring-core-6.0.11", "des": "A Comparator that converts values before they are compared.", "code": "public class ConvertingComparator<S,T> extends Object implements Comparator<S> {\n\tint compare(S o1, S o2);\n\tstatic <K, V> ConvertingComparator<Map.Entry<K,V>,K> mapEntryKeys(Comparator<K> comparator); // Create a new ConvertingComparator that compares map entries based on their keys.\n\tstatic <K, V> ConvertingComparator<Map.Entry<K,V>,V> mapEntryValues(Comparator<V> comparator); // Create a new ConvertingComparator that compares map entries based on their values.\n}"}
{"index": 9866, "repo": "commons-math3-3.6.1", "des": "An interface for regression models allowing for dynamic updating of the data.", "code": "Interface UpdatingMultipleLinearRegression {\n\tvoid addObservation(double[] x, double y); // Adds one observation to the regression model.\n\tvoid addObservations(double[][] x, double[] y); // Adds a series of observations to the regression model.\n\tvoid clear(); // Clears internal buffers and resets the regression model.\n\tlong getN(); // Returns the number of observations added to the regression model.\n\tboolean hasIntercept(); // Returns true if a constant has been included false otherwise.\n\tRegressionResults regress(); // Performs a regression on data present in buffers and outputs a RegressionResults object\n\tRegressionResults regress(int[] variablesToInclude); // Performs a regression on data present in buffers including only regressors indexed in variablesToInclude and outputs a RegressionResults object\n}"}
{"index": 9308, "repo": "hadoop-yarn-api-3.3.6", "des": "Initialization context for AuxiliaryService when starting an application.", "code": "Class ApplicationInitializationContext {\n\tByteBuffer getApplicationDataForService(); // Get the data sent to the NodeManager via ContainerManagementProtocol.startContainers(StartContainersRequest) as part of ContainerLaunchContext.getServiceData()\n\tApplicationId getApplicationId(); // Get ApplicationId of the application\n\tString getUser(); // Get the user-name of the application-submitter\n}"}
{"index": 15999, "repo": "wicket-util-10.0.0-M1", "des": "A clean-room implementation of Eugene Myers differencing algorithm.", "code": "public class MyersDiff extends Object implements DiffAlgorithm {\n\tstatic PathNode buildPath(Object[] orig, Object[] rev); // Computes the minimum diffpath that expresses de differences between the original and revised sequences, according to Gene Myers differencing algorithm.\n\tstatic Revision buildRevision(PathNode path, Object[] orig, Object[] rev); // Constructs a Revision from a difference path.\n\tRevision diff(Object[] orig, Object[] rev); // Computes the difference between the original sequence and the revised sequence and returns it as a org.suigeneris.jrcs.diff.Revision Revision object.\n}"}
{"index": 4979, "repo": "commons-collections-3.2.2", "des": "Transformer implementation that returns the same constant each time.", "code": "Class ConstantTransformer {\n\tObject getConstant(); // Gets the constant.\n\tstatic Transformer getInstance(Object constantToReturn); // Transformer method that performs validation.\n\tObject transform(Object input); // Transforms the input by ignoring it and returning the stored constant instead.\n}"}
{"index": 13564, "repo": "spring-messaging-6.0.11", "des": "A thin wrapper around a sending RSocket with a fluent API accepting and returning higher level Objects for input and for output, along with methods to prepare routing and other metadata.", "code": "public interface RSocketRequester extends reactor.core.Disposable {\n\tstatic RSocketRequester.Builder builder(); // Obtain a builder to create a client RSocketRequester by connecting to an RSocket server.\n\torg.springframework.util.MimeType dataMimeType(); // Return the data MimeType selected for the underlying RSocket at connection time.\n\tdefault void dispose(); // Shortcut method that delegates to the same on the underlying rsocketClient() in order to close the connection from the underlying transport and notify subscribers.\n\tdefault boolean isDisposed(); // Shortcut method that delegates to the same on the underlying rsocketClient().\n\tRSocketRequester.RequestSpec metadata(Object metadata, org.springframework.util.MimeType mimeType); // Begin to specify a new request with the given metadata value, which can be a concrete value or any producer of a single value that can be adapted to a Publisher via ReactiveAdapterRegistry.\n\torg.springframework.util.MimeType metadataMimeType(); // Return the metadata MimeType selected for the underlying RSocket at connection time.\n\tRSocketRequester.RequestSpec route(String route, Object... routeVars); // Begin to specify a new request with the given route to a remote handler.\n\tRSocket rsocket(); // Return the underlying RSocket if the requester was created with a \"live\" RSocket via wrap(RSocket, MimeType, MimeType, RSocketStrategies) or via one of the (deprecated) connect methods on the RSocketRequester builder, or otherwise return null.\n\tRSocketClient rsocketClient(); // Return the underlying RSocketClient used to make requests with.\n\tRSocketStrategies strategies(); // Return the configured RSocketStrategies.\n\tstatic RSocketRequester wrap(RSocket rsocket, org.springframework.util.MimeType dataMimeType, org.springframework.util.MimeType metadataMimeType, RSocketStrategies strategies); // Wrap an existing RSocket.\n}"}
{"index": 13812, "repo": "spring-webmvc-6.0.11", "des": "Store and retrieve FlashMap instances to and from the HTTP session.", "code": "public class SessionFlashMapManager extends AbstractFlashMapManager {\n\tprotected Object getFlashMapsMutex(HttpServletRequest request); // Exposes the best available session mutex.\n\tprotected List<FlashMap> retrieveFlashMaps(HttpServletRequest request); // Retrieves saved FlashMap instances from the HTTP session, if any.\n\tprotected void updateFlashMaps(List<FlashMap> flashMaps, HttpServletRequest request, HttpServletResponse response); // Saves the given FlashMap instances in the HTTP session.\n}"}
{"index": 3757, "repo": "commons-pool2-2.11.1", "des": "A base implementation of KeyedPooledObjectFactory.", "code": "Class BaseKeyedPooledObjectFactory<K,V> {\n\tvoid activateObject(K key, PooledObject<V> p); // Reinitialize an instance to be returned by the pool.\n\tabstract V create(K key); // Create an instance that can be served by the pool.\n\tvoid destroyObject(K key, PooledObject<V> p); // Destroy an instance no longer needed by the pool.\n\tPooledObject<V> makeObject(K key); // Creates an instance that can be served by the pool and wrap it in a PooledObject to be managed by the pool.\n\tvoid passivateObject(K key, PooledObject<V> p); // Uninitialize an instance to be returned to the idle object pool.\n\tboolean validateObject(K key, PooledObject<V> p); // Ensures that the instance is safe to be returned by the pool.\n\tabstract PooledObject<V> wrap(V value); // Wrap the provided instance with an implementation of PooledObject.\n}"}
{"index": 3147, "repo": "solr-dataimporthandler-8.11.2", "des": "An implementation of EntityProcessor which reads data from a url/file and give out a row which contains one String value.", "code": "Class PlainTextEntityProcessor {\n\tvoid init(Context context); // This method is called when it starts processing an entity.\n\tMap<String,Object> nextRow(); // For a simple implementation, this is the only method that the sub-class should implement.\n}"}
{"index": 376, "repo": "phoenix-core-5.1.3", "des": "Memory manager used to track memory usage.", "code": "Interface MemoryManager {\n\tMemoryManager.MemoryChunk allocate(long nBytes); // Equivalent to calling allocate(long, long) where minBytes and reqBytes being the same.\n\tMemoryManager.MemoryChunk allocate(long minBytes, long reqBytes); // Allocate up to reqBytes of memory, dialing the amount down to minBytes if full amount is not available.\n\tlong getAvailableMemory(); // Get the amount of available memory (in bytes) not yet allocated.\n\tlong getMaxMemory(); // Get the total amount of memory (in bytes) that may be allocated.\n}"}
{"index": 10933, "repo": "spring-data-redis-3.1.2", "des": "Redis Scripting commands executed using reactive infrastructure.", "code": "public interface ReactiveScriptingCommands {\n\t<T> reactor.core.publisher.Flux<T> eval(ByteBuffer script, ReturnType returnType, int numKeys, ByteBuffer... keysAndArgs); // Evaluate given script.\n\t<T> reactor.core.publisher.Flux<T> evalSha(String scriptSha, ReturnType returnType, int numKeys, ByteBuffer... keysAndArgs); // Evaluate given scriptSha.\n\tdefault reactor.core.publisher.Mono<Boolean> scriptExists(String scriptSha); // Check if given scriptSha exist in script cache.\n\treactor.core.publisher.Flux<Boolean> scriptExists(List<String> scriptShas); // Check if given scriptShas exist in script cache.\n\treactor.core.publisher.Mono<String> scriptFlush(); // Flush lua script cache.\n\treactor.core.publisher.Mono<String> scriptKill(); // Kill current lua script execution.\n\treactor.core.publisher.Mono<String> scriptLoad(ByteBuffer script); // Load lua script into scripts cache, without executing it. Execute the script by calling evalSha(String, ReturnType, int, ByteBuffer...).\n}"}
{"index": 6481, "repo": "exoplayer-core-2.9.6", "des": "Listener of DefaultDrmSessionManager events.", "code": "Interface DefaultDrmSessionEventListener {\n\tvoid onDrmKeysLoaded(); // Called each time keys are loaded.\n\tvoid onDrmKeysRemoved(); // Called each time offline keys are removed.\n\tvoid onDrmKeysRestored(); // Called each time offline keys are restored.\n\tdefault void onDrmSessionAcquired(); // Called each time a drm session is acquired.\n\tvoid onDrmSessionManagerError(java.lang.Exception error); // Called when a drm error occurs.\n\tdefault void onDrmSessionReleased(); // Called each time a drm session is released.\n}"}
{"index": 12946, "repo": "slf4j-api-2.0.7", "des": "This is the main interface in slf4j's fluent API for creating logging events.", "code": "public interface LoggingEventBuilder {\n\tLoggingEventBuilder addArgument(Object p); // Add an argument to the event being built.\n\tLoggingEventBuilder addArgument(Supplier<?> objectSupplier); // Add an argument supplier to the event being built.\n\tLoggingEventBuilder addKeyValue(String key, Object value); // Add a key value pair to the event being built.\n\tLoggingEventBuilder addKeyValue(String key, Supplier<Object> valueSupplier); // Add a key value pair to the event being built.\n\tLoggingEventBuilder addMarker(Marker marker); // A marker to the event being built.\n\tvoid log(); // After the logging event is built, performs actual logging.\n\tvoid log(String message); // Equivalent to calling setMessage(String) followed by log();\n\tvoid log(String message, Object arg); // Equivalent to calling setMessage(String) followed by addArgument(Object)} and then log()\n\tvoid log(String message, Object... args); // Equivalent to calling setMessage(String) followed by zero or more calls to addArgument(Object) (depending on the size of args array) and then log()\n\tvoid log(String message, Object arg0, Object arg1); // Equivalent to calling setMessage(String) followed by two calls to addArgument(Object) and then log()\n\tvoid log(Supplier<String> messageSupplier); // Equivalent to calling setMessage(Supplier) followed by log()\n\tLoggingEventBuilder setCause(Throwable cause); // Set the cause for the logging event being built.\n\tLoggingEventBuilder setMessage(String message); // Sets the message of the logging event.\n\tLoggingEventBuilder setMessage(Supplier<String> messageSupplier); // Sets the message of the event via a message supplier.\n}"}
{"index": 2677, "repo": "mahout-core-14.1", "des": "Open hash map from Object keys to double values.", "code": "Class OpenObjectDoubleHashMap<T> {\n\tdouble adjustOrPutValue(T key, double newValue, double incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(T key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(double value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ObjectProcedure<T> procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ObjectDoubleProcedure<T> procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tdouble get(T key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(T key);\n\tprotected int indexOfKey(T key);\n\tprotected int indexOfValue(double value);\n\tvoid keys(List<T> list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ObjectDoubleProcedure<T> condition, List<T> keyList, DoubleArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(T key, double value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(T key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(DoubleArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 10896, "repo": "spring-data-redis-3.1.2", "des": "Defines the contract for Object Mapping writers.", "code": "@FunctionalInterface public interface JacksonObjectWriter {\n\tstatic JacksonObjectWriter create(); // Create a default JacksonObjectWriter delegating to ObjectMapper.writeValueAsBytes(Object).\n\tbyte[] write(com.fasterxml.jackson.databind.ObjectMapper mapper, Object source); // Write the object graph with the given root source as byte array.\n}"}
{"index": 31, "repo": "connect-api-3.5.0", "des": "An enum to represent the level of support for exactly-once semantics from a source connector.", "code": "Enum ExactlyOnceSupport {\n\tstatic ExactlyOnceSupport valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ExactlyOnceSupport[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6545, "repo": "exoplayer-core-2.9.6", "des": "Extracts data from the MP3 container format.", "code": "Class Mp3Extractor {\n\tvoid init(ExtractorOutput output); // Initializes the extractor with an ExtractorOutput.\n\tint read(ExtractorInput input, PositionHolder seekPosition); // Extracts data read from a provided ExtractorInput.\n\tvoid release(); // Releases all kept resources.\n\tvoid seek(long position, long timeUs); // Notifies the extractor that a seek has occurred.\n\tboolean sniff(ExtractorInput input); // Returns whether this extractor can extract samples from the ExtractorInput, which must provide data from the start of the stream.\n}"}
{"index": 10763, "repo": "log4j-over-slf4j-2.0.7", "des": "Defines the minimum set of levels recognized by the system, that is OFF, FATAL, ERROR, WARN, INFO, DEBUG and ALL.", "code": "public class Level extends Priority implements Serializable {\n\tstatic Level toLevel(int val); // Convert an integer passed as argument to a level.\n\tstatic Level toLevel(int val, Level defaultLevel); // Convert an integer passed as argument to a level.\n\tstatic Level toLevel(String sArg); // Convert the string passed as argument to a level.\n\tstatic Level toLevel(String sArg, Level defaultLevel); // Convert the string passed as argument to a level.\n}"}
{"index": 3436, "repo": "preflight-3.0.0-beta1", "des": "Class used to validate the MetaData entry of the Font File Stream dictionary.", "code": "Class FontMetaDataValidation {\n\tboolean analyseFontName(org.apache.xmpbox.XMPMetadata metadata, org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDesc, List<ValidationResult.ValidationError> ve); // Value of the dc:title must be the same as the FontName in the font descriptor.\n\tboolean analyseRights(org.apache.xmpbox.XMPMetadata metadata, org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDesc, List<ValidationResult.ValidationError> ve); // If XMP MetaData is present, they must have the following information : dc:rights Marked (with the value true) Owner UsageTerms\n\tList<ValidationResult.ValidationError> validatePDFAIdentifer(org.apache.xmpbox.XMPMetadata metadata, org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDesc);\n}"}
{"index": 87, "repo": "commons-collections4-4.4", "des": "Subclasses create and load Properties and subclasses of Properties like SortedProperties.", "code": "Class AbstractPropertiesFactory<T extends Properties> {\n\tprotected abstract T createProperties(); // Subclasses override to provide customized properties instances.\n\tT load(ClassLoader classLoader, String name); // Creates and loads properties from the given file.\n\tT load(File file); // Creates and loads properties from the given file.\n\tT load(InputStream inputStream); // Creates and loads properties from the given input stream.\n\tT load(Path path); // Creates and loads properties from the given path.\n\tT load(Reader reader); // Creates and loads properties from the given reader.\n\tT load(String name); // Creates and loads properties from the given file name.\n\tT load(URI uri); // Creates and loads properties from the given URI.\n\tT load(URL url); // Creates and loads properties from the given URL.\n}"}
{"index": 11827, "repo": "spring-kafka-3.0.9", "des": "A callback that a listener can invoke to seek to a specific offset.", "code": "public static interface ConsumerSeekAware.ConsumerSeekCallback {\n\tvoid seek(String topic, int partition, long offset); // Perform a seek operation.\n\tvoid seekRelative(String topic, int partition, long offset, boolean toCurrent); // Perform a seek relative to the start, end, or current position.\n\tvoid seekToBeginning(String topic, int partition); // Perform a seek to beginning operation.\n\tdefault void seekToBeginning(Collection<org.apache.kafka.common.TopicPartition> partitions); // Perform a seek to beginning operation.\n\tvoid seekToEnd(String topic, int partition); // Perform a seek to end operation.\n\tdefault void seekToEnd(Collection<org.apache.kafka.common.TopicPartition> partitions); // Perform a seek to end operation.\n\tvoid seekToTimestamp(String topic, int partition, long timestamp); // Perform a seek to the first offset greater than or equal to the time stamp.\n\tvoid seekToTimestamp(Collection<org.apache.kafka.common.TopicPartition> topicPartitions, long timestamp); // Perform a seek to the first offset greater than or equal to the time stamp.\n}"}
{"index": 7030, "repo": "calcite-core-1.34.0", "des": "Collection of planner rules that apply various simplifying transformations on RexNode trees.", "code": "Class ReduceExpressionsRule<C extends ReduceExpressionsRule.Config> {\n\tprotected static void findReducibleExps(RelDataTypeFactory typeFactory, List<RexNode> exps, com.google.common.collect.ImmutableMap<RexNode,RexNode> constants, List<RexNode> constExps, List<Boolean> addCasts, boolean treatDynamicCallsAsConstant); // Locates expressions that can be reduced to literals or converted to expressions with redundant casts removed.\n\tstatic RexCall pushPredicateIntoCase(RexCall call); // Pushes predicates into a CASE.\n\tprotected static boolean reduceExpressions(RelNode rel, List<RexNode> expList, RelOptPredicateList predicates); // Reduces a list of expressions.\n\tprotected static boolean reduceExpressions(RelNode rel, List<RexNode> expList, RelOptPredicateList predicates, boolean unknownAsFalse, boolean matchNullability, boolean treatDynamicCallsAsConstant); // Reduces a list of expressions.\n\tprotected static boolean reduceExpressionsInternal(RelNode rel, RexSimplify simplify, RexUnknownAs unknownAs, List<RexNode> expList, RelOptPredicateList predicates, boolean treatDynamicCallsAsConstant);\n\tprotected static RexNode substitute(RexCall call, int ordinal, RexNode node); // Converts op(arg0, ..., argOrdinal, ..., argN) to op(arg0,..., node, ..., argN).\n}"}
{"index": 4037, "repo": "zookeeper-3.8.2", "des": "Abstract base class for all ZooKeeperServers that participate in a quorum.", "code": "Class QuorumZooKeeperServer {\n\tRequest checkUpgradeSession(Request request);\n\tvoid dumpConf(PrintWriter pwriter);\n\tvoid dumpMonitorValues(BiConsumer<String,Object> response); // Hook into admin server, useful to expose additional data that do not represent metrics.\n\tprotected void registerMetrics();\n\tprotected void setLocalSessionFlag(Request si); // If the underlying Zookeeper server support local session, this method will set a isLocalSession to true if a request is associated with a local session.\n\tprotected void setState(ZooKeeperServer.State state); // Sets the state of ZooKeeper server.\n\tprotected void startSessionTracker();\n\tprotected void unregisterMetrics();\n\tvoid upgrade(long sessionId); // Implements the SessionUpgrader interface,\n}"}
{"index": 6878, "repo": "calcite-core-1.34.0", "des": "Describes the format strings used by a formatting function such as FORMAT_TIMESTAMP or CAST(string AS DATE FORMAT formatString).", "code": "Interface FormatModel {\n\tMap<String,FormatElement> getElementMap(); // Returns the map used to create the FormatModel instance.\n\tList<FormatElement> parse(String format); // Parses a format string using element identifiers supplied by format.\n}"}
{"index": 1065, "repo": "ignite-core-2.15.0", "des": "A dialect compatible with the Oracle database.", "code": "Class OracleDialect {\n\tboolean hasMerge();\n\tString loadCacheSelectRangeQuery(String fullTblName, Collection<String> keyCols); // Construct query to get ranges bounds.\n\tString mergeQuery(String fullTblName, Collection<String> keyCols, Collection<String> uniqCols); // Construct merge query.\n}"}
{"index": 14744, "repo": "spring-data-commons-3.1.2", "des": "Interface to allow execution of Query by Example Example instances.", "code": "public interface ListQueryByExampleExecutor<T> extends QueryByExampleExecutor<T> {\n\t<S extends T>List<S> findAll(Example<S> example); // Returns all entities matching the given Example.\n\t<S extends T>List<S> findAll(Example<S> example, Sort sort); // Returns all entities matching the given Example applying the given Sort.\n}"}
{"index": 16254, "repo": "maven-model-builder-4.0.0-alpha-7", "des": "Describes a problem that was encountered during model building.", "code": "public interface ModelProblem {\n\tint getColumnNumber(); // Gets the one-based index of the column containing the problem.\n\tException getException(); // Gets the exception that caused this problem (if any).\n\tint getLineNumber(); // Gets the one-based index of the line containing the problem.\n\tString getMessage(); // Gets the message that describes this problem.\n\tString getModelId(); // Gets the identifier of the model from which the problem originated.\n\tModelProblem.Severity getSeverity(); // Gets the severity level of this problem.\n\tString getSource(); // Gets the hint about the source of the problem.\n\tModelProblem.Version getVersion(); // Gets the applicable maven version/validation level of this problem\n}"}
{"index": 14110, "repo": "wicket-core-10.0.0-M1", "des": "This is an Ajax behavior that is meant to update a group of choices that are represented by multiple components.", "code": "public abstract class AjaxFormChoiceComponentUpdatingBehavior extends AjaxFormComponentUpdatingBehavior {\n\tprotected void checkComponent(FormComponent<?> component); // Check the component this behavior is bound to.\n\tprotected void onBind(); // Subclasses should call super.onBind()\n\tstatic AjaxFormChoiceComponentUpdatingBehavior onUpdateChoice(org.danekja.java.util.function.serializable.SerializableConsumer<AjaxRequestTarget> onUpdateChoice); // Creates an AjaxFormChoiceComponentUpdatingBehavior based on lambda expressions\n\tprotected void updateAjaxAttributes(AjaxRequestAttributes attributes); // Gives a chance to the specializations to modify the attributes.\n}"}
{"index": 18533, "repo": "hibernate-core-5.6.15.Final", "des": "A \"parameter object\" for RegionFactory.buildDomainDataRegion(org.hibernate.cache.cfg.spi.DomainDataRegionConfig, org.hibernate.cache.cfg.spi.DomainDataRegionBuildingContext) calls, giving it access to information it needs.", "code": "Interface DomainDataRegionBuildingContext {\n\tCacheKeysFactory getEnforcedCacheKeysFactory(); // The CacheKeyFactory explicitly specified as part of the bootstrap by the user, by some \"container\", etc.\n\tSessionFactoryImplementor getSessionFactory(); // Access to the SessionFactory for which a Region is being built.\n}"}
{"index": 2020, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template Decimal64ColumnArithmeticDecimal64Column.", "code": "Class Decimal64ColSubtractDecimal64Column {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean shouldConvertDecimal64ToDecimal(); // By default vector expressions do not handle decimal64 types and should be converted into Decimal types if its output cannot handle Decimal64.\n\tString vectorExpressionParameters();\n}"}
{"index": 12774, "repo": "spring-data-mongodb-4.1.2", "des": "The actual argument type to use when mapping parameters to MongoDB specific format.", "code": "public static enum MethodReferenceNode.AggregationMethodReference.ArgumentType extends Enum<MethodReferenceNode.AggregationMethodReference.ArgumentType> {\n\tstatic MethodReferenceNode.AggregationMethodReference.ArgumentType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic MethodReferenceNode.AggregationMethodReference.ArgumentType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 668, "repo": "ignite-core-2.15.0", "des": "SPI provides encryption features for an Ignite.", "code": "Interface EncryptionSpi {\n\tint blockSize();\n\tSerializable create(); // Creates new key for an encryption/decryption of cache persistent data: pages, WAL records.\n\tbyte[] decrypt(byte[] data, Serializable key); // Decrypts data encrypted with encrypt(ByteBuffer, Serializable, ByteBuffer)\n\tSerializable decryptKey(byte[] key); // Decrypts key and checks it integrity.\n\tSerializable decryptKey(byte[] key, String masterKeyName); // Decrypts key and checks its integrity using the master key specified by name.\n\tvoid decryptNoPadding(ByteBuffer data, Serializable key, ByteBuffer res); // Decrypts data encrypted with encryptNoPadding(ByteBuffer, Serializable, ByteBuffer)\n\tvoid encrypt(ByteBuffer data, Serializable key, ByteBuffer res); // Encrypts data.\n\tint encryptedSize(int dataSize);\n\tint encryptedSizeNoPadding(int dataSize);\n\tbyte[] encryptKey(Serializable key); // Encrypts key.\n\tbyte[] encryptKey(Serializable key, String masterKeyName); // Encrypts a key with the master key specified by name.\n\tvoid encryptNoPadding(ByteBuffer data, Serializable key, ByteBuffer res); // Encrypts data without padding info.\n\tString getMasterKeyName(); // Gets the current master key name.\n\tbyte[] masterKeyDigest(); // Returns master key digest.\n\tbyte[] masterKeyDigest(String masterKeyName); // Returns master key digest by name.\n\tvoid setMasterKeyName(String masterKeyName); // Sets master key Name that will be used for keys encryption in encryptKey(Serializable) and decryptKey(byte[]) methods and in the masterKeyDigest() method.\n}"}
{"index": 15448, "repo": "pulsar-client-api-3.0.0", "des": "Builder to build schema definition SchemaDefinition.", "code": "@Public @Stable public interface SchemaDefinitionBuilder<T> {\n\tSchemaDefinitionBuilder<T> addProperty(String key, String value); // Set schema info properties.\n\tSchemaDefinition<T> build(); // Build the schema definition.\n\tSchemaDefinitionBuilder<T> withAlwaysAllowNull(boolean alwaysAllowNull); // Set schema whether always allow null or not.\n\tSchemaDefinitionBuilder<T> withClassLoader(ClassLoader classLoader); // Set schema of pojo classLoader.\n\tSchemaDefinitionBuilder<T> withJsonDef(String jsonDefinition); // Set schema of json definition.\n\tSchemaDefinitionBuilder<T> withJSR310ConversionEnabled(boolean jsr310ConversionEnabled); // Set schema use JRS310 conversion or not.\n\tSchemaDefinitionBuilder<T> withPojo(Class pojo); // Set schema of pojo definition.\n\tSchemaDefinitionBuilder<T> withProperties(Map<String,String> properties); // Set schema info properties.\n\tSchemaDefinitionBuilder<T> withSchemaReader(SchemaReader<T> reader); // Set schema reader for deserialization of object data.\n\tSchemaDefinitionBuilder<T> withSchemaWriter(SchemaWriter<T> writer); // Set schema writer for serialization of objects.\n\tSchemaDefinitionBuilder<T> withSupportSchemaVersioning(boolean supportSchemaVersioning); // Set schema whether decode by schema version.\n}"}
{"index": 8779, "repo": "graal-sdk-1.0.0-rc7", "des": "A machine-word-sized value that can be compared for equality.", "code": "Interface ComparableWord {\n\tboolean equal(ComparableWord val); // Compares this word with the specified value.\n\tboolean notEqual(ComparableWord val); // Compares this word with the specified value.\n}"}
{"index": 7670, "repo": "cassandra-all-4.1.2", "des": "Rebufferer wrapper that applies rate limiting.", "code": "Class LimitingRebufferer {\n\tjava.nio.ByteBuffer buffer(); // Returns a useable buffer (i.e.\n\tChannelProxy channel();\n\tvoid close();\n\tvoid closeReader(); // Called when a reader is closed.\n\tlong fileLength();\n\tdouble getCrcCheckChance(); // Needed for tests.\n\tlong offset(); // Position in the file of the start of the buffer.\n\tRebufferer.BufferHolder rebuffer(long position); // Rebuffer (move on or seek to) a given position, and return a buffer that can be used there.\n\tvoid release(); // To be called when this buffer is no longer in use.\n}"}
{"index": 7679, "repo": "cassandra-all-4.1.2", "des": "Static helper methods and classes for maps.", "code": "Class Maps {\n\tstatic <T> AbstractType<?> getExactMapTypeIfKnown(java.util.List<Pair<T,T>> entries, java.util.function.Function<T,AbstractType<?>> mapper); // Returns the exact MapType from the entries if it can be known.\n\tstatic ColumnSpecification keySpecOf(ColumnSpecification column);\n\tstatic <T> java.lang.String mapToString(java.util.List<Pair<T,T>> entries); // Create a String representation of the list containing the specified elements.\n\tstatic <T> java.lang.String mapToString(java.util.List<Pair<T,T>> items, java.util.function.Function<T,java.lang.String> mapper); // Create a String representation of the map from the specified items associated to the map entries.\n\tstatic <T extends AssignmentTestable>AssignmentTestable.TestResult testMapAssignment(ColumnSpecification receiver, java.util.List<Pair<T,T>> entries); // Tests that the map with the specified entries can be assigned to the specified column.\n\tstatic ColumnSpecification valueSpecOf(ColumnSpecification column);\n}"}
{"index": 17512, "repo": "pulsar-broker-3.0.0", "des": "The filter and load balance context, use for delivering context between filter, scheduler and strategy.", "code": "public interface LoadManagerContext {\n\tServiceConfiguration brokerConfiguration(); // The broker configuration.\n\tLoadDataStore<BrokerLoadData> brokerLoadDataStore(); // Broker load data store, each component use the context to access the load data store.\n\tBrokerRegistry brokerRegistry(); // The broker register.\n\tLoadDataStore<TopBundlesLoadData> topBundleLoadDataStore(); // Top bundle load data store.\n}"}
{"index": 3838, "repo": "hbase-client-3.0.0-alpha-4", "des": "FilterListWithOR represents an ordered list of filters which will be evaluated with an OR operator.", "code": "Class FilterListWithOR {\n\tvoid addFilterLists(List<Filter> filters);\n\tboolean equals(Object obj);\n\tboolean filterAllRemaining(); // Filters that never filter all remaining can inherit this implementation that never stops the filter early.\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRow(); // Filters that never filter by rows based on previously gathered state from Filter.filterCell(Cell) can inherit this implementation that never filters a row.\n\tboolean filterRowKey(Cell firstRowCell); // Filters a row based on the row key.\n\tprotected String formatLogFilters(List<Filter> logFilters);\n\tCell getNextCellHint(Cell currentCell); // Filters that are not sure which key must be next seeked to, can inherit this implementation that, by default, returns a null Cell.\n\tvoid reset(); // Filters that are purely stateless and do nothing in their reset() methods can inherit this null/empty implementation.\n}"}
{"index": 4378, "repo": "beam-sdks-java-core-2.49.0", "des": "A sharded file which matches a given file pattern.", "code": "Class FilePatternMatchingShardedFile {\n\tjava.util.List<java.lang.String> readFilesWithRetries(); // Discovers all shards of this file.\n\tjava.util.List<java.lang.String> readFilesWithRetries(Sleeper sleeper, BackOff backOff); // Discovers all shards of this file using the provided Sleeper and BackOff.\n}"}
{"index": 15269, "repo": "spring-boot-3.1.1", "des": "Factory that can be used to create multiple DeferredLog instances that will switch over when appropriate.", "code": "@FunctionalInterface public interface DeferredLogFactory {\n\tdefault org.apache.commons.logging.Log getLog(Class<?> destination); // Create a new DeferredLog for the given destination.\n\torg.apache.commons.logging.Log getLog(Supplier<org.apache.commons.logging.Log> destination); // Create a new DeferredLog for the given destination.\n\tdefault org.apache.commons.logging.Log getLog(org.apache.commons.logging.Log destination); // Create a new DeferredLog for the given destination.\n}"}
{"index": 9523, "repo": "commons-math3-3.6.1", "des": "Provide a default implementation for several functions useful to generic solvers.", "code": "Class BaseAbstractUnivariateSolver<FUNC extends UnivariateFunction> {\n\tprotected double computeObjectiveValue(double point); // Compute the objective function value.\n\tprotected abstract double doSolve(); // Method for implementing actual optimization algorithms in derived classes.\n\tdouble getAbsoluteAccuracy(); // Get the absolute accuracy of the solver.\n\tint getEvaluations(); // Get the number of evaluations of the objective function.\n\tdouble getFunctionValueAccuracy(); // Get the function value accuracy of the solver.\n\tdouble getMax();\n\tint getMaxEvaluations(); // Get the maximum number of function evaluations.\n\tdouble getMin();\n\tdouble getRelativeAccuracy(); // Get the relative accuracy of the solver.\n\tdouble getStartValue();\n\tprotected void incrementEvaluationCount(); // Increment the evaluation count by one.\n\tprotected boolean isBracketing(double lower, double upper); // Check whether the function takes opposite signs at the endpoints.\n\tprotected boolean isSequence(double start, double mid, double end); // Check whether the arguments form a (strictly) increasing sequence.\n\tprotected void setup(int maxEval, FUNC f, double min, double max, double startValue); // Prepare for computation.\n\tdouble solve(int maxEval, FUNC f, double startValue); // Solve for a zero in the vicinity of startValue.\n\tdouble solve(int maxEval, FUNC f, double min, double max); // Solve for a zero root in the given interval.\n\tdouble solve(int maxEval, FUNC f, double min, double max, double startValue); // Solve for a zero in the given interval, start at startValue.\n\tprotected void verifyBracketing(double lower, double upper); // Check that the endpoints specify an interval and the function takes opposite signs at the endpoints.\n\tprotected void verifyInterval(double lower, double upper); // Check that the endpoints specify an interval.\n\tprotected void verifySequence(double lower, double initial, double upper); // Check that lower < initial < upper.\n}"}
{"index": 6210, "repo": "jackson-databind-2.15.2", "des": "Simple implementation of ClassIntrospector.", "code": "Class SimpleMixInResolver {\n\tvoid addLocalDefinition(Class<?> target, Class<?> mixinSource);\n\tSimpleMixInResolver copy(); // Method called to create a new, non-shared copy, to be used by different ObjectMapper instance, and one that should not be connected to this instance, if resolver has mutable state.\n\tClass<?> findMixInClassFor(Class<?> cls); // Method that will check if there are \"mix-in\" classes (with mix-in annotations) for given class\n\tboolean hasMixIns(); // Method that may be called for optimization purposes, to see if calls to mix-in resolver may be avoided.\n\tint localSize();\n\tvoid setLocalDefinitions(Map<Class<?>,Class<?>> sourceMixins);\n\tSimpleMixInResolver withoutLocalDefinitions(); // Mutant factory method that constructs a new instance that has no locally defined mix-in/target mappings.\n\tSimpleMixInResolver withOverrides(ClassIntrospector.MixInResolver overrides); // Mutant factory for constructor a new resolver instance with given mix-in resolver override.\n}"}
{"index": 14657, "repo": "spring-data-commons-3.1.2", "des": "Access options for setting values for property paths.", "code": "public static class AccessOptions.SetOptions extends Object {\n\tAccessOptions.SetOptions.SetNulls getNullHandling();\n\tboolean propagate(PersistentProperty<?> property); // Returns whether the given property is supposed to be propagated, i.e. if values for it are supposed to be set at all.\n\tAccessOptions.SetOptions rejectNulls(); // Returns a new AccessOptions that will cause paths that contain null values to be skipped when setting a property.\n\tAccessOptions.SetOptions skipAndLogNulls(); // Returns a new AccessOptions that will cause paths that contain null values to be skipped when setting a property but a log message produced in TRACE level.\n\tAccessOptions.SetOptions skipNulls(); // Returns a new AccessOptions that will cause paths that contain null values to be skipped when setting a property.\n\tAccessOptions.SetOptions withCollectionAndMapPropagation(AccessOptions.SetOptions.Propagation propagation); // Shortcut to configure the same AccessOptions.SetOptions.Propagation for both collection and map property path segments.\n\tAccessOptions.SetOptions withCollectionPropagation(AccessOptions.SetOptions.Propagation collectionPropagation);\n\tAccessOptions.SetOptions withMapPropagation(AccessOptions.SetOptions.Propagation mapPropagation);\n\tAccessOptions.SetOptions withNullHandling(AccessOptions.SetOptions.SetNulls nullHandling);\n}"}
{"index": 1881, "repo": "hadoop-hdfs-3.3.6", "des": "It behaviors as an unmodifiable list of FsVolume.", "code": "Class FsDatasetSpi.FsVolumeReferences {\n\tvoid close();\n\tFsVolumeSpi get(int index); // Get the volume for a given index.\n\tFsVolumeReference getReference(int index); // Get the reference for a given index.\n\tIterator<FsVolumeSpi> iterator();\n\tint size(); // Get the number of volumes.\n}"}
{"index": 8550, "repo": "commons-io-2.13.0", "des": "Implements a buffered input stream, which allows to peek into the buffers first bytes.", "code": "Class PeekableInputStream {\n\tboolean peek(byte[] sourceBuffer); // Returns whether the next bytes in the buffer are as given by sourceBuffer.\n\tboolean peek(byte[] sourceBuffer, int offset, int length); // Returns whether the next bytes in the buffer are as given by sourceBuffer, {code offset}, and length.\n}"}
{"index": 10301, "repo": "spring-core-6.0.11", "des": "Search strategies supported by MergedAnnotations.search(SearchStrategy) as well as MergedAnnotations.from(AnnotatedElement, SearchStrategy) and variants of that method.", "code": "public static enum MergedAnnotations.SearchStrategy extends Enum<MergedAnnotations.SearchStrategy> {\n\tstatic MergedAnnotations.SearchStrategy valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic MergedAnnotations.SearchStrategy[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 11134, "repo": "tribuo-core-4.3.1", "des": "A command line interface for loading in models and inspecting their feature and output spaces.", "code": "public class ModelExplorer extends Object implements com.oracle.labs.mlrg.olcut.command.CommandGroup {\n\tString featureInfo(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, String featureName); // Shows a specific feature's information.\n\torg.jline.reader.Completer[] fileCompleter(); // Completers for files.\n\tString generatesProbabilities(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci); // Checks if the model generates probabilities.\n\tString getDescription();\n\tString getName();\n\tString loadModel(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, File path, boolean protobuf); // Loads a model.\n\tstatic void main(String[] args); // Entry point.\n\tString minCount(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, int minCount); // Shows the number of features which occurred more than min count times.\n\tString modelProvenance(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci); // Displays the model provenance.\n\tString numFeatures(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci); // Displays the number of features.\n\tString outputInfo(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci); // Displays the output info.\n\tvoid startShell(); // Start the command shell\n\tString topFeatures(com.oracle.labs.mlrg.olcut.command.CommandInterpreter ci, int numFeatures); // Displays the top n features.\n}"}
{"index": 6530, "repo": "exoplayer-core-2.9.6", "des": "Wrapper around Log which allows to set the log level.", "code": "Class Log {\n\tstatic void d(java.lang.String tag, java.lang.String message);\n\tstatic void d(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable);\n\tstatic void e(java.lang.String tag, java.lang.String message);\n\tstatic void e(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable);\n\tstatic int getLogLevel(); // Returns current LogLevel for ExoPlayer logcat logging.\n\tboolean getLogStackTraces(); // Returns whether stack traces of Throwables will be logged to logcat.\n\tstatic void i(java.lang.String tag, java.lang.String message);\n\tstatic void i(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable);\n\tstatic void setLogLevel(int logLevel); // Sets the LogLevel for ExoPlayer logcat logging.\n\tstatic void setLogStackTraces(boolean logStackTraces); // Sets whether stack traces of Throwables will be logged to logcat.\n\tstatic void w(java.lang.String tag, java.lang.String message);\n\tstatic void w(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable);\n}"}
{"index": 8031, "repo": "commons-compress-1.23.0", "des": "Utility methods for reading and writing bytes.", "code": "Class ByteUtils {\n\tstatic long fromLittleEndian(byte[] bytes); // Reads the given byte array as a little endian long.\n\tstatic long fromLittleEndian(byte[] bytes, int off, int length); // Reads the given byte array as a little endian long.\n\tstatic long fromLittleEndian(ByteUtils.ByteSupplier supplier, int length); // Reads the given number of bytes from the given supplier as a little endian long.\n\tstatic long fromLittleEndian(DataInput in, int length); // Reads the given number of bytes from the given input as little endian long.\n\tstatic long fromLittleEndian(InputStream in, int length); // Reads the given number of bytes from the given stream as a little endian long.\n\tstatic void toLittleEndian(byte[] b, long value, int off, int length); // Inserts the given value into the array as a little endian sequence of the given length starting at the given offset.\n\tstatic void toLittleEndian(ByteUtils.ByteConsumer consumer, long value, int length); // Provides the given value to the given consumer as a little endian sequence of the given length.\n\tstatic void toLittleEndian(DataOutput out, long value, int length); // Writes the given value to the given stream as a little endian array of the given length.\n\tstatic void toLittleEndian(OutputStream out, long value, int length); // Writes the given value to the given stream as a little endian array of the given length.\n}"}
{"index": 3244, "repo": "hbase-common-3.0.0-alpha-4", "des": "A default implementation of HFileBlockDecodingContext.", "code": "Class HFileBlockDefaultDecodingContext {\n\tHFileContext getHFileContext(); // Returns HFile meta information\n\tTagCompressionContext getTagCompressionContext();\n\tvoid prepareDecoding(int onDiskSizeWithoutHeader, int uncompressedSizeWithoutHeader, ByteBuff blockBufferWithoutHeader, ByteBuff onDiskBlock); // Perform all actions that need to be done before the encoder's real decoding process.\n\tvoid setTagCompressionContext(TagCompressionContext tagCompressionContext);\n}"}
{"index": 7201, "repo": "calcite-core-1.34.0", "des": "Output format for EXPLAIN PLAN statement.", "code": "Enum SqlExplainFormat {\n\tstatic SqlExplainFormat valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlExplainFormat[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 18250, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Contract describing source of \"table specification\" information.", "code": "Interface TableSpecificationSource {\n\tjava.lang.String getComment();\n\tjava.lang.String getExplicitCatalogName(); // Obtain the supplied catalog name\n\tjava.lang.String getExplicitSchemaName(); // Obtain the supplied schema name\n}"}
{"index": 2820, "repo": "tika-parsers-1.28.5", "des": "This class is used to represent the prtFourBytesOfLengthFollowedByData.", "code": "Class PrtFourBytesOfLengthFollowedByData {\n\tint doDeserializeFromByteArray(byte[] byteArray, int startIndex); // This method is used to deserialize the prtFourBytesOfLengthFollowedByData from the specified byte array and start index.\n\tList<Byte> serializeToByteList(); // This method is used to convert the element of prtFourBytesOfLengthFollowedByData into a byte List.\n}"}
{"index": 11483, "repo": "spring-restdocs-core-3.0.0", "des": "A Snippet that documents a RESTful resource's links.", "code": "public class LinksSnippet extends TemplatedSnippet {\n\tfinal LinksSnippet and(List<LinkDescriptor> additionalDescriptors); // Returns a new LinksSnippet configured with this snippet's link extractor and attributes, and its descriptors combined with the given additionalDescriptors.\n\tfinal LinksSnippet and(LinkDescriptor... additionalDescriptors); // Returns a new LinksSnippet configured with this snippet's link extractor and attributes, and its descriptors combined with the given additionalDescriptors.\n\tprotected Map<String,Object> createModel(Operation operation); // Create the model that should be used during template rendering to document the given operation.\n\tprotected Map<String,Object> createModelForDescriptor(LinkDescriptor descriptor); // Returns a model for the given descriptor.\n\tprotected final Map<String,LinkDescriptor> getDescriptorsByRel(); // Returns a Map of LinkDescriptors keyed by their rels.\n}"}
{"index": 604, "repo": "ignite-core-2.15.0", "des": "Interface representing a single cluster node.", "code": "Interface ClusterNode {\n\tCollection<String> addresses(); // Gets collection of addresses this node is known by.\n\t<T> T attribute(String name); // Gets a node attribute.\n\tMap<String,Object> attributes(); // Gets all node attributes.\n\tObject consistentId(); // Gets consistent globally unique node ID.\n\tCollection<String> hostNames(); // Gets collection of host names this node is known by.\n\tUUID id(); // Gets globally unique node ID.\n\tboolean isClient(); // Whether this node is cache client (see IgniteConfiguration.isClientMode()).\n\tboolean isLocal(); // Tests whether or not this node is a local node.\n\tClusterMetrics metrics(); // Gets metrics snapshot for this node.\n\tlong order(); // Node order within grid topology.\n\tIgniteProductVersion version(); // Gets node version.\n}"}
{"index": 6061, "repo": "jackson-databind-2.15.2", "des": "Simple stand-alone implementation, useful as a placeholder or base class for more complex implementations.", "code": "Class BeanProperty.Std {\n\tvoid depositSchemaProperty(JsonObjectFormatVisitor objectVisitor, SerializerProvider provider); // Implementation of this method throws UnsupportedOperationException, since instances of this implementation should not be used as part of actual structure visited.\n\tList<PropertyName> findAliases(MapperConfig<?> config); // Method for accessing set of possible alternate names that are accepted during deserialization.\n\tJsonFormat.Value findPropertyFormat(MapperConfig<?> config, Class<?> baseType); // Helper method used to look up format settings applicable to this property, considering both possible per-type configuration settings\n\tJsonInclude.Value findPropertyInclusion(MapperConfig<?> config, Class<?> baseType); // Convenience method that is roughly equivalent to\n\t<A extends Annotation>A getAnnotation(Class<A> acls); // Method for finding annotation associated with this property; meaning annotation associated with one of entities used to access property.\n\t<A extends Annotation>A getContextAnnotation(Class<A> acls); // Method for finding annotation associated with context of this property; usually class in which member is declared (or its subtype if processing subtype).\n\tPropertyName getFullName(); // Method for getting full name definition, including possible format-specific additional properties (such as namespace when using XML backend).\n\tAnnotatedMember getMember(); // Method for accessing primary physical entity that represents the property; annotated field, method or constructor property.\n\tPropertyMetadata getMetadata(); // Accessor for additional optional information about property.\n\tString getName(); // Method to get logical name of the property\n\tJavaType getType(); // Method to get declared type of the property.\n\tPropertyName getWrapperName(); // If property is indicated to be wrapped, name of wrapper element to use.\n\tboolean isRequired(); // Whether value for property is marked as required using annotations or associated schema.\n\tboolean isVirtual(); // Accessor for checking whether there is an actual physical property behind this property abstraction or not.\n\tBeanProperty.Std withType(JavaType type);\n}"}
{"index": 17070, "repo": "spring-integration-core-6.1.2", "des": "A base class for aggregators that evaluates a SpEL expression with the message list as the root object within the evaluation context.", "code": "public class ExpressionEvaluatingMessageListProcessor extends AbstractExpressionEvaluator implements MessageListProcessor {\n\tObject process(Collection<? extends org.springframework.messaging.Message<?>> messages); // Processes the Message by evaluating the expression with that Message as the root object.\n\tvoid setExpectedType(Class<?> expectedType); // Set the result type expected from evaluation of the expression.\n}"}
{"index": 6086, "repo": "jackson-databind-2.15.2", "des": "Helper interface for things that convert Objects of one type to another.", "code": "Interface Converter<IN,OUT> {\n\tOUT convert(IN value); // Main conversion method.\n\tJavaType getInputType(TypeFactory typeFactory); // Method that can be used to find out actual input (source) type; this usually can be determined from type parameters, but may need to be implemented differently from programmatically defined converters (which cannot change static type parameter bindings).\n\tJavaType getOutputType(TypeFactory typeFactory); // Method that can be used to find out actual output (target) type; this usually can be determined from type parameters, but may need to be implemented differently from programmatically defined converters (which cannot change static type parameter bindings).\n}"}
{"index": 12326, "repo": "jena-core-4.9.0", "des": "This interface represents the Attribute Use schema component.", "code": "public interface XSAttributeUse extends XSObject {\n\tObject getActualVC(); // Deprecated. Use getValueConstraintValue().getActualValue() instead\n\tshort getActualVCType(); // Deprecated. Use getValueConstraintValue().getActualValueType() instead\n\tXSObjectList getAnnotations(); // A sequence of [annotations] or an empty XSObjectList.\n\tXSAttributeDeclaration getAttrDeclaration(); // [attribute declaration]: provides the attribute declaration itself, which will in turn determine the simple type definition used.\n\tshort getConstraintType(); // Value Constraint: one of default, fixed, or none.\n\tString getConstraintValue(); // Deprecated. Use getValueConstraintValue().getNormalizedValue() instead\n\tShortList getItemValueTypes(); // Deprecated. Use getValueConstraintValue().getListValueTypes() instead\n\tboolean getRequired(); // [required]: determines whether this use of an attribute declaration requires an appropriate attribute information item to be present, or merely allows it.\n\tXSValue getValueConstraintValue(); // The actual value of the default or fixed value constraint.\n}"}
{"index": 13350, "repo": "shiro-core-2.0.0-alpha-2", "des": "A MapContext provides a common base for context-based data storage in a Map.", "code": "public class MapContext extends Object implements Map<String,Object>, Serializable {\n\tvoid clear();\n\tboolean containsKey(Object o);\n\tboolean containsValue(Object o);\n\tSet<Map.Entry<String,Object>> entrySet();\n\tObject get(Object o);\n\tprotected <E> E getTypedValue(String key, Class<E> type); // Performs a get operation but additionally ensures that the value returned is of the specified type.\n\tboolean isEmpty();\n\tSet<String> keySet();\n\tprotected void nullSafePut(String key, Object value); // Places a value in this context map under the given key only if the given value argument is not null.\n\tObject put(String s, Object o);\n\tvoid putAll(Map<? extends String,?> map);\n\tObject remove(Object o);\n\tint size();\n\tCollection<Object> values();\n}"}
{"index": 15592, "repo": "spring-security-core-6.1.2", "des": "A ReactiveAuthorizationManager that determines if the current user is authorized by evaluating if the Authentication contains a specified authority.", "code": "public class AuthorityReactiveAuthorizationManager<T> extends Object implements ReactiveAuthorizationManager<T> {\n\treactor.core.publisher.Mono<AuthorizationDecision> check(reactor.core.publisher.Mono<Authentication> authentication, T object); // Determines if access is granted for a specific authentication and object.\n\tstatic <T> AuthorityReactiveAuthorizationManager<T> hasAnyAuthority(String... authorities); // Creates an instance of AuthorityReactiveAuthorizationManager with the provided authorities.\n\tstatic <T> AuthorityReactiveAuthorizationManager<T> hasAnyRole(String... roles); // Creates an instance of AuthorityReactiveAuthorizationManager with the provided authorities.\n\tstatic <T> AuthorityReactiveAuthorizationManager<T> hasAuthority(String authority); // Creates an instance of AuthorityReactiveAuthorizationManager with the provided authority.\n\tstatic <T> AuthorityReactiveAuthorizationManager<T> hasRole(String role); // Creates an instance of AuthorityReactiveAuthorizationManager with the provided authority.\n}"}
{"index": 18144, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Contract for sources of persistent attribute descriptions.", "code": "Interface AttributeSource {\n\tAttributePath getAttributePath();\n\tAttributeRole getAttributeRole();\n\tjava.lang.String getName(); // Obtain the attribute name.\n\tjava.lang.String getPropertyAccessorName(); // Obtain the name of the property accessor style used to access this attribute.\n\torg.hibernate.boot.model.source.internal.hbm.XmlElementMetadata getSourceType();\n\tHibernateTypeSource getTypeInformation(); // Obtain information about the Hibernate type (Type) for this attribute.\n\tjava.lang.String getXmlNodeName(); // This is only useful to log warnings when these deprecated attributes are populated.\n\tboolean isIncludedInOptimisticLocking(); // If the containing entity is using optimistic locking, should this attribute participate in that locking? Meaning, should changes in the value of this attribute at runtime indicate that the entity is now dirty in terms of optimistic locking?\n\tboolean isSingular(); // Attributes are (coarsely speaking) either singular or plural.\n}"}
{"index": 8288, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents the contents of an individual SOAP header in the a SOAP message.", "code": "Interface SoapHeaderElement {\n\tString getActorOrRole(); // Returns the actor or role for this header element.\n\tboolean getMustUnderstand(); // Indicates whether the mustUnderstand attribute for this header element is set.\n\tResult getResult(); // Returns a Result that allows for writing to the contents of the header element.\n\tString getText(); // Returns the text content of this header element, if any.\n\tvoid setActorOrRole(String actorOrRole); // Sets the actor or role for this header element.\n\tvoid setMustUnderstand(boolean mustUnderstand); // Sets the mustUnderstand attribute for this header element.\n\tvoid setText(String content); // Sets the text content of this header element.\n}"}
{"index": 422, "repo": "phoenix-core-5.1.3", "des": "Class encapsulating the process for rounding off a column/literal of type PDecimal.", "code": "Class RoundDecimalExpression {\n\tstatic Expression create(Expression expr); // Creates a RoundDecimalExpression with a default scale of 0 used for rounding.\n\tstatic Expression create(Expression expr, int scale); // Creates a RoundDecimalExpression with rounding scale given by @param scale.\n\tstatic Expression create(List<Expression> exprs);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tprotected KeyRange getInputRangeProducing(BigDecimal result); // Finds the Decimal KeyRange that will produce the given result when fed into this rounding expression.\n\tint getKeyFormationTraversalIndex(); // Determines whether or not a function may be used to form the start/stop key of a scan When OrderPreserving is YES, in order to make order-by optimization valid, it should return 0.\n\tString getName();\n\tprotected RoundingMode getRoundingMode();\n\tprotected int getRoundingScale();\n\tprotected BigDecimal halfStepNextInScale(BigDecimal decimal); // Produces a value half of a \"step\" forward in this expression's rounding scale.\n\tprotected BigDecimal halfStepPrevInScale(BigDecimal decimal); // Produces a value half of a \"step\" back in this expression's rounding scale.\n\tprotected boolean hasEnoughPrecisionToProduce(BigDecimal result); // Determines whether this rounding expression's scale has enough precision to produce the minimum precision for the input decimal.\n\tKeyPart newKeyPart(KeyPart childPart); // Manufactures a KeyPart used to construct the KeyRange given a constant and a comparison operator.\n\tFunctionExpression.OrderPreserving preservesOrder(); // Determines whether or not the result of the function invocation will be ordered in the same way as the input to the function.\n\tvoid readFields(DataInput input);\n\tprotected BigDecimal roundToScale(BigDecimal decimal); // Returns the given decimal rounded to this rounding expression's scale.\n\tprotected BigDecimal stepNextInScale(BigDecimal decimal); // Produces a value one \"step\" forward in this expression's rounding scale.\n\tprotected BigDecimal stepPrevInScale(BigDecimal decimal); // Produces a value one \"step\" back in this expression's rounding scale.\n\tvoid write(DataOutput output);\n}"}
{"index": 2943, "repo": "tink-1.10.0", "des": "Represents the parameters of a AesGcmHkdfStreamingKey.", "code": "Class AesGcmHkdfStreamingParameters {\n\tstatic AesGcmHkdfStreamingParameters.Builder builder();\n\tboolean equals(Object o);\n\tint getCiphertextSegmentSizeBytes(); // Returns the size a ciphertext segment has.\n\tint getDerivedAesGcmKeySizeBytes(); // Returns the size of the AES GCM key which will internally be derived.\n\tAesGcmHkdfStreamingParameters.HashType getHkdfHashType(); // Returns the type of the hash function used in HKDF.\n\tint getKeySizeBytes(); // Returns the size of the initial key material.\n}"}
{"index": 11804, "repo": "spring-kafka-3.0.9", "des": "Listener for handling a batch of incoming Kafka messages, propagating an acknowledgment handle that recipients can invoke when the message has been processed.", "code": "@FunctionalInterface public interface BatchAcknowledgingConsumerAwareMessageListener<K,V> extends BatchMessageListener<K,V> {\n\tdefault void onMessage(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> data); // Invoked with data from kafka.\n\tvoid onMessage(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> data, Acknowledgment acknowledgment, org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Invoked with data from kafka and provides access to the Consumer.\n}"}
{"index": 11771, "repo": "bedrock-core-7.0.2", "des": "An Option to define enabled Bedrock launch logging.", "code": "public class LaunchLogging extends Object implements Option {\n\tstatic LaunchLogging disabled(); // Constructs a LaunchLogging being disabled.\n\tstatic LaunchLogging enabled(); // Constructs a LaunchLogging being enabled.\n\tstatic LaunchLogging enabled(boolean enabled); // Constructs a LaunchLogging.\n\tboolean equals(Object other);\n\tboolean isEnabled(); // Determines if LaunchLogging is enabled.\n}"}
{"index": 15111, "repo": "spring-vault-core-3.0.4", "des": "Default implementation of VaultTransformOperations.", "code": "public class VaultTransformTemplate extends Object implements VaultTransformOperations {\n\tString decode(String roleName, String ciphertext, VaultTransformContext transformContext); // Decode the provided ciphertext using the named role.\n\tList<VaultTransformDecodeResult> decode(String roleName, List<TransformCiphertext> batchRequest); // Decode the provided batch of ciphertext using the role given and transformation in each list item.\n\tTransformPlaintext decode(String roleName, TransformCiphertext ciphertext); // Decode the provided ciphertext using the named role.\n\tString encode(String roleName, String plaintext); // Encode the provided plaintext using the named role.\n\tList<VaultTransformEncodeResult> encode(String roleName, List<TransformPlaintext> batchRequest); // Encode the provided batch of plaintext using the role given and transformation in each list item.\n\tTransformCiphertext encode(String roleName, TransformPlaintext plaintext); // Encode the provided plaintext using the named role.\n}"}
{"index": 9260, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Linux-specific container runtime implementations must implement this interface.", "code": "Interface LinuxContainerRuntime {\n\tdefault Map<String,org.apache.hadoop.yarn.api.records.LocalResource> getLocalResources(Container container);\n\tvoid initialize(org.apache.hadoop.conf.Configuration conf, Context nmContext); // Initialize the runtime.\n\tboolean isRuntimeRequested(Map<String,String> env); // Return whether the given environment variables indicate that the operation is requesting this runtime.\n\tdefault void start();\n\tdefault void stop();\n}"}
{"index": 12773, "repo": "spring-data-mongodb-4.1.2", "des": "Meta.CursorOption represents OP_QUERY wire protocol flags to change the behavior of queries.", "code": "public static enum Meta.CursorOption extends Enum<Meta.CursorOption> {\n\tstatic Meta.CursorOption valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Meta.CursorOption[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 5742, "repo": "freemarker-2.3.32", "des": "A class that will wrap a reflected method call into a TemplateMethodModel interface.", "code": "Class SimpleMethodModel {\n\tjava.lang.Object exec(java.util.List arguments); // Invokes the method, passing it the arguments from the list.\n\tjava.lang.Object[] explainTypeError(java.lang.Class[] expectedClasses); // Implementation of experimental interface; don't use it, no backward compatibility guarantee!\n\tTemplateModel get(int index); // Retrieves the i-th template model in this sequence.\n\tprotected java.lang.reflect.Member getMember();\n\tint size();\n}"}
{"index": 14286, "repo": "wicket-core-10.0.0-M1", "des": "Request handler that allows partial updates of the current page instance.", "code": "public interface IPartialPageRequestHandler extends IPageRequestHandler {\n\tvoid add(Component... components); // Adds components to the list of components to be rendered.\n\tvoid add(Component component, String markupId); // Adds a component to the list of components to be rendered\n\tvoid addChildren(MarkupContainer parent, Class<?> childCriteria); // Visits all children of the specified parent container and adds them to the target if they are of same type as childCriteria\n\tvoid appendJavaScript(CharSequence javascript); // Add JavasSript that will be evaluated on the client side after components are replaced\n\tvoid focusComponent(Component component); // Sets the focus in the browser to the given component.\n\tCollection<? extends Component> getComponents(); // Returns an unmodifiable collection of all components added to this target\n\tIHeaderResponse getHeaderResponse(); // Returns the header response associated with current handler.\n\tvoid prependJavaScript(CharSequence javascript); // Add JavaScript that will be evaluated on the client side before components are replaced.\n}"}
{"index": 4953, "repo": "commons-collections-3.2.2", "des": "Implements a ListIterator over an array.", "code": "Class ArrayListIterator {\n\tvoid add(Object o); // This iterator does not support modification of its backing collection, and so will always throw an UnsupportedOperationException when this method is invoked.\n\tboolean hasPrevious(); // Returns true if there are previous elements to return from the array.\n\tObject next(); // Gets the next element from the array.\n\tint nextIndex(); // Gets the next index to be retrieved.\n\tObject previous(); // Gets the previous element from the array.\n\tint previousIndex(); // Gets the index of the item to be retrieved if previous() is called.\n\tvoid reset(); // Resets the iterator back to the start index.\n\tvoid set(Object o); // Sets the element under the cursor.\n}"}
{"index": 14021, "repo": "spring-retry-2.0.2", "des": "A RetrySimulator is a tool for exercising retry + backoff operations.", "code": "public class RetrySimulator extends Object {\n\tRetrySimulation executeSimulation(int numSimulations); // Execute the simulator for a give # of iterations.\n\tList<Long> executeSingleSimulation(); // Execute a single simulation\n}"}
{"index": 4959, "repo": "commons-collections-3.2.2", "des": "A Comparator for Boolean objects that can sort either true or false first.", "code": "Class BooleanComparator {\n\tint compare(Boolean b1, Boolean b2); // Compares two non-null Boolean objects according to the value of sortsTrueFirst().\n\tint compare(Object obj1, Object obj2); // Compares two arbitrary Objects.\n\tboolean equals(Object object); // Returns true iff that Object is is a Comparator whose ordering is known to be equivalent to mine.\n\tstatic BooleanComparator getBooleanComparator(boolean trueFirst); // Returns a BooleanComparator instance that sorts trueFirst values before !trueFirst values.\n\tstatic BooleanComparator getFalseFirstComparator(); // Returns a BooleanComparator instance that sorts false values before true values.\n\tstatic BooleanComparator getTrueFirstComparator(); // Returns a BooleanComparator instance that sorts true values before false values.\n\tboolean sortsTrueFirst(); // Returns true iff I sort true values before false values.\n}"}
{"index": 9110, "repo": "hbase-server-3.0.0-alpha-4", "des": "In-memory Queue service provider for Slow/LargeLog events.", "code": "Class SlowLogQueueService {\n\tboolean clearNamedQueue(); // Cleans up queues maintained by services.\n\tvoid consumeEventFromDisruptor(NamedQueuePayload namedQueuePayload); // This implementation is specific to slowLog event.\n\tNamedQueuePayload.NamedQueueEvent getEvent(); // Retrieve event type for NamedQueueService implementation.\n\tNamedQueueGetResponse getNamedQueueRecords(NamedQueueGetRequest request); // Retrieve in memory queue records from ringbuffer\n\tvoid persistAll(Connection connection); // Add all slowLog events to system table.\n}"}
{"index": 9994, "repo": "commons-text-1.10.0", "des": "Translates code points to their Unicode escaped value.", "code": "Class UnicodeEscaper {\n\tstatic UnicodeEscaper above(int codePoint); // Constructs a UnicodeEscaper above the specified value (exclusive).\n\tstatic UnicodeEscaper below(int codePoint); // Constructs a UnicodeEscaper below the specified value (exclusive).\n\tstatic UnicodeEscaper between(int codePointLow, int codePointHigh); // Constructs a UnicodeEscaper between the specified values (inclusive).\n\tstatic UnicodeEscaper outsideOf(int codePointLow, int codePointHigh); // Constructs a UnicodeEscaper outside of the specified values (exclusive).\n\tprotected String toUtf16Escape(int codePoint); // Converts the given code point to a hex string of the form \"\\\\uXXXX\".\n\tboolean translate(int codePoint, Writer writer); // Translates the specified code point into another.\n}"}
{"index": 82, "repo": "commons-collections4-4.4", "des": "Abstract implementation of the MultiSet interface to simplify the creation of subclass implementations.", "code": "Class AbstractMultiSet<E> {\n\tboolean add(E object); // Adds one copy of the specified object to the MultiSet.\n\tint add(E object, int occurrences); // Adds a number of occurrences of the specified object to the MultiSet.\n\tvoid clear(); // Clears the multiset removing all elements from the entrySet.\n\tboolean contains(Object object); // Determines if the multiset contains the given element.\n\tprotected Set<MultiSet.Entry<E>> createEntrySet(); // Create a new view for the set of entries in this multiset.\n\tprotected abstract Iterator<MultiSet.Entry<E>> createEntrySetIterator(); // Creates an entry set iterator.\n\tprotected Set<E> createUniqueSet(); // Create a new view for the set of unique elements in this multiset.\n\tprotected Iterator<E> createUniqueSetIterator(); // Creates a unique set iterator.\n\tprotected void doReadObject(ObjectInputStream in); // Read the multiset in using a custom routine.\n\tprotected void doWriteObject(ObjectOutputStream out); // Write the multiset out using a custom routine.\n\tSet<MultiSet.Entry<E>> entrySet(); // Returns an unmodifiable view of the entries of this multiset.\n\tboolean equals(Object object); // Compares this MultiSet to another object.\n\tint getCount(Object object); // Returns the number of occurrence of the given element in this multiset by iterating over its entrySet.\n\tIterator<E> iterator(); // Gets an iterator over the multiset elements.\n\tboolean remove(Object object); // Removes one occurrence of the given object from the MultiSet.\n\tint remove(Object object, int occurrences); // Removes a number of occurrences of the specified object from the MultiSet.\n\tboolean removeAll(Collection<?> coll); // Remove all occurrences of all elements from this MultiSet represented in the given collection.\n\tint setCount(E object, int count); // Sets the number of occurrences of the specified object in the MultiSet to the given count.\n\tint size(); // Returns the number of elements in this multiset.\n\tprotected abstract int uniqueElements(); // Returns the number of unique elements in this multiset.\n\tSet<E> uniqueSet(); // Returns a view of the unique elements of this multiset.\n}"}
{"index": 5425, "repo": "druid-processing-26.0.0", "des": "A Sequence represents an iterable sequence of elements.", "code": "Interface Sequence<T> {\n\t<OutType> OutType accumulate(OutType initValue, Accumulator<OutType,T> accumulator); // Accumulate this sequence using the given accumulator.\n\tdefault Sequence<T> filter(com.google.common.base.Predicate<? super T> predicate);\n\tdefault <R> Sequence<R> flatMap(Function<? super T,? extends Sequence<? extends R>> mapper);\n\tdefault <R> Sequence<R> flatMerge(Function<? super T,? extends Sequence<? extends R>> mapper, com.google.common.collect.Ordering<? super R> ordering);\n\tdefault void forEach(Consumer<? super T> action);\n\tdefault Sequence<T> limit(long limit);\n\tdefault <U> Sequence<U> map(Function<? super T,? extends U> mapper);\n\tdefault Sequence<T> skip(long skip);\n\tdefault List<T> toList(); // This will materialize the entire sequence.\n\t<OutType> Yielder<OutType> toYielder(OutType initValue, YieldingAccumulator<OutType,T> accumulator); // Return a Yielder for accumulated sequence.\n\tdefault Sequence<T> withBaggage(Closeable baggage);\n\tdefault Sequence<T> withEffect(Runnable effect, Executor effectExecutor);\n}"}
{"index": 857, "repo": "ignite-core-2.15.0", "des": "Print stream that prints each thread group into a separate buffer.", "code": "Class GridTestPrintStream {\n\tPrintStream append(char c);\n\tPrintStream append(CharSequence csq);\n\tPrintStream append(CharSequence csq, int start, int end);\n\tvoid close();\n\tvoid flush();\n\tPrintStream format(Locale l, String format, Object... args);\n\tPrintStream format(String format, Object... args);\n\tvoid print(boolean b);\n\tvoid print(char c);\n\tvoid print(char[] s);\n\tvoid print(double d);\n\tvoid print(float f);\n\tvoid print(int i);\n\tvoid print(long l);\n\tvoid print(Object obj);\n\tvoid print(String s);\n\tPrintStream printf(Locale l, String format, Object... args);\n\tPrintStream printf(String format, Object... args);\n\tvoid println();\n\tvoid println(boolean x);\n\tvoid println(char x);\n\tvoid println(char[] x);\n\tvoid println(double x);\n\tvoid println(float x);\n\tvoid println(int x);\n\tvoid println(long x);\n\tvoid println(Object x);\n\tvoid println(String x);\n\tvoid purge(); // Purges print stream for this thread group to parent print stream.\n\tvoid purge(OutputStream out); // Purges print stream for this thread group to the stream passed in.\n\tvoid write(byte[] b);\n\tvoid write(byte[] buf, int off, int len);\n\tvoid write(int b);\n}"}
{"index": 11425, "repo": "spring-context-6.0.11", "des": "Variant of MethodInvokingRunnable meant to be used for processing of no-arg scheduled methods.", "code": "public class ScheduledMethodRunnable extends Object implements Runnable {\n\tMethod getMethod(); // Return the target method to call.\n\tObject getTarget(); // Return the target instance to call the method on.\n\tvoid run();\n}"}
{"index": 8241, "repo": "spring-ws-3.0.10.RELEASE", "des": "Defines the contract for objects that monitor a given folder for new messages.", "code": "Interface MonitoringStrategy {\n\tint getFolderOpenMode(); // Returns the folder open mode to be used by this strategy.\n\tjavax.mail.Message[] monitor(javax.mail.Folder folder); // Monitors the given folder, and returns any new messages when they arrive.\n}"}
{"index": 5367, "repo": "druid-processing-26.0.0", "des": "This is the return object from a receiver.", "code": "Enum Operator.Signal {\n\tstatic Operator.Signal valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Operator.Signal[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14602, "repo": "spring-security-web-6.1.2", "des": "AuthenticationFailureHandler which performs a redirect to the value of the defaultFailureUrl property when the onAuthenticationFailure method is called.", "code": "public class SimpleUrlAuthenticationFailureHandler extends Object implements AuthenticationFailureHandler {\n\tprotected RedirectStrategy getRedirectStrategy();\n\tprotected boolean isAllowSessionCreation();\n\tprotected boolean isUseForward();\n\tvoid onAuthenticationFailure(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.AuthenticationException exception); // Performs the redirect or forward to the defaultFailureUrl if set, otherwise returns a 401 error code.\n\tprotected final void saveException(jakarta.servlet.http.HttpServletRequest request, org.springframework.security.core.AuthenticationException exception); // Caches the AuthenticationException for use in view rendering.\n\tvoid setAllowSessionCreation(boolean allowSessionCreation);\n\tvoid setDefaultFailureUrl(String defaultFailureUrl); // The URL which will be used as the failure destination.\n\tvoid setRedirectStrategy(RedirectStrategy redirectStrategy); // Allows overriding of the behaviour when redirecting to a target URL.\n\tvoid setUseForward(boolean forwardToDestination); // If set to true, performs a forward to the failure destination URL instead of a redirect.\n}"}
{"index": 7434, "repo": "mahout-math-0.13.0", "des": "Open hash map from Object keys to float values.", "code": "Class OpenObjectFloatHashMap<T> {\n\tfloat adjustOrPutValue(T key, float newValue, float incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(T key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(float value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ObjectProcedure<T> procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ObjectFloatProcedure<T> procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tfloat get(T key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(T key);\n\tprotected int indexOfKey(T key);\n\tprotected int indexOfValue(float value);\n\tvoid keys(List<T> list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ObjectFloatProcedure<T> condition, List<T> keyList, FloatArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(T key, float value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(T key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(FloatArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 17669, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read and write BufferedImages.", "code": "public class BufferedImageHttpMessageConverter extends Object implements HttpMessageConverter<BufferedImage> {\n\tboolean canRead(Class<?> clazz, MediaType mediaType); // Indicates whether the given class can be read by this converter.\n\tboolean canWrite(Class<?> clazz, MediaType mediaType); // Indicates whether the given class can be written by this converter.\n\tMediaType getDefaultContentType(); // Returns the default Content-Type to be used for writing.\n\tList<MediaType> getSupportedMediaTypes(); // Return the list of media types supported by this converter.\n\tprotected void process(ImageReadParam irp); // Template method that allows for manipulating the ImageReadParam before it is used to read an image.\n\tprotected void process(ImageWriteParam iwp); // Template method that allows for manipulating the ImageWriteParam before it is used to write an image.\n\tBufferedImage read(Class<? extends BufferedImage> clazz, HttpInputMessage inputMessage); // Read an object of the given type from the given input message, and returns it.\n\tvoid setCacheDir(File cacheDir); // Sets the cache directory.\n\tvoid setDefaultContentType(MediaType defaultContentType); // Sets the default Content-Type to be used for writing.\n\tvoid write(BufferedImage image, MediaType contentType, HttpOutputMessage outputMessage); // Write a given object to the given output message.\n}"}
{"index": 11501, "repo": "spring-restdocs-core-3.0.0", "des": "A Snippet that documents the cookies in a request.", "code": "public class RequestCookiesSnippet extends AbstractCookiesSnippet {\n\tfinal RequestCookiesSnippet and(List<CookieDescriptor> additionalDescriptors); // Returns a new RequestCookiesSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tfinal RequestCookiesSnippet and(CookieDescriptor... additionalDescriptors); // Returns a new RequestCookiesSnippet configured with this snippet's attributes and its descriptors combined with the given additionalDescriptors.\n\tprotected Set<String> extractActualCookies(Operation operation); // Extracts the names of the cookies from the request or response of the given operation.\n\tprotected void verificationFailed(Set<String> undocumentedCookies, Set<String> missingCookies); // Called when the documented cookies do not match the actual cookies.\n}"}
{"index": 18244, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Extends dictated/default column size declarations from Type to the UserType hierarchy as well via an optional interface.", "code": "Interface Sized {\n\tSize[] defaultSizes(); // Defines the column sizes to use according to this type if the user did not explicitly say (and if no dictatedSizes() were given).\n\tSize[] dictatedSizes(); // Return the column sizes dictated by this type.\n}"}
{"index": 2274, "repo": "hive-exec-4.0.0-alpha-2", "des": "SyslogStorageHandler handles log files written to logs table in sys db.", "code": "Class SyslogStorageHandler {\n\tvoid configureInputJobCredentials(TableDesc tableDesc, Map<String,String> secrets); // This method is called to allow the StorageHandlers the chance to populate secret keys into the job's credentials.\n\tvoid configureInputJobProperties(TableDesc tableDesc, Map<String,String> jobProperties); // This method is called to allow the StorageHandlers the chance to populate the JobContext.getConfiguration() with properties that maybe be needed by the handler's bundled artifacts (ie InputFormat, SerDe, etc).\n\tvoid configureJobConf(TableDesc tableDesc, org.apache.hadoop.mapred.JobConf jobConf); // Called just before submitting MapReduce job.\n\tvoid configureOutputJobProperties(TableDesc tableDesc, Map<String,String> jobProperties); // This method is called to allow the StorageHandlers the chance to populate the JobContext.getConfiguration() with properties that maybe be needed by the handler's bundled artifacts (ie InputFormat, SerDe, etc).\n\tvoid configureTableJobProperties(TableDesc tableDesc, Map<String,String> jobProperties); // Deprecated use configureInputJobProperties/configureOutputJobProperties methods instead.\n\tHiveAuthorizationProvider getAuthorizationProvider(); // Returns the implementation specific authorization provider\n\torg.apache.hadoop.conf.Configuration getConf();\n\tClass<? extends org.apache.hadoop.mapred.InputFormat> getInputFormatClass();\n\tHiveMetaHook getMetaHook();\n\tClass<? extends org.apache.hadoop.mapred.OutputFormat> getOutputFormatClass();\n\tClass<? extends AbstractSerDe> getSerDeClass();\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 2803, "repo": "tika-parsers-1.28.5", "des": "Defines a contract for named entity recogniser.", "code": "Interface NERecogniser {\n\tSet<String> getEntityTypes(); // gets a set of entity types whose names are recognisable by this\n\tboolean isAvailable(); // checks if this Named Entity recogniser is available for service\n\tMap<String,Set<String>> recognise(String text); // call for name recognition action from text\n}"}
{"index": 12135, "repo": "jena-core-4.9.0", "des": "The context in which an LPInterpreter instance is running.", "code": "public interface LPInterpreterContext extends LPInterpreterState {\n\tboolean isReady(); // Test if one of our top level choice points is ready to be reactivated\n\tvoid notifyBlockedOn(ConsumerChoicePointFrame ccp); // Notify this context that a branch was suspended awaiting further results for the given choice point.\n\tvoid notifyFinished(ConsumerChoicePointFrame ccp); // Notify this context that the given choice point has terminated and can be remove from the wait list.\n\tvoid setReady(ConsumerChoicePointFrame ccp); // Called by a generating choice point to indicate we can be run because the indicated choice point is ready.\n}"}
{"index": 8475, "repo": "commons-io-2.13.0", "des": "This filter accepts Files that can be executed.", "code": "Class CanExecuteFileFilter {\n\tboolean accept(File file); // Checks to see if the file can be executed.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the file can be executed.\n}"}
{"index": 2716, "repo": "commons-dbcp2-2.9.0", "des": "An implementation of XAConnectionFactory which manages non-XA connections in XA transactions.", "code": "Class LocalXAConnectionFactory {\n\tConnection createConnection(); // Create a new Connection in an implementation specific fashion.\n\tConnectionFactory getConnectionFactory();\n\tTransactionRegistry getTransactionRegistry(); // Gets the TransactionRegistry for this connection factory which contains a the XAResource for every connection created by this factory.\n}"}
{"index": 1472, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a go-to action that can be executed in a PDF document.", "code": "Class PDActionGoTo {\n\tPDDestination getDestination(); // This will get the destination to jump to.\n\tvoid setDestination(PDDestination d); // This will set the destination to jump to.\n}"}
{"index": 14983, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Configurer for the OAuth 2.0 Token Endpoint.", "code": "public final class OAuth2TokenEndpointConfigurer extends Object {\n\tOAuth2TokenEndpointConfigurer accessTokenRequestConverter(org.springframework.security.web.authentication.AuthenticationConverter accessTokenRequestConverter); // Adds an AuthenticationConverter used when attempting to extract an Access Token Request from HttpServletRequest to an instance of OAuth2AuthorizationGrantAuthenticationToken used for authenticating the authorization grant.\n\tOAuth2TokenEndpointConfigurer accessTokenRequestConverters(Consumer<List<org.springframework.security.web.authentication.AuthenticationConverter>> accessTokenRequestConvertersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationConverter's allowing the ability to add, remove, or customize a specific AuthenticationConverter.\n\tOAuth2TokenEndpointConfigurer accessTokenResponseHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler accessTokenResponseHandler); // Sets the AuthenticationSuccessHandler used for handling an OAuth2AccessTokenAuthenticationToken and returning the Access Token Response.\n\tOAuth2TokenEndpointConfigurer authenticationProvider(org.springframework.security.authentication.AuthenticationProvider authenticationProvider); // Adds an AuthenticationProvider used for authenticating a type of OAuth2AuthorizationGrantAuthenticationToken.\n\tOAuth2TokenEndpointConfigurer authenticationProviders(Consumer<List<org.springframework.security.authentication.AuthenticationProvider>> authenticationProvidersConsumer); // Sets the Consumer providing access to the List of default and (optionally) added AuthenticationProvider's allowing the ability to add, remove, or customize a specific AuthenticationProvider.\n\tOAuth2TokenEndpointConfigurer errorResponseHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler errorResponseHandler); // Sets the AuthenticationFailureHandler used for handling an OAuth2AuthenticationException and returning the Error Response.\n\tprotected final org.springframework.security.config.annotation.ObjectPostProcessor<Object> getObjectPostProcessor();\n\tprotected final <T> T postProcess(T object);\n}"}
{"index": 3995, "repo": "zookeeper-3.8.2", "des": "This class implements the snapshot interface.", "code": "Class FileSnap {\n\tvoid close(); // synchronized close just so that if serialize is in place the close operation will block and will wait till serialize is done and will set the close flag\n\tlong deserialize(DataTree dt, Map<Long,Integer> sessions); // deserialize a data tree from the most recent snapshot\n\tvoid deserialize(DataTree dt, Map<Long,Integer> sessions, InputArchive ia); // deserialize the datatree from an inputarchive\n\tFile findMostRecentSnapshot(); // find the most recent snapshot in the database.\n\tList<File> findNRecentSnapshots(int n); // find the last n snapshots.\n\tprotected List<File> findNValidSnapshots(int n); // find the last (maybe) valid n snapshots.\n\tSnapshotInfo getLastSnapshotInfo(); // get information of the last saved/restored snapshot\n\tvoid serialize(DataTree dt, Map<Long,Integer> sessions, File snapShot, boolean fsync); // serialize the datatree and session into the file snapshot\n\tprotected void serialize(DataTree dt, Map<Long,Integer> sessions, OutputArchive oa, FileHeader header); // serialize the datatree and sessions\n}"}
{"index": 12364, "repo": "spring-oxm-6.0.11", "des": "Source implementation that uses a Marshaller.Can be constructed with a Marshaller and an object to be marshalled.", "code": "public class MarshallingSource extends SAXSource {\n\tObject getContent(); // Return the object to be marshalled.\n\tMarshaller getMarshaller(); // Return the Marshaller used by this MarshallingSource.\n\tvoid setInputSource(InputSource inputSource); // Throws a UnsupportedOperationException.\n\tvoid setXMLReader(XMLReader reader); // Throws a UnsupportedOperationException.\n}"}
{"index": 16, "repo": "spring-cloud-aws-jdbc-2.2.6.RELEASE", "des": "A Tomcat JDBC Pool DataSourceFactory implementation that creates a JDBC pool backed datasource.", "code": "Class TomcatJdbcDataSourceFactory {\n\tvoid closeDataSource(DataSource dataSource); // Will be called if the datasource is not used anymore to allow the factory to release any resource that are used by the created object.\n\torg.apache.tomcat.jdbc.pool.DataSource createDataSource(DataSourceInformation dataSourceInformation); // Creates a datasource with the passed in information.\n\tvoid setDatabasePlatformSupport(DatabasePlatformSupport databasePlatformSupport);\n\tvoid setDefaultTransactionIsolationName(String constantName);\n\tvoid setDriverClassName(String driverClassName);\n\tvoid setPassword(String password);\n\tvoid setUrl(String url);\n\tvoid setUsername(String username);\n}"}
{"index": 3672, "repo": "hive-serde-4.0.0-alpha-2", "des": "TimestampWritableV2 Timestamps are of the format YYYY-MM-DD HH:MM:SS.", "code": "Class TimestampWritableV2 {\n\tint compareTo(TimestampWritableV2 t);\n\tstatic void convertTimestampToBytes(Timestamp t, byte[] b, int offset); // Writes a Timestamp's serialized value to byte array b at the given offset\n\tstatic Timestamp createTimestamp(byte[] bytes, int offset);\n\tboolean equals(Object o);\n\tbyte[] getBinarySortable();\n\tbyte[] getBytes(); // Used to create copies of objects\n\tdouble getDouble();\n\tHiveDecimal getHiveDecimal();\n\tstatic HiveDecimal getHiveDecimal(Timestamp timestamp);\n\tstatic long getLong(Timestamp timestamp);\n\tint getNanos();\n\tstatic int getNanos(byte[] bytes, int offset);\n\tlong getSeconds();\n\tstatic long getSeconds(byte[] bytes, int offset); // Gets seconds stored as integer at bytes[offset]\n\tTimestamp getTimestamp();\n\tstatic int getTotalLength(byte[] bytes, int offset);\n\tboolean hasDecimal();\n\tstatic Timestamp longToTimestamp(long time, boolean intToTimestampInSeconds); // Converts the time in seconds or milliseconds to a timestamp.\n\tvoid readFields(DataInput in);\n\tvoid set(byte[] bytes, int offset);\n\tvoid set(Timestamp t);\n\tvoid set(TimestampWritableV2 t);\n\tvoid setBinarySortable(byte[] bytes, int binSortOffset); // Given a byte[] that has binary sortable data, initialize the internal structures to hold that data\n\tvoid setInternal(long secondsAsMillis, int nanos);\n\tstatic void setTimestamp(Timestamp t, byte[] bytes, int offset);\n\tstatic void updateTimestamp(Timestamp timestamp, long secondsAsMillis, int nanos);\n\tvoid write(DataOutput out);\n\tvoid writeToByteStream(ByteStream.RandomAccessOutput byteStream);\n}"}
{"index": 3505, "repo": "mahout-mr-0.13.0", "des": "The HMMEvaluator class offers several methods to evaluate an HMM Model.", "code": "Class HmmEvaluator {\n\tstatic int[] decode(HmmModel model, int[] observations, boolean scaled); // Returns the most likely sequence of hidden states for the given model and observation\n\tstatic double modelLikelihood(HmmModel model, int[] outputSequence, boolean scaled); // Returns the likelihood that a given output sequence was produced by the given model.\n\tstatic double modelLikelihood(HmmModel model, int[] outputSequence, Matrix beta, boolean scaled); // Computes the likelihood that a given output sequence was computed by a given model.\n\tstatic double modelLikelihood(Matrix alpha, boolean scaled); // Computes the likelihood that a given output sequence was computed by a given model using the alpha values computed by the forward algorithm.\n\tstatic int[] predict(HmmModel model, int steps); // Predict a sequence of steps output states for the given HMM model\n\tstatic int[] predict(HmmModel model, int steps, long seed); // Predict a sequence of steps output states for the given HMM model\n}"}
{"index": 16679, "repo": "spring-beans-6.0.11", "des": "Utility methods for classes that perform bean property access according to the PropertyAccessor interface.", "code": "public abstract class PropertyAccessorUtils extends Object {\n\tstatic String canonicalPropertyName(String propertyName); // Determine the canonical name for the given property path.\n\tstatic String[] canonicalPropertyNames(String[] propertyNames); // Determine the canonical names for the given property paths.\n\tstatic int getFirstNestedPropertySeparatorIndex(String propertyPath); // Determine the first nested property separator in the given property path, ignoring dots in keys (like \"map[my.key]\").\n\tstatic int getLastNestedPropertySeparatorIndex(String propertyPath); // Determine the first nested property separator in the given property path, ignoring dots in keys (like \"map[my.key]\").\n\tstatic String getPropertyName(String propertyPath); // Return the actual property name for the given property path.\n\tstatic boolean isNestedOrIndexedProperty(String propertyPath); // Check whether the given property path indicates an indexed or nested property.\n\tstatic boolean matchesProperty(String registeredPath, String propertyPath); // Determine whether the given registered path matches the given property path, either indicating the property itself or an indexed element of the property.\n}"}
{"index": 15387, "repo": "spring-boot-3.1.1", "des": "SslBundle backed by Ssl or an SslStoreProvider.", "code": "public final class WebServerSslBundle extends Object implements SslBundle {\n\tstatic SslBundle get(Ssl ssl); // Get the SslBundle that should be used for the given Ssl instance.\n\tstatic SslBundle get(Ssl ssl, SslBundles sslBundles); // Get the SslBundle that should be used for the given Ssl instance.\n\tstatic SslBundle get(Ssl ssl, SslBundles sslBundles, SslStoreProvider sslStoreProvider); // Deprecated, for removal: This API element is subject to removal in a future version. since 3.1.0 for removal in 3.3.0 along with SslStoreProvider\n\tSslBundleKey getKey(); // Return a reference to the key that should be used for this bundle or SslBundleKey.NONE.\n\tSslManagerBundle getManagers(); // Return the SslManagerBundle that can be used to access this bundle's key and trust managers.\n\tSslOptions getOptions(); // Return SslOptions that should be applied when establishing the SSL connection.\n\tString getProtocol(); // Return the protocol to use when establishing the connection.\n\tSslStoreBundle getStores(); // Return the SslStoreBundle that can be used to access this bundle's key and trust stores.\n}"}
{"index": 12541, "repo": "spring-jdbc-6.0.11", "des": "Simple DataSourceLookup implementation that relies on a map for doing lookups.", "code": "public class MapDataSourceLookup extends Object implements DataSourceLookup {\n\tvoid addDataSource(String dataSourceName, DataSource dataSource); // Add the supplied DataSource to the map of DataSources maintained by this object.\n\tDataSource getDataSource(String dataSourceName); // Retrieve the DataSource identified by the given name.\n\tMap<String,DataSource> getDataSources(); // Get the Map of DataSources maintained by this object.\n\tvoid setDataSources(Map<String,DataSource> dataSources); // Set the Map of DataSources; the keys are Strings, the values are actual DataSource instances.\n}"}
{"index": 17322, "repo": "groovy-4.0.13", "des": "Represents a String which contains embedded values such as \"hello there ${user} how are you?\" which can be evaluated lazily.", "code": "public abstract class GString extends GroovyObjectSupport implements Comparable, CharSequence, Writable, Buildable, Serializable {\n\tvoid build(GroovyObject builder);\n\tprotected int calcInitialCapacity();\n\tchar charAt(int index);\n\tint compareTo(Object that);\n\tboolean equals(GString that);\n\tboolean equals(Object that);\n\tbyte[] getBytes();\n\tbyte[] getBytes(String charset);\n\tabstract String[] getStrings();\n\tObject getValue(int idx);\n\tint getValueCount();\n\tObject[] getValues();\n\tObject invokeMethod(String name, Object args); // Overloaded to implement duck typing for Strings so that any method that can't be evaluated on this object will be forwarded to the toString() object instead.\n\tint length();\n\tPattern negate(); // Turns a String into a regular expression pattern\n\tGString plus(GString that);\n\tGString plus(String that);\n\tCharSequence subSequence(int start, int end);\n\tWriter writeTo(Writer out); // Writes this object to the given writer.\n}"}
{"index": 1758, "repo": "kafka-clients-3.5.0", "des": "A callback interface that the user can implement to trigger custom actions when the set of partitions assigned to the consumer changes.", "code": "Interface ConsumerRebalanceListener {\n\tvoid onPartitionsAssigned(Collection<TopicPartition> partitions); // A callback method the user can implement to provide handling of customized offsets on completion of a successful partition re-assignment.\n\tdefault void onPartitionsLost(Collection<TopicPartition> partitions); // A callback method you can implement to provide handling of cleaning up resources for partitions that have already been reassigned to other consumers.\n\tvoid onPartitionsRevoked(Collection<TopicPartition> partitions); // A callback method the user can implement to provide handling of offset commits to a customized store.\n}"}
{"index": 16965, "repo": "spring-orm-6.0.11", "des": "Hibernate-specific subclass of UncategorizedDataAccessException, for JDBC exceptions that Hibernate wrapped.", "code": "public class HibernateJdbcException extends org.springframework.dao.UncategorizedDataAccessException {\n\tString getSql(); // Return the SQL that led to the problem.\n\tSQLException getSQLException(); // Return the underlying SQLException.\n}"}
{"index": 2604, "repo": "nifi-utils-1.22.0", "des": "Fluent api for checking one or more strings and selecting the first non-empty one.", "code": "Interface StringSelector {\n\tboolean found(); // May be used to stop processing subsequent inputs when a result is already available.\n\tstatic StringSelector of(String... strings); // Starts the fluent expression by checking the first string(s).\n\tStringSelector or(String... strings); // Check the next string(s).\n}"}
{"index": 12832, "repo": "spring-data-mongodb-4.1.2", "des": "Reactive GridFSFile based Resource implementation.", "code": "public class ReactiveGridFsResource extends Object implements GridFsObject<Object,org.reactivestreams.Publisher<DataBuffer>> {\n\tstatic ReactiveGridFsResource absent(String filename); // Obtain an absent ReactiveGridFsResource.\n\tboolean exists();\n\treactor.core.publisher.Flux<DataBuffer> getContent(); // The actual file content.\n\treactor.core.publisher.Flux<DataBuffer> getDownloadStream(); // Obtain the download stream emitting chunks of data as they come in.\n\treactor.core.publisher.Flux<DataBuffer> getDownloadStream(int chunkSize); // Obtain the download stream emitting chunks of data with given chunkSize as they come in.\n\tObject getFileId(); // The GridFSFile.getId() value converted into its simple java type.\n\tString getFilename(); // The filename.\n\treactor.core.publisher.Mono<com.mongodb.client.gridfs.model.GridFSFile> getGridFSFile();\n\treactor.core.publisher.Mono<InputStream> getInputStream(); // Obtain the data as InputStream.\n\tGridFsObject.Options getOptions(); // Additional information like file metadata (eg. contentType).\n}"}
{"index": 18152, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "A type that maps between VARCHAR and char[]", "code": "Class CharArrayType {\n\tjava.lang.String getName(); // Returns the abbreviated name of the type.\n\tjava.lang.String[] getRegistrationKeys(); // Get the names under which this type should be registered in the type registry.\n}"}
{"index": 7891, "repo": "nifi-framework-core-api-1.22.0", "des": "A Revision Manager provides the ability to prevent clients of the Web API from stepping on one another.", "code": "Interface RevisionManager {\n\t<T> T deleteRevision(RevisionClaim claim, NiFiUser user, DeleteRevisionTask<T> task); // Performs the given task that is expected to remove a component from the flow.\n\tRevisionSnapshot getAllRevisions();\n\tRevision getRevision(String componentId); // Returns the current Revision for the component with the given ID.\n\tlong getRevisionUpdateCount(); // Returns the number of updates that have occurred\n\tvoid reset(RevisionSnapshot revisionSnapshot); // Clears any revisions that are currently held and resets the Revision Manager so that the revisions present are those provided in the given collection\n\t<T> RevisionUpdate<T> updateRevision(RevisionClaim claim, NiFiUser modifier, UpdateRevisionTask<T> task); // Performs the given task without allowing the given Revision Claim to expire.\n}"}
{"index": 10115, "repo": "spring-hateoas-2.1.2", "des": "API to provide HAL curie information for links.", "code": "public interface CurieProvider {\n\tCollection<?> getCurieInformation(Links links); // Returns an object to render as the base curie information.\n\tHalLinkRelation getNamespacedRelFor(LinkRelation rel); // Returns the rel to be rendered for the given rel.\n\tHalLinkRelation getNamespacedRelFrom(Link link); // Returns the rel to be rendered for the given Link.\n}"}
{"index": 16528, "repo": "spring-batch-infrastructure-5.0.2", "des": "ItemProcessor implementation that passes the current item to process to the provided script.", "code": "public class ScriptItemProcessor<I,O> extends Object implements ItemProcessor<I,O>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tO process(I item); // Process the provided item, returning a potentially modified or new item for continued processing.\n\tvoid setItemBindingVariableName(String itemBindingVariableName); // Provides the ability to change the key name that scripts use to obtain the current item to process if the variable represented by: ITEM_BINDING_VARIABLE_NAME is not suitable (\"item\").\n\tvoid setScript(org.springframework.core.io.Resource resource); // Sets the Resource location of the script to use.\n\tvoid setScriptEvaluator(org.springframework.scripting.ScriptEvaluator scriptEvaluator); // Provides the ability to set a custom ScriptEvaluator implementation.\n\tvoid setScriptSource(String scriptSource, String language); // Sets the provided String as the script source code to use.\n}"}
{"index": 2268, "repo": "hive-exec-4.0.0-alpha-2", "des": "Abstract class that all simple relational tests (contains, touches, .", "code": "Class ST_GeometryRelational {\n\tvoid close(); // Close GenericUDF.\n\tObject evaluate(GenericUDF.DeferredObject[] args); // Evaluate the GenericUDF with the arguments.\n\tprotected abstract com.esri.core.geometry.OperatorSimpleRelation getRelationOperator(); // Operators that extend this should return an instance of OperatorSimpleRelation\n\tObjectInspector initialize(ObjectInspector[] OIs); // Initialize this GenericUDF.\n}"}
{"index": 12057, "repo": "jena-core-4.9.0", "des": "A triple store that uses hash tables to map from nodes to triple bunches.", "code": "public class FastTripleStore extends Object implements TripleStore {\n\tvoid add(Triple triple); // Add a triple to the map.\n\tvoid clear(); // Remove all triples from the map.\n\tboolean contains(Triple tripleMatch); // Answer true if the graph contains any triple matching t.\n\tint countTriples(); // Return the number of triples in the map.\n\tExtendedIterator<Triple> find(Triple tripleMatch); // Returns an ExtendedIterator of all triples in the graph matching the given triple match.\n\tboolean isEmpty(); // Return true if the map is empty.\n\tvoid remove(Triple triple); // Remove a triple from the map.\n\tStream<Triple> stream(); // Returns a Stream of all triples in the graph.\n\tStream<Triple> stream(Triple tripleMatch); // Returns a Stream of Triples matching the given pattern.\n}"}
{"index": 8219, "repo": "spring-ws-3.0.10.RELEASE", "des": "Generic utility methods for dealing with KeyStore objects.", "code": "Class KeyStoreUtils {\n\tstatic KeyStore loadDefaultKeyStore(); // Loads the key store indicated by system properties.\n\tstatic KeyStore loadDefaultTrustStore(); // Loads a default trust store.\n}"}
{"index": 5059, "repo": "commons-collections-3.2.2", "des": "Binary heap implementation of Buffer that provides for removal based on Comparator ordering.", "code": "Class PriorityBuffer {\n\tboolean add(Object element); // Adds an element to the buffer.\n\tvoid clear(); // Clears all elements from the buffer.\n\tComparator comparator(); // Gets the comparator being used for this buffer, null is natural order.\n\tprotected int compare(Object a, Object b); // Compares two objects using the comparator if specified, or the natural order otherwise.\n\tObject get(); // Gets the next element to be removed without actually removing it (peek).\n\tprotected void grow(); // Increases the size of the heap to support additional elements\n\tboolean isAscendingOrder(); // Checks whether the heap is ascending or descending order.\n\tprotected boolean isAtCapacity(); // Tests if the buffer is at capacity.\n\tIterator iterator(); // Returns an iterator over this heap's elements.\n\tprotected void percolateDownMaxHeap(int index); // Percolates element down heap from the position given by the index.\n\tprotected void percolateDownMinHeap(int index); // Percolates element down heap from the position given by the index.\n\tprotected void percolateUpMaxHeap(int index); // Percolates element up heap from from the position given by the index.\n\tprotected void percolateUpMaxHeap(Object element); // Percolates a new element up heap from the bottom.\n\tprotected void percolateUpMinHeap(int index); // Percolates element up heap from the position given by the index.\n\tprotected void percolateUpMinHeap(Object element); // Percolates a new element up heap from the bottom.\n\tObject remove(); // Gets and removes the next element (pop).\n\tint size(); // Returns the number of elements in this buffer.\n}"}
{"index": 17866, "repo": "spring-web-6.0.11", "des": "Defines a builder that adds a body to the response entity.", "code": "public static interface RequestEntity.BodyBuilder extends RequestEntity.HeadersBuilder<RequestEntity.BodyBuilder> {\n\t<T> RequestEntity<T> body(T body); // Set the body of the request entity and build the RequestEntity.\n\t<T> RequestEntity<T> body(T body, Type type); // Set the body and type of the request entity and build the RequestEntity.\n\tRequestEntity.BodyBuilder contentLength(long contentLength); // Set the length of the body in bytes, as specified by the Content-Length header.\n\tRequestEntity.BodyBuilder contentType(MediaType contentType); // Set the media type of the body, as specified by the Content-Type header.\n}"}
{"index": 10436, "repo": "groovy-all-4.0.13", "des": "An interface for MetaClass instances that \"adapt\" other MetaClass instances such as a proxy or delegating MetaClass.", "code": "public interface AdaptingMetaClass extends MetaClass {\n\tMetaClass getAdaptee(); // Returns the MetaClass that this adapter adapts\n\tvoid setAdaptee(MetaClass metaClass); // Sets the MetaClass adapted by this MetaClass\n}"}
{"index": 1101, "repo": "ignite-core-2.15.0", "des": "Interop output stream implementation working with BIG ENDIAN architecture.", "code": "Class PlatformBigEndianOutputStreamImpl {\n\tvoid unsafeWriteChar(char val); // Write char in unsafe mode.\n\tvoid unsafeWriteInt(int val); // Write int in unsafe mode.\n\tvoid unsafeWriteInt(int pos, int val); // Write int in unsafe mode.\n\tvoid unsafeWriteLong(long val); // Write long in unsafe mode.\n\tvoid unsafeWriteShort(int pos, short val); // Write short in unsafe mode.\n\tvoid unsafeWriteShort(short val); // Write short in unsafe mode.\n\tvoid writeChar(char val); // Write char value.\n\tvoid writeCharArray(char[] val); // Write char array.\n\tvoid writeDoubleArray(double[] val); // Write double array.\n\tvoid writeFloatArray(float[] val); // Write float array.\n\tvoid writeInt(int val); // Write int value.\n\tvoid writeInt(int pos, int val); // Write int value to the given position.\n\tvoid writeIntArray(int[] val); // Write int array.\n\tvoid writeLong(long val); // Write long value.\n\tvoid writeLongArray(long[] val); // Write long array.\n\tvoid writeShort(int pos, short val); // Write short value at the given position.\n\tvoid writeShort(short val); // Write short value.\n\tvoid writeShortArray(short[] val); // Write short array.\n}"}
{"index": 14496, "repo": "spring-security-web-6.1.2", "des": "An implementation of ServerRequestCache that saves the requested URI in a cookie.", "code": "public class CookieServerRequestCache extends Object implements ServerRequestCache {\n\treactor.core.publisher.Mono<URI> getRedirectUri(org.springframework.web.server.ServerWebExchange exchange); // Get the URI that can be redirected to trigger the saved request to be used\n\treactor.core.publisher.Mono<org.springframework.http.server.reactive.ServerHttpRequest> removeMatchingRequest(org.springframework.web.server.ServerWebExchange exchange); // If the provided ServerWebExchange matches the saved ServerHttpRequest gets the saved ServerHttpRequest\n\treactor.core.publisher.Mono<Void> saveRequest(org.springframework.web.server.ServerWebExchange exchange); // Save the ServerHttpRequest\n\tvoid setSaveRequestMatcher(ServerWebExchangeMatcher saveRequestMatcher); // Sets the matcher to determine if the request should be saved.\n}"}
{"index": 9855, "repo": "commons-math3-3.6.1", "des": "This enumeration defines the type of transform which is to be computed.", "code": "Enum TransformType {\n\tstatic TransformType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TransformType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6899, "repo": "calcite-core-1.34.0", "des": "An operand type checker that supports implicit type cast, see TypeCoercion.", "code": "Interface ImplicitCastOperandTypeChecker {\n\tboolean checkOperandTypesWithoutTypeCoercion(SqlCallBinding callBinding, boolean throwOnFailure); // Checks the types of an operator's all operands, but without type coercion.\n\tSqlTypeFamily getOperandSqlTypeFamily(int iFormalOperand); // Get the operand SqlTypeFamily of formal index iFormalOperand.\n}"}
{"index": 4603, "repo": "commons-vfs2-2.9.0", "des": "Allows passwords to be encrypted and decrypted.", "code": "Class DefaultCryptor {\n\tString decrypt(String encryptedKey); // Decrypts the password.\n\tString encrypt(String plainKey); // Encrypt the plain text password.\n}"}
{"index": 16436, "repo": "spring-batch-infrastructure-5.0.2", "des": "Enum representing a database type, such as DB2 or oracle.", "code": "public enum DatabaseType extends Enum<DatabaseType> {\n\tstatic DatabaseType fromMetaData(DataSource dataSource); // Convenience method that pulls a database product name from the DataSource's metadata.\n\tstatic DatabaseType fromProductName(String productName); // Static method to obtain a DatabaseType from the provided product name.\n\tString getProductName();\n\tstatic DatabaseType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic DatabaseType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 10769, "repo": "spring-boot-actuator-3.1.1", "des": "Abstract base class for endpoints discovered by a EndpointDiscoverer.", "code": "public abstract class AbstractDiscoveredEndpoint<O extends Operation> extends AbstractExposableEndpoint<O> implements DiscoveredEndpoint<O> {\n\tprotected void appendFields(org.springframework.core.style.ToStringCreator creator);\n\tObject getEndpointBean(); // Return the source bean that was used to construct the DiscoveredEndpoint.\n\tboolean wasDiscoveredBy(Class<? extends EndpointDiscoverer<?,?>> discoverer); // Return true if the endpoint was discovered by the specified discoverer.\n}"}
{"index": 509, "repo": "ignite-core-2.15.0", "des": "Implementation of Marshaller that lets to serialize and deserialize all objects in the binary format.", "code": "Class BinaryMarshaller {\n\tstatic boolean available(); // Checks whether BinaryMarshaller is able to work on the current JVM.\n\tGridBinaryMarshaller binaryMarshaller();\n\tprotected byte[] marshal0(@Nullable Object obj); // Marshals object to byte array.\n\tprotected void marshal0(@Nullable Object obj, OutputStream out); // Marshals object to the output stream.\n\tvoid onUndeploy(ClassLoader ldr); // Undeployment callback invoked when class loader is being undeployed.\n\tvoid setBinaryContext(BinaryContext ctx, IgniteConfiguration cfg); // Sets BinaryContext.\n\tprotected <T> T unmarshal0(byte[] bytes, @Nullable ClassLoader clsLdr); // Unmarshals object from byte array using given class loader.\n\tprotected <T> T unmarshal0(InputStream in, @Nullable ClassLoader clsLdr); // Unmarshals object from the input stream using given class loader.\n}"}
{"index": 1789, "repo": "kafka-clients-3.5.0", "des": "The b64token value as defined in RFC 6750 Section 2.", "code": "Interface OAuthBearerToken {\n\tlong lifetimeMs(); // The token's lifetime, expressed as the number of milliseconds since the epoch, as per RFC 6749 Section 1.4\n\tString principalName(); // The name of the principal to which this credential applies\n\tSet<String> scope(); // The token's scope of access, as per RFC 6749 Section 1.4\n\tLong startTimeMs(); // When the credential became valid, in terms of the number of milliseconds since the epoch, if known, otherwise null.\n\tString value(); // The b64token value as defined in RFC 6750 Section 2.1\n}"}
{"index": 844, "repo": "ignite-core-2.15.0", "des": "This factory is responsible for router lifecycle management.", "code": "Class GridRouterFactory {\n\tstatic Collection<GridTcpRouter> allTcpRouters(); // Returns collection of all currently running TCP routers.\n\tstatic GridTcpRouter startTcpRouter(GridTcpRouterConfiguration cfg); // Starts a TCP router with given configuration.\n\tstatic void stopAllRouters(); // Stops all currently active routers.\n\tstatic void stopTcpRouter(UUID tcpRouterId); // Stops particular TCP router.\n\tstatic @Nullable GridTcpRouter tcpRouter(UUID id); // Returns TCP router with the given id.\n}"}
{"index": 4377, "repo": "beam-sdks-java-core-2.49.0", "des": "Specifies how to write elements to individual files in FileIO.", "code": "Interface FileIO.Sink<ElementT> {\n\tvoid flush(); // Flushes the buffered state (if any) before the channel is closed.\n\tvoid open(java.nio.channels.WritableByteChannel channel); // Initializes writing to the given channel.\n\tvoid write(ElementT element); // Appends a single element to the file.\n}"}
{"index": 9466, "repo": "curator-recipes-5.5.0", "des": "An implementation of the Distributed Priority Queue ZK recipe.", "code": "Class DistributedPriorityQueue<T> {\n\tvoid close();\n\tboolean flushPuts(long waitTime, TimeUnit timeUnit); // Wait until any pending puts are committed\n\tint getLastMessageCount(); // Return the most recent message count from the queue.\n\torg.apache.curator.framework.listen.Listenable<QueuePutListener<T>> getPutListenerContainer(); // Return the manager for put listeners\n\tvoid put(T item, int priority); // Add an item into the queue.\n\tboolean put(T item, int priority, int maxWait, TimeUnit unit); // Same as put(Object, int) but allows a maximum wait time if an upper bound was set via QueueBuilder.maxItems.\n\tvoid putMulti(MultiItem<T> items, int priority); // Add a set of items with the same priority into the queue.\n\tboolean putMulti(MultiItem<T> items, int priority, int maxWait, TimeUnit unit); // Same as putMulti(MultiItem, int) but allows a maximum wait time if an upper bound was set via QueueBuilder.maxItems.\n\tvoid setErrorMode(ErrorMode newErrorMode); // Used when the queue is created with a QueueBuilder.lockPath(String).\n\tvoid start(); // Start the queue.\n}"}
{"index": 8569, "repo": "commons-io-2.13.0", "des": "Enumerates standard line separators: CR, CRLF, LF.", "code": "Enum StandardLineSeparator {\n\tbyte[] getBytes(Charset charset); // Gets the bytes for this instance encoded using the given Charset.\n\tString getString(); // Gets the String value of this instance.\n\tstatic StandardLineSeparator valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic StandardLineSeparator[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17760, "repo": "spring-web-6.0.11", "des": "ClientHttpConnector implementation for the Apache HttpComponents HttpClient 5.x.", "code": "public class HttpComponentsClientHttpConnector extends Object implements ClientHttpConnector, Closeable {\n\tvoid close();\n\treactor.core.publisher.Mono<ClientHttpResponse> connect(HttpMethod method, URI uri, Function<? super ClientHttpRequest,reactor.core.publisher.Mono<Void>> requestCallback); // Connect to the origin server using the given HttpMethod and URI and apply the given requestCallback when the HTTP request of the underlying API can be initialized and written to.\n\tvoid setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory bufferFactory); // Set the buffer factory to use.\n}"}
{"index": 17382, "repo": "groovy-4.0.13", "des": "Represents a property (member variable, a getter and setter)", "code": "public class PropertyNode extends AnnotatedNode implements Variable {\n\tFieldNode getField();\n\tStatement getGetterBlock();\n\tString getGetterName();\n\tString getGetterNameOrDefault(); // If an explicit getterName has been set, return that, otherwise return the default name for the property.\n\tExpression getInitialExpression(); // expression used to initialize the variable or null of there is no initialization.\n\tint getModifiers();\n\tString getName(); // the name of the variable\n\tClassNode getOriginType(); // the type before wrapping primitives type of the variable\n\tStatement getSetterBlock();\n\tString getSetterName();\n\tString getSetterNameOrDefault();\n\tClassNode getType(); // the type of the variable\n\tboolean hasInitialExpression(); // returns true if there is an initialization expression\n\tboolean isClosureSharedVariable();\n\tboolean isDynamicTyped();\n\tboolean isInStaticContext(); // returns true if this variable is used in a static context.\n\tboolean isPrivate();\n\tboolean isPublic();\n\tboolean isStatic();\n\tvoid setClosureSharedVariable(boolean inClosure); // Deprecated. not used anymore, has no effect\n\tvoid setField(FieldNode fn);\n\tvoid setGetterBlock(Statement getterBlock);\n\tvoid setGetterName(String getterName);\n\tvoid setModifiers(int modifiers);\n\tvoid setSetterBlock(Statement setterBlock);\n\tvoid setSetterName(String setterName);\n\tvoid setType(ClassNode t);\n}"}
{"index": 10716, "repo": "spring-tx-6.0.11", "des": "Very simple implementation of TransactionAttributeSource which will always return the same TransactionAttribute for all methods fed to it.", "code": "public class MatchAlwaysTransactionAttributeSource extends Object implements TransactionAttributeSource, Serializable {\n\tboolean equals(Object other);\n\tTransactionAttribute getTransactionAttribute(Method method, Class<?> targetClass); // Return the transaction attribute for the given method, or null if the method is non-transactional.\n\tvoid setTransactionAttribute(TransactionAttribute transactionAttribute); // Allows a transaction attribute to be specified, using the String form, for example, \"PROPAGATION_REQUIRED\".\n}"}
{"index": 729, "repo": "ignite-core-2.15.0", "des": "Controls key to node affinity using consistent hash algorithm.", "code": "Class GridClientConsistentHash<N> {\n\tboolean addNode(N node, int replicas); // Adds a node to consistent hash algorithm.\n\tvoid addNodes(Collection<N> nodes, int replicas); // Adds nodes to consistent hash algorithm (if nodes are null or empty, then no-op).\n\tint count(); // Gets number of distinct nodes, excluding replicas, in consistent hash.\n\tstatic int hash(Object o); // Gets hash code for a given object.\n\tboolean isEmpty(); // Checks if consistent hash has nodes added to it.\n\tN node(Object key); // Gets node for a key.\n\tN node(Object key, Collection<N> inc); // Gets node for a given key.\n\tN node(Object key, @Nullable Collection<N> inc, @Nullable Collection<N> exc); // Gets node for a given key.\n\tN node(Object key, GridClientPredicate<N>... p); // Gets node for a given key.\n\tSet<N> nodes(); // Gets set of all distinct nodes in the consistent hash (in no particular order).\n\tN random(); // Picks a random node from consistent hash.\n\tboolean removeNode(N node); // Removes a node and all of its replicas.\n\tint size(); // Gets size of all nodes (including replicas) in consistent hash.\n}"}
{"index": 679, "repo": "ignite-core-2.15.0", "des": "This class provides implementation for Collision SPI based on FIFO queue.", "code": "Class FifoQueueCollisionSpi {\n\tint getCurrentActiveJobsNumber(); // Gets current number of jobs that are active, i.e.\n\tint getCurrentHeldJobsNumber(); // Gets number of currently 'held' jobs.\n\tint getCurrentRunningJobsNumber(); // Gets number of currently running (not 'held) jobs.\n\tint getCurrentWaitJobsNumber(); // Gets current number of jobs that wait for the execution.\n\tint getParallelJobsNumber(); // See setParallelJobsNumber(int)\n\tint getWaitingJobsNumber(); // See setWaitingJobsNumber(int)\n\tvoid onCollision(CollisionContext ctx); // This is a callback called: new grid job arrived executing job finished its execution topology changed periodically (on EventType.EVT_NODE_METRICS_UPDATED) When new job arrives it is added to the end of the wait list and this method is called.\n\tvoid setExternalCollisionListener(CollisionExternalListener lsnr); // Listener to be set for notification of external collision events (e.g. job stealing).\n\tFifoQueueCollisionSpi setName(String name); // Sets SPI name.\n\tFifoQueueCollisionSpi setParallelJobsNumber(int parallelJobsNum); // Sets number of jobs that can be executed in parallel.\n\tFifoQueueCollisionSpi setWaitingJobsNumber(int waitJobsNum); // Sets maximum number of jobs that are allowed to wait in waiting queue.\n\tvoid spiStart(String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 8457, "repo": "hadoop-aws-3.3.6", "des": "This class provides utility methods required for migrating S3A to AWS Java SDK V2.", "code": "Class V2Migration {\n\tstatic void v1CustomSignerUsed(); // Warns on use of custom signers.\n\tstatic void v1DelegationTokenCredentialProvidersUsed(); // Warns when v1 credential providers are used with delegation tokens.\n\tstatic void v1GetObjectMetadataCalled(); // Warns on use of getObjectMetadata.\n\tstatic void v1ProviderReferenced(String name); // Warns on an AWS V1 credential provider being referenced directly.\n\tstatic void v1S3ClientRequested(); // Warns on the v1 s3 client being requested.\n}"}
{"index": 12556, "repo": "spring-jdbc-6.0.11", "des": "Simple implementation of the standard JDBC DataSource interface, configuring a plain old JDBC Driver via bean properties, and returning a new Connection from every getConnection call.", "code": "public class SimpleDriverDataSource extends AbstractDriverBasedDataSource {\n\tprotected Connection getConnectionFromDriver(Properties props); // Obtain a Connection using the given properties.\n\tDriver getDriver(); // Return the JDBC Driver instance to use.\n\tvoid setDriver(Driver driver); // Specify the JDBC Driver instance to use.\n\tvoid setDriverClass(Class<? extends Driver> driverClass); // Specify the JDBC Driver implementation class to use.\n}"}
{"index": 2673, "repo": "mahout-core-14.1", "des": "Open hash map from long keys to long values.", "code": "Class OpenLongLongHashMap {\n\tlong adjustOrPutValue(long key, long newValue, long incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(long key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(long value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(LongProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(LongLongProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tlong get(long key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(long key);\n\tprotected int indexOfKey(long key);\n\tprotected int indexOfValue(long value);\n\tIterator<OpenLongLongHashMap.MapElement> iterator();\n\tvoid keys(LongArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(LongLongProcedure condition, LongArrayList keyList, LongArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(long key, long value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(long key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(LongArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 7907, "repo": "commons-jcs3-core-3.1", "des": "All auxiliary caches must have a factory that the cache configurator can use to create instances.", "code": "Interface AuxiliaryCacheFactory {\n\t<K,V> AuxiliaryCache<K,V> createCache(AuxiliaryCacheAttributes attr, ICompositeCacheManager cacheMgr, ICacheEventLogger cacheEventLogger, IElementSerializer elementSerializer); // Creates an auxiliary using the supplied attributes.\n\tdefault void dispose(); // Dispose of this factory, clean up shared resources\n\tString getName(); // Gets the name attribute of the AuxiliaryCacheFactory object\n\tdefault void initialize(); // Initialize this factory\n\tvoid setName(String s); // Sets the name attribute of the AuxiliaryCacheFactory object\n}"}
{"index": 12689, "repo": "spring-data-mongodb-4.1.2", "des": "Simple callback interface to allow customization of a FindIterable.", "code": "public interface CursorPreparer extends ReadPreferenceAware {\n\tdefault com.mongodb.ReadPreference getReadPreference();\n\tdefault com.mongodb.client.FindIterable<org.bson.Document> initiateFind(com.mongodb.client.MongoCollection<org.bson.Document> collection, Function<com.mongodb.client.MongoCollection<org.bson.Document>,com.mongodb.client.FindIterable<org.bson.Document>> find); // Apply query specific settings to MongoCollection and initate a find operation returning a FindIterable via the given find function.\n\tcom.mongodb.client.FindIterable<org.bson.Document> prepare(com.mongodb.client.FindIterable<org.bson.Document> iterable); // Prepare the given cursor (apply limits, skips and so on).\n}"}
{"index": 613, "repo": "ignite-core-2.15.0", "des": "Defines executable unit for ComputeTask.", "code": "Interface ComputeJob {\n\tvoid cancel(); // This method is called when system detects that completion of this job can no longer alter the overall outcome (for example, when parent task has already reduced the results).\n\tObject execute(); // Executes this job.\n}"}
{"index": 12391, "repo": "spring-data-couchbase-5.1.2", "des": "Default implementation of a MappingContext for Couchbase using BasicCouchbasePersistentEntity and BasicCouchbasePersistentProperty as primary abstractions.", "code": "public class CouchbaseMappingContext extends AbstractMappingContext<BasicCouchbasePersistentEntity<?>,CouchbasePersistentProperty> implements ApplicationContextAware {\n\tprotected Optional<BasicCouchbasePersistentEntity<?>> addPersistentEntity(TypeInformation<?> typeInformation); // override method from AbstractMappingContext as that method will not publishEvent() if it finds the entity has already been cached\n\tprotected <T> BasicCouchbasePersistentEntity<?> createPersistentEntity(TypeInformation<T> typeInformation); // Creates a concrete entity based out of the type information passed.\n\tprotected CouchbasePersistentProperty createPersistentProperty(Property property, BasicCouchbasePersistentEntity<?> owner, SimpleTypeHolder simpleTypeHolder); // Creates a concrete property based on the field information and entity.\n\tBasicCouchbasePersistentEntity<?> getPersistentEntity(TypeInformation<?> typeInformation); // override method from AbstractMappingContext as that method will not publishEvent() if it finds the entity has already been cached.\n\tboolean isAutoIndexCreation();\n\tvoid setApplicationContext(ApplicationContext applicationContext); // Sets (or overrides) the current application context.\n\tvoid setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher);\n\tvoid setAutoIndexCreation(boolean autoCreateIndexes);\n\tvoid setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy); // Configures the FieldNamingStrategy to be used to determine the field name if no manual mapping is applied.\n\tvoid setIndexCreator(CouchbasePersistentEntityIndexCreator indexCreator); // capture the indexCreator when it has been added as a listener. only publishEvent() if the indexCreator hasn't already seen the class.\n}"}
{"index": 15284, "repo": "spring-boot-3.1.1", "des": "A ServletContextInitializer to register Filters in a Servlet 3.0+ container.", "code": "public class FilterRegistrationBean<T extends jakarta.servlet.Filter> extends AbstractFilterRegistrationBean<T> {\n\tT getFilter(); // Return the Filter to be registered.\n\tvoid setFilter(T filter); // Set the filter to be registered.\n}"}
{"index": 12058, "repo": "jena-core-4.9.0", "des": "Wrapper round a Graph to implement the slightly modified Finder interface.", "code": "public class FGraph extends Object implements Finder {\n\tboolean contains(TriplePattern pattern); // Return true if the given pattern occurs somewhere in the find sequence.\n\tExtendedIterator<Triple> find(TriplePattern pattern); // Basic pattern lookup interface.\n\tExtendedIterator<Triple> findWithContinuation(TriplePattern pattern, Finder continuation); // Extended find interface used in situations where the implementator may or may not be able to answer the complete query.\n\tGraph getGraph(); // Returns the graph.\n}"}
{"index": 7959, "repo": "commons-jcs3-core-3.1", "des": "Utility class to encapsulate doing a piece of work, and caching the results in JCS.", "code": "Class JCSWorker<K,V> {\n\tString getRegion(); // Getter for the region of the JCS Cache.\n\tV getResult(K aKey, JCSWorkerHelper<V> aWorker); // Gets the cached result for this region/key OR does the work and caches the result, returning the result.\n\tV getResult(K aKey, String aGroup, JCSWorkerHelper<V> aWorker); // Gets the cached result for this region/key OR does the work and caches the result, returning the result.\n}"}
{"index": 8341, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of WebServiceConnection that is used for server-side XMPP access.", "code": "Class XmppReceiverConnection {\n\tvoid addResponseHeader(String name, String value); // Adds a response header with the given name and value.\n\tString getErrorMessage(); // Returns the error message.\n\tIterator<String> getRequestHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getRequestHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected InputStream getRequestInputStream(); // Returns the input stream to read the response from.\n\torg.jivesoftware.smack.packet.Message getRequestMessage(); // Returns the request message for this connection.\n\torg.jivesoftware.smack.packet.Message getResponseMessage(); // Returns the response message, if any, for this connection.\n\tprotected OutputStream getResponseOutputStream(); // Returns the output stream to write the request to.\n\tURI getUri(); // Returns the URI for this connection.\n\tboolean hasError(); // Indicates whether this connection has an error.\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n\tprotected void onSendBeforeWrite(WebServiceMessage message); // Called before the given message has been written to the TransportOutputStream.\n}"}
{"index": 17146, "repo": "spring-integration-core-6.1.2", "des": "An AbstractDispatcher implementation for distributing messages to dedicated threads according to the key determined by the provided function against the message to dispatch.", "code": "public class PartitionedDispatcher extends AbstractDispatcher {\n\tboolean dispatch(org.springframework.messaging.Message<?> message); // Dispatch the message.\n\tvoid setErrorHandler(org.springframework.util.ErrorHandler errorHandler); // Provide a ErrorHandler for wrapping partition Executor to the ErrorHandlingTaskExecutor.\n\tvoid setFailover(boolean failover); // Specify whether partition dispatchers should have failover enabled.\n\tvoid setLoadBalancingStrategy(LoadBalancingStrategy loadBalancingStrategy); // Provide a LoadBalancingStrategy for partition dispatchers.\n\tvoid setMessageHandlingTaskDecorator(MessageHandlingTaskDecorator messageHandlingTaskDecorator); // Set a MessageHandlingTaskDecorator to wrap a message handling task into some addition logic, e.g.\n\tvoid setThreadFactory(ThreadFactory threadFactory); // Set a ThreadFactory for executors per partitions.\n\tvoid shutdown(); // Shutdown this dispatcher on application close.\n}"}
{"index": 11623, "repo": "spring-websocket-6.0.11", "des": "Base class for a connection manager that automates the process of connecting to a WebSocket server with the Spring ApplicationContext lifecycle.", "code": "public abstract class ConnectionManagerSupport extends Object implements org.springframework.context.SmartLifecycle {\n\tprotected abstract void closeConnection(); // Subclasses implement this to close the connection.\n\tint getPhase(); // Return the phase in which this endpoint connection factory will be auto-connected and stopped.\n\tprotected URI getUri();\n\tboolean isAutoStartup(); // Return the value for the 'autoStartup' property.\n\tabstract boolean isConnected(); // Whether the connection is open/true or closed/false.\n\tboolean isRunning(); // Return whether this ConnectionManager has been started.\n\tprotected abstract void openConnection(); // Subclasses implement this to actually establish the connection.\n\tvoid setAutoStartup(boolean autoStartup); // Set whether to auto-connect to the remote endpoint after this connection manager has been initialized and the Spring context has been refreshed.\n\tvoid setPhase(int phase); // Specify the phase in which a connection should be established to the remote endpoint and subsequently closed.\n\tfinal void start(); // Start the WebSocket connection.\n\tprotected void startInternal();\n\tfinal void stop();\n\tfinal void stop(Runnable callback);\n\tprotected void stopInternal();\n}"}
{"index": 5635, "repo": "org.apache.karaf.main-2.4.4", "des": "A ReliableFile FileInputStream replacement class.", "code": "Class ReliableFileInputStream {\n\tint available(); // Override default available method.\n\tvoid close(); // Closes this input stream and releases any system resources associated with the stream.\n\tvoid mark(int readlimit); // Override default mark method.\n\tboolean markSupported(); // Override default markSupported method.\n\tint read(); // Override default FilterInputStream method.\n\tint read(byte[] b); // Override default FilterInputStream method.\n\tint read(byte[] b, int off, int len); // Override default FilterInputStream method.\n\tvoid reset(); // Override default reset method.\n\tlong skip(long n); // Override default skip method.\n}"}
{"index": 6911, "repo": "calcite-core-1.34.0", "des": "JavaToSqlTypeConversionRules defines mappings from common Java types to corresponding SQL types.", "code": "Class JavaToSqlTypeConversionRules {\n\tstatic JavaToSqlTypeConversionRules instance(); // Returns the singleton instance.\n\t@Nullable SqlTypeName lookup(Class javaClass); // Returns a corresponding SqlTypeName for a given Java class.\n}"}
{"index": 12759, "repo": "spring-data-mongodb-4.1.2", "des": "Allows direct interaction with the underlying LazyLoadingInterceptor.", "code": "public interface LazyLoadingProxy {\n\tdefault Object getSource(); // Returns the raw source object that defines the reference.\n\tObject getTarget(); // Initializes the proxy and returns the wrapped value.\n\tcom.mongodb.DBRef toDBRef(); // Returns the DBRef represented by this LazyLoadingProxy, may be null.\n}"}
{"index": 14164, "repo": "wicket-core-10.0.0-M1", "des": "A model that references a property by name on the current model of the component it is bound to.", "code": "public class ComponentPropertyModel<T> extends Object implements IComponentAssignedModel<T> {\n\tT getObject(); // Gets the model object.\n\tfinal void setObject(T object); // Sets the model object.\n\tIWrapModel<T> wrapOnAssignment(Component component); // This method is called when the component gets its model assigned.\n}"}
{"index": 10530, "repo": "groovy-all-4.0.13", "des": "Event handler registration: setup Registers closure that runs after the type checker finishes initialization finish Registers closure that runs after the type checker completes type checking beforeVisitClass Registers closure that runs before type checking a class afterVisitClass Registers closure that runs after having finished the visit of a type checked class beforeVisitMethod Registers closure that runs before type checking a method body afterVisitMethod Registers closure that runs after type checking a method body beforeMethodCall Registers closure that runs before the type checker starts type checking a method call afterMethodCall Registers closure that runs once the type checker has finished type checking a method call methodNotFound Registers closure that runs when it fails to find an appropriate method for a method call ambiguousMethods Registers closure that runs when the type checker cannot choose between several candidate methods onMethodSelection Registers closure that runs when it finds a method appropriate for a method call unresolvedVariable Registers closure that runs when the type checker finds an unresolved variable unresolvedProperty Registers closure that runs when the type checker cannot find a property on the receiver unresolvedAttribute Registers closure that runs when the type checker cannot find an attribute on the receiver incompatibleAssignment Registers closure that runs when the type checker thinks that the right-hand side of an assignment is incompatible with the left-hand side incompatibleReturnType Registers closure that runs when the type checker thinks that a return value is incompatibe with the return type Expression categorization: isAnnotationConstantExpression Determines if argument is an AnnotationConstantExpression isArgumentListExpression Determines if argument is an ArgumentListExpression isArrayExpression Determines if argument is an ArrayExpression isAttributeExpression Determines if argument is an AttributeExpression isBinaryExpression Determines if argument is a BinaryExpression isBitwiseNegationExpression Determines if argument is a BitwiseNegationExpression isBooleanExpression Determines if argument is a BooleanExpression isCastExpression Determines if argument is a CastExpression isClassExpression Determines if argument is a ClassExpression isClosureExpression Determines if argument is a ClosureExpression isConstantExpression Determines if argument is a ConstantExpression isConstructorCallExpression Determines if argument is a ConstructorCallExpression isDeclarationExpression Determines if argument is a DeclarationExpression isElvisOperatorExpression Determines if argument is an ElvisOperatorExpression isEmptyExpression Determines if argument is an EmptyExpression isFieldExpression Determines if argument is a FieldExpression isGStringExpression Determines if argument is a GStringExpression isLambdaExpression Determines if argument is a LambdaExpression isListExpression Determines if argument is a ListExpression isMapExpression Determines if argument is a MapExpression isMapEntryExpression Determines if argument is a MapEntryExpression isMethodCallExpression Determines if argument is a MethodCallExpression isMethodPointerExpression Determines if argument is a MethodPointerExpression isMethodReferenceExpression Determines if argument is a MethodReferenceExpression isNamedArgumentListExpression Determines if argument is a NamedArgumentListExpression isNotExpression Determines if argument is a NotExpression isPostfixExpression Determines if argument is a PostfixExpression isPrefixExpression Determines if argument is a PrefixExpression isPropertyExpression Determines if argument is a PropertyExpression isRangeExpression Determines if argument is a RangeExpression isSpreadExpression Determines if argument is a SpreadExpression isSpreadMapExpression Determines if argument is a SpreadMapExpression isStaticMethodCallExpression Determines if argument is a StaticMethodCallExpression isTernaryExpression Determines if argument is a TernaryExpression isTupleExpression Determines if argument is a TupleExpression isUnaryMinusExpression Determines if argument is a UnaryMinusExpression isUnaryPlusExpression Determines if argument is a UnaryPlusExpression isVariableExpression Determines if argument is a VariableExpression General utility: Delegates to AbstractTypeCheckingExtension Imports static members of ClassHelper Imports static members of StaticTypeCheckingSupport", "code": "public abstract static class GroovyTypeCheckingExtensionSupport.TypeCheckingDSL extends Script {\n\tObject getProperty(String property); // Retrieves a property value.\n\tObject invokeMethod(String name, Object args); // Invoke a method (or closure in the binding) defined.\n\tvoid setProperty(String property, Object newValue); // Sets the given property to the new value.\n}"}
{"index": 4380, "repo": "beam-sdks-java-core-2.49.0", "des": "A LogicalType representing a fixed-length byte array.", "code": "Class FixedBytes {\n\tint getLength();\n\t@Nullable java.lang.String getName();\n\tstatic FixedBytes of(int byteArrayLength); // Return an instance of FixedBytes with specified byte array length.\n\tstatic FixedBytes of(@Nullable java.lang.String name, int byteArrayLength); // Return an instance of FixedBytes with specified byte array length.\n\tbyte[] toBaseType(byte[] input); // Convert the input type to the type Java type used by the base Schema.FieldType.\n\tbyte[] toInputType(byte[] base); // Convert the Java type used by the base Schema.FieldType to the input type.\n}"}
{"index": 1679, "repo": "samza-api-1.8.0", "des": "A MetricsValidator reads the job's metrics values by using the MetricsAccessor, and validate them.", "code": "Interface MetricsValidator {\n\tvoid complete(); // Complete validation.\n\tvoid init(Config config); // Initialize with config.\n\tvoid validate(MetricsAccessor accessor); // Validate the metrics values of a job\n}"}
{"index": 12049, "repo": "jena-core-4.9.0", "des": "Extended callbacks from a reader to an RDF application.", "code": "public interface ExtendedHandler {\n\tboolean discardNodesWithNodeID(); // This method is used to modify the behaviour of ARP concerning its reporting of bnode scope endBNodeScope(org.apache.jena.rdfxml.xmlinput0.AResource).\n\tvoid endBNodeScope(AResource bnode); // After this call, no more triples will be reported which use bnode.\n\tvoid endRDF(); // Called when the </rdf:RDF> tag is seen.\n\tvoid startRDF(); // Called when the <rdf:RDF> tag is seen.\n}"}
{"index": 11842, "repo": "spring-kafka-3.0.9", "des": "Delegates to an InvocableHandlerMethod based on the message payload type.", "code": "public class DelegatingInvocableHandler extends Object {\n\tprotected org.springframework.messaging.handler.invocation.InvocableHandlerMethod findHandlerForPayload(Class<? extends Object> payloadClass);\n\tObject getBean(); // Return the bean for this handler.\n\tprotected org.springframework.messaging.handler.invocation.InvocableHandlerMethod getHandlerForPayload(Class<? extends Object> payloadClass); // Determine the InvocableHandlerMethod for the provided type.\n\tString getMethodNameFor(Object payload); // Return a string representation of the method that will be invoked for this payload.\n\tboolean hasDefaultHandler();\n\tObject invoke(org.springframework.messaging.Message<?> message, Object... providedArgs); // Invoke the method with the given message.\n\tprotected boolean matchHandlerMethod(Class<? extends Object> payloadClass, org.springframework.messaging.handler.invocation.InvocableHandlerMethod handler);\n}"}
{"index": 14826, "repo": "spring-data-commons-3.1.2", "des": "Enumeration of supported reactive libraries.", "code": "public static enum ReactiveWrappers.ReactiveLibrary extends Enum<ReactiveWrappers.ReactiveLibrary> {\n\tstatic ReactiveWrappers.ReactiveLibrary valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ReactiveWrappers.ReactiveLibrary[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 4704, "repo": "commons-geometry-core-1.0", "des": "Enumeration representing the location of a split object with respect to its splitting hyperplane.", "code": "Enum SplitLocation {\n\tstatic SplitLocation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SplitLocation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 17873, "repo": "spring-web-6.0.11", "des": "Resolves Map method arguments annotated with an @RequestParam where the annotation does not specify a request parameter name.", "code": "public class RequestParamMapMethodArgumentResolver extends Object implements HandlerMethodArgumentResolver {\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory); // Resolves a method parameter into an argument value from a given request.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 16723, "repo": "spring-jms-6.0.11", "des": "Helper class for managing a JMS ConnectionFactory, in particular for obtaining transactional JMS resources for a given ConnectionFactory.", "code": "public abstract class ConnectionFactoryUtils extends Object {\n\tstatic Session doGetTransactionalSession(ConnectionFactory connectionFactory, ConnectionFactoryUtils.ResourceFactory resourceFactory); // Obtain a JMS Session that is synchronized with the current transaction, if any.\n\tstatic Session doGetTransactionalSession(ConnectionFactory connectionFactory, ConnectionFactoryUtils.ResourceFactory resourceFactory, boolean startConnection); // Obtain a JMS Session that is synchronized with the current transaction, if any.\n\tstatic Session getTargetSession(Session session); // Return the innermost target Session of the given Session.\n\tstatic QueueSession getTransactionalQueueSession(QueueConnectionFactory cf, QueueConnection existingCon, boolean synchedLocalTransactionAllowed); // Obtain a JMS QueueSession that is synchronized with the current transaction, if any.\n\tstatic Session getTransactionalSession(ConnectionFactory cf, Connection existingCon, boolean synchedLocalTransactionAllowed); // Obtain a JMS Session that is synchronized with the current transaction, if any.\n\tstatic TopicSession getTransactionalTopicSession(TopicConnectionFactory cf, TopicConnection existingCon, boolean synchedLocalTransactionAllowed); // Obtain a JMS TopicSession that is synchronized with the current transaction, if any.\n\tstatic boolean isSessionTransactional(Session session, ConnectionFactory cf); // Determine whether the given JMS Session is transactional, that is, bound to the current thread by Spring's transaction facilities.\n\tstatic void releaseConnection(Connection con, ConnectionFactory cf, boolean started); // Release the given Connection, stopping it (if necessary) and eventually closing it.\n}"}
{"index": 860, "repo": "ignite-core-2.15.0", "des": "Timer to use mostly for debugging purposes.", "code": "Class GridTimer {\n\tlong duration();\n\tlong endTime();\n\tboolean maxedOut();\n\tString name();\n\tlong startTime();\n\tlong stop(); // Stops this timer.\n\tboolean stopx(); // Stops this timer.\n\tlong threshold();\n}"}
{"index": 12997, "repo": "spring-integration-file-6.1.2", "des": "Filter that supports ant style path expressions, which are less powerful but more readable than regular expressions.", "code": "public class SimplePatternFileListFilter extends AbstractSimplePatternFileListFilter<File> {\n\tprotected String getFilename(File file); // Subclasses must implement this method to extract the file's name.\n\tprotected boolean isDirectory(File file); // Subclasses must implement this method to indicate whether the file is a directory or not.\n}"}
{"index": 13417, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required to establish a connection to an SQL service using JDBC.", "code": "public interface JdbcConnectionDetails extends ConnectionDetails {\n\tdefault String getDriverClassName(); // The name of the JDBC driver class.\n\tString getJdbcUrl(); // JDBC url for the database.\n\tString getPassword(); // Password for the database.\n\tString getUsername(); // Username for the database.\n\tdefault String getXaDataSourceClassName(); // Returns the name of the XA DataSource class.\n}"}
{"index": 8616, "repo": "avro-1.11.2", "des": "Stores in a file a sequence of data conforming to a schema.", "code": "Class DataFileWriter<D> {\n\tvoid append(D datum); // Append a datum to the file.\n\tvoid appendAllFrom(DataFileStream<D> otherFile, boolean recompress); // Appends data from another file.\n\tvoid appendEncoded(ByteBuffer datum); // Expert: Append a pre-encoded datum to the file.\n\tDataFileWriter<D> appendTo(File file); // Open a writer appending to an existing file.\n\tDataFileWriter<D> appendTo(SeekableInput in, OutputStream out); // Open a writer appending to an existing file.\n\tvoid close(); // Flush and close the file.\n\tDataFileWriter<D> create(Schema schema, File file); // Open a new file for data matching a schema with a random sync.\n\tDataFileWriter<D> create(Schema schema, OutputStream outs); // Open a new file for data matching a schema with a random sync.\n\tDataFileWriter<D> create(Schema schema, OutputStream outs, byte[] sync); // Open a new file for data matching a schema with an explicit sync.\n\tvoid flush(); // Calls sync() and then flushes the current state of the file.\n\tvoid fSync(); // If this writer was instantiated using a File or using an Syncable instance, this method flushes all buffers for this writer to disk.\n\tboolean isFlushOnEveryBlock();\n\tstatic boolean isReservedMeta(String key);\n\tDataFileWriter<D> setCodec(CodecFactory c); // Configures this writer to use the given codec.\n\tvoid setFlushOnEveryBlock(boolean flushOnEveryBlock); // Set whether this writer should flush the block to the stream every time a sync marker is written.\n\tDataFileWriter<D> setMeta(String key, byte[] value); // Set a metadata property.\n\tDataFileWriter<D> setMeta(String key, long value); // Set a metadata property.\n\tDataFileWriter<D> setMeta(String key, String value); // Set a metadata property.\n\tDataFileWriter<D> setSyncInterval(int syncInterval); // Set the synchronization interval for this file, in bytes.\n\tlong sync(); // Return the current position as a value that may be passed to DataFileReader.seek(long).\n}"}
{"index": 4950, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that returns true if all the predicates return true.", "code": "Class AllPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning true if all predicates return true.\n\tstatic Predicate getInstance(Collection predicates); // Factory to create the predicate.\n\tstatic Predicate getInstance(Predicate[] predicates); // Factory to create the predicate.\n\tPredicate[] getPredicates(); // Gets the predicates, do not modify the array.\n}"}
{"index": 3019, "repo": "tink-1.10.0", "des": "Interface for authenticating and verifying JWT with JWS MAC, as described in RFC 7519 and RFC 7515.", "code": "Interface JwtMac {\n\tString computeMacAndEncode(RawJwt token); // Computes a MAC, and encodes the JWT and the MAC in the JWS compact serialization format.\n\tVerifiedJwt verifyMacAndDecode(String compact, JwtValidator validator); // Decodes and verifies a JWT in the JWS compact serialization format.\n}"}
{"index": 7351, "repo": "calcite-core-1.34.0", "des": "A SqlDialect implementation for the Vertica database.", "code": "Class VerticaSqlDialect {\n\tboolean supportsFunction(SqlOperator operator, RelDataType type, List<RelDataType> paramTypes); // Returns whether this dialect supports a given function or operator.\n\tboolean supportsNestedAggregations(); // Returns whether the dialect supports nested aggregations, for instance SELECT SUM(SUM(1)) .\n}"}
{"index": 6815, "repo": "calcite-core-1.34.0", "des": "This class allows multiple existing SqlOperandTypeChecker rules to be combined into one rule.", "code": "Class CompositeOperandTypeChecker {\n\tboolean checkOperandTypes(SqlCallBinding callBinding, boolean throwOnFailure); // Checks the types of all operands to an operator call.\n\tString getAllowedSignatures(SqlOperator op, String opName); // Returns a string describing the allowed formal signatures of a call, e.g.\n\tSqlOperandCountRange getOperandCountRange(); // Returns the range of operand counts allowed in a call.\n\tcom.google.common.collect.ImmutableList<? extends SqlOperandTypeChecker> getRules();\n\tboolean isOptional(int i); // Returns whether the ith operand is optional.\n\t@Nullable SqlOperandTypeInference typeInference(); // Converts this type checker to a type inference; returns null if not possible.\n\tCompositeOperandTypeChecker withGenerator(BiFunction<SqlOperator,String,String> signatureGenerator); // Returns a copy of this checker with the given signature generator.\n}"}
{"index": 4902, "repo": "hadoop-common-3.3.4", "des": "An InputStream covering a range of compressed data.", "code": "Class SplitCompressionInputStream {\n\tlong getAdjustedEnd(); // After calling createInputStream, the values of start or end might change.\n\tlong getAdjustedStart(); // After calling createInputStream, the values of start or end might change.\n\tprotected void setEnd(long end);\n\tprotected void setStart(long start);\n}"}
{"index": 5791, "repo": "hive-service-4.0.0-alpha-2", "des": "A HiveServer2 thread used to construct new server threads.", "code": "Class ThreadWithGarbageCleanup {\n\tvoid cacheThreadLocalRawStore(); // Cache the ThreadLocal RawStore object.\n\tvoid finalize(); // Add any Thread specific garbage cleanup code here.\n}"}
{"index": 2, "repo": "camel-aws-3.0.0-M1", "des": "The aws-s3 component is used for storing and retrieving objecct from Amazon S3 Storage Service.", "code": "Class S3Endpoint {\n\torg.apache.camel.Consumer createConsumer(org.apache.camel.Processor processor);\n\torg.apache.camel.Exchange createExchange(org.apache.camel.ExchangePattern pattern, com.amazonaws.services.s3.model.S3Object s3Object);\n\torg.apache.camel.Exchange createExchange(com.amazonaws.services.s3.model.S3Object s3Object);\n\torg.apache.camel.Producer createProducer();\n\tvoid doStart();\n\tvoid doStop();\n\tS3Configuration getConfiguration();\n\tint getMaxConnections();\n\tint getMaxMessagesPerPoll();\n\tcom.amazonaws.services.s3.AmazonS3 getS3Client();\n\tboolean isSingleton();\n\tvoid setConfiguration(S3Configuration configuration);\n\tvoid setMaxConnections(int maxConnections); // Set the maxConnections parameter in the S3 client configuration\n\tvoid setMaxMessagesPerPoll(int maxMessagesPerPoll); // Gets the maximum number of messages as a limit to poll at each polling.\n\tvoid setS3Client(com.amazonaws.services.s3.AmazonS3 s3Client);\n}"}
{"index": 10079, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "A simple application master implementation which will allocate and launch a number of containers, monitor container statuses and finally exit the application by sending corresponding message back to resource manager.", "code": "Class StaticAppmaster {\n\tprotected void doStart(); // Subclasses may implement this method with the start behavior.\n\tprotected void onInit(); // Global application master instance specific ApplicationAttemptId is build during this init method.\n\tvoid submitApplication(); // Submit and run application.\n}"}
{"index": 4658, "repo": "commons-vfs2-2.9.0", "des": "A provider for accessing files over SFTP.", "code": "Class SftpFileProvider {\n\tprotected FileSystem doCreateFileSystem(FileName name, FileSystemOptions fileSystemOptions); // Creates a FileSystem.\n\tCollection<Capability> getCapabilities(); // Gets the file system capabilities.\n\tFileSystemConfigBuilder getConfigBuilder(); // Returns the FileSystemConfigBuidler.\n}"}
{"index": 4206, "repo": "jackson-core-2.15.2", "des": "Basic implementation that reads data from given InputStream and buffers it as necessary.", "code": "Class InputAccessor.Std {\n\tDataFormatMatcher createMatcher(JsonFactory match, MatchStrength matchStrength);\n\tboolean hasMoreBytes(); // Method to call to check if more input is available.\n\tbyte nextByte(); // Returns next byte available, if any; if no more bytes are available, will throw EOFException.\n\tvoid reset(); // Method that can be called to reset accessor to read from beginning of input.\n}"}
{"index": 1445, "repo": "pdfbox-3.0.0-beta1", "des": "This represents an FDF page that is part of the FDF document.", "code": "Class FDFPage {\n\tCOSDictionary getCOSObject(); // Convert this standard java object to a COS object.\n\tFDFPageInfo getPageInfo(); // This will get the FDF page info object.\n\tList<FDFTemplate> getTemplates(); // This will get a list of FDFTemplage objects that describe the named pages that serve as templates.\n\tvoid setPageInfo(FDFPageInfo info); // This will set the page info.\n\tvoid setTemplates(List<FDFTemplate> templates); // A list of FDFTemplate objects.\n}"}
{"index": 8274, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.", "code": "Class SoapActionAnnotationMethodEndpointMapping {\n\tprotected EndpointInvocationChain createEndpointInvocationChain(MessageContext messageContext, Object endpoint, EndpointInterceptor[] interceptors); // Creates a new SoapEndpointInvocationChain based on the given endpoint, and the set interceptors, and actors/roles.\n\tprotected String getLookupKeyForMessage(MessageContext messageContext); // Returns the endpoint keys for the given message context.\n\tprotected String getLookupKeyForMethod(Method method); // Returns the endpoint key for the given method.\n\tprotected List<String> getLookupKeysForMethod(Method method); // Returns the endpoint keys for the given method.\n\tvoid setActorOrRole(String actorOrRole); // Sets a single SOAP actor/actorOrRole to apply to all endpoints mapped by the delegate endpoint mapping.\n\tvoid setActorsOrRoles(String[] actorsOrRoles); // Sets the array of SOAP actors/actorsOrRoles to apply to all endpoints mapped by the delegate endpoint mapping.\n\tvoid setUltimateReceiver(boolean ultimateReceiver); // Indicates whether this the endpoint fulfills the SOAP 1.2 Ultimate Receiver role.\n}"}
{"index": 16911, "repo": "spring-integration-ip-6.1.2", "des": "Base class for inbound TCP/UDP Channel Adapters.", "code": "public abstract class AbstractInternetProtocolReceivingChannelAdapter extends org.springframework.integration.endpoint.MessageProducerSupport implements org.springframework.context.ApplicationEventPublisherAware, org.springframework.scheduling.SchedulingAwareRunnable, CommonSocketOptions {\n\tprotected void checkTaskExecutor(String threadName); // Creates a default task executor if none was supplied.\n\tprotected void doStart();\n\tprotected void doStop();\n\tprotected org.springframework.context.ApplicationEventPublisher getApplicationEventPublisher();\n\tString getLocalAddress();\n\tint getPort();\n\tint getReceiveBufferSize();\n\tint getSoReceiveBufferSize();\n\tint getSoTimeout();\n\tExecutor getTaskExecutor();\n\tboolean isListening();\n\tvoid setApplicationEventPublisher(org.springframework.context.ApplicationEventPublisher applicationEventPublisher);\n\tvoid setListening(boolean listening);\n\tvoid setLocalAddress(String localAddress); // On a multi-homed system, specifies the ip address of the network interface used to communicate.\n\tvoid setPoolSize(int poolSize);\n\tvoid setReceiveBufferSize(int receiveBufferSize);\n\tvoid setSoReceiveBufferSize(int soReceiveBufferSize);\n\tvoid setSoTimeout(int soTimeout);\n\tvoid setTaskExecutor(Executor taskExecutor);\n}"}
{"index": 12386, "repo": "spring-data-couchbase-5.1.2", "des": "Marker interface for the converter, identifying the types to and from that can be converted.", "code": "public interface CouchbaseConverter extends EntityConverter<CouchbasePersistentEntity<?>,CouchbasePersistentProperty,Object,CouchbaseDocument>, CouchbaseWriter<Object,CouchbaseDocument>, EntityReader<Object,CouchbaseDocument> {\n\tObject convertForWriteIfNeeded(Object value); // Convert the value if necessary to the class that would actually be stored, or leave it as is if no conversion needed.\n\tObject convertForWriteIfNeeded(CouchbasePersistentProperty source, ConvertingPropertyAccessor<Object> accessor, boolean processValueConverter); // Convert the value if necessary to the class that would actually be stored, or leave it as is if no conversion needed.\n\tCustomConversions getConversions(); // return the conversions\n\tAlias getTypeAlias(TypeInformation<?> info);\n\tString getTypeKey();\n\tClass<?> getWriteClassFor(Class<?> clazz); // Return the Class that would actually be stored for a given Class.\n}"}
{"index": 15162, "repo": "spring-data-elasticsearch-5.1.2", "des": "This interfaces defines the operations to access the Elasticsearch script API.", "code": "public interface ReactiveScriptOperations {\n\treactor.core.publisher.Mono<Boolean> deleteScript(String name); // Deletes the script with the given name\n\treactor.core.publisher.Mono<Script> getScript(String name); // Gest the script with the given name.\n\treactor.core.publisher.Mono<Boolean> putScript(Script script); // Stores the given script in the Elasticsearch cluster.\n}"}
{"index": 14177, "repo": "wicket-core-10.0.0-M1", "des": "This is a ResourceReference to handle context-relative resources such as js, css and picture files placed in a folder on the context root (ex: '/css/coolTheme.css').", "code": "public class ContextRelativeResourceReference extends ResourceReference {\n\tprotected ContextRelativeResource buildContextRelativeResource(String name, String minPostfix); // Build the context-relative resource for this resource reference.\n\tprotected boolean canBeMinified(); // Says if the referenced resource can be minified.\n\tString getMinPostfix(); // Gets the minified postfix we use for this resource.\n\tfinal ContextRelativeResource getResource(); // Returns the resource.\n\tboolean isMinifyIt(); // Returns the flag that says if the resource can be minified (true) or not (false).\n}"}
{"index": 3332, "repo": "spring-social-core-1.1.6.RELEASE", "des": "The unique business key for a Connection instance.", "code": "Class ConnectionKey {\n\tboolean equals(java.lang.Object o);\n\tjava.lang.String getProviderId(); // The id of the provider as it is registered in the system.\n\tjava.lang.String getProviderUserId(); // The id of the external provider user representing the remote end of the connection.\n}"}
{"index": 15163, "repo": "spring-data-elasticsearch-5.1.2", "des": "value class combining script information.", "code": "public record ScriptData(ScriptType type, String language, String script, String scriptName, Map<String,Object> params) extends Record {\n\tfinal boolean equals(Object o); // Indicates whether some other object is \"equal to\" this one.\n\tString language(); // Returns the value of the language record component.\n\tMap<String,Object> params(); // Returns the value of the params record component.\n\tString script(); // Returns the value of the script record component.\n\tString scriptName(); // Returns the value of the scriptName record component.\n\tScriptType type(); // Returns the value of the type record component.\n}"}
{"index": 444, "repo": "phoenix-core-5.1.3", "des": "Class servers as an adapter between the in-memory LRU cache and the Spill data structures.", "code": "Class SpillManager {\n\tvoid close(); // Close the attached spillMap\n\tAggregator[] loadEntry(org.apache.hadoop.hbase.io.ImmutableBytesWritable key); // Function that loads a spilled key/value groupby tuple from one of the spill partitions into the LRU cache.\n\torg.apache.phoenix.cache.aggcache.SpillManager.SpillMapIterator newDataIterator(); // Function returns an iterator over all spilled Tuples\n\tvoid spill(org.apache.hadoop.hbase.io.ImmutableBytesWritable key, Aggregator[] value); // Function that spills a key/value groupby tuple into a partition Spilling always triggers a serialize call\n\t<K extends org.apache.hadoop.hbase.io.ImmutableBytesWritable>SpillManager.CacheEntry<K> toCacheEntry(byte[] bytes); // Helper function to deserialize a byte array into a CacheEntry\n}"}
{"index": 18435, "repo": "opencms-core-15.0", "des": "A simple bean class which represents a validation request for a single form field.", "code": "Class CmsValidationQuery {\n\tjava.lang.String getConfig(); // Gets the configuration string for the server-side validator.\n\tjava.lang.String getValidatorId(); // Gets the class name of the server-side validator.\n\tjava.lang.String getValue(); // Returns the value to validate.\n}"}
{"index": 8222, "repo": "spring-ws-3.0.10.RELEASE", "des": "WebServiceMessageSender implementation that uses Mail MimeMessages.", "code": "Class MailMessageSender {\n\tvoid afterPropertiesSet();\n\tWebServiceConnection createConnection(URI uri); // Create a new WebServiceConnection to the specified URI.\n\tvoid setFrom(String from); // Sets the from address to use when sending request messages.\n\tvoid setJavaMailProperties(Properties javaMailProperties); // Set JavaMail properties for the Session.\n\tvoid setReceiveSleepTime(long receiveSleepTime); // Set the sleep time to use for receive calls, in milliseconds.\n\tvoid setSession(javax.mail.Session session); // Set the JavaMail Session, possibly pulled from JNDI.\n\tvoid setStoreUri(String storeUri); // Sets the JavaMail Store URI to be used for retrieving response messages.\n\tvoid setTransportUri(String transportUri); // Sets the JavaMail Transport URI to be used for sending response messages.\n\tboolean supports(URI uri); // Does this WebServiceMessageSender support the supplied URI?\n}"}
{"index": 15627, "repo": "spring-security-core-6.1.2", "des": "A MethodInterceptor which filters a returnedObject from the MethodInvocation by evaluating an expression from the PostFilter annotation.", "code": "public final class PostFilterAuthorizationMethodInterceptor extends Object implements org.springframework.core.Ordered, org.aopalliance.intercept.MethodInterceptor, org.springframework.aop.PointcutAdvisor, org.springframework.aop.framework.AopInfrastructureBean {\n\torg.aopalliance.aop.Advice getAdvice();\n\tint getOrder();\n\torg.springframework.aop.Pointcut getPointcut();\n\tObject invoke(org.aopalliance.intercept.MethodInvocation mi); // Filter a returnedObject using the PostFilter annotation that the MethodInvocation specifies.\n\tboolean isPerInstance();\n\tvoid setExpressionHandler(MethodSecurityExpressionHandler expressionHandler); // Use this MethodSecurityExpressionHandler.\n\tvoid setOrder(int order);\n\tvoid setSecurityContextHolderStrategy(SecurityContextHolderStrategy strategy); // Sets the SecurityContextHolderStrategy to use.\n}"}
{"index": 12198, "repo": "jena-core-4.9.0", "des": "A path is an application of List containing only Statement objects, and in which for all adjacent elements Si-1 and Si, where i > 0, it is true that:", "code": "public static class OntTools.Path extends ArrayList<Statement> {\n\tOntTools.Path append(Statement s); // Answer a new Path whose elements are this Path with s added at the end\n\tStatement getStatement(int i);\n\tRDFNode getTerminal(); // Answer the RDF node at the end of the path, if defined, or null\n\tResource getTerminalResource(); // Answer the resource at the end of the path, if defined, or null\n\tboolean hasTerminus(RDFNode n); // Answer true if the last link on the path has object equal to n\n}"}
{"index": 7368, "repo": "mahout-math-0.13.0", "des": "Implements a vector with all the same values.", "code": "Class ConstantVector {\n\tdouble getIteratorAdvanceCost(); // Gets an estimate of the cost (in number of operations) it takes to advance an iterator through the nonzero elements of this vector.\n\tdouble getLookupCost(); // Gets an estimate of the cost (in number of operations) it takes to lookup a random element in this vector.\n\tint getNumNondefaultElements(); // Return the number of values in the recipient\n\tdouble getQuick(int index); // Return the value at the given index, without checking bounds\n\tboolean isAddConstantTime(); // Return true iff adding a new (nonzero) element takes constant time for this vector.\n\tboolean isDense(); // true if this implementation should be considered dense -- that it explicitly represents every value\n\tboolean isSequentialAccess(); // true if this implementation should be considered to be iterable in index order in an efficient way.\n\tIterator<Vector.Element> iterateNonZero(); // Iterates over all non-zero elements.\n\tIterator<Vector.Element> iterator(); // Iterates over all elements\n\tVector like(); // Return an empty vector of the same underlying class as the receiver\n\tVector like(int cardinality); // Return a new empty vector of the same underlying class as the receiver with given cardinality\n\tprotected Matrix matrixLike(int rows, int columns); // Subclasses must override to return an appropriately sparse or dense result\n\tvoid mergeUpdates(OrderedIntDoubleMapping updates); // Used internally by assign() to update multiple indices and values at once.\n\tvoid setQuick(int index, double value); // Set the value at the given index, without checking bounds\n}"}
{"index": 16874, "repo": "spring-amqp-3.0.6", "des": "A post processor that uses a ZipInputStream to decompress the message body.", "code": "public class UnzipPostProcessor extends AbstractDecompressingPostProcessor {\n\tprotected InputStream getDecompressorStream(InputStream zipped); // Get the stream.\n\tprotected String getEncoding(); // Get the encoding.\n}"}
{"index": 1080, "repo": "ignite-core-2.15.0", "des": "Group of joined tables whose affinity function could be \"merged\".", "code": "Class PartitionJoinGroup {\n\tPartitionJoinGroup addTable(PartitionTable tbl); // Add table to the group.\n\tPartitionTableAffinityDescriptor affinityDescriptor();\n\tboolean removeTable(PartitionTable tbl); // Remove table from the group.\n\tCollection<PartitionTable> tables();\n}"}
{"index": 14816, "repo": "spring-data-commons-3.1.2", "des": "Interface to be implemented by objects that can manage a number of EntityCallback objects and invoke these with a specific entity.", "code": "public interface ReactiveEntityCallbacks {\n\tvoid addEntityCallback(EntityCallback<?> callback); // Add the given callback using generic type argument detection for identification of supported types.\n\t<T> reactor.core.publisher.Mono<T> callback(Class<? extends EntityCallback> callbackType, T entity, Object... args); // On subscribe invoke the matching entity callbacks with given arguments.\n\tstatic ReactiveEntityCallbacks create(); // Obtain a new ReactiveEntityCallbacks instance.\n\tstatic ReactiveEntityCallbacks create(BeanFactory beanFactory); // Obtain a new ReactiveEntityCallbacks instance.\n\tstatic ReactiveEntityCallbacks create(EntityCallback<?>... callbacks); // Create a new ReactiveEntityCallbacks instance with given callbacks.\n}"}
{"index": 6795, "repo": "calcite-core-1.34.0", "des": "Metadata about the degree of parallelism of a relational expression, and how its operators are assigned to processes with independent resource pools.", "code": "Interface BuiltInMetadata.Parallelism {\n\tBoolean isPhaseTransition(); // Returns whether each physical operator implementing this relational expression belongs to a different process than its inputs.\n\tInteger splitCount(); // Returns the number of distinct splits of the data.\n}"}
{"index": 2376, "repo": "commons-geometry-euclidean-1.0", "des": "Interface representing a single face in a mesh.", "code": "Interface Mesh.Face {\n\tboolean definesPolygon(); // Return true if the vertices for this face define a convex polygon with non-zero size.\n\tint getIndex(); // Get the 0-based index of the face in the mesh.\n\tConvexPolygon3D getPolygon(); // Get the 3D polygon defined by this face.\n\tint[] getVertexIndices(); // Get an array containing the 0-based indices of the vertices defining this face.\n\tList<Vector3D> getVertices(); // Get the vertices for the face.\n}"}
{"index": 17831, "repo": "spring-web-6.0.11", "des": "Provides additional methods for dealing with multipart content within a servlet request, allowing to access uploaded files.", "code": "public interface MultipartHttpServletRequest extends HttpServletRequest, MultipartRequest {\n\tHttpHeaders getMultipartHeaders(String paramOrFileName); // Return the headers for the specified part of the multipart request.\n\tHttpHeaders getRequestHeaders(); // Return this request's headers as a convenient HttpHeaders instance.\n\tHttpMethod getRequestMethod(); // Return this request's method as a convenient HttpMethod instance.\n}"}
{"index": 7478, "repo": "nifi-client-dto-1.22.0", "des": "A serialized representation of this class can be placed in the entity body of a request or response to or from the API.", "code": "Class LabelEntity {\n\tLabelDTO getComponent(); // The LabelDTO that is being serialized.\n\tDimensionsDTO getDimensions(); // The dimensions of this label.\n\tLong getzIndex();\n\tvoid setComponent(LabelDTO component);\n\tvoid setDimensions(DimensionsDTO dimensions);\n\tvoid setzIndex(Long zIndex);\n}"}
{"index": 16604, "repo": "spring-beans-6.0.11", "des": "The central interface of Spring's low-level JavaBeans infrastructure.", "code": "public interface BeanWrapper extends ConfigurablePropertyAccessor {\n\tint getAutoGrowCollectionLimit(); // Return the limit for array and collection auto-growing.\n\tPropertyDescriptor getPropertyDescriptor(String propertyName); // Obtain the property descriptor for a specific property of the wrapped object.\n\tPropertyDescriptor[] getPropertyDescriptors(); // Obtain the PropertyDescriptors for the wrapped object (as determined by standard JavaBeans introspection).\n\tClass<?> getWrappedClass(); // Return the type of the wrapped bean instance.\n\tObject getWrappedInstance(); // Return the bean instance wrapped by this object.\n\tvoid setAutoGrowCollectionLimit(int autoGrowCollectionLimit); // Specify a limit for array and collection auto-growing.\n}"}
{"index": 6577, "repo": "exoplayer-core-2.9.6", "des": "Base class for multi segment stream downloaders.", "code": "Class SegmentDownloader<M extends FilterableManifest<M>> {\n\tvoid cancel(); // Interrupts any current download operation and prevents future operations from running.\n\tvoid download(); // Downloads the selected streams in the media.\n\tlong getDownloadedBytes(); // Returns the total number of downloaded bytes.\n\tfloat getDownloadPercentage(); // Returns the estimated download percentage, or C.PERCENTAGE_UNSET if no estimate is available.\n\tprotected abstract M getManifest(DataSource dataSource, android.net.Uri uri); // Loads and parses the manifest.\n\tprotected abstract java.util.List<SegmentDownloader.Segment> getSegments(DataSource dataSource, M manifest, boolean allowIncompleteList); // Returns a list of all downloadable SegmentDownloader.Segments for a given manifest.\n\tvoid remove(); // Removes the media.\n}"}
{"index": 14549, "repo": "spring-security-web-6.1.2", "des": "Implementation of NullRememberMeServices that does nothing.", "code": "public class NullRememberMeServices extends Object implements RememberMeServices {\n\torg.springframework.security.core.Authentication autoLogin(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // This method will be called whenever the SecurityContextHolder does not contain an Authentication object and Spring Security wishes to provide an implementation with an opportunity to authenticate the request using remember-me capabilities.\n\tvoid loginFail(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Called whenever an interactive authentication attempt was made, but the credentials supplied by the user were missing or otherwise invalid.\n\tvoid loginSuccess(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication successfulAuthentication); // Called whenever an interactive authentication attempt is successful.\n}"}
{"index": 453, "repo": "phoenix-core-5.1.3", "des": "Built-in function for SUM aggregation function.", "code": "Class SumAggregateFunction {\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tString getName();\n\tAggregator newClientAggregator(); // Create the aggregator to do client-side aggregation based on the results returned from the aggregating coprocessor.\n\tAggregator newServerAggregator(org.apache.hadoop.conf.Configuration conf); // Create the aggregator to do server-side aggregation.\n\tAggregator newServerAggregator(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr);\n}"}
{"index": 13625, "repo": "spring-ws-security-4.0.5", "des": "Populates the X509 authorities via an UserDetailsService.", "code": "public class DaoX509AuthoritiesPopulator extends Object implements X509AuthoritiesPopulator, org.springframework.beans.factory.InitializingBean, org.springframework.context.MessageSourceAware {\n\tvoid afterPropertiesSet();\n\torg.springframework.security.core.userdetails.UserDetails getUserDetails(X509Certificate clientCert); // Obtains the granted authorities for the specified user.\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n\tvoid setSubjectDNRegex(String subjectDNRegex); // Sets the regular expression which will by used to extract the user name from the certificate's Subject DN.\n\tvoid setUserDetailsService(org.springframework.security.core.userdetails.UserDetailsService userDetailsService);\n}"}
{"index": 8206, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of TypesProvider that inlines a XsdSchema or XsdSchemaCollection into the WSDL.", "code": "Class InliningXsdSchemaTypesProvider {\n\tvoid addTypes(javax.wsdl.Definition definition);\n\tXsdSchemaCollection getSchemaCollection(); // Returns the XSD schema collection to inline.\n\tvoid setSchema(XsdSchema schema); // Sets the single XSD schema to inline.\n\tvoid setSchemaCollection(XsdSchemaCollection schemaCollection); // Sets the XSD schema collection to inline.\n}"}
{"index": 10210, "repo": "spring-core-6.0.11", "des": "Exception thrown when the constant pool of a class produced by a ClassWriter is too large.", "code": "public final class ClassTooLargeException extends IndexOutOfBoundsException {\n\tString getClassName(); // Returns the internal name of the class (see org.objectweb.asm.Type#getInternalName()).\n\tint getConstantPoolCount(); // Returns the number of constant pool items of the class.\n}"}
{"index": 4552, "repo": "beam-sdks-java-core-2.49.0", "des": "For internal use only; no backwards-compatibility guarantees.", "code": "Class Trigger.OnceTrigger {\n\tTrigger.OnceTrigger getContinuationTrigger(); // Return a trigger to use after a GroupByKey to preserve the intention of this trigger.\n\tboolean mayFinish(); // For internal use only; no backwards-compatibility guarantees.\n}"}
{"index": 15088, "repo": "spring-vault-core-3.0.4", "des": "Username and password implementation of ClientAuthentication.", "code": "public class UsernamePasswordAuthentication extends Object implements ClientAuthentication, AuthenticationStepsFactory {\n\tstatic AuthenticationSteps createAuthenticationSteps(UsernamePasswordAuthenticationOptions options); // Creates a AuthenticationSteps for username/password authentication given UsernamePasswordAuthenticationOptions.\n\tAuthenticationSteps getAuthenticationSteps(); // Get the AuthenticationSteps describing an authentication flow.\n\tVaultToken login(); // Return a VaultToken.\n}"}
{"index": 3858, "repo": "hbase-client-3.0.0-alpha-4", "des": "Represents an authorization for access for the given namespace.", "code": "Class NamespacePermission {\n\tboolean equals(Object obj);\n\tboolean equalsExceptActions(Object obj); // Check if two permission equals regardless of actions.\n\tString getNamespace();\n\tboolean implies(String namespace, Permission.Action action); // check if given action is granted in given namespace.\n\tprotected String rawExpression();\n\tvoid readFields(DataInput in);\n\tvoid write(DataOutput out);\n}"}
{"index": 8335, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports parameters annotated with @XmlRootElement or @XmlType, and return values annotated with @XmlRootElement.", "code": "Class XmlRootElementPayloadMethodProcessor {\n\tprotected void handleReturnValueInternal(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue);\n\tObject resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tprotected boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n}"}
{"index": 14463, "repo": "spring-security-messaging-6.1.2", "des": "Allows resolving the Authentication.getPrincipal() using the AuthenticationPrincipal annotation.", "code": "public class AuthenticationPrincipalArgumentResolver extends Object implements org.springframework.messaging.handler.invocation.reactive.HandlerMethodArgumentResolver {\n\treactor.core.publisher.Mono<Object> resolveArgument(org.springframework.core.MethodParameter parameter, org.springframework.messaging.Message<?> message);\n\tvoid setAdapterRegistry(org.springframework.core.ReactiveAdapterRegistry adapterRegistry); // Sets the ReactiveAdapterRegistry to be used.\n\tvoid setBeanResolver(org.springframework.expression.BeanResolver beanResolver); // Sets the BeanResolver to be used on the expressions\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter);\n}"}
{"index": 6886, "repo": "calcite-core-1.34.0", "des": "HepProgramBuilder creates instances of HepProgram.", "code": "Class HepProgramBuilder {\n\tHepProgramBuilder addCommonRelSubExprInstruction(); // Adds an instruction to attempt to match instances of CommonRelSubExprRule, but only in cases where vertices have more than one parent.\n\tHepProgramBuilder addConverters(boolean guaranteed); // Adds an instruction to attempt to match instances of ConverterRule, but only where a conversion is actually required.\n\tHepProgramBuilder addGroupBegin(); // Adds an instruction to begin a group of rules.\n\tHepProgramBuilder addGroupEnd(); // Adds an instruction to end a group of rules, firing the group collectively.\n\tHepProgramBuilder addMatchLimit(int limit); // Adds an instruction to limit the number of pattern matches for subsequent instructions.\n\tHepProgramBuilder addMatchOrder(HepMatchOrder order); // Adds an instruction to change the order of pattern matching for subsequent instructions.\n\tHepProgramBuilder addRuleByDescription(String ruleDescription); // Adds an instruction to attempt to match a specific rule identified by its unique description.\n\t<R extends RelOptRule>HepProgramBuilder addRuleClass(Class<R> ruleClass); // Adds an instruction to attempt to match any rules of a given class.\n\tHepProgramBuilder addRuleCollection(Collection<RelOptRule> rules); // Adds an instruction to attempt to match any rules in a given collection.\n\tHepProgramBuilder addRuleInstance(RelOptRule rule); // Adds an instruction to attempt to match a specific rule object.\n\tHepProgramBuilder addSubprogram(HepProgram program); // Adds an instruction to execute a subprogram.\n\tHepProgram build(); // Returns the constructed program, clearing the state of this program builder as a side-effect.\n}"}
{"index": 15509, "repo": "spring-batch-core-5.0.2", "des": "Provide callbacks at specific points in the lifecycle of a Job.", "code": "public interface JobExecutionListener {\n\tdefault void afterJob(JobExecution jobExecution); // Callback after completion of a job.\n\tdefault void beforeJob(JobExecution jobExecution); // Callback before a job executes.\n}"}
{"index": 15199, "repo": "spring-boot-3.1.1", "des": "Event published when a SpringApplication is starting up and the Environment is first available for inspection and modification.", "code": "public class ApplicationEnvironmentPreparedEvent extends SpringApplicationEvent {\n\tConfigurableBootstrapContext getBootstrapContext(); // Return the bootstrap context.\n\torg.springframework.core.env.ConfigurableEnvironment getEnvironment(); // Return the environment.\n}"}
{"index": 17585, "repo": "spring-ldap-core-3.1.0", "des": "And/or filter builder support for LdapQuery.", "code": "public interface ContainerCriteria extends LdapQuery {\n\tConditionCriteria and(String attribute); // Append a logical And condition to the currently built filter.\n\tContainerCriteria and(ContainerCriteria nested); // Append an And condition for a nested criterion.\n\tConditionCriteria or(String attribute); // Append a logical Or condition to the currently built filter.\n\tContainerCriteria or(ContainerCriteria nested); // Append an Or condition for a nested criterion.\n}"}
{"index": 11385, "repo": "spring-context-6.0.11", "des": "Interface that defines the set of MBean export operations that are intended to be accessed by application developers during application runtime.", "code": "public interface MBeanExportOperations {\n\tObjectName registerManagedResource(Object managedResource); // Register the supplied resource with JMX.\n\tvoid registerManagedResource(Object managedResource, ObjectName objectName); // Register the supplied resource with JMX.\n\tvoid unregisterManagedResource(ObjectName objectName); // Remove the specified MBean from the underlying MBeanServer registry.\n}"}
{"index": 10073, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Helper class to ease working with polling tasks executed using Spring TaskScheduler and TaskExecutor.", "code": "Class PollingTaskSupport<T> {\n\tprotected abstract T doPoll(); // Do poll.\n\tvoid init(); // Inits the poller.\n\tprotected void onPollResult(T result); // Callback on poll result.\n\tvoid setTrigger(Trigger trigger); // Sets the trigger.\n\tvoid start(); // Starts the poller.\n\tvoid stop(); // Stops the poller.\n}"}
{"index": 5155, "repo": "druid-processing-26.0.0", "des": "A Closeable that collects Closeable resources and closes them all when it is closed.", "code": "Class Closer {\n\tvoid close(); // Closes all Closeable instances that have been added to this Closer.\n\tstatic Closer create(); // Creates a new Closer.\n\t<C extends Closeable>C register(C closeable); // Registers the given Closeable to be closed when this Closer is closed.\n\t<C extends Closeable>void registerAll(Collection<C> closeables);\n\tRuntimeException rethrow(Throwable e); // Stores the given throwable and rethrows it.\n}"}
{"index": 10877, "repo": "spring-data-redis-3.1.2", "des": "Delegating hash mapper used for flattening objects into Strings.", "code": "public class DecoratingStringHashMapper<T> extends Object implements HashMapper<T,String,String> {\n\tT fromHash(Map hash); // Convert a hash (map) to an object.\n\tMap<String,String> toHash(T object); // Convert an object to a map that can be used with Redis hashes.\n}"}
{"index": 18284, "repo": "tomcat-api-10.1", "des": "This exception is thrown, if a requests permitted size is exceeded.", "code": "Class SizeException {\n\tlong getActualSize(); // Retrieves the actual size of the request.\n\tlong getPermittedSize(); // Retrieves the permitted size of the request.\n}"}
{"index": 13261, "repo": "spring-test-6.0.11", "des": "Untyped extension of TestContextAnnotationUtils.AnnotationDescriptor that is used to describe the declaration of one of several candidate annotation types where the actual annotation type cannot be predetermined.", "code": "public static class TestContextAnnotationUtils.UntypedAnnotationDescriptor extends TestContextAnnotationUtils.AnnotationDescriptor<Annotation> {\n\tSet<Annotation> findAllLocalMergedAnnotations(); // Throws an UnsupportedOperationException since the type of annotation represented by an UntypedAnnotationDescriptor is unknown.\n\tTestContextAnnotationUtils.UntypedAnnotationDescriptor next(); // Find the next TestContextAnnotationUtils.UntypedAnnotationDescriptor for the specified annotation types in the hierarchy above the root declaring class of this descriptor.\n}"}
{"index": 8836, "repo": "hbase-server-3.0.0-alpha-4", "des": "In-memory Queue service provider for Balancer Decision events.", "code": "Class BalancerDecisionQueueService {\n\tboolean clearNamedQueue(); // Cleans up queues maintained by services.\n\tvoid consumeEventFromDisruptor(NamedQueuePayload namedQueuePayload); // This implementation is generic for consuming records from LMAX disruptor and inserts records to EvictingQueue which is maintained by each ringbuffer provider.\n\tNamedQueuePayload.NamedQueueEvent getEvent(); // Retrieve event type for NamedQueueService implementation.\n\tNamedQueueGetResponse getNamedQueueRecords(NamedQueueGetRequest request); // Retrieve in memory queue records from ringbuffer\n\tvoid persistAll(Connection connection); // Add all in memory queue records to system table.\n}"}
{"index": 6651, "repo": "artemis-odb-2.3.0", "des": "Tracks cooldown per entity, processing entity when its timer runs out.", "code": "Class DelayedIteratingSystem {\n\tprotected boolean checkProcessing(); // Does the system desire processing.\n\tfloat getInitialTimeDelay(); // Get the initial delay that the system was ordered to process entities after.\n\tprotected abstract float getRemainingDelay(int entityId); // Return the delay until this entity should be processed.\n\tfloat getRemainingTimeUntilProcessing(); // Get the time until the system is scheduled to run at.\n\tprotected float getTimeDelta(); // Overridable method to provide custom time delta.\n\tprotected void inserted(int entityId); // Called if entity has come into scope for this system, e.g created or a component was added to it.\n\tboolean isRunning(); // Check if the system is counting down towards processing.\n\tvoid offerDelay(float offeredDelay); // Restarts the system only if the delay offered is shorter than the time that the system is currently scheduled to execute at.\n\tprotected abstract void processDelta(int entityId, float accumulatedDelta); // Process an entity this system is interested in.\n\tprotected abstract void processExpired(int entityId);\n\tprotected void processSystem(); // Process the system.\n\tvoid stop(); // Stops the system from running, aborts current countdown.\n}"}
{"index": 18515, "repo": "hibernate-core-5.6.15.Final", "des": "A type that maps between VARCHAR and char[]", "code": "Class CharArrayType {\n\tjava.lang.String getName(); // Returns the abbreviated name of the type.\n\tjava.lang.String[] getRegistrationKeys(); // Get the names under which this type should be registered in the type registry.\n}"}
{"index": 13190, "repo": "spring-test-6.0.11", "des": "EnabledIfCondition is an ExecutionCondition that supports the @EnabledIf annotation when using the Spring TestContext Framework in conjunction with JUnit 5's Jupiter programming model.", "code": "public class EnabledIfCondition extends Object {\n\tprotected <A extends Annotation>org.junit.jupiter.api.extension.ConditionEvaluationResult evaluateAnnotation(Class<A> annotationType, Function<A,String> expressionExtractor, Function<A,String> reasonExtractor, Function<A,Boolean> loadContextExtractor, boolean enabledOnTrue, org.junit.jupiter.api.extension.ExtensionContext context); // Evaluate the expression configured via the supplied annotation type on the AnnotatedElement for the supplied ExtensionContext.\n\torg.junit.jupiter.api.extension.ConditionEvaluationResult evaluateExecutionCondition(org.junit.jupiter.api.extension.ExtensionContext context); // Containers and tests are enabled if @EnabledIf is present on the corresponding test class or test method and the configured expression evaluates to true.\n}"}
{"index": 1966, "repo": "nifi-framework-api-1.22.0", "des": "Constants for keys that can be passed in the AuthorizationRequest user context Map.", "code": "Enum UserContextKeys {\n\tstatic UserContextKeys valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic UserContextKeys[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16385, "repo": "spring-data-jpa-3.1.2", "des": "A QueryRewriter that doesn't change the query.", "code": "public static enum QueryRewriter.IdentityQueryRewriter extends Enum<QueryRewriter.IdentityQueryRewriter> implements QueryRewriter {\n\tString rewrite(String query, Sort sort); // Rewrite the assembled query with the given Sort.\n\tstatic QueryRewriter.IdentityQueryRewriter valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic QueryRewriter.IdentityQueryRewriter[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 17137, "repo": "spring-integration-core-6.1.2", "des": "A Message Router that invokes the specified method on the given object.", "code": "public class MethodInvokingRouter extends AbstractMappingMessageRouter {\n\tprotected List<Object> getChannelKeys(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to return the channel keys.\n\tboolean isRunning();\n\tfinal void onInit(); // Subclasses may implement this for initialization logic.\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 11209, "repo": "wicket-extensions-10.0.0-M1", "des": "Wizard step that is intelligent enough to know how to navigate to the next and previous steps.", "code": "public interface IDynamicWizardStep extends IWizardStep {\n\tdefault boolean isFinishAvailable(); // Gets whether the finish button should be enabled.\n\tboolean isLastAvailable(); // Checks if the last button should be enabled.\n\tboolean isLastStep(); // Gets whether this is the last step in the wizard.\n\tboolean isNextAvailable(); // Gets whether the next button should be enabled.\n\tboolean isPreviousAvailable(); // Gets whether the previous button should be enabled.\n\tIDynamicWizardStep last(); // Gets the next wizard step from here.\n\tIDynamicWizardStep next(); // Gets the next wizard step from here.\n\tIDynamicWizardStep previous(); // Gets the previous wizard step from here.\n}"}
{"index": 4613, "repo": "commons-vfs2-2.9.0", "des": "Provides methods to parse a file name into a FileName.", "code": "Interface FileNameParser {\n\tboolean encodeCharacter(char ch); // Check if a character needs encoding (%nn).\n\tFileName parseUri(VfsComponentContext context, FileName base, String uri); // Parses a String into a file name.\n}"}
{"index": 5166, "repo": "druid-processing-26.0.0", "des": "Class that encapsulates knowledge about how to create \"column processors\", which are.", "code": "Interface ColumnProcessorFactory<T> {\n\tColumnType defaultType(); // This default type will be used when the underlying column has an unknown type.\n\tT makeComplexProcessor(BaseObjectColumnValueSelector<?> selector); // Create a processor for a complex column.\n\tT makeDimensionProcessor(DimensionSelector selector, boolean multiValue); // Create a processor for a string column.\n\tT makeDoubleProcessor(BaseDoubleColumnValueSelector selector); // Create a processor for a double column.\n\tT makeFloatProcessor(BaseFloatColumnValueSelector selector); // Create a processor for a float column.\n\tT makeLongProcessor(BaseLongColumnValueSelector selector); // Create a processor for a long column.\n}"}
{"index": 1610, "repo": "pdfbox-3.0.0-beta1", "des": "Manages security handlers for the application.", "code": "Class SecurityHandlerFactory {\n\tSecurityHandler<ProtectionPolicy> newSecurityHandlerForFilter(String name); // Returns a new security handler for the given Filter name, or null none is available.\n\tSecurityHandler<ProtectionPolicy> newSecurityHandlerForPolicy(ProtectionPolicy policy); // Returns a new security handler for the given protection policy, or null none is available.\n\tvoid registerHandler(String name, Class<? extends SecurityHandler> securityHandler, Class<? extends ProtectionPolicy> protectionPolicy); // Registers a security handler.\n}"}
{"index": 12757, "repo": "spring-data-mongodb-4.1.2", "des": "Type represents either a JSON schema type or a MongoDB specific bsonType.", "code": "public static interface JsonSchemaObject.Type {\n\tstatic JsonSchemaObject.Type arrayType();\n\tstatic JsonSchemaObject.Type bigDecimalType();\n\tstatic JsonSchemaObject.Type binaryType();\n\tstatic JsonSchemaObject.Type booleanType();\n\tstatic JsonSchemaObject.Type bsonTypeOf(String name);\n\tstatic Set<JsonSchemaObject.Type> bsonTypes();\n\tstatic JsonSchemaObject.Type dateType();\n\tstatic JsonSchemaObject.Type doubleType();\n\tstatic JsonSchemaObject.Type intType();\n\tstatic JsonSchemaObject.Type javascriptType();\n\tstatic JsonSchemaObject.Type jsonTypeOf(String name);\n\tstatic Set<JsonSchemaObject.Type> jsonTypes();\n\tstatic JsonSchemaObject.Type longType();\n\tstatic JsonSchemaObject.Type nullType();\n\tstatic JsonSchemaObject.Type numberType();\n\tstatic JsonSchemaObject.Type objectIdType();\n\tstatic JsonSchemaObject.Type objectType();\n\tstatic JsonSchemaObject.Type of(String name); // Create a JsonSchemaObject.Type with its default representation via the name.\n\tstatic JsonSchemaObject.Type regexType();\n\tString representation(); // Get the JsonSchemaObject.Type representation.\n\tstatic JsonSchemaObject.Type stringType();\n\tstatic JsonSchemaObject.Type timestampType();\n\tdefault JsonSchemaObject.Type toBsonType(); // Get the bsonType representation of the given type.\n\tObject value(); // Get the JsonSchemaObject.Type value.\n}"}
{"index": 12186, "repo": "jena-core-4.9.0", "des": "Writes out an XML serialization of a model.", "code": "public class NTripleWriter extends Object implements RDFWriterI {\n\tString getPrefixFor(String uri);\n\tRDFErrorHandler setErrorHandler(RDFErrorHandler errHandler); // Set an error handler.\n\tvoid setNsPrefix(String prefix, String ns);\n\tObject setProperty(String propName, Object propValue); // Set a property to control the writer's behaviour.\n\tvoid write(Model model, OutputStream out, String base); // Serialize Model model to OutputStream out.\n\tstatic void write(Model model, PrintWriter writer);\n\tvoid write(Model model, Writer writer, String base); // Caution: Serialize Model model to Writer out.\n}"}
{"index": 16838, "repo": "spring-amqp-3.0.6", "des": "Base class for post processors that compress the message body.", "code": "public abstract class AbstractCompressingPostProcessor extends Object implements MessagePostProcessor, org.springframework.core.Ordered {\n\tprotected abstract OutputStream getCompressorStream(OutputStream stream); // Get the stream.\n\tprotected abstract String getEncoding(); // Get the encoding.\n\tint getOrder();\n\tMessage postProcessMessage(Message message); // Change (or replace) the message.\n\tvoid setCopyProperties(boolean copyProperties); // Flag to indicate if MessageProperties should be used as is or cloned for new message after compression.\n\tvoid setEncodingDelimiter(String encodingDelimiter); // Set a delimiter to be added between the compression type and the original encoding, if any.\n\tprotected void setOrder(int order); // Set the order.\n}"}
{"index": 17768, "repo": "spring-web-6.0.11", "des": "Exception thrown when a client POSTs, PUTs, or PATCHes content of a type not supported by request handler.", "code": "public class HttpMediaTypeNotSupportedException extends HttpMediaTypeException {\n\tMediaType getContentType(); // Return the HTTP request content type method that caused the failure.\n\tHttpHeaders getHeaders(); // Return headers to use for the response.\n\tHttpStatusCode getStatusCode(); // Return the HTTP status code to use for the response.\n}"}
{"index": 6808, "repo": "calcite-core-1.34.0", "des": "ChainedSqlOperatorTable implements the SqlOperatorTable interface by chaining together any number of underlying operator table instances.", "code": "Class ChainedSqlOperatorTable {\n\tList<SqlOperator> getOperatorList(); // Retrieves a list of all functions and operators in this table.\n\tvoid lookupOperatorOverloads(SqlIdentifier opName, @Nullable SqlFunctionCategory category, SqlSyntax syntax, List<SqlOperator> operatorList, SqlNameMatcher nameMatcher); // Retrieves a list of operators with a given name and syntax.\n}"}
{"index": 14815, "repo": "spring-data-commons-3.1.2", "des": "Auditing handler to mark entity objects created and modified.", "code": "public class ReactiveAuditingHandler extends AuditingHandlerSupport {\n\tstatic ReactiveAuditingHandler from(MappingContext<?,?> mappingContext); // Factory method that creates a new ReactiveAuditingHandler for the given MappingContext.\n\t<T> reactor.core.publisher.Mono<T> markCreated(T source); // Marks the given object as created.\n\t<T> reactor.core.publisher.Mono<T> markModified(T source); // Marks the given object as modified.\n\tvoid setAuditorAware(ReactiveAuditorAware<?> auditorAware); // Setter to inject a ReactiveAuditorAware component to retrieve the current auditor.\n}"}
{"index": 4308, "repo": "beam-sdks-java-core-2.49.0", "des": "GroupedValues<K, InputT, OutputT> takes a PCollection<KV<K, Iterable<InputT>>>, such as the result of GroupByKey, applies a specified CombineFn<InputT, AccumT, OutputT> to each of the input KV<K, Iterable<InputT>> elements to produce a combined output KV<K, OutputT> element, and returns a PCollection<KV<K, OutputT>> containing all the combined output elements.", "code": "Class Combine.GroupedValues<K,InputT,OutputT> {\n\tPCollection<KV<K,OutputT>> expand(PCollection<? extends KV<K,? extends java.lang.Iterable<InputT>>> input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tAppliedCombineFn<? super K,? super InputT,?,OutputT> getAppliedFn(CoderRegistry registry, Coder<? extends KV<K,? extends java.lang.Iterable<InputT>>> inputCoder, WindowingStrategy<?,?> windowingStrategy); // Returns the Combine.CombineFn bound to its coders.\n\tCombineFnBase.GlobalCombineFn<? super InputT,?,OutputT> getFn(); // Returns the CombineFnBase.GlobalCombineFn used by this Combine operation.\n\tjava.util.List<PCollectionView<?>> getSideInputs();\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n\tCombine.GroupedValues<K,InputT,OutputT> withSideInputs(java.lang.Iterable<? extends PCollectionView<?>> sideInputs);\n\tCombine.GroupedValues<K,InputT,OutputT> withSideInputs(PCollectionView<?>... sideInputs);\n}"}
{"index": 16649, "repo": "spring-beans-6.0.11", "des": "Tag collection class used to hold managed List elements, which may include runtime bean references (to be resolved into bean objects).", "code": "public class ManagedList<E> extends ArrayList<E> implements Mergeable, BeanMetadataElement {\n\tString getElementTypeName(); // Return the default element type name (class name) to be used for this list.\n\tObject getSource(); // Return the configuration source Object for this metadata element (may be null).\n\tboolean isMergeEnabled(); // Is merging enabled for this particular instance?\n\tList<E> merge(Object parent); // Merge the current value set with that of the supplied object.\n\tstatic <E> ManagedList<E> of(E... elements); // Create a new instance containing an arbitrary number of elements.\n\tvoid setElementTypeName(String elementTypeName); // Set the default element type name (class name) to be used for this list.\n\tvoid setMergeEnabled(boolean mergeEnabled); // Set whether merging should be enabled for this collection, in case of a 'parent' collection value being present.\n\tvoid setSource(Object source); // Set the configuration source Object for this metadata element.\n}"}
{"index": 2682, "repo": "mahout-core-14.1", "des": "Open hash map from short keys to byte values.", "code": "Class OpenShortByteHashMap {\n\tbyte adjustOrPutValue(short key, byte newValue, byte incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(short key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(byte value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(ShortProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(ShortByteProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tbyte get(short key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(short key);\n\tprotected int indexOfKey(short key);\n\tprotected int indexOfValue(byte value);\n\tIterator<OpenShortByteHashMap.MapElement> iterator();\n\tvoid keys(ShortArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(ShortByteProcedure condition, ShortArrayList keyList, ByteArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(short key, byte value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(short key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(ByteArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 1279, "repo": "ignite-core-2.15.0", "des": "Data transfer object for affinity configuration properties.", "code": "Class VisorCacheAffinityConfiguration {\n\tString getFunction();\n\tString getMapper();\n\tint getPartitionedBackups();\n\tint getPartitions();\n\t@Nullable Boolean isExcludeNeighbors();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 10565, "repo": "groovy-all-4.0.13", "des": "Class used to configure a RootLoader from a stream or by using its methods.", "code": "public class LoaderConfiguration extends Object {\n\tvoid addClassPath(String path); // Adds a classpath to this configuration.\n\tvoid addFile(File file); // Adds a file to the classpath if it exists.\n\tvoid addFile(String filename); // Adds a file to the classpath if it exists.\n\tvoid configure(InputStream is); // configures this loader with a stream\n\tURL[] getClassPathUrls(); // The classpath as URL[] from this configuration.\n\tList<String> getGrabUrls(); // The extra grab configuration.\n\tString getMainClass(); // Returns the name of the main class for this configuration.\n\tvoid setMainClass(String classname); // Sets the main class.\n\tvoid setRequireMain(boolean requireMain); // Determines if a main class is required when calling.\n}"}
{"index": 6063, "repo": "jackson-databind-2.15.2", "des": "Builder class used for aggregating deserialization information about a POJO, in order to build a JsonSerializer for serializing intances.", "code": "Class BeanSerializerBuilder {\n\tJsonSerializer<?> build(); // Method called to create BeanSerializer instance with all accumulated information.\n\tBeanSerializer createDummy(); // Factory method for constructing an \"empty\" serializer; one that outputs no properties (but handles JSON objects properly, including type information)\n\tAnyGetterWriter getAnyGetter();\n\tBeanDescription getBeanDescription();\n\tAnnotatedClass getClassInfo();\n\tBeanPropertyWriter[] getFilteredProperties();\n\tObject getFilterId();\n\tObjectIdWriter getObjectIdWriter();\n\tList<BeanPropertyWriter> getProperties();\n\tAnnotatedMember getTypeId();\n\tboolean hasProperties();\n\tvoid setAnyGetter(AnyGetterWriter anyGetter);\n\tprotected void setConfig(SerializationConfig config); // Initialization method called right after construction, to specify configuration to use.\n\tvoid setFilteredProperties(BeanPropertyWriter[] properties);\n\tvoid setFilterId(Object filterId);\n\tvoid setObjectIdWriter(ObjectIdWriter w);\n\tvoid setProperties(List<BeanPropertyWriter> properties);\n\tvoid setTypeId(AnnotatedMember idProp);\n}"}
{"index": 4507, "repo": "beam-sdks-java-core-2.49.0", "des": "An abstraction to create schema capable and aware IOs.", "code": "Interface SchemaIO {\n\tPTransform<PBegin,PCollection<Row>> buildReader(); // Returns a schema aware reader.\n\tPTransform<PCollection<Row>,? extends POutput> buildWriter(); // Returns a schema aware writer.\n\tSchema schema(); // Returns the schema of the data.\n}"}
{"index": 7010, "repo": "calcite-core-1.34.0", "des": "Operator that constructs composite Pattern instances.", "code": "Enum Pattern.Op {\n\tstatic Pattern.Op valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Pattern.Op[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 11418, "repo": "spring-context-6.0.11", "des": "Indicates registration behavior when attempting to register an MBean that already exists.", "code": "public enum RegistrationPolicy extends Enum<RegistrationPolicy> {\n\tstatic RegistrationPolicy valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic RegistrationPolicy[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 932, "repo": "ignite-core-2.15.0", "des": "Spring helper which can parse Spring configuration files, interface was introduced to avoid mandatory runtime dependency on Spring framework.", "code": "Interface IgniteSpringHelper {\n\t<T> T loadBean(InputStream stream, String beanName); // Loads bean instance by name.\n\t<T> T loadBean(URL url, String beanName); // Loads bean instance by name.\n\t<T> T loadBeanFromAppContext(Object appContext, String beanName); // Loads bean instance by name from application context.\n\tIgniteBiTuple<Map<Class<?>,Collection>,? extends GridSpringResourceContext> loadBeans(URL cfgUrl, Class<?>... beanClasses); // Loads bean instances that match the given types from given configuration file.\n\tGridTuple3<Map<String,?>,Map<Class<?>,Collection>,? extends GridSpringResourceContext> loadBeans(URL cfgUrl, Collection<String> beanNames, Class<?>... beanClasses); // Loads bean instances that match the given types or names from given configuration file.\n\t<T> IgniteBiTuple<Collection<T>,? extends GridSpringResourceContext> loadConfigurations(InputStream cfgStream, Class<T> cls, String... excludedProps); // Loads all configurations with given type specified within given configuration input stream.\n\tIgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> loadConfigurations(InputStream cfgStream, String... excludedProps); // Loads all grid configurations specified within given configuration input stream.\n\t<T> IgniteBiTuple<Collection<T>,? extends GridSpringResourceContext> loadConfigurations(URL cfgUrl, Class<T> cls, String... excludedProps); // Loads all configurations with given type specified within given configuration file.\n\tIgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> loadConfigurations(URL cfgUrl, String... excludedProps); // Loads all grid configurations specified within given configuration file.\n\tString userVersion(ClassLoader ldr, IgniteLogger log); // Gets user version for given class loader by checking META-INF/ignite.xml file for userVersion attribute.\n}"}
{"index": 14793, "repo": "spring-data-commons-3.1.2", "des": "Abstraction of a PropertyPath of a domain class.", "code": "public class PropertyPath extends Object implements Streamable<PropertyPath> {\n\tboolean equals(Object o);\n\tstatic PropertyPath from(String source, Class<?> type); // Extracts the PropertyPath chain from the given source String and type.\n\tstatic PropertyPath from(String source, TypeInformation<?> type); // Extracts the PropertyPath chain from the given source String and TypeInformation.\n\tPropertyPath getLeafProperty(); // Returns the leaf property of the PropertyPath.\n\tClass<?> getLeafType(); // Returns the type of the leaf property of the current PropertyPath.\n\tTypeInformation<?> getOwningType(); // Returns the owning type of the PropertyPath.\n\tString getSegment(); // Returns the name of the PropertyPath.\n\tClass<?> getType(); // Returns the type of the property will return the plain resolved type for simple properties, the component type for any Iterable or the value type of a Map if the property is one.\n\tTypeInformation<?> getTypeInformation();\n\tboolean hasNext(); // Returns whether there is a nested PropertyPath.\n\tboolean isCollection(); // Returns whether the PropertyPath is actually a collection.\n\tIterator<PropertyPath> iterator();\n\tPropertyPath nested(String path); // Returns the PropertyPath for the path nested under the current property.\n\tPropertyPath next(); // Returns the next nested PropertyPath.\n\tString toDotPath(); // Returns the PropertyPath in dot notation.\n}"}
{"index": 11154, "repo": "tribuo-core-4.3.1", "des": "A sequence of examples, used for sequence classification.", "code": "public class SequenceExample<T extends Output<T>> extends Object implements Iterable<Example<T>>, ProtoSerializable<org.tribuo.protos.core.SequenceExampleProto>, Serializable {\n\tvoid addExample(Example<T> e); // Adds an Example to this sequence.\n\tvoid canonicalise(FeatureMap featureMap); // Reassigns feature name Strings in each Example inside this SequenceExample to point to those in the FeatureMap.\n\tSequenceExample<T> copy(); // Returns a deep copy of this SequenceExample.\n\tstatic <T extends Output<T>>SequenceExample<T> createWithEmptyOutputs(List<? extends List<? extends Feature>> features, OutputFactory<T> outputFactory); // Creates a SequenceExample using OutputFactory.getUnknownOutput() as the output for each sequence element.\n\tvoid densify(FeatureMap fMap); // Converts all implicit zeros into explicit zeros based on the supplied feature map.\n\tstatic SequenceExample<?> deserialize(org.tribuo.protos.core.SequenceExampleProto e); // Deserialization shortcut, used to firm up the types.\n\tstatic SequenceExample<?> deserializeFromProto(int version, String className, com.google.protobuf.Any message); // Deserialization factory.\n\tboolean equals(Object o);\n\tIterator<Feature> featureIterator(); // Creates an iterator over every feature in this sequence.\n\tExample<T> get(int i); // Gets the example found at the specified index.\n\tfloat getWeight(); // Gets the weight of this sequence.\n\tboolean isDense(FeatureMap fMap); // Is this sequence example dense wrt the supplied feature map.\n\tIterator<Example<T>> iterator();\n\tvoid reduceByName(Merger merger); // Reduces the features in each example using the supplied Merger.\n\tvoid removeFeatures(List<Feature> features); // Removes the features in the supplied list from each example contained in this sequence.\n\torg.tribuo.protos.core.SequenceExampleProto serialize(); // Serializes this object to a protobuf.\n\tvoid setWeight(float weight); // Sets the weight of this sequence.\n\tint size(); // Return how many examples are in this sequence.\n\tboolean validateExample(); // Checks that each Example in this sequence is valid.\n}"}
{"index": 13506, "repo": "spring-messaging-6.0.11", "des": "A default implementation of UserDestinationResolver that relies on a SimpUserRegistry to find active sessions for a user.", "code": "public class DefaultUserDestinationResolver extends Object implements UserDestinationResolver {\n\tprotected boolean checkDestination(String destination, String requiredPrefix);\n\tString getDestinationPrefix(); // Return the configured prefix for user destinations.\n\tSimpUserRegistry getSimpUserRegistry(); // Return the configured SimpUserRegistry.\n\tprotected String getTargetDestination(String sourceDestination, String actualDestination, String sessionId, String user); // This method determines how to translate the source \"user\" destination to an actual target destination for the given active user session.\n\tboolean isRemoveLeadingSlash(); // Whether to remove the leading slash from target destinations.\n\tUserDestinationResult resolveDestination(Message<?> message); // Resolve the given message with a user destination to one or more messages with actual destinations, one for each active user session.\n\tvoid setRemoveLeadingSlash(boolean remove); // Use this property to indicate whether the leading slash from translated user destinations should be removed or not.\n\tvoid setUserDestinationPrefix(String prefix); // The prefix used to identify user destinations.\n}"}
{"index": 14334, "repo": "wicket-core-10.0.0-M1", "des": "Represents a portion of a markup file, but always spans a complete tag.", "code": "public class MarkupFragment extends AbstractMarkupFragment {\n\tfinal IMarkupFragment find(String id); // Finds a markup fragment that spans a tag\n\tfinal MarkupElement get(int index); // Get the MarkupElement at the index provided.\n\tfinal MarkupResourceStream getMarkupResourceStream(); // Get the underlying markup resource stream, which might contain more than just the markup portion represented by the IMarkupFragment.\n\tfinal Markup getRootMarkup();\n\tIterator<MarkupElement> iterator();\n\tfinal int size(); // The number of markup elements.\n\tString toString(boolean markupOnly);\n}"}
{"index": 12278, "repo": "jena-core-4.9.0", "des": "StatementBoundaryBase - a base class for StatementBoundarys, with built-in conversation to triples and a continueWith as well as a stopAt.", "code": "public abstract class StatementBoundaryBase extends Object implements StatementBoundary {\n\tfinal TripleBoundary asTripleBoundary(Model m); // Expresses this StatementBoundary as a TripleBoundary.\n\tboolean continueWith(Statement s); // Method to over-ride to define what continues the boundary search; default definition is !stopAt(s).\n\tstatic TripleBoundary convert(Model s, StatementBoundary b); // Answer a TripleBoundary that is implemented in terms of a StatementBoundary.\n\tboolean stopAt(Statement s); // Method to over-ride to define what stops the boundary search; default definition is !continueWith(s).\n}"}
{"index": 6999, "repo": "calcite-core-1.34.0", "des": "Strategy for how NULL values are to be sorted if NULLS FIRST or NULLS LAST are not specified in an item in the ORDER BY clause.", "code": "Enum NullCollation {\n\tboolean isDefaultOrder(boolean nullsFirst, boolean desc); // Returns whether a given combination of null direction and sort order is the default order of nulls returned in the ORDER BY clause.\n\tboolean last(boolean desc); // Returns whether NULL values should appear last.\n\tstatic NullCollation valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic NullCollation[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3172, "repo": "commons-jexl3-3.3", "des": "'Federated' introspection/reflection interface to allow JEXL introspection behavior to be customized.", "code": "Interface JexlUberspect {\n\tJexlArithmetic.Uberspect getArithmetic(JexlArithmetic arithmetic); // Gets an arithmetic operator resolver for a given arithmetic instance.\n\tdefault Class<?> getClassByName(String className); // Seeks a class by name using this uberspect class-loader.\n\tClassLoader getClassLoader(); // Gets the current class loader.\n\tJexlMethod getConstructor(Object ctorHandle, Object... args); // Returns a class constructor.\n\tIterator<?> getIterator(Object obj); // Gets an iterator from an object.\n\tJexlMethod getMethod(Object obj, String method, Object... args); // Returns a JexlMethod.\n\tJexlPropertyGet getPropertyGet(List<JexlUberspect.PropertyResolver> resolvers, Object obj, Object identifier); // Property getter.\n\tJexlPropertyGet getPropertyGet(Object obj, Object identifier); // Property getter.\n\tJexlPropertySet getPropertySet(List<JexlUberspect.PropertyResolver> resolvers, Object obj, Object identifier, Object arg); // Property setter.\n\tJexlPropertySet getPropertySet(Object obj, Object identifier, Object arg); // Property setter.\n\tList<JexlUberspect.PropertyResolver> getResolvers(JexlOperator op, Object obj); // Applies this uberspect property resolver strategy.\n\tint getVersion(); // Gets this uberspect version.\n\tvoid setClassLoader(ClassLoader loader); // Sets the class loader to use.\n}"}
{"index": 2871, "repo": "amqp-client-5.18.0", "des": "JSON-RPC is a lightweight RPC mechanism using JSON as a data language for request and reply messages.", "code": "Class JsonRpcClient {\n\tObject call(String method, Object[] params); // Public API - builds, encodes and sends a JSON-RPC request, and waits for the response.\n\t<T> T createProxy(Class<T> klass); // Public API - gets a dynamic proxy for a particular interface class.\n\tServiceDescription getServiceDescription(); // Public API - gets the service description record that this service loaded from the server itself at construction time.\n\tObject invoke(Object proxy, Method method, Object[] args); // Public API - implements InvocationHandler.invoke.\n}"}
{"index": 13768, "repo": "spring-webmvc-6.0.11", "des": "Rendering-specific subtype of ServerResponse that exposes model and template data.", "code": "public interface RenderingResponse extends ServerResponse {\n\tstatic RenderingResponse.Builder create(String name); // Create a builder with the given template name.\n\tstatic RenderingResponse.Builder from(RenderingResponse other); // Create a builder with the template name, status code, headers and model of the given response.\n\tMap<String,Object> model(); // Return the unmodifiable model map.\n\tString name(); // Return the name of the template to be rendered.\n}"}
{"index": 15462, "repo": "spring-batch-core-5.0.2", "des": "A FactoryBean that automates the creation of a SimpleJobExplorer.", "code": "public abstract class AbstractJobExplorerFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobExplorer>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected abstract ExecutionContextDao createExecutionContextDao(); // Creates an execution context instance data access object (DAO).\n\tprotected abstract JobExecutionDao createJobExecutionDao(); // Creates a job execution data access object (DAO).\n\tprotected abstract JobInstanceDao createJobInstanceDao(); // Creates a job instance data access object (DAO).\n\tprotected abstract StepExecutionDao createStepExecutionDao(); // Creates a step execution data access object (DAO).\n\tJobExplorer getObject();\n\tClass<JobExplorer> getObjectType(); // Returns the type of object to be returned from getObject().\n\torg.springframework.transaction.PlatformTransactionManager getTransactionManager(); // The transaction manager used in this factory.\n\tboolean isSingleton();\n\tvoid setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource transactionAttributeSource); // Set the transaction attributes source to use in the created proxy.\n\tvoid setTransactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Public setter for the PlatformTransactionManager.\n}"}
{"index": 3073, "repo": "tink-1.10.0", "des": "This key manager generates new RsaSsaPssPrivateKey keys and produces new instances of RsaSsaPssSignJce.", "code": "Class RsaSsaPssSignKeyManager {\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tRsaSsaPssPublicKey getPublicKey(RsaSsaPssPrivateKey privKeyProto); // Creates a public key from the given private key.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<RsaSsaPssKeyFormat,RsaSsaPssPrivateKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tRsaSsaPssPrivateKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic KeyTemplate rawRsa3072PssSha256F4Template();\n\tstatic KeyTemplate rawRsa4096PssSha512F4Template();\n\tstatic void registerPair(boolean newKeyAllowed); // Registers the RsaSsaPssSignKeyManager and the RsaSsaPssVerifyKeyManager with the registry, so that the the RsaSsaPss-Keys can be used with Tink.\n\tstatic KeyTemplate rsa3072PssSha256F4Template();\n\tstatic KeyTemplate rsa4096PssSha512F4Template();\n\tvoid validateKey(RsaSsaPssPrivateKey keyProto); // Checks if the given keyProto is a valid key.\n}"}
{"index": 18018, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the WebServiceMessageFactory interface that creates a DomPoxMessage.", "code": "public class DomPoxMessageFactory extends org.springframework.xml.transform.TransformerObjectSupport implements WebServiceMessageFactory {\n\tDomPoxMessage createWebServiceMessage(); // Creates a new, empty WebServiceMessage.\n\tDomPoxMessage createWebServiceMessage(InputStream inputStream); // Reads a WebServiceMessage from the given input stream.\n\tvoid setContentType(String contentType); // Sets the content-type for the DomPoxMessage.\n\tvoid setExpandEntityReferences(boolean expandEntityRef); // Set if the XML parser should expand entity reference nodes.\n\tvoid setNamespaceAware(boolean namespaceAware); // Set whether or not the XML parser should be XML namespace aware.\n\tvoid setValidating(boolean validating); // Set if the XML parser should validate the document.\n}"}
{"index": 13053, "repo": "spring-aop-6.0.11", "des": "Introduction advisor delegating to the given object.", "code": "public class DeclareParentsAdvisor extends Object implements IntroductionAdvisor {\n\tAdvice getAdvice(); // Return the advice part of this aspect.\n\tClassFilter getClassFilter(); // Return the filter determining which target classes this introduction should apply to.\n\tClass<?>[] getInterfaces(); // Return the additional interfaces introduced by this Advisor or Advice.\n\tvoid validateInterfaces(); // Can the advised interfaces be implemented by the introduction advice? Invoked before adding an IntroductionAdvisor.\n}"}
{"index": 10547, "repo": "groovy-all-4.0.13", "des": "Compilation unit to only generate stubs.", "code": "public class JavaStubCompilationUnit extends CompilationUnit {\n\tSourceUnit addSource(File file); // Adds a source file to the unit.\n\tSourceUnit addSource(URL url); // Adds a source file to the unit.\n\tvoid compile(); // Synonym for compile(Phases.ALL).\n\tvoid configure(CompilerConfiguration config); // Configures its debugging mode and classloader classpath from a given compiler configuration.\n\tint getStubCount();\n}"}
{"index": 15236, "repo": "spring-boot-3.1.1", "des": "Strategy interface used to resolve locations into one or more resources.", "code": "public interface ConfigDataLocationResolver<R extends ConfigDataResource> {\n\tboolean isResolvable(ConfigDataLocationResolverContext context, ConfigDataLocation location); // Returns if the specified location address can be resolved by this resolver.\n\tList<R> resolve(ConfigDataLocationResolverContext context, ConfigDataLocation location); // Resolve a ConfigDataLocation into one or more ConfigDataResource instances.\n\tdefault List<R> resolveProfileSpecific(ConfigDataLocationResolverContext context, ConfigDataLocation location, Profiles profiles); // Resolve a ConfigDataLocation into one or more ConfigDataResource instances based on available profiles.\n}"}
{"index": 5294, "repo": "druid-processing-26.0.0", "des": "An enum of supported hash partition functions.", "code": "Enum HashPartitionFunction {\n\tstatic HashPartitionFunction fromString(String type);\n\tabstract int hash(byte[] serializedRow, int numBuckets); // Returns an ID of a hash bucket for the given serializedRow.\n\tstatic HashPartitionFunction valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HashPartitionFunction[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8472, "repo": "commons-io-2.13.0", "des": "Always throws an IOException from all the Reader methods where the exception is declared.", "code": "Class BrokenReader {\n\tvoid close(); // Throws the configured exception.\n\tvoid mark(int readAheadLimit); // Throws the configured exception.\n\tint read(char[] cbuf, int off, int len); // Throws the configured exception.\n\tboolean ready(); // Throws the configured exception.\n\tvoid reset(); // Throws the configured exception.\n\tlong skip(long n); // Throws the configured exception.\n}"}
{"index": 9469, "repo": "curator-recipes-5.5.0", "des": "NOTE: depending on its implementation, release() may throw an exception if the current thread does not own the lock.", "code": "Interface InterProcessLock {\n\tvoid acquire(); // Acquire the mutex - blocking until it's available.\n\tboolean acquire(long time, TimeUnit unit); // Acquire the mutex - blocks until it's available or the given time expires.\n\tboolean isAcquiredInThisProcess(); // Returns true if the mutex is acquired by a thread in this JVM\n\tvoid release(); // Perform one release of the mutex.\n}"}
{"index": 14141, "repo": "wicket-core-10.0.0-M1", "des": "This is a behavior implementation that can be used if you have markup that should be around a component.", "code": "public class BorderBehavior extends Behavior {\n\tvoid afterRender(Component component); // Called when a component that has this behavior coupled was rendered.\n\tvoid beforeRender(Component component); // Called when a component is about to render.\n}"}
{"index": 5481, "repo": "druid-processing-26.0.0", "des": "The format is mostly the same with CompressedVSizeColumnarMultiIntsSupplier (which has version 0x2, so we call it V2), the only difference is V3's offsets is not VSize encoded, it's just compressed.", "code": "Class V3CompressedVSizeColumnarMultiIntsSupplier {\n\tstatic V3CompressedVSizeColumnarMultiIntsSupplier fromByteBuffer(ByteBuffer buffer, ByteOrder order);\n\tstatic V3CompressedVSizeColumnarMultiIntsSupplier fromByteBuffer(ByteBuffer buffer, ByteOrder order, SmooshedFileMapper mapper);\n\tstatic V3CompressedVSizeColumnarMultiIntsSupplier fromIterable(Iterable<IndexedInts> objectsIterable, int offsetChunkFactor, int maxValue, ByteOrder byteOrder, CompressionStrategy compression, Closer closer);\n\tColumnarMultiInts get();\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 16982, "repo": "spring-orm-6.0.11", "des": "Delegate for creating a shareable JPA EntityManager reference for a given EntityManagerFactory.", "code": "public abstract class SharedEntityManagerCreator extends Object {\n\tstatic EntityManager createSharedEntityManager(EntityManagerFactory emf); // Create a transactional EntityManager proxy for the given EntityManagerFactory.\n\tstatic EntityManager createSharedEntityManager(EntityManagerFactory emf, Map<?,?> properties); // Create a transactional EntityManager proxy for the given EntityManagerFactory.\n\tstatic EntityManager createSharedEntityManager(EntityManagerFactory emf, Map<?,?> properties, boolean synchronizedWithTransaction); // Create a transactional EntityManager proxy for the given EntityManagerFactory.\n\tstatic EntityManager createSharedEntityManager(EntityManagerFactory emf, Map<?,?> properties, boolean synchronizedWithTransaction, Class<?>... entityManagerInterfaces); // Create a transactional EntityManager proxy for the given EntityManagerFactory.\n\tstatic EntityManager createSharedEntityManager(EntityManagerFactory emf, Map<?,?> properties, Class<?>... entityManagerInterfaces); // Create a transactional EntityManager proxy for the given EntityManagerFactory.\n}"}
{"index": 4005, "repo": "zookeeper-3.8.2", "des": "The leader session tracker tracks local and global sessions on the leader.", "code": "Class LeaderSessionTracker {\n\tvoid checkGlobalSession(long sessionId, Object owner); // Strictly check that a given session is a global session or not\n\tvoid checkSession(long sessionId, Object owner); // Checks whether the SessionTracker is aware of this session, the session is still active, and the owner matches.\n\tboolean commitSession(long sessionId, int sessionTimeout); // Synchronized on this to avoid race condition of adding a local session after committed global session, which may cause the same session being tracked on this server and leader.\n\tlong createSession(int sessionTimeout);\n\tvoid dumpSessions(PrintWriter pwriter); // Text dump of session information, suitable for debugging.\n\tstatic long getServerIdFromSessionId(long sessionId);\n\tMap<Long,Set<Long>> getSessionExpiryMap(); // Returns a mapping of time to session IDs that expire at that time.\n\tSet<Long> globalSessions(); // Get a set of global session IDs\n\tboolean isGlobalSession(long sessionId);\n\tvoid removeSession(long sessionId);\n\tvoid setOwner(long sessionId, Object owner);\n\tvoid setSessionClosing(long sessionId); // Mark that the session is in the process of closing.\n\tvoid shutdown();\n\tvoid start();\n\tboolean touchSession(long sessionId, int sessionTimeout);\n\tboolean trackSession(long sessionId, int sessionTimeout); // Track the session expire, not add to ZkDb.\n}"}
{"index": 15896, "repo": "camel-api-4.0.0-RC1", "des": "Represent the kinds of options for wait for tasks to complete.", "code": "public enum WaitForTaskToComplete extends Enum<WaitForTaskToComplete> {\n\tstatic WaitForTaskToComplete valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic WaitForTaskToComplete[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 4012, "repo": "zookeeper-3.8.2", "des": "Implementation of the local peer MBean interface.", "code": "Class LocalPeerBean {\n\tString getClientAddress();\n\tlong getConfigVersion();\n\tString getElectionAddress();\n\tint getElectionType();\n\tint getInitLimit();\n\tString getLearnerType();\n\tint getMaxClientCnxnsPerHost(); // Current maxClientCnxns allowed from a particular host\n\tint getMaxCnxns();\n\tint getMaxSessionTimeout();\n\tint getMinSessionTimeout();\n\tString getName();\n\tString getQuorumAddress();\n\tString getQuorumSystemInfo();\n\tString getState();\n\tint getSyncLimit();\n\tint getTick();\n\tint getTickTime();\n\tboolean isHidden(); // If isHidden returns true, the MBean won't be registered with MBean server, and thus won't be available for management tools.\n\tboolean isLeader();\n\tboolean isPartOfEnsemble();\n\tvoid setInitLimit(int initLimit); // Set the number of ticks that the initial sync phase can take\n\tvoid setSyncLimit(int syncLimit); // Set the number of ticks that can pass between sending a request and getting a acknowledgment\n}"}
{"index": 12087, "repo": "jena-core-4.9.0", "des": "Implementation of JenaMap based on HashCommonBase.", "code": "public abstract class HashCommonMap<K,V> extends HashCommonBase<K> implements JenaMap<K,V> {\n\tvoid clear(int initialCapacity);\n\tvoid compute(K key, UnaryOperator<V> valueProcessor); // Compute a value for a key.\n\tV computeIfAbsent(K key, Supplier<V> absentValueSupplier); // Compute a value for a key if the key is not present.\n\tV get(K key); // Get the value associated with the provided key.\n\tV getOrDefault(K key, V defaultValue); // Get the value associated with the provided key, or a default value if the key is not present.\n\tvoid put(K key, V value); // Put a key-value pair into the map.\n\tboolean tryPut(K key, V value); // Try to put a key-value pair into the map.\n\tExtendedIterator<V> valueIterator(); // Get an iterator over the values in the map.\n\tSpliterator<V> valueSpliterator(); // Get a spliterator over the values in the map.\n}"}
{"index": 16006, "repo": "wicket-util-10.0.0-M1", "des": "A string resource that can be appended to.", "code": "public class StringBufferResourceStream extends AbstractStringResourceStream {\n\tStringBufferResourceStream append(CharSequence s); // Adds to this string buffer resource\n\tStringBufferResourceStream clear(); // Clears the string buffer resource.\n\tprotected String getString();\n\tStringBufferResourceStream prepend(CharSequence s); // Prepends to this string buffer resource\n}"}
{"index": 2508, "repo": "exoplayer-r2.3.1", "des": "Provides data to be consumed by an Extractor.", "code": "Interface ExtractorInput {\n\tvoid advancePeekPosition(int length); // Advances the peek position by length bytes.\n\tboolean advancePeekPosition(int length, boolean allowEndOfInput); // Advances the peek position by length bytes.\n\tlong getLength(); // Returns the length of the source stream, or C.LENGTH_UNSET if it is unknown.\n\tlong getPeekPosition(); // Returns the current peek position (byte offset) in the stream.\n\tlong getPosition(); // Returns the current read position (byte offset) in the stream.\n\tvoid peekFully(byte[] target, int offset, int length); // Peeks length bytes from the peek position, writing them into target at index offset.\n\tboolean peekFully(byte[] target, int offset, int length, boolean allowEndOfInput); // Peeks length bytes from the peek position, writing them into target at index offset.\n\tint read(byte[] target, int offset, int length); // Reads up to length bytes from the input and resets the peek position.\n\tvoid readFully(byte[] target, int offset, int length); // Equivalent to readFully(target, offset, length, false).\n\tboolean readFully(byte[] target, int offset, int length, boolean allowEndOfInput); // Like read(byte[], int, int), but reads the requested length in full.\n\tvoid resetPeekPosition(); // Resets the peek position to equal the current read position.\n\t<E extends java.lang.Throwable>void setRetryPosition(long position, E e); // Called when reading fails and the required retry position is different from the last position.\n\tint skip(int length); // Like read(byte[], int, int), except the data is skipped instead of read.\n\tvoid skipFully(int length); // Like readFully(byte[], int, int), except the data is skipped instead of read.\n\tboolean skipFully(int length, boolean allowEndOfInput); // Like readFully(byte[], int, int, boolean), except the data is skipped instead of read.\n}"}
{"index": 14482, "repo": "spring-security-web-6.1.2", "des": "An implementation of WebInvocationPrivilegeEvaluator which delegates the checks to an instance of AuthorizationManager", "code": "public final class AuthorizationManagerWebInvocationPrivilegeEvaluator extends Object implements WebInvocationPrivilegeEvaluator, org.springframework.web.context.ServletContextAware {\n\tboolean isAllowed(String contextPath, String uri, String method, org.springframework.security.core.Authentication authentication); // Determines whether the user represented by the supplied Authentication object is allowed to invoke the supplied URI, with the given .\n\tboolean isAllowed(String uri, org.springframework.security.core.Authentication authentication); // Determines whether the user represented by the supplied Authentication object is allowed to invoke the supplied URI.\n\tvoid setServletContext(jakarta.servlet.ServletContext servletContext);\n}"}
{"index": 10545, "repo": "groovy-all-4.0.13", "des": "Compilation Unit capable of compiling Java source files.", "code": "public class JavaAwareCompilationUnit extends CompilationUnit {\n\tvoid addSources(File[] files); // Adds a set of source files to the unit.\n\tvoid addSources(String[] paths); // Adds a set of file paths to the unit.\n\tvoid configure(CompilerConfiguration configuration); // Configures its debugging mode and classloader classpath from a given compiler configuration.\n\tJavaCompilerFactory getCompilerFactory();\n\tvoid gotoPhase(int phase); // Wraps up any pending operations for the current phase and switches to the given phase.\n\tvoid setCompilerFactory(JavaCompilerFactory compilerFactory);\n}"}
{"index": 12625, "repo": "spring-data-mongodb-4.1.2", "des": "An AggregationExpression that renders a MongoDB Aggregation Framework expression from the AST of a SpEL expression.", "code": "public class AggregationSpELExpression extends Object implements AggregationExpression {\n\tstatic AggregationSpELExpression expressionOf(String expressionString, Object... parameters); // Creates new AggregationSpELExpression for the given expressionString and parameters.\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n}"}
{"index": 5154, "repo": "druid-processing-26.0.0", "des": "Methods in this class could have belonged to Closer, but not editing that class to keep its source close to Guava source.", "code": "Class CloseableUtils {\n\tstatic void closeAll(Closeable first, Closeable... others); // Call method instead of code like first.close(); second.close(); to have safety of Closer, but without associated boilerplate code of creating a Closer and registering objects in it.\n\tstatic <T extends Closeable>void closeAll(Iterable<T> closeables); // Close all the provided , from first to last.\n\tstatic void closeAndSuppressExceptions(Closeable closeable, Consumer<Throwable> chomper); // Like Closeable.close() but sends any exceptions to the provided Consumer and then returns quietly.\n\tstatic void closeAndWrapExceptions(Closeable closeable); // Like Closeable.close() but wraps IOExceptions in RuntimeExceptions.\n\tstatic <E extends Throwable>RuntimeException closeAndWrapInCatch(E caught, Closeable closeable); // Like closeInCatch(E, java.io.Closeable) but wraps in a RuntimeException if it is a checked exception.\n\tstatic <E extends Throwable>RuntimeException closeInCatch(E caught, Closeable closeable); // Like Closeable.close(), but guaranteed to throw .\n}"}
{"index": 10893, "repo": "spring-data-redis-3.1.2", "des": "ObjectMapper based HashMapper implementation that allows flattening.", "code": "public class Jackson2HashMapper extends Object implements HashMapper<Object,String,Object> {\n\tObject fromHash(Map<String,Object> hash); // Convert a hash (map) to an object.\n\tMap<String,Object> toHash(Object source); // Convert an object to a map that can be used with Redis hashes.\n}"}
{"index": 5566, "repo": "org.apache.karaf.main-2.4.4", "des": "A ClassLoaderDelegate is used by the BundleClassLoader in a similar fashion that a parent ClassLoader is used.", "code": "Interface ClassLoaderDelegate {\n\tClass<?> findClass(String classname); // Finds a class for a bundle that may be outside of the actual bundle (i.e.\n\tString findLibrary(String libraryname); // Returns the absolute path name of a native library.\n\tURL findResource(String resource); // Finds a resource for a bundle that may be outside of the actual bundle (i.e.\n\tEnumeration<URL> findResources(String resource); // Finds an enumeration of resources for a bundle that may be outside of the actual bundle (i.e.\n\tboolean isLazyTriggerSet(); // Returns true if the lazy trigger has been set for this delegate.\n\tCollection<String> listResources(String path, String filePattern, int options); // Returns the names of resources visible to this delegate.\n\tvoid setLazyTrigger(); // Sets the lazy trigger for this delegate.\n}"}
{"index": 17425, "repo": "groovy-4.0.13", "des": "This class contains several transformers for used during method invocation.", "code": "public class TypeTransformers extends Object {\n\tprotected static MethodHandle addTransformer(MethodHandle handle, int pos, Object arg, Class<?> parameter); // Adds a type transformer applied at runtime.\n\tstatic MethodHandle applyUnsharpFilter(MethodHandle handle, int pos, MethodHandle transformer); // Apply a transformer as filter.\n}"}
{"index": 1333, "repo": "nutch-2.4", "des": "A collection of utility methods for working on deflated data.", "code": "Class DeflateUtils {\n\tstatic byte[] deflate(byte[] in); // Returns a deflated copy of the input array.\n\tstatic byte[] inflate(byte[] in); // Returns an inflated copy of the input array.\n\tstatic byte[] inflateBestEffort(byte[] in); // Returns an inflated copy of the input array.\n\tstatic byte[] inflateBestEffort(byte[] in, int sizeLimit); // Returns an inflated copy of the input array, truncated to sizeLimit bytes, if necessary.\n}"}
{"index": 14883, "repo": "spring-security-acl-6.1.2", "des": "Utility methods for displaying ACL information.", "code": "public abstract class AclFormattingUtils extends Object {\n\tstatic String demergePatterns(String original, String removeBits);\n\tstatic String mergePatterns(String original, String extraBits);\n\tstatic String printBinary(int i); // Returns a representation of the active bits in the presented mask, with each active bit being denoted by character '*'.\n\tstatic String printBinary(int mask, char code); // Returns a representation of the active bits in the presented mask, with each active bit being denoted by the passed character.\n}"}
{"index": 11745, "repo": "bedrock-core-7.0.2", "des": "An Option to define the separator to use between Cells in a Row.", "code": "public static class Cell.Separator extends Object implements Option {\n\tString getSeparator(); // Obtains the Cell.Separator string\n\tstatic Cell.Separator of(String separator); // Constructs a custom Cell.Separator.\n\tstatic Cell.Separator standard(); // Obtains the standard Cell.Separator.\n}"}
{"index": 5087, "repo": "commons-collections-3.2.2", "des": "Decorates another SortedBag to transform objects that are added.", "code": "Class TransformedSortedBag {\n\tComparator comparator(); // Returns the comparator associated with this sorted set, or null if it uses its elements' natural ordering.\n\tstatic SortedBag decorate(SortedBag bag, Transformer transformer); // Factory method to create a transforming sorted bag.\n\tObject first(); // Returns the first (lowest) member.\n\tprotected SortedBag getSortedBag(); // Gets the decorated bag.\n\tObject last(); // Returns the last (highest) member.\n}"}
{"index": 13203, "repo": "spring-test-6.0.11", "des": "A helper class for assertions on JSON content.", "code": "public class JsonExpectationsHelper extends Object {\n\tvoid assertJsonEqual(String expected, String actual); // Parse the expected and actual strings as JSON and assert the two are \"similar\" - i.e.\n\tvoid assertJsonEqual(String expected, String actual, boolean strict); // Parse the expected and actual strings as JSON and assert the two are \"similar\" - i.e.\n\tvoid assertJsonNotEqual(String expected, String actual); // Parse the expected and actual strings as JSON and assert the two are \"not similar\" - i.e.\n\tvoid assertJsonNotEqual(String expected, String actual, boolean strict); // Parse the expected and actual strings as JSON and assert the two are \"not similar\" - i.e.\n}"}
{"index": 2566, "repo": "exoplayer-r2.3.1", "des": "A Timeline consisting of a single period and static window.", "code": "Class SinglePeriodTimeline {\n\tint getIndexOfPeriod(java.lang.Object uid); // Returns the index of the period identified by its unique id, or C.INDEX_UNSET if the period is not in the timeline.\n\tTimeline.Period getPeriod(int periodIndex, Timeline.Period period, boolean setIds); // Populates a Timeline.Period with data for the period at the specified index.\n\tint getPeriodCount(); // Returns the number of periods in the timeline.\n\tTimeline.Window getWindow(int windowIndex, Timeline.Window window, boolean setIds, long defaultPositionProjectionUs); // Populates a Timeline.Window with data for the window at the specified index.\n\tint getWindowCount(); // Returns the number of windows in the timeline.\n}"}
{"index": 670, "repo": "ignite-core-2.15.0", "des": "Grid events are used for notification about what happens within the grid.", "code": "Interface Event {\n\tIgniteUuid id(); // Gets globally unique ID of this event.\n\tlong localOrder(); // Gets locally unique ID that is atomically incremented for each event.\n\t@Nullable String message(); // Gets optional message for this event.\n\tString name(); // Gets name of this event.\n\tClusterNode node(); // Node where event occurred and was recorded\n\tString shortDisplay(); // Gets a shortened version of toString() result.\n\tlong timestamp(); // Gets event timestamp.\n\tint type(); // Gets type of this event.\n}"}
{"index": 6078, "repo": "jackson-databind-2.15.2", "des": "Fallback serializer for cases where Collection is not known to be of type for which more specializer serializer exists (such as index-accessible List).", "code": "Class CollectionSerializer {\n\tContainerSerializer<?> _withValueTypeSerializer(TypeSerializer vts); // Method that needs to be implemented to allow construction of a new serializer object with given TypeSerializer, used when addition type information is to be embedded.\n\tboolean hasSingleElement(Collection<?> value); // Method called to determine if the given value (of type handled by this serializer) contains exactly one element.\n\tboolean isEmpty(SerializerProvider prov, Collection<?> value); // Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values).\n\tvoid serialize(Collection<?> value, JsonGenerator g, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeContents(Collection<?> value, JsonGenerator g, SerializerProvider provider);\n\tvoid serializeContentsUsing(Collection<?> value, JsonGenerator g, SerializerProvider provider, JsonSerializer<Object> ser);\n\tCollectionSerializer withResolved(BeanProperty property, TypeSerializer vts, JsonSerializer<?> elementSerializer, Boolean unwrapSingle);\n}"}
{"index": 8533, "repo": "commons-io-2.13.0", "des": "Like UnaryOperator but throws IOException.", "code": "Interface IOUnaryOperator<T> {\n\tdefault UnaryOperator<T> asUnaryOperator(); // Creates a UnaryOperator for this instance that throws UncheckedIOException instead of IOException.\n\tstatic <T> IOUnaryOperator<T> identity(); // Creates a unary operator that always returns its input argument.\n}"}
{"index": 3801, "repo": "hbase-client-3.0.0-alpha-4", "des": "Default implementation of AuthenticationProviderSelector which can choose from the authentication implementations which HBase provides out of the box: Simple, Kerberos, and Delegation Token authentication.", "code": "Class BuiltInProviderSelector {\n\tvoid configure(org.apache.hadoop.conf.Configuration conf, Collection<SaslClientAuthenticationProvider> providers); // Initializes the implementation with configuration and a set of providers available.\n\tPair<SaslClientAuthenticationProvider,org.apache.hadoop.security.token.Token<? extends org.apache.hadoop.security.token.TokenIdentifier>> selectProvider(String clusterId, User user); // Chooses the authentication provider which should be used given the provided client context from the authentication providers passed in via AuthenticationProviderSelector.configure(Configuration, Collection).\n}"}
{"index": 14138, "repo": "wicket-core-10.0.0-M1", "des": "Request handler for bookmarkable pages with an IRequestListener.", "code": "public class BookmarkableListenerRequestHandler extends Object implements IPageRequestHandler, IComponentRequestHandler {\n\tvoid detach(org.apache.wicket.request.IRequestCycle requestCycle);\n\tInteger getBehaviorIndex(); // Returns index of behavior this listener is targeted on or null if component is the target\n\tIRequestableComponent getComponent(); // Returns the component instance.\n\tfinal String getComponentPath(); // Returns the page relative path to the component instance.\n\tIRequestablePage getPage(); // Returns the page.\n\tClass<? extends IRequestablePage> getPageClass(); // Returns the page class\n\tInteger getPageId(); // Returns the page id.\n\torg.apache.wicket.request.mapper.parameter.PageParameters getPageParameters();\n\tfinal Integer getRenderCount(); // Returns the number of times this page has been rendered.\n\tboolean includeRenderCount();\n\tfinal boolean isPageInstanceCreated(); // Checks if the page instance is already created or if it will be created when IPageRequestHandler.getPage() is called\n\tvoid respond(org.apache.wicket.request.IRequestCycle requestCycle);\n}"}
{"index": 2576, "repo": "exoplayer-r2.3.1", "des": "Holds information about a window in a Timeline.", "code": "Class Timeline.Window {\n\tlong getDefaultPositionMs(); // Returns the default position relative to the start of the window at which to begin playback, in milliseconds.\n\tlong getDefaultPositionUs(); // Returns the default position relative to the start of the window at which to begin playback, in microseconds.\n\tlong getDurationMs(); // Returns the duration of the window in milliseconds, or C.TIME_UNSET if unknown.\n\tlong getDurationUs(); // Returns the duration of this window in microseconds, or C.TIME_UNSET if unknown.\n\tlong getPositionInFirstPeriodMs(); // Returns the position of the start of this window relative to the start of the first period belonging to it, in milliseconds.\n\tlong getPositionInFirstPeriodUs(); // Returns the position of the start of this window relative to the start of the first period belonging to it, in microseconds.\n\tTimeline.Window set(java.lang.Object id, long presentationStartTimeMs, long windowStartTimeMs, boolean isSeekable, boolean isDynamic, long defaultPositionUs, long durationUs, int firstPeriodIndex, int lastPeriodIndex, long positionInFirstPeriodUs); // Sets the data held by this window.\n}"}
{"index": 10094, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Utility methods for accessing common components from the BeanFactory.", "code": "Class YarnContextUtils {\n\tstatic AppmasterService getAppmasterClientService(BeanFactory beanFactory); // Return the AppmasterService bean whose name is \"yarnClientAmservice\" if available.\n\tstatic AppmasterService getAppmasterService(BeanFactory beanFactory); // Return the AppmasterService bean whose name is \"yarnAmservice\" if available.\n\tstatic AppmasterTrackService getAppmasterTrackService(BeanFactory beanFactory); // Return the AppmasterTrackService bean whose name is \"yarnAmTrackservice\" if available.\n\tstatic ContainerShutdown getContainerShutdown(BeanFactory beanFactory); // Return the ContainerShutdown bean whose name is \"yarnContainerShutdown\" if available.\n\tstatic ConversionService getConversionService(BeanFactory beanFactory); // Return the ConversionService bean whose name is \"yarnConversionService\" if available.\n\tstatic StandardEvaluationContext getEvaluationContext(BeanFactory beanFactory); // Return the StandardEvaluationContext bean whose name is \"yarnEvaluationContext\" if available.\n\tstatic YarnEventPublisher getEventPublisher(BeanFactory beanFactory); // Return the YarnEventPublisher bean whose name is \"yarnEventPublisher\" if available.\n\tstatic TaskExecutor getTaskExecutor(BeanFactory beanFactory); // Return the TaskScheduler bean whose name is \"taskExecutor\" if available.\n\tstatic TaskScheduler getTaskScheduler(BeanFactory beanFactory); // Return the TaskScheduler bean whose name is \"taskScheduler\" if available.\n}"}
{"index": 5818, "repo": "iceberg-core-1.3.0", "des": "A file rewriter that determines which files to rewrite based on their size.", "code": "Class SizeBasedFileRewriter<T extends org.apache.iceberg.ContentScanTask<F>,F extends org.apache.iceberg.ContentFile<F>> {\n\tprotected abstract long defaultTargetFileSize();\n\tprotected boolean enoughContent(java.util.List<T> group);\n\tprotected boolean enoughInputFiles(java.util.List<T> group);\n\tprotected abstract java.lang.Iterable<java.util.List<T>> filterFileGroups(java.util.List<java.util.List<T>> groups);\n\tprotected abstract java.lang.Iterable<T> filterFiles(java.lang.Iterable<T> tasks);\n\tvoid init(java.util.Map<java.lang.String,java.lang.String> options); // Initializes this rewriter using provided options.\n\tprotected long inputSize(java.util.List<T> group);\n\tprotected long numOutputFiles(long inputSize); // Determines the preferable number of output files when rewriting a particular file group.\n\tjava.lang.Iterable<java.util.List<T>> planFileGroups(java.lang.Iterable<T> tasks); // Selects files which this rewriter believes are valid targets to be rewritten based on their scan tasks and groups those scan tasks into file groups.\n\tprotected long splitSize(long inputSize); // Returns the smallest of our max write file threshold and our estimated split size based on the number of output files we want to generate.\n\tprotected org.apache.iceberg.Table table();\n\tprotected boolean tooMuchContent(java.util.List<T> group);\n\tjava.util.Set<java.lang.String> validOptions(); // Returns a set of supported options for this rewriter.\n\tprotected long writeMaxFileSize(); // Estimates a larger max target file size than the target size used in task creation to avoid creating tiny remainder files.\n\tprotected boolean wronglySized(T task);\n}"}
{"index": 15455, "repo": "pulsar-client-api-3.0.0", "des": "TopicConsumerBuilder is used to configure topic specific options to override those set at the ConsumerBuilder level.", "code": "public interface TopicConsumerBuilder<T> {\n\tConsumerBuilder<T> build(); // Complete the configuration of the topic specific options and return control back to the ConsumerBuilder instance.\n\tTopicConsumerBuilder<T> priorityLevel(int priorityLevel); // Configure the priority level of this topic.\n}"}
{"index": 16190, "repo": "spring-data-cassandra-4.1.2", "des": "RepositoryQuery implementation for Cassandra.", "code": "public class PartTreeCassandraQuery extends AbstractCassandraQuery {\n\tprotected com.datastax.oss.driver.api.core.cql.SimpleStatement createQuery(CassandraParameterAccessor parameterAccessor); // Creates a Statement using the given ParameterAccessor\n\tprotected MappingContext<? extends CassandraPersistentEntity<?>,CassandraPersistentProperty> getMappingContext(); // Returns the MappingContext used by this query to access mapping meta-data used to store (map) objects to Cassandra tables.\n\tprotected StatementFactory getStatementFactory(); // Returns the StatementFactory used by this query to construct and run Cassandra CQL statements.\n\tprotected PartTree getTree(); // Return the PartTree backing the query.\n\tprotected boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected boolean isLimiting(); // Return whether the query has an explicit limit set.\n\tprotected boolean isModifyingQuery(); // Returns whether the query is a modifying query.\n}"}
{"index": 13268, "repo": "spring-test-6.0.11", "des": "TestExecutionListener defines a listener API for reacting to test execution events published by the TestContextManager with which the listener is registered.", "code": "public interface TestExecutionListener {\n\tdefault void afterTestClass(TestContext testContext); // Post-processes a test class after execution of all tests within the class.\n\tdefault void afterTestExecution(TestContext testContext);\n\tdefault void afterTestMethod(TestContext testContext);\n\tdefault void beforeTestClass(TestContext testContext); // Pre-processes a test class before execution of all tests within the class.\n\tdefault void beforeTestExecution(TestContext testContext);\n\tdefault void beforeTestMethod(TestContext testContext);\n\tdefault void prepareTestInstance(TestContext testContext);\n}"}
{"index": 15420, "repo": "pulsar-client-api-3.0.0", "des": "ControlledClusterFailoverBuilder is used to configure and create instance of ServiceUrlProvider.", "code": "@Public @Evolving public interface ControlledClusterFailoverBuilder {\n\tServiceUrlProvider build(); // Build the ServiceUrlProvider instance.\n\tControlledClusterFailoverBuilder checkInterval(long interval, TimeUnit timeUnit); // Set the probe check interval.\n\tControlledClusterFailoverBuilder defaultServiceUrl(String serviceUrl); // Set default service url.\n\tControlledClusterFailoverBuilder urlProvider(String urlProvider); // Set the service url provider.\n\tControlledClusterFailoverBuilder urlProviderHeader(Map<String,String> header); // Set the service url provider header to authenticate provider service.\n}"}
{"index": 2280, "repo": "hive-exec-4.0.0-alpha-2", "des": "TaskCompiler is a the base class for classes that compile operator pipelines into tasks.", "code": "Class TaskCompiler {\n\tvoid compile(ParseContext pCtx, List<Task<?>> rootTasks, Set<ReadEntity> inputs, Set<WriteEntity> outputs);\n\tprotected abstract void decideExecMode(List<Task<?>> rootTasks, Context ctx, GlobalLimitCtx globalLimitCtx);\n\tprotected void genColumnStatsTask(BaseSemanticAnalyzer.AnalyzeRewriteContext analyzeRewrite, List<LoadFileDesc> loadFileWork, Map<String,StatsTask> map, int outerQueryLimit, int numBitVector); // A helper function to generate a column stats task on top of map-red task.\n\tprotected abstract void generateTaskTree(List<Task<?>> rootTasks, ParseContext pCtx, List<Task<MoveWork>> mvTask, Set<ReadEntity> inputs, Set<WriteEntity> outputs);\n\tParseContext getParseContext(ParseContext pCtx, List<Task<?>> rootTasks); // Create a clone of the parse context\n\tString getTableOrMVSuffix(ParseContext pCtx, boolean createTableOrMVUseSuffix);\n\tvoid init(QueryState queryState, SessionState.LogHelper console, Hive db);\n\tprotected void optimizeOperatorPlan(ParseContext pCtxSet);\n\tprotected abstract void optimizeTaskPlan(List<Task<?>> rootTasks, ParseContext pCtx, Context ctx);\n\tprotected void runDynPartitionSortOptimizations(ParseContext parseContext, HiveConf hConf);\n\tprotected abstract void setInputFormat(Task<?> rootTask);\n}"}
{"index": 2658, "repo": "mahout-core-14.1", "des": "Open hash map from float keys to int values.", "code": "Class OpenFloatIntHashMap {\n\tint adjustOrPutValue(float key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(float key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(FloatProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(FloatIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(float key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(float key);\n\tprotected int indexOfKey(float key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenFloatIntHashMap.MapElement> iterator();\n\tvoid keys(FloatArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(FloatIntProcedure condition, FloatArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(float key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(float key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 14356, "repo": "wicket-core-10.0.0-M1", "des": "IResourceIsolationPolicy based on WebRequest.HEADER_ORIGIN and WebRequest.HEADER_REFERER headers.", "code": "public class OriginResourceIsolationPolicy extends Object implements IResourceIsolationPolicy {\n\tOriginResourceIsolationPolicy addAcceptedOrigin(String acceptedOrigin); // Adds an origin (host name/domain name) to the white list.\n\tprotected final String getTargetUriFromRequest(jakarta.servlet.http.HttpServletRequest request); // Creates a RFC-6454 comparable URI from the request requested resource.\n\tprotected boolean isLocalOrigin(jakarta.servlet.http.HttpServletRequest containerRequest, String originHeader); // Checks whether the Origin HTTP header of the request matches where the request came from.\n\tIResourceIsolationPolicy.ResourceIsolationOutcome isRequestAllowed(jakarta.servlet.http.HttpServletRequest request, IRequestablePage targetPage); // Is the given request allowed.\n\tprotected boolean isWhitelistedHost(String sourceUri); // Checks whether the domain part of the sourceUri (Origin or Referer header) is whitelisted.\n\tprotected final String normalizeUri(String uri); // Creates a RFC-6454 comparable URI from the uri string.\n}"}
{"index": 6069, "repo": "jackson-databind-2.15.2", "des": "Unlike other integral number array serializers, we do not just print out byte values as numbers.", "code": "Class ByteArraySerializer {\n\tvoid acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint); // Default implementation specifies no format.\n\tboolean isEmpty(SerializerProvider prov, byte[] value); // Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values).\n\tvoid serialize(byte[] value, JsonGenerator g, SerializerProvider provider); // Method that can be called to ask implementation to serialize values of type this serializer handles.\n\tvoid serializeWithType(byte[] value, JsonGenerator g, SerializerProvider provider, TypeSerializer typeSer); // Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information.\n}"}
{"index": 7535, "repo": "cassandra-all-4.1.2", "des": "A value class encapsulating a metric's owning class and name.", "code": "Class CassandraMetricsRegistry.MetricName {\n\tstatic java.lang.String chooseGroup(java.lang.String group, java.lang.Class<?> klass); // If the group is empty, use the package name of the given class.\n\tstatic java.lang.String chooseName(java.lang.String name, java.lang.reflect.Method method); // If name is empty, use the name of the given method.\n\tstatic java.lang.String chooseType(java.lang.String type, java.lang.Class<?> klass); // If the type is empty, use the simple name of the given class.\n\tint compareTo(CassandraMetricsRegistry.MetricName o);\n\tboolean equals(java.lang.Object o);\n\tjava.lang.String getGroup(); // Returns the group to which the Metric belongs.\n\tjavax.management.ObjectName getMBeanName(); // Returns the MBean name for the Metric identified by this metric name.\n\tjava.lang.String getMetricName();\n\tjava.lang.String getName(); // Returns the name of the Metric.\n\tjava.lang.String getScope(); // Returns the scope of the Metric.\n\tjava.lang.String getType(); // Returns the type to which the Metric belongs.\n\tboolean hasScope(); // Returns true if the Metric has a scope, false otherwise.\n}"}
{"index": 5471, "repo": "druid-processing-26.0.0", "des": "TransformableRowIterator tightens RowIterator.", "code": "Interface TransformableRowIterator {\n\tTimeAndDimsPointer getMarkedPointer(); // Returns a pointer to the row, that was the current row when RowIterator.mark() was called for the last time.\n\tRowPointer getPointer(); // Returns a pointer to the current row.\n}"}
{"index": 3614, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableDoubleObjectInspector inspects a DoubleWritable Object.", "code": "Class LazyDoubleObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tdouble get(Object o); // Get the double data.\n\tObject getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n}"}
{"index": 7360, "repo": "calcite-core-1.34.0", "des": "Group of windowed aggregate calls that have the same window specification.", "code": "Class Window.Group {\n\tRelCollation collation();\n\tboolean equals(@Nullable Object obj);\n\tList<AggregateCall> getAggregateCalls(Window windowRel); // Presents a view of the Window.RexWinAggCall list as a list of AggregateCall.\n\tboolean isAlwaysNonEmpty(); // Returns if the window is guaranteed to have rows.\n}"}
{"index": 2870, "repo": "amqp-client-5.18.0", "des": "A class for allocating integers from a given range that uses a BitSet representation of the free integers.", "code": "Class IntAllocator {\n\tint allocate(); // Allocate an unallocated integer from the range, or return -1 if no more integers are available.\n\tvoid free(int reservation); // Make the provided integer available for allocation again.\n\tboolean reserve(int reservation); // Attempt to reserve the provided ID as if it had been allocated.\n}"}
{"index": 11819, "repo": "spring-kafka-3.0.9", "des": "A RecordInterceptor that delegates to one or more RecordInterceptors in order.", "code": "public class CompositeRecordInterceptor<K,V> extends Object implements RecordInterceptor<K,V> {\n\tvoid afterRecord(org.apache.kafka.clients.consumer.ConsumerRecord<K,V> record, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // Called when processing the record is complete either RecordInterceptor.success(ConsumerRecord, Consumer) or RecordInterceptor.failure(ConsumerRecord, Exception, Consumer).\n\tvoid clearThreadState(org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Call to clear thread-bound resources which were set up in ThreadStateProcessor.setupThreadState(Consumer).\n\tvoid failure(org.apache.kafka.clients.consumer.ConsumerRecord<K,V> record, Exception exception, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // Called after the listener throws an exception.\n\torg.apache.kafka.clients.consumer.ConsumerRecord<K,V> intercept(org.apache.kafka.clients.consumer.ConsumerRecord<K,V> record, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // Perform some action on the record or return a different one.\n\tvoid setupThreadState(org.apache.kafka.clients.consumer.Consumer<?,?> consumer); // Call to set up thread-bound resources which will be available for the entire duration of enclosed operation involving a Consumer.\n\tvoid success(org.apache.kafka.clients.consumer.ConsumerRecord<K,V> record, org.apache.kafka.clients.consumer.Consumer<K,V> consumer); // Called after the listener exits normally.\n}"}
{"index": 11441, "repo": "spring-context-6.0.11", "des": "An extension of the Lifecycle interface for those objects that require to be started upon ApplicationContext refresh and/or shutdown in a particular order.", "code": "public interface SmartLifecycle extends Lifecycle, Phased {\n\tdefault int getPhase(); // Return the phase that this lifecycle object is supposed to run in.\n\tdefault boolean isAutoStartup(); // Returns true if this Lifecycle component should get started automatically by the container at the time that the containing ApplicationContext gets refreshed.\n\tdefault void stop(Runnable callback); // Indicates that a Lifecycle component must stop if it is currently running.\n}"}
{"index": 6410, "repo": "exoplayer-core-2.9.6", "des": "Parses a continuous (E-)AC-3 byte stream and extracts individual samples.", "code": "Class Ac3Reader {\n\tvoid consume(ParsableByteArray data); // Consumes (possibly partial) data from the current packet.\n\tvoid createTracks(ExtractorOutput extractorOutput, TsPayloadReader.TrackIdGenerator generator); // Initializes the reader by providing outputs and ids for the tracks.\n\tvoid packetFinished(); // Called when a packet ends.\n\tvoid packetStarted(long pesTimeUs, int flags); // Called when a packet starts.\n\tvoid seek(); // Notifies the reader that a seek has occurred.\n}"}
{"index": 8933, "repo": "hbase-server-3.0.0-alpha-4", "des": "This online snapshot implementation uses the distributed procedure framework to force a store flush and then records the hfiles.", "code": "Class FlushSnapshotSubprocedure {\n\tvoid acquireBarrier(); // do nothing, core of snapshot is executed in insideBarrier() step.\n\tvoid cleanup(Exception e); // Cancel threads if they haven't finished.\n\tbyte[] insideBarrier(); // do a flush snapshot of every region on this rs from the target table.\n\tvoid releaseBarrier(); // Hooray!\n}"}
{"index": 17263, "repo": "groovy-4.0.13", "des": "Reader implementation that can read from String, StringBuffer, StringBuilder, CharBuffer or GString.", "code": "public class CharSequenceReader extends Reader implements Serializable {\n\tvoid close(); // Close resets the reader back to the start and removes any marked position.\n\tvoid mark(int readAheadLimit); // Mark the current position.\n\tboolean markSupported(); // Mark is supported (returns true).\n\tint read(); // Read a single character.\n\tint read(char[] array, int offset, int length); // Read the specified number of characters into the array.\n\tvoid reset(); // Reset the reader to the last marked position (or the beginning if mark has not been called).\n\tlong skip(long n); // Skip the specified number of characters.\n}"}
{"index": 4724, "repo": "commons-rdf-rdf4j-0.5.0", "des": "Marker interface for RDF4J implementations of GraphLike.", "code": "Interface RDF4JGraphLike<T extends TripleLike> {\n\tOptional<org.eclipse.rdf4j.model.Model> asModel(); // Return the corresponding RDF4J Model, if present.\n\tOptional<org.eclipse.rdf4j.repository.Repository> asRepository(); // Return the corresponding RDF4J Repository, if present.\n}"}
{"index": 13364, "repo": "shiro-core-2.0.0-alpha-2", "des": "A RememberMeManager is responsible for remembering a Subject's identity across that Subject's sessions with the application.", "code": "public interface RememberMeManager {\n\tvoid forgetIdentity(SubjectContext subjectContext); // Forgets any remembered identity corresponding to the subject context map being used to build a subject instance.\n\tPrincipalCollection getRememberedPrincipals(SubjectContext subjectContext); // Based on the specified subject context map being used to build a Subject instance, returns any previously remembered principals for the subject for automatic identity association (aka 'Remember Me').\n\tvoid onFailedLogin(Subject subject, AuthenticationToken token, AuthenticationException ae); // Reacts to a failed authentication attempt, typically by forgetting any previously remembered principals for the Subject.\n\tvoid onLogout(Subject subject); // Reacts to a Subject logging out of the application, typically by forgetting any previously remembered principals for the Subject.\n\tvoid onSuccessfulLogin(Subject subject, AuthenticationToken token, AuthenticationInfo info); // Reacts to a successful authentication attempt, typically saving the principals to be retrieved ('remembered') for future system access.\n}"}
{"index": 6149, "repo": "jackson-databind-2.15.2", "des": "This concrete sub-class implements property that is set using regular \"setter\" method.", "code": "Class MethodProperty {\n\tvoid deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance); // Method called to deserialize appropriate value, given parser (and context), and set it using appropriate mechanism.\n\tObject deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance); // Alternative to SettableBeanProperty.deserializeAndSet(com.fasterxml.jackson.core.JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object) that returns either return value of setter method called (if one is), or null to indicate that no return value is available.\n\tvoid fixAccess(DeserializationConfig config); // Method called to ensure that the mutator has proper access rights to be called, as per configuration.\n\t<A extends Annotation>A getAnnotation(Class<A> acls); // Method for finding annotation associated with this property; meaning annotation associated with one of entities used to access property.\n\tAnnotatedMember getMember(); // Method for accessing primary physical entity that represents the property; annotated field, method or constructor property.\n\tvoid set(Object instance, Object value); // Method called to assign given value to this property, on specified Object.\n\tObject setAndReturn(Object instance, Object value); // Method called to assign given value to this property, on specified Object, and return whatever delegating accessor returned (if anything)\n\tSettableBeanProperty withName(PropertyName newName); // Fluent factory method for constructing and returning a new instance with specified property name.\n\tSettableBeanProperty withNullProvider(NullValueProvider nva);\n\tSettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser); // Fluent factory method for constructing and returning a new instance with specified value deserializer.\n}"}
{"index": 16470, "repo": "spring-batch-infrastructure-5.0.2", "des": "Implementation of JsonObjectReader based on Jackson.", "code": "public class JacksonJsonObjectReader<T> extends Object implements JsonObjectReader<T> {\n\tvoid close(); // Close the input resource.\n\tvoid open(org.springframework.core.io.Resource resource); // Open the Json resource for reading.\n\tT read(); // Read the next object in the Json resource if any.\n\tvoid setMapper(com.fasterxml.jackson.databind.ObjectMapper mapper); // Set the object mapper to use to map Json objects to domain objects.\n}"}
{"index": 9298, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "YarnRuntime parameter enum for DevicePlugin.", "code": "Enum YarnRuntimeType {\n\tString getName();\n\tstatic YarnRuntimeType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic YarnRuntimeType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16400, "repo": "spring-integration-ftp-6.1.2", "des": "A RemoteFileInboundChannelAdapterSpec for an FtpInboundFileSynchronizingMessageSource.", "code": "public class FtpInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<org.apache.commons.net.ftp.FTPFile,FtpInboundChannelAdapterSpec,FtpInboundFileSynchronizingMessageSource> {\n\tFtpInboundChannelAdapterSpec patternFilter(String pattern); // Specify a simple pattern to match remote files.\n\tFtpInboundChannelAdapterSpec regexFilter(String regex); // Specify a regular expression to match remote files.\n}"}
{"index": 5835, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Partial implementation of SubClusterResolver, containing basic implementations of the read methods.", "code": "Class AbstractSubClusterResolver {\n\tMap<String,SubClusterId> getNodeToSubCluster();\n\tMap<String,Set<SubClusterId>> getRackToSubClusters();\n\tSubClusterId getSubClusterForNode(String nodename); // Obtain the sub-cluster that a specified node belongs to.\n\tSet<SubClusterId> getSubClustersForRack(String rackname); // Obtain the sub-clusters that have nodes on a specified rack.\n}"}
{"index": 11606, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an OAuth2AuthorizedClientRepository that stores OAuth2AuthorizedClient's in the HttpSession.", "code": "public final class WebSessionServerOAuth2AuthorizedClientRepository extends Object implements ServerOAuth2AuthorizedClientRepository {\n\t<T extends OAuth2AuthorizedClient>reactor.core.publisher.Mono<T> loadAuthorizedClient(String clientRegistrationId, org.springframework.security.core.Authentication principal, org.springframework.web.server.ServerWebExchange exchange); // Returns the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User Authentication (Resource Owner) or null if not available.\n\treactor.core.publisher.Mono<Void> removeAuthorizedClient(String clientRegistrationId, org.springframework.security.core.Authentication principal, org.springframework.web.server.ServerWebExchange exchange); // Removes the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User Authentication (Resource Owner).\n\treactor.core.publisher.Mono<Void> saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, org.springframework.security.core.Authentication principal, org.springframework.web.server.ServerWebExchange exchange); // Saves the OAuth2AuthorizedClient associating it to the provided End-User Authentication (Resource Owner).\n}"}
{"index": 9506, "repo": "commons-math3-3.6.1", "des": "Provide a default implementation for several functions useful to generic solvers.", "code": "Class AbstractUnivariateDifferentiableSolver {\n\tprotected DerivativeStructure computeObjectiveValueAndDerivative(double point); // Compute the objective function value.\n\tprotected void setup(int maxEval, UnivariateDifferentiableFunction f, double min, double max, double startValue); // Prepare for computation.\n}"}
{"index": 13141, "repo": "pulsar-client-original-3.0.0", "des": "A json schema definition SchemaDefinition for the json schema definition.", "code": "public class SchemaDefinitionImpl<T> extends Object implements SchemaDefinition<T> {\n\tboolean getAlwaysAllowNull(); // get schema whether always allow null or not.\n\tClassLoader getClassLoader();\n\tString getJsonDef(); // Get json schema definition.\n\tClass<T> getPojo(); // Get pojo schema definition.\n\tMap<String,String> getProperties(); // Get schema class.\n\tOptional<SchemaReader<T>> getSchemaReaderOpt();\n\tOptional<SchemaWriter<T>> getSchemaWriterOpt();\n\tboolean getSupportSchemaVersioning();\n\tboolean isJsr310ConversionEnabled();\n}"}
{"index": 10581, "repo": "groovy-all-4.0.13", "des": "Class used as base for the creation of MetaClass implementations.", "code": "public static class MetaClassRegistry.MetaClassCreationHandle extends Object {\n\tfinal MetaClass create(Class theClass, MetaClassRegistry registry); // Creates a metaclass implementation for theClass.\n\tprotected MetaClass createNormalMetaClass(Class theClass, MetaClassRegistry registry);\n\tboolean isDisableCustomMetaClassLookup(); // Returns whether custom metaclasses are disabled.\n\tvoid setDisableCustomMetaClassLookup(boolean disableCustomMetaClassLookup); // Set flag saying to disable lookup of custom metaclasses It's enough to call this method only once in your application for handle which was set in to registry as every new handle will inherit this property\n}"}
{"index": 17348, "repo": "groovy-4.0.13", "des": "A wrapper for Map which allows a default value to be specified using a closure.", "code": "public final class MapWithDefault<K,V> extends Object implements Map<K,V> {\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tSet<Map.Entry<K,V>> entrySet();\n\tboolean equals(Object obj);\n\tV get(Object key); // Returns the value to which the specified key is mapped, or the default value as specified by the initializing closure if this map contains no mapping for the key.\n\tboolean isEmpty();\n\tSet<K> keySet();\n\tstatic <K, V> Map<K,V> newInstance(Map<K,V> m, boolean autoGrow, boolean autoShrink, Closure<V> initClosure); // Decorates the given Map allowing a default value to be specified.\n\tstatic <K, V> Map<K,V> newInstance(Map<K,V> m, Closure<V> initClosure); // Decorates the given Map allowing a default value to be specified.\n\tV put(K key, V value); // Associates the specified value with the specified key in this map.\n\tvoid putAll(Map<? extends K,? extends V> m);\n\tV remove(Object key);\n\tint size();\n\tCollection<V> values();\n}"}
{"index": 13868, "repo": "spring-webflux-6.0.11", "des": "Assists with the registration of global, URL pattern based CorsConfiguration mappings.", "code": "public class CorsRegistry extends Object {\n\tCorsRegistration addMapping(String pathPattern); // Enable cross-origin request handling for the specified path pattern.\n\tprotected Map<String,org.springframework.web.cors.CorsConfiguration> getCorsConfigurations(); // Return the registered CorsConfiguration objects, keyed by path pattern.\n}"}
{"index": 18071, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the EndpointMapping interface that uses the SoapAction annotation to map methods to the request SOAPAction header.", "code": "public class SoapActionAnnotationMethodEndpointMapping extends AbstractAnnotationMethodEndpointMapping<String> implements SoapEndpointMapping {\n\tprotected final EndpointInvocationChain createEndpointInvocationChain(MessageContext messageContext, Object endpoint, EndpointInterceptor[] interceptors); // Creates a new SoapEndpointInvocationChain based on the given endpoint, and the set interceptors, and actors/roles.\n\tprotected String getLookupKeyForMessage(MessageContext messageContext); // Returns the endpoint keys for the given message context.\n\tprotected String getLookupKeyForMethod(Method method); // Returns the endpoint key for the given method.\n\tprotected List<String> getLookupKeysForMethod(Method method); // Returns the endpoint keys for the given method.\n\tfinal void setActorOrRole(String actorOrRole); // Sets a single SOAP actor/actorOrRole to apply to all endpoints mapped by the delegate endpoint mapping.\n\tfinal void setActorsOrRoles(String[] actorsOrRoles); // Sets the array of SOAP actors/actorsOrRoles to apply to all endpoints mapped by the delegate endpoint mapping.\n\tfinal void setUltimateReceiver(boolean ultimateReceiver); // Indicates whether this the endpoint fulfills the SOAP 1.2 Ultimate Receiver role.\n}"}
{"index": 10864, "repo": "spring-data-redis-3.1.2", "des": "A Record within the stream backed by a collection of binary field/value pairs.", "code": "public interface ByteRecord extends MapRecord<byte[],byte[],byte[]> {\n\tdefault <K, HK, HV> MapRecord<K,HK,HV> deserialize(RedisSerializer<? extends K> streamSerializer, RedisSerializer<? extends HK> fieldSerializer, RedisSerializer<? extends HV> valueSerializer); // Deserialize key with the streamSerializer, field names with the fieldSerializer and values with the valueSerializer.\n\tdefault <T> MapRecord<T,T,T> deserialize(RedisSerializer<T> serializer); // Deserialize key and field/value pairs with the given RedisSerializer.\n\tstatic ByteRecord of(MapRecord<byte[],byte[],byte[]> source); // Convert a binary MapRecord into a ByteRecord.\n\tByteRecord withId(RecordId id); // Create a new instance of Record with the given RecordId.\n\tByteRecord withStreamKey(byte[] key); // Create a new ByteRecord with the associated stream key.\n}"}
{"index": 2904, "repo": "amqp-client-5.18.0", "des": "Dropwizard Metrics implementation of MetricsCollector.", "code": "Class StandardMetricsCollector {\n\tprotected void decrementChannelCount(Channel channel); // Decrements channel count.\n\tprotected void decrementConnectionCount(Connection connection); // Decrements connection count.\n\tcom.codahale.metrics.Meter getAcknowledgedMessages();\n\tcom.codahale.metrics.Counter getChannels();\n\tcom.codahale.metrics.Counter getConnections();\n\tcom.codahale.metrics.Meter getConsumedMessages();\n\tcom.codahale.metrics.Meter getFailedToPublishMessages();\n\tcom.codahale.metrics.MetricRegistry getMetricRegistry();\n\tcom.codahale.metrics.Meter getPublishAcknowledgedMessages();\n\tcom.codahale.metrics.Meter getPublishedMessages();\n\tcom.codahale.metrics.Meter getPublishNotAcknowledgedMessages();\n\tcom.codahale.metrics.Meter getPublishUnroutedMessages();\n\tcom.codahale.metrics.Meter getRejectedMessages();\n\tprotected void incrementChannelCount(Channel channel); // Increments channel count.\n\tprotected void incrementConnectionCount(Connection connection); // Increments connection count.\n\tprotected void markAcknowledgedMessage(); // Marks the event of an acknowledged message.\n\tprotected void markConsumedMessage(); // Marks the event of a consumed message.\n\tprotected void markMessagePublishAcknowledged(); // Marks the event of a message publishing acknowledgement.\n\tprotected void markMessagePublishFailed(); // Marks the event of a message publishing failure.\n\tprotected void markMessagePublishNotAcknowledged(); // Marks the event of a message publishing not being acknowledged.\n\tprotected void markPublishedMessage(); // Marks the event of a published message.\n\tprotected void markPublishedMessageUnrouted(); // Marks the event of a published message not being routed.\n\tprotected void markRejectedMessage(); // Marks the event of a rejected message.\n}"}
{"index": 8512, "repo": "commons-io-2.13.0", "des": "A file filter that always returns false.", "code": "Class FalseFileFilter {\n\tboolean accept(File file); // Returns false.\n\tboolean accept(File dir, String name); // Returns false.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Returns false.\n\tIOFileFilter and(IOFileFilter fileFilter); // Creates a new \"and\" filter with this filter.\n\tIOFileFilter negate(); // Creates a new \"not\" filter with this filter.\n\tIOFileFilter or(IOFileFilter fileFilter); // Creates a new \"or\" filter with this filter.\n}"}
{"index": 17596, "repo": "spring-ldap-core-3.1.0", "des": "Support class to provide BaseLdapPathSource functionality to ContextSource instances that act as proxies.", "code": "public abstract class DelegatingBaseLdapPathContextSourceSupport extends Object implements BaseLdapPathSource {\n\tfinal LdapName getBaseLdapName(); // Get the base LDAP path as a LdapName.\n\tfinal DistinguishedName getBaseLdapPath(); // Get the base LDAP path as a DistinguishedName.\n\tfinal String getBaseLdapPathAsString(); // Get the base LDAP path as a String.\n\tprotected abstract ContextSource getTarget(); // Get the target ContextSource.\n}"}
{"index": 8253, "repo": "spring-ws-3.0.10.RELEASE", "des": "Allows for setting up expectations on XPath expressions.", "code": "Interface RequestXPathExpectations {\n\tRequestMatcher doesNotExist(); // Expects the XPath expression to not exist.\n\tRequestMatcher evaluatesTo(boolean expectedValue); // Expects the XPath expression to evaluate to the given boolean.\n\tRequestMatcher evaluatesTo(double expectedValue); // Expects the XPath expression to evaluate to the given double.\n\tRequestMatcher evaluatesTo(int expectedValue); // Expects the XPath expression to evaluate to the given integer.\n\tRequestMatcher evaluatesTo(String expectedValue); // Expects the XPath expression to evaluate to the given string.\n\tRequestMatcher exists(); // Expects the XPath expression to exist.\n}"}
{"index": 183, "repo": "commons-collections4-4.4", "des": "An unmodifiable entry for an element and its occurrence as contained in a MultiSet.", "code": "Interface MultiSet.Entry<E> {\n\tboolean equals(Object o); // Compares the specified object with this entry for equality.\n\tint getCount(); // Returns the number of occurrences for the element of this entry.\n\tE getElement(); // Returns the element corresponding to this entry.\n}"}
{"index": 2651, "repo": "mahout-core-14.1", "des": "Open hash map from double keys to int values.", "code": "Class OpenDoubleIntHashMap {\n\tint adjustOrPutValue(double key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(double key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(DoubleProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(DoubleIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(double key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(double key);\n\tprotected int indexOfKey(double key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenDoubleIntHashMap.MapElement> iterator();\n\tvoid keys(DoubleArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(DoubleIntProcedure condition, DoubleArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(double key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(double key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 16724, "repo": "spring-jms-6.0.11", "des": "Callback interface for resource creation.", "code": "public static interface ConnectionFactoryUtils.ResourceFactory {\n\tConnection createConnection(); // Create a new JMS Connection for registration with a JmsResourceHolder.\n\tSession createSession(Connection con); // Create a new JMS Session for registration with a JmsResourceHolder.\n\tConnection getConnection(JmsResourceHolder holder); // Fetch an appropriate Connection from the given JmsResourceHolder.\n\tSession getSession(JmsResourceHolder holder); // Fetch an appropriate Session from the given JmsResourceHolder.\n\tboolean isSynchedLocalTransactionAllowed(); // Return whether to allow for a local JMS transaction that is synchronized with a Spring-managed transaction (where the main transaction might be a JDBC-based one for a specific DataSource, for example), with the JMS transaction committing right after the main transaction.\n}"}
{"index": 4410, "repo": "beam-sdks-java-core-2.49.0", "des": "A utility class to help ensure coherence of tag and input PCollection types.", "code": "Class KeyedPCollectionTuple.TaggedKeyedPCollection<K,V> {\n\tPCollection<KV<K,V>> getCollection(); // Returns the underlying PCollection of this TaggedKeyedPCollection.\n\tTupleTag<V> getTupleTag(); // Returns the TupleTag of this TaggedKeyedPCollection.\n}"}
{"index": 16412, "repo": "spring-batch-infrastructure-5.0.2", "des": "Abstract SQL Paging Query Provider to serve as a base class for all provided SQL paging query providers.", "code": "public abstract class AbstractSqlPagingQueryProvider extends Object implements PagingQueryProvider {\n\tabstract String generateFirstPageQuery(int pageSize); // Method generating the query string to be used for retrieving the first page.\n\tabstract String generateRemainingPagesQuery(int pageSize); // Method generating the query string to be used for retrieving the pages following the first page.\n\tprotected String getFromClause();\n\tString getGroupClause(); // The getter for the group by clause\n\tint getParameterCount(); // The number of parameters that are declared in the query\n\tprotected String getSelectClause();\n\tString getSortKeyPlaceHolder(String keyName); // The sort key placeholder will vary depending on whether named parameters or traditional placeholders are used in query strings.\n\tMap<String,Order> getSortKeys(); // A Map<String, Boolean> of sort columns as the key and boolean for ascending/descending (ascending = true).\n\tMap<String,Order> getSortKeysWithoutAliases(); // The sort key (unique single column name) without alias.\n\tprotected String getWhereClause();\n\tvoid init(DataSource dataSource); // Check mandatory properties.\n\tboolean isUsingNamedParameters(); // Indicate whether the generated queries use named parameter syntax.\n\tvoid setFromClause(String fromClause);\n\tvoid setGroupClause(String groupClause); // The setter for the group by clause\n\tvoid setSelectClause(String selectClause);\n\tvoid setSortKeys(Map<String,Order> sortKeys);\n\tvoid setWhereClause(String whereClause);\n}"}
{"index": 14179, "repo": "wicket-core-10.0.0-M1", "des": "This class provides default values that are used by CookieUtils class when it creates cookies.", "code": "public class CookieDefaults extends Object implements org.apache.wicket.util.io.IClusterable {\n\tString getComment(); // Gets the cookie comment.\n\tString getDomain(); // Gets the cookie domain name.\n\tint getMaxAge(); // Gets the max age.\n\tCookieDefaults.SameSite getSameSite(); // Gets the SameSite attribute of the cookie.\n\tboolean getSecure(); // Returns true if the browser is sending cookies only over a secure protocol, or false if the browser can send cookies using any protocol.\n\tint getVersion(); // Deprecated, for removal: This API element is subject to removal in a future version.\n\tboolean isHttpOnly(); // Checks whether this Cookie has been marked as HttpOnly.\n\tvoid setComment(String comment); // Sets the cookie comment.\n\tvoid setDomain(String domain); // Sets the cookie domain name.\n\tvoid setHttpOnly(boolean httpOnly); // Marks or unmarks this Cookie as HttpOnly.\n\tvoid setMaxAge(int maxAge); // Sets the maximum age of the cookie in seconds.\n\tvoid setSameSite(CookieDefaults.SameSite sameSite); // Sets the SameSite attribute of the cookie.\n\tvoid setSecure(boolean secure); // Indicates to the browser whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL.\n\tvoid setVersion(int version); // Deprecated, for removal: This API element is subject to removal in a future version.\n}"}
{"index": 16922, "repo": "spring-integration-ip-6.1.2", "des": "Implementation of TcpNioConnectionSupport for SSL NIO connections.", "code": "public class DefaultTcpNioSSLConnectionSupport extends AbstractTcpConnectionSupport implements TcpNioConnectionSupport {\n\tTcpNioConnection createNewConnection(SocketChannel socketChannel, boolean server, boolean lookupHost, org.springframework.context.ApplicationEventPublisher applicationEventPublisher, String connectionFactoryName); // Creates a TcpNioSSLConnection.\n\tprotected void postProcessSSLEngine(SSLEngine sslEngine); // Subclasses can post-process the ssl engine (set properties).\n}"}
{"index": 1356, "repo": "nutch-2.4", "des": "A utility class that allows the walking of any DOM tree using a stack instead of recursion.", "code": "Class NodeWalker {\n\torg.w3c.dom.Node getCurrentNode(); // Return the current node.\n\tboolean hasNext(); // * Returns true if there are more nodes on the current stack.\n\torg.w3c.dom.Node nextNode(); // Returns the next Node on the stack and pushes all of its children onto the stack, allowing us to walk the node tree without the use of recursion.\n\tvoid skipChildren(); // Skips over and removes from the node stack the children of the last node.\n}"}
{"index": 12387, "repo": "spring-data-couchbase-5.1.2", "des": "CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter encapsulates creation of CustomConversions.ConverterConfiguration with CouchbaseDB specifics.", "code": "public static class CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter extends Object {\n\tCouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter configurePropertyConversions(Consumer<PropertyValueConverterRegistrar<CouchbasePersistentProperty>> configurationAdapter); // Gateway to register property specific converters.\n\tstatic CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter from(List<?> converters); // Create a CouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter using the provided converters and our own codecs for JSR-310 types.\n\tCouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter registerConverter(Converter<?,?> converter); // Add a custom Converter implementation.\n\tCouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter registerConverterFactory(ConverterFactory<?,?> converterFactory); // Add a custom ConverterFactory implementation.\n\tCouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter registerConverters(Collection<?> converters); // Add converters, factories, converter-aware objects, and generic converters.\n\tCouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter registerPropertyValueConverterFactory(PropertyValueConverterFactory converterFactory); // Add a custom/default PropertyValueConverterFactory implementation used to serve PropertyValueConverter.\n\tCouchbaseCustomConversions.CouchbaseConverterConfigurationAdapter setPropertyValueConversions(PropertyValueConversions valueConversions); // Optionally set the PropertyValueConversions to be applied during mapping.\n}"}
{"index": 16336, "repo": "spring-session-core-3.1.1", "des": "Supported modes of writing the session to session store.", "code": "public enum FlushMode extends Enum<FlushMode> {\n\tstatic FlushMode valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic FlushMode[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 14829, "repo": "spring-data-commons-3.1.2", "des": "Base class to implement ImportBeanDefinitionRegistrars to enable repository", "code": "public abstract class RepositoryBeanDefinitionRegistrarSupport extends Object implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware {\n\tprotected abstract Class<? extends Annotation> getAnnotation(); // Return the annotation to obtain configuration information from.\n\tprotected abstract RepositoryConfigurationExtension getExtension(); // Returns the RepositoryConfigurationExtension for store specific callbacks and BeanDefinition post-processing.\n\tvoid registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry); // Deprecated. since 2.2, call registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry, BeanNameGenerator) instead.\n\tvoid registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry, BeanNameGenerator generator);\n\tvoid setEnvironment(Environment environment);\n\tvoid setResourceLoader(ResourceLoader resourceLoader);\n}"}
{"index": 7266, "repo": "calcite-core-1.34.0", "des": "Strategy interface to infer the type of an operator call from the type of the operands.", "code": "Interface SqlReturnTypeInference {\n\tdefault SqlReturnTypeInference andThen(SqlTypeTransform transform); // Returns a return-type inference that applies this rule then a transform.\n\t@Nullable RelDataType inferReturnType(SqlOperatorBinding opBinding); // Infers the return type of a call to an SqlOperator.\n\tdefault SqlReturnTypeInference orElse(SqlReturnTypeInference transform); // Returns a return-type inference that applies this rule then another rule, until one of them returns a not-null result.\n}"}
{"index": 2121, "repo": "hive-exec-4.0.0-alpha-2", "des": "Note: rounding function permits rounding off integer digits in decimal numbers, which essentially downgrades the scale to negative territory.", "code": "Class GenericUDFRound {\n\tObject evaluate(GenericUDF.DeferredObject[] arguments); // Evaluate the GenericUDF with the arguments.\n\tString getDisplayString(String[] children); // Get the String to be displayed in explain.\n\tObjectInspector initialize(ObjectInspector[] arguments); // Initialize this GenericUDF.\n\tprotected double round(double input, int scale);\n\tprotected DoubleWritable round(DoubleWritable input, int scale);\n\tprotected HiveDecimalWritable round(HiveDecimalWritable inputDecWritable, int scale);\n\tprotected long round(long input, int scale);\n}"}
{"index": 18304, "repo": "commons-configuration2-2.9.0", "des": "An event class that is used for reporting errors that occurred while processing configuration properties.", "code": "Class ConfigurationErrorEvent {\n\tThrowable getCause(); // Gets the cause of this error event.\n\tEventType<?> getErrorOperationType(); // Gets the EventType of the operation which caused this error.\n\tString getPropertyName(); // Gets the name of the property that was accessed when this error occurred.\n\tObject getPropertyValue(); // Gets the value of the property that was accessed when this error occurred.\n}"}
{"index": 10849, "repo": "spring-data-redis-3.1.2", "des": "Base implementation for a subscription handling the channel/pattern registration so subclasses only have to deal with the actual registration/unregistration.", "code": "public abstract class AbstractSubscription extends Object implements Subscription {\n\tvoid close(); // Shutdown the subscription and free any resources held.\n\tprotected abstract void doClose(); // Shutdown the subscription and free any resources held.\n\tprotected abstract void doPsubscribe(byte[]... patterns); // Subscribe to the given patterns\n\tprotected abstract void doPUnsubscribe(boolean all, byte[]... patterns); // Pattern unsubscribe.\n\tprotected abstract void doSubscribe(byte[]... channels); // Subscribe to the given channels.\n\tprotected abstract void doUnsubscribe(boolean all, byte[]... channels); // Channel unsubscribe.\n\tCollection<byte[]> getChannels(); // Returns the (named) channels for this subscription.\n\tMessageListener getListener(); // Returns the listener used for this subscription.\n\tCollection<byte[]> getPatterns(); // Returns the channel patters for this subscription.\n\tboolean isAlive(); // Indicates whether this subscription is still 'alive' or not.\n\tvoid pSubscribe(byte[]... patterns); // Adds the given channel patterns to the current subscription.\n\tvoid pUnsubscribe(); // Cancels the subscription for all channels matched by patterns.\n\tvoid pUnsubscribe(byte[]... patts); // Cancels the subscription for all channels matching the given patterns.\n\tvoid subscribe(byte[]... channels); // Adds the given channels to the current subscription.\n\tvoid unsubscribe(); // Cancels the current subscription for all channels given by name.\n\tvoid unsubscribe(byte[]... chans); // Cancels the current subscription for all given channels.\n}"}
{"index": 8199, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of WebServiceConnection that is based on Apache HttpClient.", "code": "Class HttpComponentsConnection {\n\tvoid addRequestHeader(String name, String value); // Adds a request header with the given name and value.\n\torg.apache.http.client.methods.HttpPost getHttpPost();\n\torg.apache.http.HttpResponse getHttpResponse();\n\tprotected InputStream getRawResponseInputStream(); // Returns the raw, possibly compressed input stream to read the response from.\n\tprotected OutputStream getRequestOutputStream(); // Returns the output stream to write the request to.\n\tprotected int getResponseCode(); // Returns the HTTP status code of the response.\n\tprotected long getResponseContentLength(); // Returns the length of the response.\n\tIterator<String> getResponseHeaderNames(); // Returns an iteration over all the header names this request contains.\n\tIterator<String> getResponseHeaders(String name); // Returns an iteration over all the string values of the specified header.\n\tprotected String getResponseMessage(); // Returns the HTTP status message of the response.\n\tURI getUri(); // Returns the URI for this connection.\n\tvoid onClose(); // Template method invoked from AbstractWebServiceConnection.close().\n\tprotected void onSendAfterWrite(WebServiceMessage message); // Called after the given message has been written to the TransportOutputStream.\n\tprotected void onSendBeforeWrite(WebServiceMessage message); // Called before the given message has been written to the TransportOutputStream.\n}"}
{"index": 14281, "repo": "wicket-core-10.0.0-M1", "des": "Lock manager for PageAccessSynchronizer responsible for locking and unlocking pages for the duration of a request.", "code": "public interface IPageLockManager extends Serializable {\n\tvoid lockPage(int pageId); // Acquire a lock to a page\n\tvoid unlockAllPages(); // Unlocks all pages locked by this thread\n\tvoid unlockPage(int pageId); // Unlocks a single page locked by the current thread.\n}"}
{"index": 12572, "repo": "spring-jdbc-6.0.11", "des": "Represents a returned update count from a stored procedure call.", "code": "public class SqlReturnUpdateCount extends SqlParameter {\n\tboolean isInputValueProvided(); // This implementation always returns false.\n\tboolean isResultsParameter(); // This implementation always returns true.\n}"}
{"index": 964, "repo": "ignite-core-2.15.0", "des": "This class helps to detect whether tree contains inlined JO type.", "code": "Class InlineObjectBytesDetector {\n\tboolean apply(BPlusTree<IndexRow,IndexRow> tree, BPlusIO<IndexRow> io, long pageAddr, int idx); // Performs inspection or operation on a specified row and returns true if this row is required or matches or /operation successful (depending on the context).\n\tboolean inlineObjectSupported();\n\tstatic boolean objectMayBeInlined(int inlineSize, Collection<IndexKeyDefinition> keyDefs); // Static analyze inline_size and inline columns set.\n}"}
{"index": 17451, "repo": "spring-security-config-6.1.2", "des": "Configures an AuthenticationManagerBuilder to have JDBC authentication.", "code": "public class JdbcUserDetailsManagerConfigurer<B extends ProviderManagerBuilder<B>> extends UserDetailsManagerConfigurer<B,JdbcUserDetailsManagerConfigurer<B>> {\n\tJdbcUserDetailsManagerConfigurer<B> authoritiesByUsernameQuery(String query); // Sets the query to be used for finding a user's authorities by their username.\n\tJdbcUserDetailsManagerConfigurer<B> dataSource(DataSource dataSource); // Populates the DataSource to be used.\n\tprotected org.springframework.jdbc.datasource.init.DatabasePopulator getDatabasePopulator();\n\torg.springframework.security.provisioning.JdbcUserDetailsManager getUserDetailsService(); // Gets the UserDetailsService that is used with the DaoAuthenticationProvider\n\tJdbcUserDetailsManagerConfigurer<B> groupAuthoritiesByUsername(String query); // An SQL statement to query user's group authorities given a username.\n\tprotected void initUserDetailsService(); // Populates the users that have been added.\n\tJdbcUserDetailsManagerConfigurer<B> rolePrefix(String rolePrefix); // A non-empty string prefix that will be added to role strings loaded from persistent storage (default is \"\").\n\tJdbcUserDetailsManagerConfigurer<B> userCache(org.springframework.security.core.userdetails.UserCache userCache); // Defines the UserCache to use\n\tJdbcUserDetailsManagerConfigurer<B> usersByUsernameQuery(String query); // Sets the query to be used for finding a user by their username.\n\tJdbcUserDetailsManagerConfigurer<B> withDefaultSchema(); // Populates the default schema that allows users and authorities to be stored.\n}"}
{"index": 5262, "repo": "druid-processing-26.0.0", "des": "Utility methods used by various entities that read data from Frame objects.", "code": "Class FrameReaderUtils {\n\tstatic int compareByteArraysUnsigned(byte[] array1, int position1, int length1, byte[] array2, int position2, int length2); // Compares two byte arrays using unsigned byte ordering.\n\tstatic int compareMemoryToByteArrayUnsigned(org.apache.datasketches.memory.Memory memory, long position1, long length1, byte[] array, int position2, int length2); // Compares Memory with a byte array using unsigned byte ordering.\n\tstatic int compareMemoryUnsigned(org.apache.datasketches.memory.Memory memory1, long position1, long length1, org.apache.datasketches.memory.Memory memory2, long position2, long length2); // Compares two Memory ranges using unsigned byte ordering.\n\tstatic Supplier<MemoryRange<org.apache.datasketches.memory.Memory>> makeRowMemorySupplier(ColumnSelectorFactory columnSelectorFactory, RowSignature expectedSignature); // Returns a direct row memory supplier if mayBeAbleToSelectRowMemory(org.apache.druid.segment.ColumnSelectorFactory), otherwise returns null.\n\tstatic ByteBuffer readByteBuffer(org.apache.datasketches.memory.Memory memory, long dataStart, int dataLength); // Returns a ByteBuffer containing data from the provided Memory.\n}"}
{"index": 3644, "repo": "hive-serde-4.0.0-alpha-2", "des": "There are limited number of Primitive Types.", "code": "Class PrimitiveTypeInfo {\n\tboolean equals(Object obj);\n\tObjectInspector.Category getCategory(); // Returns the category of this TypeInfo.\n\tPrimitiveObjectInspector.PrimitiveCategory getPrimitiveCategory();\n\tClass<?> getPrimitiveJavaClass();\n\tPrimitiveObjectInspectorUtils.PrimitiveTypeEntry getPrimitiveTypeEntry();\n\tClass<?> getPrimitiveWritableClass();\n\tString getTypeName(); // A String representation of the TypeInfo.\n\tvoid setTypeName(String typeName);\n}"}
{"index": 936, "repo": "ignite-core-2.15.0", "des": "An object that measures elapsed time in nanoseconds.", "code": "Class IgniteStopwatch {\n\tstatic IgniteStopwatch createStarted(); // Creates (and starts) a new stopwatch using System.nanoTime() as its time source.\n\tstatic IgniteStopwatch createStarted(IgniteTicker ticker); // Creates (and starts) a new stopwatch, using the specified time source.\n\tstatic IgniteStopwatch createUnstarted(); // Creates (but does not start) a new stopwatch using System.nanoTime() as its time source.\n\tstatic IgniteStopwatch createUnstarted(IgniteTicker ticker); // Creates (but does not start) a new stopwatch, using the specified time source.\n\tDuration elapsed(); // Returns the current elapsed time shown on this stopwatch as a Duration.\n\tlong elapsed(TimeUnit desiredUnit); // Returns the current elapsed time shown on this stopwatch, expressed in the desired time unit, with any fraction rounded down.\n\tboolean isRunning(); // Returns true if start() has been called on this stopwatch, and stop() has not been called since the last call to start().\n\tstatic void logTime(IgniteLogger log, String operationName, IgniteThrowableRunner operation); // Execution given operation and calculation it time.\n\tIgniteStopwatch reset(); // Sets the elapsed time for this stopwatch to zero, and places it in a stopped state.\n\tIgniteStopwatch start(); // Starts the stopwatch.\n\tIgniteStopwatch stop(); // Stops the stopwatch.\n}"}
{"index": 3731, "repo": "kafka-streams-3.5.0", "des": "The response object for interactive queries.", "code": "Class StateQueryResult<R> {\n\tvoid addResult(int partition, QueryResult<R> r); // Set the result for a partitioned store query.\n\tQueryResult<R> getGlobalResult(); // The query's result for global store queries.\n\tQueryResult<R> getOnlyPartitionResult(); // For queries that are expected to match records in only one partition, returns the result.\n\tMap<Integer,QueryResult<R>> getPartitionResults(); // The query's result for each partition that executed the query.\n\tPosition getPosition(); // The position of the state store at the moment it executed the query.\n\tvoid setGlobalResult(QueryResult<R> r); // Set the result for a global store query.\n}"}
{"index": 11892, "repo": "spring-kafka-3.0.9", "des": "Called whenever a producer is added or removed.", "code": "public static interface ProducerFactory.Listener<K,V> {\n\tdefault void producerAdded(String id, org.apache.kafka.clients.producer.Producer<K,V> producer); // A new producer was created.\n\tdefault void producerRemoved(String id, org.apache.kafka.clients.producer.Producer<K,V> producer); // An existing producer was removed.\n}"}
{"index": 5609, "repo": "org.apache.karaf.main-2.4.4", "des": "A Framework exception used to indicate that a filter string has an invalid syntax.", "code": "Class InvalidSyntaxException {\n\tThrowable getCause(); // Returns the cause of this exception or null if no cause was set.\n\tString getFilter(); // Returns the filter string that generated the InvalidSyntaxException object.\n\tThrowable initCause(Throwable cause); // Initializes the cause of this exception to the specified value.\n}"}
{"index": 1379, "repo": "nutch-2.4", "des": "This class holds the rules which were parsed from a robots.", "code": "Interface RobotRules {\n\tlong getCrawlDelay(); // Get Crawl-Delay, in milliseconds.\n\tlong getExpireTime(); // Get expire time\n\tboolean isAllowed(java.net.URL url); // Returns false if the robots.txt file prohibits us from accessing the given url, or true otherwise.\n}"}
{"index": 6353, "repo": "curator-framework-5.5.0", "des": "Data about the calling API that violated the schema.", "code": "Class SchemaViolation.ViolatorData {\n\tList<org.apache.zookeeper.data.ACL> getAcl(); // The ACLs used in the API or null\n\tbyte[] getData(); // The data used in the API or null\n\tString getPath(); // The path used in the API or null\n}"}
{"index": 11627, "repo": "spring-websocket-6.0.11", "des": "Interceptor for WebSocket handshake requests.", "code": "public interface HandshakeInterceptor {\n\tvoid afterHandshake(org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception); // Invoked after the handshake is done.\n\tboolean beforeHandshake(org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response, WebSocketHandler wsHandler, Map<String,Object> attributes); // Invoked before the handshake is processed.\n}"}
{"index": 5037, "repo": "commons-collections-3.2.2", "des": "A Comparator that will compare nulls to be either lower or higher than other objects.", "code": "Class NullComparator {\n\tint compare(Object o1, Object o2); // Perform a comparison between two objects.\n\tboolean equals(Object obj); // Determines whether the specified object represents a comparator that is equal to this comparator.\n}"}
{"index": 15944, "repo": "spring-rabbit-3.0.6", "des": "A RepublishMessageRecoverer supporting publisher confirms and returns.", "code": "public class RepublishMessageRecovererWithConfirms extends RepublishMessageRecoverer {\n\tprotected void doSend(String exchange, String routingKey, org.springframework.amqp.core.Message message); // Send the message.\n\tvoid setConfirmTimeout(long confirmTimeout); // Set the confirm timeout; default 10 seconds.\n}"}
{"index": 17277, "repo": "groovy-4.0.13", "des": "A convenience front end for getting standard compilations done.", "code": "public class Compiler extends Object {\n\tvoid compile(File file); // Compiles a single File.\n\tvoid compile(File[] files); // Compiles a series of Files.\n\tvoid compile(String[] files); // Compiles a series of Files from file names.\n\tvoid compile(String name, String code); // Compiles a string of code.\n}"}
{"index": 5806, "repo": "iceberg-core-1.3.0", "des": "TableOperations implementation for file systems that support atomic rename.", "code": "Class HadoopTableOperations {\n\tvoid commit(TableMetadata base, TableMetadata metadata); // Replace the base table metadata with a new version.\n\tTableMetadata current(); // Return the currently loaded table metadata, without checking for updates.\n\tprotected org.apache.hadoop.fs.FileSystem getFileSystem(org.apache.hadoop.fs.Path path, org.apache.hadoop.conf.Configuration hadoopConf);\n\torg.apache.iceberg.io.FileIO io(); // Returns a FileIO to read and write table data and metadata files.\n\torg.apache.iceberg.io.LocationProvider locationProvider(); // Returns a LocationProvider that supplies locations for new new data files.\n\tjava.lang.String metadataFileLocation(java.lang.String fileName); // Given the name of a metadata file, obtain the full path of that file using an appropriate base location of the implementation's choosing.\n\tTableMetadata refresh(); // Return the current table metadata after checking for updates.\n\tTableOperations temp(TableMetadata uncommittedMetadata); // Return a temporary TableOperations instance that uses configuration from uncommitted metadata.\n}"}
{"index": 15711, "repo": "camel-api-4.0.0-RC1", "des": "Used for introspecting beans properties via Java reflection; such as extracting current property values, or updating one or more properties etc.", "code": "public interface BeanIntrospection extends StaticService, AfterPropertiesConfigured {\n\tBeanIntrospection.ClassInfo cacheClass(Class<?> clazz); // Introspects the given class.\n\tvoid clearCache(); // Clears the introspection cache.\n\tSet<Method> findSetterMethods(Class<?> clazz, String name, boolean allowBuilderPattern, boolean allowPrivateSetter, boolean ignoreCase); // Find all the setter methods on the class\n\tlong getCachedClassesCounter(); // Number of classes in the introspection cache.\n\tlong getInvokedCounter(); // Number of times bean introspection has been invoked\n\tLoggingLevel getLoggingLevel(); // Logging level used for logging introspection usage.\n\tObject getOrElseProperty(Object target, String propertyName, Object defaultValue, boolean ignoreCase); // Gets the property or else returning the default value.\n\tboolean getProperties(Object target, Map<String,Object> properties, String optionPrefix); // Will inspect the target for properties.\n\tboolean getProperties(Object target, Map<String,Object> properties, String optionPrefix, boolean includeNull); // Will inspect the target for properties.\n\tMethod getPropertyGetter(Class<?> type, String propertyName, boolean ignoreCase); // Gets the getter method for the property.\n\tMethod getPropertySetter(Class<?> type, String propertyName); // Gets the setter method for the property.\n\tboolean isExtendedStatistics(); // Whether to gather extended statistics for introspection usage.\n\tvoid resetCounters(); // Reset the statistics counters.\n\tvoid setExtendedStatistics(boolean extendedStatistics); // Whether to gather extended statistics for introspection usage.\n\tvoid setLoggingLevel(LoggingLevel loggingLevel); // Logging level used for logging introspection usage.\n\tboolean setProperty(CamelContext context, Object target, String name, Object value); // This method supports three modes to set a property: 1.\n\tboolean setProperty(CamelContext context, TypeConverter typeConverter, Object target, String name, Object value, String refName, boolean allowBuilderPattern, boolean allowPrivateSetter, boolean ignoreCase); // This method supports three modes to set a property: 1.\n}"}
{"index": 15398, "repo": "spring-security-crypto-6.1.2", "des": "Implementation of PasswordEncoder that uses the Argon2 hashing function.", "code": "public class Argon2PasswordEncoder extends Object implements PasswordEncoder {\n\tstatic Argon2PasswordEncoder defaultsForSpringSecurity_v5_2(); // Deprecated. Use defaultsForSpringSecurity_v5_8() instead\n\tstatic Argon2PasswordEncoder defaultsForSpringSecurity_v5_8(); // Constructs an Argon2 password encoder with a salt length of 16 bytes, a hash length of 32 bytes, parallelism of 1, memory cost of 1 << 14 and 2 iterations.\n\tString encode(CharSequence rawPassword); // Encode the raw password.\n\tboolean matches(CharSequence rawPassword, String encodedPassword); // Verify the encoded password obtained from storage matches the submitted raw password after it too is encoded.\n\tboolean upgradeEncoding(String encodedPassword); // Returns true if the encoded password should be encoded again for better security, else false.\n}"}
{"index": 2486, "repo": "exoplayer-r2.3.1", "des": "A DataSource for reading from a content URI.", "code": "Class ContentDataSource {\n\tvoid close(); // Closes the source.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int readLength); // Reads up to length bytes of data and stores them into buffer, starting at index offset.\n}"}
{"index": 6855, "repo": "calcite-core-1.34.0", "des": "Utilities for processing Enumerable collections.", "code": "Class Enumerables {\n\tstatic <E,TKey,TResult>org.apache.calcite.linq4j.Enumerable<TResult> match(org.apache.calcite.linq4j.Enumerable<E> enumerable, org.apache.calcite.linq4j.function.Function1<E,TKey> keySelector, Matcher<E> matcher, Enumerables.Emitter<E,TResult> emitter, int history, int future);\n\tstatic <E> org.apache.calcite.linq4j.Enumerable<E> slice0(org.apache.calcite.linq4j.Enumerable<E[]> enumerable); // Converts an enumerable over singleton arrays into the enumerable of their first elements.\n\tstatic org.apache.calcite.linq4j.Enumerable<Row> toRow(org.apache.calcite.linq4j.Enumerable<Object[]> enumerable); // Converts an Enumerable over object arrays into an Enumerable over Row objects.\n\tstatic Supplier<org.apache.calcite.linq4j.Enumerable<Row>> toRow(Supplier<org.apache.calcite.linq4j.Enumerable<Object[]>> supplier); // Converts a supplier of an Enumerable over object arrays into a supplier of an Enumerable over Row objects.\n}"}
{"index": 2304, "repo": "hive-exec-4.0.0-alpha-2", "des": "Vectorized GROUP BY operator implementation.", "code": "Class VectorGroupByOperator {\n\tvoid closeOp(boolean aborted); // Operator specific close routine.\n\tvoid configureJobConf(org.apache.hadoop.mapred.JobConf job);\n\tvoid endGroup();\n\tVectorAggregateExpression[] getAggregators();\n\tVectorizationContext getInputVectorizationContext();\n\tVectorExpression[] getKeyExpressions();\n\tlong getMaxMemory();\n\tString getName();\n\tstatic String getOperatorName();\n\tVectorizationContext getOutputVectorizationContext();\n\tOperatorType getType(); // Return the type of the specific operator among the types in OperatorType.\n\tVectorDesc getVectorDesc();\n\tprotected void initializeOp(org.apache.hadoop.conf.Configuration hconf); // Operator specific initialization.\n\tvoid process(Object row, int tag); // Process the row.\n\tvoid setAggregators(VectorAggregateExpression[] aggregators);\n\tvoid setKeyExpressions(VectorExpression[] keyExpressions);\n\tvoid setNextVectorBatchGroupStatus(boolean isLastGroupBatch);\n\tvoid startGroup();\n}"}
{"index": 2144, "repo": "hive-exec-4.0.0-alpha-2", "des": "Hive's pluggable authorization provider interface.", "code": "Interface HiveAuthorizationProvider {\n\tvoid authorize(org.apache.hadoop.hive.metastore.api.Database db, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a database object.\n\tvoid authorize(Partition part, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a hive partition object.\n\tvoid authorize(Table table, Partition part, List<String> columns, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a list of columns.\n\tvoid authorize(Table table, Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv); // Authorization privileges against a hive table object.\n\tvoid authorizeDbLevelOperations(Privilege[] readRequiredPriv, Privilege[] writeRequiredPriv, Collection<ReadEntity> inputs, Collection<WriteEntity> outputs); // Authorization user level privileges.\n\tHiveAuthenticationProvider getAuthenticator();\n\tdefault HivePolicyProvider getHivePolicyProvider();\n\tvoid init(org.apache.hadoop.conf.Configuration conf);\n\tvoid setAuthenticator(HiveAuthenticationProvider authenticator);\n}"}
{"index": 18090, "repo": "spring-ws-core-4.0.5", "des": "Implementation of MethodArgumentResolver that supports SoapMessage, SoapBody, SoapEnvelope, and SoapHeader.", "code": "public class SoapMethodArgumentResolver extends Object implements MethodArgumentResolver {\n\tObject resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter is supported by this resolver.\n}"}
{"index": 6825, "repo": "calcite-core-1.34.0", "des": "Default implementation of DirectedGraph.", "code": "Class DefaultDirectedGraph<V,E extends DefaultEdge> {\n\tE addEdge(V vertex, V targetVertex); // Adds an edge to this graph.\n\tboolean addVertex(V vertex); // Adds a vertex to this graph.\n\tstatic <V> DefaultDirectedGraph<V,DefaultEdge> create();\n\tstatic <V,E extends DefaultEdge>DefaultDirectedGraph<V,E> create(DirectedGraph.EdgeFactory<V,E> edgeFactory);\n\tSet<E> edgeSet();\n\tE getEdge(V source, V target);\n\tList<E> getInwardEdges(V target);\n\tList<E> getOutwardEdges(V source);\n\tprotected org.apache.calcite.util.graph.DefaultDirectedGraph.VertexInfo<V,E> getVertex(V vertex);\n\tvoid removeAllVertices(Collection<V> collection); // Removes from this graph all vertices that are in collection, and the edges into and out of those vertices.\n\tboolean removeEdge(V source, V target);\n\tString toStringUnordered();\n\tSet<V> vertexSet();\n}"}
{"index": 425, "repo": "phoenix-core-5.1.3", "des": "Function to return Rowkey(s) of result(s) in a printable/usable format.", "code": "Class RowKeyBytesStringFunction {\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tString getName();\n\tboolean isStateless();\n\tFunctionExpression.OrderPreserving preservesOrder(); // Determines whether or not the result of the function invocation will be ordered in the same way as the input to the function.\n}"}
{"index": 4989, "repo": "commons-collections-3.2.2", "des": "Closure implementation that always throws an exception.", "code": "Class ExceptionClosure {\n\tvoid execute(Object input); // Always throw an exception.\n\tstatic Closure getInstance(); // Factory returning the singleton instance.\n}"}
{"index": 17389, "repo": "groovy-4.0.13", "des": "An interface for things that can supply (and potentially resupply) a Reader on a source stream.", "code": "public interface ReaderSource extends HasCleanup {\n\tboolean canReopenSource(); // Returns true if the source can be restarted (ie.\n\tvoid cleanup(); // Cleans up any cached resources used by getLine().\n\tString getLine(int lineNumber, Janitor janitor); // Returns a line from the source, or null, if unavailable.\n\tReader getReader(); // Returns a new Reader on the underlying source object.\n\tURI getURI(); // Returns a URI for this source.\n}"}
{"index": 6690, "repo": "lucene-analyzers-common-8.11.2", "des": "Wrap a CommonGramsFilter optimizing phrase queries by only returning single words when they are not a member of a bigram.", "code": "Class CommonGramsQueryFilter {\n\tboolean incrementToken(); // Output bigrams whenever possible to optimize queries.\n\tboolean isGramType(); // Convenience method to check if the current type is a gram type\n\tvoid reset();\n}"}
{"index": 18614, "repo": "hibernate-core-5.6.15.Final", "des": "Describes the target(s) of schema create, drop and migrate actions.", "code": "Interface TargetDescriptor {\n\tScriptTargetOutput getScriptTargetOutput(); // If getTargetTypes() includes scripts, return a representation of the script file to write to.\n\tjava.util.EnumSet<TargetType> getTargetTypes(); // The target type described here.\n}"}
{"index": 10311, "repo": "spring-core-6.0.11", "des": "Strategy for generating code for arguments based on their type.", "code": "public static interface MethodReference.ArgumentCodeGenerator {\n\tdefault MethodReference.ArgumentCodeGenerator and(Class<?> argumentType, String argumentCode); // Create a new composed MethodReference.ArgumentCodeGenerator by combining this generator with supporting the given argument type.\n\tdefault MethodReference.ArgumentCodeGenerator and(MethodReference.ArgumentCodeGenerator argumentCodeGenerator); // Create a new composed MethodReference.ArgumentCodeGenerator by combining this generator with the given generator.\n\tstatic MethodReference.ArgumentCodeGenerator from(Function<org.springframework.javapoet.TypeName,org.springframework.javapoet.CodeBlock> function); // Factory method that creates a new MethodReference.ArgumentCodeGenerator from a lambda friendly function.\n\torg.springframework.javapoet.CodeBlock generateCode(org.springframework.javapoet.TypeName argumentType); // Generate the code for the given argument type.\n\tstatic MethodReference.ArgumentCodeGenerator none(); // Factory method that returns an MethodReference.ArgumentCodeGenerator that always returns null.\n\tstatic MethodReference.ArgumentCodeGenerator of(Class<?> argumentType, String argumentCode); // Factory method that can be used to create an MethodReference.ArgumentCodeGenerator that support only the given argument type.\n}"}
{"index": 10175, "repo": "spring-integration-smb-6.1.2", "des": "A RemoteFileInboundChannelAdapterSpec for an SmbInboundFileSynchronizingMessageSource.", "code": "public class SmbInboundChannelAdapterSpec extends org.springframework.integration.file.dsl.RemoteFileInboundChannelAdapterSpec<jcifs.smb.SmbFile,SmbInboundChannelAdapterSpec,SmbInboundFileSynchronizingMessageSource> {\n\tSmbInboundChannelAdapterSpec patternFilter(String pattern); // Specify a simple pattern to match remote files.\n\tSmbInboundChannelAdapterSpec regexFilter(String regex); // Specify a regular expression to match remote files.\n}"}
{"index": 7204, "repo": "calcite-core-1.34.0", "des": "Definition of the \"FLOOR\" and \"CEIL\" built-in SQL functions.", "code": "Class SqlFloorFunction {\n\tSqlMonotonicity getMonotonicity(SqlOperatorBinding call); // Returns whether a call to this operator is monotonic.\n\tstatic SqlCall replaceTimeUnitOperand(SqlCall call, String literal, SqlParserPos pos); // Copies a SqlCall, replacing the time unit operand with the given literal.\n\tvoid unparse(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec); // Writes a SQL representation of a call to this operator to a writer, including parentheses if the operators on either side are of greater precedence.\n\tstatic void unparseDatetimeFunction(SqlWriter writer, SqlCall call, String funName, Boolean datetimeFirst); // Most dialects that natively support datetime floor will use this.\n\tvoid validateCall(SqlCall call, SqlValidator validator, SqlValidatorScope scope, SqlValidatorScope operandScope); // Validates a call to this operator.\n}"}
{"index": 6831, "repo": "calcite-core-1.34.0", "des": "Specific type of RelRecordType that corresponds to a dynamic table, where columns are created as they are requested.", "code": "Class DynamicRecordType {\n\tstatic boolean isDynamicStarColName(String name); // Returns true if the column name starts with DYNAMIC_STAR_PREFIX.\n\tboolean isDynamicStruct(); // Returns whether this type has dynamic structure (for \"schema-on-read\" table).\n}"}
{"index": 3130, "repo": "hive-storage-api-4.0.0-alpha-2", "des": "This class represents a void (or no) type column vector.", "code": "Class VoidColumnVector {\n\tvoid copySelected(boolean selectedInUse, int[] sel, int size, ColumnVector outputColVector);\n\tvoid flatten(boolean selectedInUse, int[] sel, int size);\n\tvoid setElement(int outputElementNum, int inputElementNum, ColumnVector inputColVector); // Set the element in this column vector from the given input vector.\n\tvoid stringifyValue(StringBuilder buffer, int row); // Print the value for this column into the given string builder.\n}"}
{"index": 7016, "repo": "calcite-core-1.34.0", "des": "A SqlDialect implementation for the PostgreSQL database.", "code": "Class PostgresqlSqlDialect {\n\t@Nullable SqlNode getCastSpec(RelDataType type); // Returns SqlNode for type in \"cast(column as type)\", which might be different between databases by type name, precision etc.\n\tboolean requiresAliasForFromItems(); // Whether a sub-query in the FROM clause must have an alias.\n\tboolean supportsCharSet(); // Returns whether the dialect supports character set names as part of a data type, for instance VARCHAR(30) CHARACTER SET `ISO-8859-1`.\n\tboolean supportsFunction(SqlOperator operator, RelDataType type, List<RelDataType> paramTypes); // Returns whether this dialect supports a given function or operator.\n\tboolean supportsGroupByLiteral(); // Returns whether the dialect supports GROUP BY literals.\n\tboolean supportsNestedAggregations(); // Returns whether the dialect supports nested aggregations, for instance SELECT SUM(SUM(1)) .\n\tvoid unparseCall(SqlWriter writer, SqlCall call, int leftPrec, int rightPrec);\n}"}
{"index": 12734, "repo": "spring-data-mongodb-4.1.2", "des": "Interface definition for structures defined in GeoJSON format.", "code": "public interface GeoJson<T extends Iterable<?>> {\n\tT getCoordinates(); // The value of the coordinates member is always an Iterable.\n\tString getType(); // String value representing the type of the GeoJson object.\n}"}
{"index": 11464, "repo": "spring-restdocs-core-3.0.0", "des": "Abstract TemplatedSnippet subclass that provides a base for snippets that document a RESTful resource's request or response fields.", "code": "public abstract class AbstractFieldsSnippet extends TemplatedSnippet {\n\tprotected Map<String,Object> createModel(Operation operation); // Create the model that should be used during template rendering to document the given operation.\n\tprotected Map<String,Object> createModelForDescriptor(FieldDescriptor descriptor); // Returns a model for the given descriptor.\n\tprotected abstract byte[] getContent(Operation operation); // Returns the content of the request or response extracted form the given operation.\n\tprotected abstract MediaType getContentType(Operation operation); // Returns the content type of the request or response extracted from the given operation.\n\tprotected final List<FieldDescriptor> getFieldDescriptors(); // Returns the list of FieldDescriptors that will be used to generate the documentation.\n\tprotected final PayloadSubsectionExtractor<?> getSubsectionExtractor(); // Returns the PayloadSubsectionExtractor, if any, used by this snippet.\n\tprotected final boolean isIgnoredUndocumentedFields(); // Returns whether or not this snippet ignores undocumented fields.\n}"}
{"index": 2580, "repo": "exoplayer-r2.3.1", "des": "Defines a group of tracks exposed by a MediaPeriod.", "code": "Class TrackGroup {\n\tboolean equals(java.lang.Object obj);\n\tFormat getFormat(int index); // Returns the format of the track at a given index.\n\tint indexOf(Format format); // Returns the index of the track with the given format in the group.\n}"}
{"index": 9114, "repo": "hbase-server-3.0.0-alpha-4", "des": "A procedure used to take snapshot on tables.", "code": "Class SnapshotProcedure {\n\tprotected Procedure.LockState acquireLock(MasterProcedureEnv env);\n\tprotected void afterReplay(MasterProcedureEnv env);\n\tprotected void deserializeStateData(ProcedureStateSerializer serializer);\n\tprotected StateMachineProcedure.Flow executeFromState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.SnapshotState state);\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.SnapshotState getInitialState();\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription getSnapshot();\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription getSnapshotDesc();\n\tprotected org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.SnapshotState getState(int stateId);\n\tprotected int getStateId(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.SnapshotState state);\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tTableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tprotected boolean holdLock(MasterProcedureEnv env);\n\tprotected boolean isRollbackSupported(org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.SnapshotState state);\n\tboolean isSnapshotCorrupted();\n\tvoid markSnapshotCorrupted();\n\tprotected void releaseLock(MasterProcedureEnv env);\n\tprotected void rollbackState(MasterProcedureEnv env, org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.SnapshotState state);\n\tprotected void serializeStateData(ProcedureStateSerializer serializer);\n\tprotected boolean setTimeoutFailure(MasterProcedureEnv env);\n\tvoid toStringClassDetails(StringBuilder builder);\n}"}
{"index": 10384, "repo": "spring-core-6.0.11", "des": "RouteMatcher that delegates to a PathMatcher.", "code": "public class SimpleRouteMatcher extends Object implements RouteMatcher {\n\tString combine(String pattern1, String pattern2); // Combines two patterns into a single pattern.\n\tPathMatcher getPathMatcher(); // Return the underlying PathMatcher delegate.\n\tComparator<String> getPatternComparator(RouteMatcher.Route route); // Given a route, return a Comparator suitable for sorting patterns in order of explicitness for that route, so that more specific patterns come before more generic ones.\n\tboolean isPattern(String route); // Whether the given route contains pattern syntax which requires the RouteMatcher.match(String, Route) method, or if it is a regular String that could be compared directly to others.\n\tboolean match(String pattern, RouteMatcher.Route route); // Match the given route against the given pattern.\n\tMap<String,String> matchAndExtract(String pattern, RouteMatcher.Route route); // Match the pattern to the route and extract template variables.\n\tRouteMatcher.Route parseRoute(String route); // Return a parsed representation of the given route.\n}"}
{"index": 18732, "repo": "opennlp-tools-2.2.0", "des": "The base class for readers of QN models.", "code": "Class QNModelReader {\n\tvoid checkModelType(); // Checks the model type via the the underlying DataReader.\n\tQNModel constructModel(); // Retrieves a model from disk.\n}"}
{"index": 5796, "repo": "iceberg-core-1.3.0", "des": "A strategy for the action to convert equality delete to position deletes.", "code": "Interface ConvertEqualityDeleteStrategy {\n\tjava.lang.Iterable<org.apache.iceberg.DeleteFile> convertDeleteFiles(java.lang.Iterable<org.apache.iceberg.DeleteFile> deleteFilesToConvert); // Define how to convert the deletes.\n\tjava.lang.String name(); // Returns the name of this convert deletes strategy\n\tConvertEqualityDeleteStrategy options(java.util.Map<java.lang.String,java.lang.String> options); // Sets options to be used with this strategy\n\tjava.lang.Iterable<java.lang.Iterable<org.apache.iceberg.FileScanTask>> planDeleteFileGroups(java.lang.Iterable<org.apache.iceberg.FileScanTask> dataFiles); // Groups delete files into lists which will be processed in a single executable unit.\n\tjava.lang.Iterable<org.apache.iceberg.DeleteFile> selectDeleteFiles(java.lang.Iterable<org.apache.iceberg.DeleteFile> deleteFiles); // Select the delete files to convert.\n\torg.apache.iceberg.Table table(); // Returns the table being modified by this convert strategy\n\tjava.util.Set<java.lang.String> validOptions(); // Returns a set of options which this convert strategy can use.\n}"}
{"index": 17967, "repo": "spring-web-6.0.11", "des": "WebApplicationContext implementation which takes its configuration from XML documents, understood by an XmlBeanDefinitionReader.", "code": "public class XmlWebApplicationContext extends AbstractRefreshableWebApplicationContext {\n\tprotected String[] getDefaultConfigLocations(); // The default location for the root context is \"/WEB-INF/applicationContext.xml\", and \"/WEB-INF/test-servlet.xml\" for a context with the namespace \"test-servlet\" (like for a DispatcherServlet instance with the servlet-name \"test\").\n\tprotected void initBeanDefinitionReader(org.springframework.beans.factory.xml.XmlBeanDefinitionReader beanDefinitionReader); // Initialize the bean definition reader used for loading the bean definitions of this context.\n\tprotected void loadBeanDefinitions(org.springframework.beans.factory.support.DefaultListableBeanFactory beanFactory); // Loads the bean definitions via an XmlBeanDefinitionReader.\n\tprotected void loadBeanDefinitions(org.springframework.beans.factory.xml.XmlBeanDefinitionReader reader); // Load the bean definitions with the given XmlBeanDefinitionReader.\n}"}
{"index": 12451, "repo": "drill-common-1.21.1", "des": "This class attempts to infer the data type of an unknown data type.", "code": "public class Typifier extends Object {\n\tstatic <T> boolean contains(T[] target, T source); // Checks if a target array contains the source term.\n\tstatic boolean containsAny(CharSequence target, char[] source);\n\tstatic boolean containsAny(CharSequence target, CharSequence source); // Returns true if any of the source characters are found in the target.\n\tstatic LocalDate stringAsDate(String date); // Helper function that attempts to parse a String as a LocalDateTime.\n\tstatic LocalDateTime stringAsDateTime(String date); // Helper function that attempts to parse a String as a LocalDateTime.\n\tstatic Map.Entry<Class,String> typify(String data); // Attempts to classify String input as double, int, char, etc.\n\tstatic Map.Entry<Class,String> typify(String data, boolean bool01, boolean commonTypes, boolean postfixFL, boolean parseDates); // Attempts to determine the best data type for an unknown bit of text.\n}"}
{"index": 15285, "repo": "spring-boot-3.1.1", "des": "Provide git-related information such as commit id and time.", "code": "@ImportRuntimeHints(org.springframework.boot.info.GitProperties.GitPropertiesRuntimeHints.class) public class GitProperties extends InfoProperties {\n\tString getBranch(); // Return the name of the branch or null.\n\tString getCommitId(); // Return the full id of the commit or null.\n\tInstant getCommitTime(); // Return the timestamp of the commit or null.\n\tString getShortCommitId(); // Return the abbreviated id of the commit or null.\n}"}
{"index": 11717, "repo": "spring-data-neo4j-7.1.2", "des": "Contract for a runnable query specification which still can be bound to a specific database and an impersonated user.", "code": "public static interface Neo4jClient.UnboundRunnableSpec extends Neo4jClient.RunnableSpec {\n\tNeo4jClient.RunnableSpecBoundToUser asUser(String asUser); // Pins the previously defined query to an impersonated user.\n\tNeo4jClient.RunnableSpecBoundToDatabase in(String targetDatabase); // Pins the previously defined query to a specific database.\n}"}
{"index": 3576, "repo": "hive-serde-4.0.0-alpha-2", "des": "Enums describing the available String->Bytes encoding available for JSON parsing.", "code": "Enum BinaryEncoding {\n\tstatic BinaryEncoding valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic BinaryEncoding[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 7061, "repo": "calcite-core-1.34.0", "des": "Default implementations of the BuiltInMetadata.", "code": "Class RelMdParallelism {\n\tMetadataDef<BuiltInMetadata.Parallelism> getDef();\n\tBoolean isPhaseTransition(Exchange rel, RelMetadataQuery mq);\n\tBoolean isPhaseTransition(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Parallelism.isPhaseTransition(), invoked using reflection.\n\tBoolean isPhaseTransition(TableScan rel, RelMetadataQuery mq);\n\tBoolean isPhaseTransition(Values rel, RelMetadataQuery mq);\n\tInteger splitCount(RelNode rel, RelMetadataQuery mq); // Catch-all implementation for BuiltInMetadata.Parallelism.splitCount(), invoked using reflection.\n}"}
{"index": 11215, "repo": "wicket-extensions-10.0.0-M1", "des": "This base implementation iterates over all provided ILinkRenderStrategy implementations and applies them to the input text.", "code": "public class LinkParser extends Object implements ILinkParser {\n\tILinkParser addLinkRenderStrategy(String pattern, ILinkRenderStrategy renderStrategy); // Adds a render strategy to the parser.\n\tString parse(String text); // Parses the text and changes it according to the provided ILinkRenderStrategy implementations.\n}"}
{"index": 8811, "repo": "graal-sdk-1.0.0-rc7", "des": "Contains static methods for memory allocation in the stack frame.", "code": "Class StackValue {\n\tstatic <T extends PointerBase>T get(Class<T> structType); // Reserves a block of memory for given CStruct class in the stack frame of the method that calls this intrinsic.\n\tstatic <T extends PointerBase>T get(int size); // Reserves a block of memory in the stack frame of the method that calls this intrinsic.\n\tstatic <T extends PointerBase>T get(int numberOfElements, Class<T> structType); // Reserves a block of memory for array of given CStruct type in the stack frame of the method that calls this intrinsic.\n\tstatic <T extends PointerBase>T get(int numberOfElements, int elementSize); // Utility method that performs size arithmetic, otherwise equivalent to StackValue.get(int).\n}"}
{"index": 5128, "repo": "druid-processing-26.0.0", "des": "Creates ArenaMemoryAllocator on each call to newAllocator().", "code": "Class ArenaMemoryAllocatorFactory {\n\tlong allocatorCapacity(); // Capacity of allocators returned by MemoryAllocatorFactory.newAllocator().\n\tMemoryAllocator newAllocator(); // Returns a new allocator with capacity MemoryAllocatorFactory.allocatorCapacity().\n}"}
{"index": 6758, "repo": "calcite-core-1.34.0", "des": "Abstract base class for implementing Table.", "code": "Class AbstractQueryableTable {\n\tType getElementType(); // Returns the element type of the collection that will implement this table.\n\torg.apache.calcite.linq4j.tree.Expression getExpression(SchemaPlus schema, String tableName, Class clazz); // Generates an expression with which this table can be referenced in generated code.\n}"}
{"index": 8197, "repo": "spring-ws-3.0.10.RELEASE", "des": "Enumeration that represents the standard SOAP Fault codes for use with the JDK 1.", "code": "Enum FaultCode {\n\tQName value();\n\tstatic FaultCode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic FaultCode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 424, "repo": "phoenix-core-5.1.3", "des": "ResultIterator that keeps track of the number of records fetched by each PeekingResultIterator making sure it asks for records from each iterator in a round-robin fashion.", "code": "Class RoundRobinResultIterator {\n\tvoid close();\n\tvoid explain(List<String> planSteps);\n\tvoid explain(List<String> planSteps, ExplainPlanAttributes.ExplainPlanAttributesBuilder explainPlanAttributesBuilder); // Generate ExplainPlan steps and add steps as list of Strings in planSteps argument as readable statement as well as add same generated steps in explainPlanAttributesBuilder so that we prepare ExplainPlan result as an attribute object useful to retrieve individual plan step attributes.\n\tstatic ResultIterator newIterator(List<PeekingResultIterator> iterators, QueryPlan plan);\n\tTuple next(); // Grab the next row's worth of values.\n}"}
{"index": 18263, "repo": "tomcat-api-10.1", "des": "Provides a mechanism for the Coyote connectors to communicate with the AsyncContext.", "code": "Interface AsyncContextCallback {\n\tvoid decrementInProgressAsyncCount(); // Used to notify the Context that async processing has ended.\n\tvoid fireOnComplete();\n\tvoid incrementInProgressAsyncCount(); // Used to notify the Context that async processing has started.\n\tboolean isAvailable(); // Reports if the web application associated with this async request is available.\n}"}
{"index": 9726, "repo": "commons-math3-3.6.1", "des": "Implementation of the multivariate normal (Gaussian) distribution.", "code": "Class MultivariateNormalDistribution {\n\tdouble density(double[] vals); // Returns the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tRealMatrix getCovariances(); // Gets the covariance matrix.\n\tdouble[] getMeans(); // Gets the mean vector.\n\tdouble[] getStandardDeviations(); // Gets the square root of each element on the diagonal of the covariance matrix.\n\tdouble[] sample(); // Generates a random value vector sampled from this distribution.\n}"}
{"index": 2157, "repo": "hive-exec-4.0.0-alpha-2", "des": "HiveRelShuttle to propagate rowIsDeleted column to all HiveRelNodes' rowType in the plan.", "code": "Class HiveRowIsDeletedPropagator {\n\torg.apache.calcite.rel.RelNode propagate(org.apache.calcite.rel.RelNode relNode);\n\torg.apache.calcite.rel.RelNode visit(HiveJoin join); // Create new Join and a Project on top of it.\n\torg.apache.calcite.rel.RelNode visit(HiveProject project); // Create a new Project with original projected columns plus add rowIsDeleted as last column referencing the last column of the input RelNode.\n\torg.apache.calcite.rel.RelNode visit(HiveTableScan scan); // Create a Projection on top of TS that contains all columns from TS.\n}"}
{"index": 8783, "repo": "graal-sdk-1.0.0-rc7", "des": "An auto-closable that holds a Java CharSequence as a null-terminated C char[] array.", "code": "Interface CTypeConversion.CCharPointerHolder {\n\tvoid close(); // Discards the C pointer.\n\tCCharPointer get(); // Returns the C pointer to the null-terminated C char[] array.\n}"}
{"index": 15714, "repo": "camel-api-4.0.0-RC1", "des": "A predicate which evaluates a binary expression.", "code": "public interface BinaryPredicate extends Predicate {\n\tExpression getLeft(); // Gets the left hand side expression\n\tString getOperator(); // Gets the operator\n\tExpression getRight(); // Gets the right hand side expression\n\tString matchesReturningFailureMessage(Exchange exchange); // Evaluates the predicate on the message exchange and returns null if this exchange matches the predicate.\n}"}
{"index": 11027, "repo": "spring-shell-core-3.1.2", "des": "Context interface on a selector component sharing content.", "code": "public static interface AbstractSelectorComponent.SelectorComponentContext<T,I extends Nameable & Matchable & Itemable<T>,C extends AbstractSelectorComponent.SelectorComponentContext<T,I,C>> extends ComponentContext<C> {\n\tstatic <T, I extends Nameable & Matchable & Itemable<T>, C extends AbstractSelectorComponent.SelectorComponentContext<T, I, C>>AbstractSelectorComponent.SelectorComponentContext<T,I,C> empty(); // Creates an empty AbstractSelectorComponent.SelectorComponentContext.\n\tInteger getCursorRow(); // Gets a cursor row.\n\tString getInput(); // Gets an input.\n\tList<I> getItems(); // Gets an items.\n\tList<AbstractSelectorComponent.ItemState<I>> getItemStates(); // Gets an item states\n\tList<AbstractSelectorComponent.ItemState<I>> getItemStateView(); // Gets an item state view.\n\tString getName(); // Gets a name.\n\tList<I> getResultItems(); // Gets a result items.\n\tboolean isResult(); // Return if there is a result.\n\tvoid setCursorRow(Integer cursorRow); // Sets a cursor row.\n\tvoid setInput(String input); // Sets an input.\n\tvoid setItems(List<I> items); // Sets an items.\n\tvoid setItemStates(List<AbstractSelectorComponent.ItemState<I>> itemStateView); // Sets an item states.\n\tvoid setItemStateView(List<AbstractSelectorComponent.ItemState<I>> itemStateView); // Sets an item state view\n\tvoid setName(String name); // Sets a name\n\tvoid setResultItems(List<I> items); // Sets a result items.\n}"}
{"index": 15345, "repo": "spring-boot-3.1.1", "des": "Strategy interface located through SpringFactoriesLoader and used to load a PropertySource.", "code": "public interface PropertySourceLoader {\n\tString[] getFileExtensions(); // Returns the file extensions that the loader supports (excluding the '.').\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource); // Load the resource into one or more property sources.\n}"}
{"index": 5751, "repo": "freemarker-2.3.32", "des": "Performs caching and on-demand loading of the templates.", "code": "Class TemplateCache {\n\tvoid clear(); // Removes all entries from the cache, forcing reloading of templates on subsequent getTemplate(String, Locale, String, boolean) calls.\n\tCacheStorage getCacheStorage();\n\tlong getDelay(); // Gets the delay in milliseconds between checking for newer versions of a template source.\n\tboolean getLocalizedLookup(); // Returns if localized template lookup is enabled or not.\n\tTemplateCache.MaybeMissingTemplate getTemplate(java.lang.String name, java.util.Locale locale, java.lang.Object customLookupCondition, java.lang.String encoding, boolean parseAsFTL); // Retrieves the template with the given name (and according the specified further parameters) from the template cache, loading it into the cache first if it's missing/staled.\n\tTemplateConfigurationFactory getTemplateConfigurations();\n\tTemplateLoader getTemplateLoader();\n\tTemplateLookupStrategy getTemplateLookupStrategy();\n\tTemplateNameFormat getTemplateNameFormat();\n\tvoid removeTemplate(java.lang.String name, java.util.Locale locale, java.lang.Object customLookupCondition, java.lang.String encoding, boolean parse); // Removes an entry from the cache, hence forcing the re-loading of it when it's next time requested.\n\tvoid removeTemplate(java.lang.String name, java.util.Locale locale, java.lang.String encoding, boolean parse); // Same as removeTemplate(String, Locale, Object, String, boolean) with null customLookupCondition.\n\tvoid setDelay(long delay); // Sets the delay in milliseconds between checking for newer versions of a template sources.\n\tvoid setLocalizedLookup(boolean localizedLookup); // Setis if localized template lookup is enabled or not.\n}"}
{"index": 3168, "repo": "commons-jexl3-3.3", "des": "Interface used for setting values that appear to be properties.", "code": "Interface JexlPropertySet {\n\tObject invoke(Object obj, Object arg); // Method used to set the property value of an object.\n\tboolean isCacheable(); // Specifies if this JexlPropertySet is cacheable and able to be reused for this class of object it was returned for.\n\tboolean tryFailed(Object rval); // Checks whether a tryInvoke failed or not.\n\tObject tryInvoke(Object obj, Object key, Object value); // Attempts to reuse this JexlPropertySet, checking that it is compatible with the actual set of arguments.\n}"}
{"index": 614, "repo": "ignite-core-2.15.0", "des": "Convenience adapter for ComputeJob implementations.", "code": "Class ComputeJobAdapter {\n\t<T> T argument(int idx); // Gets job argument.\n\tprotected @Nullable Object[] arguments(); // Gets array of job arguments.\n\tObject call();\n\tvoid cancel(); // This method is called when system detects that completion of this job can no longer alter the overall outcome (for example, when parent task has already reduced the results).\n\tprotected boolean isCancelled(); // This method tests whether or not this job was cancelled.\n\tvoid setArguments(Object... args); // Sets given arguments.\n}"}
{"index": 658, "repo": "ignite-core-2.15.0", "des": "Listener for DistributedMetaStorage lifecycle events.", "code": "Interface DistributedMetastorageLifecycleListener {\n\tdefault void onReadyForRead(ReadableDistributedMetaStorage metastorage); // Called when global metastorage is ready for reading.\n\tdefault void onReadyForWrite(DistributedMetaStorage metastorage); // Called when global metastorage is available for writing.\n}"}
{"index": 5913, "repo": "hadoop-yarn-server-common-3.3.6", "des": "SetSubClusterPolicyConfigurationRequest is a request to the FederationPolicyStore to set the policy configuration corresponding to a queue.", "code": "Class SetSubClusterPolicyConfigurationRequest {\n\tabstract SubClusterPolicyConfiguration getPolicyConfiguration(); // Get the policy configuration assigned to the queue.\n\tstatic SetSubClusterPolicyConfigurationRequest newInstance(SubClusterPolicyConfiguration policy);\n\tabstract void setPolicyConfiguration(SubClusterPolicyConfiguration policyConfiguration); // Set the policyConfiguration configuration for the queue.\n}"}
{"index": 33, "repo": "connect-api-3.5.0", "des": "A Header is a key-value pair, and multiple headers can be included with the key, value, and timestamp in each Kafka message.", "code": "Interface Header {\n\tString key(); // The header's key, which is not necessarily unique within the set of headers on a Kafka message.\n\tHeader rename(String key); // Return a new Header object that has the same schema and value but with the supplied key.\n\tSchema schema(); // Return the Schema associated with this header, if there is one.\n\tObject value(); // Get the header's value as deserialized by Connect's header converter.\n\tHeader with(Schema schema, Object value); // Return a new Header object that has the same key but with the supplied value.\n}"}
{"index": 9200, "repo": "fontbox-3.0.0-beta1", "des": "This class is based on code from Apache Batik a subproject of Apache XMLGraphics.", "code": "Class GlyfDescript {\n\tint getContourCount(); // Returns the number of contours.\n\tint[] getInstructions(); // Returns the hinting instructions.\n\tvoid resolve(); // Resolve all parts of an composite glyph.\n}"}
{"index": 15845, "repo": "camel-api-4.0.0-RC1", "des": "Controller for managing the lifecycle of all the Route's.", "code": "public interface RouteController extends CamelContextAware, StaticService {\n\t<T extends RouteController>T adapt(Class<T> type); // Adapts this RouteController to the specialized type.\n\tCollection<Route> getControlledRoutes(); // Return the list of routes controlled by this controller.\n\tLoggingLevel getLoggingLevel(); // Gets the logging level used for logging route activity (such as starting and stopping routes).\n\tServiceStatus getRouteStatus(String routeId); // Returns the current status of the given route\n\tboolean isReloadingRoutes(); // Indicates whether current thread is reloading route(s).\n\tboolean isStartingRoutes(); // Indicates whether current thread is starting route(s).\n\tboolean isSupervising(); // Whether this route controller is a regular or supervising controller.\n\tvoid reloadAllRoutes(); // Reloads all the routes\n\tvoid removeAllRoutes(); // Stops and removes all the routes\n\tvoid resumeRoute(String routeId); // Resumes the given route if it has been previously suspended\n\tvoid setLoggingLevel(LoggingLevel loggingLevel); // Sets the logging level used for logging route activity (such as starting and stopping routes).\n\tvoid startAllRoutes(); // Starts all the routes which currently is not started.\n\tvoid startRoute(String routeId); // Starts the given route if it has been previously stopped\n\tvoid stopAllRoutes(); // Stops all the routes\n\tvoid stopRoute(String routeId); // Stops the given route using ShutdownStrategy.\n\tvoid stopRoute(String routeId, long timeout, TimeUnit timeUnit); // Stops the given route using ShutdownStrategy with a specified timeout.\n\tboolean stopRoute(String routeId, long timeout, TimeUnit timeUnit, boolean abortAfterTimeout); // Stops the given route using ShutdownStrategy with a specified timeout and optional abortAfterTimeout mode.\n\tvoid stopRoute(String routeId, Throwable cause); // Stops and marks the given route as failed (health check is DOWN) due to a caused exception.\n\tSupervisingRouteController supervising(); // Enables supervising RouteController.\n\tvoid suspendRoute(String routeId); // Suspends the given route using ShutdownStrategy.\n\tvoid suspendRoute(String routeId, long timeout, TimeUnit timeUnit); // Suspends the given route using ShutdownStrategy with a specified timeout.\n}"}
{"index": 6658, "repo": "artemis-odb-2.3.0", "des": "Provides information about, and access to, a single field of a class or interface.", "code": "Class Field {\n\tboolean equals(Object o);\n\tObject get(Object obj); // Returns the value of the field on the supplied object.\n\t<T extends Annotation>T getAnnotation(Class<T> annotationClass);\n\tAnnotation getDeclaredAnnotation(Class<? extends Annotation> annotationType); // Returns an Annotation object reflecting the annotation provided, or null of this field doesn't have such an annotation.\n\tAnnotation[] getDeclaredAnnotations(); // Returns an array of Annotation objects reflecting all annotations declared by this field, or an empty array if there are none.\n\tClass getDeclaringClass(); // Returns the Class object representing the class or interface that declares the field.\n\tClass getElementType(int index); // If the type of the field is parameterized, returns the Class object representing the parameter type at the specified index, null otherwise.\n\tString getName(); // Returns the name of the field.\n\tClass getType(); // Returns a Class object that identifies the declared type for the field.\n\tboolean isAccessible();\n\tboolean isAnnotationPresent(Class<? extends Annotation> annotationType); // Returns true if the field includes an annotation of the provided class type.\n\tboolean isDefaultAccess(); // Return true if the field does not include any of the private, protected, or public modifiers.\n\tboolean isFinal(); // Return true if the field includes the final modifier.\n\tboolean isPrivate(); // Return true if the field includes the private modifier.\n\tboolean isProtected(); // Return true if the field includes the protected modifier.\n\tboolean isPublic(); // Return true if the field includes the public modifier.\n\tboolean isStatic(); // Return true if the field includes the static modifier.\n\tboolean isSynthetic(); // Return true if the field is a synthetic field.\n\tboolean isTransient(); // Return true if the field includes the transient modifier.\n\tboolean isVolatile(); // Return true if the field includes the volatile modifier.\n\tvoid set(Object obj, Object value); // Sets the value of the field on the supplied object.\n\tvoid setAccessible(boolean accessible);\n}"}
{"index": 16710, "repo": "spring-beans-6.0.11", "des": "Extension of the InstantiationAwareBeanPostProcessor interface, adding a callback for predicting the eventual type of a processed bean.", "code": "public interface SmartInstantiationAwareBeanPostProcessor extends InstantiationAwareBeanPostProcessor {\n\tdefault Class<?> determineBeanType(Class<?> beanClass, String beanName); // Determine the type of the bean to be eventually returned from this processor's InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String) callback.\n\tdefault Constructor<?>[] determineCandidateConstructors(Class<?> beanClass, String beanName); // Determine the candidate constructors to use for the given bean.\n\tdefault Object getEarlyBeanReference(Object bean, String beanName); // Obtain a reference for early access to the specified bean, typically for the purpose of resolving a circular reference.\n\tdefault Class<?> predictBeanType(Class<?> beanClass, String beanName); // Predict the type of the bean to be eventually returned from this processor's InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation(java.lang.Class<?>, java.lang.String) callback.\n}"}
{"index": 15249, "repo": "spring-boot-3.1.1", "des": "A configuration property name composed of elements separated by dots.", "code": "public final class ConfigurationPropertyName extends Object implements Comparable<ConfigurationPropertyName> {\n\tstatic ConfigurationPropertyName adapt(CharSequence name, char separator); // Create a ConfigurationPropertyName by adapting the given source.\n\tConfigurationPropertyName append(String suffix); // Create a new ConfigurationPropertyName by appending the given suffix.\n\tConfigurationPropertyName append(ConfigurationPropertyName suffix); // Create a new ConfigurationPropertyName by appending the given suffix.\n\tConfigurationPropertyName chop(int size); // Return a new ConfigurationPropertyName by chopping this name to the given size.\n\tint compareTo(ConfigurationPropertyName other);\n\tboolean equals(Object obj);\n\tString getElement(int elementIndex, ConfigurationPropertyName.Form form); // Return an element in the name in the given form.\n\tString getLastElement(ConfigurationPropertyName.Form form); // Return the last element in the name in the given form.\n\tint getNumberOfElements(); // Return the total number of elements in the name.\n\tConfigurationPropertyName getParent(); // Return the parent of this ConfigurationPropertyName or EMPTY if there is no parent.\n\tboolean hasIndexedElement(); // Return true if any element in the name is indexed.\n\tboolean isAncestorOf(ConfigurationPropertyName name); // Returns true if this element is an ancestor (immediate or nested parent) of the specified name.\n\tboolean isEmpty(); // Returns true if this ConfigurationPropertyName is empty.\n\tboolean isLastElementIndexed(); // Return if the last element in the name is indexed.\n\tboolean isNumericIndex(int elementIndex); // Return if the element in the name is indexed and numeric.\n\tboolean isParentOf(ConfigurationPropertyName name); // Returns true if this element is an immediate parent of the specified name.\n\tstatic boolean isValid(CharSequence name); // Returns if the given name is valid.\n\tstatic ConfigurationPropertyName of(CharSequence name); // Return a ConfigurationPropertyName for the specified string.\n\tstatic ConfigurationPropertyName ofIfValid(CharSequence name); // Return a ConfigurationPropertyName for the specified string or null if the name is not valid.\n\tConfigurationPropertyName subName(int offset); // Return a new ConfigurationPropertyName by based on this name offset by specific element index.\n}"}
{"index": 963, "repo": "ignite-core-2.15.0", "des": "BPlusTree where nodes stores inlined index keys.", "code": "Class InlineIndexTree {\n\tCacheGroupContext cacheGroupContext(); // Getting cache group context.\n\tprotected int compare(BPlusIO<IndexRow> io, long pageAddr, int idx, IndexRow row);\n\tstatic int computeInlineSize(String name, List<InlineIndexKeyType> keyTypes, List<IndexKeyDefinition> keyDefs, int cfgInlineSize, int maxInlineSize, IgniteLogger log);\n\tvoid copyMetaInfo(MetaPageInfo info); // Copy info from another meta page.\n\tprotected CorruptedTreeException corruptedTreeException(String msg, Throwable cause, int grpId, long... pageIds); // Construct the exception and invoke failure processor.\n\tboolean created();\n\tIndexRowImpl createIndexRow(long link); // Creates an index row for this tree.\n\tIndexRowImpl createMvccIndexRow(long link, long mvccCrdVer, long mvccCntr, int mvccOpCntr); // Creates an mvcc index row for this tree.\n\tIndexRow getRow(BPlusIO<IndexRow> io, long pageAddr, int idx, Object ignore); // Get data row.\n\tint inlineSize();\n\tprotected String lockRetryErrorMessage(String op); // Create an error message when reaching the maximum number of repetitions to capture a lock in the B+Tree.\n\tprotected long maxLockHoldTime(); // Maximum time for which tree destroy process is allowed to hold the lock, after this time exceeds, BPlusTree.temporaryReleaseLock() is called and hold time is reset.\n\tMetaPageInfo metaInfo();\n\tInlineIndexRowHandler rowHandler();\n\tprotected IoStatisticsHolder statisticsHolder();\n\tprotected void temporaryReleaseLock(); // Releases the lock that is held by long tree destroy process for a short period of time and acquires it again, allowing other processes to acquire it.\n}"}
{"index": 13394, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Base ImportBeanDefinitionRegistrar used to auto-configure Spring Data Repositories.", "code": "public abstract class AbstractRepositoryConfigurationSourceSupport extends Object implements org.springframework.context.annotation.ImportBeanDefinitionRegistrar, org.springframework.beans.factory.BeanFactoryAware, org.springframework.context.ResourceLoaderAware, org.springframework.context.EnvironmentAware {\n\tprotected abstract Class<? extends Annotation> getAnnotation(); // The Spring Data annotation used to enable the particular repository support.\n\tprotected org.springframework.data.util.Streamable<String> getBasePackages();\n\tprotected org.springframework.data.repository.config.BootstrapMode getBootstrapMode(); // The BootstrapMode for the particular repository support.\n\tprotected abstract Class<?> getConfiguration(); // The configuration class that will be used by Spring Boot as a template.\n\tprotected abstract org.springframework.data.repository.config.RepositoryConfigurationExtension getRepositoryConfigurationExtension(); // The RepositoryConfigurationExtension for the particular repository support.\n\tvoid registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata importingClassMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry registry);\n\tvoid registerBeanDefinitions(org.springframework.core.type.AnnotationMetadata importingClassMetadata, org.springframework.beans.factory.support.BeanDefinitionRegistry registry, org.springframework.beans.factory.support.BeanNameGenerator importBeanNameGenerator);\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setEnvironment(org.springframework.core.env.Environment environment);\n\tvoid setResourceLoader(org.springframework.core.io.ResourceLoader resourceLoader);\n}"}
{"index": 4626, "repo": "commons-vfs2-2.9.0", "des": "Generic implementation for any url based file system, without depending a specific library.", "code": "Class GenericURLFileNameParser {\n\tboolean encodeCharacter(char ch); // Check if a character needs encoding (%nn).\n\tFileName parseUri(VfsComponentContext context, FileName base, String fileName); // Parses a String into a file name.\n}"}
{"index": 4560, "repo": "beam-sdks-java-core-2.49.0", "des": "A ValueProvider abstracts the notion of fetching a value that may or may not be currently available.", "code": "Interface ValueProvider<T> {\n\tT get(); // Returns the runtime value wrapped by this ValueProvider in case it is isAccessible(), otherwise fails.\n\tboolean isAccessible(); // Whether the contents of this ValueProvider is currently available via get().\n}"}
{"index": 7139, "repo": "calcite-core-1.34.0", "des": "Abstract base class for relational expressions with a single input.", "code": "Class SingleRel {\n\tvoid childrenAccept(RelVisitor visitor); // Interacts with the RelVisitor in a visitor pattern to traverse the tree of relational expressions.\n\tprotected RelDataType deriveRowType();\n\tdouble estimateRowCount(RelMetadataQuery mq); // Returns an estimate of the number of rows this relational expression will return.\n\tRelWriter explainTerms(RelWriter pw); // Describes the inputs and attributes of this relational expression.\n\tRelNode getInput();\n\tList<RelNode> getInputs(); // Returns an array of this relational expression's inputs.\n\tvoid replaceInput(int ordinalInParent, RelNode rel); // Replaces the ordinalInParentth input.\n}"}
{"index": 598, "repo": "ignite-core-2.15.0", "des": "Server to client notification for some resource.", "code": "Class ClientNotification {\n\tvoid encode(ClientConnectionContext ctx, BinaryRawWriterEx writer); // Encodes the notification data.\n\tlong resourceId(); // Gets the resource id.\n}"}
{"index": 9922, "repo": "iceberg-api-1.3.0", "des": "Represents a manifest file that can be scanned to find data files in a table.", "code": "Interface ManifestFile {\n\tjava.lang.Integer addedFilesCount(); // Returns the number of data files with status ADDED in the manifest file.\n\tjava.lang.Long addedRowsCount(); // Returns the total number of rows in all data files with status ADDED in the manifest file.\n\tManifestContent content(); // Returns the content stored in the manifest; either DATA or DELETES.\n\tManifestFile copy(); // Copies this manifest file.\n\tjava.lang.Integer deletedFilesCount(); // Returns the number of data files with status DELETED in the manifest file.\n\tjava.lang.Long deletedRowsCount(); // Returns the total number of rows in all data files with status DELETED in the manifest file.\n\tjava.lang.Integer existingFilesCount(); // Returns the number of data files with status EXISTING in the manifest file.\n\tjava.lang.Long existingRowsCount(); // Returns the total number of rows in all data files with status EXISTING in the manifest file.\n\tdefault boolean hasAddedFiles(); // Returns true if the manifest contains ADDED entries or if the count is not known.\n\tdefault boolean hasDeletedFiles(); // Returns true if the manifest contains DELETED entries or if the count is not known.\n\tdefault boolean hasExistingFiles(); // Returns true if the manifest contains EXISTING entries or if the count is not known.\n\tdefault java.nio.ByteBuffer keyMetadata(); // Returns metadata about how this manifest file is encrypted, or null if the file is stored in plain text.\n\tlong length(); // Returns length of the manifest file.\n\tlong minSequenceNumber(); // Returns the lowest data sequence number of any live file in the manifest.\n\tjava.util.List<ManifestFile.PartitionFieldSummary> partitions(); // Returns a list of partition field summaries.\n\tint partitionSpecId(); // Returns iD of the PartitionSpec used to write the manifest file.\n\tjava.lang.String path(); // Returns fully qualified path to the file, suitable for constructing a Hadoop Path.\n\tstatic Schema schema();\n\tlong sequenceNumber(); // Returns the sequence number of the commit that added the manifest file.\n\tjava.lang.Long snapshotId(); // Returns iD of the snapshot that added the manifest file to table metadata.\n}"}
{"index": 17158, "repo": "spring-integration-core-6.1.2", "des": "The MessageProducerSupport to adapt a provided MessageSource into a Flux and let it be subscribed in the MessageProducerSupport.subscribeToPublisher(org.reactivestreams.Publisher<? extends org.springframework.messaging.Message<?>>).", "code": "public class ReactiveMessageSourceProducer extends MessageProducerSupport {\n\tprotected void doStart(); // Take no action by default.\n\tvoid setDelayWhenEmpty(Duration delayWhenEmpty); // Configure a Duration to delay next pull request when the previous one was empty.\n}"}
{"index": 5668, "repo": "org.apache.karaf.main-2.4.4", "des": "The interface of the service that allows client-defined protocol URLs to be converted to native file URLs on the local file system.", "code": "Interface URLConverter {\n\tURL resolve(URL url); // Converts a URL that uses a client-defined protocol into a URL that uses a protocol which is native to the Java class library (file, jar, http, etc).\n\tURL toFileURL(URL url); // Converts a URL that uses a user-defined protocol into a URL that uses the file protocol.\n}"}
{"index": 9195, "repo": "fontbox-3.0.0-beta1", "des": "This interface defines some functionality to read a CFF font.", "code": "Interface DataInput {\n\tint getPosition(); // Returns the current position.\n\tboolean hasRemaining(); // Determines if there are any bytes left to read or not.\n\tint length();\n\tint peekUnsignedByte(int offset); // Peeks one single unsigned byte from the buffer.\n\tbyte readByte(); // Read one single byte from the buffer.\n\tbyte[] readBytes(int length); // Read a number of single byte values from the buffer.\n\tdefault int readInt(); // Read one single int (4 bytes) from the buffer.\n\tdefault int readOffset(int offSize); // Read the offset from the buffer.\n\tdefault short readShort(); // Read one single short value from the buffer.\n\tint readUnsignedByte(); // Read one single unsigned byte from the buffer.\n\tdefault int readUnsignedShort(); // Read one single unsigned short (2 bytes) value from the buffer.\n\tvoid setPosition(int position); // Sets the current position to the given value.\n}"}
{"index": 229, "repo": "commons-collections4-4.4", "des": "SingletonIterator is an Iterator over a single object instance.", "code": "Class SingletonIterator<E> {\n\tboolean hasNext(); // Is another object available from the iterator?\n\tE next(); // Get the next object from the iterator.\n\tvoid remove(); // Remove the object from this iterator.\n\tvoid reset(); // Reset the iterator to the start.\n}"}
{"index": 14564, "repo": "spring-security-web-6.1.2", "des": "Performs a redirect on authentication success.", "code": "public class RedirectServerAuthenticationSuccessHandler extends Object implements ServerAuthenticationSuccessHandler {\n\treactor.core.publisher.Mono<Void> onAuthenticationSuccess(WebFilterExchange webFilterExchange, org.springframework.security.core.Authentication authentication); // Invoked when the application authenticates successfully\n\tvoid setLocation(URI location); // Where the user is redirected to upon authentication success\n\tvoid setRedirectStrategy(ServerRedirectStrategy redirectStrategy); // The RedirectStrategy to use.\n\tvoid setRequestCache(ServerRequestCache requestCache); // Sets the ServerRequestCache used to redirect to.\n}"}
{"index": 146, "repo": "commons-collections4-4.4", "des": "Decorates another ListIterator using a predicate to filter elements.", "code": "Class FilterListIterator<E> {\n\tvoid add(E o); // Not supported.\n\tListIterator<? extends E> getListIterator(); // Gets the iterator this iterator is using.\n\tPredicate<? super E> getPredicate(); // Gets the predicate this iterator is using.\n\tboolean hasNext();\n\tboolean hasPrevious();\n\tE next();\n\tint nextIndex();\n\tE previous();\n\tint previousIndex();\n\tvoid remove(); // Not supported.\n\tvoid set(E o); // Not supported.\n\tvoid setListIterator(ListIterator<? extends E> iterator); // Sets the iterator for this iterator to use.\n\tvoid setPredicate(Predicate<? super E> predicate); // Sets the predicate this the iterator to use.\n}"}
{"index": 5713, "repo": "freemarker-2.3.32", "des": "Model for Jython dictionaries (PyDictionary and PyStringMap).", "code": "Class JythonHashModel {\n\tTemplateCollectionModel keys(); // Returns either object.__findattr__(\"keys\").__call__() or object.__findattr__(\"keySet\").__call__().\n\tint size(); // Returns PyObject.__len__().\n\tTemplateCollectionModel values(); // Returns object.__findattr__(\"values\").__call__().\n}"}
{"index": 14838, "repo": "spring-data-commons-3.1.2", "des": "Additional repository specific information", "code": "public interface RepositoryInformation extends RepositoryMetadata {\n\tStreamable<Method> getQueryMethods(); // Returns all methods considered to be query methods.\n\tClass<?> getRepositoryBaseClass(); // Returns the base class to be used to create the proxy backing instance.\n\tMethod getTargetClassMethod(Method method); // Returns the target class method that is backing the given method.\n\tdefault boolean hasCustomMethod(); // Returns if the configured repository interface has custom methods, that might have to be delegated to a custom implementation.\n\tdefault boolean hasQueryMethods();\n\tboolean isBaseClassMethod(Method method); // Returns whether the given method is logically a base class method.\n\tboolean isCustomMethod(Method method); // Returns whether the given method is a custom repository method.\n\tboolean isQueryMethod(Method method); // Returns whether the given method is a query method.\n}"}
{"index": 6295, "repo": "commons-codec-1.16.0", "des": "Encodes a string into a Daitch-Mokotoff Soundex value.", "code": "Class DaitchMokotoffSoundex {\n\tObject encode(Object obj); // Encodes an Object using the Daitch-Mokotoff soundex algorithm without branching.\n\tString encode(String source); // Encodes a String using the Daitch-Mokotoff soundex algorithm without branching.\n\tString soundex(String source); // Encodes a String using the Daitch-Mokotoff soundex algorithm with branching.\n}"}
{"index": 7653, "repo": "cassandra-all-4.1.2", "des": "Manages the fixed-size memory pool for index summaries, periodically resizing them in order to give more memory to hot sstables and less memory to cold sstables.", "code": "Class IndexSummaryManager {\n\tdouble getAverageIndexInterval();\n\tjava.util.Map<java.lang.String,java.lang.Integer> getIndexIntervals(); // Returns a map of SSTable filenames to their current effective index interval.\n\tlong getMemoryPoolCapacityInMB();\n\tdouble getMemoryPoolSizeInMB(); // Returns the actual space consumed by index summaries for all sstables.\n\tint getResizeIntervalInMinutes();\n\tvoid redistributeSummaries();\n\tstatic java.util.List<SSTableReader> redistributeSummaries(IndexSummaryRedistribution redistribution); // Attempts to fairly distribute a fixed pool of memory for index summaries across a set of SSTables based on their recent read rates.\n\tvoid setMemoryPoolCapacityInMB(long memoryPoolCapacityInMB);\n\tvoid setResizeIntervalInMinutes(int resizeIntervalInMinutes); // Set resizeIntervalInMinutes = -1 for disabled; This is the equivalent of index_summary_resize_interval being set to null in cassandra.yaml\n\tvoid shutdownAndWait(long timeout, java.util.concurrent.TimeUnit unit);\n}"}
{"index": 14051, "repo": "spring-context-support-6.0.11", "des": "Spring-configurable FileTypeMap implementation that will read MIME type to file extension mappings from a standard JavaMail MIME type mapping file, using a standard MimetypesFileTypeMap underneath.", "code": "public class ConfigurableMimeFileTypeMap extends FileTypeMap implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet(); // Creates the final merged mapping set.\n\tprotected FileTypeMap createFileTypeMap(org.springframework.core.io.Resource mappingLocation, String[] mappings); // Compile a FileTypeMap from the mappings in the given mapping file and the given mapping entries.\n\tString getContentType(File file); // Delegates to the underlying FileTypeMap.\n\tString getContentType(String fileName); // Delegates to the underlying FileTypeMap.\n\tprotected final FileTypeMap getFileTypeMap(); // Return the delegate FileTypeMap, compiled from the mappings in the mapping file and the entries in the mappings property.\n\tvoid setMappingLocation(org.springframework.core.io.Resource mappingLocation); // Specify the Resource from which mappings are loaded.\n\tvoid setMappings(String... mappings); // Specify additional MIME type mappings as lines that follow the mime.types file format, as specified by the Java Activation Framework.\n}"}
{"index": 11110, "repo": "tribuo-core-4.3.1", "des": "Utilities for nice HTML output that can be put in wikis and such.", "code": "public final class HTMLOutput extends Object {\n\tstatic void printFeatureMap(Map<String,List<com.oracle.labs.mlrg.olcut.util.Pair<String,Double>>> m, List<String> keys, PrintStream s); // Formats a feature ranking as a HTML table.\n\tstatic String toHTML(com.oracle.labs.mlrg.olcut.util.Pair<String,Double> p); // Formats a pair as a HTML table entry.\n}"}
{"index": 10257, "repo": "spring-core-6.0.11", "des": "A PropertySource implementation capable of interrogating its underlying source object to enumerate all possible property name/value pairs.", "code": "public abstract class EnumerablePropertySource<T> extends PropertySource<T> {\n\tboolean containsProperty(String name); // Return whether this PropertySource contains a property with the given name.\n\tabstract String[] getPropertyNames(); // Return the names of all properties contained by the source object (never null).\n}"}
{"index": 15769, "repo": "camel-api-4.0.0-RC1", "des": "Represents an Expression or Predicate that supports a result type.", "code": "public interface ExpressionResultTypeAware {\n\tString getExpressionText(); // Gets the expression or predicate as text\n\tClass<?> getResultType(); // Gets the result type\n}"}
{"index": 10072, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Various static string and parsing utilities.", "code": "Class ParsingUtils {\n\tstatic String extractClasspath(String source, String delimiter); // Extracts a classpath string from a source text.\n\tstatic String extractRunnableCommand(String source); // Extracts a string from another string which can be used as a command in shell.\n\tstatic long parseBytes(String string); // Parses the count of bytes from a string.\n\tstatic int parseBytesAsMegs(String string); // Parses the given string as a number representing megs.\n}"}
{"index": 6599, "repo": "exoplayer-core-2.9.6", "des": "A utility class to keep a queue of values with timestamps.", "code": "Class TimedValueQueue<V> {\n\tvoid add(long timestamp, V value); // Associates the specified value with the specified timestamp.\n\tvoid clear(); // Removes all of the values.\n\tV poll(long timestamp); // Returns the value with the closest timestamp to the given timestamp.\n\tV pollFloor(long timestamp); // Returns the value with the greatest timestamp which is less than or equal to the given timestamp.\n\tint size(); // Returns number of the values buffered.\n}"}
{"index": 6638, "repo": "ignite-indexing-2.15.0", "des": "Logic for building update plans performed by DmlStatementsProcessor.", "code": "Class UpdatePlanBuilder {\n\tstatic UpdatePlan planForBulkLoad(SqlBulkLoadCommand cmd, GridH2Table tbl); // Prepare update plan for COPY command (AKA bulk load).\n\tstatic UpdatePlan planForStatement(QueryDescriptor planKey, GridSqlStatement stmt, boolean mvccEnabled, IgniteH2Indexing idx, IgniteLogger log, boolean forceFillAbsentPKsWithDefaults); // Generate SELECT statements to retrieve data for modifications from and find fast UPDATE or DELETE args, if available.\n}"}
{"index": 1318, "repo": "ignite-core-2.15.0", "des": "Temporary storage for disabled WALs of group.", "code": "Class WalStateManager.WALDisableContext {\n\tboolean check();\n\tprotected void disableWAL(boolean disable);\n\tvoid execute(IgniteRunnable cls);\n\tvoid onReadyForRead(ReadOnlyMetastorage ms); // Is called when metastorage is made ready for read-only operations very early on node startup phase.\n\tvoid onReadyForReadWrite(ReadWriteMetastorage ms); // Fully functional metastore capable of performing reading and writing operations.\n\tprotected void removeMetaStoreDisableWALFlag();\n\tprotected void writeMetaStoreDisableWALFlag();\n}"}
{"index": 5754, "repo": "freemarker-2.3.32", "des": "Creates (or returns) TemplateConfiguration-s for template sources.", "code": "Class TemplateConfigurationFactory {\n\tabstract TemplateConfiguration get(java.lang.String sourceName, java.lang.Object templateSource); // Returns (maybe creates) the TemplateConfiguration for the given template source.\n\tConfiguration getConfiguration(); // Returns the configuration this object belongs to, or null if it isn't yet bound to a Configuration.\n\tvoid setConfiguration(Configuration cfg); // Binds this TemplateConfigurationFactory to a Configuration.\n\tprotected abstract void setConfigurationOfChildren(Configuration cfg); // Calls TemplateConfiguration.setParentConfiguration(Configuration) on each enclosed TemplateConfiguration and setConfiguration(Configuration) on each enclosed TemplateConfigurationFactory objects.\n}"}
{"index": 9281, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "provides mechanisms to execute PrivilegedContainerOperations *.", "code": "Class PrivilegedOperationExecutor {\n\torg.apache.hadoop.hdfs.protocol.datatransfer.IOStreamPair executePrivilegedInteractiveOperation(List<String> prefixCommands, PrivilegedOperation operation);\n\tString executePrivilegedOperation(List<String> prefixCommands, PrivilegedOperation operation, File workingDir, Map<String,String> env, boolean grabOutput, boolean inheritParentEnv); // Executes a privileged operation.\n\tString executePrivilegedOperation(PrivilegedOperation operation, boolean grabOutput); // Executes a privileged operation.\n\tstatic String getContainerExecutorExecutablePath(org.apache.hadoop.conf.Configuration conf);\n\tstatic PrivilegedOperationExecutor getInstance(org.apache.hadoop.conf.Configuration conf);\n\tString[] getPrivilegedOperationExecutionCommand(List<String> prefixCommands, PrivilegedOperation operation);\n\tstatic PrivilegedOperation squashCGroupOperations(List<PrivilegedOperation> ops); // Squash operations for cgroups - e.g mount, add pid to cgroup etc ., For now, we only implement squashing for 'add pid to cgroup' since this is the only optimization relevant to launching containers\n}"}
{"index": 9966, "repo": "commons-text-1.10.0", "des": "This interface should be implemented by user object to walk through EditScript objects.", "code": "Interface CommandVisitor<T> {\n\tvoid visitDeleteCommand(T object); // Method called when a delete command is encountered.\n\tvoid visitInsertCommand(T object); // Method called when an insert command is encountered.\n\tvoid visitKeepCommand(T object); // Method called when a keep command is encountered.\n}"}
{"index": 1411, "repo": "pdfbox-3.0.0-beta1", "des": "This class represents a null PDF object.", "code": "Class COSNull {\n\tvoid accept(ICOSVisitor visitor); // Visitor pattern double dispatch method.\n\tvoid writePDF(OutputStream output); // This will output this string as a PDF object.\n}"}
{"index": 17645, "repo": "spring-web-6.0.11", "des": "A base abstract class to resolve method arguments annotated with @CookieValue.", "code": "public abstract class AbstractCookieValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver {\n\tprotected AbstractNamedValueMethodArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueMethodArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter); // Invoked when a named value is required, but AbstractNamedValueMethodArgumentResolver.resolveName(String, MethodParameter, NativeWebRequest) returned null and there is no default value.\n\tprotected void handleMissingValueAfterConversion(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest request); // Invoked when a named value is present but becomes null after conversion.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 14215, "repo": "wicket-core-10.0.0-M1", "des": "Settings class for configuring exception handling related settings.", "code": "public class ExceptionSettings extends Object {\n\tExceptionSettings.AjaxErrorStrategy getAjaxErrorHandlingStrategy();\n\tExceptionSettings.NotRenderableErrorStrategy getNotRenderableErrorStrategy();\n\tExceptionSettings.ThreadDumpStrategy getThreadDumpStrategy();\n\tExceptionSettings.UnexpectedExceptionDisplay getUnexpectedExceptionDisplay();\n\tExceptionSettings setAjaxErrorHandlingStrategy(ExceptionSettings.AjaxErrorStrategy errorHandlingStrategyDuringAjaxRequests); // Sets strategy used to handle errors during Ajax request processing\n\tvoid setNotRenderableErrorStrategy(ExceptionSettings.NotRenderableErrorStrategy notRenderableErrorStrategy);\n\tExceptionSettings setThreadDumpStrategy(ExceptionSettings.ThreadDumpStrategy strategy); // Sets the strategy to use for dumping stack traces of live threads in the JVM.\n\tExceptionSettings setUnexpectedExceptionDisplay(ExceptionSettings.UnexpectedExceptionDisplay unexpectedExceptionDisplay); // The exception display type determines how the framework displays exceptions to you as a developer or user.\n}"}
{"index": 14192, "repo": "wicket-core-10.0.0-M1", "des": "CSPRenderable describes a directive that is part of a Content-Security-Policy (CSP in short).", "code": "public interface CSPRenderable {\n\tdefault void checkValidityForSrc(); // Checks if the CSPRenderable represents a valid value for a -src directive.\n\tString render(ContentSecurityPolicySettings settings, RequestCycle cycle); // Renders the value that should be put in the CSP header.\n}"}
{"index": 2440, "repo": "calcite-linq4j-1.34.0", "des": "Factors out deterministic expressions to final static fields.", "code": "Class DeterministicCodeOptimizer {\n\tprotected boolean allMethodsDeterministic(Class klass); // Checks if all the methods in given class are deterministic (i.e.\n\tprotected Expression createField(Expression expression); // Creates final static field to hold the given expression.\n\tprotected @Nullable ParameterExpression findDeclaredExpression(Expression expression); // Finds if there exists ready for reuse declaration for given expression.\n\tprotected DeterministicCodeOptimizer goDeeper(); // Creates child visitor.\n\tprotected boolean hasField(String name); // Verifies if the variable name is already in use.\n\tprotected String inventFieldName(Expression expression); // Generates field name to store given expression.\n\tprotected boolean isConstant(@Nullable Expression expression); // Verifies if the expression is effectively constant.\n\tprotected boolean isConstructorDeterministic(NewExpression newExpression); // Checks if new instance creation can be reused.\n\tprotected boolean isMethodDeterministic(Method method); // Checks if given method is deterministic (i.e.\n\tprotected void learnFinalStaticDeclarations(List<MemberDeclaration> memberDeclarations); // Processes the list of declarations and learns final static ones as effectively constant.\n\tprotected Expression tryOptimizeMethodCall(MethodCallExpression methodCallExpression); // Optimized method call, possibly converting it to final static field.\n\tprotected Expression tryOptimizeNewInstance(NewExpression newExpression); // Optimizes new Type() constructs.\n\tExpression visit(BinaryExpression binaryExpression, Expression expression0, Expression expression1);\n\tMemberDeclaration visit(FieldDeclaration fieldDeclaration, @Nullable Expression initializer);\n\tExpression visit(MemberExpression memberExpression, @Nullable Expression expression);\n\tExpression visit(MethodCallExpression methodCallExpression, @Nullable Expression targetExpression, List<Expression> expressions);\n\tExpression visit(TernaryExpression ternaryExpression, Expression expression0, Expression expression1, Expression expression2);\n\tExpression visit(TypeBinaryExpression typeBinaryExpression, Expression expression);\n\tExpression visit(UnaryExpression unaryExpression, Expression expression);\n}"}
{"index": 7873, "repo": "cassandra-all-4.1.2", "des": "A system view used to expose system information.", "code": "Interface VirtualTable {\n\tvoid apply(PartitionUpdate update); // Applies the specified update, if supported.\n\tTableMetadata metadata(); // Returns the view metadata.\n\tdefault java.lang.String name(); // Returns the view name.\n\tUnfilteredPartitionIterator select(DataRange dataRange, ColumnFilter columnFilter); // Selects the rows from a range of partitions.\n\tUnfilteredPartitionIterator select(DecoratedKey partitionKey, ClusteringIndexFilter clusteringIndexFilter, ColumnFilter columnFilter); // Selects the rows from a single partition.\n\tvoid truncate(); // Truncates data from the underlying source, if supported.\n}"}
{"index": 5449, "repo": "druid-processing-26.0.0", "des": "A streaming grouper which can aggregate sorted inputs.", "code": "Class StreamingMergeSortedGrouper<KeyType> {\n\tAggregateResult aggregate(KeyType key); // Aggregate the current row with the provided key.\n\tAggregateResult aggregate(KeyType key, int notUsed); // Aggregate the current row with the provided key.\n\tvoid close(); // Close the grouper and release associated resources.\n\tvoid finish(); // Signal that no more inputs are added.\n\tvoid init(); // Initialize the grouper.\n\tboolean isInitialized(); // Check this grouper is initialized or not.\n\tCloseableIterator<Grouper.Entry<KeyType>> iterator(); // Return a sorted iterator.\n\tCloseableIterator<Grouper.Entry<KeyType>> iterator(boolean sorted); // Return a sorted iterator.\n\tstatic <KeyType> int requiredBufferCapacity(Grouper.KeySerde<KeyType> keySerde, AggregatorFactory[] aggregatorFactories); // Returns the minimum buffer capacity required for this grouper.\n\tvoid reset(); // Reset the grouper to its initial state.\n}"}
{"index": 6417, "repo": "exoplayer-core-2.9.6", "des": "A MediaSource that inserts ads linearly with a provided content media source.", "code": "Class AdsMediaSource {\n\tMediaPeriod createPeriod(MediaSource.MediaPeriodId id, Allocator allocator, long startPositionUs); // Returns a new MediaPeriod identified by periodId.\n\tprotected MediaSource.MediaPeriodId getMediaPeriodIdForChildMediaPeriodId(MediaSource.MediaPeriodId childId, MediaSource.MediaPeriodId mediaPeriodId); // Returns the MediaPeriodId in the composite source corresponding to the specified MediaPeriodId in a child source.\n\tjava.lang.Object getTag(); // Returns the tag set on the media source, or null if none was set.\n\tprotected void onChildSourceInfoRefreshed(MediaSource.MediaPeriodId mediaPeriodId, MediaSource mediaSource, Timeline timeline, java.lang.Object manifest); // Called when the source info of a child source has been refreshed.\n\tvoid prepareSourceInternal(TransferListener mediaTransferListener); // Starts source preparation.\n\tvoid releasePeriod(MediaPeriod mediaPeriod); // Releases the period.\n\tvoid releaseSourceInternal(); // Releases the source.\n}"}
{"index": 11651, "repo": "spring-websocket-6.0.11", "des": "A SubProtocolErrorHandler for use with STOMP.", "code": "public class StompSubProtocolErrorHandler extends Object implements SubProtocolErrorHandler<byte[]> {\n\torg.springframework.messaging.Message<byte[]> handleClientMessageProcessingError(org.springframework.messaging.Message<byte[]> clientMessage, Throwable ex); // Handle errors thrown while processing client messages providing an opportunity to prepare the error message or to prevent one from being sent.\n\torg.springframework.messaging.Message<byte[]> handleErrorMessageToClient(org.springframework.messaging.Message<byte[]> errorMessage); // Handle errors sent from the server side to clients, e.g.\n\tprotected org.springframework.messaging.Message<byte[]> handleInternal(org.springframework.messaging.simp.stomp.StompHeaderAccessor errorHeaderAccessor, byte[] errorPayload, Throwable cause, org.springframework.messaging.simp.stomp.StompHeaderAccessor clientHeaderAccessor);\n}"}
{"index": 16433, "repo": "spring-batch-infrastructure-5.0.2", "des": "Creates a fully qualified CompositeItemWriter.", "code": "public class CompositeItemWriterBuilder<T> extends Object {\n\tCompositeItemWriter<T> build(); // Returns a fully constructed CompositeItemWriter.\n\tCompositeItemWriterBuilder<T> delegates(List<ItemWriter<? super T>> delegates); // The list of item writers to use as delegates.\n\tfinal CompositeItemWriterBuilder<T> delegates(ItemWriter<? super T>... delegates); // The item writers to use as delegates.\n\tCompositeItemWriterBuilder<T> ignoreItemStream(boolean ignoreItemStream); // Establishes the policy whether to call the open, close, or update methods for the item writer delegates associated with the CompositeItemWriter.\n}"}
{"index": 9222, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "A config file that needs to be created and made available as a volume in an service component container.", "code": "Class AuxServiceFile {\n\tboolean equals(Object o);\n\tString getSrcFile();\n\tAuxServiceFile.TypeEnum getType();\n\tvoid setSrcFile(String srcFile);\n\tvoid setType(AuxServiceFile.TypeEnum type);\n\tAuxServiceFile srcFile(String file); // This provides the source location of the configuration file, the content of which is dumped to dest_file post property substitutions, in the format as specified in type.\n\tAuxServiceFile type(AuxServiceFile.TypeEnum t); // Config file in the standard format like xml, properties, json, yaml, template.\n}"}
{"index": 343, "repo": "phoenix-core-5.1.3", "des": "Node representing a function expression in SQL.", "code": "Class FunctionParseNode {\n\t<T> T accept(ParseNodeVisitor<T> visitor);\n\tExpression create(List<Expression> children, PFunction function, StatementContext context); // Entry point for parser to instantiate compiled representation of built-in function\n\tExpression create(List<Expression> children, StatementContext context); // Entry point for parser to instantiate compiled representation of built-in function\n\tboolean equals(Object obj);\n\tboolean evalToNullIfParamIsNull(StatementContext context, int index); // Determines whether or not we can collapse a function expression to null if a required parameter is null.\n\tFunctionParseNode.BuiltInFunctionInfo getInfo();\n\tString getName();\n\tboolean isAggregate();\n\tvoid toSQL(ColumnResolver resolver, StringBuilder buf);\n\tList<Expression> validate(List<Expression> children, StatementContext context);\n\tstatic void validateFunctionArguement(FunctionParseNode.BuiltInFunctionInfo info, int childIndex, Expression child);\n}"}
{"index": 11405, "repo": "spring-context-6.0.11", "des": "A CacheResolver that forces the resolution to a configurable collection of name(s) against a given CacheManager.", "code": "public class NamedCacheResolver extends AbstractCacheResolver {\n\tprotected Collection<String> getCacheNames(CacheOperationInvocationContext<?> context); // Provide the name of the cache(s) to resolve against the current cache manager.\n\tvoid setCacheNames(Collection<String> cacheNames); // Set the cache name(s) that this resolver should use.\n}"}
{"index": 10374, "repo": "spring-core-6.0.11", "des": "Gather the need for Java serialization at runtime.", "code": "public class SerializationHints extends Object {\n\tStream<JavaSerializationHint> javaSerializationHints(); // Return the java serialization hints for types that need to be serialized using Java serialization at runtime.\n\tSerializationHints registerType(Class<? extends Serializable> type); // Register that the specified type need to be serialized using java serialization.\n\tSerializationHints registerType(Class<? extends Serializable> type, Consumer<JavaSerializationHint.Builder> serializationHint); // Register that the specified type need to be serialized using java serialization.\n\tSerializationHints registerType(TypeReference type); // Register that the type defined by the specified TypeReference need to be serialized using java serialization.\n\tSerializationHints registerType(TypeReference type, Consumer<JavaSerializationHint.Builder> serializationHint); // Register that the type defined by the specified TypeReference need to be serialized using java serialization.\n}"}
{"index": 15526, "repo": "spring-batch-core-5.0.2", "des": "Converter for JobParameters instances that uses a JSON naming convention for converting job parameters.", "code": "public class JsonJobParametersConverter extends DefaultJobParametersConverter {\n\tprotected JobParameter decode(String encodedJobParameter); // Decode a job parameter from a string.\n\tprotected String encode(JobParameter<?> jobParameter); // Encode a job parameter to a string.\n}"}
{"index": 4384, "repo": "beam-sdks-java-core-2.49.0", "des": "A PTransform that adds exception handling to FlatMapElements.", "code": "Class FlatMapElements.FlatMapWithFailures<InputT,OutputT,FailureT> {\n\tFlatMapElements.FlatMapWithFailures<InputT,OutputT,FailureT> exceptionsVia(ProcessFunction<WithFailures.ExceptionElement<InputT>,FailureT> exceptionHandler); // Returns a new FlatMapElements.FlatMapWithFailures transform that catches exceptions raised while mapping elements, passing the raised exception instance and the input element being processed through the given exceptionHandler and emitting the result to a failure collection.\n\tWithFailures.Result<PCollection<OutputT>,FailureT> expand(PCollection<InputT> input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n}"}
{"index": 7022, "repo": "calcite-core-1.34.0", "des": "ProjectMergeRule merges a Project into another Project, provided the projects aren't projecting identical sets of input references.", "code": "Class ProjectMergeRule {\n\tboolean matches(RelOptRuleCall call); // Returns whether this rule could possibly match the given operands.\n\tvoid onMatch(RelOptRuleCall call); // Receives notification about a rule match.\n}"}
{"index": 7896, "repo": "commons-jcs3-core-3.1", "des": "Used to monitor and repair any failed connection for the lateral cache service.", "code": "Class AbstractAuxiliaryCacheMonitor {\n\tprotected abstract void dispose(); // Clean up all resources before shutdown\n\tprotected abstract void doWork(); // do actual work\n\tvoid notifyError(); // Notifies the cache monitor that an error occurred, and kicks off the error recovery process.\n\tvoid notifyShutdown(); // Notifies the cache monitor that the service shall shut down\n\tvoid run(); // Main processing method for the AbstractAuxiliaryCacheMonitor object\n\tstatic void setIdlePeriod(long idlePeriod); // Configures the idle period between repairs.\n}"}
{"index": 18622, "repo": "tomcat-jspapi-10.1", "des": "Contains information about an error, for error pages.", "code": "Class ErrorData {\n\tjava.lang.String getRequestURI(); // Returns the request URI.\n\tjava.lang.String getServletName(); // Returns the name of the servlet invoked.\n\tint getStatusCode(); // Returns the status code of the error.\n\tjava.lang.Throwable getThrowable(); // Returns the Throwable that caused the error.\n}"}
{"index": 15913, "repo": "spring-rabbit-3.0.6", "des": "A listener for connection creation and closing.", "code": "@FunctionalInterface public interface ConnectionListener {\n\tdefault void onClose(Connection connection); // Called when a connection is closed.\n\tvoid onCreate(Connection connection); // Called when a new connection is established.\n\tdefault void onFailed(Exception exception); // Called when a connection couldn't be established.\n\tdefault void onShutDown(com.rabbitmq.client.ShutdownSignalException signal); // Called when a connection is force closed.\n}"}
{"index": 6650, "repo": "artemis-odb-2.3.0", "des": "Tracks cooldown per entity, processing entity when its timer runs out.", "code": "Class DelayedEntityProcessingSystem {\n\tprotected boolean checkProcessing(); // Does the system desire processing.\n\tfloat getInitialTimeDelay(); // Get the initial delay that the system was ordered to process entities after.\n\tprotected abstract float getRemainingDelay(Entity e); // Return the delay until this entity should be processed.\n\tfloat getRemainingTimeUntilProcessing(); // Get the time until the system is scheduled to run at.\n\tprotected float getTimeDelta(); // Overridable method to provide custom time delta.\n\tvoid inserted(Entity entity); // Called if entity has come into scope for this system, e.g created or a component was added to it.\n\tboolean isRunning(); // Check if the system is counting down towards processing.\n\tvoid offerDelay(float offeredDelay); // Restarts the system only if the delay offered is shorter than the time that the system is currently scheduled to execute at.\n\tprotected abstract void processDelta(Entity e, float accumulatedDelta); // Process an entity this system is interested in.\n\tprotected abstract void processExpired(Entity e);\n\tprotected void processSystem(); // Process the system.\n\tvoid stop(); // Stops the system from running, aborts current countdown.\n}"}
{"index": 13183, "repo": "spring-test-6.0.11", "des": "TestExecutionListener which provides support for dependency injection and initialization of test instances.", "code": "public class DependencyInjectionTestExecutionListener extends AbstractTestExecutionListener {\n\tvoid beforeTestMethod(TestContext testContext); // If the REINJECT_DEPENDENCIES_ATTRIBUTE in the supplied test context has a value of Boolean.TRUE, this method will have the same effect as prepareTestInstance(); otherwise, this method will have no effect.\n\tfinal int getOrder(); // Returns 2000.\n\tprotected void injectDependencies(TestContext testContext); // Performs dependency injection and bean initialization for the supplied TestContext as described in prepareTestInstance().\n\tvoid prepareTestInstance(TestContext testContext); // Performs dependency injection on the test instance of the supplied test context by autowiring and initializing the test instance via its own application context (without checking dependencies).\n}"}
{"index": 17342, "repo": "groovy-4.0.13", "des": "Class used to configure a RootLoader from a stream or by using its methods.", "code": "public class LoaderConfiguration extends Object {\n\tvoid addClassPath(String path); // Adds a classpath to this configuration.\n\tvoid addFile(File file); // Adds a file to the classpath if it exists.\n\tvoid addFile(String filename); // Adds a file to the classpath if it exists.\n\tvoid configure(InputStream is); // configures this loader with a stream\n\tURL[] getClassPathUrls(); // The classpath as URL[] from this configuration.\n\tList<String> getGrabUrls(); // The extra grab configuration.\n\tString getMainClass(); // Returns the name of the main class for this configuration.\n\tvoid setMainClass(String classname); // Sets the main class.\n\tvoid setRequireMain(boolean requireMain); // Determines if a main class is required when calling.\n}"}
{"index": 15894, "repo": "camel-api-4.0.0-RC1", "des": "Validator performs message content validation according to the declared data type.", "code": "public abstract class Validator extends ServiceSupport implements CamelContextAware {\n\tprotected void doStart(); // Implementations override this method to support customized start/stop.\n\tprotected void doStop(); // Implementations override this method to support customized start/stop.\n\tCamelContext getCamelContext(); // Get the CamelContext\n\tDataType getType(); // Get 'from' data type.\n\tvoid setCamelContext(CamelContext context); // Injects the CamelContext\n\tValidator setType(String type); // Set data type.\n\tabstract void validate(Message message, DataType type); // Perform data validation with specified type.\n}"}
{"index": 13114, "repo": "spring-integration-mail-6.1.2", "des": "Collection of utility methods to work with Mail transports.", "code": "public abstract class MailTransportUtils extends Object {\n\tstatic void closeFolder(jakarta.mail.Folder folder, boolean expunge); // Close the given JavaMail Folder and ignore any thrown exception.\n\tstatic void closeService(jakarta.mail.Service service); // Close the given JavaMail Service and ignore any thrown exception.\n\tstatic String toPasswordProtectedString(jakarta.mail.URLName name); // Returns a string representation of the given URLName, where the password has been protected.\n}"}
{"index": 4271, "repo": "beam-sdks-java-core-2.49.0", "des": "A BigEndianIntegerCoder encodes Integers in 4 bytes, big-endian.", "code": "Class BigEndianIntegerCoder {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tjava.lang.Integer decode(java.io.InputStream inStream); // Decodes a value of type T from the given input stream in the given context.\n\tvoid encode(java.lang.Integer value, java.io.OutputStream outStream); // Encodes the given value of type T onto the given output stream.\n\tprotected long getEncodedElementByteSize(java.lang.Integer value); // Returns the size in bytes of the encoded value using this coder.\n\tTypeDescriptor<java.lang.Integer> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tboolean isRegisterByteSizeObserverCheap(java.lang.Integer value); // Returns whether Coder.registerByteSizeObserver(T, org.apache.beam.sdk.util.common.ElementByteSizeObserver) cheap enough to call for every element, that is, if this Coder can calculate the byte size of the element to be coded in roughly constant time (or lazily).\n\tstatic BigEndianIntegerCoder of();\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 9573, "repo": "commons-math3-3.6.1", "des": "Default implementation of a MeasurementModel for the use with a KalmanFilter.", "code": "Class DefaultMeasurementModel {\n\tRealMatrix getMeasurementMatrix(); // Returns the measurement matrix.\n\tRealMatrix getMeasurementNoise(); // Returns the measurement noise matrix.\n}"}
{"index": 4307, "repo": "beam-sdks-java-core-2.49.0", "des": "The type of mutable accumulator values used by this AccumulatingCombineFn.", "code": "Interface Combine.AccumulatingCombineFn.Accumulator<InputT,AccumT,OutputT> {\n\tvoid addInput(InputT input); // Adds the given input value to this accumulator, modifying this accumulator.\n\tOutputT extractOutput(); // Returns the output value that is the result of combining all the input values represented by this accumulator.\n\tvoid mergeAccumulator(AccumT other); // Adds the input values represented by the given accumulator into this accumulator.\n}"}
{"index": 6732, "repo": "ratis-common-2.5.1", "des": "Given pairs of number of retries and sleep time (n0, t0), (n1, t1), .", "code": "Class MultipleLinearRandomRetry {\n\tboolean equals(Object that);\n\tRetryPolicy.Action handleAttemptFailure(RetryPolicy.Event event); // Determines whether it is supposed to retry after the operation has failed.\n\tstatic MultipleLinearRandomRetry parseCommaSeparated(String input); // Parse the given string as a MultipleLinearRandomRetry object.\n}"}
{"index": 13459, "repo": "spring-integration-ws-6.1.2", "des": "Spec for a MarshallingWebServiceOutboundGateway where an external WebServiceTemplate is not provided.", "code": "public static class MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec extends BaseWsOutboundGatewaySpec<MarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec,MarshallingWebServiceOutboundGateway> {\n\tprotected MarshallingWebServiceOutboundGateway assemble(MarshallingWebServiceOutboundGateway gateway);\n\tprotected MarshallingWebServiceOutboundGateway create();\n\tMarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec faultMessageResolver(org.springframework.ws.client.core.FaultMessageResolver resolver); // Specify the FaultMessageResolver to use.\n\tMarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec interceptors(org.springframework.ws.client.support.interceptor.ClientInterceptor... interceptors); // Specify the ClientInterceptors to use.\n\tMarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec marshaller(org.springframework.oxm.Marshaller marshaller); // Configure the marshaller to use.\n\tMarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec messageFactory(org.springframework.ws.WebServiceMessageFactory messageFactory); // Specify the WebServiceMessageFactory to use.\n\tMarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec messageSenders(org.springframework.ws.transport.WebServiceMessageSender... senders); // Specify the WebServiceMessageSenders to use.\n\tMarshallingWsOutboundGatewaySpec.MarshallingWsOutboundGatewayNoTemplateSpec unmarshaller(org.springframework.oxm.Unmarshaller unmarshaller); // Configure the unmarshaller to use.\n}"}
{"index": 17736, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter to read and write 'normal' HTML forms and also to write (but not read) multipart data (e.g.", "code": "public class FormHttpMessageConverter extends Object implements HttpMessageConverter<org.springframework.util.MultiValueMap<String,?>> {\n\tvoid addPartConverter(HttpMessageConverter<?> partConverter); // Add a message body converter.\n\tvoid addSupportedMediaTypes(MediaType... supportedMediaTypes); // Add MediaType objects to be supported by this converter.\n\tboolean canRead(Class<?> clazz, MediaType mediaType); // Indicates whether the given class can be read by this converter.\n\tboolean canWrite(Class<?> clazz, MediaType mediaType); // Indicates whether the given class can be written by this converter.\n\tprotected byte[] generateMultipartBoundary(); // Generate a multipart boundary.\n\tprotected String getFilename(Object part); // Return the filename of the given multipart part.\n\tprotected MediaType getFormContentType(MediaType contentType); // Return the content type used to write forms, given the preferred content type.\n\tprotected HttpEntity<?> getHttpEntity(Object part); // Return an HttpEntity for the given part Object.\n\tList<HttpMessageConverter<?>> getPartConverters(); // Return the configured converters for MIME parts.\n\tList<MediaType> getSupportedMediaTypes(); // Return the list of media types supported by this converter.\n\torg.springframework.util.MultiValueMap<String,String> read(Class<? extends org.springframework.util.MultiValueMap<String,?>> clazz, HttpInputMessage inputMessage); // Read an object of the given type from the given input message, and returns it.\n\tprotected String serializeForm(org.springframework.util.MultiValueMap<String,Object> formData, Charset charset);\n\tvoid setCharset(Charset charset); // Set the default character set to use for reading and writing form data when the request or response Content-Type header does not explicitly specify it.\n\tvoid setMultipartCharset(Charset charset); // Set the character set to use when writing multipart data to encode file names.\n\tvoid setPartConverters(List<HttpMessageConverter<?>> partConverters); // Set the message body converters to use.\n\tvoid setSupportedMediaTypes(List<MediaType> supportedMediaTypes); // Set the list of MediaType objects supported by this converter.\n\tvoid write(org.springframework.util.MultiValueMap<String,?> map, MediaType contentType, HttpOutputMessage outputMessage); // Write a given object to the given output message.\n}"}
{"index": 1473, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a thread action that can be executed in a PDF document.", "code": "Class PDActionHide {\n\tboolean getH(); // A flag indicating whether to hide the annotation or show it\n\tCOSBase getT(); // The annotation or annotations to be hidden or shown\n\tvoid setH(boolean h);\n\tvoid setT(COSBase t);\n}"}
{"index": 3539, "repo": "mahout-mr-0.13.0", "des": "A prior is used to regularize the learning algorithm.", "code": "Interface PriorFunction {\n\tdouble age(double oldValue, double generations, double learningRate); // Applies the regularization to a coefficient.\n\tdouble logP(double betaIJ); // Returns the log of the probability of a particular coefficient value according to the prior.\n}"}
{"index": 14673, "repo": "spring-data-commons-3.1.2", "des": "Auditing handler to mark entity objects created and modified.", "code": "public class AuditingHandler extends AuditingHandlerSupport implements InitializingBean {\n\tvoid afterPropertiesSet();\n\tstatic AuditingHandler from(MappingContext<?,?> mappingContext); // Factory method that creates a new AuditingHandler for the given MappingContext.\n\t<T> T markCreated(T source); // Marks the given object as created.\n\t<T> T markModified(T source); // Marks the given object as modified.\n\tvoid setAuditorAware(AuditorAware<?> auditorAware); // Setter to inject a AuditorAware component to retrieve the current auditor.\n}"}
{"index": 7682, "repo": "cassandra-all-4.1.2", "des": "A collection of partitions for flushing plus some information required for writing an sstable.", "code": "Interface Memtable.FlushablePartitionSet<P extends Partition> {\n\tRegularAndStaticColumns columns(); // The set of all columns that have been written\n\tCommitLogPosition commitLogLowerBound(); // The commit log position at the time that this memtable was created\n\tCommitLogPosition commitLogUpperBound(); // The commit log position at the time that this memtable was switched out\n\tEncodingStats encodingStats(); // Statistics required for writing an sstable efficiently\n\tPartitionPosition from();\n\tdefault boolean isEmpty();\n\tMemtable memtable();\n\tdefault TableMetadata metadata();\n\tPartitionPosition to();\n}"}
{"index": 996, "repo": "ignite-core-2.15.0", "des": "This SPI implementation exports system views as JMX beans.", "code": "Class JmxSystemViewExporterSpi {\n\tprotected void register(SystemView<?> sysView); // Registers JMX bean for specific system view.\n\tvoid spiStart(@Nullable String igniteInstanceName); // This method is called to start SPI.\n\tvoid spiStop(); // This method is called to stop SPI.\n}"}
{"index": 4976, "repo": "commons-collections-3.2.2", "des": "This interface allows definition for all of the indeterminate mutators in a CompositeMap, as well as providing a hook for callbacks on key collisions.", "code": "Interface CompositeMap.MapMutator {\n\tObject put(CompositeMap map, Map[] composited, Object key, Object value); // Called when the CompositeMap.put() method is invoked.\n\tvoid putAll(CompositeMap map, Map[] composited, Map mapToAdd); // Called when the CompositeMap.putAll() method is invoked.\n\tvoid resolveCollision(CompositeMap composite, Map existing, Map added, Collection intersect); // Called when adding a new Composited Map results in a key collision.\n}"}
{"index": 6105, "repo": "jackson-databind-2.15.2", "des": "Base for serializers that allows parsing DOM Documents from JSON Strings.", "code": "Class DOMDeserializer<T> {\n\tabstract T _deserialize(String value, DeserializationContext ctxt); // Main method from trying to deserialize actual value from non-empty String.\n\tprotected DocumentBuilder documentBuilder(); // Overridable factory method used to create DocumentBuilder for parsing XML as DOM.\n\tprotected Document parse(String value);\n}"}
{"index": 2387, "repo": "commons-geometry-euclidean-1.0", "des": "Binary space partitioning (BSP) tree representing a region in one dimensional Euclidean space.", "code": "Class RegionBSPTree1D {\n\tvoid add(Interval interval); // Add an interval to this region.\n\tRegionLocation classify(double x); // Classify a point location with respect to the region.\n\tprotected AbstractRegionBSPTree.RegionSizeProperties<Vector1D> computeRegionSizeProperties();\n\tboolean contains(double x); // Return true if the given point location is on the inside or boundary of the region.\n\tRegionBSPTree1D copy(); // Return a deep copy of this instance.\n\tprotected RegionBSPTree1D.RegionNode1D createNode();\n\tstatic RegionBSPTree1D empty(); // Return a new, empty RegionBSPTree1D instance.\n\tstatic RegionBSPTree1D from(Interval interval, Interval... more); // Construct a new instance from one or more intervals.\n\tstatic RegionBSPTree1D from(Iterable<Interval> intervals); // Construct a new instance from the given collection of intervals.\n\tstatic RegionBSPTree1D full(); // Return a new RegionBSPTree1D instance containing the entire space.\n\tdouble getBoundarySize();\n\tdouble getMax(); // Get the maximum value on the inside of the region; returns Double.POSITIVE_INFINITY if the region does not have a maximum value and Double.NEGATIVE_INFINITY if the region is empty.\n\tdouble getMin(); // Get the minimum value on the inside of the region; returns Double.NEGATIVE_INFINITY if the region does not have a minimum value and Double.POSITIVE_INFINITY if the region is empty.\n\tVector1D project(Vector1D pt);\n\tSplit<RegionBSPTree1D> split(Hyperplane<Vector1D> splitter);\n\tprotected boolean swapsInsideOutside(Transform<Vector1D> transform); // Returns true if the given transform would result in a swapping of the interior and exterior of the region if applied.\n\tList<Interval> toIntervals(); // Convert the region represented by this tree into a list of separate Intervals, arranged in order of ascending min value.\n}"}
{"index": 17150, "repo": "spring-integration-core-6.1.2", "des": "An IntegrationComponentSpec for PollerMetadatas.", "code": "public final class PollerSpec extends IntegrationComponentSpec<PollerSpec,PollerMetadata> implements ComponentsRegistration {\n\tPollerSpec advice(org.aopalliance.aop.Advice... advice); // Specify AOP Advices for the pollingTask.\n\tPollerSpec errorChannel(String errorChannelName); // Specify a bean name for the MessageChannel to use for sending error message in case of polling failures.\n\tPollerSpec errorChannel(org.springframework.messaging.MessageChannel errorChannel); // Specify a MessageChannel to use for sending error message in case of polling failures.\n\tPollerSpec errorHandler(org.springframework.util.ErrorHandler errorHandler); // Specify the ErrorHandler to wrap a taskExecutor to the ErrorHandlingTaskExecutor.\n\tMap<Object,String> getComponentsToRegister();\n\tPollerSpec maxMessagesPerPoll(long maxMessagesPerPoll);\n\tPollerSpec receiveTimeout(long receiveTimeout); // Specify a timeout in milliseconds to wait for a message in the MessageChannel.\n\tPollerSpec sendTimeout(long sendTimeout);\n\tPollerSpec taskExecutor(Executor taskExecutor); // Specify an Executor to perform the pollingTask.\n\tPollerSpec transactional(); // Specify a TransactionInterceptor Advice with default PlatformTransactionManager and DefaultTransactionAttribute for the pollingTask.\n\tPollerSpec transactional(org.springframework.transaction.interceptor.TransactionInterceptor transactionInterceptor); // Specify a TransactionInterceptor Advice for the pollingTask.\n\tPollerSpec transactional(org.springframework.transaction.TransactionManager transactionManager); // Specify a TransactionInterceptor Advice with the provided PlatformTransactionManager and default DefaultTransactionAttribute for the pollingTask.\n\tPollerSpec transactionSynchronizationFactory(TransactionSynchronizationFactory transactionSynchronizationFactory); // Specify the TransactionSynchronizationFactory to attach a TransactionSynchronization to the transaction around poll operation.\n}"}
{"index": 4562, "repo": "beam-sdks-java-core-2.49.0", "des": "A ReadableState cell containing a single value.", "code": "Interface ValueState<T> {\n\tT read(); // Read the current value, blocking until it is available.\n\tValueState<T> readLater(); // Indicate that the value will be read later.\n\tvoid write(T input); // Set the value.\n}"}
{"index": 17722, "repo": "spring-web-6.0.11", "des": "Representation of a complete RFC 7807 error response including status, headers, and an RFC 7807 formatted ProblemDetail body.", "code": "public interface ErrorResponse {\n\tstatic ErrorResponse.Builder builder(Throwable ex, HttpStatusCode statusCode, String detail); // Return a builder to create an ErrorResponse instance.\n\tstatic ErrorResponse create(Throwable ex, HttpStatusCode statusCode, String detail); // Static factory method to build an instance via builder(Throwable, HttpStatusCode, String).\n\tProblemDetail getBody(); // Return the body for the response, formatted as an RFC 7807 ProblemDetail whose status should match the response status.\n\tstatic String getDefaultDetailMessageCode(Class<?> exceptionType, String suffix); // Build a message code for the \"detail\" field, for the given exception type.\n\tstatic String getDefaultTitleMessageCode(Class<?> exceptionType); // Build a message code for the \"title\" field, for the given exception type.\n\tdefault Object[] getDetailMessageArguments(); // Return arguments to use along with a message code to resolve the problem \"detail\" for this exception through a MessageSource.\n\tdefault Object[] getDetailMessageArguments(org.springframework.context.MessageSource messageSource, Locale locale); // Variant of getDetailMessageArguments() that uses the given MessageSource for resolving the message argument values.\n\tdefault String getDetailMessageCode(); // Return a code to use to resolve the problem \"detail\" for this exception through a MessageSource.\n\tdefault HttpHeaders getHeaders(); // Return headers to use for the response.\n\tHttpStatusCode getStatusCode(); // Return the HTTP status code to use for the response.\n\tdefault String getTitleMessageCode(); // Return a code to use to resolve the problem \"title\" for this exception through a MessageSource.\n\tdefault ProblemDetail updateAndGetBody(org.springframework.context.MessageSource messageSource, Locale locale); // Resolve the detailMessageCode and the titleMessageCode through the given MessageSource, and if found, update the \"detail\" and \"title\" fields respectively.\n}"}
{"index": 15241, "repo": "spring-boot-3.1.1", "des": "PropertySource backed by a directory tree that contains files for each value.", "code": "public class ConfigTreePropertySource extends org.springframework.core.env.EnumerablePropertySource<Path> implements OriginLookup<String> {\n\tOrigin getOrigin(String name); // Return the origin of the given key or null if the origin cannot be determined.\n\tConfigTreePropertySource.Value getProperty(String name);\n\tString[] getPropertyNames();\n\tboolean isImmutable(); // Return true if this lookup is immutable and has contents that will never change.\n}"}
{"index": 5356, "repo": "druid-processing-26.0.0", "des": "An extendable linear shard spec containing the information of core partitions.", "code": "Class NumberedShardSpec {\n\t<T> PartitionChunk<T> createChunk(T obj);\n\tboolean equals(Object o);\n\tList<String> getDomainDimensions(); // Get dimensions who have possible range for the rows this shard contains.\n\tShardSpecLookup getLookup(List<? extends ShardSpec> shardSpecs);\n\tint getNumCorePartitions();\n\tint getPartitionNum(); // Returns the partition ID of this segment.\n\tString getType(); // Get the type name of this ShardSpec.\n\tboolean possibleInDomain(Map<String,com.google.common.collect.RangeSet<String>> domain); // if given domain ranges are not possible in this shard, return false; otherwise return true;\n}"}
{"index": 15423, "repo": "pulsar-client-api-3.0.0", "des": "Generic Record Builder to build a GenericRecord.", "code": "@Public @Stable public interface GenericRecordBuilder {\n\tGenericRecord build(); // Build a generic record.\n\tGenericRecordBuilder clear(String fieldName); // Clears the value of the given field.\n\tGenericRecordBuilder clear(Field field); // Clears the value of the given field.\n\tGenericRecordBuilder set(String fieldName, Object value); // Sets the value of a field.\n\tGenericRecordBuilder set(Field field, Object value); // Sets the value of a field.\n}"}
{"index": 5400, "repo": "druid-processing-26.0.0", "des": "Segment that is also a ReferenceCountingSegment, allowing query engines that operate directly on segments to track references so that dropping a Segment can be done safely to ensure there are no in-flight queries.", "code": "Class ReferenceCountingSegment {\n\tOptional<Closeable> acquireReferences(); // This method is expected to increment a reference count and provide a Closeable that decrements the reference count when closed.\n\t<T> T as(Class<T> clazz); // Request an implementation of a particular interface.\n\tQueryableIndex asQueryableIndex();\n\tStorageAdapter asStorageAdapter();\n\tshort getAtomicUpdateGroupSize(); // Return the size of atomicUpdateGroup.\n\tSegment getBaseSegment();\n\torg.joda.time.Interval getDataInterval();\n\tint getEndRootPartitionId(); // See doc of Overshadowable.getStartRootPartitionId().\n\tSegmentId getId();\n\tshort getMinorVersion();\n\tint getStartRootPartitionId(); // All overshadowables have root partition range.\n\tString getVersion();\n\tboolean overshadows(ReferenceCountingSegment other); // Returns true if this overshadowable overshadows the other.\n\tstatic ReferenceCountingSegment wrapRootGenerationSegment(Segment baseSegment);\n\tstatic ReferenceCountingSegment wrapSegment(Segment baseSegment, ShardSpec shardSpec);\n}"}
{"index": 172, "repo": "commons-collections4-4.4", "des": "Decorates another Set to ensure that the order of addition is retained and used by the iterator.", "code": "Class ListOrderedSet<E> {\n\tboolean add(E object);\n\tvoid add(int index, E object); // Inserts the specified element at the specified position if it is not yet contained in this ordered set (optional operation).\n\tboolean addAll(Collection<? extends E> coll);\n\tboolean addAll(int index, Collection<? extends E> coll); // Inserts all elements in the specified collection not yet contained in the ordered set at the specified position (optional operation).\n\tList<E> asList(); // Gets an unmodifiable view of the order of the Set.\n\tvoid clear();\n\tE get(int index); // Returns the element at the specified position in this ordered set.\n\tint indexOf(Object object); // Returns the index of the first occurrence of the specified element in ordered set.\n\tOrderedIterator<E> iterator();\n\tstatic <E> ListOrderedSet<E> listOrderedSet(List<E> list); // Factory method to create an ordered set using the supplied list to retain order.\n\tstatic <E> ListOrderedSet<E> listOrderedSet(Set<E> set); // Factory method to create an ordered set.\n\tstatic <E> ListOrderedSet<E> listOrderedSet(Set<E> set, List<E> list); // Factory method to create an ordered set specifying the list and set to use.\n\tE remove(int index); // Removes the element at the specified position from the ordered set.\n\tboolean remove(Object object);\n\tboolean removeAll(Collection<?> coll);\n\tboolean removeIf(Predicate<? super E> filter);\n\tboolean retainAll(Collection<?> coll);\n\tObject[] toArray();\n\t<T> T[] toArray(T[] a);\n}"}
{"index": 17142, "repo": "spring-integration-core-6.1.2", "des": "Transformer implementation that converts a payload instance into a JSON string representation.", "code": "public class ObjectToJsonTransformer extends AbstractTransformer {\n\tprotected Object doTransform(org.springframework.messaging.Message<?> message); // Subclasses must implement this method to provide the transformation logic.\n\tString getComponentType(); // Subclasses may implement this method to provide component type information.\n\tvoid setContentType(String contentType); // Set the content-type header value.\n}"}
{"index": 9215, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Implements the RequestInterceptor interface and provides common functionality which can can be used and/or extended by other concrete intercepter classes.", "code": "Class AbstractRequestInterceptor {\n\torg.apache.hadoop.yarn.server.api.protocolrecords.DistributedSchedulingAllocateResponse allocateForDistributedScheduling(org.apache.hadoop.yarn.server.api.protocolrecords.DistributedSchedulingAllocateRequest request); // Default implementation that invokes the distributed scheduling version of the register method.\n\tAMRMProxyApplicationContext getApplicationContext(); // Gets the AMRMProxyApplicationContext.\n\torg.apache.hadoop.conf.Configuration getConf(); // Gets the Configuration.\n\tRequestInterceptor getNextInterceptor(); // Gets the next RequestInterceptor in the chain.\n\tNMStateStoreService getNMStateStore(); // A helper method for getting NM state store.\n\tvoid init(AMRMProxyApplicationContext appContext); // Initializes the RequestInterceptor.\n\tvoid recover(Map<String,byte[]> recoveredDataMap); // Recover RequestInterceptor state from store.\n\torg.apache.hadoop.yarn.server.api.protocolrecords.RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterRequest request); // Default implementation that invokes the distributed scheduling version of the allocate method.\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf); // Sets the Configuration.\n\tvoid setNextInterceptor(RequestInterceptor nextInterceptor); // Sets the RequestInterceptor in the chain.\n\tvoid shutdown(); // Disposes the RequestInterceptor.\n}"}
{"index": 17871, "repo": "spring-web-6.0.11", "des": "Resolves method arguments annotated with @RequestHeader except for Map arguments.", "code": "public class RequestHeaderMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver {\n\tprotected AbstractNamedValueMethodArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueMethodArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter); // Invoked when a named value is required, but AbstractNamedValueMethodArgumentResolver.resolveName(String, MethodParameter, NativeWebRequest) returned null and there is no default value.\n\tprotected void handleMissingValueAfterConversion(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest request); // Invoked when a named value is present but becomes null after conversion.\n\tprotected Object resolveName(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest request); // Resolve the given parameter type and value name into an argument value.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 11004, "repo": "spring-data-redis-3.1.2", "des": "Builder to build a StreamMessageListenerContainer.ConsumerStreamReadRequest.", "code": "public static class StreamMessageListenerContainer.ConsumerStreamReadRequestBuilder<K> extends StreamMessageListenerContainer.StreamReadRequestBuilder<K> {\n\tStreamMessageListenerContainer.ConsumerStreamReadRequestBuilder<K> autoAcknowledge(boolean autoAck); // Configure auto-acknowledgement for stream message consumption.\n\tStreamMessageListenerContainer.ConsumerStreamReadRequest<K> build(); // Build a new instance of StreamMessageListenerContainer.ConsumerStreamReadRequest.\n\tStreamMessageListenerContainer.ConsumerStreamReadRequestBuilder<K> cancelOnError(Predicate<Throwable> cancelSubscriptionOnError); // Configure a cancellation Predicate to be notified on read, deserialization, and listener errors.\n\tStreamMessageListenerContainer.ConsumerStreamReadRequestBuilder<K> consumer(Consumer consumer); // Configure a Consumer to consume stream messages within a consumer group.\n\tStreamMessageListenerContainer.ConsumerStreamReadRequestBuilder<K> errorHandler(ErrorHandler errorHandler); // Configure a ErrorHandler to be notified on read, deserialization, and listener errors.\n}"}
{"index": 15278, "repo": "spring-boot-3.1.1", "des": "Options controlling the contents of ErrorAttributes.", "code": "public final class ErrorAttributeOptions extends Object {\n\tstatic ErrorAttributeOptions defaults(); // Create an ErrorAttributeOptions with defaults.\n\tErrorAttributeOptions excluding(ErrorAttributeOptions.Include... excludes); // Return an ErrorAttributeOptions that excludes the specified attribute ErrorAttributeOptions.Include options.\n\tSet<ErrorAttributeOptions.Include> getIncludes(); // Get all options for including attributes in the error response.\n\tErrorAttributeOptions including(ErrorAttributeOptions.Include... includes); // Return an ErrorAttributeOptions that includes the specified attribute ErrorAttributeOptions.Include options.\n\tboolean isIncluded(ErrorAttributeOptions.Include include); // Get the option for including the specified attribute in the error response.\n\tstatic ErrorAttributeOptions of(Collection<ErrorAttributeOptions.Include> includes); // Create an ErrorAttributeOptions that includes the specified attribute ErrorAttributeOptions.Include options.\n\tstatic ErrorAttributeOptions of(ErrorAttributeOptions.Include... includes); // Create an ErrorAttributeOptions that includes the specified attribute ErrorAttributeOptions.Include options.\n}"}
{"index": 887, "repo": "ignite-core-2.15.0", "des": "Provides callback during activation/deactivation cluster.", "code": "Interface IgniteChangeGlobalStateSupport {\n\tvoid onActivate(GridKernalContext kctx); // Called when cluster performing activation.\n\tvoid onDeActivate(GridKernalContext kctx); // Called when cluster performing deactivation.\n}"}
{"index": 11835, "repo": "spring-kafka-3.0.9", "des": "Default implementation of AfterRollbackProcessor.", "code": "public class DefaultAfterRollbackProcessor<K,V> extends FailedRecordProcessor implements AfterRollbackProcessor<K,V> {\n\tvoid clearThreadState(); // Optional method to clear thread state; will be called just before a consumer thread terminates.\n\tboolean isProcessInTransaction(); // Return true to invoke AfterRollbackProcessor.process(List, Consumer, MessageListenerContainer, Exception, boolean, ContainerProperties.EOSMode) in a new transaction.\n\tvoid process(List<org.apache.kafka.clients.consumer.ConsumerRecord<K,V>> records, org.apache.kafka.clients.consumer.Consumer<K,V> consumer, MessageListenerContainer container, Exception exception, boolean recoverable, ContainerProperties.EOSMode eosMode); // Process the remaining records.\n}"}
{"index": 5758, "repo": "freemarker-2.3.32", "des": "Utility classes for implementing TemplateValueFormat-s.", "code": "Class TemplateFormatUtil {\n\tstatic void checkHasNoParameters(java.lang.String params);\n\tstatic java.util.Date getNonNullDate(TemplateDateModel dateModel); // Utility method to extract the Date from an TemplateDateModel, and throw TemplateModelException with a standard error message if that's null.\n\tstatic java.lang.Number getNonNullNumber(TemplateNumberModel numberModel); // Utility method to extract the Number from an TemplateNumberModel, and throws TemplateModelException with a standard error message if that's null.\n}"}
{"index": 15212, "repo": "spring-boot-3.1.1", "des": "Context information for use by BindHandlers.", "code": "public interface BindContext {\n\tBinder getBinder(); // Return the source binder that is performing the bind operation.\n\tConfigurationProperty getConfigurationProperty(); // Return the ConfigurationProperty actually being bound or null if the property has not yet been determined.\n\tint getDepth(); // Return the current depth of the binding.\n\tIterable<ConfigurationPropertySource> getSources(); // Return an Iterable of the sources being used by the Binder.\n}"}
{"index": 14048, "repo": "spring-context-support-6.0.11", "des": "Base class for CacheManager implementations that want to support built-in awareness of Spring-managed transactions.", "code": "public abstract class AbstractTransactionSupportingCacheManager extends org.springframework.cache.support.AbstractCacheManager {\n\tprotected org.springframework.cache.Cache decorateCache(org.springframework.cache.Cache cache);\n\tboolean isTransactionAware(); // Return whether this CacheManager has been configured to be transaction-aware.\n\tvoid setTransactionAware(boolean transactionAware); // Set whether this CacheManager should expose transaction-aware Cache objects.\n}"}
{"index": 1845, "repo": "spring-cloud-sleuth-core-2.2.8.RELEASE", "des": "Allows customization of messaging spans.", "code": "Interface MessageSpanCustomizer {\n\tbrave.SpanCustomizer customizeHandle(brave.SpanCustomizer spanCustomizer, org.springframework.messaging.Message<?> message, org.springframework.messaging.MessageChannel messageChannel); // Customizes the span created when ExecutorChannelInterceptor.beforeHandle(Message, MessageChannel, MessageHandler) gets called.\n\tbrave.SpanCustomizer customizeReceive(brave.SpanCustomizer spanCustomizer, org.springframework.messaging.Message<?> message, org.springframework.messaging.MessageChannel messageChannel); // Customizes the span created when ChannelInterceptor.postReceive(Message, MessageChannel) gets called.\n\tbrave.SpanCustomizer customizeSend(brave.SpanCustomizer spanCustomizer, org.springframework.messaging.Message<?> message, org.springframework.messaging.MessageChannel messageChannel); // Customizes the span created when ChannelInterceptor.preSend(Message, MessageChannel) gets called.\n}"}
{"index": 8226, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of MethodArgumentResolver and MethodReturnValueHandler that uses Marshaller and Unmarshaller to support marshalled objects.", "code": "Class MarshallingPayloadMethodProcessor {\n\torg.springframework.oxm.Marshaller getMarshaller(); // Returns the marshaller used for transforming objects into XML.\n\torg.springframework.oxm.Unmarshaller getUnmarshaller(); // Returns the unmarshaller used for transforming XML into objects.\n\tvoid handleReturnValue(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue); // Handles the given return value.\n\tObject resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tvoid setMarshaller(org.springframework.oxm.Marshaller marshaller); // Sets the marshaller used for transforming objects into XML.\n\tvoid setUnmarshaller(org.springframework.oxm.Unmarshaller unmarshaller); // Sets the unmarshaller used for transforming XML into objects.\n\tprotected boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n}"}
{"index": 5224, "repo": "druid-processing-26.0.0", "des": "Serializer that produces EntireLayoutColumnarDoublesSupplier.", "code": "Class EntireLayoutColumnarDoublesSerializer {\n\tvoid add(double value);\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid open();\n\tint size();\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 4462, "repo": "beam-sdks-java-core-2.49.0", "des": "Implementation which is able to adapt a multimap materialization to a Map<K, Iterable<V>>.", "code": "Class PCollectionViews.MultimapViewFn2<K,V> {\n\tjava.util.Map<K,java.lang.Iterable<V>> apply(Materializations.MultimapView<K,V> primitiveViewT); // A function to adapt a primitive view type to a desired view type.\n\tMaterialization<Materializations.MultimapView<K,V>> getMaterialization(); // Gets the materialization of this ViewFn.\n\tTypeDescriptor<java.util.Map<K,java.lang.Iterable<V>>> getTypeDescriptor(); // Return the TypeDescriptor describing the output of this fn.\n}"}
{"index": 10958, "repo": "spring-data-redis-3.1.2", "des": "Provides access to RedisCommands and the segregated command interfaces.", "code": "public interface RedisCommandsProvider {\n\tRedisCommands commands(); // Get RedisCommands.\n\tRedisGeoCommands geoCommands(); // Get RedisGeoCommands.\n\tRedisHashCommands hashCommands(); // Get RedisHashCommands.\n\tRedisHyperLogLogCommands hyperLogLogCommands(); // Get RedisHyperLogLogCommands.\n\tRedisKeyCommands keyCommands(); // Get RedisKeyCommands.\n\tRedisListCommands listCommands(); // Get RedisListCommands.\n\tRedisScriptingCommands scriptingCommands(); // Get RedisScriptingCommands.\n\tRedisServerCommands serverCommands(); // Get RedisServerCommands.\n\tRedisSetCommands setCommands(); // Get RedisSetCommands.\n\tRedisStreamCommands streamCommands(); // Get RedisStreamCommands.\n\tRedisStringCommands stringCommands(); // Get RedisStringCommands.\n\tRedisZSetCommands zSetCommands(); // Get RedisZSetCommands.\n}"}
{"index": 16741, "repo": "spring-jms-6.0.11", "des": "Resource holder wrapping a JMS Connection and a JMS Session.", "code": "public class JmsResourceHolder extends org.springframework.transaction.support.ResourceHolderSupport {\n\tfinal void addConnection(Connection connection); // Add the given Connection to this resource holder.\n\tfinal void addSession(Session session); // Add the given Session to this resource holder.\n\tfinal void addSession(Session session, Connection connection); // Add the given Session to this resource holder, registered for a specific Connection.\n\tvoid closeAll(); // Close all of this resource holder's Sessions and clear its state.\n\tvoid commitAll(); // Commit all of this resource holder's Sessions.\n\tboolean containsSession(Session session); // Determine whether the given Session is registered with this resource holder.\n\tConnection getConnection(); // Return this resource holder's default Connection, or null if none.\n\t<C extends Connection>C getConnection(Class<C> connectionType); // Return this resource holder's Connection of the given type, or null if none.\n\tSession getSession(); // Return this resource holder's default Session, or null if none.\n\t<S extends Session>S getSession(Class<S> sessionType); // Return this resource holder's Session of the given type, or null if none.\n\t<S extends Session>S getSession(Class<S> sessionType, Connection connection); // Return this resource holder's Session of the given type for the given connection, or null if none.\n\tfinal boolean isFrozen(); // Return whether this resource holder is frozen, i.e.\n}"}
{"index": 3684, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableShortObjectInspector inspects a ShortWritable Object.", "code": "Class WritableShortObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tObject create(short value); // Create an object with the value.\n\tshort get(Object o); // Get the short data.\n\tObject getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n\tObject set(Object o, short value); // Set the object with the value.\n}"}
{"index": 3957, "repo": "spring-cloud-commons-parent-1.1.9.RELEASE", "des": "Retry logic to use for the LoadBalancerClient.", "code": "Interface LoadBalancedRetryPolicy {\n\tboolean canRetryNextServer(LoadBalancedRetryContext context); // Return true to retry the failed request on the next server from the load balancer.\n\tboolean canRetrySameServer(LoadBalancedRetryContext context); // Return true to retry the failed request on the same server.\n\tvoid close(LoadBalancedRetryContext context); // Called when the retry operation has ended.\n\tvoid registerThrowable(LoadBalancedRetryContext context, Throwable throwable); // Called when the execution fails.\n}"}
{"index": 17085, "repo": "spring-integration-core-6.1.2", "des": "A public API for dynamic (manual) registration of IntegrationFlows, not via standard bean registration phase.", "code": "public interface IntegrationFlowContext {\n\tIntegrationFlowContext.IntegrationFlowRegistration getRegistrationById(String flowId); // Obtain an IntegrationFlowContext.IntegrationFlowRegistration for the IntegrationFlow associated with the provided flowId.\n\tMap<String,IntegrationFlowContext.IntegrationFlowRegistration> getRegistry(); // Provide the state of the mapping of integration flow names to their IntegrationFlowContext.IntegrationFlowRegistration instances.\n\tdefault boolean isUseIdAsPrefix(String flowId); // Return true to prefix flow bean names with the flow id and a period.\n\tMessagingTemplate messagingTemplateFor(String flowId); // Obtain a MessagingTemplate with its default destination set to the input channel of the IntegrationFlow for provided flowId.\n\tIntegrationFlowContext.IntegrationFlowRegistrationBuilder registration(IntegrationFlow integrationFlow); // Associate provided IntegrationFlow with an IntegrationFlowContext.IntegrationFlowRegistrationBuilder for additional options and farther registration in the application context.\n\tvoid remove(String flowId); // Destroy an IntegrationFlow bean (as well as all its dependant beans) for provided flowId and clean up all the local cache for it.\n}"}
{"index": 13606, "repo": "spring-messaging-6.0.11", "des": "Contract to encode and decode a Message to and from a ByteBuffer allowing a higher-level protocol (e.g.", "code": "public interface TcpMessageCodec<P> {\n\tList<Message<P>> decode(ByteBuffer buffer); // Decode the input ByteBuffer into one or more Messages.\n\tByteBuffer encode(Message<P> message); // Encode the given Message to the output ByteBuffer.\n}"}
{"index": 17773, "repo": "spring-web-6.0.11", "des": "Strategy for encoding a stream of objects of type <T> and writing the encoded stream of bytes to an ReactiveHttpOutputMessage.", "code": "public interface HttpMessageWriter<T> {\n\tboolean canWrite(org.springframework.core.ResolvableType elementType, MediaType mediaType); // Whether the given object type is supported by this writer.\n\tList<MediaType> getWritableMediaTypes(); // Return the list of media types supported by this Writer.\n\tdefault List<MediaType> getWritableMediaTypes(org.springframework.core.ResolvableType elementType); // Return the list of media types supported by this Writer for the given type of element.\n\tdefault reactor.core.publisher.Mono<Void> write(Publisher<? extends T> inputStream, org.springframework.core.ResolvableType actualType, org.springframework.core.ResolvableType elementType, MediaType mediaType, ServerHttpRequest request, ServerHttpResponse response, Map<String,Object> hints); // Server-side only alternative to write(Publisher, ResolvableType, MediaType, ReactiveHttpOutputMessage, Map) with additional context available.\n\treactor.core.publisher.Mono<Void> write(Publisher<? extends T> inputStream, org.springframework.core.ResolvableType elementType, MediaType mediaType, ReactiveHttpOutputMessage message, Map<String,Object> hints); // Write a given stream of object to the output message.\n}"}
{"index": 5858, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Utility class to validate the inputs to FederationMembershipStateStore, allows a fail fast mechanism for invalid user inputs.", "code": "Class FederationMembershipStateStoreInputValidator {\n\tprotected static void checkSubClusterId(SubClusterId subClusterId); // Validate if the SubCluster Id is present or not.\n\tstatic void checkSubClusterInfo(SubClusterInfo subClusterInfo); // Validate if all the required fields on SubClusterInfo are present or not.\n\tstatic void validate(GetSubClusterInfoRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n\tstatic void validate(SubClusterDeregisterRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n\tstatic void validate(SubClusterHeartbeatRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n\tstatic void validate(SubClusterRegisterRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n}"}
{"index": 18348, "repo": "opencms-core-15.0", "des": "Data bean which walkFileSystem passes to its callback.", "code": "Class CmsFileUtil.FileWalkState {\n\tjava.io.File getCurrentDir(); // Gets the current directory.\n\tjava.util.List<java.io.File> getDirectories(); // Gets the list of subdirectories.\n\tjava.util.List<java.io.File> getFiles(); // Returns the list of files.\n}"}
{"index": 7128, "repo": "calcite-core-1.34.0", "des": "This is a tool to visualize the rule match process of a RelOptPlanner.", "code": "Class RuleMatchVisualizer {\n\tvoid attachTo(RelOptPlanner planner); // Attaches the visualizer to the planner.\n\tString getJsonStringResult();\n\tvoid relChosen(RelOptListener.RelChosenEvent event); // Notifies this listener that a relational expression has been chosen as part of the final implementation of the query plan.\n\tvoid relDiscarded(RelOptListener.RelDiscardedEvent event); // Notifies this listener that a relational expression is no longer of interest to the planner.\n\tvoid relEquivalenceFound(RelOptListener.RelEquivalenceEvent event); // Notifies this listener that a relational expression has been registered with a particular equivalence class after an equivalence has been either detected or asserted.\n\tvoid ruleAttempted(RelOptListener.RuleAttemptedEvent event); // Notifies this listener that an optimizer rule is being applied to a particular relational expression.\n\tvoid ruleProductionSucceeded(RelOptListener.RuleProductionEvent event); // Notifies this listener that an optimizer rule has been successfully applied to a particular relational expression, resulting in a new equivalent expression (relEquivalenceFound will also be called unless the new expression is identical to an existing one).\n\tvoid setIncludeIntermediateCosts(boolean includeIntermediateCosts); // Output intermediate costs, including all cost updates.\n\tvoid setIncludeTransitiveEdges(boolean includeTransitiveEdges); // Output edges from a subset to the nodes of all subsets that satisfy it.\n\tvoid writeToFile(); // Writes the HTML and JS files of the rule match visualization.\n}"}
{"index": 11407, "repo": "spring-context-6.0.11", "des": "A no operation Cache implementation suitable for disabling caching.", "code": "public class NoOpCache extends Object implements Cache {\n\tvoid clear(); // Clear the cache through removing all mappings.\n\tvoid evict(Object key); // Evict the mapping for this key from this cache if it is present.\n\tboolean evictIfPresent(Object key); // Evict the mapping for this key from this cache if it is present, expecting the key to be immediately invisible for subsequent lookups.\n\tCache.ValueWrapper get(Object key); // Return the value to which this cache maps the specified key.\n\t<T> T get(Object key, Class<T> type); // Return the value to which this cache maps the specified key, generically specifying a type that return value will be cast to.\n\t<T> T get(Object key, Callable<T> valueLoader); // Return the value to which this cache maps the specified key, obtaining that value from valueLoader if necessary.\n\tString getName(); // Return the cache name.\n\tObject getNativeCache(); // Return the underlying native cache provider.\n\tboolean invalidate(); // Invalidate the cache through removing all mappings, expecting all entries to be immediately invisible for subsequent lookups.\n\tvoid put(Object key, Object value); // Associate the specified value with the specified key in this cache.\n\tCache.ValueWrapper putIfAbsent(Object key, Object value); // Atomically associate the specified value with the specified key in this cache if it is not set already.\n}"}
{"index": 6915, "repo": "calcite-core-1.34.0", "des": "Rule to convert a Aggregate to a JdbcRules.", "code": "Class JdbcRules.JdbcAggregateRule {\n\t@Nullable RelNode convert(RelNode rel); // Converts a relational expression to the target trait(s) of this rule.\n\tstatic JdbcRules.JdbcAggregateRule create(JdbcConvention out); // Creates a JdbcAggregateRule.\n}"}
{"index": 14893, "repo": "spring-data-keyvalue-3.1.2", "des": "Most trivial implementation of KeySpaceResolver returning the Class.getName().", "code": "public enum ClassNameKeySpaceResolver extends Enum<ClassNameKeySpaceResolver> implements KeySpaceResolver {\n\tString resolveKeySpace(Class<?> type); // Determine the keySpace to use for a given type.\n\tstatic ClassNameKeySpaceResolver valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic ClassNameKeySpaceResolver[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 1223, "repo": "ignite-core-2.15.0", "des": "Exporter of system view to the external recepient.", "code": "Interface SystemViewExporterSpi {\n\tvoid setExportFilter(Predicate<SystemView<?>> filter); // Sets export filter.\n\tvoid setSystemViewRegistry(ReadOnlySystemViewRegistry registry); // Sets system view registry that SPI should export.\n}"}
{"index": 5252, "repo": "druid-processing-26.0.0", "des": "Wraps a Frame and provides ways to compare rows of that frame to various other things.", "code": "Interface FrameComparisonWidget {\n\tint compare(int row, FrameComparisonWidget otherWidget, int otherRow); // Compare a specific row of this frame to a specific row of another frame.\n\tint compare(int row, RowKey key); // Compare a specific row of this frame to the provided key.\n\tboolean isPartiallyNullKey(int row); // Whether a particular row has a null field in its comparison key.\n\tRowKey readKey(int row); // Returns the RowKey corresponding to a particular row.\n}"}
{"index": 17162, "repo": "spring-integration-core-6.1.2", "des": "Exposes adding/removing individual recipients operations for RecipientListRouter.", "code": "@ManagedResource @IntegrationManagedResource public interface RecipientListRouterManagement {\n\tvoid addRecipient(String channelName); // Add a recipient with channelName.\n\tvoid addRecipient(String channelName, String selectorExpression); // Add a recipient with channelName and expression.\n\tCollection<?> getRecipients();\n\tint removeRecipient(String channelName); // Remove all recipients that match the channelName.\n\tint removeRecipient(String channelName, String selectorExpression); // Remove all recipients that match the channelName and expression.\n\tvoid replaceRecipients(Properties recipientMappings); // Replace recipient.\n\tvoid setRecipientMappings(Map<String,String> recipientMappings); // Set recipients.\n}"}
{"index": 18590, "repo": "hibernate-core-5.6.15.Final", "des": "An SQL dialect for Postgres 9.1 and later, adds support for PARTITION BY as a keyword.", "code": "Class PostgreSQL91Dialect {\n\tboolean supportsNonQueryWithCTE(); // Does this dialect/database support non-query statements (e.g.\n\tboolean supportsPartitionBy(); // Does the underlying database support partition by\n}"}
{"index": 15517, "repo": "spring-batch-core-5.0.2", "des": "Convenient factory bean that creates a transactional proxy around a JobOperator.", "code": "public class JobOperatorFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<JobOperator>, org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tJobOperator getObject();\n\tClass<?> getObjectType();\n\tboolean isSingleton();\n\tvoid setJobExplorer(JobExplorer jobExplorer); // Setter for the job explorer.\n\tvoid setJobLauncher(JobLauncher jobLauncher); // Setter for the job launcher.\n\tvoid setJobParametersConverter(JobParametersConverter jobParametersConverter); // Setter for the job parameters converter.\n\tvoid setJobRegistry(JobRegistry jobRegistry); // Setter for the job registry.\n\tvoid setJobRepository(JobRepository jobRepository); // Setter for the job repository.\n\tvoid setTransactionAttributeSource(org.springframework.transaction.interceptor.TransactionAttributeSource transactionAttributeSource); // Set the transaction attributes source to use in the created proxy.\n\tvoid setTransactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Setter for the transaction manager.\n}"}
{"index": 6448, "repo": "exoplayer-core-2.9.6", "des": "Defines a span of data that may or may not be cached (as indicated by isCached).", "code": "Class CacheSpan {\n\tint compareTo(CacheSpan another);\n\tboolean isHoleSpan(); // Returns whether this is a hole CacheSpan.\n\tboolean isOpenEnded(); // Returns whether this is an open-ended CacheSpan.\n}"}
{"index": 17726, "repo": "spring-web-6.0.11", "des": "Resolves method arguments annotated with @Value.", "code": "public class ExpressionValueMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver {\n\tprotected AbstractNamedValueMethodArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Create the AbstractNamedValueMethodArgumentResolver.NamedValueInfo object for the given method parameter.\n\tprotected void handleMissingValue(String name, org.springframework.core.MethodParameter parameter); // Invoked when a named value is required, but AbstractNamedValueMethodArgumentResolver.resolveName(String, MethodParameter, NativeWebRequest) returned null and there is no default value.\n\tprotected Object resolveName(String name, org.springframework.core.MethodParameter parameter, NativeWebRequest webRequest); // Resolve the given parameter type and value name into an argument value.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 4277, "repo": "beam-sdks-java-core-2.49.0", "des": "A Reader that reads records from a BlockBasedSource.", "code": "Class BlockBasedSource.BlockBasedReader<T> {\n\tT getCurrent(); // Returns the value of the data item that was read by the last Source.Reader.start() or Source.Reader.advance() call.\n\tabstract @Nullable BlockBasedSource.Block<T> getCurrentBlock(); // Returns the current block (the block that was read by the last successful call to readNextBlock()).\n\tabstract long getCurrentBlockOffset(); // Returns the largest offset such that starting to read from that offset includes the current block.\n\tabstract long getCurrentBlockSize(); // Returns the size of the current block in bytes as it is represented in the underlying file, if possible.\n\tprotected long getCurrentOffset(); // Returns the starting offset of the current record, which has been read by the last successful Source.Reader.start() or Source.Reader.advance() call.\n\t@Nullable java.lang.Double getFractionConsumed(); // Returns a value in [0, 1] representing approximately what fraction of the current source this reader has read so far, or null if such an estimate is not available.\n\tboolean isAtSplitPoint(); // Returns true if the reader is at a split point.\n\tabstract boolean readNextBlock(); // Read the next block from the input.\n\tprotected boolean readNextRecord(); // Reads the next record from the current block if possible.\n}"}
{"index": 6004, "repo": "commons-lang3-3.12.0", "des": "This class provides a generic implementation of the lazy initialization pattern.", "code": "Class LazyInitializer<T> {\n\tT get(); // Returns the object wrapped by this instance.\n\tprotected abstract T initialize(); // Creates and initializes the object managed by this LazyInitializer.\n}"}
{"index": 18718, "repo": "opennlp-tools-2.2.0", "des": "Reads the annotations from the brat .ann annotation file.", "code": "Class BratAnnotationStream {\n\tvoid close(); // Closes the ObjectStream and releases all allocated resources.\n\tBratAnnotation read(); // Returns the next ObjectStream object.\n\tvoid reset(); // Repositions the stream at the beginning and the previously seen object sequence will be repeated exactly.\n}"}
{"index": 9963, "repo": "commons-text-1.10.0", "des": "Convert from one alphabet to another, with the possibility of leaving certain characters unencoded.", "code": "Class AlphabetConverter {\n\tstatic AlphabetConverter createConverter(Integer[] original, Integer[] encoding, Integer[] doNotEncode); // Creates an alphabet converter, for converting from the original alphabet, to the encoded alphabet, while leaving the characters in doNotEncode as they are (if possible).\n\tstatic AlphabetConverter createConverterFromChars(Character[] original, Character[] encoding, Character[] doNotEncode); // Creates an alphabet converter, for converting from the original alphabet, to the encoded alphabet, while leaving the characters in doNotEncode as they are (if possible).\n\tstatic AlphabetConverter createConverterFromMap(Map<Integer,String> originalToEncoded); // Creates a new converter from a map.\n\tString decode(String encoded); // Decodes a given string.\n\tString encode(String original); // Encodes a given string.\n\tboolean equals(Object obj);\n\tint getEncodedCharLength(); // Gets the length of characters in the encoded alphabet that are necessary for each character in the original alphabet.\n\tMap<Integer,String> getOriginalToEncoded(); // Gets the mapping from integer code point of source language to encoded string.\n}"}
{"index": 17401, "repo": "groovy-4.0.13", "des": "Represents a sequence of zero or more objects of a given type.", "code": "public class Sequence extends ArrayList implements GroovyObject {\n\tvoid add(int index, Object element);\n\tboolean add(Object element);\n\tboolean addAll(int index, Collection c);\n\tboolean addAll(Collection c);\n\tprotected void checkCollectionType(Collection c); // Checks that each member of the given collection are of the correct type\n\tprotected void checkType(Object object); // Checks that the given object instance is of the correct type otherwise a runtime exception is thrown\n\tvoid clear();\n\tboolean equals(Sequence that);\n\tboolean equals(Object that);\n\tMetaClass getMetaClass(); // Returns the metaclass for a given class.\n\tObject getProperty(String property); // Retrieves a property value.\n\tObject invokeMethod(String name, Object args); // Invokes the given method.\n\tint minimumSize();\n\tObject remove(int index);\n\tprotected void removeRange(int fromIndex, int toIndex);\n\tObject set(int index, Object element);\n\tvoid set(Collection collection); // Sets the contents of this sequence to that of the given collection.\n\tvoid setMetaClass(MetaClass metaClass); // Allows the MetaClass to be replaced with a derived implementation.\n\tvoid setProperty(String property, Object newValue); // Sets the given property to the new value.\n\tClass type();\n}"}
{"index": 9204, "repo": "fontbox-3.0.0-beta1", "des": "Enumerates the languages supported for GSUB operation.", "code": "Enum Language {\n\tString[] getScriptNames(); // ScriptNames form the basis of identification of the language.\n\tstatic Language valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Language[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 1262, "repo": "ignite-core-2.15.0", "des": "Data Entry for automatic unwrapping key and value from Data Entry.", "code": "Class UnwrapDataEntry {\n\tObject unwrappedKey(); // Unwraps key value from cache key object into primitive boxed type or source class.\n\tObject unwrappedValue(); // Unwraps value value from cache value object into primitive boxed type or source class.\n}"}
{"index": 6938, "repo": "calcite-core-1.34.0", "des": "Builder for JSON documents (represented as List, Map, String, Boolean, Long).", "code": "Class JsonBuilder {\n\tvoid append(StringBuilder buf, int indent, @Nullable Object o); // Appends a JSON object to a string builder.\n\tList<Object> list(); // Creates a JSON object (represented by a List).\n\tMap<String,Object> map(); // Creates a JSON object (represented by a Map).\n\tJsonBuilder put(Map<String,Object> map, String name, @Nullable Object value); // Adds a key/value pair to a JSON object.\n\tJsonBuilder putIf(Map<String,Object> map, String name, @Nullable Object value); // Adds a key/value pair to a JSON object if the value is not null.\n\tString toJsonString(Object o); // Serializes an object consisting of maps, lists and atoms into a JSON string.\n}"}
{"index": 12634, "repo": "spring-data-mongodb-4.1.2", "des": "An expression that calculates the inverse hyperbolic tangent of a value", "code": "public static class ArithmeticOperators.ATanh extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tstatic ArithmeticOperators.ATanh atanhOf(Object value); // Creates a new AggregationExpression that calculates the inverse hyperbolic tangent of a value.\n\tstatic ArithmeticOperators.ATanh atanhOf(String fieldReference); // Creates a new AggregationExpression that calculates the inverse hyperbolic tangent of a value.\n\tstatic ArithmeticOperators.ATanh atanhOf(AggregationExpression expression); // Creates a new AggregationExpression that calculates the inverse hyperbolic tangent of a value.\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tprotected boolean isArgumentMap();\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 3264, "repo": "hbase-common-3.0.0-alpha-4", "des": "Helper class for processing netty futures.", "code": "Class NettyFutureUtils {\n\tstatic <V> void addListener(org.apache.hbase.thirdparty.io.netty.util.concurrent.Future<V> future, org.apache.hbase.thirdparty.io.netty.util.concurrent.GenericFutureListener<? extends org.apache.hbase.thirdparty.io.netty.util.concurrent.Future<? super V>> listener); // This is method is used when you just want to add a listener to the given netty future.\n\tstatic void consume(org.apache.hbase.thirdparty.io.netty.util.concurrent.Future<?> future); // Log the error if the future indicates any failure.\n\tstatic void safeClose(org.apache.hbase.thirdparty.io.netty.channel.ChannelOutboundInvoker channel); // Close the channel and eat the returned future by logging the error when the future is completed with error.\n\tstatic void safeWrite(org.apache.hbase.thirdparty.io.netty.channel.ChannelOutboundInvoker channel, Object msg); // Call write on the channel and eat the returned future by logging the error when the future is completed with error.\n\tstatic void safeWriteAndFlush(org.apache.hbase.thirdparty.io.netty.channel.ChannelOutboundInvoker channel, Object msg); // Call writeAndFlush on the channel and eat the returned future by logging the error when the future is completed with error.\n}"}
{"index": 10757, "repo": "spring-tx-6.0.11", "des": "Central delegate that manages resources and transaction synchronizations per thread.", "code": "public abstract class TransactionSynchronizationManager extends Object {\n\tstatic void bindResource(Object key, Object value); // Bind the given resource for the given key to the current thread.\n\tstatic void clear(); // Clear the entire transaction synchronization state for the current thread: registered synchronizations as well as the various transaction characteristics.\n\tstatic void clearSynchronization(); // Deactivate transaction synchronization for the current thread.\n\tstatic Integer getCurrentTransactionIsolationLevel(); // Return the isolation level for the current transaction, if any.\n\tstatic String getCurrentTransactionName(); // Return the name of the current transaction, or null if none set.\n\tstatic Object getResource(Object key); // Retrieve a resource for the given key that is bound to the current thread.\n\tstatic Map<Object,Object> getResourceMap(); // Return all resources that are bound to the current thread.\n\tstatic List<TransactionSynchronization> getSynchronizations(); // Return an unmodifiable snapshot list of all registered synchronizations for the current thread.\n\tstatic boolean hasResource(Object key); // Check if there is a resource for the given key bound to the current thread.\n\tstatic void initSynchronization(); // Activate transaction synchronization for the current thread.\n\tstatic boolean isActualTransactionActive(); // Return whether there currently is an actual transaction active.\n\tstatic boolean isCurrentTransactionReadOnly(); // Return whether the current transaction is marked as read-only.\n\tstatic boolean isSynchronizationActive(); // Return if transaction synchronization is active for the current thread.\n\tstatic void registerSynchronization(TransactionSynchronization synchronization); // Register a new transaction synchronization for the current thread.\n\tstatic void setActualTransactionActive(boolean active); // Expose whether there currently is an actual transaction active.\n\tstatic void setCurrentTransactionIsolationLevel(Integer isolationLevel); // Expose an isolation level for the current transaction.\n\tstatic void setCurrentTransactionName(String name); // Expose the name of the current transaction, if any.\n\tstatic void setCurrentTransactionReadOnly(boolean readOnly); // Expose a read-only flag for the current transaction.\n\tstatic Object unbindResource(Object key); // Unbind a resource for the given key from the current thread.\n\tstatic Object unbindResourceIfPossible(Object key); // Unbind a resource for the given key from the current thread.\n}"}
{"index": 15151, "repo": "spring-data-elasticsearch-5.1.2", "des": "A simple class implementing HTTP headers as a MultiValueMap.", "code": "public class HttpHeaders extends Object implements MultiValueMap<String,String> {\n\tvoid add(String key, String value);\n\tvoid addAll(String key, List<? extends String> values);\n\tvoid addAll(MultiValueMap<String,String> values);\n\tvoid clear();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tstatic String encodeBasicAuth(String username, String password); // Encode a username and password to be used in basic authorization.\n\tstatic String encodeBasicAuth(String username, String password, Charset charset); // Encode a username and password to be used in basic authorization.\n\tSet<Map.Entry<String,List<String>>> entrySet();\n\tboolean equals(Object o);\n\tList<String> get(Object key);\n\tString getFirst(String key);\n\tboolean isEmpty();\n\tSet<String> keySet();\n\tList<String> put(String key, List<String> value);\n\tvoid putAll(Map<? extends String,? extends List<String>> m);\n\tList<String> remove(Object key);\n\tvoid set(String key, String value);\n\tvoid setAll(Map<String,String> values);\n\tvoid setBasicAuth(String username, String password);\n\tint size();\n\tMap<String,String> toSingleValueMap();\n\tCollection<List<String>> values();\n}"}
{"index": 15954, "repo": "wicket-util-10.0.0-M1", "des": "Abstract base class for JCE based ICrypt implementations.", "code": "public abstract class AbstractCrypt extends Object implements ICrypt {\n\tprotected abstract byte[] crypt(byte[] input, int mode); // Crypts the given byte array\n\tfinal String decryptUrlSafe(String text); // Decrypts a string into a string.\n\tfinal String encryptUrlSafe(String plainText); // Encrypt a string into a string using URL safe Base64 encoding.\n\tString getKey(); // Get encryption private key\n\tvoid setKey(String key); // Set encryption private key\n}"}
{"index": 2963, "repo": "tink-1.10.0", "des": "This instance of KeyManager generates new ChaCha20Poly1305 keys and produces new instances of ChaCha20Poly1305.", "code": "Class ChaCha20Poly1305KeyManager {\n\tstatic KeyTemplate chaCha20Poly1305Template();\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<ChaCha20Poly1305KeyFormat,ChaCha20Poly1305Key> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tChaCha20Poly1305Key parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic KeyTemplate rawChaCha20Poly1305Template();\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(ChaCha20Poly1305Key key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 7671, "repo": "cassandra-all-4.1.2", "des": "Static helper methods and classes for lists.", "code": "Class Lists {\n\tstatic <T> AbstractType<?> getExactListTypeIfKnown(java.util.List<T> items, java.util.function.Function<T,AbstractType<?>> mapper); // Returns the exact ListType from the items if it can be known.\n\tstatic ColumnSpecification indexSpecOf(ColumnSpecification column);\n\tstatic <T> java.lang.String listToString(java.lang.Iterable<T> items, java.util.function.Function<T,java.lang.String> mapper); // Create a String representation of the list from the specified items associated to the list elements.\n\tstatic java.lang.String listToString(java.util.List<?> elements); // Create a String representation of the list containing the specified elements.\n\tstatic AssignmentTestable.TestResult testListAssignment(ColumnSpecification receiver, java.util.List<? extends AssignmentTestable> elements); // Tests that the list with the specified elements can be assigned to the specified column.\n\tstatic ColumnSpecification valueSpecOf(ColumnSpecification column);\n}"}
{"index": 9526, "repo": "commons-math3-3.6.1", "des": "Base class for rules that determines the integration nodes and their weights.", "code": "Class BaseRuleFactory<T extends Number> {\n\tprotected void addRule(Pair<T[],T[]> rule); // Stores a rule.\n\tprotected abstract Pair<T[],T[]> computeRule(int numberOfPoints); // Computes the rule for the given order.\n\tPair<double[],double[]> getRule(int numberOfPoints); // Gets a copy of the quadrature rule with the given number of integration points.\n\tprotected Pair<T[],T[]> getRuleInternal(int numberOfPoints); // Gets a rule.\n}"}
{"index": 10532, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @Immutable annotation.", "code": "public class ImmutableASTTransformation extends AbstractASTTransformation implements CompilationUnitAware {\n\tstatic Object checkImmutable(Class<?> clazz, String fieldName, Object field); // For compatibility with pre 2.5 compiled classes\n\tstatic Object checkImmutable(Class<?> clazz, String fieldName, Object field, List<String> knownImmutableFieldNames, List<Class> knownImmutableClasses);\n\tstatic Object checkImmutable(String className, String fieldName, Object field); // This method exists to be binary compatible with 1.7 - 1.8.6 compiled code.\n\tstatic void checkPropNames(Object instance, Map<String,Object> args); // Called during named-arguments constructor execution to check given names.\n\tString getAnnotationName(); // If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tvoid setCompilationUnit(CompilationUnit unit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 8262, "repo": "spring-ws-3.0.10.RELEASE", "des": "Convenient utility methods for loading of Schema objects, performing standard handling of input streams.", "code": "Class SchemaLoaderUtils {\n\tstatic String getSystemId(org.springframework.core.io.Resource resource); // Retrieves the URL from the given resource as System ID.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource[] resources, String schemaLanguage); // Load schema from the given resource.\n\tstatic Schema loadSchema(org.springframework.core.io.Resource resource, String schemaLanguage); // Load schema from the given resource.\n}"}
{"index": 11773, "repo": "bedrock-core-7.0.2", "des": "A NeverAvailable is a specialized Deferred that always throws an PermanentlyUnavailableException when attempting to call NeverAvailable.get().", "code": "public class NeverAvailable<T> extends Object implements Deferred<T> {\n\tT get(); // Attempts to obtain the underlying object.\n\tClass<T> getDeferredClass(); // Obtains the Class of the Deferred reference.\n}"}
{"index": 6233, "repo": "jackson-databind-2.15.2", "des": "Base class for all standard Jackson TypeDeserializers.", "code": "Class TypeDeserializerBase {\n\tprotected Object _deserializeWithNativeTypeId(JsonParser p, DeserializationContext ctxt, Object typeId); // Helper method called when JsonParser indicates that it can use so-called native type ids, and such type id has been found.\n\tprotected JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt);\n\tprotected JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId);\n\tprotected JavaType _handleMissingTypeId(DeserializationContext ctxt, String extraDesc);\n\tprotected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId); // Helper method called when given type id cannot be resolved into concrete deserializer either directly (using given TypeIdResolver), or using default type.\n\tJavaType baseType();\n\tString baseTypeName();\n\tabstract TypeDeserializer forProperty(BeanProperty prop); // Method called to create contextual version, to be used for values of given property.\n\tClass<?> getDefaultImpl(); // Accessor for \"default implementation\" type; optionally defined class to use in cases where type id is not accessible for some reason (either missing, or cannot be resolved)\n\tString getPropertyName(); // Name of property that contains type information, if property-based inclusion is used.\n\tTypeIdResolver getTypeIdResolver(); // Accessor for object that handles conversions between types and matching type ids.\n\tabstract JsonTypeInfo.As getTypeInclusion(); // Accessor for type information inclusion method that deserializer uses; indicates how type information is (expected to be) embedded in JSON input.\n\tboolean hasDefaultImpl();\n}"}
{"index": 14204, "repo": "wicket-core-10.0.0-M1", "des": "A provider of a PageManager managing @link IManageablePage}s with a default chain of IPageStores: RequestPageStore keeping pages until end of the request CachingPageStore caching with an ... InSessionPageStore keeping the last accessed page in the session SerializingPageStore serializing all pages (so they are available for back-button) AsynchronousPageStore moving storage of pages to an asynchronous worker thread (enabled by default with StoreSettings.isAsynchronous()) CryptingPageStore encrypting all pages (disabled by default in StoreSettings.isEncrypted()) DiskPageStore persisting all pages, configured according to StoreSettings An alternative chain with all pages held in-memory could be: RequestPageStore keeping pages until end of the request CachingPageStore caching with an ... InSessionPageStore keeping the last accessed page in the session SerializingPageStore serializing all pages (so they are available for back-button) AsynchronousPageStore moving storage of pages to a worker thread InMemoryPageStore keeping all pages in memory ...", "code": "public class DefaultPageManagerProvider extends Object implements IPageManagerProvider {\n\tIPageManager get();\n\tprotected ISerializer getSerializer(); // Get the ISerializer to use for serializing of pages.\n\tprotected IPageStore newAsynchronousStore(IPageStore pageStore); // Store pages asynchronously into the persistent store, if enabled in StoreSettings.isAsynchronous().\n\tprotected IPageStore newCachingStore(IPageStore pageStore); // Cache last page non-serialized in the session for fast access.\n\tprotected IPageStore newCryptingStore(IPageStore pageStore); // Crypt all pages, if enabled in StoreSettings.isEncrypted().\n\tprotected IPageStore newPersistentStore(); // Keep persistent copies of all pages on disk.\n\tprotected IPageStore newRequestStore(IPageStore pageStore); // Keep pages in the request until it is finished.\n\tprotected IPageStore newSerializingStore(IPageStore pageStore); // Serialize pages.\n}"}
{"index": 10788, "repo": "spring-boot-actuator-3.1.1", "des": "HealthIndicator that tests the status of a DataSource and optionally runs a test query.", "code": "public class DataSourceHealthIndicator extends AbstractHealthIndicator implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected void doHealthCheck(Health.Builder builder); // Actual health check logic.\n\tString getQuery(); // Return the validation query or null.\n\tvoid setDataSource(DataSource dataSource); // Set the DataSource to use.\n\tvoid setQuery(String query); // Set a specific validation query to use to validate a connection.\n}"}
{"index": 774, "repo": "ignite-core-2.15.0", "des": "Transaction created by system implicitly on remote nodes.", "code": "Class GridDhtTxRemote {\n\tvoid addInvalidPartition(int cacheId, int part);\n\tvoid addWrite(GridCacheContext cacheCtx, GridCacheOperation op, IgniteTxKey key, @Nullable CacheObject val, @Nullable Collection<T2<javax.cache.processor.EntryProcessor<Object,Object,Object>,Object[]>> entryProcessors, long ttl, boolean skipStore, boolean keepBinary);\n\tvoid addWrite(IgniteTxEntry entry, ClassLoader ldr);\n\tboolean dht();\n\tUUID eventNodeId();\n\tCollection<UUID> masterNodeIds();\n\tUUID nearNodeId();\n\tGridCacheVersion nearXidVersion();\n\tUUID otherNodeId(); // Gets ID of additional node involved.\n\tboolean remote();\n\tboolean storeWriteThrough();\n\tvoid transactionNodes(Map<UUID,Collection<UUID>> txNodes);\n\tprotected boolean updateNearCache(GridCacheContext cacheCtx, KeyCacheObject key, AffinityTopologyVersion topVer); // Checks whether near cache should be updated.\n}"}
{"index": 4403, "repo": "beam-sdks-java-core-2.49.0", "des": "An implementation of BoundedWindow that represents an interval from start (inclusive) to end (exclusive).", "code": "Class IntervalWindow {\n\tint compareTo(IntervalWindow o);\n\tboolean contains(IntervalWindow other); // Returns whether this window contains the given window.\n\torg.joda.time.Instant end(); // Returns the end of this window, exclusive.\n\tboolean equals(@Nullable java.lang.Object o);\n\tstatic Coder<IntervalWindow> getCoder(); // Returns a Coder suitable for IntervalWindow.\n\tboolean intersects(IntervalWindow other); // Returns whether this window intersects the given window.\n\tboolean isDisjoint(IntervalWindow other); // Returns whether this window is disjoint from the given window.\n\torg.joda.time.Instant maxTimestamp(); // Returns the largest timestamp that can be included in this window.\n\tIntervalWindow span(IntervalWindow other); // Returns the minimal window that includes both this window and the given window.\n\torg.joda.time.Instant start(); // Returns the start of this window, inclusive.\n}"}
{"index": 8624, "repo": "avro-1.11.2", "des": "Used to specify the Java type for a string schema.", "code": "Enum GenericData.StringType {\n\tstatic GenericData.StringType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic GenericData.StringType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 14873, "repo": "spring-data-commons-3.1.2", "des": "The ValueConversionContext provides access to the store-specific PersistentProperty and allows to call the store-default conversion through the read/write methods.", "code": "public interface ValueConversionContext<P extends PersistentProperty<P>> {\n\tP getProperty(); // Return the PersistentProperty to be handled.\n\tdefault Object read(Object value); // Reads the value as an instance of the property type.\n\tdefault <T> T read(Object value, Class<T> target); // Reads the value as an instance of type.\n\tdefault <T> T read(Object value, TypeInformation<T> target); // Reads the value as an instance of type.\n\tdefault Object write(Object value); // Write the value as an instance of the property type.\n\tdefault <T> T write(Object value, Class<T> target); // Write the value as an instance of type.\n\tdefault <T> T write(Object value, TypeInformation<T> target); // Write the value as an instance of type.\n}"}
{"index": 12183, "repo": "jena-core-4.9.0", "des": "Tests the single argument to make sure it is a literal.", "code": "public class NotLiteral extends BaseBuiltin {\n\tboolean bodyCall(Node[] args, int length, RuleContext context); // This method is invoked when the builtin is called in a rule body.\n\tint getArgLength(); // Return the expected number of arguments for this functor or 0 if the number is flexible.\n\tString getName(); // Return a name for this builtin, normally this will be the name of the functor that will be used to invoke it.\n}"}
{"index": 1560, "repo": "pdfbox-3.0.0-beta1", "des": "This represents a destination to a page at a y location and the width is magnified to just fit on the screen.", "code": "Class PDPageFitWidthDestination {\n\tboolean fitBoundingBox(); // A flag indicating if this page destination should just fit bounding box of the PDF.\n\tint getTop(); // Get the top y coordinate.\n\tvoid setFitBoundingBox(boolean fitBoundingBox); // Set if this page destination should just fit the bounding box.\n\tvoid setTop(int y); // Set the top y-coordinate, a value of -1 implies that the current y-coordinate will be used.\n}"}
{"index": 11540, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of a ReactiveOAuth2AuthorizedClientManager that is capable of operating outside of the context of a ServerWebExchange, e.g.", "code": "public final class AuthorizedClientServiceReactiveOAuth2AuthorizedClientManager extends Object implements ReactiveOAuth2AuthorizedClientManager {\n\treactor.core.publisher.Mono<OAuth2AuthorizedClient> authorize(OAuth2AuthorizeRequest authorizeRequest); // Attempt to authorize or re-authorize (if required) the client identified by the provided clientRegistrationId.\n\tvoid setAuthorizationFailureHandler(ReactiveOAuth2AuthorizationFailureHandler authorizationFailureHandler); // Sets the handler that handles authorization failures.\n\tvoid setAuthorizationSuccessHandler(ReactiveOAuth2AuthorizationSuccessHandler authorizationSuccessHandler); // Sets the handler that handles successful authorizations.\n\tvoid setAuthorizedClientProvider(ReactiveOAuth2AuthorizedClientProvider authorizedClientProvider); // Sets the ReactiveOAuth2AuthorizedClientProvider used for authorizing (or re-authorizing) an OAuth 2.0 Client.\n\tvoid setContextAttributesMapper(Function<OAuth2AuthorizeRequest,reactor.core.publisher.Mono<Map<String,Object>>> contextAttributesMapper); // Sets the Function used for mapping attribute(s) from the OAuth2AuthorizeRequest to a Map of attributes to be associated to the authorization context.\n}"}
{"index": 2744, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "Process the return from super-class TableInputFormat (TIF) so as to undo any clumping of InputSplits around RegionServers.", "code": "Class RoundRobinTableInputFormat {\n\tList<org.apache.hadoop.mapreduce.InputSplit> getSplits(org.apache.hadoop.mapreduce.JobContext context); // Calculates the splits that will serve as input for the map tasks.\n\tstatic void main(String[] args); // Pass table name as argument.\n}"}
{"index": 2391, "repo": "commons-geometry-euclidean-1.0", "des": "Class used to build regions in Euclidean 3D space by inserting boundaries into a BSP tree containing \"partitions\", i.", "code": "Class RegionBSPTree3D.PartitionedRegionBuilder3D {\n\tRegionBSPTree3D build(); // Build and return the region BSP tree.\n\tRegionBSPTree3D.PartitionedRegionBuilder3D insertAxisAlignedGrid(Bounds3D bounds, int level, Precision.DoubleEquivalence precision); // Insert a 3D grid of partitions.\n\tRegionBSPTree3D.PartitionedRegionBuilder3D insertAxisAlignedPartitions(Vector3D center, Precision.DoubleEquivalence precision); // Insert a set of three axis aligned planes intersecting at the given point as partitions.\n\tRegionBSPTree3D.PartitionedRegionBuilder3D insertBoundaries(BoundarySource3D boundarySrc); // Insert all boundaries from the given source.\n\tRegionBSPTree3D.PartitionedRegionBuilder3D insertBoundaries(Iterable<? extends PlaneConvexSubset> boundaries); // Insert a collection of region boundaries.\n\tRegionBSPTree3D.PartitionedRegionBuilder3D insertBoundary(PlaneConvexSubset boundary); // Insert a region boundary.\n\tRegionBSPTree3D.PartitionedRegionBuilder3D insertPartition(Plane partition); // Insert a partition plane.\n\tRegionBSPTree3D.PartitionedRegionBuilder3D insertPartition(PlaneConvexSubset partition); // Insert a plane convex subset as a partition.\n}"}
{"index": 17438, "repo": "spring-security-config-6.1.2", "des": "Creates an AuthenticationManager that can perform LDAP authentication.", "code": "public abstract class AbstractLdapAuthenticationManagerFactory<T extends org.springframework.security.ldap.authentication.AbstractLdapAuthenticator> extends Object {\n\tfinal org.springframework.security.authentication.AuthenticationManager createAuthenticationManager(); // Returns the configured AuthenticationManager that can be used to perform LDAP authentication.\n\tprotected abstract T createDefaultLdapAuthenticator(); // Allows subclasses to supply the default AbstractLdapAuthenticator.\n\tprotected final org.springframework.ldap.core.support.BaseLdapPathContextSource getContextSource(); // Gets the BaseLdapPathContextSource used to perform LDAP authentication.\n\tvoid setAuthoritiesMapper(org.springframework.security.core.authority.mapping.GrantedAuthoritiesMapper authoritiesMapper); // Sets the GrantedAuthoritiesMapper used for converting the authorities loaded from storage to a new set of authorities which will be associated to the UsernamePasswordAuthenticationToken.\n\tvoid setContextSource(org.springframework.ldap.core.support.BaseLdapPathContextSource contextSource); // Sets the BaseLdapPathContextSource used to perform LDAP authentication.\n\tvoid setLdapAuthoritiesPopulator(org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator ldapAuthoritiesPopulator); // Sets the LdapAuthoritiesPopulator used to obtain a list of granted authorities for an LDAP user.\n\tvoid setUserDetailsContextMapper(org.springframework.security.ldap.userdetails.UserDetailsContextMapper userDetailsContextMapper); // Sets a custom strategy to be used for creating the UserDetails which will be stored as the principal in the Authentication.\n\tvoid setUserDnPatterns(String... userDnPatterns); // If your users are at a fixed location in the directory (i.e.\n\tvoid setUserSearchBase(String userSearchBase); // Search base for user searches.\n\tvoid setUserSearchFilter(String userSearchFilter); // The LDAP filter used to search for users (optional).\n}"}
{"index": 13342, "repo": "shiro-core-2.0.0-alpha-2", "des": "Realm that allows authentication and authorization via JDBC calls.", "code": "public class JdbcRealm extends AuthorizingRealm {\n\tprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token); // Retrieves authentication data from an implementation-specific datasource (RDBMS, LDAP, etc.) for the given authentication token.\n\tprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals); // This implementation of the interface expects the principals collection to return a String username keyed off of this realm's name\n\tprotected Set<String> getPermissions(Connection conn, String username, Collection<String> roleNames);\n\tprotected Set<String> getRoleNamesForUser(Connection conn, String username);\n\tprotected String getSaltForUser(String username);\n\tvoid setAuthenticationQuery(String authenticationQuery); // Overrides the default query used to retrieve a user's password during authentication.\n\tvoid setDataSource(DataSource dataSource); // Sets the datasource that should be used to retrieve connections used by this realm.\n\tvoid setPermissionsLookupEnabled(boolean permissionsLookupEnabled); // Enables lookup of permissions during authorization.\n\tvoid setPermissionsQuery(String permissionsQuery); // Overrides the default query used to retrieve a user's permissions during authorization.\n\tvoid setSaltIsBase64Encoded(boolean saltIsBase64Encoded); // Makes it possible to switch off base64 encoding of password salt.\n\tvoid setSaltStyle(JdbcRealm.SaltStyle saltStyle); // Sets the salt style.\n\tvoid setUserRolesQuery(String userRolesQuery); // Overrides the default query used to retrieve a user's roles during authorization.\n}"}
{"index": 14521, "repo": "spring-security-web-6.1.2", "des": "A RequestMatcher implementation which uses a SpEL expression", "code": "public class ELRequestMatcher extends Object implements RequestMatcher {\n\torg.springframework.expression.EvaluationContext createELContext(jakarta.servlet.http.HttpServletRequest request); // Subclasses can override this methode if they want to use a different EL root context\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request); // Decides whether the rule implemented by the strategy matches the supplied request.\n}"}
{"index": 13538, "repo": "spring-messaging-6.0.11", "des": "A converter to turn the payload of a Message from serialized form to a typed Object and vice versa.", "code": "public interface MessageConverter {\n\tObject fromMessage(Message<?> message, Class<?> targetClass); // Convert the payload of a Message from a serialized form to a typed Object of the specified target class.\n\tMessage<?> toMessage(Object payload, MessageHeaders headers); // Create a Message whose payload is the result of converting the given payload Object to serialized form.\n}"}
{"index": 17258, "repo": "groovy-4.0.13", "des": "Base class for writing primitive typed operations", "code": "public abstract class BinaryExpressionWriter extends Object {\n\tboolean arrayGet(int operation, boolean simulate);\n\tboolean arraySet(boolean simulate);\n\tprotected abstract void doubleTwoOperands(org.objectweb.asm.MethodVisitor mv);\n\tprotected MethodCaller getArrayGetCaller();\n\tprotected ClassNode getArrayGetResultType();\n\tprotected MethodCaller getArraySetCaller();\n\tprotected abstract int getBitwiseOperationBytecode(int type);\n\tprotected abstract int getCompareCode();\n\tWriterController getController(); // return writer controller\n\tprotected abstract ClassNode getDevisionOpResultType();\n\tprotected abstract ClassNode getNormalOpResultType();\n\tprotected abstract int getShiftOperationBytecode(int type);\n\tprotected abstract int getStandardOperationBytecode(int type);\n\tprotected abstract void removeTwoOperands(org.objectweb.asm.MethodVisitor mv);\n\tvoid setArraySetAndGet(MethodCaller arraySet, MethodCaller arrayGet);\n\tprotected boolean supportsDivision();\n\tboolean write(int operation, boolean simulate);\n\tprotected boolean writeBitwiseOp(int type, boolean simulate); // writes some the bitwise operations.\n\tprotected boolean writeDivision(boolean simulate);\n\tprotected abstract void writeMinusMinus(org.objectweb.asm.MethodVisitor mv);\n\tprotected abstract void writePlusPlus(org.objectweb.asm.MethodVisitor mv);\n\tboolean writePostOrPrefixMethod(int operation, boolean simulate);\n\tprotected boolean writeShiftOp(int type, boolean simulate); // Write shifting operations.\n\tprotected boolean writeSpaceship(int type, boolean simulate);\n\tprotected boolean writeStdCompare(int type, boolean simulate); // writes some int standard operations for compares\n\tprotected boolean writeStdOperators(int type, boolean simulate);\n}"}
{"index": 4794, "repo": "hadoop-common-3.3.4", "des": "Provides an abstract composition filter for the Expression interface.", "code": "Class FilterExpression {\n\tvoid addArguments(Deque<String> args); // Adds arguments to this expression.\n\tvoid addChildren(Deque<Expression> expressions); // Adds children to this expression.\n\tResult apply(org.apache.hadoop.fs.shell.PathData item, int depth); // Apply the expression to the specified item, called once for each item.\n\tvoid finish(); // Finishes the expression, called once after processing all items.\n\tConfiguration getConf(); // Return the configuration used by this object.\n\tString[] getHelp(); // Returns a description of the expression for use in help.\n\tint getPrecedence(); // Returns the precedence of this expression (only applicable to operators).\n\tString[] getUsage(); // Returns brief usage instructions for this expression.\n\tboolean isAction(); // Indicates whether this expression performs an action, i.e.\n\tboolean isOperator(); // Identifies the expression as an operator rather than a primary.\n\tvoid prepare(); // Prepares the expression for execution, called once after setting options and before processing any options.\n\tvoid setConf(Configuration conf); // Set the configuration to be used by this object.\n\tvoid setOptions(FindOptions options); // Set the options for this expression, called once before processing any items.\n}"}
{"index": 709, "repo": "ignite-core-2.15.0", "des": "GridCacheConcurrentMap implementation for local and near caches.", "code": "Class GridCacheLocalConcurrentMap {\n\tvoid decrementPublicSize(GridCacheConcurrentMap.CacheMapHolder hld, GridCacheEntryEx e); // Decrements public size.\n\tprotected @Nullable GridCacheConcurrentMap.CacheMapHolder entriesMap(GridCacheContext cctx);\n\tprotected @Nullable GridCacheConcurrentMap.CacheMapHolder entriesMapIfExists(Integer cacheId);\n\tvoid incrementPublicSize(GridCacheConcurrentMap.CacheMapHolder hld, GridCacheEntryEx e); // Increments public size.\n\tint internalSize(); // Returns the number of key-value mappings in this map.\n\tint publicSize(int cacheId); // Returns the number of publicly available key-value mappings in this map.\n}"}
{"index": 16885, "repo": "spring-security-oauth2-core-6.1.2", "des": "A ClaimAccessor for the \"claims\" that can be returned in the ID Token, which provides information about the authentication of an End-User by an Authorization Server.", "code": "public interface IdTokenClaimAccessor extends StandardClaimAccessor {\n\tdefault String getAccessTokenHash(); // Returns the Access Token hash value (at_hash).\n\tdefault List<String> getAudience(); // Returns the Audience(s) (aud) that this ID Token is intended for.\n\tdefault Instant getAuthenticatedAt(); // Returns the time when the End-User authentication occurred (auth_time).\n\tdefault String getAuthenticationContextClass(); // Returns the Authentication Context Class Reference (acr).\n\tdefault List<String> getAuthenticationMethods(); // Returns the Authentication Methods References (amr).\n\tdefault String getAuthorizationCodeHash(); // Returns the Authorization Code hash value (c_hash).\n\tdefault String getAuthorizedParty(); // Returns the Authorized party (azp) to which the ID Token was issued.\n\tdefault Instant getExpiresAt(); // Returns the Expiration time (exp) on or after which the ID Token MUST NOT be accepted.\n\tdefault Instant getIssuedAt(); // Returns the time at which the ID Token was issued (iat).\n\tdefault URL getIssuer(); // Returns the Issuer identifier (iss).\n\tdefault String getNonce(); // Returns a String value (nonce) used to associate a Client session with an ID Token, and to mitigate replay attacks.\n\tdefault String getSubject(); // Returns the Subject identifier (sub).\n}"}
{"index": 17695, "repo": "spring-web-6.0.11", "des": "Performs the actual initialization work for the root application context.", "code": "public class ContextLoader extends Object {\n\tvoid closeWebApplicationContext(ServletContext servletContext); // Close Spring's web application context for the given servlet context.\n\tprotected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc);\n\tprotected WebApplicationContext createWebApplicationContext(ServletContext sc); // Instantiate the root WebApplicationContext for this loader, either the default context class or a custom context class if specified.\n\tprotected void customizeContext(ServletContext sc, ConfigurableWebApplicationContext wac); // Customize the ConfigurableWebApplicationContext created by this ContextLoader after config locations have been supplied to the context but before the context is refreshed.\n\tprotected Class<?> determineContextClass(ServletContext servletContext); // Return the WebApplicationContext implementation class to use, either the default XmlWebApplicationContext or a custom context class if specified.\n\tprotected List<Class<org.springframework.context.ApplicationContextInitializer<org.springframework.context.ConfigurableApplicationContext>>> determineContextInitializerClasses(ServletContext servletContext); // Return the ApplicationContextInitializer implementation classes to use if any have been specified by CONTEXT_INITIALIZER_CLASSES_PARAM.\n\tstatic WebApplicationContext getCurrentWebApplicationContext(); // Obtain the Spring root web application context for the current thread (i.e.\n\tWebApplicationContext initWebApplicationContext(ServletContext servletContext); // Initialize Spring's web application context for the given servlet context, using the application context provided at construction time, or creating a new one according to the \"contextClass\" and \"contextConfigLocation\" context-params.\n\tprotected org.springframework.context.ApplicationContext loadParentContext(ServletContext servletContext); // Template method with default implementation (which may be overridden by a subclass), to load or obtain an ApplicationContext instance which will be used as the parent context of the root WebApplicationContext.\n\tvoid setContextInitializers(org.springframework.context.ApplicationContextInitializer<?>... initializers); // Specify which ApplicationContextInitializer instances should be used to initialize the application context used by this ContextLoader.\n}"}
{"index": 7940, "repo": "commons-jcs3-core-3.1", "des": "Interface for cache element attributes classes.", "code": "Interface IElementAttributes {\n\tvoid addElementEventHandler(IElementEventHandler eventHandler); // Adds a ElementEventHandler.\n\tvoid addElementEventHandlers(List<IElementEventHandler> eventHandlers); // Sets the eventHandlers of the IElementAttributes object\n\tIElementAttributes clone(); // Clone object\n\tlong getCreateTime(); // Gets the createTime attribute of the IAttributes object.\n\tArrayList<IElementEventHandler> getElementEventHandlers(); // Gets the elementEventHandlers.\n\tlong getIdleTime(); // Gets the idleTime attribute of the IAttributes object\n\tboolean getIsEternal(); // This turns off expiration if it is true.\n\tboolean getIsLateral(); // Is this item laterally distributable.\n\tboolean getIsRemote(); // Can this item be sent to the remote cache.\n\tboolean getIsSpool(); // Can this item be spooled to disk By default this is true.\n\tlong getLastAccessTime(); // Gets the LastAccess attribute of the IAttributes object.\n\tlong getMaxLife(); // Sets the maxLife attribute of the IAttributes object.\n\tint getSize(); // Gets the size attribute of the IAttributes object\n\tlong getTimeFactorForMilliseconds();\n\tlong getTimeToLiveSeconds(); // Gets the time left to live of the IAttributes object.\n\tvoid setIdleTime(long idle); // Sets the idleTime attribute of the IAttributes object.\n\tvoid setIsEternal(boolean val); // Sets the isEternal attribute of the IElementAttributes object\n\tvoid setIsLateral(boolean val); // Sets the isLateral attribute of the IElementAttributes object By default this is true.\n\tvoid setIsRemote(boolean val); // Sets the isRemote attribute of the IElementAttributes object.\n\tvoid setIsSpool(boolean val); // Sets the isSpool attribute of the IElementAttributes object By default this is true.\n\tvoid setLastAccessTimeNow(); // Sets the LastAccessTime as now of the IElementAttributes object\n\tvoid setMaxLife(long mls); // Sets the maxLife attribute of the IAttributes object.\n\tvoid setSize(int size); // Size in bytes.\n\tvoid setTimeFactorForMilliseconds(long factor);\n}"}
{"index": 16730, "repo": "spring-jms-6.0.11", "des": "Base class for JmsTemplate and other JMS-accessing gateway helpers, defining common properties such as the JMS ConnectionFactory to operate on.", "code": "public abstract class JmsAccessor extends Object implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected JmsException convertJmsAccessException(JMSException ex); // Convert the specified checked JMSException to a Spring runtime JmsException equivalent.\n\tprotected Connection createConnection(); // Create a JMS Connection via this template's ConnectionFactory.\n\tprotected Session createSession(Connection con); // Create a JMS Session for the given Connection.\n\tConnectionFactory getConnectionFactory(); // Return the ConnectionFactory that this accessor uses for obtaining JMS Connections.\n\tint getSessionAcknowledgeMode(); // Return the acknowledgement mode for JMS sessions.\n\tprotected boolean isClientAcknowledge(Session session); // Determine whether the given Session is in client acknowledge mode.\n\tboolean isSessionTransacted(); // Return whether the JMS sessions used by this accessor are supposed to be transacted.\n\tprotected final ConnectionFactory obtainConnectionFactory(); // Obtain the ConnectionFactory for actual use.\n\tvoid setConnectionFactory(ConnectionFactory connectionFactory); // Set the ConnectionFactory to use for obtaining JMS Connections.\n\tvoid setSessionAcknowledgeMode(int sessionAcknowledgeMode); // Set the JMS acknowledgement mode that is used when creating a JMS Session to send a message.\n\tvoid setSessionAcknowledgeModeName(String constantName); // Set the JMS acknowledgement mode by the name of the corresponding constant in the JMS Session interface, e.g.\n\tvoid setSessionTransacted(boolean sessionTransacted); // Set the transaction mode that is used when creating a JMS Session.\n}"}
{"index": 8207, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports JAXBElement objects.", "code": "Class JaxbElementPayloadMethodProcessor {\n\tprotected void handleReturnValueInternal(MessageContext messageContext, org.springframework.core.MethodParameter returnType, Object returnValue);\n\tJAXBElement<?> resolveArgument(MessageContext messageContext, org.springframework.core.MethodParameter parameter); // Resolves the given parameter into a method argument.\n\tprotected boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n}"}
{"index": 1042, "repo": "ignite-core-2.15.0", "des": "Exporter of metric information to the external recipient.", "code": "Interface MetricExporterSpi {\n\tvoid setExportFilter(Predicate<ReadOnlyMetricRegistry> filter); // Sets export filter.\n\tvoid setMetricRegistry(ReadOnlyMetricManager registry); // Sets metrics registry that SPI should export.\n}"}
{"index": 4416, "repo": "beam-sdks-java-core-2.49.0", "des": "A PTransform that adds exception handling to MapElements.", "code": "Class MapElements.MapWithFailures<InputT,OutputT,FailureT> {\n\tMapElements.MapWithFailures<InputT,OutputT,FailureT> exceptionsVia(ProcessFunction<WithFailures.ExceptionElement<InputT>,FailureT> exceptionHandler); // Returns a PTransform that catches exceptions raised while mapping elements, passing the raised exception instance and the input element being processed through the given exceptionHandler and emitting the result to a failure collection.\n\tWithFailures.Result<PCollection<OutputT>,FailureT> expand(PCollection<InputT> input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tvoid populateDisplayData(DisplayData.Builder builder); // Register display data for the given transform or component.\n}"}
{"index": 3219, "repo": "hbase-common-3.0.0-alpha-4", "des": "Provide access to all data block encoding algorithms.", "code": "Enum DataBlockEncoding {\n\tstatic DataBlockEncoder getDataBlockEncoderById(short encoderId); // Find and create data block encoder for given id;\n\tDataBlockEncoder getEncoder(); // Return new data block encoder for given algorithm type.\n\tstatic DataBlockEncoding getEncodingById(short dataBlockEncodingId);\n\tshort getId(); // Returns The id of a data block encoder.\n\tstatic String getNameFromId(short encoderId); // Find and return the name of data block encoder for the given id.\n\tbyte[] getNameInBytes(); // Returns name converted to bytes.\n\tstatic boolean isCorrectEncoder(DataBlockEncoder encoder, short encoderId); // Check if given encoder has this id.\n\tstatic DataBlockEncoding valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic DataBlockEncoding[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n\tvoid writeIdInBytes(byte[] dest, int offset); // Writes id bytes to the given array starting from offset.\n\tvoid writeIdInBytes(OutputStream stream); // Writes id in bytes.\n}"}
{"index": 6001, "repo": "commons-lang3-3.12.0", "des": "An immutable pair consisting of two Object elements.", "code": "Class ImmutablePair<L,R> {\n\tstatic <L,R> ImmutablePair<L,R>[] emptyArray(); // Returns the empty array singleton that can be assigned without compiler warning.\n\tL getLeft(); // Gets the left element from this pair.\n\tR getRight(); // Gets the right element from this pair.\n\tstatic <L,R> Pair<L,R> left(L left); // Creates an immutable pair of two objects inferring the generic types.\n\tstatic <L,R> ImmutablePair<L,R> nullPair(); // Returns an immutable pair of nulls.\n\tstatic <L,R> ImmutablePair<L,R> of(L left, R right); // Creates an immutable pair of two objects inferring the generic types.\n\tstatic <L,R> ImmutablePair<L,R> of(Map.Entry<L,R> pair); // Creates an immutable pair from an existing pair.\n\tstatic <L,R> Pair<L,R> right(R right); // Creates an immutable pair of two objects inferring the generic types.\n\tR setValue(R value); // Throws UnsupportedOperationException.\n}"}
{"index": 5163, "repo": "druid-processing-26.0.0", "des": "This interface is used to expose information about columns that is interesting to know for all matters dealing with reading from columns, including query planning and optimization, creating readers to merge segments at ingestion time, and probably nearly anything else you can imagine.", "code": "Interface ColumnCapabilities {\n\tColumnCapabilities.Capable areDictionaryValuesSorted(); // If the column is dictionary encoded, are those values sorted? Useful to know for optimizations that can defer looking up values and allowing sorting with the dictionary ids directly\n\tColumnCapabilities.Capable areDictionaryValuesUnique(); // If the column is dictionary encoded, is there a 1:1 mapping of dictionary ids to values? If this is true, it unlocks optimizations such as allowing for things like grouping directly on dictionary ids and deferred value lookup\n\tdefault <T> TypeStrategy<T> getStrategy(); // A TypeStrategy provides facilities to reading and writing values to buffers, as well as basic value comparators and byte size estimation.\n\tboolean hasBitmapIndexes(); // Does the column have an inverted index bitmap for each value? If so, these may be employed to 'pre-filter' the column by examining if the values match the filter and intersecting the bitmaps, to avoid having to scan and evaluate if every row matches the filter\n\tColumnCapabilities.Capable hasMultipleValues(); // String columns are sneaky, and might have multiple values, this is to allow callers to know and appropriately prepare themselves\n\tColumnCapabilities.Capable hasNulls(); // Does this column contain null values? If so, callers, especially for primitive numeric columns, will need to check for null value rows and act accordingly\n\tboolean hasSpatialIndexes(); // Does the column have spatial indexes available to allow use with spatial filtering?\n\tColumnCapabilities.Capable isDictionaryEncoded(); // Is the column dictionary encoded? If so, a DimensionDictionarySelector may be used instead of using a value selector, allowing algorithms to operate on primitive integer dictionary ids rather than the looked up dictionary values\n\tboolean isFilterable(); // All Druid primitive columns support filtering, maybe with or without indexes, but by default complex columns do not support direct filtering, unless provided by through a custom implementation.\n\tdefault ColumnType toColumnType();\n}"}
{"index": 18681, "repo": "opencms-gwt-15.0", "des": "Handles the clicks on the 'Yes', 'No' and 'Cancel' buttons of the dialog.", "code": "Interface I_CmsAcceptDeclineCancelHandler {\n\tvoid onAccept(); // Executed on accept click.\n\tvoid onDecline(); // Executed on decline click.\n}"}
{"index": 11688, "repo": "spring-cloud-commons-3.1.7", "des": "Retry logic to use for the LoadBalancerClient.", "code": "public interface LoadBalancedRetryPolicy {\n\tboolean canRetryNextServer(LoadBalancedRetryContext context); // Return true to retry the failed request on the next server from the load balancer.\n\tboolean canRetrySameServer(LoadBalancedRetryContext context); // Return true to retry the failed request on the same server.\n\tvoid close(LoadBalancedRetryContext context); // Called when the retry operation has ended.\n\tvoid registerThrowable(LoadBalancedRetryContext context, Throwable throwable); // Called when the execution fails.\n\tboolean retryableStatusCode(int statusCode); // If an exception is not thrown when making a request, this method will be called to see if the client would like to retry the request based on the status code returned.\n}"}
{"index": 2167, "repo": "hive-exec-4.0.0-alpha-2", "des": "Key-values interface for the Reader used by ReduceRecordSource.", "code": "Interface KeyValuesAdapter {\n\tObject getCurrentKey(); // Get the key for current record\n\tIterable<Object> getCurrentValues(); // Get the values for the current record\n\tboolean next(); // Move to the next record\n}"}
{"index": 1371, "repo": "nutch-2.4", "des": "RecordBuilder for ProtocolStatus instances.", "code": "Class ProtocolStatus.Builder {\n\tProtocolStatus build();\n\tProtocolStatus.Builder clearArgs(); // Clears the value of the 'args' field\n\tProtocolStatus.Builder clearCode(); // Clears the value of the 'code' field\n\tProtocolStatus.Builder clearLastModified(); // Clears the value of the 'lastModified' field\n\tjava.util.List<java.lang.CharSequence> getArgs(); // Gets the value of the 'args' field\n\tjava.lang.Integer getCode(); // Gets the value of the 'code' field\n\tjava.lang.Long getLastModified(); // Gets the value of the 'lastModified' field\n\tboolean hasArgs(); // Checks whether the 'args' field has been set\n\tboolean hasCode(); // Checks whether the 'code' field has been set\n\tboolean hasLastModified(); // Checks whether the 'lastModified' field has been set\n\tProtocolStatus.Builder setArgs(java.util.List<java.lang.CharSequence> value); // Sets the value of the 'args' field\n\tProtocolStatus.Builder setCode(int value); // Sets the value of the 'code' field\n\tProtocolStatus.Builder setLastModified(long value); // Sets the value of the 'lastModified' field\n}"}
{"index": 6395, "repo": "spring-data-solr-4.3.15", "des": "Trivial implementation of FacetQueryEntry.", "code": "Class SimpleFacetQueryEntry {\n\tString getKey(); // The key of the facetEntry\n\tFilterQuery getQuery(); // get the associated Query\n}"}
{"index": 2998, "repo": "tink-1.10.0", "des": "Key manager that generates new HpkePrivateKey keys and produces new instances of HpkeDecrypt primitives.", "code": "Class HpkePrivateKeyManager {\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tHpkePublicKey getPublicKey(HpkePrivateKey key); // Creates a public key from the given private key.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<HpkeKeyFormat,HpkePrivateKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tHpkePrivateKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic void registerPair(boolean newKeyAllowed); // Registers an HpkePrivateKeyManager and an HpkePublicKeyManager with the registry, so that HpkePrivateKey and HpkePublicKey key types can be used with Tink.\n\tvoid validateKey(HpkePrivateKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 15342, "repo": "spring-boot-3.1.1", "des": "Strategy to load '.properties' files into a PropertySource.", "code": "public class PropertiesPropertySourceLoader extends Object implements PropertySourceLoader {\n\tString[] getFileExtensions(); // Returns the file extensions that the loader supports (excluding the '.').\n\tList<org.springframework.core.env.PropertySource<?>> load(String name, org.springframework.core.io.Resource resource); // Load the resource into one or more property sources.\n}"}
{"index": 14704, "repo": "spring-data-commons-3.1.2", "des": "Extension of EntityMetadata to add functionality to query information of entity instances.", "code": "public interface EntityInformation<T,ID> extends EntityMetadata<T> {\n\tID getId(T entity); // Returns the id of the given entity or null if none can be obtained.\n\tClass<ID> getIdType(); // Returns the type of the id of the entity.\n\tdefault ID getRequiredId(T entity); // Returns the identifier of the given entity.\n\tboolean isNew(T entity); // Returns whether the given entity is considered to be new.\n}"}
{"index": 1466, "repo": "pdfbox-3.0.0-beta1", "des": "This class will extract one or more sequential pages and create a new document.", "code": "Class PageExtractor {\n\tPDDocument extract(); // This will take a document and extract the desired pages into a new document.\n\tint getEndPage(); // Gets the last page number (inclusive) to be extracted.\n\tint getStartPage(); // Gets the first page number to be extracted.\n\tvoid setEndPage(int endPage); // Sets the last page number to be extracted.\n\tvoid setStartPage(int startPage); // Sets the first page number to be extracted.\n}"}
{"index": 4275, "repo": "beam-sdks-java-core-2.49.0", "des": "A BlockBasedSource is a FileBasedSource where a file consists of blocks of records.", "code": "Class BlockBasedSource<T> {\n\tprotected abstract BlockBasedSource<T> createForSubrangeOfFile(MatchResult.Metadata metadata, long start, long end); // Creates a BlockBasedSource for the specified range in a single file.\n\tprotected abstract BlockBasedSource.BlockBasedReader<T> createSingleFileReader(PipelineOptions options); // Creates a BlockBasedReader.\n}"}
{"index": 6556, "repo": "exoplayer-core-2.9.6", "des": "A DataSource that can be used as part of a task registered with a PriorityTaskManager.", "code": "Class PriorityDataSource {\n\tvoid addTransferListener(TransferListener transferListener); // Adds a TransferListener to listen to data transfers.\n\tvoid close(); // Closes the source.\n\tjava.util.Map<java.lang.String,java.util.List<java.lang.String>> getResponseHeaders(); // When the source is open, returns the response headers associated with the last DataSource.open(com.google.android.exoplayer2.upstream.DataSpec) call.\n\tandroid.net.Uri getUri(); // When the source is open, returns the Uri from which data is being read.\n\tlong open(DataSpec dataSpec); // Opens the source to read the specified data.\n\tint read(byte[] buffer, int offset, int max); // Reads up to readLength bytes of data and stores them into buffer, starting at index offset.\n}"}
{"index": 11782, "repo": "bedrock-core-7.0.2", "des": "A Row represents zero or more horizontally arranged Cells in a Table.", "code": "public class Row extends Object implements Iterable<Cell> {\n\tRow addCell(Cell cell); // Adds a Cell to the Row\n\tRow addCell(String cell); // Adds Cell content to the Row\n\tCell getCell(int index); // Obtains the specified Cell from the Row (or null if the Cell number is out-of-bounds.\n\tOptionsByType getOptions(); // Obtains the formatting OptionsByType for the Row.\n\tIterator<Cell> iterator();\n\tint width(); // Obtains the number of Cells (ie: the width) in the Row\n}"}
{"index": 13298, "repo": "spring-security-cas-6.1.2", "des": "Caches tickets using a Spring IoC defined Cache.", "code": "public class SpringCacheBasedTicketCache extends Object implements StatelessTicketCache {\n\tCasAuthenticationToken getByTicketId(String serviceTicket); // Retrieves the CasAuthenticationToken associated with the specified ticket.\n\tvoid putTicketInCache(CasAuthenticationToken token); // Adds the specified CasAuthenticationToken to the cache.\n\tvoid removeTicketFromCache(String serviceTicket); // Removes the specified ticket from the cache, meaning that future calls will require a new service ticket.\n\tvoid removeTicketFromCache(CasAuthenticationToken token); // Removes the specified ticket from the cache, as per StatelessTicketCache.removeTicketFromCache(String).\n}"}
{"index": 12611, "repo": "spring-data-mongodb-4.1.2", "des": "Base class for reactive Spring Data MongoDB configuration using JavaConfig.", "code": "@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveMongoConfiguration extends MongoConfigurationSupport {\n\tprotected com.mongodb.reactivestreams.client.MongoClient createReactiveMongoClient(com.mongodb.MongoClientSettings settings); // Create the Reactive Streams MongoClient instance with given MongoClientSettings.\n\tMappingMongoConverter mappingMongoConverter(ReactiveMongoDatabaseFactory databaseFactory, MongoCustomConversions customConversions, MongoMappingContext mappingContext); // Creates a MappingMongoConverter using the configured reactiveMongoDbFactory() and MongoConfigurationSupport.mongoMappingContext(MongoCustomConversions, org.springframework.data.mongodb.MongoManagedTypes).\n\tcom.mongodb.reactivestreams.client.MongoClient reactiveMongoClient(); // Return the Reactive Streams MongoClient instance to connect to.\n\tReactiveMongoDatabaseFactory reactiveMongoDbFactory(); // Creates a ReactiveMongoDatabaseFactory to be used by the ReactiveMongoOperations.\n\tReactiveMongoTemplate reactiveMongoTemplate(ReactiveMongoDatabaseFactory databaseFactory, MappingMongoConverter mongoConverter); // Creates ReactiveMongoOperations.\n}"}
{"index": 5233, "repo": "druid-processing-26.0.0", "des": "Base class for single argument ExprMacroTable.", "code": "Class ExprMacroTable.BaseScalarUnivariateMacroFunctionExpr {\n\tExpr.BindingAnalysis analyzeInputs(); // Examine the usage of IdentifierExpr children of an Expr, constructing a Expr.BindingAnalysis\n\tboolean equals(Object o);\n\tList<Expr> getArgs();\n\tString stringify(); // Convert the Expr back into parseable string that when parsed with Parser.parse(String, ExprMacroTable) will produce an equivalent Expr.\n}"}
{"index": 4330, "repo": "beam-sdks-java-core-2.49.0", "des": "Deduplicates keyed values using the key over a specified time domain and threshold.", "code": "Class Deduplicate.KeyedValues<K,V> {\n\tPCollection<KV<K,V>> expand(PCollection<KV<K,V>> input); // Override this method to specify how this PTransform should be expanded on the given InputT.\n\tDeduplicate.KeyedValues<K,V> withDuration(org.joda.time.Duration duration); // Returns a KeyedValues PTransform like this one but with the specified duration.\n\tDeduplicate.KeyedValues<K,V> withTimeDomain(TimeDomain timeDomain); // Returns a KeyedValues PTransform like this one but with the specified time domain.\n}"}
{"index": 10596, "repo": "groovy-all-4.0.13", "des": "Lazy evaluated representation of a child node.", "code": "public class NodeChild extends GPathResult {\n\tprotected void appendNode(Object newValue);\n\tMap attributes(); // Returns a map containing all attributes of the Node of this NodeChild.\n\tvoid build(GroovyObject builder);\n\tIterator childNodes(); // Returns an iterator over the child nodes of this GPathResult.\n\tGPathResult find(Closure closure); // Returns the first child of this GPathResult matching the condition(s) specified in the passed closure.\n\tGPathResult findAll(Closure closure); // Returns the children of this GPathResult matching the condition(s) specified in the passed closure.\n\tObject getAt(int index); // Supports the subscript operator for a GPathResult.\n\tIterator iterator();\n\tList<String> localText(); // Returns the list of any direct String nodes of this NodeChild.\n\tString namespaceURI(); // Returns the URI of the namespace of this NodeChild.\n\tIterator nodeIterator();\n\tGPathResult parent(); // Returns as GPathResult with the parent nodes of the current GPathResult\n\tGPathResult parents(); // Throws a GroovyRuntimeException, because this method is not implemented yet.\n\tprotected void replaceBody(Object newValue);\n\tprotected void replaceNode(Closure newValue);\n\tint size(); // Returns the size of this GPathResult.\n\tString text(); // Returns the text of this GPathResult as a String.\n\tWriter writeTo(Writer out); // Writes this object to the given writer.\n}"}
{"index": 5487, "repo": "druid-processing-26.0.0", "des": "Vectorized cursor used during query execution.", "code": "Interface VectorCursor {\n\tvoid advance(); // Advances the cursor, skipping forward a number of rows equal to the current vector size.\n\tvoid close(); // Close the cursor and release its resources.\n\tVectorColumnSelectorFactory getColumnSelectorFactory(); // Returns a vectorized column selector factory.\n\tboolean isDone(); // Returns false if the cursor is readable, true if it has nothing left to read.\n\tvoid reset(); // Resets the cursor back to its original state.\n}"}
{"index": 1711, "repo": "samza-api-1.8.0", "des": "The root interface for table read and write function.", "code": "Interface TableFunction {\n\tvoid init(Context context, AsyncReadWriteUpdateTable table); // Initializes the function before any operation.\n\tboolean isRetriable(java.lang.Throwable exception); // Determine whether the current operation can be retried with the last thrown exception.\n}"}
{"index": 9730, "repo": "commons-math3-3.6.1", "des": "This class implements the Nakagami distribution.", "code": "Class NakagamiDistribution {\n\tdouble cumulativeProbability(double x); // For a random variable X whose values are distributed according to this distribution, this method returns P(X <= x).\n\tdouble density(double x); // Returns the probability density function (PDF) of this distribution evaluated at the specified point x.\n\tdouble getNumericalMean(); // Use this method to get the numerical value of the mean of this distribution.\n\tdouble getNumericalVariance(); // Use this method to get the numerical value of the variance of this distribution.\n\tdouble getScale(); // Access the scale parameter, omega.\n\tdouble getShape(); // Access the shape parameter, mu.\n\tprotected double getSolverAbsoluteAccuracy(); // Returns the solver absolute accuracy for inverse cumulative computation.\n\tdouble getSupportLowerBound(); // Access the lower bound of the support.\n\tdouble getSupportUpperBound(); // Access the upper bound of the support.\n\tboolean isSupportConnected(); // Use this method to get information about whether the support is connected, i.e.\n\tboolean isSupportLowerBoundInclusive(); // Whether or not the lower bound of support is in the domain of the density function.\n\tboolean isSupportUpperBoundInclusive(); // Whether or not the upper bound of support is in the domain of the density function.\n}"}
{"index": 3382, "repo": "hadoop-azure-3.3.6", "des": "A description of a folder rename operation, including the source and destination keys, and descriptions of the files in the source folder.", "code": "Class NativeAzureFileSystem.FolderRenamePending {\n\tvoid cleanup(); // Clean up after execution of rename.\n\tvoid execute(); // Execute a folder rename.\n\tString getDstKey();\n\torg.apache.hadoop.fs.azure.FileMetadata[] getFiles();\n\tSelfRenewingLease getFolderLease();\n\torg.apache.hadoop.fs.azure.FileMetadata getSourceMetadata();\n\tString getSrcKey();\n\tString makeRenamePendingFileContents(); // Return the contents of the JSON file to represent the operations to be performed for a folder rename.\n\tvoid redo(); // Recover from a folder rename failure by redoing the intended work, as recorded in the -RenamePending.json file.\n\tvoid writeFile(NativeAzureFileSystem fs); // Write to disk the information needed to redo folder rename, in JSON format.\n}"}
{"index": 17785, "repo": "spring-web-6.0.11", "des": "Simple Map-based storage for WebSession instances.", "code": "public class InMemoryWebSessionStore extends Object implements WebSessionStore {\n\treactor.core.publisher.Mono<WebSession> createWebSession(); // Create a new WebSession.\n\tClock getClock(); // Return the configured clock for session lastAccessTime calculations.\n\tint getMaxSessions(); // Return the maximum number of sessions that can be stored.\n\tMap<String,WebSession> getSessions(); // Return the map of sessions with an unmodifiable wrapper.\n\tvoid removeExpiredSessions(); // Check for expired sessions and remove them.\n\treactor.core.publisher.Mono<Void> removeSession(String id); // Remove the WebSession for the specified id.\n\treactor.core.publisher.Mono<WebSession> retrieveSession(String id); // Return the WebSession for the given id.\n\tvoid setClock(Clock clock); // Configure the Clock to use to set lastAccessTime on every created session and to calculate if it is expired.\n\tvoid setMaxSessions(int maxSessions); // Set the maximum number of sessions that can be stored.\n\treactor.core.publisher.Mono<WebSession> updateLastAccessTime(WebSession session); // Update the last accessed timestamp to \"now\".\n}"}
{"index": 2745, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "A job with a just a map phase to count rows.", "code": "Class RowCounter {\n\tprotected void addOptions();\n\torg.apache.hadoop.mapreduce.Job createSubmittableJob(org.apache.hadoop.conf.Configuration conf); // Sets up the actual job.\n\tprotected int doWork();\n\tstatic void main(String[] args); // Main entry point.\n\tprotected org.apache.hbase.thirdparty.org.apache.commons.cli.CommandLineParser newParser();\n\tprotected void printUsage();\n\tprotected void printUsage(String usageStr, String usageHeader, String usageFooter);\n\tprotected void processOldArgs(List<String> args);\n\tprotected void processOptions(org.apache.hbase.thirdparty.org.apache.commons.cli.CommandLine cmd);\n}"}
{"index": 12739, "repo": "spring-data-mongodb-4.1.2", "des": "GeoJsonMultiPolygon is defined as a list of GeoJsonPolygons.", "code": "public class GeoJsonMultiPolygon extends Object implements GeoJson<Iterable<GeoJsonPolygon>> {\n\tboolean equals(Object obj);\n\tList<GeoJsonPolygon> getCoordinates(); // The value of the coordinates member is always an Iterable.\n\tString getType(); // String value representing the type of the GeoJson object.\n}"}
{"index": 3859, "repo": "hbase-client-3.0.0-alpha-4", "des": "Helper class for passing config to NettyRpcClient.", "code": "Class NettyRpcClientConfigHelper {\n\tstatic void createEventLoopPerClient(org.apache.hadoop.conf.Configuration conf); // The NettyRpcClient will create its own NioEventLoopGroup.\n\tstatic void setEventLoopConfig(org.apache.hadoop.conf.Configuration conf, org.apache.hbase.thirdparty.io.netty.channel.EventLoopGroup group, Class<? extends org.apache.hbase.thirdparty.io.netty.channel.Channel> channelClass); // Set the EventLoopGroup and channel class for AsyncRpcClient.\n}"}
{"index": 7648, "repo": "cassandra-all-4.1.2", "des": "An interface that provides an application with the ability to query liveness information of a node in the cluster.", "code": "Interface IFailureDetector {\n\tvoid forceConviction(InetAddressAndPort ep); // force conviction of endpoint in the failure detector\n\tvoid interpret(InetAddressAndPort ep); // This method is invoked by any entity wanting to interrogate the status of an endpoint.\n\tboolean isAlive(InetAddressAndPort ep); // Failure Detector's knowledge of whether a node is up or down.\n\tvoid registerFailureDetectionEventListener(IFailureDetectionEventListener listener); // Register interest for Failure Detector events.\n\tvoid remove(InetAddressAndPort ep); // remove endpoint from failure detector\n\tvoid report(InetAddressAndPort ep); // This method is invoked by the receiver of the heartbeat.\n\tvoid unregisterFailureDetectionEventListener(IFailureDetectionEventListener listener); // Un-register interest for Failure Detector events.\n}"}
{"index": 9670, "repo": "commons-math3-3.6.1", "des": "This abstract class provides a general framework for managing iterative algorithms.", "code": "Class IterationManager {\n\tvoid addIterationListener(IterationListener listener); // Attaches a listener to this manager.\n\tvoid fireInitializationEvent(IterationEvent e); // Informs all registered listeners that the initial phase (prior to the main iteration loop) has been completed.\n\tvoid fireIterationPerformedEvent(IterationEvent e); // Informs all registered listeners that a new iteration (in the main iteration loop) has been performed.\n\tvoid fireIterationStartedEvent(IterationEvent e); // Informs all registered listeners that a new iteration (in the main iteration loop) has been started.\n\tvoid fireTerminationEvent(IterationEvent e); // Informs all registered listeners that the final phase (post-iterations) has been completed.\n\tint getIterations(); // Returns the number of iterations of this solver, 0 if no iterations has been performed yet.\n\tint getMaxIterations(); // Returns the maximum number of iterations.\n\tvoid incrementIterationCount(); // Increments the iteration count by one, and throws an exception if the maximum number of iterations is reached.\n\tvoid removeIterationListener(IterationListener listener); // Removes the specified iteration listener from the list of listeners currently attached to this object.\n\tvoid resetIterationCount(); // Sets the iteration count to 0.\n}"}
{"index": 10390, "repo": "spring-core-6.0.11", "des": "Static holder for local Spring properties, i.e.", "code": "public final class SpringProperties extends Object {\n\tstatic boolean getFlag(String key); // Retrieve the flag for the given property key.\n\tstatic String getProperty(String key); // Retrieve the property value for the given key, checking local Spring properties first and falling back to JVM-level system properties.\n\tstatic void setFlag(String key); // Programmatically set a local flag to \"true\", overriding an entry in the spring.properties file (if any).\n\tstatic void setProperty(String key, String value); // Programmatically set a local property, overriding an entry in the spring.properties file (if any).\n}"}
{"index": 10164, "repo": "spring-hateoas-2.1.2", "des": "Entity links API to create Links and LinkBuilder instances based on an identifier function.", "code": "public class TypedEntityLinks<T> extends Object {\n\tLinkBuilder linkForItemResource(T entity); // Returns a LinkBuilder able to create links to the controller managing the given entity.\n\tLink linkToItemResource(T entity); // Creates a Link pointing to item resource backing the given entity.\n}"}
{"index": 12568, "repo": "spring-jdbc-6.0.11", "des": "Subclass of SqlParameter to represent an output parameter.", "code": "public class SqlOutParameter extends ResultSetSupportingSqlParameter {\n\tSqlReturnType getSqlReturnType(); // Return the custom return type, if any.\n\tboolean isReturnTypeSupported(); // Return whether this parameter holds a custom return type.\n}"}
{"index": 58, "repo": "spring-yarn-boot-2.5.0.RELEASE", "des": "A Boot application which is used to control Spring YARN ContainerClusters via rest API offered by a YarnContainerClusterMvcEndpoint.", "code": "Class YarnContainerClusterApplication {\n\tprotected YarnContainerClusterApplication getThis(); // Gets the instance of this defined by a sub-class.\n\tString run(); // Run the application.\n\tString run(String... args); // Run the application.\n}"}
{"index": 18015, "repo": "spring-ws-core-4.0.5", "des": "Implementation of MethodArgumentResolver and MethodReturnValueHandler that supports dom4j elements.", "code": "public class Dom4jPayloadMethodProcessor extends AbstractPayloadSourceMethodProcessor {\n\tprotected Source createResponsePayload(org.springframework.core.MethodParameter returnType, Object returnValue); // Creates a response payload for the given return value.\n\tprotected org.dom4j.Element resolveRequestPayloadArgument(org.springframework.core.MethodParameter parameter, Source requestPayload); // Resolves the given parameter, annotated with RequestPayload, into a method argument.\n\tprotected boolean supportsRequestPayloadParameter(org.springframework.core.MethodParameter parameter); // Indicates whether the given method parameter, annotated with RequestPayload, is supported by this resolver.\n\tprotected boolean supportsResponsePayloadReturnType(org.springframework.core.MethodParameter returnType); // Indicates whether the given method return type, annotated with ResponsePayload, is supported.\n}"}
{"index": 8069, "repo": "commons-compress-1.23.0", "des": "A group of metadata (annotation) bands, such as class_RVA_bands, method_AD_bands etc.", "code": "Class MetadataBandGroup {\n\tvoid addAnnotation(String desc, List<String> nameRU, List<String> tags, List<Object> values, List<Integer> caseArrayN, List<String> nestTypeRS, List<String> nestNameRU, List<Integer> nestPairN); // Add an annotation to this set of bands\n\tvoid addParameterAnnotation(int numParams, int[] annoN, IntList pairN, List<String> typeRS, List<String> nameRU, List<String> tags, List<Object> values, List<Integer> caseArrayN, List<String> nestTypeRS, List<String> nestNameRU, List<Integer> nestPairN); // Add an annotation to this set of bands.\n\tboolean hasContent(); // Returns true if any annotations have been added to this set of bands.\n\tvoid incrementAnnoN();\n\tvoid newEntryInAnnoN();\n\tint numBackwardsCalls();\n\tvoid pack(OutputStream out); // Write the packed set of bands to the given output stream\n\tvoid removeLatest(); // Remove the latest annotation that was added to this group\n}"}
{"index": 14885, "repo": "spring-security-acl-6.1.2", "des": "Default implementation of PermissionFactory.", "code": "public class DefaultPermissionFactory extends Object implements PermissionFactory {\n\tPermission buildFromMask(int mask); // Dynamically creates a CumulativePermission or BasePermission representing the active bits in the passed mask.\n\tPermission buildFromName(String name);\n\tList<Permission> buildFromNames(List<String> names);\n\tprotected void registerPermission(Permission perm, String permissionName);\n\tprotected void registerPublicPermissions(Class<? extends Permission> clazz); // Registers the public static fields of type Permission for a give class.\n}"}
{"index": 640, "repo": "ignite-core-2.15.0", "des": "Defragmentation specific callback for maintenance mode.", "code": "Class DefragmentationWorkflowCallback {\n\t@NotNull List<MaintenanceAction<?>> allActions(); // Supplies list of MaintenanceActions that user can call to fix maintenance situation for the component or get information about ongoing actions.\n\t@Nullable MaintenanceAction<Boolean> automaticAction(); // Component can provide optional MaintenanceAction that will be executed automatically by MaintenanceRegistry when node enters maintenance mode.\n\tboolean shouldProceedWithMaintenance(); // Called by MaintenanceRegistry and enables it to check if maintenance is still needed for component that provided this callback.\n}"}
{"index": 9620, "repo": "commons-math3-3.6.1", "des": "This class represents a combined set of first order differential equations, with at least a primary set of equations expandable by some sets of secondary equations.", "code": "Class FieldExpandableODE<T extends RealFieldElement<T>> {\n\tint addSecondaryEquations(FieldSecondaryEquations<T> secondary); // Add a set of secondary equations to be integrated along with the primary set.\n\tT[] computeDerivatives(T t, T[] y); // Get the current time derivative of the complete state vector.\n\tFieldEquationsMapper<T> getMapper(); // Get the mapper for the set of equations.\n\tvoid init(T t0, T[] y0, T finalTime); // Initialize equations at the start of an ODE integration.\n}"}
{"index": 1700, "repo": "samza-api-1.8.0", "des": "A StreamApplicationDescriptor contains the description of inputs, outputs, state, configuration and the processing logic for a Samza High Level API StreamApplication.", "code": "Interface StreamApplicationDescriptor {\n\t<M> MessageStream<M> getInputStream(InputDescriptor<M,?> inputDescriptor); // Gets the input MessageStream corresponding to the inputDescriptor.\n\t<M> OutputStream<M> getOutputStream(OutputDescriptor<M,?> outputDescriptor); // Gets the OutputStream corresponding to the outputDescriptor.\n\t<K,V> Table<KV<K,V>> getTable(TableDescriptor<K,V,?> tableDescriptor); // Gets the Table corresponding to the TableDescriptor.\n}"}
{"index": 12096, "repo": "jena-core-4.9.0", "des": "Interface that encapsulates an individual in an ontology, sometimes referred to as a fact or assertion, or a member of the a-box.", "code": "public interface Individual extends OntResource {\n\tvoid addOntClass(Resource cls); // Add the given ontology class as one of the classes to which this individual belongs.\n\tOntClass getOntClass(); // Answer an ontology class to which this individual belongs.\n\tOntClass getOntClass(boolean direct); // Answer an ontology class to which this individual belongs.\n\tboolean hasOntClass(String uri); // Answer true if this individual is a member of the class denoted by the given URI.\n\tboolean hasOntClass(Resource ontClass); // Answer true if this individual is a member of the class denoted by the given ontology class resource.\n\tboolean hasOntClass(Resource ontClass, boolean direct); // Answer true if this individual is a member of the class denoted by the given class resource.\n\t<T extends OntClass>ExtendedIterator<T> listOntClasses(boolean direct); // Answer an iterator over the ontology classes to which this individual belongs.\n\tvoid removeOntClass(Resource ontClass); // Attempt to remove this individual as a member of the given ontology class.\n\tvoid setOntClass(Resource cls); // Set the ontology class for this individual, replacing any existing class membership.\n}"}
{"index": 13647, "repo": "spring-webmvc-6.0.11", "des": "Base tag for all data-binding aware JSP form tags.", "code": "public abstract class AbstractDataBoundFormElementTag extends AbstractFormTag implements EditorAwareTag {\n\tprotected String autogenerateId(); // Autogenerate the 'id' attribute value for this tag.\n\tprotected String convertToDisplayString(Object value); // Get a display String for the given value, converted by a PropertyEditor that the BindStatus may have registered for the value's Class.\n\tvoid doFinally(); // Disposes of the BindStatus instance.\n\tprotected BindStatus getBindStatus(); // Get the BindStatus for this tag.\n\tprotected final Object getBoundValue(); // Get the bound value.\n\tfinal PropertyEditor getEditor(); // Exposes the PropertyEditor for EditorAwareTag.\n\tString getId(); // Get the value of the 'id' attribute.\n\tprotected String getName(); // Get the value for the HTML 'name' attribute.\n\tprotected String getNestedPath(); // Get the value of the nested path that may have been exposed by the NestedPathTag.\n\tprotected final String getPath(); // Get the resolved property path for the form object.\n\tprotected PropertyEditor getPropertyEditor(); // Get the PropertyEditor, if any, in use for value bound to this tag.\n\tprotected String getPropertyPath(); // Build the property path for this tag, including the nested path but not prefixed with the name of the form attribute.\n\tprotected final String processFieldValue(String name, String value, String type); // Process the given form field through a RequestDataValueProcessor instance if one is configured or otherwise returns the same value.\n\tprotected String resolveId(); // Determine the 'id' attribute value for this tag, autogenerating one if none specified.\n\tvoid setId(String id); // Set the value of the 'id' attribute.\n\tvoid setPath(String path); // Set the property path from the form object.\n\tprotected void writeDefaultAttributes(TagWriter tagWriter); // Writes the default set of attributes to the supplied TagWriter.\n}"}
{"index": 10823, "repo": "spring-boot-actuator-3.1.1", "des": "An enumeration of the different types of operation supported by an endpoint.", "code": "public enum OperationType extends Enum<OperationType> {\n\tstatic OperationType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic OperationType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 5852, "repo": "hadoop-yarn-server-common-3.3.6", "des": "This protocol extends the ApplicationMasterProtocol.", "code": "Interface DistributedSchedulingAMProtocol {\n\tDistributedSchedulingAllocateResponse allocateForDistributedScheduling(DistributedSchedulingAllocateRequest request); // Extends the allocate to wrap the response with additional metadata.\n\tRegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterRequest request); // Extends the registerApplicationMaster to wrap the response with additional metadata.\n}"}
{"index": 17826, "repo": "spring-web-6.0.11", "des": "Builder that allows for further customization of part headers.", "code": "public static interface MultipartBodyBuilder.PartBuilder {\n\tMultipartBodyBuilder.PartBuilder contentType(MediaType contentType); // Set the media type of the part.\n\tMultipartBodyBuilder.PartBuilder filename(String filename); // Set the filename parameter for a file part.\n\tMultipartBodyBuilder.PartBuilder header(String headerName, String... headerValues); // Add part header values.\n\tMultipartBodyBuilder.PartBuilder headers(Consumer<HttpHeaders> headersConsumer); // Manipulate the part headers through the given consumer.\n}"}
{"index": 2923, "repo": "tink-1.10.0", "des": "Represents a key computing AES CMAC PRF.", "code": "Class AesCmacPrfKey {\n\tstatic AesCmacPrfKey create(AesCmacPrfParameters parameters, SecretBytes keyBytes);\n\tboolean equalsKey(Key o); // Returns true if the key is guaranteed to be equal to other.\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tSecretBytes getKeyBytes();\n\tAesCmacPrfParameters getParameters(); // Returns the parameters of this key.\n}"}
{"index": 12817, "repo": "spring-data-mongodb-4.1.2", "des": "An ExpressionNode representing an operator.", "code": "public class OperatorNode extends ExpressionNode {\n\tExpressionNode getLeft(); // Returns the left operand as ExpressionNode.\n\tString getMongoOperator(); // Returns the Mongo expression of the operator.\n\tExpressionNode getRight(); // Returns the right operand as ExpressionNode.\n\tboolean isLogicalOperator(); // Returns whether the ExpressionNode is a logical conjunction operation like &&, ||.\n\tboolean isMathematicalOperation(); // Returns whether the ExpressionNode is a mathematical operation.\n\tboolean isUnaryMinus(); // Returns whether the operator is a unary minus, e.g. -1.\n\tboolean isUnaryOperator(); // Returns whether the operator is unary.\n}"}
{"index": 18724, "repo": "opennlp-tools-2.2.0", "des": "An interface for objects which can deliver a stream of training data to be supplied to an EventStream.", "code": "Interface DataStream {\n\tboolean hasNext(); // Test whether there are any events remaining in this DataStream.\n\tObject nextToken(); // Returns the next slice of data held in this DataStream.\n}"}
{"index": 4508, "repo": "beam-sdks-java-core-2.49.0", "des": "Provider to create SchemaIO instances for use in Beam SQL and other SDKs.", "code": "Interface SchemaIOProvider {\n\tSchema configurationSchema(); // Returns the expected schema of the configuration object.\n\tSchemaIO from(java.lang.String location, Row configuration, @Nullable Schema dataSchema); // Produce a SchemaIO given a String representing the data's location, the schema of the data that resides there, and some IO-specific configuration object.\n\tjava.lang.String identifier(); // Returns an id that uniquely represents this IO.\n\tPCollection.IsBounded isBounded();\n\tboolean requiresDataSchema(); // Indicates whether the dataSchema value is necessary.\n}"}
{"index": 796, "repo": "ignite-core-2.15.0", "des": "Processor responsible for managing custom DiscoveryCustomMessage events for exchanging marshalling mappings between nodes in grid.", "code": "Class GridMarshallerMappingProcessor {\n\tvoid addMappingUpdatedListener(MappingUpdatedListener lsnr); // Adds a listener to be notified when mapping changes.\n\tvoid collectGridNodeData(DiscoveryDataBag dataBag); // Collects discovery data on nodes already in grid on receiving TcpDiscoveryNodeAddedMessage.\n\tvoid collectJoiningNodeData(DiscoveryDataBag dataBag); // Collects discovery data on joining node before sending TcpDiscoveryJoinRequestMessage request.\n\tIterator<Map.Entry<Byte,Map<Integer,String>>> currentMappings(); // Gets an iterator over all current mappings.\n\t@Nullable GridComponent.DiscoveryDataExchangeType discoveryDataType(); // Gets unique component type to distinguish components providing discovery data.\n\tvoid onDisconnected(IgniteFuture<?> reconnectFut); // Client disconnected callback.\n\tvoid onGridDataReceived(DiscoveryDataBag.GridDiscoveryData data); // Receives discovery data object from remote nodes (called on new node during discovery process).\n\tvoid onJoiningNodeDataReceived(DiscoveryDataBag.JoiningNodeDiscoveryData data); // Method is called on nodes that are already in grid (not on joining node).\n\tvoid onKernalStop(boolean cancel); // Callback to notify that kernal is about to stop.\n\tvoid start(); // Starts grid component.\n}"}
{"index": 18351, "repo": "opencms-core-15.0", "des": "Represents information about whether a gallery folder should use a custom upload action.", "code": "Class CmsGalleryActionInfo {\n\tCmsUUID getStructureId(); // Gets the structure id of the folder.\n\tjava.lang.String getUploadAction(); // Gets the upload action (may be null).\n}"}
{"index": 15787, "repo": "camel-api-4.0.0-RC1", "des": "Internal Processor that Camel routing engine used during routing for cross cutting functionality such as: Execute UnitOfWork Keeping track which route currently is being routed Execute RoutePolicy Gather JMX performance statics Tracing Debugging Message History Stream Caching Transformer ...", "code": "public interface InternalProcessor extends AsyncProcessor {\n\tvoid addAdvice(CamelInternalProcessorAdvice<?> advice); // Adds an CamelInternalProcessorAdvice advice to the list of advices to execute by this internal processor.\n\tvoid addManagementInterceptStrategy(ManagementInterceptStrategy.InstrumentationProcessor processor);\n\tvoid addRouteInflightRepositoryAdvice(InflightRepository inflightRepository, String routeId);\n\tvoid addRouteLifecycleAdvice();\n\tvoid addRoutePolicyAdvice(List<RoutePolicy> routePolicyList);\n\t<T> T getAdvice(Class<T> type); // Gets the advice with the given type.\n\tvoid setRouteOnAdvices(Route route);\n}"}
{"index": 8966, "repo": "hbase-server-3.0.0-alpha-4", "des": "Internal scanners differ from client-side scanners in that they operate on HStoreKeys and byte[] instead of RowResults.", "code": "Interface InternalScanner {\n\tvoid close(); // Closes the scanner and releases any resources it has allocated\n\tdefault boolean next(List<Cell> result); // Grab the next row's worth of values.\n\tboolean next(List<Cell> result, ScannerContext scannerContext); // Grab the next row's worth of values.\n}"}
{"index": 5085, "repo": "commons-collections-3.2.2", "des": "Decorates another Map to transform objects that are added.", "code": "Class TransformedMap {\n\tprotected Object checkSetValue(Object value); // Override to transform the value when using setValue.\n\tstatic Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer); // Factory method to create a transforming map.\n\tstatic Map decorateTransform(Map map, Transformer keyTransformer, Transformer valueTransformer); // Factory method to create a transforming map that will transform existing contents of the specified map.\n\tSet entrySet();\n\tprotected boolean isSetValueChecking(); // Override to only return true when there is a value transformer.\n\tObject put(Object key, Object value);\n\tvoid putAll(Map mapToCopy);\n\tprotected Object transformKey(Object object); // Transforms a key.\n\tprotected Map transformMap(Map map); // Transforms a map.\n\tprotected Object transformValue(Object object); // Transforms a value.\n}"}
{"index": 293, "repo": "phoenix-core-5.1.3", "des": "Creates an expression for Upsert with Values/Select using ARRAY.", "code": "Class ArrayConstructorExpression {\n\t<T> T accept(ExpressionVisitor<T> visitor); // Means of traversing expression tree through visitor.\n\tArrayConstructorExpression clone(List<Expression> children);\n\tboolean evaluate(Tuple tuple, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Access the value by setting a pointer to it (as opposed to making a copy of it which can be expensive)\n\tPDataType getDataType();\n\tvoid readFields(DataInput input);\n\tboolean requiresFinalEvaluation(); // Determines if an evaluate is required after partial evaluation is run.\n\tvoid reset(); // Resets the state of a expression back to its initial state and enables the expession to be evaluated incrementally (which occurs during filter evaluation where we see one key value at a time; it's possible to evaluate immediately rather than wait until all key values have been seen).\n\tvoid write(DataOutput output);\n}"}
{"index": 15578, "repo": "spring-boot-actuator-autoconfigure-3.1.1", "des": "Configuration properties to configure Wavefront.", "code": "@ConfigurationProperties(prefix=\"management.wavefront\") public class WavefrontProperties extends Object {\n\tString getApiToken();\n\tString getApiTokenOrThrow(); // Returns the API token or throws an exception if the API token is mandatory.\n\tWavefrontProperties.Application getApplication();\n\tURI getEffectiveUri(); // Returns the effective URI of the wavefront instance.\n\tWavefrontProperties.Metrics getMetrics();\n\tWavefrontProperties.Sender getSender();\n\tString getSource();\n\tString getSourceOrDefault();\n\tSet<String> getTraceDerivedCustomTagKeys();\n\tURI getUri();\n\tvoid setApiToken(String apiToken);\n\tvoid setSource(String source);\n\tvoid setTraceDerivedCustomTagKeys(Set<String> traceDerivedCustomTagKeys);\n\tvoid setUri(URI uri);\n}"}
{"index": 7749, "repo": "cassandra-all-4.1.2", "des": "A Replica represents an owning node for a copy of a portion of the token ring.", "code": "Class Replica {\n\tint compareTo(Replica o);\n\tboolean contains(Range<Token> that);\n\tReplica decorateSubrange(Range<Token> subrange);\n\tInetAddressAndPort endpoint();\n\tboolean equals(java.lang.Object o);\n\tstatic Replica fullReplica(InetAddressAndPort endpoint, Range<Token> range);\n\tstatic Replica fullReplica(InetAddressAndPort endpoint, Token start, Token end);\n\tboolean intersectsOnRange(Replica replica);\n\tboolean isFull();\n\tboolean isSelf();\n\tboolean isTransient();\n\tRange<Token> range();\n\tRangesAtEndpoint subtractIgnoreTransientStatus(Range<Token> subtract); // Don't use this method and ignore transient status unless you are explicitly handling it outside this method.\n\tRangesAtEndpoint subtractSameReplication(RangesAtEndpoint toSubtract); // This is used exclusively in TokenMetadata to check if a portion of a range is already replicated by an endpoint so that we only mark as pending the portion that is either not replicated sufficiently (transient when we need full) or at all.\n\tstatic Replica transientReplica(InetAddressAndPort endpoint, Range<Token> range);\n\tstatic Replica transientReplica(InetAddressAndPort endpoint, Token start, Token end);\n}"}
{"index": 7758, "repo": "cassandra-all-4.1.2", "des": "The metadata for the results of executing a query or prepared statement.", "code": "Class ResultSet.ResultMetadata {\n\tResultSet.ResultMetadata addNonSerializedColumns(java.util.Collection<? extends ColumnSpecification> columns); // Adds the specified columns which will not be serialized.\n\tResultSet.ResultMetadata copy();\n\tboolean equals(java.lang.Object other);\n\tstatic ResultSet.ResultMetadata fromPrepared(CQLStatement statement);\n\tint getColumnCount();\n\tjava.util.EnumSet<ResultSet.Flag> getFlags();\n\tPagingState getPagingState();\n\tMD5Digest getResultMetadataId();\n\tjava.util.List<ColumnSpecification> requestNames(); // Return only the column names requested by the user, excluding those added for post-query re-orderings, see definition of names and columnCount.\n\tvoid setHasMorePages(PagingState pagingState);\n\tvoid setMetadataChanged();\n\tvoid setSkipMetadata();\n\tint valueCount();\n}"}
{"index": 17380, "repo": "groovy-4.0.13", "des": "An interface that adds the ability to intercept property getters/setters", "code": "public interface PropertyAccessInterceptor extends Interceptor {\n\tObject beforeGet(Object object, String property); // Intercepts a getXXX call and returns a result.\n\tvoid beforeSet(Object object, String property, Object newValue); // Intercepts a setXXX call\n}"}
{"index": 18666, "repo": "opencms-gwt-15.0", "des": "Message accessor class for use in uibinder templates.", "code": "Class CmsResourceInfoMessages {\n\tstatic java.lang.String messageDialogTitle(); // Message accessor.\n\tstatic java.lang.String messageFieldsetTitle(); // Message accessor.\n\tstatic java.lang.String messageLabelDateCreated(); // Message accessor.\n\tstatic java.lang.String messageLabelDateExpired(); // Message accessor.\n\tstatic java.lang.String messageLabelDateModified(); // Message accessor.\n\tstatic java.lang.String messageLabelDateReleased(); // Message accessor.\n\tstatic java.lang.String messageLabelLastProject(); // Message accessor.\n\tstatic java.lang.String messageLabelLocales(); // Message accessor.\n\tstatic java.lang.String messageLabelLockOwner(); // Message accessor.\n\tstatic java.lang.String messageLabelLockState(); // Message accessor.\n\tstatic java.lang.String messageLabelNavText(); // Message accessor.\n\tstatic java.lang.String messageLabelPermissions(); // Message accessor.\n\tstatic java.lang.String messageLabelSize(); // Message accessor.\n\tstatic java.lang.String messageLabelState(); // Message accessor.\n\tstatic java.lang.String messageLabelTitle(); // Message accessor.\n\tstatic java.lang.String messageLabelType(); // Message accessor.\n\tstatic java.lang.String messageLabelUserCreated(); // Message accessor.\n\tstatic java.lang.String messageLabelUserModified(); // Message accessor.\n}"}
{"index": 9430, "repo": "hadoop-yarn-api-3.3.6", "des": "The class that hosts a list of events, which are categorized according to their related entities.", "code": "Class TimelineEvents {\n\tvoid addEvent(TimelineEvents.EventsOfOneEntity eventsOfOneEntity); // Add a single TimelineEvents.EventsOfOneEntity instance into the existing list\n\tvoid addEvents(List<TimelineEvents.EventsOfOneEntity> allEvents); // Add a list of TimelineEvents.EventsOfOneEntity instances into the existing list\n\tList<TimelineEvents.EventsOfOneEntity> getAllEvents(); // Get a list of TimelineEvents.EventsOfOneEntity instances\n\tvoid setEvents(List<TimelineEvents.EventsOfOneEntity> allEvents); // Set the list to the given list of TimelineEvents.EventsOfOneEntity instances\n}"}
{"index": 9604, "repo": "commons-math3-3.6.1", "des": "This interface represents a handler for discrete events triggered during ODE integration.", "code": "Interface EventHandler {\n\tEventHandler.Action eventOccurred(double t, double[] y, boolean increasing); // Handle an event and choose what to do next.\n\tdouble g(double t, double[] y); // Compute the value of the switching function.\n\tvoid init(double t0, double[] y0, double t); // Initialize event handler at the start of an ODE integration.\n\tvoid resetState(double t, double[] y); // Reset the state prior to continue the integration.\n}"}
{"index": 7186, "repo": "calcite-core-1.34.0", "des": "Represents a SQL data type specification in a parse tree.", "code": "Class SqlDataTypeSpec {\n\t<R> R accept(SqlVisitor<R> visitor); // Accepts a generic visitor.\n\tSqlNode clone(SqlParserPos pos); // Clones a SqlNode with a different position.\n\tRelDataType deriveType(SqlValidator validator); // Converts this type specification to a RelDataType.\n\tRelDataType deriveType(SqlValidator validator, boolean nullable); // Converts this type specification to a RelDataType.\n\tboolean equalsDeep(@Nullable SqlNode node, Litmus litmus); // Returns whether this node is structurally equivalent to another node.\n\t@Nullable SqlIdentifier getCollectionsTypeName();\n\tSqlDataTypeSpec getComponentTypeSpec(); // Returns a new SqlDataTypeSpec corresponding to the component type if the type spec is a collections type spec. Collection types are ARRAY and MULTISET.\n\tSqlMonotonicity getMonotonicity(@Nullable SqlValidatorScope scope); // Returns whether expression is always ascending, descending or constant.\n\t@Nullable Boolean getNullable();\n\t@Nullable TimeZone getTimeZone();\n\tSqlIdentifier getTypeName();\n\tSqlTypeNameSpec getTypeNameSpec();\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this node to a writer.\n\tvoid validate(SqlValidator validator, SqlValidatorScope scope); // Validates this node.\n\tSqlDataTypeSpec withNullable(Boolean nullable); // Returns a copy of this data type specification with a given nullability.\n\tSqlDataTypeSpec withNullable(Boolean nullable, SqlParserPos pos); // Returns a copy of this data type specification with a given nullability, extending the parser position.\n}"}
{"index": 13883, "repo": "spring-webflux-6.0.11", "des": "A View implementation that uses the FreeMarker template engine.", "code": "public class FreeMarkerView extends AbstractUrlBasedView {\n\tvoid afterPropertiesSet();\n\tprotected FreeMarkerConfig autodetectConfiguration(); // Autodetect a FreeMarkerConfig object in the ApplicationContext.\n\tboolean checkResourceExists(Locale locale); // Check that the FreeMarker template used for this view exists and is valid.\n\tprotected freemarker.template.Configuration getConfiguration(); // Get the FreeMarker Configuration used by this view.\n\tprotected String getEncoding(); // Get the encoding for the FreeMarker template.\n\tprotected reactor.core.publisher.Mono<Map<String,Object>> getModelAttributes(Map<String,?> model, org.springframework.web.server.ServerWebExchange exchange); // Prepare the model to use for rendering by potentially exposing a RequestContext for use in Spring FreeMarker macros and then delegating to the inherited implementation of this method.\n\tprotected freemarker.template.ObjectWrapper getObjectWrapper(); // Get the configured FreeMarker ObjectWrapper, or the default wrapper if none specified.\n\tprotected freemarker.template.Template getTemplate(Locale locale); // Get the FreeMarker template for the given locale, to be rendered by this view.\n\tprotected freemarker.template.SimpleHash getTemplateModel(Map<String,Object> model, org.springframework.web.server.ServerWebExchange exchange); // Build a FreeMarker template model for the given model map.\n\tprotected freemarker.template.Configuration obtainConfiguration(); // Obtain the FreeMarker Configuration for actual use.\n\tprotected reactor.core.publisher.Mono<Void> renderInternal(Map<String,Object> renderAttributes, org.springframework.http.MediaType contentType, org.springframework.web.server.ServerWebExchange exchange); // Subclasses must implement this method to actually render the view.\n\tvoid setConfiguration(freemarker.template.Configuration configuration); // Set the FreeMarker Configuration to be used by this view.\n\tvoid setEncoding(String encoding); // Set the encoding of the FreeMarker template file.\n\tvoid setExposeSpringMacroHelpers(boolean exposeSpringMacroHelpers); // Set whether to expose a RequestContext for use by Spring's macro library, under the name \"springMacroRequestContext\".\n}"}
{"index": 833, "repo": "ignite-core-2.15.0", "des": "Interception listener is notified about method apply.", "code": "Interface GridProxyListener {\n\tvoid afterCall(Class<?> cls, String mtdName, Object[] args, Object res, Throwable e); // Method is called right after the traced method.\n\tvoid beforeCall(Class<?> cls, String mtdName, Object[] args); // Method is called right before the traced method.\n}"}
{"index": 10668, "repo": "groovy-all-4.0.13", "des": "Various utility functions for use in the compiler.", "code": "public abstract class Utilities extends Object {\n\tstatic String eol(); // Returns the end-of-line marker.\n\tstatic boolean isJavaIdentifier(String name); // Tells if the given string is a valid Java identifier.\n\tstatic String repeatString(String pattern, int repeats); // Returns a string made up of repetitions of the specified string.\n}"}
{"index": 13518, "repo": "spring-messaging-6.0.11", "des": "Strategy interface for resolving method parameters into argument values in the context of a given Message.", "code": "public interface HandlerMethodArgumentResolver {\n\tObject resolveArgument(org.springframework.core.MethodParameter parameter, Message<?> message); // Resolves a method parameter into an argument value from a given message.\n\tboolean supportsParameter(org.springframework.core.MethodParameter parameter); // Whether the given method parameter is supported by this resolver.\n}"}
{"index": 11778, "repo": "bedrock-core-7.0.2", "des": "A collection of utilities to assist in using Mockito to create object proxies.", "code": "public class ProxyHelper extends Object {\n\tstatic <T> T createProxyOf(Class<T> clazz, ProxyHelper.Interceptor interceptor); // Creates a dynamic proxy of the specified Class routing all method calls to the specified interceptor.\n\tstatic <T> T createProxyOf(T object, Object interceptor); // Creates a dynamic proxy of the specified Object routing all method calls to the specified interceptor.\n}"}
{"index": 4985, "repo": "commons-collections-3.2.2", "des": "Implementation of BidiMap that uses two TreeMap instances.", "code": "Class DualTreeBidiMap {\n\tComparator comparator();\n\tprotected BidiMap createBidiMap(Map normalMap, Map reverseMap, BidiMap inverseMap); // Creates a new instance of this object.\n\tObject firstKey(); // Gets the first key currently in this map.\n\tSortedMap headMap(Object toKey);\n\tOrderedBidiMap inverseOrderedBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tSortedBidiMap inverseSortedBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tObject lastKey(); // Gets the last key currently in this map.\n\tObject nextKey(Object key); // Gets the next key after the one specified.\n\tOrderedMapIterator orderedMapIterator(); // Obtains an ordered map iterator.\n\tObject previousKey(Object key); // Gets the previous key before the one specified.\n\tSortedMap subMap(Object fromKey, Object toKey);\n\tSortedMap tailMap(Object fromKey);\n}"}
{"index": 1823, "repo": "kafka-clients-3.5.0", "des": "A class containing leadership, replicas and ISR information for a topic partition.", "code": "Class TopicPartitionInfo {\n\tboolean equals(Object o);\n\tList<Node> isr(); // Return the in-sync replicas of the partition.\n\tNode leader(); // Return the leader of the partition or null if there is none.\n\tint partition(); // Return the partition id.\n\tList<Node> replicas(); // Return the replicas of the partition in the same order as the replica assignment.\n}"}
{"index": 1858, "repo": "hadoop-hdfs-3.3.6", "des": "A default implementation of the INodeAttributesProvider.", "code": "Class DefaultINodeAttributesProvider {\n\torg.apache.hadoop.hdfs.server.namenode.INodeAttributes getAttributes(String[] pathElements, org.apache.hadoop.hdfs.server.namenode.INodeAttributes inode);\n\tvoid start(); // Initialize the provider.\n\tvoid stop(); // Shutdown the provider.\n}"}
{"index": 9368, "repo": "hadoop-yarn-api-3.3.6", "des": "LogAggregationContext represents all of the information needed by the NodeManager to handle the logs for an application.", "code": "Class LogAggregationContext {\n\tabstract String getExcludePattern(); // Get exclude pattern.\n\tabstract String getIncludePattern(); // Get include pattern.\n\tabstract String getLogAggregationPolicyClassName(); // Get the log aggregation policy class.\n\tabstract String getLogAggregationPolicyParameters(); // Get the log aggregation policy parameters.\n\tabstract String getRolledLogsExcludePattern(); // Get exclude pattern for aggregation in a rolling fashion.\n\tabstract String getRolledLogsIncludePattern(); // Get include pattern in a rolling fashion.\n\tstatic LogAggregationContext newInstance(String includePattern, String excludePattern);\n\tstatic LogAggregationContext newInstance(String includePattern, String excludePattern, String rolledLogsIncludePattern, String rolledLogsExcludePattern);\n\tstatic LogAggregationContext newInstance(String includePattern, String excludePattern, String rolledLogsIncludePattern, String rolledLogsExcludePattern, String policyClassName, String policyParameters);\n\tabstract void setExcludePattern(String excludePattern); // Set exclude pattern.\n\tabstract void setIncludePattern(String includePattern); // Set include pattern.\n\tabstract void setLogAggregationPolicyClassName(String className); // Set the log aggregation policy class.\n\tabstract void setLogAggregationPolicyParameters(String parameters); // Set the log aggregation policy parameters.\n\tabstract void setRolledLogsExcludePattern(String rolledLogsExcludePattern); // Set exclude pattern for in a rolling fashion.\n\tabstract void setRolledLogsIncludePattern(String rolledLogsIncludePattern); // Set include pattern in a rolling fashion.\n}"}
{"index": 9092, "repo": "hbase-server-3.0.0-alpha-4", "des": "A general interface for a sub procedure runs at RS side.", "code": "Interface RSProcedureCallable {\n\tEventType getEventType(); // Event type used to select thread pool.\n\tvoid init(byte[] parameter, HRegionServer rs); // Initialize the callable\n}"}
{"index": 9389, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by the ApplicationMaster to ResourceManager on registration.", "code": "Class RegisterApplicationMasterRequest {\n\tabstract String getHost(); // Get the host on which the ApplicationMaster is running.\n\tMap<Set<String>,PlacementConstraint> getPlacementConstraints(); // Return all Placement Constraints specified at the Application level.\n\tabstract int getRpcPort(); // Get the RPC port on which the ApplicationMaster is responding.\n\tabstract String getTrackingUrl(); // Get the tracking URL for the ApplicationMaster.\n\tstatic RegisterApplicationMasterRequest newInstance(String host, int port, String trackingUrl); // Create a new instance of RegisterApplicationMasterRequest.\n\tabstract void setHost(String host); // Set the host on which the ApplicationMaster is running.\n\tvoid setPlacementConstraints(Map<Set<String>,PlacementConstraint> placementConstraints); // Set Placement Constraints applicable to the SchedulingRequests of this application.\n\tabstract void setRpcPort(int port); // Set the RPC port on which the ApplicationMaster is responding.\n\tabstract void setTrackingUrl(String trackingUrl); // Set the tracking URLfor the ApplicationMaster while it is running.\n}"}
{"index": 7649, "repo": "cassandra-all-4.1.2", "des": "Interface for SSTable metadata serializer.", "code": "Interface IMetadataSerializer {\n\tjava.util.Map<MetadataType,MetadataComponent> deserialize(Descriptor descriptor, java.util.EnumSet<MetadataType> types); // Deserialize specified metadata components from given descriptor.\n\tMetadataComponent deserialize(Descriptor descriptor, MetadataType type); // Deserialized only metadata component specified from given descriptor.\n\tvoid mutate(Descriptor descriptor, java.lang.String description, java.util.function.UnaryOperator<StatsMetadata> transform); // Mutate SSTable Metadata NOTE: mutating stats metadata of a live sstable will race with entire-sstable-streaming, please use SSTableReader.mutateLevelAndReload(int) instead on live sstable.\n\tvoid mutateLevel(Descriptor descriptor, int newLevel); // Mutate SSTable level NOTE: mutating stats metadata of a live sstable will race with entire-sstable-streaming, please use SSTableReader.mutateLevelAndReload(int) instead on live sstable.\n\tvoid mutateRepairMetadata(Descriptor descriptor, long newRepairedAt, TimeUUID newPendingRepair, boolean isTransient); // Mutate the repairedAt time, pendingRepair ID, and transient status.\n\tvoid rewriteSSTableMetadata(Descriptor descriptor, java.util.Map<MetadataType,MetadataComponent> currentComponents); // Replace the sstable metadata file (-Statistics.db) with the given components.\n\tvoid serialize(java.util.Map<MetadataType,MetadataComponent> components, DataOutputPlus out, Version version); // Serialize given metadata components\n}"}
{"index": 2027, "repo": "hive-exec-4.0.0-alpha-2", "des": "DemuxOperator is an operator used by MapReduce Jobs optimized by CorrelationOptimizer.", "code": "Class DemuxOperator {\n\tprotected void closeOp(boolean abort); // Operator specific close routine.\n\tvoid endGroup();\n\tvoid forward(Object row, ObjectInspector rowInspector);\n\tString getName();\n\tstatic String getOperatorName();\n\tOperatorType getType(); // Return the type of the specific operator among the types in OperatorType.\n\tprotected void initializeChildren(org.apache.hadoop.conf.Configuration hconf); // Calls initialize on each of the children with outputObjetInspector as the output row format.\n\tprotected void initializeOp(org.apache.hadoop.conf.Configuration hconf); // Operator specific initialization.\n\tboolean logicalEquals(Operator other); // Decides whether two operators are logically the same.\n\tvoid process(Object row, int tag); // Process the row.\n\tvoid startGroup();\n}"}
{"index": 17613, "repo": "spring-ldap-core-3.1.0", "des": "The specifications for the LdapClient.search() request.", "code": "public static interface LdapClient.SearchSpec {\n\tLdapClient.SearchSpec name(String name); // The name to search for.\n\tLdapClient.SearchSpec name(Name name); // The name to search for.\n\tLdapClient.SearchSpec query(Consumer<LdapQueryBuilder> consumer); // The no-filter query to execute.\n\tLdapClient.SearchSpec query(LdapQuery query); // The query to execute.\n\tdefault <O extends LdapDataEntry>O toEntry();\n\tdefault <O extends LdapDataEntry>List<O> toEntryList();\n\tdefault <O extends LdapDataEntry>Stream<O> toEntryStream();\n\t<O> List<O> toList(AttributesMapper<O> mapper); // Return a list of search results, each mapped by the given strategy.\n\t<O> List<O> toList(ContextMapper<O> mapper); // Return a list of search results, each mapped by the given strategy.\n\t<O> O toObject(AttributesMapper<O> mapper); // Expect at most one search result, mapped by the given strategy.\n\t<O> O toObject(ContextMapper<O> mapper); // Expect at most one search result, mapped by the given strategy.\n\t<O> Stream<O> toStream(AttributesMapper<O> mapper); // Return a stream of search results, each mapped by the given strategy.\n\t<O> Stream<O> toStream(ContextMapper<O> mapper); // Return a stream of search results, each mapped by the given strategy.\n}"}
{"index": 332, "repo": "phoenix-core-5.1.3", "des": "Projector for getting value from a select statement for an expression.", "code": "Class ExpressionProjector {\n\tExpression getExpression(); // Get the expression\n\tString getName(); // Get the column name as it was referenced in the query\n\tString getTableName(); // Get the name of the hbase table containing the column\n\tObject getValue(Tuple tuple, PDataType type, org.apache.hadoop.hbase.io.ImmutableBytesWritable ptr); // Get the value of the column, coercing it if necessary to the specified type\n\tboolean isCaseSensitive();\n}"}
{"index": 10789, "repo": "spring-boot-actuator-3.1.1", "des": "Default HealthContributorRegistry implementation.", "code": "public class DefaultHealthContributorRegistry extends Object implements HealthContributorRegistry {\n\tHealthContributor getContributor(String name); // Return the contributor with the given name.\n\tIterator<NamedContributor<HealthContributor>> iterator();\n\tvoid registerContributor(String name, HealthContributor contributor); // Register a contributor with the given name.\n\tHealthContributor unregisterContributor(String name); // Unregister a previously registered contributor.\n}"}
{"index": 12348, "repo": "jena-core-4.9.0", "des": "This interface XSSimpleType represents the simple type definition of schema component and defines methods to query the information contained.", "code": "public interface XSSimpleType extends XSSimpleTypeDefinition {\n\tvoid applyFacets(XSFacets facets, short presentFacet, short fixedFacet, ValidationContext context); // If this type is created from restriction, then some facets can be applied to the simple type.\n\tshort getPrimitiveKind(); // return an ID representing the built-in primitive base type.\n\tshort getWhitespace(); // Return the whitespace corresponding to this datatype.\n\tboolean isEqual(Object value1, Object value2); // Check whether two actual values are equal.\n\tboolean isIDType(); // Check whether this type is or is derived from ID.\n\tObject validate(Object content, ValidationContext context, ValidatedInfo validatedInfo); // validate a given string value, represented by content.toString().\n\tObject validate(String content, ValidationContext context, ValidatedInfo validatedInfo); // validate a given string against this simple type.\n\tvoid validate(ValidationContext context, ValidatedInfo validatedInfo); // Validate an actual value against this simple type.\n}"}
{"index": 3778, "repo": "hbase-client-3.0.0-alpha-4", "des": "Helper class for custom client scanners.", "code": "Class AbstractClientScanner {\n\tScanMetrics getScanMetrics(); // Used internally accumulating metrics on scan.\n\tprotected void initScanMetrics(Scan scan); // Check and initialize if application wants to collect scan metrics\n}"}
{"index": 8822, "repo": "hbase-server-3.0.0-alpha-4", "des": "Base class for all the Namespace procedures that want to use a StateMachineProcedure.", "code": "Class AbstractStateMachineNamespaceProcedure<TState> {\n\tprotected Procedure.LockState acquireLock(MasterProcedureEnv env);\n\tprotected static void addOrUpdateNamespace(MasterProcedureEnv env, NamespaceDescriptor ns); // Insert/update the row into the ns family of meta table.\n\tprotected void checkNamespaceRSGroup(MasterProcedureEnv env, NamespaceDescriptor nd);\n\tstatic void createDirectory(MasterFileSystem mfs, NamespaceDescriptor nsDescriptor);\n\tprotected static void createDirectory(MasterProcedureEnv env, NamespaceDescriptor nsDescriptor); // Create the namespace directory\n\tprotected abstract String getNamespaceName();\n\tTableName getTableName(); // Returns the name of the table the procedure is operating on\n\tprotected static TableNamespaceManager getTableNamespaceManager(MasterProcedureEnv env);\n\tabstract TableProcedureInterface.TableOperationType getTableOperationType(); // Given an operation type we can take decisions about what to do with pending operations.\n\tprotected void releaseLock(MasterProcedureEnv env);\n\tprotected void releaseSyncLatch();\n\tvoid toStringClassDetails(StringBuilder sb);\n\tprotected boolean waitInitialized(MasterProcedureEnv env);\n}"}
{"index": 15089, "repo": "spring-vault-core-3.0.4", "des": "Builder for UsernamePasswordAuthenticationOptions.", "code": "public static class UsernamePasswordAuthenticationOptions.UsernamePasswordAuthenticationBuilder extends Object {\n\tUsernamePasswordAuthenticationOptions build(); // Build a new UsernamePasswordAuthenticationOptions instance.\n\tUsernamePasswordAuthenticationOptions.UsernamePasswordAuthenticationBuilder password(CharSequence password); // Configure a password for userpass authentication.\n\tUsernamePasswordAuthenticationOptions.UsernamePasswordAuthenticationBuilder path(String path); // Configure the mount path.\n\tUsernamePasswordAuthenticationOptions.UsernamePasswordAuthenticationBuilder totp(CharSequence totp); // Configure an optional totp (time-based one-time token) for userpass/Okta authentication.\n\tUsernamePasswordAuthenticationOptions.UsernamePasswordAuthenticationBuilder username(String username); // Configure a username for userpass authentication.\n}"}
{"index": 9887, "repo": "iceberg-api-1.3.0", "des": "A builder used to create valid tables or start create/replace transactions.", "code": "Interface Catalog.TableBuilder {\n\tTable create(); // Creates the table.\n\tTransaction createOrReplaceTransaction(); // Starts a transaction to create or replace the table.\n\tTransaction createTransaction(); // Starts a transaction to create the table.\n\tTransaction replaceTransaction(); // Starts a transaction to replace the table.\n\tCatalog.TableBuilder withLocation(java.lang.String location); // Sets a location for the table.\n\tCatalog.TableBuilder withPartitionSpec(PartitionSpec spec); // Sets a partition spec for the table.\n\tCatalog.TableBuilder withProperties(java.util.Map<java.lang.String,java.lang.String> properties); // Adds key/value properties to the table.\n\tCatalog.TableBuilder withProperty(java.lang.String key, java.lang.String value); // Adds a key/value property to the table.\n\tCatalog.TableBuilder withSortOrder(SortOrder sortOrder); // Sets a sort order for the table.\n}"}
{"index": 6612, "repo": "exoplayer-core-2.9.6", "des": "Makes a best effort to adjust frame release timestamps for a smoother visual result.", "code": "Class VideoFrameReleaseTimeHelper {\n\tlong adjustReleaseTime(long framePresentationTimeUs, long unadjustedReleaseTimeNs); // Adjusts a frame release timestamp.\n\tvoid disable(); // Disables the helper.\n\tvoid enable(); // Enables the helper.\n}"}
{"index": 16737, "repo": "spring-jms-6.0.11", "des": "Creates the necessary MessageListenerContainer instances for the registered endpoints.", "code": "public class JmsListenerEndpointRegistry extends Object implements org.springframework.beans.factory.DisposableBean, org.springframework.context.SmartLifecycle, org.springframework.context.ApplicationContextAware, org.springframework.context.ApplicationListener<org.springframework.context.event.ContextRefreshedEvent> {\n\tprotected MessageListenerContainer createListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory); // Create and start a new container using the specified factory.\n\tvoid destroy();\n\tMessageListenerContainer getListenerContainer(String id); // Return the MessageListenerContainer with the specified id or null if no such container exists.\n\tSet<String> getListenerContainerIds(); // Return the ids of the managed MessageListenerContainer instance(s).\n\tCollection<MessageListenerContainer> getListenerContainers(); // Return the managed MessageListenerContainer instance(s).\n\tint getPhase();\n\tboolean isRunning();\n\tvoid onApplicationEvent(org.springframework.context.event.ContextRefreshedEvent event);\n\tvoid registerListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory); // Create a message listener container for the given JmsListenerEndpoint.\n\tvoid registerListenerContainer(JmsListenerEndpoint endpoint, JmsListenerContainerFactory<?> factory, boolean startImmediately); // Create a message listener container for the given JmsListenerEndpoint.\n\tvoid setApplicationContext(org.springframework.context.ApplicationContext applicationContext);\n\tvoid start();\n\tvoid stop();\n\tvoid stop(Runnable callback);\n}"}
{"index": 3085, "repo": "tink-1.10.0", "des": "StreamSegmentEncrypter is a helper class that encrypts individual segments of a stream.", "code": "Interface StreamSegmentEncrypter {\n\tvoid encryptSegment(ByteBuffer plaintext, boolean isLastSegment, ByteBuffer ciphertext); // Encrypts the next plaintext segment.\n\tvoid encryptSegment(ByteBuffer part1, ByteBuffer part2, boolean isLastSegment, ByteBuffer ciphertext); // Encrypt a segment consisting of two parts.\n\tByteBuffer getHeader(); // Returns the header of the ciphertext stream.\n}"}
{"index": 13431, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Details required to establish a connection to a RabbitMQ service.", "code": "public interface RabbitConnectionDetails extends ConnectionDetails {\n\tList<RabbitConnectionDetails.Address> getAddresses(); // List of addresses to which the client should connect.\n\tdefault RabbitConnectionDetails.Address getFirstAddress(); // Returns the first address.\n\tdefault String getPassword(); // Login to authenticate against the broker.\n\tdefault String getUsername(); // Login user to authenticate to the broker.\n\tdefault String getVirtualHost(); // Virtual host to use when connecting to the broker.\n}"}
{"index": 15801, "repo": "camel-api-4.0.0-RC1", "des": "Represents the history of a Camel Message how it was routed by the Camel routing engine.", "code": "public interface MessageHistory {\n\tlong getElapsed(); // Gets the elapsed time in millis processing the node took (this is 0 until the node processing is done)\n\tMessage getMessage(); // A read-only copy of the message at the point of this history (if this has been enabled).\n\tNamedNode getNode(); // Gets the node at the point of this history.\n\tString getRouteId(); // Gets the route id at the point of this history.\n\tlong getTime(); // Gets the timestamp at the point of this history.\n\tvoid nodeProcessingDone(); // Used for signalling that processing of the node is done.\n}"}
{"index": 4487, "repo": "beam-sdks-java-core-2.49.0", "des": "Properties pertaining to this release of Apache Beam.", "code": "Class ReleaseInfo {\n\tjava.lang.String getDefaultDockerRepoPrefix(); // Provides docker image default repo prefix (beam_).\n\tjava.lang.String getDefaultDockerRepoRoot(); // Provides docker image default root (apache).\n\tjava.lang.String getName(); // Provides the SDK name.\n\tabstract java.util.Map<java.lang.String,java.lang.String> getProperties(); // Returns an immutable map of all properties pertaining to this release.\n\tstatic ReleaseInfo getReleaseInfo(); // Returns an instance of ReleaseInfo.\n\tjava.lang.String getSdkVersion(); // Provides the SDK version.\n\tjava.lang.String getVersion(); // Provides the BEAM version e.g.\n\tboolean isDevSdkVersion(); // Returns true if SDK version is a dev version (e.g.\n}"}
{"index": 9005, "repo": "hbase-server-3.0.0-alpha-4", "des": "Scanner scans both the memstore and the MOB Store.", "code": "Class MobStoreScanner {\n\tvoid close(); // Close the KeyValue scanner.\n\tboolean next(List<Cell> outResult, ScannerContext ctx); // Firstly reads the cells from the HBase.\n\tvoid shipped(); // Called after a batch of rows scanned and set to be returned to client.\n}"}
{"index": 2138, "repo": "hive-exec-4.0.0-alpha-2", "des": "Takes a row of size k of data and splits it into n rows of data.", "code": "Class GenericUDTFStack {\n\tvoid close(); // Called to notify the UDTF that there are no more rows to process.\n\tStructObjectInspector initialize(ObjectInspector[] args); // Initialize this GenericUDTF.\n\tvoid process(Object[] args); // Give a set of arguments for the UDTF to process.\n}"}
{"index": 3134, "repo": "solr-dataimporthandler-8.11.2", "des": "Formats values using a given date format.", "code": "Class DateFormatEvaluator {\n\tString evaluate(String expression, Context context); // Return a String after processing an expression and a VariableResolver\n\tprotected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz); // NOTE: declared as a method to allow for extensibility\n\tprotected Date evaluateWrapper(Evaluator.VariableWrapper variableWrapper, Locale locale, TimeZone tz); // NOTE: declared as a method to allow for extensibility\n\tprotected Object resolveWrapper(Evaluator.VariableWrapper variableWrapper, Locale locale, TimeZone tz); // NOTE: declared as a method to allow for extensibility\n}"}
{"index": 11435, "repo": "spring-context-6.0.11", "des": "Simple cache manager working against a given collection of caches.", "code": "public class SimpleCacheManager extends AbstractCacheManager {\n\tprotected Collection<? extends Cache> loadCaches(); // Load the initial caches for this cache manager.\n\tvoid setCaches(Collection<? extends Cache> caches); // Specify the collection of Cache instances to use for this CacheManager.\n}"}
{"index": 9244, "repo": "hadoop-yarn-server-nodemanager-3.3.6", "des": "Encapsulates the recovery info needed to recover a DeletionTask from the NM state store.", "code": "Class DeletionTaskRecoveryInfo {\n\tlong getDeletionTimestamp(); // Return the deletion timestamp.\n\tList<Integer> getSuccessorTaskIds(); // Return all of the dependent DeletionTasks.\n\tDeletionTask getTask(); // Return the recovered DeletionTask.\n}"}
{"index": 17384, "repo": "groovy-4.0.13", "des": "Generates 'Proxy' objects which implement interfaces, maps of closures and/or extend classes/delegates.", "code": "public class ProxyGenerator extends Object {\n\tboolean getDebug();\n\tboolean getEmptyMethods();\n\tClassLoader getOverride();\n\tGroovyObject instantiateAggregate(List<Class> interfaces);\n\tGroovyObject instantiateAggregate(Map closureMap, List<Class> interfaces);\n\tGroovyObject instantiateAggregate(Map closureMap, List<Class> interfaces, Class clazz);\n\tGroovyObject instantiateAggregate(Map closureMap, List<Class> interfaces, Class clazz, Object[] constructorArgs);\n\tGroovyObject instantiateAggregateFromBaseClass(Closure cl, Class clazz);\n\tGroovyObject instantiateAggregateFromBaseClass(Class clazz);\n\tGroovyObject instantiateAggregateFromBaseClass(Class clazz, Object[] constructorArgs);\n\tGroovyObject instantiateAggregateFromBaseClass(Map map, Class clazz);\n\tGroovyObject instantiateAggregateFromBaseClass(Map map, Class clazz, Object[] constructorArgs);\n\tGroovyObject instantiateAggregateFromInterface(Class clazz);\n\tGroovyObject instantiateAggregateFromInterface(Map map, Class clazz);\n\tGroovyObject instantiateDelegate(Object delegate);\n\tGroovyObject instantiateDelegate(List<Class> interfaces, Object delegate);\n\tGroovyObject instantiateDelegate(Map closureMap, List<Class> interfaces, Object delegate);\n\tGroovyObject instantiateDelegateWithBaseClass(Map closureMap, List<Class> interfaces, Object delegate);\n\tGroovyObject instantiateDelegateWithBaseClass(Map closureMap, List<Class> interfaces, Object delegate, Class baseClass);\n\tGroovyObject instantiateDelegateWithBaseClass(Map closureMap, List<Class> interfaces, Object delegate, Class baseClass, String name); // Creates a proxy with a delegate object.\n\tvoid setDebug(boolean debug); // Instructs ProxyGenerator to dump generated Groovy source code to standard output during construction.\n\tvoid setEmptyMethods(boolean emptyMethods); // Changes generated methods to have empty implementations.\n\tvoid setOverride(ClassLoader override);\n}"}
{"index": 4922, "repo": "hadoop-common-3.3.4", "des": "A Writable for 2D arrays containing a matrix of instances of a class.", "code": "Class TwoDArrayWritable {\n\tWritable[][] get();\n\tvoid readFields(DataInput in); // Deserialize the fields of this object from in.\n\tvoid set(Writable[][] values);\n\tObject toArray();\n\tvoid write(DataOutput out); // Serialize the fields of this object to out.\n}"}
{"index": 16802, "repo": "spring-expression-6.0.11", "des": "Input provided to an expression parser that can influence an expression parsing/compilation routine.", "code": "public interface ParserContext {\n\tString getExpressionPrefix(); // For template expressions, returns the prefix that identifies the start of an expression block within a string.\n\tString getExpressionSuffix(); // For template expressions, return the prefix that identifies the end of an expression block within a string.\n\tboolean isTemplate(); // Whether the expression being parsed is a template.\n}"}
{"index": 12106, "repo": "jena-core-4.9.0", "des": "IRIx implementation for the jena-iri provider.", "code": "public static class IRIProviderJenaIRI.IRIxJena extends IRIx {\n\tboolean equals(Object obj);\n\tIRI getImpl(); // Return the implementation object of the provider.\n\tvoid handleViolations(BiConsumer<Boolean,String> handler); // Handle violations by sending a boolean, indicating whether this is an error (true) or a warning (false), and string message to a handler.\n\tboolean hasScheme(String scheme); // Test whether the IRI has the given scheme name.\n\tboolean hasViolations(); // Does this IRIx have any warnings and errors that are not syntax errors, for example, from URI scheme checks.\n\tboolean isAbsolute(); // An absolute URI is one with a URI scheme and without a fragment.\n\tboolean isReference(); // An RDF Reference is an URI which has scheme.\n\tboolean isRelative(); // A relative URI is one without a scheme, and maybe without some of the other parts.\n\tIRIx normalize(); // Syntax-based Normalization Normalize an IRIx.\n\tIRIx relativize(IRIx other); // Return (if possible), an IRI that is relative to the base argument.\n\tIRIx resolve(String other); // Try to resolve a string against this IRI as base.\n\tIRIx resolve(IRIx other); // Try to resolve a string against this IRI as base.\n}"}
{"index": 7377, "repo": "mahout-math-0.13.0", "des": "The Hebbian solver is an iterative, sparse, singular value decomposition solver, based on the paper Generalized Hebbian Algorithm for Latent Semantic Analysis (2005) by Genevieve Gorrell and Brandyn Webb (a.", "code": "Class HebbianSolver {\n\tprotected boolean hasNotConverged(Vector currentPseudoEigen, Matrix corpus, TrainingState state); // Uses the SingularVectorVerifier to check for convergence\n\tstatic void main(String[] args);\n\tTrainingState solve(Matrix corpus, int desiredRank); // Primary singular vector solving method.\n\tprotected EigenStatus verify(Matrix corpus, Vector currentPseudoEigen);\n}"}
{"index": 9428, "repo": "hadoop-yarn-api-3.3.6", "des": "The class that hosts a list of timeline entities.", "code": "Class TimelineEntities {\n\tvoid addEntities(List<TimelineEntity> entities); // All a list of entities into the existing entity list\n\tvoid addEntity(TimelineEntity entity); // Add a single entity into the existing entity list\n\tList<TimelineEntity> getEntities(); // Get a list of entities\n\tvoid setEntities(List<TimelineEntity> entities); // Set the entity list to the given list of entities\n}"}
{"index": 8963, "repo": "hbase-server-3.0.0-alpha-4", "des": "A way to write \"inline\" blocks into an HFile.", "code": "Interface InlineBlockWriter {\n\tvoid blockWritten(long offset, int onDiskSize, int uncompressedSize); // Called after a block has been written, and its offset, raw size, and compressed size have been determined.\n\tboolean getCacheOnWrite(); // Returns true if inline blocks produced by this writer should be cached\n\tBlockType getInlineBlockType(); // The type of blocks this block writer produces.\n\tboolean shouldWriteBlock(boolean closing); // Determines whether there is a new block to be written out.\n\tvoid writeInlineBlock(DataOutput out); // Writes the block to the provided stream.\n}"}
{"index": 1187, "repo": "ignite-core-2.15.0", "des": "Represents a definition of a sorted index.", "code": "Interface SortedIndexDefinition {\n\tboolean affinity(); // Whether this index is affinity key index or not.\n\tGridCacheContextInfo<?,?> cacheInfo(); // Cache info.\n\tIndexRowCache idxRowCache(); // Cache of index rows.\n\tint inlineSize(); // Inline size.\n\tIndexKeyTypeSettings keyTypeSettings(); // Index key type settings.\n\tboolean primary(); // Whether this index is primary key (unique) or not.\n\tIndexRowComparator rowComparator(); // Comparator for comparing index rows.\n\tInlineIndexRowHandlerFactory rowHandlerFactory(); // Index row handler.\n\tint segments(); // Amount of index tree segments.\n\tString treeName(); // Represents an index tree name.\n\tGridQueryTypeDescriptor typeDescriptor(); // Type descriptor.\n}"}
{"index": 12376, "repo": "spring-integration-mqtt-6.1.2", "des": "A client manager implementation for MQTT v5 protocol.", "code": "public class Mqttv5ClientManager extends AbstractMqttClientManager<org.eclipse.paho.mqttv5.client.IMqttAsyncClient,org.eclipse.paho.mqttv5.client.MqttConnectionOptions> implements org.eclipse.paho.mqttv5.client.MqttCallback {\n\tvoid authPacketArrived(int reasonCode, org.eclipse.paho.mqttv5.common.packet.MqttProperties properties);\n\tvoid connectComplete(boolean reconnect, String serverURI);\n\tvoid deliveryComplete(org.eclipse.paho.mqttv5.client.IMqttToken token);\n\tvoid disconnected(org.eclipse.paho.mqttv5.client.MqttDisconnectResponse disconnectResponse);\n\torg.eclipse.paho.mqttv5.client.MqttConnectionOptions getConnectionInfo(); // Return information about the connection.\n\tvoid messageArrived(String topic, org.eclipse.paho.mqttv5.common.MqttMessage message);\n\tvoid mqttErrorOccurred(org.eclipse.paho.mqttv5.common.MqttException exception);\n\tvoid setPersistence(org.eclipse.paho.mqttv5.client.MqttClientPersistence persistence); // Set the MqttClientPersistence for a client.\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 1235, "repo": "ignite-core-2.15.0", "des": "Inverse connection response message sent by client node as a response to inverse connection request received by discovery.", "code": "Class TcpInverseConnectionResponseMessage {\n\tint connectionIndex();\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 11034, "repo": "spring-shell-core-3.1.2", "des": "Default implementation of a CommandCatalog.", "code": "public static class CommandCatalog.DefaultCommandCatalog extends Object implements CommandCatalog {\n\tMap<String,CommandRegistration> getRegistrations(); // Gets all CommandRegistrations mapped with their names.\n\tvoid register(CommandRegistration... registration); // Register a CommandRegistration.\n\tvoid unregister(String... commandName); // Unregister a CommandRegistration by its command name.\n\tvoid unregister(CommandRegistration... registration); // Unregister a CommandRegistration.\n}"}
{"index": 7555, "repo": "cassandra-all-4.1.2", "des": "Common superclass for indexes that capture collection keys, including indexes on such keys themselves.", "code": "Class CollectionKeyIndexBase {\n\t<T> CBuilder buildIndexClusteringPrefix(java.nio.ByteBuffer partitionKey, ClusteringPrefix<T> prefix, CellPath path); // Used to construct an the clustering for an entry in the index table based on values from the base data.\n\tIndexEntry decodeEntry(DecoratedKey indexedValue, Row indexEntry); // Used at search time to convert a row in the index table into a simple struct containing the values required to retrieve the corresponding row from the base table.\n}"}
{"index": 11591, "repo": "spring-security-oauth2-client-6.1.2", "des": "A factory that provides a JwtDecoder used for OidcIdToken signature verification.", "code": "public final class OidcIdTokenDecoderFactory extends Object implements org.springframework.security.oauth2.jwt.JwtDecoderFactory<ClientRegistration> {\n\torg.springframework.security.oauth2.jwt.JwtDecoder createDecoder(ClientRegistration clientRegistration);\n\tstatic Map<String,org.springframework.core.convert.converter.Converter<Object,?>> createDefaultClaimTypeConverters(); // Returns the default Converter's used for type conversion of claim values for an OidcIdToken.\n\tvoid setClaimTypeConverterFactory(Function<ClientRegistration,org.springframework.core.convert.converter.Converter<Map<String,Object>,Map<String,Object>>> claimTypeConverterFactory); // Sets the factory that provides a Converter used for type conversion of claim values for an OidcIdToken.\n\tvoid setJwsAlgorithmResolver(Function<ClientRegistration,org.springframework.security.oauth2.jose.jws.JwsAlgorithm> jwsAlgorithmResolver); // Sets the resolver that provides the expected JWS algorithm used for the signature or MAC on the ID Token.\n\tvoid setJwtValidatorFactory(Function<ClientRegistration,org.springframework.security.oauth2.core.OAuth2TokenValidator<org.springframework.security.oauth2.jwt.Jwt>> jwtValidatorFactory); // Sets the factory that provides an OAuth2TokenValidator, which is used by the JwtDecoder.\n}"}
{"index": 3276, "repo": "hbase-common-3.0.0-alpha-4", "des": "A byte of 8-bits using a fixed-length encoding.", "code": "Class OrderedInt8 {\n\tByte decode(PositionedByteRange src); // Read an instance of T from the buffer src.\n\tbyte decodeByte(PositionedByteRange src); // Read a byte value from the buffer src.\n\tint encode(PositionedByteRange dst, Byte val); // Write instance val into buffer dst.\n\tint encodeByte(PositionedByteRange dst, byte val); // Write instance val into buffer dst.\n\tClass<Byte> encodedClass(); // Inform consumers over what type this DataType operates.\n\tint encodedLength(Byte val); // Inform consumers how long the encoded byte[] will be.\n\tboolean isNullable(); // Indicates whether this instance supports encoding null values.\n}"}
{"index": 7869, "repo": "cassandra-all-4.1.2", "des": "A guardrail that warns about some specific values, warns about but ignores some other values, and/or rejects the use of some other values.", "code": "Class Values<T> {\n\tvoid guard(java.util.Set<T> values, ClientState state); // Triggers a warning for each of the provided values that is discouraged by this guardrail.\n\tvoid guard(java.util.Set<T> values, java.util.function.Consumer<T> ignoreAction, ClientState state); // Triggers a warning for each of the provided values that is discouraged by this guardrail.\n}"}
{"index": 7654, "repo": "cassandra-all-4.1.2", "des": "Used to differentiate between type of index transaction when obtaining a handler from Index implementations.", "code": "Enum IndexTransaction.Type {\n\tstatic IndexTransaction.Type valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic IndexTransaction.Type[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13935, "repo": "spring-webflux-6.0.11", "des": "An extension of RequestMappingInfoHandlerMapping that creates RequestMappingInfo instances from class-level and method-level @RequestMapping annotations.", "code": "public class RequestMappingHandlerMapping extends RequestMappingInfoHandlerMapping implements org.springframework.context.EmbeddedValueResolverAware {\n\tvoid afterPropertiesSet(); // Detects handler methods at initialization.\n\tprotected RequestMappingInfo createRequestMappingInfo(org.springframework.web.bind.annotation.RequestMapping requestMapping, RequestCondition<?> customCondition); // Create a RequestMappingInfo from the supplied @RequestMapping annotation, which is either a directly declared annotation, a meta-annotation, or the synthesized result of merging annotation attributes within an annotation hierarchy.\n\tRequestedContentTypeResolver getContentTypeResolver(); // Return the configured RequestedContentTypeResolver.\n\tprotected RequestCondition<?> getCustomMethodCondition(Method method); // Provide a custom method-level request condition.\n\tprotected RequestCondition<?> getCustomTypeCondition(Class<?> handlerType); // Provide a custom type-level request condition.\n\tprotected RequestMappingInfo getMappingForMethod(Method method, Class<?> handlerType); // Uses method and type-level @RequestMapping annotations to create the RequestMappingInfo.\n\tMap<String,Predicate<Class<?>>> getPathPrefixes(); // The configured path prefixes as a read-only, possibly empty map.\n\tprotected org.springframework.web.cors.CorsConfiguration initCorsConfiguration(Object handler, Method method, RequestMappingInfo mappingInfo); // Extract and return the CORS configuration for the mapping.\n\tprotected boolean isHandler(Class<?> beanType); // Whether the given type is a handler with handler methods.\n\tprotected void registerHandlerMethod(Object handler, Method method, RequestMappingInfo mapping); // Register a handler method and its unique mapping.\n\tvoid registerMapping(RequestMappingInfo mapping, Object handler, Method method); // Register the given mapping.\n\tprotected String[] resolveEmbeddedValuesInPatterns(String[] patterns); // Resolve placeholder values in the given array of patterns.\n\tvoid setContentTypeResolver(RequestedContentTypeResolver contentTypeResolver); // Set the RequestedContentTypeResolver to use to determine requested media types.\n\tvoid setEmbeddedValueResolver(org.springframework.util.StringValueResolver resolver);\n\tvoid setPathPrefixes(Map<String,Predicate<Class<?>>> prefixes); // Configure path prefixes to apply to controller methods.\n}"}
{"index": 10614, "repo": "groovy-all-4.0.13", "des": "Dynamic groovy proxy for another object.", "code": "public class Proxy extends GroovyObjectSupport {\n\tObject getAdaptee();\n\tObject invokeMethod(String name, Object args); // Invokes the given method.\n\tIterator iterator();\n\tvoid setAdaptee(Object adaptee);\n\tProxy wrap(Object adaptee); // This method is for convenience.\n}"}
{"index": 5447, "repo": "druid-processing-26.0.0", "des": "StagedSerde is useful when you have objects that have their own internal logic to serialize, but you wish to compose the results of multiple serialized objects into a single ByteBuffer (or wrapped byte[]).", "code": "Interface StagedSerde<T> {\n\tdefault T deserialize(byte[] bytes);\n\tT deserialize(ByteBuffer byteBuffer);\n\tdefault byte[] serialize(T value); // Default implementation for when a byte[] is desired.\n\tStorableBuffer serializeDelayed(T value); // Useful method when some computation is necessary to prepare for serialization without actually writing out all the bytes in order to determine the serialized size.\n}"}
{"index": 11679, "repo": "spring-websocket-6.0.11", "des": "A TransportHandler based on XHR (long) polling.", "code": "public class XhrPollingTransportHandler extends AbstractHttpSendingTransportHandler {\n\tboolean checkSessionType(SockJsSession session); // Check whether the type of the given session matches the transport type of this TransportHandler where session id and the transport type are extracted from the SockJS URL.\n\tPollingSockJsSession createSession(String sessionId, WebSocketHandler handler, Map<String,Object> attributes); // Create a new SockJS session.\n\tprotected org.springframework.http.MediaType getContentType();\n\tprotected SockJsFrameFormat getFrameFormat(org.springframework.http.server.ServerHttpRequest request);\n\tTransportType getTransportType(); // Return the transport type supported by this handler.\n}"}
{"index": 12485, "repo": "spring-jdbc-6.0.11", "des": "Abstract DataSource implementation that routes AbstractRoutingDataSource.getConnection() calls to one of various target DataSources based on a lookup key.", "code": "public abstract class AbstractRoutingDataSource extends AbstractDataSource implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected abstract Object determineCurrentLookupKey(); // Determine the current lookup key.\n\tprotected DataSource determineTargetDataSource(); // Retrieve the current target DataSource.\n\tConnection getConnection();\n\tConnection getConnection(String username, String password);\n\tMap<Object,DataSource> getResolvedDataSources(); // Return the resolved target DataSources that this router manages.\n\tDataSource getResolvedDefaultDataSource(); // Return the resolved default target DataSource, if any.\n\tboolean isWrapperFor(Class<?> iface);\n\tprotected DataSource resolveSpecifiedDataSource(Object dataSourceObject); // Resolve the specified data source object into a DataSource instance.\n\tprotected Object resolveSpecifiedLookupKey(Object lookupKey); // Resolve the given lookup key object, as specified in the targetDataSources map, into the actual lookup key to be used for matching with the current lookup key.\n\tvoid setDataSourceLookup(DataSourceLookup dataSourceLookup); // Set the DataSourceLookup implementation to use for resolving data source name Strings in the targetDataSources map.\n\tvoid setDefaultTargetDataSource(Object defaultTargetDataSource); // Specify the default target DataSource, if any.\n\tvoid setLenientFallback(boolean lenientFallback); // Specify whether to apply a lenient fallback to the default DataSource if no specific DataSource could be found for the current lookup key.\n\tvoid setTargetDataSources(Map<Object,Object> targetDataSources); // Specify the map of target DataSources, with the lookup key as key.\n\t<T> T unwrap(Class<T> iface);\n}"}
{"index": 767, "repo": "ignite-core-2.15.0", "des": "Future that implements a barrier after which dht topology is safe to use.", "code": "Interface GridDhtTopologyFuture {\n\tboolean changedAffinity();\n\tboolean exchangeDone(); // Ready affinity future (GridCachePartitionExchangeManager.affinityReadyFuture(AffinityTopologyVersion) is completed before GridFutureAdapter.onDone(Object, Throwable) is called on GridDhtPartitionsExchangeFuture, it is guaranteed that this method will return true if affinity ready future is finished.\n\tAffinityTopologyVersion initialVersion(); // Returns topology version when exchange started.\n\tAffinityTopologyVersion topologyVersion(); // Gets result topology version of this future.\n\t@Nullable CacheInvalidStateException validateCache(GridCacheContext cctx, boolean recovery, boolean read, @Nullable Object key, @Nullable Collection<?> keys); // Returns error is cache topology is not valid.\n}"}
{"index": 15719, "repo": "camel-api-4.0.0-RC1", "des": "The cache fill policy can be used to determine how this cache should be filled with data.", "code": "public static enum Cacheable.FillPolicy extends Enum<Cacheable.FillPolicy> {\n\tstatic Cacheable.FillPolicy valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Cacheable.FillPolicy[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 15582, "repo": "spring-security-core-6.1.2", "des": "A base ReactiveAuthenticationManager that allows subclasses to override and work with UserDetails objects.", "code": "public abstract class AbstractUserDetailsReactiveAuthenticationManager extends Object implements ReactiveAuthenticationManager, org.springframework.context.MessageSourceAware {\n\treactor.core.publisher.Mono<Authentication> authenticate(Authentication authentication); // Attempts to authenticate the provided Authentication\n\tprotected abstract reactor.core.publisher.Mono<UserDetails> retrieveUser(String username); // Allows subclasses to retrieve the UserDetails from an implementation-specific location.\n\tvoid setMessageSource(org.springframework.context.MessageSource messageSource);\n\tvoid setPasswordEncoder(org.springframework.security.crypto.password.PasswordEncoder passwordEncoder); // The PasswordEncoder that is used for validating the password.\n\tvoid setPostAuthenticationChecks(UserDetailsChecker postAuthenticationChecks); // Sets the strategy which will be used to validate the loaded UserDetails object after authentication occurs.\n\tvoid setScheduler(reactor.core.scheduler.Scheduler scheduler); // Sets the Scheduler used by the UserDetailsRepositoryReactiveAuthenticationManager.\n\tvoid setUserDetailsPasswordService(ReactiveUserDetailsPasswordService userDetailsPasswordService); // Sets the service to use for upgrading passwords on successful authentication.\n}"}
{"index": 14529, "repo": "spring-security-web-6.1.2", "des": "Represents a Header to be added to the HttpServletResponse", "code": "public final class Header extends Object {\n\tboolean equals(Object obj);\n\tString getName(); // Gets the name of the header.\n\tList<String> getValues(); // Gets the values of the header.\n}"}
{"index": 6520, "repo": "exoplayer-core-2.9.6", "des": "A Chunk that uses an Extractor to decode initialization data for single track.", "code": "Class InitializationChunk {\n\tvoid cancelLoad(); // Cancels the load.\n\tvoid load(); // Performs the load, returning on completion or cancellation.\n}"}
{"index": 7269, "repo": "calcite-core-1.34.0", "des": "A sql type name specification of row type.", "code": "Class SqlRowTypeNameSpec {\n\tRelDataType deriveType(SqlValidator sqlValidator); // Derive type from this SqlTypeNameSpec.\n\tboolean equalsDeep(SqlTypeNameSpec node, Litmus litmus); // Returns whether this spec is structurally equivalent to another spec.\n\tint getArity();\n\tList<SqlIdentifier> getFieldNames();\n\tList<SqlDataTypeSpec> getFieldTypes();\n\tvoid unparse(SqlWriter writer, int leftPrec, int rightPrec); // Writes a SQL representation of this spec to a writer.\n}"}
{"index": 11181, "repo": "wicket-extensions-10.0.0-M1", "des": "An inplace editor much like AjaxEditableLabel, but now with support for multi line content and a text area as its editor.", "code": "public class AjaxEditableMultiLineLabel<T> extends AjaxEditableLabel<T> {\n\tprotected String defaultNullLabel(); // Override this to display a different value when the model object is null.\n\tfinal int getCols(); // Gets text area's number of columns.\n\tprotected String getLabelAjaxEvent(); // By default this returns \"click\", users can overwrite this on which event the label behavior should be triggered\n\tfinal int getRows(); // Gets text area's number of rows.\n\tprotected org.apache.wicket.markup.html.form.FormComponent<T> newEditor(org.apache.wicket.MarkupContainer parent, String componentId, org.apache.wicket.model.IModel<T> model); // Create a new form component instance to serve as editor.\n\tprotected org.apache.wicket.markup.html.basic.MultiLineLabel newLabel(org.apache.wicket.MarkupContainer parent, String componentId, org.apache.wicket.model.IModel<T> model); // Create a new form component instance to serve as label.\n\tprotected void onModelChanged(); // Dummy override to fix WICKET-1239\n\tprotected void onModelChanging(); // Dummy override to fix WICKET-1239\n\tfinal void setCols(int cols); // Sets text area's number of columns.\n\tfinal void setRows(int rows); // Sets text area's number of rows.\n}"}
{"index": 11018, "repo": "spring-data-redis-3.1.2", "des": "Helper class featuring methods for calculating Redis timeouts", "code": "public abstract class TimeoutUtils extends Object {\n\tstatic boolean hasMillis(Duration duration); // Check if a given Duration can be represented in sec or requires msec representation.\n\tstatic double toDoubleSeconds(long timeout, TimeUnit unit); // Converts the given timeout to seconds with a fraction of seconds.\n\tstatic long toMillis(long timeout, TimeUnit unit); // Converts the given timeout to milliseconds.\n\tstatic long toSeconds(long timeout, TimeUnit unit); // Converts the given timeout to seconds.\n\tstatic long toSeconds(Duration duration); // Converts the given timeout to seconds.\n}"}
{"index": 10752, "repo": "spring-tx-6.0.11", "des": "Proxy factory bean for simplified declarative transaction handling.", "code": "public class TransactionProxyFactoryBean extends org.springframework.aop.framework.AbstractSingletonProxyFactoryBean implements org.springframework.beans.factory.BeanFactoryAware {\n\tprotected Object createMainInterceptor(); // Creates an advisor for this FactoryBean's TransactionInterceptor.\n\tprotected void postProcessProxyFactory(org.springframework.aop.framework.ProxyFactory proxyFactory); // As of 4.2, this method adds TransactionalProxy to the set of proxy interfaces in order to avoid re-processing of transaction metadata.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory); // This callback is optional: If running in a BeanFactory and no transaction manager has been set explicitly, a single matching bean of type PlatformTransactionManager will be fetched from the BeanFactory.\n\tvoid setPointcut(org.springframework.aop.Pointcut pointcut); // Set a pointcut, i.e a bean that can cause conditional invocation of the TransactionInterceptor depending on method and attributes passed.\n\tvoid setTransactionAttributes(Properties transactionAttributes); // Set properties with method names as keys and transaction attribute descriptors (parsed via TransactionAttributeEditor) as values: e.g.\n\tvoid setTransactionAttributeSource(TransactionAttributeSource transactionAttributeSource); // Set the transaction attribute source which is used to find transaction attributes.\n\tvoid setTransactionManager(PlatformTransactionManager transactionManager); // Set the default transaction manager.\n}"}
{"index": 3532, "repo": "mahout-mr-0.13.0", "des": "Online passive aggressive learner that tries to minimize the label ranking hinge loss.", "code": "Class PassiveAggressive {\n\tVector classify(Vector instance); // Compute and return a vector containing n-1 scores, where n is equal to numCategories(), given an input vector instance.\n\tVector classifyNoLink(Vector instance); // Compute and return a vector of scores before applying the inverse link function.\n\tdouble classifyScalar(Vector instance); // Classifies a vector in the special case of a binary classifier where AbstractVectorClassifier.classify(Vector) would return a vector with only one element.\n\tvoid close(); // Prepares the classifier for classification and deallocates any temporary data structures.\n\tPassiveAggressive copy();\n\tvoid copyFrom(PassiveAggressive other);\n\tPassiveAggressive learningRate(double learningRate); // Chainable configuration option.\n\tint numCategories(); // Returns the number of categories that a target variable can be assigned to.\n\tint numFeatures();\n\tvoid readFields(DataInput in);\n\tvoid train(int actual, Vector instance); // Updates the model using a particular target variable value and a feature vector.\n\tvoid train(long trackingKey, int actual, Vector instance); // Updates the model using a particular target variable value and a feature vector.\n\tvoid train(long trackingKey, String groupKey, int actual, Vector instance); // Updates the model using a particular target variable value and a feature vector.\n\tvoid write(DataOutput out);\n}"}
{"index": 2023, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template Decimal64ScalarArithmeticDecimal64Column.", "code": "Class Decimal64ScalarMultiplyDecimal64Column {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean shouldConvertDecimal64ToDecimal(); // By default vector expressions do not handle decimal64 types and should be converted into Decimal types if its output cannot handle Decimal64.\n\tString vectorExpressionParameters();\n}"}
{"index": 18561, "repo": "hibernate-core-5.6.15.Final", "des": "Java class for embeddable-attributes complex type.", "code": "Class JaxbEmbeddableAttributes {\n\tjava.util.List<JaxbBasic> getBasic(); // Gets the value of the basic property.\n\tjava.util.List<JaxbElementCollection> getElementCollection(); // Gets the value of the elementCollection property.\n\tjava.util.List<JaxbEmbedded> getEmbedded(); // Gets the value of the embedded property.\n\tjava.util.List<JaxbManyToMany> getManyToMany(); // Gets the value of the manyToMany property.\n\tjava.util.List<JaxbManyToOne> getManyToOne(); // Gets the value of the manyToOne property.\n\tjava.util.List<JaxbOneToMany> getOneToMany(); // Gets the value of the oneToMany property.\n\tjava.util.List<JaxbOneToOne> getOneToOne(); // Gets the value of the oneToOne property.\n\tjava.util.List<JaxbTransient> getTransient(); // Gets the value of the transient property.\n}"}
{"index": 17128, "repo": "spring-integration-core-6.1.2", "des": "Utility methods to support annotation processing.", "code": "public final class MessagingAnnotationUtils extends Object {\n\tstatic String endpointIdValue(Method method); // Return the EndpointId.value() property, if present.\n\tstatic String endpointIdValue(org.springframework.core.annotation.MergedAnnotations mergedAnnotations); // Return the EndpointId.value() property, if present.\n\tstatic Method findAnnotatedMethod(Object target, Class<? extends Annotation> annotationType);\n\tstatic Annotation findMessagePartAnnotation(Annotation[] annotations, boolean payloads); // Find the one of Payload, Header or Headers annotation from the provided annotations array.\n\tstatic List<Annotation> getAnnotationChain(Annotation messagingAnnotation, Class<? extends Annotation> annotationType); // Get a chain of its meta-annotations for the provided instance and expected type.\n\tstatic boolean hasValue(Object annotationValue); // Determine if the value of a named attribute from an annotation instance contains an actual value.\n\tstatic <T> T resolveAttribute(List<Annotation> annotations, String name, Class<T> requiredType); // Get the attribute value from the annotation hierarchy, returning the first non-empty) value closest to the annotated method.\n}"}
{"index": 719, "repo": "ignite-core-2.15.0", "des": "Cache entry along with version information.", "code": "Interface GridCacheVersionedEntry<K,V> {\n\tbyte dataCenterId(); // Gets ID of initiator data center.\n\tlong expireTime(); // Gets entry's expire time.\n\tK key(); // Gets entry's key.\n\tlong order(); // Gets entry's order in initiator data center.\n\tint topologyVersion(); // Gets entry's topology version in initiator data center.\n\tlong ttl(); // Gets entry's TTL.\n\tV value(CacheObjectValueContext ctx); // Gets entry's value.\n}"}
{"index": 10724, "repo": "spring-tx-6.0.11", "des": "FactoryBean that bootstraps the specified JCA 1.7 ResourceAdapter, starting it with a local BootstrapContext and exposing it for bean references.", "code": "public class ResourceAdapterFactoryBean extends Object implements org.springframework.beans.factory.FactoryBean<ResourceAdapter>, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean {\n\tvoid afterPropertiesSet(); // Builds the BootstrapContext and starts the ResourceAdapter with it.\n\tvoid destroy(); // Stops the ResourceAdapter.\n\tResourceAdapter getObject();\n\tClass<? extends ResourceAdapter> getObjectType();\n\tboolean isSingleton();\n\tvoid setBootstrapContext(BootstrapContext bootstrapContext); // Specify the JCA BootstrapContext to use for starting the ResourceAdapter.\n\tvoid setResourceAdapter(ResourceAdapter resourceAdapter); // Specify the target JCA ResourceAdapter, passed in as configured instance which hasn't been started yet.\n\tvoid setResourceAdapterClass(Class<? extends ResourceAdapter> resourceAdapterClass); // Specify the target JCA ResourceAdapter as class, to be instantiated with its default configuration.\n\tvoid setWorkManager(WorkManager workManager); // Specify the JCA WorkManager to use for bootstrapping the ResourceAdapter.\n\tvoid setXaTerminator(XATerminator xaTerminator); // Specify the JCA XATerminator to use for bootstrapping the ResourceAdapter.\n}"}
{"index": 7165, "repo": "calcite-core-1.34.0", "des": "Implementation of SqlCall that keeps its operands in an array.", "code": "Class SqlBasicCall {\n\tSqlNode clone(SqlParserPos pos); // Clones a SqlNode with a different position.\n\t@Nullable SqlLiteral getFunctionQuantifier();\n\tSqlKind getKind(); // Returns the type of node this is, or SqlKind.OTHER if it's nothing special.\n\tList<SqlNode> getOperandList(); // Returns the list of operands.\n\tSqlOperator getOperator();\n\t<S extends SqlNode>S operand(int i); // Returns i-th operand (0-based).\n\tint operandCount();\n\tvoid setOperand(int i, @Nullable SqlNode operand); // Changes the value of an operand.\n\tvoid setOperator(SqlOperator operator); // Sets the operator (or function) that is being called.\n\tSqlCall withExpanded(boolean expanded); // Sets whether this call is expanded.\n}"}
{"index": 8248, "repo": "spring-ws-3.0.10.RELEASE", "des": "Implementation of the MonitoringStrategy interface that uses a simple polling mechanism.", "code": "Class PollingMonitoringStrategy {\n\tprotected void afterSleep(javax.mail.Folder folder); // Invoked after the Thread.sleep(long) method has been invoked.\n\tvoid setPollingInterval(long pollingInterval); // Sets the interval used in between message polls, in milliseconds.\n\tprotected void waitForNewMessages(javax.mail.Folder folder); // Template method that blocks until new messages arrive in the given folder.\n}"}
{"index": 8922, "repo": "hbase-server-3.0.0-alpha-4", "des": "General interface for cleaning files from a folder (generally an archive or backup folder).", "code": "Interface FileCleanerDelegate {\n\tIterable<org.apache.hadoop.fs.FileStatus> getDeletableFiles(Iterable<org.apache.hadoop.fs.FileStatus> files); // Determines which of the given files are safe to delete\n\tvoid init(Map<String,Object> params); // this method is used to pass some instance into subclass\n\tdefault boolean isEmptyDirDeletable(org.apache.hadoop.fs.Path dir); // Check if a empty directory with no subdirs or subfiles can be deleted\n\tdefault void postClean(); // Will be called after cleaner run.\n\tdefault void preClean(); // Used to do some initialize work before every period clean\n}"}
{"index": 5641, "repo": "org.apache.karaf.main-2.4.4", "des": "A resource is the representation of a uniquely identified and typed data.", "code": "Interface Resource {\n\tboolean equals(Object obj); // Compares this Resource to another Resource.\n\tList<Capability> getCapabilities(String namespace); // Returns the capabilities declared by this resource.\n\tList<Requirement> getRequirements(String namespace); // Returns the requirements declared by this bundle resource.\n}"}
{"index": 2721, "repo": "commons-dbcp2-2.9.0", "des": "A DelegatingCallableStatement that cooperates with PoolingConnection to implement a pool of CallableStatements.", "code": "Class PoolableCallableStatement {\n\tvoid activate(); // Activates after retrieval from the pool.\n\tvoid close(); // Returns the CallableStatement to the pool.\n\tvoid passivate(); // Passivates to prepare for return to the pool.\n}"}
{"index": 13581, "repo": "spring-messaging-6.0.11", "des": "MessageCondition for SImple Messaging Protocols.", "code": "public class SimpMessageMappingInfo extends Object implements MessageCondition<SimpMessageMappingInfo> {\n\tSimpMessageMappingInfo combine(SimpMessageMappingInfo other); // Define the rules for combining this condition with another.\n\tint compareTo(SimpMessageMappingInfo other, Message<?> message); // Compare this condition to another in the context of a specific message.\n\tboolean equals(Object obj);\n\tDestinationPatternsMessageCondition getDestinationConditions();\n\tSimpMessageMappingInfo getMatchingCondition(Message<?> message); // Check if this condition matches the given Message and returns a potentially new condition with content tailored to the current message.\n\tSimpMessageTypeMessageCondition getMessageTypeMessageCondition();\n}"}
{"index": 14898, "repo": "spring-data-keyvalue-3.1.2", "des": "KeyValueEvent after inserting an object by with a given key.", "code": "public static class KeyValueEvent.AfterInsertEvent<T> extends KeyValueEvent<T> {\n\tObject getKey();\n\tT getPayload(); // Get the value of the element the KeyValueEvent refers to.\n\tObject getSource();\n\tClass<? extends T> getType(); // Get the type of the element the KeyValueEvent refers to.\n}"}
{"index": 10469, "repo": "groovy-all-4.0.13", "des": "A closure signature hint class is always used in conjunction with the ClosureParams annotation.", "code": "public abstract class ClosureSignatureHint extends Object {\n\tprotected ClassNode findClassNode(SourceUnit sourceUnit, CompilationUnit compilationUnit, String className); // Produces a ClassNode given a string representing the type.\n\tabstract List<ClassNode[]> getClosureSignatures(MethodNode node, SourceUnit sourceUnit, CompilationUnit compilationUnit, String[] options, ASTNode usage); // Subclasses should implement this method, which returns the list of accepted closure signatures.\n\tstatic ClassNode pickGenericType(ClassNode type, int gtIndex); // A helper method which will extract the n-th generic type from a class node.\n\tstatic ClassNode pickGenericType(MethodNode node, int parameterIndex, int gtIndex); // A helper method which will extract the n-th generic type from the n-th parameter of a method node.\n}"}
{"index": 11351, "repo": "spring-context-6.0.11", "des": "Sub-interface of MessageSource to be implemented by objects that can resolve messages hierarchically.", "code": "public interface HierarchicalMessageSource extends MessageSource {\n\tMessageSource getParentMessageSource(); // Return the parent of this MessageSource, or null if none.\n\tvoid setParentMessageSource(MessageSource parent); // Set the parent that will be used to try to resolve messages that this object can't resolve.\n}"}
{"index": 6699, "repo": "lucene-analyzers-common-8.11.2", "des": "Simple ResourceLoader that opens resource files from the local file system, optionally resolving against a base directory.", "code": "Class FilesystemResourceLoader {\n\t<T> Class<? extends T> findClass(String cname, Class<T> expectedType); // Finds class of the name and expected type\n\t<T> T newInstance(String cname, Class<T> expectedType); // Creates an instance of the name and expected type\n\tInputStream openResource(String resource); // Opens a named resource\n}"}
{"index": 11226, "repo": "wicket-extensions-10.0.0-M1", "des": "Convenience implementation of a data provider that can also act as a locator for a SingleSortState object.", "code": "public abstract class SortableDataProvider<T,S> extends Object implements ISortableDataProvider<T,S> {\n\tSortParam<S> getSort(); // Returns current sort state\n\tfinal ISortState<S> getSortState();\n\tvoid setSort(SortParam<S> param); // Sets the current sort state\n\tvoid setSort(S property, SortOrder order); // Sets the current sort state\n}"}
{"index": 1713, "repo": "samza-api-1.8.0", "des": "Helper class for remote table to throttle table IO requests with the configured rate limiter.", "code": "Class TableRateLimiter<K,V> {\n\tvoid setTimerMetric(Timer timer); // Set up waitTimeMetric metric for latency reporting due to throttling.\n\tvoid throttle(java.util.Collection<K> keys, java.lang.Object... args); // Throttle a request with a collection of keys as the argument if necessary.\n\tvoid throttle(int opId, java.lang.Object... args); // Throttle a request with opId and associated arguments\n\tvoid throttle(K key, java.lang.Object... args); // Throttle a request with a key argument if necessary.\n\tvoid throttle(K key, V value, java.lang.Object... args); // Throttle a request with both the key and value arguments if necessary.\n\tvoid throttleRecords(java.util.Collection<Entry<K,V>> records, java.lang.Object... args); // Throttle a request with a collection of table records as the argument if necessary.\n}"}
{"index": 1293, "repo": "ignite-core-2.15.0", "des": "VisorFindAndDeleteGarbageInPersistenceTask arguments.", "code": "Class VisorFindAndDeleteGarbageInPersistenceTaskArg {\n\tboolean deleteFoundGarbage();\n\tSet<String> getGrpNames();\n\tSet<UUID> getNodes();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 13983, "repo": "spring-webflux-6.0.11", "des": "Contract to render HandlerResult to the HTTP response.", "code": "public interface View {\n\tdefault List<org.springframework.http.MediaType> getSupportedMediaTypes(); // Return the list of media types this View supports, or an empty list.\n\tdefault boolean isRedirectView(); // Whether this View does render by performing a redirect.\n\treactor.core.publisher.Mono<Void> render(Map<String,?> model, org.springframework.http.MediaType contentType, org.springframework.web.server.ServerWebExchange exchange); // Render the view based on the given HandlerResult.\n}"}
{"index": 14028, "repo": "spring-retry-2.0.2", "des": "A Classifier for a parameterised object type based on a map.", "code": "public class SubclassClassifier<T,C> extends Object implements Classifier<T,C> {\n\tvoid add(Class<? extends T> type, C target); // The keys is the type and this will be mapped along with all subclasses to the corresponding value.\n\tC classify(T classifiable); // Return the value from the type map whose key is the class of the given Throwable, or its nearest ancestor if a subclass.\n\tprotected Map<Class<? extends T>,C> getClassified();\n\tfinal C getDefault(); // Return the default value supplied in the constructor (default false).\n\tvoid setDefaultValue(C defaultValue); // Public setter for the default value for mapping keys that are not found in the map (or their subclasses).\n\tvoid setTypeMap(Map<Class<? extends T>,C> map); // Set the classifications up as a map.\n}"}
{"index": 15962, "repo": "wicket-util-10.0.0-M1", "des": "This class is used to wrap a stream that includes an encoded ByteOrderMark as its first bytes.", "code": "public class BOMInputStream extends ProxyInputStream {\n\tByteOrderMark getBOM(); // Return the BOM (Byte Order Mark).\n\tString getBOMCharsetName(); // Return the BOM charset Name - ByteOrderMark.getCharsetName().\n\tboolean hasBOM(); // Indicates whether the stream contains one of the specified BOMs.\n\tboolean hasBOM(ByteOrderMark bom); // Indicates whether the stream contains the specified BOM.\n\tvoid mark(int readlimit); // Invokes the delegate's mark(int) method.\n\tint read(); // Invokes the delegate's read() method, detecting and optionally skipping BOM.\n\tint read(byte[] buf); // Invokes the delegate's read(byte[]) method, detecting and optionally skipping BOM.\n\tint read(byte[] buf, int off, int len); // Invokes the delegate's read(byte[], int, int) method, detecting and optionally skipping BOM.\n\tvoid reset(); // Invokes the delegate's reset() method.\n\tlong skip(long n); // Invokes the delegate's skip(long) method, detecting and optionallyskipping BOM.\n}"}
{"index": 2734, "repo": "hbase-mapreduce-3.0.0-alpha-4", "des": "This implementation creates tags by expanding expression using label ordinal.", "code": "Class DefaultVisibilityExpressionResolver {\n\tList<Tag> createVisibilityExpTags(String visExpression); // Convert visibility expression into tags to be serialized.\n\torg.apache.hadoop.conf.Configuration getConf();\n\tvoid init(); // Giving a chance for the initialization.\n\tvoid setConf(org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 15108, "repo": "spring-vault-core-3.0.4", "des": "Default implementation of VaultTokenOperations.", "code": "public class VaultTokenTemplate extends Object implements VaultTokenOperations {\n\tVaultTokenResponse create(); // Create a new token.\n\tVaultTokenResponse create(VaultTokenRequest request); // Create a new token for the given VaultTokenRequest.\n\tVaultTokenResponse createOrphan(); // Create a new orphan token.\n\tVaultTokenResponse createOrphan(VaultTokenRequest request); // Create a new orphan token for the given VaultTokenRequest.\n\tVaultTokenResponse renew(VaultToken vaultToken); // Renew a VaultToken.\n\tvoid revoke(VaultToken vaultToken); // Revoke a VaultToken.\n\tvoid revokeOrphan(VaultToken vaultToken); // Revoke a VaultToken but not its child tokens.\n}"}
{"index": 163, "repo": "commons-collections4-4.4", "des": "Adapter to make an Iterator instance appear to be an Enumeration instance.", "code": "Class IteratorEnumeration<E> {\n\tIterator<? extends E> getIterator(); // Returns the underlying iterator.\n\tboolean hasMoreElements(); // Returns true if the underlying iterator has more elements.\n\tE nextElement(); // Returns the next element from the underlying iterator.\n\tvoid setIterator(Iterator<? extends E> iterator); // Sets the underlying iterator.\n}"}
{"index": 7629, "repo": "cassandra-all-4.1.2", "des": "A fake type that is only used for parsing type strings that include frozen types.", "code": "Class FrozenType {\n\tTerm fromJSONObject(java.lang.Object parsed); // Given a parsed JSON string, return a byte representation of the object.\n\tjava.nio.ByteBuffer fromString(java.lang.String source); // get a byte representation of the given string.\n\tstatic AbstractType<?> getInstance(TypeParser parser);\n\tTypeSerializer<java.lang.Void> getSerializer();\n\t<V> java.lang.String getString(V value, ValueAccessor<V> accessor); // get a string representation of the bytes used for various identifier (NOT just for log messages)\n\tjava.lang.String toJSONString(java.nio.ByteBuffer buffer, ProtocolVersion protocolVersion); // Converts the specified value into its JSON representation.\n}"}
{"index": 17653, "repo": "spring-web-6.0.11", "des": "An alternative to AbstractListenerWriteProcessor but instead writing a Publisher<Publisher<T>> with flush boundaries enforces after the completion of each nested Publisher.", "code": "public abstract class AbstractListenerWriteFlushProcessor<T> extends Object implements Processor<Publisher<? extends T>,Void> {\n\tprotected void cancel(); // Cancel the upstream chain of \"write\" Publishers only, for example due to Servlet container error/completion notifications.\n\tprotected abstract Processor<? super T,Void> createWriteProcessor(); // Create a new processor for the current flush boundary.\n\tprotected abstract void flush(); // Flush the output if ready, or otherwise isFlushPending() should return true after.\n\tprotected void flushingFailed(Throwable t); // Invoked when an error happens while flushing.\n\tString getLogPrefix(); // Create an instance with the given log prefix.\n\tprotected abstract boolean isFlushPending(); // Whether flushing is pending.\n\tprotected abstract boolean isWritePossible(); // Whether writing/flushing is possible.\n\tfinal void onComplete(); // Completion signal from the upstream, write Publisher.\n\tfinal void onError(Throwable ex); // Error signal from the upstream, write Publisher.\n\tprotected final void onFlushPossible(); // Invoked when flushing is possible, either in the same thread after a check via isWritePossible(), or as a callback from the underlying container.\n\tfinal void onNext(Publisher<? extends T> publisher);\n\tfinal void onSubscribe(Subscription subscription);\n\tfinal void subscribe(Subscriber<? super Void> subscriber);\n}"}
{"index": 13441, "repo": "spring-boot-autoconfigure-3.1.1", "des": "SpringBootCondition used to check if a resource can be found using a configurable property and optional default location(s).", "code": "public abstract class ResourceCondition extends SpringBootCondition {\n\tConditionOutcome getMatchOutcome(org.springframework.context.annotation.ConditionContext context, org.springframework.core.type.AnnotatedTypeMetadata metadata); // Determine the outcome of the match along with suitable log output.\n\tprotected ConditionOutcome getResourceOutcome(org.springframework.context.annotation.ConditionContext context, org.springframework.core.type.AnnotatedTypeMetadata metadata); // Check if one of the default resource locations actually exists.\n\tprotected final ConditionMessage.Builder startConditionMessage();\n}"}
{"index": 1444, "repo": "pdfbox-3.0.0-beta1", "des": "This represents an object that can be used in a Field's Opt entry to represent an available option and a default appearance string.", "code": "Class FDFOptionElement {\n\tCOSArray getCOSArray(); // Convert this standard java object to a COS object.\n\tCOSBase getCOSObject(); // Convert this standard java object to a COS object.\n\tString getDefaultAppearanceString(); // This will get the string of default appearance string.\n\tString getOption(); // This will get the string of one of the available options.\n\tvoid setDefaultAppearanceString(String da); // This will set the default appearance string.\n\tvoid setOption(String opt); // This will set the string for an available option.\n}"}
{"index": 15057, "repo": "spring-vault-core-3.0.4", "des": "Empty listener adapter implementing LeaseListener and LeaseErrorListener.", "code": "public abstract class LeaseListenerAdapter extends Object implements LeaseListener, LeaseErrorListener {\n\tvoid onLeaseError(SecretLeaseEvent leaseEvent, Exception exception); // Callback for a SecretLeaseEvent.\n\tvoid onLeaseEvent(SecretLeaseEvent leaseEvent); // Callback for a SecretLeaseEvent\n}"}
{"index": 2494, "repo": "exoplayer-r2.3.1", "des": "Estimates bandwidth by listening to data transfers.", "code": "Class DefaultBandwidthMeter {\n\tlong getBitrateEstimate(); // Returns the estimated bandwidth in bits/sec, or BandwidthMeter.NO_ESTIMATE if an estimate is not available.\n\tvoid onBytesTransferred(java.lang.Object source, int bytes); // Called incrementally during a transfer.\n\tvoid onTransferEnd(java.lang.Object source); // Called when a transfer ends.\n\tvoid onTransferStart(java.lang.Object source, DataSpec dataSpec); // Called when a transfer starts.\n}"}
{"index": 15016, "repo": "spring-vault-core-3.0.4", "des": "Base class for Spring Vault configuration using JavaConfig for a reactive infrastructure.", "code": "@Configuration(proxyBeanMethods=false) public abstract class AbstractReactiveVaultConfiguration extends AbstractVaultConfiguration {\n\tprotected ClientHttpConnector clientHttpConnector(); // Create a ClientHttpConnector configured with ClientOptions and SslConfiguration.\n\tprotected WebClientFactory getWebClientFactory(); // Return the WebClientFactory.\n\tReactiveSessionManager reactiveSessionManager(); // Construct a ReactiveSessionManager using vaultTokenSupplier().\n\tReactiveVaultEndpointProvider reactiveVaultEndpointProvider();\n\tReactiveVaultTemplate reactiveVaultTemplate(); // Create a ReactiveVaultTemplate.\n\tSessionManager sessionManager(); // Construct a session manager adapter wrapping reactiveSessionManager() and exposing imperative SessionManager on top of a reactive API.\n\tprotected VaultTokenSupplier vaultTokenSupplier(); // Construct a VaultTokenSupplier using AbstractVaultConfiguration.clientAuthentication().\n\tprotected WebClientBuilder webClientBuilder(ReactiveVaultEndpointProvider endpointProvider, ClientHttpConnector httpConnector); // Create a WebClientBuilder initialized with VaultEndpointProvider and ClientHttpConnector.\n\tprotected WebClientBuilder webClientBuilder(VaultEndpointProvider endpointProvider, ClientHttpConnector httpConnector); // Create a WebClientBuilder initialized with VaultEndpointProvider and ClientHttpConnector.\n\tWebClientFactory webClientFactory(); // Create a WebClientFactory bean that is used to produce a WebClient.\n}"}
{"index": 1059, "repo": "ignite-core-2.15.0", "des": "Noop and null-safe implementation of SpiSpecificSpan.", "code": "Class NoopSpiSpecificSpan {\n\tNoopSpiSpecificSpan addLog(String logDesc); // Logs work to span.\n\tNoopSpiSpecificSpan addTag(String tagName, String tagVal); // Adds tag to span with String value.\n\tNoopSpiSpecificSpan end(); // Ends span.\n\tboolean isEnded();\n\tNoopSpiSpecificSpan setStatus(SpanStatus spanStatus); // Explicitly set status for span.\n}"}
{"index": 4452, "repo": "beam-sdks-java-core-2.49.0", "des": "A WindowFn that places each value into exactly one window based on its timestamp and never merges windows.", "code": "Class PartitioningWindowFn<T,W extends BoundedWindow> {\n\tboolean assignsToOneWindow(); // Returns true if this WindowFn always assigns an element to exactly one window.\n\tabstract W assignWindow(org.joda.time.Instant timestamp); // Returns the single window to which elements with this timestamp belong.\n\tjava.util.Collection<W> assignWindows(WindowFn.AssignContext c); // Given a timestamp and element, returns the set of windows into which it should be placed.\n\tWindowMappingFn<W> getDefaultWindowMappingFn(); // Returns the default WindowMappingFn to use to map main input windows to side input windows.\n}"}
{"index": 4125, "repo": "camel-core-3.0.0-RC1", "des": "Scans for Java RouteBuilder classes in java packages.", "code": "Class PackageScanDefinition {\n\tprotected void clear();\n\tList<String> getExcludes();\n\tList<String> getIncludes();\n\tList<String> getPackages();\n\tvoid setExcludes(List<String> excludes); // Exclude finding route builder from these java package names.\n\tvoid setIncludes(List<String> includes); // Include finding route builder from these java package names.\n\tvoid setPackages(List<String> packages); // Sets the java package names to use for scanning for route builder classes\n}"}
{"index": 12393, "repo": "spring-data-couchbase-5.1.2", "des": "Represents an entity that can be persisted which contains 0 or more properties.", "code": "public interface CouchbasePersistentEntity<T> extends PersistentEntity<T,CouchbasePersistentProperty> {\n\tcom.couchbase.client.core.msg.kv.DurabilityLevel getDurabilityLevel(); // Returns the durability level of the entity.\n\tint getExpiry(); // Deprecated.\n\tDuration getExpiryDuration(); // Returns the expiration time of the entity.\n\tCouchbasePersistentProperty getTextScoreProperty();\n\tboolean hasTextScoreProperty();\n\tboolean isTouchOnRead(); // Flag for using getAndTouch operations for reads, resetting the expiration (if one was set) when the entity is directly read (eg. findOne, findById).\n}"}
{"index": 8547, "repo": "commons-io-2.13.0", "des": "A FileFilter providing conditional OR logic across a list of file filters.", "code": "Class OrFileFilter {\n\tboolean accept(File file); // Checks to see if the File should be accepted by this filter.\n\tboolean accept(File file, String name); // Checks to see if the File should be accepted by this filter.\n\tFileVisitResult accept(Path file, BasicFileAttributes attributes); // Checks to see if the Path should be accepted by this filter.\n\tvoid addFileFilter(IOFileFilter... fileFilters); // Adds the given file filters.\n\tvoid addFileFilter(IOFileFilter fileFilter); // Adds the specified file filter to the list of file filters at the end of the list.\n\tList<IOFileFilter> getFileFilters(); // Gets this conditional file filter's list of file filters.\n\tboolean removeFileFilter(IOFileFilter fileFilter); // Removes the specified file filter.\n\tvoid setFileFilters(List<IOFileFilter> fileFilters); // Sets the list of file filters, replacing any previously configured file filters on this filter.\n}"}
{"index": 8258, "repo": "spring-ws-3.0.10.RELEASE", "des": "SAAJ-specific implementation of the WebServiceMessageFactory.", "code": "Class SaajSoapMessageFactory {\n\tvoid afterPropertiesSet();\n\tSaajSoapMessage createWebServiceMessage(); // Creates a new, empty SoapMessage.\n\tSaajSoapMessage createWebServiceMessage(InputStream inputStream); // Reads a SoapMessage from the given input stream.\n\tMessageFactory getMessageFactory(); // Returns the SAAJ MessageFactory used.\n\tprotected void postProcess(SOAPMessage soapMessage); // Template method that allows for post-processing of the given SOAPMessage.\n\tvoid setLangAttributeOnSoap11FaultString(boolean langAttributeOnSoap11FaultString); // Defines whether a xml:lang attribute should be set on SOAP 1.1 <faultstring> elements.\n\tvoid setMessageFactory(MessageFactory messageFactory); // Sets the SAAJ MessageFactory.\n\tvoid setMessageProperties(Map<String,?> messageProperties); // Sets the SAAJ message properties.\n\tvoid setSoapVersion(SoapVersion version); // Sets the SOAP Version used by this factory.\n}"}
{"index": 18338, "repo": "opencms-core-15.0", "des": "Holds both a bean containing edit handler dialog options and a resource info bean for a selected resource.", "code": "Class CmsDialogOptionsAndInfo {\n\tCmsListInfoBean getInfo(); // Gets the list info bean for the selected resource.\n\tCmsDialogOptions getOptions(); // Gets the dialog option bean.\n}"}
{"index": 3943, "repo": "hudi-client-0.6.0", "des": "Operates on marker files for a given write action (commit, delta commit, compaction).", "code": "Class MarkerFiles {\n\tList<String> allMarkerFilePaths();\n\torg.apache.hadoop.fs.Path create(String partitionPath, String dataFileName, IOType type); // The marker path will be /.hoodie/.temp//2019/04/25/filename.marker.writeIOType.\n\tSet<String> createdAndMergedDataPaths(org.apache.spark.api.java.JavaSparkContext jsc, int parallelism);\n\tboolean deleteMarkerDir(org.apache.spark.api.java.JavaSparkContext jsc, int parallelism); // Delete Marker directory corresponding to an instant.\n\tboolean doesMarkerDirExist();\n\tvoid quietDeleteMarkerDir(org.apache.spark.api.java.JavaSparkContext jsc, int parallelism);\n\tstatic String stripMarkerSuffix(String path);\n}"}
{"index": 11702, "repo": "spring-cloud-commons-3.1.7", "des": "A DiscoveryClient that will use the properties file as a source of service instances.", "code": "public class SimpleDiscoveryClient extends Object implements DiscoveryClient {\n\tString description(); // A human-readable description of the implementation, used in HealthIndicator.\n\tList<ServiceInstance> getInstances(String serviceId); // Gets all ServiceInstances associated with a particular serviceId.\n\tint getOrder(); // Default implementation for getting order of discovery clients.\n\tList<String> getServices();\n}"}
{"index": 830, "repo": "ignite-core-2.15.0", "des": "Convenient predicate subclass that allows for thrown grid exception.", "code": "Class GridPredicate3X<E1,E2,E3> {\n\tboolean apply(E1 e1, E2 e2, E3 e3); // Predicate body.\n\tabstract boolean applyx(E1 e1, E2 e2, E3 e3); // Predicate body that can throw IgniteCheckedException.\n}"}
{"index": 14173, "repo": "wicket-core-10.0.0-M1", "des": "Represents content disposition of a resource", "code": "public enum ContentDisposition extends Enum<ContentDisposition> {\n\tstatic ContentDisposition valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic ContentDisposition[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8318, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents a point-to-point connection that a client can use for sending WebServiceMessage objects directly to a remote party.", "code": "Interface WebServiceConnection {\n\tvoid close(); // Closes this connection.\n\tString getErrorMessage(); // Returns the error message.\n\tURI getUri(); // Returns the URI for this connection.\n\tboolean hasError(); // Indicates whether this connection has an error.\n\tWebServiceMessage receive(WebServiceMessageFactory messageFactory); // Receives a message using the given WebServiceMessageFactory.\n\tvoid send(WebServiceMessage message); // Sends the given message using this connection.\n}"}
{"index": 4731, "repo": "hadoop-common-3.3.4", "des": "Class representing a configured access control list.", "code": "Class AccessControlList {\n\tvoid addGroup(String group); // Add group to the names of groups allowed for this service.\n\tvoid addUser(String user); // Add user to the names of users allowed for this service.\n\tString getAclString(); // Returns the access control list as a String that can be used for building a new instance by sending it to the constructor of AccessControlList.\n\tCollection<String> getGroups(); // Get the names of user groups allowed for this service.\n\tCollection<String> getUsers(); // Get the names of users allowed for this service.\n\tboolean isAllAllowed();\n\tboolean isUserAllowed(UserGroupInformation ugi);\n\tboolean isUserInList(UserGroupInformation ugi); // Checks if a user represented by the provided UserGroupInformation is a member of the Access Control List.\n\tvoid readFields(DataInput in); // Deserializes the AccessControlList object\n\tvoid removeGroup(String group); // Remove group from the names of groups allowed for this service.\n\tvoid removeUser(String user); // Remove user from the names of users allowed for this service.\n\tvoid write(DataOutput out); // Serializes the AccessControlList object\n}"}
{"index": 4949, "repo": "commons-collections-3.2.2", "des": "Provides a base decorator that enables additional functionality to be added to a SortedBidiMap via decoration.", "code": "Class AbstractSortedBidiMapDecorator {\n\tComparator comparator();\n\tprotected SortedBidiMap getSortedBidiMap(); // Gets the map being decorated.\n\tSortedMap headMap(Object toKey);\n\tSortedBidiMap inverseSortedBidiMap(); // Gets a view of this map where the keys and values are reversed.\n\tSortedMap subMap(Object fromKey, Object toKey);\n\tSortedMap tailMap(Object fromKey);\n}"}
{"index": 14009, "repo": "spring-retry-2.0.2", "des": "Simple retry policy that is aware only about attempt count and retries a fixed number of times.", "code": "public class MaxAttemptsRetryPolicy extends Object implements RetryPolicy {\n\tboolean canRetry(RetryContext context); // Test for retryable operation based on the status.\n\tvoid close(RetryContext status);\n\tint getMaxAttempts(); // The maximum number of attempts before failure.\n\tRetryContext open(RetryContext parent); // Get a status object that can be used to track the current operation according to this policy.\n\tvoid registerThrowable(RetryContext context, Throwable throwable); // Update the status with another attempted retry and the latest exception.\n\tvoid setMaxAttempts(int maxAttempts); // Set the number of attempts before retries are exhausted.\n}"}
{"index": 13037, "repo": "spring-aop-6.0.11", "des": "Interface to be implemented by types that can supply the information needed to sort advice/advisors by AspectJ's precedence rules.", "code": "public interface AspectJPrecedenceInformation extends org.springframework.core.Ordered {\n\tString getAspectName(); // Return the name of the aspect (bean) in which the advice was declared.\n\tint getDeclarationOrder(); // Return the declaration order of the advice member within the aspect.\n\tboolean isAfterAdvice(); // Return whether this is an after advice.\n\tboolean isBeforeAdvice(); // Return whether this is a before advice.\n}"}
{"index": 17091, "repo": "spring-integration-core-6.1.2", "des": "Key names for message handler observations.", "code": "public static enum IntegrationObservation.GatewayTags extends Enum<IntegrationObservation.GatewayTags> implements io.micrometer.common.docs.KeyName {\n\tstatic IntegrationObservation.GatewayTags valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic IntegrationObservation.GatewayTags[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7167, "repo": "calcite-core-1.34.0", "des": "Basic implementation of SqlVisitor which does nothing at each node.", "code": "Class SqlBasicVisitor<R> {\n\tR visit(SqlCall call); // Visits a call to a SqlOperator.\n\tR visit(SqlDataTypeSpec type); // Visits a datatype specification.\n\tR visit(SqlDynamicParam param); // Visits a dynamic parameter.\n\tR visit(SqlIdentifier id); // Visits an identifier.\n\tR visit(SqlIntervalQualifier intervalQualifier); // Visits an interval qualifier.\n\tR visit(SqlLiteral literal); // Visits a literal.\n\tR visit(SqlNodeList nodeList); // Visits a list of SqlNode objects.\n}"}
{"index": 1299, "repo": "ignite-core-2.15.0", "des": "Arguments for task VisorQueryCancelOnInitiatorTask.", "code": "Class VisorQueryCancelOnInitiatorTaskArg {\n\tUUID getNodeId();\n\tlong getQueryId();\n\tprotected void readExternalData(byte protoVer, ObjectInput in); // Load object's specific data content.\n\tprotected void writeExternalData(ObjectOutput out); // Save object's specific data content.\n}"}
{"index": 4200, "repo": "jackson-core-2.15.2", "des": "This class is a kind of specialized type-safe Map, from char array to String value.", "code": "Class CharsToNameCanonicalizer {\n\tint _hashToIndex(int rawHash); // Helper method that takes in a \"raw\" hash value, shuffles it as necessary, and truncates to be used as the index.\n\tprotected void _reportTooManyCollisions(int maxLen);\n\tint bucketCount(); // Method for checking number of primary hash buckets this symbol table uses.\n\tint calcHash(char[] buffer, int start, int len); // Implementation of a hashing method for variable length Strings.\n\tint calcHash(String key);\n\tint collisionCount(); // Method mostly needed by unit tests; calculates number of entries that are in collision list.\n\tstatic CharsToNameCanonicalizer createRoot(); // Method called to create root canonicalizer for a JsonFactory instance.\n\tprotected static CharsToNameCanonicalizer createRoot(int seed);\n\tString findSymbol(char[] buffer, int start, int len, int h);\n\tint hashSeed();\n\tCharsToNameCanonicalizer makeChild(int flags); // \"Factory\" method; will create a new child instance of this symbol table.\n\tint maxCollisionLength(); // Method mostly needed by unit tests; calculates length of the longest collision chain.\n\tboolean maybeDirty();\n\tvoid release(); // Method called by the using code to indicate it is done with this instance.\n\tint size();\n\tprotected void verifyInternalConsistency(); // Diagnostics method that will verify that internal data structures are consistent; not meant as user-facing method but only for test suites and possible troubleshooting.\n}"}
{"index": 4187, "repo": "commons-geometry-spherical-1.0", "des": "This class represents a point on the 1-sphere, or in other words, an azimuth angle on a circle.", "code": "Class Point1S {\n\tPoint1S above(double base); // Return an equivalent point with an azimuth value at or above the given base value in radians.\n\tPoint1S above(Point1S base); // Return an equivalent point with an azimuth value at or above the given base.\n\tPoint1S antipodal(); // Get the point exactly opposite this point on the circle, pi distance away.\n\tdouble distance(Point1S point);\n\tstatic double distance(Point1S p1, Point1S p2); // Compute the shortest distance (angular separation) between two points.\n\tboolean eq(Point1S other, Precision.DoubleEquivalence precision); // Return true if this instance is equivalent to the argument.\n\tboolean equals(Object other); // Test for the exact equality of two points on the 1-sphere.\n\tstatic Point1S from(PolarCoordinates polar); // Create a new point instance containing an azimuth value equal to that of the given set of polar coordinates.\n\tstatic Point1S from(Vector2D vector); // Create a new point instance from the given Euclidean 2D vector.\n\tdouble getAzimuth(); // Get the azimuth angle in radians.\n\tint getDimension();\n\tdouble getNormalizedAzimuth(); // Get the azimuth angle normalized to the range [0, 2pi).\n\tVector2D getVector(); // Get the normalized vector corresponding to this azimuth angle in 2D Euclidean space.\n\tboolean isFinite();\n\tboolean isInfinite();\n\tboolean isNaN();\n\tstatic Point1S of(org.apache.commons.numbers.angle.Angle azimuth); // Create a new point instance from the given azimuth angle.\n\tstatic Point1S of(double azimuth); // Create a new point instance from the given azimuth angle.\n\tstatic Point1S parse(String str); // Parse the given string and returns a new point instance.\n\tdouble signedDistance(Point1S point); // Return the signed distance (angular separation) between this instance and the given point in the range [-pi, pi).\n\tstatic double signedDistance(Point1S p1, Point1S p2); // Compute the signed shortest distance (angular separation) between two points.\n}"}
{"index": 13964, "repo": "spring-webflux-6.0.11", "des": "Defines the context used during the ServerResponse.writeTo(ServerWebExchange, Context).", "code": "public static interface ServerResponse.Context {\n\tList<org.springframework.http.codec.HttpMessageWriter<?>> messageWriters(); // Return the HttpMessageWriters to be used for response body conversion.\n\tList<ViewResolver> viewResolvers(); // Return the ViewResolvers to be used for view name resolution.\n}"}
{"index": 17795, "repo": "spring-web-6.0.11", "des": "ClientHttpConnector for the Jetty Reactive Streams HttpClient.", "code": "public class JettyClientHttpConnector extends Object implements ClientHttpConnector {\n\treactor.core.publisher.Mono<ClientHttpResponse> connect(HttpMethod method, URI uri, Function<? super ClientHttpRequest,reactor.core.publisher.Mono<Void>> requestCallback); // Connect to the origin server using the given HttpMethod and URI and apply the given requestCallback when the HTTP request of the underlying API can be initialized and written to.\n\tvoid setBufferFactory(org.springframework.core.io.buffer.DataBufferFactory bufferFactory); // Set the buffer factory to use.\n}"}
{"index": 18797, "repo": "lucene-core-9.7.0", "des": "A FilterScorer contains another Scorer, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.", "code": "Class FilterScorer {\n\tint docID(); // Returns the doc ID that is currently being scored.\n\tDocIdSetIterator iterator(); // Return a DocIdSetIterator over matching documents.\n\tfloat score(); // Returns the score of the current document matching the query.\n\tTwoPhaseIterator twoPhaseIterator(); // Optional method: Return a TwoPhaseIterator view of this Scorer.\n\tScorer unwrap(); // Unwraps this instance\n}"}
{"index": 14314, "repo": "wicket-core-10.0.0-M1", "des": "Decorates a TextTemplate with JavaScript tags.", "code": "public final class JavaScriptTemplate extends TextTemplateDecorator {\n\tString getAfterTemplateContents(); // Retrieves the String to put after the actual template contents, for example:\n\tString getBeforeTemplateContents(); // Retrieves the String to put before the actual template contents, for example:\n\tString getString(); // Retrieves the String resource.\n\tTextTemplate interpolate(Map<String,?> variables); // This class decorates another TextTemplate class and so does not allow interpolation.\n}"}
{"index": 5652, "repo": "org.apache.karaf.main-2.4.4", "des": "A SignedContentEntry represents a content entry which may be signed.", "code": "Interface SignedContentEntry {\n\tString getName(); // Returns the name of the entry.\n\tSignerInfo[] getSignerInfos(); // Returns the signer infos for this SignedContentEntry.\n\tboolean isSigned(); // Returns true if the entry is signed; false otherwise.\n\tvoid verify(); // Verifies the content of this this entry is valid.\n}"}
{"index": 1943, "repo": "nifi-framework-api-1.22.0", "des": "Represents an authorization request for a given user/entity performing an action against a resource within some userContext.", "code": "Class AuthorizationRequest {\n\tRequestAction getAction(); // The action being taken against the Resource.\n\tSupplier<String> getExplanationSupplier(); // A supplier for the explanation if access is denied.\n\tSet<String> getGroups(); // The groups the user making this request belongs to.\n\tString getIdentity(); // The identity accessing the Resource.\n\tResource getRequestedResource(); // The original Resource being requested.\n\tResource getResource(); // The Resource being authorized.\n\tMap<String,String> getResourceContext(); // The event attributes to make additional access decisions for provenance events.\n\tMap<String,String> getUserContext(); // The userContext of the user request to make additional access decisions.\n\tboolean isAccessAttempt(); // Whether this is a direct access attempt of the Resource if if it's being checked as part of another response.\n\tboolean isAnonymous(); // Whether the entity accessing is anonymous.\n}"}
{"index": 10924, "repo": "spring-data-redis-3.1.2", "des": "Value Object summarizing pending messages in a consumer group.", "code": "public class PendingMessagesSummary extends Object {\n\tString getGroupName();\n\tRange<String> getIdRange(); // Get the range between the smallest and greatest ID among the pending messages.\n\tMap<String,Long> getPendingMessagesPerConsumer(); // Obtain a map of every consumer in the consumer group with at least one pending message, and the number of pending messages.\n\tlong getTotalPendingMessages(); // Get the number of total pending messages within the consumer group.\n\tString maxMessageId(); // Get the greatest ID as String among the pending messages.\n\tRecordId maxRecordId(); // Get the greatest ID among the pending messages.\n\tString minMessageId(); // Get the smallest ID as String among the pending messages.\n\tRecordId minRecordId(); // Get the smallest ID among the pending messages.\n}"}
{"index": 4339, "repo": "beam-sdks-java-core-2.49.0", "des": "A Coder for Deque, using the format of IterableLikeCoder.", "code": "Class DequeCoder<T> {\n\tboolean consistentWithEquals(); // Returns true if this Coder is injective with respect to Object.equals(java.lang.Object).\n\tprotected java.util.Deque<T> decodeToIterable(java.util.List<T> decodedElements); // Builds an instance of IterableT, this coder's associated Iterable-like subtype, from a list of decoded elements.\n\tTypeDescriptor<java.util.Deque<T>> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tstatic <T> DequeCoder<T> of(Coder<T> elemCoder);\n\tjava.lang.Object structuralValue(java.util.Deque<T> values); // Returns an object with an Object.equals() method that represents structural equality on the argument.\n\tvoid verifyDeterministic(); // Deque sizes are always known, so DequeIterable may be deterministic while the general IterableLikeCoder is not.\n}"}
{"index": 14940, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A JDBC implementation of an OAuth2AuthorizationService that uses a JdbcOperations for OAuth2Authorization persistence.", "code": "public class JdbcOAuth2AuthorizationService extends Object implements OAuth2AuthorizationService {\n\tOAuth2Authorization findById(String id); // Returns the OAuth2Authorization identified by the provided id, or null if not found.\n\tOAuth2Authorization findByToken(String token, OAuth2TokenType tokenType); // Returns the OAuth2Authorization containing the provided token, or null if not found.\n\tprotected final Function<OAuth2Authorization,List<org.springframework.jdbc.core.SqlParameterValue>> getAuthorizationParametersMapper();\n\tprotected final org.springframework.jdbc.core.RowMapper<OAuth2Authorization> getAuthorizationRowMapper();\n\tprotected final org.springframework.jdbc.core.JdbcOperations getJdbcOperations();\n\tprotected final org.springframework.jdbc.support.lob.LobHandler getLobHandler();\n\tvoid remove(OAuth2Authorization authorization); // Removes the OAuth2Authorization.\n\tvoid save(OAuth2Authorization authorization); // Saves the OAuth2Authorization.\n\tfinal void setAuthorizationParametersMapper(Function<OAuth2Authorization,List<org.springframework.jdbc.core.SqlParameterValue>> authorizationParametersMapper); // Sets the Function used for mapping OAuth2Authorization to a List of SqlParameterValue.\n\tfinal void setAuthorizationRowMapper(org.springframework.jdbc.core.RowMapper<OAuth2Authorization> authorizationRowMapper); // Sets the RowMapper used for mapping the current row in java.sql.ResultSet to OAuth2Authorization.\n}"}
{"index": 11066, "repo": "spring-shell-core-3.1.2", "des": "Default implementation of a NodeVisitor.", "code": "public static class Parser.DefaultNodeVisitor extends AbstractNodeVisitor {\n\tprotected Parser.ParseResult buildResult(); // Called after all nodes has been visited to build results.\n\tprotected void onEnterCommandArgumentNode(CommandArgumentNode node); // Called when CommandArgumentNode is entered.\n\tprotected void onEnterCommandNode(CommandNode node); // Called when CommandNode is entered.\n\tprotected void onEnterDirectiveNode(DirectiveNode node); // Called when DirectiveNode is entered.\n\tprotected void onEnterOptionArgumentNode(OptionArgumentNode node); // Called when OptionArgumentNode is entered.\n\tprotected void onEnterOptionNode(OptionNode node); // Called when OptionNode is entered.\n\tprotected void onEnterRootCommandNode(CommandNode node); // Called when CommandNode for root is entered.\n\tprotected void onExitCommandArgumentNode(CommandArgumentNode node); // Called when CommandArgumentNode is exited.\n\tprotected void onExitCommandNode(CommandNode node); // Called when CommandNode is exited.\n\tprotected void onExitDirectiveNode(DirectiveNode node); // Called when DirectiveNode is exited.\n\tprotected void onExitOptionArgumentNode(OptionArgumentNode node); // Called when OptionArgumentNode is exited.\n\tprotected void onExitOptionNode(OptionNode node); // Called when OptionNode is exited.\n\tprotected void onExitRootCommandNode(CommandNode node); // Called when CommandNode for root is exited.\n}"}
{"index": 8717, "repo": "hadoop-yarn-common-3.3.6", "des": "Access types for a queue or an application.", "code": "Enum AccessType {\n\tstatic AccessType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AccessType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 8509, "repo": "commons-io-2.13.0", "des": "CancelException is thrown in DirectoryWalker to cancel the current processing.", "code": "Class DirectoryWalker.CancelException {\n\tint getDepth(); // Returns the depth when the operation was cancelled.\n\tFile getFile(); // Returns the file when the operation was cancelled.\n}"}
{"index": 11450, "repo": "spring-context-6.0.11", "des": "Simple implementation of MessageSource which allows messages to be registered programmatically.", "code": "public class StaticMessageSource extends AbstractMessageSource {\n\tvoid addMessage(String code, Locale locale, String msg); // Associate the given message with the given code.\n\tvoid addMessages(Map<String,String> messages, Locale locale); // Associate the given message values with the given keys as codes.\n\tprotected MessageFormat resolveCode(String code, Locale locale); // Subclasses must implement this method to resolve a message.\n\tprotected String resolveCodeWithoutArguments(String code, Locale locale); // Subclasses can override this method to resolve a message without arguments in an optimized fashion, i.e.\n}"}
{"index": 6685, "repo": "lucene-analyzers-common-8.11.2", "des": "A CharacterIterator used internally for use with BreakIterator.", "code": "Class CharArrayIterator {\n\tCharArrayIterator clone();\n\tchar current();\n\tchar first();\n\tint getBeginIndex();\n\tint getEndIndex();\n\tint getIndex();\n\tint getLength();\n\tint getStart();\n\tchar[] getText();\n\tprotected abstract char jreBugWorkaround(char ch);\n\tchar last();\n\tstatic CharArrayIterator newSentenceInstance(); // Create a new CharArrayIterator that works around JRE bugs in a manner suitable for BreakIterator.getSentenceInstance()\n\tstatic CharArrayIterator newWordInstance(); // Create a new CharArrayIterator that works around JRE bugs in a manner suitable for BreakIterator.getWordInstance()\n\tchar next();\n\tchar previous();\n\tchar setIndex(int position);\n\tvoid setText(char[] array, int start, int length); // Set a new region of text to be examined by this iterator\n}"}
{"index": 8545, "repo": "commons-io-2.13.0", "des": "The ObservableInputStream allows, that an InputStream may be consumed by other receivers, apart from the thread, which is reading it.", "code": "Class ObservableInputStream {\n\tvoid add(ObservableInputStream.Observer observer); // Adds an Observer.\n\tvoid close(); // Invokes the delegate's close() method.\n\tvoid consume(); // Reads all data from the underlying InputStream, while notifying the observers.\n\tList<ObservableInputStream.Observer> getObservers(); // Gets all currently registered observers.\n\tprotected void noteClosed(); // Notifies the observers by invoking ObservableInputStream.Observer.finished().\n\tprotected void noteDataByte(int value); // Notifies the observers by invoking ObservableInputStream.Observer.data(int) with the given arguments.\n\tprotected void noteDataBytes(byte[] buffer, int offset, int length); // Notifies the observers by invoking ObservableInputStream.Observer.data(byte[],int,int) with the given arguments.\n\tprotected void noteError(IOException exception); // Notifies the observers by invoking ObservableInputStream.Observer.error(IOException) with the given argument.\n\tprotected void noteFinished(); // Notifies the observers by invoking ObservableInputStream.Observer.finished().\n\tint read(); // Invokes the delegate's read() method.\n\tint read(byte[] buffer); // Invokes the delegate's read(byte[]) method.\n\tint read(byte[] buffer, int offset, int length); // Invokes the delegate's read(byte[], int, int) method.\n\tvoid remove(ObservableInputStream.Observer observer); // Removes an Observer.\n\tvoid removeAllObservers(); // Removes all Observers.\n}"}
{"index": 3846, "repo": "hbase-client-3.0.0-alpha-4", "des": "A Filter that stops after the given row.", "code": "Class InclusiveStopFilter {\n\tstatic Filter createFilterFromArguments(ArrayList<byte[]> filterArguments);\n\tboolean equals(Object obj);\n\tboolean filterAllRemaining(); // Filters that never filter all remaining can inherit this implementation that never stops the filter early.\n\tFilter.ReturnCode filterCell(Cell c); // A way to filter based on the column family, column qualifier and/or the column value.\n\tboolean filterRowKey(Cell firstRowCell); // Filters a row based on the row key.\n\tbyte[] getStopRowKey();\n\tstatic InclusiveStopFilter parseFrom(byte[] pbBytes); // Parse a serialized representation of InclusiveStopFilter\n\tbyte[] toByteArray(); // Returns The filter serialized using pb\n}"}
{"index": 18647, "repo": "opencms-gwt-15.0", "des": "Widget containing a select box for selecting formatters and a help icon.", "code": "Class CmsElementSettingsFormatterWidget {\n\tCmsSelectBox getFormatterSelect(); // Returns the formatterSelect.\n\tcom.google.gwt.user.client.ui.FlowPanel getHelp(); // Returns the help.\n}"}
{"index": 7554, "repo": "cassandra-all-4.1.2", "des": "Index on the collection element of the cell name of a collection.", "code": "Class CollectionKeyIndex {\n\tjava.nio.ByteBuffer getIndexedValue(java.nio.ByteBuffer partitionKey, Clustering<?> clustering, CellPath path, java.nio.ByteBuffer cellValue); // Extract the value to be inserted into the index from the components of the base data\n\tboolean isStale(Row data, java.nio.ByteBuffer indexValue, int nowInSec); // Check whether a value retrieved from an index is still valid by comparing it to current row from the base table.\n\tboolean supportsOperator(ColumnMetadata indexedColumn, Operator operator); // Returns true if an index of this type can support search predicates of the form [column] OPERATOR [value]\n}"}
{"index": 12811, "repo": "spring-data-mongodb-4.1.2", "des": "Mongo-specific TypeMapper exposing that Documents might contain a type key.", "code": "public interface MongoTypeMapper extends TypeMapper<org.bson.conversions.Bson> {\n\tdefault Class<?> getWriteTargetTypeFor(Class<?> source); // Compute the target type for a given source considering CustomConversions.\n\tboolean isTypeKey(String key); // Returns whether the given key is the type key.\n\tvoid writeTypeRestrictions(org.bson.Document result, Set<Class<?>> restrictedTypes); // Writes type restrictions to the given Document.\n}"}
{"index": 15085, "repo": "spring-vault-core-3.0.4", "des": "Value object representing plain text with an optional VaultTransformContext.", "code": "public class TransformPlaintext extends Object {\n\tString asString();\n\tString asString(Charset charset);\n\tstatic TransformPlaintext empty(); // Factory method to create an empty TransformPlaintext.\n\tboolean equals(Object o);\n\tVaultTransformContext getContext();\n\tbyte[] getPlaintext();\n\tstatic TransformPlaintext of(byte[] plaintext); // Factory method to create TransformPlaintext from a byte sequence.\n\tstatic TransformPlaintext of(String plaintext); // Factory method to create TransformPlaintext using from String.\n\tstatic TransformPlaintext of(String plaintext, Charset charset); // Factory method to create TransformPlaintext using from a String using the given Charset.\n\tTransformPlaintext with(VaultTransformContext context); // Create a new TransformPlaintext object from this plaintext associated with the given VaultTransformContext.\n}"}
{"index": 11231, "repo": "wicket-extensions-10.0.0-M1", "des": "Enumerated type for different ways of handling the render part of requests.", "code": "public static enum TimeField.AM_PM extends Enum<TimeField.AM_PM> {\n\tstatic TimeField.AM_PM valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TimeField.AM_PM[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5738, "repo": "freemarker-2.3.32", "des": "TemplateHashModel wrapper for a ServletContext attributes.", "code": "Class ServletContextHashModel {\n\tTemplateModel get(java.lang.String key); // Gets a TemplateModel from the hash.\n\tjavax.servlet.GenericServlet getServlet(); // Returns the underlying servlet.\n\tboolean isEmpty();\n}"}
{"index": 4313, "repo": "beam-sdks-java-core-2.49.0", "des": "Information accessible to all methods in CombineFnWithContext and KeyedCombineFnWithContext.", "code": "Class CombineWithContext.Context {\n\tabstract PipelineOptions getPipelineOptions(); // Returns the PipelineOptions specified with the PipelineRunner invoking this KeyedCombineFn.\n\tabstract <T> T sideInput(PCollectionView<T> view); // Returns the value of the side input for the window corresponding to the main input's window in which values are being combined.\n}"}
{"index": 14495, "repo": "spring-security-web-6.1.2", "des": "A ServerCsrfTokenRepository that persists the CSRF token in a cookie named \"XSRF-TOKEN\" and reads from the header \"X-XSRF-TOKEN\" following the conventions of AngularJS.", "code": "public final class CookieServerCsrfTokenRepository extends Object implements ServerCsrfTokenRepository {\n\treactor.core.publisher.Mono<CsrfToken> generateToken(org.springframework.web.server.ServerWebExchange exchange); // Generates a CsrfToken\n\treactor.core.publisher.Mono<CsrfToken> loadToken(org.springframework.web.server.ServerWebExchange exchange); // Loads the expected CsrfToken from the ServerWebExchange\n\treactor.core.publisher.Mono<Void> saveToken(org.springframework.web.server.ServerWebExchange exchange, CsrfToken token); // Saves the CsrfToken using the ServerWebExchange.\n\tvoid setCookieCustomizer(Consumer<org.springframework.http.ResponseCookie.ResponseCookieBuilder> cookieCustomizer); // Add a Consumer for a ResponseCookieBuilder that will be invoked for each cookie being built, just before the call to build().\n\tvoid setCookieDomain(String cookieDomain); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tvoid setCookieHttpOnly(boolean cookieHttpOnly); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tvoid setCookieMaxAge(int cookieMaxAge); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tvoid setCookieName(String cookieName); // Sets the cookie name\n\tvoid setCookiePath(String cookiePath); // Sets the cookie path\n\tvoid setHeaderName(String headerName); // Sets the header name\n\tvoid setParameterName(String parameterName); // Sets the parameter name\n\tvoid setSecure(boolean secure); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tstatic CookieServerCsrfTokenRepository withHttpOnlyFalse(); // Factory method to conveniently create an instance that has creates cookies with ResponseCookie.isHttpOnly() set to false.\n}"}
{"index": 5038, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that throws an exception if the input is null.", "code": "Class NullIsExceptionPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning the result of the decorated predicate once a null check is performed.\n\tstatic Predicate getInstance(Predicate predicate); // Factory to create the null exception predicate.\n\tPredicate[] getPredicates(); // Gets the predicate being decorated.\n}"}
{"index": 16095, "repo": "shiro-web-2.0.0-alpha-2", "des": "A web-specific Environment instance, used in web applications.", "code": "public interface WebEnvironment extends org.apache.shiro.env.Environment {\n\tFilterChainResolver getFilterChainResolver(); // Returns the web application's FilterChainResolver if one has been configured or null if one is not available.\n\tjavax.servlet.ServletContext getServletContext(); // Returns the ServletContext associated with this WebEnvironment instance.\n\tdefault ShiroFilterConfiguration getShiroFilterConfiguration(); // Returns the configuration object used to configure the ShiroFilter.\n\tWebSecurityManager getWebSecurityManager(); // Returns the web application's security manager instance.\n}"}
{"index": 507, "repo": "ignite-core-2.15.0", "des": "Type and field ID mapper for binary objects.", "code": "Interface BinaryIdMapper {\n\tint fieldId(int typeId, String fieldName); // Gets ID for provided field name.\n\tint typeId(String typeName); // Gets type ID for provided type name.\n}"}
{"index": 3495, "repo": "mahout-mr-0.13.0", "des": "This is a probability-weighted clustering policy, suitable for fuzzy k-means clustering.", "code": "Class FuzzyKMeansClusteringPolicy {\n\tVector classify(Vector data, ClusterClassifier prior); // Classify the data vector given the classifier's models\n\tvoid close(ClusterClassifier posterior); // Close the policy using the classifier's models\n\tvoid readFields(DataInput in);\n\tVector select(Vector probabilities); // Return a vector of weights for each of the models given those probabilities\n\tvoid write(DataOutput out);\n}"}
{"index": 8143, "repo": "spring-ws-3.0.10.RELEASE", "des": "Abstract base class for MethodEndpoint mappings.", "code": "Class AbstractMethodEndpointMapping<T> {\n\tprotected Class<?> getEndpointClass(Object endpoint); // Return the class or interface to use for method reflection.\n\tprotected Object getEndpointInternal(MessageContext messageContext); // Lookup an endpoint for the given message.\n\tprotected abstract T getLookupKeyForMessage(MessageContext messageContext); // Returns the endpoint keys for the given message context.\n\tprotected T getLookupKeyForMethod(Method method); // Returns the endpoint key for the given method.\n\tprotected List<T> getLookupKeysForMethod(Method method); // Returns the endpoint keys for the given method.\n\tprotected MethodEndpoint lookupEndpoint(T key); // Looks up an endpoint instance for the given keys.\n\tprotected void registerEndpoint(T key, MethodEndpoint endpoint); // Register the given endpoint instance under the key.\n\tprotected void registerMethods(Object endpoint); // Helper method that registers the methods of the given bean.\n\tprotected void registerMethods(String beanName); // Helper method that registers the methods of the given class.\n}"}
{"index": 14774, "repo": "spring-data-commons-3.1.2", "des": "The various types of ignore case that are supported.", "code": "public static enum Part.IgnoreCaseType extends Enum<Part.IgnoreCaseType> {\n\tstatic Part.IgnoreCaseType valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic Part.IgnoreCaseType[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 13905, "repo": "spring-webflux-6.0.11", "des": "Resolver for a controller method argument of type Model that can also be resolved as a Map.", "code": "public class ModelMethodArgumentResolver extends HandlerMethodArgumentResolverSupport implements SyncHandlerMethodArgumentResolver {\n\tObject resolveArgumentValue(org.springframework.core.MethodParameter parameter, BindingContext context, org.springframework.web.server.ServerWebExchange exchange); // Resolve the value for the method parameter synchronously.\n\tboolean supportsParameter(org.springframework.core.MethodParameter param); // Whether this resolver supports the given method parameter.\n}"}
{"index": 18605, "repo": "hibernate-core-5.6.15.Final", "des": "A simple implementation of StrategyRegistration.", "code": "Class SimpleStrategyRegistrationImpl<T> {\n\tjava.lang.Iterable<java.lang.String> getSelectorNames(); // Any registered names for this strategy registration.\n\tjava.lang.Class<? extends T> getStrategyImplementation(); // The strategy implementation class.\n\tjava.lang.Class<T> getStrategyRole(); // The strategy role.\n}"}
{"index": 13862, "repo": "spring-webflux-6.0.11", "des": "Implements the RequestCondition contract by delegating to multiple RequestCondition types and using a logical conjunction (' && ') to ensure all conditions match a given request.", "code": "public class CompositeRequestCondition extends AbstractRequestCondition<CompositeRequestCondition> {\n\tCompositeRequestCondition combine(CompositeRequestCondition other); // If one instance is empty, return the other.\n\tint compareTo(CompositeRequestCondition other, org.springframework.web.server.ServerWebExchange exchange); // If one instance is empty, the other \"wins\".\n\tList<RequestCondition<?>> getConditions(); // Return the underlying conditions, possibly empty but never null.\n\tprotected Collection<?> getContent(); // Return the discrete items a request condition is composed of.\n\tCompositeRequestCondition getMatchingCondition(org.springframework.web.server.ServerWebExchange exchange); // Delegate to all contained conditions to match the request and return the resulting \"matching\" condition instances.\n\tprotected String getToStringInfix(); // The notation to use when printing discrete items of content.\n\tboolean isEmpty(); // Whether this instance contains 0 conditions or not.\n}"}
{"index": 5585, "repo": "org.apache.karaf.main-2.4.4", "des": "Represents a directory entry in a ZipBundleFile.", "code": "Class DirZipBundleEntry {\n\tURL getFileURL(); // Get a URL to the content of the bundle entry that uses the file: protocol.\n\tInputStream getInputStream(); // Return an InputStream for the entry.\n\tURL getLocalURL(); // Get a URL to the bundle entry that uses a common protocol (i.e.\n\tString getName(); // Return the name of the entry.\n\tlong getSize(); // Return the size of the entry (uncompressed).\n\tlong getTime(); // Get the modification time for this BundleEntry.\n}"}
{"index": 12260, "repo": "jena-core-4.9.0", "des": "Allows connecting an arbitrary source of SAX events with ARP.", "code": "public class SAX2RDF extends SAX2RDFImpl implements ARPConfig {\n\tstatic SAX2RDF create(String base); // Factory method to create a new SAX2RDF.\n\tstatic SAX2RDF create(String base, String lang); // Factory method to create a new SAX2RDF.\n\tARPHandlers getHandlers(); // The handlers used for processing ARP events.\n\tARPOptions getOptions(); // The options used during parsing.\n\tstatic void installHandlers(XMLReader rdr, XMLHandler sax2rdf); // Initializes an XMLReader to use the SAX2RDF object as its handler for all events, and to use namespaces and namespace prefixes.\n\tvoid setHandlersWith(ARPHandlers handlers); // Copys handlers used for processing ARP events.\n\tvoid setOptionsWith(ARPOptions opts); // Copies the options from the argument to be used by this instance.\n\tvoid startPrefixMapping(String prefix, String uri); // Begin the scope of a prefix-URI Namespace mapping.\n}"}
{"index": 9739, "repo": "commons-math3-3.6.1", "des": "Exception to be thrown when function values have the same sign at both ends of an interval.", "code": "Class NoBracketingException {\n\tdouble getFHi(); // Get the value at the higher end of the interval.\n\tdouble getFLo(); // Get the value at the lower end of the interval.\n\tdouble getHi(); // Get the higher end of the interval.\n\tdouble getLo(); // Get the lower end of the interval.\n}"}
{"index": 8757, "repo": "hadoop-yarn-common-3.3.6", "des": "Define the interface for store activity.", "code": "Interface StoreOp<W,R,M> {\n\tvoid recover(R read, M mgr); // Read and populate StoreOp.\n\tvoid write(W write, M mgr); // Write operation to persistent storage.\n}"}
{"index": 17327, "repo": "groovy-4.0.13", "des": "Bytecode level interface for bootstrap methods used by invokedynamic.", "code": "public class IndyInterface extends Object {\n\tstatic CallSite bootstrap(MethodHandles.Lookup caller, String callType, MethodType type, String name, int flags); // bootstrap method for method calls from Groovy compiled code with indy enabled.\n\tstatic Object fromCache(MutableCallSite callSite, Class<?> sender, String methodName, int callID, Boolean safeNavigation, Boolean thisCall, Boolean spreadCall, Object dummyReceiver, Object[] arguments); // Get the cached methodhandle.\n\tprotected static void invalidateSwitchPoints(); // Callback for constant metaclass update change\n\tprotected static MethodHandle makeFallBack(MutableCallSite mc, Class<?> sender, String name, int callID, MethodType type, boolean safeNavigation, boolean thisCall, boolean spreadCall); // Makes a fallback method for an invalidated method selection\n\tstatic Object selectMethod(MutableCallSite callSite, Class<?> sender, String methodName, int callID, Boolean safeNavigation, Boolean thisCall, Boolean spreadCall, Object dummyReceiver, Object[] arguments); // Core method for indy method selection using runtime types.\n\tstatic CallSite staticArrayAccess(MethodHandles.Lookup lookup, String name, MethodType type);\n}"}
{"index": 6402, "repo": "spring-data-solr-4.3.15", "des": "Solr specific PersistentProperty implementation processing taking Field into account.", "code": "Class SimpleSolrPersistentProperty {\n\tboolean containsWildcard();\n\tprotected Association<SolrPersistentProperty> createAssociation();\n\tCollection<String> getCopyFields();\n\tObject getDefaultValue();\n\tString getFieldName(); // Get name of field under attention to Field annotation\n\tString getSolrTypeName();\n\tboolean isChildProperty();\n\tboolean isDynamicProperty(); // Returns whether the property should be handled as dynamic property.\n\tboolean isIdProperty();\n\tboolean isMultiValued();\n\tboolean isReadonly();\n\tboolean isRequired();\n\tboolean isScoreProperty(); // Returns whether the property is a potential score property of the owning PersistentEntity.\n\tboolean isSearchable();\n\tboolean isStored();\n\tboolean isUnique();\n}"}
{"index": 586, "repo": "ignite-core-2.15.0", "des": "Thin client implementation of IgniteBinary.", "code": "Class ClientBinary {\n\tBinaryContext binaryContext();\n\tBinaryObject buildEnum(String typeName, int ord); // Create enum object using value.\n\tBinaryObject buildEnum(String typeName, String name); // Create enum object using name.\n\tBinaryObjectBuilder builder(BinaryObject binaryObj); // Creates binary builder initialized by existing binary object.\n\tBinaryObjectBuilder builder(String typeName); // Creates new binary builder.\n\tBinaryType registerClass(Class<?> cls); // Register binary type for specified class.\n\tBinaryType registerEnum(String typeName, Map<String,Integer> vals); // Register enum type.\n\t<T> T toBinary(Object obj); // Converts provided object to instance of BinaryObject.\n\tBinaryType type(Class<?> cls); // Gets metadata for provided class.\n\tBinaryType type(int typeId); // Gets metadata for provided type ID.\n\tBinaryType type(String typeName); // Gets metadata for provided class name.\n\tint typeId(String typeName); // Gets type ID for given type name.\n\tCollection<BinaryType> types(); // Gets metadata for all known types.\n}"}
{"index": 16821, "repo": "spring-expression-6.0.11", "des": "Default implementation of the TypeConverter interface, delegating to a core Spring ConversionService.", "code": "public class StandardTypeConverter extends Object implements TypeConverter {\n\tboolean canConvert(org.springframework.core.convert.TypeDescriptor sourceType, org.springframework.core.convert.TypeDescriptor targetType); // Return true if the type converter can convert the specified type to the desired target type.\n\tObject convertValue(Object value, org.springframework.core.convert.TypeDescriptor sourceType, org.springframework.core.convert.TypeDescriptor targetType); // Convert (or coerce) a value from one type to another, for example from a boolean to a String.\n}"}
{"index": 11108, "repo": "tribuo-core-4.3.1", "des": "A SequenceTrainer that hashes all the feature names on the way in.", "code": "public final class HashingSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T> {\n\tint getInvocationCount(); // Returns the number of times the train method has been invoked.\n\tTrainerProvenance getProvenance();\n\tSequenceModel<T> train(SequenceDataset<T> sequenceExamples, Map<String,com.oracle.labs.mlrg.olcut.provenance.Provenance> instanceProvenance); // This clones the SequenceDataset, hashes each of the examples and rewrites their feature ids before passing it to the inner trainer.\n}"}
{"index": 17739, "repo": "spring-web-6.0.11", "des": "Represents an event triggered for a form field.", "code": "public interface FormPartEvent extends PartEvent {\n\tstatic reactor.core.publisher.Mono<FormPartEvent> create(String name, String value); // Creates a stream with a single FormPartEven based on the given name and value.\n\tstatic reactor.core.publisher.Mono<FormPartEvent> create(String name, String value, Consumer<HttpHeaders> headersConsumer); // Creates a stream with a single FormPartEven based on the given name and value.\n\tString value(); // Return the form field value.\n}"}
{"index": 11672, "repo": "spring-websocket-6.0.11", "des": "Defines methods for configuring message handling with simple messaging protocols (e.g.", "code": "public interface WebSocketMessageBrokerConfigurer {\n\tdefault void addArgumentResolvers(List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> argumentResolvers); // Add resolvers to support custom controller method argument types.\n\tdefault void addReturnValueHandlers(List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> returnValueHandlers); // Add handlers to support custom controller method return value types.\n\tdefault void configureClientInboundChannel(org.springframework.messaging.simp.config.ChannelRegistration registration); // Configure the MessageChannel used for incoming messages from WebSocket clients.\n\tdefault void configureClientOutboundChannel(org.springframework.messaging.simp.config.ChannelRegistration registration); // Configure the MessageChannel used for outbound messages to WebSocket clients.\n\tdefault void configureMessageBroker(org.springframework.messaging.simp.config.MessageBrokerRegistry registry); // Configure message broker options.\n\tdefault boolean configureMessageConverters(List<org.springframework.messaging.converter.MessageConverter> messageConverters); // Configure the message converters to use when extracting the payload of messages in annotated methods and when sending messages (e.g.\n\tdefault void configureWebSocketTransport(WebSocketTransportRegistration registry); // Configure options related to the processing of messages received from and sent to WebSocket clients.\n\tdefault void registerStompEndpoints(StompEndpointRegistry registry); // Register STOMP endpoints mapping each to a specific URL and (optionally) enabling and configuring SockJS fallback options.\n}"}
{"index": 16810, "repo": "spring-expression-6.0.11", "des": "An optimized form of a PropertyAccessor that will use reflection but only knows how to access a particular property on a particular class.", "code": "public static class ReflectivePropertyAccessor.OptimalPropertyAccessor extends Object implements CompilablePropertyAccessor {\n\tboolean canRead(EvaluationContext context, Object target, String name); // Called to determine if a resolver instance is able to access a specified property on a specified target object.\n\tboolean canWrite(EvaluationContext context, Object target, String name); // Called to determine if a resolver instance is able to write to a specified property on a specified target object.\n\tvoid generateCode(String propertyName, org.springframework.asm.MethodVisitor mv, CodeFlow cf); // Generate the bytecode the performs the access operation into the specified MethodVisitor using context information from the codeflow where necessary.\n\tClass<?> getPropertyType(); // Return the type of the accessed property - may only be known once an access has occurred.\n\tClass<?>[] getSpecificTargetClasses(); // Return an array of classes for which this resolver should be called.\n\tboolean isCompilable(); // Return true if this property accessor is currently suitable for compilation.\n\tTypedValue read(EvaluationContext context, Object target, String name); // Called to read a property from a specified target object.\n\tvoid write(EvaluationContext context, Object target, String name, Object newValue); // Called to write to a property on a specified target object.\n}"}
{"index": 17211, "repo": "spring-integration-amqp-6.1.2", "des": "MessageHandler based on RabbitStreamOperations.", "code": "public class RabbitStreamMessageHandler extends org.springframework.integration.handler.AbstractMessageHandler {\n\tprotected org.springframework.messaging.MessageChannel getSendFailureChannel();\n\tprotected org.springframework.messaging.MessageChannel getSendSuccessChannel();\n\torg.springframework.rabbit.stream.producer.RabbitStreamOperations getStreamOperations(); // Return the RabbitStreamOperations.\n\tprotected void handleMessageInternal(org.springframework.messaging.Message<?> requestMessage);\n\tvoid setConfirmTimeout(long confirmTimeout); // Set the confirm timeout.\n\tvoid setHeaderMapper(AmqpHeaderMapper headerMapper); // Set a custom AmqpHeaderMapper for mapping request and reply headers.\n\tvoid setHeadersMappedLast(boolean headersMappedLast); // When mapping headers for the outbound message, determine whether the headers are mapped before the message is converted, or afterwards.\n\tvoid setSendFailureChannel(org.springframework.messaging.MessageChannel sendFailureChannel); // Set the failure channel.\n\tvoid setSendFailureChannelName(String sendFailureChannelName); // Set the failure channel name.\n\tvoid setSendSuccessChannel(org.springframework.messaging.MessageChannel sendSuccessChannel); // Set the success channel.\n\tvoid setSendSuccessChannelName(String sendSuccessChannelName); // Set the Success channel name.\n\tvoid setSync(boolean sync); // Set to true to wait for a confirmation.\n}"}
{"index": 9096, "repo": "hbase-server-3.0.0-alpha-4", "des": "ScannerContext instances encapsulate limit tracking AND progress towards those limits during invocations of InternalScanner.", "code": "Class ScannerContext {\n\tServerSideScanMetrics getMetrics(); // Get the metrics instance.\n\tboolean getSkippingRow(); // In this mode, only block size progress is tracked, and limits are ignored.\n\tboolean isTrackingMetrics();\n\tstatic ScannerContext.Builder newBuilder();\n\tstatic ScannerContext.Builder newBuilder(boolean keepProgress);\n}"}
{"index": 16309, "repo": "maven-compat-4.0.0-alpha-7", "des": "Metadata for the artifact directory of the repository.", "code": "public class ArtifactRepositoryMetadata extends AbstractRepositoryMetadata {\n\tString getArtifactId();\n\tString getBaseVersion();\n\tString getGroupId();\n\tObject getKey();\n\tint getNature(); // Gets the artifact quality this metadata refers to.\n\tArtifactRepository getRepository(); // Get the repository the metadata was located in.\n\tboolean isSnapshot(); // Whether this represents a snapshot.\n\tvoid setRepository(ArtifactRepository remoteRepository); // Set the repository the metadata was located in.\n\tboolean storedInArtifactVersionDirectory();\n\tboolean storedInGroupDirectory();\n}"}
{"index": 2828, "repo": "tika-parsers-1.28.5", "des": "Specifies a storage manifest schema GUID.", "code": "Class StorageManifestSchemaGUID {\n\tprotected void deserializeItemsFromByteArray(byte[] byteArray, AtomicInteger currentIndex, int lengthOfItems); // Used to de-serialize the items.\n\tprotected int serializeItemsToByteList(List<Byte> byteList); // Used to convert the element into a byte List.\n}"}
{"index": 11893, "repo": "spring-kafka-3.0.9", "des": "Helper class for managing a Spring based Kafka DefaultKafkaProducerFactory in particular for obtaining transactional Kafka resources for a given ProducerFactory.", "code": "public final class ProducerFactoryUtils extends Object {\n\tstatic <K, V> KafkaResourceHolder<K,V> getTransactionalResourceHolder(ProducerFactory<K,V> producerFactory); // Obtain a Producer that is synchronized with the current transaction, if any.\n\tstatic <K, V> KafkaResourceHolder<K,V> getTransactionalResourceHolder(ProducerFactory<K,V> producerFactory, String txIdPrefix, Duration closeTimeout); // Obtain a Producer that is synchronized with the current transaction, if any.\n\tstatic <K, V> KafkaResourceHolder<K,V> getTransactionalResourceHolder(ProducerFactory<K,V> producerFactory, Duration closeTimeout); // Obtain a Producer that is synchronized with the current transaction, if any.\n\tstatic <K, V> void releaseResources(KafkaResourceHolder<K,V> resourceHolder);\n}"}
{"index": 18156, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "CollectionAliases that uses column names instead of generated aliases.", "code": "Class ColumnCollectionAliases {\n\tjava.lang.String getSuffix(); // Returns the suffix used to unique the column aliases for this particular alias set.\n\tjava.lang.String[] getSuffixedElementAliases(); // Returns the suffixed result-set column-aliases for the columns making up the collection's elements.\n\tjava.lang.String getSuffixedIdentifierAlias(); // Returns the suffixed result-set column-aliases for the column defining the collection's identifier (if any).\n\tjava.lang.String[] getSuffixedIndexAliases(); // Returns the suffixed result-set column-aliases for the columns making up the collection's index (map or list).\n\tjava.lang.String[] getSuffixedKeyAliases(); // Returns the suffixed result-set column-aliases for columns making up the key for this collection (i.e., its FK to its owner).\n}"}
{"index": 18595, "repo": "hibernate-core-5.6.15.Final", "des": "Retrieve all inferred data from an annotated element", "code": "Class PropertyInferredData {\n\torg.hibernate.annotations.common.reflection.XClass getClassOrElement(); // Returns the returned class itself or the element type if an array\n\tjava.lang.String getClassOrElementName(); // Returns the returned class name itself or the element type if an array\n\torg.hibernate.annotations.common.reflection.XClass getDeclaringClass(); // Return the Class the property is declared on If the property is declared on a @MappedSuperclass, this class will be different than the PersistentClass's class\n\tAccessType getDefaultAccess();\n\torg.hibernate.annotations.common.reflection.XProperty getProperty(); // Return the Hibernate mapping property\n\torg.hibernate.annotations.common.reflection.XClass getPropertyClass(); // Return the class itself\n\tjava.lang.String getPropertyName();\n\tjava.lang.String getTypeName(); // Returns the returned class name itself\n}"}
{"index": 17943, "repo": "spring-web-6.0.11", "des": "Utility class for tag library related code, exposing functionality such as translating Strings to web scopes.", "code": "public abstract class TagUtils extends Object {\n\tstatic void assertHasAncestorOfType(Tag tag, Class<?> ancestorTagClass, String tagName, String ancestorTagName); // Determine whether the supplied Tag has any ancestor tag of the supplied type, throwing an IllegalStateException if not.\n\tstatic int getScope(String scope); // Determines the scope for a given input String.\n\tstatic boolean hasAncestorOfType(Tag tag, Class<?> ancestorTagClass); // Determine whether the supplied Tag has any ancestor tag of the supplied type.\n}"}
{"index": 16566, "repo": "spring-beans-6.0.11", "des": "Representation of an alias that has been registered during the parsing process.", "code": "public class AliasDefinition extends Object implements BeanMetadataElement {\n\tfinal String getAlias(); // Return the alias registered for the bean.\n\tfinal String getBeanName(); // Return the canonical name of the bean.\n\tfinal Object getSource(); // Return the configuration source Object for this metadata element (may be null).\n}"}
{"index": 1841, "repo": "nifi-web-api-0.5.0", "des": "RESTful endpoint for managing a Template.", "code": "Class TemplateResource {\n\tjavax.ws.rs.core.Response createTemplate(javax.servlet.http.HttpServletRequest httpServletRequest, ClientIdParameter clientId, String name, String description, String snippetId); // Creates a new template based off of the specified template.\n\tjavax.ws.rs.core.Response exportTemplate(ClientIdParameter clientId, String id); // Retrieves the specified template.\n\tjavax.ws.rs.core.Response getTemplates(ClientIdParameter clientId); // Retrieves all the of templates in this NiFi.\n\tjavax.ws.rs.core.Response importTemplate(javax.servlet.http.HttpServletRequest httpServletRequest, ClientIdParameter clientId, InputStream in); // Imports the specified template.\n\tjavax.ws.rs.core.Response importTemplate(javax.servlet.http.HttpServletRequest httpServletRequest, TemplateEntity templateEntity); // Imports the specified template.\n\tprivate TemplateDTO populateRemainingTemplateContent(TemplateDTO template); // Populates the uri for the specified template.\n\tSet<TemplateDTO> populateRemainingTemplatesContent(Set<TemplateDTO> templates); // Populates the uri for the specified templates.\n\tjavax.ws.rs.core.Response removeTemplate(javax.servlet.http.HttpServletRequest httpServletRequest, ClientIdParameter clientId, String id); // Removes the specified template.\n\tvoid setClusterManager(WebClusterManager clusterManager);\n\tvoid setProperties(NiFiProperties properties);\n\tvoid setServiceFacade(NiFiServiceFacade serviceFacade);\n}"}
{"index": 13732, "repo": "spring-webmvc-6.0.11", "des": "A RequestBodyAdvice implementation that adds support for Jackson's @JsonView annotation declared on a Spring MVC @HttpEntity or @RequestBody method parameter.", "code": "public class JsonViewRequestBodyAdvice extends RequestBodyAdviceAdapter {\n\torg.springframework.http.HttpInputMessage beforeBodyRead(org.springframework.http.HttpInputMessage inputMessage, org.springframework.core.MethodParameter methodParameter, Type targetType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> selectedConverterType); // The default implementation returns the InputMessage that was passed in.\n\tboolean supports(org.springframework.core.MethodParameter methodParameter, Type targetType, Class<? extends org.springframework.http.converter.HttpMessageConverter<?>> converterType); // Invoked first to determine if this interceptor applies.\n}"}
{"index": 17001, "repo": "spring-data-r2dbc-3.1.2", "des": "Representation of a Row to be written through a INSERT or UPDATE statement.", "code": "public class OutboundRow extends Object implements Map<SqlIdentifier,Parameter>, Cloneable {\n\tOutboundRow append(String key, Parameter value); // Put the given key/value pair into this OutboundRow and return this.\n\tOutboundRow append(SqlIdentifier key, Parameter value); // Put the given key/value pair into this OutboundRow and return this.\n\tvoid clear();\n\tprotected OutboundRow clone();\n\tboolean containsKey(Object key);\n\tboolean containsValue(Object value);\n\tSet<Map.Entry<SqlIdentifier,Parameter>> entrySet();\n\tboolean equals(Object o);\n\tvoid forEach(BiConsumer<? super SqlIdentifier,? super Parameter> action);\n\tParameter get(Object key);\n\tboolean isEmpty();\n\tSet<SqlIdentifier> keySet();\n\tParameter put(String key, Parameter value);\n\tParameter put(SqlIdentifier key, Parameter value);\n\tvoid putAll(Map<? extends SqlIdentifier,? extends Parameter> m);\n\tParameter remove(Object key);\n\tint size();\n\tCollection<Parameter> values();\n}"}
{"index": 14261, "repo": "wicket-core-10.0.0-M1", "des": "An interface to code which finds classes and resources", "code": "public interface IClassResolver {\n\tClassLoader getClassLoader(); // Returns the ClassLoader to be used for resolving classes\n\tIterator<URL> getResources(String name); // Tries to load all the resources by the name that is given.\n\tClass<?> resolveClass(String classname); // Resolves a class by name (which may or may not involve loading it; thus the name class *resolver* not *loader*).\n}"}
{"index": 4642, "repo": "commons-vfs2-2.9.0", "des": "A file object implementation which uses direct file access.", "code": "Class LocalFile {\n\tprotected void doAttach(); // Attaches this file object to its file resource.\n\tprotected void doCreateFolder(); // Creates this folder.\n\tprotected void doDelete(); // Deletes this file, and all children.\n\tprotected long doGetContentSize(); // Returns the size of the file content (in bytes).\n\tprotected InputStream doGetInputStream(int bufferSize); // Creates an input stream to read the content from.\n\tprotected long doGetLastModifiedTime(); // Gets the last modified time of this file.\n\tprotected OutputStream doGetOutputStream(boolean bAppend); // Creates an output stream to write the file content to.\n\tprotected RandomAccessContent doGetRandomAccessContent(RandomAccessMode mode); // Creates access to the file for random i/o.\n\tprotected FileType doGetType(); // Returns the file's type.\n\tprotected boolean doIsExecutable(); // Determines if this file is hidden.\n\tprotected boolean doIsHidden(); // Determines if this file is hidden.\n\tprotected boolean doIsReadable(); // Determines if this file can be read.\n\tprotected boolean doIsSameFile(FileObject destFile); // Checks if this fileObject is the same file as destFile just with a different name.\n\tprotected boolean doIsSymbolicLink(); // Determines if this file is a symbolic link.\n\tprotected boolean doIsWriteable(); // Determines if this file can be written to.\n\tprotected String[] doListChildren(); // Returns the children of the file.\n\tprotected void doRename(FileObject newFile); // rename this file\n\tprotected boolean doSetExecutable(boolean executable, boolean ownerOnly); // Make the file executable.\n\tprotected boolean doSetLastModifiedTime(long modtime); // Sets the last modified time of this file.\n\tprotected boolean doSetReadable(boolean readable, boolean ownerOnly); // Make the file or folder readable.\n\tprotected boolean doSetWritable(boolean writable, boolean ownerOnly); // Make the file or folder writable.\n\tprotected File getLocalFile(); // Gets the local file that this file object represents.\n}"}
{"index": 2947, "repo": "tink-1.10.0", "des": "This key manager generates new AesGcmKey keys and produces new instances of AesGcmJce.", "code": "Class AesGcmKeyManager {\n\tstatic KeyTemplate aes128GcmTemplate();\n\tstatic KeyTemplate aes256GcmTemplate();\n\tTinkFipsUtil.AlgorithmFipsCompatibility fipsStatus(); // Returns the FIPS compatibility of this KeyTypeManager.\n\tString getKeyType(); // Returns the type URL that identifies the key type of keys managed by this KeyManager.\n\tint getVersion(); // Returns the version number of this KeyManager.\n\tKeyTypeManager.KeyFactory<AesGcmKeyFormat,AesGcmKey> keyFactory(); // Returns the KeyTypeManager.KeyFactory for this key type.\n\tKeyData.KeyMaterialType keyMaterialType(); // Returns the KeyData.KeyMaterialType for this proto.\n\tAesGcmKey parseKey(com.google.protobuf.ByteString byteString); // Parses a serialized key proto.\n\tstatic KeyTemplate rawAes128GcmTemplate();\n\tstatic KeyTemplate rawAes256GcmTemplate();\n\tstatic void register(boolean newKeyAllowed);\n\tvoid validateKey(AesGcmKey key); // Checks if the given keyProto is a valid key.\n}"}
{"index": 5949, "repo": "commons-lang3-3.12.0", "des": "A very simple implementation of the ConcurrentInitializer interface which always returns the same object.", "code": "Class ConstantInitializer<T> {\n\tboolean equals(Object obj); // Compares this object with another one.\n\tT get(); // Returns the object managed by this initializer.\n\tT getObject(); // Directly returns the object that was passed to the constructor.\n}"}
{"index": 17612, "repo": "spring-ldap-core-3.1.0", "des": "The specifications for the LdapClient.modify(java.lang.String) request.", "code": "public static interface LdapClient.ModifySpec {\n\tLdapClient.ModifySpec attributes(ModificationItem... modifications); // The attribute modifications to apply to this entry\n\tvoid execute(); // Modify the name and attributes for this entry\n\tLdapClient.ModifySpec name(String name); // The new name for this entry.\n\tLdapClient.ModifySpec name(Name name); // The new name for this entry.\n}"}
{"index": 10663, "repo": "groovy-all-4.0.13", "des": "Handles generation of code for the @TupleConstructor annotation.", "code": "public class TupleConstructorASTTransformation extends AbstractASTTransformation implements CompilationUnitAware, TransformWithPriority {\n\tstatic void addSpecialMapConstructors(int modifiers, ClassNode cNode, String message, boolean addNoArg);\n\tString getAnnotationName(); // If the transform is associated with a single annotation, returns a name suitable for displaying in error messages.\n\tint priority();\n\tvoid setCompilationUnit(CompilationUnit unit);\n\tvoid visit(ASTNode[] nodes, SourceUnit source); // The method is invoked when an AST Transformation is active.\n}"}
{"index": 16074, "repo": "shiro-web-2.0.0-alpha-2", "des": "A filter that translates an HTTP Request's Method (e.g.", "code": "public class HttpMethodPermissionFilter extends PermissionsAuthorizationFilter {\n\tprotected String[] buildPermissions(String[] configuredPerms, String action); // Builds a new array of permission strings based on the original argument, appending the specified action verb to each one per WildcardPermission conventions.\n\tprotected String[] buildPermissions(javax.servlet.http.HttpServletRequest request, String[] configuredPerms, String action); // Returns a collection of String permissions with which to perform a permission check to determine if the filter will allow the request to continue.\n\tprotected String getHttpMethodAction(String method); // Determines the corresponding application action that will be performed on the filtered resource based on the specified HTTP method (GET, POST, etc.).\n\tprotected String getHttpMethodAction(javax.servlet.ServletRequest request); // Determines the action (verb) attempting to be performed on the filtered resource by the current request.\n\tprotected Map<String,String> getHttpMethodActions(); // Returns the HTTP Method name (key) to action verb (value) mapping used to resolve actions based on an incoming HttpServletRequest.\n\tboolean isAccessAllowed(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, Object mappedValue); // Resolves an 'application friendly' action verb based on the HttpServletRequest's method, appends that action to each configured permission (the mappedValue argument is a String[] array), and delegates the permission check for the newly constructed permission(s) to the superclass isAccessAllowed implementation to perform the actual permission check.\n}"}
{"index": 5659, "repo": "org.apache.karaf.main-2.4.4", "des": "An implementation for the StateHelper API.", "code": "Class StateHelperImpl {\n\tint getAccessCode(BundleDescription bundle, ExportPackageDescription export); // Returns the access code that the specified BundleDescription has to the specified ExportPackageDescription.\n\tBundleDescription[] getDependentBundles(BundleDescription[] bundles); // Returns all bundles in the state depending on the given bundles.\n\tstatic StateHelper getInstance();\n\tBundleDescription[] getPrerequisites(BundleDescription[] bundles); // Returns all the prerequisite bundles in the state for the given bundles.\n\tVersionConstraint[] getUnsatisfiedConstraints(BundleDescription bundle); // Returns all unsatisfied constraints in the given bundle.\n\tVersionConstraint[] getUnsatisfiedLeaves(BundleDescription[] bundles); // Returns all unsatisfied constraints in the given bundles that have no possible supplier.\n\tExportPackageDescription[] getVisiblePackages(BundleDescription bundle); // Returns a list of all packages that the specified bundle has access to which are exported by other bundles.\n\tExportPackageDescription[] getVisiblePackages(BundleDescription bundle, int options); // Returns a list of all packages that the specified bundle has access to which are exported by other bundles.\n\tboolean isResolvable(BundleSpecification specification); // Returns whether the given bundle specification constraint is resolvable.\n\tboolean isResolvable(HostSpecification specification); // Returns whether the given host specification constraint is resolvable.\n\tboolean isResolvable(ImportPackageSpecification constraint); // Returns whether the given package specification constraint is resolvable.\n\tObject[][] sortBundles(BundleDescription[] toSort); // Sorts the given array of resolved bundles in pre-requisite order.\n}"}
{"index": 11631, "repo": "spring-websocket-6.0.11", "des": "A WebSocketSession for use with the Jetty 9.4 WebSocket API.", "code": "public class JettyWebSocketSession extends AbstractWebSocketSession<org.eclipse.jetty.websocket.api.Session> {\n\tprotected void closeInternal(CloseStatus status);\n\tString getAcceptedProtocol(); // Return the negotiated sub-protocol.\n\tint getBinaryMessageSizeLimit(); // Get the configured maximum size for an incoming binary message.\n\tList<WebSocketExtension> getExtensions(); // Determine the negotiated extensions.\n\torg.springframework.http.HttpHeaders getHandshakeHeaders(); // Return the headers used in the handshake request (never null).\n\tString getId(); // Return a unique session identifier.\n\tInetSocketAddress getLocalAddress(); // Return the address on which the request was received.\n\tPrincipal getPrincipal(); // Return a Principal instance containing the name of the authenticated user.\n\tInetSocketAddress getRemoteAddress(); // Return the address of the remote client.\n\tint getTextMessageSizeLimit(); // Get the configured maximum size for an incoming text message.\n\tURI getUri(); // Return the URI used to open the WebSocket connection.\n\tvoid initializeNativeSession(org.eclipse.jetty.websocket.api.Session session);\n\tboolean isOpen(); // Whether the underlying connection is open.\n\tprotected void sendBinaryMessage(BinaryMessage message);\n\tprotected void sendPingMessage(PingMessage message);\n\tprotected void sendPongMessage(PongMessage message);\n\tprotected void sendTextMessage(TextMessage message);\n\tvoid setBinaryMessageSizeLimit(int messageSizeLimit); // This method is a no-op for Jetty.\n\tvoid setTextMessageSizeLimit(int messageSizeLimit); // This method is a no-op for Jetty.\n}"}
{"index": 3046, "repo": "tink-1.10.0", "des": "A Mutable version of the PrimitiveRegistry.", "code": "Class MutablePrimitiveRegistry {\n\t<WrapperPrimitiveT>Class<?> getInputPrimitiveClass(Class<WrapperPrimitiveT> wrapperClassObject);\n\t<KeyT extends Key,PrimitiveT>PrimitiveT getPrimitive(KeyT key, Class<PrimitiveT> primitiveClass); // Creates a primitive from a given key.\n\tstatic MutablePrimitiveRegistry globalInstance();\n\t<KeyT extends Key,PrimitiveT>void registerPrimitiveConstructor(PrimitiveConstructor<KeyT,PrimitiveT> constructor); // Registers a key primitive constructor for later use in getPrimitive(KeyT, java.lang.Class<PrimitiveT>).\n\t<InputPrimitiveT,WrapperPrimitiveT>void registerPrimitiveWrapper(PrimitiveWrapper<InputPrimitiveT,WrapperPrimitiveT> wrapper);\n\tstatic void resetGlobalInstanceTestOnly();\n\t<InputPrimitiveT,WrapperPrimitiveT>WrapperPrimitiveT wrap(PrimitiveSet<InputPrimitiveT> primitives, Class<WrapperPrimitiveT> wrapperClassObject);\n}"}
{"index": 16875, "repo": "spring-amqp-3.0.6", "des": "A post processor that uses a ZipOutputStream to compress the message body.", "code": "public class ZipPostProcessor extends AbstractDeflaterPostProcessor {\n\tprotected OutputStream getCompressorStream(OutputStream zipped); // Get the stream.\n\tprotected String getEncoding(); // Get the encoding.\n}"}
{"index": 14645, "repo": "spring-cloud-stream-4.0.0", "des": "Provisioning SPI that allows the users to provision destinations such as queues and topics.", "code": "public interface ProvisioningProvider<C extends ConsumerProperties,P extends ProducerProperties> {\n\tConsumerDestination provisionConsumerDestination(String name, String group, C properties); // Creates the middleware destination on the physical broker for the consumer to consume data.\n\tProducerDestination provisionProducerDestination(String name, P properties); // Creates middleware destination on the physical broker for the producer to send data.\n}"}
{"index": 12263, "repo": "jena-core-4.9.0", "des": "the factory to create/return built-in schema 1.0 DVs and create user-defined DVs @xerces.internal", "code": "public class SchemaDVFactoryImpl extends BaseSchemaDVFactory {\n\tXSSimpleType getBuiltInType(String name); // Get a built-in simple type of the given name REVISIT: its still not decided within the Schema WG how to define the ur-types and if all simple types should be derived from a complex type, so as of now we ignore the fact that anySimpleType is derived from anyType, and pass 'null' as the base of anySimpleType.\n\tSymbolHash getBuiltInTypes(); // get all built-in simple types, which are stored in a hashtable keyed by the name\n}"}
{"index": 9948, "repo": "iceberg-api-1.3.0", "des": "A snapshot of the data in a table at a point in time.", "code": "Interface Snapshot {\n\tjava.lang.Iterable<DataFile> addedDataFiles(FileIO io); // Return all data files added to the table in this snapshot.\n\tdefault java.lang.Iterable<DeleteFile> addedDeleteFiles(FileIO io); // Return all delete files added to the table in this snapshot.\n\tjava.util.List<ManifestFile> allManifests(FileIO io); // Return all ManifestFile instances for either data or delete manifests in this snapshot.\n\tjava.util.List<ManifestFile> dataManifests(FileIO io); // Return a ManifestFile for each data manifest in this snapshot.\n\tjava.util.List<ManifestFile> deleteManifests(FileIO io); // Return a ManifestFile for each delete manifest in this snapshot.\n\tjava.lang.String manifestListLocation(); // Return the location of this snapshot's manifest list, or null if it is not separate.\n\tjava.lang.String operation(); // Return the name of the data operation that produced this snapshot.\n\tjava.lang.Long parentId(); // Return this snapshot's parent ID or null.\n\tjava.lang.Iterable<DataFile> removedDataFiles(FileIO io); // Return all data files removed from the table in this snapshot.\n\tdefault java.lang.Iterable<DeleteFile> removedDeleteFiles(FileIO io); // Return all delete files removed from the table in this snapshot.\n\tdefault java.lang.Integer schemaId(); // Return the id of the schema used when this snapshot was created, or null if this information is not available.\n\tlong sequenceNumber(); // Return this snapshot's sequence number.\n\tlong snapshotId(); // Return this snapshot's ID.\n\tjava.util.Map<java.lang.String,java.lang.String> summary(); // Return a string map of summary data for the operation that produced this snapshot.\n\tlong timestampMillis(); // Return this snapshot's timestamp.\n}"}
{"index": 13254, "repo": "spring-test-6.0.11", "des": "Collection of utility methods for working with Spring's core testing annotations.", "code": "public abstract class TestAnnotationUtils extends Object {\n\tstatic int getRepeatCount(Method method); // Get the repeat count configured via the @Repeat annotation on the supplied method.\n\tstatic long getTimeout(Method method); // Get the timeout configured via the @Timed annotation on the supplied method.\n}"}
{"index": 18170, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "A \"parameter object\" for RegionFactory.buildDomainDataRegion(org.hibernate.cache.cfg.spi.DomainDataRegionConfig, org.hibernate.cache.cfg.spi.DomainDataRegionBuildingContext) calls, giving it access to information it needs.", "code": "Interface DomainDataRegionBuildingContext {\n\tCacheKeysFactory getEnforcedCacheKeysFactory(); // The CacheKeyFactory explicitly specified as part of the bootstrap by the user, by some \"container\", etc.\n\tSessionFactoryImplementor getSessionFactory(); // Access to the SessionFactory for which a Region is being built.\n}"}
{"index": 15759, "repo": "camel-api-4.0.0-RC1", "des": "An interface to represent an object that can be resolved as a producer Endpoint", "code": "public interface EndpointProducerResolver {\n\tEndpoint resolve(CamelContext context); // Resolves this object as an endpoint.\n\t<T extends Endpoint>T resolve(CamelContext context, Class<T> endpointType); // Resolves this object as an endpoint.\n}"}
{"index": 347, "repo": "phoenix-core-5.1.3", "des": "Global memory manager to track course grained memory usage across all requests.", "code": "Class GlobalMemoryManager {\n\tMemoryManager.MemoryChunk allocate(long nBytes); // Equivalent to calling MemoryManager.allocate(long, long) where minBytes and reqBytes being the same.\n\tMemoryManager.MemoryChunk allocate(long minBytes, long reqBytes); // Allocate up to reqBytes of memory, dialing the amount down to minBytes if full amount is not available.\n\tlong getAvailableMemory(); // Get the amount of available memory (in bytes) not yet allocated.\n\tlong getMaxMemory(); // Get the total amount of memory (in bytes) that may be allocated.\n}"}
{"index": 16859, "repo": "spring-amqp-3.0.6", "des": "Spring Rabbit MessageConverter that uses a Marshaller and Unmarshaller.", "code": "public class MarshallingMessageConverter extends AbstractMessageConverter implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected Message createMessage(Object object, MessageProperties messageProperties); // Marshals the given object to a Message.\n\tObject fromMessage(Message message); // Unmarshals the given Message into an object.\n\tvoid setContentType(String contentType); // Set the contentType to be used by this message converter.\n\tvoid setMarshaller(org.springframework.oxm.Marshaller marshaller); // Set the Marshaller to be used by this message converter.\n\tvoid setUnmarshaller(org.springframework.oxm.Unmarshaller unmarshaller); // Set the Unmarshaller to be used by this message converter.\n}"}
{"index": 865, "repo": "ignite-core-2.15.0", "des": "Convenience class representing mutable tuple of five values.", "code": "Class GridTuple5<V1,V2,V3,V4,V5> {\n\tObject clone();\n\tboolean equals(Object o);\n\tV1 get1(); // Gets first value.\n\tV2 get2(); // Gets second value.\n\tV3 get3(); // Gets third value.\n\tV4 get4(); // Gets forth value.\n\tV5 get5(); // Gets fifth value.\n\tIterator<Object> iterator();\n\tvoid readExternal(ObjectInput in);\n\tvoid set(V1 val1, V2 val2, V3 val3, V4 val4, V5 val5); // Sets all values.\n\tvoid set1(V1 v1); // Sets first value.\n\tvoid set2(V2 v2); // Sets second value.\n\tvoid set3(V3 v3); // Sets third value.\n\tvoid set4(V4 v4); // Sets forth value.\n\tvoid set5(V5 v5); // Sets fifth value.\n\tvoid writeExternal(ObjectOutput out);\n}"}
{"index": 3485, "repo": "mahout-mr-0.13.0", "des": "Does cross-fold validation of log-likelihood and AUC on several online logistic regression models.", "code": "Class CrossFoldLearner {\n\tvoid addModel(OnlineLogisticRegression model);\n\tCrossFoldLearner alpha(double alpha);\n\tdouble auc();\n\tVector classify(Vector instance); // Compute and return a vector containing n-1 scores, where n is equal to numCategories(), given an input vector instance.\n\tVector classifyNoLink(Vector instance); // Compute and return a vector of scores before applying the inverse link function.\n\tdouble classifyScalar(Vector instance); // Classifies a vector in the special case of a binary classifier where AbstractVectorClassifier.classify(Vector) would return a vector with only one element.\n\tvoid close(); // Prepares the classifier for classification and deallocates any temporary data structures.\n\tCrossFoldLearner copy();\n\tCrossFoldLearner decayExponent(double x);\n\tOnlineAuc getAucEvaluator();\n\tdouble getLogLikelihood();\n\tList<OnlineLogisticRegression> getModels();\n\tint getNumFeatures();\n\tdouble[] getParameters();\n\tPriorFunction getPrior();\n\tint getRecord();\n\tCrossFoldLearner lambda(double v);\n\tCrossFoldLearner learningRate(double x);\n\tdouble logLikelihood();\n\tint numCategories(); // Returns the number of categories that a target variable can be assigned to.\n\tdouble percentCorrect();\n\tvoid readFields(DataInput in);\n\tvoid resetLineCounter();\n\tvoid setAucEvaluator(OnlineAuc auc);\n\tvoid setLogLikelihood(double logLikelihood);\n\tvoid setNumFeatures(int numFeatures);\n\tvoid setParameters(double[] parameters);\n\tvoid setPrior(PriorFunction prior);\n\tvoid setRecord(int record);\n\tvoid setWindowSize(int windowSize);\n\tCrossFoldLearner stepOffset(int x);\n\tvoid train(int actual, Vector instance); // Updates the model using a particular target variable value and a feature vector.\n\tvoid train(long trackingKey, int actual, Vector instance); // Updates the model using a particular target variable value and a feature vector.\n\tvoid train(long trackingKey, String groupKey, int actual, Vector instance); // Updates the model using a particular target variable value and a feature vector.\n\tboolean validModel();\n\tvoid write(DataOutput out);\n}"}
{"index": 18340, "repo": "opencms-core-15.0", "des": "Contains information about a resource that is direct edited.", "code": "Class CmsDirectEditResourceInfo {\n\tCmsLock getLock(); // Returns the lock on the direct edit resource.\n\tCmsDirectEditPermissions getPermissions(); // Returns the direct edit permissions of the resource.\n\tCmsResource getResource(); // Returns the resource that is to be direct edited.\n}"}
{"index": 14592, "repo": "spring-security-web-6.1.2", "des": "An implementation of the ServerCsrfTokenRequestHandler interface that is capable of making the CsrfToken available as an exchange attribute and resolving the token value as either a form data value or header of the request.", "code": "public class ServerCsrfTokenRequestAttributeHandler extends Object implements ServerCsrfTokenRequestHandler {\n\tvoid handle(org.springframework.web.server.ServerWebExchange exchange, reactor.core.publisher.Mono<CsrfToken> csrfToken); // Handles a request using a CsrfToken.\n\treactor.core.publisher.Mono<String> resolveCsrfTokenValue(org.springframework.web.server.ServerWebExchange exchange, CsrfToken csrfToken); // Returns the token value resolved from the provided ServerWebExchange and CsrfToken or Mono.empty() if not available.\n\tvoid setTokenFromMultipartDataEnabled(boolean tokenFromMultipartDataEnabled); // Specifies if the ServerCsrfTokenRequestResolver should try to resolve the actual CSRF token from the body of multipart data requests.\n}"}
{"index": 8488, "repo": "commons-io-2.13.0", "des": "Throws an IOException on all attempts to write with close() implemented as a noop.", "code": "Class ClosedWriter {\n\tvoid close();\n\tvoid flush(); // Throws an IOException to indicate that the stream is closed.\n\tvoid write(char[] cbuf, int off, int len); // Throws an IOException to indicate that the writer is closed.\n}"}
{"index": 4988, "repo": "commons-collections-3.2.2", "des": "Predicate implementation that returns true if the input is the same object as the one stored in this predicate by equals.", "code": "Class EqualPredicate {\n\tboolean evaluate(Object object); // Evaluates the predicate returning true if the input equals the stored value.\n\tstatic Predicate getInstance(Object object); // Factory to create the identity predicate.\n\tObject getValue(); // Gets the value.\n}"}
{"index": 16131, "repo": "spring-data-cassandra-4.1.2", "des": "Default implementation of a MappingContext for Cassandra using CassandraPersistentEntity and CassandraPersistentProperty as primary abstractions.", "code": "public class CassandraMappingContext extends AbstractMappingContext<BasicCassandraPersistentEntity<?>,CassandraPersistentProperty> implements ApplicationContextAware, BeanClassLoaderAware {\n\tprotected Optional<BasicCassandraPersistentEntity<?>> addPersistentEntity(TypeInformation<?> typeInformation);\n\tprotected <T> BasicCassandraPersistentEntity<T> createPersistentEntity(TypeInformation<T> typeInformation);\n\tprotected CassandraPersistentProperty createPersistentProperty(Property property, BasicCassandraPersistentEntity<?> owner, SimpleTypeHolder simpleTypeHolder);\n\tcom.datastax.oss.driver.api.core.type.codec.registry.CodecRegistry getCodecRegistry(); // Deprecated. since 3.0.\n\tCustomConversions getCustomConversions(); // Deprecated. since 3.0.\n\tCollection<BasicCassandraPersistentEntity<?>> getTableEntities(); // Returns only Table entities.\n\tCollection<CassandraPersistentEntity<?>> getUserDefinedTypeEntities(); // Returns only those entities representing a user defined type.\n\tUserTypeResolver getUserTypeResolver(); // Deprecated. since 3.0.\n\tCassandraPersistentEntityMetadataVerifier getVerifier();\n\tvoid initialize();\n\tvoid setApplicationContext(ApplicationContext applicationContext);\n\tvoid setBeanClassLoader(ClassLoader beanClassLoader);\n\tvoid setCodecRegistry(com.datastax.oss.driver.api.core.type.codec.registry.CodecRegistry codecRegistry); // Deprecated. since 3.0.\n\tvoid setCustomConversions(CustomConversions customConversions); // Deprecated. since 3.0.\n\tvoid setMapping(Mapping mapping); // Sets the Mapping.\n\tvoid setNamingStrategy(NamingStrategy namingStrategy); // Set the NamingStrategy to use.\n\tvoid setTupleTypeFactory(TupleTypeFactory tupleTypeFactory); // Deprecated. since 3.0.\n\tvoid setUserTypeResolver(UserTypeResolver userTypeResolver); // Deprecated. since 3.0.\n\tvoid setVerifier(CassandraPersistentEntityMetadataVerifier verifier);\n\tprotected boolean shouldCreatePersistentEntityFor(TypeInformation<?> typeInfo);\n\tboolean usesTable(com.datastax.oss.driver.api.core.CqlIdentifier name); // Returns whether this mapping context has any entities mapped to the given table.\n\tboolean usesUserType(com.datastax.oss.driver.api.core.CqlIdentifier name); // Returns whether this mapping context has any entities using the given user type.\n}"}
{"index": 17668, "repo": "spring-web-6.0.11", "des": "Extends NativeWebRequest with methods for asynchronous request processing.", "code": "public interface AsyncWebRequest extends NativeWebRequest {\n\tvoid addCompletionHandler(Runnable runnable); // Add a handler to invoke when request processing completes.\n\tvoid addErrorHandler(Consumer<Throwable> exceptionHandler); // Add a handler to invoke when an error occurred while concurrent handling of a request.\n\tvoid addTimeoutHandler(Runnable runnable); // Add a handler to invoke when concurrent handling has timed out.\n\tvoid dispatch(); // Dispatch the request to the container in order to resume processing after concurrent execution in an application thread.\n\tboolean isAsyncComplete(); // Whether asynchronous processing has completed.\n\tboolean isAsyncStarted(); // Whether the request is in async mode following a call to startAsync().\n\tvoid setTimeout(Long timeout); // Set the time required for concurrent handling to complete.\n\tvoid startAsync(); // Mark the start of asynchronous request processing so that when the main processing thread exits, the response remains open for further processing in another thread.\n}"}
{"index": 7215, "repo": "calcite-core-1.34.0", "des": "Defines the keywords that can occur immediately after the \"INSERT\" keyword.", "code": "Enum SqlInsertKeyword {\n\tstatic SqlInsertKeyword valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic SqlInsertKeyword[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3647, "repo": "hive-serde-4.0.0-alpha-2", "des": "RegexSerDe uses regular expression (regex) to deserialize data.", "code": "Class RegexSerDe {\n\tObject deserialize(org.apache.hadoop.io.Writable blob); // Deserialize an object out of a Writable blob.\n\tObjectInspector getObjectInspector(); // Get the object inspector that can be used to navigate through the internal structure of the Object returned from deserialize(...).\n\tClass<? extends org.apache.hadoop.io.Writable> getSerializedClass(); // Returns the Writable class that would be returned by the serialize method.\n\tvoid initialize(org.apache.hadoop.conf.Configuration configuration, Properties tableProperties, Properties partitionProperties); // Initialize the SerDe.\n\torg.apache.hadoop.io.Writable serialize(Object obj, ObjectInspector objInspector); // Serialize an object by navigating inside the Object with the ObjectInspector.\n}"}
{"index": 1884, "repo": "hadoop-hdfs-3.3.6", "des": "A one-shot class responsible for loading an image.", "code": "Class FSImageFormat.Loader {\n\torg.apache.hadoop.hdfs.server.namenode.FSDirectory getFSDirectoryInLoading();\n\torg.apache.hadoop.io.MD5Hash getLoadedImageMd5(); // Return the MD5 checksum of the image that has been loaded.\n\tlong getLoadedImageTxId();\n\torg.apache.hadoop.hdfs.server.namenode.snapshot.Snapshot getSnapshot(DataInput in);\n\tvoid load(File curFile);\n\torg.apache.hadoop.hdfs.server.namenode.INodeDirectoryAttributes loadINodeDirectoryAttributes(DataInput in);\n\torg.apache.hadoop.hdfs.server.namenode.INodeFileAttributes loadINodeFileAttributes(DataInput in); // Load INodeFileAttributes.\n\torg.apache.hadoop.hdfs.server.namenode.INode loadINodeWithLocalName(boolean isSnapshotINode, DataInput in, boolean updateINodeMap);\n\torg.apache.hadoop.hdfs.server.namenode.INode loadINodeWithLocalName(boolean isSnapshotINode, DataInput in, boolean updateINodeMap, StartupProgress.Counter counter);\n\tvoid updateBlocksMap(org.apache.hadoop.hdfs.server.namenode.INodeFile file);\n}"}
{"index": 5227, "repo": "druid-processing-26.0.0", "des": "Base interface of Druid expression language abstract syntax tree nodes.", "code": "Interface Expr {\n\tExpr.BindingAnalysis analyzeInputs(); // Examine the usage of IdentifierExpr children of an Expr, constructing a Expr.BindingAnalysis\n\tdefault <T> ExprVectorProcessor<T> asVectorProcessor(Expr.VectorInputBindingInspector inspector); // Builds a 'vectorized' expression processor, that can operate on batches of input values for use in vectorized query engines.\n\tdefault boolean canVectorize(Expr.InputBindingInspector inspector); // Check if an expression can be 'vectorized', for a given set of inputs.\n\tExprEval eval(Expr.ObjectBinding bindings); // Evaluate the Expr with the bindings which supply IdentifierExpr with their values, producing an ExprEval with the result.\n\tdefault String getBindingIfIdentifier(); // Returns the string key to use to get a value from Expr.ObjectBinding of an IdentifierExpr, else null.\n\tdefault byte[] getCacheKey(); // Get a byte array used as a cache key.\n\tdefault org.apache.druid.math.expr.IdentifierExpr getIdentifierExprIfIdentifierExpr(); // Returns an IdentifierExpr if it is one, else null\n\tdefault String getIdentifierIfIdentifier(); // Returns the string identifier of an IdentifierExpr, else null.\n\tdefault Object getLiteralValue(); // Returns the value of expr if expr is a literal, or throws an exception otherwise.\n\tdefault ExpressionType getOutputType(Expr.InputBindingInspector inspector); // Given an Expr.InputBindingInspector, compute what the output ExpressionType will be for this expression.\n\tdefault boolean isIdentifier();\n\tdefault boolean isLiteral(); // Indicates expression is a constant whose literal value can be extracted by getLiteralValue(), making evaluating with arguments and bindings unecessary\n\tdefault boolean isNullLiteral();\n\tString stringify(); // Convert the Expr back into parseable string that when parsed with Parser.parse(String, ExprMacroTable) will produce an equivalent Expr.\n\tExpr visit(Expr.Shuttle shuttle); // Programatically rewrite the Expr tree with a Expr.Shuttle.\n}"}
{"index": 15440, "repo": "pulsar-client-api-3.0.0", "des": "Internal utility methods for filtering and mapping Properties objects.", "code": "public class PropertiesUtils extends Object {\n\tstatic Map<String,Object> filterAndMapProperties(Properties props, String prefix); // Filters the Properties object so that only properties with the configured prefix are retained, and then removes that prefix and puts the key value pairs into the result map.\n\tstatic Map<String,Object> filterAndMapProperties(Properties props, String srcPrefix, String targetPrefix); // Filters the Properties object so that only properties with the configured prefix are retained, and then replaces the srcPrefix with the targetPrefix when putting the key value pairs in the resulting map.\n}"}
{"index": 6376, "repo": "spring-data-solr-4.3.15", "des": "Specialization of StatsResult to represent statistic information for a field.", "code": "Interface FieldStatsResult {\n\tLong getDistinctCount(); // Return the count of distinct values for this field.\n\tCollection<Object> getDistinctValues(); // Return the distinct values for this field.\n\tMap<String,StatsResult> getFacetStatsResult(Field field); // Return a map of value associated to its statistics for a given field.\n\tMap<String,StatsResult> getFacetStatsResult(String fieldName); // Return a map of value associated to its statistics for a given field name.\n\tMap<String,Map<String,StatsResult>> getFacetStatsResults(); // Return a map of fieldName associated to value facets for the given FieldStatsResult.\n}"}
{"index": 9407, "repo": "hadoop-yarn-api-3.3.6", "des": "ResourceAllocationRequest represents an allocation made for a reservation for the current state of the plan.", "code": "Class ResourceAllocationRequest {\n\tabstract Resource getCapability(); // Get the allocated resource.\n\tabstract long getEndTime(); // Get the end time that the resource is allocated.\n\tabstract long getStartTime(); // Get the start time that the resource is allocated.\n\tstatic ResourceAllocationRequest newInstance(long startTime, long endTime, Resource capability);\n\tabstract void setCapability(Resource resource); // Set the allocated resource.\n\tabstract void setEndTime(long endTime); // Set the end time that the resource is allocated.\n\tabstract void setStartTime(long startTime); // Set the start time that the resource is allocated.\n}"}
{"index": 673, "repo": "ignite-core-2.15.0", "des": "Class is responsible to create and manage instances of distributed latches Latch.", "code": "Class ExchangeLatchManager {\n\tboolean canSkipJoiningNodes(AffinityTopologyVersion topVer); // Checks that latch manager can use V2 protocol and skip joining nodes from latch participants.\n\tvoid dropClientLatches(AffinityTopologyVersion topVer); // Drops client latches created by getOrCreate(String, AffinityTopologyVersion).\n\tLatch getOrCreate(String id, AffinityTopologyVersion topVer); // Creates new latch with specified id and topVer or returns existing latch.\n}"}
{"index": 12440, "repo": "drill-common-1.21.1", "des": "Enum that contains two boolean types: TRUE and FALSE.", "code": "public enum BooleanType extends Enum<BooleanType> {\n\tstatic boolean fromString(String value); // Runtime form of Boolean conversion: allows any of the valid \"true\" values; assumes all other values are false.\n\tstatic BooleanType get(String literal); // Finds boolean by passed literal.\n\tString[] getLiterals();\n\tint getNumericValue();\n\tstatic BooleanType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic BooleanType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13739, "repo": "spring-webmvc-6.0.11", "des": "Extension of LocaleResolver that adds support for a rich locale context (potentially including locale and time zone information).", "code": "public interface LocaleContextResolver extends LocaleResolver {\n\tdefault Locale resolveLocale(HttpServletRequest request); // Default implementation of LocaleResolver.resolveLocale(HttpServletRequest) that delegates to resolveLocaleContext(HttpServletRequest), falling back to ServletRequest.getLocale() if necessary.\n\torg.springframework.context.i18n.LocaleContext resolveLocaleContext(HttpServletRequest request); // Resolve the current locale context via the given request.\n\tdefault void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale); // Default implementation of LocaleResolver.setLocale(HttpServletRequest, HttpServletResponse, Locale) that delegates to setLocaleContext(HttpServletRequest, HttpServletResponse, LocaleContext), using a SimpleLocaleContext.\n\tvoid setLocaleContext(HttpServletRequest request, HttpServletResponse response, org.springframework.context.i18n.LocaleContext localeContext); // Set the current locale context to the given one, potentially including a locale with associated time zone information.\n}"}
{"index": 12149, "repo": "jena-core-4.9.0", "des": "A property restriction that requires the named property to have have at most the given number of values for a given instance to be a member of the class defined by the restriction.", "code": "public interface MaxCardinalityRestriction extends Restriction {\n\tint getMaxCardinality(); // Answer the maximum cardinality of the restricted property.\n\tboolean hasMaxCardinality(int cardinality); // Answer true if this property restriction has the given maximum cardinality.\n\tvoid removeMaxCardinality(int cardinality); // Remove the statement that this restriction has the given maximum cardinality for the restricted property.\n\tvoid setMaxCardinality(int cardinality); // Assert that this restriction restricts the property to have the given maximum cardinality.\n}"}
{"index": 18174, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Descriptor for the identifier of an entity as a FetchSource (which allows for key-many-to-one handling).", "code": "Interface EntityIdentifierDescription {\n\tboolean hasBidirectionalEntityReferences(); // Can this EntityIdentifierDescription be treated as a FetchSource and if so does it have any bidirectional entity references?\n\tboolean hasFetches(); // Can this EntityIdentifierDescription be treated as a FetchSource and if so does it have any fetches?\n}"}
{"index": 222, "repo": "commons-collections4-4.4", "des": "A Map implementation that allows mappings to be removed by the garbage collector and matches keys and values based on == not equals().", "code": "Class ReferenceIdentityMap<K,V> {\n\tprotected int hash(Object key); // Gets the hash code for the key specified.\n\tprotected int hashEntry(Object key, Object value); // Gets the hash code for a MapEntry.\n\tprotected boolean isEqualKey(Object key1, Object key2); // Compares two keys for equals.\n\tprotected boolean isEqualValue(Object value1, Object value2); // Compares two values for equals.\n}"}
{"index": 14066, "repo": "spring-context-support-6.0.11", "des": "Simple implementation of the Quartz Job interface, applying the passed-in JobDataMap and also the SchedulerContext as bean property values.", "code": "public abstract class QuartzJobBean extends Object implements Job {\n\tfinal void execute(JobExecutionContext context); // This implementation applies the passed-in job data map as bean property values, and delegates to executeInternal afterwards.\n\tprotected abstract void executeInternal(JobExecutionContext context); // Execute the actual job.\n}"}
{"index": 13971, "repo": "spring-webflux-6.0.11", "des": "WebSocketClient implementation for use with the Jakarta WebSocket API.", "code": "public class StandardWebSocketClient extends Object implements WebSocketClient {\n\tprotected org.springframework.core.io.buffer.DataBufferFactory bufferFactory();\n\tprotected StandardWebSocketSession createWebSocketSession(Session session, HandshakeInfo info, reactor.core.publisher.Sinks.Empty<Void> completionSink);\n\treactor.core.publisher.Mono<Void> execute(URI url, org.springframework.http.HttpHeaders headers, WebSocketHandler handler); // A variant of WebSocketClient.execute(URI, WebSocketHandler) with custom headers.\n\treactor.core.publisher.Mono<Void> execute(URI url, WebSocketHandler handler); // Execute a handshake request to the given url and handle the resulting WebSocket session with the given handler.\n\tWebSocketContainer getWebSocketContainer(); // Return the configured WebSocketContainer to use.\n}"}
{"index": 924, "repo": "ignite-core-2.15.0", "des": "Set implementation based on on In-Memory Data Grid.", "code": "Interface IgniteSet<T> {\n\tboolean add(T t);\n\tboolean addAll(Collection<? extends T> c);\n\t<R> R affinityCall(IgniteCallable<R> job); // Executes given job on collocated set on the node where the set is located (a.k.a. affinity co-location).\n\tvoid affinityRun(IgniteRunnable job); // Executes given job on collocated set on the node where the set is located (a.k.a. affinity co-location).\n\tvoid clear();\n\tvoid close(); // Removes this set.\n\tboolean collocated(); // Returns true if this set can be kept on the one node only.\n\tboolean contains(Object o);\n\tboolean containsAll(Collection<?> c);\n\tboolean isEmpty();\n\tIterator<T> iterator();\n\tString name(); // Gets set name.\n\tboolean remove(Object o);\n\tboolean removeAll(Collection<?> c);\n\tboolean removed(); // Gets status of set.\n\tboolean retainAll(Collection<?> c);\n\tint size();\n\tObject[] toArray();\n\t<T1> T1[] toArray(T1[] a);\n\t<T1> IgniteSet<T1> withKeepBinary(); // Returns Ignite set that operates on binary objects without deserialization.\n}"}
{"index": 14510, "repo": "spring-security-web-6.1.2", "des": "A CSRF token that is used to protect against CSRF attacks.", "code": "public final class DefaultCsrfToken extends Object implements CsrfToken {\n\tString getHeaderName(); // Gets the HTTP header that the CSRF is populated on the response and can be placed on requests instead of the parameter.\n\tString getParameterName(); // Gets the HTTP parameter name that should contain the token.\n\tString getToken(); // Gets the token value.\n}"}
{"index": 16426, "repo": "spring-batch-infrastructure-5.0.2", "des": "Interface for batch completion policies, to enable batch operations to strategise normal completion conditions.", "code": "public interface CompletionPolicy {\n\tboolean isComplete(RepeatContext context); // Allow policy to signal completion according to internal state, without having to wait for the callback to complete.\n\tboolean isComplete(RepeatContext context, RepeatStatus result); // Determine whether a batch is complete given the latest result from the callback.\n\tRepeatContext start(RepeatContext parent); // Create a new context for the execution of a batch.\n\tvoid update(RepeatContext context); // Give implementations the opportunity to update the state of the current batch.\n}"}
{"index": 15772, "repo": "camel-api-4.0.0-RC1", "des": "Configuration for access to GCP Secret Manager.", "code": "public class GcpVaultConfiguration extends VaultConfiguration {\n\tString getProjectId();\n\tlong getRefreshPeriod();\n\tString getSecrets();\n\tString getServiceAccountKey();\n\tString getSubscriptionName();\n\tboolean isRefreshEnabled();\n\tboolean isUseDefaultInstance();\n\tvoid setProjectId(String projectId); // The GCP Project ID\n\tvoid setRefreshEnabled(boolean refreshEnabled); // Whether to automatically reload Camel upon secrets being updated in AWS.\n\tvoid setRefreshPeriod(long refreshPeriod); // The period (millis) between checking Google for updated secrets.\n\tvoid setSecrets(String secrets); // Specify the secret names (or pattern) to check for updates.\n\tvoid setServiceAccountKey(String serviceAccountKey); // The Service Account Key location\n\tvoid setSubscriptionName(String subscriptionName); // Define the Google Pubsub subscription Name to be used when checking for updates\n\tvoid setUseDefaultInstance(boolean useDefaultInstance); // Define if we want to use the GCP Client Default Instance or not\n}"}
{"index": 1980, "repo": "hive-exec-4.0.0-alpha-2", "des": "Implementation of SecretSource which loads secrets from AWS Secrets Manager.", "code": "Class AWSSecretsManagerSecretSource {\n\tvoid close(); // Clean the resources in the class.\n\tString getSecret(URI uri); // This load the secret from aws-secrets manager.\n\tString getURIScheme(); // The scheme string which this implementation will handle.\n}"}
{"index": 8286, "repo": "spring-ws-3.0.10.RELEASE", "des": "Exception resolver that allows for mapping exception class names to SOAP Faults.", "code": "Class SoapFaultMappingExceptionResolver {\n\tprotected int getDepth(String exceptionMapping, Exception ex); // Return the depth to the superclass matching.\n\tprotected SoapFaultDefinition getFaultDefinition(Object endpoint, Exception ex); // Template method that returns the SoapFaultDefinition for the given exception.\n\tvoid setExceptionMappings(Properties mappings); // Set the mappings between exception class names and SOAP Faults.\n}"}
{"index": 17907, "repo": "spring-web-6.0.11", "des": "HttpMessageWriter for \"text/event-stream\" responses.", "code": "public class ServerSentEventHttpMessageWriter extends Object implements HttpMessageWriter<Object> {\n\tboolean canWrite(org.springframework.core.ResolvableType elementType, MediaType mediaType); // Whether the given object type is supported by this writer.\n\torg.springframework.core.codec.Encoder<?> getEncoder(); // Return the configured Encoder, if any.\n\tList<MediaType> getWritableMediaTypes(); // Return the list of media types supported by this Writer.\n\treactor.core.publisher.Mono<Void> write(Publisher<?> input, org.springframework.core.ResolvableType actualType, org.springframework.core.ResolvableType elementType, MediaType mediaType, ServerHttpRequest request, ServerHttpResponse response, Map<String,Object> hints); // Server-side only alternative to HttpMessageWriter.write(Publisher, ResolvableType, MediaType, ReactiveHttpOutputMessage, Map) with additional context available.\n\treactor.core.publisher.Mono<Void> write(Publisher<?> input, org.springframework.core.ResolvableType elementType, MediaType mediaType, ReactiveHttpOutputMessage message, Map<String,Object> hints); // Write a given stream of object to the output message.\n}"}
{"index": 6349, "repo": "curator-framework-5.5.0", "des": "Version of ListenerManager that supports mapping/wrapping of listeners.", "code": "Class MappingListenerManager<K,V> {\n\tvoid addListener(K listener); // Add the given listener.\n\tvoid addListener(K listener, Executor executor); // Add the given listener.\n\tvoid clear(); // Remove all listeners\n\tvoid forEach(Consumer<V> function); // Utility - apply the given function to each listener.\n\tstatic <K,V> ListenerManager<K,V> mapping(Function<K,V> mapper); // Returns a new container that wraps listeners using the given mapper\n\tvoid removeListener(K listener); // Remove the given listener\n\tint size(); // Return the number of listeners\n}"}
{"index": 17028, "repo": "spring-integration-core-6.1.2", "des": "Called by subclasses in doInvoke() to proceed() the invocation.", "code": "protected static interface AbstractRequestHandlerAdvice.ExecutionCallback {\n\tObject cloneAndExecute(); // Call this when it is necessary to clone the invocation before calling proceed() - such as when the invocation might be called multiple times - for example in a retry advice.\n\tObject execute(); // Call this for a normal invocation.proceed().\n}"}
{"index": 2582, "repo": "exoplayer-r2.3.1", "des": "Receives track level data extracted by an Extractor.", "code": "Interface TrackOutput {\n\tvoid format(Format format); // Called when the Format of the track has been extracted from the stream.\n\tint sampleData(ExtractorInput input, int length, boolean allowEndOfInput); // Called to write sample data to the output.\n\tvoid sampleData(ParsableByteArray data, int length); // Called to write sample data to the output.\n\tvoid sampleMetadata(long timeUs, int flags, int size, int offset, byte[] encryptionKey); // Called when metadata associated with a sample has been extracted from the stream.\n}"}
{"index": 12795, "repo": "spring-data-mongodb-4.1.2", "des": "MongoJsonSchemaCreator extracts the MongoJsonSchema for a given Class by applying the following mapping rules.", "code": "public interface MongoJsonSchemaCreator {\n\tstatic MongoJsonSchemaCreator create(); // Creates a new MongoJsonSchemaCreator that does not consider potential extensions - suitable for testing.\n\tstatic MongoJsonSchemaCreator create(MappingContext mappingContext); // Creates a new MongoJsonSchemaCreator that is aware of type mappings and potential extensions.\n\tstatic MongoJsonSchemaCreator create(MongoConverter mongoConverter); // Creates a new MongoJsonSchemaCreator that is aware of conversions applied by the given MongoConverter.\n\tMongoJsonSchema createSchemaFor(Class<?> type); // Create the MongoJsonSchema for the given type.\n\tstatic Predicate<MongoJsonSchemaCreator.JsonSchemaPropertyContext> encryptedOnly(); // A filter Predicate that matches encrypted properties and those having nested ones.\n\tMongoJsonSchemaCreator filter(Predicate<MongoJsonSchemaCreator.JsonSchemaPropertyContext> filter); // Filter matching properties.\n\tdefault MongoJsonSchema mergedSchemaFor(Class<?>... types); // Create a merged MongoJsonSchema out of the individual schemas of the given types by merging their properties into one large schema.\n\tMongoJsonSchemaCreator.PropertySpecifier property(String path); // Entry point to specify additional behavior for a given path.\n}"}
{"index": 2175, "repo": "hive-exec-4.0.0-alpha-2", "des": "This class contains the lineage information that is passed to the PreExecution hook.", "code": "Class LineageInfo {\n\tvoid clear();\n\tSet<Map.Entry<LineageInfo.DependencyKey,LineageInfo.Dependency>> entrySet(); // Gets the entry set on this structure.\n\tLineageInfo.Dependency getDependency(LineageInfo.DataContainer dc, org.apache.hadoop.hive.metastore.api.FieldSchema col); // Gets the dependency for a table, column tuple.\n\tvoid putDependency(LineageInfo.DataContainer dc, org.apache.hadoop.hive.metastore.api.FieldSchema col, LineageInfo.Dependency dep); // Puts the dependency for a table, column tuple.\n}"}
{"index": 10484, "repo": "groovy-all-4.0.13", "des": "This class is a general adapter to adapt a map of closures to any Java interface.", "code": "public class ConvertedMap extends ConversionHandler {\n\tprotected boolean checkMethod(Method method);\n\tObject invokeCustom(Object proxy, Method method, Object[] args); // This method is called for all Methods not defined on Object.\n\tstatic boolean isCoreObjectMethod(Method method); // Checks whether a method is a core method from java.lang.Object.\n}"}
{"index": 5862, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Utility class to validate the inputs to FederationPolicyStore, allows a fail fast mechanism for invalid user inputs.", "code": "Class FederationPolicyStoreInputValidator {\n\tstatic void validate(GetSubClusterPolicyConfigurationRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n\tstatic void validate(SetSubClusterPolicyConfigurationRequest request); // Quick validation on the input to check some obvious fail conditions (fail fast).\n}"}
{"index": 2411, "repo": "spring-session-1.3.5.RELEASE", "des": "A HttpSessionStrategy that uses a cookie to obtain the session from.", "code": "Class CookieHttpSessionStrategy {\n\tjava.lang.String encodeURL(java.lang.String url, java.lang.String sessionAlias); // Provides the ability to encode the URL for a given session alias.\n\tjava.lang.String getCurrentSessionAlias(HttpServletRequest request); // Gets the current session's alias from the HttpServletRequest.\n\tjava.lang.String getNewSessionAlias(HttpServletRequest request); // Gets a new and unique Session alias.\n\tjava.lang.String getRequestedSessionId(HttpServletRequest request); // Obtains the requested session id from the provided HttpServletRequest.\n\tjava.util.Map<java.lang.String,java.lang.String> getSessionIds(HttpServletRequest request); // Gets a mapping of the session alias to the session id from the HttpServletRequest.\n\tvoid onInvalidateSession(HttpServletRequest request, HttpServletResponse response); // This method is invoked when a session is invalidated and should inform a client that the session id is no longer valid.\n\tvoid onNewSession(Session session, HttpServletRequest request, HttpServletResponse response); // This method is invoked when a new session is created and should inform a client what the new session id is.\n\tvoid setCookieSerializer(CookieSerializer cookieSerializer); // Sets the CookieSerializer to be used.\n\tvoid setDeserializationDelimiter(java.lang.String delimiter); // Sets the delimiter between a session alias and a session id when deserializing a cookie.\n\tvoid setSerializationDelimiter(java.lang.String delimiter); // Sets the delimiter between a session alias and a session id when deserializing a cookie.\n\tvoid setSessionAliasParamName(java.lang.String sessionAliasParamName); // Sets the name of the HTTP parameter that is used to specify the session alias.\n\tHttpServletRequest wrapRequest(HttpServletRequest request, HttpServletResponse response); // Allows customizing the HttpServletRequest.\n\tHttpServletResponse wrapResponse(HttpServletRequest request, HttpServletResponse response); // Allows customizing the HttpServletResponse.\n}"}
{"index": 6289, "repo": "commons-codec-1.16.0", "des": "Encodes strings into their Beider-Morse phonetic encoding.", "code": "Class BeiderMorseEncoder {\n\tObject encode(Object source); // Encodes an \"Object\" and returns the encoded content as an Object.\n\tString encode(String source); // Encodes a String and returns a String.\n\tNameType getNameType(); // Gets the name type currently in operation.\n\tRuleType getRuleType(); // Gets the rule type currently in operation.\n\tboolean isConcat(); // Discovers if multiple possible encodings are concatenated.\n\tvoid setConcat(boolean concat); // Sets how multiple possible phonetic encodings are combined.\n\tvoid setMaxPhonemes(int maxPhonemes); // Sets the number of maximum of phonemes that shall be considered by the engine.\n\tvoid setNameType(NameType nameType); // Sets the type of name.\n\tvoid setRuleType(RuleType ruleType); // Sets the rule type to apply.\n}"}
{"index": 11760, "repo": "bedrock-core-7.0.2", "des": "An Option to define enabled Bedrock diagnostics.", "code": "public class Diagnostics extends Object implements Option {\n\tstatic Diagnostics disabled(); // Constructs a Diagnostics being disabled.\n\tstatic Diagnostics enabled(); // Constructs a Diagnostics being enabled.\n\tstatic Diagnostics enabled(boolean enabled); // Constructs a Diagnostics.\n\tboolean equals(Object other);\n\tboolean isEnabled(); // Determines if Diagnostics is enabled.\n}"}
{"index": 4822, "repo": "hadoop-common-3.3.4", "des": "Helpers to create interned metrics info.", "code": "Class Interns {\n\tstatic MetricsInfo info(String name, String description); // Get a metric info object.\n\tstatic MetricsTag tag(MetricsInfo info, String value); // Get a metrics tag.\n\tstatic MetricsTag tag(String name, String description, String value); // Get a metrics tag.\n}"}
{"index": 9013, "repo": "hbase-server-3.0.0-alpha-4", "des": "QuotaSnapshotStore implementation for namespaces.", "code": "Class NamespaceQuotaSnapshotStore {\n\tIterable<Map.Entry<RegionInfo,Long>> filterBySubject(String namespace); // Filters the provided regions, returning those which match the given subject.\n\tSpaceQuotaSnapshot getCurrentState(String namespace); // Returns the current SpaceQuotaSnapshot for the given subject.\n\torg.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.SpaceQuota getSpaceQuota(String namespace); // Fetch the Quota for the given subject.\n\tSpaceQuotaSnapshot getTargetState(String subject, org.apache.hadoop.hbase.shaded.protobuf.generated.QuotaProtos.SpaceQuota spaceQuota); // Computes the target SpaceQuotaSnapshot for the given subject and spaceQuota.\n\tvoid setCurrentState(String namespace, SpaceQuotaSnapshot snapshot); // Persists the current SpaceQuotaSnapshot for the subject.\n\tvoid setRegionUsage(Map<RegionInfo,Long> regionUsage); // Updates this with the latest snapshot of filesystem use by region.\n}"}
{"index": 9446, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by admin to change a list of nodes' resource to the ResourceManager.", "code": "Class UpdateNodeResourceRequest {\n\tabstract Map<NodeId,ResourceOption> getNodeResourceMap(); // Get the map from NodeId to ResourceOption.\n\tstatic UpdateNodeResourceRequest newInstance(Map<NodeId,ResourceOption> nodeResourceMap);\n\tabstract void setNodeResourceMap(Map<NodeId,ResourceOption> nodeResourceMap); // Set the map from NodeId to ResourceOption.\n}"}
{"index": 13196, "repo": "spring-test-6.0.11", "des": "ExchangeResult variant with the response body decoded as Flux<T> but not yet consumed.", "code": "public class FluxExchangeResult<T> extends ExchangeResult {\n\tvoid consumeWith(Consumer<FluxExchangeResult<T>> consumer); // Invoke the given consumer within ExchangeResult.assertWithDiagnostics(Runnable) passing \"this\" instance to it.\n\treactor.core.publisher.Flux<T> getResponseBody(); // Return the response body as a Flux<T> of decoded elements.\n}"}
{"index": 10836, "repo": "spring-boot-actuator-3.1.1", "des": "Value object that represents the data that can be used by a SanitizingFunction.", "code": "public final class SanitizableData extends Object {\n\tString getKey(); // Return the key of the data.\n\torg.springframework.core.env.PropertySource<?> getPropertySource(); // Return the property source that provided the data or null If the data was not from a PropertySource.\n\tObject getValue(); // Return the value of the data.\n\tSanitizableData withSanitizedValue(); // Return a new SanitizableData instance with sanatized value.\n\tSanitizableData withValue(Object value); // Return a new SanitizableData instance with a different value.\n}"}
{"index": 11517, "repo": "spring-restdocs-core-3.0.0", "des": "Base class for a Snippet that is produced using a Template and TemplateEngine.", "code": "public abstract class TemplatedSnippet extends Object implements Snippet {\n\tprotected abstract Map<String,Object> createModel(Operation operation); // Create the model that should be used during template rendering to document the given operation.\n\tvoid document(Operation operation); // Documents the call to the RESTful API described by the given operation.\n\tprotected final Map<String,Object> getAttributes(); // Returns the additional attributes that will be included in the model during template rendering.\n\tprotected final String getSnippetName(); // Returns the name of the snippet that will be created.\n}"}
{"index": 3184, "repo": "iceberg-spark3-0.13.2", "des": "A sort direction used in sorting expressions.", "code": "Enum SortDirection {\n\tstatic SortDirection valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic SortDirection[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 3345, "repo": "spring-social-core-1.1.6.RELEASE", "des": "An OAuth2-based Connection implementation.", "code": "Class OAuth2Connection<A> {\n\tConnectionData createData(); // Creates a data transfer object that can be used to persist the state of this connection.\n\tboolean equals(java.lang.Object obj);\n\tA getApi(); // A Java binding to the service provider's native API.\n\tboolean hasExpired(); // Returns true if this connection has expired.\n\tvoid refresh(); // Refresh this connection.\n}"}
{"index": 3773, "repo": "commons-pool2-2.11.1", "des": "Create a new keyed object pool where the pooled objects are wrapped in proxies allowing better control of pooled objects and in particular the prevention of the continued use of an object by a client after that client returns the object to the pool.", "code": "Class ProxiedKeyedObjectPool<K,V> {\n\tvoid addObject(K key); // Creates an object using the factory or other implementation dependent mechanism, passivate it, and then place it in the idle object pool.\n\tV borrowObject(K key); // Borrows an instance from this pool for the specified key.\n\tvoid clear(); // Clears the pool, removing all pooled instances (optional operation).\n\tvoid clear(K key); // Clears the specified pool, removing all pooled instances corresponding to the given key (optional operation).\n\tvoid close(); // Closes this pool, and free any resources associated with it.\n\tint getNumActive(); // Gets the total number of instances currently borrowed from this pool but not yet returned.\n\tint getNumActive(K key); // Gets the number of instances currently borrowed from but not yet returned to the pool corresponding to the given key.\n\tint getNumIdle(); // Gets the total number of instances currently idle in this pool.\n\tint getNumIdle(K key); // Gets the number of instances corresponding to the given key currently idle in this pool.\n\tvoid invalidateObject(K key, V proxy); // Invalidates an object from the pool.\n\tvoid returnObject(K key, V proxy); // Return an instance to the pool.\n}"}
{"index": 525, "repo": "ignite-core-2.15.0", "des": "Bulk load (COPY) command processor used on server to keep various context data and process portions of input received from the client side.", "code": "Class BulkLoadProcessor {\n\tvoid close(); // Aborts processing and closes the underlying objects (IgniteDataStreamer).\n\tvoid onError(Exception failReason); // Is called to notify processor, that bulk load execution, this processor is performing, failed with specified exception.\n\tBulkLoadCacheWriter outputStreamer(); // Returns the streamer that puts actual key/value into the cache.\n\tvoid processBatch(byte[] batchData, boolean isLastBatch); // Processes the incoming batch and writes data to the cache by calling the data converter and output streamer.\n}"}
{"index": 14603, "repo": "spring-security-web-6.1.2", "des": "AuthenticationSuccessHandler which can be configured with a default URL which users should be sent to upon successful authentication.", "code": "public class SimpleUrlAuthenticationSuccessHandler extends AbstractAuthenticationTargetUrlRequestHandler implements AuthenticationSuccessHandler {\n\tprotected final void clearAuthenticationAttributes(jakarta.servlet.http.HttpServletRequest request); // Removes temporary authentication-related data which may have been stored in the session during the authentication process.\n\tvoid onAuthenticationSuccess(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, org.springframework.security.core.Authentication authentication); // Calls the parent class handle() method to forward or redirect to the target URL, and then calls clearAuthenticationAttributes() to remove any leftover session data.\n}"}
{"index": 15317, "repo": "spring-boot-3.1.1", "des": "Factory class used by LoggingSystem.get(ClassLoader) to find an actual implementation.", "code": "public interface LoggingSystemFactory {\n\tstatic LoggingSystemFactory fromSpringFactories(); // Return a LoggingSystemFactory backed by spring.factories.\n\tLoggingSystem getLoggingSystem(ClassLoader classLoader); // Return a logging system implementation or null if no logging system is available.\n}"}
{"index": 2560, "repo": "exoplayer-r2.3.1", "des": "A loader that can proceed in approximate synchronization with other loaders.", "code": "Interface SequenceableLoader {\n\tboolean continueLoading(long positionUs); // Attempts to continue loading.\n\tlong getNextLoadPositionUs(); // Returns the next load time, or C.TIME_END_OF_SOURCE if loading has finished.\n}"}
{"index": 18007, "repo": "spring-ws-core-4.0.5", "des": "Default implementation of MessageContext.", "code": "public class DefaultMessageContext extends AbstractMessageContext {\n\tvoid clearResponse(); // Removes the response message, if any.\n\tWebServiceMessageFactory getMessageFactory();\n\tWebServiceMessage getRequest(); // Returns the request message.\n\tWebServiceMessage getResponse(); // Returns the response message.\n\tboolean hasResponse(); // Indicates whether this context has a response.\n\tvoid readResponse(InputStream inputStream); // Reads a response message from the given input stream.\n\tvoid setResponse(WebServiceMessage response); // Sets the response message.\n}"}
{"index": 4443, "repo": "beam-sdks-java-core-2.49.0", "des": "A ReadableState cell containing a list of values sorted by timestamp.", "code": "Interface OrderedListState<T> {\n\tvoid clearRange(org.joda.time.Instant minTimestamp, org.joda.time.Instant limitTimestamp); // Clear a timestamp-limited subrange of the list.\n\tjava.lang.Iterable<TimestampedValue<T>> readRange(org.joda.time.Instant minTimestamp, org.joda.time.Instant limitTimestamp); // Read a timestamp-limited subrange of the list.\n\tOrderedListState<T> readRangeLater(org.joda.time.Instant minTimestamp, org.joda.time.Instant limitTimestamp); // Call to indicate that a specific range will be read from the list, allowing runners to batch multiple range reads.\n}"}
{"index": 17872, "repo": "spring-web-6.0.11", "des": "HttpServiceArgumentResolver for @RequestParam annotated arguments.", "code": "public class RequestParamArgumentResolver extends AbstractNamedValueArgumentResolver {\n\tprotected void addRequestValue(String name, Object value, org.springframework.core.MethodParameter parameter, HttpRequestValues.Builder requestValues); // Add the given, single request value.\n\tprotected AbstractNamedValueArgumentResolver.NamedValueInfo createNamedValueInfo(org.springframework.core.MethodParameter parameter); // Return information about the request value, or null if the parameter does not represent a request value of interest.\n}"}
{"index": 9778, "repo": "commons-math3-3.6.1", "des": "A StorelessUnivariateStatistic estimating percentiles using the P2 Algorithm as explained by Raj Jain and Imrich Chlamtac in P2 Algorithm for Dynamic Calculation of Quantiles and Histogram Without Storing Observations.", "code": "Class PSquarePercentile {\n\tvoid clear(); // Clears the internal state of the Statistic\n\tStorelessUnivariateStatistic copy(); // Returns a copy of the statistic with the same internal state.\n\tboolean equals(Object o); // Returns true iff o is a PSquarePercentile returning the same values as this for getResult() and getN() and also having equal markers\n\tlong getN(); // Returns the number of values that have been added.\n\tdouble getResult(); // Returns the current value of the Statistic.\n\tvoid increment(double observation); // Updates the internal state of the statistic to reflect the addition of the new value.\n\tstatic PSquarePercentile.PSquareMarkers newMarkers(List<Double> initialFive, double p); // A creation method to build Markers\n\tdouble quantile(); // Returns the quantile estimated by this statistic in the range [0.0-1.0]\n}"}
{"index": 10061, "repo": "spring-yarn-core-2.5.0.RELEASE", "des": "Interface representing a grid projection.", "code": "Interface GridProjection {\n\tboolean acceptMember(GridMember member); // Asks a projection if it accepted a member.\n\tCollection<GridMember> getMembers(); // Gets the members of this projection as Collection.\n\tInteger getPriority(); // Gets the projection priority.\n\tProjectionData getProjectionData(); // Gets the projection data.\n\tSatisfyStateData getSatisfyState(); // Gets the satisfy state.\n\tGridMember removeMember(GridMember member); // Removes the member.\n\tvoid setProjectionData(ProjectionData data); // Sets the projection data.\n}"}
{"index": 9954, "repo": "iceberg-api-1.3.0", "des": "Catalog methods for working with namespaces.", "code": "Interface SupportsNamespaces {\n\tdefault void createNamespace(Namespace namespace); // Create a namespace in the catalog.\n\tvoid createNamespace(Namespace namespace, java.util.Map<java.lang.String,java.lang.String> metadata); // Create a namespace in the catalog.\n\tboolean dropNamespace(Namespace namespace); // Drop a namespace.\n\tdefault java.util.List<Namespace> listNamespaces(); // List top-level namespaces from the catalog.\n\tjava.util.List<Namespace> listNamespaces(Namespace namespace); // List namespaces from the namespace.\n\tjava.util.Map<java.lang.String,java.lang.String> loadNamespaceMetadata(Namespace namespace); // Load metadata properties for a namespace.\n\tdefault boolean namespaceExists(Namespace namespace); // Checks whether the Namespace exists.\n\tboolean removeProperties(Namespace namespace, java.util.Set<java.lang.String> properties); // Remove a set of property keys from a namespace in the catalog.\n\tboolean setProperties(Namespace namespace, java.util.Map<java.lang.String,java.lang.String> properties); // Set a collection of properties on a namespace in the catalog.\n}"}
{"index": 6737, "repo": "ratis-common-2.5.1", "des": "A queue with execution order guarantee such that each task is submitted for execution only if it becomes the head of the queue.", "code": "Class TaskQueue {\n\tboolean isEmpty(); // Is this queue empty?\n\t<OUTPUT,THROWABLE extends Throwable>CompletableFuture<OUTPUT> submit(CheckedSupplier<OUTPUT,THROWABLE> task, ExecutorService executor); // The same as submit(task, executor, Function.identity());\n\t<OUTPUT,THROWABLE extends Throwable>CompletableFuture<OUTPUT> submit(CheckedSupplier<OUTPUT,THROWABLE> task, ExecutorService executor, Function<Throwable,Throwable> newThrowable); // Offer the given task to this queue and then submit the tasks one by one in the queue order for execution.\n}"}
{"index": 5282, "repo": "druid-processing-26.0.0", "des": "Implementation of ComplexColumn to be used when complex column serialization is done by using GenericIndexed by using default implementations of \"writeToXXX\" methods in ComplexColumnSerializer.", "code": "Class GenericIndexedBasedComplexColumn {\n\tvoid close(); // Close and release any resources associated with this column.\n\tClass<?> getClazz();\n\tint getLength();\n\tObject getRowValue(int rowNum); // Return rows in the column.\n\tString getTypeName();\n}"}
{"index": 5160, "repo": "druid-processing-26.0.0", "des": "An interface representing a Column of data.", "code": "Interface Column {\n\t<T> T as(Class<? extends T> clazz); // Asks the Column to return itself as a concrete implementation of a specific interface.\n\tColumnAccessor toAccessor(); // Returns the column as a ColumnAccessor.\n}"}
{"index": 7807, "repo": "cassandra-all-4.1.2", "des": "StreamManager manages currently running StreamResultFutures and provides status of all operation invoked.", "code": "Class StreamManager {\n\tvoid addListener(StreamManager.StreamListener listener);\n\tvoid addNotificationListener(javax.management.NotificationListener listener, javax.management.NotificationFilter filter, java.lang.Object handback);\n\tvoid clearStates();\n\tStreamSession findSession(InetAddressAndPort peer, TimeUUID planId, int sessionIndex, boolean searchInitiatorSessions);\n\tjava.util.Set<javax.management.openmbean.CompositeData> getCurrentStreams(); // Returns the current state of all ongoing streams.\n\tstatic StreamManager.StreamRateLimiter getEntireSSTableRateLimiter(InetAddressAndPort peer); // Get streaming rate limiter for entire SSTable operations.\n\tStreamResultFuture getInitiatorStream(TimeUUID planId);\n\tjavax.management.MBeanNotificationInfo[] getNotificationInfo();\n\tstatic StreamManager.StreamRateLimiter getRateLimiter(InetAddressAndPort peer); // Gets streaming rate limiter.\n\tStreamResultFuture getReceivingStream(TimeUUID planId);\n\tjava.lang.String getStreamingSlowEventsLogTimeout();\n\tStreamingState getStreamingState(TimeUUID id);\n\tjava.util.Collection<StreamingState> getStreamingStates();\n\tboolean getStreamingStatsEnabled();\n\tvoid putFollowerStream(StreamResultFuture future);\n\tvoid putInitiatorStream(StreamResultFuture future);\n\tvoid putStreamingState(StreamingState state);\n\tStreamResultFuture registerFollower(StreamResultFuture result);\n\tvoid registerInitiator(StreamResultFuture result);\n\tvoid removeListener(StreamManager.StreamListener listener);\n\tvoid removeNotificationListener(javax.management.NotificationListener listener);\n\tvoid removeNotificationListener(javax.management.NotificationListener listener, javax.management.NotificationFilter filter, java.lang.Object handback);\n\tvoid setStreamingSlowEventsLogTimeout(java.lang.String value); // Sets the timeout for the streaming slow events log\n\tvoid setStreamingStatsEnabled(boolean streamingStatsEnabled); // enable/disable collection of streaming stats while streaming is running.\n\tvoid start();\n\tvoid stop();\n}"}
{"index": 12950, "repo": "slf4j-api-2.0.7", "des": "This interface abstracts the service offered by various MDC implementations.", "code": "public interface MDCAdapter {\n\tvoid clear(); // Clear all entries in the MDC.\n\tvoid clearDequeByKey(String key); // Clear the deque(stack) referenced by 'key'.\n\tString get(String key); // Get the context identified by the key parameter.\n\tMap<String,String> getCopyOfContextMap(); // Return a copy of the current thread's context map, with keys and values of type String.\n\tDeque<String> getCopyOfDequeByKey(String key); // Returns a copy of the deque(stack) referenced by 'key'.\n\tString popByKey(String key); // Pop the stack referenced by 'key' and return the value possibly null.\n\tvoid pushByKey(String key, String value); // Push a value into the deque(stack) referenced by 'key'.\n\tvoid put(String key, String val); // Put a context value (the val parameter) as identified with the key parameter into the current thread's context map.\n\tvoid remove(String key); // Remove the context identified by the key parameter.\n\tvoid setContextMap(Map<String,String> contextMap); // Set the current thread's context map by first clearing any existing map and then copying the map passed as parameter.\n}"}
{"index": 12162, "repo": "jena-core-4.9.0", "des": "Adapter class that converts a ModelChangedListener into a GraphListener.", "code": "public class ModelListenerAdapter extends Object implements GraphListener {\n\tboolean equals(Object other);\n\tvoid notifyAddArray(Graph graph, Triple[] triples); // Method called when an array of triples has been added to the graph.\n\tvoid notifyAddGraph(Graph g, Graph added); // Method called when another graph g has been used to specify the triples added to our attached graph.\n\tvoid notifyAddIterator(Graph g, Iterator<Triple> it); // Method called when an iterator [of triples] has been added to the graph\n\tvoid notifyAddIterator(Graph g, List<Triple> triples);\n\tvoid notifyAddList(Graph g, List<Triple> triples); // Method called when a list [of triples] has been added to the graph.\n\tvoid notifyAddTriple(Graph g, Triple t); // Method called when a single triple has been added to the graph.\n\tvoid notifyDeleteArray(Graph g, Triple[] triples); // Method called when an array of triples has been deleted from the graph.\n\tvoid notifyDeleteGraph(Graph g, Graph removed); // Method to call when another graph has been used to specify the triples deleted from our attached graph.\n\tvoid notifyDeleteIterator(Graph g, Iterator<Triple> it); // Method called when an iterator [of triples] has been deleted from the graph.\n\tvoid notifyDeleteList(Graph g, List<Triple> triples); // Method called when a list [of triples] has been deleted from the graph.\n\tvoid notifyDeleteTriple(Graph g, Triple t); // Method called when a single triple has been deleted from the graph.\n\tvoid notifyEvent(Graph g, Object event); // method to call for a general event.\n\tboolean sameAs(ModelListenerAdapter other);\n}"}
{"index": 4250, "repo": "jackson-core-2.15.2", "des": "Enumeration that controls how TokenFilter return values are interpreted.", "code": "Enum TokenFilter.Inclusion {\n\tstatic TokenFilter.Inclusion valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TokenFilter.Inclusion[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 6546, "repo": "exoplayer-core-2.9.6", "des": "Extracts data from the MP4 container format.", "code": "Class Mp4Extractor {\n\tlong getDurationUs(); // Returns the duration of the stream in microseconds.\n\tSeekMap.SeekPoints getSeekPoints(long timeUs); // Obtains seek points for the specified seek time in microseconds.\n\tvoid init(ExtractorOutput output); // Initializes the extractor with an ExtractorOutput.\n\tboolean isSeekable(); // Returns whether seeking is supported.\n\tint read(ExtractorInput input, PositionHolder seekPosition); // Extracts data read from a provided ExtractorInput.\n\tvoid release(); // Releases all kept resources.\n\tvoid seek(long position, long timeUs); // Notifies the extractor that a seek has occurred.\n\tboolean sniff(ExtractorInput input); // Returns whether this extractor can extract samples from the ExtractorInput, which must provide data from the start of the stream.\n}"}
{"index": 4676, "repo": "commons-geometry-core-1.0", "des": "Base class for convex hyperplane-bounded regions.", "code": "Class AbstractConvexHyperplaneBoundedRegion<P extends Point<P>,S extends HyperplaneConvexSubset<P>> {\n\tRegionLocation classify(P pt); // Classify the given point with respect to the region.\n\tList<S> getBoundaries(); // Get the boundaries of the convex region.\n\tdouble getBoundarySize(); // Get the size of the boundary of the region.\n\tboolean isEmpty(); // Return true if the region is completely empty, ie all points in the space are classified as outside.\n\tboolean isFull(); // Return true if the region spans the entire space.\n\tP project(P pt); // Project a point onto the boundary of the region.\n\tprotected <R extends AbstractConvexHyperplaneBoundedRegion<P,S>>Split<R> splitInternal(Hyperplane<P> splitter, R thisInstance, Class<S> boundaryType, Function<List<S>,R> factory); // Generic, internal split method.\n\tprotected boolean swapsInsideOutside(Transform<P> transform); // Return true if the given transform swaps the inside and outside of the region.\n\tprotected <R extends AbstractConvexHyperplaneBoundedRegion<P,S>>R transformInternal(Transform<P> transform, R thisInstance, Class<S> boundaryType, Function<? super List<S>,R> factory); // Generic, internal transform method.\n\tHyperplaneConvexSubset<P> trim(HyperplaneConvexSubset<P> sub); // Trim the given hyperplane subset to the portion contained inside this instance.\n}"}
{"index": 8417, "repo": "hadoop-aws-3.3.6", "des": "Audit an S3 bucket for directory markers.", "code": "Class MarkerTool {\n\tstatic MarkerTool.ScanResult execMarkerTool(MarkerTool.ScanArgs scanArgs); // Execute the marker tool, with no checks on return codes.\n\tString getName(); // Return sub-command name.\n\tString getUsage();\n\tboolean isVerbose();\n\tvoid resetBindings(); // Reset the store and filesystem bindings.\n\tint run(String[] args, PrintStream stream); // Run the tool, capturing the output (if the tool supports that).\n\tvoid setVerbose(boolean verbose);\n}"}
{"index": 5930, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol buffer based implementation of UpdateApplicationHomeSubClusterRequest .", "code": "Class UpdateApplicationHomeSubClusterRequestPBImpl {\n\tboolean equals(Object other);\n\tApplicationHomeSubCluster getApplicationHomeSubCluster(); // Get the ApplicationHomeSubCluster representing the mapping of the application to it's home sub-cluster.\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.UpdateApplicationHomeSubClusterRequestProto getProto();\n\tvoid setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationInfo); // Set the ApplicationHomeSubCluster representing the mapping of the application to it's home sub-cluster.\n}"}
{"index": 2201, "repo": "hive-exec-4.0.0-alpha-2", "des": "Generated from template ScalarArithmeticColumn.", "code": "Class LongScalarSubtractDoubleColumnChecked {\n\tvoid evaluate(VectorizedRowBatch batch); // This is the primary method to implement expression logic.\n\tVectorExpressionDescriptor.Descriptor getDescriptor();\n\tboolean supportsCheckedExecution(); // A vector expression which implements a checked execution to account for overflow handling should override this method and return true.\n\tString vectorExpressionParameters();\n}"}
{"index": 2524, "repo": "exoplayer-r2.3.1", "des": "Manages the background loading of Loader.", "code": "Class Loader {\n\tvoid cancelLoading(); // Cancels the current load.\n\tboolean isLoading(); // Returns whether the Loader is currently loading a Loader.Loadable.\n\tvoid maybeThrowError(); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the Loaders default minimum number of retries.\n\tvoid maybeThrowError(int minRetryCount); // Throws a fatal error, or a non-fatal error if loading is currently backed off and the current Loader.Loadable has incurred a number of errors greater than the specified minimum number of retries.\n\tvoid release(); // Releases the Loader.\n\tvoid release(java.lang.Runnable postLoadAction); // Releases the Loader, running postLoadAction on its thread.\n\t<T extends Loader.Loadable>long startLoading(T loadable, Loader.Callback<T> callback, int defaultMinRetryCount); // Starts loading a Loader.Loadable.\n}"}
{"index": 8231, "repo": "spring-ws-3.0.10.RELEASE", "des": "Adapter to use a MessageEndpoint as the endpoint for a EndpointInvocationChain.", "code": "Class MessageEndpointAdapter {\n\tvoid invoke(MessageContext messageContext, Object endpoint); // Use the given endpoint to handle the request.\n\tboolean supports(Object endpoint); // Does this EndpointAdapter support the given endpoint?\n}"}
{"index": 98, "repo": "commons-collections4-4.4", "des": "Provides utility methods and decorators for Bag and SortedBag instances.", "code": "Class BagUtils {\n\tstatic <E> Bag<E> collectionBag(Bag<E> bag); // Returns a bag that complies to the Collection contract, backed by the given bag.\n\tstatic <E> Bag<E> emptyBag(); // Get an empty Bag.\n\tstatic <E> SortedBag<E> emptySortedBag(); // Get an empty SortedBag.\n\tstatic <E> Bag<E> predicatedBag(Bag<E> bag, Predicate<? super E> predicate); // Returns a predicated (validating) bag backed by the given bag.\n\tstatic <E> SortedBag<E> predicatedSortedBag(SortedBag<E> bag, Predicate<? super E> predicate); // Returns a predicated (validating) sorted bag backed by the given sorted bag.\n\tstatic <E> Bag<E> synchronizedBag(Bag<E> bag); // Returns a synchronized (thread-safe) bag backed by the given bag.\n\tstatic <E> SortedBag<E> synchronizedSortedBag(SortedBag<E> bag); // Returns a synchronized (thread-safe) sorted bag backed by the given sorted bag.\n\tstatic <E> Bag<E> transformingBag(Bag<E> bag, Transformer<? super E,? extends E> transformer); // Returns a transformed bag backed by the given bag.\n\tstatic <E> SortedBag<E> transformingSortedBag(SortedBag<E> bag, Transformer<? super E,? extends E> transformer); // Returns a transformed sorted bag backed by the given bag.\n\tstatic <E> Bag<E> unmodifiableBag(Bag<? extends E> bag); // Returns an unmodifiable view of the given bag.\n\tstatic <E> SortedBag<E> unmodifiableSortedBag(SortedBag<E> bag); // Returns an unmodifiable view of the given sorted bag.\n}"}
{"index": 8558, "repo": "commons-io-2.13.0", "des": "Simple alternative to JDK PipedOutputStream; queue input stream provides what's written in queue output stream.", "code": "Class QueueOutputStream {\n\tQueueInputStream newQueueInputStream(); // Creates a new QueueInputStream instance connected to this.\n\tvoid write(int b); // Writes a single byte.\n}"}
{"index": 16375, "repo": "spring-data-jpa-3.1.2", "des": "Interface for a persistence provider specific accessor of identifiers held in proxies.", "code": "public interface ProxyIdAccessor {\n\tObject getIdentifierFrom(Object entity); // Returns the identifier of the given entity by leniently inspecting it for the identifier value.\n\tboolean shouldUseAccessorFor(Object entity); // Returns whether the ProxyIdAccessor should be used for the given entity.\n}"}
{"index": 654, "repo": "ignite-core-2.15.0", "des": "Inner interface to maintenance of distributed property.", "code": "Interface DistributedChangeableProperty<T extends Serializable> {\n\tvoid localUpdate(Serializable newVal); // Update only local value without updating remote cluster.\n\tvoid onAttached(); // This property have been attached to processor.\n\tvoid onReadyForUpdate(@NotNull PropertyUpdateClosure updater); // On this property ready to be update on cluster wide.\n\tT parse(String str);\n}"}
{"index": 10472, "repo": "groovy-all-4.0.13", "des": "Represents a simple key-value cache, which is NOT thread safe and backed by a Map instance", "code": "public class CommonCache<K,V> extends Object implements EvictableCache<K,V>, ValueConvertable<V,Object>, Serializable {\n\tvoid cleanUpNullReferences(); // Invoked when some of the held SoftReferences have been evicted by the garbage collector and so should be removed from the cache.\n\tMap<K,V> clearAll(); // Clear the cache\n\tboolean containsKey(Object key); // Determines if the cache contains an entry for the specified key.\n\tboolean containsValue(Object value);\n\tObject convertValue(V value); // convert the original value to the target value\n\tSet<Map.Entry<K,V>> entrySet();\n\tV get(Object key); // Gets a value from the cache\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider); // Try to get the value from cache.\n\tV getAndPut(K key, MemoizeCache.ValueProvider<? super K,? extends V> valueProvider, boolean shouldCache);\n\tboolean isEmpty();\n\tSet<K> keys(); // Get all keys associated to cached values\n\tSet<K> keySet();\n\tV put(K key, V value); // Associates the specified value with the specified key in the cache.\n\tvoid putAll(Map<? extends K,? extends V> m);\n\tV remove(Object key); // Remove the cached value by the key\n\tint size(); // Get the size of the cache\n\tCollection<V> values(); // Get all cached values\n}"}
{"index": 8651, "repo": "avro-1.11.2", "des": "Builds an Avro Array type with optional properties.", "code": "Class SchemaBuilder.ArrayBuilder<R> {\n\tSchemaBuilder.TypeBuilder<R> items(); // Return a type builder for configuring the array's nested items schema.\n\tR items(Schema itemsSchema); // Complete configuration of this array, setting the schema of the array items to the schema provided.\n\tprotected SchemaBuilder.ArrayBuilder<R> self(); // a self-type for chaining builder subclasses.\n}"}
{"index": 9623, "repo": "commons-math3-3.6.1", "des": "Calculates the LUP-decomposition of a square matrix.", "code": "Class FieldLUDecomposition<T extends FieldElement<T>> {\n\tT getDeterminant(); // Return the determinant of the matrix.\n\tFieldMatrix<T> getL(); // Returns the matrix L of the decomposition.\n\tFieldMatrix<T> getP(); // Returns the P rows permutation matrix.\n\tint[] getPivot(); // Returns the pivot permutation vector.\n\tFieldDecompositionSolver<T> getSolver();\n\tFieldMatrix<T> getU(); // Returns the matrix U of the decomposition.\n}"}
{"index": 5075, "repo": "commons-collections-3.2.2", "des": "Decorates another Buffer to synchronize its behaviour for a multi-threaded environment.", "code": "Class SynchronizedBuffer {\n\tstatic Buffer decorate(Buffer buffer); // Factory method to create a synchronized buffer.\n\tObject get(); // Gets the next object from the buffer without removing it.\n\tprotected Buffer getBuffer(); // Gets the buffer being decorated.\n\tObject remove(); // Gets and removes the next object from the buffer.\n}"}
{"index": 2568, "repo": "exoplayer-r2.3.1", "des": "Loads data at a given Uri as a single sample belonging to a single MediaPeriod.", "code": "Class SingleSampleMediaSource {\n\tMediaPeriod createPeriod(int index, Allocator allocator, long positionUs); // Returns a new MediaPeriod corresponding to the period at the specified index.\n\tvoid maybeThrowSourceInfoRefreshError(); // Throws any pending error encountered while loading or refreshing source information.\n\tvoid prepareSource(ExoPlayer player, boolean isTopLevelSource, MediaSource.Listener listener); // Starts preparation of the source.\n\tvoid releasePeriod(MediaPeriod mediaPeriod); // Releases the period.\n\tvoid releaseSource(); // Releases the source.\n}"}
{"index": 11241, "repo": "spring-context-6.0.11", "des": "Fluent builder API for AbstractAotProcessor.Settings.", "code": "public static final class AbstractAotProcessor.Settings.Builder extends Object {\n\tAbstractAotProcessor.Settings.Builder artifactId(String artifactId); // Set the artifact ID of the application.\n\tAbstractAotProcessor.Settings build(); // Build the AbstractAotProcessor.Settings configured in this Builder.\n\tAbstractAotProcessor.Settings.Builder classOutput(Path classOutput); // Set the output directory for generated classes.\n\tAbstractAotProcessor.Settings.Builder groupId(String groupId); // Set the group ID of the application.\n\tAbstractAotProcessor.Settings.Builder resourceOutput(Path resourceOutput); // Set the output directory for generated resources.\n\tAbstractAotProcessor.Settings.Builder sourceOutput(Path sourceOutput); // Set the output directory for generated sources.\n}"}
{"index": 8042, "repo": "commons-compress-1.23.0", "des": "Creates Compressor CompressorInputStreams and CompressorOutputStreams.", "code": "Interface CompressorStreamProvider {\n\tCompressorInputStream createCompressorInputStream(String name, InputStream in, boolean decompressUntilEOF); // Creates a compressor input stream from a compressor name and an input stream.\n\tCompressorOutputStream createCompressorOutputStream(String name, OutputStream out); // Creates a compressor output stream from an compressor name and an output stream.\n\tSet<String> getInputStreamCompressorNames(); // Gets all the input stream compressor names for this provider\n\tSet<String> getOutputStreamCompressorNames(); // Gets all the output stream compressor names for this provider\n}"}
{"index": 3621, "repo": "hive-serde-4.0.0-alpha-2", "des": "LazyMapObjectInspector works on struct data that is stored in LazyStruct.", "code": "Class LazyMapObjectInspector {\n\tObjectInspector.Category getCategory(); // An ObjectInspector must inherit from one of the following interfaces if getCategory() returns: PRIMITIVE: PrimitiveObjectInspector LIST: ListObjectInspector MAP: MapObjectInspector STRUCT: StructObjectInspector.\n\tbyte getEscapeChar();\n\tbyte getItemSeparator();\n\tbyte getKeyValueSeparator();\n\tLazyObjectInspectorParameters getLazyParams();\n\tMap<?,?> getMap(Object data); // returns null for data = null.\n\tObjectInspector getMapKeyObjectInspector();\n\tint getMapSize(Object data); // returns -1 for NULL map.\n\tObject getMapValueElement(Object data, Object key);\n\tObjectInspector getMapValueObjectInspector();\n\torg.apache.hadoop.io.Text getNullSequence();\n\tString getTypeName(); // Returns the name of the data type that is inspected by this ObjectInspector.\n\tboolean isEscaped();\n}"}
{"index": 4327, "repo": "beam-sdks-java-core-2.49.0", "des": "An abstract class that contains common configuration options for creating resources.", "code": "Class CreateOptions {\n\tabstract java.lang.Boolean expectFileToNotExist(); // True if the file is expected to not exist.\n\tabstract java.lang.String mimeType(); // The file-like resource mime type.\n}"}
{"index": 13618, "repo": "spring-boot-loader-3.1.1", "des": "Base class for launchers that can start an application with a fully configured classpath backed by one or more Archives.", "code": "public abstract class Launcher extends Object {\n\tprotected final Archive createArchive();\n\tprotected ClassLoader createClassLoader(URL[] urls); // Create a classloader for the specified URLs.\n\tprotected ClassLoader createClassLoader(Iterator<Archive> archives); // Create a classloader for the specified archives.\n\tprotected MainMethodRunner createMainMethodRunner(String mainClass, String[] args, ClassLoader classLoader); // Create the MainMethodRunner used to launch the application.\n\tprotected Archive getArchive(); // Return the root archive.\n\tprotected abstract Iterator<Archive> getClassPathArchivesIterator(); // Returns the archives that will be used to construct the class path.\n\tprotected abstract String getMainClass(); // Returns the main class that should be launched.\n\tprotected boolean isExploded(); // Returns if the launcher is running in an exploded mode.\n\tprotected void launch(String[] args); // Launch the application.\n\tprotected void launch(String[] args, String launchClass, ClassLoader classLoader); // Launch the application given the archive file and a fully configured classloader.\n}"}
{"index": 3319, "repo": "hbase-common-3.0.0-alpha-4", "des": "Instead of calculate a whole time average, this class focus on the last N.", "code": "Class WindowMovingAverage<T> {\n\tprotected boolean enoughStatistics(); // Check if there are enough statistics.\n\tdouble getAverageTime(); // Get average execution time of the measured method.\n\tprotected int getMostRecentPosition(); // Returns index of most recent\n\tprotected int getNumberOfStatistics(); // Returns number of statistics\n\tprotected long getStatisticsAtIndex(int index); // Get statistics at index.\n\tprotected int moveForwardMostRecentPosition(); // Move forward the most recent index.\n\tprotected void updateMostRecentTime(long elapsed); // Update the most recent data.\n}"}
{"index": 4354, "repo": "beam-sdks-java-core-2.49.0", "des": "An observer that gets notified when additional bytes are read and/or used.", "code": "Class ElementByteSizeObserver {\n\tvoid advance(); // Advances the observer to the next element.\n\tboolean getIsLazy(); // Returns whether byte counting for the current element is lazy, that is, whether the observer gets notified of the element's byte count only as element's pieces are being processed or iterated over.\n\tprotected abstract void reportElementSize(long elementByteSize); // Called to report element byte size.\n\tvoid setLazy(); // Sets byte counting for the current element as lazy.\n\tvoid setScalingFactor(double scalingFactor); // Sets a multiplier to use on observed sizes.\n\tvoid update(java.lang.Object obj); // Updates the observer with a context specified, but without an instance of the Observable.\n\tvoid update(java.util.Observable obs, java.lang.Object obj);\n}"}
{"index": 11118, "repo": "tribuo-core-4.3.1", "des": "Trains a sequence model by training a regular model to independently predict every example in each sequence.", "code": "public class IndependentSequenceTrainer<T extends Output<T>> extends Object implements SequenceTrainer<T> {\n\tint getInvocationCount(); // Returns the number of times the train method has been invoked.\n\tTrainerProvenance getProvenance();\n\tIndependentSequenceModel<T> train(SequenceDataset<T> sequenceExamples, Map<String,com.oracle.labs.mlrg.olcut.provenance.Provenance> runProvenance); // Trains a sequence prediction model using the examples in the given data set.\n}"}
{"index": 3511, "repo": "mahout-mr-0.13.0", "des": "Implementations encapsulate information retrieval-related statistics about a Recommender's recommendations.", "code": "Interface IRStatistics {\n\tdouble getF1Measure(); // See F-measure.\n\tdouble getFallOut(); // See Fall-Out.\n\tdouble getFNMeasure(double n); // See F-measure.\n\tdouble getNormalizedDiscountedCumulativeGain(); // See Normalized Discounted Cumulative Gain.\n\tdouble getPrecision(); // See Precision.\n\tdouble getReach();\n\tdouble getRecall(); // See Recall.\n}"}
{"index": 11723, "repo": "spring-data-neo4j-7.1.2", "des": "This class provides a couple of extensions to the Spring Data Neo4j SpEL support.", "code": "@API(status=INTERNAL, since=\"6.0.2\") public final class Neo4jSpelSupport extends Object {\n\tstatic org.springframework.data.neo4j.repository.query.Neo4jSpelSupport.LiteralReplacement allOf(Object arg);\n\tstatic org.springframework.data.neo4j.repository.query.Neo4jSpelSupport.LiteralReplacement anyOf(Object arg);\n\tstatic org.springframework.data.neo4j.repository.query.Neo4jSpelSupport.LiteralReplacement literal(Object arg); // Turns the arguments of this function into a literal replacement for the SpEL placeholder (instead of creating Cypher parameters).\n\tstatic org.springframework.data.neo4j.repository.query.Neo4jSpelSupport.LiteralReplacement orderBy(Object arg); // Takes arg and tries to either extract a sort from it or cast it to a sort.\n\tstatic String renderQueryIfExpressionOrReturnQuery(String query, Neo4jMappingContext mappingContext, EntityMetadata<?> metadata, SpelExpressionParser parser);\n}"}
{"index": 15528, "repo": "spring-batch-core-5.0.2", "des": "Simple, thread-safe, map-based implementation of JobRegistry.", "code": "public class MapJobRegistry extends Object implements JobRegistry {\n\tJob getJob(String name); // Locates a Job at runtime.\n\tSet<String> getJobNames(); // Provides an unmodifiable view of the job names.\n\tvoid register(JobFactory jobFactory); // Registers a Job at runtime.\n\tvoid unregister(String name); // Unregisters a previously registered Job.\n}"}
{"index": 13218, "repo": "spring-test-6.0.11", "des": "An empty method implementation of MockMvcConfigurer.", "code": "public abstract class MockMvcConfigurerAdapter extends Object implements MockMvcConfigurer {\n\tvoid afterConfigurerAdded(ConfigurableMockMvcBuilder<?> builder); // Invoked immediately when this MockMvcConfigurer is added via ConfigurableMockMvcBuilder.apply(org.springframework.test.web.servlet.setup.MockMvcConfigurer).\n\tRequestPostProcessor beforeMockMvcCreated(ConfigurableMockMvcBuilder<?> builder, org.springframework.web.context.WebApplicationContext cxt); // Invoked when the MockMvc instance is about to be created with the MockMvc builder and the Spring WebApplicationContext that will be passed to the DispatcherServlet.\n}"}
{"index": 3980, "repo": "zookeeper-3.8.2", "des": "Extension of NIOServerCnxnFactory which can inject changes per controller commands.", "code": "Class ControllableConnectionFactory {\n\tprotected NIOServerCnxn createConnection(SocketChannel sock, SelectionKey sk, NIOServerCnxnFactory.SelectorThread selectorThread);\n\tvoid delayRequestIfNeeded(); // Called by the connection to delay processing requests from the client.\n\tvoid delayResponses(long delayInMs);\n\tvoid failAllFutureRequests();\n\tvoid failFutureRequests(long requestsToFail);\n\tvoid holdAllFutureResponses();\n\tvoid holdFutureResponses(long requestsToHold);\n\tvoid resetBadBehavior();\n\tboolean shouldFailNextRequest(); // Check if we should fail the next incoming request.\n\tboolean shouldSendResponse(); // Check if we should send a response to the latest processed request (true), or eat the response to mess with the client (false).\n}"}
{"index": 4140, "repo": "camel-core-3.0.0-RC1", "des": "Executes a script from a language which does not change the message body.", "code": "Class ScriptDefinition {\n\tString getLabel(); // Returns a label to describe this node such as the expression if some kind of expression node\n\tString getShortName();\n\tvoid setExpression(ExpressionDefinition expression); // Expression to return the transformed message body (the new message body to use)\n}"}
{"index": 8379, "repo": "hadoop-aws-3.3.6", "des": "This is a long-lived service which is created in S3A FS initialize (make it fast!) which provides context for tracking operations made to S3.", "code": "Class AbstractOperationAuditor {\n\tprotected String createSpanID(); // Create a span ID.\n\tString getAuditorId(); // Get the Auditor ID.\n\torg.apache.hadoop.fs.statistics.impl.IOStatisticsStore getIOStatistics(); // Get the IOStatistics Store.\n\tprotected OperationAuditorOptions getOptions(); // Get the options this auditor was initialized with.\n\tvoid init(OperationAuditorOptions opts); // Sets the IOStats and then calls init().\n}"}
{"index": 2672, "repo": "mahout-core-14.1", "des": "Open hash map from long keys to int values.", "code": "Class OpenLongIntHashMap {\n\tint adjustOrPutValue(long key, int newValue, int incrValue); // Check the map for a key.\n\tvoid clear(); // Removes all (key,value) associations from the receiver.\n\tObject clone(); // Returns a deep copy of the receiver.\n\tboolean containsKey(long key); // Returns true if the receiver contains the specified key.\n\tboolean containsValue(int value); // Returns true if the receiver contains the specified value.\n\tvoid ensureCapacity(int minCapacity); // Ensures that the receiver can hold at least the specified number of associations without needing to allocate new internal memory.\n\tboolean forEachKey(LongProcedure procedure); // Applies a procedure to each key of the receiver, if any.\n\tboolean forEachPair(LongIntProcedure procedure); // Applies a procedure to each (key,value) pair of the receiver, if any.\n\tint get(long key); // Returns the value associated with the specified key.\n\tprotected void getInternalFactors(int[] capacity, double[] minLoadFactor, double[] maxLoadFactor); // Access for unit tests.\n\tprotected int indexOfInsertion(long key);\n\tprotected int indexOfKey(long key);\n\tprotected int indexOfValue(int value);\n\tIterator<OpenLongIntHashMap.MapElement> iterator();\n\tvoid keys(LongArrayList list); // Fills all keys contained in the receiver into the specified list.\n\tvoid pairsMatching(LongIntProcedure condition, LongArrayList keyList, IntArrayList valueList); // Fills all pairs satisfying a given condition into the specified lists.\n\tboolean put(long key, int value); // Associates the given key with the given value.\n\tprotected void rehash(int newCapacity); // Rehashes the contents of the receiver into a new table with a smaller or larger capacity.\n\tboolean removeKey(long key); // Removes the given key with its associated element from the receiver, if present.\n\tprotected void setUp(int initialCapacity, double minLoadFactor, double maxLoadFactor); // Initializes the receiver.\n\tvoid trimToSize(); // Trims the capacity of the receiver to be the receiver's current size.\n\tvoid values(IntArrayList list); // Fills all values contained in the receiver into the specified list.\n}"}
{"index": 3679, "repo": "hive-serde-4.0.0-alpha-2", "des": "A WritableDateObjectInspector inspects a DateWritableV2 Object.", "code": "Class WritableDateObjectInspector {\n\tObject copyObject(Object o); // Get a copy of the Object in the same class, so the return value can be stored independently of the parameter.\n\tObject create(Date d);\n\tDate getPrimitiveJavaObject(Object o); // Get the Java Primitive object.\n\tDateWritableV2 getPrimitiveWritableObject(Object o); // Return the data in an instance of primitive writable Object.\n\tObject set(Object o, Date d);\n\tObject set(Object o, DateWritableV2 d);\n}"}
{"index": 9, "repo": "spring-cloud-aws-jdbc-2.2.6.RELEASE", "des": "Factory to create DataSource instances at runtime.", "code": "Interface DataSourceFactory {\n\tvoid closeDataSource(DataSource dataSource); // Will be called if the datasource is not used anymore to allow the factory to release any resource that are used by the created object.\n\tDataSource createDataSource(DataSourceInformation dataSourceInformation); // Creates a datasource with the passed in information.\n}"}
{"index": 4522, "repo": "beam-sdks-java-core-2.49.0", "des": "A SetCoder encodes any Set using the format of IterableLikeCoder.", "code": "Class SetCoder<T> {\n\tprotected java.util.Set<T> decodeToIterable(java.util.List<T> decodedElements); // Builds an instance of IterableT, this coder's associated Iterable-like subtype, from a list of decoded elements.\n\tTypeDescriptor<java.util.Set<T>> getEncodedTypeDescriptor(); // Returns the TypeDescriptor for the type encoded.\n\tstatic <T> SetCoder<T> of(Coder<T> elementCoder); // Produces a SetCoder with the given elementCoder.\n\tvoid verifyDeterministic(); // Throw Coder.NonDeterministicException if the coding is not deterministic.\n}"}
{"index": 18645, "repo": "opencms-gwt-15.0", "des": "Context menu entry for deleting a category.", "code": "Class CmsDeleteCategoryMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 9841, "repo": "commons-math3-3.6.1", "des": "This class represents a subset of a Line.", "code": "Class SubLine {\n\tList<Segment> getSegments(); // Get the endpoints of the sub-line.\n\tVector3D intersection(SubLine subLine, boolean includeEndPoints); // Get the intersection of the instance and another sub-line.\n}"}
{"index": 18676, "repo": "opencms-gwt-15.0", "des": "The reset button holding all related methods.", "code": "Class CmsToolbarResetButton {\n\tvoid onToolbarActivate(); // Method executed when the button is activated.\n\tvoid onToolbarDeactivate(); // Method executed when the button is deactivated.\n}"}
{"index": 16304, "repo": "maven-compat-4.0.0-alpha-7", "des": "Shared methods of the repository metadata handling.", "code": "public abstract class AbstractRepositoryMetadata extends Object implements RepositoryMetadata {\n\tprotected static Metadata createMetadata(Artifact artifact, Versioning versioning);\n\tprotected static Versioning createVersioning(Snapshot snapshot);\n\tString extendedToString();\n\tString getLocalFilename(ArtifactRepository repository);\n\tMetadata getMetadata(); // Get the repository metadata associated with this marker.\n\tint getNature(); // Gets the artifact quality this metadata refers to.\n\tArtifactRepositoryPolicy getPolicy(ArtifactRepository repository); // Gets the policy that applies to this metadata regarding the specified repository.\n\tString getRemoteFilename();\n\tvoid merge(ArtifactMetadata metadata);\n\tvoid merge(ArtifactMetadata metadata);\n\tvoid setMetadata(Metadata metadata); // Set the metadata contents.\n\tvoid storeInLocalRepository(ArtifactRepository localRepository, ArtifactRepository remoteRepository);\n\tprotected void updateRepositoryMetadata(ArtifactRepository localRepository, ArtifactRepository remoteRepository);\n}"}
{"index": 15231, "repo": "spring-boot-3.1.1", "des": "EnvironmentPostProcessor that loads and applies ConfigData to Spring's Environment.", "code": "public class ConfigDataEnvironmentPostProcessor extends Object implements EnvironmentPostProcessor, org.springframework.core.Ordered {\n\tstatic void applyTo(org.springframework.core.env.ConfigurableEnvironment environment); // Apply ConfigData post-processing to an existing Environment.\n\tstatic void applyTo(org.springframework.core.env.ConfigurableEnvironment environment, org.springframework.core.io.ResourceLoader resourceLoader, ConfigurableBootstrapContext bootstrapContext, String... additionalProfiles); // Apply ConfigData post-processing to an existing Environment.\n\tstatic void applyTo(org.springframework.core.env.ConfigurableEnvironment environment, org.springframework.core.io.ResourceLoader resourceLoader, ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles); // Apply ConfigData post-processing to an existing Environment.\n\tstatic void applyTo(org.springframework.core.env.ConfigurableEnvironment environment, org.springframework.core.io.ResourceLoader resourceLoader, ConfigurableBootstrapContext bootstrapContext, Collection<String> additionalProfiles, ConfigDataEnvironmentUpdateListener environmentUpdateListener); // Apply ConfigData post-processing to an existing Environment.\n\tint getOrder();\n\tvoid postProcessEnvironment(org.springframework.core.env.ConfigurableEnvironment environment, SpringApplication application); // Post-process the given environment.\n}"}
{"index": 1528, "repo": "pdfbox-3.0.0-beta1", "des": "This will parse a PDF byte stream and extract operands and such.", "code": "Class PDFStreamParser {\n\tvoid close(); // Close the underlying resource.\n\tList<Object> parse(); // This will parse all the tokens in the stream.\n\tObject parseNextToken(); // This will parse the next token in the stream.\n}"}
{"index": 7752, "repo": "cassandra-all-4.1.2", "des": "Used by AbstractReadExecutor, {Data,Digest}Resolver and ReadRepair to share a ReplicaPlan whose 'contacts' replicas we progressively modify via various forms of speculation (initial speculation, rr-read and rr-write) The internal reference is not volatile, despite being shared between threads.", "code": "Interface ReplicaPlan.Shared<E extends Endpoints<E>,P extends ReplicaPlan<E,P>> {\n\tvoid addToContacts(Replica replica); // add the provided replica to this shared plan, by updating the internal reference\n\tP get(); // get the shared replica plan, non-volatile (so maybe stale) but no risk of partially initialised\n}"}
{"index": 9878, "repo": "commons-math3-3.6.1", "des": "This class is a simple container for weighted observed point in curve fitting.", "code": "Class WeightedObservedPoint {\n\tdouble getWeight(); // Gets the weight of the measurement in the fitting process.\n\tdouble getX(); // Gets the abscissa of the point.\n\tdouble getY(); // Gets the observed value of the function at x.\n}"}
{"index": 14935, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "Default implementation of OAuth2TokenContext.", "code": "public final class DefaultOAuth2TokenContext extends Object implements OAuth2TokenContext {\n\tstatic DefaultOAuth2TokenContext.Builder builder(); // Returns a new DefaultOAuth2TokenContext.Builder.\n\t<V> V get(Object key); // Returns the value of the attribute associated to the key.\n\tboolean hasKey(Object key); // Returns true if an attribute associated to the key exists, false otherwise.\n}"}
{"index": 14360, "repo": "wicket-core-10.0.0-M1", "des": "Default implementation of IPackageResourceGuard.", "code": "public class PackageResourceGuard extends Object implements IPackageResourceGuard {\n\tboolean accept(String path); // Whether the package resource that can be reached using the provided parameters may be accessed.\n\tprotected boolean acceptExtension(String extension); // Whether the provided extension is accepted.\n\tprotected boolean acceptFile(String file); // Whether the provided filename is accepted.\n\tprotected final Set<String> getBlockedExtensions(); // Gets the set of extensions that are denied access.\n\tprotected final Set<String> getBlockedFiles(); // Gets the set of extensions that are denied access.\n\tfinal boolean isAllowAccessToRootResources(); // Checks whether or not resources in the web root folder can be access.\n\tfinal void setAllowAccessToRootResources(boolean allowAccessToRootResources); // Sets whether or not resources in the web root folder can be accessed.\n\tprotected final void setBlockedExtensions(Set<String> blockedExtensions); // Sets the set of extensions that are denied access.\n\tprotected final void setBlockedFiles(Set<String> blockedFiles); // Sets the set of filenames that are denied access.\n}"}
{"index": 11349, "repo": "spring-context-6.0.11", "des": "Groovy-based implementation of Spring's ScriptEvaluator strategy interface.", "code": "public class GroovyScriptEvaluator extends Object implements ScriptEvaluator, org.springframework.beans.factory.BeanClassLoaderAware {\n\tObject evaluate(ScriptSource script); // Evaluate the given script.\n\tObject evaluate(ScriptSource script, Map<String,Object> arguments); // Evaluate the given script with the given arguments.\n\torg.codehaus.groovy.control.CompilerConfiguration getCompilerConfiguration(); // Return this evaluator's compiler configuration (never null).\n\tvoid setBeanClassLoader(ClassLoader classLoader);\n\tvoid setCompilationCustomizers(org.codehaus.groovy.control.customizers.CompilationCustomizer... compilationCustomizers); // Set one or more customizers to be applied to this evaluator's compiler configuration.\n\tvoid setCompilerConfiguration(org.codehaus.groovy.control.CompilerConfiguration compilerConfiguration); // Set a custom compiler configuration for this evaluator.\n}"}
{"index": 18052, "repo": "spring-ws-core-4.0.5", "des": "Adapter to use a PayloadEndpoint as the endpoint for a EndpointInvocationChain.", "code": "public class PayloadEndpointAdapter extends org.springframework.xml.transform.TransformerObjectSupport implements EndpointAdapter {\n\tvoid invoke(MessageContext messageContext, Object endpoint); // Use the given endpoint to handle the request.\n\tboolean supports(Object endpoint); // Does this EndpointAdapter support the given endpoint?\n}"}
{"index": 7142, "repo": "calcite-core-1.34.0", "des": "Relational expression that imposes a particular sort order on its input without otherwise changing its content.", "code": "Class Sort {\n\tRelNode accept(RexShuttle shuttle); // Accepts a visit from a shuttle.\n\t@Nullable RelOptCost computeSelfCost(RelOptPlanner planner, RelMetadataQuery mq); // Returns the cost of this plan (not including children).\n\tSort copy(RelTraitSet traitSet, List<RelNode> inputs); // Creates a copy of this relational expression, perhaps changing traits and inputs.\n\tSort copy(RelTraitSet traitSet, RelNode newInput, RelCollation newCollation);\n\tabstract Sort copy(RelTraitSet traitSet, RelNode newInput, RelCollation newCollation, @Nullable RexNode offset, @Nullable RexNode fetch);\n\tRelWriter explainTerms(RelWriter pw); // Describes the inputs and attributes of this relational expression.\n\tRelCollation getCollation(); // Returns the array of RelFieldCollations asked for by the sort specification, from most significant to least significant.\n\tcom.google.common.collect.ImmutableList<RelHint> getHints(); // Returns the hints of this relational expressions as an immutable list.\n\tList<RexNode> getSortExps(); // Returns the sort expressions.\n\tboolean isEnforcer(); // Indicates whether it is an enforcer operator, e.g.\n}"}
{"index": 9081, "repo": "hbase-server-3.0.0-alpha-4", "des": "Helper to Restore/Clone a Snapshot The helper assumes that a table is already created, and by calling restore() the content present in the snapshot will be restored as the new content of the table.", "code": "Class RestoreSnapshotHelper {\n\tRegionInfo cloneRegionInfo(RegionInfo snapshotRegionInfo); // Create a new RegionInfo from the snapshot region info.\n\tstatic RegionInfo cloneRegionInfo(TableName tableName, RegionInfo snapshotRegionInfo);\n\tstatic RestoreSnapshotHelper.RestoreMetaChanges copySnapshotForScanner(org.apache.hadoop.conf.Configuration conf, org.apache.hadoop.fs.FileSystem fs, org.apache.hadoop.fs.Path rootDir, org.apache.hadoop.fs.Path restoreDir, String snapshotName); // Copy the snapshot files for a snapshot scanner, discards meta changes.\n\tRestoreSnapshotHelper.RestoreMetaChanges restoreHdfsRegions(); // Restore the on-disk table to a specified snapshot state.\n\tstatic void restoreSnapshotAcl(org.apache.hadoop.hbase.shaded.protobuf.generated.SnapshotProtos.SnapshotDescription snapshot, TableName newTableName, org.apache.hadoop.conf.Configuration conf);\n}"}
{"index": 1827, "repo": "nifi-web-api-0.5.0", "des": "RESTful endpoint for managing a cluster.", "code": "Class AccessResource {\n\tprivate void authorizeProxyIfNecessary(List<String> proxyChain); // Ensures the proxyChain is authorized before allowing the user to be authenticated.\n\tprivate org.springframework.security.core.userdetails.UserDetails checkAuthorization(List<String> proxyChain); // Checks the status of the proxy.\n\tjavax.ws.rs.core.Response createAccessToken(javax.servlet.http.HttpServletRequest httpServletRequest, String username, String password); // Creates a token for accessing the REST API via username/password.\n\tjavax.ws.rs.core.Response getAccessStatus(javax.servlet.http.HttpServletRequest httpServletRequest, ClientIdParameter clientId); // Gets the status the client's access.\n\tjavax.ws.rs.core.Response getLoginConfig(javax.servlet.http.HttpServletRequest httpServletRequest, ClientIdParameter clientId); // Retrieves the access configuration for this NiFi.\n\tvoid setCertificateExtractor(X509CertificateExtractor certificateExtractor);\n\tvoid setCertificateIdentityProvider(X509IdentityProvider certificateIdentityProvider);\n\tvoid setJwtService(JwtService jwtService);\n\tvoid setLoginIdentityProvider(LoginIdentityProvider loginIdentityProvider);\n\tvoid setProperties(NiFiProperties properties);\n\tvoid setUserDetailsService(org.springframework.security.core.userdetails.AuthenticationUserDetailsService<NiFiAuthortizationRequestToken> userDetailsService);\n}"}
{"index": 8640, "repo": "avro-1.11.2", "des": "A MessageEncoder that encodes only a datum's bytes, without additional information (such as a schema fingerprint).", "code": "Class RawMessageEncoder<D> {\n\tByteBuffer encode(D datum); // Serialize a single datum to a ByteBuffer.\n\tvoid encode(D datum, OutputStream stream); // Serialize a single datum to an OutputStream.\n}"}
{"index": 11368, "repo": "spring-context-6.0.11", "des": "Formats fields annotated with the DateTimeFormat annotation using the JSR-310 java.time package in JDK 8.", "code": "public class Jsr310DateTimeFormatAnnotationFormatterFactory extends EmbeddedValueResolutionSupport implements AnnotationFormatterFactory<DateTimeFormat> {\n\tfinal Set<Class<?>> getFieldTypes(); // The types of fields that may be annotated with the <A> annotation.\n\tprotected DateTimeFormatter getFormatter(DateTimeFormat annotation, Class<?> fieldType); // Factory method used to create a DateTimeFormatter.\n\tParser<?> getParser(DateTimeFormat annotation, Class<?> fieldType); // Get the Parser to parse a submitted value for a field of fieldType annotated with annotation.\n\tPrinter<?> getPrinter(DateTimeFormat annotation, Class<?> fieldType); // Get the Printer to print the value of a field of fieldType annotated with annotation.\n}"}
{"index": 14047, "repo": "spring-context-support-6.0.11", "des": "Abstract implementation of JCacheOperationSource that caches attributes for methods and implements a fallback policy: 1.", "code": "public abstract class AbstractFallbackJCacheOperationSource extends Object implements JCacheOperationSource {\n\tprotected boolean allowPublicMethodsOnly(); // Should only public methods be allowed to have caching semantics?\n\tprotected abstract JCacheOperation<?> findCacheOperation(Method method, Class<?> targetType); // Subclasses need to implement this to return the caching operation for the given method, if any.\n\tJCacheOperation<?> getCacheOperation(Method method, Class<?> targetClass); // Return the cache operations for this method, or null if the method contains no JSR-107 related metadata.\n}"}
{"index": 11259, "repo": "spring-context-6.0.11", "des": "Convenient base class for ImportSelector implementations that select imports based on an AdviceMode value from an annotation (such as the @Enable* annotations).", "code": "public abstract class AdviceModeImportSelector<A extends Annotation> extends Object implements ImportSelector {\n\tprotected String getAdviceModeAttributeName(); // The name of the AdviceMode attribute for the annotation specified by the generic type A.\n\tprotected abstract String[] selectImports(AdviceMode adviceMode); // Determine which classes should be imported based on the given AdviceMode.\n\tfinal String[] selectImports(org.springframework.core.type.AnnotationMetadata importingClassMetadata); // This implementation resolves the type of annotation from generic metadata and validates that (a) the annotation is in fact present on the importing @Configuration class and (b) that the given annotation has an advice mode attribute of type AdviceMode.\n}"}
{"index": 17963, "repo": "spring-web-6.0.11", "des": "Interface for general web request interception.", "code": "public interface WebRequestInterceptor {\n\tvoid afterCompletion(WebRequest request, Exception ex); // Callback after completion of request processing, that is, after rendering the view.\n\tvoid postHandle(WebRequest request, org.springframework.ui.ModelMap model); // Intercept the execution of a request handler after its successful invocation, right before view rendering (if any).\n\tvoid preHandle(WebRequest request); // Intercept the execution of a request handler before its invocation.\n}"}
{"index": 1044, "repo": "ignite-core-2.15.0", "des": "Client node receives discovery messages in asynchronous mode so it is possible that all server nodes already accepted new mapping but clients are unaware about it.", "code": "Class MissingMappingRequestMessage {\n\tshort directType(); // Gets message type.\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid onAckReceived(); // Method called when ack message received.\n\tbyte platformId();\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tint typeId();\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 15274, "repo": "spring-boot-3.1.1", "des": "Connection details for embedded databases compatible with R2DBC.", "code": "public enum EmbeddedDatabaseConnection extends Enum<EmbeddedDatabaseConnection> {\n\tstatic EmbeddedDatabaseConnection get(ClassLoader classLoader); // Returns the most suitable EmbeddedDatabaseConnection for the given class loader.\n\tString getDriverClassName(); // Returns the driver class name.\n\tString getUrl(String databaseName); // Returns the R2DBC URL for the connection using the specified databaseName.\n\tstatic boolean isEmbedded(io.r2dbc.spi.ConnectionFactory connectionFactory); // Convenience method to determine if a given connection factory represents an embedded database type.\n\tstatic EmbeddedDatabaseConnection valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic EmbeddedDatabaseConnection[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 9567, "repo": "commons-math3-3.6.1", "des": "DBSCAN (density-based spatial clustering of applications with noise) algorithm.", "code": "Class DBSCANClusterer<T extends Clusterable> {\n\tList<Cluster<T>> cluster(Collection<T> points); // Performs DBSCAN cluster analysis.\n\tdouble getEps(); // Returns the maximum radius of the neighborhood to be considered.\n\tint getMinPts(); // Returns the minimum number of points needed for a cluster.\n}"}
{"index": 3802, "repo": "hbase-client-3.0.0-alpha-4", "des": "There are two modes with catalog replica support.", "code": "Enum CatalogReplicaMode {\n\tstatic CatalogReplicaMode fromString(String value);\n\tstatic CatalogReplicaMode valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CatalogReplicaMode[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 4893, "repo": "hadoop-common-3.3.4", "des": "The interface to 'raw' values of SequenceFiles.", "code": "Interface SequenceFile.ValueBytes {\n\tint getSize(); // Size of stored data.\n\tvoid writeCompressedBytes(DataOutputStream outStream); // Write compressed bytes to outStream.\n\tvoid writeUncompressedBytes(DataOutputStream outStream); // Writes the uncompressed bytes to the outStream.\n}"}
{"index": 6424, "repo": "exoplayer-core-2.9.6", "des": "Extracts data from the AMR containers format (either AMR or AMR-WB).", "code": "Class AmrExtractor {\n\tvoid init(ExtractorOutput extractorOutput); // Initializes the extractor with an ExtractorOutput.\n\tint read(ExtractorInput input, PositionHolder seekPosition); // Extracts data read from a provided ExtractorInput.\n\tvoid release(); // Releases all kept resources.\n\tvoid seek(long position, long timeUs); // Notifies the extractor that a seek has occurred.\n\tboolean sniff(ExtractorInput input); // Returns whether this extractor can extract samples from the ExtractorInput, which must provide data from the start of the stream.\n}"}
{"index": 7486, "repo": "nifi-client-dto-1.22.0", "des": "A serialized representation of this class can be placed in the entity body of a request or response to or from the API.", "code": "Class ProcessorEntity {\n\tProcessorDTO getComponent(); // The ProcessorDTO that is being serialized.\n\tString getInputRequirement();\n\tPermissionsDTO getOperatePermissions();\n\tProcessorStatusDTO getStatus(); // The Processor status.\n\tvoid setComponent(ProcessorDTO component);\n\tvoid setInputRequirement(String inputRequirement);\n\tvoid setOperatePermissions(PermissionsDTO operatePermissions);\n\tvoid setStatus(ProcessorStatusDTO status);\n}"}
{"index": 10427, "repo": "spring-cloud-sleuth-api-3.1.9", "des": "This API was heavily influenced by Brave.", "code": "public interface SamplerFunction<T> {\n\tstatic <T> SamplerFunction<T> alwaysSample(); // Always sampling SamplerFunction.\n\tstatic <T> SamplerFunction<T> deferDecision(); // Always deferring SamplerFunction.\n\tstatic <T> SamplerFunction<T> neverSample(); // Never sampling SamplerFunction.\n\tBoolean trySample(T arg); // Returns an overriding sampling decision for a new trace.\n}"}
{"index": 14076, "repo": "wicket-core-10.0.0-M1", "des": "An enumeration of possible positions of the label for a choice", "code": "public static enum AbstractChoice.LabelPosition extends Enum<AbstractChoice.LabelPosition> {\n\tstatic AbstractChoice.LabelPosition valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic AbstractChoice.LabelPosition[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 10408, "repo": "spring-core-6.0.11", "des": "A Supplier that allows invocation of code that throws a checked exception.", "code": "public interface ThrowingSupplier<T> extends Supplier<T> {\n\tdefault T get(); // Default Supplier.get() that wraps any thrown checked exceptions (by default in a RuntimeException).\n\tdefault T get(BiFunction<String,Exception,RuntimeException> exceptionWrapper); // Gets a result, wrapping any thrown checked exceptions using the given exceptionWrapper.\n\tT getWithException(); // Gets a result, possibly throwing a checked exception.\n\tstatic <T> ThrowingSupplier<T> of(ThrowingSupplier<T> supplier); // Lambda friendly convenience method that can be used to create a ThrowingSupplier where the get() method wraps any checked exception thrown by the supplied lambda expression or method reference.\n\tstatic <T> ThrowingSupplier<T> of(ThrowingSupplier<T> supplier, BiFunction<String,Exception,RuntimeException> exceptionWrapper); // Lambda friendly convenience method that can be used to create ThrowingSupplier where the get() method wraps any thrown checked exceptions using the given exceptionWrapper.\n\tdefault ThrowingSupplier<T> throwing(BiFunction<String,Exception,RuntimeException> exceptionWrapper); // Return a new ThrowingSupplier where the get() method wraps any thrown checked exceptions using the given exceptionWrapper.\n}"}
{"index": 2569, "repo": "exoplayer-r2.3.1", "des": "Calculate any percentile over a sliding window of weighted values.", "code": "Class SlidingPercentile {\n\tvoid addSample(int weight, float value); // Adds a new weighted value.\n\tfloat getPercentile(float percentile); // Computes a percentile by integration.\n}"}
{"index": 16511, "repo": "spring-batch-infrastructure-5.0.2", "des": "Postgres implementation of a PagingQueryProvider using database specific features.", "code": "public class PostgresPagingQueryProvider extends AbstractSqlPagingQueryProvider {\n\tString generateFirstPageQuery(int pageSize); // Method generating the query string to be used for retrieving the first page.\n\tString generateRemainingPagesQuery(int pageSize); // Method generating the query string to be used for retrieving the pages following the first page.\n}"}
{"index": 10150, "repo": "spring-hateoas-2.1.2", "des": "Syntactic sugar to create Link instances from MvcUriComponentsBuilder invocations.", "code": "public class MvcLink extends Object {\n\tstatic Link of(Object invocation); // Creates a new Link from the given MvcUriComponentsBuilder invocation defaulting to the IanaLinkRelations.SELF link relation.\n\tstatic Link of(Object invocation, LinkRelation relation); // Creates a new Link from the given MvcUriComponentsBuilder invocation.\n\tstatic Link of(Supplier<Object> invocation); // Creates a new Link from the given lazy MvcUriComponentsBuilder invocation defaulting to the IanaLinkRelations.SELF link relation.\n\tstatic Link of(Supplier<Object> invocation, LinkRelation relation); // Creates a new Link from the given lazy MvcUriComponentsBuilder invocation.\n\tstatic <T> T on(Class<T> controller); // Syntactic sugar for MvcUriComponentsBuilder.on(Class) to avoid the additional static import.\n}"}
{"index": 8768, "repo": "graal-sdk-1.0.0-rc7", "des": "A ByteSequence is a readable sequence of byte values.", "code": "Interface ByteSequence {\n\tbyte byteAt(int index); // Returns the byte value at the specified index.\n\tdefault IntStream bytes(); // Returns a stream of int zero-extending the byte values from this sequence.\n\tstatic ByteSequence create(byte[] buffer); // Creates a ByteSequence from an existing byte[].\n\tint length(); // Returns the length of this byte sequence.\n\tdefault ByteSequence subSequence(int startIndex, int endIndex); // Returns a ByteSequence that is a subsequence of this sequence.\n\tdefault byte[] toByteArray(); // Returns a byte[] containing the bytes in this sequence in the same order as this sequence.\n}"}
{"index": 14053, "repo": "spring-context-support-6.0.11", "des": "The default JCacheOperationSource implementation delegating default operations to configurable services with sensible defaults when not present.", "code": "public class DefaultJCacheOperationSource extends AnnotationJCacheOperationSource implements org.springframework.beans.factory.BeanFactoryAware, org.springframework.beans.factory.SmartInitializingSingleton {\n\tvoid afterSingletonsInstantiated();\n\tprotected <T> T getBean(Class<T> type); // Locate or create an instance of the specified cache strategy type.\n\torg.springframework.cache.CacheManager getCacheManager(); // Return the specified cache manager to use, if any.\n\torg.springframework.cache.interceptor.CacheResolver getCacheResolver(); // Return the specified cache resolver to use, if any.\n\tprotected org.springframework.cache.CacheManager getDefaultCacheManager();\n\tprotected org.springframework.cache.interceptor.CacheResolver getDefaultCacheResolver(); // Return the default CacheResolver if none is set.\n\tprotected org.springframework.cache.interceptor.CacheResolver getDefaultExceptionCacheResolver(); // Return the default exception CacheResolver if none is set.\n\tprotected org.springframework.cache.interceptor.KeyGenerator getDefaultKeyGenerator(); // Return the default KeyGenerator if none is set.\n\torg.springframework.cache.interceptor.CacheResolver getExceptionCacheResolver(); // Return the specified exception cache resolver to use, if any.\n\torg.springframework.cache.interceptor.KeyGenerator getKeyGenerator(); // Return the specified key generator to use.\n\tvoid setBeanFactory(org.springframework.beans.factory.BeanFactory beanFactory);\n\tvoid setCacheManager(org.springframework.cache.CacheManager cacheManager); // Set the default CacheManager to use to lookup cache by name.\n\tvoid setCacheResolver(org.springframework.cache.interceptor.CacheResolver cacheResolver); // Set the CacheResolver to resolve regular caches.\n\tvoid setExceptionCacheResolver(org.springframework.cache.interceptor.CacheResolver exceptionCacheResolver); // Set the CacheResolver to resolve exception caches.\n\tvoid setKeyGenerator(org.springframework.cache.interceptor.KeyGenerator keyGenerator); // Set the default KeyGenerator.\n}"}
{"index": 1604, "repo": "pdfbox-3.0.0-beta1", "des": "This class holds necessary information to decrypt a PDF document protected by the public key security handler.", "code": "Class PublicKeyDecryptionMaterial {\n\tX509Certificate getCertificate(); // Returns the certificate contained in the keystore.\n\tString getPassword(); // Returns the password given by the user and that will be used to open the private key.\n\tKey getPrivateKey(); // returns The private key that will be used to open the document protection.\n}"}
{"index": 14969, "repo": "spring-security-oauth2-authorization-server-1.1.1", "des": "A Filter that processes an authentication request for an OAuth 2.0 Client.", "code": "public final class OAuth2ClientAuthenticationFilter extends org.springframework.web.filter.OncePerRequestFilter {\n\tprotected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain);\n\tvoid setAuthenticationConverter(org.springframework.security.web.authentication.AuthenticationConverter authenticationConverter); // Sets the AuthenticationConverter used when attempting to extract client credentials from HttpServletRequest to an instance of OAuth2ClientAuthenticationToken used for authenticating the client.\n\tvoid setAuthenticationFailureHandler(org.springframework.security.web.authentication.AuthenticationFailureHandler authenticationFailureHandler); // Sets the AuthenticationFailureHandler used for handling a failed client authentication and returning the Error Response.\n\tvoid setAuthenticationSuccessHandler(org.springframework.security.web.authentication.AuthenticationSuccessHandler authenticationSuccessHandler); // Sets the AuthenticationSuccessHandler used for handling a successful client authentication and associating the OAuth2ClientAuthenticationToken to the SecurityContext.\n}"}
{"index": 342, "repo": "phoenix-core-5.1.3", "des": "Validates FROM clause and builds a ColumnResolver for resolving column references.", "code": "Class FromCompiler {\n\tstatic ColumnResolver getIndexResolver(SingleTableStatement statement, PhoenixConnection connection);\n\tstatic ColumnResolver getResolver(NamedTableNode tableNode, PhoenixConnection connection);\n\tstatic ColumnResolver getResolver(NamedTableNode tableNode, PhoenixConnection connection, boolean updateCacheImmediately);\n\tstatic ColumnResolver getResolver(NamedTableNode tableNode, PhoenixConnection connection, Map<String,UDFParseNode> udfParseNodes);\n\tstatic ColumnResolver getResolver(PhoenixConnection connection, TableRef tableRef, Map<String,UDFParseNode> udfParseNodes);\n\tstatic ColumnResolver getResolver(SingleTableStatement statement, PhoenixConnection connection);\n\tstatic ColumnResolver getResolver(SingleTableStatement statement, PhoenixConnection connection, Map<String,UDFParseNode> udfParseNodes);\n\tstatic ColumnResolver getResolver(TableRef tableRef);\n\tstatic ColumnResolver getResolverForCompiledDerivedTable(PhoenixConnection connection, TableRef tableRef, RowProjector projector);\n\tstatic ColumnResolver getResolverForCreation(CreateTableStatement statement, PhoenixConnection connection);\n\tstatic ColumnResolver getResolverForMutation(DMLStatement statement, PhoenixConnection connection);\n\tstatic ColumnResolver getResolverForProjectedTable(PTable projectedTable, PhoenixConnection connection, Map<String,UDFParseNode> udfParseNodes);\n\tstatic ColumnResolver getResolverForQuery(SelectStatement statement, PhoenixConnection connection);\n\tstatic ColumnResolver getResolverForQuery(SelectStatement statement, PhoenixConnection connection, boolean alwaysHitServer, TableName mutatingTableName); // Iterate through the nodes in the FROM clause to build a column resolver used to lookup a column given the name and alias.\n\tstatic ColumnResolver getResolverForSchema(String schema, PhoenixConnection connection);\n\tstatic ColumnResolver getResolverForSchema(UseSchemaStatement statement, PhoenixConnection connection);\n\tstatic TableRef refreshDerivedTableNode(ColumnResolver columnResolver, DerivedTableNode derivedTableNode); // Refresh the inner state of MultiTableColumnResolver for the derivedTableNode when the derivedTableNode is changed for some sql optimization.\n}"}
{"index": 11609, "repo": "spring-websocket-6.0.11", "des": "A base class for SockJS message codec that provides an implementation of AbstractSockJsMessageCodec.encode(String[]).", "code": "public abstract class AbstractSockJsMessageCodec extends Object implements SockJsMessageCodec {\n\tprotected abstract char[] applyJsonQuoting(String content); // Apply standard JSON string quoting (see json.org).\n\tString encode(String... messages); // Encode the given messages as a SockJS message frame.\n}"}
{"index": 5809, "repo": "iceberg-core-1.3.0", "des": "Factory responsible for generating unique but recognizable data/delete file names.", "code": "Class OutputFileFactory {\n\tstatic OutputFileFactory.Builder builderFor(org.apache.iceberg.Table table, int partitionId, long taskId);\n\torg.apache.iceberg.encryption.EncryptedOutputFile newOutputFile(); // Generates an EncryptedOutputFile for unpartitioned writes.\n\torg.apache.iceberg.encryption.EncryptedOutputFile newOutputFile(org.apache.iceberg.PartitionSpec spec, org.apache.iceberg.StructLike partition); // Generates an EncryptedOutputFile for partitioned writes in a given spec.\n\torg.apache.iceberg.encryption.EncryptedOutputFile newOutputFile(org.apache.iceberg.StructLike partition); // Generates an EncryptedOutputFile for partitioned writes in the default spec.\n}"}
{"index": 14223, "repo": "wicket-core-10.0.0-M1", "des": "A panel that displays FeedbackMessages in a list view.", "code": "public class FeedbackPanel extends Panel implements IFeedback {\n\tfinal boolean anyErrorMessage(); // Search messages that this panel will render, and see if there is any message of level ERROR or up.\n\tfinal boolean anyMessage(); // Search messages that this panel will render, and see if there is any message.\n\tfinal boolean anyMessage(int level); // Search messages that this panel will render, and see if there is any message of the given level.\n\tprotected String getCSSClass(FeedbackMessage message); // Gets the css class for the given message.\n\tprotected final List<FeedbackMessage> getCurrentMessages(); // Gets the currently collected messages for this panel.\n\tfinal FeedbackMessagesModel getFeedbackMessagesModel();\n\tfinal IFeedbackMessageFilter getFilter();\n\tfinal Comparator<FeedbackMessage> getSortingComparator();\n\tboolean isVersioned();\n\tprotected FeedbackMessagesModel newFeedbackMessagesModel(); // Gets a new instance of FeedbackMessagesModel to use.\n\tprotected Component newMessageDisplayComponent(String id, FeedbackMessage message); // Generates a component that is used to display the message inside the feedback panel.\n\tprotected ListItem<FeedbackMessage> newMessageItem(int index, IModel<FeedbackMessage> itemModel); // Allows to define the listItem to use in the feedback's message list.\n\tfinal FeedbackPanel setFilter(IFeedbackMessageFilter filter); // Sets a filter to use on the feedback messages model\n\tfinal FeedbackPanel setMaxMessages(int maxMessages);\n\tfinal FeedbackPanel setSortingComparator(Comparator<FeedbackMessage> sortingComparator); // Sets the comparator used for sorting the messages.\n}"}
{"index": 17671, "repo": "spring-web-6.0.11", "des": "Implementation of HttpMessageConverter that can read and write byte arrays.", "code": "public class ByteArrayHttpMessageConverter extends AbstractHttpMessageConverter<byte[]> {\n\tprotected Long getContentLength(byte[] bytes, MediaType contentType); // Returns the content length for the given type.\n\tbyte[] readInternal(Class<? extends byte[]> clazz, HttpInputMessage message); // Abstract template method that reads the actual object.\n\tboolean supports(Class<?> clazz); // Indicates whether the given class is supported by this converter.\n\tprotected void writeInternal(byte[] bytes, HttpOutputMessage outputMessage); // Abstract template method that writes the actual body.\n}"}
{"index": 11653, "repo": "spring-websocket-6.0.11", "des": "A contract for configuring a STOMP over WebSocket endpoint.", "code": "public interface StompWebSocketEndpointRegistration {\n\tStompWebSocketEndpointRegistration addInterceptors(HandshakeInterceptor... interceptors); // Configure the HandshakeInterceptor's to use.\n\tStompWebSocketEndpointRegistration setAllowedOriginPatterns(String... originPatterns); // Alternative to setAllowedOrigins(String...) that supports more flexible patterns for specifying the origins for which cross-origin requests are allowed from a browser.\n\tStompWebSocketEndpointRegistration setAllowedOrigins(String... origins); // Set the origins for which cross-origin requests are allowed from a browser.\n\tStompWebSocketEndpointRegistration setHandshakeHandler(HandshakeHandler handshakeHandler); // Configure the HandshakeHandler to use.\n\tSockJsServiceRegistration withSockJS(); // Enable SockJS fallback options.\n}"}
{"index": 14497, "repo": "spring-security-web-6.1.2", "des": "Inserts Cross-Origin-Embedder-Policy header.", "code": "public final class CrossOriginEmbedderPolicyHeaderWriter extends Object implements HeaderWriter {\n\tvoid setPolicy(CrossOriginEmbedderPolicyHeaderWriter.CrossOriginEmbedderPolicy embedderPolicy); // Sets the CrossOriginEmbedderPolicyHeaderWriter.CrossOriginEmbedderPolicy value to be used in the Cross-Origin-Embedder-Policy header\n\tvoid writeHeaders(jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Create a Header instance.\n}"}
{"index": 2600, "repo": "nifi-utils-1.22.0", "des": "Defines an interface to search for content given a set of search terms.", "code": "Interface Search<T> {\n\tvoid initializeDictionary(Set<SearchTerm<T>> terms); // Establishes the dictionary of terms which will be searched in subsequent search calls.\n\tSearchState<T> search(InputStream haystack, boolean findAll); // Searches the given input stream for matches between the already specified dictionary and the contents scanned.\n}"}
{"index": 14869, "repo": "spring-data-commons-3.1.2", "des": "Parser to populate the given ClassPathScanningCandidateComponentProvider with TypeFilters parsed from the given Element's children.", "code": "public class TypeFilterParser extends Object {\n\tprotected TypeFilter createTypeFilter(Element element, ClassLoader classLoader); // Creates a TypeFilter instance from the given Element and ClassLoader.\n\tCollection<TypeFilter> parseTypeFilters(Element element, TypeFilterParser.Type type); // Returns all TypeFilter declared in nested elements of the given Element.\n}"}
{"index": 5152, "repo": "druid-processing-26.0.0", "des": "usage: CellReader effectively stores a list of byte[] payloads that are retrievable randomly by index.", "code": "Class CellWriter {\n\tstatic CellWriter.Builder builder(SegmentWriteOutMedium segmentWriteOutMedium);\n\tvoid close();\n\tlong getSerializedSize(); // Returns the number of bytes, that this Serializer will write to the output _channel_ (not smoosher) on a Serializer.writeTo(java.nio.channels.WritableByteChannel, org.apache.druid.java.util.common.io.smoosh.FileSmoosher) call.\n\tvoid write(byte[] cellBytes);\n\tvoid write(ByteBuffer cellByteBuffer);\n\tvoid writeTo(WritableByteChannel channel, FileSmoosher smoosher); // Writes serialized form of this object to the given channel.\n}"}
{"index": 9023, "repo": "hbase-server-3.0.0-alpha-4", "des": "A SpaceViolationPolicyEnforcement implementation which disables all updates and compactions.", "code": "Class NoWritesCompactionsViolationPolicyEnforcement {\n\tboolean areCompactionsDisabled(); // Returns whether or not compactions on this table should be disabled for this policy.\n\tvoid disable(); // Disables this policy.\n\tvoid enable(); // Enables this policy.\n\tString getPolicyName(); // Returns a logical name for the SpaceViolationPolicy that this enforcement is for.\n}"}
{"index": 7912, "repo": "commons-jcs3-core-3.1", "des": "Stores info on a cache element for the template.", "code": "Class CacheElementInfo {\n\tString getCreateTime();\n\tlong getExpiresInSeconds(); // Ignored if isEternal\n\tString getKey();\n\tlong getMaxLifeSeconds(); // Ignored if isEternal\n\tboolean isEternal();\n}"}
{"index": 9876, "repo": "commons-math3-3.6.1", "des": "Returns the arithmetic mean of the available vectors.", "code": "Class VectorialMean {\n\tboolean equals(Object obj);\n\tlong getN(); // Get the number of vectors in the sample.\n\tdouble[] getResult(); // Get the mean vector.\n\tvoid increment(double[] v); // Add a new vector to the sample.\n}"}
{"index": 2784, "repo": "tika-parsers-1.28.5", "des": "This class provides methods to extract biomedical information from plain text using CTAKESContentHandler that relies on Apache cTAKES.", "code": "Class CTAKESUtils {\n\tstatic org.apache.uima.analysis_engine.AnalysisEngine getAnalysisEngine(String aeDescriptor, String umlsUser, String umlsPass); // Returns a new UIMA Analysis Engine (AE).\n\tstatic String getAnnotationProperty(org.apache.ctakes.typesystem.type.textsem.IdentifiedAnnotation annotation, CTAKESAnnotationProperty property); // Returns the annotation value based on the given annotation type.\n\tstatic org.apache.uima.jcas.JCas getJCas(org.apache.uima.analysis_engine.AnalysisEngine ae); // Returns a new JCas () appropriate for the given Analysis Engine.\n\tstatic void reset(org.apache.uima.analysis_engine.AnalysisEngine ae, org.apache.uima.jcas.JCas jcas); // Resets cTAKES objects, if created.\n\tstatic void resetAE(org.apache.uima.analysis_engine.AnalysisEngine ae); // Resets the AE (AnalysisEngine), releasing all resources held by the current AE.\n\tstatic void resetCAS(org.apache.uima.jcas.JCas jcas); // Resets the CAS (Common Analysis System), emptying it of all content.\n\tstatic void serialize(org.apache.uima.jcas.JCas jcas, CTAKESSerializer type, boolean prettyPrint, OutputStream stream); // Serializes a CAS in the given format.\n}"}
{"index": 2334, "repo": "commons-geometry-euclidean-1.0", "des": "Base class for affine transform matrices in Euclidean space.", "code": "Class AbstractAffineTransformMatrix<V extends EuclideanVector<V>,M extends AbstractAffineTransformMatrix<V,M>> {\n\tabstract V applyDirection(V vec); // Apply this transform to the given vector, ignoring translations and normalizing the result.\n\tabstract double determinant(); // Get the determinant of the matrix.\n\tabstract M inverse();\n\tabstract M linear(); // Return a matrix containing only the linear portion of this transform.\n\tabstract M linearTranspose(); // Return a matrix containing the transpose of the linear portion of this transform.\n\tM normalTransform(); // Return a transform suitable for transforming normals.\n\tboolean preservesOrientation();\n}"}
{"index": 8398, "repo": "hadoop-aws-3.3.6", "des": "This is the foundational API for collecting S3A statistics.", "code": "Interface CountersAndGauges {\n\tvoid addValueToQuantiles(Statistic op, long value); // Add a value to a quantiles statistic.\n\tvoid decrementGauge(Statistic op, long count); // Decrement a specific gauge.\n\tvoid incrementCounter(Statistic op, long count); // Increment a specific counter.\n\tvoid incrementGauge(Statistic op, long count); // Increment a specific gauge.\n\tvoid recordDuration(Statistic op, boolean success, Duration duration); // Record a duration.\n}"}
{"index": 11461, "repo": "spring-context-6.0.11", "des": "ClassFileTransformer-based weaver, allowing for a list of transformers to be applied on a class byte array.", "code": "public class WeavingTransformer extends Object {\n\tvoid addTransformer(ClassFileTransformer transformer); // Add a class file transformer to be applied by this weaver.\n\tbyte[] transformIfNecessary(String className, byte[] bytes); // Apply transformation on a given class byte definition.\n\tbyte[] transformIfNecessary(String className, String internalName, byte[] bytes, ProtectionDomain pd); // Apply transformation on a given class byte definition.\n}"}
{"index": 2210, "repo": "hive-exec-4.0.0-alpha-2", "des": "Task for fast merging of ORC and RC files.", "code": "Class MergeFileTask {\n\tboolean checkFatalErrors(org.apache.hadoop.mapred.Counters ctrs, StringBuilder errMsg);\n\tint execute(); // start a new map-reduce job to do the merge, almost the same as ExecDriver.\n\tString getName();\n\tStageType getType(); // Should be overridden to return the type of the specific task among the types in StageType.\n\tvoid initialize(QueryState queryState, QueryPlan queryPlan, TaskQueue taskQueue, Context context);\n\tvoid logPlanProgress(SessionState ss);\n\tboolean requireLock();\n}"}
{"index": 5873, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Request class to obtain information about a sub-cluster identified by its SubClusterId.", "code": "Class GetSubClusterInfoRequest {\n\tabstract SubClusterId getSubClusterId(); // Get the SubClusterId representing the unique identifier of the subcluster.\n\tstatic GetSubClusterInfoRequest newInstance(SubClusterId subClusterId);\n\tabstract void setSubClusterId(SubClusterId subClusterId); // Set the SubClusterId representing the unique identifier of the subcluster.\n}"}
{"index": 18660, "repo": "opencms-gwt-15.0", "des": "Sitemap context menu update sitemap entry.", "code": "Class CmsRefreshMenuEntry {\n\tvoid execute(); // Executes the context menu action.\n\tvoid onShow(); // Executed when the context-menu is opened.\n}"}
{"index": 6317, "repo": "mina-core-3.0.0-M2", "des": "The default implementation for the IoFuture returned by IoSession.", "code": "Class DefaultWriteFuture {\n\tprotected boolean cancelOwner(boolean mayInterruptIfRunning); // Notify the owner of this future that a client is attempting to cancel.\n\tvoid complete(); // complete this future\n}"}
{"index": 7489, "repo": "nifi-client-dto-1.22.0", "des": "A serialized representation of this class can be placed in the entity body of a request or response to or from the API.", "code": "Class TenantsEntity {\n\tCollection<TenantEntity> getUserGroups(); // The collection of user groups that are being serialized.\n\tCollection<TenantEntity> getUsers(); // The collection of users that are being serialized.\n\tvoid setUserGroups(Collection<TenantEntity> userGroups);\n\tvoid setUsers(Collection<TenantEntity> users);\n}"}
{"index": 12285, "repo": "jena-core-4.9.0", "des": "The StringList is an immutable ordered collection of GenericString.", "code": "public interface StringList extends List {\n\tboolean contains(String item); // Checks if the GenericString item is a member of this list.\n\tint getLength(); // The number of GenericStrings in the list.\n\tString item(int index); // Returns the indexth item in the collection or null if index is greater than or equal to the number of objects in the list.\n}"}
{"index": 9359, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by Application Master to the Node Manager to change the resource quota of a container.", "code": "Class IncreaseContainersResourceRequest {\n\tabstract List<Token> getContainersToIncrease(); // Get a list of container tokens to be used for authorization during container resource increase.\n\tstatic IncreaseContainersResourceRequest newInstance(List<Token> containersToIncrease);\n\tabstract void setContainersToIncrease(List<Token> containersToIncrease); // Set container tokens to be used during container resource increase.\n}"}
{"index": 11556, "repo": "spring-security-oauth2-client-6.1.2", "des": "An implementation of an OAuth2AuthorizedClientRepository that stores OAuth2AuthorizedClient's in the HttpSession.", "code": "public final class HttpSessionOAuth2AuthorizedClientRepository extends Object implements OAuth2AuthorizedClientRepository {\n\t<T extends OAuth2AuthorizedClient>T loadAuthorizedClient(String clientRegistrationId, org.springframework.security.core.Authentication principal, jakarta.servlet.http.HttpServletRequest request); // Returns the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User Authentication (Resource Owner) or null if not available.\n\tvoid removeAuthorizedClient(String clientRegistrationId, org.springframework.security.core.Authentication principal, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Removes the OAuth2AuthorizedClient associated to the provided client registration identifier and End-User Authentication (Resource Owner).\n\tvoid saveAuthorizedClient(OAuth2AuthorizedClient authorizedClient, org.springframework.security.core.Authentication principal, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Saves the OAuth2AuthorizedClient associating it to the provided End-User Authentication (Resource Owner).\n}"}
{"index": 14614, "repo": "spring-security-web-6.1.2", "des": "A strategy for decorating the provided filter chain with one that accounts for the SecurityFilterChain for a given request.", "code": "public static interface WebFilterChainProxy.WebFilterChainDecorator {\n\tdefault org.springframework.web.server.WebFilterChain decorate(org.springframework.web.server.WebFilterChain original); // Provide a new FilterChain that accounts for needed security considerations when there are no security filters.\n\torg.springframework.web.server.WebFilterChain decorate(org.springframework.web.server.WebFilterChain original, List<org.springframework.web.server.WebFilter> filters); // Provide a new FilterChain that accounts for the provided filters as well as teh original filter chain.\n}"}
{"index": 16699, "repo": "spring-beans-6.0.11", "des": "FactoryBean that exposes the 'primary' service for the configured service class, obtained through the JDK 1.6 ServiceLoader facility.", "code": "public class ServiceFactoryBean extends AbstractServiceLoaderBasedFactoryBean implements BeanClassLoaderAware {\n\tprotected Object getObjectToExpose(ServiceLoader<?> serviceLoader); // Determine the actual object to expose for the given ServiceLoader.\n\tClass<?> getObjectType(); // This abstract method declaration mirrors the method in the FactoryBean interface, for a consistent offering of abstract template methods.\n}"}
{"index": 1128, "repo": "ignite-core-2.15.0", "des": "Extended query entity with not-null fields support.", "code": "Class QueryEntityEx {\n\tboolean equals(Object o);\n\tboolean fillAbsentPKsWithDefaults();\n\tQueryEntity fillAbsentPKsWithDefaults(boolean fillAbsentPKsWithDefaults);\n\tInteger getAffinityKeyInlineSize(); // Returns INLINE_SIZE for affinity field index.\n\t@Nullable Set<String> getNotNullFields(); // Gets names of fields that must be checked for null.\n\tInteger getPrimaryKeyInlineSize(); // Returns INLINE_SIZE for PK index.\n\tboolean implicitPk();\n\tQueryEntity implicitPk(boolean implicitPk);\n\tboolean isPreserveKeysOrder();\n\tQueryEntity setAffinityKeyInlineSize(Integer affKeyInlineSize); // Sets INLINE_SIZE for AFFINITY_KEY index.\n\tQueryEntity setNotNullFields(@Nullable Set<String> notNullFields); // Sets names of fields that must checked for null.\n\tQueryEntity setPreserveKeysOrder(boolean preserveKeysOrder);\n\tQueryEntity setPrimaryKeyInlineSize(Integer pkInlineSize); // Sets INLINE_SIZE for PK index.\n}"}
{"index": 14493, "repo": "spring-security-web-6.1.2", "des": "A CsrfTokenRepository that persists the CSRF token in a cookie named \"XSRF-TOKEN\" and reads from the header \"X-XSRF-TOKEN\" following the conventions of AngularJS.", "code": "public final class CookieCsrfTokenRepository extends Object implements CsrfTokenRepository {\n\tCsrfToken generateToken(jakarta.servlet.http.HttpServletRequest request); // Generates a CsrfToken\n\tString getCookiePath(); // Get the path that the CSRF cookie will be set to.\n\tCsrfToken loadToken(jakarta.servlet.http.HttpServletRequest request); // Loads the expected CsrfToken from the HttpServletRequest\n\tvoid saveToken(CsrfToken token, jakarta.servlet.http.HttpServletRequest request, jakarta.servlet.http.HttpServletResponse response); // Saves the CsrfToken using the HttpServletRequest and HttpServletResponse.\n\tvoid setCookieCustomizer(Consumer<org.springframework.http.ResponseCookie.ResponseCookieBuilder> cookieCustomizer); // Add a Consumer for a ResponseCookieBuilder that will be invoked for each cookie being built, just before the call to build().\n\tvoid setCookieDomain(String cookieDomain); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tvoid setCookieHttpOnly(boolean cookieHttpOnly); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tvoid setCookieMaxAge(int cookieMaxAge); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tvoid setCookieName(String cookieName); // Sets the name of the cookie that the expected CSRF token is saved to and read from.\n\tvoid setCookiePath(String path); // Set the path that the Cookie will be created with.\n\tvoid setHeaderName(String headerName); // Sets the name of the HTTP header that should be used to provide the token.\n\tvoid setParameterName(String parameterName); // Sets the name of the HTTP request parameter that should be used to provide a token.\n\tvoid setSecure(Boolean secure); // Deprecated. Use setCookieCustomizer(Consumer) instead.\n\tstatic CookieCsrfTokenRepository withHttpOnlyFalse(); // Factory method to conveniently create an instance that creates cookies where Cookie.isHttpOnly() is set to false.\n}"}
{"index": 11293, "repo": "spring-context-6.0.11", "des": "Interface to be implemented by @Configuration classes annotated with @EnableCaching that wish or need to specify explicitly how caches are resolved and how keys are generated for annotation-driven cache management.", "code": "public interface CachingConfigurer {\n\tdefault CacheManager cacheManager(); // Return the cache manager bean to use for annotation-driven cache management.\n\tdefault CacheResolver cacheResolver(); // Return the CacheResolver bean to use to resolve regular caches for annotation-driven cache management.\n\tdefault CacheErrorHandler errorHandler(); // Return the CacheErrorHandler to use to handle cache-related errors.\n\tdefault KeyGenerator keyGenerator(); // Return the key generator bean to use for annotation-driven cache management.\n}"}
{"index": 6880, "repo": "calcite-core-1.34.0", "des": "Tools for invoking Calcite functionality without initializing a container / server first.", "code": "Class Frameworks {\n\tstatic SchemaPlus createRootSchema(boolean addMetadataSchema); // Creates a root schema.\n\tstatic Planner getPlanner(FrameworkConfig config); // Creates a planner.\n\tstatic Frameworks.ConfigBuilder newConfigBuilder(); // Creates a config builder with each setting initialized to its default value.\n\tstatic Frameworks.ConfigBuilder newConfigBuilder(FrameworkConfig config); // Creates a config builder initializing each setting from an existing config.\n\tstatic <R> R withPlanner(Frameworks.PlannerAction<R> action); // Initializes a container then calls user-specified code with a planner.\n\tstatic <R> R withPlanner(Frameworks.PlannerAction<R> action, FrameworkConfig config); // Initializes a container then calls user-specified code with a planner.\n\tstatic <R> R withPrepare(FrameworkConfig config, Frameworks.BasePrepareAction<R> action); // Initializes a container then calls user-specified code with a planner and statement.\n\tstatic <R> R withPrepare(Frameworks.BasePrepareAction<R> action); // As withPrepare(FrameworkConfig, BasePrepareAction) but using a default configuration.\n}"}
{"index": 4046, "repo": "zookeeper-3.8.2", "des": "Most simple HostProvider, resolves on every next() call.", "code": "Class StaticHostProvider {\n\tInetSocketAddress getServerAtCurrentIndex();\n\tInetSocketAddress getServerAtIndex(int i);\n\tInetSocketAddress next(long spinDelay); // The next host to try to connect to.\n\tvoid onConnected(); // Notify the HostProvider of a successful connection.\n\tint size();\n\tboolean updateServerList(Collection<InetSocketAddress> serverAddresses, InetSocketAddress currentHost); // Update the list of servers.\n}"}
{"index": 3798, "repo": "hbase-client-3.0.0-alpha-4", "des": "Simple RpcCallback implementation providing a Future-like get() method, which will block util the instance's run(Object) method has been called.", "code": "Class BlockingRpcCallback<R> {\n\tR get(); // Returns the parameter passed to run(Object) or null if a null value was passed.\n\tvoid run(R parameter); // Called on completion of the RPC call with the response object, or null in the case of an error.\n}"}
{"index": 14013, "repo": "spring-retry-2.0.2", "des": "A RetryPolicy that allows the first attempt but never permits a retry.", "code": "public class NeverRetryPolicy extends Object implements RetryPolicy {\n\tboolean canRetry(RetryContext context); // Returns false after the first exception.\n\tvoid close(RetryContext context); // Do nothing.\n\tRetryContext open(RetryContext parent); // Return a context that can respond to early termination requests, but does nothing else.\n\tvoid registerThrowable(RetryContext context, Throwable throwable); // Make the throwable available for downstream use through the context.\n}"}
{"index": 18223, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Descriptor for a package (as indicated by a package-info.class file).", "code": "Interface PackageDescriptor {\n\tjava.lang.String getName(); // Retrieves the package name.\n\tInputStreamAccess getStreamAccess(); // Retrieves access to the InputStream for the package-info.class file.\n}"}
{"index": 3786, "repo": "hbase-client-3.0.0-alpha-4", "des": "Helper class for sending coprocessorService request that executes a coprocessor call on regions which are covered by a range.", "code": "Interface AsyncTable.CoprocessorServiceBuilder<S,R> {\n\tvoid execute(); // Execute the coprocessorService request.\n\tdefault AsyncTable.CoprocessorServiceBuilder<S,R> fromRow(byte[] startKey); // Specify a start row\n\tAsyncTable.CoprocessorServiceBuilder<S,R> fromRow(byte[] startKey, boolean inclusive); // Specify a start row\n\tdefault AsyncTable.CoprocessorServiceBuilder<S,R> toRow(byte[] endKey); // Specify a stop row\n\tAsyncTable.CoprocessorServiceBuilder<S,R> toRow(byte[] endKey, boolean inclusive); // Specify a stop row\n}"}
{"index": 2925, "repo": "tink-1.10.0", "des": "Represents an AES-CTR-HMAC key used for computing AEAD.", "code": "Class AesCtrHmacAeadKey {\n\tstatic AesCtrHmacAeadKey.Builder builder();\n\tboolean equalsKey(Key o); // Returns true if the key is guaranteed to be equal to other.\n\tSecretBytes getAesKeyBytes(); // Returns the underlying AES key bytes.\n\tSecretBytes getHmacKeyBytes(); // Returns the underlying HMAC key bytes.\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tBytes getOutputPrefix(); // Returns a Bytes instance which is prefixed to the ciphertext.\n\tAesCtrHmacAeadParameters getParameters(); // Returns the parameters of this key.\n}"}
{"index": 15998, "repo": "wicket-util-10.0.0-M1", "des": "Monitors one or more IModifiable objects, calling a IChangeListener when a given object's modification time changes.", "code": "public class ModificationWatcher extends Object implements IModificationWatcher {\n\tfinal boolean add(IModifiable modifiable, IChangeListener<IModifiable> listener); // Adds an IModifiable object and an IChangeListener object to call when the modifiable object is modified.\n\tprotected void checkModified(); // Checks which IModifiables were modified and notifies their listeners\n\tvoid destroy(); // Stops this ModificationWatcher.\n\tfinal Set<IModifiable> getEntries(); // Retrieves a key set of all IModifiable objects currently being monitored.\n\tIModifiable remove(IModifiable modifiable); // Removes all entries associated with an IModifiable object.\n\tvoid start(Duration pollFrequency); // Starts watching at a given Duration polling rate.\n}"}
{"index": 1138, "repo": "ignite-core-2.15.0", "des": "ReentrantReadWriteLock adapter with readLock tracking.", "code": "Class ReentrantReadWriteLockWithTracking {\n\tint getReadHoldCount(); // Queries the number of reentrant read holds on this lock by the current thread.\n\tint getReadLockCount(); // Queries the number of read locks held for this lock.\n\tboolean isWriteLockedByCurrentThread(); // Queries if the write lock is held by the current thread.\n\tlong lockWaitThreshold();\n\tReentrantReadWriteLock.ReadLock readLock();\n\tReentrantReadWriteLock.WriteLock writeLock();\n}"}
{"index": 1993, "repo": "hive-exec-4.0.0-alpha-2", "des": "Buffers rows emitted by other operators.", "code": "Class CollectOperator {\n\tString getName();\n\tstatic String getOperatorName();\n\tOperatorType getType(); // Return the type of the specific operator among the types in OperatorType.\n\tprotected void initializeOp(org.apache.hadoop.conf.Configuration hconf); // Operator specific initialization.\n\tboolean logicalEquals(Operator other); // Decides whether two operators are logically the same.\n\tvoid process(Object row, int tag); // Process the row.\n\tvoid retrieve(InspectableObject result);\n}"}
{"index": 16149, "repo": "spring-data-cassandra-4.1.2", "des": "Value object representing a column name.", "code": "public abstract class ColumnName extends Object {\n\tboolean equals(Object obj);\n\tstatic ColumnName from(com.datastax.oss.driver.api.core.CqlIdentifier cqlIdentifier); // Create a ColumnName given CqlIdentifier.\n\tstatic ColumnName from(String columnName); // Create a ColumnName given a string columnName.\n\tabstract Optional<String> getColumnName();\n\tabstract Optional<com.datastax.oss.driver.api.core.CqlIdentifier> getCqlIdentifier();\n\tabstract String toCql(); // Represent the column name as CQL.\n}"}
{"index": 15357, "repo": "spring-boot-3.1.1", "des": "A WebApplicationContext that can be used to bootstrap itself from a contained ServletWebServerFactory bean.", "code": "public class ServletWebServerApplicationContext extends org.springframework.web.context.support.GenericWebApplicationContext implements ConfigurableWebServerApplicationContext {\n\tprotected void doClose();\n\tprotected org.springframework.core.io.Resource getResourceByPath(String path);\n\tString getServerNamespace(); // Returns the namespace of the web server application context or null if no namespace has been set.\n\tjakarta.servlet.ServletConfig getServletConfig();\n\tprotected Collection<ServletContextInitializer> getServletContextInitializerBeans(); // Returns ServletContextInitializers that should be used with the embedded web server.\n\tWebServer getWebServer(); // Returns the WebServer that was created by the context or null if the server has not yet been created.\n\tprotected ServletWebServerFactory getWebServerFactory(); // Returns the ServletWebServerFactory that should be used to create the embedded WebServer.\n\tprotected void onRefresh();\n\tprotected void postProcessBeanFactory(org.springframework.beans.factory.config.ConfigurableListableBeanFactory beanFactory); // Register ServletContextAwareProcessor.\n\tprotected void prepareWebApplicationContext(jakarta.servlet.ServletContext servletContext); // Prepare the WebApplicationContext with the given fully loaded ServletContext.\n\tfinal void refresh();\n\tvoid setServerNamespace(String serverNamespace); // Set the server namespace of the context.\n\tvoid setServletConfig(jakarta.servlet.ServletConfig servletConfig);\n}"}
{"index": 10986, "repo": "spring-data-redis-3.1.2", "des": "Set-specific commands supported by Redis.", "code": "public interface RedisSetCommands {\n\tLong sAdd(byte[] key, byte[]... values); // Add given values to set at key.\n\tLong sCard(byte[] key); // Get size of set at key.\n\tSet<byte[]> sDiff(byte[]... keys); // Diff all sets for given keys.\n\tLong sDiffStore(byte[] destKey, byte[]... keys); // Diff all sets for given keys and store result in destKey.\n\tSet<byte[]> sInter(byte[]... keys); // Returns the members intersecting all given sets at keys.\n\tLong sInterStore(byte[] destKey, byte[]... keys); // Intersect all given sets at keys and store result in destKey.\n\tBoolean sIsMember(byte[] key, byte[] value); // Check if set at key contains value.\n\tSet<byte[]> sMembers(byte[] key); // Get all elements of set at key.\n\tList<Boolean> sMIsMember(byte[] key, byte[]... values); // Check if set at key contains one or more values.\n\tBoolean sMove(byte[] srcKey, byte[] destKey, byte[] value); // Move value from srcKey to destKey\n\tbyte[] sPop(byte[] key); // Remove and return a random member from set at key.\n\tList<byte[]> sPop(byte[] key, long count); // Remove and return count random members from set at key.\n\tbyte[] sRandMember(byte[] key); // Get random element from set at key.\n\tList<byte[]> sRandMember(byte[] key, long count); // Get count random elements from set at key.\n\tLong sRem(byte[] key, byte[]... values); // Remove given values from set at key and return the number of removed elements.\n\tCursor<byte[]> sScan(byte[] key, ScanOptions options); // Use a Cursor to iterate over elements in set at key.\n\tSet<byte[]> sUnion(byte[]... keys); // Union all sets at given keys.\n\tLong sUnionStore(byte[] destKey, byte[]... keys); // Union all sets at given keys and store result in destKey.\n}"}
{"index": 18616, "repo": "hibernate-core-5.6.15.Final", "des": "Contract for contextual information required to perform translation.", "code": "Interface TranslationContext {\n\tColumnMapper getColumnMapper(); // Retrieves the column mapper for this context.\n\tDialect getDialect(); // Retrieves the dialect for this context.\n\tSessionFactoryImplementor getSessionFactory(); // Retrieves the session factory for this context.\n\tSQLFunctionRegistry getSqlFunctionRegistry(); // Retrieves the SQL function registry for this context.\n}"}
{"index": 8693, "repo": "curator-client-5.5.0", "des": "Expose more metrics for the operations and events.", "code": "Class AdvancedTracerDriver {\n\tabstract void addEvent(EventTrace trace); // Add to a named counter\n\tabstract void addTrace(OperationTrace trace); // Record the given trace event\n}"}
{"index": 8194, "repo": "spring-ws-3.0.10.RELEASE", "des": "Represents an Endpoint Reference, as defined in the WS-Addressing specification.", "code": "Class EndpointReference {\n\tboolean equals(Object o);\n\tURI getAddress(); // Returns the address of the endpoint.\n\tList<Node> getReferenceParameters(); // Returns the reference parameters of the endpoint, as a list of Node objects.\n\tList<Node> getReferenceProperties(); // Returns the reference properties of the endpoint, as a list of Node objects.\n}"}
{"index": 2229, "repo": "hive-exec-4.0.0-alpha-2", "des": "Library of utility functions used in the parse code.", "code": "Class ParseUtils {\n\tstatic boolean containsTokenOfType(ASTNode root, Integer... tokens);\n\tstatic boolean containsTokenOfType(ASTNode root, PTFUtils.Predicate<ASTNode> predicate);\n\tstatic String ensureClassExists(String className);\n\tstatic CharTypeInfo getCharTypeInfo(ASTNode node);\n\tstatic DecimalTypeInfo getDecimalTypeTypeInfo(ASTNode node);\n\tstatic Map<Integer,List<ExprNodeGenericFuncDesc>> getFullPartitionSpecs(org.antlr.runtime.tree.CommonTree ast, Table table, org.apache.hadoop.conf.Configuration conf, boolean canGroupExprs); // Get the partition specs from the tree.\n\tstatic String getKeywords(Set<String> excludes);\n\tstatic VarcharTypeInfo getVarcharTypeInfo(ASTNode node);\n\tstatic boolean isJoinToken(ASTNode node); // Tests whether the parse tree node is a join token.\n\tstatic ASTNode parse(String command, Context ctx); // Parses the Hive query.\n\tstatic ASTNode parse(String command, Context ctx, String viewFullyQualifiedName); // Parses the Hive query.\n\tstatic CBOPlan parseQuery(HiveConf conf, String viewQuery);\n\tstatic List<org.apache.hadoop.hive.metastore.api.FieldSchema> parseQueryAndGetSchema(HiveConf conf, String viewQuery);\n\tstatic String stripIdentifierQuotes(String val);\n\tstatic List<String> validateColumnNameUniqueness(List<org.apache.hadoop.hive.metastore.api.FieldSchema> fieldSchemas);\n}"}
{"index": 14574, "repo": "spring-security-web-6.1.2", "des": "Simple strategy to match an HttpServletRequest.", "code": "public interface RequestMatcher {\n\tdefault RequestMatcher.MatchResult matcher(jakarta.servlet.http.HttpServletRequest request); // Returns a MatchResult for this RequestMatcher The default implementation returns Collections.emptyMap() when RequestMatcher.MatchResult.getVariables() is invoked.\n\tboolean matches(jakarta.servlet.http.HttpServletRequest request); // Decides whether the rule implemented by the strategy matches the supplied request.\n}"}
{"index": 12754, "repo": "spring-data-mongodb-4.1.2", "des": "Provider interface to obtain IndexOperations by MongoDB collection name.", "code": "@FunctionalInterface public interface IndexOperationsProvider {\n\tdefault IndexOperations indexOps(String collectionName); // Returns the operations that can be performed on indexes.\n\tIndexOperations indexOps(String collectionName, Class<?> type); // Returns the operations that can be performed on indexes.\n}"}
{"index": 2373, "repo": "commons-geometry-euclidean-1.0", "des": "Class representing a subset of a line in 3D Euclidean space.", "code": "Class LineSubset3D {\n\tabstract Bounds3D getBounds(); // Get the 3D bounding box of the line subset or null if the subset is empty or infinite.\n\tabstract Vector3D getCentroid(); // Get the centroid, or geometric center, of the line subset or null if the subset is empty or infinite.\n\tLine3D getLine(); // Get the line containing this subset.\n\tabstract HyperplaneBoundedRegion<Vector1D> getSubspaceRegion(); // Get the subspace region for the instance.\n\tVector3D toSpace(Vector1D pt);\n\tVector1D toSubspace(Vector3D pt);\n}"}
{"index": 4821, "repo": "hadoop-common-3.3.4", "des": "InnerNode represents a switch/router of a data center or rack.", "code": "Class InnerNodeImpl {\n\tboolean add(org.apache.hadoop.net.Node n); // Add node n to the subtree of this node\n\tboolean equals(Object to);\n\tList<org.apache.hadoop.net.Node> getChildren();\n\torg.apache.hadoop.net.Node getLeaf(int leafIndex, org.apache.hadoop.net.Node excludedNode); // get leafIndex leaf of this subtree if it is not in the excludedNode\n\torg.apache.hadoop.net.Node getLoc(String loc); // Given a node's string representation, return a reference to the node\n\tString getNextAncestorName(org.apache.hadoop.net.Node n);\n\tint getNumOfChildren();\n\tint getNumOfLeaves();\n\tboolean isAncestor(org.apache.hadoop.net.Node n); // Judge if this node is an ancestor of node n.\n\tboolean isParent(org.apache.hadoop.net.Node n); // Judge if this node is the parent of node n.\n\tboolean isRack(); // Judge if this node represents a rack.\n\tboolean remove(org.apache.hadoop.net.Node n); // Remove node n from the subtree of this node\n}"}
{"index": 541, "repo": "ignite-core-2.15.0", "des": "Represents a type of cache(s) that can be used for comparing update counters and checksums between primary and backup partitions.", "code": "Enum CacheFilterEnum {\n\tstatic @Nullable CacheFilterEnum fromOrdinal(int ord); // Efficiently gets enumerated value from its ordinal.\n\tstatic CacheFilterEnum valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic CacheFilterEnum[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13956, "repo": "spring-webflux-6.0.11", "des": "Central entry point to Spring's functional web framework. Exposes routing functionality, such as to create a RouterFunction using a discoverable builder-style API, to create a RouterFunction given a RequestPredicate and HandlerFunction, and to do further subrouting on an existing routing function.", "code": "public abstract class RouterFunctions extends Object {\n\tstatic <T extends ServerResponse>RouterFunction<T> changeParser(RouterFunction<T> routerFunction, org.springframework.web.util.pattern.PathPatternParser parser); // Changes the PathPatternParser on the given router function.\n\tstatic <T extends ServerResponse>RouterFunction<T> nest(RequestPredicate predicate, RouterFunction<T> routerFunction); // Route to the given router function if the given request predicate applies.\n\tstatic Function<ServerRequest,reactor.core.publisher.Mono<org.springframework.core.io.Resource>> resourceLookupFunction(String pattern, org.springframework.core.io.Resource location); // Returns the resource lookup function used by resources(String, Resource).\n\tstatic RouterFunction<ServerResponse> resources(String pattern, org.springframework.core.io.Resource location); // Route requests that match the given pattern to resources relative to the given root location.\n\tstatic RouterFunction<ServerResponse> resources(Function<ServerRequest,reactor.core.publisher.Mono<org.springframework.core.io.Resource>> lookupFunction); // Route to resources using the provided lookup function.\n\tstatic RouterFunctions.Builder route(); // Offers a discoverable way to create router functions through a builder-style interface.\n\tstatic <T extends ServerResponse>RouterFunction<T> route(RequestPredicate predicate, HandlerFunction<T> handlerFunction); // Route to the given handler function if the given request predicate applies.\n\tstatic org.springframework.http.server.reactive.HttpHandler toHttpHandler(RouterFunction<?> routerFunction); // Convert the given router function into a HttpHandler.\n\tstatic org.springframework.http.server.reactive.HttpHandler toHttpHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies); // Convert the given router function into a HttpHandler, using the given strategies.\n\tstatic org.springframework.web.server.WebHandler toWebHandler(RouterFunction<?> routerFunction); // Convert the given router function into a WebHandler.\n\tstatic org.springframework.web.server.WebHandler toWebHandler(RouterFunction<?> routerFunction, HandlerStrategies strategies); // Convert the given router function into a WebHandler, using the given strategies.\n}"}
{"index": 15055, "repo": "spring-vault-core-3.0.4", "des": "PropertySource that requests renewable secrets from SecretLeaseContainer.", "code": "public class LeaseAwareVaultPropertySource extends EnumerablePropertySource<VaultOperations> {\n\tprotected Map<String,Object> doTransformProperties(Map<String,Object> properties); // Hook method to transform properties using PropertyTransformer.\n\tprotected Map<String,Object> flattenMap(Map<String,Object> data); // Utility method converting a String/Object map to a flat String/Object map.\n\tObject getProperty(String name);\n\tString[] getPropertyNames();\n\tRequestedSecret getRequestedSecret();\n\tprotected void handleLeaseErrorEvent(SecretLeaseEvent leaseEvent, Exception exception); // Hook method to handle a SecretLeaseEvent errors.\n\tprotected void handleLeaseEvent(SecretLeaseEvent leaseEvent, Map<String,Object> properties); // Hook method to handle a SecretLeaseEvent.\n}"}
{"index": 9938, "repo": "iceberg-api-1.3.0", "des": "Enum of supported rewrite job order, it defines the order in which the file groups should be written.", "code": "Enum RewriteJobOrder {\n\tstatic RewriteJobOrder fromName(java.lang.String orderName);\n\tjava.lang.String orderName();\n\tstatic RewriteJobOrder valueOf(java.lang.String name); // Returns the enum constant of this type with the specified name.\n\tstatic RewriteJobOrder[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 15828, "repo": "camel-api-4.0.0-RC1", "des": "A marker interface to identify the object as being a configurer which can provide details about the options the configurer supports.", "code": "public interface PropertyConfigurerGetter {\n\tdefault String[] getAutowiredNames(); // Gets the names of the autowired options.\n\tdefault Object getCollectionValueType(Object target, String name, boolean ignoreCase); // This method can be used to retrieve the class type for an option if the option is a collection kind (list, map, or array).\n\tClass<?> getOptionType(String name, boolean ignoreCase); // Gets the option class type.\n\tObject getOptionValue(Object target, String name, boolean ignoreCase); // Gets the property value\n}"}
{"index": 6252, "repo": "spring-integration-java-dsl-1.2.3.RELEASE", "des": "An AmqpBaseInboundGatewaySpec implementation for a AmqpInboundGateway.", "code": "Class AmqpInboundGatewaySpec {\n\tAmqpInboundGatewaySpec acknowledgeMode(org.springframework.amqp.core.AcknowledgeMode acknowledgeMode);\n\tAmqpInboundGatewaySpec addQueueNames(java.lang.String... queueName);\n\tAmqpInboundGatewaySpec addQueues(org.springframework.amqp.core.Queue... queues);\n\tAmqpInboundGatewaySpec adviceChain(org.aopalliance.aop.Advice... adviceChain);\n\tAmqpInboundGatewaySpec channelTransacted(boolean transactional);\n\tAmqpInboundGatewaySpec concurrentConsumers(int concurrentConsumers);\n\tAmqpInboundGatewaySpec consecutiveActiveTrigger(int consecutiveActiveTrigger);\n\tAmqpInboundGatewaySpec consecutiveIdleTrigger(int consecutiveIdleTrigger);\n\tAmqpInboundGatewaySpec defaultRequeueRejected(boolean defaultRequeueRejected);\n\tAmqpInboundGatewaySpec errorHandler(org.springframework.util.ErrorHandler errorHandler);\n\tAmqpInboundGatewaySpec exclusive(boolean exclusive);\n\tjava.util.Collection<java.lang.Object> getComponentsToRegister();\n\tAmqpInboundGatewaySpec maxConcurrentConsumers(int maxConcurrentConsumers);\n\tAmqpInboundGatewaySpec prefetchCount(int prefetchCount);\n\tAmqpInboundGatewaySpec receiveTimeout(long receiveTimeout);\n\tAmqpInboundGatewaySpec recoveryInterval(long recoveryInterval);\n\tAmqpInboundGatewaySpec shutdownTimeout(long shutdownTimeout);\n\tAmqpInboundGatewaySpec startConsumerMinInterval(long startConsumerMinInterval);\n\tAmqpInboundGatewaySpec stopConsumerMinInterval(long stopConsumerMinInterval);\n\tAmqpInboundGatewaySpec taskExecutor(java.util.concurrent.Executor taskExecutor); // Configure an Executor used to invoke the message listener.\n\tAmqpInboundGatewaySpec transactionManager(org.springframework.transaction.PlatformTransactionManager transactionManager); // Configure a PlatformTransactionManager; used to synchronize the rabbit transaction with some other transaction(s).\n\tAmqpInboundGatewaySpec txSize(int txSize);\n}"}
{"index": 9193, "repo": "fontbox-3.0.0-beta1", "des": "This class represents composite character data.", "code": "Class Composite {\n\tvoid addPart(CompositePart part); // This will add a composite part.\n\tString getName(); // Getter for property name.\n\tList<CompositePart> getParts(); // Getter for property parts.\n}"}
{"index": 16420, "repo": "spring-batch-infrastructure-5.0.2", "des": "A builder implementation for the AvroItemWriter.", "code": "public class AvroItemWriterBuilder<T> extends Object {\n\tAvroItemWriter<T> build(); // Build an instance of AvroItemWriter.\n\tAvroItemWriterBuilder<T> name(String name); // The name used to calculate the key within the ExecutionContext.\n\tAvroItemWriterBuilder<T> resource(org.springframework.core.io.WritableResource resource);\n\tAvroItemWriterBuilder<T> schema(String schemaString);\n\tAvroItemWriterBuilder<T> schema(org.springframework.core.io.Resource schema);\n\tAvroItemWriterBuilder<T> type(Class<T> type);\n}"}
{"index": 12552, "repo": "spring-jdbc-6.0.11", "des": "Helper class that efficiently creates multiple PreparedStatementCreator objects with different parameters based on an SQL statement and a single set of parameter declarations.", "code": "public class PreparedStatementCreatorFactory extends Object {\n\tvoid addParameter(SqlParameter param); // Add a new declared parameter.\n\tfinal String getSql(); // Return the SQL statement to execute.\n\tPreparedStatementCreator newPreparedStatementCreator(Object[] params); // Return a new PreparedStatementCreator for the given parameters.\n\tPreparedStatementCreator newPreparedStatementCreator(String sqlToUse, Object[] params); // Return a new PreparedStatementCreator for the given parameters.\n\tPreparedStatementCreator newPreparedStatementCreator(List<?> params); // Return a new PreparedStatementCreator for the given parameters.\n\tPreparedStatementSetter newPreparedStatementSetter(Object[] params); // Return a new PreparedStatementSetter for the given parameters.\n\tPreparedStatementSetter newPreparedStatementSetter(List<?> params); // Return a new PreparedStatementSetter for the given parameters.\n\tvoid setGeneratedKeysColumnNames(String... names); // Set the column names of the auto-generated keys.\n\tvoid setResultSetType(int resultSetType); // Set whether to use prepared statements that return a specific type of ResultSet.\n\tvoid setReturnGeneratedKeys(boolean returnGeneratedKeys); // Set whether prepared statements should be capable of returning auto-generated keys.\n\tvoid setUpdatableResults(boolean updatableResults); // Set whether to use prepared statements capable of returning updatable ResultSets.\n}"}
{"index": 15226, "repo": "spring-boot-3.1.1", "des": "DataSourcePoolMetadata for an Apache Commons DBCP2 DataSource.", "code": "public class CommonsDbcp2DataSourcePoolMetadata extends AbstractDataSourcePoolMetadata<org.apache.commons.dbcp2.BasicDataSource> {\n\tInteger getActive(); // Return the current number of active connections that have been allocated from the data source or null if that information is not available.\n\tBoolean getDefaultAutoCommit(); // The default auto-commit state of connections created by this pool.\n\tInteger getIdle(); // Return the number of established but idle connections.\n\tInteger getMax(); // Return the maximum number of active connections that can be allocated at the same time or -1 if there is no limit.\n\tInteger getMin(); // Return the minimum number of idle connections in the pool or null if that information is not available.\n\tString getValidationQuery(); // Return the query to use to validate that a connection is valid or null if that information is not available.\n}"}
{"index": 3079, "repo": "tink-1.10.0", "des": "A SignaturePrivateKey represents a digital signature primitive, which consists of a sign and a verify function.", "code": "Class SignaturePrivateKey {\n\tInteger getIdRequirementOrNull(); // Returns null if this key has no id requirement, otherwise the required id.\n\tBytes getOutputPrefix(); // Returns a Bytes instance which is prefixed to every signature.\n\tSignatureParameters getParameters(); // Returns the parameters of this key.\n\tabstract SignaturePublicKey getPublicKey(); // Returns the SignaturePublicKey, which contains the verify function of the digital signature primitive.\n}"}
{"index": 18436, "repo": "opencms-core-15.0", "des": "The result of a single field validation.", "code": "Class CmsValidationResult {\n\tjava.lang.String getErrorMessage(); // Returns the error message, or null if the validation has succeeded.\n\tjava.lang.String getNewValue(); // Returns the replacement for the field value.\n\tboolean hasNewValue(); // Returns true if the field value should be replaced.\n\tboolean isOk(); // Returns true if the validation has succeeded.\n}"}
{"index": 1790, "repo": "kafka-clients-3.5.0", "des": "A Callback for use by the SaslClient and Login implementations when they require an OAuth 2 bearer token.", "code": "Class OAuthBearerTokenCallback {\n\tvoid error(String errorCode, String errorDescription, String errorUri); // Set the error values as per RFC 6749: The OAuth 2.0 Authorization Framework.\n\tString errorCode(); // Return the optional (but always non-empty if not null) error code as per RFC 6749: The OAuth 2.0 Authorization Framework.\n\tString errorDescription(); // Return the (potentially null) error description as per RFC 6749: The OAuth 2.0 Authorization Framework.\n\tString errorUri(); // Return the (potentially null) error URI as per RFC 6749: The OAuth 2.0 Authorization Framework.\n\tOAuthBearerToken token(); // Return the (potentially null) token\n\tvoid token(OAuthBearerToken token); // Set the token.\n}"}
{"index": 2237, "repo": "hive-exec-4.0.0-alpha-2", "des": "General utility common functions for the Pruner to do optimization.", "code": "Class PrunerUtils {\n\tstatic Map<Node,Object> walkExprTree(ExprNodeDesc pred, NodeProcessorCtx ctx, SemanticNodeProcessor colProc, SemanticNodeProcessor fieldProc, SemanticNodeProcessor genFuncProc, SemanticNodeProcessor defProc); // Walk expression tree for pruner generation.\n\tstatic void walkOperatorTree(ParseContext pctx, NodeProcessorCtx opWalkerCtx, SemanticNodeProcessor filterProc, SemanticNodeProcessor defaultProc); // Walk operator tree for pruner generation.\n}"}
{"index": 5251, "repo": "druid-processing-26.0.0", "des": "Processor that merges frames from inputChannels into a single outputChannel.", "code": "Class FrameChannelMixer {\n\tvoid cleanup(); // Closes resources used by this worker.\n\tList<ReadableFrameChannel> inputChannels(); // List of input channels.\n\tList<WritableFrameChannel> outputChannels(); // List of output channels.\n\tReturnOrAwait<Long> runIncrementally(it.unimi.dsi.fastutil.ints.IntSet readableInputs); // Runs some of the algorithm, without blocking, and either returns a value or a set of input channels to wait for.\n}"}
{"index": 12867, "repo": "spring-data-mongodb-4.1.2", "des": "AbstractAggregationExpression to return the $firstN elements.", "code": "public static class SelectionOperators.First extends Object {\n\tprotected List<Object> append(Object value);\n\tprotected List<Object> append(Object value, org.springframework.data.mongodb.core.aggregation.AbstractAggregationExpression.Expand expandList);\n\tprotected Map<String,Object> append(String key, Object value);\n\tprotected Map<String,Object> appendAt(int index, String key, Object value); // Append the given key at the position in the underlying LinkedHashMap.\n\tprotected Map<String,Object> appendTo(String key, Object value);\n\tprotected Map<String,Object> argumentMap(); // Get the argument map.\n\tprotected static List<Field> asFields(String... fieldRefs);\n\tprotected boolean contains(Object key); // Check if the given key is available.\n\tstatic SelectionOperators.First first();\n\tstatic SelectionOperators.First first(int numberOfResults);\n\tprotected <T> T get(int index); // Get the value at a given index.\n\tprotected <T> T get(Object key); // Get the value for a given key.\n\tprotected String getMongoMethod();\n\tSelectionOperators.First input(String fieldName); // Define the field to serve as source.\n\tSelectionOperators.First input(AggregationExpression expression); // Define the expression building the value to serve as source.\n\tprotected boolean isArgumentMap();\n\tSelectionOperators.First limit(int numberOfResults); // Limits the number of returned elements to the given value.\n\tSelectionOperators.First limit(AggregationExpression expression); // Limits the number of returned elements to the value defined by the given expression.\n\tSelectionOperators.First of(String fieldName); // Define the field to serve as source.\n\tSelectionOperators.First of(AggregationExpression expression); // Define the expression building the value to serve as source.\n\tprotected Map<String,Object> remove(String key);\n\torg.bson.Document toDocument(Object value, AggregationOperationContext context);\n\torg.bson.Document toDocument(AggregationOperationContext context); // Turns the AggregationExpression into a Document within the given AggregationOperationContext.\n\tprotected List<Object> values();\n}"}
{"index": 2150, "repo": "hive-exec-4.0.0-alpha-2", "des": "KeyType is used to differentiate the request types.", "code": "Enum HiveMetaStoreClientWithLocalCache.KeyType {\n\tstatic HiveMetaStoreClientWithLocalCache.KeyType valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic HiveMetaStoreClientWithLocalCache.KeyType[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 5769, "repo": "freemarker-2.3.32", "des": "This is an abstract template loader that can load templates whose location can be described by an URL.", "code": "Class URLTemplateLoader {\n\tprotected static java.lang.String canonicalizePrefix(java.lang.String prefix); // Can be used by subclasses to canonicalize URL path prefixes.\n\tvoid closeTemplateSource(java.lang.Object templateSource); // Closes the template source, releasing any resources held that are only required for reading the template and/or its metadata.\n\tjava.lang.Object findTemplateSource(java.lang.String name); // Finds the template in the backing storage and returns an object that identifies the storage location where the template can be loaded from.\n\tlong getLastModified(java.lang.Object templateSource); // Returns the time of last modification of the specified template source.\n\tjava.io.Reader getReader(java.lang.Object templateSource, java.lang.String encoding); // Returns the character stream of a template represented by the specified template source.\n\tprotected abstract java.net.URL getURL(java.lang.String name); // Given a template name (plus potential locale decorations) retrieves an URL that points the template source.\n\tjava.lang.Boolean getURLConnectionUsesCaches(); // Getter pair of setURLConnectionUsesCaches(Boolean).\n\tvoid setURLConnectionUsesCaches(java.lang.Boolean urlConnectionUsesCaches); // Sets if URLConnection.setUseCaches(boolean) will be called, and with what value.\n}"}
{"index": 5264, "repo": "druid-processing-26.0.0", "des": "A VectorCursor that is based on a Frame.", "code": "Class FrameVectorCursor {\n\tvoid advance(); // Advances the cursor, skipping forward a number of rows equal to the current vector size.\n\tvoid close(); // Close the cursor and release its resources.\n\tVectorColumnSelectorFactory getColumnSelectorFactory(); // Returns a vectorized column selector factory.\n\tint getCurrentVectorSize(); // Returns the current vector size for this cursor.\n\tint getMaxVectorSize(); // Returns the maximum vector size for this cursor.\n\tboolean isDone(); // Returns false if the cursor is readable, true if it has nothing left to read.\n\tvoid reset(); // Resets the cursor back to its original state.\n}"}
{"index": 18333, "repo": "opencms-core-15.0", "des": "Represents the result of a search query returned by an implementation of I_CmsDataView.", "code": "Class CmsDataViewResult {\n\tint getHitCount(); // Gets the total number of results, disregarding paging.\n\tjava.util.List<I_CmsDataViewItem> getItems(); // Gets the list of result items.\n}"}
{"index": 10536, "repo": "groovy-all-4.0.13", "des": "Bytecode level interface for bootstrap methods used by invokedynamic.", "code": "public class IndyInterface extends Object {\n\tstatic CallSite bootstrap(MethodHandles.Lookup caller, String callType, MethodType type, String name, int flags); // bootstrap method for method calls from Groovy compiled code with indy enabled.\n\tstatic Object fromCache(MutableCallSite callSite, Class<?> sender, String methodName, int callID, Boolean safeNavigation, Boolean thisCall, Boolean spreadCall, Object dummyReceiver, Object[] arguments); // Get the cached methodhandle.\n\tprotected static void invalidateSwitchPoints(); // Callback for constant metaclass update change\n\tprotected static MethodHandle makeFallBack(MutableCallSite mc, Class<?> sender, String name, int callID, MethodType type, boolean safeNavigation, boolean thisCall, boolean spreadCall); // Makes a fallback method for an invalidated method selection\n\tstatic Object selectMethod(MutableCallSite callSite, Class<?> sender, String methodName, int callID, Boolean safeNavigation, Boolean thisCall, Boolean spreadCall, Object dummyReceiver, Object[] arguments); // Core method for indy method selection using runtime types.\n\tstatic CallSite staticArrayAccess(MethodHandles.Lookup lookup, String name, MethodType type);\n}"}
{"index": 18808, "repo": "lucene-core-9.7.0", "des": "A compression mode that compromises on the compression ratio to provide fast compression and decompression.", "code": "Class LZ4WithPresetDictCompressionMode {\n\tCompressor newCompressor(); // Create a new Compressor instance.\n\tDecompressor newDecompressor(); // Create a new Decompressor instance.\n}"}
{"index": 7751, "repo": "cassandra-all-4.1.2", "des": "The relevant replicas for an operation over a given range or token.", "code": "Class ReplicaLayout<E extends Endpoints<E>> {\n\tE all(); // All relevant owners of the ring position(s) for this operation, as implied by the current ring layout.\n\tstatic ReplicaLayout.ForTokenRead forTokenReadLiveSorted(AbstractReplicationStrategy replicationStrategy, Token token);\n\tstatic ReplicaLayout.ForTokenWrite forTokenWrite(AbstractReplicationStrategy replicationStrategy, EndpointsForToken natural, EndpointsForToken pending);\n\tstatic ReplicaLayout.ForTokenWrite forTokenWriteLiveAndDown(Keyspace keyspace, Token token); // Gets the 'natural' and 'pending' replicas that own a given token, with no filtering or processing.\n\tE natural(); // The 'natural' owners of the ring position(s), as implied by the current ring layout.\n\tAbstractReplicationStrategy replicationStrategy();\n}"}
{"index": 7990, "repo": "commons-jcs3-core-3.1", "des": "Used to monitor and repair any failed connection for the remote cache service.", "code": "Class RemoteCacheMonitor {\n\tvoid addManager(RemoteCacheManager manager); // Add a manager to be monitored\n\tvoid dispose(); // Clean up all resources before shutdown\n\tvoid doWork(); // Main processing method for the RemoteCacheMonitor object\n}"}
{"index": 13402, "repo": "spring-boot-autoconfigure-3.1.1", "des": "Name of the algorithm used to compress protocol frames.", "code": "public static enum CassandraProperties.Compression extends Enum<CassandraProperties.Compression> {\n\tstatic CassandraProperties.Compression valueOf(String name); // Returns the enum constant of this class with the specified name.\n\tstatic CassandraProperties.Compression[] values(); // Returns an array containing the constants of this enum class, in the order they are declared.\n}"}
{"index": 7849, "repo": "cassandra-all-4.1.2", "des": "Parse a string containing an Type definition.", "code": "Class TypeParser {\n\tjava.util.Map<java.lang.Byte,AbstractType<?>> getAliasParameters();\n\tjava.util.Map<java.nio.ByteBuffer,CollectionType> getCollectionsParameters();\n\tjava.util.Map<java.lang.String,java.lang.String> getKeyValueParameters();\n\tjava.util.List<AbstractType<?>> getTypeParameters();\n\tPair<Pair<java.lang.String,java.nio.ByteBuffer>,java.util.List<Pair<java.nio.ByteBuffer,AbstractType>>> getUserTypeParameters();\n\tAbstractType<?> parse(); // Parse an AbstractType from current position of this parser.\n\tstatic AbstractType<?> parse(java.lang.CharSequence compareWith);\n\tstatic AbstractType<?> parse(java.lang.String str); // Parse a string containing an type definition.\n\tjava.lang.String readNextIdentifier();\n\tstatic java.lang.String stringifyAliasesParameters(java.util.Map<java.lang.Byte,AbstractType<?>> aliases); // Helper function to ease the writing of AbstractType.toString() methods.\n\tstatic java.lang.String stringifyCollectionsParameters(java.util.Map<java.nio.ByteBuffer,? extends CollectionType> collections);\n\tstatic java.lang.String stringifyTypeParameters(java.util.List<AbstractType<?>> types); // Helper function to ease the writing of AbstractType.toString() methods.\n\tstatic java.lang.String stringifyTypeParameters(java.util.List<AbstractType<?>> types, boolean ignoreFreezing); // Helper function to ease the writing of AbstractType.toString() methods.\n\tstatic java.lang.String stringifyUserTypeParameters(java.lang.String keysace, java.nio.ByteBuffer typeName, java.util.List<FieldIdentifier> fields, java.util.List<AbstractType<?>> columnTypes, boolean ignoreFreezing);\n}"}
{"index": 11654, "repo": "spring-websocket-6.0.11", "des": "A SockJS session for use with streaming HTTP transports.", "code": "public abstract class StreamingSockJsSession extends AbstractHttpSockJsSession {\n\tprotected void flushCache(); // Called when the connection is active and ready to write to the response.\n\tprotected abstract byte[] getPrelude(org.springframework.http.server.ServerHttpRequest request); // Get the prelude to write to the response before any other data.\n\tprotected void handleRequestInternal(org.springframework.http.server.ServerHttpRequest request, org.springframework.http.server.ServerHttpResponse response, boolean initialRequest); // Invoked when a SockJS transport request is received.\n}"}
{"index": 17593, "repo": "spring-ldap-core-3.1.0", "des": "Default implementation of ObjectDirectoryMapper.", "code": "public class DefaultObjectDirectoryMapper extends Object implements ObjectDirectoryMapper {\n\tString attributeFor(Class<?> clazz, String fieldName); // Get the attribute corresponding to the specified field name.\n\tFilter filterFor(Class<?> clazz, Filter baseFilter); // Use the specified search filter and return a new one that only applies to entries of the specified class.\n\tName getCalculatedId(Object entry);\n\tName getId(Object entry); // Get the distinguished name for the specified object.\n\tString[] manageClass(Class<?> clazz); // Check if the specified class is already managed by this instance; if not, check the metadata and add the class to the managed classes.\n\t<T> T mapFromLdapDataEntry(LdapDataEntry context, Class<T> clazz); // Used to convert from the JNDI LDAP representation of an Entry to the Java representation when reading from LDAP.\n\tvoid mapToLdapDataEntry(Object entry, LdapDataEntry context); // Used to convert from Java representation of an Ldap Entry when writing to the Ldap directory\n\tvoid setConverterManager(ConverterManager converterManager);\n\tvoid setId(Object entry, Name id); // Set the distinguished name for the specified object.\n}"}
{"index": 5624, "repo": "org.apache.karaf.main-2.4.4", "des": "A NestedDirBundleFile uses another BundleFile as its source but accesses all of its resources relative to a nested directory within the other BundleFile object.", "code": "Class NestedDirBundleFile {\n\tvoid close(); // Closes the BundleFile.\n\tboolean containsDir(String dir); // Determines if any BundleEntries exist in the given directory path.\n\tBundleEntry getEntry(String path); // Locates a file name in this bundle and returns a BundleEntry object\n\tEnumeration<String> getEntryPaths(String path); // Allows to access the entries of the bundle.\n\tFile getFile(String entry, boolean nativeCode); // Returns a File for the bundle entry specified by the path.\n\tvoid open(); // Opens the BundleFiles.\n}"}
{"index": 4143, "repo": "camel-core-3.0.0-RC1", "des": "To use Camels built-in Simple language in Camel expressions or predicates.", "code": "Class SimpleExpression {\n\torg.apache.camel.Expression createExpression(org.apache.camel.CamelContext camelContext);\n\torg.apache.camel.Predicate createPredicate(org.apache.camel.CamelContext camelContext);\n\tString getLanguage();\n\tClass<?> getResultType();\n\tString getResultTypeName();\n\tvoid setResultType(Class<?> resultType); // Sets the class of the result type (type from output)\n\tvoid setResultTypeName(String resultTypeName); // Sets the class name of the result type (type from output)\n}"}
{"index": 12883, "repo": "spring-data-mongodb-4.1.2", "des": "A fluent builder to create a SetWindowFieldsOperation.", "code": "public static class SetWindowFieldsOperation.SetWindowFieldsOperationBuilder extends Object {\n\tSetWindowFieldsOperation build(); // Obtain a new instance of SetWindowFieldsOperation with previously set arguments.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder.WindowChoice output(AggregationExpression expression); // Add a field capturing the result of the given expression to the output.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder output(SetWindowFieldsOperation.WindowOutput output); // Define the actual output computation.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder partitionBy(Object value); // Partition by a value that translates to a valid mongodb expression.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder partitionByExpression(AggregationExpression expression); // Specify the expression to group by.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder partitionByField(String fieldName); // Specify the field to group by.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder sortBy(String... fields); // Sort ascending by the given fields.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder sortBy(Sort sort); // Set the sort order.\n\tSetWindowFieldsOperation.SetWindowFieldsOperationBuilder sortBy(SortOperation sort); // Set the SortOperation to use.\n}"}
{"index": 15839, "repo": "camel-api-4.0.0-RC1", "des": "This cache stored the resumed data from a ResumeStrategy.", "code": "public interface ResumeCache<K> {\n\tvoid add(K key, Object offsetValue); // Adds a value to the cache\n\tlong capacity(); // Gets the cache pool size\n\tObject computeIfAbsent(K key, Function<? super K,? super Object> mapping); // If the specified key is not present, compute its value from the mapping function (like Java's standard Map one)\n\tObject computeIfPresent(K key, BiFunction<? super K,? super Object,? super Object> remapping); // If the specified key is present, compute a new value from the mapping function (like Java's standard Map one)\n\tboolean contains(K key, Object entry); // Whether the cache contains the key with the given entry value\n\tvoid forEach(BiFunction<? super K,? super Object,Boolean> action); // Performs the given action for each member of the cache\n\tObject get(K key); // Gets the offset entry for the key\n\t<T> T get(K key, Class<T> clazz); // Gets the offset entry for the key\n\tboolean isFull(); // Checks whether the cache is full\n}"}
{"index": 18565, "repo": "hibernate-core-5.6.15.Final", "des": "Specialization of a Join that is defined by the metadata.", "code": "Interface JoinDefinedByMetadata {\n\tjava.lang.String getJoinedPropertyName(); // Obtain the name of the property that defines the join, relative to the PropertyMapping (QuerySpace.toAliasedColumns(String, String)) of the left-hand-side (Join.getLeftHandSide()) of the join\n\tType getJoinedPropertyType(); // Get the property type of the joined property.\n}"}
{"index": 15963, "repo": "wicket-util-10.0.0-M1", "des": "This class implements an output stream in which the data is written into a byte array.", "code": "public class ByteArrayOutputStream extends OutputStream {\n\tvoid close(); // Closing a ByteArrayOutputStream has no effect.\n\tvoid reset();\n\tint size(); // Gets the size.\n\tbyte[] toByteArray(); // Writes to a byte array.\n\tString toString(String enc); // This as a string using the provided encoding.\n\tvoid write(byte[] b, int off, int len);\n\tvoid write(int b); // Calls the write(byte[]) method.\n\tvoid writeTo(OutputStream out); // Write to the given output stream.\n}"}
{"index": 3340, "repo": "spring-social-core-1.1.6.RELEASE", "des": "A service interface for the OAuth 1 flow.", "code": "Interface OAuth1Operations {\n\tjava.lang.String buildAuthenticateUrl(java.lang.String requestToken, OAuth1Parameters parameters); // Construct the URL to redirect the user to for authentication.\n\tjava.lang.String buildAuthorizeUrl(java.lang.String requestToken, OAuth1Parameters parameters); // Construct the URL to redirect the user to for authorization.\n\tOAuthToken exchangeForAccessToken(AuthorizedRequestToken requestToken, org.springframework.util.MultiValueMap<java.lang.String,java.lang.String> additionalParameters); // Exchange the authorized request token for an access token.\n\tOAuthToken fetchRequestToken(java.lang.String callbackUrl, org.springframework.util.MultiValueMap<java.lang.String,java.lang.String> additionalParameters); // Begin a new authorization flow by fetching a new request token from this service provider.\n\tOAuth1Version getVersion(); // The version of OAuth1 implemented by this operations instance.\n}"}
{"index": 16520, "repo": "spring-batch-infrastructure-5.0.2", "des": "Global variable support for repeat clients.", "code": "public final class RepeatSynchronizationManager extends Object {\n\tstatic RepeatContext clear(); // Clear the current context at the end of a batch - should only be used by RepeatOperations implementations.\n\tstatic RepeatContext getContext(); // Getter for the current context.\n\tstatic RepeatContext register(RepeatContext context); // Method for registering a context - should only be used by RepeatOperations implementations to ensure that getContext() always returns the correct value.\n\tstatic void setAncestorsCompleteOnly(); // Set current session and all ancestors (via parent) to complete.,\n\tstatic void setCompleteOnly(); // Convenience method to set the current repeat operation to complete if it exists.\n}"}
{"index": 766, "repo": "ignite-core-2.15.0", "des": "Supply message with supplier error transfer support.", "code": "Class GridDhtPartitionSupplyMessageV2 {\n\tshort directType(); // Gets message type.\n\t@Nullable Throwable error();\n\tbyte fieldsCount(); // Gets fields count.\n\tvoid finishUnmarshal(GridCacheSharedContext ctx, ClassLoader ldr); // This method is called after the message is deserialized and is responsible for unmarshalling state marshalled in GridCacheMessage.prepareMarshal(GridCacheSharedContext) method.\n\tvoid prepareMarshal(GridCacheSharedContext ctx); // This method is called before the whole message is serialized and is responsible for pre-marshalling state.\n\tboolean readFrom(ByteBuffer buf, MessageReader reader); // Reads this message from provided byte buffer.\n\tboolean writeTo(ByteBuffer buf, MessageWriter writer); // Writes this message to provided byte buffer.\n}"}
{"index": 16117, "repo": "spring-data-cassandra-4.1.2", "des": "Cassandra specific BasicPersistentEntity implementation that adds Cassandra specific metadata.", "code": "public class BasicCassandraPersistentEntity<T> extends BasicPersistentEntity<T,CassandraPersistentProperty> implements CassandraPersistentEntity<T>, ApplicationContextAware {\n\tvoid addAssociation(Association<CassandraPersistentProperty> association);\n\tprotected com.datastax.oss.driver.api.core.CqlIdentifier determineTableName();\n\tvoid doWithAssociations(AssociationHandler<CassandraPersistentProperty> handler);\n\tcom.datastax.oss.driver.api.core.CqlIdentifier getTableName(); // Returns the table name to which the entity shall be persisted.\n\tCassandraPersistentEntityMetadataVerifier getVerifier();\n\tboolean isCompositePrimaryKey(); // Returns whether this entity represents a composite primary key.\n\tboolean isTupleType();\n\tboolean isUserDefinedType();\n\tvoid setApplicationContext(ApplicationContext context);\n\tvoid setForceQuote(boolean forceQuote); // Sets whether to enforce quoting when using the CassandraPersistentEntity.getTableName() in CQL.\n\tvoid setNamingStrategy(NamingStrategy namingStrategy); // Set the NamingStrategy to use.\n\tvoid setTableName(com.datastax.oss.driver.api.core.CqlIdentifier tableName); // Sets the CQL table name.\n\tvoid setVerifier(CassandraPersistentEntityMetadataVerifier verifier);\n\tvoid verify();\n}"}
{"index": 18194, "repo": "hibernate-core-jakarta-5.6.15.Final", "des": "Strategy for describing values which are generated in the database.", "code": "Interface InDatabaseValueGenerationStrategy {\n\tGenerationTiming getGenerationTiming(); // When is this value generated : NEVER, INSERT, ALWAYS (INSERT+UPDATE)\n\tjava.lang.String[] getReferencedColumnValues(); // For columns that will be referenced in the SQL (per referenceColumnsInSql()), what value should be used in the SQL as the column value.\n\tboolean referenceColumnsInSql(); // Should the column(s) be referenced in the INSERT / UPDATE SQL?\n}"}
{"index": 606, "repo": "ignite-core-2.15.0", "des": "Implementation for cluster start node result.", "code": "Class ClusterStartNodeResultImpl {\n\tString getError(); // Gets error message if any.\n\tString getHostName(); // Gets host name.\n\tboolean isSuccess(); // Gets result of success or failure.\n\tvoid setError(String error); // Sets error message.\n\tvoid setHostName(String hostName); // Sets host name.\n\tvoid setSuccess(boolean success); // Sets success result.\n}"}
{"index": 5946, "repo": "commons-lang3-3.12.0", "des": "Utility library to provide helper methods for translating Comparable.", "code": "Class ComparableUtils {\n\tstatic <A extends Comparable<A>>Predicate<A> between(A b, A c); // Checks if [b <= a <= c] or [b >= a >= c] where the a is the tested object.\n\tstatic <A extends Comparable<A>>Predicate<A> betweenExclusive(A b, A c); // Checks if (b < a < c) or (b > a > c) where the a is the tested object.\n\tstatic <A extends Comparable<A>>Predicate<A> ge(A b); // Checks if the tested object is greater than or equal to b\n\tstatic <A extends Comparable<A>>Predicate<A> gt(A b); // Checks if the tested object is greater than b\n\tstatic <A extends Comparable<A>>ComparableUtils.ComparableCheckBuilder<A> is(A a); // Provides access to the available methods\n\tstatic <A extends Comparable<A>>Predicate<A> le(A b); // Checks if the tested object is less than or equal to b\n\tstatic <A extends Comparable<A>>Predicate<A> lt(A b); // Checks if the tested object is less than b\n}"}
{"index": 16106, "repo": "spring-data-cassandra-4.1.2", "des": "Extension to AbstractCassandraConfiguration providing Spring Data Cassandra configuration for Spring Data's Reactive Cassandra support using JavaConfig.", "code": "public abstract class AbstractReactiveCassandraConfiguration extends AbstractCassandraConfiguration {\n\tReactiveSession reactiveCassandraSession(); // Creates a ReactiveSession object.\n\tReactiveSessionFactory reactiveCassandraSessionFactory(); // Creates a ReactiveSessionFactory to be used by the ReactiveCassandraTemplate.\n\tReactiveCassandraTemplate reactiveCassandraTemplate(); // Creates a CassandraAdminTemplate.\n\tReactiveCqlTemplate reactiveCqlTemplate(); // Creates a ReactiveCqlTemplate using the configured ReactiveSessionFactory.\n\tvoid setBeanFactory(BeanFactory beanFactory); // Configures a reference to the BeanFactory.\n}"}
{"index": 17577, "repo": "spring-ldap-core-3.1.0", "des": "Convenience implementation of AuthenticationErrorCallback that stores the given exception and provides a method for retrieving it.", "code": "public final class CollectingAuthenticationErrorCallback extends Object implements AuthenticationErrorCallback {\n\tvoid execute(Exception e); // This method will be called with the authentication exception in case there is a problem with the authentication.\n\tException getError();\n\tboolean hasError(); // Check whether this callback has collected an error.\n}"}
{"index": 14031, "repo": "spring-boot-gradle-plugin-3.1.1", "des": "Specialization of JavaExec to be used as a base class for tasks that perform ahead-of-time processing.", "code": "@DisableCachingByDefault(because=\"Cacheability can only be determined by a concrete implementation\") public abstract class AbstractAot extends JavaExec {\n\tfinal Property<String> getArtifactId(); // The artifact ID of the application that is to be processed ahead-of-time.\n\tfinal DirectoryProperty getClassesOutput(); // The directory to which AOT-generated classes should be written.\n\tfinal Property<String> getGroupId(); // The group ID of the application that is to be processed ahead-of-time.\n\tfinal DirectoryProperty getResourcesOutput(); // The directory to which AOT-generated resources should be written.\n\tfinal DirectoryProperty getSourcesOutput(); // The directory to which AOT-generated sources should be written.\n}"}
{"index": 6865, "repo": "calcite-core-1.34.0", "des": "Set of elements organized into equivalence classes.", "code": "Class EquivalenceSet<E extends Comparable<E>> {\n\tE add(E e); // Adds an element, and returns the element (which is its own parent).\n\tboolean areEquivalent(E e, E f); // Returns whether two elements are in the same equivalence class.\n\tint classCount(); // Returns the number of equivalence classes in this equivalence set.\n\tvoid clear(); // Removes all elements in this equivalence set.\n\tE equiv(E e, E f); // Marks two elements as equivalent.\n\tNavigableMap<E,SortedSet<E>> map(); // Returns a map of the canonical element in each equivalence class to the set of elements in that class.\n\tint size(); // Returns the number of elements in this equivalence set.\n}"}
{"index": 12770, "repo": "spring-data-mongodb-4.1.2", "des": "Value Object specifying how to deal with a result document that matches an existing document in the collection based on the fields of the on property describing the unique identifier.", "code": "public static class MergeOperation.WhenDocumentsMatch extends Object {\n\tstatic MergeOperation.WhenDocumentsMatch failOnMatch(); // Stop and fail the aggregation operation.\n\tstatic MergeOperation.WhenDocumentsMatch keepExistingDocument(); // Keep the existing document in the output collection.\n\tstatic MergeOperation.WhenDocumentsMatch mergeDocuments(); // Merge the matching documents.\n\tstatic MergeOperation.WhenDocumentsMatch replaceDocument(); // Replace the existing document in the output collection with the matching results document.\n\tstatic MergeOperation.WhenDocumentsMatch updateWith(List<AggregationOperation> aggregationPipeline); // Use an aggregation pipeline to update the document in the collection.\n\tstatic MergeOperation.WhenDocumentsMatch updateWith(Aggregation aggregation); // Use an Aggregation to update the document in the collection.\n\tstatic MergeOperation.WhenDocumentsMatch whenMatchedOf(String value);\n}"}
{"index": 9369, "repo": "hadoop-yarn-api-3.3.6", "des": "The request sent by the client to the ResourceManager to move a submitted application to a different queue.", "code": "Class MoveApplicationAcrossQueuesRequest {\n\tabstract ApplicationId getApplicationId(); // Get the ApplicationId of the application to be moved.\n\tabstract String getTargetQueue(); // Get the queue to place the application in.\n\tstatic MoveApplicationAcrossQueuesRequest newInstance(ApplicationId appId, String queue);\n\tabstract void setApplicationId(ApplicationId appId); // Set the ApplicationId of the application to be moved.\n\tabstract void setTargetQueue(String queue); // Get the queue to place the application in.\n}"}
{"index": 6308, "repo": "commons-codec-1.16.0", "des": "Implements the 'www-form-urlencoded' encoding scheme, also misleadingly known as URL encoding.", "code": "Class URLCodec {\n\tbyte[] decode(byte[] bytes); // Decodes an array of URL safe 7-bit characters into an array of original bytes.\n\tObject decode(Object obj); // Decodes a URL safe object into its original form.\n\tString decode(String str); // Decodes a URL safe string into its original form using the default string charset.\n\tString decode(String str, String charsetName); // Decodes a URL safe string into its original form using the specified encoding.\n\tstatic byte[] decodeUrl(byte[] bytes); // Decodes an array of URL safe 7-bit characters into an array of original bytes.\n\tbyte[] encode(byte[] bytes); // Encodes an array of bytes into an array of URL safe 7-bit characters.\n\tObject encode(Object obj); // Encodes an object into its URL safe form.\n\tString encode(String str); // Encodes a string into its URL safe form using the default string charset.\n\tString encode(String str, String charsetName); // Encodes a string into its URL safe form using the specified string charset.\n\tstatic byte[] encodeUrl(BitSet urlsafe, byte[] bytes); // Encodes an array of bytes into an array of URL safe 7-bit characters.\n\tString getDefaultCharset(); // The default charset used for string decoding and encoding.\n}"}
{"index": 5627, "repo": "org.apache.karaf.main-2.4.4", "des": "A bundle's authority to import or export a package.", "code": "Class PackagePermission {\n\tboolean equals(Object obj); // Determines the equality of two PackagePermission objects.\n\tString getActions(); // Returns the canonical string representation of the PackagePermission actions.\n\tboolean implies(Permission p); // Determines if the specified permission is implied by this object.\n\tPermissionCollection newPermissionCollection(); // Returns a new PermissionCollection object suitable for storing PackagePermission objects.\n}"}
{"index": 2206, "repo": "hive-exec-4.0.0-alpha-2", "des": "Runtime context of MapredTask providing additional information to GenericUDF.", "code": "Class MapredContext {\n\tstatic void close();\n\tstatic MapredContext createDummy(org.apache.hadoop.conf.Configuration conf);\n\tstatic MapredContext get();\n\torg.apache.hadoop.mapred.JobConf getJobConf(); // Returns JobConf.\n\torg.apache.hadoop.mapred.Reporter getReporter(); // Returns Reporter, which is set right before reading the first row.\n\tstatic MapredContext init(boolean isMap, org.apache.hadoop.mapred.JobConf jobConf);\n\tboolean isMap(); // Returns whether the UDF is called from Map or Reduce task.\n\tvoid setReporter(org.apache.hadoop.mapred.Reporter reporter);\n\tvoid setup(GenericUDF genericUDF);\n}"}
{"index": 13890, "repo": "spring-webflux-6.0.11", "des": "Represent the result of the invocation of a handler or a handler method.", "code": "public class HandlerResult extends Object {\n\treactor.core.publisher.Mono<HandlerResult> applyExceptionHandler(Throwable failure); // Deprecated, for removal: This API element is subject to removal in a future version. without a replacement; for internal invocation only, not used as of 6.0\n\tBindingContext getBindingContext(); // Return the BindingContext used for request handling.\n\tDispatchExceptionHandler getExceptionHandler(); // Return the configured exception handler.\n\tObject getHandler(); // Return the handler that handled the request.\n\torg.springframework.ui.Model getModel(); // Return the model used for request handling.\n\torg.springframework.core.ResolvableType getReturnType(); // Return the type of the value returned from the handler -- e.g.\n\torg.springframework.core.MethodParameter getReturnTypeSource(); // Return the MethodParameter from which returnType was created.\n\tObject getReturnValue(); // Return the value returned from the handler, if any.\n\tboolean hasExceptionHandler(); // Deprecated, for removal: This API element is subject to removal in a future version. in favor of checking via getExceptionHandler()\n\tHandlerResult setExceptionHandler(Function<Throwable,reactor.core.publisher.Mono<HandlerResult>> function); // Deprecated, for removal: This API element is subject to removal in a future version. in favor of setExceptionHandler(DispatchExceptionHandler)\n\tHandlerResult setExceptionHandler(DispatchExceptionHandler exceptionHandler); // HandlerAdapter classes can set this to have their exception handling mechanism applied to response rendering and to deferred exceptions when invoking a handler with an asynchronous return value.\n}"}
{"index": 7585, "repo": "cassandra-all-4.1.2", "des": "Represents a data rate type used for cassandra configuration.", "code": "Class DataRateSpec {\n\tboolean equals(java.lang.Object obj);\n\tdouble toBytesPerSecond();\n\tint toBytesPerSecondAsInt(); // Returns the data rate in bytes per second as an int\n\tdouble toKibibytesPerSecond();\n\tint toKibibytesPerSecondAsInt(); // Returns the data rate in kibibytes per second as an int\n\tdouble toMebibytesPerSecond();\n\tint toMebibytesPerSecondAsInt(); // Returns the data rate in mebibytes per second as an int\n\tdouble toMegabitsPerSecond(); // This method is required in order to support backward compatibility with the old unit used for a few Data Rate parameters before CASSANDRA-15234\n\tint toMegabitsPerSecondAsInt(); // Returns the data rate in megabits per second as an int.\n\tDataRateSpec.DataRateUnit unit();\n}"}
{"index": 3605, "repo": "hive-serde-4.0.0-alpha-2", "des": "LazyArray stores an array of Lazy Objects.", "code": "Class LazyArray {\n\tList<Object> getList(); // Returns the List of actual primitive objects.\n\tObject getListElementObject(int index); // Returns the actual primitive object at the index position inside the array represented by this LazyObject.\n\tint getListLength(); // Returns -1 for null array.\n\tvoid init(ByteArrayRef bytes, int start, int length); // Set the row data for this LazyArray.\n}"}
{"index": 14782, "repo": "spring-data-commons-3.1.2", "des": "Extension of PersistentPropertyAccessor that is also able to obtain and set values for PersistentPropertyPaths.", "code": "public interface PersistentPropertyPathAccessor<T> extends PersistentPropertyAccessor<T> {\n\tObject getProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path); // Return the value pointed to by the given PersistentPropertyPath.\n\tObject getProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path, AccessOptions.GetOptions options); // Return the value pointed to by the given PersistentPropertyPath.\n\tvoid setProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path, Object value); // Sets the given value for the PersistentProperty pointed to by the given PersistentPropertyPath.\n\tvoid setProperty(PersistentPropertyPath<? extends PersistentProperty<?>> path, Object value, AccessOptions.SetOptions options); // Sets the given value for the PersistentProperty pointed to by the given PersistentPropertyPath considering the given AccessOptions.\n}"}
{"index": 16749, "repo": "spring-jms-6.0.11", "des": "Internal abstraction used by the framework representing a message listener container.", "code": "public interface MessageListenerContainer extends org.springframework.context.SmartLifecycle {\n\tDestinationResolver getDestinationResolver(); // Return the DestinationResolver to use to resolve destinations by names.\n\tMessageConverter getMessageConverter(); // Return the MessageConverter that can be used to convert Message, if any.\n\tQosSettings getReplyQosSettings(); // Return the QosSettings to use when sending a reply, or null if the broker's defaults should be used.\n\tboolean isPubSubDomain(); // Return whether the Publish/Subscribe domain (Topics) is used.\n\tboolean isReplyPubSubDomain(); // Return whether the reply destination uses Publish/Subscribe domain (Topics).\n\tvoid setupMessageListener(Object messageListener); // Set up the message listener to use.\n}"}
{"index": 6300, "repo": "commons-codec-1.16.0", "des": "Encodes a string into a Metaphone value.", "code": "Class Metaphone {\n\tObject encode(Object obj); // Encodes an Object using the metaphone algorithm.\n\tString encode(String str); // Encodes a String using the Metaphone algorithm.\n\tint getMaxCodeLen(); // Returns the maxCodeLen.\n\tboolean isMetaphoneEqual(String str1, String str2); // Tests is the metaphones of two strings are identical.\n\tString metaphone(String txt); // Find the metaphone value of a String.\n\tvoid setMaxCodeLen(int maxCodeLen); // Sets the maxCodeLen.\n}"}
{"index": 17405, "repo": "groovy-4.0.13", "des": "Originally was grails.utils.GrailsUtils, removed some grails specific stuff.", "code": "public class StackTraceUtils extends Object {\n\tstatic void addClassTest(Closure test); // Adds a groovy.lang.Closure to test whether the stack trace element should be added or not.\n\tstatic Throwable deepSanitize(Throwable t); // Sanitize the exception and ALL nested causes\n\tstatic Throwable extractRootCause(Throwable t); // Extracts the root cause of the exception, no matter how nested it is\n\tstatic boolean isApplicationClass(String className);\n\tstatic void printSanitizedStackTrace(Throwable t);\n\tstatic void printSanitizedStackTrace(Throwable t, PrintWriter p);\n\tstatic Throwable sanitize(Throwable t); // Remove all apparently groovy-internal trace entries from the exception instance\n\tstatic Throwable sanitizeRootCause(Throwable t); // Get the root cause of an exception and sanitize it for display to the user\n}"}
{"index": 18124, "repo": "spring-ws-core-4.0.5", "des": "Implementation of the EndpointMapping interface that maps to endpoint using an XPath expression.", "code": "public class XPathPayloadEndpointMapping extends AbstractMapBasedEndpointMapping implements org.springframework.beans.factory.InitializingBean {\n\tvoid afterPropertiesSet();\n\tprotected String getLookupKeyForMessage(MessageContext messageContext); // Returns the endpoint key for the given message context.\n\tvoid setExpression(String expression); // Sets the XPath expression to be used.\n\tvoid setNamespaces(Map<String,String> namespaces); // Sets the namespaces bindings used in the expression.\n\tprotected boolean validateLookupKey(String key); // Validates the given endpoint key.\n}"}
{"index": 3982, "repo": "zookeeper-3.8.2", "des": "A counter refers to a value which can only increase.", "code": "Interface Counter {\n\tvoid add(long delta); // Increment the value by a given amount.\n\tlong get(); // Get the current value held by the counter.\n\tdefault void inc(); // Increment the value by one.\n}"}
{"index": 3547, "repo": "mahout-mr-0.13.0", "des": "Encodes a categorical values with an unbounded vocabulary.", "code": "Class StaticWordValueEncoder {\n\tprotected int hashForProbe(byte[] originalForm, int dataSize, String name, int probe); // Provides the unique hash for a particular probe.\n\tvoid setDictionary(Map<String,Double> dictionary); // Sets the weighting dictionary to be used by this encoder.\n\tvoid setMissingValueWeight(double missingValueWeight); // Sets the weight that is to be used for values that do not appear in the dictionary.\n\tprotected double weight(byte[] originalForm);\n}"}
{"index": 9535, "repo": "commons-math3-3.6.1", "des": "Chromosome represented by a vector of 0s and 1s.", "code": "Class BinaryChromosome {\n\tprotected void checkValidity(List<Integer> chromosomeRepresentation); // Asserts that representation can represent a valid chromosome.\n\tprotected boolean isSame(Chromosome another); // Returns true iff another has the same representation and therefore the same fitness.\n\tstatic List<Integer> randomBinaryRepresentation(int length); // Returns a representation of a random binary array of length length.\n}"}
{"index": 2616, "repo": "mahout-core-14.1", "des": "Eigenvalues and eigenvectors of a real matrix.", "code": "Class EigenDecomposition {\n\tMatrix getD(); // Return the block diagonal eigenvalue matrix\n\tVector getImagEigenvalues(); // Return the imaginary parts of the eigenvalues\n\tVector getRealEigenvalues(); // Return the real parts of the eigenvalues\n\tMatrix getV(); // Return the eigenvector matrix\n}"}
{"index": 5878, "repo": "hadoop-yarn-server-common-3.3.6", "des": "Protocol buffer based implementation of GetSubClusterPoliciesConfigurationsResponse.", "code": "Class GetSubClusterPoliciesConfigurationsResponsePBImpl {\n\tboolean equals(Object other);\n\tList<SubClusterPolicyConfiguration> getPoliciesConfigs(); // Get all the policies configured in the system.\n\torg.apache.hadoop.yarn.federation.proto.YarnServerFederationProtos.GetSubClusterPoliciesConfigurationsResponseProto getProto();\n\tvoid setPoliciesConfigs(List<SubClusterPolicyConfiguration> policyConfigurations); // Sets all the policies configured in the system.\n}"}
{"index": 557, "repo": "ignite-core-2.15.0", "des": "In-memory database (cache) rebalancing event.", "code": "Class CacheRebalancingEvent {\n\tString cacheName(); // Gets cache name.\n\tString discoveryEventName(); // Gets name of discovery event that triggered this rebalancing event.\n\tint discoveryEventType(); // Gets type of discovery event that triggered this rebalancing event.\n\tClusterNode discoveryNode(); // Gets shadow of the node that triggered this rebalancing event.\n\tlong discoveryTimestamp(); // Gets timestamp of discovery event that caused this rebalancing event.\n\tint partition(); // Gets partition for the event.\n\tString shortDisplay(); // Gets a shortened version of toString() result.\n}"}
{"index": 12916, "repo": "spring-data-mongodb-4.1.2", "des": "TextIndexDefinition.TextIndexDefinitionBuilder helps defining options for creating TextIndexDefinition.", "code": "public static class TextIndexDefinition.TextIndexDefinitionBuilder extends Object {\n\tTextIndexDefinition build();\n\tTextIndexDefinition.TextIndexDefinitionBuilder named(String name); // Define the name to be used when creating the index in the store.\n\tTextIndexDefinition.TextIndexDefinitionBuilder onAllFields(); // Define the index to span all fields using wildcard.\n\tTextIndexDefinition.TextIndexDefinitionBuilder onField(String fieldname); // Include given field with default weight.\n\tTextIndexDefinition.TextIndexDefinitionBuilder onField(String fieldname, Float weight); // Include given field with weight.\n\tTextIndexDefinition.TextIndexDefinitionBuilder onFields(String... fieldnames); // Include given fields with default weight.\n\tTextIndexDefinition.TextIndexDefinitionBuilder partial(IndexFilter filter); // Only index the documents that meet the specified filter expression.\n\tTextIndexDefinition.TextIndexDefinitionBuilder withDefaultLanguage(String language); // Define the default language to be used when indexing documents.\n\tTextIndexDefinition.TextIndexDefinitionBuilder withLanguageOverride(String fieldname); // Define field for language override.\n\tTextIndexDefinition.TextIndexDefinitionBuilder withSimpleCollation(); // Configure to use simple Collation.\n}"}
{"index": 997, "repo": "ignite-core-2.15.0", "des": "Management MBean for job stealing based collision SPI.", "code": "Interface JobStealingCollisionSpiMBean {\n\tint getActiveJobsThreshold(); // Gets number of jobs that can be executed in parallel.\n\tint getCurrentActiveJobsNumber(); // Gets current number of jobs that are being executed.\n\tint getCurrentHeldJobsNumber(); // Gets number of currently 'held' jobs.\n\tint getCurrentJobsToStealNumber(); // Gets current number of jobs to be stolen.\n\tint getCurrentRunningJobsNumber(); // Gets number of currently running (not 'held) jobs.\n\tint getCurrentWaitJobsNumber(); // Gets current number of jobs that wait for the execution.\n\tint getMaximumStealingAttempts(); // Gets maximum number of attempts to steal job by another node.\n\tlong getMessageExpireTime(); // Message expire time configuration parameter.\n\tMap<String,? extends Serializable> getStealingAttributes(); // Configuration parameter to enable stealing to/from only nodes that have these attributes set (see ClusterNode.attribute(String) and IgniteConfiguration.getUserAttributes() methods).\n\tint getTotalStolenJobsNumber(); // Gets total number of stolen jobs.\n\tint getWaitJobsThreshold(); // Gets job count threshold at which this node will start stealing jobs from other nodes.\n\tboolean isStealingEnabled(); // Gets flag indicating whether this node should attempt to steal jobs from other nodes.\n\tvoid setActiveJobsThreshold(int activeJobsThreshold); // Sets number of jobs that can be executed in parallel.\n\tvoid setMaximumStealingAttempts(int maximumStealingAttempts); // Gets maximum number of attempts to steal job by another node.\n\tvoid setMessageExpireTime(long msgExpireTime); // Message expire time configuration parameter.\n\tvoid setStealingEnabled(boolean stealingEnabled); // Gets flag indicating whether this node should attempt to steal jobs from other nodes.\n\tvoid setWaitJobsThreshold(int waitJobsThreshold); // Sets job count threshold at which this node will start stealing jobs from other nodes.\n}"}
{"index": 11390, "repo": "spring-context-6.0.11", "des": "Strategy interface for building message codes from validation error codes.", "code": "public interface MessageCodesResolver {\n\tString[] resolveMessageCodes(String errorCode, String objectName); // Build message codes for the given error code and object name.\n\tString[] resolveMessageCodes(String errorCode, String objectName, String field, Class<?> fieldType); // Build message codes for the given error code and field specification.\n}"}
{"index": 10337, "repo": "spring-core-6.0.11", "des": "ParameterNameDiscoverer implementation that tries several discoverer delegates in succession.", "code": "public class PrioritizedParameterNameDiscoverer extends Object implements ParameterNameDiscoverer {\n\tvoid addDiscoverer(ParameterNameDiscoverer pnd); // Add a further ParameterNameDiscoverer delegate to the list of discoverers that this PrioritizedParameterNameDiscoverer checks.\n\tString[] getParameterNames(Constructor<?> ctor); // Return parameter names for a constructor, or null if they cannot be determined.\n\tString[] getParameterNames(Method method); // Return parameter names for a method, or null if they cannot be determined.\n}"}
{"index": 2239, "repo": "hive-exec-4.0.0-alpha-2", "des": "The set of fields this struct contains, along with convenience methods for finding and manipulating them.", "code": "Enum Query._Fields {\n\tstatic Query._Fields findByName(String name); // Find the _Fields constant that matches name, or null if its not found.\n\tstatic Query._Fields findByThriftId(int fieldId); // Find the _Fields constant that matches fieldId, or null if its not found.\n\tstatic Query._Fields findByThriftIdOrThrow(int fieldId); // Find the _Fields constant that matches fieldId, throwing an exception if it is not found.\n\tString getFieldName();\n\tshort getThriftFieldId();\n\tstatic Query._Fields valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic Query._Fields[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 13699, "repo": "spring-webmvc-6.0.11", "des": "Resolver that delegates to the chain, and if a resource is found, it then attempts to find an encoded (e.g.", "code": "public class EncodedResourceResolver extends AbstractResourceResolver {\n\tList<String> getContentCodings(); // Return a read-only list with the supported content codings.\n\tMap<String,String> getExtensions(); // Return a read-only map with coding-to-extension mappings.\n\tvoid registerExtension(String coding, String extension); // Java config friendly alternative to setExtensions(Map).\n\tprotected org.springframework.core.io.Resource resolveResourceInternal(HttpServletRequest request, String requestPath, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n\tprotected String resolveUrlPathInternal(String resourceUrlPath, List<? extends org.springframework.core.io.Resource> locations, ResourceResolverChain chain);\n\tvoid setContentCodings(List<String> codings); // Configure the supported content codings in order of preference.\n\tvoid setExtensions(Map<String,String> extensions); // Configure mappings from content codings to file extensions.\n}"}
{"index": 8191, "repo": "spring-ws-3.0.10.RELEASE", "des": "Workflow interface that allows for customized endpoint invocation chains.", "code": "Interface EndpointInterceptor {\n\tvoid afterCompletion(MessageContext messageContext, Object endpoint, Exception ex); // Callback after completion of request and response (fault) processing.\n\tboolean handleFault(MessageContext messageContext, Object endpoint); // Processes the outgoing response fault.\n\tboolean handleRequest(MessageContext messageContext, Object endpoint); // Processes the incoming request message.\n\tboolean handleResponse(MessageContext messageContext, Object endpoint); // Processes the outgoing response message.\n}"}
{"index": 285, "repo": "hadoop-yarn-client-3.3.6", "des": "This is the client for YARN's shared cache.", "code": "Class SharedCacheClient {\n\tstatic SharedCacheClient createSharedCacheClient();\n\tabstract String getFileChecksum(org.apache.hadoop.fs.Path sourceFile); // A convenience method to calculate the checksum of a specified file.\n\tabstract void release(org.apache.hadoop.yarn.api.records.ApplicationId applicationId, String resourceKey); // The method to release a resource with the SharedCacheManager. This method is called once an application is no longer using a claimed resource in the shared cache.\n\tabstract org.apache.hadoop.yarn.api.records.URL use(org.apache.hadoop.yarn.api.records.ApplicationId applicationId, String resourceKey); // The method to claim a resource with the SharedCacheManager. The client uses a checksum to identify the resource and an ApplicationId to identify which application will be using the resource.\n}"}
{"index": 16105, "repo": "spring-data-cassandra-4.1.2", "des": "Base class for RepositoryQuery implementations for Cassandra.", "code": "public abstract class AbstractCassandraQuery extends CassandraRepositoryQuerySupport {\n\tprotected abstract com.datastax.oss.driver.api.core.cql.SimpleStatement createQuery(CassandraParameterAccessor accessor); // Creates a Statement using the given ParameterAccessor\n\tObject execute(Object[] parameters);\n\tprotected CassandraOperations getOperations(); // Return a reference to the CassandraOperations used to execute this Cassandra query.\n\tprotected abstract boolean isCountQuery(); // Returns whether the query should get a count projection applied.\n\tprotected abstract boolean isExistsQuery(); // Returns whether the query should get an exists projection applied.\n\tprotected abstract boolean isLimiting(); // Return whether the query has an explicit limit set.\n\tprotected abstract boolean isModifyingQuery(); // Returns whether the query is a modifying query.\n}"}
{"index": 17572, "repo": "spring-ldap-core-3.1.0", "des": "An AuthenticationSource is responsible for providing the principal (user DN) and credentials to be used when creating a new context.", "code": "public interface AuthenticationSource {\n\tString getCredentials(); // Get the credentials to use when creating an authenticated context.\n\tString getPrincipal(); // Get the principal to use when creating an authenticated context.\n}"}
{"index": 16957, "repo": "spring-orm-6.0.11", "des": "JpaDialect implementation for Eclipse Persistence Services (EclipseLink).", "code": "public class EclipseLinkJpaDialect extends DefaultJpaDialect {\n\tObject beginTransaction(EntityManager entityManager, org.springframework.transaction.TransactionDefinition definition); // This implementation invokes the standard JPA Transaction.begin method.\n\torg.springframework.jdbc.datasource.ConnectionHandle getJdbcConnection(EntityManager entityManager, boolean readOnly); // This implementation always returns null, indicating that no JDBC Connection can be provided.\n\tvoid setLazyDatabaseTransaction(boolean lazyDatabaseTransaction); // Set whether to lazily start a database resource transaction within a Spring-managed EclipseLink transaction.\n}"}
{"index": 3087, "repo": "tink-1.10.0", "des": "The status of FIPS compatibility of an algorithm.", "code": "Enum TinkFipsUtil.AlgorithmFipsCompatibility {\n\tabstract boolean isCompatible();\n\tstatic TinkFipsUtil.AlgorithmFipsCompatibility valueOf(String name); // Returns the enum constant of this type with the specified name.\n\tstatic TinkFipsUtil.AlgorithmFipsCompatibility[] values(); // Returns an array containing the constants of this enum type, in the order they are declared.\n}"}
{"index": 16029, "repo": "spring-integration-jms-6.1.2", "des": "A MessageHandlerSpec for a JmsOutboundGateway.", "code": "public class JmsOutboundGatewaySpec extends org.springframework.integration.dsl.MessageHandlerSpec<JmsOutboundGatewaySpec,JmsOutboundGateway> {\n\tJmsOutboundGatewaySpec correlationKey(String correlationKey);\n\tJmsOutboundGatewaySpec deliveryPersistent(boolean deliveryPersistent);\n\tJmsOutboundGatewaySpec destinationResolver(org.springframework.jms.support.destination.DestinationResolver destinationResolver);\n\tJmsOutboundGatewaySpec explicitQosEnabled(boolean explicitQosEnabled);\n\tJmsOutboundGatewaySpec extractReplyPayload(boolean extractPayload);\n\tJmsOutboundGatewaySpec extractRequestPayload(boolean extractPayload);\n\tJmsOutboundGatewaySpec headerMapper(JmsHeaderMapper headerMapper);\n\tJmsOutboundGatewaySpec jmsMessageConverter(org.springframework.jms.support.converter.MessageConverter messageConverter);\n\tJmsOutboundGatewaySpec priority(int priority); // Default priority.\n\tJmsOutboundGatewaySpec receiveTimeout(long receiveTimeout);\n\tJmsOutboundGatewaySpec replyContainer(); // Configure a reply container with default properties.\n\tJmsOutboundGatewaySpec replyContainer(Consumer<JmsOutboundGatewaySpec.ReplyContainerSpec> configurer); // Configure a reply container with a reply container specification determined by invoking the Consumer callback with a JmsOutboundGatewaySpec.ReplyContainerSpec.\n\tJmsOutboundGatewaySpec replyDestination(jakarta.jms.Destination destination);\n\tJmsOutboundGatewaySpec replyDestination(String destination);\n\t<P> JmsOutboundGatewaySpec replyDestination(Function<org.springframework.messaging.Message<P>,?> destinationFunction); // Configure a Function that will be invoked at run time to determine the destination from which a reply will be received.\n\tJmsOutboundGatewaySpec replyDestinationExpression(String destination);\n\tJmsOutboundGatewaySpec replyPubSubDomain(boolean pubSubDomain);\n\tJmsOutboundGatewaySpec requestDestination(jakarta.jms.Destination destination);\n\tJmsOutboundGatewaySpec requestDestination(String destination);\n\t<P> JmsOutboundGatewaySpec requestDestination(Function<org.springframework.messaging.Message<P>,?> destinationFunction); // Configure a Function that will be invoked at runtime to determine the destination to which a message will be sent.\n\tJmsOutboundGatewaySpec requestDestinationExpression(String destination);\n\tJmsOutboundGatewaySpec requestPubSubDomain(boolean pubSubDomain);\n\tJmsOutboundGatewaySpec timeToLive(long timeToLive);\n}"}
